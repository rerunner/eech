; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\3d\3dshadow.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_fabsf
PUBLIC	?fabs@@YGMM@Z					; fabs
PUBLIC	?asm_convert_float_to_int@@YGXMPAH@Z		; asm_convert_float_to_int
PUBLIC	?generate_lookup_outcode@@YGHHHHH@Z		; generate_lookup_outcode
PUBLIC	?initialise_3d_shadows@@YGXXZ			; initialise_3d_shadows
PUBLIC	?set_3d_shadows_detailed@@YGXH@Z		; set_3d_shadows_detailed
PUBLIC	?set_3d_shadows_translucent@@YGXH@Z		; set_3d_shadows_translucent
PUBLIC	?get_3d_shadows_translucent@@YGHXZ		; get_3d_shadows_translucent
PUBLIC	?draw_3d_object_shadow@@YGXPAUOBJECT_3D_INSTANCE@@@Z ; draw_3d_object_shadow
PUBLIC	?get_object_3d_instance_shadow_visibility@@YG?AW4OBJECT_3D_VISIBILITY@@PAUOBJECT_3D_INSTANCE@@@Z ; get_object_3d_instance_shadow_visibility
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	__real@3f7ff800
PUBLIC	__real@3f7fff00
PUBLIC	__real@3f800000
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fbc28f5c28f5c29
PUBLIC	__real@3fd3333333333333
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe2e147ae147ae1
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@406fe00000000000
PUBLIC	__real@4084500000000000
PUBLIC	__real@40dfffc000000000
PUBLIC	__real@425c0000
PUBLIC	__real@437f0000
PUBLIC	__real@bf00001000100000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	_memcpy:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_fabs:PROC
EXTRN	?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z:PROC	; normalise_any_3d_vector
EXTRN	?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z:PROC	; get_3d_vector_magnitude
EXTRN	?get_fog_distance_value@@YGMM@Z:PROC		; get_fog_distance_value
EXTRN	?set_d3d_fog_face_intensity@@YGXH@Z:PROC	; set_d3d_fog_face_intensity
EXTRN	?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; set_d3d_int_state
EXTRN	?set_d3d_texture_stage_state@@YGXHHH@Z:PROC	; set_d3d_texture_stage_state
EXTRN	?set_d3d_shadow_colour@@YGXMMMM@Z:PROC		; set_d3d_shadow_colour
EXTRN	?set_d3d_shadow_zbias@@YGXM@Z:PROC		; set_d3d_shadow_zbias
EXTRN	?get_object_approximation_number@@YGHHMPAH@Z:PROC ; get_object_approximation_number
EXTRN	?get_object_shadow_polygon_object@@YGHH@Z:PROC	; get_object_shadow_polygon_object
EXTRN	?get_object_shadow_approximation_number@@YGHHMPAH@Z:PROC ; get_object_shadow_approximation_number
EXTRN	?wrender_3d_shadow_surface_plain_polygon@@YGXPAUOBJECT_3D_FACE@@@Z:PROC ; wrender_3d_shadow_surface_plain_polygon
EXTRN	?wrender_3d_shadow_surface_alpha_textured_polygon@@YGXPAUOBJECT_3D_FACE@@@Z:PROC ; wrender_3d_shadow_surface_alpha_textured_polygon
EXTRN	?position_on_3d_terrain@@YGHMM@Z:PROC		; position_on_3d_terrain
EXTRN	?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z:PROC ; get_3d_terrain_point_data
EXTRN	?get_3d_terrain_last_normal@@YGXPAUVEC3D@@@Z:PROC ; get_3d_terrain_last_normal
EXTRN	?active_viewport@@3UVIEWPORT@@A:BYTE		; active_viewport
EXTRN	?clip_hither@@3MA:DWORD				; clip_hither
EXTRN	?zbuffer_default_comparison@@3W4_D3DCMPFUNC@@A:DWORD ; zbuffer_default_comparison
EXTRN	?zbuffer_shadow_comparison@@3W4_D3DCMPFUNC@@A:DWORD ; zbuffer_shadow_comparison
EXTRN	?zbuffer_constant@@3NA:QWORD			; zbuffer_constant
EXTRN	?zbuffer_constant_shadow_bias@@3NA:QWORD	; zbuffer_constant_shadow_bias
EXTRN	?zbuffer_constant_shadow_bias_decrement@@3NA:QWORD ; zbuffer_constant_shadow_bias_decrement
EXTRN	?active_3d_environment@@3PAUENV_3D@@A:DWORD	; active_3d_environment
EXTRN	?visual_3d_vp@@3PAUVIEWPOINT@@A:DWORD		; visual_3d_vp
EXTRN	?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A:DWORD ; objects_3d_scene_database
EXTRN	?objects_3d_data@@3PAUOBJECT_3D@@A:DWORD	; objects_3d_data
EXTRN	?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A:BYTE	; ambient_3d_light
EXTRN	?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A:DWORD	; current_3d_sun
EXTRN	?current_3d_lights@@3PAULIGHT_3D_SOURCE@@A:DWORD ; current_3d_lights
EXTRN	?shadows_strength@@3MA:DWORD			; shadows_strength
EXTRN	?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A:DWORD ; current_object_3d_surface
EXTRN	?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A:DWORD ; current_object_3d_point_list
EXTRN	?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A:DWORD ; current_object_3d_face_normal_list
EXTRN	?current_object_3d_transformed_normals@@3PAUOBJECT_3D_TRANSFORMED_POINT_NORMAL@@A:DWORD ; current_object_3d_transformed_normals
EXTRN	?object_3d_points_current_base@@3HA:DWORD	; object_3d_points_current_base
EXTRN	?object_3d_object_current_base@@3HA:DWORD	; object_3d_object_current_base
EXTRN	?object_3d_light_3d_current_base@@3HA:DWORD	; object_3d_light_3d_current_base
EXTRN	?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A:DWORD ; current_object_3d_surface_point_texture_list
EXTRN	?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A:DWORD ; current_object_3d_surface_point_list
EXTRN	?current_object_3d_surface_point_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A:DWORD ; current_object_3d_surface_point_normal_list
EXTRN	?current_object_3d_object_base@@3PAUOBJECT_3D_INFO@@A:DWORD ; current_object_3d_object_base
EXTRN	?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A:BYTE ; object_3d_object_base
EXTRN	?rotation_3d@@3PAY02MA:BYTE			; rotation_3d
EXTRN	?transformed_3d_points@@3PAUVERTEX@@A:BYTE	; transformed_3d_points
EXTRN	?transformed_3d_normals@@3PAUOBJECT_3D_TRANSFORMED_POINT_NORMAL@@A:BYTE ; transformed_3d_normals
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?detailed_3d_shadows@@3HA DD 01H DUP (?)		; detailed_3d_shadows
_BSS	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@bf00001000100000
CONST	SEGMENT
__real@bf00001000100000 DQ 0bf00001000100000r	; -3.0518e-05
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@425c0000
CONST	SEGMENT
__real@425c0000 DD 0425c0000r			; 55
CONST	ENDS
;	COMDAT __real@40dfffc000000000
CONST	SEGMENT
__real@40dfffc000000000 DQ 040dfffc000000000r	; 32767
CONST	ENDS
;	COMDAT __real@4084500000000000
CONST	SEGMENT
__real@4084500000000000 DQ 04084500000000000r	; 650
CONST	ENDS
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe2e147ae147ae1
CONST	SEGMENT
__real@3fe2e147ae147ae1 DQ 03fe2e147ae147ae1r	; 0.59
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd3333333333333
CONST	SEGMENT
__real@3fd3333333333333 DQ 03fd3333333333333r	; 0.3
CONST	ENDS
;	COMDAT __real@3fbc28f5c28f5c29
CONST	SEGMENT
__real@3fbc28f5c28f5c29 DQ 03fbc28f5c28f5c29r	; 0.11
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7fff00
CONST	SEGMENT
__real@3f7fff00 DD 03f7fff00r			; 0.999985
CONST	ENDS
;	COMDAT __real@3f7ff800
CONST	SEGMENT
__real@3f7ff800 DD 03f7ff800r			; 0.999878
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?translucent_3d_shadows@@3HA DD 01H			; translucent_3d_shadows
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dshadow.c
;	COMDAT ?transform_3d_object_shadow@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAUVIEWPOINT@@111NNH@Z
_TEXT	SEGMENT
$T1 = -320						; size = 4
$T2 = -316						; size = 4
$T3 = -312						; size = 4
$T4 = -308						; size = 4
$T5 = -304						; size = 4
$T6 = -300						; size = 4
_j$7 = -232						; size = 4
_i$8 = -228						; size = 4
_q$9 = -224						; size = 4
_z$10 = -220						; size = 4
_y$11 = -216						; size = 4
_x$12 = -212						; size = 4
_z_world$13 = -208					; size = 4
_y_world$14 = -204					; size = 4
_x_world$15 = -200					; size = 4
_pointz$16 = -196					; size = 4
_pointy$17 = -192					; size = 4
_pointx$18 = -188					; size = 4
_t$19 = -184						; size = 4
_n_s$20 = -180						; size = 4
_rotation_matrix$ = -176				; size = 36
_iymin$ = -140						; size = 4
_iymax$ = -136						; size = 4
_ixmin$ = -132						; size = 4
_ixmax$ = -128						; size = 4
_oymin$ = -124						; size = 4
_oymax$ = -120						; size = 4
_oxmin$ = -116						; size = 4
_oxmax$ = -112						; size = 4
_pos_z$ = -108						; size = 4
_pos_y$ = -104						; size = 4
_pos_x$ = -100						; size = 4
_zmax$ = -96						; size = 4
_ymax$ = -92						; size = 4
_xmax$ = -88						; size = 4
_tmp_vertex$ = -84					; size = 64
_result_points$ = -20					; size = 4
_last_transformed_point$ = -16				; size = 4
_points$ = -12						; size = 4
_number_of_points$ = -8					; size = 4
_count$ = -4						; size = 4
_object$ = 8						; size = 4
_object_3d_scale$ = 12					; size = 4
_vp$ = 16						; size = 4
_pos$ = 20						; size = 4
_terrain_normal$ = 24					; size = 4
_projection_direction$ = 28				; size = 4
_projection_constant$ = 32				; size = 8
_projection_factor$ = 40				; size = 8
_points_base$ = 48					; size = 4
?transform_3d_object_shadow@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAUVIEWPOINT@@111NNH@Z PROC ; transform_3d_object_shadow, COMDAT

; 911  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 40 01 00
	00		 sub	 esp, 320		; 00000140H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 912  : 
; 913  : 	int
; 914  : 		count,
; 915  : 		number_of_points;
; 916  : 
; 917  : 	object_short_3d_point
; 918  : 		*points;
; 919  : 
; 920  : 	vertex
; 921  : 		*last_transformed_point,
; 922  : 		*result_points,
; 923  : 		tmp_vertex;
; 924  : 
; 925  : 	float
; 926  : 		xmax,
; 927  : 		ymax,
; 928  : 		zmax,
; 929  : 		pos_x,
; 930  : 		pos_y,
; 931  : 		pos_z,
; 932  : 		oxmax,
; 933  : 		oxmin,
; 934  : 		oymax,
; 935  : 		oymin;
; 936  : 
; 937  : 	int
; 938  : 		ixmax,
; 939  : 		ixmin,
; 940  : 		iymax,
; 941  : 		iymin;
; 942  : 
; 943  : 	matrix3x3
; 944  : 		rotation_matrix;
; 945  : 
; 946  : 	number_of_points = object->number_of_points;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0000f	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00012	89 4d f8	 mov	 DWORD PTR _number_of_points$[ebp], ecx

; 947  : 
; 948  : 	points = object->points;

  00015	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00018	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  0001b	89 4d f4	 mov	 DWORD PTR _points$[ebp], ecx

; 949  : 
; 950  : 	result_points = &transformed_3d_points[points_base];

  0001e	8b 45 30	 mov	 eax, DWORD PTR _points_base$[ebp]
  00021	c1 e0 06	 shl	 eax, 6
  00024	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_points@@3PAUVERTEX@@A ; transformed_3d_points
  00029	89 45 ec	 mov	 DWORD PTR _result_points$[ebp], eax

; 951  : 
; 952  : 	last_transformed_point = &tmp_vertex;

  0002c	8d 45 ac	 lea	 eax, DWORD PTR _tmp_vertex$[ebp]
  0002f	89 45 f0	 mov	 DWORD PTR _last_transformed_point$[ebp], eax

; 953  : 
; 954  : 	pos_x = pos->x;

  00032	8b 45 14	 mov	 eax, DWORD PTR _pos$[ebp]
  00035	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00039	f3 0f 11 45 9c	 movss	 DWORD PTR _pos_x$[ebp], xmm0

; 955  : 
; 956  : 	pos_y = pos->y;

  0003e	8b 45 14	 mov	 eax, DWORD PTR _pos$[ebp]
  00041	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00046	f3 0f 11 45 98	 movss	 DWORD PTR _pos_y$[ebp], xmm0

; 957  : 
; 958  : 	pos_z = pos->z;

  0004b	8b 45 14	 mov	 eax, DWORD PTR _pos$[ebp]
  0004e	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00053	f3 0f 11 45 94	 movss	 DWORD PTR _pos_z$[ebp], xmm0

; 959  : 
; 960  : 	memcpy ( rotation_matrix, vp->attitude, sizeof ( matrix3x3 ) );

  00058	6a 24		 push	 36			; 00000024H
  0005a	8b 45 10	 mov	 eax, DWORD PTR _vp$[ebp]
  0005d	83 c0 0c	 add	 eax, 12			; 0000000cH
  00060	50		 push	 eax
  00061	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _rotation_matrix$[ebp]
  00067	51		 push	 ecx
  00068	e8 00 00 00 00	 call	 _memcpy
  0006d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 961  : 
; 962  : 	//
; 963  : 	// Calculate the object's rotation matrix, to transform its 3d points relative to the view.
; 964  : 	//
; 965  : 
; 966  : 	xmax = max ( fabs ( object->bounding_box.xmin ), fabs ( object->bounding_box.xmax ) );

  00070	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00073	51		 push	 ecx
  00074	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00079	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007e	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00083	d9 9d d4 fe ff
	ff		 fstp	 DWORD PTR $T6[ebp]
  00089	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  0008c	51		 push	 ecx
  0008d	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  00092	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00097	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  0009c	d9 9d d0 fe ff
	ff		 fstp	 DWORD PTR $T5[ebp]
  000a2	8d 95 d4 fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  000a8	52		 push	 edx
  000a9	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  000b5	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000b9	f3 0f 11 45 a8	 movss	 DWORD PTR _xmax$[ebp], xmm0

; 967  : 	ymax = max ( fabs ( object->bounding_box.ymin ), fabs ( object->bounding_box.ymax ) );

  000be	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000c1	51		 push	 ecx
  000c2	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  000c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cc	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  000d1	d9 9d cc fe ff
	ff		 fstp	 DWORD PTR $T4[ebp]
  000d7	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  000da	51		 push	 ecx
  000db	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  000e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e5	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  000ea	d9 9d c8 fe ff
	ff		 fstp	 DWORD PTR $T3[ebp]
  000f0	8d 95 cc fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  000f6	52		 push	 edx
  000f7	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  000fd	50		 push	 eax
  000fe	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00103	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00107	f3 0f 11 45 a4	 movss	 DWORD PTR _ymax$[ebp], xmm0

; 968  : 	zmax = max ( fabs ( object->bounding_box.zmin ), fabs ( object->bounding_box.zmax ) );

  0010c	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0010f	51		 push	 ecx
  00110	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [eax+36]
  00115	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011a	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  0011f	d9 9d c4 fe ff
	ff		 fstp	 DWORD PTR $T2[ebp]
  00125	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  00128	51		 push	 ecx
  00129	f3 0f 10 41 20	 movss	 xmm0, DWORD PTR [ecx+32]
  0012e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00133	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00138	d9 9d c0 fe ff
	ff		 fstp	 DWORD PTR $T1[ebp]
  0013e	8d 95 c4 fe ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  00144	52		 push	 edx
  00145	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0014b	50		 push	 eax
  0014c	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00151	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00155	f3 0f 11 45 a0	 movss	 DWORD PTR _zmax$[ebp], xmm0

; 969  : 
; 970  : 	rotation_matrix[0][0] *= object_3d_scale->x * ( xmax / 32767.0 );

  0015a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0015f	6b c8 00	 imul	 ecx, eax, 0
  00162	8d 94 0d 50 ff
	ff ff		 lea	 edx, DWORD PTR _rotation_matrix$[ebp+ecx]
  00169	b8 04 00 00 00	 mov	 eax, 4
  0016e	6b c8 00	 imul	 ecx, eax, 0
  00171	8b 45 0c	 mov	 eax, DWORD PTR _object_3d_scale$[ebp]
  00174	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00178	f3 0f 5a 4d a8	 cvtss2sd xmm1, DWORD PTR _xmax$[ebp]
  0017d	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  00185	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00189	f3 0f 5a 0c 0a	 cvtss2sd xmm1, DWORD PTR [edx+ecx]
  0018e	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00192	b9 04 00 00 00	 mov	 ecx, 4
  00197	6b d1 00	 imul	 edx, ecx, 0
  0019a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0019f	6b c8 00	 imul	 ecx, eax, 0
  001a2	8d 84 0d 50 ff
	ff ff		 lea	 eax, DWORD PTR _rotation_matrix$[ebp+ecx]
  001a9	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  001ad	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 971  : 	rotation_matrix[0][1] *= object_3d_scale->x * ( xmax / 32767.0 );

  001b2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001b7	6b c8 00	 imul	 ecx, eax, 0
  001ba	8d 94 0d 50 ff
	ff ff		 lea	 edx, DWORD PTR _rotation_matrix$[ebp+ecx]
  001c1	b8 04 00 00 00	 mov	 eax, 4
  001c6	c1 e0 00	 shl	 eax, 0
  001c9	8b 4d 0c	 mov	 ecx, DWORD PTR _object_3d_scale$[ebp]
  001cc	f3 0f 5a 01	 cvtss2sd xmm0, DWORD PTR [ecx]
  001d0	f3 0f 5a 4d a8	 cvtss2sd xmm1, DWORD PTR _xmax$[ebp]
  001d5	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  001dd	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  001e1	f3 0f 5a 0c 02	 cvtss2sd xmm1, DWORD PTR [edx+eax]
  001e6	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  001ea	ba 04 00 00 00	 mov	 edx, 4
  001ef	c1 e2 00	 shl	 edx, 0
  001f2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001f7	6b c8 00	 imul	 ecx, eax, 0
  001fa	8d 84 0d 50 ff
	ff ff		 lea	 eax, DWORD PTR _rotation_matrix$[ebp+ecx]
  00201	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00205	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 972  : 	rotation_matrix[0][2] *= object_3d_scale->x * ( xmax / 32767.0 );

  0020a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0020f	6b c8 00	 imul	 ecx, eax, 0
  00212	8d 94 0d 50 ff
	ff ff		 lea	 edx, DWORD PTR _rotation_matrix$[ebp+ecx]
  00219	b8 04 00 00 00	 mov	 eax, 4
  0021e	d1 e0		 shl	 eax, 1
  00220	8b 4d 0c	 mov	 ecx, DWORD PTR _object_3d_scale$[ebp]
  00223	f3 0f 5a 01	 cvtss2sd xmm0, DWORD PTR [ecx]
  00227	f3 0f 5a 4d a8	 cvtss2sd xmm1, DWORD PTR _xmax$[ebp]
  0022c	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  00234	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00238	f3 0f 5a 0c 02	 cvtss2sd xmm1, DWORD PTR [edx+eax]
  0023d	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00241	ba 04 00 00 00	 mov	 edx, 4
  00246	d1 e2		 shl	 edx, 1
  00248	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0024d	6b c8 00	 imul	 ecx, eax, 0
  00250	8d 84 0d 50 ff
	ff ff		 lea	 eax, DWORD PTR _rotation_matrix$[ebp+ecx]
  00257	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0025b	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 973  : 
; 974  : 	rotation_matrix[1][0] *= object_3d_scale->y * ( ymax / 32767.0 );

  00260	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00265	c1 e0 00	 shl	 eax, 0
  00268	8d 8c 05 50 ff
	ff ff		 lea	 ecx, DWORD PTR _rotation_matrix$[ebp+eax]
  0026f	ba 04 00 00 00	 mov	 edx, 4
  00274	6b c2 00	 imul	 eax, edx, 0
  00277	8b 55 0c	 mov	 edx, DWORD PTR _object_3d_scale$[ebp]
  0027a	f3 0f 5a 42 04	 cvtss2sd xmm0, DWORD PTR [edx+4]
  0027f	f3 0f 5a 4d a4	 cvtss2sd xmm1, DWORD PTR _ymax$[ebp]
  00284	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  0028c	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00290	f3 0f 5a 0c 01	 cvtss2sd xmm1, DWORD PTR [ecx+eax]
  00295	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00299	b8 04 00 00 00	 mov	 eax, 4
  0029e	6b c8 00	 imul	 ecx, eax, 0
  002a1	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  002a6	c1 e2 00	 shl	 edx, 0
  002a9	8d 84 15 50 ff
	ff ff		 lea	 eax, DWORD PTR _rotation_matrix$[ebp+edx]
  002b0	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  002b4	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 975  : 	rotation_matrix[1][1] *= object_3d_scale->y * ( ymax / 32767.0 );

  002b9	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002be	c1 e0 00	 shl	 eax, 0
  002c1	8d 8c 05 50 ff
	ff ff		 lea	 ecx, DWORD PTR _rotation_matrix$[ebp+eax]
  002c8	ba 04 00 00 00	 mov	 edx, 4
  002cd	c1 e2 00	 shl	 edx, 0
  002d0	8b 45 0c	 mov	 eax, DWORD PTR _object_3d_scale$[ebp]
  002d3	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  002d8	f3 0f 5a 4d a4	 cvtss2sd xmm1, DWORD PTR _ymax$[ebp]
  002dd	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  002e5	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  002e9	f3 0f 5a 0c 11	 cvtss2sd xmm1, DWORD PTR [ecx+edx]
  002ee	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  002f2	b9 04 00 00 00	 mov	 ecx, 4
  002f7	c1 e1 00	 shl	 ecx, 0
  002fa	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  002ff	c1 e2 00	 shl	 edx, 0
  00302	8d 84 15 50 ff
	ff ff		 lea	 eax, DWORD PTR _rotation_matrix$[ebp+edx]
  00309	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0030d	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 976  : 	rotation_matrix[1][2] *= object_3d_scale->y * ( ymax / 32767.0 );

  00312	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00317	c1 e0 00	 shl	 eax, 0
  0031a	8d 8c 05 50 ff
	ff ff		 lea	 ecx, DWORD PTR _rotation_matrix$[ebp+eax]
  00321	ba 04 00 00 00	 mov	 edx, 4
  00326	d1 e2		 shl	 edx, 1
  00328	8b 45 0c	 mov	 eax, DWORD PTR _object_3d_scale$[ebp]
  0032b	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  00330	f3 0f 5a 4d a4	 cvtss2sd xmm1, DWORD PTR _ymax$[ebp]
  00335	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  0033d	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00341	f3 0f 5a 0c 11	 cvtss2sd xmm1, DWORD PTR [ecx+edx]
  00346	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  0034a	b9 04 00 00 00	 mov	 ecx, 4
  0034f	d1 e1		 shl	 ecx, 1
  00351	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00356	c1 e2 00	 shl	 edx, 0
  00359	8d 84 15 50 ff
	ff ff		 lea	 eax, DWORD PTR _rotation_matrix$[ebp+edx]
  00360	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00364	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 977  : 
; 978  : 	rotation_matrix[2][0] *= object_3d_scale->z * ( zmax / 32767.0 );

  00369	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0036e	d1 e0		 shl	 eax, 1
  00370	8d 8c 05 50 ff
	ff ff		 lea	 ecx, DWORD PTR _rotation_matrix$[ebp+eax]
  00377	ba 04 00 00 00	 mov	 edx, 4
  0037c	6b c2 00	 imul	 eax, edx, 0
  0037f	8b 55 0c	 mov	 edx, DWORD PTR _object_3d_scale$[ebp]
  00382	f3 0f 5a 42 08	 cvtss2sd xmm0, DWORD PTR [edx+8]
  00387	f3 0f 5a 4d a0	 cvtss2sd xmm1, DWORD PTR _zmax$[ebp]
  0038c	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  00394	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00398	f3 0f 5a 0c 01	 cvtss2sd xmm1, DWORD PTR [ecx+eax]
  0039d	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  003a1	b8 04 00 00 00	 mov	 eax, 4
  003a6	6b c8 00	 imul	 ecx, eax, 0
  003a9	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  003ae	d1 e2		 shl	 edx, 1
  003b0	8d 84 15 50 ff
	ff ff		 lea	 eax, DWORD PTR _rotation_matrix$[ebp+edx]
  003b7	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  003bb	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 979  : 	rotation_matrix[2][1] *= object_3d_scale->z * ( zmax / 32767.0 );

  003c0	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003c5	d1 e0		 shl	 eax, 1
  003c7	8d 8c 05 50 ff
	ff ff		 lea	 ecx, DWORD PTR _rotation_matrix$[ebp+eax]
  003ce	ba 04 00 00 00	 mov	 edx, 4
  003d3	c1 e2 00	 shl	 edx, 0
  003d6	8b 45 0c	 mov	 eax, DWORD PTR _object_3d_scale$[ebp]
  003d9	f3 0f 5a 40 08	 cvtss2sd xmm0, DWORD PTR [eax+8]
  003de	f3 0f 5a 4d a0	 cvtss2sd xmm1, DWORD PTR _zmax$[ebp]
  003e3	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  003eb	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  003ef	f3 0f 5a 0c 11	 cvtss2sd xmm1, DWORD PTR [ecx+edx]
  003f4	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  003f8	b9 04 00 00 00	 mov	 ecx, 4
  003fd	c1 e1 00	 shl	 ecx, 0
  00400	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00405	d1 e2		 shl	 edx, 1
  00407	8d 84 15 50 ff
	ff ff		 lea	 eax, DWORD PTR _rotation_matrix$[ebp+edx]
  0040e	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00412	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 980  : 	rotation_matrix[2][2] *= object_3d_scale->z * ( zmax / 32767.0 );

  00417	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0041c	d1 e0		 shl	 eax, 1
  0041e	8d 8c 05 50 ff
	ff ff		 lea	 ecx, DWORD PTR _rotation_matrix$[ebp+eax]
  00425	ba 04 00 00 00	 mov	 edx, 4
  0042a	d1 e2		 shl	 edx, 1
  0042c	8b 45 0c	 mov	 eax, DWORD PTR _object_3d_scale$[ebp]
  0042f	f3 0f 5a 40 08	 cvtss2sd xmm0, DWORD PTR [eax+8]
  00434	f3 0f 5a 4d a0	 cvtss2sd xmm1, DWORD PTR _zmax$[ebp]
  00439	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@40dfffc000000000
  00441	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00445	f3 0f 5a 0c 11	 cvtss2sd xmm1, DWORD PTR [ecx+edx]
  0044a	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  0044e	b9 04 00 00 00	 mov	 ecx, 4
  00453	d1 e1		 shl	 ecx, 1
  00455	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0045a	d1 e2		 shl	 edx, 1
  0045c	8d 84 15 50 ff
	ff ff		 lea	 eax, DWORD PTR _rotation_matrix$[ebp+edx]
  00463	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00467	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 981  : 
; 982  : 	for ( count = number_of_points; count > 0; count-- )

  0046c	8b 45 f8	 mov	 eax, DWORD PTR _number_of_points$[ebp]
  0046f	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
  00472	eb 09		 jmp	 SHORT $LN4@transform_
$LN2@transform_:
  00474	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00477	83 e8 01	 sub	 eax, 1
  0047a	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@transform_:
  0047d	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  00481	0f 8e 0e 06 00
	00		 jle	 $LN3@transform_

; 983  : 	{
; 984  : 
; 985  : 		float
; 986  : 			n_s,
; 987  : 			t,
; 988  : 			pointx,
; 989  : 			pointy,
; 990  : 			pointz,
; 991  : 			x_world,
; 992  : 			y_world,
; 993  : 			z_world,
; 994  : 			x,
; 995  : 			y,
; 996  : 			z;
; 997  : 
; 998  : 		//
; 999  : 		// Convert the 3d point into float format
; 1000 : 		//
; 1001 : 
; 1002 : 		pointx = points->x;

  00487	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  0048a	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0048d	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00491	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR _pointx$18[ebp], xmm0

; 1003 : 		pointy = points->y;

  00499	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  0049c	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  004a0	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  004a4	f3 0f 11 85 40
	ff ff ff	 movss	 DWORD PTR _pointy$17[ebp], xmm0

; 1004 : 		pointz = points->z;

  004ac	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  004af	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  004b3	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  004b7	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _pointz$16[ebp], xmm0

; 1005 : 
; 1006 : 		//
; 1007 : 		// First, rotate the object into world space ( inverse attitude matrix )
; 1008 : 		//
; 1009 : 
; 1010 : 		x_world = pointx * rotation_matrix[0][0] + pointy * rotation_matrix[1][0] + pointz * rotation_matrix[2][0] + pos_x;

  004bf	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004c4	6b c8 00	 imul	 ecx, eax, 0
  004c7	8d 94 0d 50 ff
	ff ff		 lea	 edx, DWORD PTR _rotation_matrix$[ebp+ecx]
  004ce	b8 04 00 00 00	 mov	 eax, 4
  004d3	6b c8 00	 imul	 ecx, eax, 0
  004d6	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR _pointx$18[ebp]
  004de	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  004e3	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  004e8	c1 e2 00	 shl	 edx, 0
  004eb	8d 84 15 50 ff
	ff ff		 lea	 eax, DWORD PTR _rotation_matrix$[ebp+edx]
  004f2	b9 04 00 00 00	 mov	 ecx, 4
  004f7	6b d1 00	 imul	 edx, ecx, 0
  004fa	f3 0f 10 8d 40
	ff ff ff	 movss	 xmm1, DWORD PTR _pointy$17[ebp]
  00502	f3 0f 59 0c 10	 mulss	 xmm1, DWORD PTR [eax+edx]
  00507	f3 0f 58 c1	 addss	 xmm0, xmm1
  0050b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00510	d1 e0		 shl	 eax, 1
  00512	8d 8c 05 50 ff
	ff ff		 lea	 ecx, DWORD PTR _rotation_matrix$[ebp+eax]
  00519	ba 04 00 00 00	 mov	 edx, 4
  0051e	6b c2 00	 imul	 eax, edx, 0
  00521	f3 0f 10 8d 3c
	ff ff ff	 movss	 xmm1, DWORD PTR _pointz$16[ebp]
  00529	f3 0f 59 0c 01	 mulss	 xmm1, DWORD PTR [ecx+eax]
  0052e	f3 0f 58 c1	 addss	 xmm0, xmm1
  00532	f3 0f 58 45 9c	 addss	 xmm0, DWORD PTR _pos_x$[ebp]
  00537	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _x_world$15[ebp], xmm0

; 1011 : 		y_world = pointx * rotation_matrix[0][1] + pointy * rotation_matrix[1][1] + pointz * rotation_matrix[2][1] + pos_y;

  0053f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00544	6b c8 00	 imul	 ecx, eax, 0
  00547	8d 94 0d 50 ff
	ff ff		 lea	 edx, DWORD PTR _rotation_matrix$[ebp+ecx]
  0054e	b8 04 00 00 00	 mov	 eax, 4
  00553	c1 e0 00	 shl	 eax, 0
  00556	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR _pointx$18[ebp]
  0055e	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  00563	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00568	c1 e1 00	 shl	 ecx, 0
  0056b	8d 94 0d 50 ff
	ff ff		 lea	 edx, DWORD PTR _rotation_matrix$[ebp+ecx]
  00572	b8 04 00 00 00	 mov	 eax, 4
  00577	c1 e0 00	 shl	 eax, 0
  0057a	f3 0f 10 8d 40
	ff ff ff	 movss	 xmm1, DWORD PTR _pointy$17[ebp]
  00582	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  00587	f3 0f 58 c1	 addss	 xmm0, xmm1
  0058b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00590	d1 e1		 shl	 ecx, 1
  00592	8d 94 0d 50 ff
	ff ff		 lea	 edx, DWORD PTR _rotation_matrix$[ebp+ecx]
  00599	b8 04 00 00 00	 mov	 eax, 4
  0059e	c1 e0 00	 shl	 eax, 0
  005a1	f3 0f 10 8d 3c
	ff ff ff	 movss	 xmm1, DWORD PTR _pointz$16[ebp]
  005a9	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  005ae	f3 0f 58 c1	 addss	 xmm0, xmm1
  005b2	f3 0f 58 45 98	 addss	 xmm0, DWORD PTR _pos_y$[ebp]
  005b7	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _y_world$14[ebp], xmm0

; 1012 : 		z_world = pointx * rotation_matrix[0][2] + pointy * rotation_matrix[1][2] + pointz * rotation_matrix[2][2] + pos_z;

  005bf	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005c4	6b c8 00	 imul	 ecx, eax, 0
  005c7	8d 94 0d 50 ff
	ff ff		 lea	 edx, DWORD PTR _rotation_matrix$[ebp+ecx]
  005ce	b8 04 00 00 00	 mov	 eax, 4
  005d3	d1 e0		 shl	 eax, 1
  005d5	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR _pointx$18[ebp]
  005dd	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  005e2	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  005e7	c1 e1 00	 shl	 ecx, 0
  005ea	8d 94 0d 50 ff
	ff ff		 lea	 edx, DWORD PTR _rotation_matrix$[ebp+ecx]
  005f1	b8 04 00 00 00	 mov	 eax, 4
  005f6	d1 e0		 shl	 eax, 1
  005f8	f3 0f 10 8d 40
	ff ff ff	 movss	 xmm1, DWORD PTR _pointy$17[ebp]
  00600	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  00605	f3 0f 58 c1	 addss	 xmm0, xmm1
  00609	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0060e	d1 e1		 shl	 ecx, 1
  00610	8d 94 0d 50 ff
	ff ff		 lea	 edx, DWORD PTR _rotation_matrix$[ebp+ecx]
  00617	b8 04 00 00 00	 mov	 eax, 4
  0061c	d1 e0		 shl	 eax, 1
  0061e	f3 0f 10 8d 3c
	ff ff ff	 movss	 xmm1, DWORD PTR _pointz$16[ebp]
  00626	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  0062b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0062f	f3 0f 58 45 94	 addss	 xmm0, DWORD PTR _pos_z$[ebp]
  00634	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _z_world$13[ebp], xmm0

; 1013 : 
; 1014 : 		//
; 1015 : 		// Now project the points along the light's direction vector
; 1016 : 		//
; 1017 : 
; 1018 : 		//
; 1019 : 		// Dot product the point and the face normal vector.
; 1020 : 		//
; 1021 : 
; 1022 : 		n_s = terrain_normal->x * x_world + terrain_normal->y * y_world + terrain_normal->z * z_world;

  0063c	8b 45 18	 mov	 eax, DWORD PTR _terrain_normal$[ebp]
  0063f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00643	f3 0f 59 85 38
	ff ff ff	 mulss	 xmm0, DWORD PTR _x_world$15[ebp]
  0064b	8b 4d 18	 mov	 ecx, DWORD PTR _terrain_normal$[ebp]
  0064e	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  00653	f3 0f 59 8d 34
	ff ff ff	 mulss	 xmm1, DWORD PTR _y_world$14[ebp]
  0065b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0065f	8b 55 18	 mov	 edx, DWORD PTR _terrain_normal$[ebp]
  00662	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [edx+8]
  00667	f3 0f 59 8d 30
	ff ff ff	 mulss	 xmm1, DWORD PTR _z_world$13[ebp]
  0066f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00673	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _n_s$20[ebp], xmm0

; 1023 : 
; 1024 : 		t = ( ( projection_constant - n_s ) * projection_factor );

  0067b	f3 0f 5a 85 4c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _n_s$20[ebp]
  00683	f2 0f 10 4d 20	 movsd	 xmm1, QWORD PTR _projection_constant$[ebp]
  00688	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0068c	f2 0f 59 4d 28	 mulsd	 xmm1, QWORD PTR _projection_factor$[ebp]
  00691	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00695	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _t$19[ebp], xmm0

; 1025 : 
; 1026 : 		x_world += projection_direction->x * t;

  0069d	8b 45 1c	 mov	 eax, DWORD PTR _projection_direction$[ebp]
  006a0	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  006a4	f3 0f 59 85 48
	ff ff ff	 mulss	 xmm0, DWORD PTR _t$19[ebp]
  006ac	f3 0f 58 85 38
	ff ff ff	 addss	 xmm0, DWORD PTR _x_world$15[ebp]
  006b4	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _x_world$15[ebp], xmm0

; 1027 : 		y_world += projection_direction->y * t;

  006bc	8b 45 1c	 mov	 eax, DWORD PTR _projection_direction$[ebp]
  006bf	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  006c4	f3 0f 59 85 48
	ff ff ff	 mulss	 xmm0, DWORD PTR _t$19[ebp]
  006cc	f3 0f 58 85 34
	ff ff ff	 addss	 xmm0, DWORD PTR _y_world$14[ebp]
  006d4	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _y_world$14[ebp], xmm0

; 1028 : 		z_world += projection_direction->z * t;

  006dc	8b 45 1c	 mov	 eax, DWORD PTR _projection_direction$[ebp]
  006df	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  006e4	f3 0f 59 85 48
	ff ff ff	 mulss	 xmm0, DWORD PTR _t$19[ebp]
  006ec	f3 0f 58 85 30
	ff ff ff	 addss	 xmm0, DWORD PTR _z_world$13[ebp]
  006f4	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _z_world$13[ebp], xmm0

; 1029 : 
; 1030 : 		x_world -= visual_3d_vp->x;

  006fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00701	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _x_world$15[ebp]
  00709	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  0070d	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _x_world$15[ebp], xmm0

; 1031 : 		y_world -= visual_3d_vp->y;

  00715	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0071a	f3 0f 10 85 34
	ff ff ff	 movss	 xmm0, DWORD PTR _y_world$14[ebp]
  00722	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  00727	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _y_world$14[ebp], xmm0

; 1032 : 		z_world -= visual_3d_vp->z;

  0072f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00734	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _z_world$13[ebp]
  0073c	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00741	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _z_world$13[ebp], xmm0

; 1033 : 
; 1034 : 		//
; 1035 : 		// Next, transform into the viewing coordinate system
; 1036 : 		//
; 1037 : 
; 1038 : 		x = x_world * rotation_3d[0][0] + y_world * rotation_3d[1][0] + z_world * rotation_3d[2][0];

  00749	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0074e	6b c8 00	 imul	 ecx, eax, 0
  00751	ba 04 00 00 00	 mov	 edx, 4
  00756	6b c2 00	 imul	 eax, edx, 0
  00759	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _x_world$15[ebp]
  00761	f3 0f 59 84 01
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax]
  0076a	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0076f	c1 e1 00	 shl	 ecx, 0
  00772	ba 04 00 00 00	 mov	 edx, 4
  00777	6b c2 00	 imul	 eax, edx, 0
  0077a	f3 0f 10 8d 34
	ff ff ff	 movss	 xmm1, DWORD PTR _y_world$14[ebp]
  00782	f3 0f 59 8c 01
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax]
  0078b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0078f	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00794	d1 e1		 shl	 ecx, 1
  00796	ba 04 00 00 00	 mov	 edx, 4
  0079b	6b c2 00	 imul	 eax, edx, 0
  0079e	f3 0f 10 8d 30
	ff ff ff	 movss	 xmm1, DWORD PTR _z_world$13[ebp]
  007a6	f3 0f 59 8c 01
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax]
  007af	f3 0f 58 c1	 addss	 xmm0, xmm1
  007b3	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _x$12[ebp], xmm0

; 1039 : 		y = x_world * rotation_3d[0][1] + y_world * rotation_3d[1][1] + z_world * rotation_3d[2][1];

  007bb	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  007c0	6b c8 00	 imul	 ecx, eax, 0
  007c3	ba 04 00 00 00	 mov	 edx, 4
  007c8	c1 e2 00	 shl	 edx, 0
  007cb	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _x_world$15[ebp]
  007d3	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  007dc	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  007e1	c1 e0 00	 shl	 eax, 0
  007e4	b9 04 00 00 00	 mov	 ecx, 4
  007e9	c1 e1 00	 shl	 ecx, 0
  007ec	f3 0f 10 8d 34
	ff ff ff	 movss	 xmm1, DWORD PTR _y_world$14[ebp]
  007f4	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  007fd	f3 0f 58 c1	 addss	 xmm0, xmm1
  00801	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00806	d1 e2		 shl	 edx, 1
  00808	b8 04 00 00 00	 mov	 eax, 4
  0080d	c1 e0 00	 shl	 eax, 0
  00810	f3 0f 10 8d 30
	ff ff ff	 movss	 xmm1, DWORD PTR _z_world$13[ebp]
  00818	f3 0f 59 8c 02
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[edx+eax]
  00821	f3 0f 58 c1	 addss	 xmm0, xmm1
  00825	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y$11[ebp], xmm0

; 1040 : 		z = x_world * rotation_3d[0][2] + y_world * rotation_3d[1][2] + z_world * rotation_3d[2][2];

  0082d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00832	6b c8 00	 imul	 ecx, eax, 0
  00835	ba 04 00 00 00	 mov	 edx, 4
  0083a	d1 e2		 shl	 edx, 1
  0083c	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _x_world$15[ebp]
  00844	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  0084d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00852	c1 e0 00	 shl	 eax, 0
  00855	b9 04 00 00 00	 mov	 ecx, 4
  0085a	d1 e1		 shl	 ecx, 1
  0085c	f3 0f 10 8d 34
	ff ff ff	 movss	 xmm1, DWORD PTR _y_world$14[ebp]
  00864	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  0086d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00871	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00876	d1 e2		 shl	 edx, 1
  00878	b8 04 00 00 00	 mov	 eax, 4
  0087d	d1 e0		 shl	 eax, 1
  0087f	f3 0f 10 8d 30
	ff ff ff	 movss	 xmm1, DWORD PTR _z_world$13[ebp]
  00887	f3 0f 59 8c 02
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[edx+eax]
  00890	f3 0f 58 c1	 addss	 xmm0, xmm1
  00894	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _z$10[ebp], xmm0

; 1041 : 
; 1042 : 		x *= active_3d_environment->screen_i_scale;

  0089c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  008a1	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _x$12[ebp]
  008a9	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  008ad	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _x$12[ebp], xmm0

; 1043 : 		y *= active_3d_environment->screen_j_scale;

  008b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  008ba	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y$11[ebp]
  008c2	f3 0f 59 40 04	 mulss	 xmm0, DWORD PTR [eax+4]
  008c7	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y$11[ebp], xmm0

; 1044 : 
; 1045 : 		if ( z >= clip_hither )

  008cf	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _z$10[ebp]
  008d7	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?clip_hither@@3MA
  008de	0f 82 64 01 00
	00		 jb	 $LN5@transform_

; 1046 : 		{
; 1047 : 
; 1048 : 			float
; 1049 : 				q,
; 1050 : 				i,
; 1051 : 				j;
; 1052 : 
; 1053 : 			oxmax = active_viewport.x_max - last_transformed_point->i;

  008e4	8b 45 f0	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  008e7	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  008ef	f3 0f 5c 40 10	 subss	 xmm0, DWORD PTR [eax+16]
  008f4	f3 0f 11 45 90	 movss	 DWORD PTR _oxmax$[ebp], xmm0

; 1054 : 			oxmin = last_transformed_point->i - active_viewport.x_min;

  008f9	8b 45 f0	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  008fc	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00901	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00909	f3 0f 11 45 8c	 movss	 DWORD PTR _oxmin$[ebp], xmm0

; 1055 : 			oymax = active_viewport.y_max - last_transformed_point->j;

  0090e	8b 45 f0	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  00911	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  00919	f3 0f 5c 40 14	 subss	 xmm0, DWORD PTR [eax+20]
  0091e	f3 0f 11 45 88	 movss	 DWORD PTR _oymax$[ebp], xmm0

; 1056 : 			oymin = last_transformed_point->j - active_viewport.y_min;

  00923	8b 45 f0	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  00926	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  0092b	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  00933	f3 0f 11 45 84	 movss	 DWORD PTR _oymin$[ebp], xmm0

; 1057 : 
; 1058 : 			ixmax = *( ( int * ) &oxmax );

  00938	8b 45 90	 mov	 eax, DWORD PTR _oxmax$[ebp]
  0093b	89 45 80	 mov	 DWORD PTR _ixmax$[ebp], eax

; 1059 : 			ixmin = *( ( int * ) &oxmin );

  0093e	8b 45 8c	 mov	 eax, DWORD PTR _oxmin$[ebp]
  00941	89 85 7c ff ff
	ff		 mov	 DWORD PTR _ixmin$[ebp], eax

; 1060 : 			iymax = *( ( int * ) &oymax );

  00947	8b 45 88	 mov	 eax, DWORD PTR _oymax$[ebp]
  0094a	89 85 78 ff ff
	ff		 mov	 DWORD PTR _iymax$[ebp], eax

; 1061 : 			iymin = *( ( int * ) &oymin );

  00950	8b 45 84	 mov	 eax, DWORD PTR _oymin$[ebp]
  00953	89 85 74 ff ff
	ff		 mov	 DWORD PTR _iymin$[ebp], eax

; 1062 : 
; 1063 : 			last_transformed_point->outcode = generate_lookup_outcode ( ixmin, iymin, ixmax, iymax );

  00959	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _iymax$[ebp]
  0095f	50		 push	 eax
  00960	8b 4d 80	 mov	 ecx, DWORD PTR _ixmax$[ebp]
  00963	51		 push	 ecx
  00964	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _iymin$[ebp]
  0096a	52		 push	 edx
  0096b	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _ixmin$[ebp]
  00971	50		 push	 eax
  00972	e8 00 00 00 00	 call	 ?generate_lookup_outcode@@YGHHHHH@Z ; generate_lookup_outcode
  00977	8b 4d f0	 mov	 ecx, DWORD PTR _last_transformed_point$[ebp]
  0097a	88 41 2c	 mov	 BYTE PTR [ecx+44], al

; 1064 : 
; 1065 : 			q = 1.0 / z;

  0097d	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _z$10[ebp]
  00985	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0098d	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00991	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00995	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _q$9[ebp], xmm0

; 1066 : 
; 1067 : 			result_points->x = x;

  0099d	8b 45 ec	 mov	 eax, DWORD PTR _result_points$[ebp]
  009a0	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _x$12[ebp]
  009a8	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1068 : 			result_points->y = y;

  009ac	8b 45 ec	 mov	 eax, DWORD PTR _result_points$[ebp]
  009af	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y$11[ebp]
  009b7	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 1069 : 			result_points->z = z;

  009bc	8b 45 ec	 mov	 eax, DWORD PTR _result_points$[ebp]
  009bf	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _z$10[ebp]
  009c7	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 1070 : 
; 1071 : 			last_transformed_point = result_points;

  009cc	8b 45 ec	 mov	 eax, DWORD PTR _result_points$[ebp]
  009cf	89 45 f0	 mov	 DWORD PTR _last_transformed_point$[ebp], eax

; 1072 : 
; 1073 : 			i = ( x * q );

  009d2	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _x$12[ebp]
  009da	f3 0f 59 85 20
	ff ff ff	 mulss	 xmm0, DWORD PTR _q$9[ebp]
  009e2	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _i$8[ebp], xmm0

; 1074 : 			j = ( y * q );

  009ea	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y$11[ebp]
  009f2	f3 0f 59 85 20
	ff ff ff	 mulss	 xmm0, DWORD PTR _q$9[ebp]
  009fa	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _j$7[ebp], xmm0

; 1075 : 
; 1076 : 			result_points->j = active_3d_environment->y_origin - j;

  00a02	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00a07	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00a0c	f3 0f 5c 85 18
	ff ff ff	 subss	 xmm0, DWORD PTR _j$7[ebp]
  00a14	8b 4d ec	 mov	 ecx, DWORD PTR _result_points$[ebp]
  00a17	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 1077 : 			result_points->i = active_3d_environment->x_origin + i;

  00a1c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00a21	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00a26	f3 0f 58 85 1c
	ff ff ff	 addss	 xmm0, DWORD PTR _i$8[ebp]
  00a2e	8b 4d ec	 mov	 ecx, DWORD PTR _result_points$[ebp]
  00a31	f3 0f 11 41 10	 movss	 DWORD PTR [ecx+16], xmm0

; 1078 : 
; 1079 : 			result_points->q = q;

  00a36	8b 45 ec	 mov	 eax, DWORD PTR _result_points$[ebp]
  00a39	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _q$9[ebp]
  00a41	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 1080 : 		}
; 1081 : 		else

  00a46	eb 36		 jmp	 SHORT $LN6@transform_
$LN5@transform_:

; 1082 : 		{
; 1083 : 
; 1084 : 			result_points->outcode = CLIP_HITHER;

  00a48	8b 45 ec	 mov	 eax, DWORD PTR _result_points$[ebp]
  00a4b	c6 40 2c 20	 mov	 BYTE PTR [eax+44], 32	; 00000020H

; 1085 : 
; 1086 : 			result_points->z = z;

  00a4f	8b 45 ec	 mov	 eax, DWORD PTR _result_points$[ebp]
  00a52	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _z$10[ebp]
  00a5a	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 1087 : 			result_points->x = x;

  00a5f	8b 45 ec	 mov	 eax, DWORD PTR _result_points$[ebp]
  00a62	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _x$12[ebp]
  00a6a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1088 : 			result_points->y = y;

  00a6e	8b 45 ec	 mov	 eax, DWORD PTR _result_points$[ebp]
  00a71	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y$11[ebp]
  00a79	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
$LN6@transform_:

; 1089 : 		}
; 1090 : 
; 1091 : 		result_points++;

  00a7e	8b 45 ec	 mov	 eax, DWORD PTR _result_points$[ebp]
  00a81	83 c0 40	 add	 eax, 64			; 00000040H
  00a84	89 45 ec	 mov	 DWORD PTR _result_points$[ebp], eax

; 1092 : 
; 1093 : 		points++;

  00a87	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  00a8a	83 c0 06	 add	 eax, 6
  00a8d	89 45 f4	 mov	 DWORD PTR _points$[ebp], eax

; 1094 : 	}

  00a90	e9 df f9 ff ff	 jmp	 $LN2@transform_
$LN3@transform_:

; 1095 : 
; 1096 : 	oxmax = active_viewport.x_max - last_transformed_point->i;

  00a95	8b 45 f0	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  00a98	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  00aa0	f3 0f 5c 40 10	 subss	 xmm0, DWORD PTR [eax+16]
  00aa5	f3 0f 11 45 90	 movss	 DWORD PTR _oxmax$[ebp], xmm0

; 1097 : 	oxmin = last_transformed_point->i - active_viewport.x_min;

  00aaa	8b 45 f0	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  00aad	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00ab2	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00aba	f3 0f 11 45 8c	 movss	 DWORD PTR _oxmin$[ebp], xmm0

; 1098 : 	oymax = active_viewport.y_max - last_transformed_point->j;

  00abf	8b 45 f0	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  00ac2	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  00aca	f3 0f 5c 40 14	 subss	 xmm0, DWORD PTR [eax+20]
  00acf	f3 0f 11 45 88	 movss	 DWORD PTR _oymax$[ebp], xmm0

; 1099 : 	oymin = last_transformed_point->j - active_viewport.y_min;

  00ad4	8b 45 f0	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  00ad7	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00adc	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  00ae4	f3 0f 11 45 84	 movss	 DWORD PTR _oymin$[ebp], xmm0

; 1100 : 
; 1101 : 	ixmax = *( ( int * ) &oxmax );

  00ae9	8b 45 90	 mov	 eax, DWORD PTR _oxmax$[ebp]
  00aec	89 45 80	 mov	 DWORD PTR _ixmax$[ebp], eax

; 1102 : 	ixmin = *( ( int * ) &oxmin );

  00aef	8b 45 8c	 mov	 eax, DWORD PTR _oxmin$[ebp]
  00af2	89 85 7c ff ff
	ff		 mov	 DWORD PTR _ixmin$[ebp], eax

; 1103 : 	iymax = *( ( int * ) &oymax );

  00af8	8b 45 88	 mov	 eax, DWORD PTR _oymax$[ebp]
  00afb	89 85 78 ff ff
	ff		 mov	 DWORD PTR _iymax$[ebp], eax

; 1104 : 	iymin = *( ( int * ) &oymin );

  00b01	8b 45 84	 mov	 eax, DWORD PTR _oymin$[ebp]
  00b04	89 85 74 ff ff
	ff		 mov	 DWORD PTR _iymin$[ebp], eax

; 1105 : 
; 1106 : 	last_transformed_point->outcode = generate_lookup_outcode ( ixmin, iymin, ixmax, iymax );

  00b0a	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _iymax$[ebp]
  00b10	50		 push	 eax
  00b11	8b 4d 80	 mov	 ecx, DWORD PTR _ixmax$[ebp]
  00b14	51		 push	 ecx
  00b15	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _iymin$[ebp]
  00b1b	52		 push	 edx
  00b1c	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _ixmin$[ebp]
  00b22	50		 push	 eax
  00b23	e8 00 00 00 00	 call	 ?generate_lookup_outcode@@YGHHHHH@Z ; generate_lookup_outcode
  00b28	8b 4d f0	 mov	 ecx, DWORD PTR _last_transformed_point$[ebp]
  00b2b	88 41 2c	 mov	 BYTE PTR [ecx+44], al

; 1107 : }

  00b2e	5f		 pop	 edi
  00b2f	5e		 pop	 esi
  00b30	5b		 pop	 ebx
  00b31	8b e5		 mov	 esp, ebp
  00b33	5d		 pop	 ebp
  00b34	c2 2c 00	 ret	 44			; 0000002cH
?transform_3d_object_shadow@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAUVIEWPOINT@@111NNH@Z ENDP ; transform_3d_object_shadow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dshadow.c
;	COMDAT ?get_object_3d_instance_shadow_visibility@@YG?AW4OBJECT_3D_VISIBILITY@@PAUOBJECT_3D_INSTANCE@@@Z
_TEXT	SEGMENT
_j$1 = -336						; size = 4
_i$2 = -332						; size = 4
_q$3 = -328						; size = 4
_z$4 = -324						; size = 4
_y$5 = -320						; size = 4
_x$6 = -316						; size = 4
_z_world$7 = -312					; size = 4
_y_world$8 = -308					; size = 4
_x_world$9 = -304					; size = 4
_t$10 = -300						; size = 4
_n_s$11 = -296						; size = 4
_iymin$12 = -292					; size = 4
_iymax$13 = -288					; size = 4
_ixmin$14 = -284					; size = 4
_ixmax$15 = -280					; size = 4
_oymin$16 = -276					; size = 4
_oymax$17 = -272					; size = 4
_oxmin$18 = -268					; size = 4
_oxmax$19 = -264					; size = 4
_pos_z$20 = -260					; size = 4
_pos_y$21 = -256					; size = 4
_pos_x$22 = -252					; size = 4
_result_points$23 = -248				; size = 4
_points$24 = -244					; size = 4
_lz$25 = -240						; size = 4
_ly$26 = -236						; size = 4
_lx$27 = -232						; size = 4
_position$28 = -228					; size = 12
_constant$29 = -216					; size = 4
_ground_height$30 = -212				; size = 4
_vp$ = -208						; size = 4
_projection_constant$ = -204				; size = 4
_projection_factor$ = -200				; size = 4
_current_sun_object_view_vector$ = -196			; size = 12
_terrain_normal$ = -184					; size = 12
_pos$ = -172						; size = 4
_object_box$ = -168					; size = 96
_object_points$ = -72					; size = 4
_real_object_position$ = -68				; size = 48
_count$ = -20						; size = 4
_outcode2$ = -16					; size = 4
_outcode$ = -12						; size = 4
_draw_sub_objects$ = -8					; size = 4
_object_number$ = -4					; size = 4
_obj$ = 8						; size = 4
?get_object_3d_instance_shadow_visibility@@YG?AW4OBJECT_3D_VISIBILITY@@PAUOBJECT_3D_INSTANCE@@@Z PROC ; get_object_3d_instance_shadow_visibility, COMDAT

; 1114 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 01 00
	00		 sub	 esp, 400		; 00000190H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1115 : 
; 1116 : 	int
; 1117 : 		object_number,
; 1118 : 		draw_sub_objects,
; 1119 : 		outcode,
; 1120 : 		outcode2,
; 1121 : 		count;
; 1122 : 
; 1123 : 	viewpoint
; 1124 : 		real_object_position;
; 1125 : 
; 1126 : 	object_3d_point
; 1127 : 		*object_points,
; 1128 : 		object_box[8];
; 1129 : 
; 1130 : 	vec3d
; 1131 : 		*pos,
; 1132 : 		terrain_normal,
; 1133 : 		current_sun_object_view_vector;
; 1134 : 
; 1135 : 	float
; 1136 : 		projection_factor,
; 1137 : 		projection_constant;
; 1138 : 
; 1139 : 	viewpoint
; 1140 : 		*vp;
; 1141 : 
; 1142 : 	//
; 1143 : 	// Have to project the corner points of the object onto the landscape to ensure we aren't doing tons more work than we have to.
; 1144 : 	//
; 1145 : 
; 1146 : 	if ( current_3d_sun->light_direction.y < 0.1 )

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  00011	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  00016	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fb999999999999a
  0001e	66 0f 2f c8	 comisd	 xmm1, xmm0
  00022	76 0a		 jbe	 SHORT $LN8@get_object

; 1147 : 	{
; 1148 : 
; 1149 : 		return ( OBJECT_3D_NOT_VISIBLE );

  00024	b8 03 00 00 00	 mov	 eax, 3
  00029	e9 76 0e 00 00	 jmp	 $LN17@get_object
$LN8@get_object:

; 1150 : 	}
; 1151 : 
; 1152 : 	//
; 1153 : 	// Store the object's position now, and restore it after drawing the shadow.
; 1154 : 	//
; 1155 : 
; 1156 : 	real_object_position = obj->vp;

  0002e	8b 75 08	 mov	 esi, DWORD PTR _obj$[ebp]
  00031	83 c6 08	 add	 esi, 8
  00034	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00039	8d 7d bc	 lea	 edi, DWORD PTR _real_object_position$[ebp]
  0003c	f3 a5		 rep movsd

; 1157 : 
; 1158 : 	vp = visual_3d_vp;

  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00043	89 85 30 ff ff
	ff		 mov	 DWORD PTR _vp$[ebp], eax

; 1159 : 
; 1160 : 	//
; 1161 : 	// Calculate the object's position relative to the view.
; 1162 : 	//
; 1163 : 
; 1164 : 	pos = &obj->vp.position;

  00049	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0004c	83 c0 08	 add	 eax, 8
  0004f	89 85 54 ff ff
	ff		 mov	 DWORD PTR _pos$[ebp], eax

; 1165 : 
; 1166 : 	//
; 1167 : 	// Get the object number
; 1168 : 	//
; 1169 : 
; 1170 : 	object_number = get_object_shadow_polygon_object ( obj->object_number );

  00055	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00058	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005b	51		 push	 ecx
  0005c	e8 00 00 00 00	 call	 ?get_object_shadow_polygon_object@@YGHH@Z ; get_object_shadow_polygon_object
  00061	89 45 fc	 mov	 DWORD PTR _object_number$[ebp], eax

; 1171 : 
; 1172 : 	if ( !object_number )

  00064	83 7d fc 00	 cmp	 DWORD PTR _object_number$[ebp], 0
  00068	75 24		 jne	 SHORT $LN9@get_object

; 1173 : 	{
; 1174 : 
; 1175 : 		object_number = get_object_approximation_number ( obj->object_number, pos->z, &draw_sub_objects );

  0006a	8d 45 f8	 lea	 eax, DWORD PTR _draw_sub_objects$[ebp]
  0006d	50		 push	 eax
  0006e	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _pos$[ebp]
  00074	51		 push	 ecx
  00075	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0007a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007f	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00082	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ?get_object_approximation_number@@YGHHMPAH@Z ; get_object_approximation_number
  0008b	89 45 fc	 mov	 DWORD PTR _object_number$[ebp], eax
$LN9@get_object:

; 1176 : 	}
; 1177 : 
; 1178 : 	if ( object_number == 0 )

  0008e	83 7d fc 00	 cmp	 DWORD PTR _object_number$[ebp], 0
  00092	75 0a		 jne	 SHORT $LN10@get_object

; 1179 : 	{
; 1180 : 
; 1181 : 		return ( OBJECT_3D_NOT_VISIBLE );

  00094	b8 03 00 00 00	 mov	 eax, 3
  00099	e9 06 0e 00 00	 jmp	 $LN17@get_object
$LN10@get_object:

; 1182 : 	}
; 1183 : 
; 1184 : 
; 1185 : 	if ( objects_3d_data[object_number].number_of_points == 0 )

  0009e	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  000a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  000a8	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  000ac	85 d2		 test	 edx, edx
  000ae	75 0a		 jne	 SHORT $LN11@get_object

; 1186 : 	{
; 1187 : 
; 1188 : 		return ( OBJECT_3D_NOT_VISIBLE );

  000b0	b8 03 00 00 00	 mov	 eax, 3
  000b5	e9 ea 0d 00 00	 jmp	 $LN17@get_object
$LN11@get_object:

; 1189 : 	}
; 1190 : 
; 1191 : 	//
; 1192 : 	// First, find the position of the shadow on the ground.
; 1193 : 	//
; 1194 : 	//  Take the height of the ground directly below the 3d object, and project from the sun down to that height.
; 1195 : 	//   This does lead to some errors, but hopefully not noticable.
; 1196 : 	//
; 1197 : 
; 1198 : 	{
; 1199 : 
; 1200 : 		float
; 1201 : 			ground_height,
; 1202 : 			constant;
; 1203 : 
; 1204 : 		vec3d
; 1205 : 			position;
; 1206 : 
; 1207 : 		if ( !position_on_3d_terrain ( real_object_position.x, real_object_position.z ) )

  000ba	51		 push	 ecx
  000bb	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _real_object_position$[ebp+8]
  000c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c5	51		 push	 ecx
  000c6	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _real_object_position$[ebp]
  000cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d0	e8 00 00 00 00	 call	 ?position_on_3d_terrain@@YGHMM@Z ; position_on_3d_terrain
  000d5	85 c0		 test	 eax, eax
  000d7	75 0a		 jne	 SHORT $LN12@get_object

; 1208 : 		{
; 1209 : 
; 1210 : 			return ( OBJECT_3D_NOT_VISIBLE );

  000d9	b8 03 00 00 00	 mov	 eax, 3
  000de	e9 c1 0d 00 00	 jmp	 $LN17@get_object
$LN12@get_object:

; 1211 : 		}
; 1212 : 
; 1213 : 		ground_height = get_3d_terrain_elevation ( real_object_position.x, real_object_position.z );

  000e3	6a 00		 push	 0
  000e5	51		 push	 ecx
  000e6	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _real_object_position$[ebp+8]
  000eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f0	51		 push	 ecx
  000f1	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _real_object_position$[ebp]
  000f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fb	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  00100	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _ground_height$30[ebp]

; 1214 : 
; 1215 : 		//
; 1216 : 		// Strike a vector from object to the ground, with the same gradient as the sun's direction vector
; 1217 : 		//  This is a simple line equation with the gradient of the line being the sun's direction vector
; 1218 : 		//
; 1219 : 		//   P = P1 + c ( gradient )
; 1220 : 		//
; 1221 : 		// So, as we know the y value at both points,
; 1222 : 		//   Py = P1y + c ( gradient.y )
; 1223 : 		//   c = ( Py - P1y ) / gradient.y
; 1224 : 		//
; 1225 : 		// Therefore
; 1226 : 		//  Px = P1x + c * gradient.x
; 1227 : 		//  Pz = P1z + c * gradient.z
; 1228 : 		//
; 1229 : 
; 1230 : 
; 1231 : 		constant = ( ( ground_height - real_object_position.y ) / current_3d_sun->light_direction.y );

  00106	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _ground_height$30[ebp]
  0010e	f3 0f 5c 45 c0	 subss	 xmm0, DWORD PTR _real_object_position$[ebp+4]
  00113	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  00118	f3 0f 5e 40 04	 divss	 xmm0, DWORD PTR [eax+4]
  0011d	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _constant$29[ebp], xmm0

; 1232 : 
; 1233 : 		position.x = real_object_position.x + ( constant * current_3d_sun->light_direction.x );

  00125	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  0012a	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _constant$29[ebp]
  00132	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  00136	f3 0f 58 45 bc	 addss	 xmm0, DWORD PTR _real_object_position$[ebp]
  0013b	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _position$28[ebp], xmm0

; 1234 : 		position.z = real_object_position.z + ( constant * current_3d_sun->light_direction.z );

  00143	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  00148	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _constant$29[ebp]
  00150	f3 0f 59 40 08	 mulss	 xmm0, DWORD PTR [eax+8]
  00155	f3 0f 58 45 c4	 addss	 xmm0, DWORD PTR _real_object_position$[ebp+8]
  0015a	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _position$28[ebp+8], xmm0

; 1235 : 
; 1236 : 		if ( !position_on_3d_terrain ( position.x, position.z ) )

  00162	51		 push	 ecx
  00163	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _position$28[ebp+8]
  0016b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00170	51		 push	 ecx
  00171	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _position$28[ebp]
  00179	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017e	e8 00 00 00 00	 call	 ?position_on_3d_terrain@@YGHMM@Z ; position_on_3d_terrain
  00183	85 c0		 test	 eax, eax
  00185	75 0a		 jne	 SHORT $LN13@get_object

; 1237 : 		{
; 1238 : 
; 1239 : 			return ( OBJECT_3D_NOT_VISIBLE );

  00187	b8 03 00 00 00	 mov	 eax, 3
  0018c	e9 13 0d 00 00	 jmp	 $LN17@get_object
$LN13@get_object:

; 1240 : 		}
; 1241 : 
; 1242 : 		position.y = get_3d_terrain_point_data ( position.x, position.z, NULL );	//&terrain_normal, NULL );

  00191	6a 00		 push	 0
  00193	51		 push	 ecx
  00194	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _position$28[ebp+8]
  0019c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a1	51		 push	 ecx
  001a2	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _position$28[ebp]
  001aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001af	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  001b4	d9 9d 20 ff ff
	ff		 fstp	 DWORD PTR _position$28[ebp+4]

; 1243 : 
; 1244 : 		get_3d_terrain_last_normal ( &terrain_normal );

  001ba	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR _terrain_normal$[ebp]
  001c0	50		 push	 eax
  001c1	e8 00 00 00 00	 call	 ?get_3d_terrain_last_normal@@YGXPAUVEC3D@@@Z ; get_3d_terrain_last_normal

; 1245 : 
; 1246 : 		//
; 1247 : 		// To actually project a point onto the terrain face, we have to calculate the intercept point between the plane and the line
; 1248 : 		//  ( the line is the ray of light from the 3d point on the object to the terrain face ).
; 1249 : 		//
; 1250 : 		// The equation of the line is:
; 1251 : 		//   P = S + t(D)
; 1252 : 		//
; 1253 : 		// where P is any point on the line, S is the start point of the line, D is the direction vector, and t is a scalar variable.
; 1254 : 		//
; 1255 : 		// The equation of the plane is N.R + d = 0
; 1256 : 		//  where N is the plane normal vector, R is any point ON the plane, and d is a scalar constant.
; 1257 : 		//
; 1258 : 		// After substituting R for P in the plane equation, and back substituting ( -N.R ) for d, we get the equation:
; 1259 : 		//  t = ( ( N.R - N.S ) / N.D )
; 1260 : 		//
; 1261 : 		// This is good, as N.R is constant so long as the plane doesn't move ( which it doesn't ), and
; 1262 : 		//   N.D is also constant so long as the light doesn't move ( again, it doesn't - not during the rendering of one scene )
; 1263 : 		//
; 1264 : 		// So, N.R is called the projection_constant, and N.D is called the projection factor.
; 1265 : 		//
; 1266 : 
; 1267 : 		projection_constant = position.x * terrain_normal.x +

  001c6	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _position$28[ebp]
  001ce	f3 0f 59 85 48
	ff ff ff	 mulss	 xmm0, DWORD PTR _terrain_normal$[ebp]
  001d6	f3 0f 10 8d 20
	ff ff ff	 movss	 xmm1, DWORD PTR _position$28[ebp+4]
  001de	f3 0f 59 8d 4c
	ff ff ff	 mulss	 xmm1, DWORD PTR _terrain_normal$[ebp+4]
  001e6	f3 0f 58 c1	 addss	 xmm0, xmm1
  001ea	f3 0f 10 8d 24
	ff ff ff	 movss	 xmm1, DWORD PTR _position$28[ebp+8]
  001f2	f3 0f 59 8d 50
	ff ff ff	 mulss	 xmm1, DWORD PTR _terrain_normal$[ebp+8]
  001fa	f3 0f 58 c1	 addss	 xmm0, xmm1
  001fe	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _projection_constant$[ebp], xmm0

; 1268 : 										position.y * terrain_normal.y +
; 1269 : 										position.z * terrain_normal.z;
; 1270 : 
; 1271 : 		projection_factor = terrain_normal.x * current_3d_sun->light_direction.x +

  00206	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  0020b	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR _terrain_normal$[ebp]
  00213	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  00217	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  0021d	f3 0f 10 8d 4c
	ff ff ff	 movss	 xmm1, DWORD PTR _terrain_normal$[ebp+4]
  00225	f3 0f 59 49 04	 mulss	 xmm1, DWORD PTR [ecx+4]
  0022a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0022e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  00234	f3 0f 10 8d 50
	ff ff ff	 movss	 xmm1, DWORD PTR _terrain_normal$[ebp+8]
  0023c	f3 0f 59 4a 08	 mulss	 xmm1, DWORD PTR [edx+8]
  00241	f3 0f 58 c1	 addss	 xmm0, xmm1
  00245	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _projection_factor$[ebp], xmm0

; 1272 : 									terrain_normal.y * current_3d_sun->light_direction.y +
; 1273 : 									terrain_normal.z * current_3d_sun->light_direction.z;
; 1274 : 
; 1275 : 		//
; 1276 : 		// However, as a speed up, we don't want to do a division, so take the reciprocal of the projection factor, and multiply instead
; 1277 : 		//
; 1278 : 
; 1279 : 		projection_factor = 1.0 / projection_factor;

  0024d	f3 0f 5a 85 38
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _projection_factor$[ebp]
  00255	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0025d	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00261	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00265	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _projection_factor$[ebp], xmm0

; 1280 : 	}
; 1281 : 
; 1282 : 	//
; 1283 : 	// Set up the object drawing global variables
; 1284 : 	//
; 1285 : 
; 1286 : 	//
; 1287 : 	// Rotate the sun's direction vector into the object's coordinate system
; 1288 : 	//
; 1289 : 
; 1290 : 	{
; 1291 : 
; 1292 : 		float
; 1293 : 			lx,
; 1294 : 			ly,
; 1295 : 			lz;
; 1296 : 
; 1297 : 		lx = ( current_3d_sun->lx * obj->vp.attitude[0][0] );

  0026d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00272	6b c8 00	 imul	 ecx, eax, 0
  00275	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00278	8d 44 0a 14	 lea	 eax, DWORD PTR [edx+ecx+20]
  0027c	b9 04 00 00 00	 mov	 ecx, 4
  00281	6b d1 00	 imul	 edx, ecx, 0
  00284	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  0028a	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0028e	f3 0f 59 04 10	 mulss	 xmm0, DWORD PTR [eax+edx]
  00293	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _lx$27[ebp], xmm0

; 1298 : 		lx +=  ( current_3d_sun->ly * obj->vp.attitude[0][1] );

  0029b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002a0	6b c8 00	 imul	 ecx, eax, 0
  002a3	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  002a6	8d 44 0a 14	 lea	 eax, DWORD PTR [edx+ecx+20]
  002aa	b9 04 00 00 00	 mov	 ecx, 4
  002af	c1 e1 00	 shl	 ecx, 0
  002b2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  002b8	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  002bd	f3 0f 59 04 08	 mulss	 xmm0, DWORD PTR [eax+ecx]
  002c2	f3 0f 58 85 18
	ff ff ff	 addss	 xmm0, DWORD PTR _lx$27[ebp]
  002ca	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _lx$27[ebp], xmm0

; 1299 : 		lx += ( current_3d_sun->lz * obj->vp.attitude[0][2] );

  002d2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002d7	6b c8 00	 imul	 ecx, eax, 0
  002da	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  002dd	8d 44 0a 14	 lea	 eax, DWORD PTR [edx+ecx+20]
  002e1	b9 04 00 00 00	 mov	 ecx, 4
  002e6	d1 e1		 shl	 ecx, 1
  002e8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  002ee	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  002f3	f3 0f 59 04 08	 mulss	 xmm0, DWORD PTR [eax+ecx]
  002f8	f3 0f 58 85 18
	ff ff ff	 addss	 xmm0, DWORD PTR _lx$27[ebp]
  00300	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _lx$27[ebp], xmm0

; 1300 : 
; 1301 : 		ly = ( current_3d_sun->lx * obj->vp.attitude[1][0] );

  00308	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0030d	c1 e0 00	 shl	 eax, 0
  00310	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00313	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  00317	b8 04 00 00 00	 mov	 eax, 4
  0031c	6b c8 00	 imul	 ecx, eax, 0
  0031f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  00324	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00328	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  0032d	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _ly$26[ebp], xmm0

; 1302 : 		ly += ( current_3d_sun->ly * obj->vp.attitude[1][1] );

  00335	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0033a	c1 e0 00	 shl	 eax, 0
  0033d	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00340	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  00344	b8 04 00 00 00	 mov	 eax, 4
  00349	c1 e0 00	 shl	 eax, 0
  0034c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  00352	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00357	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  0035c	f3 0f 58 85 14
	ff ff ff	 addss	 xmm0, DWORD PTR _ly$26[ebp]
  00364	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _ly$26[ebp], xmm0

; 1303 : 		ly += ( current_3d_sun->lz * obj->vp.attitude[1][2] );

  0036c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00371	c1 e0 00	 shl	 eax, 0
  00374	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00377	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  0037b	b8 04 00 00 00	 mov	 eax, 4
  00380	d1 e0		 shl	 eax, 1
  00382	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  00388	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0038d	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  00392	f3 0f 58 85 14
	ff ff ff	 addss	 xmm0, DWORD PTR _ly$26[ebp]
  0039a	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _ly$26[ebp], xmm0

; 1304 : 
; 1305 : 
; 1306 : 		lz = ( current_3d_sun->lx * obj->vp.attitude[2][0] );

  003a2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003a7	d1 e0		 shl	 eax, 1
  003a9	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  003ac	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  003b0	b8 04 00 00 00	 mov	 eax, 4
  003b5	6b c8 00	 imul	 ecx, eax, 0
  003b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  003bd	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  003c1	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  003c6	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _lz$25[ebp], xmm0

; 1307 : 		lz += ( current_3d_sun->ly * obj->vp.attitude[2][1] );

  003ce	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003d3	d1 e0		 shl	 eax, 1
  003d5	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  003d8	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  003dc	b8 04 00 00 00	 mov	 eax, 4
  003e1	c1 e0 00	 shl	 eax, 0
  003e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  003ea	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  003ef	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  003f4	f3 0f 58 85 10
	ff ff ff	 addss	 xmm0, DWORD PTR _lz$25[ebp]
  003fc	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _lz$25[ebp], xmm0

; 1308 : 		lz += ( current_3d_sun->lz * obj->vp.attitude[2][2] );

  00404	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00409	d1 e0		 shl	 eax, 1
  0040b	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0040e	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  00412	b8 04 00 00 00	 mov	 eax, 4
  00417	d1 e0		 shl	 eax, 1
  00419	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  0041f	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00424	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  00429	f3 0f 58 85 10
	ff ff ff	 addss	 xmm0, DWORD PTR _lz$25[ebp]
  00431	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _lz$25[ebp], xmm0

; 1309 : 
; 1310 : 		current_sun_object_view_vector.x = lx;

  00439	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _lx$27[ebp]
  00441	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _current_sun_object_view_vector$[ebp], xmm0

; 1311 : 		current_sun_object_view_vector.y = ly;

  00449	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _ly$26[ebp]
  00451	f3 0f 11 85 40
	ff ff ff	 movss	 DWORD PTR _current_sun_object_view_vector$[ebp+4], xmm0

; 1312 : 		current_sun_object_view_vector.z = lz;

  00459	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _lz$25[ebp]
  00461	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR _current_sun_object_view_vector$[ebp+8], xmm0

; 1313 : 	}
; 1314 : 
; 1315 : 	//
; 1316 : 	// Put the view attitude matrix into the rotation matrix.
; 1317 : 	//
; 1318 : 
; 1319 : 	rotation_3d[0][0] = ( visual_3d_vp->xv.x );

  00469	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0046e	6b c8 00	 imul	 ecx, eax, 0
  00471	ba 04 00 00 00	 mov	 edx, 4
  00476	6b c2 00	 imul	 eax, edx, 0
  00479	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0047f	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  00482	89 94 01 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax], edx

; 1320 : 	rotation_3d[0][1] = ( visual_3d_vp->yv.x );

  00489	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0048e	6b c8 00	 imul	 ecx, eax, 0
  00491	ba 04 00 00 00	 mov	 edx, 4
  00496	c1 e2 00	 shl	 edx, 0
  00499	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0049e	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  004a1	89 84 11 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx], eax

; 1321 : 	rotation_3d[0][2] = ( visual_3d_vp->zv.x );

  004a8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004ad	6b c8 00	 imul	 ecx, eax, 0
  004b0	ba 04 00 00 00	 mov	 edx, 4
  004b5	d1 e2		 shl	 edx, 1
  004b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  004bc	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  004bf	89 84 11 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx], eax

; 1322 : 
; 1323 : 	rotation_3d[1][0] = ( visual_3d_vp->xv.y );

  004c6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004cb	c1 e0 00	 shl	 eax, 0
  004ce	b9 04 00 00 00	 mov	 ecx, 4
  004d3	6b d1 00	 imul	 edx, ecx, 0
  004d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  004dc	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  004df	89 8c 10 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], ecx

; 1324 : 	rotation_3d[1][1] = ( visual_3d_vp->yv.y );

  004e6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004eb	c1 e0 00	 shl	 eax, 0
  004ee	b9 04 00 00 00	 mov	 ecx, 4
  004f3	c1 e1 00	 shl	 ecx, 0
  004f6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  004fc	8b 52 1c	 mov	 edx, DWORD PTR [edx+28]
  004ff	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], edx

; 1325 : 	rotation_3d[1][2] = ( visual_3d_vp->zv.y );

  00506	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0050b	c1 e0 00	 shl	 eax, 0
  0050e	b9 04 00 00 00	 mov	 ecx, 4
  00513	d1 e1		 shl	 ecx, 1
  00515	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0051b	8b 52 28	 mov	 edx, DWORD PTR [edx+40]
  0051e	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], edx

; 1326 : 
; 1327 : 	rotation_3d[2][0] = ( visual_3d_vp->xv.z );

  00525	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0052a	d1 e0		 shl	 eax, 1
  0052c	b9 04 00 00 00	 mov	 ecx, 4
  00531	6b d1 00	 imul	 edx, ecx, 0
  00534	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0053a	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0053d	89 8c 10 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], ecx

; 1328 : 	rotation_3d[2][1] = ( visual_3d_vp->yv.z );

  00544	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00549	d1 e0		 shl	 eax, 1
  0054b	b9 04 00 00 00	 mov	 ecx, 4
  00550	c1 e1 00	 shl	 ecx, 0
  00553	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00559	8b 52 20	 mov	 edx, DWORD PTR [edx+32]
  0055c	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], edx

; 1329 : 	rotation_3d[2][2] = ( visual_3d_vp->zv.z );

  00563	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00568	d1 e0		 shl	 eax, 1
  0056a	b9 04 00 00 00	 mov	 ecx, 4
  0056f	d1 e1		 shl	 ecx, 1
  00571	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00577	8b 52 2c	 mov	 edx, DWORD PTR [edx+44]
  0057a	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], edx

; 1330 : 
; 1331 : 	//
; 1332 : 	// Project the bounding points of the object
; 1333 : 	//
; 1334 : 
; 1335 : 	object_box[0].x = objects_3d_data[object_number].bounding_box.xmin;

  00581	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00585	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0058a	6b d1 00	 imul	 edx, ecx, 0
  0058d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00593	8b 44 01 10	 mov	 eax, DWORD PTR [ecx+eax+16]
  00597	89 84 15 58 ff
	ff ff		 mov	 DWORD PTR _object_box$[ebp+edx], eax

; 1336 : 	object_box[0].y = objects_3d_data[object_number].bounding_box.ymin;

  0059e	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  005a2	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  005a7	6b d1 00	 imul	 edx, ecx, 0
  005aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  005b0	8b 44 01 18	 mov	 eax, DWORD PTR [ecx+eax+24]
  005b4	89 84 15 5c ff
	ff ff		 mov	 DWORD PTR _object_box$[ebp+edx+4], eax

; 1337 : 	object_box[0].z = objects_3d_data[object_number].bounding_box.zmin;

  005bb	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  005bf	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  005c4	6b d1 00	 imul	 edx, ecx, 0
  005c7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  005cd	8b 44 01 20	 mov	 eax, DWORD PTR [ecx+eax+32]
  005d1	89 84 15 60 ff
	ff ff		 mov	 DWORD PTR _object_box$[ebp+edx+8], eax

; 1338 : 
; 1339 : 	object_box[1].x = objects_3d_data[object_number].bounding_box.xmin;

  005d8	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  005dc	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  005e1	c1 e1 00	 shl	 ecx, 0
  005e4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  005ea	8b 44 02 10	 mov	 eax, DWORD PTR [edx+eax+16]
  005ee	89 84 0d 58 ff
	ff ff		 mov	 DWORD PTR _object_box$[ebp+ecx], eax

; 1340 : 	object_box[1].y = objects_3d_data[object_number].bounding_box.ymin;

  005f5	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  005f9	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  005fe	c1 e1 00	 shl	 ecx, 0
  00601	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00607	8b 44 02 18	 mov	 eax, DWORD PTR [edx+eax+24]
  0060b	89 84 0d 5c ff
	ff ff		 mov	 DWORD PTR _object_box$[ebp+ecx+4], eax

; 1341 : 	object_box[1].z = objects_3d_data[object_number].bounding_box.zmax;

  00612	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00616	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0061b	c1 e1 00	 shl	 ecx, 0
  0061e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00624	8b 44 02 24	 mov	 eax, DWORD PTR [edx+eax+36]
  00628	89 84 0d 60 ff
	ff ff		 mov	 DWORD PTR _object_box$[ebp+ecx+8], eax

; 1342 : 
; 1343 : 	object_box[2].x = objects_3d_data[object_number].bounding_box.xmin;

  0062f	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00633	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00638	d1 e1		 shl	 ecx, 1
  0063a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00640	8b 44 02 10	 mov	 eax, DWORD PTR [edx+eax+16]
  00644	89 84 0d 58 ff
	ff ff		 mov	 DWORD PTR _object_box$[ebp+ecx], eax

; 1344 : 	object_box[2].y = objects_3d_data[object_number].bounding_box.ymax;

  0064b	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  0064f	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00654	d1 e1		 shl	 ecx, 1
  00656	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0065c	8b 44 02 1c	 mov	 eax, DWORD PTR [edx+eax+28]
  00660	89 84 0d 5c ff
	ff ff		 mov	 DWORD PTR _object_box$[ebp+ecx+4], eax

; 1345 : 	object_box[2].z = objects_3d_data[object_number].bounding_box.zmin;

  00667	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  0066b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00670	d1 e1		 shl	 ecx, 1
  00672	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00678	8b 44 02 20	 mov	 eax, DWORD PTR [edx+eax+32]
  0067c	89 84 0d 60 ff
	ff ff		 mov	 DWORD PTR _object_box$[ebp+ecx+8], eax

; 1346 : 
; 1347 : 	object_box[3].x = objects_3d_data[object_number].bounding_box.xmin;

  00683	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00687	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0068c	6b d1 03	 imul	 edx, ecx, 3
  0068f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00695	8b 44 01 10	 mov	 eax, DWORD PTR [ecx+eax+16]
  00699	89 84 15 58 ff
	ff ff		 mov	 DWORD PTR _object_box$[ebp+edx], eax

; 1348 : 	object_box[3].y = objects_3d_data[object_number].bounding_box.ymax;

  006a0	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  006a4	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  006a9	6b d1 03	 imul	 edx, ecx, 3
  006ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  006b2	8b 44 01 1c	 mov	 eax, DWORD PTR [ecx+eax+28]
  006b6	89 84 15 5c ff
	ff ff		 mov	 DWORD PTR _object_box$[ebp+edx+4], eax

; 1349 : 	object_box[3].z = objects_3d_data[object_number].bounding_box.zmax;

  006bd	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  006c1	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  006c6	6b d1 03	 imul	 edx, ecx, 3
  006c9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  006cf	8b 44 01 24	 mov	 eax, DWORD PTR [ecx+eax+36]
  006d3	89 84 15 60 ff
	ff ff		 mov	 DWORD PTR _object_box$[ebp+edx+8], eax

; 1350 : 
; 1351 : 	object_box[4].x = objects_3d_data[object_number].bounding_box.xmax;

  006da	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  006de	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  006e3	c1 e1 02	 shl	 ecx, 2
  006e6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  006ec	8b 44 02 14	 mov	 eax, DWORD PTR [edx+eax+20]
  006f0	89 84 0d 58 ff
	ff ff		 mov	 DWORD PTR _object_box$[ebp+ecx], eax

; 1352 : 	object_box[4].y = objects_3d_data[object_number].bounding_box.ymin;

  006f7	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  006fb	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00700	c1 e1 02	 shl	 ecx, 2
  00703	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00709	8b 44 02 18	 mov	 eax, DWORD PTR [edx+eax+24]
  0070d	89 84 0d 5c ff
	ff ff		 mov	 DWORD PTR _object_box$[ebp+ecx+4], eax

; 1353 : 	object_box[4].z = objects_3d_data[object_number].bounding_box.zmin;

  00714	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00718	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0071d	c1 e1 02	 shl	 ecx, 2
  00720	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00726	8b 44 02 20	 mov	 eax, DWORD PTR [edx+eax+32]
  0072a	89 84 0d 60 ff
	ff ff		 mov	 DWORD PTR _object_box$[ebp+ecx+8], eax

; 1354 : 
; 1355 : 	object_box[5].x = objects_3d_data[object_number].bounding_box.xmax;

  00731	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00735	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0073a	6b d1 05	 imul	 edx, ecx, 5
  0073d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00743	8b 44 01 14	 mov	 eax, DWORD PTR [ecx+eax+20]
  00747	89 84 15 58 ff
	ff ff		 mov	 DWORD PTR _object_box$[ebp+edx], eax

; 1356 : 	object_box[5].y = objects_3d_data[object_number].bounding_box.ymin;

  0074e	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00752	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00757	6b d1 05	 imul	 edx, ecx, 5
  0075a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00760	8b 44 01 18	 mov	 eax, DWORD PTR [ecx+eax+24]
  00764	89 84 15 5c ff
	ff ff		 mov	 DWORD PTR _object_box$[ebp+edx+4], eax

; 1357 : 	object_box[5].z = objects_3d_data[object_number].bounding_box.zmax;

  0076b	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  0076f	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00774	6b d1 05	 imul	 edx, ecx, 5
  00777	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0077d	8b 44 01 24	 mov	 eax, DWORD PTR [ecx+eax+36]
  00781	89 84 15 60 ff
	ff ff		 mov	 DWORD PTR _object_box$[ebp+edx+8], eax

; 1358 : 
; 1359 : 	object_box[6].x = objects_3d_data[object_number].bounding_box.xmax;

  00788	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  0078c	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00791	6b d1 06	 imul	 edx, ecx, 6
  00794	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0079a	8b 44 01 14	 mov	 eax, DWORD PTR [ecx+eax+20]
  0079e	89 84 15 58 ff
	ff ff		 mov	 DWORD PTR _object_box$[ebp+edx], eax

; 1360 : 	object_box[6].y = objects_3d_data[object_number].bounding_box.ymax;

  007a5	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  007a9	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  007ae	6b d1 06	 imul	 edx, ecx, 6
  007b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  007b7	8b 44 01 1c	 mov	 eax, DWORD PTR [ecx+eax+28]
  007bb	89 84 15 5c ff
	ff ff		 mov	 DWORD PTR _object_box$[ebp+edx+4], eax

; 1361 : 	object_box[6].z = objects_3d_data[object_number].bounding_box.zmin;

  007c2	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  007c6	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  007cb	6b d1 06	 imul	 edx, ecx, 6
  007ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  007d4	8b 44 01 20	 mov	 eax, DWORD PTR [ecx+eax+32]
  007d8	89 84 15 60 ff
	ff ff		 mov	 DWORD PTR _object_box$[ebp+edx+8], eax

; 1362 : 
; 1363 : 	object_box[7].x = objects_3d_data[object_number].bounding_box.xmax;

  007df	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  007e3	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  007e8	6b d1 07	 imul	 edx, ecx, 7
  007eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  007f1	8b 44 01 14	 mov	 eax, DWORD PTR [ecx+eax+20]
  007f5	89 84 15 58 ff
	ff ff		 mov	 DWORD PTR _object_box$[ebp+edx], eax

; 1364 : 	object_box[7].y = objects_3d_data[object_number].bounding_box.ymax;

  007fc	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00800	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00805	6b d1 07	 imul	 edx, ecx, 7
  00808	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0080e	8b 44 01 1c	 mov	 eax, DWORD PTR [ecx+eax+28]
  00812	89 84 15 5c ff
	ff ff		 mov	 DWORD PTR _object_box$[ebp+edx+4], eax

; 1365 : 	object_box[7].z = objects_3d_data[object_number].bounding_box.zmax;

  00819	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  0081d	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00822	6b d1 07	 imul	 edx, ecx, 7
  00825	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0082b	8b 44 01 24	 mov	 eax, DWORD PTR [ecx+eax+36]
  0082f	89 84 15 60 ff
	ff ff		 mov	 DWORD PTR _object_box$[ebp+edx+8], eax

; 1366 : 
; 1367 : 	object_points = object_box;

  00836	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR _object_box$[ebp]
  0083c	89 45 b8	 mov	 DWORD PTR _object_points$[ebp], eax

; 1368 : 
; 1369 : 	{
; 1370 : 
; 1371 : 		object_3d_point
; 1372 : 			*points;
; 1373 : 
; 1374 : 		vertex
; 1375 : 			*result_points;
; 1376 : 
; 1377 : 		float
; 1378 : 			pos_x,
; 1379 : 			pos_y,
; 1380 : 			pos_z,
; 1381 : 			oxmax,
; 1382 : 			oxmin,
; 1383 : 			oymax,
; 1384 : 			oymin;
; 1385 : 
; 1386 : 		int
; 1387 : 			ixmax,
; 1388 : 			ixmin,
; 1389 : 			iymax,
; 1390 : 			iymin;
; 1391 : 
; 1392 : 		points = object_points;	//objects_3d_data[object_number].points;

  0083f	8b 45 b8	 mov	 eax, DWORD PTR _object_points$[ebp]
  00842	89 85 0c ff ff
	ff		 mov	 DWORD PTR _points$24[ebp], eax

; 1393 : 
; 1394 : 		result_points = &transformed_3d_points[0];

  00848	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0084d	6b c8 00	 imul	 ecx, eax, 0
  00850	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?transformed_3d_points@@3PAUVERTEX@@A ; transformed_3d_points
  00856	89 8d 08 ff ff
	ff		 mov	 DWORD PTR _result_points$23[ebp], ecx

; 1395 : 
; 1396 : 		pos_x = pos->x;

  0085c	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _pos$[ebp]
  00862	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00866	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _pos_x$22[ebp], xmm0

; 1397 : 		pos_y = pos->y;

  0086e	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _pos$[ebp]
  00874	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00879	f3 0f 11 85 00
	ff ff ff	 movss	 DWORD PTR _pos_y$21[ebp], xmm0

; 1398 : 		pos_z = pos->z;

  00881	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _pos$[ebp]
  00887	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0088c	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR _pos_z$20[ebp], xmm0

; 1399 : 
; 1400 : 		for ( count = 8; count > 0; count-- )

  00894	c7 45 ec 08 00
	00 00		 mov	 DWORD PTR _count$[ebp], 8
  0089b	eb 09		 jmp	 SHORT $LN4@get_object
$LN2@get_object:
  0089d	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  008a0	83 e8 01	 sub	 eax, 1
  008a3	89 45 ec	 mov	 DWORD PTR _count$[ebp], eax
$LN4@get_object:
  008a6	83 7d ec 00	 cmp	 DWORD PTR _count$[ebp], 0
  008aa	0f 8e 7c 05 00
	00		 jle	 $LN3@get_object

; 1401 : 		{
; 1402 : 
; 1403 : 			float
; 1404 : 				n_s,
; 1405 : 				t,
; 1406 : 				x_world,
; 1407 : 				y_world,
; 1408 : 				z_world,
; 1409 : 				x,
; 1410 : 				y,
; 1411 : 				z;
; 1412 : 
; 1413 : 			//
; 1414 : 			// First, rotate the object into world space ( inverse attitude matrix )
; 1415 : 			//
; 1416 : 
; 1417 : 			x_world = points->x * obj->vp.xv.x + points->y * obj->vp.yv.x + points->z * obj->vp.zv.x + pos_x;

  008b0	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _points$24[ebp]
  008b6	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  008b9	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  008bd	f3 0f 59 41 14	 mulss	 xmm0, DWORD PTR [ecx+20]
  008c2	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _points$24[ebp]
  008c8	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  008cb	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  008d0	f3 0f 59 48 20	 mulss	 xmm1, DWORD PTR [eax+32]
  008d5	f3 0f 58 c1	 addss	 xmm0, xmm1
  008d9	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _points$24[ebp]
  008df	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  008e2	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  008e7	f3 0f 59 4a 2c	 mulss	 xmm1, DWORD PTR [edx+44]
  008ec	f3 0f 58 c1	 addss	 xmm0, xmm1
  008f0	f3 0f 58 85 04
	ff ff ff	 addss	 xmm0, DWORD PTR _pos_x$22[ebp]
  008f8	f3 0f 11 85 d0
	fe ff ff	 movss	 DWORD PTR _x_world$9[ebp], xmm0

; 1418 : 			y_world = points->x * obj->vp.xv.y + points->y * obj->vp.yv.y + points->z * obj->vp.zv.y + pos_y;

  00900	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _points$24[ebp]
  00906	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00909	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0090d	f3 0f 59 41 18	 mulss	 xmm0, DWORD PTR [ecx+24]
  00912	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _points$24[ebp]
  00918	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0091b	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  00920	f3 0f 59 48 24	 mulss	 xmm1, DWORD PTR [eax+36]
  00925	f3 0f 58 c1	 addss	 xmm0, xmm1
  00929	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _points$24[ebp]
  0092f	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00932	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  00937	f3 0f 59 4a 30	 mulss	 xmm1, DWORD PTR [edx+48]
  0093c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00940	f3 0f 58 85 00
	ff ff ff	 addss	 xmm0, DWORD PTR _pos_y$21[ebp]
  00948	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR _y_world$8[ebp], xmm0

; 1419 : 			z_world = points->x * obj->vp.xv.z + points->y * obj->vp.yv.z + points->z * obj->vp.zv.z + pos_z;

  00950	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _points$24[ebp]
  00956	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00959	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0095d	f3 0f 59 41 1c	 mulss	 xmm0, DWORD PTR [ecx+28]
  00962	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _points$24[ebp]
  00968	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0096b	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  00970	f3 0f 59 48 28	 mulss	 xmm1, DWORD PTR [eax+40]
  00975	f3 0f 58 c1	 addss	 xmm0, xmm1
  00979	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _points$24[ebp]
  0097f	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00982	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  00987	f3 0f 59 4a 34	 mulss	 xmm1, DWORD PTR [edx+52]
  0098c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00990	f3 0f 58 85 fc
	fe ff ff	 addss	 xmm0, DWORD PTR _pos_z$20[ebp]
  00998	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR _z_world$7[ebp], xmm0

; 1420 : 
; 1421 : 			//
; 1422 : 			// Now project the points along the light's direction vector
; 1423 : 			//
; 1424 : 
; 1425 : 			//
; 1426 : 			// Dot product the point and the face normal vector.
; 1427 : 			//
; 1428 : 
; 1429 : 			n_s = terrain_normal.x * x_world + terrain_normal.y * y_world + terrain_normal.z * z_world;

  009a0	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR _terrain_normal$[ebp]
  009a8	f3 0f 59 85 d0
	fe ff ff	 mulss	 xmm0, DWORD PTR _x_world$9[ebp]
  009b0	f3 0f 10 8d 4c
	ff ff ff	 movss	 xmm1, DWORD PTR _terrain_normal$[ebp+4]
  009b8	f3 0f 59 8d cc
	fe ff ff	 mulss	 xmm1, DWORD PTR _y_world$8[ebp]
  009c0	f3 0f 58 c1	 addss	 xmm0, xmm1
  009c4	f3 0f 10 8d 50
	ff ff ff	 movss	 xmm1, DWORD PTR _terrain_normal$[ebp+8]
  009cc	f3 0f 59 8d c8
	fe ff ff	 mulss	 xmm1, DWORD PTR _z_world$7[ebp]
  009d4	f3 0f 58 c1	 addss	 xmm0, xmm1
  009d8	f3 0f 11 85 d8
	fe ff ff	 movss	 DWORD PTR _n_s$11[ebp], xmm0

; 1430 : 
; 1431 : 			t = ( ( projection_constant - n_s ) * projection_factor );

  009e0	f3 0f 10 85 34
	ff ff ff	 movss	 xmm0, DWORD PTR _projection_constant$[ebp]
  009e8	f3 0f 5c 85 d8
	fe ff ff	 subss	 xmm0, DWORD PTR _n_s$11[ebp]
  009f0	f3 0f 59 85 38
	ff ff ff	 mulss	 xmm0, DWORD PTR _projection_factor$[ebp]
  009f8	f3 0f 11 85 d4
	fe ff ff	 movss	 DWORD PTR _t$10[ebp], xmm0

; 1432 : 
; 1433 : 			x_world += current_3d_sun->light_direction.x * t;

  00a00	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  00a05	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00a09	f3 0f 59 85 d4
	fe ff ff	 mulss	 xmm0, DWORD PTR _t$10[ebp]
  00a11	f3 0f 58 85 d0
	fe ff ff	 addss	 xmm0, DWORD PTR _x_world$9[ebp]
  00a19	f3 0f 11 85 d0
	fe ff ff	 movss	 DWORD PTR _x_world$9[ebp], xmm0

; 1434 : 			y_world += current_3d_sun->light_direction.y * t;

  00a21	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  00a26	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00a2b	f3 0f 59 85 d4
	fe ff ff	 mulss	 xmm0, DWORD PTR _t$10[ebp]
  00a33	f3 0f 58 85 cc
	fe ff ff	 addss	 xmm0, DWORD PTR _y_world$8[ebp]
  00a3b	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR _y_world$8[ebp], xmm0

; 1435 : 			z_world += current_3d_sun->light_direction.z * t;

  00a43	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  00a48	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00a4d	f3 0f 59 85 d4
	fe ff ff	 mulss	 xmm0, DWORD PTR _t$10[ebp]
  00a55	f3 0f 58 85 c8
	fe ff ff	 addss	 xmm0, DWORD PTR _z_world$7[ebp]
  00a5d	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR _z_world$7[ebp], xmm0

; 1436 : 
; 1437 : 			x_world -= visual_3d_vp->x;

  00a65	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00a6a	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR _x_world$9[ebp]
  00a72	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00a76	f3 0f 11 85 d0
	fe ff ff	 movss	 DWORD PTR _x_world$9[ebp], xmm0

; 1438 : 			y_world -= visual_3d_vp->y;

  00a7e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00a83	f3 0f 10 85 cc
	fe ff ff	 movss	 xmm0, DWORD PTR _y_world$8[ebp]
  00a8b	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  00a90	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR _y_world$8[ebp], xmm0

; 1439 : 			z_world -= visual_3d_vp->z;

  00a98	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00a9d	f3 0f 10 85 c8
	fe ff ff	 movss	 xmm0, DWORD PTR _z_world$7[ebp]
  00aa5	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00aaa	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR _z_world$7[ebp], xmm0

; 1440 : 
; 1441 : 			//
; 1442 : 			// Next, transform into the viewing coordinate system
; 1443 : 			//
; 1444 : 
; 1445 : 			x = x_world * rotation_3d[0][0] + y_world * rotation_3d[1][0] + z_world * rotation_3d[2][0];

  00ab2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00ab7	6b c8 00	 imul	 ecx, eax, 0
  00aba	ba 04 00 00 00	 mov	 edx, 4
  00abf	6b c2 00	 imul	 eax, edx, 0
  00ac2	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR _x_world$9[ebp]
  00aca	f3 0f 59 84 01
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax]
  00ad3	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00ad8	c1 e1 00	 shl	 ecx, 0
  00adb	ba 04 00 00 00	 mov	 edx, 4
  00ae0	6b c2 00	 imul	 eax, edx, 0
  00ae3	f3 0f 10 8d cc
	fe ff ff	 movss	 xmm1, DWORD PTR _y_world$8[ebp]
  00aeb	f3 0f 59 8c 01
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax]
  00af4	f3 0f 58 c1	 addss	 xmm0, xmm1
  00af8	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00afd	d1 e1		 shl	 ecx, 1
  00aff	ba 04 00 00 00	 mov	 edx, 4
  00b04	6b c2 00	 imul	 eax, edx, 0
  00b07	f3 0f 10 8d c8
	fe ff ff	 movss	 xmm1, DWORD PTR _z_world$7[ebp]
  00b0f	f3 0f 59 8c 01
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax]
  00b18	f3 0f 58 c1	 addss	 xmm0, xmm1
  00b1c	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR _x$6[ebp], xmm0

; 1446 : 			y = x_world * rotation_3d[0][1] + y_world * rotation_3d[1][1] + z_world * rotation_3d[2][1];

  00b24	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00b29	6b c8 00	 imul	 ecx, eax, 0
  00b2c	ba 04 00 00 00	 mov	 edx, 4
  00b31	c1 e2 00	 shl	 edx, 0
  00b34	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR _x_world$9[ebp]
  00b3c	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00b45	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00b4a	c1 e0 00	 shl	 eax, 0
  00b4d	b9 04 00 00 00	 mov	 ecx, 4
  00b52	c1 e1 00	 shl	 ecx, 0
  00b55	f3 0f 10 8d cc
	fe ff ff	 movss	 xmm1, DWORD PTR _y_world$8[ebp]
  00b5d	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00b66	f3 0f 58 c1	 addss	 xmm0, xmm1
  00b6a	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00b6f	d1 e2		 shl	 edx, 1
  00b71	b8 04 00 00 00	 mov	 eax, 4
  00b76	c1 e0 00	 shl	 eax, 0
  00b79	f3 0f 10 8d c8
	fe ff ff	 movss	 xmm1, DWORD PTR _z_world$7[ebp]
  00b81	f3 0f 59 8c 02
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[edx+eax]
  00b8a	f3 0f 58 c1	 addss	 xmm0, xmm1
  00b8e	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR _y$5[ebp], xmm0

; 1447 : 			z = x_world * rotation_3d[0][2] + y_world * rotation_3d[1][2] + z_world * rotation_3d[2][2];

  00b96	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00b9b	6b c8 00	 imul	 ecx, eax, 0
  00b9e	ba 04 00 00 00	 mov	 edx, 4
  00ba3	d1 e2		 shl	 edx, 1
  00ba5	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR _x_world$9[ebp]
  00bad	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00bb6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00bbb	c1 e0 00	 shl	 eax, 0
  00bbe	b9 04 00 00 00	 mov	 ecx, 4
  00bc3	d1 e1		 shl	 ecx, 1
  00bc5	f3 0f 10 8d cc
	fe ff ff	 movss	 xmm1, DWORD PTR _y_world$8[ebp]
  00bcd	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00bd6	f3 0f 58 c1	 addss	 xmm0, xmm1
  00bda	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00bdf	d1 e2		 shl	 edx, 1
  00be1	b8 04 00 00 00	 mov	 eax, 4
  00be6	d1 e0		 shl	 eax, 1
  00be8	f3 0f 10 8d c8
	fe ff ff	 movss	 xmm1, DWORD PTR _z_world$7[ebp]
  00bf0	f3 0f 59 8c 02
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[edx+eax]
  00bf9	f3 0f 58 c1	 addss	 xmm0, xmm1
  00bfd	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR _z$4[ebp], xmm0

; 1448 : 
; 1449 : 			if ( *( ( int * ) &z ) >= *( ( int * ) &clip_hither ) )

  00c05	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _z$4[ebp]
  00c0b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?clip_hither@@3MA
  00c11	0f 8c b0 01 00
	00		 jl	 $LN14@get_object

; 1450 : 			{
; 1451 : 
; 1452 : 				float
; 1453 : 					q,
; 1454 : 					i,
; 1455 : 					j;
; 1456 : 
; 1457 : 				q = 1.0 / z;

  00c17	f3 0f 5a 85 bc
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _z$4[ebp]
  00c1f	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00c27	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00c2b	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00c2f	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR _q$3[ebp], xmm0

; 1458 : 
; 1459 : 				result_points->x = x;

  00c37	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _result_points$23[ebp]
  00c3d	f3 0f 10 85 c4
	fe ff ff	 movss	 xmm0, DWORD PTR _x$6[ebp]
  00c45	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1460 : 				result_points->y = y;

  00c49	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _result_points$23[ebp]
  00c4f	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  00c57	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 1461 : 				result_points->z = z;

  00c5c	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _result_points$23[ebp]
  00c62	f3 0f 10 85 bc
	fe ff ff	 movss	 xmm0, DWORD PTR _z$4[ebp]
  00c6a	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 1462 : 
; 1463 : 				i = ( active_3d_environment->screen_i_scale * x * q );

  00c6f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00c74	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00c78	f3 0f 59 85 c4
	fe ff ff	 mulss	 xmm0, DWORD PTR _x$6[ebp]
  00c80	f3 0f 59 85 b8
	fe ff ff	 mulss	 xmm0, DWORD PTR _q$3[ebp]
  00c88	f3 0f 11 85 b4
	fe ff ff	 movss	 DWORD PTR _i$2[ebp], xmm0

; 1464 : 				j = ( active_3d_environment->screen_j_scale * y * q );

  00c90	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00c95	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00c9a	f3 0f 59 85 c0
	fe ff ff	 mulss	 xmm0, DWORD PTR _y$5[ebp]
  00ca2	f3 0f 59 85 b8
	fe ff ff	 mulss	 xmm0, DWORD PTR _q$3[ebp]
  00caa	f3 0f 11 85 b0
	fe ff ff	 movss	 DWORD PTR _j$1[ebp], xmm0

; 1465 : 
; 1466 : 				result_points->j = active_3d_environment->y_origin - j;

  00cb2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00cb7	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00cbc	f3 0f 5c 85 b0
	fe ff ff	 subss	 xmm0, DWORD PTR _j$1[ebp]
  00cc4	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _result_points$23[ebp]
  00cca	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 1467 : 				result_points->i = active_3d_environment->x_origin + i;

  00ccf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00cd4	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00cd9	f3 0f 58 85 b4
	fe ff ff	 addss	 xmm0, DWORD PTR _i$2[ebp]
  00ce1	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _result_points$23[ebp]
  00ce7	f3 0f 11 41 10	 movss	 DWORD PTR [ecx+16], xmm0

; 1468 : 				result_points->q = q;

  00cec	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _result_points$23[ebp]
  00cf2	f3 0f 10 85 b8
	fe ff ff	 movss	 xmm0, DWORD PTR _q$3[ebp]
  00cfa	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 1469 : 
; 1470 : 				oxmax = active_viewport.x_max - result_points->i;

  00cff	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _result_points$23[ebp]
  00d05	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  00d0d	f3 0f 5c 40 10	 subss	 xmm0, DWORD PTR [eax+16]
  00d12	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR _oxmax$19[ebp], xmm0

; 1471 : 				oxmin = result_points->i - active_viewport.x_min;

  00d1a	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _result_points$23[ebp]
  00d20	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00d25	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00d2d	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _oxmin$18[ebp], xmm0

; 1472 : 				oymax = active_viewport.y_max - result_points->j;

  00d35	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _result_points$23[ebp]
  00d3b	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  00d43	f3 0f 5c 40 14	 subss	 xmm0, DWORD PTR [eax+20]
  00d48	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _oymax$17[ebp], xmm0

; 1473 : 				oymin = result_points->j - active_viewport.y_min;

  00d50	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _result_points$23[ebp]
  00d56	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00d5b	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  00d63	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _oymin$16[ebp], xmm0

; 1474 : 
; 1475 : 				ixmax = *( ( int * ) &oxmax );

  00d6b	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _oxmax$19[ebp]
  00d71	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _ixmax$15[ebp], eax

; 1476 : 				ixmin = *( ( int * ) &oxmin );

  00d77	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _oxmin$18[ebp]
  00d7d	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _ixmin$14[ebp], eax

; 1477 : 				iymax = *( ( int * ) &oymax );

  00d83	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _oymax$17[ebp]
  00d89	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _iymax$13[ebp], eax

; 1478 : 				iymin = *( ( int * ) &oymin );

  00d8f	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _oymin$16[ebp]
  00d95	89 85 dc fe ff
	ff		 mov	 DWORD PTR _iymin$12[ebp], eax

; 1479 : 
; 1480 : 				result_points->outcode = generate_lookup_outcode ( ixmin, iymin, ixmax, iymax );

  00d9b	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _iymax$13[ebp]
  00da1	50		 push	 eax
  00da2	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _ixmax$15[ebp]
  00da8	51		 push	 ecx
  00da9	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _iymin$12[ebp]
  00daf	52		 push	 edx
  00db0	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _ixmin$14[ebp]
  00db6	50		 push	 eax
  00db7	e8 00 00 00 00	 call	 ?generate_lookup_outcode@@YGHHHHH@Z ; generate_lookup_outcode
  00dbc	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _result_points$23[ebp]
  00dc2	88 41 2c	 mov	 BYTE PTR [ecx+44], al

; 1481 : 			}
; 1482 : 			else

  00dc5	eb 42		 jmp	 SHORT $LN15@get_object
$LN14@get_object:

; 1483 : 			{
; 1484 : 
; 1485 : 				result_points->outcode = CLIP_HITHER;

  00dc7	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _result_points$23[ebp]
  00dcd	c6 40 2c 20	 mov	 BYTE PTR [eax+44], 32	; 00000020H

; 1486 : 
; 1487 : 				result_points->z = z;

  00dd1	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _result_points$23[ebp]
  00dd7	f3 0f 10 85 bc
	fe ff ff	 movss	 xmm0, DWORD PTR _z$4[ebp]
  00ddf	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 1488 : 				result_points->x = x;

  00de4	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _result_points$23[ebp]
  00dea	f3 0f 10 85 c4
	fe ff ff	 movss	 xmm0, DWORD PTR _x$6[ebp]
  00df2	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1489 : 				result_points->y = y;

  00df6	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _result_points$23[ebp]
  00dfc	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR _y$5[ebp]
  00e04	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
$LN15@get_object:

; 1490 : 			}
; 1491 : 
; 1492 : 			result_points++;

  00e09	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _result_points$23[ebp]
  00e0f	83 c0 40	 add	 eax, 64			; 00000040H
  00e12	89 85 08 ff ff
	ff		 mov	 DWORD PTR _result_points$23[ebp], eax

; 1493 : 
; 1494 : 			points++;

  00e18	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _points$24[ebp]
  00e1e	83 c0 0c	 add	 eax, 12			; 0000000cH
  00e21	89 85 0c ff ff
	ff		 mov	 DWORD PTR _points$24[ebp], eax

; 1495 : 		}

  00e27	e9 71 fa ff ff	 jmp	 $LN2@get_object
$LN3@get_object:

; 1496 : 	}
; 1497 : 
; 1498 : 
; 1499 : 	outcode = transformed_3d_points[7].outcode;

  00e2c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e31	6b c8 07	 imul	 ecx, eax, 7
  00e34	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[ecx+44]
  00e3b	89 55 f4	 mov	 DWORD PTR _outcode$[ebp], edx

; 1500 : 	outcode2 = transformed_3d_points[7].outcode;

  00e3e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00e43	6b c8 07	 imul	 ecx, eax, 7
  00e46	0f b6 91 2c 00
	00 00		 movzx	 edx, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[ecx+44]
  00e4d	89 55 f0	 mov	 DWORD PTR _outcode2$[ebp], edx

; 1501 : 
; 1502 : 	for ( count = 6; count >= 0; count-- )

  00e50	c7 45 ec 06 00
	00 00		 mov	 DWORD PTR _count$[ebp], 6
  00e57	eb 09		 jmp	 SHORT $LN7@get_object
$LN5@get_object:
  00e59	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  00e5c	83 e8 01	 sub	 eax, 1
  00e5f	89 45 ec	 mov	 DWORD PTR _count$[ebp], eax
$LN7@get_object:
  00e62	83 7d ec 00	 cmp	 DWORD PTR _count$[ebp], 0
  00e66	7c 28		 jl	 SHORT $LN6@get_object

; 1503 : 	{
; 1504 : 
; 1505 : 		outcode |= transformed_3d_points[count].outcode;

  00e68	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  00e6b	c1 e0 06	 shl	 eax, 6
  00e6e	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  00e75	0b 4d f4	 or	 ecx, DWORD PTR _outcode$[ebp]
  00e78	89 4d f4	 mov	 DWORD PTR _outcode$[ebp], ecx

; 1506 : 		outcode2 &= transformed_3d_points[count].outcode;

  00e7b	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  00e7e	c1 e0 06	 shl	 eax, 6
  00e81	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  00e88	23 4d f0	 and	 ecx, DWORD PTR _outcode2$[ebp]
  00e8b	89 4d f0	 mov	 DWORD PTR _outcode2$[ebp], ecx

; 1507 : 	}

  00e8e	eb c9		 jmp	 SHORT $LN5@get_object
$LN6@get_object:

; 1508 : 
; 1509 : 	if ( outcode2 != 0 )

  00e90	83 7d f0 00	 cmp	 DWORD PTR _outcode2$[ebp], 0
  00e94	74 09		 je	 SHORT $LN16@get_object

; 1510 : 	{
; 1511 : 
; 1512 : 		return ( OBJECT_3D_NOT_VISIBLE );

  00e96	b8 03 00 00 00	 mov	 eax, 3
  00e9b	eb 07		 jmp	 SHORT $LN17@get_object

; 1513 : 	}
; 1514 : 	else

  00e9d	eb 05		 jmp	 SHORT $LN17@get_object
$LN16@get_object:

; 1515 : 	{
; 1516 : 
; 1517 : 		return ( OBJECT_3D_PARTIALLY_VISIBLE );

  00e9f	b8 02 00 00 00	 mov	 eax, 2
$LN17@get_object:

; 1518 : 	}
; 1519 : }

  00ea4	5f		 pop	 edi
  00ea5	5e		 pop	 esi
  00ea6	5b		 pop	 ebx
  00ea7	8b e5		 mov	 esp, ebp
  00ea9	5d		 pop	 ebp
  00eaa	c2 04 00	 ret	 4
?get_object_3d_instance_shadow_visibility@@YG?AW4OBJECT_3D_VISIBILITY@@PAUOBJECT_3D_INSTANCE@@@Z ENDP ; get_object_3d_instance_shadow_visibility
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dshadow.c
;	COMDAT ?draw_3d_object_shadow@@YGXPAUOBJECT_3D_INSTANCE@@@Z
_TEXT	SEGMENT
tv238 = -476						; size = 8
tv1110 = -472						; size = 8
tv753 = -468						; size = 4
tv557 = -468						; size = 4
tv239 = -468						; size = 8
tv1107 = -464						; size = 4
tv754 = -464						; size = 4
tv558 = -464						; size = 4
_face_count$1 = -396					; size = 4
_number_of_surface_points$2 = -392			; size = 4
_point_reference_index$3 = -388				; size = 4
_surface_face_count$4 = -384				; size = 4
_surface$5 = -380					; size = 4
_scale$6 = -376						; size = 12
_faces_left$7 = -364					; size = 4
_number_of_faces_to_render$8 = -360			; size = 4
_point_reference_index$9 = -356				; size = 4
_surfaces_left$10 = -352				; size = 4
_zbias_decrement$11 = -348				; size = 8
_new_shadow_intensity$12 = -340				; size = 4
_angle$13 = -336					; size = 4
_point2$14 = -332					; size = 4
_point1$15 = -328					; size = 4
_point0$16 = -324					; size = 4
_points$17 = -320					; size = 4
_face_normal$18 = -316					; size = 12
_vec2$19 = -304						; size = 12
_vec1$20 = -292						; size = 12
_faces_left$21 = -280					; size = 4
_texture_reference_index$22 = -276			; size = 4
_point_reference_index$23 = -272			; size = 4
_surface_face_count$24 = -268				; size = 4
_surfaces_left$25 = -264				; size = 4
_number_of_surface_points$26 = -260			; size = 4
_surface$27 = -256					; size = 4
_scale$28 = -252					; size = 12
_lz$29 = -240						; size = 4
_ly$30 = -236						; size = 4
_lx$31 = -232						; size = 4
_shadow_relative_depth$32 = -228			; size = 4
_shadow_relative_position$33 = -224			; size = 12
_ifog_intensity$34 = -212				; size = 4
_fog_intensity$35 = -208				; size = 4
_view_vector$36 = -204					; size = 12
_vector_distance$37 = -192				; size = 12
_view_distance$38 = -180				; size = 4
_object_dissolve$39 = -176				; size = 4
_scalar_distance$40 = -172				; size = 4
_constant$41 = -168					; size = 4
_ground_height$42 = -164				; size = 4
_ambient_intensity$43 = -160				; size = 4
_light_intensity$44 = -156				; size = 4
_light_angle$45 = -152					; size = 4
_projection_constant$ = -148				; size = 8
_projection_factor$ = -140				; size = 8
_shadow_intensity$ = -132				; size = 4
_current_scaled_sun_object_view_vector$ = -128		; size = 12
_current_sun_object_view_vector$ = -116			; size = 12
_terrain_normal$ = -104					; size = 12
_shadow_world_position$ = -92				; size = 12
_pos$ = -80						; size = 4
_light$ = -76						; size = 4
_light_ptr$ = -72					; size = 4
_prev_light$ = -68					; size = 4
_real_object_position$ = -64				; size = 48
_faces$ = -16						; size = 4
_count$ = -12						; size = 4
_draw_sub_objects$ = -8					; size = 4
_object_number$ = -4					; size = 4
_obj$ = 8						; size = 4
?draw_3d_object_shadow@@YGXPAUOBJECT_3D_INSTANCE@@@Z PROC ; draw_3d_object_shadow, COMDAT

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 01 00
	00		 sub	 esp, 476		; 000001dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 157  : 	int
; 158  : 		object_number,
; 159  : 		draw_sub_objects,
; 160  : 		count;
; 161  : 
; 162  : 	object_3d_face
; 163  : 		*faces;
; 164  : 
; 165  : 	viewpoint
; 166  : 		real_object_position;
; 167  : 
; 168  : 	light_3d_source
; 169  : 		*prev_light,
; 170  : 		*light_ptr,
; 171  : 		*light;
; 172  : 
; 173  : 	vec3d
; 174  : 		*pos,
; 175  : 		shadow_world_position,
; 176  : 		terrain_normal,
; 177  : 		current_sun_object_view_vector,
; 178  : 		current_scaled_sun_object_view_vector;
; 179  : 
; 180  : 	float
; 181  : 		shadow_intensity;
; 182  : 
; 183  : 	double
; 184  : 		projection_factor,
; 185  : 		projection_constant;
; 186  : 
; 187  : 	if ( current_3d_sun->light_direction.y < 0.1 )

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  00011	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  00016	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fb999999999999a
  0001e	66 0f 2f c8	 comisd	 xmm1, xmm0
  00022	76 05		 jbe	 SHORT $LN20@draw_3d_ob

; 188  : 	{
; 189  : 		return;

  00024	e9 1c 16 00 00	 jmp	 $LN1@draw_3d_ob
$LN20@draw_3d_ob:

; 190  : 	}
; 191  : 
; 192  : 	//
; 193  : 	// Store the object's position now, and restore it after drawing the shadow.
; 194  : 	//
; 195  : 
; 196  : 	real_object_position = obj->vp;

  00029	8b 75 08	 mov	 esi, DWORD PTR _obj$[ebp]
  0002c	83 c6 08	 add	 esi, 8
  0002f	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00034	8d 7d c0	 lea	 edi, DWORD PTR _real_object_position$[ebp]
  00037	f3 a5		 rep movsd

; 197  : 
; 198  : 	//
; 199  : 	// First, find the position of the shadow on the ground.
; 200  : 	//
; 201  : 	//  Take the height of the ground directly below the 3d object, and project from the sun down to that height.
; 202  : 	//   This does lead to some errors, but hopefully not noticable.
; 203  : 	//
; 204  : 
; 205  : 	{
; 206  : 		float
; 207  : 			light_angle,
; 208  : 			light_intensity,
; 209  : 			ambient_intensity,
; 210  : 			ground_height,
; 211  : 			constant,
; 212  : 			scalar_distance,
; 213  : 			object_dissolve,
; 214  : 			view_distance;
; 215  : 
; 216  : 		vec3d
; 217  : 			vector_distance,
; 218  : 			view_vector;
; 219  : 
; 220  : 		if ( !position_on_3d_terrain ( real_object_position.x, real_object_position.z ) )

  00039	51		 push	 ecx
  0003a	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _real_object_position$[ebp+8]
  0003f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00044	51		 push	 ecx
  00045	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _real_object_position$[ebp]
  0004a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004f	e8 00 00 00 00	 call	 ?position_on_3d_terrain@@YGHMM@Z ; position_on_3d_terrain
  00054	85 c0		 test	 eax, eax
  00056	75 05		 jne	 SHORT $LN21@draw_3d_ob

; 221  : 		{
; 222  : 			return;

  00058	e9 e8 15 00 00	 jmp	 $LN1@draw_3d_ob
$LN21@draw_3d_ob:

; 223  : 		}
; 224  : 
; 225  : 		ground_height = get_3d_terrain_elevation ( real_object_position.x, real_object_position.z );

  0005d	6a 00		 push	 0
  0005f	51		 push	 ecx
  00060	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _real_object_position$[ebp+8]
  00065	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006a	51		 push	 ecx
  0006b	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _real_object_position$[ebp]
  00070	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00075	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  0007a	d9 9d 5c ff ff
	ff		 fstp	 DWORD PTR _ground_height$42[ebp]

; 226  : 
; 227  : 		//
; 228  : 		// Strike a vector from object to the ground, with the same gradient as the sun's direction vector
; 229  : 		//  This is a simple line equation with the gradient of the line being the sun's direction vector
; 230  : 		//
; 231  : 		//   P = P1 + c ( gradient )
; 232  : 		//
; 233  : 		// So, as we know the y value at both points,
; 234  : 		//   Py = P1y + c ( gradient.y )
; 235  : 		//   c = ( Py - P1y ) / gradient.y
; 236  : 		//
; 237  : 		// Therefore
; 238  : 		//  Px = P1x + c * gradient.x
; 239  : 		//  Pz = P1z + c * gradient.z
; 240  : 		//
; 241  : 
; 242  : 
; 243  : 		constant = ( ( ground_height - real_object_position.y ) / current_3d_sun->light_direction.y );

  00080	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _ground_height$42[ebp]
  00088	f3 0f 5c 45 c4	 subss	 xmm0, DWORD PTR _real_object_position$[ebp+4]
  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  00092	f3 0f 5e 40 04	 divss	 xmm0, DWORD PTR [eax+4]
  00097	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _constant$41[ebp], xmm0

; 244  : 
; 245  : 		shadow_world_position.x = real_object_position.x + ( constant * current_3d_sun->light_direction.x );

  0009f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  000a4	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _constant$41[ebp]
  000ac	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  000b0	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _real_object_position$[ebp]
  000b5	f3 0f 11 45 a4	 movss	 DWORD PTR _shadow_world_position$[ebp], xmm0

; 246  : 		shadow_world_position.z = real_object_position.z + ( constant * current_3d_sun->light_direction.z );

  000ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  000bf	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _constant$41[ebp]
  000c7	f3 0f 59 40 08	 mulss	 xmm0, DWORD PTR [eax+8]
  000cc	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _real_object_position$[ebp+8]
  000d1	f3 0f 11 45 ac	 movss	 DWORD PTR _shadow_world_position$[ebp+8], xmm0

; 247  : 
; 248  : 		if ( !position_on_3d_terrain ( shadow_world_position.x, shadow_world_position.z ) )

  000d6	51		 push	 ecx
  000d7	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _shadow_world_position$[ebp+8]
  000dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e1	51		 push	 ecx
  000e2	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _shadow_world_position$[ebp]
  000e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ec	e8 00 00 00 00	 call	 ?position_on_3d_terrain@@YGHMM@Z ; position_on_3d_terrain
  000f1	85 c0		 test	 eax, eax
  000f3	75 05		 jne	 SHORT $LN22@draw_3d_ob

; 249  : 		{
; 250  : 			return;

  000f5	e9 4b 15 00 00	 jmp	 $LN1@draw_3d_ob
$LN22@draw_3d_ob:

; 251  : 		}
; 252  : 
; 253  : 		shadow_world_position.y = get_3d_terrain_point_data ( shadow_world_position.x, shadow_world_position.z, NULL );

  000fa	6a 00		 push	 0
  000fc	51		 push	 ecx
  000fd	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _shadow_world_position$[ebp+8]
  00102	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00107	51		 push	 ecx
  00108	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _shadow_world_position$[ebp]
  0010d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00112	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  00117	d9 5d a8	 fstp	 DWORD PTR _shadow_world_position$[ebp+4]

; 254  : 
; 255  : 		get_3d_terrain_last_normal ( &terrain_normal );

  0011a	8d 45 98	 lea	 eax, DWORD PTR _terrain_normal$[ebp]
  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 ?get_3d_terrain_last_normal@@YGXPAUVEC3D@@@Z ; get_3d_terrain_last_normal

; 256  : 
; 257  : 		//
; 258  : 		// Test to see the distance from the shadow's centre point to the viewpoint
; 259  : 		//
; 260  : 
; 261  : 		view_vector.x = shadow_world_position.x - visual_3d_vp->x;

  00123	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00128	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _shadow_world_position$[ebp]
  0012d	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00131	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _view_vector$36[ebp], xmm0

; 262  : 		view_vector.y = shadow_world_position.y - visual_3d_vp->y;

  00139	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0013e	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _shadow_world_position$[ebp+4]
  00143	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  00148	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _view_vector$36[ebp+4], xmm0

; 263  : 		view_vector.z = shadow_world_position.z - visual_3d_vp->z;

  00150	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00155	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _shadow_world_position$[ebp+8]
  0015a	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  0015f	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _view_vector$36[ebp+8], xmm0

; 264  : 
; 265  : 		view_distance = get_3d_vector_magnitude ( &view_vector );

  00167	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _view_vector$36[ebp]
  0016d	50		 push	 eax
  0016e	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  00173	d9 9d 4c ff ff
	ff		 fstp	 DWORD PTR _view_distance$38[ebp]

; 266  : 
; 267  : 		if ( view_distance > MAX_SHADOW_VIEW_DISTANCE )

  00179	f3 0f 5a 85 4c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _view_distance$38[ebp]
  00181	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4084500000000000
  00189	76 05		 jbe	 SHORT $LN23@draw_3d_ob

; 268  : 		{
; 269  : 			return;

  0018b	e9 b5 14 00 00	 jmp	 $LN1@draw_3d_ob
$LN23@draw_3d_ob:

; 270  : 		}
; 271  : 
; 272  : 		//
; 273  : 		// To actually project a point onto the terrain face, we have to calculate the intercept point between the plane and the line
; 274  : 		//  ( the line is the ray of light from the 3d point on the object to the terrain face ).
; 275  : 		//
; 276  : 		// The equation of the line is:
; 277  : 		//   P = S + t(D)
; 278  : 		//
; 279  : 		// where P is any point on the line, S is the start point of the line, D is the direction vector, and t is a scalar variable.
; 280  : 		//
; 281  : 		// The equation of the plane is N.R + d = 0
; 282  : 		//  where N is the plane normal vector, R is any point ON the plane, and d is a scalar constant.
; 283  : 		//
; 284  : 		// After substituting R for P in the plane equation, and back substituting ( -N.R ) for d, we get the equation:
; 285  : 		//  t = ( ( N.R - N.S ) / N.D )
; 286  : 		//
; 287  : 		// This is good, as N.R is constant so long as the plane doesn't move ( which it doesn't ), and
; 288  : 		//   N.D is also constant so long as the light doesn't move ( again, it doesn't - not during the rendering of one scene )
; 289  : 		//
; 290  : 		// So, N.R is called the projection_constant, and N.D is called the projection factor.
; 291  : 		//
; 292  : 
; 293  : 		projection_constant = shadow_world_position.x * terrain_normal.x +

  00190	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _shadow_world_position$[ebp]
  00195	f3 0f 59 45 98	 mulss	 xmm0, DWORD PTR _terrain_normal$[ebp]
  0019a	f3 0f 10 4d a8	 movss	 xmm1, DWORD PTR _shadow_world_position$[ebp+4]
  0019f	f3 0f 59 4d 9c	 mulss	 xmm1, DWORD PTR _terrain_normal$[ebp+4]
  001a4	f3 0f 58 c1	 addss	 xmm0, xmm1
  001a8	f3 0f 10 4d ac	 movss	 xmm1, DWORD PTR _shadow_world_position$[ebp+8]
  001ad	f3 0f 59 4d a0	 mulss	 xmm1, DWORD PTR _terrain_normal$[ebp+8]
  001b2	f3 0f 58 c1	 addss	 xmm0, xmm1
  001b6	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001ba	f2 0f 11 85 6c
	ff ff ff	 movsd	 QWORD PTR _projection_constant$[ebp], xmm0

; 294  : 										shadow_world_position.y * terrain_normal.y +
; 295  : 										shadow_world_position.z * terrain_normal.z;
; 296  : 
; 297  : 		projection_factor = terrain_normal.x * current_3d_sun->light_direction.x +

  001c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  001c7	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _terrain_normal$[ebp]
  001cc	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  001d0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  001d6	f3 0f 10 4d 9c	 movss	 xmm1, DWORD PTR _terrain_normal$[ebp+4]
  001db	f3 0f 59 49 04	 mulss	 xmm1, DWORD PTR [ecx+4]
  001e0	f3 0f 58 c1	 addss	 xmm0, xmm1
  001e4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  001ea	f3 0f 10 4d a0	 movss	 xmm1, DWORD PTR _terrain_normal$[ebp+8]
  001ef	f3 0f 59 4a 08	 mulss	 xmm1, DWORD PTR [edx+8]
  001f4	f3 0f 58 c1	 addss	 xmm0, xmm1
  001f8	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001fc	f2 0f 11 85 74
	ff ff ff	 movsd	 QWORD PTR _projection_factor$[ebp], xmm0

; 298  : 									terrain_normal.y * current_3d_sun->light_direction.y +
; 299  : 									terrain_normal.z * current_3d_sun->light_direction.z;
; 300  : 
; 301  : 		//
; 302  : 		// However, as a speed up, we don't want to do a division, so take the reciprocal of the projection factor, and multiply instead
; 303  : 		//
; 304  : 
; 305  : 		projection_factor = 1.0 / projection_factor;

  00204	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0020c	f2 0f 5e 85 74
	ff ff ff	 divsd	 xmm0, QWORD PTR _projection_factor$[ebp]
  00214	f2 0f 11 85 74
	ff ff ff	 movsd	 QWORD PTR _projection_factor$[ebp], xmm0

; 306  : 
; 307  : 		//
; 308  : 		// The other thing we can do is figure out how much light has fallen on the face due to the main light source, and how
; 309  : 		//		much due to the ambient light, and make it darker accordingly.
; 310  : 		//
; 311  : 
; 312  : 		light_angle = (	current_3d_sun->light_direction.x * terrain_normal.x +

  0021c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  00221	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00225	f3 0f 59 45 98	 mulss	 xmm0, DWORD PTR _terrain_normal$[ebp]
  0022a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  00230	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  00235	f3 0f 59 4d 9c	 mulss	 xmm1, DWORD PTR _terrain_normal$[ebp+4]
  0023a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0023e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  00244	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [edx+8]
  00249	f3 0f 59 4d a0	 mulss	 xmm1, DWORD PTR _terrain_normal$[ebp+8]
  0024e	f3 0f 58 c1	 addss	 xmm0, xmm1
  00252	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _light_angle$45[ebp], xmm0

; 313  : 								current_3d_sun->light_direction.y * terrain_normal.y +
; 314  : 								current_3d_sun->light_direction.z * terrain_normal.z );
; 315  : 
; 316  : 
; 317  : 		light_intensity = current_3d_sun->colour.red * 0.3 + current_3d_sun->colour.green * 0.59 + current_3d_sun->colour.blue * 0.11;

  0025a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  0025f	f3 0f 5a 40 18	 cvtss2sd xmm0, DWORD PTR [eax+24]
  00264	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd3333333333333
  0026c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  00272	f3 0f 5a 49 1c	 cvtss2sd xmm1, DWORD PTR [ecx+28]
  00277	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe2e147ae147ae1
  0027f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00283	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  00289	f3 0f 5a 4a 20	 cvtss2sd xmm1, DWORD PTR [edx+32]
  0028e	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fbc28f5c28f5c29
  00296	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0029a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0029e	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _light_intensity$44[ebp], xmm0

; 318  : 
; 319  : 		ambient_intensity = ambient_3d_light.colour.red * 0.3 + ambient_3d_light.colour.green * 0.59 + ambient_3d_light.colour.blue * 0.11;

  002a6	f3 0f 5a 05 18
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+24
  002ae	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd3333333333333
  002b6	f3 0f 5a 0d 1c
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+28
  002be	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe2e147ae147ae1
  002c6	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002ca	f3 0f 5a 0d 20
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+32
  002d2	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fbc28f5c28f5c29
  002da	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002de	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002e2	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _ambient_intensity$43[ebp], xmm0

; 320  : 
; 321  : 		shadow_intensity = light_intensity;

  002ea	f3 0f 10 85 64
	ff ff ff	 movss	 xmm0, DWORD PTR _light_intensity$44[ebp]
  002f2	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _shadow_intensity$[ebp], xmm0

; 322  : 
; 323  : 		//
; 324  : 		// We have a 'fudge factor' here - for some reason 176 looks the best
; 325  : 		//
; 326  : 
; 327  : 		shadow_intensity = shadow_intensity * light_angle * 255;

  002fa	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _shadow_intensity$[ebp]
  00302	f3 0f 59 85 68
	ff ff ff	 mulss	 xmm0, DWORD PTR _light_angle$45[ebp]
  0030a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00312	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _shadow_intensity$[ebp], xmm0

; 328  : 
; 329  : 		//
; 330  : 		// Now factor in a distance from the ground fudge
; 331  : 		//
; 332  : 
; 333  : 		vector_distance.x = shadow_world_position.x - real_object_position.x;

  0031a	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _shadow_world_position$[ebp]
  0031f	f3 0f 5c 45 c0	 subss	 xmm0, DWORD PTR _real_object_position$[ebp]
  00324	f3 0f 11 85 40
	ff ff ff	 movss	 DWORD PTR _vector_distance$37[ebp], xmm0

; 334  : 		vector_distance.y = shadow_world_position.y - real_object_position.y;

  0032c	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _shadow_world_position$[ebp+4]
  00331	f3 0f 5c 45 c4	 subss	 xmm0, DWORD PTR _real_object_position$[ebp+4]
  00336	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR _vector_distance$37[ebp+4], xmm0

; 335  : 		vector_distance.z = shadow_world_position.z - real_object_position.z;

  0033e	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _shadow_world_position$[ebp+8]
  00343	f3 0f 5c 45 c8	 subss	 xmm0, DWORD PTR _real_object_position$[ebp+8]
  00348	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _vector_distance$37[ebp+8], xmm0

; 336  : 
; 337  : 		scalar_distance = get_3d_vector_magnitude ( &vector_distance );

  00350	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR _vector_distance$37[ebp]
  00356	50		 push	 eax
  00357	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  0035c	d9 9d 54 ff ff
	ff		 fstp	 DWORD PTR _scalar_distance$40[ebp]

; 338  : 
; 339  : 		scalar_distance = bound ( scalar_distance, 0, MAXIMUM_SHADOW_DISTANCE );

  00362	0f 57 c0	 xorps	 xmm0, xmm0
  00365	0f 2f 85 54 ff
	ff ff		 comiss	 xmm0, DWORD PTR _scalar_distance$40[ebp]
  0036c	76 0d		 jbe	 SHORT $LN50@draw_3d_ob
  0036e	0f 57 c0	 xorps	 xmm0, xmm0
  00371	f2 0f 11 85 2c
	fe ff ff	 movsd	 QWORD PTR tv239[ebp], xmm0
  00379	eb 44		 jmp	 SHORT $LN51@draw_3d_ob
$LN50@draw_3d_ob:
  0037b	f3 0f 5a 85 54
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _scalar_distance$40[ebp]
  00383	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4084500000000000
  0038b	76 12		 jbe	 SHORT $LN48@draw_3d_ob
  0038d	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4084500000000000
  00395	f2 0f 11 85 24
	fe ff ff	 movsd	 QWORD PTR tv238[ebp], xmm0
  0039d	eb 10		 jmp	 SHORT $LN49@draw_3d_ob
$LN48@draw_3d_ob:
  0039f	f3 0f 5a 85 54
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _scalar_distance$40[ebp]
  003a7	f2 0f 11 85 24
	fe ff ff	 movsd	 QWORD PTR tv238[ebp], xmm0
$LN49@draw_3d_ob:
  003af	f2 0f 10 85 24
	fe ff ff	 movsd	 xmm0, QWORD PTR tv238[ebp]
  003b7	f2 0f 11 85 2c
	fe ff ff	 movsd	 QWORD PTR tv239[ebp], xmm0
$LN51@draw_3d_ob:
  003bf	f2 0f 5a 85 2c
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv239[ebp]
  003c7	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _scalar_distance$40[ebp], xmm0

; 340  : 
; 341  : 		scalar_distance = 1.0 - ( scalar_distance / MAXIMUM_SHADOW_DISTANCE );

  003cf	f3 0f 5a 85 54
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _scalar_distance$40[ebp]
  003d7	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084500000000000
  003df	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  003e7	f2 0f 5c c8	 subsd	 xmm1, xmm0
  003eb	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  003ef	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _scalar_distance$40[ebp], xmm0

; 342  : 
; 343  : 		shadow_intensity *= scalar_distance;

  003f7	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _shadow_intensity$[ebp]
  003ff	f3 0f 59 85 54
	ff ff ff	 mulss	 xmm0, DWORD PTR _scalar_distance$40[ebp]
  00407	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _shadow_intensity$[ebp], xmm0

; 344  : 
; 345  : 		object_dissolve = obj->object_dissolve_value;

  0040f	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00412	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00415	c1 e9 04	 shr	 ecx, 4
  00418	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0041e	89 8d 30 fe ff
	ff		 mov	 DWORD PTR tv1107[ebp], ecx
  00424	f2 0f 2a 85 30
	fe ff ff	 cvtsi2sd xmm0, DWORD PTR tv1107[ebp]
  0042c	8b 95 30 fe ff
	ff		 mov	 edx, DWORD PTR tv1107[ebp]
  00432	c1 ea 1f	 shr	 edx, 31			; 0000001fH
  00435	f2 0f 58 04 d5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
  0043e	f2 0f 11 85 28
	fe ff ff	 movsd	 QWORD PTR tv1110[ebp], xmm0
  00446	f2 0f 5a 85 28
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv1110[ebp]
  0044e	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _object_dissolve$39[ebp], xmm0

; 346  : 
; 347  : 		object_dissolve /= 255.0;

  00456	f3 0f 5a 85 50
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _object_dissolve$39[ebp]
  0045e	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@406fe00000000000
  00466	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0046a	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _object_dissolve$39[ebp], xmm0

; 348  : 
; 349  : 		shadow_intensity *= object_dissolve;

  00472	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _shadow_intensity$[ebp]
  0047a	f3 0f 59 85 50
	ff ff ff	 mulss	 xmm0, DWORD PTR _object_dissolve$39[ebp]
  00482	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _shadow_intensity$[ebp], xmm0

; 350  : 
; 351  : 		shadow_intensity *= shadows_strength;

  0048a	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _shadow_intensity$[ebp]
  00492	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?shadows_strength@@3MA
  0049a	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _shadow_intensity$[ebp], xmm0

; 352  : 
; 353  : 		if ( translucent_3d_shadows )

  004a2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?translucent_3d_shadows@@3HA, 0
  004a9	74 2e		 je	 SHORT $LN24@draw_3d_ob

; 354  : 		{
; 355  : 			set_d3d_shadow_colour ( 0, 0, 0, shadow_intensity );

  004ab	51		 push	 ecx
  004ac	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _shadow_intensity$[ebp]
  004b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b9	51		 push	 ecx
  004ba	0f 57 c0	 xorps	 xmm0, xmm0
  004bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c2	51		 push	 ecx
  004c3	0f 57 c0	 xorps	 xmm0, xmm0
  004c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004cb	51		 push	 ecx
  004cc	0f 57 c0	 xorps	 xmm0, xmm0
  004cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d4	e8 00 00 00 00	 call	 ?set_d3d_shadow_colour@@YGXMMMM@Z ; set_d3d_shadow_colour
$LN24@draw_3d_ob:

; 356  : 		}
; 357  : 	}
; 358  : 
; 359  : 	//
; 360  : 	// If shadows are too translucent to be noticed - don't draw them
; 361  : 	//
; 362  : 
; 363  : 	if ( shadow_intensity < 1 )

  004d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004e1	0f 2f 85 7c ff
	ff ff		 comiss	 xmm0, DWORD PTR _shadow_intensity$[ebp]
  004e8	76 05		 jbe	 SHORT $LN25@draw_3d_ob

; 364  : 	{
; 365  : 		return;

  004ea	e9 56 11 00 00	 jmp	 $LN1@draw_3d_ob
$LN25@draw_3d_ob:

; 366  : 	}
; 367  : 
; 368  : 	//
; 369  : 	// Set up the object drawing global variables
; 370  : 	//
; 371  : 
; 372  : 	object_3d_points_current_base = 0;

  004ef	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?object_3d_points_current_base@@3HA, 0 ; object_3d_points_current_base

; 373  : 
; 374  : 	object_3d_object_current_base = 0;

  004f9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?object_3d_object_current_base@@3HA, 0 ; object_3d_object_current_base

; 375  : 
; 376  : 	object_3d_light_3d_current_base = 0;

  00503	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?object_3d_light_3d_current_base@@3HA, 0 ; object_3d_light_3d_current_base

; 377  : 
; 378  : 	//
; 379  : 	// Set the shadow zbiasing constants
; 380  : 	//
; 381  : 
; 382  : 	zbuffer_constant = zbuffer_constant_shadow_bias;

  0050d	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?zbuffer_constant_shadow_bias@@3NA
  00515	f2 0f 11 05 00
	00 00 00	 movsd	 QWORD PTR ?zbuffer_constant@@3NA, xmm0

; 383  : 
; 384  : 	//
; 385  : 	// Calculate the object's position relative to the view.
; 386  : 	//
; 387  : 
; 388  : 	pos = &obj->view_position;

  0051d	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00520	83 c0 38	 add	 eax, 56			; 00000038H
  00523	89 45 b0	 mov	 DWORD PTR _pos$[ebp], eax

; 389  : 
; 390  : 	{
; 391  : 		float
; 392  : 			fog_intensity;
; 393  : 
; 394  : 		int
; 395  : 			ifog_intensity;
; 396  : 
; 397  : 		vec3d
; 398  : 			shadow_relative_position;
; 399  : 
; 400  : 		float
; 401  : 			shadow_relative_depth;
; 402  : 
; 403  : 		//
; 404  : 		// Rotate the shadow world position to a relative position
; 405  : 		//
; 406  : 
; 407  : 		shadow_relative_position.x = shadow_world_position.x - visual_3d_vp->x;

  00526	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0052b	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _shadow_world_position$[ebp]
  00530	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00534	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _shadow_relative_position$33[ebp], xmm0

; 408  : 		shadow_relative_position.y = shadow_world_position.y - visual_3d_vp->y;

  0053c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00541	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _shadow_world_position$[ebp+4]
  00546	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  0054b	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _shadow_relative_position$33[ebp+4], xmm0

; 409  : 		shadow_relative_position.z = shadow_world_position.z - visual_3d_vp->z;

  00553	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00558	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _shadow_world_position$[ebp+8]
  0055d	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00562	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _shadow_relative_position$33[ebp+8], xmm0

; 410  : 
; 411  : 		//
; 412  : 		// Get only the Z value ( as we only want the fog value )
; 413  : 		//
; 414  : 
; 415  : 		shadow_relative_depth = shadow_relative_position.x * visual_3d_vp->attitude[0][0];

  0056a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0056f	6b c8 00	 imul	 ecx, eax, 0
  00572	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00578	8d 44 0a 0c	 lea	 eax, DWORD PTR [edx+ecx+12]
  0057c	b9 04 00 00 00	 mov	 ecx, 4
  00581	6b d1 00	 imul	 edx, ecx, 0
  00584	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _shadow_relative_position$33[ebp]
  0058c	f3 0f 59 04 10	 mulss	 xmm0, DWORD PTR [eax+edx]
  00591	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _shadow_relative_depth$32[ebp], xmm0

; 416  : 		shadow_relative_depth += shadow_relative_position.y * visual_3d_vp->attitude[1][0];

  00599	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0059e	c1 e0 00	 shl	 eax, 0
  005a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  005a7	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  005ab	b8 04 00 00 00	 mov	 eax, 4
  005b0	6b c8 00	 imul	 ecx, eax, 0
  005b3	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _shadow_relative_position$33[ebp+4]
  005bb	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  005c0	f3 0f 58 85 1c
	ff ff ff	 addss	 xmm0, DWORD PTR _shadow_relative_depth$32[ebp]
  005c8	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _shadow_relative_depth$32[ebp], xmm0

; 417  : 		shadow_relative_depth += shadow_relative_position.z * visual_3d_vp->attitude[2][0];

  005d0	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005d5	d1 e0		 shl	 eax, 1
  005d7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  005dd	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  005e1	b8 04 00 00 00	 mov	 eax, 4
  005e6	6b c8 00	 imul	 ecx, eax, 0
  005e9	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _shadow_relative_position$33[ebp+8]
  005f1	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  005f6	f3 0f 58 85 1c
	ff ff ff	 addss	 xmm0, DWORD PTR _shadow_relative_depth$32[ebp]
  005fe	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _shadow_relative_depth$32[ebp], xmm0

; 418  : 
; 419  : 		fog_intensity = get_fog_distance_value ( shadow_relative_depth );

  00606	51		 push	 ecx
  00607	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _shadow_relative_depth$32[ebp]
  0060f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00614	e8 00 00 00 00	 call	 ?get_fog_distance_value@@YGMM@Z ; get_fog_distance_value
  00619	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR _fog_intensity$35[ebp]

; 420  : 
; 421  : 		asm_convert_float_to_int ( fog_intensity, &ifog_intensity );

  0061f	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR _ifog_intensity$34[ebp]
  00625	50		 push	 eax
  00626	51		 push	 ecx
  00627	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _fog_intensity$35[ebp]
  0062f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00634	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 422  : 
; 423  : 		set_d3d_fog_face_intensity ( ifog_intensity );

  00639	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _ifog_intensity$34[ebp]
  0063f	50		 push	 eax
  00640	e8 00 00 00 00	 call	 ?set_d3d_fog_face_intensity@@YGXH@Z ; set_d3d_fog_face_intensity

; 424  : 	}
; 425  : 
; 426  : 	//
; 427  : 	// Rotate the sun's direction vector into the object's coordinate system
; 428  : 	//
; 429  : 
; 430  : 	{
; 431  : 
; 432  : 		float
; 433  : 			lx,
; 434  : 			ly,
; 435  : 			lz;
; 436  : 
; 437  : 		lx = ( current_3d_sun->lx * obj->vp.attitude[0][0] );

  00645	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0064a	6b c8 00	 imul	 ecx, eax, 0
  0064d	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00650	8d 44 0a 14	 lea	 eax, DWORD PTR [edx+ecx+20]
  00654	b9 04 00 00 00	 mov	 ecx, 4
  00659	6b d1 00	 imul	 edx, ecx, 0
  0065c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  00662	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00666	f3 0f 59 04 10	 mulss	 xmm0, DWORD PTR [eax+edx]
  0066b	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _lx$31[ebp], xmm0

; 438  : 		lx +=  ( current_3d_sun->ly * obj->vp.attitude[0][1] );

  00673	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00678	6b c8 00	 imul	 ecx, eax, 0
  0067b	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  0067e	8d 44 0a 14	 lea	 eax, DWORD PTR [edx+ecx+20]
  00682	b9 04 00 00 00	 mov	 ecx, 4
  00687	c1 e1 00	 shl	 ecx, 0
  0068a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  00690	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  00695	f3 0f 59 04 08	 mulss	 xmm0, DWORD PTR [eax+ecx]
  0069a	f3 0f 58 85 18
	ff ff ff	 addss	 xmm0, DWORD PTR _lx$31[ebp]
  006a2	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _lx$31[ebp], xmm0

; 439  : 		lx += ( current_3d_sun->lz * obj->vp.attitude[0][2] );

  006aa	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  006af	6b c8 00	 imul	 ecx, eax, 0
  006b2	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  006b5	8d 44 0a 14	 lea	 eax, DWORD PTR [edx+ecx+20]
  006b9	b9 04 00 00 00	 mov	 ecx, 4
  006be	d1 e1		 shl	 ecx, 1
  006c0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  006c6	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  006cb	f3 0f 59 04 08	 mulss	 xmm0, DWORD PTR [eax+ecx]
  006d0	f3 0f 58 85 18
	ff ff ff	 addss	 xmm0, DWORD PTR _lx$31[ebp]
  006d8	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _lx$31[ebp], xmm0

; 440  : 
; 441  : 		ly = ( current_3d_sun->lx * obj->vp.attitude[1][0] );

  006e0	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  006e5	c1 e0 00	 shl	 eax, 0
  006e8	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  006eb	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  006ef	b8 04 00 00 00	 mov	 eax, 4
  006f4	6b c8 00	 imul	 ecx, eax, 0
  006f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  006fc	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00700	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  00705	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _ly$30[ebp], xmm0

; 442  : 		ly += ( current_3d_sun->ly * obj->vp.attitude[1][1] );

  0070d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00712	c1 e0 00	 shl	 eax, 0
  00715	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00718	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  0071c	b8 04 00 00 00	 mov	 eax, 4
  00721	c1 e0 00	 shl	 eax, 0
  00724	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  0072a	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0072f	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  00734	f3 0f 58 85 14
	ff ff ff	 addss	 xmm0, DWORD PTR _ly$30[ebp]
  0073c	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _ly$30[ebp], xmm0

; 443  : 		ly += ( current_3d_sun->lz * obj->vp.attitude[1][2] );

  00744	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00749	c1 e0 00	 shl	 eax, 0
  0074c	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0074f	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  00753	b8 04 00 00 00	 mov	 eax, 4
  00758	d1 e0		 shl	 eax, 1
  0075a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  00760	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00765	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  0076a	f3 0f 58 85 14
	ff ff ff	 addss	 xmm0, DWORD PTR _ly$30[ebp]
  00772	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _ly$30[ebp], xmm0

; 444  : 
; 445  : 
; 446  : 		lz = ( current_3d_sun->lx * obj->vp.attitude[2][0] );

  0077a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0077f	d1 e0		 shl	 eax, 1
  00781	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00784	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  00788	b8 04 00 00 00	 mov	 eax, 4
  0078d	6b c8 00	 imul	 ecx, eax, 0
  00790	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  00795	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00799	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  0079e	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _lz$29[ebp], xmm0

; 447  : 		lz += ( current_3d_sun->ly * obj->vp.attitude[2][1] );

  007a6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  007ab	d1 e0		 shl	 eax, 1
  007ad	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  007b0	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  007b4	b8 04 00 00 00	 mov	 eax, 4
  007b9	c1 e0 00	 shl	 eax, 0
  007bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  007c2	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  007c7	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  007cc	f3 0f 58 85 10
	ff ff ff	 addss	 xmm0, DWORD PTR _lz$29[ebp]
  007d4	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _lz$29[ebp], xmm0

; 448  : 		lz += ( current_3d_sun->lz * obj->vp.attitude[2][2] );

  007dc	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  007e1	d1 e0		 shl	 eax, 1
  007e3	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  007e6	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  007ea	b8 04 00 00 00	 mov	 eax, 4
  007ef	d1 e0		 shl	 eax, 1
  007f1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  007f7	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  007fc	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  00801	f3 0f 58 85 10
	ff ff ff	 addss	 xmm0, DWORD PTR _lz$29[ebp]
  00809	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _lz$29[ebp], xmm0

; 449  : 
; 450  : 		current_sun_object_view_vector.x = lx;

  00811	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _lx$31[ebp]
  00819	f3 0f 11 45 8c	 movss	 DWORD PTR _current_sun_object_view_vector$[ebp], xmm0

; 451  : 		current_sun_object_view_vector.y = ly;

  0081e	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _ly$30[ebp]
  00826	f3 0f 11 45 90	 movss	 DWORD PTR _current_sun_object_view_vector$[ebp+4], xmm0

; 452  : 		current_sun_object_view_vector.z = lz;

  0082b	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _lz$29[ebp]
  00833	f3 0f 11 45 94	 movss	 DWORD PTR _current_sun_object_view_vector$[ebp+8], xmm0

; 453  : 
; 454  : 		//
; 455  : 		// Calculate the relative camera position in the object viewspace
; 456  : 		//
; 457  : 
; 458  : 		current_scaled_sun_object_view_vector.x = lx * 55;

  00838	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _lx$31[ebp]
  00840	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@425c0000
  00848	f3 0f 11 45 80	 movss	 DWORD PTR _current_scaled_sun_object_view_vector$[ebp], xmm0

; 459  : 		current_scaled_sun_object_view_vector.y = ly * 55;

  0084d	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _ly$30[ebp]
  00855	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@425c0000
  0085d	f3 0f 11 45 84	 movss	 DWORD PTR _current_scaled_sun_object_view_vector$[ebp+4], xmm0

; 460  : 		current_scaled_sun_object_view_vector.z = lz * 55;

  00862	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _lz$29[ebp]
  0086a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@425c0000
  00872	f3 0f 11 45 88	 movss	 DWORD PTR _current_scaled_sun_object_view_vector$[ebp+8], xmm0

; 461  : 	}
; 462  : 
; 463  : 	//
; 464  : 	// Put the view attitude matrix into the rotation matrix.
; 465  : 	//
; 466  : 
; 467  : 	rotation_3d[0][0] = ( visual_3d_vp->xv.x );

  00877	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0087c	6b c8 00	 imul	 ecx, eax, 0
  0087f	ba 04 00 00 00	 mov	 edx, 4
  00884	6b c2 00	 imul	 eax, edx, 0
  00887	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0088d	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  00890	89 94 01 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax], edx

; 468  : 	rotation_3d[0][1] = ( visual_3d_vp->yv.x );

  00897	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0089c	6b c8 00	 imul	 ecx, eax, 0
  0089f	ba 04 00 00 00	 mov	 edx, 4
  008a4	c1 e2 00	 shl	 edx, 0
  008a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  008ac	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  008af	89 84 11 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx], eax

; 469  : 	rotation_3d[0][2] = ( visual_3d_vp->zv.x );

  008b6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  008bb	6b c8 00	 imul	 ecx, eax, 0
  008be	ba 04 00 00 00	 mov	 edx, 4
  008c3	d1 e2		 shl	 edx, 1
  008c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  008ca	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  008cd	89 84 11 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx], eax

; 470  : 
; 471  : 	rotation_3d[1][0] = ( visual_3d_vp->xv.y );

  008d4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  008d9	c1 e0 00	 shl	 eax, 0
  008dc	b9 04 00 00 00	 mov	 ecx, 4
  008e1	6b d1 00	 imul	 edx, ecx, 0
  008e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  008ea	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  008ed	89 8c 10 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], ecx

; 472  : 	rotation_3d[1][1] = ( visual_3d_vp->yv.y );

  008f4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  008f9	c1 e0 00	 shl	 eax, 0
  008fc	b9 04 00 00 00	 mov	 ecx, 4
  00901	c1 e1 00	 shl	 ecx, 0
  00904	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0090a	8b 52 1c	 mov	 edx, DWORD PTR [edx+28]
  0090d	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], edx

; 473  : 	rotation_3d[1][2] = ( visual_3d_vp->zv.y );

  00914	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00919	c1 e0 00	 shl	 eax, 0
  0091c	b9 04 00 00 00	 mov	 ecx, 4
  00921	d1 e1		 shl	 ecx, 1
  00923	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00929	8b 52 28	 mov	 edx, DWORD PTR [edx+40]
  0092c	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], edx

; 474  : 
; 475  : 	rotation_3d[2][0] = ( visual_3d_vp->xv.z );

  00933	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00938	d1 e0		 shl	 eax, 1
  0093a	b9 04 00 00 00	 mov	 ecx, 4
  0093f	6b d1 00	 imul	 edx, ecx, 0
  00942	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00948	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0094b	89 8c 10 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], ecx

; 476  : 	rotation_3d[2][1] = ( visual_3d_vp->yv.z );

  00952	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00957	d1 e0		 shl	 eax, 1
  00959	b9 04 00 00 00	 mov	 ecx, 4
  0095e	c1 e1 00	 shl	 ecx, 0
  00961	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00967	8b 52 20	 mov	 edx, DWORD PTR [edx+32]
  0096a	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], edx

; 477  : 	rotation_3d[2][2] = ( visual_3d_vp->zv.z );

  00971	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00976	d1 e0		 shl	 eax, 1
  00978	b9 04 00 00 00	 mov	 ecx, 4
  0097d	d1 e1		 shl	 ecx, 1
  0097f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00985	8b 52 2c	 mov	 edx, DWORD PTR [edx+44]
  00988	89 94 08 00 00
	00 00		 mov	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], edx

; 478  : 
; 479  : 	//
; 480  : 	// Rotate the light source vector to be relative to the object.
; 481  : 	//
; 482  : 
; 483  : 	light_ptr = current_3d_lights;

  0098f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_3d_lights@@3PAULIGHT_3D_SOURCE@@A ; current_3d_lights
  00994	89 45 b8	 mov	 DWORD PTR _light_ptr$[ebp], eax

; 484  : 
; 485  : 	prev_light = NULL;

  00997	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _prev_light$[ebp], 0

; 486  : 
; 487  : 	light = NULL;

  0099e	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _light$[ebp], 0

; 488  : 
; 489  : 	//
; 490  : 	//	Set up this objects' object info structure
; 491  : 	//
; 492  : 
; 493  : 	object_3d_object_base[object_3d_object_current_base].lights = light;

  009a5	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  009ac	8b 4d b4	 mov	 ecx, DWORD PTR _light$[ebp]
  009af	89 88 04 00 00
	00		 mov	 DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[eax+4], ecx

; 494  : 
; 495  : 	object_3d_object_base[object_3d_object_current_base].points_base = object_3d_points_current_base;

  009b5	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  009bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?object_3d_points_current_base@@3HA ; object_3d_points_current_base
  009c2	89 88 24 00 00
	00		 mov	 DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[eax+36], ecx

; 496  : 
; 497  : 	current_object_3d_object_base = &object_3d_object_base[object_3d_object_current_base];

  009c8	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  009cf	05 00 00 00 00	 add	 eax, OFFSET ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A ; object_3d_object_base
  009d4	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_object_base@@3PAUOBJECT_3D_INFO@@A, eax ; current_object_3d_object_base

; 498  : 
; 499  : 	//
; 500  : 	// Get the object number
; 501  : 	//
; 502  : 
; 503  : 	object_number = get_object_shadow_polygon_object ( obj->object_number );

  009d9	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  009dc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  009df	51		 push	 ecx
  009e0	e8 00 00 00 00	 call	 ?get_object_shadow_polygon_object@@YGHH@Z ; get_object_shadow_polygon_object
  009e5	89 45 fc	 mov	 DWORD PTR _object_number$[ebp], eax

; 504  : 
; 505  : 	if ( object_number )

  009e8	83 7d fc 00	 cmp	 DWORD PTR _object_number$[ebp], 0
  009ec	0f 84 3b 08 00
	00		 je	 $LN26@draw_3d_ob

; 506  : 	{
; 507  : 		//
; 508  : 		// We have a soft shadow object
; 509  : 		//
; 510  : 
; 511  : 		object_3d_object_base[object_3d_object_current_base].object_number = object_number;

  009f2	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  009f9	8b 4d fc	 mov	 ecx, DWORD PTR _object_number$[ebp]
  009fc	89 88 20 00 00
	00		 mov	 DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[eax+32], ecx

; 512  : 
; 513  : 		//
; 514  : 		// Transform the object's shape data
; 515  : 		//
; 516  : 
; 517  : 		{
; 518  : 			vec3d
; 519  : 				scale;
; 520  : 
; 521  : 			scale.x = objects_3d_scene_database[obj->object_number].shadow_polygon_object_scale.x;

  00a02	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00a05	69 48 04 e0 00
	00 00		 imul	 ecx, DWORD PTR [eax+4], 224
  00a0c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  00a12	f3 0f 10 44 0a
	3c		 movss	 xmm0, DWORD PTR [edx+ecx+60]
  00a18	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _scale$28[ebp], xmm0

; 522  : 			scale.y = objects_3d_scene_database[obj->object_number].shadow_polygon_object_scale.y;

  00a20	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00a23	69 48 04 e0 00
	00 00		 imul	 ecx, DWORD PTR [eax+4], 224
  00a2a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  00a30	f3 0f 10 44 0a
	40		 movss	 xmm0, DWORD PTR [edx+ecx+64]
  00a36	f3 0f 11 85 08
	ff ff ff	 movss	 DWORD PTR _scale$28[ebp+4], xmm0

; 523  : 			scale.z = objects_3d_scene_database[obj->object_number].shadow_polygon_object_scale.z;

  00a3e	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00a41	69 48 04 e0 00
	00 00		 imul	 ecx, DWORD PTR [eax+4], 224
  00a48	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  00a4e	f3 0f 10 44 0a
	44		 movss	 xmm0, DWORD PTR [edx+ecx+68]
  00a54	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _scale$28[ebp+8], xmm0

; 524  : 			scale.x *= obj->relative_scale.x;	//1;

  00a5c	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00a5f	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$28[ebp]
  00a67	f3 0f 59 40 44	 mulss	 xmm0, DWORD PTR [eax+68]
  00a6c	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _scale$28[ebp], xmm0

; 525  : 			scale.y *= obj->relative_scale.y;	//1;

  00a74	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00a77	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$28[ebp+4]
  00a7f	f3 0f 59 40 48	 mulss	 xmm0, DWORD PTR [eax+72]
  00a84	f3 0f 11 85 08
	ff ff ff	 movss	 DWORD PTR _scale$28[ebp+4], xmm0

; 526  : 			scale.z *= obj->relative_scale.z;	//1;

  00a8c	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00a8f	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$28[ebp+8]
  00a97	f3 0f 59 40 4c	 mulss	 xmm0, DWORD PTR [eax+76]
  00a9c	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _scale$28[ebp+8], xmm0

; 527  : 
; 528  : 
; 529  : 			transform_3d_object_shadow ( &objects_3d_data[object_number],

  00aa4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_3d_points_current_base@@3HA ; object_3d_points_current_base
  00aa9	50		 push	 eax
  00aaa	83 ec 08	 sub	 esp, 8
  00aad	f2 0f 10 85 74
	ff ff ff	 movsd	 xmm0, QWORD PTR _projection_factor$[ebp]
  00ab5	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00aba	83 ec 08	 sub	 esp, 8
  00abd	f2 0f 10 85 6c
	ff ff ff	 movsd	 xmm0, QWORD PTR _projection_constant$[ebp]
  00ac5	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00aca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  00ad0	51		 push	 ecx
  00ad1	8d 55 98	 lea	 edx, DWORD PTR _terrain_normal$[ebp]
  00ad4	52		 push	 edx
  00ad5	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00ad8	83 c0 08	 add	 eax, 8
  00adb	50		 push	 eax
  00adc	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00adf	83 c1 08	 add	 ecx, 8
  00ae2	51		 push	 ecx
  00ae3	8d 95 04 ff ff
	ff		 lea	 edx, DWORD PTR _scale$28[ebp]
  00ae9	52		 push	 edx
  00aea	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00aee	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00af4	50		 push	 eax
  00af5	e8 00 00 00 00	 call	 ?transform_3d_object_shadow@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAUVIEWPOINT@@111NNH@Z ; transform_3d_object_shadow

; 530  : 													&scale,
; 531  : 													&obj->vp, &obj->vp.position,
; 532  : 													&terrain_normal, &current_3d_sun->light_direction,
; 533  : 													projection_constant, projection_factor,
; 534  : 													object_3d_points_current_base );
; 535  : 		}
; 536  : 
; 537  : //		set_d3d_int_state ( D3DRENDERSTATE_ZFUNC, zbuffer_default_comparison );
; 538  : 		set_d3d_int_state ( D3DRENDERSTATE_ZFUNC, zbuffer_shadow_comparison );	//D3DCMP_GREATER );

  00afa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?zbuffer_shadow_comparison@@3W4_D3DCMPFUNC@@A ; zbuffer_shadow_comparison
  00aff	50		 push	 eax
  00b00	6a 17		 push	 23			; 00000017H
  00b02	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 539  : 
; 540  : 		set_d3d_texture_stage_state ( 0, D3DTSS_ALPHAOP, D3DTOP_MODULATE );

  00b07	6a 04		 push	 4
  00b09	6a 04		 push	 4
  00b0b	6a 00		 push	 0
  00b0d	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 541  : 		set_d3d_texture_stage_state ( 0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE );

  00b12	6a 02		 push	 2
  00b14	6a 05		 push	 5
  00b16	6a 00		 push	 0
  00b18	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 542  : 		set_d3d_texture_stage_state ( 0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE );

  00b1d	6a 00		 push	 0
  00b1f	6a 06		 push	 6
  00b21	6a 00		 push	 0
  00b23	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 543  : 
; 544  : 		set_d3d_texture_stage_state ( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );

  00b28	6a 04		 push	 4
  00b2a	6a 01		 push	 1
  00b2c	6a 00		 push	 0
  00b2e	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 545  : 		set_d3d_texture_stage_state ( 0, D3DTSS_COLORARG1, D3DTA_TEXTURE );

  00b33	6a 02		 push	 2
  00b35	6a 02		 push	 2
  00b37	6a 00		 push	 0
  00b39	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 546  : 		set_d3d_texture_stage_state ( 0, D3DTSS_COLORARG2, D3DTA_DIFFUSE );

  00b3e	6a 00		 push	 0
  00b40	6a 03		 push	 3
  00b42	6a 00		 push	 0
  00b44	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 547  : 
; 548  : 		set_d3d_texture_stage_state ( 0, D3DTSS_MAGFILTER, D3DTFG_LINEAR );

  00b49	6a 02		 push	 2
  00b4b	6a 10		 push	 16			; 00000010H
  00b4d	6a 00		 push	 0
  00b4f	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 549  : 		set_d3d_texture_stage_state ( 0, D3DTSS_MINFILTER, D3DTFN_LINEAR );

  00b54	6a 02		 push	 2
  00b56	6a 11		 push	 17			; 00000011H
  00b58	6a 00		 push	 0
  00b5a	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 550  : 		set_d3d_texture_stage_state ( 0, D3DTSS_MIPFILTER, D3DTFP_POINT );

  00b5f	6a 02		 push	 2
  00b61	6a 12		 push	 18			; 00000012H
  00b63	6a 00		 push	 0
  00b65	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 551  : 		set_d3d_texture_stage_state ( 0, D3DTSS_ADDRESSU, D3DTADDRESS_CLAMP );

  00b6a	6a 03		 push	 3
  00b6c	6a 0d		 push	 13			; 0000000dH
  00b6e	6a 00		 push	 0
  00b70	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 552  : 		set_d3d_texture_stage_state ( 0, D3DTSS_ADDRESSV, D3DTADDRESS_CLAMP );

  00b75	6a 03		 push	 3
  00b77	6a 0e		 push	 14			; 0000000eH
  00b79	6a 00		 push	 0
  00b7b	e8 00 00 00 00	 call	 ?set_d3d_texture_stage_state@@YGXHHH@Z ; set_d3d_texture_stage_state

; 553  : 
; 554  : 		set_d3d_int_state ( D3DRENDERSTATE_SRCBLEND, D3DBLEND_SRCALPHA );

  00b80	6a 05		 push	 5
  00b82	6a 13		 push	 19			; 00000013H
  00b84	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 555  : 		set_d3d_int_state ( D3DRENDERSTATE_DESTBLEND, D3DBLEND_INVSRCALPHA );

  00b89	6a 06		 push	 6
  00b8b	6a 14		 push	 20			; 00000014H
  00b8d	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 556  : 		set_d3d_int_state ( D3DRENDERSTATE_CULLMODE, D3DCULL_NONE );

  00b92	6a 01		 push	 1
  00b94	6a 16		 push	 22			; 00000016H
  00b96	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 557  : 
; 558  : 		shadow_intensity = bound ( shadow_intensity, 0, 255 );

  00b9b	0f 57 c0	 xorps	 xmm0, xmm0
  00b9e	0f 2f 85 7c ff
	ff ff		 comiss	 xmm0, DWORD PTR _shadow_intensity$[ebp]
  00ba5	76 0d		 jbe	 SHORT $LN54@draw_3d_ob
  00ba7	0f 57 c0	 xorps	 xmm0, xmm0
  00baa	f3 0f 11 85 30
	fe ff ff	 movss	 DWORD PTR tv558[ebp], xmm0
  00bb2	eb 43		 jmp	 SHORT $LN55@draw_3d_ob
$LN54@draw_3d_ob:
  00bb4	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _shadow_intensity$[ebp]
  00bbc	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@437f0000
  00bc3	76 12		 jbe	 SHORT $LN52@draw_3d_ob
  00bc5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437f0000
  00bcd	f3 0f 11 85 2c
	fe ff ff	 movss	 DWORD PTR tv557[ebp], xmm0
  00bd5	eb 10		 jmp	 SHORT $LN53@draw_3d_ob
$LN52@draw_3d_ob:
  00bd7	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _shadow_intensity$[ebp]
  00bdf	f3 0f 11 85 2c
	fe ff ff	 movss	 DWORD PTR tv557[ebp], xmm0
$LN53@draw_3d_ob:
  00be7	f3 0f 10 85 2c
	fe ff ff	 movss	 xmm0, DWORD PTR tv557[ebp]
  00bef	f3 0f 11 85 30
	fe ff ff	 movss	 DWORD PTR tv558[ebp], xmm0
$LN55@draw_3d_ob:
  00bf7	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR tv558[ebp]
  00bff	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _shadow_intensity$[ebp], xmm0

; 559  : 
; 560  : 		{
; 561  : 			face_surface_description
; 562  : 				*surface;
; 563  : 
; 564  : 			int
; 565  : 				number_of_surface_points,
; 566  : 				surfaces_left,
; 567  : 				surface_face_count,
; 568  : 				point_reference_index,
; 569  : 				texture_reference_index;
; 570  : 
; 571  : 			point_reference_index = 0;

  00c07	c7 85 f0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _point_reference_index$23[ebp], 0

; 572  : 
; 573  : 			texture_reference_index = 0;

  00c11	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _texture_reference_index$22[ebp], 0

; 574  : 
; 575  : 			surface = objects_3d_data[object_number].surfaces;

  00c1b	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00c1f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00c25	8b 54 01 50	 mov	 edx, DWORD PTR [ecx+eax+80]
  00c29	89 95 00 ff ff
	ff		 mov	 DWORD PTR _surface$27[ebp], edx

; 576  : 
; 577  : 			faces = objects_3d_data[object_number].faces;

  00c2f	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00c33	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00c39	8b 54 01 44	 mov	 edx, DWORD PTR [ecx+eax+68]
  00c3d	89 55 f0	 mov	 DWORD PTR _faces$[ebp], edx

; 578  : 
; 579  : 			surface_face_count = surface->number_of_faces;

  00c40	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _surface$27[ebp]
  00c46	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00c4a	89 8d f4 fe ff
	ff		 mov	 DWORD PTR _surface_face_count$24[ebp], ecx

; 580  : 
; 581  : 			current_object_3d_surface = objects_3d_data[object_number].surfaces;

  00c50	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00c54	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00c5a	8b 54 01 50	 mov	 edx, DWORD PTR [ecx+eax+80]
  00c5e	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A, edx ; current_object_3d_surface

; 582  : 			current_object_3d_point_list = objects_3d_data[object_number].object_faces_point_plain_list;

  00c64	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00c68	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00c6e	8b 54 01 4c	 mov	 edx, DWORD PTR [ecx+eax+76]
  00c72	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, edx ; current_object_3d_point_list

; 583  : 			current_object_3d_face_normal_list = objects_3d_data[object_number].object_face_normal_references;

  00c78	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00c7c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00c82	8b 54 01 54	 mov	 edx, DWORD PTR [ecx+eax+84]
  00c86	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, edx ; current_object_3d_face_normal_list

; 584  : 			current_object_3d_transformed_normals = transformed_3d_normals;

  00c8c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_transformed_normals@@3PAUOBJECT_3D_TRANSFORMED_POINT_NORMAL@@A, OFFSET ?transformed_3d_normals@@3PAUOBJECT_3D_TRANSFORMED_POINT_NORMAL@@A ; current_object_3d_transformed_normals, transformed_3d_normals

; 585  : 
; 586  : 			current_object_3d_surface_point_list = objects_3d_data[object_number].surface_points;

  00c96	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00c9a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00ca0	8b 54 01 5c	 mov	 edx, DWORD PTR [ecx+eax+92]
  00ca4	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, edx ; current_object_3d_surface_point_list

; 587  : 			current_object_3d_surface_point_texture_list = objects_3d_data[object_number].surface_texture_points;

  00caa	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00cae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00cb4	8b 54 01 58	 mov	 edx, DWORD PTR [ecx+eax+88]
  00cb8	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A, edx ; current_object_3d_surface_point_texture_list

; 588  : 			current_object_3d_surface_point_normal_list = objects_3d_data[object_number].surface_point_normals;

  00cbe	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00cc2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00cc8	8b 54 01 60	 mov	 edx, DWORD PTR [ecx+eax+96]
  00ccc	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface_point_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, edx ; current_object_3d_surface_point_normal_list

; 589  : 
; 590  : 			for ( surfaces_left = objects_3d_data[object_number].number_of_surfaces; surfaces_left > 0; surfaces_left-- )

  00cd2	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00cd6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00cdc	0f b7 54 01 06	 movzx	 edx, WORD PTR [ecx+eax+6]
  00ce1	89 95 f8 fe ff
	ff		 mov	 DWORD PTR _surfaces_left$25[ebp], edx
  00ce7	eb 0f		 jmp	 SHORT $LN4@draw_3d_ob
$LN2@draw_3d_ob:
  00ce9	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _surfaces_left$25[ebp]
  00cef	83 e8 01	 sub	 eax, 1
  00cf2	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _surfaces_left$25[ebp], eax
$LN4@draw_3d_ob:
  00cf8	83 bd f8 fe ff
	ff 00		 cmp	 DWORD PTR _surfaces_left$25[ebp], 0
  00cff	0f 8e 0d 05 00
	00		 jle	 $LN3@draw_3d_ob

; 591  : 			{
; 592  : 				int
; 593  : 					faces_left;
; 594  : 
; 595  : 				number_of_surface_points = current_object_3d_surface->number_of_points;

  00d05	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00d0a	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  00d0e	89 8d fc fe ff
	ff		 mov	 DWORD PTR _number_of_surface_points$26[ebp], ecx

; 596  : 				if ( number_of_surface_points == 0 )

  00d14	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _number_of_surface_points$26[ebp], 0
  00d1b	75 0a		 jne	 SHORT $LN28@draw_3d_ob

; 597  : 				{
; 598  : 					number_of_surface_points = 256;

  00d1d	c7 85 fc fe ff
	ff 00 01 00 00	 mov	 DWORD PTR _number_of_surface_points$26[ebp], 256 ; 00000100H
$LN28@draw_3d_ob:

; 599  : 				}
; 600  : 
; 601  : 				for ( faces_left = current_object_3d_surface->number_of_faces; faces_left > 0; faces_left-- )

  00d27	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00d2c	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00d30	89 8d e8 fe ff
	ff		 mov	 DWORD PTR _faces_left$21[ebp], ecx
  00d36	eb 0f		 jmp	 SHORT $LN7@draw_3d_ob
$LN5@draw_3d_ob:
  00d38	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _faces_left$21[ebp]
  00d3e	83 e8 01	 sub	 eax, 1
  00d41	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _faces_left$21[ebp], eax
$LN7@draw_3d_ob:
  00d47	83 bd e8 fe ff
	ff 00		 cmp	 DWORD PTR _faces_left$21[ebp], 0
  00d4e	0f 8e 13 04 00
	00		 jle	 $LN6@draw_3d_ob

; 602  : 				{
; 603  : 					if ( surface->polygons )

  00d54	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _surface$27[ebp]
  00d5a	66 8b 08	 mov	 cx, WORD PTR [eax]
  00d5d	66 83 e1 01	 and	 cx, 1
  00d61	0f b7 d1	 movzx	 edx, cx
  00d64	85 d2		 test	 edx, edx
  00d66	0f 84 e9 03 00
	00		 je	 $LN29@draw_3d_ob

; 604  : 					{
; 605  : 						if ( surface->textured )

  00d6c	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _surface$27[ebp]
  00d72	66 8b 08	 mov	 cx, WORD PTR [eax]
  00d75	66 c1 e9 03	 shr	 cx, 3
  00d79	66 83 e1 01	 and	 cx, 1
  00d7d	0f b7 d1	 movzx	 edx, cx
  00d80	85 d2		 test	 edx, edx
  00d82	0f 84 8c 03 00
	00		 je	 $LN31@draw_3d_ob

; 606  : 						{
; 607  : 							vec3d
; 608  : 								vec1,
; 609  : 								vec2,
; 610  : 								face_normal;
; 611  : 
; 612  : 							object_short_3d_point
; 613  : 								*points;
; 614  : 
; 615  : 							int
; 616  : 								point0,
; 617  : 								point1,
; 618  : 								point2;
; 619  : 
; 620  : 							float
; 621  : 								angle;
; 622  : 
; 623  : 							points = objects_3d_data[object_number].points;

  00d88	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00d8c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00d92	8b 54 01 40	 mov	 edx, DWORD PTR [ecx+eax+64]
  00d96	89 95 c0 fe ff
	ff		 mov	 DWORD PTR _points$17[ebp], edx

; 624  : 
; 625  : 							//
; 626  : 							// Calculate the face normal
; 627  : 							//
; 628  : 
; 629  : 							point0 = current_object_3d_surface_point_list[ current_object_3d_point_list[0].point ].point;

  00d9c	b8 01 00 00 00	 mov	 eax, 1
  00da1	6b c8 00	 imul	 ecx, eax, 0
  00da4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  00daa	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00dae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  00db4	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00db8	89 95 bc fe ff
	ff		 mov	 DWORD PTR _point0$16[ebp], edx

; 630  : 							point1 = current_object_3d_surface_point_list[ current_object_3d_point_list[1].point ].point;

  00dbe	b8 01 00 00 00	 mov	 eax, 1
  00dc3	c1 e0 00	 shl	 eax, 0
  00dc6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  00dcc	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  00dd0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  00dd5	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  00dd9	89 8d b8 fe ff
	ff		 mov	 DWORD PTR _point1$15[ebp], ecx

; 631  : 							point2 = current_object_3d_surface_point_list[ current_object_3d_point_list[2].point ].point;

  00ddf	b8 01 00 00 00	 mov	 eax, 1
  00de4	d1 e0		 shl	 eax, 1
  00de6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  00dec	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  00df0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  00df5	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  00df9	89 8d b4 fe ff
	ff		 mov	 DWORD PTR _point2$14[ebp], ecx

; 632  : 
; 633  : 							vec2.x = points[point2].x - points[point1].x;

  00dff	6b 85 b4 fe ff
	ff 06		 imul	 eax, DWORD PTR _point2$14[ebp], 6
  00e06	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _points$17[ebp]
  00e0c	0f bf 14 01	 movsx	 edx, WORD PTR [ecx+eax]
  00e10	6b 85 b8 fe ff
	ff 06		 imul	 eax, DWORD PTR _point1$15[ebp], 6
  00e17	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _points$17[ebp]
  00e1d	0f bf 04 01	 movsx	 eax, WORD PTR [ecx+eax]
  00e21	2b d0		 sub	 edx, eax
  00e23	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00e27	f3 0f 11 85 d0
	fe ff ff	 movss	 DWORD PTR _vec2$19[ebp], xmm0

; 634  : 							vec2.y = points[point2].y - points[point1].y;

  00e2f	6b 85 b4 fe ff
	ff 06		 imul	 eax, DWORD PTR _point2$14[ebp], 6
  00e36	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _points$17[ebp]
  00e3c	0f bf 54 01 02	 movsx	 edx, WORD PTR [ecx+eax+2]
  00e41	6b 85 b8 fe ff
	ff 06		 imul	 eax, DWORD PTR _point1$15[ebp], 6
  00e48	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _points$17[ebp]
  00e4e	0f bf 44 01 02	 movsx	 eax, WORD PTR [ecx+eax+2]
  00e53	2b d0		 sub	 edx, eax
  00e55	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00e59	f3 0f 11 85 d4
	fe ff ff	 movss	 DWORD PTR _vec2$19[ebp+4], xmm0

; 635  : 							vec2.z = points[point2].z - points[point1].z;

  00e61	6b 85 b4 fe ff
	ff 06		 imul	 eax, DWORD PTR _point2$14[ebp], 6
  00e68	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _points$17[ebp]
  00e6e	0f bf 54 01 04	 movsx	 edx, WORD PTR [ecx+eax+4]
  00e73	6b 85 b8 fe ff
	ff 06		 imul	 eax, DWORD PTR _point1$15[ebp], 6
  00e7a	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _points$17[ebp]
  00e80	0f bf 44 01 04	 movsx	 eax, WORD PTR [ecx+eax+4]
  00e85	2b d0		 sub	 edx, eax
  00e87	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00e8b	f3 0f 11 85 d8
	fe ff ff	 movss	 DWORD PTR _vec2$19[ebp+8], xmm0

; 636  : 							vec1.x = points[point1].x - points[point0].x;

  00e93	6b 85 b8 fe ff
	ff 06		 imul	 eax, DWORD PTR _point1$15[ebp], 6
  00e9a	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _points$17[ebp]
  00ea0	0f bf 14 01	 movsx	 edx, WORD PTR [ecx+eax]
  00ea4	6b 85 bc fe ff
	ff 06		 imul	 eax, DWORD PTR _point0$16[ebp], 6
  00eab	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _points$17[ebp]
  00eb1	0f bf 04 01	 movsx	 eax, WORD PTR [ecx+eax]
  00eb5	2b d0		 sub	 edx, eax
  00eb7	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00ebb	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR _vec1$20[ebp], xmm0

; 637  : 							vec1.y = points[point1].y - points[point0].y;

  00ec3	6b 85 b8 fe ff
	ff 06		 imul	 eax, DWORD PTR _point1$15[ebp], 6
  00eca	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _points$17[ebp]
  00ed0	0f bf 54 01 02	 movsx	 edx, WORD PTR [ecx+eax+2]
  00ed5	6b 85 bc fe ff
	ff 06		 imul	 eax, DWORD PTR _point0$16[ebp], 6
  00edc	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _points$17[ebp]
  00ee2	0f bf 44 01 02	 movsx	 eax, WORD PTR [ecx+eax+2]
  00ee7	2b d0		 sub	 edx, eax
  00ee9	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00eed	f3 0f 11 85 e0
	fe ff ff	 movss	 DWORD PTR _vec1$20[ebp+4], xmm0

; 638  : 							vec1.z = points[point1].z - points[point0].z;

  00ef5	6b 85 b8 fe ff
	ff 06		 imul	 eax, DWORD PTR _point1$15[ebp], 6
  00efc	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _points$17[ebp]
  00f02	0f bf 54 01 04	 movsx	 edx, WORD PTR [ecx+eax+4]
  00f07	6b 85 bc fe ff
	ff 06		 imul	 eax, DWORD PTR _point0$16[ebp], 6
  00f0e	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _points$17[ebp]
  00f14	0f bf 44 01 04	 movsx	 eax, WORD PTR [ecx+eax+4]
  00f19	2b d0		 sub	 edx, eax
  00f1b	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00f1f	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR _vec1$20[ebp+8], xmm0

; 639  : 
; 640  : 							face_normal.x = ( vec1.y * vec2.z ) - ( vec1.z * vec2.y );

  00f27	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _vec1$20[ebp+4]
  00f2f	f3 0f 59 85 d8
	fe ff ff	 mulss	 xmm0, DWORD PTR _vec2$19[ebp+8]
  00f37	f3 0f 10 8d e4
	fe ff ff	 movss	 xmm1, DWORD PTR _vec1$20[ebp+8]
  00f3f	f3 0f 59 8d d4
	fe ff ff	 mulss	 xmm1, DWORD PTR _vec2$19[ebp+4]
  00f47	f3 0f 5c c1	 subss	 xmm0, xmm1
  00f4b	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR _face_normal$18[ebp], xmm0

; 641  : 							face_normal.y = ( vec1.z * vec2.x ) - ( vec1.x * vec2.z );

  00f53	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _vec1$20[ebp+8]
  00f5b	f3 0f 59 85 d0
	fe ff ff	 mulss	 xmm0, DWORD PTR _vec2$19[ebp]
  00f63	f3 0f 10 8d dc
	fe ff ff	 movss	 xmm1, DWORD PTR _vec1$20[ebp]
  00f6b	f3 0f 59 8d d8
	fe ff ff	 mulss	 xmm1, DWORD PTR _vec2$19[ebp+8]
  00f73	f3 0f 5c c1	 subss	 xmm0, xmm1
  00f77	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR _face_normal$18[ebp+4], xmm0

; 642  : 							face_normal.z = ( vec1.x * vec2.y ) - ( vec1.y * vec2.x );

  00f7f	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _vec1$20[ebp]
  00f87	f3 0f 59 85 d4
	fe ff ff	 mulss	 xmm0, DWORD PTR _vec2$19[ebp+4]
  00f8f	f3 0f 10 8d e0
	fe ff ff	 movss	 xmm1, DWORD PTR _vec1$20[ebp+4]
  00f97	f3 0f 59 8d d0
	fe ff ff	 mulss	 xmm1, DWORD PTR _vec2$19[ebp]
  00f9f	f3 0f 5c c1	 subss	 xmm0, xmm1
  00fa3	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR _face_normal$18[ebp+8], xmm0

; 643  : 
; 644  : 							normalise_any_3d_vector ( &face_normal );

  00fab	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _face_normal$18[ebp]
  00fb1	50		 push	 eax
  00fb2	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  00fb7	dd d8		 fstp	 ST(0)

; 645  : 
; 646  : 							//
; 647  : 							// Calculate the angle this face makes with the light.
; 648  : 							//
; 649  : 
; 650  : 							angle = (	face_normal.x * current_sun_object_view_vector.x +

  00fb9	f3 0f 10 85 c4
	fe ff ff	 movss	 xmm0, DWORD PTR _face_normal$18[ebp]
  00fc1	f3 0f 59 45 8c	 mulss	 xmm0, DWORD PTR _current_sun_object_view_vector$[ebp]
  00fc6	f3 0f 10 8d c8
	fe ff ff	 movss	 xmm1, DWORD PTR _face_normal$18[ebp+4]
  00fce	f3 0f 59 4d 90	 mulss	 xmm1, DWORD PTR _current_sun_object_view_vector$[ebp+4]
  00fd3	f3 0f 58 c1	 addss	 xmm0, xmm1
  00fd7	f3 0f 10 8d cc
	fe ff ff	 movss	 xmm1, DWORD PTR _face_normal$18[ebp+8]
  00fdf	f3 0f 59 4d 94	 mulss	 xmm1, DWORD PTR _current_sun_object_view_vector$[ebp+8]
  00fe4	f3 0f 58 c1	 addss	 xmm0, xmm1
  00fe8	f3 0f 11 85 b0
	fe ff ff	 movss	 DWORD PTR _angle$13[ebp], xmm0

; 651  : 											face_normal.y * current_sun_object_view_vector.y +
; 652  : 											face_normal.z * current_sun_object_view_vector.z  );
; 653  : 
; 654  : 							//
; 655  : 							// Angle goes between -1 & 1 ( for -90 to +90 )
; 656  : 							//
; 657  : 							// Scale to -0.707 to 0.707 ( for -45 to +45 )
; 658  : 							//
; 659  : 
; 660  : 							angle = fabs ( angle );

  00ff0	51		 push	 ecx
  00ff1	f3 0f 10 85 b0
	fe ff ff	 movss	 xmm0, DWORD PTR _angle$13[ebp]
  00ff9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ffe	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  01003	d9 9d b0 fe ff
	ff		 fstp	 DWORD PTR _angle$13[ebp]

; 661  : 
; 662  : 							angle -= 0.5;

  01009	f3 0f 5a 85 b0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _angle$13[ebp]
  01011	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe0000000000000
  01019	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0101d	f3 0f 11 85 b0
	fe ff ff	 movss	 DWORD PTR _angle$13[ebp], xmm0

; 663  : 
; 664  : 							angle *= ( 1.0 / ( 1.0 - 0.5 ) );

  01025	f3 0f 5a 85 b0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _angle$13[ebp]
  0102d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  01035	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01039	f3 0f 11 85 b0
	fe ff ff	 movss	 DWORD PTR _angle$13[ebp], xmm0

; 665  : 
; 666  : 							angle *= shadow_intensity * 2;

  01041	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _shadow_intensity$[ebp]
  01049	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  01051	f3 0f 59 85 b0
	fe ff ff	 mulss	 xmm0, DWORD PTR _angle$13[ebp]
  01059	f3 0f 11 85 b0
	fe ff ff	 movss	 DWORD PTR _angle$13[ebp], xmm0

; 667  : 
; 668  : 							{
; 669  : 
; 670  : 								float
; 671  : 									new_shadow_intensity;
; 672  : 
; 673  : 								new_shadow_intensity = angle;

  01061	f3 0f 10 85 b0
	fe ff ff	 movss	 xmm0, DWORD PTR _angle$13[ebp]
  01069	f3 0f 11 85 ac
	fe ff ff	 movss	 DWORD PTR _new_shadow_intensity$12[ebp], xmm0

; 674  : 
; 675  : 								new_shadow_intensity = bound ( new_shadow_intensity, 0, 255 );

  01071	0f 57 c0	 xorps	 xmm0, xmm0
  01074	0f 2f 85 ac fe
	ff ff		 comiss	 xmm0, DWORD PTR _new_shadow_intensity$12[ebp]
  0107b	76 0d		 jbe	 SHORT $LN58@draw_3d_ob
  0107d	0f 57 c0	 xorps	 xmm0, xmm0
  01080	f3 0f 11 85 30
	fe ff ff	 movss	 DWORD PTR tv754[ebp], xmm0
  01088	eb 43		 jmp	 SHORT $LN59@draw_3d_ob
$LN58@draw_3d_ob:
  0108a	f3 0f 10 85 ac
	fe ff ff	 movss	 xmm0, DWORD PTR _new_shadow_intensity$12[ebp]
  01092	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@437f0000
  01099	76 12		 jbe	 SHORT $LN56@draw_3d_ob
  0109b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437f0000
  010a3	f3 0f 11 85 2c
	fe ff ff	 movss	 DWORD PTR tv753[ebp], xmm0
  010ab	eb 10		 jmp	 SHORT $LN57@draw_3d_ob
$LN56@draw_3d_ob:
  010ad	f3 0f 10 85 ac
	fe ff ff	 movss	 xmm0, DWORD PTR _new_shadow_intensity$12[ebp]
  010b5	f3 0f 11 85 2c
	fe ff ff	 movss	 DWORD PTR tv753[ebp], xmm0
$LN57@draw_3d_ob:
  010bd	f3 0f 10 85 2c
	fe ff ff	 movss	 xmm0, DWORD PTR tv753[ebp]
  010c5	f3 0f 11 85 30
	fe ff ff	 movss	 DWORD PTR tv754[ebp], xmm0
$LN59@draw_3d_ob:
  010cd	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR tv754[ebp]
  010d5	f3 0f 11 85 ac
	fe ff ff	 movss	 DWORD PTR _new_shadow_intensity$12[ebp], xmm0

; 676  : 
; 677  : 								set_d3d_shadow_colour ( 0, 0, 0, new_shadow_intensity );

  010dd	51		 push	 ecx
  010de	f3 0f 10 85 ac
	fe ff ff	 movss	 xmm0, DWORD PTR _new_shadow_intensity$12[ebp]
  010e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010eb	51		 push	 ecx
  010ec	0f 57 c0	 xorps	 xmm0, xmm0
  010ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010f4	51		 push	 ecx
  010f5	0f 57 c0	 xorps	 xmm0, xmm0
  010f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010fd	51		 push	 ecx
  010fe	0f 57 c0	 xorps	 xmm0, xmm0
  01101	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01106	e8 00 00 00 00	 call	 ?set_d3d_shadow_colour@@YGXMMMM@Z ; set_d3d_shadow_colour

; 678  : 
; 679  : 								wrender_3d_shadow_surface_alpha_textured_polygon ( faces );

  0110b	8b 45 f0	 mov	 eax, DWORD PTR _faces$[ebp]
  0110e	50		 push	 eax
  0110f	e8 00 00 00 00	 call	 ?wrender_3d_shadow_surface_alpha_textured_polygon@@YGXPAUOBJECT_3D_FACE@@@Z ; wrender_3d_shadow_surface_alpha_textured_polygon
$LN31@draw_3d_ob:

; 680  : 							}
; 681  : 						}
; 682  : 						if ( !current_object_3d_surface->smoothed )

  01114	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  01119	66 8b 08	 mov	 cx, WORD PTR [eax]
  0111c	66 c1 e9 02	 shr	 cx, 2
  01120	66 83 e1 01	 and	 cx, 1
  01124	0f b7 d1	 movzx	 edx, cx
  01127	85 d2		 test	 edx, edx
  01129	75 0d		 jne	 SHORT $LN32@draw_3d_ob

; 683  : 						{
; 684  : 							current_object_3d_face_normal_list++;

  0112b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_face_normal_list
  01130	83 c0 02	 add	 eax, 2
  01133	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, eax ; current_object_3d_face_normal_list
$LN32@draw_3d_ob:

; 685  : 						}
; 686  : 						current_object_3d_point_list += faces->number_of_points;

  01138	8b 45 f0	 mov	 eax, DWORD PTR _faces$[ebp]
  0113b	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0113e	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  01144	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, ecx ; current_object_3d_point_list

; 687  : 						faces++;

  0114a	8b 45 f0	 mov	 eax, DWORD PTR _faces$[ebp]
  0114d	83 c0 01	 add	 eax, 1
  01150	89 45 f0	 mov	 DWORD PTR _faces$[ebp], eax

; 688  : 					}
; 689  : 					else

  01153	eb 0d		 jmp	 SHORT $LN30@draw_3d_ob
$LN29@draw_3d_ob:

; 690  : 					{
; 691  : 						current_object_3d_point_list += 2;

  01155	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  0115a	83 c0 02	 add	 eax, 2
  0115d	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, eax ; current_object_3d_point_list
$LN30@draw_3d_ob:

; 692  : 					}
; 693  : 				}

  01162	e9 d1 fb ff ff	 jmp	 $LN5@draw_3d_ob
$LN6@draw_3d_ob:

; 694  : 
; 695  : 				current_object_3d_surface_point_list += number_of_surface_points;

  01167	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _number_of_surface_points$26[ebp]
  0116d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  01173	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  01176	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, edx ; current_object_3d_surface_point_list

; 696  : 				if ( current_object_3d_surface->smoothed )

  0117c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  01181	66 8b 08	 mov	 cx, WORD PTR [eax]
  01184	66 c1 e9 02	 shr	 cx, 2
  01188	66 83 e1 01	 and	 cx, 1
  0118c	0f b7 d1	 movzx	 edx, cx
  0118f	85 d2		 test	 edx, edx
  01191	74 15		 je	 SHORT $LN33@draw_3d_ob

; 697  : 				{
; 698  : 					current_object_3d_surface_point_normal_list += number_of_surface_points;

  01193	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _number_of_surface_points$26[ebp]
  01199	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_normal_list
  0119f	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  011a2	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface_point_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, edx ; current_object_3d_surface_point_normal_list
$LN33@draw_3d_ob:

; 699  : 				}
; 700  : 				if ( current_object_3d_surface->textured )

  011a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  011ad	66 8b 08	 mov	 cx, WORD PTR [eax]
  011b0	66 c1 e9 03	 shr	 cx, 3
  011b4	66 83 e1 01	 and	 cx, 1
  011b8	0f b7 d1	 movzx	 edx, cx
  011bb	85 d2		 test	 edx, edx
  011bd	74 15		 je	 SHORT $LN34@draw_3d_ob

; 701  : 				{
; 702  : 					current_object_3d_surface_point_texture_list += number_of_surface_points;

  011bf	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _number_of_surface_points$26[ebp]
  011c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A ; current_object_3d_surface_point_texture_list
  011cb	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  011ce	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A, edx ; current_object_3d_surface_point_texture_list
$LN34@draw_3d_ob:

; 703  : 				}
; 704  : 				if ( current_object_3d_surface->has_luminosity_texture )

  011d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  011d9	66 8b 08	 mov	 cx, WORD PTR [eax]
  011dc	66 c1 e9 04	 shr	 cx, 4
  011e0	66 83 e1 01	 and	 cx, 1
  011e4	0f b7 d1	 movzx	 edx, cx
  011e7	85 d2		 test	 edx, edx
  011e9	74 15		 je	 SHORT $LN35@draw_3d_ob

; 705  : 				{
; 706  : 					current_object_3d_surface_point_texture_list += number_of_surface_points;

  011eb	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _number_of_surface_points$26[ebp]
  011f1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A ; current_object_3d_surface_point_texture_list
  011f7	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  011fa	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A, edx ; current_object_3d_surface_point_texture_list
$LN35@draw_3d_ob:

; 707  : 				}
; 708  : 				current_object_3d_surface++;

  01200	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  01205	83 c0 10	 add	 eax, 16			; 00000010H
  01208	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A, eax ; current_object_3d_surface

; 709  : 			}

  0120d	e9 d7 fa ff ff	 jmp	 $LN2@draw_3d_ob
$LN3@draw_3d_ob:

; 710  : 		}
; 711  : 
; 712  : 		//
; 713  : 		// Set the renderstates back to where they were
; 714  : 		//
; 715  : 
; 716  : 		set_d3d_int_state ( D3DRENDERSTATE_ZFUNC, zbuffer_default_comparison );

  01212	a1 00 00 00 00	 mov	 eax, DWORD PTR ?zbuffer_default_comparison@@3W4_D3DCMPFUNC@@A ; zbuffer_default_comparison
  01217	50		 push	 eax
  01218	6a 17		 push	 23			; 00000017H
  0121a	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 717  : 
; 718  : 		set_d3d_int_state ( D3DRENDERSTATE_CULLMODE, D3DCULL_CCW );

  0121f	6a 03		 push	 3
  01221	6a 16		 push	 22			; 00000016H
  01223	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 719  : 	}
; 720  : 	else

  01228	e9 08 04 00 00	 jmp	 $LN46@draw_3d_ob
$LN26@draw_3d_ob:

; 721  : 	{
; 722  : 		double
; 723  : 			zbias_decrement;
; 724  : 
; 725  : 		object_number = get_object_shadow_approximation_number ( obj->object_number, pos->z, &draw_sub_objects );

  0122d	8d 45 f8	 lea	 eax, DWORD PTR _draw_sub_objects$[ebp]
  01230	50		 push	 eax
  01231	8b 4d b0	 mov	 ecx, DWORD PTR _pos$[ebp]
  01234	51		 push	 ecx
  01235	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0123a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0123f	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  01242	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  01245	50		 push	 eax
  01246	e8 00 00 00 00	 call	 ?get_object_shadow_approximation_number@@YGHHMPAH@Z ; get_object_shadow_approximation_number
  0124b	89 45 fc	 mov	 DWORD PTR _object_number$[ebp], eax

; 726  : 		if ( object_number == 0 )

  0124e	83 7d fc 00	 cmp	 DWORD PTR _object_number$[ebp], 0
  01252	75 05		 jne	 SHORT $LN36@draw_3d_ob

; 727  : 		{
; 728  : 			return;

  01254	e9 ec 03 00 00	 jmp	 $LN1@draw_3d_ob
$LN36@draw_3d_ob:

; 729  : 		}
; 730  : 
; 731  : //		calculate_object_normal_factors ( objects_3d_data[object_number].point_normals,
; 732  : //														objects_3d_data[object_number].number_of_point_normals,
; 733  : //														&current_scaled_sun_object_view_vector,
; 734  : //														&objects_3d_data[object_number].bounding_box, 0 );
; 735  : 		//
; 736  : 		// Set the zbiasing decrementing constant
; 737  : 		//
; 738  : 
; 739  : 		zbias_decrement = ( POLYGON_ZDISTANCE_ELEVATED_BIAS - POLYGON_ZDISTANCE_SHADOW_ELEVATED_BIAS );	//( 8.0 / 65535.0 ) - ( 6.0 / 65535.0 ) );

  01259	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bf00001000100000
  01261	f2 0f 11 85 a4
	fe ff ff	 movsd	 QWORD PTR _zbias_decrement$11[ebp], xmm0

; 740  : 
; 741  : 		{
; 742  : 			int
; 743  : 				surfaces_left,
; 744  : 				point_reference_index,
; 745  : 				number_of_faces_to_render;
; 746  : 
; 747  : 			point_reference_index = 0;

  01269	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _point_reference_index$9[ebp], 0

; 748  : 
; 749  : 			number_of_faces_to_render = 0;

  01273	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _number_of_faces_to_render$8[ebp], 0

; 750  : 
; 751  : 			faces = objects_3d_data[object_number].faces;

  0127d	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  01281	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  01287	8b 54 01 44	 mov	 edx, DWORD PTR [ecx+eax+68]
  0128b	89 55 f0	 mov	 DWORD PTR _faces$[ebp], edx

; 752  : 
; 753  : 			current_object_3d_surface = objects_3d_data[object_number].surfaces;

  0128e	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  01292	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  01298	8b 54 01 50	 mov	 edx, DWORD PTR [ecx+eax+80]
  0129c	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A, edx ; current_object_3d_surface

; 754  : 
; 755  : 			current_object_3d_face_normal_list = objects_3d_data[object_number].object_face_normal_references;

  012a2	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  012a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  012ac	8b 54 01 54	 mov	 edx, DWORD PTR [ecx+eax+84]
  012b0	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, edx ; current_object_3d_face_normal_list

; 756  : 
; 757  : 			for ( surfaces_left = objects_3d_data[object_number].number_of_surfaces; surfaces_left > 0; surfaces_left-- )

  012b6	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  012ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  012c0	0f b7 54 01 06	 movzx	 edx, WORD PTR [ecx+eax+6]
  012c5	89 95 a0 fe ff
	ff		 mov	 DWORD PTR _surfaces_left$10[ebp], edx
  012cb	eb 0f		 jmp	 SHORT $LN10@draw_3d_ob
$LN8@draw_3d_ob:
  012cd	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _surfaces_left$10[ebp]
  012d3	83 e8 01	 sub	 eax, 1
  012d6	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _surfaces_left$10[ebp], eax
$LN10@draw_3d_ob:
  012dc	83 bd a0 fe ff
	ff 00		 cmp	 DWORD PTR _surfaces_left$10[ebp], 0
  012e3	0f 8e 8c 00 00
	00		 jle	 $LN9@draw_3d_ob

; 758  : 			{
; 759  : 				int
; 760  : 					faces_left;
; 761  : 
; 762  : 				for ( faces_left = current_object_3d_surface->number_of_faces; faces_left > 0; faces_left-- )

  012e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  012ee	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  012f2	89 8d 94 fe ff
	ff		 mov	 DWORD PTR _faces_left$7[ebp], ecx
  012f8	eb 0f		 jmp	 SHORT $LN13@draw_3d_ob
$LN11@draw_3d_ob:
  012fa	8b 85 94 fe ff
	ff		 mov	 eax, DWORD PTR _faces_left$7[ebp]
  01300	83 e8 01	 sub	 eax, 1
  01303	89 85 94 fe ff
	ff		 mov	 DWORD PTR _faces_left$7[ebp], eax
$LN13@draw_3d_ob:
  01309	83 bd 94 fe ff
	ff 00		 cmp	 DWORD PTR _faces_left$7[ebp], 0
  01310	7e 51		 jle	 SHORT $LN12@draw_3d_ob

; 763  : 				{
; 764  : 					if ( current_object_3d_surface->polygons )

  01312	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  01317	66 8b 08	 mov	 cx, WORD PTR [eax]
  0131a	66 83 e1 01	 and	 cx, 1
  0131e	0f b7 d1	 movzx	 edx, cx
  01321	85 d2		 test	 edx, edx
  01323	74 3c		 je	 SHORT $LN37@draw_3d_ob

; 765  : 					{
; 766  : //						if ( transformed_3d_normal_visibilities[current_object_3d_face_normal_list->point] )
; 767  : 						{
; 768  : 							number_of_faces_to_render++;

  01325	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR _number_of_faces_to_render$8[ebp]
  0132b	83 c0 01	 add	 eax, 1
  0132e	89 85 98 fe ff
	ff		 mov	 DWORD PTR _number_of_faces_to_render$8[ebp], eax

; 769  : 						}
; 770  : 
; 771  : 						if ( !current_object_3d_surface->smoothed )

  01334	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  01339	66 8b 08	 mov	 cx, WORD PTR [eax]
  0133c	66 c1 e9 02	 shr	 cx, 2
  01340	66 83 e1 01	 and	 cx, 1
  01344	0f b7 d1	 movzx	 edx, cx
  01347	85 d2		 test	 edx, edx
  01349	75 0d		 jne	 SHORT $LN38@draw_3d_ob

; 772  : 						{
; 773  : 							current_object_3d_face_normal_list++;

  0134b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_face_normal_list
  01350	83 c0 02	 add	 eax, 2
  01353	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, eax ; current_object_3d_face_normal_list
$LN38@draw_3d_ob:

; 774  : 						}
; 775  : 						faces++;

  01358	8b 45 f0	 mov	 eax, DWORD PTR _faces$[ebp]
  0135b	83 c0 01	 add	 eax, 1
  0135e	89 45 f0	 mov	 DWORD PTR _faces$[ebp], eax
$LN37@draw_3d_ob:

; 776  : 					}
; 777  : 				}

  01361	eb 97		 jmp	 SHORT $LN11@draw_3d_ob
$LN12@draw_3d_ob:

; 778  : 
; 779  : 				current_object_3d_surface++;

  01363	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  01368	83 c0 10	 add	 eax, 16			; 00000010H
  0136b	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A, eax ; current_object_3d_surface

; 780  : 			}

  01370	e9 58 ff ff ff	 jmp	 $LN8@draw_3d_ob
$LN9@draw_3d_ob:

; 781  : 
; 782  : 			zbias_decrement /= number_of_faces_to_render;

  01375	f2 0f 2a 85 98
	fe ff ff	 cvtsi2sd xmm0, DWORD PTR _number_of_faces_to_render$8[ebp]
  0137d	f2 0f 10 8d a4
	fe ff ff	 movsd	 xmm1, QWORD PTR _zbias_decrement$11[ebp]
  01385	f2 0f 5e c8	 divsd	 xmm1, xmm0
  01389	f2 0f 11 8d a4
	fe ff ff	 movsd	 QWORD PTR _zbias_decrement$11[ebp], xmm1

; 783  : 		}
; 784  : 
; 785  : 		if ( object_number )

  01391	83 7d fc 00	 cmp	 DWORD PTR _object_number$[ebp], 0
  01395	0f 84 9a 02 00
	00		 je	 $LN46@draw_3d_ob

; 786  : 		{
; 787  : 			object_3d_object_base[object_3d_object_current_base].object_number = object_number;

  0139b	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  013a2	8b 4d fc	 mov	 ecx, DWORD PTR _object_number$[ebp]
  013a5	89 88 20 00 00
	00		 mov	 DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[eax+32], ecx

; 788  : 
; 789  : 			//
; 790  : 			// Transform the object's shape data
; 791  : 			//
; 792  : 
; 793  : 			{
; 794  : 				vec3d
; 795  : 					scale;
; 796  : 
; 797  : 				scale.x = 1;

  013ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  013b3	f3 0f 11 85 88
	fe ff ff	 movss	 DWORD PTR _scale$6[ebp], xmm0

; 798  : 				scale.y = 1;

  013bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  013c3	f3 0f 11 85 8c
	fe ff ff	 movss	 DWORD PTR _scale$6[ebp+4], xmm0

; 799  : 				scale.z = 1;

  013cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  013d3	f3 0f 11 85 90
	fe ff ff	 movss	 DWORD PTR _scale$6[ebp+8], xmm0

; 800  : 
; 801  : 				transform_3d_object_shadow ( &objects_3d_data[object_number],

  013db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_3d_points_current_base@@3HA ; object_3d_points_current_base
  013e0	50		 push	 eax
  013e1	83 ec 08	 sub	 esp, 8
  013e4	f2 0f 10 85 74
	ff ff ff	 movsd	 xmm0, QWORD PTR _projection_factor$[ebp]
  013ec	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  013f1	83 ec 08	 sub	 esp, 8
  013f4	f2 0f 10 85 6c
	ff ff ff	 movsd	 xmm0, QWORD PTR _projection_constant$[ebp]
  013fc	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01401	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_3d_sun@@3PAULIGHT_3D_SOURCE@@A ; current_3d_sun
  01407	51		 push	 ecx
  01408	8d 55 98	 lea	 edx, DWORD PTR _terrain_normal$[ebp]
  0140b	52		 push	 edx
  0140c	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0140f	83 c0 08	 add	 eax, 8
  01412	50		 push	 eax
  01413	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  01416	83 c1 08	 add	 ecx, 8
  01419	51		 push	 ecx
  0141a	8d 95 88 fe ff
	ff		 lea	 edx, DWORD PTR _scale$6[ebp]
  01420	52		 push	 edx
  01421	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  01425	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0142b	50		 push	 eax
  0142c	e8 00 00 00 00	 call	 ?transform_3d_object_shadow@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAUVIEWPOINT@@111NNH@Z ; transform_3d_object_shadow

; 802  : 														&scale,
; 803  : 														&obj->vp, &obj->vp.position,
; 804  : 														&terrain_normal,
; 805  : 														&current_3d_sun->light_direction,
; 806  : 														projection_constant, projection_factor,
; 807  : 														object_3d_points_current_base );
; 808  : 			}
; 809  : 
; 810  : 			if ( translucent_3d_shadows )

  01431	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?translucent_3d_shadows@@3HA, 0
  01438	74 2a		 je	 SHORT $LN40@draw_3d_ob

; 811  : 			{
; 812  : 				//
; 813  : 				// Alpha blending is already on - set the Ztest & enable writing.
; 814  : 				//
; 815  : 
; 816  : 				set_d3d_int_state ( D3DRENDERSTATE_ZFUNC, zbuffer_shadow_comparison );	//D3DCMP_GREATER );

  0143a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?zbuffer_shadow_comparison@@3W4_D3DCMPFUNC@@A ; zbuffer_shadow_comparison
  0143f	50		 push	 eax
  01440	6a 17		 push	 23			; 00000017H
  01442	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 817  : 				set_d3d_int_state ( D3DRENDERSTATE_ZWRITEENABLE, TRUE );

  01447	6a 01		 push	 1
  01449	6a 0e		 push	 14			; 0000000eH
  0144b	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 818  : 
; 819  : 				set_d3d_int_state ( D3DRENDERSTATE_SRCBLEND, D3DBLEND_SRCALPHA );

  01450	6a 05		 push	 5
  01452	6a 13		 push	 19			; 00000013H
  01454	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 820  : 				set_d3d_int_state ( D3DRENDERSTATE_DESTBLEND, D3DBLEND_INVSRCALPHA );

  01459	6a 06		 push	 6
  0145b	6a 14		 push	 20			; 00000014H
  0145d	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 821  : 			}
; 822  : 			else

  01462	eb 0d		 jmp	 SHORT $LN41@draw_3d_ob
$LN40@draw_3d_ob:

; 823  : 			{
; 824  : 				set_d3d_int_state ( D3DRENDERSTATE_ZFUNC, zbuffer_default_comparison );

  01464	a1 00 00 00 00	 mov	 eax, DWORD PTR ?zbuffer_default_comparison@@3W4_D3DCMPFUNC@@A ; zbuffer_default_comparison
  01469	50		 push	 eax
  0146a	6a 17		 push	 23			; 00000017H
  0146c	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state
$LN41@draw_3d_ob:

; 825  : 			}
; 826  : 
; 827  : 			{
; 828  : 				int
; 829  : 					surface;
; 830  : 
; 831  : 				int
; 832  : 					surface_face_count,
; 833  : 					point_reference_index;
; 834  : 
; 835  : 				point_reference_index = 0;

  01471	c7 85 7c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _point_reference_index$3[ebp], 0

; 836  : 
; 837  : 				surface = 0;

  0147b	c7 85 84 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _surface$5[ebp], 0

; 838  : 
; 839  : 				current_object_3d_surface = objects_3d_data[object_number].surfaces;

  01485	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  01489	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0148f	8b 54 01 50	 mov	 edx, DWORD PTR [ecx+eax+80]
  01493	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A, edx ; current_object_3d_surface

; 840  : 				current_object_3d_point_list = objects_3d_data[object_number].object_faces_point_plain_list;

  01499	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  0149d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  014a3	8b 54 01 4c	 mov	 edx, DWORD PTR [ecx+eax+76]
  014a7	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, edx ; current_object_3d_point_list

; 841  : 				current_object_3d_face_normal_list = objects_3d_data[object_number].object_face_normal_references;

  014ad	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  014b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  014b7	8b 54 01 54	 mov	 edx, DWORD PTR [ecx+eax+84]
  014bb	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, edx ; current_object_3d_face_normal_list

; 842  : 
; 843  : 				current_object_3d_surface_point_list = objects_3d_data[object_number].surface_points;

  014c1	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  014c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  014cb	8b 54 01 5c	 mov	 edx, DWORD PTR [ecx+eax+92]
  014cf	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, edx ; current_object_3d_surface_point_list

; 844  : 
; 845  : 				faces = objects_3d_data[object_number].faces;

  014d5	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  014d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  014df	8b 54 01 44	 mov	 edx, DWORD PTR [ecx+eax+68]
  014e3	89 55 f0	 mov	 DWORD PTR _faces$[ebp], edx

; 846  : 
; 847  : 				for ( count = objects_3d_data[object_number].number_of_surfaces; count > 0; count-- )

  014e6	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  014ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  014f0	0f b7 54 01 06	 movzx	 edx, WORD PTR [ecx+eax+6]
  014f5	89 55 f4	 mov	 DWORD PTR _count$[ebp], edx
  014f8	eb 09		 jmp	 SHORT $LN16@draw_3d_ob
$LN14@draw_3d_ob:
  014fa	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  014fd	83 e8 01	 sub	 eax, 1
  01500	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax
$LN16@draw_3d_ob:
  01503	83 7d f4 00	 cmp	 DWORD PTR _count$[ebp], 0
  01507	0f 8e 09 01 00
	00		 jle	 $LN15@draw_3d_ob

; 848  : 				{
; 849  : 					int
; 850  : 						number_of_surface_points,
; 851  : 						face_count;
; 852  : 
; 853  : 					surface_face_count = current_object_3d_surface->number_of_faces;

  0150d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  01512	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  01516	89 8d 80 fe ff
	ff		 mov	 DWORD PTR _surface_face_count$4[ebp], ecx

; 854  : 
; 855  : 					number_of_surface_points = current_object_3d_surface->number_of_points;

  0151c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  01521	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  01525	89 8d 78 fe ff
	ff		 mov	 DWORD PTR _number_of_surface_points$2[ebp], ecx

; 856  : 					if ( number_of_surface_points == 0 )

  0152b	83 bd 78 fe ff
	ff 00		 cmp	 DWORD PTR _number_of_surface_points$2[ebp], 0
  01532	75 0a		 jne	 SHORT $LN42@draw_3d_ob

; 857  : 					{
; 858  : 						number_of_surface_points = 256;

  01534	c7 85 78 fe ff
	ff 00 01 00 00	 mov	 DWORD PTR _number_of_surface_points$2[ebp], 256 ; 00000100H
$LN42@draw_3d_ob:

; 859  : 					}
; 860  : 
; 861  : 					for ( face_count = surface_face_count; face_count > 0; face_count-- )

  0153e	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR _surface_face_count$4[ebp]
  01544	89 85 74 fe ff
	ff		 mov	 DWORD PTR _face_count$1[ebp], eax
  0154a	eb 0f		 jmp	 SHORT $LN19@draw_3d_ob
$LN17@draw_3d_ob:
  0154c	8b 85 74 fe ff
	ff		 mov	 eax, DWORD PTR _face_count$1[ebp]
  01552	83 e8 01	 sub	 eax, 1
  01555	89 85 74 fe ff
	ff		 mov	 DWORD PTR _face_count$1[ebp], eax
$LN19@draw_3d_ob:
  0155b	83 bd 74 fe ff
	ff 00		 cmp	 DWORD PTR _face_count$1[ebp], 0
  01562	0f 8e 87 00 00
	00		 jle	 $LN18@draw_3d_ob

; 862  : 					{
; 863  : 						if ( current_object_3d_surface->polygons )

  01568	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0156d	66 8b 08	 mov	 cx, WORD PTR [eax]
  01570	66 83 e1 01	 and	 cx, 1
  01574	0f b7 d1	 movzx	 edx, cx
  01577	85 d2		 test	 edx, edx
  01579	74 4a		 je	 SHORT $LN43@draw_3d_ob

; 864  : 						{
; 865  : //							if (transformed_3d_normal_visibilities[current_object_3d_face_normal_list->point])
; 866  : 							{
; 867  : 								wrender_3d_shadow_surface_plain_polygon ( faces );

  0157b	8b 45 f0	 mov	 eax, DWORD PTR _faces$[ebp]
  0157e	50		 push	 eax
  0157f	e8 00 00 00 00	 call	 ?wrender_3d_shadow_surface_plain_polygon@@YGXPAUOBJECT_3D_FACE@@@Z ; wrender_3d_shadow_surface_plain_polygon

; 868  : 							}
; 869  : 							current_object_3d_point_list += faces->number_of_points;

  01584	8b 45 f0	 mov	 eax, DWORD PTR _faces$[ebp]
  01587	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0158a	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  01590	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, ecx ; current_object_3d_point_list

; 870  : 							if ( !current_object_3d_surface->smoothed )

  01596	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0159b	66 8b 08	 mov	 cx, WORD PTR [eax]
  0159e	66 c1 e9 02	 shr	 cx, 2
  015a2	66 83 e1 01	 and	 cx, 1
  015a6	0f b7 d1	 movzx	 edx, cx
  015a9	85 d2		 test	 edx, edx
  015ab	75 0d		 jne	 SHORT $LN45@draw_3d_ob

; 871  : 							{
; 872  : 								current_object_3d_face_normal_list++;

  015ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_face_normal_list
  015b2	83 c0 02	 add	 eax, 2
  015b5	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, eax ; current_object_3d_face_normal_list
$LN45@draw_3d_ob:

; 873  : 							}
; 874  : 							faces++;

  015ba	8b 45 f0	 mov	 eax, DWORD PTR _faces$[ebp]
  015bd	83 c0 01	 add	 eax, 1
  015c0	89 45 f0	 mov	 DWORD PTR _faces$[ebp], eax

; 875  : 						}
; 876  : 						else

  015c3	eb 0d		 jmp	 SHORT $LN44@draw_3d_ob
$LN43@draw_3d_ob:

; 877  : 						{
; 878  : 							current_object_3d_point_list += 2;

  015c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  015ca	83 c0 02	 add	 eax, 2
  015cd	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, eax ; current_object_3d_point_list
$LN44@draw_3d_ob:

; 879  : 						}
; 880  : 						zbuffer_constant -= zbuffer_constant_shadow_bias_decrement;

  015d2	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?zbuffer_constant@@3NA
  015da	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR ?zbuffer_constant_shadow_bias_decrement@@3NA
  015e2	f2 0f 11 05 00
	00 00 00	 movsd	 QWORD PTR ?zbuffer_constant@@3NA, xmm0

; 881  : 					}

  015ea	e9 5d ff ff ff	 jmp	 $LN17@draw_3d_ob
$LN18@draw_3d_ob:

; 882  : 					current_object_3d_surface_point_list += number_of_surface_points;

  015ef	8b 85 78 fe ff
	ff		 mov	 eax, DWORD PTR _number_of_surface_points$2[ebp]
  015f5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  015fb	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  015fe	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, edx ; current_object_3d_surface_point_list

; 883  : 					current_object_3d_surface++;

  01604	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  01609	83 c0 10	 add	 eax, 16			; 00000010H
  0160c	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A, eax ; current_object_3d_surface

; 884  : 				}

  01611	e9 e4 fe ff ff	 jmp	 $LN14@draw_3d_ob
$LN15@draw_3d_ob:

; 885  : 			}
; 886  : 
; 887  : 			if ( translucent_3d_shadows )

  01616	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?translucent_3d_shadows@@3HA, 0
  0161d	74 16		 je	 SHORT $LN46@draw_3d_ob

; 888  : 			{
; 889  : 				//
; 890  : 				// Set the renderstates back to where they were
; 891  : 				//
; 892  : 				//
; 893  : 				set_d3d_int_state ( D3DRENDERSTATE_ZFUNC, zbuffer_default_comparison );

  0161f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?zbuffer_default_comparison@@3W4_D3DCMPFUNC@@A ; zbuffer_default_comparison
  01624	50		 push	 eax
  01625	6a 17		 push	 23			; 00000017H
  01627	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 894  : 				set_d3d_int_state ( D3DRENDERSTATE_ZWRITEENABLE, FALSE );

  0162c	6a 00		 push	 0
  0162e	6a 0e		 push	 14			; 0000000eH
  01630	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state
$LN46@draw_3d_ob:

; 895  : 			}
; 896  : 		}
; 897  : 	}
; 898  : 
; 899  : 	//
; 900  : 	// Restore the object's true 3d position now
; 901  : 	//
; 902  : 
; 903  : 	obj->vp = real_object_position;

  01635	8b 7d 08	 mov	 edi, DWORD PTR _obj$[ebp]
  01638	83 c7 08	 add	 edi, 8
  0163b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01640	8d 75 c0	 lea	 esi, DWORD PTR _real_object_position$[ebp]
  01643	f3 a5		 rep movsd
$LN1@draw_3d_ob:

; 904  : }

  01645	5f		 pop	 edi
  01646	5e		 pop	 esi
  01647	5b		 pop	 ebx
  01648	8b e5		 mov	 esp, ebp
  0164a	5d		 pop	 ebp
  0164b	c2 04 00	 ret	 4
?draw_3d_object_shadow@@YGXPAUOBJECT_3D_INSTANCE@@@Z ENDP ; draw_3d_object_shadow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dshadow.c
;	COMDAT ?get_3d_shadows_translucent@@YGHXZ
_TEXT	SEGMENT
?get_3d_shadows_translucent@@YGHXZ PROC			; get_3d_shadows_translucent, COMDAT

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 147  : 
; 148  : 	return ( translucent_3d_shadows );

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?translucent_3d_shadows@@3HA

; 149  : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?get_3d_shadows_translucent@@YGHXZ ENDP			; get_3d_shadows_translucent
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dshadow.c
;	COMDAT ?set_3d_shadows_translucent@@YGXH@Z
_TEXT	SEGMENT
_translucent$ = 8					; size = 4
?set_3d_shadows_translucent@@YGXH@Z PROC		; set_3d_shadows_translucent, COMDAT

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 126  : 
; 127  : 	translucent_3d_shadows = translucent;

  00009	8b 45 08	 mov	 eax, DWORD PTR _translucent$[ebp]
  0000c	a3 00 00 00 00	 mov	 DWORD PTR ?translucent_3d_shadows@@3HA, eax

; 128  : 
; 129  : 	if ( translucent_3d_shadows )

  00011	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?translucent_3d_shadows@@3HA, 0
  00018	74 15		 je	 SHORT $LN2@set_3d_sha

; 130  : 	{
; 131  : 
; 132  : 		set_d3d_shadow_zbias ( POLYGON_ZDISTANCE_ELEVATED_BIAS );

  0001a	51		 push	 ecx
  0001b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7ff800
  00023	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00028	e8 00 00 00 00	 call	 ?set_d3d_shadow_zbias@@YGXM@Z ; set_d3d_shadow_zbias

; 133  : 	}
; 134  : 	else

  0002d	eb 13		 jmp	 SHORT $LN3@set_3d_sha
$LN2@set_3d_sha:

; 135  : 	{
; 136  : 
; 137  : 		set_d3d_shadow_zbias ( POLYGON_ZDISTANCE_MINIMAL_ELEVATED_BIAS );

  0002f	51		 push	 ecx
  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fff00
  00038	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003d	e8 00 00 00 00	 call	 ?set_d3d_shadow_zbias@@YGXM@Z ; set_d3d_shadow_zbias
$LN3@set_3d_sha:

; 138  : 	}
; 139  : }

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?set_3d_shadows_translucent@@YGXH@Z ENDP		; set_3d_shadows_translucent
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dshadow.c
;	COMDAT ?set_3d_shadows_detailed@@YGXH@Z
_TEXT	SEGMENT
_detailed$ = 8						; size = 4
?set_3d_shadows_detailed@@YGXH@Z PROC			; set_3d_shadows_detailed, COMDAT

; 115  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 116  : 
; 117  : 	detailed_3d_shadows = detailed;

  00009	8b 45 08	 mov	 eax, DWORD PTR _detailed$[ebp]
  0000c	a3 00 00 00 00	 mov	 DWORD PTR ?detailed_3d_shadows@@3HA, eax

; 118  : }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?set_3d_shadows_detailed@@YGXH@Z ENDP			; set_3d_shadows_detailed
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dshadow.c
;	COMDAT ?initialise_3d_shadows@@YGXXZ
_TEXT	SEGMENT
?initialise_3d_shadows@@YGXXZ PROC			; initialise_3d_shadows, COMDAT

; 103  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 104  : 
; 105  : 	set_3d_shadows_detailed ( detailed_3d_shadows );

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?detailed_3d_shadows@@3HA
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?set_3d_shadows_detailed@@YGXH@Z ; set_3d_shadows_detailed

; 106  : 
; 107  : 	set_3d_shadows_translucent ( translucent_3d_shadows );

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?translucent_3d_shadows@@3HA
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?set_3d_shadows_translucent@@YGXH@Z ; set_3d_shadows_translucent

; 108  : }

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?initialise_3d_shadows@@YGXXZ ENDP			; initialise_3d_shadows
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\viewport.h
;	COMDAT ?generate_lookup_outcode@@YGHHHHH@Z
_TEXT	SEGMENT
_xmin$ = 8						; size = 4
_ymin$ = 12						; size = 4
_xmax$ = 16						; size = 4
_ymax$ = 20						; size = 4
?generate_lookup_outcode@@YGHHHHH@Z PROC		; generate_lookup_outcode, COMDAT

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 200  : 
; 201  : 	__asm mov eax, xmin;

  00009	8b 45 08	 mov	 eax, DWORD PTR _xmin$[ebp]
  0000c	8b 5d 0c	 mov	 ebx, DWORD PTR _ymin$[ebp]
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR _xmax$[ebp]
  00012	8b 55 14	 mov	 edx, DWORD PTR _ymax$[ebp]
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	81 e3 00 00 00
	80		 and	 ebx, -2147483648	; 80000000H
  0001e	c1 e9 1d	 shr	 ecx, 29			; 0000001dH
  00021	81 e2 00 00 00
	80		 and	 edx, -2147483648	; 80000000H
  00027	c1 eb 1e	 shr	 ebx, 30			; 0000001eH
  0002a	83 e0 01	 and	 eax, 1
  0002d	c1 ea 1c	 shr	 edx, 28			; 0000001cH
  00030	83 e1 04	 and	 ecx, 4
  00033	0b c3		 or	 eax, ebx
  00035	0b ca		 or	 ecx, edx
  00037	0b c1		 or	 eax, ecx
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 10 00	 ret	 16			; 00000010H
?generate_lookup_outcode@@YGHHHHH@Z ENDP		; generate_lookup_outcode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\fpu.h
;	COMDAT ?asm_convert_float_to_int@@YGXMPAH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_integer$ = 12						; size = 4
?asm_convert_float_to_int@@YGXMPAH@Z PROC		; asm_convert_float_to_int, COMDAT

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 131  : 
; 132  : 	__asm
; 133  : 	{
; 134  : 
; 135  : 		fld value

  00009	d9 45 08	 fld	 DWORD PTR _value$[ebp]

; 136  : 		mov edx, integer

  0000c	8b 55 0c	 mov	 edx, DWORD PTR _integer$[ebp]

; 137  : 		fistp dword ptr [edx]

  0000f	db 1a		 fistp	 DWORD PTR [edx]

; 138  : 	}
; 139  : }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?asm_convert_float_to_int@@YGXMPAH@Z ENDP		; asm_convert_float_to_int
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fabs@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?fabs@@YGMM@Z PROC					; fabs, COMDAT

; 112  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 113  : 	return (_CSTD fabsf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _fabsf
  00019	83 c4 04	 add	 esp, 4

; 114  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?fabs@@YGMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 671  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 672  :             return (float)fabs(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _fabs
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 673  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
END
