; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\system\en_funcs\en_vec3d.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?vec3d_type_database@@3PAUVEC3D_TYPE_DATA@@A	; vec3d_type_database
PUBLIC	?overload_invalid_vec3d_type_message@@3PBDB	; overload_invalid_vec3d_type_message
PUBLIC	?debug_fatal_invalid_vec3d_type_message@@3PBDB	; debug_fatal_invalid_vec3d_type_message
PUBLIC	?fn_set_local_entity_raw_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA ; fn_set_local_entity_raw_vec3d
PUBLIC	?fn_set_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA ; fn_set_local_entity_vec3d
PUBLIC	?fn_set_client_server_entity_vec3d@@3PAY1BI@1P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA ; fn_set_client_server_entity_vec3d
PUBLIC	?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA ; fn_get_local_entity_vec3d
PUBLIC	?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA ; fn_get_local_entity_vec3d_ptr
PUBLIC	??_C@_0BM@PLCAJLAE@VEC3D_TYPE_BOUNDING_BOX_MAX@	; `string'
PUBLIC	??_C@_0BM@OJKLHPGL@VEC3D_TYPE_BOUNDING_BOX_MIN@	; `string'
PUBLIC	??_C@_0BK@MJEBONHM@VEC3D_TYPE_COVER_POSITION@	; `string'
PUBLIC	??_C@_0BN@DDDICIEF@VEC3D_TYPE_EO_TRACKING_POINT@ ; `string'
PUBLIC	??_C@_0BK@HIKHIACA@VEC3D_TYPE_GUIDE_POSITION@	; `string'
PUBLIC	??_C@_0BM@NIDMIKHM@VEC3D_TYPE_INITIAL_VELOCITY@	; `string'
PUBLIC	??_C@_0BJ@NHEALBGO@VEC3D_TYPE_MOTION_VECTOR@	; `string'
PUBLIC	??_C@_0BK@HNNLDDDF@VEC3D_TYPE_OBJECT_SCALING@	; `string'
PUBLIC	??_C@_0BE@CNHNPHNN@VEC3D_TYPE_POSITION@		; `string'
PUBLIC	??_C@_0BN@MKGOFPFI@VEC3D_TYPE_RELATIVE_POSITION@ ; `string'
PUBLIC	??_C@_0BK@PNOIBLAA@VEC3D_TYPE_START_POSITION@	; `string'
PUBLIC	??_C@_0BJ@NLPCNDG@VEC3D_TYPE_STOP_POSITION@	; `string'
PUBLIC	??_C@_0BJ@OCNPGBIG@VEC3D_TYPE_WAIT_POSITION@	; `string'
PUBLIC	??_C@_0CD@BFEJAMIA@VEC3D_TYPE_WEAPON_TO_TARGET_VEC@ ; `string'
PUBLIC	??_C@_0BJ@BIJKFBBN@VEC3D_TYPE_WEAPON_VECTOR@	; `string'
PUBLIC	??_C@_0BM@FLCOOIHH@VEC3D_TYPE_WEATHER_POSITION@	; `string'
PUBLIC	??_C@_0BM@DJALABJK@VEC3D_TYPE_WEATHER_VELOCITY@	; `string'
PUBLIC	??_C@_0CB@LNOCEDC@VEC3D_TYPE_WIND_DIRECTION_VECTO@ ; `string'
PUBLIC	??_C@_0CA@JOHGEHEB@VEC3D_TYPE_WIND_EFFECT_POSITION@ ; `string'
PUBLIC	??_C@_0CA@PMFDKOKM@VEC3D_TYPE_WIND_EFFECT_VELOCITY@ ; `string'
PUBLIC	??_C@_0O@HLHMFBHD@VEC3D_TYPE_XV@		; `string'
PUBLIC	??_C@_0BP@EHJGMKGN@VEC3D_TYPE_LAST_KNOWN_POSITION@ ; `string'
PUBLIC	??_C@_0DL@JAJHCKPM@Overloaded?5entity?5function?5invo@ ; `string'
PUBLIC	??_C@_0FJ@EKDGCKFI@Invalid?5vec3d?5type?5?$CIentity?5type@ ; `string'
_BSS	SEGMENT
?fn_set_local_entity_raw_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA DD 0390H DUP (?) ; fn_set_local_entity_raw_vec3d
?fn_set_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA DD 0390H DUP (?) ; fn_set_local_entity_vec3d
?fn_set_client_server_entity_vec3d@@3PAY1BI@1P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA DD 0720H DUP (?) ; fn_set_client_server_entity_vec3d
?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA DD 0390H DUP (?) ; fn_get_local_entity_vec3d
?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA DD 0390H DUP (?) ; fn_get_local_entity_vec3d_ptr
_BSS	ENDS
;	COMDAT ??_C@_0FJ@EKDGCKFI@Invalid?5vec3d?5type?5?$CIentity?5type@
CONST	SEGMENT
??_C@_0FJ@EKDGCKFI@Invalid?5vec3d?5type?5?$CIentity?5type@ DB 'Invalid ve'
	DB	'c3d type (entity type = %s, index = %d, vec3d type = %s, file'
	DB	' = %s, line = %d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@JAJHCKPM@Overloaded?5entity?5function?5invo@
CONST	SEGMENT
??_C@_0DL@JAJHCKPM@Overloaded?5entity?5function?5invo@ DB 'Overloaded ent'
	DB	'ity function invoked with invalid vec3d type', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@EHJGMKGN@VEC3D_TYPE_LAST_KNOWN_POSITION@
CONST	SEGMENT
??_C@_0BP@EHJGMKGN@VEC3D_TYPE_LAST_KNOWN_POSITION@ DB 'VEC3D_TYPE_LAST_KN'
	DB	'OWN_POSITION', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HLHMFBHD@VEC3D_TYPE_XV@
CONST	SEGMENT
??_C@_0O@HLHMFBHD@VEC3D_TYPE_XV@ DB 'VEC3D_TYPE_XV', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PMFDKOKM@VEC3D_TYPE_WIND_EFFECT_VELOCITY@
CONST	SEGMENT
??_C@_0CA@PMFDKOKM@VEC3D_TYPE_WIND_EFFECT_VELOCITY@ DB 'VEC3D_TYPE_WIND_E'
	DB	'FFECT_VELOCITY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JOHGEHEB@VEC3D_TYPE_WIND_EFFECT_POSITION@
CONST	SEGMENT
??_C@_0CA@JOHGEHEB@VEC3D_TYPE_WIND_EFFECT_POSITION@ DB 'VEC3D_TYPE_WIND_E'
	DB	'FFECT_POSITION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LNOCEDC@VEC3D_TYPE_WIND_DIRECTION_VECTO@
CONST	SEGMENT
??_C@_0CB@LNOCEDC@VEC3D_TYPE_WIND_DIRECTION_VECTO@ DB 'VEC3D_TYPE_WIND_DI'
	DB	'RECTION_VECTOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DJALABJK@VEC3D_TYPE_WEATHER_VELOCITY@
CONST	SEGMENT
??_C@_0BM@DJALABJK@VEC3D_TYPE_WEATHER_VELOCITY@ DB 'VEC3D_TYPE_WEATHER_VE'
	DB	'LOCITY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FLCOOIHH@VEC3D_TYPE_WEATHER_POSITION@
CONST	SEGMENT
??_C@_0BM@FLCOOIHH@VEC3D_TYPE_WEATHER_POSITION@ DB 'VEC3D_TYPE_WEATHER_PO'
	DB	'SITION', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BIJKFBBN@VEC3D_TYPE_WEAPON_VECTOR@
CONST	SEGMENT
??_C@_0BJ@BIJKFBBN@VEC3D_TYPE_WEAPON_VECTOR@ DB 'VEC3D_TYPE_WEAPON_VECTOR'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@BFEJAMIA@VEC3D_TYPE_WEAPON_TO_TARGET_VEC@
CONST	SEGMENT
??_C@_0CD@BFEJAMIA@VEC3D_TYPE_WEAPON_TO_TARGET_VEC@ DB 'VEC3D_TYPE_WEAPON'
	DB	'_TO_TARGET_VECTOR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OCNPGBIG@VEC3D_TYPE_WAIT_POSITION@
CONST	SEGMENT
??_C@_0BJ@OCNPGBIG@VEC3D_TYPE_WAIT_POSITION@ DB 'VEC3D_TYPE_WAIT_POSITION'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NLPCNDG@VEC3D_TYPE_STOP_POSITION@
CONST	SEGMENT
??_C@_0BJ@NLPCNDG@VEC3D_TYPE_STOP_POSITION@ DB 'VEC3D_TYPE_STOP_POSITION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PNOIBLAA@VEC3D_TYPE_START_POSITION@
CONST	SEGMENT
??_C@_0BK@PNOIBLAA@VEC3D_TYPE_START_POSITION@ DB 'VEC3D_TYPE_START_POSITI'
	DB	'ON', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MKGOFPFI@VEC3D_TYPE_RELATIVE_POSITION@
CONST	SEGMENT
??_C@_0BN@MKGOFPFI@VEC3D_TYPE_RELATIVE_POSITION@ DB 'VEC3D_TYPE_RELATIVE_'
	DB	'POSITION', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CNHNPHNN@VEC3D_TYPE_POSITION@
CONST	SEGMENT
??_C@_0BE@CNHNPHNN@VEC3D_TYPE_POSITION@ DB 'VEC3D_TYPE_POSITION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HNNLDDDF@VEC3D_TYPE_OBJECT_SCALING@
CONST	SEGMENT
??_C@_0BK@HNNLDDDF@VEC3D_TYPE_OBJECT_SCALING@ DB 'VEC3D_TYPE_OBJECT_SCALI'
	DB	'NG', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NHEALBGO@VEC3D_TYPE_MOTION_VECTOR@
CONST	SEGMENT
??_C@_0BJ@NHEALBGO@VEC3D_TYPE_MOTION_VECTOR@ DB 'VEC3D_TYPE_MOTION_VECTOR'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NIDMIKHM@VEC3D_TYPE_INITIAL_VELOCITY@
CONST	SEGMENT
??_C@_0BM@NIDMIKHM@VEC3D_TYPE_INITIAL_VELOCITY@ DB 'VEC3D_TYPE_INITIAL_VE'
	DB	'LOCITY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HIKHIACA@VEC3D_TYPE_GUIDE_POSITION@
CONST	SEGMENT
??_C@_0BK@HIKHIACA@VEC3D_TYPE_GUIDE_POSITION@ DB 'VEC3D_TYPE_GUIDE_POSITI'
	DB	'ON', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DDDICIEF@VEC3D_TYPE_EO_TRACKING_POINT@
CONST	SEGMENT
??_C@_0BN@DDDICIEF@VEC3D_TYPE_EO_TRACKING_POINT@ DB 'VEC3D_TYPE_EO_TRACKI'
	DB	'NG_POINT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MJEBONHM@VEC3D_TYPE_COVER_POSITION@
CONST	SEGMENT
??_C@_0BK@MJEBONHM@VEC3D_TYPE_COVER_POSITION@ DB 'VEC3D_TYPE_COVER_POSITI'
	DB	'ON', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OJKLHPGL@VEC3D_TYPE_BOUNDING_BOX_MIN@
CONST	SEGMENT
??_C@_0BM@OJKLHPGL@VEC3D_TYPE_BOUNDING_BOX_MIN@ DB 'VEC3D_TYPE_BOUNDING_B'
	DB	'OX_MIN', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PLCAJLAE@VEC3D_TYPE_BOUNDING_BOX_MAX@
CONST	SEGMENT
??_C@_0BM@PLCAJLAE@VEC3D_TYPE_BOUNDING_BOX_MAX@ DB 'VEC3D_TYPE_BOUNDING_B'
	DB	'OX_MAX', 00H				; `string'
CONST	ENDS
_DATA	SEGMENT
?vec3d_type_database@@3PAUVEC3D_TYPE_DATA@@A DD FLAT:??_C@_0BM@PLCAJLAE@VEC3D_TYPE_BOUNDING_BOX_MAX@ ; vec3d_type_database
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BM@OJKLHPGL@VEC3D_TYPE_BOUNDING_BOX_MIN@
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BK@MJEBONHM@VEC3D_TYPE_COVER_POSITION@
	DD	02H
	DD	00H
	DD	FLAT:??_C@_0BN@DDDICIEF@VEC3D_TYPE_EO_TRACKING_POINT@
	DD	02H
	DD	00H
	DD	FLAT:??_C@_0BK@HIKHIACA@VEC3D_TYPE_GUIDE_POSITION@
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BM@NIDMIKHM@VEC3D_TYPE_INITIAL_VELOCITY@
	DD	04H
	DD	00H
	DD	FLAT:??_C@_0BJ@NHEALBGO@VEC3D_TYPE_MOTION_VECTOR@
	DD	05H
	DD	00H
	DD	FLAT:??_C@_0BK@HNNLDDDF@VEC3D_TYPE_OBJECT_SCALING@
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BE@CNHNPHNN@VEC3D_TYPE_POSITION@
	DD	02H
	DD	00H
	DD	FLAT:??_C@_0BN@MKGOFPFI@VEC3D_TYPE_RELATIVE_POSITION@
	DD	03H
	DD	00H
	DD	FLAT:??_C@_0BK@PNOIBLAA@VEC3D_TYPE_START_POSITION@
	DD	02H
	DD	00H
	DD	FLAT:??_C@_0BJ@NLPCNDG@VEC3D_TYPE_STOP_POSITION@
	DD	02H
	DD	00H
	DD	FLAT:??_C@_0BJ@OCNPGBIG@VEC3D_TYPE_WAIT_POSITION@
	DD	02H
	DD	00H
	DD	FLAT:??_C@_0CD@BFEJAMIA@VEC3D_TYPE_WEAPON_TO_TARGET_VEC@
	DD	01H
	DD	00H
	DD	FLAT:??_C@_0BJ@BIJKFBBN@VEC3D_TYPE_WEAPON_VECTOR@
	DD	01H
	DD	00H
	DD	FLAT:??_C@_0BM@FLCOOIHH@VEC3D_TYPE_WEATHER_POSITION@
	DD	02H
	DD	00H
	DD	FLAT:??_C@_0BM@DJALABJK@VEC3D_TYPE_WEATHER_VELOCITY@
	DD	05H
	DD	00H
	DD	FLAT:??_C@_0CB@LNOCEDC@VEC3D_TYPE_WIND_DIRECTION_VECTO@
	DD	01H
	DD	00H
	DD	FLAT:??_C@_0CA@JOHGEHEB@VEC3D_TYPE_WIND_EFFECT_POSITION@
	DD	02H
	DD	00H
	DD	FLAT:??_C@_0CA@PMFDKOKM@VEC3D_TYPE_WIND_EFFECT_VELOCITY@
	DD	05H
	DD	00H
	DD	FLAT:??_C@_0O@HLHMFBHD@VEC3D_TYPE_XV@
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0BP@EHJGMKGN@VEC3D_TYPE_LAST_KNOWN_POSITION@
	DD	00H
	DD	00H
	ORG $+24
?overload_invalid_vec3d_type_message@@3PBDB DD FLAT:??_C@_0DL@JAJHCKPM@Overloaded?5entity?5function?5invo@ ; overload_invalid_vec3d_type_message
?debug_fatal_invalid_vec3d_type_message@@3PBDB DD FLAT:??_C@_0FJ@EKDGCKFI@Invalid?5vec3d?5type?5?$CIentity?5type@ ; debug_fatal_invalid_vec3d_type_message
_DATA	ENDS
PUBLIC	?initialise_entity_vec3d_default_functions@@YGXXZ ; initialise_entity_vec3d_default_functions
PUBLIC	?pack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; pack_vec3d
PUBLIC	?unpack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; unpack_vec3d
PUBLIC	?pack_vec3d_type@@YGXW4VEC3D_TYPES@@@Z		; pack_vec3d_type
PUBLIC	?unpack_vec3d_type@@YG?AW4VEC3D_TYPES@@XZ	; unpack_vec3d_type
PUBLIC	?get_local_entity_vec3d_magnitude@@YGMPAUENTITY@@W4VEC3D_TYPES@@@Z ; get_local_entity_vec3d_magnitude
PUBLIC	?__LINE__Var@?0??default_set_entity_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z@4JA ; `default_set_entity_vec3d'::`1'::__LINE__Var
PUBLIC	??_C@_0EO@DONIONCC@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_01MHEDDDHA@v@				; `string'
PUBLIC	?__LINE__Var@?0??default_get_entity_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z@4JA ; `default_get_entity_vec3d'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??pack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z@4JA ; `pack_vec3d'::`1'::__LINE__Var
PUBLIC	??_C@_0CI@FLFGIKOB@?$CItype?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CItype?5?$DM?5NUM_VEC3@ ; `string'
PUBLIC	??_C@_0CO@NGAENGKE@point_inside_map_volume?5?$CIv?$CJ?5?$HM?$HM?5@ ; `string'
PUBLIC	??_C@_0BB@NLEAOGFP@x_sec1?5?$DN?$DN?5x_sec2@	; `string'
PUBLIC	??_C@_0BB@JIODGHLB@z_sec1?5?$DN?$DN?5z_sec2@	; `string'
PUBLIC	??_C@_0BN@GEKGHNNI@Invalid?5vec3d?5pack?5type?5?$DN?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?0??unpack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z@4JA ; `unpack_vec3d'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??pack_vec3d_type@@YGXW4VEC3D_TYPES@@@Z@4JA ; `pack_vec3d_type'::`1'::__LINE__Var
PUBLIC	??_C@_0CE@FLPGJJKM@?$CB?$CItype?5?$DO?$DO?5NUM_VEC3D_TYPE_PACK_B@ ; `string'
PUBLIC	?__LINE__Var@?0??unpack_vec3d_type@@YG?AW4VEC3D_TYPES@@XZ@4JA ; `unpack_vec3d_type'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_local_entity_vec3d_magnitude@@YGMPAUENTITY@@W4VEC3D_TYPES@@@Z@4JA ; `get_local_entity_vec3d_magnitude'::`1'::__LINE__Var
PUBLIC	??_C@_02LFNMGJAP@en@				; `string'
PUBLIC	__real@3c800000
PUBLIC	__real@3d800000
PUBLIC	__real@3e000000
PUBLIC	__real@3e800000
PUBLIC	__real@3f40020040080100
PUBLIC	__real@3f800000
PUBLIC	__real@40800000
PUBLIC	__real@41000000
PUBLIC	__real@41800000
PUBLIC	__real@42800000
PUBLIC	__real@44ffe000
PUBLIC	__real@bf800000
PUBLIC	__real@c61c4000
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?normalise_3d_vector@@YGMPAUVEC3D@@@Z:PROC	; normalise_3d_vector
EXTRN	?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z:PROC	; get_3d_vector_magnitude
EXTRN	?pack_signed_data@@YGXHH@Z:PROC			; pack_signed_data
EXTRN	?pack_unsigned_data@@YGXIH@Z:PROC		; pack_unsigned_data
EXTRN	?unpack_signed_data@@YGHH@Z:PROC		; unpack_signed_data
EXTRN	?unpack_unsigned_data@@YGIH@Z:PROC		; unpack_unsigned_data
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?world_map@@3UWORLD_MAP_DATA@@A:BYTE		; world_map
EXTRN	__fltused:DWORD
;	COMDAT __real@c61c4000
CONST	SEGMENT
__real@c61c4000 DD 0c61c4000r			; -10000
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@44ffe000
CONST	SEGMENT
__real@44ffe000 DD 044ffe000r			; 2047
CONST	ENDS
;	COMDAT __real@42800000
CONST	SEGMENT
__real@42800000 DD 042800000r			; 64
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f40020040080100
CONST	SEGMENT
__real@3f40020040080100 DQ 03f40020040080100r	; 0.00048852
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e000000
CONST	SEGMENT
__real@3e000000 DD 03e000000r			; 0.125
CONST	ENDS
;	COMDAT __real@3d800000
CONST	SEGMENT
__real@3d800000 DD 03d800000r			; 0.0625
CONST	ENDS
;	COMDAT __real@3c800000
CONST	SEGMENT
__real@3c800000 DD 03c800000r			; 0.015625
CONST	ENDS
;	COMDAT ??_C@_02LFNMGJAP@en@
CONST	SEGMENT
??_C@_02LFNMGJAP@en@ DB 'en', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_local_entity_vec3d_magnitude@@YGMPAUENTITY@@W4VEC3D_TYPES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_local_entity_vec3d_magnitude@@YGMPAUENTITY@@W4VEC3D_TYPES@@@Z@4JA DD 035cH ; `get_local_entity_vec3d_magnitude'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??unpack_vec3d_type@@YG?AW4VEC3D_TYPES@@XZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??unpack_vec3d_type@@YG?AW4VEC3D_TYPES@@XZ@4JA DD 0343H ; `unpack_vec3d_type'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CE@FLPGJJKM@?$CB?$CItype?5?$DO?$DO?5NUM_VEC3D_TYPE_PACK_B@
CONST	SEGMENT
??_C@_0CE@FLPGJJKM@?$CB?$CItype?5?$DO?$DO?5NUM_VEC3D_TYPE_PACK_B@ DB '!(t'
	DB	'ype >> NUM_VEC3D_TYPE_PACK_BITS)', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??pack_vec3d_type@@YGXW4VEC3D_TYPES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??pack_vec3d_type@@YGXW4VEC3D_TYPES@@@Z@4JA DD 032dH ; `pack_vec3d_type'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??unpack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??unpack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z@4JA DD 0281H ; `unpack_vec3d'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BN@GEKGHNNI@Invalid?5vec3d?5pack?5type?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BN@GEKGHNNI@Invalid?5vec3d?5pack?5type?5?$DN?5?$CFd@ DB 'Invalid v'
	DB	'ec3d pack type = %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JIODGHLB@z_sec1?5?$DN?$DN?5z_sec2@
CONST	SEGMENT
??_C@_0BB@JIODGHLB@z_sec1?5?$DN?$DN?5z_sec2@ DB 'z_sec1 == z_sec2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NLEAOGFP@x_sec1?5?$DN?$DN?5x_sec2@
CONST	SEGMENT
??_C@_0BB@NLEAOGFP@x_sec1?5?$DN?$DN?5x_sec2@ DB 'x_sec1 == x_sec2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@NGAENGKE@point_inside_map_volume?5?$CIv?$CJ?5?$HM?$HM?5@
CONST	SEGMENT
??_C@_0CO@NGAENGKE@point_inside_map_volume?5?$CIv?$CJ?5?$HM?$HM?5@ DB 'po'
	DB	'int_inside_map_volume (v) || v->y == -10000', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FLFGIKOB@?$CItype?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CItype?5?$DM?5NUM_VEC3@
CONST	SEGMENT
??_C@_0CI@FLFGIKOB@?$CItype?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CItype?5?$DM?5NUM_VEC3@ DB '('
	DB	'type >= 0) && (type < NUM_VEC3D_TYPES)', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??pack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??pack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z@4JA DD 0163H ; `pack_vec3d'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??default_get_entity_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??default_get_entity_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z@4JA DD 0eaH ; `default_get_entity_vec3d'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_01MHEDDDHA@v@
CONST	SEGMENT
??_C@_01MHEDDDHA@v@ DB 'v', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@DONIONCC@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EO@DONIONCC@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\system\en_funcs\en_ve'
	DB	'c3d.c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??default_set_entity_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??default_set_entity_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z@4JA DD 0e1H ; `default_set_entity_vec3d'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_vec3d.c
;	COMDAT ?default_get_entity_vec3d_ptr@@YGPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@Z
_TEXT	SEGMENT
_en$ = 8						; size = 4
_type$ = 12						; size = 4
?default_get_entity_vec3d_ptr@@YGPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@Z PROC ; default_get_entity_vec3d_ptr, COMDAT

; 317  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 318  : 	return (NULL);

  00009	33 c0		 xor	 eax, eax

; 319  : }

  0000b	5f		 pop	 edi
  0000c	5e		 pop	 esi
  0000d	5b		 pop	 ebx
  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?default_get_entity_vec3d_ptr@@YGPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@Z ENDP ; default_get_entity_vec3d_ptr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_vec3d.c
;	COMDAT ?default_get_entity_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z
_TEXT	SEGMENT
tv69 = -68						; size = 4
_en$ = 8						; size = 4
_type$ = 12						; size = 4
_v$ = 16						; size = 4
?default_get_entity_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z PROC ; default_get_entity_vec3d, COMDAT

; 234  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 235  : 	ASSERT (v);

  00009	83 7d 10 00	 cmp	 DWORD PTR _v$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN4@default_ge
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??default_get_entity_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@DONIONCC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_01MHEDDDHA@v@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@default_ge:

; 236  : 
; 237  : 	switch (type)

  00027	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  0002a	89 45 bc	 mov	 DWORD PTR tv69[ebp], eax
  0002d	8b 4d bc	 mov	 ecx, DWORD PTR tv69[ebp]
  00030	83 e9 03	 sub	 ecx, 3
  00033	89 4d bc	 mov	 DWORD PTR tv69[ebp], ecx
  00036	83 7d bc 0b	 cmp	 DWORD PTR tv69[ebp], 11	; 0000000bH
  0003a	0f 87 07 01 00
	00		 ja	 $LN11@default_ge
  00040	8b 55 bc	 mov	 edx, DWORD PTR tv69[ebp]
  00043	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN13@default_ge[edx*4]
$LN5@default_ge:

; 238  : 	{
; 239  : 		////////////////////////////////////////
; 240  : 		case VEC3D_TYPE_MOTION_VECTOR:
; 241  : 		////////////////////////////////////////
; 242  : 		{
; 243  : 			v->x = 0.0;

  0004a	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0004d	0f 57 c0	 xorps	 xmm0, xmm0
  00050	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 244  : 			v->y = 0.0;

  00054	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00057	0f 57 c0	 xorps	 xmm0, xmm0
  0005a	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 245  : 			v->z = 1.0;

  0005f	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00062	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0006a	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 246  : 
; 247  : 			break;

  0006f	e9 f3 00 00 00	 jmp	 $LN2@default_ge
$LN6@default_ge:

; 248  : 		}
; 249  : 		////////////////////////////////////////
; 250  : 		case VEC3D_TYPE_START_POSITION:
; 251  : 		////////////////////////////////////////
; 252  : 		{
; 253  : 			v->x = MID_MAP_X;

  00074	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00077	f3 0f 10 05 30
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+48
  0007f	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 254  : 			v->y = 0.0;

  00083	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00086	0f 57 c0	 xorps	 xmm0, xmm0
  00089	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 255  : 			v->z = MID_MAP_Z;

  0008e	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00091	f3 0f 10 05 38
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+56
  00099	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 256  : 
; 257  : 			break;

  0009e	e9 c4 00 00 00	 jmp	 $LN2@default_ge
$LN7@default_ge:

; 258  : 		}
; 259  : 		////////////////////////////////////////
; 260  : 		case VEC3D_TYPE_STOP_POSITION:
; 261  : 		////////////////////////////////////////
; 262  : 		{
; 263  : 			v->x = MID_MAP_X;

  000a3	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  000a6	f3 0f 10 05 30
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+48
  000ae	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 264  : 			v->y = 0.0;

  000b2	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  000b5	0f 57 c0	 xorps	 xmm0, xmm0
  000b8	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 265  : 			v->z = MID_MAP_Z;

  000bd	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  000c0	f3 0f 10 05 38
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+56
  000c8	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 266  : 
; 267  : 			break;

  000cd	e9 95 00 00 00	 jmp	 $LN2@default_ge
$LN8@default_ge:

; 268  : 		}
; 269  : 		////////////////////////////////////////
; 270  : 		case VEC3D_TYPE_WEAPON_TO_TARGET_VECTOR:
; 271  : 		////////////////////////////////////////
; 272  : 		{
; 273  : 			v->x = 0.0;

  000d2	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  000d5	0f 57 c0	 xorps	 xmm0, xmm0
  000d8	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 274  : 			v->y = 0.0;

  000dc	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  000df	0f 57 c0	 xorps	 xmm0, xmm0
  000e2	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 275  : 			v->z = -1.0;

  000e7	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  000ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000f2	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 276  : 
; 277  : 			break;

  000f7	eb 6e		 jmp	 SHORT $LN2@default_ge
$LN9@default_ge:

; 278  : 		}
; 279  : 		////////////////////////////////////////
; 280  : 		case VEC3D_TYPE_WEAPON_VECTOR:
; 281  : 		////////////////////////////////////////
; 282  : 		{
; 283  : 			v->x = 0.0;

  000f9	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  000fc	0f 57 c0	 xorps	 xmm0, xmm0
  000ff	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 284  : 			v->y = 0.0;

  00103	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00106	0f 57 c0	 xorps	 xmm0, xmm0
  00109	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 285  : 			v->z = 1.0;

  0010e	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00111	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00119	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 286  : 
; 287  : 			break;

  0011e	eb 47		 jmp	 SHORT $LN2@default_ge
$LN10@default_ge:

; 288  : 		}
; 289  : 		////////////////////////////////////////
; 290  : 		case VEC3D_TYPE_EO_TRACKING_POINT:
; 291  : 		////////////////////////////////////////
; 292  : 		{
; 293  : 			v->x = 0.0;

  00120	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00123	0f 57 c0	 xorps	 xmm0, xmm0
  00126	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 294  : 			v->y = -10000.0;

  0012a	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0012d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c61c4000
  00135	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 295  : 			v->z = 0.0;

  0013a	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0013d	0f 57 c0	 xorps	 xmm0, xmm0
  00140	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 296  : 
; 297  : 			break;

  00145	eb 20		 jmp	 SHORT $LN2@default_ge
$LN11@default_ge:

; 298  : 		}
; 299  : 		////////////////////////////////////////
; 300  : 		default:
; 301  : 		////////////////////////////////////////
; 302  : 		{
; 303  : 			v->x = 0.0;

  00147	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0014a	0f 57 c0	 xorps	 xmm0, xmm0
  0014d	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 304  : 			v->y = 0.0;

  00151	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00154	0f 57 c0	 xorps	 xmm0, xmm0
  00157	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 305  : 			v->z = 0.0;

  0015c	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0015f	0f 57 c0	 xorps	 xmm0, xmm0
  00162	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0
$LN2@default_ge:

; 306  : 
; 307  : 			break;
; 308  : 		}
; 309  : 	}
; 310  : }

  00167	5f		 pop	 edi
  00168	5e		 pop	 esi
  00169	5b		 pop	 ebx
  0016a	8b e5		 mov	 esp, ebp
  0016c	5d		 pop	 ebp
  0016d	c2 0c 00	 ret	 12			; 0000000cH
$LN13@default_ge:
  00170	00 00 00 00	 DD	 $LN10@default_ge
  00174	00 00 00 00	 DD	 $LN11@default_ge
  00178	00 00 00 00	 DD	 $LN11@default_ge
  0017c	00 00 00 00	 DD	 $LN5@default_ge
  00180	00 00 00 00	 DD	 $LN11@default_ge
  00184	00 00 00 00	 DD	 $LN11@default_ge
  00188	00 00 00 00	 DD	 $LN11@default_ge
  0018c	00 00 00 00	 DD	 $LN6@default_ge
  00190	00 00 00 00	 DD	 $LN7@default_ge
  00194	00 00 00 00	 DD	 $LN11@default_ge
  00198	00 00 00 00	 DD	 $LN8@default_ge
  0019c	00 00 00 00	 DD	 $LN9@default_ge
?default_get_entity_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ENDP ; default_get_entity_vec3d
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_vec3d.c
;	COMDAT ?default_set_entity_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z
_TEXT	SEGMENT
_en$ = 8						; size = 4
_type$ = 12						; size = 4
_v$ = 16						; size = 4
?default_set_entity_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z PROC ; default_set_entity_vec3d, COMDAT

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 226  : 	ASSERT (v);

  00009	83 7d 10 00	 cmp	 DWORD PTR _v$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN1@default_se
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??default_set_entity_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@DONIONCC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_01MHEDDDHA@v@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN1@default_se:

; 227  : }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
?default_set_entity_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ENDP ; default_set_entity_vec3d
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_vec3d.c
;	COMDAT ?get_local_entity_vec3d_magnitude@@YGMPAUENTITY@@W4VEC3D_TYPES@@@Z
_TEXT	SEGMENT
tv90 = -80						; size = 4
tv81 = -76						; size = 4
_m$ = -8						; size = 4
_v$ = -4						; size = 4
_en$ = 8						; size = 4
_type$ = 12						; size = 4
?get_local_entity_vec3d_magnitude@@YGMPAUENTITY@@W4VEC3D_TYPES@@@Z PROC ; get_local_entity_vec3d_magnitude, COMDAT

; 860  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 861  : 	vec3d
; 862  : 		*v;
; 863  : 
; 864  : 	float
; 865  : 		m;
; 866  : 
; 867  : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_local_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_local_entity_vec3d_magnitude@@YGMPAUENTITY@@W4VEC3D_TYPES@@@Z@4JA
  00014	83 c0 07	 add	 eax, 7
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@DONIONCC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_local_:

; 868  : 
; 869  : 	ASSERT ((type >= 0) && (type < NUM_VEC3D_TYPES));

  00027	83 7d 0c 00	 cmp	 DWORD PTR _type$[ebp], 0
  0002b	7c 06		 jl	 SHORT $LN4@get_local_
  0002d	83 7d 0c 18	 cmp	 DWORD PTR _type$[ebp], 24 ; 00000018H
  00031	7c 18		 jl	 SHORT $LN3@get_local_
$LN4@get_local_:
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_local_entity_vec3d_magnitude@@YGMPAUENTITY@@W4VEC3D_TYPES@@@Z@4JA
  00038	83 c0 09	 add	 eax, 9
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@DONIONCC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FLFGIKOB@?$CItype?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CItype?5?$DM?5NUM_VEC3@
  00046	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_local_:

; 870  : 
; 871  : 	v = get_local_entity_vec3d_ptr (en, type);

  0004b	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0004f	74 0a		 je	 SHORT $LN8@get_local_
  00051	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00054	8b 08		 mov	 ecx, DWORD PTR [eax]
  00056	89 4d b4	 mov	 DWORD PTR tv81[ebp], ecx
  00059	eb 21		 jmp	 SHORT $LN9@get_local_
$LN8@get_local_:
  0005b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_local_entity_vec3d_magnitude@@YGMPAUENTITY@@W4VEC3D_TYPES@@@Z@4JA
  00061	83 c2 0b	 add	 edx, 11			; 0000000bH
  00064	52		 push	 edx
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@DONIONCC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00075	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN9@get_local_:
  0007c	83 7d 0c 00	 cmp	 DWORD PTR _type$[ebp], 0
  00080	7c 0e		 jl	 SHORT $LN10@get_local_
  00082	83 7d 0c 18	 cmp	 DWORD PTR _type$[ebp], 24 ; 00000018H
  00086	7d 08		 jge	 SHORT $LN10@get_local_
  00088	8b 4d 0c	 mov	 ecx, DWORD PTR _type$[ebp]
  0008b	89 4d b0	 mov	 DWORD PTR tv90[ebp], ecx
  0008e	eb 21		 jmp	 SHORT $LN11@get_local_
$LN10@get_local_:
  00090	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_local_entity_vec3d_magnitude@@YGMPAUENTITY@@W4VEC3D_TYPES@@@Z@4JA
  00096	83 c2 0b	 add	 edx, 11			; 0000000bH
  00099	52		 push	 edx
  0009a	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@DONIONCC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0009f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000aa	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN11@get_local_:
  000b1	8b 4d 0c	 mov	 ecx, DWORD PTR _type$[ebp]
  000b4	51		 push	 ecx
  000b5	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  000b8	52		 push	 edx
  000b9	6b 45 b4 60	 imul	 eax, DWORD PTR tv81[ebp], 96
  000bd	8b 4d b0	 mov	 ecx, DWORD PTR tv90[ebp]
  000c0	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[eax+ecx*4]
  000c7	ff d2		 call	 edx
  000c9	89 45 fc	 mov	 DWORD PTR _v$[ebp], eax

; 872  : 
; 873  : 	if (v)

  000cc	83 7d fc 00	 cmp	 DWORD PTR _v$[ebp], 0
  000d0	74 0e		 je	 SHORT $LN5@get_local_

; 874  : 	{
; 875  : 		m = get_3d_vector_magnitude (v);

  000d2	8b 45 fc	 mov	 eax, DWORD PTR _v$[ebp]
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  000db	d9 5d f8	 fstp	 DWORD PTR _m$[ebp]

; 876  : 	}
; 877  : 	else

  000de	eb 08		 jmp	 SHORT $LN6@get_local_
$LN5@get_local_:

; 878  : 	{
; 879  : 		m = 0.0;

  000e0	0f 57 c0	 xorps	 xmm0, xmm0
  000e3	f3 0f 11 45 f8	 movss	 DWORD PTR _m$[ebp], xmm0
$LN6@get_local_:

; 880  : 	}
; 881  : 
; 882  : 	return (m);

  000e8	d9 45 f8	 fld	 DWORD PTR _m$[ebp]

; 883  : }

  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	5b		 pop	 ebx
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c2 08 00	 ret	 8
?get_local_entity_vec3d_magnitude@@YGMPAUENTITY@@W4VEC3D_TYPES@@@Z ENDP ; get_local_entity_vec3d_magnitude
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_vec3d.c
;	COMDAT ?unpack_vec3d_type@@YG?AW4VEC3D_TYPES@@XZ
_TEXT	SEGMENT
_type$ = -4						; size = 4
?unpack_vec3d_type@@YG?AW4VEC3D_TYPES@@XZ PROC		; unpack_vec3d_type, COMDAT

; 835  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 836  : 	vec3d_types
; 837  : 		type;
; 838  : 
; 839  : 	type = (vec3d_types) unpack_unsigned_data (NUM_VEC3D_TYPE_PACK_BITS);

  00009	6a 05		 push	 5
  0000b	e8 00 00 00 00	 call	 ?unpack_unsigned_data@@YGIH@Z ; unpack_unsigned_data
  00010	89 45 fc	 mov	 DWORD PTR _type$[ebp], eax

; 840  : 
; 841  : 	ASSERT ((type >= 0) && (type < NUM_VEC3D_TYPES));

  00013	83 7d fc 00	 cmp	 DWORD PTR _type$[ebp], 0
  00017	7c 06		 jl	 SHORT $LN3@unpack_vec
  00019	83 7d fc 18	 cmp	 DWORD PTR _type$[ebp], 24 ; 00000018H
  0001d	7c 18		 jl	 SHORT $LN2@unpack_vec
$LN3@unpack_vec:
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_vec3d_type@@YG?AW4VEC3D_TYPES@@XZ@4JA
  00024	83 c0 06	 add	 eax, 6
  00027	50		 push	 eax
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@DONIONCC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FLFGIKOB@?$CItype?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CItype?5?$DM?5NUM_VEC3@
  00032	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@unpack_vec:

; 842  : 
; 843  : 	#if (DEBUG_MODULE_PACK_ONE || DEBUG_MODULE_PACK_ALL)
; 844  : 
; 845  : 	if (vec3d_type_database[type].debug_pack)
; 846  : 	{
; 847  : 		debug_log_entity_args (ENTITY_DEBUG_UNPACK, ENTITY_DEBUG_VEC3D_TYPE, NULL, type);
; 848  : 	}
; 849  : 
; 850  : 	#endif
; 851  : 
; 852  : 	return (type);

  00037	8b 45 fc	 mov	 eax, DWORD PTR _type$[ebp]

; 853  : }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?unpack_vec3d_type@@YG?AW4VEC3D_TYPES@@XZ ENDP		; unpack_vec3d_type
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_vec3d.c
;	COMDAT ?pack_vec3d_type@@YGXW4VEC3D_TYPES@@@Z
_TEXT	SEGMENT
_type$ = 8						; size = 4
?pack_vec3d_type@@YGXW4VEC3D_TYPES@@@Z PROC		; pack_vec3d_type, COMDAT

; 813  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 814  : 	ASSERT ((type >= 0) && (type < NUM_VEC3D_TYPES));

  00009	83 7d 08 00	 cmp	 DWORD PTR _type$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@pack_vec3d
  0000f	83 7d 08 18	 cmp	 DWORD PTR _type$[ebp], 24 ; 00000018H
  00013	7c 18		 jl	 SHORT $LN2@pack_vec3d
$LN3@pack_vec3d:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_vec3d_type@@YGXW4VEC3D_TYPES@@@Z@4JA
  0001a	83 c0 01	 add	 eax, 1
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@DONIONCC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FLFGIKOB@?$CItype?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CItype?5?$DM?5NUM_VEC3@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@pack_vec3d:

; 815  : 
; 816  : 	#if (DEBUG_MODULE_PACK_ONE || DEBUG_MODULE_PACK_ALL)
; 817  : 
; 818  : 	if (vec3d_type_database[type].debug_pack)
; 819  : 	{
; 820  : 		debug_log_entity_args (ENTITY_DEBUG_PACK, ENTITY_DEBUG_VEC3D_TYPE, NULL, type);
; 821  : 	}
; 822  : 
; 823  : 	#endif
; 824  : 
; 825  : 	ASSERT(!(type >> NUM_VEC3D_TYPE_PACK_BITS));

  0002d	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  00030	c1 f8 05	 sar	 eax, 5
  00033	85 c0		 test	 eax, eax
  00035	74 18		 je	 SHORT $LN4@pack_vec3d
  00037	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_vec3d_type@@YGXW4VEC3D_TYPES@@@Z@4JA
  0003c	83 c0 0c	 add	 eax, 12			; 0000000cH
  0003f	50		 push	 eax
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@DONIONCC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@FLPGJJKM@?$CB?$CItype?5?$DO?$DO?5NUM_VEC3D_TYPE_PACK_B@
  0004a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@pack_vec3d:

; 826  : 
; 827  : 	pack_unsigned_data (type, NUM_VEC3D_TYPE_PACK_BITS);

  0004f	6a 05		 push	 5
  00051	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ?pack_unsigned_data@@YGXIH@Z ; pack_unsigned_data

; 828  : }

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
?pack_vec3d_type@@YGXW4VEC3D_TYPES@@@Z ENDP		; pack_vec3d_type
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_vec3d.c
;	COMDAT ?unpack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z
_TEXT	SEGMENT
tv78 = -140						; size = 4
_iz$1 = -72						; size = 4
_iy$2 = -68						; size = 4
_ix$3 = -64						; size = 4
_iz$4 = -60						; size = 4
_iy$5 = -56						; size = 4
_ix$6 = -52						; size = 4
_iz$7 = -48						; size = 4
_iy$8 = -44						; size = 4
_ix$9 = -40						; size = 4
_iz$10 = -36						; size = 4
_iy$11 = -32						; size = 4
_ix$12 = -28						; size = 4
_iz$13 = -24						; size = 4
_iy$14 = -20						; size = 4
_ix$15 = -16						; size = 4
_iz$16 = -12						; size = 4
_iy$17 = -8						; size = 4
_ix$18 = -4						; size = 4
_en$ = 8						; size = 4
_type$ = 12						; size = 4
_v$ = 16						; size = 4
?unpack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z PROC ; unpack_vec3d, COMDAT

; 641  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 642  : 	ASSERT ((type >= 0) && (type < NUM_VEC3D_TYPES));

  0000c	83 7d 0c 00	 cmp	 DWORD PTR _type$[ebp], 0
  00010	7c 06		 jl	 SHORT $LN5@unpack_vec
  00012	83 7d 0c 18	 cmp	 DWORD PTR _type$[ebp], 24 ; 00000018H
  00016	7c 18		 jl	 SHORT $LN4@unpack_vec
$LN5@unpack_vec:
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z@4JA
  0001d	83 c0 01	 add	 eax, 1
  00020	50		 push	 eax
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@DONIONCC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FLFGIKOB@?$CItype?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CItype?5?$DM?5NUM_VEC3@
  0002b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@unpack_vec:

; 643  : 
; 644  : 	ASSERT (v);

  00030	83 7d 10 00	 cmp	 DWORD PTR _v$[ebp], 0
  00034	75 18		 jne	 SHORT $LN6@unpack_vec
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z@4JA
  0003b	83 c0 03	 add	 eax, 3
  0003e	50		 push	 eax
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@DONIONCC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_01MHEDDDHA@v@
  00049	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@unpack_vec:

; 645  : 
; 646  : 	switch (vec3d_type_database[type].pack_type)

  0004e	6b 45 0c 0c	 imul	 eax, DWORD PTR _type$[ebp], 12
  00052	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR ?vec3d_type_database@@3PAUVEC3D_TYPE_DATA@@A[eax+4]
  00058	89 8d 74 ff ff
	ff		 mov	 DWORD PTR tv78[ebp], ecx
  0005e	83 bd 74 ff ff
	ff 05		 cmp	 DWORD PTR tv78[ebp], 5
  00065	0f 87 58 02 00
	00		 ja	 $LN13@unpack_vec
  0006b	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR tv78[ebp]
  00071	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN15@unpack_vec[edx*4]
$LN7@unpack_vec:

; 647  : 	{
; 648  : 		////////////////////////////////////////
; 649  : 		case VEC3D_PACK_TYPE_UNPACKED:
; 650  : 		////////////////////////////////////////
; 651  : 		{
; 652  : 			int
; 653  : 				ix,
; 654  : 				iy,
; 655  : 				iz;
; 656  : 
; 657  : 			ix = unpack_unsigned_data (32);

  00078	6a 20		 push	 32			; 00000020H
  0007a	e8 00 00 00 00	 call	 ?unpack_unsigned_data@@YGIH@Z ; unpack_unsigned_data
  0007f	89 45 fc	 mov	 DWORD PTR _ix$18[ebp], eax

; 658  : 
; 659  : 			v->x = *(float *)&ix;

  00082	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00085	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _ix$18[ebp]
  0008a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 660  : 
; 661  : 			iy = unpack_unsigned_data (32);

  0008e	6a 20		 push	 32			; 00000020H
  00090	e8 00 00 00 00	 call	 ?unpack_unsigned_data@@YGIH@Z ; unpack_unsigned_data
  00095	89 45 f8	 mov	 DWORD PTR _iy$17[ebp], eax

; 662  : 
; 663  : 			v->y = *(float *)&iy;

  00098	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0009b	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _iy$17[ebp]
  000a0	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 664  : 
; 665  : 			iz = unpack_unsigned_data (32);

  000a5	6a 20		 push	 32			; 00000020H
  000a7	e8 00 00 00 00	 call	 ?unpack_unsigned_data@@YGIH@Z ; unpack_unsigned_data
  000ac	89 45 f4	 mov	 DWORD PTR _iz$16[ebp], eax

; 666  : 
; 667  : 			v->z = *(float *)&iz;

  000af	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  000b2	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _iz$16[ebp]
  000b7	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 668  : 
; 669  : 			break;

  000bc	e9 1a 02 00 00	 jmp	 $LN2@unpack_vec
$LN8@unpack_vec:

; 670  : 		}
; 671  : 		////////////////////////////////////////
; 672  : 		case VEC3D_PACK_TYPE_UNIT_VECTOR:
; 673  : 		////////////////////////////////////////
; 674  : 		{
; 675  : 			int
; 676  : 				ix,
; 677  : 				iy,
; 678  : 				iz;
; 679  : 
; 680  : 			ix = unpack_signed_data (12);

  000c1	6a 0c		 push	 12			; 0000000cH
  000c3	e8 00 00 00 00	 call	 ?unpack_signed_data@@YGHH@Z ; unpack_signed_data
  000c8	89 45 f0	 mov	 DWORD PTR _ix$15[ebp], eax

; 681  : 
; 682  : 			v->x = (float) ix * (1.0 / (float) 0x7ff);

  000cb	f3 0f 2a 45 f0	 cvtsi2ss xmm0, DWORD PTR _ix$15[ebp]
  000d0	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000d4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f40020040080100
  000dc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000e0	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  000e3	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 683  : 
; 684  : 			iy = unpack_signed_data (12);

  000e7	6a 0c		 push	 12			; 0000000cH
  000e9	e8 00 00 00 00	 call	 ?unpack_signed_data@@YGHH@Z ; unpack_signed_data
  000ee	89 45 ec	 mov	 DWORD PTR _iy$14[ebp], eax

; 685  : 
; 686  : 			v->y = (float) iy * (1.0 / (float) 0x7ff);

  000f1	f3 0f 2a 45 ec	 cvtsi2ss xmm0, DWORD PTR _iy$14[ebp]
  000f6	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000fa	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f40020040080100
  00102	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00106	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00109	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 687  : 
; 688  : 			iz = unpack_signed_data (12);

  0010e	6a 0c		 push	 12			; 0000000cH
  00110	e8 00 00 00 00	 call	 ?unpack_signed_data@@YGHH@Z ; unpack_signed_data
  00115	89 45 e8	 mov	 DWORD PTR _iz$13[ebp], eax

; 689  : 
; 690  : 			v->z = (float) iz * (1.0 / (float) 0x7ff);

  00118	f3 0f 2a 45 e8	 cvtsi2ss xmm0, DWORD PTR _iz$13[ebp]
  0011d	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00121	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f40020040080100
  00129	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0012d	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00130	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 691  : 
; 692  : 			normalise_3d_vector (v);

  00135	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00138	50		 push	 eax
  00139	e8 00 00 00 00	 call	 ?normalise_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_3d_vector
  0013e	dd d8		 fstp	 ST(0)

; 693  : 
; 694  : 			break;

  00140	e9 96 01 00 00	 jmp	 $LN2@unpack_vec
$LN9@unpack_vec:

; 695  : 		}
; 696  : 		////////////////////////////////////////
; 697  : 		case VEC3D_PACK_TYPE_POSITION:
; 698  : 		////////////////////////////////////////
; 699  : 		{
; 700  : 			int
; 701  : 				ix,
; 702  : 				iy,
; 703  : 				iz;
; 704  : 
; 705  : 			ix = unpack_unsigned_data (19 + 4);

  00145	6a 17		 push	 23			; 00000017H
  00147	e8 00 00 00 00	 call	 ?unpack_unsigned_data@@YGIH@Z ; unpack_unsigned_data
  0014c	89 45 e4	 mov	 DWORD PTR _ix$12[ebp], eax

; 706  : 
; 707  : 			v->x = unpack_float_4_fractional_bits (ix);

  0014f	f3 0f 2a 45 e4	 cvtsi2ss xmm0, DWORD PTR _ix$12[ebp]
  00154	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3d800000
  0015c	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0015f	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 708  : 
; 709  : 			iy = unpack_signed_data (1 + 16 + 4);

  00163	6a 15		 push	 21			; 00000015H
  00165	e8 00 00 00 00	 call	 ?unpack_signed_data@@YGHH@Z ; unpack_signed_data
  0016a	89 45 e0	 mov	 DWORD PTR _iy$11[ebp], eax

; 710  : 
; 711  : 			v->y = unpack_float_4_fractional_bits (iy);

  0016d	f3 0f 2a 45 e0	 cvtsi2ss xmm0, DWORD PTR _iy$11[ebp]
  00172	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3d800000
  0017a	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0017d	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 712  : 
; 713  : 			iz = unpack_unsigned_data (19 + 4);

  00182	6a 17		 push	 23			; 00000017H
  00184	e8 00 00 00 00	 call	 ?unpack_unsigned_data@@YGIH@Z ; unpack_unsigned_data
  00189	89 45 dc	 mov	 DWORD PTR _iz$10[ebp], eax

; 714  : 
; 715  : 			v->z = unpack_float_4_fractional_bits (iz);

  0018c	f3 0f 2a 45 dc	 cvtsi2ss xmm0, DWORD PTR _iz$10[ebp]
  00191	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3d800000
  00199	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0019c	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 716  : 
; 717  : 			break;

  001a1	e9 35 01 00 00	 jmp	 $LN2@unpack_vec
$LN10@unpack_vec:

; 718  : 		}
; 719  : 		////////////////////////////////////////
; 720  : 		case VEC3D_PACK_TYPE_RELATIVE_POSITION:
; 721  : 		////////////////////////////////////////
; 722  : 		{
; 723  : 			int
; 724  : 				ix,
; 725  : 				iy,
; 726  : 				iz;
; 727  : 
; 728  : 			ix = unpack_signed_data (1 + 15 + 2);

  001a6	6a 12		 push	 18			; 00000012H
  001a8	e8 00 00 00 00	 call	 ?unpack_signed_data@@YGHH@Z ; unpack_signed_data
  001ad	89 45 d8	 mov	 DWORD PTR _ix$9[ebp], eax

; 729  : 
; 730  : 			v->x = unpack_float_2_fractional_bits (ix);

  001b0	f3 0f 2a 45 d8	 cvtsi2ss xmm0, DWORD PTR _ix$9[ebp]
  001b5	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  001bd	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  001c0	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 731  : 
; 732  : 			iy = unpack_signed_data (1 + 13 + 2);

  001c4	6a 10		 push	 16			; 00000010H
  001c6	e8 00 00 00 00	 call	 ?unpack_signed_data@@YGHH@Z ; unpack_signed_data
  001cb	89 45 d4	 mov	 DWORD PTR _iy$8[ebp], eax

; 733  : 
; 734  : 			v->y = unpack_float_2_fractional_bits (iy);

  001ce	f3 0f 2a 45 d4	 cvtsi2ss xmm0, DWORD PTR _iy$8[ebp]
  001d3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  001db	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  001de	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 735  : 
; 736  : 			iz = unpack_signed_data (1 + 15 + 2);

  001e3	6a 12		 push	 18			; 00000012H
  001e5	e8 00 00 00 00	 call	 ?unpack_signed_data@@YGHH@Z ; unpack_signed_data
  001ea	89 45 d0	 mov	 DWORD PTR _iz$7[ebp], eax

; 737  : 
; 738  : 			v->z = unpack_float_2_fractional_bits (iz);

  001ed	f3 0f 2a 45 d0	 cvtsi2ss xmm0, DWORD PTR _iz$7[ebp]
  001f2	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  001fa	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  001fd	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 739  : 
; 740  : 			break;

  00202	e9 d4 00 00 00	 jmp	 $LN2@unpack_vec
$LN11@unpack_vec:

; 741  : 		}
; 742  : 		////////////////////////////////////////
; 743  : 		case VEC3D_PACK_TYPE_INITIAL_VELOCITY:
; 744  : 		////////////////////////////////////////
; 745  : 		{
; 746  : 			int
; 747  : 				ix,
; 748  : 				iy,
; 749  : 				iz;
; 750  : 
; 751  : 			ix = unpack_signed_data (1 + 6 + 3);

  00207	6a 0a		 push	 10			; 0000000aH
  00209	e8 00 00 00 00	 call	 ?unpack_signed_data@@YGHH@Z ; unpack_signed_data
  0020e	89 45 cc	 mov	 DWORD PTR _ix$6[ebp], eax

; 752  : 
; 753  : 			v->x = unpack_float_3_fractional_bits (ix);

  00211	f3 0f 2a 45 cc	 cvtsi2ss xmm0, DWORD PTR _ix$6[ebp]
  00216	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e000000
  0021e	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00221	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 754  : 
; 755  : 			iy = unpack_signed_data (1 + 6 + 3);

  00225	6a 0a		 push	 10			; 0000000aH
  00227	e8 00 00 00 00	 call	 ?unpack_signed_data@@YGHH@Z ; unpack_signed_data
  0022c	89 45 c8	 mov	 DWORD PTR _iy$5[ebp], eax

; 756  : 
; 757  : 			v->y = unpack_float_3_fractional_bits (iy);

  0022f	f3 0f 2a 45 c8	 cvtsi2ss xmm0, DWORD PTR _iy$5[ebp]
  00234	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e000000
  0023c	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0023f	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 758  : 
; 759  : 			iz = unpack_signed_data (1 + 6 + 3);

  00244	6a 0a		 push	 10			; 0000000aH
  00246	e8 00 00 00 00	 call	 ?unpack_signed_data@@YGHH@Z ; unpack_signed_data
  0024b	89 45 c4	 mov	 DWORD PTR _iz$4[ebp], eax

; 760  : 
; 761  : 			v->z = unpack_float_3_fractional_bits (iz);

  0024e	f3 0f 2a 45 c4	 cvtsi2ss xmm0, DWORD PTR _iz$4[ebp]
  00253	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e000000
  0025b	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0025e	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 762  : 
; 763  : 			break;

  00263	eb 76		 jmp	 SHORT $LN2@unpack_vec
$LN12@unpack_vec:

; 764  : 		}
; 765  : 		////////////////////////////////////////
; 766  : 		case VEC3D_PACK_TYPE_MOTION_VECTOR:
; 767  : 		////////////////////////////////////////
; 768  : 		{
; 769  : 			int
; 770  : 				ix,
; 771  : 				iy,
; 772  : 				iz;
; 773  : 
; 774  : 			ix = unpack_signed_data (1 + 11 + 6);

  00265	6a 12		 push	 18			; 00000012H
  00267	e8 00 00 00 00	 call	 ?unpack_signed_data@@YGHH@Z ; unpack_signed_data
  0026c	89 45 c0	 mov	 DWORD PTR _ix$3[ebp], eax

; 775  : 
; 776  : 			v->x = unpack_float_6_fractional_bits (ix);

  0026f	f3 0f 2a 45 c0	 cvtsi2ss xmm0, DWORD PTR _ix$3[ebp]
  00274	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c800000
  0027c	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0027f	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 777  : 
; 778  : 			iy = unpack_signed_data (1 + 11 + 6);

  00283	6a 12		 push	 18			; 00000012H
  00285	e8 00 00 00 00	 call	 ?unpack_signed_data@@YGHH@Z ; unpack_signed_data
  0028a	89 45 bc	 mov	 DWORD PTR _iy$2[ebp], eax

; 779  : 
; 780  : 			v->y = unpack_float_6_fractional_bits (iy);

  0028d	f3 0f 2a 45 bc	 cvtsi2ss xmm0, DWORD PTR _iy$2[ebp]
  00292	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c800000
  0029a	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0029d	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 781  : 
; 782  : 			iz = unpack_signed_data (1 + 11 + 6);

  002a2	6a 12		 push	 18			; 00000012H
  002a4	e8 00 00 00 00	 call	 ?unpack_signed_data@@YGHH@Z ; unpack_signed_data
  002a9	89 45 b8	 mov	 DWORD PTR _iz$1[ebp], eax

; 783  : 
; 784  : 			v->z = unpack_float_6_fractional_bits (iz);

  002ac	f3 0f 2a 45 b8	 cvtsi2ss xmm0, DWORD PTR _iz$1[ebp]
  002b1	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c800000
  002b9	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  002bc	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 785  : 
; 786  : 			break;

  002c1	eb 18		 jmp	 SHORT $LN2@unpack_vec
$LN13@unpack_vec:

; 787  : 		}
; 788  : 		////////////////////////////////////////
; 789  : 		default:
; 790  : 		////////////////////////////////////////
; 791  : 		{
; 792  : 			debug_fatal ("Invalid vec3d pack type = %d", vec3d_type_database[type].pack_type);

  002c3	6b 45 0c 0c	 imul	 eax, DWORD PTR _type$[ebp], 12
  002c7	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR ?vec3d_type_database@@3PAUVEC3D_TYPE_DATA@@A[eax+4]
  002cd	51		 push	 ecx
  002ce	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@GEKGHNNI@Invalid?5vec3d?5pack?5type?5?$DN?5?$CFd@
  002d3	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  002d8	83 c4 08	 add	 esp, 8
$LN2@unpack_vec:

; 793  : 
; 794  : 			break;
; 795  : 		}
; 796  : 	}
; 797  : 
; 798  : 	#if (DEBUG_MODULE_PACK_ONE || DEBUG_MODULE_PACK_ALL)
; 799  : 
; 800  : 	if (vec3d_type_database[type].debug_pack)
; 801  : 	{
; 802  : 		debug_log_entity_args (ENTITY_DEBUG_UNPACK, ENTITY_DEBUG_VEC3D, en, type, v);
; 803  : 	}
; 804  : 
; 805  : 	#endif
; 806  : }

  002db	5f		 pop	 edi
  002dc	5e		 pop	 esi
  002dd	5b		 pop	 ebx
  002de	8b e5		 mov	 esp, ebp
  002e0	5d		 pop	 ebp
  002e1	c2 0c 00	 ret	 12			; 0000000cH
$LN15@unpack_vec:
  002e4	00 00 00 00	 DD	 $LN7@unpack_vec
  002e8	00 00 00 00	 DD	 $LN8@unpack_vec
  002ec	00 00 00 00	 DD	 $LN9@unpack_vec
  002f0	00 00 00 00	 DD	 $LN10@unpack_vec
  002f4	00 00 00 00	 DD	 $LN11@unpack_vec
  002f8	00 00 00 00	 DD	 $LN12@unpack_vec
?unpack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ENDP ; unpack_vec3d
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_vec3d.c
;	COMDAT ?pack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z
_TEXT	SEGMENT
tv78 = -144						; size = 4
_iz$1 = -76						; size = 4
_iy$2 = -72						; size = 4
_ix$3 = -68						; size = 4
_iz$4 = -64						; size = 4
_iy$5 = -60						; size = 4
_ix$6 = -56						; size = 4
_iz$7 = -52						; size = 4
_iy$8 = -48						; size = 4
_ix$9 = -44						; size = 4
_z_sec2$10 = -40					; size = 4
_x_sec2$11 = -36					; size = 4
_z_sec1$12 = -32					; size = 4
_x_sec1$13 = -28					; size = 4
_iz$14 = -24						; size = 4
_iy$15 = -20						; size = 4
_ix$16 = -16						; size = 4
_iz$17 = -12						; size = 4
_iy$18 = -8						; size = 4
_ix$19 = -4						; size = 4
_en$ = 8						; size = 4
_type$ = 12						; size = 4
_v$ = 16						; size = 4
?pack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z PROC ; pack_vec3d, COMDAT

; 355  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 356  : 	ASSERT ((type >= 0) && (type < NUM_VEC3D_TYPES));

  0000c	83 7d 0c 00	 cmp	 DWORD PTR _type$[ebp], 0
  00010	7c 06		 jl	 SHORT $LN5@pack_vec3d
  00012	83 7d 0c 18	 cmp	 DWORD PTR _type$[ebp], 24 ; 00000018H
  00016	7c 18		 jl	 SHORT $LN4@pack_vec3d
$LN5@pack_vec3d:
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z@4JA
  0001d	83 c0 01	 add	 eax, 1
  00020	50		 push	 eax
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@DONIONCC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@FLFGIKOB@?$CItype?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CItype?5?$DM?5NUM_VEC3@
  0002b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@pack_vec3d:

; 357  : 
; 358  : 	ASSERT (v);

  00030	83 7d 10 00	 cmp	 DWORD PTR _v$[ebp], 0
  00034	75 18		 jne	 SHORT $LN6@pack_vec3d
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z@4JA
  0003b	83 c0 03	 add	 eax, 3
  0003e	50		 push	 eax
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@DONIONCC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_01MHEDDDHA@v@
  00049	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@pack_vec3d:

; 359  : 
; 360  : 	switch (vec3d_type_database[type].pack_type)

  0004e	6b 45 0c 0c	 imul	 eax, DWORD PTR _type$[ebp], 12
  00052	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR ?vec3d_type_database@@3PAUVEC3D_TYPE_DATA@@A[eax+4]
  00058	89 8d 70 ff ff
	ff		 mov	 DWORD PTR tv78[ebp], ecx
  0005e	83 bd 70 ff ff
	ff 05		 cmp	 DWORD PTR tv78[ebp], 5
  00065	0f 87 30 04 00
	00		 ja	 $LN17@pack_vec3d
  0006b	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR tv78[ebp]
  00071	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN19@pack_vec3d[edx*4]
$LN7@pack_vec3d:

; 361  : 	{
; 362  : 		////////////////////////////////////////
; 363  : 		case VEC3D_PACK_TYPE_UNPACKED:
; 364  : 		////////////////////////////////////////
; 365  : 		{
; 366  : 			pack_unsigned_data (*(int *)&v->x, 32);

  00078	6a 20		 push	 32			; 00000020H
  0007a	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0007d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007f	51		 push	 ecx
  00080	e8 00 00 00 00	 call	 ?pack_unsigned_data@@YGXIH@Z ; pack_unsigned_data

; 367  : 
; 368  : 			pack_unsigned_data (*(int *)&v->y, 32);

  00085	6a 20		 push	 32			; 00000020H
  00087	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0008a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0008d	51		 push	 ecx
  0008e	e8 00 00 00 00	 call	 ?pack_unsigned_data@@YGXIH@Z ; pack_unsigned_data

; 369  : 
; 370  : 			pack_unsigned_data (*(int *)&v->z, 32);

  00093	6a 20		 push	 32			; 00000020H
  00095	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00098	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0009b	51		 push	 ecx
  0009c	e8 00 00 00 00	 call	 ?pack_unsigned_data@@YGXIH@Z ; pack_unsigned_data

; 371  : 
; 372  : 			#if (DEBUG_MODULE_PACK_ONE || DEBUG_MODULE_PACK_ALL)
; 373  : 
; 374  : 			if (vec3d_type_database[type].debug_pack)
; 375  : 			{
; 376  : 				debug_log_entity_args (ENTITY_DEBUG_PACK, ENTITY_DEBUG_VEC3D, en, type, v);
; 377  : 			}
; 378  : 
; 379  : 			#endif
; 380  : 
; 381  : 			break;

  000a1	e9 0d 04 00 00	 jmp	 $LN2@pack_vec3d
$LN8@pack_vec3d:

; 382  : 		}
; 383  : 		////////////////////////////////////////
; 384  : 		case VEC3D_PACK_TYPE_UNIT_VECTOR:
; 385  : 		////////////////////////////////////////
; 386  : 		{
; 387  : 			int
; 388  : 				ix,
; 389  : 				iy,
; 390  : 				iz;
; 391  : 
; 392  : 			convert_float_to_int (v->x * (float) 0x7ff, &ix);

  000a6	8d 45 fc	 lea	 eax, DWORD PTR _ix$19[ebp]
  000a9	50		 push	 eax
  000aa	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  000ad	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  000b1	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@44ffe000
  000b9	51		 push	 ecx
  000ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bf	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 393  : 
; 394  : 			pack_signed_data (ix, 12);

  000c4	6a 0c		 push	 12			; 0000000cH
  000c6	8b 45 fc	 mov	 eax, DWORD PTR _ix$19[ebp]
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ?pack_signed_data@@YGXHH@Z ; pack_signed_data

; 395  : 
; 396  : 			convert_float_to_int (v->y * (float) 0x7ff, &iy);

  000cf	8d 45 f8	 lea	 eax, DWORD PTR _iy$18[ebp]
  000d2	50		 push	 eax
  000d3	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  000d6	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  000db	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@44ffe000
  000e3	51		 push	 ecx
  000e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e9	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 397  : 
; 398  : 			pack_signed_data (iy, 12);

  000ee	6a 0c		 push	 12			; 0000000cH
  000f0	8b 45 f8	 mov	 eax, DWORD PTR _iy$18[ebp]
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 ?pack_signed_data@@YGXHH@Z ; pack_signed_data

; 399  : 
; 400  : 			convert_float_to_int (v->z * (float) 0x7ff, &iz);

  000f9	8d 45 f4	 lea	 eax, DWORD PTR _iz$17[ebp]
  000fc	50		 push	 eax
  000fd	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00100	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00105	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@44ffe000
  0010d	51		 push	 ecx
  0010e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00113	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 401  : 
; 402  : 			pack_signed_data (iz, 12);

  00118	6a 0c		 push	 12			; 0000000cH
  0011a	8b 45 f4	 mov	 eax, DWORD PTR _iz$17[ebp]
  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 ?pack_signed_data@@YGXHH@Z ; pack_signed_data

; 403  : 
; 404  : 			#if (DEBUG_MODULE_PACK_ONE || DEBUG_MODULE_PACK_ALL)
; 405  : 
; 406  : 			if (vec3d_type_database[type].debug_pack)
; 407  : 			{
; 408  : 				vec3d
; 409  : 					v;
; 410  : 
; 411  : 				//
; 412  : 				// packed debug message to match unpacked debug message
; 413  : 				//
; 414  : 
; 415  : 				v.x = (float) ix * (1.0 / (float) 0x7ff);
; 416  : 				v.y = (float) iy * (1.0 / (float) 0x7ff);
; 417  : 				v.z = (float) iz * (1.0 / (float) 0x7ff);
; 418  : 
; 419  : 				normalise_3d_vector (&v);
; 420  : 
; 421  : 				debug_log_entity_args (ENTITY_DEBUG_PACK, ENTITY_DEBUG_VEC3D, en, type, &v);
; 422  : 			}
; 423  : 
; 424  : 			#endif
; 425  : 
; 426  : 			break;

  00123	e9 8b 03 00 00	 jmp	 $LN2@pack_vec3d
$LN9@pack_vec3d:

; 427  : 		}
; 428  : 		////////////////////////////////////////
; 429  : 		case VEC3D_PACK_TYPE_POSITION:
; 430  : 		////////////////////////////////////////
; 431  : 		{
; 432  : 			int
; 433  : 				ix,
; 434  : 				iy,
; 435  : 				iz;
; 436  : 
; 437  : 			ASSERT (point_inside_map_volume (v) || v->y == -10000);

  00128	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0012b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0012f	0f 2f 05 24 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+36
  00136	72 54		 jb	 SHORT $LN11@pack_vec3d
  00138	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0013b	f3 0f 10 05 3c
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+60
  00143	0f 2f 00	 comiss	 xmm0, DWORD PTR [eax]
  00146	72 44		 jb	 SHORT $LN11@pack_vec3d
  00148	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0014b	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00150	0f 2f 05 28 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+40
  00157	72 33		 jb	 SHORT $LN11@pack_vec3d
  00159	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0015c	f3 0f 10 05 40
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+64
  00164	0f 2f 40 04	 comiss	 xmm0, DWORD PTR [eax+4]
  00168	72 22		 jb	 SHORT $LN11@pack_vec3d
  0016a	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0016d	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00172	0f 2f 05 2c 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+44
  00179	72 11		 jb	 SHORT $LN11@pack_vec3d
  0017b	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0017e	f3 0f 10 05 44
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+68
  00186	0f 2f 40 08	 comiss	 xmm0, DWORD PTR [eax+8]
  0018a	73 2d		 jae	 SHORT $LN10@pack_vec3d
$LN11@pack_vec3d:
  0018c	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0018f	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00194	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@c61c4000
  0019b	9f		 lahf
  0019c	f6 c4 44	 test	 ah, 68			; 00000044H
  0019f	7b 18		 jnp	 SHORT $LN10@pack_vec3d
  001a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z@4JA
  001a6	83 c0 52	 add	 eax, 82			; 00000052H
  001a9	50		 push	 eax
  001aa	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@DONIONCC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001af	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@NGAENGKE@point_inside_map_volume?5?$CIv?$CJ?5?$HM?$HM?5@
  001b4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@pack_vec3d:

; 438  : 
; 439  : 			pack_float_4_fractional_bits (v->x, &ix);

  001b9	8d 45 f0	 lea	 eax, DWORD PTR _ix$16[ebp]
  001bc	50		 push	 eax
  001bd	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  001c0	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  001c4	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41800000
  001cc	51		 push	 ecx
  001cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d2	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 440  : 
; 441  : 			pack_unsigned_data (ix, 19 + 4);

  001d7	6a 17		 push	 23			; 00000017H
  001d9	8b 45 f0	 mov	 eax, DWORD PTR _ix$16[ebp]
  001dc	50		 push	 eax
  001dd	e8 00 00 00 00	 call	 ?pack_unsigned_data@@YGXIH@Z ; pack_unsigned_data

; 442  : 
; 443  : 			pack_float_4_fractional_bits (v->y, &iy);

  001e2	8d 45 ec	 lea	 eax, DWORD PTR _iy$15[ebp]
  001e5	50		 push	 eax
  001e6	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  001e9	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  001ee	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41800000
  001f6	51		 push	 ecx
  001f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fc	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 444  : 
; 445  : 			pack_signed_data (iy, 1 + 16 + 4);

  00201	6a 15		 push	 21			; 00000015H
  00203	8b 45 ec	 mov	 eax, DWORD PTR _iy$15[ebp]
  00206	50		 push	 eax
  00207	e8 00 00 00 00	 call	 ?pack_signed_data@@YGXHH@Z ; pack_signed_data

; 446  : 
; 447  : 			pack_float_4_fractional_bits (v->z, &iz);

  0020c	8d 45 e8	 lea	 eax, DWORD PTR _iz$14[ebp]
  0020f	50		 push	 eax
  00210	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00213	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00218	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41800000
  00220	51		 push	 ecx
  00221	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00226	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 448  : 
; 449  : 			pack_unsigned_data (iz, 19 + 4);

  0022b	6a 17		 push	 23			; 00000017H
  0022d	8b 45 e8	 mov	 eax, DWORD PTR _iz$14[ebp]
  00230	50		 push	 eax
  00231	e8 00 00 00 00	 call	 ?pack_unsigned_data@@YGXIH@Z ; pack_unsigned_data

; 450  : 
; 451  : 			#if (DEBUG_MODULE_PACK_ONE || DEBUG_MODULE_PACK_ALL)
; 452  : 
; 453  : 			if (vec3d_type_database[type].debug_pack)
; 454  : 			{
; 455  : 				vec3d
; 456  : 					v;
; 457  : 
; 458  : 				//
; 459  : 				// packed debug message to match unpacked debug message
; 460  : 				//
; 461  : 
; 462  : 		 		v.x = unpack_float_4_fractional_bits (ix);
; 463  : 				v.y = unpack_float_4_fractional_bits (iy);
; 464  : 				v.z = unpack_float_4_fractional_bits (iz);
; 465  : 
; 466  : 				debug_log_entity_args (ENTITY_DEBUG_PACK, ENTITY_DEBUG_VEC3D, en, type, &v);
; 467  : 			}
; 468  : 
; 469  : 			#endif
; 470  : 
; 471  : 			//
; 472  : 			// check packed position remains in the same sector
; 473  : 			//
; 474  : 
; 475  : 			#ifdef DEBUG
; 476  : 			{
; 477  : 				int
; 478  : 					x_sec1,
; 479  : 					z_sec1,
; 480  : 					x_sec2,
; 481  : 					z_sec2;
; 482  : 
; 483  : 				get_x_sector (x_sec1, v->x);

  00236	8d 45 e4	 lea	 eax, DWORD PTR _x_sec1$13[ebp]
  00239	50		 push	 eax
  0023a	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  0023d	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00241	51		 push	 ecx
  00242	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00247	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  0024c	8b 45 e4	 mov	 eax, DWORD PTR _x_sec1$13[ebp]
  0024f	99		 cdq
  00250	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  00256	89 45 e4	 mov	 DWORD PTR _x_sec1$13[ebp], eax

; 484  : 				get_z_sector (z_sec1, v->z);

  00259	8d 45 e0	 lea	 eax, DWORD PTR _z_sec1$12[ebp]
  0025c	50		 push	 eax
  0025d	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00260	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00265	51		 push	 ecx
  00266	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026b	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00270	8b 45 e0	 mov	 eax, DWORD PTR _z_sec1$12[ebp]
  00273	99		 cdq
  00274	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  0027a	89 45 e0	 mov	 DWORD PTR _z_sec1$12[ebp], eax

; 485  : 
; 486  : 				get_x_sector (x_sec2, unpack_float_4_fractional_bits (ix));

  0027d	8d 45 dc	 lea	 eax, DWORD PTR _x_sec2$11[ebp]
  00280	50		 push	 eax
  00281	f3 0f 2a 45 f0	 cvtsi2ss xmm0, DWORD PTR _ix$16[ebp]
  00286	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3d800000
  0028e	51		 push	 ecx
  0028f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00294	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00299	8b 45 dc	 mov	 eax, DWORD PTR _x_sec2$11[ebp]
  0029c	99		 cdq
  0029d	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  002a3	89 45 dc	 mov	 DWORD PTR _x_sec2$11[ebp], eax

; 487  : 				get_z_sector (z_sec2, unpack_float_4_fractional_bits (iz));

  002a6	8d 45 d8	 lea	 eax, DWORD PTR _z_sec2$10[ebp]
  002a9	50		 push	 eax
  002aa	f3 0f 2a 45 e8	 cvtsi2ss xmm0, DWORD PTR _iz$14[ebp]
  002af	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3d800000
  002b7	51		 push	 ecx
  002b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002bd	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  002c2	8b 45 d8	 mov	 eax, DWORD PTR _z_sec2$10[ebp]
  002c5	99		 cdq
  002c6	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  002cc	89 45 d8	 mov	 DWORD PTR _z_sec2$10[ebp], eax

; 488  : 
; 489  : 				ASSERT (x_sec1 == x_sec2);

  002cf	8b 45 e4	 mov	 eax, DWORD PTR _x_sec1$13[ebp]
  002d2	3b 45 dc	 cmp	 eax, DWORD PTR _x_sec2$11[ebp]
  002d5	74 1a		 je	 SHORT $LN12@pack_vec3d
  002d7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z@4JA
  002dc	05 86 00 00 00	 add	 eax, 134		; 00000086H
  002e1	50		 push	 eax
  002e2	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@DONIONCC@c?3?2users?2nhv90?2projects?2eech?2ap@
  002e7	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@NLEAOGFP@x_sec1?5?$DN?$DN?5x_sec2@
  002ec	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN12@pack_vec3d:

; 490  : 				ASSERT (z_sec1 == z_sec2);

  002f1	8b 45 e0	 mov	 eax, DWORD PTR _z_sec1$12[ebp]
  002f4	3b 45 d8	 cmp	 eax, DWORD PTR _z_sec2$10[ebp]
  002f7	74 1a		 je	 SHORT $LN13@pack_vec3d
  002f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z@4JA
  002fe	05 87 00 00 00	 add	 eax, 135		; 00000087H
  00303	50		 push	 eax
  00304	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@DONIONCC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00309	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JIODGHLB@z_sec1?5?$DN?$DN?5z_sec2@
  0030e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN13@pack_vec3d:

; 491  : 			}
; 492  : 			#endif
; 493  : 
; 494  : 			break;

  00313	e9 9b 01 00 00	 jmp	 $LN2@pack_vec3d
$LN14@pack_vec3d:

; 495  : 		}
; 496  : 		////////////////////////////////////////
; 497  : 		case VEC3D_PACK_TYPE_RELATIVE_POSITION:
; 498  : 		////////////////////////////////////////
; 499  : 		{
; 500  : 			int
; 501  : 				ix,
; 502  : 				iy,
; 503  : 				iz;
; 504  : 
; 505  : 			pack_float_2_fractional_bits (v->x, &ix);

  00318	8d 45 d4	 lea	 eax, DWORD PTR _ix$9[ebp]
  0031b	50		 push	 eax
  0031c	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  0031f	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00323	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40800000
  0032b	51		 push	 ecx
  0032c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00331	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 506  : 
; 507  : 			pack_signed_data (ix, 1 + 15 + 2);

  00336	6a 12		 push	 18			; 00000012H
  00338	8b 45 d4	 mov	 eax, DWORD PTR _ix$9[ebp]
  0033b	50		 push	 eax
  0033c	e8 00 00 00 00	 call	 ?pack_signed_data@@YGXHH@Z ; pack_signed_data

; 508  : 
; 509  : 			pack_float_2_fractional_bits (v->y, &iy);

  00341	8d 45 d0	 lea	 eax, DWORD PTR _iy$8[ebp]
  00344	50		 push	 eax
  00345	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00348	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0034d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40800000
  00355	51		 push	 ecx
  00356	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035b	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 510  : 
; 511  : 			pack_signed_data (iy, 1 + 13 + 2);

  00360	6a 10		 push	 16			; 00000010H
  00362	8b 45 d0	 mov	 eax, DWORD PTR _iy$8[ebp]
  00365	50		 push	 eax
  00366	e8 00 00 00 00	 call	 ?pack_signed_data@@YGXHH@Z ; pack_signed_data

; 512  : 
; 513  : 			pack_float_2_fractional_bits (v->z, &iz);

  0036b	8d 45 cc	 lea	 eax, DWORD PTR _iz$7[ebp]
  0036e	50		 push	 eax
  0036f	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00372	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00377	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40800000
  0037f	51		 push	 ecx
  00380	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00385	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 514  : 
; 515  : 			pack_signed_data (iz, 1 + 15 + 2);

  0038a	6a 12		 push	 18			; 00000012H
  0038c	8b 45 cc	 mov	 eax, DWORD PTR _iz$7[ebp]
  0038f	50		 push	 eax
  00390	e8 00 00 00 00	 call	 ?pack_signed_data@@YGXHH@Z ; pack_signed_data

; 516  : 
; 517  : 			#if (DEBUG_MODULE_PACK_ONE || DEBUG_MODULE_PACK_ALL)
; 518  : 
; 519  : 			if (vec3d_type_database[type].debug_pack)
; 520  : 			{
; 521  : 				vec3d
; 522  : 					v;
; 523  : 
; 524  : 				//
; 525  : 				// packed debug message to match unpacked debug message
; 526  : 				//
; 527  : 
; 528  : 		 		v.x = unpack_float_2_fractional_bits (ix);
; 529  : 				v.y = unpack_float_2_fractional_bits (iy);
; 530  : 				v.z = unpack_float_2_fractional_bits (iz);
; 531  : 
; 532  : 				debug_log_entity_args (ENTITY_DEBUG_PACK, ENTITY_DEBUG_VEC3D, en, type, &v);
; 533  : 			}
; 534  : 
; 535  : 			#endif
; 536  : 
; 537  : 			break;

  00395	e9 19 01 00 00	 jmp	 $LN2@pack_vec3d
$LN15@pack_vec3d:

; 538  : 		}
; 539  : 		////////////////////////////////////////
; 540  : 		case VEC3D_PACK_TYPE_INITIAL_VELOCITY:
; 541  : 		////////////////////////////////////////
; 542  : 		{
; 543  : 			int
; 544  : 				ix,
; 545  : 				iy,
; 546  : 				iz;
; 547  : 
; 548  : 			pack_float_3_fractional_bits (v->x, &ix);

  0039a	8d 45 c8	 lea	 eax, DWORD PTR _ix$6[ebp]
  0039d	50		 push	 eax
  0039e	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  003a1	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  003a5	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41000000
  003ad	51		 push	 ecx
  003ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b3	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 549  : 
; 550  : 			pack_signed_data (ix, 1 + 6 + 3);

  003b8	6a 0a		 push	 10			; 0000000aH
  003ba	8b 45 c8	 mov	 eax, DWORD PTR _ix$6[ebp]
  003bd	50		 push	 eax
  003be	e8 00 00 00 00	 call	 ?pack_signed_data@@YGXHH@Z ; pack_signed_data

; 551  : 
; 552  : 			pack_float_3_fractional_bits (v->y, &iy);

  003c3	8d 45 c4	 lea	 eax, DWORD PTR _iy$5[ebp]
  003c6	50		 push	 eax
  003c7	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  003ca	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  003cf	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41000000
  003d7	51		 push	 ecx
  003d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003dd	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 553  : 
; 554  : 			pack_signed_data (iy, 1 + 6 + 3);

  003e2	6a 0a		 push	 10			; 0000000aH
  003e4	8b 45 c4	 mov	 eax, DWORD PTR _iy$5[ebp]
  003e7	50		 push	 eax
  003e8	e8 00 00 00 00	 call	 ?pack_signed_data@@YGXHH@Z ; pack_signed_data

; 555  : 
; 556  : 			pack_float_3_fractional_bits (v->z, &iz);

  003ed	8d 45 c0	 lea	 eax, DWORD PTR _iz$4[ebp]
  003f0	50		 push	 eax
  003f1	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  003f4	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  003f9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41000000
  00401	51		 push	 ecx
  00402	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00407	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 557  : 
; 558  : 			pack_signed_data (iz, 1 + 6 + 3);

  0040c	6a 0a		 push	 10			; 0000000aH
  0040e	8b 45 c0	 mov	 eax, DWORD PTR _iz$4[ebp]
  00411	50		 push	 eax
  00412	e8 00 00 00 00	 call	 ?pack_signed_data@@YGXHH@Z ; pack_signed_data

; 559  : 
; 560  : 			#if (DEBUG_MODULE_PACK_ONE || DEBUG_MODULE_PACK_ALL)
; 561  : 
; 562  : 			if (vec3d_type_database[type].debug_pack)
; 563  : 			{
; 564  : 				vec3d
; 565  : 					v;
; 566  : 
; 567  : 				//
; 568  : 				// packed debug message to match unpacked debug message
; 569  : 				//
; 570  : 
; 571  : 		 		v.x = unpack_float_3_fractional_bits (ix);
; 572  : 				v.y = unpack_float_3_fractional_bits (iy);
; 573  : 				v.z = unpack_float_3_fractional_bits (iz);
; 574  : 
; 575  : 				debug_log_entity_args (ENTITY_DEBUG_PACK, ENTITY_DEBUG_VEC3D, en, type, &v);
; 576  : 			}
; 577  : 
; 578  : 			#endif
; 579  : 
; 580  : 			break;

  00417	e9 97 00 00 00	 jmp	 $LN2@pack_vec3d
$LN16@pack_vec3d:

; 581  : 		}
; 582  : 		////////////////////////////////////////
; 583  : 		case VEC3D_PACK_TYPE_MOTION_VECTOR:
; 584  : 		////////////////////////////////////////
; 585  : 		{
; 586  : 			int
; 587  : 				ix,
; 588  : 				iy,
; 589  : 				iz;
; 590  : 
; 591  : 			pack_float_6_fractional_bits (v->x, &ix);

  0041c	8d 45 bc	 lea	 eax, DWORD PTR _ix$3[ebp]
  0041f	50		 push	 eax
  00420	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00423	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00427	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42800000
  0042f	51		 push	 ecx
  00430	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00435	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 592  : 
; 593  : 			pack_signed_data (ix, 1 + 11 + 6);

  0043a	6a 12		 push	 18			; 00000012H
  0043c	8b 45 bc	 mov	 eax, DWORD PTR _ix$3[ebp]
  0043f	50		 push	 eax
  00440	e8 00 00 00 00	 call	 ?pack_signed_data@@YGXHH@Z ; pack_signed_data

; 594  : 
; 595  : 			pack_float_6_fractional_bits (v->y, &iy);

  00445	8d 45 b8	 lea	 eax, DWORD PTR _iy$2[ebp]
  00448	50		 push	 eax
  00449	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  0044c	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00451	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42800000
  00459	51		 push	 ecx
  0045a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0045f	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 596  : 
; 597  : 			pack_signed_data (iy, 1 + 11 + 6);

  00464	6a 12		 push	 18			; 00000012H
  00466	8b 45 b8	 mov	 eax, DWORD PTR _iy$2[ebp]
  00469	50		 push	 eax
  0046a	e8 00 00 00 00	 call	 ?pack_signed_data@@YGXHH@Z ; pack_signed_data

; 598  : 
; 599  : 			pack_float_6_fractional_bits (v->z, &iz);

  0046f	8d 45 b4	 lea	 eax, DWORD PTR _iz$1[ebp]
  00472	50		 push	 eax
  00473	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00476	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0047b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42800000
  00483	51		 push	 ecx
  00484	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00489	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 600  : 
; 601  : 			pack_signed_data (iz, 1 + 11 + 6);

  0048e	6a 12		 push	 18			; 00000012H
  00490	8b 45 b4	 mov	 eax, DWORD PTR _iz$1[ebp]
  00493	50		 push	 eax
  00494	e8 00 00 00 00	 call	 ?pack_signed_data@@YGXHH@Z ; pack_signed_data

; 602  : 
; 603  : 			#if (DEBUG_MODULE_PACK_ONE || DEBUG_MODULE_PACK_ALL)
; 604  : 
; 605  : 			if (vec3d_type_database[type].debug_pack)
; 606  : 			{
; 607  : 				vec3d
; 608  : 					v;
; 609  : 
; 610  : 				//
; 611  : 				// packed debug message to match unpacked debug message
; 612  : 				//
; 613  : 
; 614  : 		 		v.x = unpack_float_6_fractional_bits (ix);
; 615  : 				v.y = unpack_float_6_fractional_bits (iy);
; 616  : 				v.z = unpack_float_6_fractional_bits (iz);
; 617  : 
; 618  : 				debug_log_entity_args (ENTITY_DEBUG_PACK, ENTITY_DEBUG_VEC3D, en, type, &v);
; 619  : 			}
; 620  : 
; 621  : 			#endif
; 622  : 
; 623  : 			break;

  00499	eb 18		 jmp	 SHORT $LN2@pack_vec3d
$LN17@pack_vec3d:

; 624  : 		}
; 625  : 		////////////////////////////////////////
; 626  : 		default:
; 627  : 		////////////////////////////////////////
; 628  : 		{
; 629  : 			debug_fatal ("Invalid vec3d pack type = %d", vec3d_type_database[type].pack_type);

  0049b	6b 45 0c 0c	 imul	 eax, DWORD PTR _type$[ebp], 12
  0049f	8b 88 04 00 00
	00		 mov	 ecx, DWORD PTR ?vec3d_type_database@@3PAUVEC3D_TYPE_DATA@@A[eax+4]
  004a5	51		 push	 ecx
  004a6	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@GEKGHNNI@Invalid?5vec3d?5pack?5type?5?$DN?5?$CFd@
  004ab	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  004b0	83 c4 08	 add	 esp, 8
$LN2@pack_vec3d:

; 630  : 
; 631  : 			break;
; 632  : 		}
; 633  : 	}
; 634  : }

  004b3	5f		 pop	 edi
  004b4	5e		 pop	 esi
  004b5	5b		 pop	 ebx
  004b6	8b e5		 mov	 esp, ebp
  004b8	5d		 pop	 ebp
  004b9	c2 0c 00	 ret	 12			; 0000000cH
$LN19@pack_vec3d:
  004bc	00 00 00 00	 DD	 $LN7@pack_vec3d
  004c0	00 00 00 00	 DD	 $LN8@pack_vec3d
  004c4	00 00 00 00	 DD	 $LN9@pack_vec3d
  004c8	00 00 00 00	 DD	 $LN14@pack_vec3d
  004cc	00 00 00 00	 DD	 $LN15@pack_vec3d
  004d0	00 00 00 00	 DD	 $LN16@pack_vec3d
?pack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ENDP ; pack_vec3d
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_funcs\en_vec3d.c
;	COMDAT ?initialise_entity_vec3d_default_functions@@YGXXZ
_TEXT	SEGMENT
_j$ = -8						; size = 4
_i$ = -4						; size = 4
?initialise_entity_vec3d_default_functions@@YGXXZ PROC	; initialise_entity_vec3d_default_functions, COMDAT

; 326  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 327  : 	int
; 328  : 		i,
; 329  : 		j;
; 330  : 
; 331  : 	for (i = 0; i < NUM_ENTITY_TYPES; i++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@initialise:
  0001b	83 7d fc 26	 cmp	 DWORD PTR _i$[ebp], 38	; 00000026H
  0001f	0f 8d ae 00 00
	00		 jge	 $LN1@initialise

; 332  : 	{
; 333  : 		for (j = 0; j < NUM_VEC3D_TYPES; j++)

  00025	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0002c	eb 09		 jmp	 SHORT $LN7@initialise
$LN5@initialise:
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  00031	83 c0 01	 add	 eax, 1
  00034	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax
$LN7@initialise:
  00037	83 7d f8 18	 cmp	 DWORD PTR _j$[ebp], 24	; 00000018H
  0003b	0f 8d 8d 00 00
	00		 jge	 $LN6@initialise

; 334  : 		{
; 335  : 			fn_set_local_entity_raw_vec3d[i][j]									= default_set_entity_vec3d;

  00041	6b 45 fc 60	 imul	 eax, DWORD PTR _i$[ebp], 96
  00045	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00048	c7 84 88 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?fn_set_local_entity_raw_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4], OFFSET ?default_set_entity_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; default_set_entity_vec3d

; 336  : 
; 337  : 			fn_set_local_entity_vec3d[i][j]										= default_set_entity_vec3d;

  00053	6b 45 fc 60	 imul	 eax, DWORD PTR _i$[ebp], 96
  00057	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0005a	c7 84 88 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?fn_set_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4], OFFSET ?default_set_entity_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; default_set_entity_vec3d

; 338  : 
; 339  : 			fn_set_client_server_entity_vec3d[i][j][COMMS_MODEL_SERVER]	= default_set_entity_vec3d;

  00065	69 45 fc c0 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 192
  0006c	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0006f	8d 94 c8 00 00
	00 00		 lea	 edx, DWORD PTR ?fn_set_client_server_entity_vec3d@@3PAY1BI@1P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*8]
  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	6b c8 00	 imul	 ecx, eax, 0
  0007e	c7 04 0a 00 00
	00 00		 mov	 DWORD PTR [edx+ecx], OFFSET ?default_set_entity_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; default_set_entity_vec3d

; 340  : 
; 341  : 			fn_set_client_server_entity_vec3d[i][j][COMMS_MODEL_CLIENT]	= default_set_entity_vec3d;

  00085	69 45 fc c0 00
	00 00		 imul	 eax, DWORD PTR _i$[ebp], 192
  0008c	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0008f	8d 94 c8 00 00
	00 00		 lea	 edx, DWORD PTR ?fn_set_client_server_entity_vec3d@@3PAY1BI@1P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*8]
  00096	b8 04 00 00 00	 mov	 eax, 4
  0009b	c1 e0 00	 shl	 eax, 0
  0009e	c7 04 02 00 00
	00 00		 mov	 DWORD PTR [edx+eax], OFFSET ?default_set_entity_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; default_set_entity_vec3d

; 342  : 
; 343  : 			fn_get_local_entity_vec3d[i][j]										= default_get_entity_vec3d;

  000a5	6b 45 fc 60	 imul	 eax, DWORD PTR _i$[ebp], 96
  000a9	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  000ac	c7 84 88 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4], OFFSET ?default_get_entity_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; default_get_entity_vec3d

; 344  : 
; 345  : 			fn_get_local_entity_vec3d_ptr[i][j]									= default_get_entity_vec3d_ptr;

  000b7	6b 45 fc 60	 imul	 eax, DWORD PTR _i$[ebp], 96
  000bb	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  000be	c7 84 88 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[eax+ecx*4], OFFSET ?default_get_entity_vec3d_ptr@@YGPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@Z ; default_get_entity_vec3d_ptr

; 346  : 		}

  000c9	e9 60 ff ff ff	 jmp	 $LN5@initialise
$LN6@initialise:

; 347  : 	}

  000ce	e9 3f ff ff ff	 jmp	 $LN2@initialise
$LN1@initialise:

; 348  : }

  000d3	5f		 pop	 edi
  000d4	5e		 pop	 esi
  000d5	5b		 pop	 ebx
  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c3		 ret	 0
?initialise_entity_vec3d_default_functions@@YGXXZ ENDP	; initialise_entity_vec3d_default_functions
_TEXT	ENDS
END
