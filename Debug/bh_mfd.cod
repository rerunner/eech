; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	_atan2f
PUBLIC	?atan2@@YGMMM@Z					; atan2
PUBLIC	?initialise_blackhawk_mfd@@YGXXZ		; initialise_blackhawk_mfd
PUBLIC	?deinitialise_blackhawk_mfd@@YGXXZ		; deinitialise_blackhawk_mfd
PUBLIC	?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode
PUBLIC	?draw_blackhawk_mfd_on_cockpit@@YGXMMHHW4MFD_LOCATIONS@@@Z ; draw_blackhawk_mfd_on_cockpit
PUBLIC	?draw_blackhawk_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z ; draw_blackhawk_mfd_on_texture
PUBLIC	?draw_overlaid_blackhawk_mfd@@YGXMMMW4MFD_LOCATIONS@@@Z ; draw_overlaid_blackhawk_mfd
PUBLIC	?select_next_blackhawk_tsd_ase_range@@YGXXZ	; select_next_blackhawk_tsd_ase_range
PUBLIC	?select_previous_blackhawk_tsd_ase_range@@YGXXZ	; select_previous_blackhawk_tsd_ase_range
PUBLIC	?select_next_blackhawk_tsd_declutter_level@@YGXXZ ; select_next_blackhawk_tsd_declutter_level
PUBLIC	?select_previous_blackhawk_tsd_declutter_level@@YGXXZ ; select_previous_blackhawk_tsd_declutter_level
PUBLIC	?select_next_blackhawk_lhs_mfd@@YGXXZ		; select_next_blackhawk_lhs_mfd
PUBLIC	?select_previous_blackhawk_lhs_mfd@@YGXXZ	; select_previous_blackhawk_lhs_mfd
PUBLIC	?select_next_blackhawk_rhs_mfd@@YGXXZ		; select_next_blackhawk_rhs_mfd
PUBLIC	?select_previous_blackhawk_rhs_mfd@@YGXXZ	; select_previous_blackhawk_rhs_mfd
PUBLIC	?select_blackhawk_ground_radar_mfd@@YGXXZ	; select_blackhawk_ground_radar_mfd
PUBLIC	?select_blackhawk_air_radar_mfd@@YGXXZ		; select_blackhawk_air_radar_mfd
PUBLIC	?select_blackhawk_tads_mfd@@YGXXZ		; select_blackhawk_tads_mfd
PUBLIC	?toggle_blackhawk_ase_auto_page@@YGXXZ		; toggle_blackhawk_ase_auto_page
PUBLIC	?auto_page_blackhawk_ase_mfd@@YGXXZ		; auto_page_blackhawk_ase_mfd
PUBLIC	?toggle_blackhawk_lhs_mfd_on_off@@YGXXZ		; toggle_blackhawk_lhs_mfd_on_off
PUBLIC	?toggle_blackhawk_rhs_mfd_on_off@@YGXXZ		; toggle_blackhawk_rhs_mfd_on_off
PUBLIC	?get_blackhawk_mfd_has_focus@@YGHW4MFD_LOCATIONS@@@Z ; get_blackhawk_mfd_has_focus
PUBLIC	?get_blackhawk_tads_display_visible@@YGHXZ	; get_blackhawk_tads_display_visible
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z@4JA ; `select_blackhawk_mfd_mode'::`1'::__LINE__Var
PUBLIC	??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0DJ@HPJGECJI@?$CImfd_mode?5?$DO?$DN?5MFD_MODE_OFF?$CJ?5?$CG?$CG?5?$CI@ ; `string'
PUBLIC	??_C@_0BL@JNKLHOPK@mfd_mode?5?$CB?$DN?5MFD_MODE_LLLTV@ ; `string'
PUBLIC	??_C@_0EB@HOBNFLGC@?$CIlocation?5?$DN?$DN?5MFD_LOCATION_LHS?$CJ?5@ ; `string'
PUBLIC	??_C@_0M@HNKHPKIB@LHS?5MFD?3?5?$CFs@		; `string'
PUBLIC	??_C@_0M@JIIOMEGD@RHS?5MFD?3?5?$CFs@		; `string'
PUBLIC	??_C@_05LIPABGF@?$CF?40fm@			; `string'
PUBLIC	??_C@_06NBEADFGO@?$CF?40fKm@			; `string'
PUBLIC	??_C@_03MAMPKPPK@XXX@				; `string'
PUBLIC	?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA ; `display_radar_target_details'::`1'::__LINE__Var
PUBLIC	??_C@_05EMNNHGFM@radar@				; `string'
PUBLIC	??_C@_03NGNKAJPJ@?$CFdm@			; `string'
PUBLIC	??_C@_06OMCABMNO@?$CF?41fKm@			; `string'
PUBLIC	??_C@_06HCPKJKPH@NO?5LOS@			; `string'
PUBLIC	??_C@_04LMMJFDCN@AUTO@				; `string'
PUBLIC	??_C@_06KODELPLK@LOCKED@			; `string'
PUBLIC	??_C@_06GPMJGLEM@MARKED@			; `string'
PUBLIC	?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA ; `draw_radar_target_symbol'::`1'::__LINE__Var
PUBLIC	??_C@_06JJLAMBGK@target@			; `string'
PUBLIC	??_C@_0BA@IIPCKJML@source_position@		; `string'
PUBLIC	??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@ ; `string'
PUBLIC	??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA ; `draw_ground_radar_clutter'::`1'::__LINE__Var
PUBLIC	??_C@_0DD@KDAGALDF@get_local_entity_type?5?$CItarget?$CJ?5@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA ; `draw_ground_radar_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_03NIFPGLBG@ALL@				; `string'
PUBLIC	??_C@_03IBEFMGAI@LOW@				; `string'
PUBLIC	??_C@_06HMBFJLMK@MEDIUM@			; `string'
PUBLIC	??_C@_03FFIBGFCJ@MED@				; `string'
PUBLIC	??_C@_04PKDHFCJF@HIGH@				; `string'
PUBLIC	??_C@_04MGKDMHFC@MARK@				; `string'
PUBLIC	?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA	; `draw_air_radar_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_05EJJKHDCK@ENEMY@				; `string'
PUBLIC	?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z@4JA ; `draw_3d_eo_display'::`1'::__LINE__Var
PUBLIC	??_C@_02KMMHFIEO@eo@				; `string'
PUBLIC	??_C@_0BL@MNOBOANG@Invalid?5field?5of?5view?5?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@ ; `string'
PUBLIC	??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@ ; `string'
PUBLIC	??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA ; `draw_3d_eo_display_on_texture'::`1'::__LINE__Var
PUBLIC	??_C@_0BF@MDEHLDP@eo_3d_texture_screen@		; `string'
PUBLIC	??_C@_0BK@EPIBEIKA@d3d_can_render_to_texture@	; `string'
PUBLIC	?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA ; `draw_overlaid_3d_eo_display'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z@4JA ; `draw_2d_eo_display'::`1'::__LINE__Var
PUBLIC	??_C@_04MIGKMLBH@FLIR@				; `string'
PUBLIC	??_C@_03ENJJJDDH@DTV@				; `string'
PUBLIC	??_C@_03NFBNOOEB@DVO@				; `string'
PUBLIC	??_C@_08JFLECGBM@LO?5LIGHT@			; `string'
PUBLIC	??_C@_02ONPABID@LO@				; `string'
PUBLIC	??_C@_06BPEIKNIA@NARROW@			; `string'
PUBLIC	??_C@_03FMKFNHMM@NAR@				; `string'
PUBLIC	??_C@_04KPGPJCNC@WIDE@				; `string'
PUBLIC	?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA ; `draw_tactical_situation_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_06LLLMNJMM@NO?5ACQ@			; `string'
PUBLIC	??_C@_03JKJFCLEN@FCR@				; `string'
PUBLIC	??_C@_04DBODHFDK@TADS@				; `string'
PUBLIC	??_C@_06NOICLIMH@IHADSS@			; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_03DGGJGKKM@GND@				; `string'
PUBLIC	??_C@_03KNFJGCC@AIR@				; `string'
PUBLIC	??_C@_03CIAFGHAC@2Km@				; `string'
PUBLIC	??_C@_03LFNCFPLL@5Km@				; `string'
PUBLIC	??_C@_04PJCLBGLO@10Km@				; `string'
PUBLIC	??_C@_04IJFFJMFM@25Km@				; `string'
PUBLIC	??_C@_03DBNGLLAD@TGT@				; `string'
PUBLIC	??_C@_03DIMJBCMI@NAV@				; `string'
PUBLIC	??_C@_06JCIGMCHD@?$CFc?3?$CFdm@			; `string'
PUBLIC	??_C@_09EKFBJBJG@?$CFc?3?$CF?41fKm@		; `string'
PUBLIC	??_C@_07CFANIJPM@?$CFc?3?$CFdKm@		; `string'
PUBLIC	??_C@_06BAOIPBEF@?9?3?9?9?4?9@			; `string'
PUBLIC	??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@	; `string'
PUBLIC	??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@		; `string'
PUBLIC	?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA ; `get_closest_missile'::`1'::__LINE__Var
PUBLIC	??_C@_06OEKOLKIL@source@			; `string'
PUBLIC	??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA ; `draw_aircraft_survivability_equipment_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@		; `string'
PUBLIC	??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@		; `string'
PUBLIC	??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@		; `string'
PUBLIC	??_C@_0L@DADPKEOI@IR?5JAM?5XXX@			; `string'
PUBLIC	??_C@_09OKBKNIAL@IR?5JAM?5ON@			; `string'
PUBLIC	??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@			; `string'
PUBLIC	??_C@_06CNPDBJMK@IR?5XXX@			; `string'
PUBLIC	??_C@_05JBLHJOBL@IR?5ON@			; `string'
PUBLIC	??_C@_06CCMEMHEJ@IR?5OFF@			; `string'
PUBLIC	??_C@_0L@JHFIBGMI@RD?5JAM?5XXX@			; `string'
PUBLIC	??_C@_09OKIOJJOP@RD?5JAM?5ON@			; `string'
PUBLIC	??_C@_0L@JIGPMIEL@RD?5JAM?5OFF@			; `string'
PUBLIC	??_C@_06JNKFDAHI@RD?5XXX@			; `string'
PUBLIC	??_C@_05BHAGAOGB@RD?5ON@			; `string'
PUBLIC	??_C@_06JCJCOOPL@RD?5OFF@			; `string'
PUBLIC	??_C@_08GHAEIHAP@CHAFF?3XX@			; `string'
PUBLIC	??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@		; `string'
PUBLIC	??_C@_04KJNFJKOK@C?3XX@				; `string'
PUBLIC	??_C@_06GNOFKMCG@C?3?$CF02d@			; `string'
PUBLIC	??_C@_08HGDOPGOH@FLARE?3XX@			; `string'
PUBLIC	??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@		; `string'
PUBLIC	??_C@_04GBDFBFJK@F?3XX@				; `string'
PUBLIC	??_C@_06DPNNIDIB@F?3?$CF02d@			; `string'
PUBLIC	?__LINE__Var@?0??draw_sprite@@YGXHHHHHH@Z@4JA	; `draw_sprite'::`1'::__LINE__Var
PUBLIC	??_C@_06EBODONHD@x?5?$DO?$DN?50@		; `string'
PUBLIC	??_C@_06OHJEOGMH@y?5?$DO?$DN?50@		; `string'
PUBLIC	??_C@_04OCCELDNI@?$CF04d@			; `string'
PUBLIC	??_C@_04OGKJMPGK@?$CF02d@			; `string'
PUBLIC	?__LINE__Var@?0??draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z@4JA ; `draw_large_weapon_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0P@MFMEIMLB@draw_large_mfd@		; `string'
PUBLIC	??_C@_03GLKEJMAA@?$CF4d@			; `string'
PUBLIC	??_C@_04CPMKADPB@XXXX@				; `string'
PUBLIC	??_C@_05FOOOBDLP@CHAFF@				; `string'
PUBLIC	??_C@_03GPCJOALC@?$CF2d@			; `string'
PUBLIC	??_C@_02BAHDIOLJ@XX@				; `string'
PUBLIC	??_C@_05MLKBHMKD@FLARE@				; `string'
PUBLIC	??_C@_03KIGHCFHP@MAN@				; `string'
PUBLIC	??_C@_03NHPMNECN@ARM@				; `string'
PUBLIC	??_C@_04JMNPMIJD@SAFE@				; `string'
PUBLIC	??_C@_04OKGDLNCL@NONE@				; `string'
PUBLIC	??_C@_03MGGCNFDL@LRF@				; `string'
PUBLIC	??_C@_05MJCDDMFE@TRNGL@				; `string'
PUBLIC	??_C@_04EKDNBCDP@LOAL@				; `string'
PUBLIC	??_C@_04EIHLKMGG@LOBL@				; `string'
PUBLIC	??_C@_05GPKGLDLB@SALVO@				; `string'
PUBLIC	??_C@_0CG@DKLMAF@more?5than?54?5hellfires?5on?5Apache@ ; `string'
PUBLIC	??_C@_0CJ@NDBFDPHK@?$CB?$CCmore?5than?54?5hellfires?5on?5Apac@ ; `string'
PUBLIC	??_C@_01DGKLNCNG@R@				; `string'
PUBLIC	??_C@_01OCOKONAJ@L@				; `string'
PUBLIC	??_C@_02MCEHGFCK@MP@				; `string'
PUBLIC	??_C@_02LENCMAPF@RC@				; `string'
PUBLIC	?__LINE__Var@?0??draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z@4JA ; `draw_weapon_display_mfd'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??print_system_message@@YGMPAD0HM@Z@4JA ; `print_system_message'::`1'::__LINE__Var
PUBLIC	??_C@_09FJJPPKDN@equipment@			; `string'
PUBLIC	??_C@_07FPLKDJGL@warning@			; `string'
PUBLIC	??_C@_02GIPFHKNO@OK@				; `string'
PUBLIC	??_C@_04OOEBCMBF@FAIL@				; `string'
PUBLIC	??_C@_05IHELJBBC@RADAR@				; `string'
PUBLIC	??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@		; `string'
PUBLIC	??_C@_0N@JDBOFCJG@RADAR?5JAMMER@		; `string'
PUBLIC	??_C@_09MILGCPFO@IR?5JAMMER@			; `string'
PUBLIC	??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@	; `string'
PUBLIC	??_C@_0P@OEDGDHNF@COMMUNICATIONS@		; `string'
PUBLIC	??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@	; `string'
PUBLIC	??_C@_04IDKCLELC@PNVS@				; `string'
PUBLIC	??_C@_0L@LMAEBBOE@STABILISER@			; `string'
PUBLIC	??_C@_07OHKEFPKJ@DAMAGED@			; `string'
PUBLIC	??_C@_0L@FFIGCBMA@MAIN?5ROTOR@			; `string'
PUBLIC	??_C@_0L@MCBINMPD@TAIL?5ROTOR@			; `string'
PUBLIC	??_C@_08KNAGGCOA@ENGINE?51@			; `string'
PUBLIC	??_C@_08IGCLDBCD@ENGINE?52@			; `string'
PUBLIC	??_C@_0BD@KOEIBOKB@HYDRAULIC?5PRESSURE@		; `string'
PUBLIC	??_C@_0N@MMJNGGCF@OIL?5PRESSURE@		; `string'
PUBLIC	??_C@_04PCNCCNDP@USED@				; `string'
PUBLIC	??_C@_0BC@OIGEPKDA@FIRE?5EXTINGUISHER@		; `string'
PUBLIC	??_C@_06JNBMPGOL@TORQUE@			; `string'
PUBLIC	??_C@_04OHGLKFFN@?$CF03d@			; `string'
PUBLIC	??_C@_04JKHNIKCB@TEMP@				; `string'
PUBLIC	??_C@_03JGNEPIDC@RPM@				; `string'
PUBLIC	??_C@_04DICABFLJ@FUEL@				; `string'
PUBLIC	??_C@_03ONPBJAFP@LBS@				; `string'
PUBLIC	?__LINE__Var@?0??draw_blackhawk_mfd_on_cockpit@@YGXMMHHW4MFD_LOCATIONS@@@Z@4JA ; `draw_blackhawk_mfd_on_cockpit'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??draw_blackhawk_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z@4JA ; `draw_blackhawk_mfd_on_texture'::`1'::__LINE__Var
PUBLIC	??_C@_0CG@IPIPCLFE@mfd_viewport_size?5?$DM?$DN?5mfd_textur@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_overlaid_blackhawk_mfd@@YGXMMMW4MFD_LOCATIONS@@@Z@4JA ; `draw_overlaid_blackhawk_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_0BG@CLGDNIGP@Invalid?5mfd?5mode?5?$DN?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?0??select_next_blackhawk_lhs_mfd@@YGXXZ@4JA ; `select_next_blackhawk_lhs_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0BO@MBAGKDHC@next_mfd_mode?5?$CB?$DN?5rhs_mfd_mode@ ; `string'
PUBLIC	?__LINE__Var@?0??select_previous_blackhawk_lhs_mfd@@YGXXZ@4JA ; `select_previous_blackhawk_lhs_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0CC@HPKCEHMJ@previous_mfd_mode?5?$CB?$DN?5rhs_mfd_mo@ ; `string'
PUBLIC	?__LINE__Var@?0??select_next_blackhawk_rhs_mfd@@YGXXZ@4JA ; `select_next_blackhawk_rhs_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0BO@IPOHAJBI@next_mfd_mode?5?$CB?$DN?5lhs_mfd_mode@ ; `string'
PUBLIC	?__LINE__Var@?0??select_previous_blackhawk_rhs_mfd@@YGXXZ@4JA ; `select_previous_blackhawk_rhs_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0CC@DBEDONKD@previous_mfd_mode?5?$CB?$DN?5lhs_mfd_mo@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	__real@3c000000
PUBLIC	__real@3c23d70a
PUBLIC	__real@3cf5c28f
PUBLIC	__real@3d0f5c29
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3d7c0fc1
PUBLIC	__real@3d8f5c29
PUBLIC	__real@3d99999a
PUBLIC	__real@3da3d70a
PUBLIC	__real@3db2b8c2
PUBLIC	__real@3db851ec
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e000000
PUBLIC	__real@3e19999a
PUBLIC	__real@3e35c28f
PUBLIC	__real@3e428f5c
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e666666
PUBLIC	__real@3e800000
PUBLIC	__real@3e8f5c29
PUBLIC	__real@3e99999a
PUBLIC	__real@3e9eb852
PUBLIC	__real@3eaccccd
PUBLIC	__real@3eae9e8d
PUBLIC	__real@3eb33333
PUBLIC	__real@3ecccccd
PUBLIC	__real@3ed70a3d
PUBLIC	__real@3ee66666
PUBLIC	__real@3ef33333
PUBLIC	__real@3f000000
PUBLIC	__real@3f00002000400080
PUBLIC	__real@3f066666
PUBLIC	__real@3f0ccccd
PUBLIC	__real@3f10000000000000
PUBLIC	__real@3f133333
PUBLIC	__real@3f19999a
PUBLIC	__real@3f23d70a
PUBLIC	__real@3f2b851f
PUBLIC	__real@3f2e9e8d
PUBLIC	__real@3f333333
PUBLIC	__real@3f3851ec
PUBLIC	__real@3f3d70a4
PUBLIC	__real@3f3eb852
PUBLIC	__real@3f3f75104d551d69
PUBLIC	__real@3f451eb8
PUBLIC	__real@3f49999a
PUBLIC	__real@3f4a3d71
PUBLIC	__real@3f4ac083
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f4eb852
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3f50a3d7
PUBLIC	__real@3f51eb85
PUBLIC	__real@3f5999999999999a
PUBLIC	__real@3f59999a
PUBLIC	__real@3f5a3d71
PUBLIC	__real@3f5c28f6
PUBLIC	__real@3f5ccccd
PUBLIC	__real@3f600000
PUBLIC	__real@3f60a3d7
PUBLIC	__real@3f61111111111111
PUBLIC	__real@3f6147ae
PUBLIC	__real@3f63d70a
PUBLIC	__real@3f666666
PUBLIC	__real@3f68f5c3
PUBLIC	__real@3f6c28f6
PUBLIC	__real@3f6e147b
PUBLIC	__real@3f700000
PUBLIC	__real@3f770a3d
PUBLIC	__real@3f7851ec
PUBLIC	__real@3f800000
PUBLIC	__real@3f80624dd2f1a9fc
PUBLIC	__real@3f82f6e9
PUBLIC	__real@3f83a92a30553261
PUBLIC	__real@3f847ae147ae147b
PUBLIC	__real@3f8ccccd
PUBLIC	__real@3f947ae147ae147b
PUBLIC	__real@3f9b573eab367a10
PUBLIC	__real@3f9eb851eb851eb8
PUBLIC	__real@3fa47ae147ae147b
PUBLIC	__real@3fa999999999999a
PUBLIC	__real@3fae9e8d
PUBLIC	__real@3faeb851eb851eb8
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fbc28f5c28f5c29
PUBLIC	__real@3fc0000000000000
PUBLIC	__real@3fc3333333333333
PUBLIC	__real@3fc70a3d70a3d70a
PUBLIC	__real@3fc90fdb
PUBLIC	__real@3fc999999999999a
PUBLIC	__real@3fcc28f5c28f5c29
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fd3333333333333
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe8000000000000
PUBLIC	__real@3fe8cccccccccccd
PUBLIC	__real@3fe999999999999a
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff0c09b332ccccd
PUBLIC	__real@3ff199999999999a
PUBLIC	__real@3ff5d3d193333333
PUBLIC	__real@3ff8000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@400d1eb8
PUBLIC	__real@4010000000000000
PUBLIC	__real@4014000000000000
PUBLIC	__real@401c000000000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@4026000000000000
PUBLIC	__real@4026eb1686b280e6
PUBLIC	__real@402a000000000000
PUBLIC	__real@403e000000000000
PUBLIC	__real@40400000
PUBLIC	__real@4042800000000000
PUBLIC	__real@404ca5dc00000000
PUBLIC	__real@405e000000000000
PUBLIC	__real@405f400000000000
PUBLIC	__real@405fc00000000000
PUBLIC	__real@4060000000000000
PUBLIC	__real@40845f306446f9b4
PUBLIC	__real@408f400000000000
PUBLIC	__real@409f400000000000
PUBLIC	__real@40a00000
PUBLIC	__real@40a3880000000000
PUBLIC	__real@40c90fdb
PUBLIC	__real@40f86a0000000000
PUBLIC	__real@41000000
PUBLIC	__real@41100000
PUBLIC	__real@41500000
PUBLIC	__real@41600000
PUBLIC	__real@41900000
PUBLIC	__real@41c80000
PUBLIC	__real@42480000
PUBLIC	__real@43000000
PUBLIC	__real@43650000
PUBLIC	__real@43800000
PUBLIC	__real@43a68000
PUBLIC	__real@43a70000
PUBLIC	__real@43e30000
PUBLIC	__real@447a0000
PUBLIC	__real@44fa0000
PUBLIC	__real@459c4000
PUBLIC	__real@461c4000
PUBLIC	__real@46c35000
PUBLIC	__real@49742400
PUBLIC	__real@bc23d70a
PUBLIC	__real@bccccccd
PUBLIC	__real@bcf5c28f
PUBLIC	__real@bd8f5c29
PUBLIC	__real@bd99999a
PUBLIC	__real@bda3d70a
PUBLIC	__real@bdb851ec
PUBLIC	__real@bdcccccd
PUBLIC	__real@be000000
PUBLIC	__real@be0f5c29
PUBLIC	__real@be19999a
PUBLIC	__real@be35c28f
PUBLIC	__real@be428f5c
PUBLIC	__real@be4ccccd
PUBLIC	__real@be6147ae
PUBLIC	__real@be666666
PUBLIC	__real@be800000
PUBLIC	__real@be8a3d71
PUBLIC	__real@be8f5c29
PUBLIC	__real@be99999a
PUBLIC	__real@beb33333
PUBLIC	__real@becccccd
PUBLIC	__real@bed70a3d
PUBLIC	__real@bee66666
PUBLIC	__real@bf000000
PUBLIC	__real@bf0ccccd
PUBLIC	__real@bf19999a
PUBLIC	__real@bf200000
PUBLIC	__real@bf2147ae
PUBLIC	__real@bf266666
PUBLIC	__real@bf2ccccd
PUBLIC	__real@bf31eb85
PUBLIC	__real@bf333333
PUBLIC	__real@bf3851ec
PUBLIC	__real@bf39999a
PUBLIC	__real@bf3d70a4
PUBLIC	__real@bf3f5c29
PUBLIC	__real@bf400000
PUBLIC	__real@bf466666
PUBLIC	__real@bf4ac083
PUBLIC	__real@bf4ccccd
PUBLIC	__real@bf59999a
PUBLIC	__real@bf5a3d71
PUBLIC	__real@bf600000
PUBLIC	__real@bf6147ae
PUBLIC	__real@bf666666
PUBLIC	__real@bf68f5c3
PUBLIC	__real@bf6e147b
PUBLIC	__real@bf770a3d
PUBLIC	__real@bf7851ec
PUBLIC	__real@bf800000
PUBLIC	__real@bf8ccccd
PUBLIC	__real@bfb999999999999a
PUBLIC	__real@bfc3333333333333
PUBLIC	__real@bfd999999999999a
PUBLIC	__real@bfe0000000000000
PUBLIC	__real@bfe3333333333333
PUBLIC	__real@bff199999999999a
PUBLIC	__real@c0000000
PUBLIC	__real@c0400000
PUBLIC	__real@c0800000
PUBLIC	__real@c0a00000
PUBLIC	__real@c0c00000
PUBLIC	__real@c0e00000
PUBLIC	__real@c1000000
PUBLIC	__real@c1400000
PUBLIC	__real@c1500000
PUBLIC	__real@c1800000
PUBLIC	__real@c1980000
PUBLIC	__real@c1c80000
PUBLIC	__real@c2040000
PUBLIC	__real@c2180000
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	_strcpy:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_atan2:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z:PROC	; get_3d_vector_magnitude
EXTRN	?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z:PROC ; normalise_3d_vector_given_magnitude
EXTRN	?get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z:PROC ; get_3d_unit_vector_dot_product
EXTRN	?get_2d_range@@YGMPBUVEC3D@@0@Z:PROC		; get_2d_range
EXTRN	?get_approx_2d_range@@YGMPBUVEC3D@@0@Z:PROC	; get_approx_2d_range
EXTRN	?get_3d_range@@YGMPBUVEC3D@@0@Z:PROC		; get_3d_range
EXTRN	?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z:PROC ; create_system_texture_screen
EXTRN	?create_screen_for_system_texture@@YGPAUSCREEN@@H@Z:PROC ; create_screen_for_system_texture
EXTRN	?set_system_texture_screen@@YGXPAUSCREEN@@H@Z:PROC ; set_system_texture_screen
EXTRN	?destroy_screen@@YGHPAUSCREEN@@@Z:PROC		; destroy_screen
EXTRN	?lock_screen@@YGHPAUSCREEN@@@Z:PROC		; lock_screen
EXTRN	?unlock_screen@@YGHPAUSCREEN@@@Z:PROC		; unlock_screen
EXTRN	?set_active_screen@@YGHPAUSCREEN@@@Z:PROC	; set_active_screen
EXTRN	?set_3d_render_target@@YGHPAUSCREEN@@@Z:PROC	; set_3d_render_target
EXTRN	?finalise_3d_render_target_texture@@YGXPAUSCREEN@@@Z:PROC ; finalise_3d_render_target_texture
EXTRN	?set_block@@YGXHHHHUREAL_COLOUR@@@Z:PROC	; set_block
EXTRN	?draw_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC	; draw_line
EXTRN	?draw_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC ; draw_half_thick_line
EXTRN	?set_hatched_pattern@@YGXPAI@Z:PROC		; set_hatched_pattern
EXTRN	?set_d3d_transparency_on@@YGXXZ:PROC		; set_d3d_transparency_on
EXTRN	?set_d3d_transparency_off@@YGXXZ:PROC		; set_d3d_transparency_off
EXTRN	?set_d3d_zbuffer_comparison@@YGXH@Z:PROC	; set_d3d_zbuffer_comparison
EXTRN	?set_d3d_culling@@YGXH@Z:PROC			; set_d3d_culling
EXTRN	?set_d3d_texture_wrapping@@YGXHH@Z:PROC		; set_d3d_texture_wrapping
EXTRN	?set_d3d_texture_mag_filtering@@YGXH@Z:PROC	; set_d3d_texture_mag_filtering
EXTRN	?set_d3d_texture_min_filtering@@YGXH@Z:PROC	; set_d3d_texture_min_filtering
EXTRN	?set_d3d_texture_mip_filtering@@YGXH@Z:PROC	; set_d3d_texture_mip_filtering
EXTRN	?set_d3d_plain_renderstate@@YGXXZ:PROC		; set_d3d_plain_renderstate
EXTRN	?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z:PROC ; set_d3d_flat_shaded_textured_renderstate
EXTRN	?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z:PROC ; draw_wbuffered_plain_polygon
EXTRN	?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z:PROC ; draw_wbuffered_flat_shaded_textured_polygon
EXTRN	?get_system_texture_ptr@@YGPAUSCREEN@@H@Z:PROC	; get_system_texture_ptr
EXTRN	?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z:PROC ; flush_screen_texture_graphics
EXTRN	?blit_rgb_alpha_masked_sprite_zero_mask_value@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@@Z:PROC ; blit_rgb_alpha_masked_sprite_zero_mask_value
EXTRN	?blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@PAUSCREEN@@@Z:PROC ; blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture
EXTRN	?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z:PROC ; set_mono_font_type
EXTRN	?set_mono_font_rel_position@@YGXMM@Z:PROC	; set_mono_font_rel_position
EXTRN	?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z:PROC	; set_mono_font_colour
EXTRN	?get_mono_font_char_height@@YGMD@Z:PROC		; get_mono_font_char_height
EXTRN	?print_mono_font_char@@YGXD@Z:PROC		; print_mono_font_char
EXTRN	?get_mono_font_string_width@@YGMPBD@Z:PROC	; get_mono_font_string_width
EXTRN	?print_mono_font_string@@YGXPBD@Z:PROC		; print_mono_font_string
EXTRN	?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z:PROC ; draw_mono_sprite
EXTRN	?create_2d_environment@@YGPAUENV_2D@@XZ:PROC	; create_2d_environment
EXTRN	?destroy_2d_environment@@YGXPAUENV_2D@@@Z:PROC	; destroy_2d_environment
EXTRN	?set_2d_active_environment@@YGXPAUENV_2D@@@Z:PROC ; set_2d_active_environment
EXTRN	?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z:PROC	; set_2d_viewport
EXTRN	?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z:PROC ; set_2d_viewport_origin
EXTRN	?set_2d_window@@YGXPAUENV_2D@@MMMM@Z:PROC	; set_2d_window
EXTRN	?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z:PROC	; set_2d_window_rotation
EXTRN	?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC	; draw_2d_line
EXTRN	?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC ; draw_2d_half_thick_line
EXTRN	?set_2d_mono_font_position@@YGXMM@Z:PROC	; set_2d_mono_font_position
EXTRN	?get_2d_world_position@@YGXMMPAM0@Z:PROC	; get_2d_world_position
EXTRN	?get_2d_float_screen_coordinates@@YGXMMPAM0@Z:PROC ; get_2d_float_screen_coordinates
EXTRN	?get_2d_float_screen_x_coordinate@@YGXMPAM@Z:PROC ; get_2d_float_screen_x_coordinate
EXTRN	?get_2d_float_screen_y_coordinate@@YGXMPAM@Z:PROC ; get_2d_float_screen_y_coordinate
EXTRN	?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z:PROC ; draw_2d_mono_sprite
EXTRN	?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z:PROC	; draw_2d_circle
EXTRN	?draw_2d_hatched_circle@@YGXMMMUREAL_COLOUR@@@Z:PROC ; draw_2d_hatched_circle
EXTRN	?set_3d_active_environment@@YGXPAUENV_3D@@@Z:PROC ; set_3d_active_environment
EXTRN	?begin_3d_scene@@YGHXZ:PROC			; begin_3d_scene
EXTRN	?end_3d_scene@@YGXXZ:PROC			; end_3d_scene
EXTRN	?get_position_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUVEC3D@@PAM1@Z:PROC ; get_position_3d_screen_coordinates
EXTRN	?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z:PROC ; get_local_entity_target_point
EXTRN	?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z:PROC ; get_local_entity_weapon_count
EXTRN	?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z:PROC ; get_local_entity_weapon_hardpoint_info
EXTRN	?get_local_entity_weapon_available@@YGHPAUENTITY@@H@Z:PROC ; get_local_entity_weapon_available
EXTRN	?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z:PROC ; get_waypoint_display_position
EXTRN	?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z:PROC ; get_simple_session_weather_at_point
EXTRN	?get_local_entity_first_waypoint@@YGPAUENTITY@@PAU1@@Z:PROC ; get_local_entity_first_waypoint
EXTRN	?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z:PROC ; get_local_entity_current_waypoint
EXTRN	?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z:PROC ; set_main_3d_params
EXTRN	?set_pilots_full_screen_params@@YGXH@Z:PROC	; set_pilots_full_screen_params
EXTRN	?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z:PROC	; draw_main_3d_scene
EXTRN	?get_target_display_name@@YGPBDPAUENTITY@@PADH@Z:PROC ; get_target_display_name
EXTRN	?get_range_finder@@YG?AW4rangefinding_system@@XZ:PROC ; get_range_finder
EXTRN	?draw_tsd_terrain_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MH@Z:PROC ; draw_tsd_terrain_map
EXTRN	?draw_tsd_contour_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MHH@Z:PROC ; draw_tsd_contour_map
EXTRN	?Initialise_TSD_render_terrain@@YGXXZ:PROC	; Initialise_TSD_render_terrain
EXTRN	?eo_is_locked@@YGHXZ:PROC			; eo_is_locked
EXTRN	?get_gunship_target_valid_for_ground_radar@@YGHPAUENTITY@@@Z:PROC ; get_gunship_target_valid_for_ground_radar
EXTRN	?get_target_matches_ground_radar_declutter_criteria@@YGHPAUENTITY@@@Z:PROC ; get_target_matches_ground_radar_declutter_criteria
EXTRN	?get_gunship_target_valid_for_air_radar@@YGHPAUENTITY@@@Z:PROC ; get_gunship_target_valid_for_air_radar
EXTRN	?get_target_matches_air_radar_declutter_criteria@@YGHPAUENTITY@@W4ENTITY_SIDES@@@Z:PROC ; get_target_matches_air_radar_declutter_criteria
EXTRN	?get_digital_clock_values@@YGXMPAM00@Z:PROC	; get_digital_clock_values
EXTRN	?copy_export_mfd@@YGXPAUSCREEN@@0@Z:PROC	; copy_export_mfd
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?random_number_seed@@3HA:DWORD			; random_number_seed
EXTRN	?sine_table@@3PAMA:BYTE				; sine_table
EXTRN	?application_video_width@@3HA:DWORD		; application_video_width
EXTRN	?d3d_can_render_to_texture@@3HA:DWORD		; d3d_can_render_to_texture
EXTRN	?sys_col_red@@3UREAL_COLOUR@@A:DWORD		; sys_col_red
EXTRN	?video_screen@@3PAUSCREEN@@A:DWORD		; video_screen
EXTRN	?active_screen@@3PAUSCREEN@@A:DWORD		; active_screen
EXTRN	?command_line_dynamics_engine_startup@@3HA:DWORD ; command_line_dynamics_engine_startup
EXTRN	?command_line_high_res_mfd@@3HA:DWORD		; command_line_high_res_mfd
EXTRN	?command_line_tsd_enemy_colours@@3HA:DWORD	; command_line_tsd_enemy_colours
EXTRN	?command_line_export_mfd@@3HA:DWORD		; command_line_export_mfd
EXTRN	?global_mfd_size@@3MA:DWORD			; global_mfd_size
EXTRN	?graphics_files@@3PAUFILE_DATA@@A:BYTE		; graphics_files
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?global_options@@3UGLOBAL_OPTIONS_DATA@@A:BYTE	; global_options
EXTRN	?overload_invalid_list_type_message@@3PBDB:DWORD ; overload_invalid_list_type_message
EXTRN	?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_first_child
EXTRN	?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_parent
EXTRN	?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_child_succ
EXTRN	?fn_get_local_entity_attitude_matrix_ptr@@3PAP6GPAY122MPAUENTITY@@@ZA:BYTE ; fn_get_local_entity_attitude_matrix_ptr
EXTRN	?overload_invalid_char_type_message@@3PBDB:DWORD ; overload_invalid_char_type_message
EXTRN	?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA:BYTE ; fn_get_local_entity_char_value
EXTRN	?draw_eo_3d_scene@@3HA:DWORD			; draw_eo_3d_scene
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA:BYTE ; fn_get_local_entity_vec3d_ptr
EXTRN	?entities@@3PAUENTITY@@A:DWORD			; entities
EXTRN	?gunship_entity@@3PAUENTITY@@A:DWORD		; gunship_entity
EXTRN	?session_entity@@3PAUENTITY@@A:DWORD		; session_entity
EXTRN	?full_screen_width@@3MA:DWORD			; full_screen_width
EXTRN	?full_screen_height@@3MA:DWORD			; full_screen_height
EXTRN	?main_3d_env@@3PAUENV_3D@@A:DWORD		; main_3d_env
EXTRN	?main_vp@@3UVIEWPOINT@@A:BYTE			; main_vp
EXTRN	?view_mode@@3W4VIEW_MODES@@A:DWORD		; view_mode
EXTRN	?tsd_render_mode@@3W4TSD_RENDER_MODES@@A:DWORD	; tsd_render_mode
EXTRN	?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A:DWORD ; target_acquisition_system
EXTRN	?fire_extinguisher_used@@3HA:DWORD		; fire_extinguisher_used
EXTRN	?eo_low_light@@3HA:DWORD			; eo_low_light
EXTRN	?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A:DWORD ; eo_sensor
EXTRN	?eo_azimuth@@3MA:DWORD				; eo_azimuth
EXTRN	?eo_max_azimuth@@3MA:DWORD			; eo_max_azimuth
EXTRN	?eo_elevation@@3MA:DWORD			; eo_elevation
EXTRN	?eo_min_elevation@@3MA:DWORD			; eo_min_elevation
EXTRN	?eo_vp@@3UVIEWPOINT@@A:BYTE			; eo_vp
EXTRN	?display_mfd_layout_grid@@3HA:DWORD		; display_mfd_layout_grid
EXTRN	?mfd_mode_names@@3PAPBDA:BYTE			; mfd_mode_names
EXTRN	?large_eo_3d_texture_screen@@3PAUSCREEN@@A:DWORD ; large_eo_3d_texture_screen
EXTRN	?small_eo_3d_texture_screen@@3PAUSCREEN@@A:DWORD ; small_eo_3d_texture_screen
EXTRN	?ground_radar@@3URADAR_PARAMS@@A:BYTE		; ground_radar
EXTRN	?air_radar@@3URADAR_PARAMS@@A:BYTE		; air_radar
EXTRN	?radar_clutter_hatch_pattern@@3PAIA:BYTE	; radar_clutter_hatch_pattern
EXTRN	?large_display_target_symbol_selected_target@@3QBDB:BYTE ; large_display_target_symbol_selected_target
EXTRN	?large_display_target_symbol_selected_target_mask@@3QBDB:BYTE ; large_display_target_symbol_selected_target_mask
EXTRN	?small_display_target_symbol_selected_target@@3QBDB:BYTE ; small_display_target_symbol_selected_target
EXTRN	?small_display_target_symbol_selected_target_mask@@3QBDB:BYTE ; small_display_target_symbol_selected_target_mask
EXTRN	?large_display_target_symbols_los@@3PAPBDA:BYTE	; large_display_target_symbols_los
EXTRN	?large_display_target_symbols_los_mask@@3PAPBDA:BYTE ; large_display_target_symbols_los_mask
EXTRN	?large_display_target_symbols_no_los@@3PAPBDA:BYTE ; large_display_target_symbols_no_los
EXTRN	?large_display_target_symbols_no_los_mask@@3PAPBDA:BYTE ; large_display_target_symbols_no_los_mask
EXTRN	?small_display_target_symbols_los@@3PAPBDA:BYTE	; small_display_target_symbols_los
EXTRN	?small_display_target_symbols_los_mask@@3PAPBDA:BYTE ; small_display_target_symbols_los_mask
EXTRN	?small_display_target_symbols_no_los@@3PAPBDA:BYTE ; small_display_target_symbols_no_los
EXTRN	?small_display_target_symbols_no_los_mask@@3PAPBDA:BYTE ; small_display_target_symbols_no_los_mask
EXTRN	?rocket_salvo_size@@3HA:DWORD			; rocket_salvo_size
EXTRN	?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A:DWORD ; blackhawk_damage
EXTRN	?blackhawk_flir@@3UEO_PARAMS@@A:BYTE		; blackhawk_flir
EXTRN	?blackhawk_dtv@@3UEO_PARAMS@@A:BYTE		; blackhawk_dtv
EXTRN	?blackhawk_dvo@@3UEO_PARAMS@@A:BYTE		; blackhawk_dvo
EXTRN	?BLACKHAWK_RADAR_SCAN_RANGE_500@@3MA:DWORD	; BLACKHAWK_RADAR_SCAN_RANGE_500
EXTRN	?BLACKHAWK_RADAR_SCAN_RANGE_1000@@3MA:DWORD	; BLACKHAWK_RADAR_SCAN_RANGE_1000
EXTRN	?BLACKHAWK_RADAR_SCAN_RANGE_2000@@3MA:DWORD	; BLACKHAWK_RADAR_SCAN_RANGE_2000
EXTRN	?BLACKHAWK_RADAR_SCAN_RANGE_4000@@3MA:DWORD	; BLACKHAWK_RADAR_SCAN_RANGE_4000
EXTRN	?BLACKHAWK_RADAR_SCAN_RANGE_8000@@3MA:DWORD	; BLACKHAWK_RADAR_SCAN_RANGE_8000
EXTRN	?base_cockpit_graphics_file@@3W4GRAPHICS_FILE_SPECIFIERS@@A:DWORD ; base_cockpit_graphics_file
EXTRN	?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A:DWORD ; current_flight_dynamics
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?lhs_mfd_mode@@3W4MFD_MODES@@A DD 01H DUP (?)		; lhs_mfd_mode
?rhs_mfd_mode@@3W4MFD_MODES@@A DD 01H DUP (?)		; rhs_mfd_mode
?mfd_colours@@3PAUREAL_COLOUR@@A DD 0dH DUP (?)		; mfd_colours
?text_display_colours@@3PAUREAL_COLOUR@@A DD 02H DUP (?) ; text_display_colours
?draw_line_func@@3P6GXMMMMUREAL_COLOUR@@@ZA DD 01H DUP (?) ; draw_line_func
?mfd_env@@3PAUENV_2D@@A DD 01H DUP (?)			; mfd_env
?mfd_viewport_size@@3MA DD 01H DUP (?)			; mfd_viewport_size
?mfd_viewport_x_org@@3MA DD 01H DUP (?)			; mfd_viewport_x_org
?mfd_viewport_y_org@@3MA DD 01H DUP (?)			; mfd_viewport_y_org
?mfd_viewport_x_min@@3MA DD 01H DUP (?)			; mfd_viewport_x_min
?mfd_viewport_y_min@@3MA DD 01H DUP (?)			; mfd_viewport_y_min
?mfd_viewport_x_max@@3MA DD 01H DUP (?)			; mfd_viewport_x_max
?mfd_viewport_y_max@@3MA DD 01H DUP (?)			; mfd_viewport_y_max
?draw_large_mfd@@3HA DD 01H DUP (?)			; draw_large_mfd
?mfd_texture_size@@3HA DD 01H DUP (?)			; mfd_texture_size
?mfd_viewport_texture_x_org@@3HA DD 01H DUP (?)		; mfd_viewport_texture_x_org
?mfd_viewport_texture_y_org@@3HA DD 01H DUP (?)		; mfd_viewport_texture_y_org
?i_translate_3d@@3MA DD 01H DUP (?)			; i_translate_3d
?j_translate_3d@@3MA DD 01H DUP (?)			; j_translate_3d
?i_scale_3d@@3MA DD 01H DUP (?)				; i_scale_3d
?j_scale_3d@@3MA DD 01H DUP (?)				; j_scale_3d
?lhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; lhs_mfd_texture_screen
?rhs_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; rhs_mfd_texture_screen
?lhs_overlaid_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; lhs_overlaid_mfd_texture_screen
?rhs_overlaid_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; rhs_overlaid_mfd_texture_screen
?eo_3d_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; eo_3d_texture_screen
?clear_mfd_colour@@3UREAL_COLOUR@@A DD 01H DUP (?)	; clear_mfd_colour
?tsd_ase_range@@3MA DD 01H DUP (?)			; tsd_ase_range
?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A DD 01H DUP (?) ; tsd_declutter_level
?tsd_threat_line_flash_timer@@3MA DD 01H DUP (?)	; tsd_threat_line_flash_timer
?tsd_draw_threat_line_status@@3HA DD 01H DUP (?)	; tsd_draw_threat_line_status
?ase_threat_line_flash_timer@@3MA DD 01H DUP (?)	; ase_threat_line_flash_timer
?ase_draw_threat_line_status@@3HA DD 01H DUP (?)	; ase_draw_threat_line_status
?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A DB 01cH DUP (?) ; weapon_sprite
?weapon_sprite_data@@3PAEA DD 01H DUP (?)		; weapon_sprite_data
?weapon_mask_data@@3PAEA DD 01H DUP (?)			; weapon_mask_data
?weapon_x_offset@@3HA DD 01H DUP (?)			; weapon_x_offset
?weapon_y_offset@@3HA DD 01H DUP (?)			; weapon_y_offset
?weapon_draw_on_texture@@3HA DD 01H DUP (?)		; weapon_draw_on_texture
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c2180000
CONST	SEGMENT
__real@c2180000 DD 0c2180000r			; -38
CONST	ENDS
;	COMDAT __real@c2040000
CONST	SEGMENT
__real@c2040000 DD 0c2040000r			; -33
CONST	ENDS
;	COMDAT __real@c1c80000
CONST	SEGMENT
__real@c1c80000 DD 0c1c80000r			; -25
CONST	ENDS
;	COMDAT __real@c1980000
CONST	SEGMENT
__real@c1980000 DD 0c1980000r			; -19
CONST	ENDS
;	COMDAT __real@c1800000
CONST	SEGMENT
__real@c1800000 DD 0c1800000r			; -16
CONST	ENDS
;	COMDAT __real@c1500000
CONST	SEGMENT
__real@c1500000 DD 0c1500000r			; -13
CONST	ENDS
;	COMDAT __real@c1400000
CONST	SEGMENT
__real@c1400000 DD 0c1400000r			; -12
CONST	ENDS
;	COMDAT __real@c1000000
CONST	SEGMENT
__real@c1000000 DD 0c1000000r			; -8
CONST	ENDS
;	COMDAT __real@c0e00000
CONST	SEGMENT
__real@c0e00000 DD 0c0e00000r			; -7
CONST	ENDS
;	COMDAT __real@c0c00000
CONST	SEGMENT
__real@c0c00000 DD 0c0c00000r			; -6
CONST	ENDS
;	COMDAT __real@c0a00000
CONST	SEGMENT
__real@c0a00000 DD 0c0a00000r			; -5
CONST	ENDS
;	COMDAT __real@c0800000
CONST	SEGMENT
__real@c0800000 DD 0c0800000r			; -4
CONST	ENDS
;	COMDAT __real@c0400000
CONST	SEGMENT
__real@c0400000 DD 0c0400000r			; -3
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bff199999999999a
CONST	SEGMENT
__real@bff199999999999a DQ 0bff199999999999ar	; -1.1
CONST	ENDS
;	COMDAT __real@bfe3333333333333
CONST	SEGMENT
__real@bfe3333333333333 DQ 0bfe3333333333333r	; -0.6
CONST	ENDS
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
CONST	ENDS
;	COMDAT __real@bfd999999999999a
CONST	SEGMENT
__real@bfd999999999999a DQ 0bfd999999999999ar	; -0.4
CONST	ENDS
;	COMDAT __real@bfc3333333333333
CONST	SEGMENT
__real@bfc3333333333333 DQ 0bfc3333333333333r	; -0.15
CONST	ENDS
;	COMDAT __real@bfb999999999999a
CONST	SEGMENT
__real@bfb999999999999a DQ 0bfb999999999999ar	; -0.1
CONST	ENDS
;	COMDAT __real@bf8ccccd
CONST	SEGMENT
__real@bf8ccccd DD 0bf8ccccdr			; -1.1
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf7851ec
CONST	SEGMENT
__real@bf7851ec DD 0bf7851ecr			; -0.97
CONST	ENDS
;	COMDAT __real@bf770a3d
CONST	SEGMENT
__real@bf770a3d DD 0bf770a3dr			; -0.965
CONST	ENDS
;	COMDAT __real@bf6e147b
CONST	SEGMENT
__real@bf6e147b DD 0bf6e147br			; -0.93
CONST	ENDS
;	COMDAT __real@bf68f5c3
CONST	SEGMENT
__real@bf68f5c3 DD 0bf68f5c3r			; -0.91
CONST	ENDS
;	COMDAT __real@bf666666
CONST	SEGMENT
__real@bf666666 DD 0bf666666r			; -0.9
CONST	ENDS
;	COMDAT __real@bf6147ae
CONST	SEGMENT
__real@bf6147ae DD 0bf6147aer			; -0.88
CONST	ENDS
;	COMDAT __real@bf600000
CONST	SEGMENT
__real@bf600000 DD 0bf600000r			; -0.875
CONST	ENDS
;	COMDAT __real@bf5a3d71
CONST	SEGMENT
__real@bf5a3d71 DD 0bf5a3d71r			; -0.8525
CONST	ENDS
;	COMDAT __real@bf59999a
CONST	SEGMENT
__real@bf59999a DD 0bf59999ar			; -0.85
CONST	ENDS
;	COMDAT __real@bf4ccccd
CONST	SEGMENT
__real@bf4ccccd DD 0bf4ccccdr			; -0.8
CONST	ENDS
;	COMDAT __real@bf4ac083
CONST	SEGMENT
__real@bf4ac083 DD 0bf4ac083r			; -0.792
CONST	ENDS
;	COMDAT __real@bf466666
CONST	SEGMENT
__real@bf466666 DD 0bf466666r			; -0.775
CONST	ENDS
;	COMDAT __real@bf400000
CONST	SEGMENT
__real@bf400000 DD 0bf400000r			; -0.75
CONST	ENDS
;	COMDAT __real@bf3f5c29
CONST	SEGMENT
__real@bf3f5c29 DD 0bf3f5c29r			; -0.7475
CONST	ENDS
;	COMDAT __real@bf3d70a4
CONST	SEGMENT
__real@bf3d70a4 DD 0bf3d70a4r			; -0.74
CONST	ENDS
;	COMDAT __real@bf39999a
CONST	SEGMENT
__real@bf39999a DD 0bf39999ar			; -0.725
CONST	ENDS
;	COMDAT __real@bf3851ec
CONST	SEGMENT
__real@bf3851ec DD 0bf3851ecr			; -0.72
CONST	ENDS
;	COMDAT __real@bf333333
CONST	SEGMENT
__real@bf333333 DD 0bf333333r			; -0.7
CONST	ENDS
;	COMDAT __real@bf31eb85
CONST	SEGMENT
__real@bf31eb85 DD 0bf31eb85r			; -0.695
CONST	ENDS
;	COMDAT __real@bf2ccccd
CONST	SEGMENT
__real@bf2ccccd DD 0bf2ccccdr			; -0.675
CONST	ENDS
;	COMDAT __real@bf266666
CONST	SEGMENT
__real@bf266666 DD 0bf266666r			; -0.65
CONST	ENDS
;	COMDAT __real@bf2147ae
CONST	SEGMENT
__real@bf2147ae DD 0bf2147aer			; -0.63
CONST	ENDS
;	COMDAT __real@bf200000
CONST	SEGMENT
__real@bf200000 DD 0bf200000r			; -0.625
CONST	ENDS
;	COMDAT __real@bf19999a
CONST	SEGMENT
__real@bf19999a DD 0bf19999ar			; -0.6
CONST	ENDS
;	COMDAT __real@bf0ccccd
CONST	SEGMENT
__real@bf0ccccd DD 0bf0ccccdr			; -0.55
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@bee66666
CONST	SEGMENT
__real@bee66666 DD 0bee66666r			; -0.45
CONST	ENDS
;	COMDAT __real@bed70a3d
CONST	SEGMENT
__real@bed70a3d DD 0bed70a3dr			; -0.42
CONST	ENDS
;	COMDAT __real@becccccd
CONST	SEGMENT
__real@becccccd DD 0becccccdr			; -0.4
CONST	ENDS
;	COMDAT __real@beb33333
CONST	SEGMENT
__real@beb33333 DD 0beb33333r			; -0.35
CONST	ENDS
;	COMDAT __real@be99999a
CONST	SEGMENT
__real@be99999a DD 0be99999ar			; -0.3
CONST	ENDS
;	COMDAT __real@be8f5c29
CONST	SEGMENT
__real@be8f5c29 DD 0be8f5c29r			; -0.28
CONST	ENDS
;	COMDAT __real@be8a3d71
CONST	SEGMENT
__real@be8a3d71 DD 0be8a3d71r			; -0.27
CONST	ENDS
;	COMDAT __real@be800000
CONST	SEGMENT
__real@be800000 DD 0be800000r			; -0.25
CONST	ENDS
;	COMDAT __real@be666666
CONST	SEGMENT
__real@be666666 DD 0be666666r			; -0.225
CONST	ENDS
;	COMDAT __real@be6147ae
CONST	SEGMENT
__real@be6147ae DD 0be6147aer			; -0.22
CONST	ENDS
;	COMDAT __real@be4ccccd
CONST	SEGMENT
__real@be4ccccd DD 0be4ccccdr			; -0.2
CONST	ENDS
;	COMDAT __real@be428f5c
CONST	SEGMENT
__real@be428f5c DD 0be428f5cr			; -0.19
CONST	ENDS
;	COMDAT __real@be35c28f
CONST	SEGMENT
__real@be35c28f DD 0be35c28fr			; -0.1775
CONST	ENDS
;	COMDAT __real@be19999a
CONST	SEGMENT
__real@be19999a DD 0be19999ar			; -0.15
CONST	ENDS
;	COMDAT __real@be0f5c29
CONST	SEGMENT
__real@be0f5c29 DD 0be0f5c29r			; -0.14
CONST	ENDS
;	COMDAT __real@be000000
CONST	SEGMENT
__real@be000000 DD 0be000000r			; -0.125
CONST	ENDS
;	COMDAT __real@bdcccccd
CONST	SEGMENT
__real@bdcccccd DD 0bdcccccdr			; -0.1
CONST	ENDS
;	COMDAT __real@bdb851ec
CONST	SEGMENT
__real@bdb851ec DD 0bdb851ecr			; -0.09
CONST	ENDS
;	COMDAT __real@bda3d70a
CONST	SEGMENT
__real@bda3d70a DD 0bda3d70ar			; -0.08
CONST	ENDS
;	COMDAT __real@bd99999a
CONST	SEGMENT
__real@bd99999a DD 0bd99999ar			; -0.075
CONST	ENDS
;	COMDAT __real@bd8f5c29
CONST	SEGMENT
__real@bd8f5c29 DD 0bd8f5c29r			; -0.07
CONST	ENDS
;	COMDAT __real@bcf5c28f
CONST	SEGMENT
__real@bcf5c28f DD 0bcf5c28fr			; -0.03
CONST	ENDS
;	COMDAT __real@bccccccd
CONST	SEGMENT
__real@bccccccd DD 0bccccccdr			; -0.025
CONST	ENDS
;	COMDAT __real@bc23d70a
CONST	SEGMENT
__real@bc23d70a DD 0bc23d70ar			; -0.01
CONST	ENDS
;	COMDAT __real@49742400
CONST	SEGMENT
__real@49742400 DD 049742400r			; 1e+06
CONST	ENDS
;	COMDAT __real@46c35000
CONST	SEGMENT
__real@46c35000 DD 046c35000r			; 25000
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@459c4000
CONST	SEGMENT
__real@459c4000 DD 0459c4000r			; 5000
CONST	ENDS
;	COMDAT __real@44fa0000
CONST	SEGMENT
__real@44fa0000 DD 044fa0000r			; 2000
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@43e30000
CONST	SEGMENT
__real@43e30000 DD 043e30000r			; 454
CONST	ENDS
;	COMDAT __real@43a70000
CONST	SEGMENT
__real@43a70000 DD 043a70000r			; 334
CONST	ENDS
;	COMDAT __real@43a68000
CONST	SEGMENT
__real@43a68000 DD 043a68000r			; 333
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@43650000
CONST	SEGMENT
__real@43650000 DD 043650000r			; 229
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@41c80000
CONST	SEGMENT
__real@41c80000 DD 041c80000r			; 25
CONST	ENDS
;	COMDAT __real@41900000
CONST	SEGMENT
__real@41900000 DD 041900000r			; 18
CONST	ENDS
;	COMDAT __real@41600000
CONST	SEGMENT
__real@41600000 DD 041600000r			; 14
CONST	ENDS
;	COMDAT __real@41500000
CONST	SEGMENT
__real@41500000 DD 041500000r			; 13
CONST	ENDS
;	COMDAT __real@41100000
CONST	SEGMENT
__real@41100000 DD 041100000r			; 9
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40f86a0000000000
CONST	SEGMENT
__real@40f86a0000000000 DQ 040f86a0000000000r	; 100000
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40a3880000000000
CONST	SEGMENT
__real@40a3880000000000 DQ 040a3880000000000r	; 2500
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@409f400000000000
CONST	SEGMENT
__real@409f400000000000 DQ 0409f400000000000r	; 2000
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@40845f306446f9b4
CONST	SEGMENT
__real@40845f306446f9b4 DQ 040845f306446f9b4r	; 651.899
CONST	ENDS
;	COMDAT __real@4060000000000000
CONST	SEGMENT
__real@4060000000000000 DQ 04060000000000000r	; 128
CONST	ENDS
;	COMDAT __real@405fc00000000000
CONST	SEGMENT
__real@405fc00000000000 DQ 0405fc00000000000r	; 127
CONST	ENDS
;	COMDAT __real@405f400000000000
CONST	SEGMENT
__real@405f400000000000 DQ 0405f400000000000r	; 125
CONST	ENDS
;	COMDAT __real@405e000000000000
CONST	SEGMENT
__real@405e000000000000 DQ 0405e000000000000r	; 120
CONST	ENDS
;	COMDAT __real@404ca5dc00000000
CONST	SEGMENT
__real@404ca5dc00000000 DQ 0404ca5dc00000000r	; 57.2958
CONST	ENDS
;	COMDAT __real@4042800000000000
CONST	SEGMENT
__real@4042800000000000 DQ 04042800000000000r	; 37
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@403e000000000000
CONST	SEGMENT
__real@403e000000000000 DQ 0403e000000000000r	; 30
CONST	ENDS
;	COMDAT __real@402a000000000000
CONST	SEGMENT
__real@402a000000000000 DQ 0402a000000000000r	; 13
CONST	ENDS
;	COMDAT __real@4026eb1686b280e6
CONST	SEGMENT
__real@4026eb1686b280e6 DQ 04026eb1686b280e6r	; 11.4592
CONST	ENDS
;	COMDAT __real@4026000000000000
CONST	SEGMENT
__real@4026000000000000 DQ 04026000000000000r	; 11
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@401c000000000000
CONST	SEGMENT
__real@401c000000000000 DQ 0401c000000000000r	; 7
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@400d1eb8
CONST	SEGMENT
__real@400d1eb8 DD 0400d1eb8r			; 2.205
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff8000000000000
CONST	SEGMENT
__real@3ff8000000000000 DQ 03ff8000000000000r	; 1.5
CONST	ENDS
;	COMDAT __real@3ff5d3d193333333
CONST	SEGMENT
__real@3ff5d3d193333333 DQ 03ff5d3d193333333r	; 1.36421
CONST	ENDS
;	COMDAT __real@3ff199999999999a
CONST	SEGMENT
__real@3ff199999999999a DQ 03ff199999999999ar	; 1.1
CONST	ENDS
;	COMDAT __real@3ff0c09b332ccccd
CONST	SEGMENT
__real@3ff0c09b332ccccd DQ 03ff0c09b332ccccdr	; 1.04702
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe999999999999a
CONST	SEGMENT
__real@3fe999999999999a DQ 03fe999999999999ar	; 0.8
CONST	ENDS
;	COMDAT __real@3fe8cccccccccccd
CONST	SEGMENT
__real@3fe8cccccccccccd DQ 03fe8cccccccccccdr	; 0.775
CONST	ENDS
;	COMDAT __real@3fe8000000000000
CONST	SEGMENT
__real@3fe8000000000000 DQ 03fe8000000000000r	; 0.75
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd3333333333333
CONST	SEGMENT
__real@3fd3333333333333 DQ 03fd3333333333333r	; 0.3
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fcc28f5c28f5c29
CONST	SEGMENT
__real@3fcc28f5c28f5c29 DQ 03fcc28f5c28f5c29r	; 0.22
CONST	ENDS
;	COMDAT __real@3fc999999999999a
CONST	SEGMENT
__real@3fc999999999999a DQ 03fc999999999999ar	; 0.2
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3fc70a3d70a3d70a
CONST	SEGMENT
__real@3fc70a3d70a3d70a DQ 03fc70a3d70a3d70ar	; 0.18
CONST	ENDS
;	COMDAT __real@3fc3333333333333
CONST	SEGMENT
__real@3fc3333333333333 DQ 03fc3333333333333r	; 0.15
CONST	ENDS
;	COMDAT __real@3fc0000000000000
CONST	SEGMENT
__real@3fc0000000000000 DQ 03fc0000000000000r	; 0.125
CONST	ENDS
;	COMDAT __real@3fbc28f5c28f5c29
CONST	SEGMENT
__real@3fbc28f5c28f5c29 DQ 03fbc28f5c28f5c29r	; 0.11
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3faeb851eb851eb8
CONST	SEGMENT
__real@3faeb851eb851eb8 DQ 03faeb851eb851eb8r	; 0.06
CONST	ENDS
;	COMDAT __real@3fae9e8d
CONST	SEGMENT
__real@3fae9e8d DD 03fae9e8dr			; 1.36421
CONST	ENDS
;	COMDAT __real@3fa999999999999a
CONST	SEGMENT
__real@3fa999999999999a DQ 03fa999999999999ar	; 0.05
CONST	ENDS
;	COMDAT __real@3fa47ae147ae147b
CONST	SEGMENT
__real@3fa47ae147ae147b DQ 03fa47ae147ae147br	; 0.04
CONST	ENDS
;	COMDAT __real@3f9eb851eb851eb8
CONST	SEGMENT
__real@3f9eb851eb851eb8 DQ 03f9eb851eb851eb8r	; 0.03
CONST	ENDS
;	COMDAT __real@3f9b573eab367a10
CONST	SEGMENT
__real@3f9b573eab367a10 DQ 03f9b573eab367a10r	; 0.0267
CONST	ENDS
;	COMDAT __real@3f947ae147ae147b
CONST	SEGMENT
__real@3f947ae147ae147b DQ 03f947ae147ae147br	; 0.02
CONST	ENDS
;	COMDAT __real@3f8ccccd
CONST	SEGMENT
__real@3f8ccccd DD 03f8ccccdr			; 1.1
CONST	ENDS
;	COMDAT __real@3f847ae147ae147b
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
CONST	ENDS
;	COMDAT __real@3f83a92a30553261
CONST	SEGMENT
__real@3f83a92a30553261 DQ 03f83a92a30553261r	; 0.0096
CONST	ENDS
;	COMDAT __real@3f82f6e9
CONST	SEGMENT
__real@3f82f6e9 DD 03f82f6e9r			; 1.02316
CONST	ENDS
;	COMDAT __real@3f80624dd2f1a9fc
CONST	SEGMENT
__real@3f80624dd2f1a9fc DQ 03f80624dd2f1a9fcr	; 0.008
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7851ec
CONST	SEGMENT
__real@3f7851ec DD 03f7851ecr			; 0.97
CONST	ENDS
;	COMDAT __real@3f770a3d
CONST	SEGMENT
__real@3f770a3d DD 03f770a3dr			; 0.965
CONST	ENDS
;	COMDAT __real@3f700000
CONST	SEGMENT
__real@3f700000 DD 03f700000r			; 0.9375
CONST	ENDS
;	COMDAT __real@3f6e147b
CONST	SEGMENT
__real@3f6e147b DD 03f6e147br			; 0.93
CONST	ENDS
;	COMDAT __real@3f6c28f6
CONST	SEGMENT
__real@3f6c28f6 DD 03f6c28f6r			; 0.9225
CONST	ENDS
;	COMDAT __real@3f68f5c3
CONST	SEGMENT
__real@3f68f5c3 DD 03f68f5c3r			; 0.91
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f63d70a
CONST	SEGMENT
__real@3f63d70a DD 03f63d70ar			; 0.89
CONST	ENDS
;	COMDAT __real@3f6147ae
CONST	SEGMENT
__real@3f6147ae DD 03f6147aer			; 0.88
CONST	ENDS
;	COMDAT __real@3f61111111111111
CONST	SEGMENT
__real@3f61111111111111 DQ 03f61111111111111r	; 0.00208333
CONST	ENDS
;	COMDAT __real@3f60a3d7
CONST	SEGMENT
__real@3f60a3d7 DD 03f60a3d7r			; 0.8775
CONST	ENDS
;	COMDAT __real@3f600000
CONST	SEGMENT
__real@3f600000 DD 03f600000r			; 0.875
CONST	ENDS
;	COMDAT __real@3f5ccccd
CONST	SEGMENT
__real@3f5ccccd DD 03f5ccccdr			; 0.8625
CONST	ENDS
;	COMDAT __real@3f5c28f6
CONST	SEGMENT
__real@3f5c28f6 DD 03f5c28f6r			; 0.86
CONST	ENDS
;	COMDAT __real@3f5a3d71
CONST	SEGMENT
__real@3f5a3d71 DD 03f5a3d71r			; 0.8525
CONST	ENDS
;	COMDAT __real@3f59999a
CONST	SEGMENT
__real@3f59999a DD 03f59999ar			; 0.85
CONST	ENDS
;	COMDAT __real@3f5999999999999a
CONST	SEGMENT
__real@3f5999999999999a DQ 03f5999999999999ar	; 0.0015625
CONST	ENDS
;	COMDAT __real@3f51eb85
CONST	SEGMENT
__real@3f51eb85 DD 03f51eb85r			; 0.82
CONST	ENDS
;	COMDAT __real@3f50a3d7
CONST	SEGMENT
__real@3f50a3d7 DD 03f50a3d7r			; 0.815
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3f4eb852
CONST	SEGMENT
__real@3f4eb852 DD 03f4eb852r			; 0.8075
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f4ac083
CONST	SEGMENT
__real@3f4ac083 DD 03f4ac083r			; 0.792
CONST	ENDS
;	COMDAT __real@3f4a3d71
CONST	SEGMENT
__real@3f4a3d71 DD 03f4a3d71r			; 0.79
CONST	ENDS
;	COMDAT __real@3f49999a
CONST	SEGMENT
__real@3f49999a DD 03f49999ar			; 0.7875
CONST	ENDS
;	COMDAT __real@3f451eb8
CONST	SEGMENT
__real@3f451eb8 DD 03f451eb8r			; 0.77
CONST	ENDS
;	COMDAT __real@3f3f75104d551d69
CONST	SEGMENT
__real@3f3f75104d551d69 DQ 03f3f75104d551d69r	; 0.00048
CONST	ENDS
;	COMDAT __real@3f3eb852
CONST	SEGMENT
__real@3f3eb852 DD 03f3eb852r			; 0.745
CONST	ENDS
;	COMDAT __real@3f3d70a4
CONST	SEGMENT
__real@3f3d70a4 DD 03f3d70a4r			; 0.74
CONST	ENDS
;	COMDAT __real@3f3851ec
CONST	SEGMENT
__real@3f3851ec DD 03f3851ecr			; 0.72
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f2e9e8d
CONST	SEGMENT
__real@3f2e9e8d DD 03f2e9e8dr			; 0.682107
CONST	ENDS
;	COMDAT __real@3f2b851f
CONST	SEGMENT
__real@3f2b851f DD 03f2b851fr			; 0.67
CONST	ENDS
;	COMDAT __real@3f23d70a
CONST	SEGMENT
__real@3f23d70a DD 03f23d70ar			; 0.64
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f133333
CONST	SEGMENT
__real@3f133333 DD 03f133333r			; 0.575
CONST	ENDS
;	COMDAT __real@3f10000000000000
CONST	SEGMENT
__real@3f10000000000000 DQ 03f10000000000000r	; 6.10352e-05
CONST	ENDS
;	COMDAT __real@3f0ccccd
CONST	SEGMENT
__real@3f0ccccd DD 03f0ccccdr			; 0.55
CONST	ENDS
;	COMDAT __real@3f066666
CONST	SEGMENT
__real@3f066666 DD 03f066666r			; 0.525
CONST	ENDS
;	COMDAT __real@3f00002000400080
CONST	SEGMENT
__real@3f00002000400080 DQ 03f00002000400080r	; 3.05185e-05
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ef33333
CONST	SEGMENT
__real@3ef33333 DD 03ef33333r			; 0.475
CONST	ENDS
;	COMDAT __real@3ee66666
CONST	SEGMENT
__real@3ee66666 DD 03ee66666r			; 0.45
CONST	ENDS
;	COMDAT __real@3ed70a3d
CONST	SEGMENT
__real@3ed70a3d DD 03ed70a3dr			; 0.42
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3eb33333
CONST	SEGMENT
__real@3eb33333 DD 03eb33333r			; 0.35
CONST	ENDS
;	COMDAT __real@3eae9e8d
CONST	SEGMENT
__real@3eae9e8d DD 03eae9e8dr			; 0.341053
CONST	ENDS
;	COMDAT __real@3eaccccd
CONST	SEGMENT
__real@3eaccccd DD 03eaccccdr			; 0.3375
CONST	ENDS
;	COMDAT __real@3e9eb852
CONST	SEGMENT
__real@3e9eb852 DD 03e9eb852r			; 0.31
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e8f5c29
CONST	SEGMENT
__real@3e8f5c29 DD 03e8f5c29r			; 0.28
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e666666
CONST	SEGMENT
__real@3e666666 DD 03e666666r			; 0.225
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e428f5c
CONST	SEGMENT
__real@3e428f5c DD 03e428f5cr			; 0.19
CONST	ENDS
;	COMDAT __real@3e35c28f
CONST	SEGMENT
__real@3e35c28f DD 03e35c28fr			; 0.1775
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
CONST	ENDS
;	COMDAT __real@3e000000
CONST	SEGMENT
__real@3e000000 DD 03e000000r			; 0.125
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3db851ec
CONST	SEGMENT
__real@3db851ec DD 03db851ecr			; 0.09
CONST	ENDS
;	COMDAT __real@3db2b8c2
CONST	SEGMENT
__real@3db2b8c2 DD 03db2b8c2r			; 0.0872665
CONST	ENDS
;	COMDAT __real@3da3d70a
CONST	SEGMENT
__real@3da3d70a DD 03da3d70ar			; 0.08
CONST	ENDS
;	COMDAT __real@3d99999a
CONST	SEGMENT
__real@3d99999a DD 03d99999ar			; 0.075
CONST	ENDS
;	COMDAT __real@3d8f5c29
CONST	SEGMENT
__real@3d8f5c29 DD 03d8f5c29r			; 0.07
CONST	ENDS
;	COMDAT __real@3d7c0fc1
CONST	SEGMENT
__real@3d7c0fc1 DD 03d7c0fc1r			; 0.0615385
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3d0f5c29
CONST	SEGMENT
__real@3d0f5c29 DD 03d0f5c29r			; 0.035
CONST	ENDS
;	COMDAT __real@3cf5c28f
CONST	SEGMENT
__real@3cf5c28f DD 03cf5c28fr			; 0.03
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3c000000
CONST	SEGMENT
__real@3c000000 DD 03c000000r			; 0.0078125
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@DBEDONKD@previous_mfd_mode?5?$CB?$DN?5lhs_mfd_mo@
CONST	SEGMENT
??_C@_0CC@DBEDONKD@previous_mfd_mode?5?$CB?$DN?5lhs_mfd_mo@ DB 'previous_'
	DB	'mfd_mode != lhs_mfd_mode', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??select_previous_blackhawk_rhs_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??select_previous_blackhawk_rhs_mfd@@YGXXZ@4JA DD 02908H ; `select_previous_blackhawk_rhs_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BO@IPOHAJBI@next_mfd_mode?5?$CB?$DN?5lhs_mfd_mode@
CONST	SEGMENT
??_C@_0BO@IPOHAJBI@next_mfd_mode?5?$CB?$DN?5lhs_mfd_mode@ DB 'next_mfd_mo'
	DB	'de != lhs_mfd_mode', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??select_next_blackhawk_rhs_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??select_next_blackhawk_rhs_mfd@@YGXXZ@4JA DD 028f0H ; `select_next_blackhawk_rhs_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CC@HPKCEHMJ@previous_mfd_mode?5?$CB?$DN?5rhs_mfd_mo@
CONST	SEGMENT
??_C@_0CC@HPKCEHMJ@previous_mfd_mode?5?$CB?$DN?5rhs_mfd_mo@ DB 'previous_'
	DB	'mfd_mode != rhs_mfd_mode', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??select_previous_blackhawk_lhs_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??select_previous_blackhawk_lhs_mfd@@YGXXZ@4JA DD 028d8H ; `select_previous_blackhawk_lhs_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BO@MBAGKDHC@next_mfd_mode?5?$CB?$DN?5rhs_mfd_mode@
CONST	SEGMENT
??_C@_0BO@MBAGKDHC@next_mfd_mode?5?$CB?$DN?5rhs_mfd_mode@ DB 'next_mfd_mo'
	DB	'de != rhs_mfd_mode', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??select_next_blackhawk_lhs_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??select_next_blackhawk_lhs_mfd@@YGXXZ@4JA DD 028c0H ; `select_next_blackhawk_lhs_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BG@CLGDNIGP@Invalid?5mfd?5mode?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BG@CLGDNIGP@Invalid?5mfd?5mode?5?$DN?5?$CFd@ DB 'Invalid mfd mode '
	DB	'= %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@ DB 'Invalid EO senso'
	DB	'r = %d', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_overlaid_blackhawk_mfd@@YGXMMMW4MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_overlaid_blackhawk_mfd@@YGXMMMW4MFD_LOCATIONS@@@Z@4JA DD 02548H ; `draw_overlaid_blackhawk_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CG@IPIPCLFE@mfd_viewport_size?5?$DM?$DN?5mfd_textur@
CONST	SEGMENT
??_C@_0CG@IPIPCLFE@mfd_viewport_size?5?$DM?$DN?5mfd_textur@ DB 'mfd_viewp'
	DB	'ort_size <= mfd_texture_size', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_blackhawk_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_blackhawk_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z@4JA DD 02343H ; `draw_blackhawk_mfd_on_texture'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_blackhawk_mfd_on_cockpit@@YGXMMHHW4MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_blackhawk_mfd_on_cockpit@@YGXMMHHW4MFD_LOCATIONS@@@Z@4JA DD 021d7H ; `draw_blackhawk_mfd_on_cockpit'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_03ONPBJAFP@LBS@
CONST	SEGMENT
??_C@_03ONPBJAFP@LBS@ DB 'LBS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04DICABFLJ@FUEL@
CONST	SEGMENT
??_C@_04DICABFLJ@FUEL@ DB 'FUEL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JGNEPIDC@RPM@
CONST	SEGMENT
??_C@_03JGNEPIDC@RPM@ DB 'RPM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04JKHNIKCB@TEMP@
CONST	SEGMENT
??_C@_04JKHNIKCB@TEMP@ DB 'TEMP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHGLKFFN@?$CF03d@
CONST	SEGMENT
??_C@_04OHGLKFFN@?$CF03d@ DB '%03d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JNBMPGOL@TORQUE@
CONST	SEGMENT
??_C@_06JNBMPGOL@TORQUE@ DB 'TORQUE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OIGEPKDA@FIRE?5EXTINGUISHER@
CONST	SEGMENT
??_C@_0BC@OIGEPKDA@FIRE?5EXTINGUISHER@ DB 'FIRE EXTINGUISHER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04PCNCCNDP@USED@
CONST	SEGMENT
??_C@_04PCNCCNDP@USED@ DB 'USED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MMJNGGCF@OIL?5PRESSURE@
CONST	SEGMENT
??_C@_0N@MMJNGGCF@OIL?5PRESSURE@ DB 'OIL PRESSURE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KOEIBOKB@HYDRAULIC?5PRESSURE@
CONST	SEGMENT
??_C@_0BD@KOEIBOKB@HYDRAULIC?5PRESSURE@ DB 'HYDRAULIC PRESSURE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08IGCLDBCD@ENGINE?52@
CONST	SEGMENT
??_C@_08IGCLDBCD@ENGINE?52@ DB 'ENGINE 2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KNAGGCOA@ENGINE?51@
CONST	SEGMENT
??_C@_08KNAGGCOA@ENGINE?51@ DB 'ENGINE 1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MCBINMPD@TAIL?5ROTOR@
CONST	SEGMENT
??_C@_0L@MCBINMPD@TAIL?5ROTOR@ DB 'TAIL ROTOR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FFIGCBMA@MAIN?5ROTOR@
CONST	SEGMENT
??_C@_0L@FFIGCBMA@MAIN?5ROTOR@ DB 'MAIN ROTOR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OHKEFPKJ@DAMAGED@
CONST	SEGMENT
??_C@_07OHKEFPKJ@DAMAGED@ DB 'DAMAGED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LMAEBBOE@STABILISER@
CONST	SEGMENT
??_C@_0L@LMAEBBOE@STABILISER@ DB 'STABILISER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04IDKCLELC@PNVS@
CONST	SEGMENT
??_C@_04IDKCLELC@PNVS@ DB 'PNVS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@
CONST	SEGMENT
??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@ DB 'RADAR WARNING SYSTEM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OEDGDHNF@COMMUNICATIONS@
CONST	SEGMENT
??_C@_0P@OEDGDHNF@COMMUNICATIONS@ DB 'COMMUNICATIONS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@
CONST	SEGMENT
??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@ DB 'NAVIGATION COMPUTER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MILGCPFO@IR?5JAMMER@
CONST	SEGMENT
??_C@_09MILGCPFO@IR?5JAMMER@ DB 'IR JAMMER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JDBOFCJG@RADAR?5JAMMER@
CONST	SEGMENT
??_C@_0N@JDBOFCJG@RADAR?5JAMMER@ DB 'RADAR JAMMER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@
CONST	SEGMENT
??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@ DB 'LASER DESIGNATOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05IHELJBBC@RADAR@
CONST	SEGMENT
??_C@_05IHELJBBC@RADAR@ DB 'RADAR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OOEBCMBF@FAIL@
CONST	SEGMENT
??_C@_04OOEBCMBF@FAIL@ DB 'FAIL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GIPFHKNO@OK@
CONST	SEGMENT
??_C@_02GIPFHKNO@OK@ DB 'OK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07FPLKDJGL@warning@
CONST	SEGMENT
??_C@_07FPLKDJGL@warning@ DB 'warning', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09FJJPPKDN@equipment@
CONST	SEGMENT
??_C@_09FJJPPKDN@equipment@ DB 'equipment', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??print_system_message@@YGMPAD0HM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??print_system_message@@YGMPAD0HM@Z@4JA DD 01e91H ; `print_system_message'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z@4JA DD 01d64H ; `draw_weapon_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02LENCMAPF@RC@
CONST	SEGMENT
??_C@_02LENCMAPF@RC@ DB 'RC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MCEHGFCK@MP@
CONST	SEGMENT
??_C@_02MCEHGFCK@MP@ DB 'MP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01OCOKONAJ@L@
CONST	SEGMENT
??_C@_01OCOKONAJ@L@ DB 'L', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01DGKLNCNG@R@
CONST	SEGMENT
??_C@_01DGKLNCNG@R@ DB 'R', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@NDBFDPHK@?$CB?$CCmore?5than?54?5hellfires?5on?5Apac@
CONST	SEGMENT
??_C@_0CJ@NDBFDPHK@?$CB?$CCmore?5than?54?5hellfires?5on?5Apac@ DB '!"more'
	DB	' than 4 hellfires on Apache pylon"', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@DKLMAF@more?5than?54?5hellfires?5on?5Apache@
CONST	SEGMENT
??_C@_0CG@DKLMAF@more?5than?54?5hellfires?5on?5Apache@ DB 'more than 4 he'
	DB	'llfires on Apache pylon', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GPKGLDLB@SALVO@
CONST	SEGMENT
??_C@_05GPKGLDLB@SALVO@ DB 'SALVO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EIHLKMGG@LOBL@
CONST	SEGMENT
??_C@_04EIHLKMGG@LOBL@ DB 'LOBL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EKDNBCDP@LOAL@
CONST	SEGMENT
??_C@_04EKDNBCDP@LOAL@ DB 'LOAL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MJCDDMFE@TRNGL@
CONST	SEGMENT
??_C@_05MJCDDMFE@TRNGL@ DB 'TRNGL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MGGCNFDL@LRF@
CONST	SEGMENT
??_C@_03MGGCNFDL@LRF@ DB 'LRF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OKGDLNCL@NONE@
CONST	SEGMENT
??_C@_04OKGDLNCL@NONE@ DB 'NONE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04JMNPMIJD@SAFE@
CONST	SEGMENT
??_C@_04JMNPMIJD@SAFE@ DB 'SAFE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NHPMNECN@ARM@
CONST	SEGMENT
??_C@_03NHPMNECN@ARM@ DB 'ARM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KIGHCFHP@MAN@
CONST	SEGMENT
??_C@_03KIGHCFHP@MAN@ DB 'MAN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MLKBHMKD@FLARE@
CONST	SEGMENT
??_C@_05MLKBHMKD@FLARE@ DB 'FLARE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BAHDIOLJ@XX@
CONST	SEGMENT
??_C@_02BAHDIOLJ@XX@ DB 'XX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GPCJOALC@?$CF2d@
CONST	SEGMENT
??_C@_03GPCJOALC@?$CF2d@ DB '%2d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05FOOOBDLP@CHAFF@
CONST	SEGMENT
??_C@_05FOOOBDLP@CHAFF@ DB 'CHAFF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04CPMKADPB@XXXX@
CONST	SEGMENT
??_C@_04CPMKADPB@XXXX@ DB 'XXXX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GLKEJMAA@?$CF4d@
CONST	SEGMENT
??_C@_03GLKEJMAA@?$CF4d@ DB '%4d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MFMEIMLB@draw_large_mfd@
CONST	SEGMENT
??_C@_0P@MFMEIMLB@draw_large_mfd@ DB 'draw_large_mfd', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z@4JA DD 01b57H ; `draw_large_weapon_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04OGKJMPGK@?$CF02d@
CONST	SEGMENT
??_C@_04OGKJMPGK@?$CF02d@ DB '%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OCCELDNI@?$CF04d@
CONST	SEGMENT
??_C@_04OCCELDNI@?$CF04d@ DB '%04d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OHJEOGMH@y?5?$DO?$DN?50@
CONST	SEGMENT
??_C@_06OHJEOGMH@y?5?$DO?$DN?50@ DB 'y >= 0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBODONHD@x?5?$DO?$DN?50@
CONST	SEGMENT
??_C@_06EBODONHD@x?5?$DO?$DN?50@ DB 'x >= 0', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_sprite@@YGXHHHHHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_sprite@@YGXHHHHHH@Z@4JA DD 0139cH	; `draw_sprite'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06DPNNIDIB@F?3?$CF02d@
CONST	SEGMENT
??_C@_06DPNNIDIB@F?3?$CF02d@ DB 'F:%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GBDFBFJK@F?3XX@
CONST	SEGMENT
??_C@_04GBDFBFJK@F?3XX@ DB 'F:XX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@
CONST	SEGMENT
??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@ DB 'FLARE:%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HGDOPGOH@FLARE?3XX@
CONST	SEGMENT
??_C@_08HGDOPGOH@FLARE?3XX@ DB 'FLARE:XX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GNOFKMCG@C?3?$CF02d@
CONST	SEGMENT
??_C@_06GNOFKMCG@C?3?$CF02d@ DB 'C:%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KJNFJKOK@C?3XX@
CONST	SEGMENT
??_C@_04KJNFJKOK@C?3XX@ DB 'C:XX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@
CONST	SEGMENT
??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@ DB 'CHAFF:%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GHAEIHAP@CHAFF?3XX@
CONST	SEGMENT
??_C@_08GHAEIHAP@CHAFF?3XX@ DB 'CHAFF:XX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JCJCOOPL@RD?5OFF@
CONST	SEGMENT
??_C@_06JCJCOOPL@RD?5OFF@ DB 'RD OFF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BHAGAOGB@RD?5ON@
CONST	SEGMENT
??_C@_05BHAGAOGB@RD?5ON@ DB 'RD ON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JNKFDAHI@RD?5XXX@
CONST	SEGMENT
??_C@_06JNKFDAHI@RD?5XXX@ DB 'RD XXX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JIGPMIEL@RD?5JAM?5OFF@
CONST	SEGMENT
??_C@_0L@JIGPMIEL@RD?5JAM?5OFF@ DB 'RD JAM OFF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OKIOJJOP@RD?5JAM?5ON@
CONST	SEGMENT
??_C@_09OKIOJJOP@RD?5JAM?5ON@ DB 'RD JAM ON', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JHFIBGMI@RD?5JAM?5XXX@
CONST	SEGMENT
??_C@_0L@JHFIBGMI@RD?5JAM?5XXX@ DB 'RD JAM XXX', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06CCMEMHEJ@IR?5OFF@
CONST	SEGMENT
??_C@_06CCMEMHEJ@IR?5OFF@ DB 'IR OFF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JBLHJOBL@IR?5ON@
CONST	SEGMENT
??_C@_05JBLHJOBL@IR?5ON@ DB 'IR ON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CNPDBJMK@IR?5XXX@
CONST	SEGMENT
??_C@_06CNPDBJMK@IR?5XXX@ DB 'IR XXX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@
CONST	SEGMENT
??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@ DB 'IR JAM OFF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OKBKNIAL@IR?5JAM?5ON@
CONST	SEGMENT
??_C@_09OKBKNIAL@IR?5JAM?5ON@ DB 'IR JAM ON', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DADPKEOI@IR?5JAM?5XXX@
CONST	SEGMENT
??_C@_0L@DADPKEOI@IR?5JAM?5XXX@ DB 'IR JAM XXX', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@
CONST	SEGMENT
??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@ DB 'LS MSL:%.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@
CONST	SEGMENT
??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@ DB 'RF MSL:%.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@
CONST	SEGMENT
??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@ DB 'IR MSL:%.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA DD 01136H ; `draw_aircraft_survivability_equipment_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@
CONST	SEGMENT
??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@ DB '(threa'
	DB	't_type == THREAT_TYPE_RF_MISSILE) || (threat_type == THREAT_T'
	DB	'YPE_IR_MISSILE) || (threat_type == THREAT_TYPE_LASER_MISSILE)'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06OEKOLKIL@source@
CONST	SEGMENT
??_C@_06OEKOLKIL@source@ DB 'source', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA DD 010cfH ; `get_closest_missile'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@
CONST	SEGMENT
??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@ DB '--:--:--', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@
CONST	SEGMENT
??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@ DB '%02d:%02d:%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BAOIPBEF@?9?3?9?9?4?9@
CONST	SEGMENT
??_C@_06BAOIPBEF@?9?3?9?9?4?9@ DB '-:--.-', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CFANIJPM@?$CFc?3?$CFdKm@
CONST	SEGMENT
??_C@_07CFANIJPM@?$CFc?3?$CFdKm@ DB '%c:%dKm', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EKFBJBJG@?$CFc?3?$CF?41fKm@
CONST	SEGMENT
??_C@_09EKFBJBJG@?$CFc?3?$CF?41fKm@ DB '%c:%.1fKm', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JCIGMCHD@?$CFc?3?$CFdm@
CONST	SEGMENT
??_C@_06JCIGMCHD@?$CFc?3?$CFdm@ DB '%c:%dm', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03DIMJBCMI@NAV@
CONST	SEGMENT
??_C@_03DIMJBCMI@NAV@ DB 'NAV', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03DBNGLLAD@TGT@
CONST	SEGMENT
??_C@_03DBNGLLAD@TGT@ DB 'TGT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IJFFJMFM@25Km@
CONST	SEGMENT
??_C@_04IJFFJMFM@25Km@ DB '25Km', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PJCLBGLO@10Km@
CONST	SEGMENT
??_C@_04PJCLBGLO@10Km@ DB '10Km', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LFNCFPLL@5Km@
CONST	SEGMENT
??_C@_03LFNCFPLL@5Km@ DB '5Km', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CIAFGHAC@2Km@
CONST	SEGMENT
??_C@_03CIAFGHAC@2Km@ DB '2Km', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KNFJGCC@AIR@
CONST	SEGMENT
??_C@_03KNFJGCC@AIR@ DB 'AIR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03DGGJGKKM@GND@
CONST	SEGMENT
??_C@_03DGGJGKKM@GND@ DB 'GND', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06NOICLIMH@IHADSS@
CONST	SEGMENT
??_C@_06NOICLIMH@IHADSS@ DB 'IHADSS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DBODHFDK@TADS@
CONST	SEGMENT
??_C@_04DBODHFDK@TADS@ DB 'TADS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JKJFCLEN@FCR@
CONST	SEGMENT
??_C@_03JKJFCLEN@FCR@ DB 'FCR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06LLLMNJMM@NO?5ACQ@
CONST	SEGMENT
??_C@_06LLLMNJMM@NO?5ACQ@ DB 'NO ACQ', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA DD 0d5fH ; `draw_tactical_situation_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04KPGPJCNC@WIDE@
CONST	SEGMENT
??_C@_04KPGPJCNC@WIDE@ DB 'WIDE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FMKFNHMM@NAR@
CONST	SEGMENT
??_C@_03FMKFNHMM@NAR@ DB 'NAR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06BPEIKNIA@NARROW@
CONST	SEGMENT
??_C@_06BPEIKNIA@NARROW@ DB 'NARROW', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02ONPABID@LO@
CONST	SEGMENT
??_C@_02ONPABID@LO@ DB 'LO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08JFLECGBM@LO?5LIGHT@
CONST	SEGMENT
??_C@_08JFLECGBM@LO?5LIGHT@ DB 'LO LIGHT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NFBNOOEB@DVO@
CONST	SEGMENT
??_C@_03NFBNOOEB@DVO@ DB 'DVO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03ENJJJDDH@DTV@
CONST	SEGMENT
??_C@_03ENJJJDDH@DTV@ DB 'DTV', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MIGKMLBH@FLIR@
CONST	SEGMENT
??_C@_04MIGKMLBH@FLIR@ DB 'FLIR', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z@4JA DD 0b7cH ; `draw_2d_eo_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA DD 0b11H ; `draw_overlaid_3d_eo_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BK@EPIBEIKA@d3d_can_render_to_texture@
CONST	SEGMENT
??_C@_0BK@EPIBEIKA@d3d_can_render_to_texture@ DB 'd3d_can_render_to_textu'
	DB	're', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
CONST	SEGMENT
??_C@_0BF@MDEHLDP@eo_3d_texture_screen@ DB 'eo_3d_texture_screen', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA DD 0a93H ; `draw_3d_eo_display_on_texture'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
CONST	SEGMENT
??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@ DB 'Invalid target'
	DB	' acquisition system = %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
CONST	SEGMENT
??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@ DB '('
	DB	'day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT'
	DB	'_TYPES)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
CONST	SEGMENT
??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@ DB '(weather_'
	DB	'mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LA'
	DB	'ST)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MNOBOANG@Invalid?5field?5of?5view?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BL@MNOBOANG@Invalid?5field?5of?5view?5?$DN?5?$CFd@ DB 'Invalid fie'
	DB	'ld of view = %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KMMHFIEO@eo@
CONST	SEGMENT
??_C@_02KMMHFIEO@eo@ DB 'eo', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z@4JA DD 0a0eH ; `draw_3d_eo_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05EJJKHDCK@ENEMY@
CONST	SEGMENT
??_C@_05EJJKHDCK@ENEMY@ DB 'ENEMY', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA DD 0820H	; `draw_air_radar_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04MGKDMHFC@MARK@
CONST	SEGMENT
??_C@_04MGKDMHFC@MARK@ DB 'MARK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PKDHFCJF@HIGH@
CONST	SEGMENT
??_C@_04PKDHFCJF@HIGH@ DB 'HIGH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FFIBGFCJ@MED@
CONST	SEGMENT
??_C@_03FFIBGFCJ@MED@ DB 'MED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06HMBFJLMK@MEDIUM@
CONST	SEGMENT
??_C@_06HMBFJLMK@MEDIUM@ DB 'MEDIUM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IBEFMGAI@LOW@
CONST	SEGMENT
??_C@_03IBEFMGAI@LOW@ DB 'LOW', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NIFPGLBG@ALL@
CONST	SEGMENT
??_C@_03NIFPGLBG@ALL@ DB 'ALL', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA DD 06e7H ; `draw_ground_radar_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DD@KDAGALDF@get_local_entity_type?5?$CItarget?$CJ?5@
CONST	SEGMENT
??_C@_0DD@KDAGALDF@get_local_entity_type?5?$CItarget?$CJ?5@ DB 'get_local'
	DB	'_entity_type (target) == ENTITY_TYPE_CITY', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA DD 06b9H ; `draw_ground_radar_clutter'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@
CONST	SEGMENT
??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@ DB '('
	DB	'target_symbol_type >= 0) && (target_symbol_type < NUM_TARGET_'
	DB	'SYMBOL_TYPES)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@
CONST	SEGMENT
??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@ DB '!get_local'
	DB	'_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IIPCKJML@source_position@
CONST	SEGMENT
??_C@_0BA@IIPCKJML@source_position@ DB 'source_position', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JJLAMBGK@target@
CONST	SEGMENT
??_C@_06JJLAMBGK@target@ DB 'target', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA DD 060aH ; `draw_radar_target_symbol'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06GPMJGLEM@MARKED@
CONST	SEGMENT
??_C@_06GPMJGLEM@MARKED@ DB 'MARKED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KODELPLK@LOCKED@
CONST	SEGMENT
??_C@_06KODELPLK@LOCKED@ DB 'LOCKED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LMMJFDCN@AUTO@
CONST	SEGMENT
??_C@_04LMMJFDCN@AUTO@ DB 'AUTO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06HCPKJKPH@NO?5LOS@
CONST	SEGMENT
??_C@_06HCPKJKPH@NO?5LOS@ DB 'NO LOS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OMCABMNO@?$CF?41fKm@
CONST	SEGMENT
??_C@_06OMCABMNO@?$CF?41fKm@ DB '%.1fKm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NGNKAJPJ@?$CFdm@
CONST	SEGMENT
??_C@_03NGNKAJPJ@?$CFdm@ DB '%dm', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05EMNNHGFM@radar@
CONST	SEGMENT
??_C@_05EMNNHGFM@radar@ DB 'radar', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA DD 0539H ; `display_radar_target_details'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_03MAMPKPPK@XXX@
CONST	SEGMENT
??_C@_03MAMPKPPK@XXX@ DB 'XXX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06NBEADFGO@?$CF?40fKm@
CONST	SEGMENT
??_C@_06NBEADFGO@?$CF?40fKm@ DB '%.0fKm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LIPABGF@?$CF?40fm@
CONST	SEGMENT
??_C@_05LIPABGF@?$CF?40fm@ DB '%.0fm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JIIOMEGD@RHS?5MFD?3?5?$CFs@
CONST	SEGMENT
??_C@_0M@JIIOMEGD@RHS?5MFD?3?5?$CFs@ DB 'RHS MFD: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HNKHPKIB@LHS?5MFD?3?5?$CFs@
CONST	SEGMENT
??_C@_0M@HNKHPKIB@LHS?5MFD?3?5?$CFs@ DB 'LHS MFD: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@HOBNFLGC@?$CIlocation?5?$DN?$DN?5MFD_LOCATION_LHS?$CJ?5@
CONST	SEGMENT
??_C@_0EB@HOBNFLGC@?$CIlocation?5?$DN?$DN?5MFD_LOCATION_LHS?$CJ?5@ DB '(l'
	DB	'ocation == MFD_LOCATION_LHS) || (location == MFD_LOCATION_RHS'
	DB	')', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JNKLHOPK@mfd_mode?5?$CB?$DN?5MFD_MODE_LLLTV@
CONST	SEGMENT
??_C@_0BL@JNKLHOPK@mfd_mode?5?$CB?$DN?5MFD_MODE_LLLTV@ DB 'mfd_mode != MF'
	DB	'D_MODE_LLLTV', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@HPJGECJI@?$CImfd_mode?5?$DO?$DN?5MFD_MODE_OFF?$CJ?5?$CG?$CG?5?$CI@
CONST	SEGMENT
??_C@_0DJ@HPJGECJI@?$CImfd_mode?5?$DO?$DN?5MFD_MODE_OFF?$CJ?5?$CG?$CG?5?$CI@ DB '('
	DB	'mfd_mode >= MFD_MODE_OFF) && (mfd_mode < NUM_MFD_MODES)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nhv'
	DB	'90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\b'
	DB	'h_mfd.c', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z@4JA DD 033bH ; `select_blackhawk_mfd_mode'::`1'::__LINE__Var
_DATA	ENDS
_DATA	SEGMENT
?large_tsd_ase_aircraft_datum@@3PADA DB 011H		; large_tsd_ase_aircraft_datum
	DB	025H
	DB	0f8H
	DB	0f8H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+7
?large_tsd_ase_aircraft_datum_mask@@3PADA DB 013H	; large_tsd_ase_aircraft_datum_mask
	DB	027H
	DB	0f7H
	DB	0f7H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+7
?small_tsd_ase_aircraft_datum@@3PADA DB 07H		; small_tsd_ase_aircraft_datum
	DB	0fH
	DB	0fdH
	DB	0fdH
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?small_tsd_ase_aircraft_datum_mask@@3PADA DB 09H	; small_tsd_ase_aircraft_datum_mask
	DB	011H
	DB	0fcH
	DB	0fcH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?large_tsd_waypoint_marker@@3PADA DB 0cH		; large_tsd_waypoint_marker
	DB	0dH
	DB	0fbH
	DB	0faH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
?small_tsd_waypoint_marker@@3PADA DB 09H		; small_tsd_waypoint_marker
	DB	09H
	DB	0fcH
	DB	0fcH
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	ORG $+3
?large_ase_missile@@3PADA DB 0bH			; large_ase_missile
	DB	09H
	DB	0fbH
	DB	0fcH
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	ORG $+1
?large_ase_missile_mask@@3PADA DB 0dH			; large_ase_missile_mask
	DB	0bH
	DB	0faH
	DB	0fbH
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	ORG $+1
?small_ase_missile@@3PADA DB 07H			; small_ase_missile
	DB	05H
	DB	0fdH
	DB	0feH
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
?small_ase_missile_mask@@3PADA DB 09H			; small_ase_missile_mask
	DB	07H
	DB	0fcH
	DB	0fdH
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	ORG $+1
?large_engine_bar_marker@@3PADA DB 07H			; large_engine_bar_marker
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	ORG $+3
?small_engine_bar_marker@@3PADA DB 04H			; small_engine_bar_marker
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
?hellfire_missile_data@@3PADA DB 0fH			; hellfire_missile_data
	DB	027H
	DB	0f9H
	DB	0edH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	ORG $+3
?inverted_hellfire_missile_data@@3PADA DB 0fH		; inverted_hellfire_missile_data
	DB	027H
	DB	0f9H
	DB	0edH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	ORG $+3
?stinger_missile_data@@3PADA DB 0fH			; stinger_missile_data
	DB	01fH
	DB	0f9H
	DB	0f1H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?inverted_stinger_missile_data@@3PADA DB 0fH		; inverted_stinger_missile_data
	DB	01fH
	DB	0f9H
	DB	0f1H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A DD 02H ; flir_light_levels
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A DD 01H ; flir_noise_levels
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
?dtv_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A DD 02H ; dtv_light_levels
	DD	02H
	DD	02H
	DD	02H
	DD	01H
	DD	02H
	DD	01H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
?dtv_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A DD 01H ; dtv_noise_levels
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
?dvo_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A DD 02H ; dvo_light_levels
	DD	02H
	DD	02H
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
?dvo_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A DD 01H ; dvo_noise_levels
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
	DD	02H
	DD	01H
	DD	02H
	DD	03H
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?get_previous_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z
_TEXT	SEGMENT
tv64 = -72						; size = 4
_previous_mfd_mode$ = -4				; size = 4
_mfd_mode$ = 8						; size = 4
?get_previous_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z PROC	; get_previous_mfd_mode, COMDAT

; 10348: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10349: 	mfd_modes
; 10350: 		previous_mfd_mode;
; 10351: 
; 10352: 	switch (mfd_mode)

  00009	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  0000c	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  0000f	83 7d b8 0c	 cmp	 DWORD PTR tv64[ebp], 12	; 0000000cH
  00013	77 64		 ja	 SHORT $LN14@get_previo
  00015	8b 4d b8	 mov	 ecx, DWORD PTR tv64[ebp]
  00018	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN16@get_previo[ecx*4]
$LN4@get_previo:

; 10353: 	{
; 10354: 		case MFD_MODE_OFF:
; 10355: 		{
; 10356: 			previous_mfd_mode = MFD_MODE_TSD;

  0001f	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 8

; 10357: 
; 10358: 			break;

  00026	eb 62		 jmp	 SHORT $LN2@get_previo
$LN5@get_previo:

; 10359: 		}
; 10360: 		case MFD_MODE_DAMAGED:
; 10361: 		{
; 10362: 			previous_mfd_mode = MFD_MODE_DAMAGED;

  00028	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 1

; 10363: 
; 10364: 			break;

  0002f	eb 59		 jmp	 SHORT $LN2@get_previo
$LN6@get_previo:

; 10365: 		}
; 10366: 		case MFD_MODE_GROUND_RADAR:
; 10367: 		{
; 10368: 			previous_mfd_mode = MFD_MODE_ENGINE;

  00031	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 12 ; 0000000cH

; 10369: 
; 10370: 			break;

  00038	eb 50		 jmp	 SHORT $LN2@get_previo
$LN7@get_previo:

; 10371: 		}
; 10372: 		case MFD_MODE_AIR_RADAR:
; 10373: 		{
; 10374: 			previous_mfd_mode = MFD_MODE_GROUND_RADAR;

  0003a	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 2

; 10375: 
; 10376: 			break;

  00041	eb 47		 jmp	 SHORT $LN2@get_previo
$LN8@get_previo:

; 10377: 		}
; 10378: 		case MFD_MODE_FLIR:
; 10379: 		case MFD_MODE_DTV:
; 10380: 		case MFD_MODE_DVO:
; 10381: 		{
; 10382: 			previous_mfd_mode = MFD_MODE_ENGINE;

  00043	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 12 ; 0000000cH

; 10383: 
; 10384: 			break;

  0004a	eb 3e		 jmp	 SHORT $LN2@get_previo
$LN9@get_previo:

; 10385: 		}
; 10386: 		case MFD_MODE_TSD:
; 10387: 		{
; 10388: 			previous_mfd_mode = MFD_MODE_ENGINE;

  0004c	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 12 ; 0000000cH

; 10389: 
; 10390: 			break;

  00053	eb 35		 jmp	 SHORT $LN2@get_previo
$LN10@get_previo:

; 10391: 		}
; 10392: 		case MFD_MODE_ASE:
; 10393: 		{
; 10394: 			previous_mfd_mode = MFD_MODE_TSD;

  00055	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 8

; 10395: 
; 10396: 			break;

  0005c	eb 2c		 jmp	 SHORT $LN2@get_previo
$LN11@get_previo:

; 10397: 		}
; 10398: 		case MFD_MODE_WEAPON:
; 10399: 		{
; 10400: 			previous_mfd_mode = MFD_MODE_ASE;

  0005e	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 9

; 10401: 
; 10402: 			break;

  00065	eb 23		 jmp	 SHORT $LN2@get_previo
$LN12@get_previo:

; 10403: 		}
; 10404: 		case MFD_MODE_SYSTEM:
; 10405: 		{
; 10406: 			previous_mfd_mode = MFD_MODE_WEAPON;

  00067	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 10 ; 0000000aH

; 10407: 
; 10408: 			break;

  0006e	eb 1a		 jmp	 SHORT $LN2@get_previo
$LN13@get_previo:

; 10409: 		}
; 10410: 		case MFD_MODE_ENGINE:
; 10411: 		{
; 10412: 			previous_mfd_mode = MFD_MODE_SYSTEM;

  00070	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 11 ; 0000000bH

; 10413: 
; 10414: 			break;

  00077	eb 11		 jmp	 SHORT $LN2@get_previo
$LN14@get_previo:

; 10415: 		}
; 10416: 		default:
; 10417: 		{
; 10418: 			debug_fatal ("Invalid mfd mode = %d", mfd_mode);

  00079	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  0007c	50		 push	 eax
  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@CLGDNIGP@Invalid?5mfd?5mode?5?$DN?5?$CFd@
  00082	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00087	83 c4 08	 add	 esp, 8
$LN2@get_previo:

; 10419: 
; 10420: 			break;
; 10421: 		}
; 10422: 	}
; 10423: 
; 10424: 	return (previous_mfd_mode);

  0008a	8b 45 fc	 mov	 eax, DWORD PTR _previous_mfd_mode$[ebp]

; 10425: }

  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
  00096	66 90		 npad	 2
$LN16@get_previo:
  00098	00 00 00 00	 DD	 $LN4@get_previo
  0009c	00 00 00 00	 DD	 $LN5@get_previo
  000a0	00 00 00 00	 DD	 $LN6@get_previo
  000a4	00 00 00 00	 DD	 $LN7@get_previo
  000a8	00 00 00 00	 DD	 $LN8@get_previo
  000ac	00 00 00 00	 DD	 $LN8@get_previo
  000b0	00 00 00 00	 DD	 $LN8@get_previo
  000b4	00 00 00 00	 DD	 $LN14@get_previo
  000b8	00 00 00 00	 DD	 $LN9@get_previo
  000bc	00 00 00 00	 DD	 $LN10@get_previo
  000c0	00 00 00 00	 DD	 $LN11@get_previo
  000c4	00 00 00 00	 DD	 $LN12@get_previo
  000c8	00 00 00 00	 DD	 $LN13@get_previo
?get_previous_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z ENDP	; get_previous_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?get_next_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z
_TEXT	SEGMENT
tv64 = -72						; size = 4
_next_mfd_mode$ = -4					; size = 4
_mfd_mode$ = 8						; size = 4
?get_next_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z PROC	; get_next_mfd_mode, COMDAT

; 10254: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10255: 	mfd_modes
; 10256: 		next_mfd_mode;
; 10257: 
; 10258: 	switch (mfd_mode)

  00009	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  0000c	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  0000f	83 7d b8 0c	 cmp	 DWORD PTR tv64[ebp], 12	; 0000000cH
  00013	77 77		 ja	 SHORT $LN16@get_next_m
  00015	8b 4d b8	 mov	 ecx, DWORD PTR tv64[ebp]
  00018	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN18@get_next_m[ecx*4]
$LN4@get_next_m:

; 10259: 	{
; 10260: 		case MFD_MODE_OFF:
; 10261: 		{
; 10262: 			next_mfd_mode = MFD_MODE_TSD;

  0001f	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 8

; 10263: 
; 10264: 			break;

  00026	eb 75		 jmp	 SHORT $LN2@get_next_m
$LN5@get_next_m:

; 10265: 		}
; 10266: 		case MFD_MODE_DAMAGED:
; 10267: 		{
; 10268: 			next_mfd_mode = MFD_MODE_DAMAGED;

  00028	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 1

; 10269: 
; 10270: 			break;

  0002f	eb 6c		 jmp	 SHORT $LN2@get_next_m
$LN6@get_next_m:

; 10271: 		}
; 10272: 		case MFD_MODE_GROUND_RADAR:
; 10273: 		{
; 10274: 			next_mfd_mode = MFD_MODE_AIR_RADAR;

  00031	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 3

; 10275: 
; 10276: 			break;

  00038	eb 63		 jmp	 SHORT $LN2@get_next_m
$LN7@get_next_m:

; 10277: 		}
; 10278: 		case MFD_MODE_AIR_RADAR:
; 10279: 		{
; 10280: 			next_mfd_mode = get_mfd_mode_for_eo_sensor ();

  0003a	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  0003f	89 45 fc	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax

; 10281: 
; 10282: 			break;

  00042	eb 59		 jmp	 SHORT $LN2@get_next_m
$LN8@get_next_m:

; 10283: 		}
; 10284: 		case MFD_MODE_FLIR:
; 10285: 		{
; 10286: 			next_mfd_mode = MFD_MODE_TSD;

  00044	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 8

; 10287: 
; 10288: 			break;

  0004b	eb 50		 jmp	 SHORT $LN2@get_next_m
$LN9@get_next_m:

; 10289: 		}
; 10290: 		case MFD_MODE_DTV:
; 10291: 		{
; 10292: 			next_mfd_mode = MFD_MODE_TSD;

  0004d	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 8

; 10293: 
; 10294: 			break;

  00054	eb 47		 jmp	 SHORT $LN2@get_next_m
$LN10@get_next_m:

; 10295: 		}
; 10296: 		case MFD_MODE_DVO:
; 10297: 		{
; 10298: 			next_mfd_mode = MFD_MODE_TSD;

  00056	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 8

; 10299: 
; 10300: 			break;

  0005d	eb 3e		 jmp	 SHORT $LN2@get_next_m
$LN11@get_next_m:

; 10301: 		}
; 10302: 		case MFD_MODE_TSD:
; 10303: 		{
; 10304: 			next_mfd_mode = MFD_MODE_ASE;

  0005f	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 9

; 10305: 
; 10306: 			break;

  00066	eb 35		 jmp	 SHORT $LN2@get_next_m
$LN12@get_next_m:

; 10307: 		}
; 10308: 		case MFD_MODE_ASE:
; 10309: 		{
; 10310: 			next_mfd_mode = MFD_MODE_WEAPON;

  00068	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 10 ; 0000000aH

; 10311: 
; 10312: 			break;

  0006f	eb 2c		 jmp	 SHORT $LN2@get_next_m
$LN13@get_next_m:

; 10313: 		}
; 10314: 		case MFD_MODE_WEAPON:
; 10315: 		{
; 10316: 			next_mfd_mode = MFD_MODE_SYSTEM;

  00071	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 11 ; 0000000bH

; 10317: 
; 10318: 			break;

  00078	eb 23		 jmp	 SHORT $LN2@get_next_m
$LN14@get_next_m:

; 10319: 		}
; 10320: 		case MFD_MODE_SYSTEM:
; 10321: 		{
; 10322: 			next_mfd_mode = MFD_MODE_ENGINE;

  0007a	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 12 ; 0000000cH

; 10323: 
; 10324: 			break;

  00081	eb 1a		 jmp	 SHORT $LN2@get_next_m
$LN15@get_next_m:

; 10325: 		}
; 10326: 		case MFD_MODE_ENGINE:
; 10327: 		{
; 10328: 			next_mfd_mode = MFD_MODE_TSD;

  00083	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 8

; 10329: 
; 10330: 			break;

  0008a	eb 11		 jmp	 SHORT $LN2@get_next_m
$LN16@get_next_m:

; 10331: 		}
; 10332: 		default:
; 10333: 		{
; 10334: 			debug_fatal ("Invalid mfd mode = %d", mfd_mode);

  0008c	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  0008f	50		 push	 eax
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@CLGDNIGP@Invalid?5mfd?5mode?5?$DN?5?$CFd@
  00095	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0009a	83 c4 08	 add	 esp, 8
$LN2@get_next_m:

; 10335: 
; 10336: 			break;
; 10337: 		}
; 10338: 	}
; 10339: 
; 10340: 	return (next_mfd_mode);

  0009d	8b 45 fc	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]

; 10341: }

  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c2 04 00	 ret	 4
  000a9	0f 1f 00	 npad	 3
$LN18@get_next_m:
  000ac	00 00 00 00	 DD	 $LN4@get_next_m
  000b0	00 00 00 00	 DD	 $LN5@get_next_m
  000b4	00 00 00 00	 DD	 $LN6@get_next_m
  000b8	00 00 00 00	 DD	 $LN7@get_next_m
  000bc	00 00 00 00	 DD	 $LN8@get_next_m
  000c0	00 00 00 00	 DD	 $LN9@get_next_m
  000c4	00 00 00 00	 DD	 $LN10@get_next_m
  000c8	00 00 00 00	 DD	 $LN16@get_next_m
  000cc	00 00 00 00	 DD	 $LN11@get_next_m
  000d0	00 00 00 00	 DD	 $LN12@get_next_m
  000d4	00 00 00 00	 DD	 $LN13@get_next_m
  000d8	00 00 00 00	 DD	 $LN14@get_next_m
  000dc	00 00 00 00	 DD	 $LN15@get_next_m
?get_next_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z ENDP	; get_next_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ
_TEXT	SEGMENT
_mfd_mode$ = -4						; size = 4
?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ PROC	; get_mfd_mode_for_eo_sensor, COMDAT

; 10145: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10146: 	mfd_modes
; 10147: 		mfd_mode;
; 10148: 
; 10149: 	if (eo_sensor == TARGET_ACQUISITION_SYSTEM_FLIR)

  00009	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 3 ; eo_sensor
  00010	75 09		 jne	 SHORT $LN2@get_mfd_mo

; 10150: 	{
; 10151: 		mfd_mode = MFD_MODE_FLIR;

  00012	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 4
  00019	eb 37		 jmp	 SHORT $LN3@get_mfd_mo
$LN2@get_mfd_mo:

; 10152: 	}
; 10153: 	else if (eo_sensor == TARGET_ACQUISITION_SYSTEM_DTV)

  0001b	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 4 ; eo_sensor
  00022	75 09		 jne	 SHORT $LN4@get_mfd_mo

; 10154: 	{
; 10155: 		mfd_mode = MFD_MODE_DTV;

  00024	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 5
  0002b	eb 25		 jmp	 SHORT $LN3@get_mfd_mo
$LN4@get_mfd_mo:

; 10156: 	}
; 10157: 	else if (eo_sensor == TARGET_ACQUISITION_SYSTEM_DVO)

  0002d	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 5 ; eo_sensor
  00034	75 09		 jne	 SHORT $LN6@get_mfd_mo

; 10158: 	{
; 10159: 		mfd_mode = MFD_MODE_DVO;

  00036	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 6

; 10160: 	}
; 10161: 	else

  0003d	eb 13		 jmp	 SHORT $LN3@get_mfd_mo
$LN6@get_mfd_mo:

; 10162: 	{
; 10163: 		debug_fatal ("Invalid EO sensor = %d", eo_sensor);

  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; eo_sensor
  00044	50		 push	 eax
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@
  0004a	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0004f	83 c4 08	 add	 esp, 8
$LN3@get_mfd_mo:

; 10164: 	}
; 10165: 
; 10166: 	return (mfd_mode);

  00052	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]

; 10167: }

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ENDP	; get_mfd_mode_for_eo_sensor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_translucent_mfd_background@@YGXMMMM@Z
_TEXT	SEGMENT
_specular$ = -264					; size = 4
_colour$ = -260						; size = 4
_quad$ = -256						; size = 256
_x_min$ = 8						; size = 4
_y_min$ = 12						; size = 4
_x_max$ = 16						; size = 4
_y_max$ = 20						; size = 4
?draw_translucent_mfd_background@@YGXMMMM@Z PROC	; draw_translucent_mfd_background, COMDAT

; 9475 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 48 01 00
	00		 sub	 esp, 328		; 00000148H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 9476 : 	vertex
; 9477 : 		quad[4];
; 9478 : 
; 9479 : 	real_colour
; 9480 : 		colour,
; 9481 : 		specular;
; 9482 : 
; 9483 : 	set_3d_active_environment (main_3d_env);

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 9484 : 
; 9485 : 	if (begin_3d_scene ())

  00017	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  0001c	85 c0		 test	 eax, eax
  0001e	0f 84 5a 02 00
	00		 je	 $LN2@draw_trans

; 9486 : 	{
; 9487 : 		colour.red = 0;

  00024	c6 85 fe fe ff
	ff 00		 mov	 BYTE PTR _colour$[ebp+2], 0

; 9488 : 		colour.green = 0;

  0002b	c6 85 fd fe ff
	ff 00		 mov	 BYTE PTR _colour$[ebp+1], 0

; 9489 : 		colour.blue = 0;

  00032	c6 85 fc fe ff
	ff 00		 mov	 BYTE PTR _colour$[ebp], 0

; 9490 : 		colour.alpha = 64;

  00039	c6 85 ff fe ff
	ff 40		 mov	 BYTE PTR _colour$[ebp+3], 64 ; 00000040H

; 9491 : 
; 9492 : 		specular.red = 0;

  00040	c6 85 fa fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+2], 0

; 9493 : 		specular.green = 0;

  00047	c6 85 f9 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+1], 0

; 9494 : 		specular.blue = 0;

  0004e	c6 85 f8 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp], 0

; 9495 : 		specular.alpha = 255;

  00055	c6 85 fb fe ff
	ff ff		 mov	 BYTE PTR _specular$[ebp+3], 255 ; 000000ffH

; 9496 : 
; 9497 : 		set_d3d_transparency_on ();

  0005c	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 9498 : 
; 9499 : 		set_d3d_zbuffer_comparison (FALSE);

  00061	6a 00		 push	 0
  00063	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 9500 : 
; 9501 : 		set_d3d_plain_renderstate ();

  00068	e8 00 00 00 00	 call	 ?set_d3d_plain_renderstate@@YGXXZ ; set_d3d_plain_renderstate

; 9502 : 
; 9503 : 		set_d3d_culling (FALSE);

  0006d	6a 00		 push	 0
  0006f	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 9504 : 
; 9505 : 		quad[0].i = x_min;

  00074	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00079	6b c8 00	 imul	 ecx, eax, 0
  0007c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00081	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 9506 : 		quad[0].j = y_min;

  0008a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0008f	6b c8 00	 imul	 ecx, eax, 0
  00092	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_min$[ebp]
  00097	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 9507 : 		quad[0].z = 0.5;

  000a0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000a5	6b c8 00	 imul	 ecx, eax, 0
  000a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000b0	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 9508 : 		quad[0].q = 0.5;

  000b9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000be	6b c8 00	 imul	 ecx, eax, 0
  000c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000c9	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 9509 : 		quad[0].next_vertex = &quad[1];

  000d2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000d7	c1 e0 00	 shl	 eax, 0
  000da	8d 8c 05 00 ff
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  000e1	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000e6	6b c2 00	 imul	 eax, edx, 0
  000e9	89 8c 05 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], ecx

; 9510 : 
; 9511 : 		quad[1].i = x_max;

  000f0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000f5	c1 e0 00	 shl	 eax, 0
  000f8	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  000fd	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 9512 : 		quad[1].j = y_min;

  00106	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0010b	c1 e0 00	 shl	 eax, 0
  0010e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_min$[ebp]
  00113	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 9513 : 		quad[1].z = 0.5;

  0011c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00121	c1 e0 00	 shl	 eax, 0
  00124	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0012c	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 9514 : 		quad[1].q = 0.5;

  00135	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0013a	c1 e0 00	 shl	 eax, 0
  0013d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00145	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 9515 : 		quad[1].next_vertex = &quad[2];

  0014e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00153	d1 e0		 shl	 eax, 1
  00155	8d 8c 05 00 ff
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  0015c	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00161	c1 e2 00	 shl	 edx, 0
  00164	89 8c 15 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+edx+40], ecx

; 9516 : 
; 9517 : 		quad[2].i = x_max;

  0016b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00170	d1 e0		 shl	 eax, 1
  00172	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00177	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 9518 : 		quad[2].j = y_max;

  00180	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00185	d1 e0		 shl	 eax, 1
  00187	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_max$[ebp]
  0018c	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 9519 : 		quad[2].z = 0.5;

  00195	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0019a	d1 e0		 shl	 eax, 1
  0019c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001a4	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 9520 : 		quad[2].q = 0.5;

  001ad	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001b2	d1 e0		 shl	 eax, 1
  001b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001bc	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 9521 : 		quad[2].next_vertex = &quad[3];

  001c5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001ca	6b c8 03	 imul	 ecx, eax, 3
  001cd	8d 94 0d 00 ff
	ff ff		 lea	 edx, DWORD PTR _quad$[ebp+ecx]
  001d4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001d9	d1 e0		 shl	 eax, 1
  001db	89 94 05 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], edx

; 9522 : 
; 9523 : 		quad[3].i = x_min;

  001e2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001e7	6b c8 03	 imul	 ecx, eax, 3
  001ea	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  001ef	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 9524 : 		quad[3].j = y_max;

  001f8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001fd	6b c8 03	 imul	 ecx, eax, 3
  00200	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_max$[ebp]
  00205	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 9525 : 		quad[3].z = 0.5;

  0020e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00213	6b c8 03	 imul	 ecx, eax, 3
  00216	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0021e	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 9526 : 		quad[3].q = 0.5;

  00227	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0022c	6b c8 03	 imul	 ecx, eax, 3
  0022f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00237	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 9527 : 		quad[3].next_vertex = NULL;

  00240	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00245	6b c8 03	 imul	 ecx, eax, 3
  00248	c7 84 0d 28 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$[ebp+ecx+40], 0

; 9528 : 
; 9529 : 		draw_wbuffered_plain_polygon (quad, colour, specular);

  00253	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _specular$[ebp]
  00259	50		 push	 eax
  0025a	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _colour$[ebp]
  00260	51		 push	 ecx
  00261	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR _quad$[ebp]
  00267	52		 push	 edx
  00268	e8 00 00 00 00	 call	 ?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_plain_polygon

; 9530 : 
; 9531 : 		set_d3d_transparency_off ();

  0026d	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 9532 : 
; 9533 : 		set_d3d_zbuffer_comparison (TRUE);

  00272	6a 01		 push	 1
  00274	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 9534 : 
; 9535 : 		end_3d_scene ();

  00279	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN2@draw_trans:

; 9536 : 	}
; 9537 : }

  0027e	5f		 pop	 edi
  0027f	5e		 pop	 esi
  00280	5b		 pop	 ebx
  00281	8b e5		 mov	 esp, ebp
  00283	5d		 pop	 ebp
  00284	c2 10 00	 ret	 16			; 00000010H
?draw_translucent_mfd_background@@YGXMMMM@Z ENDP	; draw_translucent_mfd_background
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_engine_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv1636 = -188						; size = 8
tv1416 = -188						; size = 8
tv1203 = -188						; size = 8
tv974 = -188						; size = 8
tv753 = -188						; size = 8
tv544 = -188						; size = 8
tv327 = -188						; size = 8
tv89 = -188						; size = 8
tv1637 = -180						; size = 8
tv1417 = -180						; size = 8
tv1204 = -180						; size = 8
tv975 = -180						; size = 8
tv754 = -180						; size = 8
tv545 = -180						; size = 8
tv328 = -180						; size = 8
tv90 = -180						; size = 8
_digital_readout$ = -108				; size = 4
_bar_value$ = -104					; size = 4
_y3$ = -100						; size = 4
_y2$ = -96						; size = 4
_y1$ = -92						; size = 4
_x1$ = -88						; size = 4
_i$ = -84						; size = 4
_buffer$ = -80						; size = 80
?draw_engine_display_mfd@@YGXXZ PROC			; draw_engine_display_mfd, COMDAT

; 7965 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 7966 : 	char
; 7967 : 		buffer[80];
; 7968 : 
; 7969 : 	int
; 7970 : 		i;
; 7971 : 
; 7972 : 	float
; 7973 : 		x1,
; 7974 : 		y1,
; 7975 : 		y2,
; 7976 : 		y3,
; 7977 : 		bar_value,
; 7978 : 		digital_readout;
; 7979 : 
; 7980 : 	set_mono_font_colour (MFD_COLOUR1);

  0000c	b8 04 00 00 00	 mov	 eax, 4
  00011	6b c8 00	 imul	 ecx, eax, 0
  00014	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7981 : 
; 7982 : 	if (draw_large_mfd)

  00020	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00027	74 09		 je	 SHORT $LN2@draw_engin

; 7983 : 	{
; 7984 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  00029	6a 05		 push	 5
  0002b	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 7985 : 	}
; 7986 : 	else

  00030	eb 07		 jmp	 SHORT $LN3@draw_engin
$LN2@draw_engin:

; 7987 : 	{
; 7988 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  00032	6a 00		 push	 0
  00034	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN3@draw_engin:

; 7989 : 	}
; 7990 : 
; 7991 : 	////////////////////////////////////////
; 7992 : 	//
; 7993 : 	// engine torque
; 7994 : 	//
; 7995 : 	////////////////////////////////////////
; 7996 : 
; 7997 : 	set_2d_mono_font_position (-0.8, 0.6);

  00039	51		 push	 ecx
  0003a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00042	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00047	51		 push	 ecx
  00048	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00050	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00055	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7998 : 
; 7999 : 	if (draw_large_mfd)

  0005a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00061	74 23		 je	 SHORT $LN4@draw_engin

; 8000 : 	{
; 8001 : 		set_mono_font_rel_position (-6.0, -16.0);

  00063	51		 push	 ecx
  00064	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1800000
  0006c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00071	51		 push	 ecx
  00072	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  0007a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8002 : 	}
; 8003 : 	else

  00084	eb 21		 jmp	 SHORT $LN5@draw_engin
$LN4@draw_engin:

; 8004 : 	{
; 8005 : 		set_mono_font_rel_position (-4.0, -7.0);

  00086	51		 push	 ecx
  00087	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0e00000
  0008f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00094	51		 push	 ecx
  00095	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  0009d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN5@draw_engin:

; 8006 : 	}
; 8007 : 
; 8008 : 	print_mono_font_string ("TORQUE");

  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_06JNBMPGOL@TORQUE@
  000ac	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8009 : 
; 8010 : 	//
; 8011 : 	// engine 1 torque
; 8012 : 	//
; 8013 : 
; 8014 : 	digital_readout = bound (current_flight_dynamics->left_engine_torque.value, 0.0, 120.0);

  000b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000b6	f3 0f 5a 80 ac
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7340]
  000be	0f 57 c9	 xorps	 xmm1, xmm1
  000c1	66 0f 2f c8	 comisd	 xmm1, xmm0
  000c5	76 0d		 jbe	 SHORT $LN67@draw_engin
  000c7	0f 57 c0	 xorps	 xmm0, xmm0
  000ca	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv90[ebp], xmm0
  000d2	eb 50		 jmp	 SHORT $LN68@draw_engin
$LN67@draw_engin:
  000d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000da	f3 0f 5a 81 ac
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7340]
  000e2	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  000ea	76 12		 jbe	 SHORT $LN65@draw_engin
  000ec	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  000f4	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv89[ebp], xmm0
  000fc	eb 16		 jmp	 SHORT $LN66@draw_engin
$LN65@draw_engin:
  000fe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00104	f3 0f 5a 82 ac
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7340]
  0010c	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv89[ebp], xmm0
$LN66@draw_engin:
  00114	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv89[ebp]
  0011c	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv90[ebp], xmm0
$LN68@draw_engin:
  00124	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv90[ebp]
  0012c	f3 0f 11 45 94	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 8015 : 
; 8016 : 	convert_float_to_int (digital_readout, &i);

  00131	8d 45 ac	 lea	 eax, DWORD PTR _i$[ebp]
  00134	50		 push	 eax
  00135	51		 push	 ecx
  00136	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  0013b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00140	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 8017 : 
; 8018 : 	sprintf (buffer, "%03d", i);

  00145	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  00148	50		 push	 eax
  00149	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  0014e	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00151	51		 push	 ecx
  00152	e8 00 00 00 00	 call	 _sprintf
  00157	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8019 : 
; 8020 : 	set_2d_mono_font_position (-0.8, -0.6);

  0015a	51		 push	 ecx
  0015b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00163	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00168	51		 push	 ecx
  00169	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00171	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00176	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8021 : 
; 8022 : 	if (draw_large_mfd)

  0017b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00182	74 23		 je	 SHORT $LN6@draw_engin

; 8023 : 	{
; 8024 : 		set_mono_font_rel_position (-13.0, 8.0);

  00184	51		 push	 ecx
  00185	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  0018d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00192	51		 push	 ecx
  00193	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1500000
  0019b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a0	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8025 : 	}
; 8026 : 	else

  001a5	eb 21		 jmp	 SHORT $LN7@draw_engin
$LN6@draw_engin:

; 8027 : 	{
; 8028 : 		set_mono_font_rel_position (-6.0, 3.0);

  001a7	51		 push	 ecx
  001a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  001b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b5	51		 push	 ecx
  001b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  001be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c3	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN7@draw_engin:

; 8029 : 	}
; 8030 : 
; 8031 : 	print_mono_font_string (buffer);

  001c8	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  001cb	50		 push	 eax
  001cc	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8032 : 
; 8033 : 	set_2d_mono_font_position (-0.8, -0.6);

  001d1	51		 push	 ecx
  001d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  001da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001df	51		 push	 ecx
  001e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  001e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ed	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8034 : 
; 8035 : 	if (draw_large_mfd)

  001f2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  001f9	74 1e		 je	 SHORT $LN8@draw_engin

; 8036 : 	{
; 8037 : 		set_mono_font_rel_position (0.0, 25.0);

  001fb	51		 push	 ecx
  001fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41c80000
  00204	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00209	51		 push	 ecx
  0020a	0f 57 c0	 xorps	 xmm0, xmm0
  0020d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00212	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8038 : 	}
; 8039 : 	else

  00217	eb 1c		 jmp	 SHORT $LN9@draw_engin
$LN8@draw_engin:

; 8040 : 	{
; 8041 : 		set_mono_font_rel_position (0.0, 13.0);

  00219	51		 push	 ecx
  0021a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41500000
  00222	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00227	51		 push	 ecx
  00228	0f 57 c0	 xorps	 xmm0, xmm0
  0022b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00230	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN9@draw_engin:

; 8042 : 	}
; 8043 : 
; 8044 : 	print_mono_font_char ('1');

  00235	6a 31		 push	 49			; 00000031H
  00237	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 8045 : 
; 8046 : 	bar_value = digital_readout * 0.01;

  0023c	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _digital_readout$[ebp]
  00241	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  00249	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0024d	f3 0f 11 45 98	 movss	 DWORD PTR _bar_value$[ebp], xmm0

; 8047 : 
; 8048 : 	get_2d_float_screen_coordinates (-0.8, 0.6, &x1, &y1);

  00252	8d 45 a4	 lea	 eax, DWORD PTR _y1$[ebp]
  00255	50		 push	 eax
  00256	8d 4d a8	 lea	 ecx, DWORD PTR _x1$[ebp]
  00259	51		 push	 ecx
  0025a	51		 push	 ecx
  0025b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00263	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00268	51		 push	 ecx
  00269	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00271	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00276	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 8049 : 	get_2d_float_screen_y_coordinate (-0.6, &y2);

  0027b	8d 45 a0	 lea	 eax, DWORD PTR _y2$[ebp]
  0027e	50		 push	 eax
  0027f	51		 push	 ecx
  00280	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00288	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028d	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8050 : 	get_2d_float_screen_y_coordinate (-0.6 + bar_value, &y3);

  00292	8d 45 9c	 lea	 eax, DWORD PTR _y3$[ebp]
  00295	50		 push	 eax
  00296	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _bar_value$[ebp]
  0029b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfe3333333333333
  002a3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002a7	51		 push	 ecx
  002a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ad	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8051 : 
; 8052 : 	if (draw_large_mfd)

  002b2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  002b9	0f 84 84 02 00
	00		 je	 $LN10@draw_engin

; 8053 : 	{
; 8054 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  002bf	b8 04 00 00 00	 mov	 eax, 4
  002c4	6b c8 00	 imul	 ecx, eax, 0
  002c7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002cd	52		 push	 edx
  002ce	51		 push	 ecx
  002cf	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  002d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d9	51		 push	 ecx
  002da	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  002df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e4	51		 push	 ecx
  002e5	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  002ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ef	51		 push	 ecx
  002f0	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  002f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fa	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8055 : 		draw_line (x1 + 4.0, y1, x1 + 4.0, y2, MFD_COLOUR1);

  002ff	b8 04 00 00 00	 mov	 eax, 4
  00304	6b c8 00	 imul	 ecx, eax, 0
  00307	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0030d	52		 push	 edx
  0030e	51		 push	 ecx
  0030f	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00314	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00319	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0031e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  00326	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0032a	51		 push	 ecx
  0032b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00330	51		 push	 ecx
  00331	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00336	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033b	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00340	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  00348	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0034c	51		 push	 ecx
  0034d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00352	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8056 : 		draw_line (x1, y1, x1 + 4.0, y1, MFD_COLOUR1);

  00357	b8 04 00 00 00	 mov	 eax, 4
  0035c	6b c8 00	 imul	 ecx, eax, 0
  0035f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00365	52		 push	 edx
  00366	51		 push	 ecx
  00367	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0036c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00371	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00376	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  0037e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00382	51		 push	 ecx
  00383	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00388	51		 push	 ecx
  00389	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0038e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00393	51		 push	 ecx
  00394	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00399	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039e	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8057 : 		draw_line (x1, y2, x1 + 4.0, y2, MFD_COLOUR1);

  003a3	b8 04 00 00 00	 mov	 eax, 4
  003a8	6b c8 00	 imul	 ecx, eax, 0
  003ab	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003b1	52		 push	 edx
  003b2	51		 push	 ecx
  003b3	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  003b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003bd	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  003c2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  003ca	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003ce	51		 push	 ecx
  003cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d4	51		 push	 ecx
  003d5	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  003da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003df	51		 push	 ecx
  003e0	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  003e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ea	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8058 : 
; 8059 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  003ef	b8 04 00 00 00	 mov	 eax, 4
  003f4	6b c8 00	 imul	 ecx, eax, 0
  003f7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003fd	52		 push	 edx
  003fe	51		 push	 ecx
  003ff	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  00404	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00409	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0040e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00416	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0041a	51		 push	 ecx
  0041b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00420	51		 push	 ecx
  00421	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00426	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042b	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00430	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00438	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0043c	51		 push	 ecx
  0043d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00442	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8060 : 		draw_line (x1 + 2.0, y2, x1 + 2.0, y3, MFD_COLOUR1);

  00447	b8 04 00 00 00	 mov	 eax, 4
  0044c	6b c8 00	 imul	 ecx, eax, 0
  0044f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00455	52		 push	 edx
  00456	51		 push	 ecx
  00457	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  0045c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00461	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00466	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0046e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00472	51		 push	 ecx
  00473	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00478	51		 push	 ecx
  00479	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0047e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00483	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00488	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00490	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00494	51		 push	 ecx
  00495	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0049a	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8061 : 		draw_line (x1 + 3.0, y2, x1 + 3.0, y3, MFD_COLOUR1);

  0049f	b8 04 00 00 00	 mov	 eax, 4
  004a4	6b c8 00	 imul	 ecx, eax, 0
  004a7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004ad	52		 push	 edx
  004ae	51		 push	 ecx
  004af	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  004b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b9	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  004be	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  004c6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004ca	51		 push	 ecx
  004cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d0	51		 push	 ecx
  004d1	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  004d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004db	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  004e0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  004e8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004ec	51		 push	 ecx
  004ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004f2	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8062 : 
; 8063 : 		draw_mono_sprite (large_engine_bar_marker, x1 + 5.0, y1 + 30.0, MFD_COLOUR1);

  004f7	b8 04 00 00 00	 mov	 eax, 4
  004fc	6b c8 00	 imul	 ecx, eax, 0
  004ff	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00505	52		 push	 edx
  00506	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  0050b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@403e000000000000
  00513	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00517	51		 push	 ecx
  00518	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0051d	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00522	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4014000000000000
  0052a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0052e	51		 push	 ecx
  0052f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00534	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  00539	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 8064 : 	}
; 8065 : 	else

  0053e	e9 cf 01 00 00	 jmp	 $LN11@draw_engin
$LN10@draw_engin:

; 8066 : 	{
; 8067 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  00543	b8 04 00 00 00	 mov	 eax, 4
  00548	6b c8 00	 imul	 ecx, eax, 0
  0054b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00551	52		 push	 edx
  00552	51		 push	 ecx
  00553	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00558	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0055d	51		 push	 ecx
  0055e	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00563	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00568	51		 push	 ecx
  00569	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0056e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00573	51		 push	 ecx
  00574	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00579	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057e	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8068 : 		draw_line (x1 + 2.0, y1, x1 + 2.0, y2, MFD_COLOUR1);

  00583	b8 04 00 00 00	 mov	 eax, 4
  00588	6b c8 00	 imul	 ecx, eax, 0
  0058b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00591	52		 push	 edx
  00592	51		 push	 ecx
  00593	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00598	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0059d	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  005a2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  005aa	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005ae	51		 push	 ecx
  005af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b4	51		 push	 ecx
  005b5	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  005ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005bf	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  005c4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  005cc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005d0	51		 push	 ecx
  005d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d6	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8069 : 		draw_line (x1, y1, x1 + 2.0, y1, MFD_COLOUR1);

  005db	b8 04 00 00 00	 mov	 eax, 4
  005e0	6b c8 00	 imul	 ecx, eax, 0
  005e3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005e9	52		 push	 edx
  005ea	51		 push	 ecx
  005eb	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  005f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f5	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  005fa	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00602	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00606	51		 push	 ecx
  00607	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0060c	51		 push	 ecx
  0060d	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00612	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00617	51		 push	 ecx
  00618	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0061d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00622	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8070 : 		draw_line (x1, y2, x1 + 2.0, y2, MFD_COLOUR1);

  00627	b8 04 00 00 00	 mov	 eax, 4
  0062c	6b c8 00	 imul	 ecx, eax, 0
  0062f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00635	52		 push	 edx
  00636	51		 push	 ecx
  00637	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0063c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00641	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00646	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0064e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00652	51		 push	 ecx
  00653	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00658	51		 push	 ecx
  00659	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0065e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00663	51		 push	 ecx
  00664	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00669	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0066e	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8071 : 
; 8072 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  00673	b8 04 00 00 00	 mov	 eax, 4
  00678	6b c8 00	 imul	 ecx, eax, 0
  0067b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00681	52		 push	 edx
  00682	51		 push	 ecx
  00683	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  00688	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0068d	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00692	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0069a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0069e	51		 push	 ecx
  0069f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a4	51		 push	 ecx
  006a5	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  006aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006af	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  006b4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  006bc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006c0	51		 push	 ecx
  006c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006c6	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8073 : 
; 8074 : 		draw_mono_sprite (small_engine_bar_marker, x1 + 3.0, y1 + 11.0, MFD_COLOUR1);

  006cb	b8 04 00 00 00	 mov	 eax, 4
  006d0	6b c8 00	 imul	 ecx, eax, 0
  006d3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006d9	52		 push	 edx
  006da	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  006df	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4026000000000000
  006e7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006eb	51		 push	 ecx
  006ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f1	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  006f6	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  006fe	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00702	51		 push	 ecx
  00703	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00708	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  0070d	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite
$LN11@draw_engin:

; 8075 : 	}
; 8076 : 
; 8077 : 	//
; 8078 : 	// engine 2 torque
; 8079 : 	//
; 8080 : 
; 8081 : 	digital_readout = bound (current_flight_dynamics->right_engine_torque.value, 0.0, 120.0);

  00712	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00717	f3 0f 5a 80 0c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7436]
  0071f	0f 57 c9	 xorps	 xmm1, xmm1
  00722	66 0f 2f c8	 comisd	 xmm1, xmm0
  00726	76 0d		 jbe	 SHORT $LN71@draw_engin
  00728	0f 57 c0	 xorps	 xmm0, xmm0
  0072b	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv328[ebp], xmm0
  00733	eb 50		 jmp	 SHORT $LN72@draw_engin
$LN71@draw_engin:
  00735	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0073b	f3 0f 5a 81 0c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7436]
  00743	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  0074b	76 12		 jbe	 SHORT $LN69@draw_engin
  0074d	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  00755	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv327[ebp], xmm0
  0075d	eb 16		 jmp	 SHORT $LN70@draw_engin
$LN69@draw_engin:
  0075f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00765	f3 0f 5a 82 0c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7436]
  0076d	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv327[ebp], xmm0
$LN70@draw_engin:
  00775	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv327[ebp]
  0077d	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv328[ebp], xmm0
$LN72@draw_engin:
  00785	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv328[ebp]
  0078d	f3 0f 11 45 94	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 8082 : 
; 8083 : 	convert_float_to_int (digital_readout, &i);

  00792	8d 45 ac	 lea	 eax, DWORD PTR _i$[ebp]
  00795	50		 push	 eax
  00796	51		 push	 ecx
  00797	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  0079c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a1	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 8084 : 
; 8085 : 	sprintf (buffer, "%03d", i);

  007a6	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  007a9	50		 push	 eax
  007aa	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  007af	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  007b2	51		 push	 ecx
  007b3	e8 00 00 00 00	 call	 _sprintf
  007b8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8086 : 
; 8087 : 	set_2d_mono_font_position (-0.6 - 0.025, -0.6);

  007bb	51		 push	 ecx
  007bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  007c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c9	51		 push	 ecx
  007ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf200000
  007d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d7	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8088 : 
; 8089 : 	if (draw_large_mfd)

  007dc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  007e3	74 23		 je	 SHORT $LN12@draw_engin

; 8090 : 	{
; 8091 : 		set_mono_font_rel_position (-4.0, 8.0);

  007e5	51		 push	 ecx
  007e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  007ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f3	51		 push	 ecx
  007f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  007fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00801	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8092 : 	}
; 8093 : 	else

  00806	eb 21		 jmp	 SHORT $LN13@draw_engin
$LN12@draw_engin:

; 8094 : 	{
; 8095 : 		set_mono_font_rel_position (-2.0, 3.0);

  00808	51		 push	 ecx
  00809	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  00811	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00816	51		 push	 ecx
  00817	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  0081f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00824	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN13@draw_engin:

; 8096 : 	}
; 8097 : 
; 8098 : 	print_mono_font_string (buffer);

  00829	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  0082c	50		 push	 eax
  0082d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8099 : 
; 8100 : 	set_2d_mono_font_position (-0.6 - 0.025, -0.6);

  00832	51		 push	 ecx
  00833	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  0083b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00840	51		 push	 ecx
  00841	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf200000
  00849	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0084e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8101 : 
; 8102 : 	if (draw_large_mfd)

  00853	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0085a	74 1e		 je	 SHORT $LN14@draw_engin

; 8103 : 	{
; 8104 : 		set_mono_font_rel_position (0.0, 25.0);

  0085c	51		 push	 ecx
  0085d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41c80000
  00865	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0086a	51		 push	 ecx
  0086b	0f 57 c0	 xorps	 xmm0, xmm0
  0086e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00873	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8105 : 	}
; 8106 : 	else

  00878	eb 1c		 jmp	 SHORT $LN15@draw_engin
$LN14@draw_engin:

; 8107 : 	{
; 8108 : 		set_mono_font_rel_position (0.0, 13.0);

  0087a	51		 push	 ecx
  0087b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41500000
  00883	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00888	51		 push	 ecx
  00889	0f 57 c0	 xorps	 xmm0, xmm0
  0088c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00891	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN15@draw_engin:

; 8109 : 	}
; 8110 : 
; 8111 : 	print_mono_font_char ('2');

  00896	6a 32		 push	 50			; 00000032H
  00898	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 8112 : 
; 8113 : 	bar_value = digital_readout * 0.01;

  0089d	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _digital_readout$[ebp]
  008a2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  008aa	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  008ae	f3 0f 11 45 98	 movss	 DWORD PTR _bar_value$[ebp], xmm0

; 8114 : 
; 8115 : 	get_2d_float_screen_coordinates (-0.6 - 0.025, 0.6, &x1, &y1);

  008b3	8d 45 a4	 lea	 eax, DWORD PTR _y1$[ebp]
  008b6	50		 push	 eax
  008b7	8d 4d a8	 lea	 ecx, DWORD PTR _x1$[ebp]
  008ba	51		 push	 ecx
  008bb	51		 push	 ecx
  008bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  008c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c9	51		 push	 ecx
  008ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf200000
  008d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d7	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 8116 : 	get_2d_float_screen_y_coordinate (-0.6, &y2);

  008dc	8d 45 a0	 lea	 eax, DWORD PTR _y2$[ebp]
  008df	50		 push	 eax
  008e0	51		 push	 ecx
  008e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  008e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ee	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8117 : 	get_2d_float_screen_y_coordinate (-0.6 + bar_value, &y3);

  008f3	8d 45 9c	 lea	 eax, DWORD PTR _y3$[ebp]
  008f6	50		 push	 eax
  008f7	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _bar_value$[ebp]
  008fc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfe3333333333333
  00904	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00908	51		 push	 ecx
  00909	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0090e	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8118 : 
; 8119 : 	if (draw_large_mfd)

  00913	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0091a	0f 84 84 02 00
	00		 je	 $LN16@draw_engin

; 8120 : 	{
; 8121 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  00920	b8 04 00 00 00	 mov	 eax, 4
  00925	6b c8 00	 imul	 ecx, eax, 0
  00928	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0092e	52		 push	 edx
  0092f	51		 push	 ecx
  00930	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00935	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0093a	51		 push	 ecx
  0093b	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00940	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00945	51		 push	 ecx
  00946	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0094b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00950	51		 push	 ecx
  00951	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00956	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0095b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8122 : 		draw_line (x1 + 4.0, y1, x1 + 4.0, y2, MFD_COLOUR1);

  00960	b8 04 00 00 00	 mov	 eax, 4
  00965	6b c8 00	 imul	 ecx, eax, 0
  00968	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0096e	52		 push	 edx
  0096f	51		 push	 ecx
  00970	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00975	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0097a	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0097f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  00987	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0098b	51		 push	 ecx
  0098c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00991	51		 push	 ecx
  00992	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00997	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0099c	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  009a1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  009a9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009ad	51		 push	 ecx
  009ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b3	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8123 : 		draw_line (x1, y1, x1 + 4.0, y1, MFD_COLOUR1);

  009b8	b8 04 00 00 00	 mov	 eax, 4
  009bd	6b c8 00	 imul	 ecx, eax, 0
  009c0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009c6	52		 push	 edx
  009c7	51		 push	 ecx
  009c8	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  009cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009d2	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  009d7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  009df	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009e3	51		 push	 ecx
  009e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009e9	51		 push	 ecx
  009ea	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  009ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009f4	51		 push	 ecx
  009f5	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  009fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ff	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8124 : 		draw_line (x1, y2, x1 + 4.0, y2, MFD_COLOUR1);

  00a04	b8 04 00 00 00	 mov	 eax, 4
  00a09	6b c8 00	 imul	 ecx, eax, 0
  00a0c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a12	52		 push	 edx
  00a13	51		 push	 ecx
  00a14	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00a19	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a1e	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00a23	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  00a2b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a2f	51		 push	 ecx
  00a30	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a35	51		 push	 ecx
  00a36	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00a3b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a40	51		 push	 ecx
  00a41	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00a46	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a4b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8125 : 
; 8126 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  00a50	b8 04 00 00 00	 mov	 eax, 4
  00a55	6b c8 00	 imul	 ecx, eax, 0
  00a58	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a5e	52		 push	 edx
  00a5f	51		 push	 ecx
  00a60	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  00a65	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a6a	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00a6f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00a77	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a7b	51		 push	 ecx
  00a7c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a81	51		 push	 ecx
  00a82	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00a87	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a8c	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00a91	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00a99	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a9d	51		 push	 ecx
  00a9e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa3	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8127 : 		draw_line (x1 + 2.0, y2, x1 + 2.0, y3, MFD_COLOUR1);

  00aa8	b8 04 00 00 00	 mov	 eax, 4
  00aad	6b c8 00	 imul	 ecx, eax, 0
  00ab0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ab6	52		 push	 edx
  00ab7	51		 push	 ecx
  00ab8	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  00abd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac2	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00ac7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00acf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ad3	51		 push	 ecx
  00ad4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ad9	51		 push	 ecx
  00ada	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00adf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ae4	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00ae9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00af1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00af5	51		 push	 ecx
  00af6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00afb	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8128 : 		draw_line (x1 + 3.0, y2, x1 + 3.0, y3, MFD_COLOUR1);

  00b00	b8 04 00 00 00	 mov	 eax, 4
  00b05	6b c8 00	 imul	 ecx, eax, 0
  00b08	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b0e	52		 push	 edx
  00b0f	51		 push	 ecx
  00b10	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  00b15	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b1a	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00b1f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  00b27	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b2b	51		 push	 ecx
  00b2c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b31	51		 push	 ecx
  00b32	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00b37	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b3c	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00b41	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  00b49	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b4d	51		 push	 ecx
  00b4e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b53	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8129 : 
; 8130 : 		draw_mono_sprite (large_engine_bar_marker, x1 - 7.0, y1 + 30.0, MFD_COLOUR1);

  00b58	b8 04 00 00 00	 mov	 eax, 4
  00b5d	6b c8 00	 imul	 ecx, eax, 0
  00b60	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b66	52		 push	 edx
  00b67	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  00b6c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@403e000000000000
  00b74	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b78	51		 push	 ecx
  00b79	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b7e	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00b83	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401c000000000000
  00b8b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b8f	51		 push	 ecx
  00b90	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b95	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  00b9a	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 8131 : 	}
; 8132 : 	else

  00b9f	e9 cf 01 00 00	 jmp	 $LN17@draw_engin
$LN16@draw_engin:

; 8133 : 	{
; 8134 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  00ba4	b8 04 00 00 00	 mov	 eax, 4
  00ba9	6b c8 00	 imul	 ecx, eax, 0
  00bac	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00bb2	52		 push	 edx
  00bb3	51		 push	 ecx
  00bb4	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00bb9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bbe	51		 push	 ecx
  00bbf	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00bc4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bc9	51		 push	 ecx
  00bca	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00bcf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bd4	51		 push	 ecx
  00bd5	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00bda	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bdf	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8135 : 		draw_line (x1 + 2.0, y1, x1 + 2.0, y2, MFD_COLOUR1);

  00be4	b8 04 00 00 00	 mov	 eax, 4
  00be9	6b c8 00	 imul	 ecx, eax, 0
  00bec	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00bf2	52		 push	 edx
  00bf3	51		 push	 ecx
  00bf4	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00bf9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bfe	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00c03	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00c0b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c0f	51		 push	 ecx
  00c10	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c15	51		 push	 ecx
  00c16	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00c1b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c20	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00c25	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00c2d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c31	51		 push	 ecx
  00c32	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c37	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8136 : 		draw_line (x1, y1, x1 + 2.0, y1, MFD_COLOUR1);

  00c3c	b8 04 00 00 00	 mov	 eax, 4
  00c41	6b c8 00	 imul	 ecx, eax, 0
  00c44	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c4a	52		 push	 edx
  00c4b	51		 push	 ecx
  00c4c	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00c51	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c56	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00c5b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00c63	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c67	51		 push	 ecx
  00c68	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c6d	51		 push	 ecx
  00c6e	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00c73	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c78	51		 push	 ecx
  00c79	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00c7e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c83	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8137 : 		draw_line (x1, y2, x1 + 2.0, y2, MFD_COLOUR1);

  00c88	b8 04 00 00 00	 mov	 eax, 4
  00c8d	6b c8 00	 imul	 ecx, eax, 0
  00c90	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c96	52		 push	 edx
  00c97	51		 push	 ecx
  00c98	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00c9d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ca2	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00ca7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00caf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00cb3	51		 push	 ecx
  00cb4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cb9	51		 push	 ecx
  00cba	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00cbf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cc4	51		 push	 ecx
  00cc5	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00cca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ccf	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8138 : 
; 8139 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  00cd4	b8 04 00 00 00	 mov	 eax, 4
  00cd9	6b c8 00	 imul	 ecx, eax, 0
  00cdc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ce2	52		 push	 edx
  00ce3	51		 push	 ecx
  00ce4	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  00ce9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cee	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00cf3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00cfb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00cff	51		 push	 ecx
  00d00	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d05	51		 push	 ecx
  00d06	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00d0b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d10	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00d15	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00d1d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00d21	51		 push	 ecx
  00d22	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d27	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8140 : 
; 8141 : 		draw_mono_sprite (small_engine_bar_marker, x1 - 4.0, y1 + 11.0, MFD_COLOUR1);

  00d2c	b8 04 00 00 00	 mov	 eax, 4
  00d31	6b c8 00	 imul	 ecx, eax, 0
  00d34	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00d3a	52		 push	 edx
  00d3b	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  00d40	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4026000000000000
  00d48	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00d4c	51		 push	 ecx
  00d4d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d52	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  00d57	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4010000000000000
  00d5f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00d63	51		 push	 ecx
  00d64	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d69	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  00d6e	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite
$LN17@draw_engin:

; 8142 : 	}
; 8143 : 
; 8144 : 	////////////////////////////////////////
; 8145 : 	//
; 8146 : 	// engine temperature
; 8147 : 	//
; 8148 : 	////////////////////////////////////////
; 8149 : 
; 8150 : 	set_2d_mono_font_position (-0.3, 0.6);

  00d73	51		 push	 ecx
  00d74	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00d7c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d81	51		 push	 ecx
  00d82	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  00d8a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d8f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8151 : 
; 8152 : 	if (draw_large_mfd)

  00d94	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00d9b	74 23		 je	 SHORT $LN18@draw_engin

; 8153 : 	{
; 8154 : 		set_mono_font_rel_position (2.0, -16.0);

  00d9d	51		 push	 ecx
  00d9e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1800000
  00da6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dab	51		 push	 ecx
  00dac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00db4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00db9	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8155 : 	}
; 8156 : 	else

  00dbe	eb 1c		 jmp	 SHORT $LN19@draw_engin
$LN18@draw_engin:

; 8157 : 	{
; 8158 : 		set_mono_font_rel_position (0.0, -7.0);

  00dc0	51		 push	 ecx
  00dc1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0e00000
  00dc9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dce	51		 push	 ecx
  00dcf	0f 57 c0	 xorps	 xmm0, xmm0
  00dd2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dd7	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN19@draw_engin:

; 8159 : 	}
; 8160 : 
; 8161 : 	print_mono_font_string ("TEMP");

  00ddc	68 00 00 00 00	 push	 OFFSET ??_C@_04JKHNIKCB@TEMP@
  00de1	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8162 : 
; 8163 : 	//
; 8164 : 	// engine 1 temperature
; 8165 : 	//
; 8166 : 
; 8167 : 	digital_readout = bound (current_flight_dynamics->left_engine_temp.value * 0.125, 0.0, 125.0);

  00de6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00deb	f3 0f 5a 80 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7364]
  00df3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc0000000000000
  00dfb	0f 57 c9	 xorps	 xmm1, xmm1
  00dfe	66 0f 2f c8	 comisd	 xmm1, xmm0
  00e02	76 0d		 jbe	 SHORT $LN75@draw_engin
  00e04	0f 57 c0	 xorps	 xmm0, xmm0
  00e07	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv545[ebp], xmm0
  00e0f	eb 60		 jmp	 SHORT $LN76@draw_engin
$LN75@draw_engin:
  00e11	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00e17	f3 0f 5a 81 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7364]
  00e1f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc0000000000000
  00e27	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405f400000000000
  00e2f	76 12		 jbe	 SHORT $LN73@draw_engin
  00e31	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405f400000000000
  00e39	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv544[ebp], xmm0
  00e41	eb 1e		 jmp	 SHORT $LN74@draw_engin
$LN73@draw_engin:
  00e43	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00e49	f3 0f 5a 82 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7364]
  00e51	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc0000000000000
  00e59	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv544[ebp], xmm0
$LN74@draw_engin:
  00e61	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv544[ebp]
  00e69	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv545[ebp], xmm0
$LN76@draw_engin:
  00e71	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv545[ebp]
  00e79	f3 0f 11 45 94	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 8168 : 
; 8169 : 	convert_float_to_int (digital_readout, &i);

  00e7e	8d 45 ac	 lea	 eax, DWORD PTR _i$[ebp]
  00e81	50		 push	 eax
  00e82	51		 push	 ecx
  00e83	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  00e88	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e8d	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 8170 : 
; 8171 : 	sprintf (buffer, "%03d", i);

  00e92	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  00e95	50		 push	 eax
  00e96	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  00e9b	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00e9e	51		 push	 ecx
  00e9f	e8 00 00 00 00	 call	 _sprintf
  00ea4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8172 : 
; 8173 : 	set_2d_mono_font_position (-0.3, -0.6);

  00ea7	51		 push	 ecx
  00ea8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00eb0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eb5	51		 push	 ecx
  00eb6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  00ebe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ec3	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8174 : 
; 8175 : 	if (draw_large_mfd)

  00ec8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00ecf	74 23		 je	 SHORT $LN20@draw_engin

; 8176 : 	{
; 8177 : 		set_mono_font_rel_position (-13.0, 8.0);

  00ed1	51		 push	 ecx
  00ed2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  00eda	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00edf	51		 push	 ecx
  00ee0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1500000
  00ee8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eed	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8178 : 	}
; 8179 : 	else

  00ef2	eb 21		 jmp	 SHORT $LN21@draw_engin
$LN20@draw_engin:

; 8180 : 	{
; 8181 : 		set_mono_font_rel_position (-6.0, 3.0);

  00ef4	51		 push	 ecx
  00ef5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  00efd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f02	51		 push	 ecx
  00f03	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  00f0b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f10	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN21@draw_engin:

; 8182 : 	}
; 8183 : 
; 8184 : 	print_mono_font_string (buffer);

  00f15	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  00f18	50		 push	 eax
  00f19	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8185 : 
; 8186 : 	set_2d_mono_font_position (-0.3, -0.6);

  00f1e	51		 push	 ecx
  00f1f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00f27	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f2c	51		 push	 ecx
  00f2d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  00f35	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f3a	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8187 : 
; 8188 : 	if (draw_large_mfd)

  00f3f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00f46	74 1e		 je	 SHORT $LN22@draw_engin

; 8189 : 	{
; 8190 : 		set_mono_font_rel_position (0.0, 25.0);

  00f48	51		 push	 ecx
  00f49	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41c80000
  00f51	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f56	51		 push	 ecx
  00f57	0f 57 c0	 xorps	 xmm0, xmm0
  00f5a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f5f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8191 : 	}
; 8192 : 	else

  00f64	eb 1c		 jmp	 SHORT $LN23@draw_engin
$LN22@draw_engin:

; 8193 : 	{
; 8194 : 		set_mono_font_rel_position (0.0, 13.0);

  00f66	51		 push	 ecx
  00f67	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41500000
  00f6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f74	51		 push	 ecx
  00f75	0f 57 c0	 xorps	 xmm0, xmm0
  00f78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f7d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN23@draw_engin:

; 8195 : 	}
; 8196 : 
; 8197 : 	print_mono_font_char ('1');

  00f82	6a 31		 push	 49			; 00000031H
  00f84	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 8198 : 
; 8199 : 	bar_value = digital_readout * 0.0096;

  00f89	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _digital_readout$[ebp]
  00f8e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f83a92a30553261
  00f96	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00f9a	f3 0f 11 45 98	 movss	 DWORD PTR _bar_value$[ebp], xmm0

; 8200 : 
; 8201 : 	get_2d_float_screen_coordinates (-0.3, 0.6, &x1, &y1);

  00f9f	8d 45 a4	 lea	 eax, DWORD PTR _y1$[ebp]
  00fa2	50		 push	 eax
  00fa3	8d 4d a8	 lea	 ecx, DWORD PTR _x1$[ebp]
  00fa6	51		 push	 ecx
  00fa7	51		 push	 ecx
  00fa8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00fb0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fb5	51		 push	 ecx
  00fb6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  00fbe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fc3	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 8202 : 	get_2d_float_screen_y_coordinate (-0.6, &y2);

  00fc8	8d 45 a0	 lea	 eax, DWORD PTR _y2$[ebp]
  00fcb	50		 push	 eax
  00fcc	51		 push	 ecx
  00fcd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00fd5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fda	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8203 : 	get_2d_float_screen_y_coordinate (-0.6 + bar_value, &y3);

  00fdf	8d 45 9c	 lea	 eax, DWORD PTR _y3$[ebp]
  00fe2	50		 push	 eax
  00fe3	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _bar_value$[ebp]
  00fe8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfe3333333333333
  00ff0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ff4	51		 push	 ecx
  00ff5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ffa	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8204 : 
; 8205 : 	if (draw_large_mfd)

  00fff	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01006	0f 84 84 02 00
	00		 je	 $LN24@draw_engin

; 8206 : 	{
; 8207 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  0100c	b8 04 00 00 00	 mov	 eax, 4
  01011	6b c8 00	 imul	 ecx, eax, 0
  01014	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0101a	52		 push	 edx
  0101b	51		 push	 ecx
  0101c	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01021	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01026	51		 push	 ecx
  01027	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0102c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01031	51		 push	 ecx
  01032	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01037	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0103c	51		 push	 ecx
  0103d	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01042	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01047	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8208 : 		draw_line (x1 + 4.0, y1, x1 + 4.0, y2, MFD_COLOUR1);

  0104c	b8 04 00 00 00	 mov	 eax, 4
  01051	6b c8 00	 imul	 ecx, eax, 0
  01054	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0105a	52		 push	 edx
  0105b	51		 push	 ecx
  0105c	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01061	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01066	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0106b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  01073	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01077	51		 push	 ecx
  01078	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0107d	51		 push	 ecx
  0107e	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01083	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01088	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0108d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  01095	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01099	51		 push	 ecx
  0109a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0109f	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8209 : 		draw_line (x1, y1, x1 + 4.0, y1, MFD_COLOUR1);

  010a4	b8 04 00 00 00	 mov	 eax, 4
  010a9	6b c8 00	 imul	 ecx, eax, 0
  010ac	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  010b2	52		 push	 edx
  010b3	51		 push	 ecx
  010b4	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  010b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010be	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  010c3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  010cb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  010cf	51		 push	 ecx
  010d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010d5	51		 push	 ecx
  010d6	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  010db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010e0	51		 push	 ecx
  010e1	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  010e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010eb	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8210 : 		draw_line (x1, y2, x1 + 4.0, y2, MFD_COLOUR1);

  010f0	b8 04 00 00 00	 mov	 eax, 4
  010f5	6b c8 00	 imul	 ecx, eax, 0
  010f8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  010fe	52		 push	 edx
  010ff	51		 push	 ecx
  01100	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01105	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0110a	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0110f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  01117	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0111b	51		 push	 ecx
  0111c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01121	51		 push	 ecx
  01122	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01127	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0112c	51		 push	 ecx
  0112d	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01132	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01137	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8211 : 
; 8212 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  0113c	b8 04 00 00 00	 mov	 eax, 4
  01141	6b c8 00	 imul	 ecx, eax, 0
  01144	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0114a	52		 push	 edx
  0114b	51		 push	 ecx
  0114c	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  01151	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01156	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0115b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  01163	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01167	51		 push	 ecx
  01168	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0116d	51		 push	 ecx
  0116e	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01173	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01178	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0117d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  01185	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01189	51		 push	 ecx
  0118a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0118f	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8213 : 		draw_line (x1 + 2.0, y2, x1 + 2.0, y3, MFD_COLOUR1);

  01194	b8 04 00 00 00	 mov	 eax, 4
  01199	6b c8 00	 imul	 ecx, eax, 0
  0119c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  011a2	52		 push	 edx
  011a3	51		 push	 ecx
  011a4	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  011a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011ae	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  011b3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  011bb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  011bf	51		 push	 ecx
  011c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011c5	51		 push	 ecx
  011c6	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  011cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011d0	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  011d5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  011dd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  011e1	51		 push	 ecx
  011e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011e7	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8214 : 		draw_line (x1 + 3.0, y2, x1 + 3.0, y3, MFD_COLOUR1);

  011ec	b8 04 00 00 00	 mov	 eax, 4
  011f1	6b c8 00	 imul	 ecx, eax, 0
  011f4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  011fa	52		 push	 edx
  011fb	51		 push	 ecx
  011fc	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  01201	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01206	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0120b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  01213	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01217	51		 push	 ecx
  01218	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0121d	51		 push	 ecx
  0121e	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01223	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01228	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0122d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  01235	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01239	51		 push	 ecx
  0123a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0123f	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8215 : 
; 8216 : 		draw_mono_sprite (large_engine_bar_marker, x1 + 5.0, y1 + 37.0, MFD_COLOUR1);

  01244	b8 04 00 00 00	 mov	 eax, 4
  01249	6b c8 00	 imul	 ecx, eax, 0
  0124c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01252	52		 push	 edx
  01253	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  01258	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4042800000000000
  01260	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01264	51		 push	 ecx
  01265	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0126a	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0126f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4014000000000000
  01277	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0127b	51		 push	 ecx
  0127c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01281	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  01286	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 8217 : 	}
; 8218 : 	else

  0128b	e9 cf 01 00 00	 jmp	 $LN25@draw_engin
$LN24@draw_engin:

; 8219 : 	{
; 8220 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  01290	b8 04 00 00 00	 mov	 eax, 4
  01295	6b c8 00	 imul	 ecx, eax, 0
  01298	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0129e	52		 push	 edx
  0129f	51		 push	 ecx
  012a0	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  012a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012aa	51		 push	 ecx
  012ab	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  012b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012b5	51		 push	 ecx
  012b6	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  012bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012c0	51		 push	 ecx
  012c1	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  012c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012cb	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8221 : 		draw_line (x1 + 2.0, y1, x1 + 2.0, y2, MFD_COLOUR1);

  012d0	b8 04 00 00 00	 mov	 eax, 4
  012d5	6b c8 00	 imul	 ecx, eax, 0
  012d8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  012de	52		 push	 edx
  012df	51		 push	 ecx
  012e0	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  012e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012ea	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  012ef	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  012f7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  012fb	51		 push	 ecx
  012fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01301	51		 push	 ecx
  01302	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01307	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0130c	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01311	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01319	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0131d	51		 push	 ecx
  0131e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01323	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8222 : 		draw_line (x1, y1, x1 + 2.0, y1, MFD_COLOUR1);

  01328	b8 04 00 00 00	 mov	 eax, 4
  0132d	6b c8 00	 imul	 ecx, eax, 0
  01330	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01336	52		 push	 edx
  01337	51		 push	 ecx
  01338	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0133d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01342	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01347	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0134f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01353	51		 push	 ecx
  01354	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01359	51		 push	 ecx
  0135a	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0135f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01364	51		 push	 ecx
  01365	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0136a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0136f	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8223 : 		draw_line (x1, y2, x1 + 2.0, y2, MFD_COLOUR1);

  01374	b8 04 00 00 00	 mov	 eax, 4
  01379	6b c8 00	 imul	 ecx, eax, 0
  0137c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01382	52		 push	 edx
  01383	51		 push	 ecx
  01384	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01389	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0138e	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01393	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0139b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0139f	51		 push	 ecx
  013a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013a5	51		 push	 ecx
  013a6	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  013ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013b0	51		 push	 ecx
  013b1	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  013b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013bb	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8224 : 
; 8225 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  013c0	b8 04 00 00 00	 mov	 eax, 4
  013c5	6b c8 00	 imul	 ecx, eax, 0
  013c8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  013ce	52		 push	 edx
  013cf	51		 push	 ecx
  013d0	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  013d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013da	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  013df	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  013e7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  013eb	51		 push	 ecx
  013ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013f1	51		 push	 ecx
  013f2	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  013f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013fc	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01401	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  01409	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0140d	51		 push	 ecx
  0140e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01413	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8226 : 
; 8227 : 		draw_mono_sprite (small_engine_bar_marker, x1 + 3.0, y1 + 13.0, MFD_COLOUR1);

  01418	b8 04 00 00 00	 mov	 eax, 4
  0141d	6b c8 00	 imul	 ecx, eax, 0
  01420	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01426	52		 push	 edx
  01427	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  0142c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@402a000000000000
  01434	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01438	51		 push	 ecx
  01439	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0143e	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01443	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  0144b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0144f	51		 push	 ecx
  01450	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01455	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  0145a	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite
$LN25@draw_engin:

; 8228 : 	}
; 8229 : 
; 8230 : 	//
; 8231 : 	// engine 2 temperature
; 8232 : 	//
; 8233 : 
; 8234 : 	digital_readout = bound (current_flight_dynamics->right_engine_temp.value * 0.125, 0.0, 125.0);

  0145f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01464	f3 0f 5a 80 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7460]
  0146c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc0000000000000
  01474	0f 57 c9	 xorps	 xmm1, xmm1
  01477	66 0f 2f c8	 comisd	 xmm1, xmm0
  0147b	76 0d		 jbe	 SHORT $LN79@draw_engin
  0147d	0f 57 c0	 xorps	 xmm0, xmm0
  01480	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv754[ebp], xmm0
  01488	eb 60		 jmp	 SHORT $LN80@draw_engin
$LN79@draw_engin:
  0148a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01490	f3 0f 5a 81 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7460]
  01498	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc0000000000000
  014a0	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405f400000000000
  014a8	76 12		 jbe	 SHORT $LN77@draw_engin
  014aa	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405f400000000000
  014b2	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv753[ebp], xmm0
  014ba	eb 1e		 jmp	 SHORT $LN78@draw_engin
$LN77@draw_engin:
  014bc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  014c2	f3 0f 5a 82 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7460]
  014ca	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc0000000000000
  014d2	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv753[ebp], xmm0
$LN78@draw_engin:
  014da	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv753[ebp]
  014e2	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv754[ebp], xmm0
$LN80@draw_engin:
  014ea	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv754[ebp]
  014f2	f3 0f 11 45 94	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 8235 : 
; 8236 : 	convert_float_to_int (digital_readout, &i);

  014f7	8d 45 ac	 lea	 eax, DWORD PTR _i$[ebp]
  014fa	50		 push	 eax
  014fb	51		 push	 ecx
  014fc	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  01501	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01506	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 8237 : 
; 8238 : 	sprintf (buffer, "%03d", i);

  0150b	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  0150e	50		 push	 eax
  0150f	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  01514	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  01517	51		 push	 ecx
  01518	e8 00 00 00 00	 call	 _sprintf
  0151d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8239 : 
; 8240 : 	set_2d_mono_font_position (-0.1 - 0.025, -0.6);

  01520	51		 push	 ecx
  01521	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  01529	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0152e	51		 push	 ecx
  0152f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be000000
  01537	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0153c	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8241 : 
; 8242 : 	if (draw_large_mfd)

  01541	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01548	74 23		 je	 SHORT $LN26@draw_engin

; 8243 : 	{
; 8244 : 		set_mono_font_rel_position (-4.0, 8.0);

  0154a	51		 push	 ecx
  0154b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  01553	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01558	51		 push	 ecx
  01559	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  01561	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01566	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8245 : 	}
; 8246 : 	else

  0156b	eb 21		 jmp	 SHORT $LN27@draw_engin
$LN26@draw_engin:

; 8247 : 	{
; 8248 : 		set_mono_font_rel_position (-2.0, 3.0);

  0156d	51		 push	 ecx
  0156e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  01576	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0157b	51		 push	 ecx
  0157c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  01584	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01589	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN27@draw_engin:

; 8249 : 	}
; 8250 : 
; 8251 : 	print_mono_font_string (buffer);

  0158e	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  01591	50		 push	 eax
  01592	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8252 : 
; 8253 : 	set_2d_mono_font_position (-0.1 - 0.025, -0.6);

  01597	51		 push	 ecx
  01598	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  015a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015a5	51		 push	 ecx
  015a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be000000
  015ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015b3	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8254 : 
; 8255 : 	if (draw_large_mfd)

  015b8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  015bf	74 1e		 je	 SHORT $LN28@draw_engin

; 8256 : 	{
; 8257 : 		set_mono_font_rel_position (0.0, 25.0);

  015c1	51		 push	 ecx
  015c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41c80000
  015ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015cf	51		 push	 ecx
  015d0	0f 57 c0	 xorps	 xmm0, xmm0
  015d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015d8	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8258 : 	}
; 8259 : 	else

  015dd	eb 1c		 jmp	 SHORT $LN29@draw_engin
$LN28@draw_engin:

; 8260 : 	{
; 8261 : 		set_mono_font_rel_position (0.0, 13.0);

  015df	51		 push	 ecx
  015e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41500000
  015e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015ed	51		 push	 ecx
  015ee	0f 57 c0	 xorps	 xmm0, xmm0
  015f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015f6	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN29@draw_engin:

; 8262 : 	}
; 8263 : 
; 8264 : 	print_mono_font_char ('2');

  015fb	6a 32		 push	 50			; 00000032H
  015fd	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 8265 : 
; 8266 : 	bar_value = digital_readout * 0.0096;

  01602	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _digital_readout$[ebp]
  01607	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f83a92a30553261
  0160f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01613	f3 0f 11 45 98	 movss	 DWORD PTR _bar_value$[ebp], xmm0

; 8267 : 
; 8268 : 	get_2d_float_screen_coordinates (-0.1 - 0.025, 0.6, &x1, &y1);

  01618	8d 45 a4	 lea	 eax, DWORD PTR _y1$[ebp]
  0161b	50		 push	 eax
  0161c	8d 4d a8	 lea	 ecx, DWORD PTR _x1$[ebp]
  0161f	51		 push	 ecx
  01620	51		 push	 ecx
  01621	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  01629	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0162e	51		 push	 ecx
  0162f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be000000
  01637	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0163c	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 8269 : 	get_2d_float_screen_y_coordinate (-0.6, &y2);

  01641	8d 45 a0	 lea	 eax, DWORD PTR _y2$[ebp]
  01644	50		 push	 eax
  01645	51		 push	 ecx
  01646	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  0164e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01653	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8270 : 	get_2d_float_screen_y_coordinate (-0.6 + bar_value, &y3);

  01658	8d 45 9c	 lea	 eax, DWORD PTR _y3$[ebp]
  0165b	50		 push	 eax
  0165c	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _bar_value$[ebp]
  01661	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfe3333333333333
  01669	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0166d	51		 push	 ecx
  0166e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01673	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8271 : 
; 8272 : 	if (draw_large_mfd)

  01678	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0167f	0f 84 84 02 00
	00		 je	 $LN30@draw_engin

; 8273 : 	{
; 8274 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  01685	b8 04 00 00 00	 mov	 eax, 4
  0168a	6b c8 00	 imul	 ecx, eax, 0
  0168d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01693	52		 push	 edx
  01694	51		 push	 ecx
  01695	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0169a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0169f	51		 push	 ecx
  016a0	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  016a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016aa	51		 push	 ecx
  016ab	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  016b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016b5	51		 push	 ecx
  016b6	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  016bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016c0	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8275 : 		draw_line (x1 + 4.0, y1, x1 + 4.0, y2, MFD_COLOUR1);

  016c5	b8 04 00 00 00	 mov	 eax, 4
  016ca	6b c8 00	 imul	 ecx, eax, 0
  016cd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  016d3	52		 push	 edx
  016d4	51		 push	 ecx
  016d5	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  016da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016df	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  016e4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  016ec	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  016f0	51		 push	 ecx
  016f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016f6	51		 push	 ecx
  016f7	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  016fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01701	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01706	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  0170e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01712	51		 push	 ecx
  01713	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01718	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8276 : 		draw_line (x1, y1, x1 + 4.0, y1, MFD_COLOUR1);

  0171d	b8 04 00 00 00	 mov	 eax, 4
  01722	6b c8 00	 imul	 ecx, eax, 0
  01725	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0172b	52		 push	 edx
  0172c	51		 push	 ecx
  0172d	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01732	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01737	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0173c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  01744	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01748	51		 push	 ecx
  01749	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0174e	51		 push	 ecx
  0174f	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01754	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01759	51		 push	 ecx
  0175a	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0175f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01764	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8277 : 		draw_line (x1, y2, x1 + 4.0, y2, MFD_COLOUR1);

  01769	b8 04 00 00 00	 mov	 eax, 4
  0176e	6b c8 00	 imul	 ecx, eax, 0
  01771	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01777	52		 push	 edx
  01778	51		 push	 ecx
  01779	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0177e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01783	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01788	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  01790	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01794	51		 push	 ecx
  01795	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0179a	51		 push	 ecx
  0179b	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  017a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017a5	51		 push	 ecx
  017a6	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  017ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017b0	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8278 : 
; 8279 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  017b5	b8 04 00 00 00	 mov	 eax, 4
  017ba	6b c8 00	 imul	 ecx, eax, 0
  017bd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  017c3	52		 push	 edx
  017c4	51		 push	 ecx
  017c5	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  017ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017cf	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  017d4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  017dc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  017e0	51		 push	 ecx
  017e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017e6	51		 push	 ecx
  017e7	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  017ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017f1	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  017f6	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  017fe	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01802	51		 push	 ecx
  01803	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01808	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8280 : 		draw_line (x1 + 2.0, y2, x1 + 2.0, y3, MFD_COLOUR1);

  0180d	b8 04 00 00 00	 mov	 eax, 4
  01812	6b c8 00	 imul	 ecx, eax, 0
  01815	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0181b	52		 push	 edx
  0181c	51		 push	 ecx
  0181d	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  01822	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01827	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0182c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01834	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01838	51		 push	 ecx
  01839	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0183e	51		 push	 ecx
  0183f	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01844	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01849	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0184e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01856	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0185a	51		 push	 ecx
  0185b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01860	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8281 : 		draw_line (x1 + 3.0, y2, x1 + 3.0, y3, MFD_COLOUR1);

  01865	b8 04 00 00 00	 mov	 eax, 4
  0186a	6b c8 00	 imul	 ecx, eax, 0
  0186d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01873	52		 push	 edx
  01874	51		 push	 ecx
  01875	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  0187a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0187f	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01884	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  0188c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01890	51		 push	 ecx
  01891	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01896	51		 push	 ecx
  01897	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0189c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018a1	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  018a6	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  018ae	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  018b2	51		 push	 ecx
  018b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018b8	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8282 : 
; 8283 : 		draw_mono_sprite (large_engine_bar_marker, x1 - 7.0, y1 + 37.0, MFD_COLOUR1);

  018bd	b8 04 00 00 00	 mov	 eax, 4
  018c2	6b c8 00	 imul	 ecx, eax, 0
  018c5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  018cb	52		 push	 edx
  018cc	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  018d1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4042800000000000
  018d9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  018dd	51		 push	 ecx
  018de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018e3	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  018e8	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401c000000000000
  018f0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  018f4	51		 push	 ecx
  018f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018fa	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  018ff	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 8284 : 	}
; 8285 : 	else

  01904	e9 cf 01 00 00	 jmp	 $LN31@draw_engin
$LN30@draw_engin:

; 8286 : 	{
; 8287 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  01909	b8 04 00 00 00	 mov	 eax, 4
  0190e	6b c8 00	 imul	 ecx, eax, 0
  01911	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01917	52		 push	 edx
  01918	51		 push	 ecx
  01919	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0191e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01923	51		 push	 ecx
  01924	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01929	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0192e	51		 push	 ecx
  0192f	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01934	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01939	51		 push	 ecx
  0193a	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0193f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01944	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8288 : 		draw_line (x1 + 2.0, y1, x1 + 2.0, y2, MFD_COLOUR1);

  01949	b8 04 00 00 00	 mov	 eax, 4
  0194e	6b c8 00	 imul	 ecx, eax, 0
  01951	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01957	52		 push	 edx
  01958	51		 push	 ecx
  01959	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0195e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01963	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01968	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01970	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01974	51		 push	 ecx
  01975	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0197a	51		 push	 ecx
  0197b	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01980	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01985	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0198a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01992	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01996	51		 push	 ecx
  01997	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0199c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8289 : 		draw_line (x1, y1, x1 + 2.0, y1, MFD_COLOUR1);

  019a1	b8 04 00 00 00	 mov	 eax, 4
  019a6	6b c8 00	 imul	 ecx, eax, 0
  019a9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  019af	52		 push	 edx
  019b0	51		 push	 ecx
  019b1	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  019b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019bb	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  019c0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  019c8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  019cc	51		 push	 ecx
  019cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019d2	51		 push	 ecx
  019d3	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  019d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019dd	51		 push	 ecx
  019de	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  019e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019e8	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8290 : 		draw_line (x1, y2, x1 + 2.0, y2, MFD_COLOUR1);

  019ed	b8 04 00 00 00	 mov	 eax, 4
  019f2	6b c8 00	 imul	 ecx, eax, 0
  019f5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  019fb	52		 push	 edx
  019fc	51		 push	 ecx
  019fd	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01a02	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a07	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01a0c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01a14	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a18	51		 push	 ecx
  01a19	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a1e	51		 push	 ecx
  01a1f	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01a24	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a29	51		 push	 ecx
  01a2a	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01a2f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a34	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8291 : 
; 8292 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  01a39	b8 04 00 00 00	 mov	 eax, 4
  01a3e	6b c8 00	 imul	 ecx, eax, 0
  01a41	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a47	52		 push	 edx
  01a48	51		 push	 ecx
  01a49	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  01a4e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a53	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01a58	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  01a60	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a64	51		 push	 ecx
  01a65	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a6a	51		 push	 ecx
  01a6b	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01a70	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a75	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01a7a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  01a82	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a86	51		 push	 ecx
  01a87	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a8c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8293 : 
; 8294 : 		draw_mono_sprite (small_engine_bar_marker, x1 - 4.0, y1 + 13.0, MFD_COLOUR1);

  01a91	b8 04 00 00 00	 mov	 eax, 4
  01a96	6b c8 00	 imul	 ecx, eax, 0
  01a99	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a9f	52		 push	 edx
  01aa0	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  01aa5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@402a000000000000
  01aad	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01ab1	51		 push	 ecx
  01ab2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ab7	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01abc	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4010000000000000
  01ac4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01ac8	51		 push	 ecx
  01ac9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ace	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  01ad3	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite
$LN31@draw_engin:

; 8295 : 	}
; 8296 : 
; 8297 : 	////////////////////////////////////////
; 8298 : 	//
; 8299 : 	// engine and rotor rpm
; 8300 : 	//
; 8301 : 	////////////////////////////////////////
; 8302 : 
; 8303 : 	//
; 8304 : 	// engine 1 rpm
; 8305 : 	//
; 8306 : 
; 8307 : 	set_2d_mono_font_position (0.2, 0.6);

  01ad8	51		 push	 ecx
  01ad9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  01ae1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ae6	51		 push	 ecx
  01ae7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  01aef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01af4	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8308 : 
; 8309 : 	if (draw_large_mfd)

  01af9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01b00	74 4d		 je	 SHORT $LN32@draw_engin

; 8310 : 	{
; 8311 : 		set_mono_font_rel_position (-6.0, -16.0);

  01b02	51		 push	 ecx
  01b03	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1800000
  01b0b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b10	51		 push	 ecx
  01b11	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  01b19	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b1e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8312 : 
; 8313 : 		print_mono_font_char ('N');

  01b23	6a 4e		 push	 78			; 0000004eH
  01b25	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 8314 : 
; 8315 : 		set_mono_font_rel_position (0.0, 2.0);

  01b2a	51		 push	 ecx
  01b2b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  01b33	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b38	51		 push	 ecx
  01b39	0f 57 c0	 xorps	 xmm0, xmm0
  01b3c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b41	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8316 : 
; 8317 : 		print_mono_font_char ('P');

  01b46	6a 50		 push	 80			; 00000050H
  01b48	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 8318 : 	}
; 8319 : 	else

  01b4d	eb 4b		 jmp	 SHORT $LN33@draw_engin
$LN32@draw_engin:

; 8320 : 	{
; 8321 : 		set_mono_font_rel_position (-2.0, -7.0);

  01b4f	51		 push	 ecx
  01b50	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0e00000
  01b58	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b5d	51		 push	 ecx
  01b5e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  01b66	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b6b	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8322 : 
; 8323 : 		print_mono_font_char ('N');

  01b70	6a 4e		 push	 78			; 0000004eH
  01b72	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 8324 : 
; 8325 : 		set_mono_font_rel_position (0.0, 1.0);

  01b77	51		 push	 ecx
  01b78	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01b80	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b85	51		 push	 ecx
  01b86	0f 57 c0	 xorps	 xmm0, xmm0
  01b89	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b8e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8326 : 
; 8327 : 		print_mono_font_char ('P');

  01b93	6a 50		 push	 80			; 00000050H
  01b95	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char
$LN33@draw_engin:

; 8328 : 	}
; 8329 : 
; 8330 : 	digital_readout = bound (current_flight_dynamics->left_engine_rpm.value, 0.0, 120.0);

  01b9a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01b9f	f3 0f 5a 80 7c
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7292]
  01ba7	0f 57 c9	 xorps	 xmm1, xmm1
  01baa	66 0f 2f c8	 comisd	 xmm1, xmm0
  01bae	76 0d		 jbe	 SHORT $LN83@draw_engin
  01bb0	0f 57 c0	 xorps	 xmm0, xmm0
  01bb3	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv975[ebp], xmm0
  01bbb	eb 50		 jmp	 SHORT $LN84@draw_engin
$LN83@draw_engin:
  01bbd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01bc3	f3 0f 5a 81 7c
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7292]
  01bcb	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  01bd3	76 12		 jbe	 SHORT $LN81@draw_engin
  01bd5	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  01bdd	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv974[ebp], xmm0
  01be5	eb 16		 jmp	 SHORT $LN82@draw_engin
$LN81@draw_engin:
  01be7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01bed	f3 0f 5a 82 7c
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7292]
  01bf5	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv974[ebp], xmm0
$LN82@draw_engin:
  01bfd	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv974[ebp]
  01c05	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv975[ebp], xmm0
$LN84@draw_engin:
  01c0d	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv975[ebp]
  01c15	f3 0f 11 45 94	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 8331 : 
; 8332 : 	convert_float_to_int (digital_readout, &i);

  01c1a	8d 45 ac	 lea	 eax, DWORD PTR _i$[ebp]
  01c1d	50		 push	 eax
  01c1e	51		 push	 ecx
  01c1f	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  01c24	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c29	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 8333 : 
; 8334 : 	sprintf (buffer, "%03d", i);

  01c2e	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  01c31	50		 push	 eax
  01c32	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  01c37	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  01c3a	51		 push	 ecx
  01c3b	e8 00 00 00 00	 call	 _sprintf
  01c40	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8335 : 
; 8336 : 	set_2d_mono_font_position (0.2, -0.6);

  01c43	51		 push	 ecx
  01c44	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  01c4c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c51	51		 push	 ecx
  01c52	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  01c5a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c5f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8337 : 
; 8338 : 	if (draw_large_mfd)

  01c64	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01c6b	74 23		 je	 SHORT $LN34@draw_engin

; 8339 : 	{
; 8340 : 		set_mono_font_rel_position (-13.0, 8.0);

  01c6d	51		 push	 ecx
  01c6e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  01c76	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c7b	51		 push	 ecx
  01c7c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1500000
  01c84	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c89	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8341 : 	}
; 8342 : 	else

  01c8e	eb 21		 jmp	 SHORT $LN35@draw_engin
$LN34@draw_engin:

; 8343 : 	{
; 8344 : 		set_mono_font_rel_position (-6.0, 3.0);

  01c90	51		 push	 ecx
  01c91	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  01c99	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c9e	51		 push	 ecx
  01c9f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  01ca7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cac	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN35@draw_engin:

; 8345 : 	}
; 8346 : 
; 8347 : 	print_mono_font_string (buffer);

  01cb1	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  01cb4	50		 push	 eax
  01cb5	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8348 : 
; 8349 : 	set_2d_mono_font_position (0.2, -0.6);

  01cba	51		 push	 ecx
  01cbb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  01cc3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cc8	51		 push	 ecx
  01cc9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  01cd1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cd6	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8350 : 
; 8351 : 	if (draw_large_mfd)

  01cdb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01ce2	74 1e		 je	 SHORT $LN36@draw_engin

; 8352 : 	{
; 8353 : 		set_mono_font_rel_position (0.0, 25.0);

  01ce4	51		 push	 ecx
  01ce5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41c80000
  01ced	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cf2	51		 push	 ecx
  01cf3	0f 57 c0	 xorps	 xmm0, xmm0
  01cf6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cfb	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8354 : 	}
; 8355 : 	else

  01d00	eb 1c		 jmp	 SHORT $LN37@draw_engin
$LN36@draw_engin:

; 8356 : 	{
; 8357 : 		set_mono_font_rel_position (0.0, 13.0);

  01d02	51		 push	 ecx
  01d03	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41500000
  01d0b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d10	51		 push	 ecx
  01d11	0f 57 c0	 xorps	 xmm0, xmm0
  01d14	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d19	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN37@draw_engin:

; 8358 : 	}
; 8359 : 
; 8360 : 	print_mono_font_char ('1');

  01d1e	6a 31		 push	 49			; 00000031H
  01d20	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 8361 : 
; 8362 : 	bar_value = digital_readout * 0.01;

  01d25	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _digital_readout$[ebp]
  01d2a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  01d32	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d36	f3 0f 11 45 98	 movss	 DWORD PTR _bar_value$[ebp], xmm0

; 8363 : 
; 8364 : 	get_2d_float_screen_coordinates (0.2, 0.6, &x1, &y1);

  01d3b	8d 45 a4	 lea	 eax, DWORD PTR _y1$[ebp]
  01d3e	50		 push	 eax
  01d3f	8d 4d a8	 lea	 ecx, DWORD PTR _x1$[ebp]
  01d42	51		 push	 ecx
  01d43	51		 push	 ecx
  01d44	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  01d4c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d51	51		 push	 ecx
  01d52	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  01d5a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d5f	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 8365 : 	get_2d_float_screen_y_coordinate (-0.6, &y2);

  01d64	8d 45 a0	 lea	 eax, DWORD PTR _y2$[ebp]
  01d67	50		 push	 eax
  01d68	51		 push	 ecx
  01d69	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  01d71	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d76	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8366 : 	get_2d_float_screen_y_coordinate (-0.6 + bar_value, &y3);

  01d7b	8d 45 9c	 lea	 eax, DWORD PTR _y3$[ebp]
  01d7e	50		 push	 eax
  01d7f	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _bar_value$[ebp]
  01d84	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfe3333333333333
  01d8c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d90	51		 push	 ecx
  01d91	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d96	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8367 : 
; 8368 : 	if (draw_large_mfd)

  01d9b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01da2	0f 84 84 02 00
	00		 je	 $LN38@draw_engin

; 8369 : 	{
; 8370 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  01da8	b8 04 00 00 00	 mov	 eax, 4
  01dad	6b c8 00	 imul	 ecx, eax, 0
  01db0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01db6	52		 push	 edx
  01db7	51		 push	 ecx
  01db8	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01dbd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dc2	51		 push	 ecx
  01dc3	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01dc8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dcd	51		 push	 ecx
  01dce	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01dd3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dd8	51		 push	 ecx
  01dd9	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01dde	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01de3	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8371 : 		draw_line (x1 + 4.0, y1, x1 + 4.0, y2, MFD_COLOUR1);

  01de8	b8 04 00 00 00	 mov	 eax, 4
  01ded	6b c8 00	 imul	 ecx, eax, 0
  01df0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01df6	52		 push	 edx
  01df7	51		 push	 ecx
  01df8	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01dfd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e02	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01e07	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  01e0f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e13	51		 push	 ecx
  01e14	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e19	51		 push	 ecx
  01e1a	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01e1f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e24	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01e29	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  01e31	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e35	51		 push	 ecx
  01e36	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e3b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8372 : 		draw_line (x1, y1, x1 + 4.0, y1, MFD_COLOUR1);

  01e40	b8 04 00 00 00	 mov	 eax, 4
  01e45	6b c8 00	 imul	 ecx, eax, 0
  01e48	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01e4e	52		 push	 edx
  01e4f	51		 push	 ecx
  01e50	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01e55	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e5a	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01e5f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  01e67	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e6b	51		 push	 ecx
  01e6c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e71	51		 push	 ecx
  01e72	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01e77	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e7c	51		 push	 ecx
  01e7d	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01e82	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e87	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8373 : 		draw_line (x1, y2, x1 + 4.0, y2, MFD_COLOUR1);

  01e8c	b8 04 00 00 00	 mov	 eax, 4
  01e91	6b c8 00	 imul	 ecx, eax, 0
  01e94	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01e9a	52		 push	 edx
  01e9b	51		 push	 ecx
  01e9c	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01ea1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ea6	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01eab	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  01eb3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01eb7	51		 push	 ecx
  01eb8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ebd	51		 push	 ecx
  01ebe	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01ec3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ec8	51		 push	 ecx
  01ec9	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01ece	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ed3	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8374 : 
; 8375 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  01ed8	b8 04 00 00 00	 mov	 eax, 4
  01edd	6b c8 00	 imul	 ecx, eax, 0
  01ee0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01ee6	52		 push	 edx
  01ee7	51		 push	 ecx
  01ee8	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  01eed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ef2	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01ef7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  01eff	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01f03	51		 push	 ecx
  01f04	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f09	51		 push	 ecx
  01f0a	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01f0f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f14	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01f19	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  01f21	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01f25	51		 push	 ecx
  01f26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f2b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8376 : 		draw_line (x1 + 2.0, y2, x1 + 2.0, y3, MFD_COLOUR1);

  01f30	b8 04 00 00 00	 mov	 eax, 4
  01f35	6b c8 00	 imul	 ecx, eax, 0
  01f38	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01f3e	52		 push	 edx
  01f3f	51		 push	 ecx
  01f40	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  01f45	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f4a	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01f4f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01f57	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01f5b	51		 push	 ecx
  01f5c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f61	51		 push	 ecx
  01f62	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01f67	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f6c	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01f71	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01f79	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01f7d	51		 push	 ecx
  01f7e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f83	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8377 : 		draw_line (x1 + 3.0, y2, x1 + 3.0, y3, MFD_COLOUR1);

  01f88	b8 04 00 00 00	 mov	 eax, 4
  01f8d	6b c8 00	 imul	 ecx, eax, 0
  01f90	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01f96	52		 push	 edx
  01f97	51		 push	 ecx
  01f98	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  01f9d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fa2	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01fa7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  01faf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01fb3	51		 push	 ecx
  01fb4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fb9	51		 push	 ecx
  01fba	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01fbf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fc4	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  01fc9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  01fd1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01fd5	51		 push	 ecx
  01fd6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fdb	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8378 : 
; 8379 : 		draw_mono_sprite (large_engine_bar_marker, x1 - 7.0, y1 + 30.0, MFD_COLOUR1);

  01fe0	b8 04 00 00 00	 mov	 eax, 4
  01fe5	6b c8 00	 imul	 ecx, eax, 0
  01fe8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01fee	52		 push	 edx
  01fef	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  01ff4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@403e000000000000
  01ffc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02000	51		 push	 ecx
  02001	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02006	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0200b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401c000000000000
  02013	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02017	51		 push	 ecx
  02018	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0201d	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  02022	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 8380 : 	}
; 8381 : 	else

  02027	e9 cf 01 00 00	 jmp	 $LN39@draw_engin
$LN38@draw_engin:

; 8382 : 	{
; 8383 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  0202c	b8 04 00 00 00	 mov	 eax, 4
  02031	6b c8 00	 imul	 ecx, eax, 0
  02034	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0203a	52		 push	 edx
  0203b	51		 push	 ecx
  0203c	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02041	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02046	51		 push	 ecx
  02047	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0204c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02051	51		 push	 ecx
  02052	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02057	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0205c	51		 push	 ecx
  0205d	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02062	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02067	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8384 : 		draw_line (x1 + 2.0, y1, x1 + 2.0, y2, MFD_COLOUR1);

  0206c	b8 04 00 00 00	 mov	 eax, 4
  02071	6b c8 00	 imul	 ecx, eax, 0
  02074	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0207a	52		 push	 edx
  0207b	51		 push	 ecx
  0207c	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02081	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02086	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0208b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02093	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02097	51		 push	 ecx
  02098	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0209d	51		 push	 ecx
  0209e	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  020a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020a8	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  020ad	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  020b5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  020b9	51		 push	 ecx
  020ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020bf	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8385 : 		draw_line (x1, y1, x1 + 2.0, y1, MFD_COLOUR1);

  020c4	b8 04 00 00 00	 mov	 eax, 4
  020c9	6b c8 00	 imul	 ecx, eax, 0
  020cc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  020d2	52		 push	 edx
  020d3	51		 push	 ecx
  020d4	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  020d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020de	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  020e3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  020eb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  020ef	51		 push	 ecx
  020f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020f5	51		 push	 ecx
  020f6	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  020fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02100	51		 push	 ecx
  02101	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02106	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0210b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8386 : 		draw_line (x1, y2, x1 + 2.0, y2, MFD_COLOUR1);

  02110	b8 04 00 00 00	 mov	 eax, 4
  02115	6b c8 00	 imul	 ecx, eax, 0
  02118	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0211e	52		 push	 edx
  0211f	51		 push	 ecx
  02120	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02125	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0212a	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0212f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02137	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0213b	51		 push	 ecx
  0213c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02141	51		 push	 ecx
  02142	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02147	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0214c	51		 push	 ecx
  0214d	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02152	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02157	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8387 : 
; 8388 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  0215c	b8 04 00 00 00	 mov	 eax, 4
  02161	6b c8 00	 imul	 ecx, eax, 0
  02164	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0216a	52		 push	 edx
  0216b	51		 push	 ecx
  0216c	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  02171	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02176	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0217b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  02183	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02187	51		 push	 ecx
  02188	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0218d	51		 push	 ecx
  0218e	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02193	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02198	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0219d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  021a5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  021a9	51		 push	 ecx
  021aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021af	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8389 : 
; 8390 : 		draw_mono_sprite (small_engine_bar_marker, x1 - 4.0, y1 + 11.0, MFD_COLOUR1);

  021b4	b8 04 00 00 00	 mov	 eax, 4
  021b9	6b c8 00	 imul	 ecx, eax, 0
  021bc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  021c2	52		 push	 edx
  021c3	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  021c8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4026000000000000
  021d0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  021d4	51		 push	 ecx
  021d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021da	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  021df	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4010000000000000
  021e7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  021eb	51		 push	 ecx
  021ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021f1	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  021f6	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite
$LN39@draw_engin:

; 8391 : 	}
; 8392 : 
; 8393 : 	//
; 8394 : 	// rotor rpm
; 8395 : 	//
; 8396 : 
; 8397 : 	set_2d_mono_font_position (0.35 - 0.0125, 0.6);

  021fb	51		 push	 ecx
  021fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  02204	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02209	51		 push	 ecx
  0220a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaccccd
  02212	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02217	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8398 : 
; 8399 : 	if (draw_large_mfd)

  0221c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02223	74 4d		 je	 SHORT $LN40@draw_engin

; 8400 : 	{
; 8401 : 		set_mono_font_rel_position (-6.0, -16.0);

  02225	51		 push	 ecx
  02226	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1800000
  0222e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02233	51		 push	 ecx
  02234	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  0223c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02241	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8402 : 
; 8403 : 		print_mono_font_char ('N');

  02246	6a 4e		 push	 78			; 0000004eH
  02248	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 8404 : 
; 8405 : 		set_mono_font_rel_position (0.0, 2.0);

  0224d	51		 push	 ecx
  0224e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  02256	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0225b	51		 push	 ecx
  0225c	0f 57 c0	 xorps	 xmm0, xmm0
  0225f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02264	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8406 : 
; 8407 : 		print_mono_font_char ('R');

  02269	6a 52		 push	 82			; 00000052H
  0226b	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 8408 : 	}
; 8409 : 	else

  02270	eb 4b		 jmp	 SHORT $LN41@draw_engin
$LN40@draw_engin:

; 8410 : 	{
; 8411 : 		set_mono_font_rel_position (-2.0, -7.0);

  02272	51		 push	 ecx
  02273	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0e00000
  0227b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02280	51		 push	 ecx
  02281	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  02289	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0228e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8412 : 
; 8413 : 		print_mono_font_char ('N');

  02293	6a 4e		 push	 78			; 0000004eH
  02295	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 8414 : 
; 8415 : 		set_mono_font_rel_position (0.0, 1.0);

  0229a	51		 push	 ecx
  0229b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  022a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022a8	51		 push	 ecx
  022a9	0f 57 c0	 xorps	 xmm0, xmm0
  022ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022b1	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8416 : 
; 8417 : 		print_mono_font_char ('R');

  022b6	6a 52		 push	 82			; 00000052H
  022b8	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char
$LN41@draw_engin:

; 8418 : 	}
; 8419 : 
; 8420 : 	set_2d_mono_font_position (0.35 - 0.0125, 0.6);

  022bd	51		 push	 ecx
  022be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  022c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022cb	51		 push	 ecx
  022cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaccccd
  022d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022d9	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8421 : 
; 8422 : 	if (draw_large_mfd)

  022de	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  022e5	74 23		 je	 SHORT $LN42@draw_engin

; 8423 : 	{
; 8424 : 		set_mono_font_rel_position (-8.0, -33.0);

  022e7	51		 push	 ecx
  022e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2040000
  022f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022f5	51		 push	 ecx
  022f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  022fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02303	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8425 : 	}
; 8426 : 	else

  02308	eb 21		 jmp	 SHORT $LN43@draw_engin
$LN42@draw_engin:

; 8427 : 	{
; 8428 : 		set_mono_font_rel_position (-5.0, -19.0);

  0230a	51		 push	 ecx
  0230b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1980000
  02313	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02318	51		 push	 ecx
  02319	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  02321	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02326	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN43@draw_engin:

; 8429 : 	}
; 8430 : 
; 8431 : 	print_mono_font_string ("RPM");

  0232b	68 00 00 00 00	 push	 OFFSET ??_C@_03JGNEPIDC@RPM@
  02330	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8432 : 
; 8433 : 	digital_readout = bound (current_flight_dynamics->main_rotor_rpm.value, 0.0, 125.0);

  02335	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0233a	f3 0f 5a 80 14
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7700]
  02342	0f 57 c9	 xorps	 xmm1, xmm1
  02345	66 0f 2f c8	 comisd	 xmm1, xmm0
  02349	76 0d		 jbe	 SHORT $LN87@draw_engin
  0234b	0f 57 c0	 xorps	 xmm0, xmm0
  0234e	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv1204[ebp], xmm0
  02356	eb 50		 jmp	 SHORT $LN88@draw_engin
$LN87@draw_engin:
  02358	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0235e	f3 0f 5a 81 14
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7700]
  02366	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405f400000000000
  0236e	76 12		 jbe	 SHORT $LN85@draw_engin
  02370	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405f400000000000
  02378	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv1203[ebp], xmm0
  02380	eb 16		 jmp	 SHORT $LN86@draw_engin
$LN85@draw_engin:
  02382	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  02388	f3 0f 5a 82 14
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7700]
  02390	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv1203[ebp], xmm0
$LN86@draw_engin:
  02398	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1203[ebp]
  023a0	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv1204[ebp], xmm0
$LN88@draw_engin:
  023a8	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv1204[ebp]
  023b0	f3 0f 11 45 94	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 8434 : 
; 8435 : 	convert_float_to_int (digital_readout, &i);

  023b5	8d 45 ac	 lea	 eax, DWORD PTR _i$[ebp]
  023b8	50		 push	 eax
  023b9	51		 push	 ecx
  023ba	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  023bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023c4	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 8436 : 
; 8437 : 	sprintf (buffer, "%03d", i);

  023c9	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  023cc	50		 push	 eax
  023cd	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  023d2	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  023d5	51		 push	 ecx
  023d6	e8 00 00 00 00	 call	 _sprintf
  023db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8438 : 
; 8439 : 	set_2d_mono_font_position (0.35 - 0.0125, -0.4);

  023de	51		 push	 ecx
  023df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  023e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023ec	51		 push	 ecx
  023ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaccccd
  023f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023fa	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8440 : 
; 8441 : 	if (draw_large_mfd)

  023ff	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02406	74 23		 je	 SHORT $LN44@draw_engin

; 8442 : 	{
; 8443 : 		set_mono_font_rel_position (-8.0, 8.0);

  02408	51		 push	 ecx
  02409	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  02411	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02416	51		 push	 ecx
  02417	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  0241f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02424	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8444 : 	}
; 8445 : 	else

  02429	eb 21		 jmp	 SHORT $LN45@draw_engin
$LN44@draw_engin:

; 8446 : 	{
; 8447 : 		set_mono_font_rel_position (-4.0, 3.0);

  0242b	51		 push	 ecx
  0242c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  02434	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02439	51		 push	 ecx
  0243a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  02442	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02447	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN45@draw_engin:

; 8448 : 	}
; 8449 : 
; 8450 : 	print_mono_font_string (buffer);

  0244c	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  0244f	50		 push	 eax
  02450	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8451 : 
; 8452 : 	bar_value = digital_readout * 0.008;

  02455	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _digital_readout$[ebp]
  0245a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f80624dd2f1a9fc
  02462	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02466	f3 0f 11 45 98	 movss	 DWORD PTR _bar_value$[ebp], xmm0

; 8453 : 
; 8454 : 	get_2d_float_screen_coordinates (0.35 - 0.0125, 0.6, &x1, &y1);

  0246b	8d 45 a4	 lea	 eax, DWORD PTR _y1$[ebp]
  0246e	50		 push	 eax
  0246f	8d 4d a8	 lea	 ecx, DWORD PTR _x1$[ebp]
  02472	51		 push	 ecx
  02473	51		 push	 ecx
  02474	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  0247c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02481	51		 push	 ecx
  02482	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eaccccd
  0248a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0248f	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 8455 : 	get_2d_float_screen_y_coordinate (-0.4, &y2);

  02494	8d 45 a0	 lea	 eax, DWORD PTR _y2$[ebp]
  02497	50		 push	 eax
  02498	51		 push	 ecx
  02499	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  024a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024a6	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8456 : 	get_2d_float_screen_y_coordinate (-0.4 + bar_value, &y3);

  024ab	8d 45 9c	 lea	 eax, DWORD PTR _y3$[ebp]
  024ae	50		 push	 eax
  024af	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _bar_value$[ebp]
  024b4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfd999999999999a
  024bc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  024c0	51		 push	 ecx
  024c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024c6	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8457 : 
; 8458 : 	if (draw_large_mfd)

  024cb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  024d2	0f 84 84 02 00
	00		 je	 $LN46@draw_engin

; 8459 : 	{
; 8460 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  024d8	b8 04 00 00 00	 mov	 eax, 4
  024dd	6b c8 00	 imul	 ecx, eax, 0
  024e0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  024e6	52		 push	 edx
  024e7	51		 push	 ecx
  024e8	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  024ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024f2	51		 push	 ecx
  024f3	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  024f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024fd	51		 push	 ecx
  024fe	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02503	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02508	51		 push	 ecx
  02509	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0250e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02513	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8461 : 		draw_line (x1 + 4.0, y1, x1 + 4.0, y2, MFD_COLOUR1);

  02518	b8 04 00 00 00	 mov	 eax, 4
  0251d	6b c8 00	 imul	 ecx, eax, 0
  02520	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02526	52		 push	 edx
  02527	51		 push	 ecx
  02528	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0252d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02532	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02537	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  0253f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02543	51		 push	 ecx
  02544	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02549	51		 push	 ecx
  0254a	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0254f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02554	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02559	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  02561	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02565	51		 push	 ecx
  02566	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0256b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8462 : 		draw_line (x1, y1, x1 + 4.0, y1, MFD_COLOUR1);

  02570	b8 04 00 00 00	 mov	 eax, 4
  02575	6b c8 00	 imul	 ecx, eax, 0
  02578	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0257e	52		 push	 edx
  0257f	51		 push	 ecx
  02580	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02585	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0258a	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0258f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  02597	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0259b	51		 push	 ecx
  0259c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025a1	51		 push	 ecx
  025a2	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  025a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025ac	51		 push	 ecx
  025ad	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  025b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025b7	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8463 : 		draw_line (x1, y2, x1 + 4.0, y2, MFD_COLOUR1);

  025bc	b8 04 00 00 00	 mov	 eax, 4
  025c1	6b c8 00	 imul	 ecx, eax, 0
  025c4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  025ca	52		 push	 edx
  025cb	51		 push	 ecx
  025cc	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  025d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025d6	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  025db	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  025e3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  025e7	51		 push	 ecx
  025e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025ed	51		 push	 ecx
  025ee	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  025f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025f8	51		 push	 ecx
  025f9	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  025fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02603	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8464 : 
; 8465 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  02608	b8 04 00 00 00	 mov	 eax, 4
  0260d	6b c8 00	 imul	 ecx, eax, 0
  02610	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02616	52		 push	 edx
  02617	51		 push	 ecx
  02618	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  0261d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02622	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02627	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0262f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02633	51		 push	 ecx
  02634	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02639	51		 push	 ecx
  0263a	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0263f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02644	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02649	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  02651	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02655	51		 push	 ecx
  02656	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0265b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8466 : 		draw_line (x1 + 2.0, y2, x1 + 2.0, y3, MFD_COLOUR1);

  02660	b8 04 00 00 00	 mov	 eax, 4
  02665	6b c8 00	 imul	 ecx, eax, 0
  02668	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0266e	52		 push	 edx
  0266f	51		 push	 ecx
  02670	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  02675	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0267a	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0267f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02687	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0268b	51		 push	 ecx
  0268c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02691	51		 push	 ecx
  02692	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02697	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0269c	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  026a1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  026a9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  026ad	51		 push	 ecx
  026ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026b3	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8467 : 		draw_line (x1 + 3.0, y2, x1 + 3.0, y3, MFD_COLOUR1);

  026b8	b8 04 00 00 00	 mov	 eax, 4
  026bd	6b c8 00	 imul	 ecx, eax, 0
  026c0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  026c6	52		 push	 edx
  026c7	51		 push	 ecx
  026c8	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  026cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026d2	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  026d7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  026df	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  026e3	51		 push	 ecx
  026e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026e9	51		 push	 ecx
  026ea	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  026ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026f4	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  026f9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  02701	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02705	51		 push	 ecx
  02706	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0270b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8468 : 
; 8469 : 		draw_mono_sprite (large_engine_bar_marker, x1 - 7.0, y1 + 30.0, MFD_COLOUR1);

  02710	b8 04 00 00 00	 mov	 eax, 4
  02715	6b c8 00	 imul	 ecx, eax, 0
  02718	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0271e	52		 push	 edx
  0271f	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  02724	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@403e000000000000
  0272c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02730	51		 push	 ecx
  02731	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02736	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0273b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401c000000000000
  02743	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02747	51		 push	 ecx
  02748	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0274d	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  02752	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 8470 : 	}
; 8471 : 	else

  02757	e9 cf 01 00 00	 jmp	 $LN47@draw_engin
$LN46@draw_engin:

; 8472 : 	{
; 8473 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  0275c	b8 04 00 00 00	 mov	 eax, 4
  02761	6b c8 00	 imul	 ecx, eax, 0
  02764	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0276a	52		 push	 edx
  0276b	51		 push	 ecx
  0276c	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02771	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02776	51		 push	 ecx
  02777	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0277c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02781	51		 push	 ecx
  02782	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02787	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0278c	51		 push	 ecx
  0278d	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02792	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02797	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8474 : 		draw_line (x1 + 2.0, y1, x1 + 2.0, y2, MFD_COLOUR1);

  0279c	b8 04 00 00 00	 mov	 eax, 4
  027a1	6b c8 00	 imul	 ecx, eax, 0
  027a4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  027aa	52		 push	 edx
  027ab	51		 push	 ecx
  027ac	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  027b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027b6	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  027bb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  027c3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  027c7	51		 push	 ecx
  027c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027cd	51		 push	 ecx
  027ce	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  027d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027d8	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  027dd	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  027e5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  027e9	51		 push	 ecx
  027ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027ef	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8475 : 		draw_line (x1, y1, x1 + 2.0, y1, MFD_COLOUR1);

  027f4	b8 04 00 00 00	 mov	 eax, 4
  027f9	6b c8 00	 imul	 ecx, eax, 0
  027fc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02802	52		 push	 edx
  02803	51		 push	 ecx
  02804	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02809	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0280e	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02813	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0281b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0281f	51		 push	 ecx
  02820	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02825	51		 push	 ecx
  02826	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0282b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02830	51		 push	 ecx
  02831	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02836	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0283b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8476 : 		draw_line (x1, y2, x1 + 2.0, y2, MFD_COLOUR1);

  02840	b8 04 00 00 00	 mov	 eax, 4
  02845	6b c8 00	 imul	 ecx, eax, 0
  02848	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0284e	52		 push	 edx
  0284f	51		 push	 ecx
  02850	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02855	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0285a	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0285f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02867	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0286b	51		 push	 ecx
  0286c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02871	51		 push	 ecx
  02872	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02877	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0287c	51		 push	 ecx
  0287d	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02882	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02887	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8477 : 
; 8478 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  0288c	b8 04 00 00 00	 mov	 eax, 4
  02891	6b c8 00	 imul	 ecx, eax, 0
  02894	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0289a	52		 push	 edx
  0289b	51		 push	 ecx
  0289c	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  028a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  028a6	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  028ab	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  028b3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  028b7	51		 push	 ecx
  028b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  028bd	51		 push	 ecx
  028be	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  028c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  028c8	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  028cd	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  028d5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  028d9	51		 push	 ecx
  028da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  028df	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8479 : 
; 8480 : 		draw_mono_sprite (small_engine_bar_marker, x1 - 4.0, y1 + 11.0, MFD_COLOUR1);

  028e4	b8 04 00 00 00	 mov	 eax, 4
  028e9	6b c8 00	 imul	 ecx, eax, 0
  028ec	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  028f2	52		 push	 edx
  028f3	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  028f8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4026000000000000
  02900	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02904	51		 push	 ecx
  02905	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0290a	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  0290f	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4010000000000000
  02917	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0291b	51		 push	 ecx
  0291c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02921	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  02926	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite
$LN47@draw_engin:

; 8481 : 	}
; 8482 : 
; 8483 : 	//
; 8484 : 	// engine 2 rpm
; 8485 : 	//
; 8486 : 
; 8487 : 	set_2d_mono_font_position (0.5 - 0.025, 0.6);

  0292b	51		 push	 ecx
  0292c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  02934	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02939	51		 push	 ecx
  0293a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef33333
  02942	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02947	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8488 : 
; 8489 : 	if (draw_large_mfd)

  0294c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02953	74 4d		 je	 SHORT $LN48@draw_engin

; 8490 : 	{
; 8491 : 		set_mono_font_rel_position (-6.0, -16.0);

  02955	51		 push	 ecx
  02956	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1800000
  0295e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02963	51		 push	 ecx
  02964	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  0296c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02971	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8492 : 
; 8493 : 		print_mono_font_char ('N');

  02976	6a 4e		 push	 78			; 0000004eH
  02978	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 8494 : 
; 8495 : 		set_mono_font_rel_position (0.0, 2.0);

  0297d	51		 push	 ecx
  0297e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  02986	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0298b	51		 push	 ecx
  0298c	0f 57 c0	 xorps	 xmm0, xmm0
  0298f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02994	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8496 : 
; 8497 : 		print_mono_font_char ('P');

  02999	6a 50		 push	 80			; 00000050H
  0299b	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 8498 : 	}
; 8499 : 	else

  029a0	eb 4b		 jmp	 SHORT $LN49@draw_engin
$LN48@draw_engin:

; 8500 : 	{
; 8501 : 		set_mono_font_rel_position (-2.0, -7.0);

  029a2	51		 push	 ecx
  029a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0e00000
  029ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029b0	51		 push	 ecx
  029b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  029b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029be	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8502 : 
; 8503 : 		print_mono_font_char ('N');

  029c3	6a 4e		 push	 78			; 0000004eH
  029c5	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 8504 : 
; 8505 : 		set_mono_font_rel_position (0.0, 1.0);

  029ca	51		 push	 ecx
  029cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  029d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029d8	51		 push	 ecx
  029d9	0f 57 c0	 xorps	 xmm0, xmm0
  029dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029e1	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8506 : 
; 8507 : 		print_mono_font_char ('P');

  029e6	6a 50		 push	 80			; 00000050H
  029e8	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char
$LN49@draw_engin:

; 8508 : 	}
; 8509 : 
; 8510 : 	digital_readout = bound (current_flight_dynamics->right_engine_rpm.value, 0.0, 120.0);

  029ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  029f2	f3 0f 5a 80 dc
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7388]
  029fa	0f 57 c9	 xorps	 xmm1, xmm1
  029fd	66 0f 2f c8	 comisd	 xmm1, xmm0
  02a01	76 0d		 jbe	 SHORT $LN91@draw_engin
  02a03	0f 57 c0	 xorps	 xmm0, xmm0
  02a06	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv1417[ebp], xmm0
  02a0e	eb 50		 jmp	 SHORT $LN92@draw_engin
$LN91@draw_engin:
  02a10	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  02a16	f3 0f 5a 81 dc
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7388]
  02a1e	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  02a26	76 12		 jbe	 SHORT $LN89@draw_engin
  02a28	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  02a30	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv1416[ebp], xmm0
  02a38	eb 16		 jmp	 SHORT $LN90@draw_engin
$LN89@draw_engin:
  02a3a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  02a40	f3 0f 5a 82 dc
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7388]
  02a48	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv1416[ebp], xmm0
$LN90@draw_engin:
  02a50	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1416[ebp]
  02a58	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv1417[ebp], xmm0
$LN92@draw_engin:
  02a60	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv1417[ebp]
  02a68	f3 0f 11 45 94	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 8511 : 
; 8512 : 	convert_float_to_int (digital_readout, &i);

  02a6d	8d 45 ac	 lea	 eax, DWORD PTR _i$[ebp]
  02a70	50		 push	 eax
  02a71	51		 push	 ecx
  02a72	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  02a77	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a7c	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 8513 : 
; 8514 : 	sprintf (buffer, "%03d", i);

  02a81	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  02a84	50		 push	 eax
  02a85	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  02a8a	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  02a8d	51		 push	 ecx
  02a8e	e8 00 00 00 00	 call	 _sprintf
  02a93	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8515 : 
; 8516 : 	set_2d_mono_font_position (0.5 - 0.025, -0.6);

  02a96	51		 push	 ecx
  02a97	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  02a9f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02aa4	51		 push	 ecx
  02aa5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef33333
  02aad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ab2	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8517 : 
; 8518 : 	if (draw_large_mfd)

  02ab7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02abe	74 23		 je	 SHORT $LN50@draw_engin

; 8519 : 	{
; 8520 : 		set_mono_font_rel_position (-4.0, 8.0);

  02ac0	51		 push	 ecx
  02ac1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  02ac9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ace	51		 push	 ecx
  02acf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  02ad7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02adc	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8521 : 	}
; 8522 : 	else

  02ae1	eb 21		 jmp	 SHORT $LN51@draw_engin
$LN50@draw_engin:

; 8523 : 	{
; 8524 : 		set_mono_font_rel_position (-2.0, 3.0);

  02ae3	51		 push	 ecx
  02ae4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  02aec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02af1	51		 push	 ecx
  02af2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  02afa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02aff	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN51@draw_engin:

; 8525 : 	}
; 8526 : 
; 8527 : 	print_mono_font_string (buffer);

  02b04	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  02b07	50		 push	 eax
  02b08	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8528 : 
; 8529 : 	set_2d_mono_font_position (0.5 - 0.025, -0.6);

  02b0d	51		 push	 ecx
  02b0e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  02b16	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b1b	51		 push	 ecx
  02b1c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef33333
  02b24	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b29	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8530 : 
; 8531 : 	if (draw_large_mfd)

  02b2e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02b35	74 1e		 je	 SHORT $LN52@draw_engin

; 8532 : 	{
; 8533 : 		set_mono_font_rel_position (0.0, 25.0);

  02b37	51		 push	 ecx
  02b38	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41c80000
  02b40	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b45	51		 push	 ecx
  02b46	0f 57 c0	 xorps	 xmm0, xmm0
  02b49	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b4e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8534 : 	}
; 8535 : 	else

  02b53	eb 1c		 jmp	 SHORT $LN53@draw_engin
$LN52@draw_engin:

; 8536 : 	{
; 8537 : 		set_mono_font_rel_position (0.0, 13.0);

  02b55	51		 push	 ecx
  02b56	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41500000
  02b5e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b63	51		 push	 ecx
  02b64	0f 57 c0	 xorps	 xmm0, xmm0
  02b67	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b6c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN53@draw_engin:

; 8538 : 	}
; 8539 : 
; 8540 : 	print_mono_font_char ('2');

  02b71	6a 32		 push	 50			; 00000032H
  02b73	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 8541 : 
; 8542 : 	bar_value = digital_readout * 0.01;

  02b78	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _digital_readout$[ebp]
  02b7d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  02b85	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02b89	f3 0f 11 45 98	 movss	 DWORD PTR _bar_value$[ebp], xmm0

; 8543 : 
; 8544 : 	get_2d_float_screen_coordinates (0.5 - 0.025, 0.6, &x1, &y1);

  02b8e	8d 45 a4	 lea	 eax, DWORD PTR _y1$[ebp]
  02b91	50		 push	 eax
  02b92	8d 4d a8	 lea	 ecx, DWORD PTR _x1$[ebp]
  02b95	51		 push	 ecx
  02b96	51		 push	 ecx
  02b97	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  02b9f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ba4	51		 push	 ecx
  02ba5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef33333
  02bad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02bb2	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 8545 : 	get_2d_float_screen_y_coordinate (-0.6, &y2);

  02bb7	8d 45 a0	 lea	 eax, DWORD PTR _y2$[ebp]
  02bba	50		 push	 eax
  02bbb	51		 push	 ecx
  02bbc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  02bc4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02bc9	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8546 : 	get_2d_float_screen_y_coordinate (-0.6 + bar_value, &y3);

  02bce	8d 45 9c	 lea	 eax, DWORD PTR _y3$[ebp]
  02bd1	50		 push	 eax
  02bd2	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _bar_value$[ebp]
  02bd7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfe3333333333333
  02bdf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02be3	51		 push	 ecx
  02be4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02be9	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8547 : 
; 8548 : 	if (draw_large_mfd)

  02bee	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02bf5	0f 84 84 02 00
	00		 je	 $LN54@draw_engin

; 8549 : 	{
; 8550 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  02bfb	b8 04 00 00 00	 mov	 eax, 4
  02c00	6b c8 00	 imul	 ecx, eax, 0
  02c03	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02c09	52		 push	 edx
  02c0a	51		 push	 ecx
  02c0b	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02c10	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c15	51		 push	 ecx
  02c16	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02c1b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c20	51		 push	 ecx
  02c21	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02c26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c2b	51		 push	 ecx
  02c2c	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02c31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c36	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8551 : 		draw_line (x1 + 4.0, y1, x1 + 4.0, y2, MFD_COLOUR1);

  02c3b	b8 04 00 00 00	 mov	 eax, 4
  02c40	6b c8 00	 imul	 ecx, eax, 0
  02c43	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02c49	52		 push	 edx
  02c4a	51		 push	 ecx
  02c4b	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02c50	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c55	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02c5a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  02c62	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02c66	51		 push	 ecx
  02c67	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c6c	51		 push	 ecx
  02c6d	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02c72	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c77	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02c7c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  02c84	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02c88	51		 push	 ecx
  02c89	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c8e	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8552 : 		draw_line (x1, y1, x1 + 4.0, y1, MFD_COLOUR1);

  02c93	b8 04 00 00 00	 mov	 eax, 4
  02c98	6b c8 00	 imul	 ecx, eax, 0
  02c9b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02ca1	52		 push	 edx
  02ca2	51		 push	 ecx
  02ca3	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02ca8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02cad	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02cb2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  02cba	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02cbe	51		 push	 ecx
  02cbf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02cc4	51		 push	 ecx
  02cc5	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02cca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ccf	51		 push	 ecx
  02cd0	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02cd5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02cda	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8553 : 		draw_line (x1, y2, x1 + 4.0, y2, MFD_COLOUR1);

  02cdf	b8 04 00 00 00	 mov	 eax, 4
  02ce4	6b c8 00	 imul	 ecx, eax, 0
  02ce7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02ced	52		 push	 edx
  02cee	51		 push	 ecx
  02cef	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02cf4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02cf9	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02cfe	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  02d06	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02d0a	51		 push	 ecx
  02d0b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d10	51		 push	 ecx
  02d11	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02d16	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d1b	51		 push	 ecx
  02d1c	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02d21	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d26	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8554 : 
; 8555 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  02d2b	b8 04 00 00 00	 mov	 eax, 4
  02d30	6b c8 00	 imul	 ecx, eax, 0
  02d33	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02d39	52		 push	 edx
  02d3a	51		 push	 ecx
  02d3b	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  02d40	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d45	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02d4a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  02d52	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02d56	51		 push	 ecx
  02d57	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d5c	51		 push	 ecx
  02d5d	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02d62	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d67	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02d6c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  02d74	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02d78	51		 push	 ecx
  02d79	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d7e	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8556 : 		draw_line (x1 + 2.0, y2, x1 + 2.0, y3, MFD_COLOUR1);

  02d83	b8 04 00 00 00	 mov	 eax, 4
  02d88	6b c8 00	 imul	 ecx, eax, 0
  02d8b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02d91	52		 push	 edx
  02d92	51		 push	 ecx
  02d93	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  02d98	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d9d	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02da2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02daa	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02dae	51		 push	 ecx
  02daf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02db4	51		 push	 ecx
  02db5	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02dba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02dbf	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02dc4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02dcc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02dd0	51		 push	 ecx
  02dd1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02dd6	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8557 : 		draw_line (x1 + 3.0, y2, x1 + 3.0, y3, MFD_COLOUR1);

  02ddb	b8 04 00 00 00	 mov	 eax, 4
  02de0	6b c8 00	 imul	 ecx, eax, 0
  02de3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02de9	52		 push	 edx
  02dea	51		 push	 ecx
  02deb	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  02df0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02df5	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02dfa	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  02e02	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02e06	51		 push	 ecx
  02e07	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e0c	51		 push	 ecx
  02e0d	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02e12	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e17	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02e1c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  02e24	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02e28	51		 push	 ecx
  02e29	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e2e	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8558 : 
; 8559 : 		draw_mono_sprite (large_engine_bar_marker, x1 - 7.0, y1 + 30.0, MFD_COLOUR1);

  02e33	b8 04 00 00 00	 mov	 eax, 4
  02e38	6b c8 00	 imul	 ecx, eax, 0
  02e3b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02e41	52		 push	 edx
  02e42	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  02e47	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@403e000000000000
  02e4f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02e53	51		 push	 ecx
  02e54	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e59	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02e5e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401c000000000000
  02e66	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02e6a	51		 push	 ecx
  02e6b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e70	68 00 00 00 00	 push	 OFFSET ?large_engine_bar_marker@@3PADA
  02e75	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite

; 8560 : 	}
; 8561 : 	else

  02e7a	e9 cf 01 00 00	 jmp	 $LN55@draw_engin
$LN54@draw_engin:

; 8562 : 	{
; 8563 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  02e7f	b8 04 00 00 00	 mov	 eax, 4
  02e84	6b c8 00	 imul	 ecx, eax, 0
  02e87	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02e8d	52		 push	 edx
  02e8e	51		 push	 ecx
  02e8f	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02e94	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e99	51		 push	 ecx
  02e9a	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02e9f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ea4	51		 push	 ecx
  02ea5	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02eaa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02eaf	51		 push	 ecx
  02eb0	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02eb5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02eba	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8564 : 		draw_line (x1 + 2.0, y1, x1 + 2.0, y2, MFD_COLOUR1);

  02ebf	b8 04 00 00 00	 mov	 eax, 4
  02ec4	6b c8 00	 imul	 ecx, eax, 0
  02ec7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02ecd	52		 push	 edx
  02ece	51		 push	 ecx
  02ecf	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02ed4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ed9	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02ede	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02ee6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02eea	51		 push	 ecx
  02eeb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ef0	51		 push	 ecx
  02ef1	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02ef6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02efb	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02f00	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02f08	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02f0c	51		 push	 ecx
  02f0d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02f12	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8565 : 		draw_line (x1, y1, x1 + 2.0, y1, MFD_COLOUR1);

  02f17	b8 04 00 00 00	 mov	 eax, 4
  02f1c	6b c8 00	 imul	 ecx, eax, 0
  02f1f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02f25	52		 push	 edx
  02f26	51		 push	 ecx
  02f27	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02f2c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02f31	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02f36	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02f3e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02f42	51		 push	 ecx
  02f43	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02f48	51		 push	 ecx
  02f49	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02f4e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02f53	51		 push	 ecx
  02f54	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02f59	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02f5e	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8566 : 		draw_line (x1, y2, x1 + 2.0, y2, MFD_COLOUR1);

  02f63	b8 04 00 00 00	 mov	 eax, 4
  02f68	6b c8 00	 imul	 ecx, eax, 0
  02f6b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02f71	52		 push	 edx
  02f72	51		 push	 ecx
  02f73	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02f78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02f7d	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02f82	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02f8a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02f8e	51		 push	 ecx
  02f8f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02f94	51		 push	 ecx
  02f95	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02f9a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02f9f	51		 push	 ecx
  02fa0	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02fa5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02faa	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8567 : 
; 8568 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  02faf	b8 04 00 00 00	 mov	 eax, 4
  02fb4	6b c8 00	 imul	 ecx, eax, 0
  02fb7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02fbd	52		 push	 edx
  02fbe	51		 push	 ecx
  02fbf	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  02fc4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02fc9	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02fce	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  02fd6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02fda	51		 push	 ecx
  02fdb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02fe0	51		 push	 ecx
  02fe1	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  02fe6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02feb	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  02ff0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  02ff8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02ffc	51		 push	 ecx
  02ffd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03002	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8569 : 
; 8570 : 		draw_mono_sprite (small_engine_bar_marker, x1 - 4.0, y1 + 11.0, MFD_COLOUR1);

  03007	b8 04 00 00 00	 mov	 eax, 4
  0300c	6b c8 00	 imul	 ecx, eax, 0
  0300f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03015	52		 push	 edx
  03016	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _y1$[ebp]
  0301b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4026000000000000
  03023	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03027	51		 push	 ecx
  03028	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0302d	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03032	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4010000000000000
  0303a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0303e	51		 push	 ecx
  0303f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03044	68 00 00 00 00	 push	 OFFSET ?small_engine_bar_marker@@3PADA
  03049	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite
$LN55@draw_engin:

; 8571 : 	}
; 8572 : 
; 8573 : 	////////////////////////////////////////
; 8574 : 	//
; 8575 : 	// fuel
; 8576 : 	//
; 8577 : 	////////////////////////////////////////
; 8578 : 
; 8579 : 	set_2d_mono_font_position (0.8 - 0.0125, 0.6);

  0304e	51		 push	 ecx
  0304f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  03057	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0305c	51		 push	 ecx
  0305d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f49999a
  03065	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0306a	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8580 : 
; 8581 : 	if (draw_large_mfd)

  0306f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  03076	74 23		 je	 SHORT $LN56@draw_engin

; 8582 : 	{
; 8583 : 		set_mono_font_rel_position (-12.0, -16.0);

  03078	51		 push	 ecx
  03079	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1800000
  03081	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03086	51		 push	 ecx
  03087	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  0308f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03094	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8584 : 	}
; 8585 : 	else

  03099	eb 21		 jmp	 SHORT $LN57@draw_engin
$LN56@draw_engin:

; 8586 : 	{
; 8587 : 		set_mono_font_rel_position (-6.0, -7.0);

  0309b	51		 push	 ecx
  0309c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0e00000
  030a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  030a9	51		 push	 ecx
  030aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  030b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  030b7	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN57@draw_engin:

; 8588 : 	}
; 8589 : 
; 8590 : 	print_mono_font_string ("FUEL");

  030bc	68 00 00 00 00	 push	 OFFSET ??_C@_04DICABFLJ@FUEL@
  030c1	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8591 : 
; 8592 : 	digital_readout = bound (kilograms_to_pounds (current_flight_dynamics->fuel_weight.value), 0.0, 2500.0);

  030c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  030cb	f3 0f 10 80 a4
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9380]
  030d3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  030db	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  030df	0f 57 c9	 xorps	 xmm1, xmm1
  030e2	66 0f 2f c8	 comisd	 xmm1, xmm0
  030e6	76 0d		 jbe	 SHORT $LN95@draw_engin
  030e8	0f 57 c0	 xorps	 xmm0, xmm0
  030eb	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv1637[ebp], xmm0
  030f3	eb 68		 jmp	 SHORT $LN96@draw_engin
$LN95@draw_engin:
  030f5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  030fb	f3 0f 10 81 a4
	24 00 00	 movss	 xmm0, DWORD PTR [ecx+9380]
  03103	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  0310b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0310f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@40a3880000000000
  03117	76 12		 jbe	 SHORT $LN93@draw_engin
  03119	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@40a3880000000000
  03121	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv1636[ebp], xmm0
  03129	eb 22		 jmp	 SHORT $LN94@draw_engin
$LN93@draw_engin:
  0312b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  03131	f3 0f 10 82 a4
	24 00 00	 movss	 xmm0, DWORD PTR [edx+9380]
  03139	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400d1eb8
  03141	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  03145	f2 0f 11 85 44
	ff ff ff	 movsd	 QWORD PTR tv1636[ebp], xmm0
$LN94@draw_engin:
  0314d	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1636[ebp]
  03155	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv1637[ebp], xmm0
$LN96@draw_engin:
  0315d	f2 0f 5a 85 4c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv1637[ebp]
  03165	f3 0f 11 45 94	 movss	 DWORD PTR _digital_readout$[ebp], xmm0

; 8593 : 
; 8594 : 	convert_float_to_int (digital_readout, &i);

  0316a	8d 45 ac	 lea	 eax, DWORD PTR _i$[ebp]
  0316d	50		 push	 eax
  0316e	51		 push	 ecx
  0316f	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _digital_readout$[ebp]
  03174	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03179	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 8595 : 
; 8596 : 	sprintf (buffer, "%04d", i);

  0317e	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  03181	50		 push	 eax
  03182	68 00 00 00 00	 push	 OFFSET ??_C@_04OCCELDNI@?$CF04d@
  03187	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0318a	51		 push	 ecx
  0318b	e8 00 00 00 00	 call	 _sprintf
  03190	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8597 : 
; 8598 : 	set_2d_mono_font_position (0.8 - 0.0125, -0.6);

  03193	51		 push	 ecx
  03194	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  0319c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  031a1	51		 push	 ecx
  031a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f49999a
  031aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  031af	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8599 : 
; 8600 : 	if (draw_large_mfd)

  031b4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  031bb	74 23		 je	 SHORT $LN58@draw_engin

; 8601 : 	{
; 8602 : 		set_mono_font_rel_position (-12.0, 8.0);

  031bd	51		 push	 ecx
  031be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  031c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  031cb	51		 push	 ecx
  031cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  031d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  031d9	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8603 : 	}
; 8604 : 	else

  031de	eb 21		 jmp	 SHORT $LN59@draw_engin
$LN58@draw_engin:

; 8605 : 	{
; 8606 : 		set_mono_font_rel_position (-6.0, 3.0);

  031e0	51		 push	 ecx
  031e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  031e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  031ee	51		 push	 ecx
  031ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  031f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  031fc	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN59@draw_engin:

; 8607 : 	}
; 8608 : 
; 8609 : 	print_mono_font_string (buffer);

  03201	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  03204	50		 push	 eax
  03205	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8610 : 
; 8611 : 	set_2d_mono_font_position (0.8 - 0.0125, -0.6);

  0320a	51		 push	 ecx
  0320b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  03213	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03218	51		 push	 ecx
  03219	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f49999a
  03221	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03226	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 8612 : 
; 8613 : 	if (draw_large_mfd)

  0322b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  03232	74 23		 je	 SHORT $LN60@draw_engin

; 8614 : 	{
; 8615 : 		set_mono_font_rel_position (-8.0, 25.0);

  03234	51		 push	 ecx
  03235	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41c80000
  0323d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03242	51		 push	 ecx
  03243	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  0324b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03250	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 8616 : 	}
; 8617 : 	else

  03255	eb 21		 jmp	 SHORT $LN61@draw_engin
$LN60@draw_engin:

; 8618 : 	{
; 8619 : 		set_mono_font_rel_position (-4.0, 13.0);

  03257	51		 push	 ecx
  03258	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41500000
  03260	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03265	51		 push	 ecx
  03266	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  0326e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03273	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN61@draw_engin:

; 8620 : 	}
; 8621 : 
; 8622 : 	print_mono_font_string ("LBS");

  03278	68 00 00 00 00	 push	 OFFSET ??_C@_03ONPBJAFP@LBS@
  0327d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 8623 : 
; 8624 : 	bar_value = digital_readout * 0.00048;

  03282	f3 0f 5a 45 94	 cvtss2sd xmm0, DWORD PTR _digital_readout$[ebp]
  03287	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f3f75104d551d69
  0328f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03293	f3 0f 11 45 98	 movss	 DWORD PTR _bar_value$[ebp], xmm0

; 8625 : 
; 8626 : 	get_2d_float_screen_coordinates (0.8 - 0.0125, 0.6, &x1, &y1);

  03298	8d 45 a4	 lea	 eax, DWORD PTR _y1$[ebp]
  0329b	50		 push	 eax
  0329c	8d 4d a8	 lea	 ecx, DWORD PTR _x1$[ebp]
  0329f	51		 push	 ecx
  032a0	51		 push	 ecx
  032a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  032a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  032ae	51		 push	 ecx
  032af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f49999a
  032b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  032bc	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 8627 : 	get_2d_float_screen_y_coordinate (-0.6, &y2);

  032c1	8d 45 a0	 lea	 eax, DWORD PTR _y2$[ebp]
  032c4	50		 push	 eax
  032c5	51		 push	 ecx
  032c6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  032ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  032d3	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8628 : 	get_2d_float_screen_y_coordinate (-0.6 + bar_value, &y3);

  032d8	8d 45 9c	 lea	 eax, DWORD PTR _y3$[ebp]
  032db	50		 push	 eax
  032dc	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _bar_value$[ebp]
  032e1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfe3333333333333
  032e9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  032ed	51		 push	 ecx
  032ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  032f3	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 8629 : 
; 8630 : 	if (draw_large_mfd)

  032f8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  032ff	0f 84 3d 02 00
	00		 je	 $LN62@draw_engin

; 8631 : 	{
; 8632 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  03305	b8 04 00 00 00	 mov	 eax, 4
  0330a	6b c8 00	 imul	 ecx, eax, 0
  0330d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03313	52		 push	 edx
  03314	51		 push	 ecx
  03315	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0331a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0331f	51		 push	 ecx
  03320	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  03325	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0332a	51		 push	 ecx
  0332b	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  03330	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03335	51		 push	 ecx
  03336	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0333b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03340	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8633 : 		draw_line (x1 + 4.0, y1, x1 + 4.0, y2, MFD_COLOUR1);

  03345	b8 04 00 00 00	 mov	 eax, 4
  0334a	6b c8 00	 imul	 ecx, eax, 0
  0334d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03353	52		 push	 edx
  03354	51		 push	 ecx
  03355	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0335a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0335f	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03364	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  0336c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03370	51		 push	 ecx
  03371	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03376	51		 push	 ecx
  03377	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0337c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03381	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03386	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  0338e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03392	51		 push	 ecx
  03393	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03398	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8634 : 		draw_line (x1, y1, x1 + 4.0, y1, MFD_COLOUR1);

  0339d	b8 04 00 00 00	 mov	 eax, 4
  033a2	6b c8 00	 imul	 ecx, eax, 0
  033a5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  033ab	52		 push	 edx
  033ac	51		 push	 ecx
  033ad	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  033b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  033b7	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  033bc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  033c4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  033c8	51		 push	 ecx
  033c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  033ce	51		 push	 ecx
  033cf	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  033d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  033d9	51		 push	 ecx
  033da	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  033df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  033e4	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8635 : 		draw_line (x1, y2, x1 + 4.0, y2, MFD_COLOUR1);

  033e9	b8 04 00 00 00	 mov	 eax, 4
  033ee	6b c8 00	 imul	 ecx, eax, 0
  033f1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  033f7	52		 push	 edx
  033f8	51		 push	 ecx
  033f9	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  033fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03403	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03408	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  03410	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03414	51		 push	 ecx
  03415	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0341a	51		 push	 ecx
  0341b	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03420	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03425	51		 push	 ecx
  03426	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0342b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03430	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8636 : 
; 8637 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  03435	b8 04 00 00 00	 mov	 eax, 4
  0343a	6b c8 00	 imul	 ecx, eax, 0
  0343d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03443	52		 push	 edx
  03444	51		 push	 ecx
  03445	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  0344a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0344f	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03454	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0345c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03460	51		 push	 ecx
  03461	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03466	51		 push	 ecx
  03467	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0346c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03471	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03476	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0347e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03482	51		 push	 ecx
  03483	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03488	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8638 : 		draw_line (x1 + 2.0, y2, x1 + 2.0, y3, MFD_COLOUR1);

  0348d	b8 04 00 00 00	 mov	 eax, 4
  03492	6b c8 00	 imul	 ecx, eax, 0
  03495	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0349b	52		 push	 edx
  0349c	51		 push	 ecx
  0349d	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  034a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  034a7	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  034ac	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  034b4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  034b8	51		 push	 ecx
  034b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  034be	51		 push	 ecx
  034bf	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  034c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  034c9	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  034ce	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  034d6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  034da	51		 push	 ecx
  034db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  034e0	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8639 : 		draw_line (x1 + 3.0, y2, x1 + 3.0, y3, MFD_COLOUR1);

  034e5	b8 04 00 00 00	 mov	 eax, 4
  034ea	6b c8 00	 imul	 ecx, eax, 0
  034ed	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  034f3	52		 push	 edx
  034f4	51		 push	 ecx
  034f5	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  034fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  034ff	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03504	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  0350c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03510	51		 push	 ecx
  03511	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03516	51		 push	 ecx
  03517	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0351c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03521	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03526	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  0352e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03532	51		 push	 ecx
  03533	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03538	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8640 : 	}
; 8641 : 	else

  0353d	e9 88 01 00 00	 jmp	 $LN63@draw_engin
$LN62@draw_engin:

; 8642 : 	{
; 8643 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  03542	b8 04 00 00 00	 mov	 eax, 4
  03547	6b c8 00	 imul	 ecx, eax, 0
  0354a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03550	52		 push	 edx
  03551	51		 push	 ecx
  03552	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03557	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0355c	51		 push	 ecx
  0355d	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  03562	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03567	51		 push	 ecx
  03568	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0356d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03572	51		 push	 ecx
  03573	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  03578	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0357d	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8644 : 		draw_line (x1 + 2.0, y1, x1 + 2.0, y2, MFD_COLOUR1);

  03582	b8 04 00 00 00	 mov	 eax, 4
  03587	6b c8 00	 imul	 ecx, eax, 0
  0358a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03590	52		 push	 edx
  03591	51		 push	 ecx
  03592	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  03597	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0359c	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  035a1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  035a9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  035ad	51		 push	 ecx
  035ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  035b3	51		 push	 ecx
  035b4	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  035b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  035be	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  035c3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  035cb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  035cf	51		 push	 ecx
  035d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  035d5	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8645 : 		draw_line (x1, y1, x1 + 2.0, y1, MFD_COLOUR1);

  035da	b8 04 00 00 00	 mov	 eax, 4
  035df	6b c8 00	 imul	 ecx, eax, 0
  035e2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  035e8	52		 push	 edx
  035e9	51		 push	 ecx
  035ea	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  035ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  035f4	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  035f9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  03601	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03605	51		 push	 ecx
  03606	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0360b	51		 push	 ecx
  0360c	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  03611	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03616	51		 push	 ecx
  03617	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0361c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03621	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8646 : 		draw_line (x1, y2, x1 + 2.0, y2, MFD_COLOUR1);

  03626	b8 04 00 00 00	 mov	 eax, 4
  0362b	6b c8 00	 imul	 ecx, eax, 0
  0362e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03634	52		 push	 edx
  03635	51		 push	 ecx
  03636	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0363b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03640	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03645	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0364d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  03651	51		 push	 ecx
  03652	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03657	51		 push	 ecx
  03658	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0365d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03662	51		 push	 ecx
  03663	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x1$[ebp]
  03668	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0366d	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 8647 : 
; 8648 : 		draw_line (x1 + 1.0, y2, x1 + 1.0, y3, MFD_COLOUR1);

  03672	b8 04 00 00 00	 mov	 eax, 4
  03677	6b c8 00	 imul	 ecx, eax, 0
  0367a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  03680	52		 push	 edx
  03681	51		 push	 ecx
  03682	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _y3$[ebp]
  03687	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0368c	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  03691	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  03699	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0369d	51		 push	 ecx
  0369e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  036a3	51		 push	 ecx
  036a4	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  036a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  036ae	f3 0f 5a 45 a8	 cvtss2sd xmm0, DWORD PTR _x1$[ebp]
  036b3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  036bb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  036bf	51		 push	 ecx
  036c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  036c5	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN63@draw_engin:

; 8649 : 	}
; 8650 : }

  036ca	5f		 pop	 edi
  036cb	5e		 pop	 esi
  036cc	5b		 pop	 ebx
  036cd	8b e5		 mov	 esp, ebp
  036cf	5d		 pop	 ebp
  036d0	c3		 ret	 0
?draw_engine_display_mfd@@YGXXZ ENDP			; draw_engine_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_system_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv258 = -72						; size = 4
tv249 = -72						; size = 4
tv242 = -72						; size = 4
tv235 = -72						; size = 4
tv226 = -72						; size = 4
tv217 = -72						; size = 4
tv208 = -72						; size = 4
tv199 = -72						; size = 4
tv190 = -72						; size = 4
_y_adjust$ = -4						; size = 4
?draw_system_display_mfd@@YGXXZ PROC			; draw_system_display_mfd, COMDAT

; 7874 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7875 : 	float
; 7876 : 		y_adjust;
; 7877 : 
; 7878 : 	set_mono_font_colour (MFD_COLOUR1);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00017	52		 push	 edx
  00018	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7879 : 
; 7880 : 	if (draw_large_mfd)

  0001d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00024	74 16		 je	 SHORT $LN2@draw_syste

; 7881 : 	{
; 7882 : 		set_mono_font_type (MONO_FONT_TYPE_6X10);

  00026	6a 04		 push	 4
  00028	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 7883 : 
; 7884 : 		y_adjust = 2.0;

  0002d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00035	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7885 : 	}
; 7886 : 	else

  0003a	eb 14		 jmp	 SHORT $LN3@draw_syste
$LN2@draw_syste:

; 7887 : 	{
; 7888 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  0003c	6a 00		 push	 0
  0003e	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 7889 : 
; 7890 : 		y_adjust = -2.0;

  00043	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  0004b	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN3@draw_syste:

; 7891 : 	}
; 7892 : 
; 7893 : 	y_adjust = print_system_message ("RADAR", "FAIL", blackhawk_damage.radar, y_adjust);

  00050	51		 push	 ecx
  00051	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00056	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  00060	83 e0 01	 and	 eax, 1
  00063	50		 push	 eax
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00069	68 00 00 00 00	 push	 OFFSET ??_C@_05IHELJBBC@RADAR@
  0006e	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  00073	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 7894 : 
; 7895 : 	y_adjust = print_system_message ("FLIR", "FAIL", blackhawk_damage.flir, y_adjust);

  00076	51		 push	 ecx
  00077	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0007c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00081	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  00086	c1 e8 02	 shr	 eax, 2
  00089	83 e0 01	 and	 eax, 1
  0008c	50		 push	 eax
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_04MIGKMLBH@FLIR@
  00097	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  0009c	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 7896 : 
; 7897 : 	y_adjust = print_system_message ("DTV", "FAIL", blackhawk_damage.dtv, y_adjust);

  0009f	51		 push	 ecx
  000a0	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  000af	c1 e8 03	 shr	 eax, 3
  000b2	83 e0 01	 and	 eax, 1
  000b5	50		 push	 eax
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_03ENJJJDDH@DTV@
  000c0	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  000c5	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 7898 : 
; 7899 : 	y_adjust = print_system_message ("DVO", "FAIL", blackhawk_damage.dvo, y_adjust);

  000c8	51		 push	 ecx
  000c9	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  000d8	c1 e8 04	 shr	 eax, 4
  000db	83 e0 01	 and	 eax, 1
  000de	50		 push	 eax
  000df	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_03NFBNOOEB@DVO@
  000e9	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  000ee	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 7900 : 
; 7901 : 	y_adjust = print_system_message ("LASER DESIGNATOR", "FAIL", blackhawk_damage.laser_designator, y_adjust);

  000f1	51		 push	 ecx
  000f2	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  00101	c1 e8 06	 shr	 eax, 6
  00104	83 e0 01	 and	 eax, 1
  00107	50		 push	 eax
  00108	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  0010d	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@
  00112	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  00117	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 7902 : 
; 7903 : 	y_adjust = print_system_message ("RADAR JAMMER", "FAIL", blackhawk_damage.radar_jammer, y_adjust);

  0011a	51		 push	 ecx
  0011b	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00120	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00125	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  0012a	c1 e8 07	 shr	 eax, 7
  0012d	83 e0 01	 and	 eax, 1
  00130	50		 push	 eax
  00131	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00136	68 00 00 00 00	 push	 OFFSET ??_C@_0N@JDBOFCJG@RADAR?5JAMMER@
  0013b	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  00140	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 7904 : 
; 7905 : 	y_adjust = print_system_message ("IR JAMMER", "FAIL", blackhawk_damage.infra_red_jammer, y_adjust);

  00143	51		 push	 ecx
  00144	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00149	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  00153	c1 e8 08	 shr	 eax, 8
  00156	83 e0 01	 and	 eax, 1
  00159	50		 push	 eax
  0015a	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  0015f	68 00 00 00 00	 push	 OFFSET ??_C@_09MILGCPFO@IR?5JAMMER@
  00164	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  00169	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 7906 : 
; 7907 : 	y_adjust = print_system_message ("NAVIGATION COMPUTER", "FAIL", blackhawk_damage.navigation_computer, y_adjust);

  0016c	51		 push	 ecx
  0016d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00172	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00177	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  0017c	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  0017f	83 e0 01	 and	 eax, 1
  00182	50		 push	 eax
  00183	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00188	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@
  0018d	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  00192	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 7908 : 
; 7909 : 	y_adjust = print_system_message ("COMMUNICATIONS", "FAIL", blackhawk_damage.communications, y_adjust);

  00195	51		 push	 ecx
  00196	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0019b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  001a5	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  001a8	83 e0 01	 and	 eax, 1
  001ab	50		 push	 eax
  001ac	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  001b1	68 00 00 00 00	 push	 OFFSET ??_C@_0P@OEDGDHNF@COMMUNICATIONS@
  001b6	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  001bb	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 7910 : 
; 7911 : 	y_adjust = print_system_message ("RADAR WARNING SYSTEM", "FAIL", blackhawk_damage.radar_warning_system, y_adjust);

  001be	51		 push	 ecx
  001bf	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  001c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  001ce	c1 e8 0d	 shr	 eax, 13			; 0000000dH
  001d1	83 e0 01	 and	 eax, 1
  001d4	50		 push	 eax
  001d5	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  001da	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@
  001df	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  001e4	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 7912 : 
; 7913 : 	y_adjust = print_system_message ("IHADSS", "FAIL", blackhawk_damage.ihadss, y_adjust);

  001e7	51		 push	 ecx
  001e8	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  001ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  001f7	c1 e8 0e	 shr	 eax, 14			; 0000000eH
  001fa	83 e0 01	 and	 eax, 1
  001fd	50		 push	 eax
  001fe	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00203	68 00 00 00 00	 push	 OFFSET ??_C@_06NOICLIMH@IHADSS@
  00208	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  0020d	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 7914 : 
; 7915 : 	y_adjust = print_system_message ("PNVS", "FAIL", blackhawk_damage.pnvs, y_adjust);

  00210	51		 push	 ecx
  00211	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00216	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  00220	c1 e8 12	 shr	 eax, 18			; 00000012H
  00223	83 e0 01	 and	 eax, 1
  00226	50		 push	 eax
  00227	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  0022c	68 00 00 00 00	 push	 OFFSET ??_C@_04IDKCLELC@PNVS@
  00231	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  00236	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 7916 : 
; 7917 : 	y_adjust = print_system_message ("STABILISER", "FAIL", get_dynamics_damage_type (DYNAMICS_DAMAGE_STABILISER), y_adjust);

  00239	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0023e	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00244	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  0024a	74 09		 je	 SHORT $LN9@draw_syste
  0024c	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv190[ebp], 1
  00253	eb 07		 jmp	 SHORT $LN10@draw_syste
$LN9@draw_syste:
  00255	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv190[ebp], 0
$LN10@draw_syste:
  0025c	51		 push	 ecx
  0025d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00262	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00267	8b 55 b8	 mov	 edx, DWORD PTR tv190[ebp]
  0026a	52		 push	 edx
  0026b	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00270	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LMAEBBOE@STABILISER@
  00275	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  0027a	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 7918 : 
; 7919 : 	y_adjust = print_system_message ("MAIN ROTOR", "DAMAGED", get_dynamics_damage_type (DYNAMICS_DAMAGE_MAIN_ROTOR), y_adjust);

  0027d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00282	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00288	83 e1 02	 and	 ecx, 2
  0028b	74 09		 je	 SHORT $LN11@draw_syste
  0028d	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv199[ebp], 1
  00294	eb 07		 jmp	 SHORT $LN12@draw_syste
$LN11@draw_syste:
  00296	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv199[ebp], 0
$LN12@draw_syste:
  0029d	51		 push	 ecx
  0029e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  002a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a8	8b 55 b8	 mov	 edx, DWORD PTR tv199[ebp]
  002ab	52		 push	 edx
  002ac	68 00 00 00 00	 push	 OFFSET ??_C@_07OHKEFPKJ@DAMAGED@
  002b1	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FFIGCBMA@MAIN?5ROTOR@
  002b6	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  002bb	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 7920 : 
; 7921 : 	y_adjust = print_system_message ("TAIL ROTOR", "DAMAGED", get_dynamics_damage_type (DYNAMICS_DAMAGE_TAIL_ROTOR), y_adjust);

  002be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  002c3	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  002c9	83 e1 04	 and	 ecx, 4
  002cc	74 09		 je	 SHORT $LN13@draw_syste
  002ce	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv208[ebp], 1
  002d5	eb 07		 jmp	 SHORT $LN14@draw_syste
$LN13@draw_syste:
  002d7	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv208[ebp], 0
$LN14@draw_syste:
  002de	51		 push	 ecx
  002df	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  002e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e9	8b 55 b8	 mov	 edx, DWORD PTR tv208[ebp]
  002ec	52		 push	 edx
  002ed	68 00 00 00 00	 push	 OFFSET ??_C@_07OHKEFPKJ@DAMAGED@
  002f2	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MCBINMPD@TAIL?5ROTOR@
  002f7	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  002fc	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 7922 : 
; 7923 : 	y_adjust = print_system_message ("ENGINE 1", "DAMAGED", get_dynamics_damage_type (DYNAMICS_DAMAGE_LEFT_ENGINE), y_adjust);

  002ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00304	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  0030a	83 e1 08	 and	 ecx, 8
  0030d	74 09		 je	 SHORT $LN15@draw_syste
  0030f	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv217[ebp], 1
  00316	eb 07		 jmp	 SHORT $LN16@draw_syste
$LN15@draw_syste:
  00318	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv217[ebp], 0
$LN16@draw_syste:
  0031f	51		 push	 ecx
  00320	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00325	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032a	8b 55 b8	 mov	 edx, DWORD PTR tv217[ebp]
  0032d	52		 push	 edx
  0032e	68 00 00 00 00	 push	 OFFSET ??_C@_07OHKEFPKJ@DAMAGED@
  00333	68 00 00 00 00	 push	 OFFSET ??_C@_08KNAGGCOA@ENGINE?51@
  00338	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  0033d	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 7924 : 
; 7925 : 	y_adjust = print_system_message ("ENGINE 2", "DAMAGED", get_dynamics_damage_type (DYNAMICS_DAMAGE_RIGHT_ENGINE), y_adjust);

  00340	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00345	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  0034b	83 e1 10	 and	 ecx, 16			; 00000010H
  0034e	74 09		 je	 SHORT $LN17@draw_syste
  00350	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv226[ebp], 1
  00357	eb 07		 jmp	 SHORT $LN18@draw_syste
$LN17@draw_syste:
  00359	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv226[ebp], 0
$LN18@draw_syste:
  00360	51		 push	 ecx
  00361	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00366	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036b	8b 55 b8	 mov	 edx, DWORD PTR tv226[ebp]
  0036e	52		 push	 edx
  0036f	68 00 00 00 00	 push	 OFFSET ??_C@_07OHKEFPKJ@DAMAGED@
  00374	68 00 00 00 00	 push	 OFFSET ??_C@_08IGCLDBCD@ENGINE?52@
  00379	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  0037e	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 7926 : 
; 7927 : 	y_adjust = print_system_message ("HYDRAULIC PRESSURE", "LOW", get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_HYDRAULICS), y_adjust);

  00381	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00386	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  0038c	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  00392	74 09		 je	 SHORT $LN19@draw_syste
  00394	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv235[ebp], 1
  0039b	eb 07		 jmp	 SHORT $LN20@draw_syste
$LN19@draw_syste:
  0039d	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv235[ebp], 0
$LN20@draw_syste:
  003a4	51		 push	 ecx
  003a5	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  003aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003af	8b 55 b8	 mov	 edx, DWORD PTR tv235[ebp]
  003b2	52		 push	 edx
  003b3	68 00 00 00 00	 push	 OFFSET ??_C@_03IBEFMGAI@LOW@
  003b8	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KOEIBOKB@HYDRAULIC?5PRESSURE@
  003bd	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  003c2	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 7928 : 
; 7929 : 	if (get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_OIL_PRESSURE))

  003c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  003ca	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  003d0	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  003d6	74 09		 je	 SHORT $LN21@draw_syste
  003d8	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv242[ebp], 1
  003df	eb 07		 jmp	 SHORT $LN22@draw_syste
$LN21@draw_syste:
  003e1	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv242[ebp], 0
$LN22@draw_syste:
  003e8	83 7d b8 00	 cmp	 DWORD PTR tv242[ebp], 0
  003ec	74 46		 je	 SHORT $LN4@draw_syste

; 7930 : 	{
; 7931 : 		y_adjust = print_system_message ("OIL PRESSURE", "LOW", get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_OIL_PRESSURE), y_adjust);

  003ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  003f3	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  003f9	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  003ff	74 09		 je	 SHORT $LN23@draw_syste
  00401	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv249[ebp], 1
  00408	eb 07		 jmp	 SHORT $LN24@draw_syste
$LN23@draw_syste:
  0040a	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv249[ebp], 0
$LN24@draw_syste:
  00411	51		 push	 ecx
  00412	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00417	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0041c	8b 55 b8	 mov	 edx, DWORD PTR tv249[ebp]
  0041f	52		 push	 edx
  00420	68 00 00 00 00	 push	 OFFSET ??_C@_03IBEFMGAI@LOW@
  00425	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MMJNGGCF@OIL?5PRESSURE@
  0042a	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  0042f	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 7932 : 	}
; 7933 : 	else

  00432	eb 44		 jmp	 SHORT $LN5@draw_syste
$LN4@draw_syste:

; 7934 : 	{
; 7935 : 		y_adjust = print_system_message ("OIL PRESSURE", "HIGH", get_dynamics_damage_type (DYNAMICS_DAMAGE_HIGH_OIL_PRESSURE), y_adjust);

  00434	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00439	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  0043f	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  00445	74 09		 je	 SHORT $LN25@draw_syste
  00447	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv258[ebp], 1
  0044e	eb 07		 jmp	 SHORT $LN26@draw_syste
$LN25@draw_syste:
  00450	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv258[ebp], 0
$LN26@draw_syste:
  00457	51		 push	 ecx
  00458	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0045d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00462	8b 55 b8	 mov	 edx, DWORD PTR tv258[ebp]
  00465	52		 push	 edx
  00466	68 00 00 00 00	 push	 OFFSET ??_C@_04PKDHFCJF@HIGH@
  0046b	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MMJNGGCF@OIL?5PRESSURE@
  00470	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  00475	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]
$LN5@draw_syste:

; 7936 : 	}
; 7937 : 
; 7938 : 	//
; 7939 : 	// fire extinguisher
; 7940 : 	//
; 7941 : 
; 7942 : 	if (draw_large_mfd)

  00478	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0047f	74 14		 je	 SHORT $LN6@draw_syste

; 7943 : 	{
; 7944 : 		y_adjust += 14;

  00481	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00486	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41600000
  0048e	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7945 : 	}
; 7946 : 	else

  00493	eb 12		 jmp	 SHORT $LN7@draw_syste
$LN6@draw_syste:

; 7947 : 	{
; 7948 : 		y_adjust += 3;

  00495	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0049a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40400000
  004a2	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN7@draw_syste:

; 7949 : 	}
; 7950 : 
; 7951 : 	y_adjust = print_system_message ("FIRE EXTINGUISHER", "USED", fire_extinguisher_used, y_adjust);

  004a7	51		 push	 ecx
  004a8	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  004ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?fire_extinguisher_used@@3HA ; fire_extinguisher_used
  004b7	50		 push	 eax
  004b8	68 00 00 00 00	 push	 OFFSET ??_C@_04PCNCCNDP@USED@
  004bd	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OIGEPKDA@FIRE?5EXTINGUISHER@
  004c2	e8 00 00 00 00	 call	 ?print_system_message@@YGMPAD0HM@Z ; print_system_message
  004c7	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 7952 : }

  004ca	5f		 pop	 edi
  004cb	5e		 pop	 esi
  004cc	5b		 pop	 ebx
  004cd	8b e5		 mov	 esp, ebp
  004cf	5d		 pop	 ebp
  004d0	c3		 ret	 0
?draw_system_display_mfd@@YGXXZ ENDP			; draw_system_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?print_system_message@@YGMPAD0HM@Z
_TEXT	SEGMENT
tv152 = -76						; size = 4
_width$ = -8						; size = 4
_status$ = -4						; size = 4
_equipment$ = 8						; size = 4
_warning$ = 12						; size = 4
_fail$ = 16						; size = 4
_y_adjust$ = 20						; size = 4
?print_system_message@@YGMPAD0HM@Z PROC			; print_system_message, COMDAT

; 7825 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7826 : 	char
; 7827 : 		*status;
; 7828 : 
; 7829 : 	float
; 7830 : 		width;
; 7831 : 
; 7832 : 	ASSERT (equipment);

  00009	83 7d 08 00	 cmp	 DWORD PTR _equipment$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@print_syst
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_system_message@@YGMPAD0HM@Z@4JA
  00014	83 c0 07	 add	 eax, 7
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_09FJJPPKDN@equipment@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@print_syst:

; 7833 : 
; 7834 : 	ASSERT (warning);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _warning$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@print_syst
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_system_message@@YGMPAD0HM@Z@4JA
  00032	83 c0 09	 add	 eax, 9
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_07FPLKDJGL@warning@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@print_syst:

; 7835 : 
; 7836 : 	set_2d_mono_font_position (-0.8, 0.90);

  00045	51		 push	 ecx
  00046	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  0004e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00053	51		 push	 ecx
  00054	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0005c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00061	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7837 : 
; 7838 : 	set_mono_font_rel_position (1.0, y_adjust);

  00066	51		 push	 ecx
  00067	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0006c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00071	51		 push	 ecx
  00072	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0007a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7839 : 
; 7840 : 	print_mono_font_string (equipment);

  00084	8b 45 08	 mov	 eax, DWORD PTR _equipment$[ebp]
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7841 : 
; 7842 : 	if (fail)

  0008d	83 7d 10 00	 cmp	 DWORD PTR _fail$[ebp], 0
  00091	74 08		 je	 SHORT $LN4@print_syst

; 7843 : 	{
; 7844 : 		status = warning;

  00093	8b 45 0c	 mov	 eax, DWORD PTR _warning$[ebp]
  00096	89 45 fc	 mov	 DWORD PTR _status$[ebp], eax

; 7845 : 	}
; 7846 : 	else

  00099	eb 07		 jmp	 SHORT $LN5@print_syst
$LN4@print_syst:

; 7847 : 	{
; 7848 : 		status = "OK";

  0009b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _status$[ebp], OFFSET ??_C@_02GIPFHKNO@OK@
$LN5@print_syst:

; 7849 : 	}
; 7850 : 
; 7851 : 	width = get_mono_font_string_width (status);

  000a2	8b 45 fc	 mov	 eax, DWORD PTR _status$[ebp]
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  000ab	d9 5d f8	 fstp	 DWORD PTR _width$[ebp]

; 7852 : 
; 7853 : 	set_2d_mono_font_position (0.8, 0.90);

  000ae	51		 push	 ecx
  000af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  000b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bc	51		 push	 ecx
  000bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  000c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ca	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7854 : 
; 7855 : 	set_mono_font_rel_position (-width, y_adjust);

  000cf	51		 push	 ecx
  000d0	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000da	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width$[ebp]
  000df	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000e6	51		 push	 ecx
  000e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ec	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7856 : 
; 7857 : 	print_mono_font_string (status);

  000f1	8b 45 fc	 mov	 eax, DWORD PTR _status$[ebp]
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7858 : 
; 7859 : 	y_adjust += get_mono_font_char_height ('X');

  000fa	6a 58		 push	 88			; 00000058H
  000fc	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  00101	d9 5d b4	 fstp	 DWORD PTR tv152[ebp]
  00104	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR tv152[ebp]
  00109	f3 0f 58 45 14	 addss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0010e	f3 0f 11 45 14	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 7860 : 
; 7861 : 	if (draw_large_mfd)

  00113	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0011a	74 12		 je	 SHORT $LN6@print_syst

; 7862 : 	{
; 7863 : 		y_adjust += 2;

  0011c	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00121	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40000000
  00129	f3 0f 11 45 14	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN6@print_syst:

; 7864 : 	}
; 7865 : 
; 7866 : 	return (y_adjust);

  0012e	d9 45 14	 fld	 DWORD PTR _y_adjust$[ebp]

; 7867 : }

  00131	5f		 pop	 edi
  00132	5e		 pop	 esi
  00133	5b		 pop	 ebx
  00134	8b e5		 mov	 esp, ebp
  00136	5d		 pop	 ebp
  00137	c2 10 00	 ret	 16			; 00000010H
?print_system_message@@YGMPAD0HM@Z ENDP			; print_system_message
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z
_TEXT	SEGMENT
tv84 = -168						; size = 4
tv140 = -164						; size = 4
tv78 = -164						; size = 4
tv132 = -160						; size = 4
tv71 = -160						; size = 4
_u$ = -92						; size = 4
_selected_weapon$ = -88					; size = 4
_en$ = -84						; size = 4
_buffer$ = -80						; size = 80
_location$ = 8						; size = 4
_draw_on_texture$ = 12					; size = 4
?draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z PROC	; draw_weapon_display_mfd, COMDAT

; 7524 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 7525 : 	char
; 7526 : 		buffer[80];
; 7527 : 
; 7528 : 	entity
; 7529 : 		*en;
; 7530 : 
; 7531 : 	entity_sub_types
; 7532 : 		selected_weapon;
; 7533 : 
; 7534 : 	float
; 7535 : 		u;
; 7536 : 
; 7537 : 	if (draw_large_mfd)

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00013	74 0e		 je	 SHORT $LN4@draw_weapo

; 7538 : 	{
; 7539 : 		draw_large_weapon_display_mfd (location);

  00015	8b 45 08	 mov	 eax, DWORD PTR _location$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z ; draw_large_weapon_display_mfd

; 7540 : 
; 7541 : 		return;

  0001e	e9 85 06 00 00	 jmp	 $LN1@draw_weapo
$LN4@draw_weapo:

; 7542 : 	}
; 7543 : 
; 7544 : 	////////////////////////////////////////
; 7545 : 	//
; 7546 : 	// select cockpit graphics wrt time of day - required here for hi-res virtual cockpits
; 7547 : 	//
; 7548 : 
; 7549 : 	switch (get_local_entity_int_value (get_session_entity (), INT_TYPE_DAY_SEGMENT_TYPE))

  00023	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  0002a	74 0f		 je	 SHORT $LN38@draw_weapo
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  00031	8b 08		 mov	 ecx, DWORD PTR [eax]
  00033	89 8d 60 ff ff
	ff		 mov	 DWORD PTR tv71[ebp], ecx
  00039	eb 20		 jmp	 SHORT $LN39@draw_weapo
$LN38@draw_weapo:
  0003b	68 7d 1d 00 00	 push	 7549			; 00001d7dH
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00045	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0004b	52		 push	 edx
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00051	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv71[ebp], 0
$LN39@draw_weapo:
  0005b	b8 01 00 00 00	 mov	 eax, 1
  00060	85 c0		 test	 eax, eax
  00062	74 0c		 je	 SHORT $LN40@draw_weapo
  00064	c7 85 5c ff ff
	ff 27 00 00 00	 mov	 DWORD PTR tv78[ebp], 39	; 00000027H
  0006e	eb 20		 jmp	 SHORT $LN41@draw_weapo
$LN40@draw_weapo:
  00070	68 7d 1d 00 00	 push	 7549			; 00001d7dH
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0007a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00080	51		 push	 ecx
  00081	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00086	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN41@draw_weapo:
  00090	6a 27		 push	 39			; 00000027H
  00092	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  00098	52		 push	 edx
  00099	69 85 60 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv71[ebp], 1116
  000a3	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR tv78[ebp]
  000a9	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  000b0	ff d2		 call	 edx
  000b2	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv84[ebp], eax
  000b8	83 bd 58 ff ff
	ff 03		 cmp	 DWORD PTR tv84[ebp], 3
  000bf	77 3b		 ja	 SHORT $LN2@draw_weapo
  000c1	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR tv84[ebp]
  000c7	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN46@draw_weapo[eax*4]
$LN5@draw_weapo:

; 7550 : 	{
; 7551 : 		case DAY_SEGMENT_TYPE_DAWN:
; 7552 : 		{
; 7553 : 			base_cockpit_graphics_file = GRAPHICS_COCKPITS_APACHE_LEVEL2_BASE;

  000ce	c7 05 00 00 00
	00 5c 00 00 00	 mov	 DWORD PTR ?base_cockpit_graphics_file@@3W4GRAPHICS_FILE_SPECIFIERS@@A, 92 ; base_cockpit_graphics_file, 0000005cH

; 7554 : 
; 7555 : 			break;

  000d8	eb 22		 jmp	 SHORT $LN2@draw_weapo
$LN6@draw_weapo:

; 7556 : 		}
; 7557 : 		case DAY_SEGMENT_TYPE_DAY:
; 7558 : 		{
; 7559 : 			base_cockpit_graphics_file = GRAPHICS_COCKPITS_APACHE_LEVEL1_BASE;

  000da	c7 05 00 00 00
	00 2d 00 00 00	 mov	 DWORD PTR ?base_cockpit_graphics_file@@3W4GRAPHICS_FILE_SPECIFIERS@@A, 45 ; base_cockpit_graphics_file, 0000002dH

; 7560 : 
; 7561 : 			break;

  000e4	eb 16		 jmp	 SHORT $LN2@draw_weapo
$LN7@draw_weapo:

; 7562 : 		}
; 7563 : 		case DAY_SEGMENT_TYPE_DUSK:
; 7564 : 		{
; 7565 : 			base_cockpit_graphics_file = GRAPHICS_COCKPITS_APACHE_LEVEL2_BASE;

  000e6	c7 05 00 00 00
	00 5c 00 00 00	 mov	 DWORD PTR ?base_cockpit_graphics_file@@3W4GRAPHICS_FILE_SPECIFIERS@@A, 92 ; base_cockpit_graphics_file, 0000005cH

; 7566 : 
; 7567 : 			break;

  000f0	eb 0a		 jmp	 SHORT $LN2@draw_weapo
$LN8@draw_weapo:

; 7568 : 		}
; 7569 : 		case DAY_SEGMENT_TYPE_NIGHT:
; 7570 : 		{
; 7571 : 			base_cockpit_graphics_file = GRAPHICS_COCKPITS_APACHE_LEVEL3_BASE;

  000f2	c7 05 00 00 00
	00 8b 00 00 00	 mov	 DWORD PTR ?base_cockpit_graphics_file@@3W4GRAPHICS_FILE_SPECIFIERS@@A, 139 ; base_cockpit_graphics_file, 0000008bH
$LN2@draw_weapo:

; 7572 : 
; 7573 : 			break;
; 7574 : 		}
; 7575 : 	}
; 7576 : 
; 7577 : 	#if DEMO_VERSION
; 7578 : 
; 7579 : 	base_cockpit_graphics_file = GRAPHICS_COCKPITS_APACHE_LEVEL1_BASE;
; 7580 : 
; 7581 : 	#endif
; 7582 : 
; 7583 : 	//
; 7584 : 	////////////////////////////////////////
; 7585 : 
; 7586 : 	weapon_draw_on_texture = draw_on_texture;

  000fc	8b 45 0c	 mov	 eax, DWORD PTR _draw_on_texture$[ebp]
  000ff	a3 00 00 00 00	 mov	 DWORD PTR ?weapon_draw_on_texture@@3HA, eax

; 7587 : 
; 7588 : 	weapon_sprite_data = get_graphics_file_data (base_cockpit_graphics_file + GRAPHICS_COCKPITS_APACHE_WEAPONS_MFD_SPRITES);

  00104	a1 00 00 00 00	 mov	 eax, DWORD PTR ?base_cockpit_graphics_file@@3W4GRAPHICS_FILE_SPECIFIERS@@A ; base_cockpit_graphics_file
  00109	83 c0 2d	 add	 eax, 45			; 0000002dH
  0010c	6b c8 28	 imul	 ecx, eax, 40
  0010f	8b 91 1c 00 00
	00		 mov	 edx, DWORD PTR ?graphics_files@@3PAUFILE_DATA@@A[ecx+28]
  00115	89 15 00 00 00
	00		 mov	 DWORD PTR ?weapon_sprite_data@@3PAEA, edx

; 7589 : 
; 7590 : 	weapon_mask_data = get_graphics_file_data (base_cockpit_graphics_file + GRAPHICS_COCKPITS_APACHE_WEAPONS_MFD_SPRITES_MASK);

  0011b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?base_cockpit_graphics_file@@3W4GRAPHICS_FILE_SPECIFIERS@@A ; base_cockpit_graphics_file
  00120	83 c0 2e	 add	 eax, 46			; 0000002eH
  00123	6b c8 28	 imul	 ecx, eax, 40
  00126	8b 91 1c 00 00
	00		 mov	 edx, DWORD PTR ?graphics_files@@3PAUFILE_DATA@@A[ecx+28]
  0012c	89 15 00 00 00
	00		 mov	 DWORD PTR ?weapon_mask_data@@3PAEA, edx

; 7591 : 
; 7592 : 	weapon_sprite.mask_value = 0;

  00132	c6 05 18 00 00
	00 00		 mov	 BYTE PTR ?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A+24, 0

; 7593 : 
; 7594 : 	en = get_gunship_entity ();

  00139	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0013e	89 45 ac	 mov	 DWORD PTR _en$[ebp], eax

; 7595 : 
; 7596 : 	selected_weapon = get_local_entity_int_value (en, INT_TYPE_SELECTED_WEAPON);

  00141	83 7d ac 00	 cmp	 DWORD PTR _en$[ebp], 0
  00145	74 0d		 je	 SHORT $LN42@draw_weapo
  00147	8b 45 ac	 mov	 eax, DWORD PTR _en$[ebp]
  0014a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014c	89 8d 60 ff ff
	ff		 mov	 DWORD PTR tv132[ebp], ecx
  00152	eb 24		 jmp	 SHORT $LN43@draw_weapo
$LN42@draw_weapo:
  00154	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z@4JA
  0015a	83 c2 48	 add	 edx, 72			; 00000048H
  0015d	52		 push	 edx
  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00163	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00168	50		 push	 eax
  00169	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0016e	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv132[ebp], 0
$LN43@draw_weapo:
  00178	b9 01 00 00 00	 mov	 ecx, 1
  0017d	85 c9		 test	 ecx, ecx
  0017f	74 0c		 je	 SHORT $LN44@draw_weapo
  00181	c7 85 5c ff ff
	ff b8 00 00 00	 mov	 DWORD PTR tv140[ebp], 184 ; 000000b8H
  0018b	eb 24		 jmp	 SHORT $LN45@draw_weapo
$LN44@draw_weapo:
  0018d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z@4JA
  00193	83 c2 48	 add	 edx, 72			; 00000048H
  00196	52		 push	 edx
  00197	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0019c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  001a1	50		 push	 eax
  001a2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001a7	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv140[ebp], 0
$LN45@draw_weapo:
  001b1	68 b8 00 00 00	 push	 184			; 000000b8H
  001b6	8b 4d ac	 mov	 ecx, DWORD PTR _en$[ebp]
  001b9	51		 push	 ecx
  001ba	69 95 60 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv132[ebp], 1116
  001c4	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR tv140[ebp]
  001ca	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  001d1	ff d1		 call	 ecx
  001d3	89 45 a8	 mov	 DWORD PTR _selected_weapon$[ebp], eax

; 7597 : 
; 7598 : 	if (draw_large_mfd)

  001d6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  001dd	0f 84 4f 02 00
	00		 je	 $LN9@draw_weapo

; 7599 : 	{
; 7600 : 		if (location == MFD_LOCATION_LHS)

  001e3	83 7d 08 00	 cmp	 DWORD PTR _location$[ebp], 0
  001e7	75 22		 jne	 SHORT $LN11@draw_weapo

; 7601 : 		{
; 7602 : 			weapon_x_offset = (int) mfd_viewport_x_min + 38 - 4;

  001e9	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?mfd_viewport_x_min@@3MA
  001f1	83 c0 22	 add	 eax, 34			; 00000022H
  001f4	a3 00 00 00 00	 mov	 DWORD PTR ?weapon_x_offset@@3HA, eax

; 7603 : 			weapon_y_offset = (int) mfd_viewport_y_min + 32 - 4;

  001f9	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?mfd_viewport_y_min@@3MA
  00201	83 c0 1c	 add	 eax, 28			; 0000001cH
  00204	a3 00 00 00 00	 mov	 DWORD PTR ?weapon_y_offset@@3HA, eax

; 7604 : 		}
; 7605 : 		else

  00209	eb 20		 jmp	 SHORT $LN12@draw_weapo
$LN11@draw_weapo:

; 7606 : 		{
; 7607 : 			weapon_x_offset = (int) mfd_viewport_x_min + 38 - 4;

  0020b	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?mfd_viewport_x_min@@3MA
  00213	83 c0 22	 add	 eax, 34			; 00000022H
  00216	a3 00 00 00 00	 mov	 DWORD PTR ?weapon_x_offset@@3HA, eax

; 7608 : 			weapon_y_offset = (int) mfd_viewport_y_min + 32 - 4;

  0021b	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?mfd_viewport_y_min@@3MA
  00223	83 c0 1c	 add	 eax, 28			; 0000001cH
  00226	a3 00 00 00 00	 mov	 DWORD PTR ?weapon_y_offset@@3HA, eax
$LN12@draw_weapo:

; 7609 : 		}
; 7610 : 
; 7611 : 		//
; 7612 : 		// helicopter
; 7613 : 		//
; 7614 : 
; 7615 : 		draw_sprite (4, 4, 4, 4, 256, 256);

  0022b	68 00 01 00 00	 push	 256			; 00000100H
  00230	68 00 01 00 00	 push	 256			; 00000100H
  00235	6a 04		 push	 4
  00237	6a 04		 push	 4
  00239	6a 04		 push	 4
  0023b	6a 04		 push	 4
  0023d	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7616 : 
; 7617 : 		//
; 7618 : 		// arm
; 7619 : 		//
; 7620 : 
; 7621 : 		if (selected_weapon != ENTITY_SUB_TYPE_WEAPON_NO_WEAPON)

  00242	83 7d a8 00	 cmp	 DWORD PTR _selected_weapon$[ebp], 0
  00246	74 14		 je	 SHORT $LN13@draw_weapo

; 7622 : 		{
; 7623 : 			draw_sprite (102, 116, 422, 3, 59, 22);

  00248	6a 16		 push	 22			; 00000016H
  0024a	6a 3b		 push	 59			; 0000003bH
  0024c	6a 03		 push	 3
  0024e	68 a6 01 00 00	 push	 422			; 000001a6H
  00253	6a 74		 push	 116			; 00000074H
  00255	6a 66		 push	 102			; 00000066H
  00257	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN13@draw_weapo:

; 7624 : 		}
; 7625 : 
; 7626 : 		//
; 7627 : 		// hardpoints
; 7628 : 		//
; 7629 : 
; 7630 : 		draw_weapon_hardpoint_info (APACHE_CHAIN_GUN_TURRET, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  0025c	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  0025f	50		 push	 eax
  00260	6a 00		 push	 0
  00262	6a 06		 push	 6
  00264	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 7631 : 
; 7632 : 		draw_weapon_hardpoint_info (APACHE_LHS_WING_TIP_MOUNT, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  00269	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  0026c	50		 push	 eax
  0026d	6a 00		 push	 0
  0026f	6a 04		 push	 4
  00271	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 7633 : 
; 7634 : 		draw_weapon_hardpoint_info (APACHE_RHS_WING_TIP_MOUNT, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  00276	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  00279	50		 push	 eax
  0027a	6a 00		 push	 0
  0027c	6a 05		 push	 5
  0027e	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 7635 : 
; 7636 : 		draw_weapon_hardpoint_info (APACHE_LHS_INNER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  00283	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  00286	50		 push	 eax
  00287	6a 00		 push	 0
  00289	6a 00		 push	 0
  0028b	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 7637 : 
; 7638 : 		draw_weapon_hardpoint_info (APACHE_RHS_INNER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  00290	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  00293	50		 push	 eax
  00294	6a 00		 push	 0
  00296	6a 01		 push	 1
  00298	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 7639 : 
; 7640 : 		draw_weapon_hardpoint_info (APACHE_LHS_OUTER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  0029d	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  002a0	50		 push	 eax
  002a1	6a 00		 push	 0
  002a3	6a 02		 push	 2
  002a5	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 7641 : 
; 7642 : 		draw_weapon_hardpoint_info (APACHE_RHS_OUTER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  002aa	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  002ad	50		 push	 eax
  002ae	6a 00		 push	 0
  002b0	6a 03		 push	 3
  002b2	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 7643 : 
; 7644 : 		draw_weapon_hardpoint_info (APACHE_CHAFF_DISPENSER, ENTITY_SUB_TYPE_WEAPON_CHAFF, selected_weapon);

  002b7	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  002ba	50		 push	 eax
  002bb	6a 43		 push	 67			; 00000043H
  002bd	6a 07		 push	 7
  002bf	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 7645 : 
; 7646 : 		draw_weapon_hardpoint_info (APACHE_FLARE_DISPENSER, ENTITY_SUB_TYPE_WEAPON_FLARE, selected_weapon);

  002c4	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  002c7	50		 push	 eax
  002c8	6a 44		 push	 68			; 00000044H
  002ca	6a 07		 push	 7
  002cc	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 7647 : 
; 7648 : 		//
; 7649 : 		// auto-countermeasures
; 7650 : 		//
; 7651 : 
; 7652 : 		if (get_global_auto_counter_measures ())

  002d1	83 3d 90 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+144, 0
  002d8	74 17		 je	 SHORT $LN14@draw_weapo

; 7653 : 		{
; 7654 : 			draw_sprite (108, 176, 520, 3, 47, 14);

  002da	6a 0e		 push	 14			; 0000000eH
  002dc	6a 2f		 push	 47			; 0000002fH
  002de	6a 03		 push	 3
  002e0	68 08 02 00 00	 push	 520			; 00000208H
  002e5	68 b0 00 00 00	 push	 176			; 000000b0H
  002ea	6a 6c		 push	 108			; 0000006cH
  002ec	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN14@draw_weapo:

; 7655 : 		}
; 7656 : 
; 7657 : 		//
; 7658 : 		// rocket salvo
; 7659 : 		//
; 7660 : 
; 7661 : 		if
; 7662 : 		(
; 7663 : 			get_local_entity_weapon_available (en, ENTITY_SUB_TYPE_WEAPON_HYDRA70_M255) ||

  002f1	6a 1e		 push	 30			; 0000001eH
  002f3	8b 45 ac	 mov	 eax, DWORD PTR _en$[ebp]
  002f6	50		 push	 eax
  002f7	e8 00 00 00 00	 call	 ?get_local_entity_weapon_available@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_available
  002fc	85 c0		 test	 eax, eax
  002fe	75 13		 jne	 SHORT $LN16@draw_weapo
  00300	6a 1f		 push	 31			; 0000001fH
  00302	8b 45 ac	 mov	 eax, DWORD PTR _en$[ebp]
  00305	50		 push	 eax
  00306	e8 00 00 00 00	 call	 ?get_local_entity_weapon_available@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_available
  0030b	85 c0		 test	 eax, eax
  0030d	0f 84 1a 01 00
	00		 je	 $LN18@draw_weapo
$LN16@draw_weapo:

; 7664 : 			get_local_entity_weapon_available (en, ENTITY_SUB_TYPE_WEAPON_HYDRA70_M261)
; 7665 : 		)
; 7666 : 		{
; 7667 : 			draw_sprite (66, 268, 264, 165, 98, 16);

  00313	6a 10		 push	 16			; 00000010H
  00315	6a 62		 push	 98			; 00000062H
  00317	68 a5 00 00 00	 push	 165			; 000000a5H
  0031c	68 08 01 00 00	 push	 264			; 00000108H
  00321	68 0c 01 00 00	 push	 268			; 0000010cH
  00326	6a 42		 push	 66			; 00000042H
  00328	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7668 : 
; 7669 : 			if (rocket_salvo_size == ROCKET_SALVO_SIZE_ALL)

  0032d	81 3d 00 00 00
	00 e8 03 00 00	 cmp	 DWORD PTR ?rocket_salvo_size@@3HA, 1000 ; rocket_salvo_size, 000003e8H
  00337	75 22		 jne	 SHORT $LN17@draw_weapo

; 7670 : 			{
; 7671 : 				draw_sprite (167, 268, 365, 165, 34, 16);

  00339	6a 10		 push	 16			; 00000010H
  0033b	6a 22		 push	 34			; 00000022H
  0033d	68 a5 00 00 00	 push	 165			; 000000a5H
  00342	68 6d 01 00 00	 push	 365			; 0000016dH
  00347	68 0c 01 00 00	 push	 268			; 0000010cH
  0034c	68 a7 00 00 00	 push	 167			; 000000a7H
  00351	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7672 : 			}
; 7673 : 			else

  00356	e9 d2 00 00 00	 jmp	 $LN18@draw_weapo
$LN17@draw_weapo:

; 7674 : 			{
; 7675 : 				sprintf (buffer, "%02d", rocket_salvo_size);

  0035b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rocket_salvo_size@@3HA ; rocket_salvo_size
  00360	50		 push	 eax
  00361	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  00366	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00369	51		 push	 ecx
  0036a	e8 00 00 00 00	 call	 _sprintf
  0036f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7676 : 
; 7677 : 				if (buffer[0] == '0')

  00372	b8 01 00 00 00	 mov	 eax, 1
  00377	6b c8 00	 imul	 ecx, eax, 0
  0037a	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  0037f	83 fa 30	 cmp	 edx, 48			; 00000030H
  00382	75 0f		 jne	 SHORT $LN19@draw_weapo

; 7678 : 				{
; 7679 : 					u = 364 + (9 * 10);

  00384	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43e30000
  0038c	f3 0f 11 45 a4	 movss	 DWORD PTR _u$[ebp], xmm0

; 7680 : 				}
; 7681 : 				else

  00391	eb 21		 jmp	 SHORT $LN20@draw_weapo
$LN19@draw_weapo:

; 7682 : 				{
; 7683 : 					u = 364 + ((buffer[0] - '1') * 10);

  00393	b8 01 00 00 00	 mov	 eax, 1
  00398	6b c8 00	 imul	 ecx, eax, 0
  0039b	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  003a0	83 ea 31	 sub	 edx, 49			; 00000031H
  003a3	6b c2 0a	 imul	 eax, edx, 10
  003a6	05 6c 01 00 00	 add	 eax, 364		; 0000016cH
  003ab	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  003af	f3 0f 11 45 a4	 movss	 DWORD PTR _u$[ebp], xmm0
$LN20@draw_weapo:

; 7684 : 				}
; 7685 : 
; 7686 : 				draw_sprite (167, 270, u, 32, 8, 12);

  003b4	6a 0c		 push	 12			; 0000000cH
  003b6	6a 08		 push	 8
  003b8	6a 20		 push	 32			; 00000020H
  003ba	f3 0f 2c 45 a4	 cvttss2si eax, DWORD PTR _u$[ebp]
  003bf	50		 push	 eax
  003c0	68 0e 01 00 00	 push	 270			; 0000010eH
  003c5	68 a7 00 00 00	 push	 167			; 000000a7H
  003ca	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7687 : 
; 7688 : 				if (buffer[1] == '0')

  003cf	b8 01 00 00 00	 mov	 eax, 1
  003d4	c1 e0 00	 shl	 eax, 0
  003d7	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  003dc	83 f9 30	 cmp	 ecx, 48			; 00000030H
  003df	75 0f		 jne	 SHORT $LN21@draw_weapo

; 7689 : 				{
; 7690 : 					u = 364 + (9 * 10);

  003e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43e30000
  003e9	f3 0f 11 45 a4	 movss	 DWORD PTR _u$[ebp], xmm0

; 7691 : 				}
; 7692 : 				else

  003ee	eb 22		 jmp	 SHORT $LN22@draw_weapo
$LN21@draw_weapo:

; 7693 : 				{
; 7694 : 					u = 364 + ((buffer[1] - '1') * 10);

  003f0	b8 01 00 00 00	 mov	 eax, 1
  003f5	c1 e0 00	 shl	 eax, 0
  003f8	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  003fd	83 e9 31	 sub	 ecx, 49			; 00000031H
  00400	6b d1 0a	 imul	 edx, ecx, 10
  00403	81 c2 6c 01 00
	00		 add	 edx, 364		; 0000016cH
  00409	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0040d	f3 0f 11 45 a4	 movss	 DWORD PTR _u$[ebp], xmm0
$LN22@draw_weapo:

; 7695 : 				}
; 7696 : 
; 7697 : 				draw_sprite (175, 270, u, 32, 8, 12);

  00412	6a 0c		 push	 12			; 0000000cH
  00414	6a 08		 push	 8
  00416	6a 20		 push	 32			; 00000020H
  00418	f3 0f 2c 45 a4	 cvttss2si eax, DWORD PTR _u$[ebp]
  0041d	50		 push	 eax
  0041e	68 0e 01 00 00	 push	 270			; 0000010eH
  00423	68 af 00 00 00	 push	 175			; 000000afH
  00428	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN18@draw_weapo:

; 7698 : 			}
; 7699 : 		}
; 7700 : 	}
; 7701 : 	else

  0042d	e9 76 02 00 00	 jmp	 $LN32@draw_weapo
$LN9@draw_weapo:

; 7702 : 	{
; 7703 : 		if (draw_on_texture)

  00432	83 7d 0c 00	 cmp	 DWORD PTR _draw_on_texture$[ebp], 0
  00436	74 16		 je	 SHORT $LN23@draw_weapo

; 7704 : 		{
; 7705 : 			weapon_x_offset = 0 - 4;

  00438	c7 05 00 00 00
	00 fc ff ff ff	 mov	 DWORD PTR ?weapon_x_offset@@3HA, -4 ; fffffffcH

; 7706 : 			weapon_y_offset = 0 - 262 - 3;

  00442	c7 05 00 00 00
	00 f7 fe ff ff	 mov	 DWORD PTR ?weapon_y_offset@@3HA, -265 ; fffffef7H

; 7707 : 		}
; 7708 : 		else

  0044c	eb 4c		 jmp	 SHORT $LN26@draw_weapo
$LN23@draw_weapo:

; 7709 : 		{
; 7710 : 			if (location == MFD_LOCATION_LHS)

  0044e	83 7d 08 00	 cmp	 DWORD PTR _location$[ebp], 0
  00452	75 24		 jne	 SHORT $LN25@draw_weapo

; 7711 : 			{
; 7712 : 				weapon_x_offset = (int) mfd_viewport_x_min - 4;

  00454	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?mfd_viewport_x_min@@3MA
  0045c	83 e8 04	 sub	 eax, 4
  0045f	a3 00 00 00 00	 mov	 DWORD PTR ?weapon_x_offset@@3HA, eax

; 7713 : 				weapon_y_offset = (int) mfd_viewport_y_min - 262 - 3;

  00464	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?mfd_viewport_y_min@@3MA
  0046c	2d 09 01 00 00	 sub	 eax, 265		; 00000109H
  00471	a3 00 00 00 00	 mov	 DWORD PTR ?weapon_y_offset@@3HA, eax

; 7714 : 			}
; 7715 : 			else

  00476	eb 22		 jmp	 SHORT $LN26@draw_weapo
$LN25@draw_weapo:

; 7716 : 			{
; 7717 : 				weapon_x_offset = (int) mfd_viewport_x_min - 4;

  00478	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?mfd_viewport_x_min@@3MA
  00480	83 e8 04	 sub	 eax, 4
  00483	a3 00 00 00 00	 mov	 DWORD PTR ?weapon_x_offset@@3HA, eax

; 7718 : 				weapon_y_offset = (int) mfd_viewport_y_min - 262 - 3;

  00488	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?mfd_viewport_y_min@@3MA
  00490	2d 09 01 00 00	 sub	 eax, 265		; 00000109H
  00495	a3 00 00 00 00	 mov	 DWORD PTR ?weapon_y_offset@@3HA, eax
$LN26@draw_weapo:

; 7719 : 			}
; 7720 : 		}
; 7721 : 
; 7722 : 		//
; 7723 : 		// helicopter
; 7724 : 		//
; 7725 : 
; 7726 : 		draw_sprite (4, 262 + 3, 4, 262, 128, 128);

  0049a	68 80 00 00 00	 push	 128			; 00000080H
  0049f	68 80 00 00 00	 push	 128			; 00000080H
  004a4	68 06 01 00 00	 push	 262			; 00000106H
  004a9	6a 04		 push	 4
  004ab	68 09 01 00 00	 push	 265			; 00000109H
  004b0	6a 04		 push	 4
  004b2	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7727 : 
; 7728 : 		//
; 7729 : 		// arm
; 7730 : 		//
; 7731 : 
; 7732 : 		if (selected_weapon != ENTITY_SUB_TYPE_WEAPON_NO_WEAPON)

  004b7	83 7d a8 00	 cmp	 DWORD PTR _selected_weapon$[ebp], 0
  004bb	74 1a		 je	 SHORT $LN27@draw_weapo

; 7733 : 		{
; 7734 : 			draw_sprite (53, 318, 213, 261, 29, 11);

  004bd	6a 0b		 push	 11			; 0000000bH
  004bf	6a 1d		 push	 29			; 0000001dH
  004c1	68 05 01 00 00	 push	 261			; 00000105H
  004c6	68 d5 00 00 00	 push	 213			; 000000d5H
  004cb	68 3e 01 00 00	 push	 318			; 0000013eH
  004d0	6a 35		 push	 53			; 00000035H
  004d2	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN27@draw_weapo:

; 7735 : 		}
; 7736 : 
; 7737 : 		//
; 7738 : 		// hardpoints
; 7739 : 		//
; 7740 : 
; 7741 : 		draw_weapon_hardpoint_info (APACHE_CHAIN_GUN_TURRET, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  004d7	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  004da	50		 push	 eax
  004db	6a 00		 push	 0
  004dd	6a 06		 push	 6
  004df	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 7742 : 
; 7743 : 		draw_weapon_hardpoint_info (APACHE_LHS_WING_TIP_MOUNT, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  004e4	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  004e7	50		 push	 eax
  004e8	6a 00		 push	 0
  004ea	6a 04		 push	 4
  004ec	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 7744 : 
; 7745 : 		draw_weapon_hardpoint_info (APACHE_RHS_WING_TIP_MOUNT, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  004f1	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  004f4	50		 push	 eax
  004f5	6a 00		 push	 0
  004f7	6a 05		 push	 5
  004f9	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 7746 : 
; 7747 : 		draw_weapon_hardpoint_info (APACHE_LHS_INNER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  004fe	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  00501	50		 push	 eax
  00502	6a 00		 push	 0
  00504	6a 00		 push	 0
  00506	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 7748 : 
; 7749 : 		draw_weapon_hardpoint_info (APACHE_RHS_INNER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  0050b	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  0050e	50		 push	 eax
  0050f	6a 00		 push	 0
  00511	6a 01		 push	 1
  00513	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 7750 : 
; 7751 : 		draw_weapon_hardpoint_info (APACHE_LHS_OUTER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  00518	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  0051b	50		 push	 eax
  0051c	6a 00		 push	 0
  0051e	6a 02		 push	 2
  00520	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 7752 : 
; 7753 : 		draw_weapon_hardpoint_info (APACHE_RHS_OUTER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, selected_weapon);

  00525	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  00528	50		 push	 eax
  00529	6a 00		 push	 0
  0052b	6a 03		 push	 3
  0052d	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 7754 : 
; 7755 : 		draw_weapon_hardpoint_info (APACHE_CHAFF_DISPENSER, ENTITY_SUB_TYPE_WEAPON_CHAFF, selected_weapon);

  00532	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  00535	50		 push	 eax
  00536	6a 43		 push	 67			; 00000043H
  00538	6a 07		 push	 7
  0053a	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 7756 : 
; 7757 : 		draw_weapon_hardpoint_info (APACHE_FLARE_DISPENSER, ENTITY_SUB_TYPE_WEAPON_FLARE, selected_weapon);

  0053f	8b 45 a8	 mov	 eax, DWORD PTR _selected_weapon$[ebp]
  00542	50		 push	 eax
  00543	6a 44		 push	 68			; 00000044H
  00545	6a 07		 push	 7
  00547	e8 00 00 00 00	 call	 ?draw_weapon_hardpoint_info@@YGXHHH@Z ; draw_weapon_hardpoint_info

; 7758 : 
; 7759 : 		//
; 7760 : 		// auto-countermeasures
; 7761 : 		//
; 7762 : 
; 7763 : 		if (get_global_auto_counter_measures ())

  0054c	83 3d 90 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+144, 0
  00553	74 1a		 je	 SHORT $LN28@draw_weapo

; 7764 : 		{
; 7765 : 			draw_sprite (56, 347, 262, 261, 23, 7);

  00555	6a 07		 push	 7
  00557	6a 17		 push	 23			; 00000017H
  00559	68 05 01 00 00	 push	 261			; 00000105H
  0055e	68 06 01 00 00	 push	 262			; 00000106H
  00563	68 5b 01 00 00	 push	 347			; 0000015bH
  00568	6a 38		 push	 56			; 00000038H
  0056a	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN28@draw_weapo:

; 7766 : 		}
; 7767 : 
; 7768 : 		//
; 7769 : 		// rocket salvo
; 7770 : 		//
; 7771 : 
; 7772 : 		if
; 7773 : 		(
; 7774 : 			get_local_entity_weapon_available (en, ENTITY_SUB_TYPE_WEAPON_HYDRA70_M255) ||

  0056f	6a 1e		 push	 30			; 0000001eH
  00571	8b 45 ac	 mov	 eax, DWORD PTR _en$[ebp]
  00574	50		 push	 eax
  00575	e8 00 00 00 00	 call	 ?get_local_entity_weapon_available@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_available
  0057a	85 c0		 test	 eax, eax
  0057c	75 13		 jne	 SHORT $LN30@draw_weapo
  0057e	6a 1f		 push	 31			; 0000001fH
  00580	8b 45 ac	 mov	 eax, DWORD PTR _en$[ebp]
  00583	50		 push	 eax
  00584	e8 00 00 00 00	 call	 ?get_local_entity_weapon_available@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_available
  00589	85 c0		 test	 eax, eax
  0058b	0f 84 17 01 00
	00		 je	 $LN32@draw_weapo
$LN30@draw_weapo:

; 7775 : 			get_local_entity_weapon_available (en, ENTITY_SUB_TYPE_WEAPON_HYDRA70_M261)
; 7776 : 		)
; 7777 : 		{
; 7778 : 			draw_sprite (34, 382 + 3, 133, 342, 49, 8);

  00591	6a 08		 push	 8
  00593	6a 31		 push	 49			; 00000031H
  00595	68 56 01 00 00	 push	 342			; 00000156H
  0059a	68 85 00 00 00	 push	 133			; 00000085H
  0059f	68 81 01 00 00	 push	 385			; 00000181H
  005a4	6a 22		 push	 34			; 00000022H
  005a6	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7779 : 
; 7780 : 			if (rocket_salvo_size == ROCKET_SALVO_SIZE_ALL)

  005ab	81 3d 00 00 00
	00 e8 03 00 00	 cmp	 DWORD PTR ?rocket_salvo_size@@3HA, 1000 ; rocket_salvo_size, 000003e8H
  005b5	75 1f		 jne	 SHORT $LN31@draw_weapo

; 7781 : 			{
; 7782 : 				draw_sprite (84, 382 + 3, 183, 342, 18, 8);

  005b7	6a 08		 push	 8
  005b9	6a 12		 push	 18			; 00000012H
  005bb	68 56 01 00 00	 push	 342			; 00000156H
  005c0	68 b7 00 00 00	 push	 183			; 000000b7H
  005c5	68 81 01 00 00	 push	 385			; 00000181H
  005ca	6a 54		 push	 84			; 00000054H
  005cc	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7783 : 			}
; 7784 : 			else

  005d1	e9 d2 00 00 00	 jmp	 $LN32@draw_weapo
$LN31@draw_weapo:

; 7785 : 			{
; 7786 : 				sprintf (buffer, "%02d", rocket_salvo_size);

  005d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rocket_salvo_size@@3HA ; rocket_salvo_size
  005db	50		 push	 eax
  005dc	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  005e1	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  005e4	51		 push	 ecx
  005e5	e8 00 00 00 00	 call	 _sprintf
  005ea	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7787 : 
; 7788 : 				if (buffer[0] == '0')

  005ed	b8 01 00 00 00	 mov	 eax, 1
  005f2	6b c8 00	 imul	 ecx, eax, 0
  005f5	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  005fa	83 fa 30	 cmp	 edx, 48			; 00000030H
  005fd	75 0f		 jne	 SHORT $LN33@draw_weapo

; 7789 : 				{
; 7790 : 					u = 184 + (9 * 5);

  005ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43650000
  00607	f3 0f 11 45 a4	 movss	 DWORD PTR _u$[ebp], xmm0

; 7791 : 				}
; 7792 : 				else

  0060c	eb 21		 jmp	 SHORT $LN34@draw_weapo
$LN33@draw_weapo:

; 7793 : 				{
; 7794 : 					u = 184 + ((buffer[0] - '1') * 5);

  0060e	b8 01 00 00 00	 mov	 eax, 1
  00613	6b c8 00	 imul	 ecx, eax, 0
  00616	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  0061b	83 ea 31	 sub	 edx, 49			; 00000031H
  0061e	6b c2 05	 imul	 eax, edx, 5
  00621	05 b8 00 00 00	 add	 eax, 184		; 000000b8H
  00626	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0062a	f3 0f 11 45 a4	 movss	 DWORD PTR _u$[ebp], xmm0
$LN34@draw_weapo:

; 7795 : 				}
; 7796 : 
; 7797 : 				draw_sprite (86, 383 + 3, u, 276, 4, 6);

  0062f	6a 06		 push	 6
  00631	6a 04		 push	 4
  00633	68 14 01 00 00	 push	 276			; 00000114H
  00638	f3 0f 2c 45 a4	 cvttss2si eax, DWORD PTR _u$[ebp]
  0063d	50		 push	 eax
  0063e	68 82 01 00 00	 push	 386			; 00000182H
  00643	6a 56		 push	 86			; 00000056H
  00645	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 7798 : 
; 7799 : 				if (buffer[1] == '0')

  0064a	b8 01 00 00 00	 mov	 eax, 1
  0064f	c1 e0 00	 shl	 eax, 0
  00652	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  00657	83 f9 30	 cmp	 ecx, 48			; 00000030H
  0065a	75 0f		 jne	 SHORT $LN35@draw_weapo

; 7800 : 				{
; 7801 : 					u = 184 + (9 * 5);

  0065c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43650000
  00664	f3 0f 11 45 a4	 movss	 DWORD PTR _u$[ebp], xmm0

; 7802 : 				}
; 7803 : 				else

  00669	eb 22		 jmp	 SHORT $LN36@draw_weapo
$LN35@draw_weapo:

; 7804 : 				{
; 7805 : 					u = 184 + ((buffer[1] - '1') * 5);

  0066b	b8 01 00 00 00	 mov	 eax, 1
  00670	c1 e0 00	 shl	 eax, 0
  00673	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  00678	83 e9 31	 sub	 ecx, 49			; 00000031H
  0067b	6b d1 05	 imul	 edx, ecx, 5
  0067e	81 c2 b8 00 00
	00		 add	 edx, 184		; 000000b8H
  00684	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  00688	f3 0f 11 45 a4	 movss	 DWORD PTR _u$[ebp], xmm0
$LN36@draw_weapo:

; 7806 : 				}
; 7807 : 
; 7808 : 				draw_sprite (90, 383 + 3, u, 276, 4, 6);

  0068d	6a 06		 push	 6
  0068f	6a 04		 push	 4
  00691	68 14 01 00 00	 push	 276			; 00000114H
  00696	f3 0f 2c 45 a4	 cvttss2si eax, DWORD PTR _u$[ebp]
  0069b	50		 push	 eax
  0069c	68 82 01 00 00	 push	 386			; 00000182H
  006a1	6a 5a		 push	 90			; 0000005aH
  006a3	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN32@draw_weapo:
$LN1@draw_weapo:

; 7809 : 			}
; 7810 : 		}
; 7811 : 	}
; 7812 : }

  006a8	5f		 pop	 edi
  006a9	5e		 pop	 esi
  006aa	5b		 pop	 ebx
  006ab	8b e5		 mov	 esp, ebp
  006ad	5d		 pop	 ebp
  006ae	c2 08 00	 ret	 8
  006b1	0f 1f 00	 npad	 3
$LN46@draw_weapo:
  006b4	00 00 00 00	 DD	 $LN5@draw_weapo
  006b8	00 00 00 00	 DD	 $LN6@draw_weapo
  006bc	00 00 00 00	 DD	 $LN7@draw_weapo
  006c0	00 00 00 00	 DD	 $LN8@draw_weapo
?draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z ENDP	; draw_weapon_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv2165 = -304						; size = 8
tv2149 = -304						; size = 8
tv2051 = -304						; size = 8
tv1964 = -304						; size = 8
tv1946 = -304						; size = 8
tv1921 = -304						; size = 8
tv1887 = -304						; size = 8
tv1861 = -304						; size = 8
tv1831 = -304						; size = 8
tv1684 = -304						; size = 8
tv1669 = -304						; size = 8
tv1646 = -304						; size = 8
tv1631 = -304						; size = 8
tv1608 = -304						; size = 8
tv1593 = -304						; size = 8
tv679 = -304						; size = 4
tv83 = -304						; size = 4
tv1000 = -300						; size = 4
tv998 = -300						; size = 4
tv876 = -300						; size = 4
tv870 = -300						; size = 4
tv778 = -300						; size = 4
tv730 = -300						; size = 4
tv672 = -300						; size = 4
tv646 = -300						; size = 4
tv624 = -300						; size = 4
tv272 = -300						; size = 4
tv75 = -300						; size = 4
$T1 = -296						; size = 4
_y_offset$2 = -228					; size = 4
_y2$3 = -224						; size = 4
_x2$4 = -220						; size = 4
_y1$5 = -216						; size = 4
_x1$6 = -212						; size = 4
_height$7 = -208					; size = 4
_width$8 = -204						; size = 4
_tip$9 = -200						; size = 4
_left_tip$10 = -196					; size = 4
_selected$11 = -192					; size = 4
_text_colour$12 = -188					; size = 4
_selected$13 = -184					; size = 4
_missile_y$14 = -180					; size = 4
_missile_x$15 = -176					; size = 4
_last_offset$16 = -172					; size = 4
_i$17 = -168						; size = 4
_pylon_y$18 = -164					; size = 4
_pylon_x$19 = -160					; size = 4
_selected$20 = -156					; size = 4
_weapon_sub_type$ = -152				; size = 4
_pylon$ = -148						; size = 4
_selected_weapon$ = -144				; size = 4
_damaged$ = -140					; size = 4
_number$ = -136						; size = 4
_x_adjust$ = -132					; size = 4
_s_ptr$ = -128						; size = 4
_s$ = -124						; size = 80
_wing_tip_right$ = -44					; size = 4
_wing_tip_left$ = -40					; size = 4
_rear_wing$ = -36					; size = 4
_forward_wing$ = -32					; size = 4
_y3$ = -28						; size = 4
_y2$ = -24						; size = 4
_y1$ = -20						; size = 4
_x4$ = -16						; size = 4
_x3$ = -12						; size = 4
_x2$ = -8						; size = 4
_x1$ = -4						; size = 4
_location$ = 8						; size = 4
?draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z PROC ; draw_large_weapon_display_mfd, COMDAT

; 6999 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 7000 : 	float x1, x2, x3, x4, y1, y2, y3;
; 7001 : 	float forward_wing, rear_wing, wing_tip_left, wing_tip_right;
; 7002 : 	char s[80], *s_ptr;
; 7003 : 	float x_adjust;
; 7004 : 	int number, damaged, selected_weapon, pylon;
; 7005 : 	entity_sub_types weapon_sub_type;
; 7006 : 
; 7007 : 
; 7008 : 	ASSERT(draw_large_mfd);

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00013	75 18		 jne	 SHORT $LN16@draw_large
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 09	 add	 eax, 9
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MFMEIMLB@draw_large_mfd@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN16@draw_large:

; 7009 : 
; 7010 : 	selected_weapon = get_local_entity_int_value(get_gunship_entity (), INT_TYPE_SELECTED_WEAPON);

  0002d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00034	74 0f		 je	 SHORT $LN91@draw_large
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0003b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003d	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv75[ebp], ecx
  00043	eb 24		 jmp	 SHORT $LN92@draw_large
$LN91@draw_large:
  00045	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z@4JA
  0004b	83 c2 0b	 add	 edx, 11			; 0000000bH
  0004e	52		 push	 edx
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0005f	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv75[ebp], 0
$LN92@draw_large:
  00069	b9 01 00 00 00	 mov	 ecx, 1
  0006e	85 c9		 test	 ecx, ecx
  00070	74 0c		 je	 SHORT $LN93@draw_large
  00072	c7 85 d0 fe ff
	ff b8 00 00 00	 mov	 DWORD PTR tv83[ebp], 184 ; 000000b8H
  0007c	eb 24		 jmp	 SHORT $LN94@draw_large
$LN93@draw_large:
  0007e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z@4JA
  00084	83 c2 0b	 add	 edx, 11			; 0000000bH
  00087	52		 push	 edx
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00098	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv83[ebp], 0
$LN94@draw_large:
  000a2	68 b8 00 00 00	 push	 184			; 000000b8H
  000a7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000ad	51		 push	 ecx
  000ae	69 95 d4 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv75[ebp], 1116
  000b8	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR tv83[ebp]
  000be	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000c5	ff d1		 call	 ecx
  000c7	89 85 70 ff ff
	ff		 mov	 DWORD PTR _selected_weapon$[ebp], eax

; 7011 : 
; 7012 : 	set_mono_font_type (MONO_FONT_TYPE_7X12);

  000cd	6a 05		 push	 5
  000cf	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 7013 : 
; 7014 : 	// draw helicopter outline
; 7015 : 	// nose
; 7016 : 	
; 7017 : 	get_2d_float_screen_coordinates (-0.25, 0.5, &x1, &y1);

  000d4	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  000d7	50		 push	 eax
  000d8	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  000db	51		 push	 ecx
  000dc	51		 push	 ecx
  000dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ea	51		 push	 ecx
  000eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  000f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f8	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 7018 : 	get_2d_float_screen_coordinates (-0.1, 0.525, &x2, &y2);

  000fd	8d 45 e8	 lea	 eax, DWORD PTR _y2$[ebp]
  00100	50		 push	 eax
  00101	8d 4d f8	 lea	 ecx, DWORD PTR _x2$[ebp]
  00104	51		 push	 ecx
  00105	51		 push	 ecx
  00106	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f066666
  0010e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00113	51		 push	 ecx
  00114	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  0011c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00121	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 7019 : 	get_2d_float_screen_coordinates (-0.075, 0.6, &x3, &y3);

  00126	8d 45 e4	 lea	 eax, DWORD PTR _y3$[ebp]
  00129	50		 push	 eax
  0012a	8d 4d f4	 lea	 ecx, DWORD PTR _x3$[ebp]
  0012d	51		 push	 ecx
  0012e	51		 push	 ecx
  0012f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00137	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013c	51		 push	 ecx
  0013d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00145	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014a	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 7020 : 	get_2d_float_screen_x_coordinate (0.075, &x4);

  0014f	8d 45 f0	 lea	 eax, DWORD PTR _x4$[ebp]
  00152	50		 push	 eax
  00153	51		 push	 ecx
  00154	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d99999a
  0015c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00161	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7021 : 	
; 7022 : 	draw_line (x1, y1, x2, y2, MFD_COLOUR1);

  00166	b8 04 00 00 00	 mov	 eax, 4
  0016b	6b c8 00	 imul	 ecx, eax, 0
  0016e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00174	52		 push	 edx
  00175	51		 push	 ecx
  00176	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0017b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00180	51		 push	 ecx
  00181	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00186	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018b	51		 push	 ecx
  0018c	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00191	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00196	51		 push	 ecx
  00197	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0019c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a1	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7023 : 	draw_line (x2, y2, x3, y3, MFD_COLOUR1);

  001a6	b8 04 00 00 00	 mov	 eax, 4
  001ab	6b c8 00	 imul	 ecx, eax, 0
  001ae	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001b4	52		 push	 edx
  001b5	51		 push	 ecx
  001b6	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y3$[ebp]
  001bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c0	51		 push	 ecx
  001c1	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  001c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cb	51		 push	 ecx
  001cc	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  001d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d6	51		 push	 ecx
  001d7	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  001dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e1	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7024 : 	draw_line (x3, y3, x4, y3, MFD_COLOUR1);

  001e6	b8 04 00 00 00	 mov	 eax, 4
  001eb	6b c8 00	 imul	 ecx, eax, 0
  001ee	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001f4	52		 push	 edx
  001f5	51		 push	 ecx
  001f6	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y3$[ebp]
  001fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00200	51		 push	 ecx
  00201	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x4$[ebp]
  00206	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020b	51		 push	 ecx
  0020c	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y3$[ebp]
  00211	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00216	51		 push	 ecx
  00217	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  0021c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00221	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7025 : 
; 7026 : 	get_2d_float_screen_x_coordinate (0.1, &x3);

  00226	8d 45 f4	 lea	 eax, DWORD PTR _x3$[ebp]
  00229	50		 push	 eax
  0022a	51		 push	 ecx
  0022b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00233	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00238	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7027 : 	get_2d_float_screen_x_coordinate (0.25, &x2);

  0023d	8d 45 f8	 lea	 eax, DWORD PTR _x2$[ebp]
  00240	50		 push	 eax
  00241	51		 push	 ecx
  00242	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  0024a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024f	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7028 : 
; 7029 : 	draw_line (x4, y3, x3, y2, MFD_COLOUR1);

  00254	b8 04 00 00 00	 mov	 eax, 4
  00259	6b c8 00	 imul	 ecx, eax, 0
  0025c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00262	52		 push	 edx
  00263	51		 push	 ecx
  00264	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00269	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026e	51		 push	 ecx
  0026f	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  00274	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00279	51		 push	 ecx
  0027a	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y3$[ebp]
  0027f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00284	51		 push	 ecx
  00285	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x4$[ebp]
  0028a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028f	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7030 : 	draw_line (x3, y2, x2, y1, MFD_COLOUR1);

  00294	b8 04 00 00 00	 mov	 eax, 4
  00299	6b c8 00	 imul	 ecx, eax, 0
  0029c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002a2	52		 push	 edx
  002a3	51		 push	 ecx
  002a4	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  002a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ae	51		 push	 ecx
  002af	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  002b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b9	51		 push	 ecx
  002ba	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  002bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c4	51		 push	 ecx
  002c5	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  002ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002cf	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7031 : 
; 7032 : 	// body
; 7033 : 	
; 7034 : 	get_2d_float_screen_y_coordinate (-0.1, &forward_wing);

  002d4	8d 45 e0	 lea	 eax, DWORD PTR _forward_wing$[ebp]
  002d7	50		 push	 eax
  002d8	51		 push	 ecx
  002d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  002e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e6	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 7035 : 	get_2d_float_screen_y_coordinate (-0.5, &rear_wing);

  002eb	8d 45 dc	 lea	 eax, DWORD PTR _rear_wing$[ebp]
  002ee	50		 push	 eax
  002ef	51		 push	 ecx
  002f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  002f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fd	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 7036 : 	get_2d_float_screen_x_coordinate (-0.97, &wing_tip_left);

  00302	8d 45 d8	 lea	 eax, DWORD PTR _wing_tip_left$[ebp]
  00305	50		 push	 eax
  00306	51		 push	 ecx
  00307	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7851ec
  0030f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00314	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7037 : 	get_2d_float_screen_x_coordinate (0.97, &wing_tip_right);

  00319	8d 45 d4	 lea	 eax, DWORD PTR _wing_tip_right$[ebp]
  0031c	50		 push	 eax
  0031d	51		 push	 ecx
  0031e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7851ec
  00326	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032b	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7038 : 
; 7039 : 	draw_line (x1, y1, x1, forward_wing, MFD_COLOUR1);

  00330	b8 04 00 00 00	 mov	 eax, 4
  00335	6b c8 00	 imul	 ecx, eax, 0
  00338	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0033e	52		 push	 edx
  0033f	51		 push	 ecx
  00340	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  00345	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034a	51		 push	 ecx
  0034b	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00350	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00355	51		 push	 ecx
  00356	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0035b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00360	51		 push	 ecx
  00361	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00366	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7040 : 	draw_line (x2, y1, x2, forward_wing, MFD_COLOUR1);

  00370	b8 04 00 00 00	 mov	 eax, 4
  00375	6b c8 00	 imul	 ecx, eax, 0
  00378	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0037e	52		 push	 edx
  0037f	51		 push	 ecx
  00380	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  00385	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038a	51		 push	 ecx
  0038b	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00390	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00395	51		 push	 ecx
  00396	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0039b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a0	51		 push	 ecx
  003a1	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  003a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ab	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7041 : 	draw_line (x1, forward_wing, wing_tip_left, forward_wing, MFD_COLOUR1);

  003b0	b8 04 00 00 00	 mov	 eax, 4
  003b5	6b c8 00	 imul	 ecx, eax, 0
  003b8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003be	52		 push	 edx
  003bf	51		 push	 ecx
  003c0	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  003c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ca	51		 push	 ecx
  003cb	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _wing_tip_left$[ebp]
  003d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d5	51		 push	 ecx
  003d6	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  003db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e0	51		 push	 ecx
  003e1	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  003e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003eb	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7042 : 	draw_line (x2, forward_wing, wing_tip_right, forward_wing, MFD_COLOUR1);

  003f0	b8 04 00 00 00	 mov	 eax, 4
  003f5	6b c8 00	 imul	 ecx, eax, 0
  003f8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003fe	52		 push	 edx
  003ff	51		 push	 ecx
  00400	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  00405	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040a	51		 push	 ecx
  0040b	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _wing_tip_right$[ebp]
  00410	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00415	51		 push	 ecx
  00416	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  0041b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00420	51		 push	 ecx
  00421	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00426	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7043 : 
; 7044 : 	draw_line (wing_tip_left, forward_wing, wing_tip_left, rear_wing, MFD_COLOUR1);

  00430	b8 04 00 00 00	 mov	 eax, 4
  00435	6b c8 00	 imul	 ecx, eax, 0
  00438	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0043e	52		 push	 edx
  0043f	51		 push	 ecx
  00440	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  00445	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044a	51		 push	 ecx
  0044b	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _wing_tip_left$[ebp]
  00450	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00455	51		 push	 ecx
  00456	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  0045b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00460	51		 push	 ecx
  00461	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _wing_tip_left$[ebp]
  00466	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7045 : 	draw_line (wing_tip_right, forward_wing, wing_tip_right, rear_wing, MFD_COLOUR1);

  00470	b8 04 00 00 00	 mov	 eax, 4
  00475	6b c8 00	 imul	 ecx, eax, 0
  00478	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0047e	52		 push	 edx
  0047f	51		 push	 ecx
  00480	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  00485	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0048a	51		 push	 ecx
  0048b	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _wing_tip_right$[ebp]
  00490	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00495	51		 push	 ecx
  00496	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  0049b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a0	51		 push	 ecx
  004a1	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _wing_tip_right$[ebp]
  004a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ab	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7046 : 	draw_line (x1, rear_wing, wing_tip_left, rear_wing, MFD_COLOUR1);

  004b0	b8 04 00 00 00	 mov	 eax, 4
  004b5	6b c8 00	 imul	 ecx, eax, 0
  004b8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004be	52		 push	 edx
  004bf	51		 push	 ecx
  004c0	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  004c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ca	51		 push	 ecx
  004cb	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _wing_tip_left$[ebp]
  004d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d5	51		 push	 ecx
  004d6	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  004db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e0	51		 push	 ecx
  004e1	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  004e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004eb	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7047 : 	draw_line (x2, rear_wing, wing_tip_right, rear_wing, MFD_COLOUR1);

  004f0	b8 04 00 00 00	 mov	 eax, 4
  004f5	6b c8 00	 imul	 ecx, eax, 0
  004f8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004fe	52		 push	 edx
  004ff	51		 push	 ecx
  00500	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  00505	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0050a	51		 push	 ecx
  0050b	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _wing_tip_right$[ebp]
  00510	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00515	51		 push	 ecx
  00516	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  0051b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00520	51		 push	 ecx
  00521	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00526	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0052b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7048 : 
; 7049 : 	get_2d_float_screen_y_coordinate (-0.8, &y2);

  00530	8d 45 e8	 lea	 eax, DWORD PTR _y2$[ebp]
  00533	50		 push	 eax
  00534	51		 push	 ecx
  00535	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0053d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00542	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 7050 : 
; 7051 : 	draw_line (x1, rear_wing, x1, y2, MFD_COLOUR1);

  00547	b8 04 00 00 00	 mov	 eax, 4
  0054c	6b c8 00	 imul	 ecx, eax, 0
  0054f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00555	52		 push	 edx
  00556	51		 push	 ecx
  00557	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0055c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00561	51		 push	 ecx
  00562	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00567	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0056c	51		 push	 ecx
  0056d	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  00572	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00577	51		 push	 ecx
  00578	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0057d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00582	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7052 : 	draw_line (x2, rear_wing, x2, y2, MFD_COLOUR1);

  00587	b8 04 00 00 00	 mov	 eax, 4
  0058c	6b c8 00	 imul	 ecx, eax, 0
  0058f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00595	52		 push	 edx
  00596	51		 push	 ecx
  00597	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0059c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a1	51		 push	 ecx
  005a2	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  005a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ac	51		 push	 ecx
  005ad	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  005b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b7	51		 push	 ecx
  005b8	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  005bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c2	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7053 : 	draw_line (x1, y2, x2, y2, MFD_COLOUR1);

  005c7	b8 04 00 00 00	 mov	 eax, 4
  005cc	6b c8 00	 imul	 ecx, eax, 0
  005cf	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005d5	52		 push	 edx
  005d6	51		 push	 ecx
  005d7	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  005dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e1	51		 push	 ecx
  005e2	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  005e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ec	51		 push	 ecx
  005ed	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  005f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f7	51		 push	 ecx
  005f8	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  005fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00602	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7054 : 
; 7055 : 
; 7056 : 	// cannon
; 7057 : 	if ( get_local_entity_weapon_hardpoint_info (get_gunship_entity (),

  00607	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _damaged$[ebp]
  0060d	50		 push	 eax
  0060e	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _number$[ebp]
  00614	51		 push	 ecx
  00615	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  0061b	52		 push	 edx
  0061c	6a 00		 push	 0
  0061e	6a 06		 push	 6
  00620	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00625	50		 push	 eax
  00626	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  0062b	85 c0		 test	 eax, eax
  0062d	0f 84 01 05 00
	00		 je	 $LN17@draw_large

; 7058 : 		APACHE_CHAIN_GUN_TURRET, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, 
; 7059 : 		&weapon_sub_type, &number, &damaged))
; 7060 : 	{
; 7061 : 		int selected = (weapon_sub_type == selected_weapon) && !damaged;

  00633	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00639	3b 85 70 ff ff
	ff		 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  0063f	75 15		 jne	 SHORT $LN95@draw_large
  00641	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  00648	75 0c		 jne	 SHORT $LN95@draw_large
  0064a	c7 85 d4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv272[ebp], 1
  00654	eb 0a		 jmp	 SHORT $LN96@draw_large
$LN95@draw_large:
  00656	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv272[ebp], 0
$LN96@draw_large:
  00660	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv272[ebp]
  00666	89 8d 64 ff ff
	ff		 mov	 DWORD PTR _selected$20[ebp], ecx

; 7062 : 
; 7063 : 		get_2d_float_screen_coordinates (-0.01, 0.575, &x1, &y1);

  0066c	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  0066f	50		 push	 eax
  00670	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  00673	51		 push	 ecx
  00674	51		 push	 ecx
  00675	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f133333
  0067d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00682	51		 push	 ecx
  00683	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bc23d70a
  0068b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00690	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 7064 : 		get_2d_float_screen_x_coordinate (0.01, &x2);

  00695	8d 45 f8	 lea	 eax, DWORD PTR _x2$[ebp]
  00698	50		 push	 eax
  00699	51		 push	 ecx
  0069a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70a
  006a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a7	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7065 : 		get_2d_float_screen_y_coordinate (0.35, &y2);

  006ac	8d 45 e8	 lea	 eax, DWORD PTR _y2$[ebp]
  006af	50		 push	 eax
  006b0	51		 push	 ecx
  006b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  006b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006be	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 7066 : 		get_2d_float_screen_x_coordinate (-0.08, &x3);

  006c3	8d 45 f4	 lea	 eax, DWORD PTR _x3$[ebp]
  006c6	50		 push	 eax
  006c7	51		 push	 ecx
  006c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bda3d70a
  006d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d5	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7067 : 		get_2d_float_screen_x_coordinate (0.08, &x4);

  006da	8d 45 f0	 lea	 eax, DWORD PTR _x4$[ebp]
  006dd	50		 push	 eax
  006de	51		 push	 ecx
  006df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  006e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ec	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7068 : 		get_2d_float_screen_y_coordinate (0.2, &y3);

  006f1	8d 45 e4	 lea	 eax, DWORD PTR _y3$[ebp]
  006f4	50		 push	 eax
  006f5	51		 push	 ecx
  006f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  006fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00703	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 7069 : 		
; 7070 : 		if (selected)

  00708	83 bd 64 ff ff
	ff 00		 cmp	 DWORD PTR _selected$20[ebp], 0
  0070f	74 5d		 je	 SHORT $LN18@draw_large

; 7071 : 		{
; 7072 : 			set_block (x1, y1, x2, y2, MFD_COLOUR1);

  00711	b8 04 00 00 00	 mov	 eax, 4
  00716	6b c8 00	 imul	 ecx, eax, 0
  00719	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0071f	52		 push	 edx
  00720	f3 0f 2c 45 e8	 cvttss2si eax, DWORD PTR _y2$[ebp]
  00725	50		 push	 eax
  00726	f3 0f 2c 4d f8	 cvttss2si ecx, DWORD PTR _x2$[ebp]
  0072b	51		 push	 ecx
  0072c	f3 0f 2c 55 ec	 cvttss2si edx, DWORD PTR _y1$[ebp]
  00731	52		 push	 edx
  00732	f3 0f 2c 45 fc	 cvttss2si eax, DWORD PTR _x1$[ebp]
  00737	50		 push	 eax
  00738	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 7073 : 			set_block (x3, y2, x4, y3, MFD_COLOUR1);	

  0073d	b8 04 00 00 00	 mov	 eax, 4
  00742	6b c8 00	 imul	 ecx, eax, 0
  00745	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0074b	52		 push	 edx
  0074c	f3 0f 2c 45 e4	 cvttss2si eax, DWORD PTR _y3$[ebp]
  00751	50		 push	 eax
  00752	f3 0f 2c 4d f0	 cvttss2si ecx, DWORD PTR _x4$[ebp]
  00757	51		 push	 ecx
  00758	f3 0f 2c 55 e8	 cvttss2si edx, DWORD PTR _y2$[ebp]
  0075d	52		 push	 edx
  0075e	f3 0f 2c 45 f4	 cvttss2si eax, DWORD PTR _x3$[ebp]
  00763	50		 push	 eax
  00764	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 7074 : 		}
; 7075 : 		else

  00769	e9 c0 01 00 00	 jmp	 $LN19@draw_large
$LN18@draw_large:

; 7076 : 		{
; 7077 : 			draw_line (x1, y1, x2, y1, MFD_COLOUR1);

  0076e	b8 04 00 00 00	 mov	 eax, 4
  00773	6b c8 00	 imul	 ecx, eax, 0
  00776	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0077c	52		 push	 edx
  0077d	51		 push	 ecx
  0077e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00783	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00788	51		 push	 ecx
  00789	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0078e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00793	51		 push	 ecx
  00794	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00799	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079e	51		 push	 ecx
  0079f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  007a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a9	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7078 : 			draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  007ae	b8 04 00 00 00	 mov	 eax, 4
  007b3	6b c8 00	 imul	 ecx, eax, 0
  007b6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007bc	52		 push	 edx
  007bd	51		 push	 ecx
  007be	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  007c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c8	51		 push	 ecx
  007c9	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  007ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d3	51		 push	 ecx
  007d4	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  007d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007de	51		 push	 ecx
  007df	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  007e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e9	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7079 : 			draw_line (x2, y1, x2, y2, MFD_COLOUR1);

  007ee	b8 04 00 00 00	 mov	 eax, 4
  007f3	6b c8 00	 imul	 ecx, eax, 0
  007f6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007fc	52		 push	 edx
  007fd	51		 push	 ecx
  007fe	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00803	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00808	51		 push	 ecx
  00809	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0080e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00813	51		 push	 ecx
  00814	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00819	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081e	51		 push	 ecx
  0081f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00824	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00829	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7080 : 			draw_line (x1, y2, x3, y2, MFD_COLOUR1);

  0082e	b8 04 00 00 00	 mov	 eax, 4
  00833	6b c8 00	 imul	 ecx, eax, 0
  00836	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0083c	52		 push	 edx
  0083d	51		 push	 ecx
  0083e	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00843	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00848	51		 push	 ecx
  00849	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  0084e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00853	51		 push	 ecx
  00854	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00859	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0085e	51		 push	 ecx
  0085f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00864	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00869	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7081 : 			draw_line (x2, y2, x4, y2, MFD_COLOUR1);

  0086e	b8 04 00 00 00	 mov	 eax, 4
  00873	6b c8 00	 imul	 ecx, eax, 0
  00876	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0087c	52		 push	 edx
  0087d	51		 push	 ecx
  0087e	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00883	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00888	51		 push	 ecx
  00889	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x4$[ebp]
  0088e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00893	51		 push	 ecx
  00894	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00899	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0089e	51		 push	 ecx
  0089f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  008a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a9	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7082 : 			draw_line (x3, y2, x3, y3, MFD_COLOUR1);

  008ae	b8 04 00 00 00	 mov	 eax, 4
  008b3	6b c8 00	 imul	 ecx, eax, 0
  008b6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008bc	52		 push	 edx
  008bd	51		 push	 ecx
  008be	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y3$[ebp]
  008c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c8	51		 push	 ecx
  008c9	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  008ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d3	51		 push	 ecx
  008d4	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  008d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008de	51		 push	 ecx
  008df	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x3$[ebp]
  008e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e9	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7083 : 			draw_line (x4, y2, x4, y3, MFD_COLOUR1);

  008ee	b8 04 00 00 00	 mov	 eax, 4
  008f3	6b c8 00	 imul	 ecx, eax, 0
  008f6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008fc	52		 push	 edx
  008fd	51		 push	 ecx
  008fe	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _y3$[ebp]
  00903	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00908	51		 push	 ecx
  00909	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x4$[ebp]
  0090e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00913	51		 push	 ecx
  00914	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00919	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0091e	51		 push	 ecx
  0091f	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x4$[ebp]
  00924	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00929	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN19@draw_large:

; 7084 : 		}
; 7085 : 		
; 7086 : 		get_2d_float_screen_coordinates (-0.2, 0.2, &x1, &y1);

  0092e	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  00931	50		 push	 eax
  00932	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  00935	51		 push	 ecx
  00936	51		 push	 ecx
  00937	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0093f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00944	51		 push	 ecx
  00945	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  0094d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00952	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 7087 : 		get_2d_float_screen_coordinates (0.2, 0.05, &x2, &y2);

  00957	8d 45 e8	 lea	 eax, DWORD PTR _y2$[ebp]
  0095a	50		 push	 eax
  0095b	8d 4d f8	 lea	 ecx, DWORD PTR _x2$[ebp]
  0095e	51		 push	 ecx
  0095f	51		 push	 ecx
  00960	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  00968	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0096d	51		 push	 ecx
  0096e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00976	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0097b	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 7088 : 		
; 7089 : 		set_mono_font_colour (MFD_COLOUR1);	

  00980	b8 04 00 00 00	 mov	 eax, 4
  00985	6b c8 00	 imul	 ecx, eax, 0
  00988	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0098e	52		 push	 edx
  0098f	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7090 : 		draw_line (x1, y1, x2, y1, MFD_COLOUR1);

  00994	b8 04 00 00 00	 mov	 eax, 4
  00999	6b c8 00	 imul	 ecx, eax, 0
  0099c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009a2	52		 push	 edx
  009a3	51		 push	 ecx
  009a4	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  009a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ae	51		 push	 ecx
  009af	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  009b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b9	51		 push	 ecx
  009ba	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  009bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009c4	51		 push	 ecx
  009c5	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  009ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009cf	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7091 : 		draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  009d4	b8 04 00 00 00	 mov	 eax, 4
  009d9	6b c8 00	 imul	 ecx, eax, 0
  009dc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009e2	52		 push	 edx
  009e3	51		 push	 ecx
  009e4	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  009e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ee	51		 push	 ecx
  009ef	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  009f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009f9	51		 push	 ecx
  009fa	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  009ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a04	51		 push	 ecx
  00a05	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00a0a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a0f	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7092 : 		draw_line (x1, y2, x2, y2, MFD_COLOUR1);

  00a14	b8 04 00 00 00	 mov	 eax, 4
  00a19	6b c8 00	 imul	 ecx, eax, 0
  00a1c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a22	52		 push	 edx
  00a23	51		 push	 ecx
  00a24	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00a29	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a2e	51		 push	 ecx
  00a2f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00a34	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a39	51		 push	 ecx
  00a3a	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00a3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a44	51		 push	 ecx
  00a45	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00a4a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a4f	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7093 : 		draw_line (x2, y1, x2, y2, MFD_COLOUR1);

  00a54	b8 04 00 00 00	 mov	 eax, 4
  00a59	6b c8 00	 imul	 ecx, eax, 0
  00a5c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a62	52		 push	 edx
  00a63	51		 push	 ecx
  00a64	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00a69	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a6e	51		 push	 ecx
  00a6f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00a74	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a79	51		 push	 ecx
  00a7a	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00a7f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a84	51		 push	 ecx
  00a85	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00a8a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a8f	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7094 : 
; 7095 : 		set_2d_mono_font_position (0.0, 0.15);

  00a94	51		 push	 ecx
  00a95	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00a9d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa2	51		 push	 ecx
  00aa3	0f 57 c0	 xorps	 xmm0, xmm0
  00aa6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aab	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7096 : 
; 7097 : 		if (!damaged)

  00ab0	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  00ab7	75 1a		 jne	 SHORT $LN20@draw_large

; 7098 : 			sprintf (s, "%4d", number);

  00ab9	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _number$[ebp]
  00abf	50		 push	 eax
  00ac0	68 00 00 00 00	 push	 OFFSET ??_C@_03GLKEJMAA@?$CF4d@
  00ac5	8d 4d 84	 lea	 ecx, DWORD PTR _s$[ebp]
  00ac8	51		 push	 ecx
  00ac9	e8 00 00 00 00	 call	 _sprintf
  00ace	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7099 : 		else

  00ad1	eb 11		 jmp	 SHORT $LN21@draw_large
$LN20@draw_large:

; 7100 : 			sprintf (s, "XXXX");

  00ad3	68 00 00 00 00	 push	 OFFSET ??_C@_04CPMKADPB@XXXX@
  00ad8	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00adb	50		 push	 eax
  00adc	e8 00 00 00 00	 call	 _sprintf
  00ae1	83 c4 08	 add	 esp, 8
$LN21@draw_large:

; 7101 : 	
; 7102 : 		x_adjust = get_mono_font_string_width (s) * -0.5;

  00ae4	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00ae7	50		 push	 eax
  00ae8	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00aed	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1593[ebp]
  00af3	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1593[ebp]
  00afb	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00b03	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b07	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7103 : 		set_mono_font_rel_position (x_adjust, 0.0);

  00b0f	51		 push	 ecx
  00b10	0f 57 c0	 xorps	 xmm0, xmm0
  00b13	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b18	51		 push	 ecx
  00b19	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00b21	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b26	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7104 : 		print_mono_font_string (s);

  00b2b	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00b2e	50		 push	 eax
  00b2f	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN17@draw_large:

; 7105 : 	}
; 7106 : 
; 7107 : 	// Chaff
; 7108 : 	set_2d_mono_font_position (0.0, -0.2);

  00b34	51		 push	 ecx
  00b35	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00b3d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b42	51		 push	 ecx
  00b43	0f 57 c0	 xorps	 xmm0, xmm0
  00b46	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b4b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7109 : 
; 7110 : 	s_ptr = "CHAFF";

  00b50	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_05FOOOBDLP@CHAFF@

; 7111 : 		
; 7112 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  00b57	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  00b5a	50		 push	 eax
  00b5b	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00b60	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1608[ebp]
  00b66	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1608[ebp]
  00b6e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00b76	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b7a	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7113 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00b82	51		 push	 ecx
  00b83	0f 57 c0	 xorps	 xmm0, xmm0
  00b86	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b8b	51		 push	 ecx
  00b8c	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00b94	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b99	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7114 : 	print_mono_font_string (s_ptr);

  00b9e	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  00ba1	50		 push	 eax
  00ba2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7115 : 
; 7116 : 	set_2d_mono_font_position (0.0, -0.3);

  00ba7	51		 push	 ecx
  00ba8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  00bb0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bb5	51		 push	 ecx
  00bb6	0f 57 c0	 xorps	 xmm0, xmm0
  00bb9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bbe	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7117 : 
; 7118 : 	if (get_local_entity_weapon_hardpoint_info (get_gunship_entity (),

  00bc3	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _damaged$[ebp]
  00bc9	50		 push	 eax
  00bca	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _number$[ebp]
  00bd0	51		 push	 ecx
  00bd1	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00bd7	52		 push	 edx
  00bd8	6a 43		 push	 67			; 00000043H
  00bda	6a 04		 push	 4
  00bdc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00be1	50		 push	 eax
  00be2	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  00be7	85 c0		 test	 eax, eax
  00be9	0f 84 84 00 00
	00		 je	 $LN22@draw_large

; 7119 : 		BLACKHAWK_CHAFF_DISPENSER, ENTITY_SUB_TYPE_WEAPON_CHAFF,
; 7120 : 		&weapon_sub_type, &number, &damaged))
; 7121 : 	{
; 7122 : 		if (!damaged)

  00bef	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  00bf6	75 1a		 jne	 SHORT $LN23@draw_large

; 7123 : 			sprintf (s, "%2d", number);

  00bf8	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _number$[ebp]
  00bfe	50		 push	 eax
  00bff	68 00 00 00 00	 push	 OFFSET ??_C@_03GPCJOALC@?$CF2d@
  00c04	8d 4d 84	 lea	 ecx, DWORD PTR _s$[ebp]
  00c07	51		 push	 ecx
  00c08	e8 00 00 00 00	 call	 _sprintf
  00c0d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7124 : 		else

  00c10	eb 11		 jmp	 SHORT $LN24@draw_large
$LN23@draw_large:

; 7125 : 			sprintf (s, "XX");

  00c12	68 00 00 00 00	 push	 OFFSET ??_C@_02BAHDIOLJ@XX@
  00c17	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00c1a	50		 push	 eax
  00c1b	e8 00 00 00 00	 call	 _sprintf
  00c20	83 c4 08	 add	 esp, 8
$LN24@draw_large:

; 7126 : 	
; 7127 : 		x_adjust = get_mono_font_string_width (s) * -0.5;

  00c23	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00c26	50		 push	 eax
  00c27	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00c2c	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1631[ebp]
  00c32	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1631[ebp]
  00c3a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00c42	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c46	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7128 : 		set_mono_font_rel_position (x_adjust, 0.0);

  00c4e	51		 push	 ecx
  00c4f	0f 57 c0	 xorps	 xmm0, xmm0
  00c52	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c57	51		 push	 ecx
  00c58	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00c60	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c65	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7129 : 		print_mono_font_string (s);

  00c6a	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00c6d	50		 push	 eax
  00c6e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN22@draw_large:

; 7130 : 	}
; 7131 : 
; 7132 : 	// Flares
; 7133 : 	set_2d_mono_font_position (0.0, -0.45);

  00c73	51		 push	 ecx
  00c74	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bee66666
  00c7c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c81	51		 push	 ecx
  00c82	0f 57 c0	 xorps	 xmm0, xmm0
  00c85	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c8a	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7134 : 
; 7135 : 	s_ptr = "FLARE";

  00c8f	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_05MLKBHMKD@FLARE@

; 7136 : 		
; 7137 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  00c96	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  00c99	50		 push	 eax
  00c9a	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00c9f	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1646[ebp]
  00ca5	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1646[ebp]
  00cad	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00cb5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00cb9	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7138 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00cc1	51		 push	 ecx
  00cc2	0f 57 c0	 xorps	 xmm0, xmm0
  00cc5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cca	51		 push	 ecx
  00ccb	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00cd3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cd8	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7139 : 	print_mono_font_string (s_ptr);

  00cdd	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  00ce0	50		 push	 eax
  00ce1	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7140 : 
; 7141 : 	set_2d_mono_font_position (0.0, -0.55);

  00ce6	51		 push	 ecx
  00ce7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf0ccccd
  00cef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cf4	51		 push	 ecx
  00cf5	0f 57 c0	 xorps	 xmm0, xmm0
  00cf8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cfd	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7142 : 	
; 7143 : 	if (get_local_entity_weapon_hardpoint_info (get_gunship_entity (),

  00d02	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _damaged$[ebp]
  00d08	50		 push	 eax
  00d09	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _number$[ebp]
  00d0f	51		 push	 ecx
  00d10	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00d16	52		 push	 edx
  00d17	6a 44		 push	 68			; 00000044H
  00d19	6a 04		 push	 4
  00d1b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00d20	50		 push	 eax
  00d21	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  00d26	85 c0		 test	 eax, eax
  00d28	0f 84 84 00 00
	00		 je	 $LN25@draw_large

; 7144 : 		BLACKHAWK_FLARE_DISPENSER, ENTITY_SUB_TYPE_WEAPON_FLARE,
; 7145 : 		&weapon_sub_type, &number, &damaged))
; 7146 : 	{
; 7147 : 		if (!damaged)

  00d2e	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  00d35	75 1a		 jne	 SHORT $LN26@draw_large

; 7148 : 			sprintf (s, "%2d", number);

  00d37	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _number$[ebp]
  00d3d	50		 push	 eax
  00d3e	68 00 00 00 00	 push	 OFFSET ??_C@_03GPCJOALC@?$CF2d@
  00d43	8d 4d 84	 lea	 ecx, DWORD PTR _s$[ebp]
  00d46	51		 push	 ecx
  00d47	e8 00 00 00 00	 call	 _sprintf
  00d4c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7149 : 		else

  00d4f	eb 11		 jmp	 SHORT $LN27@draw_large
$LN26@draw_large:

; 7150 : 			sprintf (s, "XX");

  00d51	68 00 00 00 00	 push	 OFFSET ??_C@_02BAHDIOLJ@XX@
  00d56	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00d59	50		 push	 eax
  00d5a	e8 00 00 00 00	 call	 _sprintf
  00d5f	83 c4 08	 add	 esp, 8
$LN27@draw_large:

; 7151 : 	
; 7152 : 		x_adjust = get_mono_font_string_width (s) * -0.5;

  00d62	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00d65	50		 push	 eax
  00d66	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00d6b	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1669[ebp]
  00d71	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1669[ebp]
  00d79	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00d81	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00d85	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7153 : 		set_mono_font_rel_position (x_adjust, 0.0);

  00d8d	51		 push	 ecx
  00d8e	0f 57 c0	 xorps	 xmm0, xmm0
  00d91	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d96	51		 push	 ecx
  00d97	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00d9f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00da4	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7154 : 		print_mono_font_string (s);

  00da9	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  00dac	50		 push	 eax
  00dad	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN25@draw_large:

; 7155 : 	}
; 7156 : 
; 7157 : 	// auto CM
; 7158 : 	set_2d_mono_font_position (0.0, -0.7);

  00db2	51		 push	 ecx
  00db3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00dbb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dc0	51		 push	 ecx
  00dc1	0f 57 c0	 xorps	 xmm0, xmm0
  00dc4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dc9	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7159 : 
; 7160 : 	if (get_global_auto_counter_measures ())

  00dce	83 3d 90 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+144, 0
  00dd5	74 09		 je	 SHORT $LN28@draw_large

; 7161 : 		s_ptr = "AUTO";

  00dd7	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_04LMMJFDCN@AUTO@

; 7162 : 	else

  00dde	eb 07		 jmp	 SHORT $LN29@draw_large
$LN28@draw_large:

; 7163 : 		s_ptr = "MAN";

  00de0	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_03KIGHCFHP@MAN@
$LN29@draw_large:

; 7164 : 		
; 7165 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  00de7	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  00dea	50		 push	 eax
  00deb	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00df0	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1684[ebp]
  00df6	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1684[ebp]
  00dfe	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00e06	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00e0a	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7166 : 	set_mono_font_rel_position (x_adjust, 0.0);

  00e12	51		 push	 ecx
  00e13	0f 57 c0	 xorps	 xmm0, xmm0
  00e16	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e1b	51		 push	 ecx
  00e1c	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00e24	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e29	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7167 : 	print_mono_font_string (s_ptr);

  00e2e	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  00e31	50		 push	 eax
  00e32	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7168 : 	
; 7169 : 	// master arm box
; 7170 : 
; 7171 : 	set_2d_mono_font_position (0.0, 0.89);

  00e37	51		 push	 ecx
  00e38	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f63d70a
  00e40	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e45	51		 push	 ecx
  00e46	0f 57 c0	 xorps	 xmm0, xmm0
  00e49	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e4e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7172 : 
; 7173 : 	if (selected_weapon != ENTITY_SUB_TYPE_WEAPON_NO_WEAPON)

  00e53	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _selected_weapon$[ebp], 0
  00e5a	0f 84 c5 03 00
	00		 je	 $LN30@draw_large

; 7174 : 	{
; 7175 : 		draw_box(-0.25, 0.7, 0.25, 1.0, TRUE, MFD_COLOUR1);

  00e60	b8 04 00 00 00	 mov	 eax, 4
  00e65	6b c8 00	 imul	 ecx, eax, 0
  00e68	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e6e	52		 push	 edx
  00e6f	6a 01		 push	 1
  00e71	51		 push	 ecx
  00e72	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00e7a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e7f	51		 push	 ecx
  00e80	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  00e88	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e8d	51		 push	 ecx
  00e8e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00e96	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e9b	51		 push	 ecx
  00e9c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  00ea4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ea9	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7176 : 
; 7177 : 		set_mono_font_colour (MFD_CLEAR_COLOUR);

  00eae	b8 04 00 00 00	 mov	 eax, 4
  00eb3	6b c8 0a	 imul	 ecx, eax, 10
  00eb6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ebc	52		 push	 edx
  00ebd	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7178 : 		s_ptr = "ARM";

  00ec2	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_03NHPMNECN@ARM@

; 7179 : 		
; 7180 : 		draw_box(-0.14, 0.93,-0.09, 1.00, TRUE, MFD_CLEAR_COLOUR);	

  00ec9	b8 04 00 00 00	 mov	 eax, 4
  00ece	6b c8 0a	 imul	 ecx, eax, 10
  00ed1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ed7	52		 push	 edx
  00ed8	6a 01		 push	 1
  00eda	51		 push	 ecx
  00edb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00ee3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ee8	51		 push	 ecx
  00ee9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdb851ec
  00ef1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ef6	51		 push	 ecx
  00ef7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  00eff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f04	51		 push	 ecx
  00f05	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0f5c29
  00f0d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f12	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7181 : 		draw_box(-0.03, 0.93, 0.03, 1.00, TRUE, MFD_CLEAR_COLOUR);	

  00f17	b8 04 00 00 00	 mov	 eax, 4
  00f1c	6b c8 0a	 imul	 ecx, eax, 10
  00f1f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f25	52		 push	 edx
  00f26	6a 01		 push	 1
  00f28	51		 push	 ecx
  00f29	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00f31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f36	51		 push	 ecx
  00f37	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3cf5c28f
  00f3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f44	51		 push	 ecx
  00f45	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  00f4d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f52	51		 push	 ecx
  00f53	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bcf5c28f
  00f5b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f60	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7182 : 		draw_box( 0.10, 0.93, 0.15, 1.00, TRUE, MFD_CLEAR_COLOUR);	

  00f65	b8 04 00 00 00	 mov	 eax, 4
  00f6a	6b c8 0a	 imul	 ecx, eax, 10
  00f6d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f73	52		 push	 edx
  00f74	6a 01		 push	 1
  00f76	51		 push	 ecx
  00f77	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00f7f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f84	51		 push	 ecx
  00f85	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00f8d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f92	51		 push	 ecx
  00f93	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  00f9b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fa0	51		 push	 ecx
  00fa1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00fa9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fae	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7183 : 		draw_box(-0.25, 0.93,-0.19, 0.88, TRUE, MFD_CLEAR_COLOUR);	

  00fb3	b8 04 00 00 00	 mov	 eax, 4
  00fb8	6b c8 0a	 imul	 ecx, eax, 10
  00fbb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00fc1	52		 push	 edx
  00fc2	6a 01		 push	 1
  00fc4	51		 push	 ecx
  00fc5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6147ae
  00fcd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fd2	51		 push	 ecx
  00fd3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be428f5c
  00fdb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fe0	51		 push	 ecx
  00fe1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  00fe9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fee	51		 push	 ecx
  00fef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  00ff7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ffc	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7184 : 		draw_box(-0.25, 0.77,-0.19, 0.82, TRUE, MFD_CLEAR_COLOUR);	

  01001	b8 04 00 00 00	 mov	 eax, 4
  01006	6b c8 0a	 imul	 ecx, eax, 10
  01009	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0100f	52		 push	 edx
  01010	6a 01		 push	 1
  01012	51		 push	 ecx
  01013	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f51eb85
  0101b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01020	51		 push	 ecx
  01021	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be428f5c
  01029	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0102e	51		 push	 ecx
  0102f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f451eb8
  01037	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0103c	51		 push	 ecx
  0103d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  01045	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0104a	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7185 : 		draw_box( 0.25, 0.93, 0.19, 0.88, TRUE, MFD_CLEAR_COLOUR);	

  0104f	b8 04 00 00 00	 mov	 eax, 4
  01054	6b c8 0a	 imul	 ecx, eax, 10
  01057	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0105d	52		 push	 edx
  0105e	6a 01		 push	 1
  01060	51		 push	 ecx
  01061	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6147ae
  01069	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0106e	51		 push	 ecx
  0106f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e428f5c
  01077	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0107c	51		 push	 ecx
  0107d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  01085	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0108a	51		 push	 ecx
  0108b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  01093	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01098	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7186 : 		draw_box( 0.25, 0.77, 0.19, 0.82, TRUE, MFD_CLEAR_COLOUR);	

  0109d	b8 04 00 00 00	 mov	 eax, 4
  010a2	6b c8 0a	 imul	 ecx, eax, 10
  010a5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  010ab	52		 push	 edx
  010ac	6a 01		 push	 1
  010ae	51		 push	 ecx
  010af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f51eb85
  010b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010bc	51		 push	 ecx
  010bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e428f5c
  010c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010ca	51		 push	 ecx
  010cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f451eb8
  010d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010d8	51		 push	 ecx
  010d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  010e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010e6	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7187 : 		draw_box(-0.14, 0.77,-0.09, 0.70, TRUE, MFD_CLEAR_COLOUR);	

  010eb	b8 04 00 00 00	 mov	 eax, 4
  010f0	6b c8 0a	 imul	 ecx, eax, 10
  010f3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  010f9	52		 push	 edx
  010fa	6a 01		 push	 1
  010fc	51		 push	 ecx
  010fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  01105	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0110a	51		 push	 ecx
  0110b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdb851ec
  01113	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01118	51		 push	 ecx
  01119	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f451eb8
  01121	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01126	51		 push	 ecx
  01127	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0f5c29
  0112f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01134	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7188 : 		draw_box(-0.03, 0.77, 0.03, 0.70, TRUE, MFD_CLEAR_COLOUR);	

  01139	b8 04 00 00 00	 mov	 eax, 4
  0113e	6b c8 0a	 imul	 ecx, eax, 10
  01141	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01147	52		 push	 edx
  01148	6a 01		 push	 1
  0114a	51		 push	 ecx
  0114b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  01153	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01158	51		 push	 ecx
  01159	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3cf5c28f
  01161	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01166	51		 push	 ecx
  01167	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f451eb8
  0116f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01174	51		 push	 ecx
  01175	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bcf5c28f
  0117d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01182	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7189 : 		draw_box( 0.10, 0.77, 0.15, 0.70, TRUE, MFD_CLEAR_COLOUR);

  01187	b8 04 00 00 00	 mov	 eax, 4
  0118c	6b c8 0a	 imul	 ecx, eax, 10
  0118f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01195	52		 push	 edx
  01196	6a 01		 push	 1
  01198	51		 push	 ecx
  01199	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  011a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011a6	51		 push	 ecx
  011a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  011af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011b4	51		 push	 ecx
  011b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f451eb8
  011bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011c2	51		 push	 ecx
  011c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  011cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011d0	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7190 : 		
; 7191 : 		draw_box(-0.25, 0.7, 0.25, 1.0, FALSE, MFD_COLOUR1);

  011d5	b8 04 00 00 00	 mov	 eax, 4
  011da	6b c8 00	 imul	 ecx, eax, 0
  011dd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  011e3	52		 push	 edx
  011e4	6a 00		 push	 0
  011e6	51		 push	 ecx
  011e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  011ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011f4	51		 push	 ecx
  011f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  011fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01202	51		 push	 ecx
  01203	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  0120b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01210	51		 push	 ecx
  01211	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  01219	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0121e	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7192 : 	}
; 7193 : 	else

  01223	eb 55		 jmp	 SHORT $LN31@draw_large
$LN30@draw_large:

; 7194 : 	{
; 7195 : 		draw_box(-0.25, 0.7, 0.25, 1.0, FALSE, MFD_COLOUR1);

  01225	b8 04 00 00 00	 mov	 eax, 4
  0122a	6b c8 00	 imul	 ecx, eax, 0
  0122d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01233	52		 push	 edx
  01234	6a 00		 push	 0
  01236	51		 push	 ecx
  01237	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0123f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01244	51		 push	 ecx
  01245	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  0124d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01252	51		 push	 ecx
  01253	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  0125b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01260	51		 push	 ecx
  01261	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  01269	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0126e	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7196 : 		s_ptr = "SAFE";

  01273	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_04JMNPMIJD@SAFE@
$LN31@draw_large:

; 7197 : 	}
; 7198 : 		
; 7199 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  0127a	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  0127d	50		 push	 eax
  0127e	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01283	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1831[ebp]
  01289	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1831[ebp]
  01291	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01299	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0129d	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7200 : 	set_mono_font_rel_position (x_adjust, 0.0);

  012a5	51		 push	 ecx
  012a6	0f 57 c0	 xorps	 xmm0, xmm0
  012a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012ae	51		 push	 ecx
  012af	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  012b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012bc	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7201 : 	print_mono_font_string (s_ptr);

  012c1	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  012c4	50		 push	 eax
  012c5	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7202 : 
; 7203 : 	// targeting system
; 7204 : 	draw_box(-0.85, 0.8, -0.4, 0.55, FALSE, MFD_COLOUR1);

  012ca	b8 04 00 00 00	 mov	 eax, 4
  012cf	6b c8 00	 imul	 ecx, eax, 0
  012d2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  012d8	52		 push	 edx
  012d9	6a 00		 push	 0
  012db	51		 push	 ecx
  012dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  012e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012e9	51		 push	 ecx
  012ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  012f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012f7	51		 push	 ecx
  012f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  01300	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01305	51		 push	 ecx
  01306	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  0130e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01313	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7205 : 
; 7206 : 	set_2d_mono_font_position (-0.63, 0.7);

  01318	51		 push	 ecx
  01319	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  01321	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01326	51		 push	 ecx
  01327	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  0132f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01334	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7207 : 	set_mono_font_colour (MFD_COLOUR1);

  01339	b8 04 00 00 00	 mov	 eax, 4
  0133e	6b c8 00	 imul	 ecx, eax, 0
  01341	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01347	52		 push	 edx
  01348	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7208 : 
; 7209 : 	switch (target_acquisition_system)

  0134d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; target_acquisition_system
  01352	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv624[ebp], eax
  01358	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv624[ebp]
  0135e	83 e9 01	 sub	 ecx, 1
  01361	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv624[ebp], ecx
  01367	83 bd d4 fe ff
	ff 07		 cmp	 DWORD PTR tv624[ebp], 7
  0136e	77 28		 ja	 SHORT $LN35@draw_large
  01370	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR tv624[ebp]
  01376	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN109@draw_large[edx*4]
$LN32@draw_large:

; 7210 : 	{
; 7211 : 	case TARGET_ACQUISITION_SYSTEM_GROUND_RADAR:
; 7212 : 	case TARGET_ACQUISITION_SYSTEM_AIR_RADAR:
; 7213 : 		s_ptr = "FCR";

  0137d	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_03JKJFCLEN@FCR@

; 7214 : 		break;

  01384	eb 19		 jmp	 SHORT $LN2@draw_large
$LN33@draw_large:

; 7215 : 	case TARGET_ACQUISITION_SYSTEM_FLIR:
; 7216 : 	case TARGET_ACQUISITION_SYSTEM_DTV:
; 7217 : 	case TARGET_ACQUISITION_SYSTEM_DVO:
; 7218 : 		s_ptr = "TADS";

  01386	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_04DBODHFDK@TADS@

; 7219 : 		break;

  0138d	eb 10		 jmp	 SHORT $LN2@draw_large
$LN34@draw_large:

; 7220 : 	case TARGET_ACQUISITION_SYSTEM_IHADSS:
; 7221 : 		s_ptr = "IHADSS";

  0138f	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_06NOICLIMH@IHADSS@

; 7222 : 		break;

  01396	eb 07		 jmp	 SHORT $LN2@draw_large
$LN35@draw_large:

; 7223 : 	case TARGET_ACQUISITION_SYSTEM_OFF:
; 7224 : 	default:
; 7225 : 		s_ptr = "NONE";

  01398	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_04OKGDLNCL@NONE@
$LN2@draw_large:

; 7226 : 		break;
; 7227 : 	}
; 7228 : 
; 7229 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  0139f	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  013a2	50		 push	 eax
  013a3	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  013a8	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1861[ebp]
  013ae	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1861[ebp]
  013b6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  013be	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  013c2	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7230 : 	set_mono_font_rel_position (x_adjust, 0.0);

  013ca	51		 push	 ecx
  013cb	0f 57 c0	 xorps	 xmm0, xmm0
  013ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013d3	51		 push	 ecx
  013d4	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  013dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013e1	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7231 : 	print_mono_font_string (s_ptr);

  013e6	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  013e9	50		 push	 eax
  013ea	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7232 : 	
; 7233 : 	// range finding system
; 7234 : 	draw_box(0.85, 0.8, 0.4, 0.55, FALSE, MFD_COLOUR1);

  013ef	b8 04 00 00 00	 mov	 eax, 4
  013f4	6b c8 00	 imul	 ecx, eax, 0
  013f7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  013fd	52		 push	 edx
  013fe	6a 00		 push	 0
  01400	51		 push	 ecx
  01401	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  01409	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0140e	51		 push	 ecx
  0140f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  01417	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0141c	51		 push	 ecx
  0141d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  01425	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0142a	51		 push	 ecx
  0142b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f59999a
  01433	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01438	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7235 : 
; 7236 : 	set_2d_mono_font_position (0.64, 0.7);

  0143d	51		 push	 ecx
  0143e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  01446	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0144b	51		 push	 ecx
  0144c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f23d70a
  01454	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01459	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7237 : 
; 7238 : 	switch (get_range_finder())

  0145e	e8 00 00 00 00	 call	 ?get_range_finder@@YG?AW4rangefinding_system@@XZ ; get_range_finder
  01463	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv646[ebp], eax
  01469	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR tv646[ebp], 0
  01470	74 0b		 je	 SHORT $LN36@draw_large
  01472	83 bd d4 fe ff
	ff 01		 cmp	 DWORD PTR tv646[ebp], 1
  01479	74 0b		 je	 SHORT $LN37@draw_large
  0147b	eb 12		 jmp	 SHORT $LN38@draw_large
$LN36@draw_large:

; 7239 : 	{
; 7240 : 	case RANGEFINDER_FCR:
; 7241 : 		s_ptr = "FCR";

  0147d	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_03JKJFCLEN@FCR@

; 7242 : 		break;

  01484	eb 10		 jmp	 SHORT $LN4@draw_large
$LN37@draw_large:

; 7243 : 	case RANGEFINDER_LASER:
; 7244 : 		s_ptr = "LRF";

  01486	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_03MGGCNFDL@LRF@

; 7245 : 		break;

  0148d	eb 07		 jmp	 SHORT $LN4@draw_large
$LN38@draw_large:

; 7246 : 	case RANGEFINDER_TRIANGULATION:
; 7247 : 	default:
; 7248 : 		s_ptr = "TRNGL";

  0148f	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_05MJCDDMFE@TRNGL@
$LN4@draw_large:

; 7249 : 		break;
; 7250 : 	}
; 7251 : 
; 7252 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  01496	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  01499	50		 push	 eax
  0149a	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0149f	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1887[ebp]
  014a5	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1887[ebp]
  014ad	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  014b5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  014b9	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7253 : 	set_mono_font_rel_position (x_adjust, 0.0);

  014c1	51		 push	 ecx
  014c2	0f 57 c0	 xorps	 xmm0, xmm0
  014c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014ca	51		 push	 ecx
  014cb	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  014d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014d8	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7254 : 	print_mono_font_string (s_ptr);

  014dd	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  014e0	50		 push	 eax
  014e1	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7255 : 
; 7256 : 	// launch mode
; 7257 : 	draw_box(-0.9, 0.45, -0.45, 0.2, FALSE, MFD_COLOUR1);

  014e6	b8 04 00 00 00	 mov	 eax, 4
  014eb	6b c8 00	 imul	 ecx, eax, 0
  014ee	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  014f4	52		 push	 edx
  014f5	6a 00		 push	 0
  014f7	51		 push	 ecx
  014f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  01500	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01505	51		 push	 ecx
  01506	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bee66666
  0150e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01513	51		 push	 ecx
  01514	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  0151c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01521	51		 push	 ecx
  01522	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  0152a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0152f	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7258 : 
; 7259 : 	set_2d_mono_font_position (-0.65, 0.35);

  01534	51		 push	 ecx
  01535	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  0153d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01542	51		 push	 ecx
  01543	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  0154b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01550	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7260 : 
; 7261 : 	if (get_local_entity_int_value (get_gunship_entity (), INT_TYPE_LOCK_ON_AFTER_LAUNCH))

  01555	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0155c	74 0f		 je	 SHORT $LN97@draw_large
  0155e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  01563	8b 08		 mov	 ecx, DWORD PTR [eax]
  01565	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv672[ebp], ecx
  0156b	eb 20		 jmp	 SHORT $LN98@draw_large
$LN97@draw_large:
  0156d	68 5d 1c 00 00	 push	 7261			; 00001c5dH
  01572	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01577	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0157d	52		 push	 edx
  0157e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01583	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv672[ebp], 0
$LN98@draw_large:
  0158d	b8 01 00 00 00	 mov	 eax, 1
  01592	85 c0		 test	 eax, eax
  01594	74 0c		 je	 SHORT $LN99@draw_large
  01596	c7 85 d0 fe ff
	ff 7e 00 00 00	 mov	 DWORD PTR tv679[ebp], 126 ; 0000007eH
  015a0	eb 20		 jmp	 SHORT $LN100@draw_large
$LN99@draw_large:
  015a2	68 5d 1c 00 00	 push	 7261			; 00001c5dH
  015a7	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  015ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  015b2	51		 push	 ecx
  015b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  015b8	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv679[ebp], 0
$LN100@draw_large:
  015c2	6a 7e		 push	 126			; 0000007eH
  015c4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  015ca	52		 push	 edx
  015cb	69 85 d4 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv672[ebp], 1116
  015d5	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR tv679[ebp]
  015db	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  015e2	ff d2		 call	 edx
  015e4	85 c0		 test	 eax, eax
  015e6	74 09		 je	 SHORT $LN39@draw_large

; 7262 : 		s_ptr = "LOAL";

  015e8	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_04EKDNBCDP@LOAL@

; 7263 : 	else

  015ef	eb 07		 jmp	 SHORT $LN40@draw_large
$LN39@draw_large:

; 7264 : 		s_ptr = "LOBL";

  015f1	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_04EIHLKMGG@LOBL@
$LN40@draw_large:

; 7265 : 
; 7266 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  015f8	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  015fb	50		 push	 eax
  015fc	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01601	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1921[ebp]
  01607	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1921[ebp]
  0160f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01617	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0161b	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7267 : 	set_mono_font_rel_position (x_adjust, 0.0);

  01623	51		 push	 ecx
  01624	0f 57 c0	 xorps	 xmm0, xmm0
  01627	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0162c	51		 push	 ecx
  0162d	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01635	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0163a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7268 : 	print_mono_font_string (s_ptr);

  0163f	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  01642	50		 push	 eax
  01643	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7269 : 
; 7270 : 	// rocket salve
; 7271 : 	draw_box(0.9, 0.45, 0.45, 0.2, FALSE, MFD_COLOUR1);

  01648	b8 04 00 00 00	 mov	 eax, 4
  0164d	6b c8 00	 imul	 ecx, eax, 0
  01650	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01656	52		 push	 edx
  01657	6a 00		 push	 0
  01659	51		 push	 ecx
  0165a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  01662	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01667	51		 push	 ecx
  01668	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  01670	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01675	51		 push	 ecx
  01676	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  0167e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01683	51		 push	 ecx
  01684	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  0168c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01691	e8 00 00 00 00	 call	 ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ; draw_box

; 7272 : 
; 7273 : 	set_2d_mono_font_position (0.67, 0.42);

  01696	51		 push	 ecx
  01697	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  0169f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016a4	51		 push	 ecx
  016a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f2b851f
  016ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016b2	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7274 : 	s_ptr = "SALVO";

  016b7	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _s_ptr$[ebp], OFFSET ??_C@_05GPKGLDLB@SALVO@

; 7275 : 
; 7276 : 	x_adjust = get_mono_font_string_width (s_ptr) * -0.5;

  016be	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  016c1	50		 push	 eax
  016c2	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  016c7	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1946[ebp]
  016cd	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1946[ebp]
  016d5	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  016dd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  016e1	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7277 : 	set_mono_font_rel_position (x_adjust, 0.0);

  016e9	51		 push	 ecx
  016ea	0f 57 c0	 xorps	 xmm0, xmm0
  016ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016f2	51		 push	 ecx
  016f3	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  016fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01700	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7278 : 	print_mono_font_string (s_ptr);

  01705	8b 45 80	 mov	 eax, DWORD PTR _s_ptr$[ebp]
  01708	50		 push	 eax
  01709	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7279 : 
; 7280 : 	set_2d_mono_font_position (0.67, 0.31);

  0170e	51		 push	 ecx
  0170f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e9eb852
  01717	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0171c	51		 push	 ecx
  0171d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f2b851f
  01725	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0172a	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7281 : 	if (rocket_salvo_size == ROCKET_SALVO_SIZE_ALL)

  0172f	81 3d 00 00 00
	00 e8 03 00 00	 cmp	 DWORD PTR ?rocket_salvo_size@@3HA, 1000 ; rocket_salvo_size, 000003e8H
  01739	75 13		 jne	 SHORT $LN41@draw_large

; 7282 : 		sprintf(s, "ALL");

  0173b	68 00 00 00 00	 push	 OFFSET ??_C@_03NIFPGLBG@ALL@
  01740	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  01743	50		 push	 eax
  01744	e8 00 00 00 00	 call	 _sprintf
  01749	83 c4 08	 add	 esp, 8

; 7283 : 	else

  0174c	eb 17		 jmp	 SHORT $LN42@draw_large
$LN41@draw_large:

; 7284 : 		sprintf(s, "%2d", rocket_salvo_size);

  0174e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rocket_salvo_size@@3HA ; rocket_salvo_size
  01753	50		 push	 eax
  01754	68 00 00 00 00	 push	 OFFSET ??_C@_03GPCJOALC@?$CF2d@
  01759	8d 4d 84	 lea	 ecx, DWORD PTR _s$[ebp]
  0175c	51		 push	 ecx
  0175d	e8 00 00 00 00	 call	 _sprintf
  01762	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN42@draw_large:

; 7285 : 
; 7286 : 	x_adjust = get_mono_font_string_width (s) * -0.6;

  01765	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  01768	50		 push	 eax
  01769	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0176e	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv1964[ebp]
  01774	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv1964[ebp]
  0177c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe3333333333333
  01784	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01788	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7287 : 	set_mono_font_rel_position (x_adjust, 0.0);

  01790	51		 push	 ecx
  01791	0f 57 c0	 xorps	 xmm0, xmm0
  01794	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01799	51		 push	 ecx
  0179a	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  017a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017a7	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7288 : 	print_mono_font_string (s);

  017ac	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  017af	50		 push	 eax
  017b0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7289 : 
; 7290 : 	// weapon pylons
; 7291 : 	for (pylon = APACHE_LHS_INNER_PYLON; pylon <= APACHE_RHS_WING_TIP_MOUNT; pylon++)

  017b5	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _pylon$[ebp], 0
  017bf	eb 0f		 jmp	 SHORT $LN8@draw_large
$LN6@draw_large:
  017c1	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _pylon$[ebp]
  017c7	83 c0 01	 add	 eax, 1
  017ca	89 85 6c ff ff
	ff		 mov	 DWORD PTR _pylon$[ebp], eax
$LN8@draw_large:
  017d0	83 bd 6c ff ff
	ff 05		 cmp	 DWORD PTR _pylon$[ebp], 5
  017d7	0f 8f ae 0e 00
	00		 jg	 $LN7@draw_large

; 7292 : 	{
; 7293 : 		float pylon_x, pylon_y;
; 7294 : 		
; 7295 : 		pylon_y = -0.35;

  017dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@beb33333
  017e5	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _pylon_y$18[ebp], xmm0

; 7296 : 		switch (pylon)

  017ed	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _pylon$[ebp]
  017f3	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv730[ebp], eax
  017f9	83 bd d4 fe ff
	ff 05		 cmp	 DWORD PTR tv730[ebp], 5
  01800	77 77		 ja	 SHORT $LN9@draw_large
  01802	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv730[ebp]
  01808	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN110@draw_large[ecx*4]
$LN43@draw_large:

; 7297 : 		{
; 7298 : 		case APACHE_LHS_INNER_PYLON:
; 7299 : 			pylon_x = -0.42;

  0180f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bed70a3d
  01817	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _pylon_x$19[ebp], xmm0

; 7300 : 			break;

  0181f	eb 58		 jmp	 SHORT $LN9@draw_large
$LN44@draw_large:

; 7301 : 		case APACHE_RHS_INNER_PYLON:
; 7302 : 			pylon_x = 0.42;

  01821	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ed70a3d
  01829	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _pylon_x$19[ebp], xmm0

; 7303 : 			break;

  01831	eb 46		 jmp	 SHORT $LN9@draw_large
$LN45@draw_large:

; 7304 : 		case APACHE_LHS_OUTER_PYLON:
; 7305 : 			pylon_x = -0.74;

  01833	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3d70a4
  0183b	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _pylon_x$19[ebp], xmm0

; 7306 : 			break;

  01843	eb 34		 jmp	 SHORT $LN9@draw_large
$LN46@draw_large:

; 7307 : 		case APACHE_RHS_OUTER_PYLON:
; 7308 : 			pylon_x = 0.74;

  01845	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3d70a4
  0184d	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _pylon_x$19[ebp], xmm0

; 7309 : 			break;

  01855	eb 22		 jmp	 SHORT $LN9@draw_large
$LN47@draw_large:

; 7310 : 		case APACHE_LHS_WING_TIP_MOUNT:
; 7311 : 			pylon_x = -0.97;

  01857	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf7851ec
  0185f	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _pylon_x$19[ebp], xmm0

; 7312 : 			break;

  01867	eb 10		 jmp	 SHORT $LN9@draw_large
$LN48@draw_large:

; 7313 : 		case APACHE_RHS_WING_TIP_MOUNT:
; 7314 : 			pylon_x = 0.97;

  01869	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7851ec
  01871	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _pylon_x$19[ebp], xmm0
$LN9@draw_large:

; 7315 : 			break;
; 7316 : 		}
; 7317 : 		
; 7318 : 		if (get_local_entity_weapon_hardpoint_info (get_gunship_entity (),

  01879	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _damaged$[ebp]
  0187f	50		 push	 eax
  01880	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _number$[ebp]
  01886	51		 push	 ecx
  01887	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  0188d	52		 push	 edx
  0188e	6a 00		 push	 0
  01890	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _pylon$[ebp]
  01896	50		 push	 eax
  01897	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0189d	51		 push	 ecx
  0189e	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  018a3	85 c0		 test	 eax, eax
  018a5	0f 84 db 0d 00
	00		 je	 $LN86@draw_large

; 7319 : 			pylon, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON,
; 7320 : 			&weapon_sub_type, &number, &damaged))
; 7321 : 		{
; 7322 : 			if ((weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AGM114L_LONGBOW_HELLFIRE) || (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AGM114K_HELLFIRE_II))

  018ab	83 bd 68 ff ff
	ff 2d		 cmp	 DWORD PTR _weapon_sub_type$[ebp], 45 ; 0000002dH
  018b2	74 0d		 je	 SHORT $LN52@draw_large
  018b4	83 bd 68 ff ff
	ff 2e		 cmp	 DWORD PTR _weapon_sub_type$[ebp], 46 ; 0000002eH
  018bb	0f 85 d6 03 00
	00		 jne	 $LN50@draw_large
$LN52@draw_large:

; 7323 : 			{
; 7324 : 				int i;
; 7325 : 				float last_offset;  // is last missile on the left or right side of pylon
; 7326 : 				
; 7327 : 				if (pylon == APACHE_LHS_INNER_PYLON || pylon == APACHE_LHS_OUTER_PYLON)

  018c1	83 bd 6c ff ff
	ff 00		 cmp	 DWORD PTR _pylon$[ebp], 0
  018c8	74 09		 je	 SHORT $LN55@draw_large
  018ca	83 bd 6c ff ff
	ff 02		 cmp	 DWORD PTR _pylon$[ebp], 2
  018d1	75 12		 jne	 SHORT $LN53@draw_large
$LN55@draw_large:

; 7328 : 					last_offset = 0.07;

  018d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d8f5c29
  018db	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _last_offset$16[ebp], xmm0

; 7329 : 				else

  018e3	eb 10		 jmp	 SHORT $LN54@draw_large
$LN53@draw_large:

; 7330 : 					last_offset = -0.07;

  018e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd8f5c29
  018ed	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _last_offset$16[ebp], xmm0
$LN54@draw_large:

; 7331 : 				
; 7332 : 				for (i = 1; i <= number; i++)

  018f5	c7 85 58 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _i$17[ebp], 1
  018ff	eb 0f		 jmp	 SHORT $LN13@draw_large
$LN11@draw_large:
  01901	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _i$17[ebp]
  01907	83 c0 01	 add	 eax, 1
  0190a	89 85 58 ff ff
	ff		 mov	 DWORD PTR _i$17[ebp], eax
$LN13@draw_large:
  01910	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _i$17[ebp]
  01916	3b 85 78 ff ff
	ff		 cmp	 eax, DWORD PTR _number$[ebp]
  0191c	0f 8f 70 03 00
	00		 jg	 $LN12@draw_large

; 7333 : 				{
; 7334 : 					float missile_x, missile_y;
; 7335 : 					
; 7336 : 					switch(i)

  01922	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _i$17[ebp]
  01928	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv778[ebp], eax
  0192e	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv778[ebp]
  01934	83 e9 01	 sub	 ecx, 1
  01937	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv778[ebp], ecx
  0193d	83 bd d4 fe ff
	ff 03		 cmp	 DWORD PTR tv778[ebp], 3
  01944	0f 87 eb 00 00
	00		 ja	 $LN60@draw_large
  0194a	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR tv778[ebp]
  01950	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN111@draw_large[edx*4]
$LN56@draw_large:

; 7337 : 					{
; 7338 : 						case 1:
; 7339 : 							missile_x = pylon_x + last_offset;

  01957	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  0195f	f3 0f 58 85 54
	ff ff ff	 addss	 xmm0, DWORD PTR _last_offset$16[ebp]
  01967	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _missile_x$15[ebp], xmm0

; 7340 : 							missile_y = pylon_y - 0.18;

  0196f	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  01977	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc70a3d70a3d70a
  0197f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01983	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _missile_y$14[ebp], xmm0

; 7341 : 							break;

  0198b	e9 c8 00 00 00	 jmp	 $LN14@draw_large
$LN57@draw_large:

; 7342 : 						case 2:
; 7343 : 							missile_x = pylon_x - last_offset;

  01990	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  01998	f3 0f 5c 85 54
	ff ff ff	 subss	 xmm0, DWORD PTR _last_offset$16[ebp]
  019a0	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _missile_x$15[ebp], xmm0

; 7344 : 							missile_y = pylon_y - 0.18;

  019a8	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  019b0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc70a3d70a3d70a
  019b8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  019bc	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _missile_y$14[ebp], xmm0

; 7345 : 							break;

  019c4	e9 8f 00 00 00	 jmp	 $LN14@draw_large
$LN58@draw_large:

; 7346 : 						case 3:
; 7347 : 							missile_x = pylon_x + last_offset;

  019c9	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  019d1	f3 0f 58 85 54
	ff ff ff	 addss	 xmm0, DWORD PTR _last_offset$16[ebp]
  019d9	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _missile_x$15[ebp], xmm0

; 7348 : 							missile_y = pylon_y + 0.22;

  019e1	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  019e9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fcc28f5c28f5c29
  019f1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  019f5	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _missile_y$14[ebp], xmm0

; 7349 : 							break;

  019fd	eb 59		 jmp	 SHORT $LN14@draw_large
$LN59@draw_large:

; 7350 : 						case 4:
; 7351 : 							missile_x = pylon_x - last_offset;

  019ff	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  01a07	f3 0f 5c 85 54
	ff ff ff	 subss	 xmm0, DWORD PTR _last_offset$16[ebp]
  01a0f	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _missile_x$15[ebp], xmm0

; 7352 : 							missile_y = pylon_y + 0.22;

  01a17	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  01a1f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fcc28f5c28f5c29
  01a27	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a2b	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _missile_y$14[ebp], xmm0

; 7353 : 							break;

  01a33	eb 23		 jmp	 SHORT $LN14@draw_large
$LN60@draw_large:

; 7354 : 						default:
; 7355 : 							ASSERT(!"more than 4 hellfires on Apache pylon");

  01a35	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CG@DKLMAF@more?5than?54?5hellfires?5on?5Apache@
  01a3a	85 c0		 test	 eax, eax
  01a3c	74 1a		 je	 SHORT $LN61@draw_large
  01a3e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z@4JA
  01a43	05 64 01 00 00	 add	 eax, 356		; 00000164H
  01a48	50		 push	 eax
  01a49	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01a4e	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@NDBFDPHK@?$CB?$CCmore?5than?54?5hellfires?5on?5Apac@
  01a53	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN61@draw_large:
$LN14@draw_large:

; 7356 : 					}
; 7357 : 
; 7358 : 					// remove wing
; 7359 : 					get_2d_float_screen_x_coordinate(missile_x + 0.06, &x1);

  01a58	8d 45 fc	 lea	 eax, DWORD PTR _x1$[ebp]
  01a5b	50		 push	 eax
  01a5c	f3 0f 5a 85 50
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _missile_x$15[ebp]
  01a64	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3faeb851eb851eb8
  01a6c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a70	51		 push	 ecx
  01a71	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a76	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7360 : 					get_2d_float_screen_x_coordinate(missile_x - 0.06, &x2);

  01a7b	8d 45 f8	 lea	 eax, DWORD PTR _x2$[ebp]
  01a7e	50		 push	 eax
  01a7f	f3 0f 5a 85 50
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _missile_x$15[ebp]
  01a87	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3faeb851eb851eb8
  01a8f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a93	51		 push	 ecx
  01a94	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a99	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7361 : 	
; 7362 : 					if (missile_y > pylon_y)

  01a9e	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR _missile_y$14[ebp]
  01aa6	0f 2f 85 5c ff
	ff ff		 comiss	 xmm0, DWORD PTR _pylon_y$18[ebp]
  01aad	76 42		 jbe	 SHORT $LN62@draw_large

; 7363 : 						draw_line(x1, forward_wing, x2, forward_wing, MFD_CLEAR_COLOUR);

  01aaf	b8 04 00 00 00	 mov	 eax, 4
  01ab4	6b c8 0a	 imul	 ecx, eax, 10
  01ab7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01abd	52		 push	 edx
  01abe	51		 push	 ecx
  01abf	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  01ac4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ac9	51		 push	 ecx
  01aca	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  01acf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ad4	51		 push	 ecx
  01ad5	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  01ada	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01adf	51		 push	 ecx
  01ae0	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01ae5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aea	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7364 : 					else

  01aef	eb 40		 jmp	 SHORT $LN63@draw_large
$LN62@draw_large:

; 7365 : 						draw_line(x1, rear_wing, x2, rear_wing, MFD_CLEAR_COLOUR);

  01af1	b8 04 00 00 00	 mov	 eax, 4
  01af6	6b c8 0a	 imul	 ecx, eax, 10
  01af9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01aff	52		 push	 edx
  01b00	51		 push	 ecx
  01b01	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  01b06	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b0b	51		 push	 ecx
  01b0c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  01b11	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b16	51		 push	 ecx
  01b17	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  01b1c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b21	51		 push	 ecx
  01b22	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01b27	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b2c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN63@draw_large:

; 7366 : 		
; 7367 : 					// draw missile
; 7368 : 					if ((weapon_sub_type == selected_weapon) && !damaged)

  01b31	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01b37	3b 85 70 ff ff
	ff		 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01b3d	75 54		 jne	 SHORT $LN64@draw_large
  01b3f	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  01b46	75 4b		 jne	 SHORT $LN64@draw_large

; 7369 : 					{
; 7370 : 						draw_2d_mono_sprite(inverted_hellfire_missile_data, missile_x, missile_y, MFD_COLOUR1);

  01b48	b8 04 00 00 00	 mov	 eax, 4
  01b4d	6b c8 00	 imul	 ecx, eax, 0
  01b50	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01b56	52		 push	 edx
  01b57	51		 push	 ecx
  01b58	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR _missile_y$14[ebp]
  01b60	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b65	51		 push	 ecx
  01b66	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _missile_x$15[ebp]
  01b6e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b73	68 00 00 00 00	 push	 OFFSET ?inverted_hellfire_missile_data@@3PADA
  01b78	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 7371 : 						set_mono_font_colour (MFD_CLEAR_COLOUR);

  01b7d	b8 04 00 00 00	 mov	 eax, 4
  01b82	6b c8 0a	 imul	 ecx, eax, 10
  01b85	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01b8b	52		 push	 edx
  01b8c	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7372 : 					}
; 7373 : 					else

  01b91	eb 49		 jmp	 SHORT $LN65@draw_large
$LN64@draw_large:

; 7374 : 					{
; 7375 : 						draw_2d_mono_sprite(hellfire_missile_data, missile_x, missile_y, MFD_COLOUR1);

  01b93	b8 04 00 00 00	 mov	 eax, 4
  01b98	6b c8 00	 imul	 ecx, eax, 0
  01b9b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01ba1	52		 push	 edx
  01ba2	51		 push	 ecx
  01ba3	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR _missile_y$14[ebp]
  01bab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bb0	51		 push	 ecx
  01bb1	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _missile_x$15[ebp]
  01bb9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bbe	68 00 00 00 00	 push	 OFFSET ?hellfire_missile_data@@3PADA
  01bc3	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 7376 : 						set_mono_font_colour (MFD_COLOUR1);

  01bc8	b8 04 00 00 00	 mov	 eax, 4
  01bcd	6b c8 00	 imul	 ecx, eax, 0
  01bd0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01bd6	52		 push	 edx
  01bd7	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN65@draw_large:

; 7377 : 					}
; 7378 : 					set_mono_font_type (MONO_FONT_TYPE_7X12);

  01bdc	6a 05		 push	 5
  01bde	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 7379 : 					set_2d_mono_font_position (missile_x, missile_y-0.05);

  01be3	f3 0f 5a 85 4c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _missile_y$14[ebp]
  01beb	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  01bf3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01bf7	51		 push	 ecx
  01bf8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bfd	51		 push	 ecx
  01bfe	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _missile_x$15[ebp]
  01c06	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c0b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7380 : 		
; 7381 : 					if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AGM114L_LONGBOW_HELLFIRE)

  01c10	83 bd 68 ff ff
	ff 2d		 cmp	 DWORD PTR _weapon_sub_type$[ebp], 45 ; 0000002dH
  01c17	75 13		 jne	 SHORT $LN66@draw_large

; 7382 : 						sprintf(s, "R");

  01c19	68 00 00 00 00	 push	 OFFSET ??_C@_01DGKLNCNG@R@
  01c1e	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  01c21	50		 push	 eax
  01c22	e8 00 00 00 00	 call	 _sprintf
  01c27	83 c4 08	 add	 esp, 8

; 7383 : 					else

  01c2a	eb 11		 jmp	 SHORT $LN67@draw_large
$LN66@draw_large:

; 7384 : 						sprintf(s, "L");

  01c2c	68 00 00 00 00	 push	 OFFSET ??_C@_01OCOKONAJ@L@
  01c31	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  01c34	50		 push	 eax
  01c35	e8 00 00 00 00	 call	 _sprintf
  01c3a	83 c4 08	 add	 esp, 8
$LN67@draw_large:

; 7385 : 						
; 7386 : 					x_adjust = get_mono_font_string_width (s) * -0.4;

  01c3d	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  01c40	50		 push	 eax
  01c41	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01c46	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv2051[ebp]
  01c4c	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv2051[ebp]
  01c54	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfd999999999999a
  01c5c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c60	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7387 : 					set_mono_font_rel_position (x_adjust, 0.0);

  01c68	51		 push	 ecx
  01c69	0f 57 c0	 xorps	 xmm0, xmm0
  01c6c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c71	51		 push	 ecx
  01c72	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01c7a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c7f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7388 : 					print_mono_font_string (s);

  01c84	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  01c87	50		 push	 eax
  01c88	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7389 : 				}

  01c8d	e9 6f fc ff ff	 jmp	 $LN11@draw_large
$LN12@draw_large:

; 7390 : 			}
; 7391 : 			else if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_HYDRA70_M255 ||

  01c92	e9 21 08 00 00	 jmp	 $LN85@draw_large
$LN50@draw_large:
  01c97	83 bd 68 ff ff
	ff 1e		 cmp	 DWORD PTR _weapon_sub_type$[ebp], 30 ; 0000001eH
  01c9e	74 0d		 je	 SHORT $LN70@draw_large
  01ca0	83 bd 68 ff ff
	ff 1f		 cmp	 DWORD PTR _weapon_sub_type$[ebp], 31 ; 0000001fH
  01ca7	0f 85 52 04 00
	00		 jne	 $LN68@draw_large
$LN70@draw_large:

; 7392 : 					 weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_HYDRA70_M261)
; 7393 : 			{
; 7394 : 				int selected = (weapon_sub_type == selected_weapon) && !damaged;

  01cad	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01cb3	3b 85 70 ff ff
	ff		 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01cb9	75 15		 jne	 SHORT $LN101@draw_large
  01cbb	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  01cc2	75 0c		 jne	 SHORT $LN101@draw_large
  01cc4	c7 85 d4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv870[ebp], 1
  01cce	eb 0a		 jmp	 SHORT $LN102@draw_large
$LN101@draw_large:
  01cd0	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv870[ebp], 0
$LN102@draw_large:
  01cda	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv870[ebp]
  01ce0	89 8d 48 ff ff
	ff		 mov	 DWORD PTR _selected$13[ebp], ecx

; 7395 : 				rgb_colour text_colour = selected ? MFD_CLEAR_COLOUR : MFD_COLOUR1;

  01ce6	83 bd 48 ff ff
	ff 00		 cmp	 DWORD PTR _selected$13[ebp], 0
  01ced	74 16		 je	 SHORT $LN103@draw_large
  01cef	b8 04 00 00 00	 mov	 eax, 4
  01cf4	6b c8 0a	 imul	 ecx, eax, 10
  01cf7	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?mfd_colours@@3PAUREAL_COLOUR@@A
  01cfd	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv876[ebp], ecx
  01d03	eb 13		 jmp	 SHORT $LN104@draw_large
$LN103@draw_large:
  01d05	ba 04 00 00 00	 mov	 edx, 4
  01d0a	6b c2 00	 imul	 eax, edx, 0
  01d0d	05 00 00 00 00	 add	 eax, OFFSET ?mfd_colours@@3PAUREAL_COLOUR@@A
  01d12	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv876[ebp], eax
$LN104@draw_large:
  01d18	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv876[ebp]
  01d1e	89 8d d8 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  01d24	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  01d2a	8b 02		 mov	 eax, DWORD PTR [edx]
  01d2c	89 85 44 ff ff
	ff		 mov	 DWORD PTR _text_colour$12[ebp], eax

; 7396 : 
; 7397 : 				set_mono_font_colour (text_colour);

  01d32	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _text_colour$12[ebp]
  01d38	50		 push	 eax
  01d39	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 7398 : 
; 7399 : 				// remove wing under pod
; 7400 : 				get_2d_float_screen_x_coordinate(pylon_x + 0.11, &x1);

  01d3e	8d 45 fc	 lea	 eax, DWORD PTR _x1$[ebp]
  01d41	50		 push	 eax
  01d42	f3 0f 5a 85 60
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_x$19[ebp]
  01d4a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fbc28f5c28f5c29
  01d52	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d56	51		 push	 ecx
  01d57	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d5c	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7401 : 				get_2d_float_screen_x_coordinate(pylon_x - 0.11, &x2);

  01d61	8d 45 f8	 lea	 eax, DWORD PTR _x2$[ebp]
  01d64	50		 push	 eax
  01d65	f3 0f 5a 85 60
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_x$19[ebp]
  01d6d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fbc28f5c28f5c29
  01d75	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d79	51		 push	 ecx
  01d7a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d7f	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7402 : 
; 7403 : 				draw_line(x1, forward_wing, x2, forward_wing, MFD_CLEAR_COLOUR);

  01d84	b8 04 00 00 00	 mov	 eax, 4
  01d89	6b c8 0a	 imul	 ecx, eax, 10
  01d8c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01d92	52		 push	 edx
  01d93	51		 push	 ecx
  01d94	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  01d99	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d9e	51		 push	 ecx
  01d9f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  01da4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01da9	51		 push	 ecx
  01daa	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  01daf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01db4	51		 push	 ecx
  01db5	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01dba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dbf	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7404 : 				draw_line(x1, rear_wing, x2, rear_wing, MFD_CLEAR_COLOUR);

  01dc4	b8 04 00 00 00	 mov	 eax, 4
  01dc9	6b c8 0a	 imul	 ecx, eax, 10
  01dcc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01dd2	52		 push	 edx
  01dd3	51		 push	 ecx
  01dd4	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  01dd9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dde	51		 push	 ecx
  01ddf	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  01de4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01de9	51		 push	 ecx
  01dea	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  01def	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01df4	51		 push	 ecx
  01df5	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01dfa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dff	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7405 : 
; 7406 : 				// draw rocket pod
; 7407 : 				get_2d_float_screen_coordinates (pylon_x - 0.11, pylon_y + 0.3, &x1, &y1);

  01e04	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  01e07	50		 push	 eax
  01e08	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  01e0b	51		 push	 ecx
  01e0c	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  01e14	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd3333333333333
  01e1c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e20	51		 push	 ecx
  01e21	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e26	f3 0f 5a 85 60
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_x$19[ebp]
  01e2e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fbc28f5c28f5c29
  01e36	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e3a	51		 push	 ecx
  01e3b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e40	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 7408 : 				get_2d_float_screen_coordinates (pylon_x + 0.11, pylon_y - 0.3, &x2, &y2);

  01e45	8d 45 e8	 lea	 eax, DWORD PTR _y2$[ebp]
  01e48	50		 push	 eax
  01e49	8d 4d f8	 lea	 ecx, DWORD PTR _x2$[ebp]
  01e4c	51		 push	 ecx
  01e4d	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  01e55	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fd3333333333333
  01e5d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e61	51		 push	 ecx
  01e62	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e67	f3 0f 5a 85 60
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_x$19[ebp]
  01e6f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fbc28f5c28f5c29
  01e77	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e7b	51		 push	 ecx
  01e7c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e81	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 7409 : 
; 7410 : 				if (selected)

  01e86	83 bd 48 ff ff
	ff 00		 cmp	 DWORD PTR _selected$13[ebp], 0
  01e8d	74 31		 je	 SHORT $LN71@draw_large

; 7411 : 					set_block (x1, y1, x2, y2, MFD_COLOUR1);

  01e8f	b8 04 00 00 00	 mov	 eax, 4
  01e94	6b c8 00	 imul	 ecx, eax, 0
  01e97	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01e9d	52		 push	 edx
  01e9e	f3 0f 2c 45 e8	 cvttss2si eax, DWORD PTR _y2$[ebp]
  01ea3	50		 push	 eax
  01ea4	f3 0f 2c 4d f8	 cvttss2si ecx, DWORD PTR _x2$[ebp]
  01ea9	51		 push	 ecx
  01eaa	f3 0f 2c 55 ec	 cvttss2si edx, DWORD PTR _y1$[ebp]
  01eaf	52		 push	 edx
  01eb0	f3 0f 2c 45 fc	 cvttss2si eax, DWORD PTR _x1$[ebp]
  01eb5	50		 push	 eax
  01eb6	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 7412 : 				else

  01ebb	e9 00 01 00 00	 jmp	 $LN72@draw_large
$LN71@draw_large:

; 7413 : 				{
; 7414 : 					draw_line (x1, y1, x2, y1, MFD_COLOUR1);

  01ec0	b8 04 00 00 00	 mov	 eax, 4
  01ec5	6b c8 00	 imul	 ecx, eax, 0
  01ec8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01ece	52		 push	 edx
  01ecf	51		 push	 ecx
  01ed0	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01ed5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01eda	51		 push	 ecx
  01edb	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  01ee0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ee5	51		 push	 ecx
  01ee6	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01eeb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ef0	51		 push	 ecx
  01ef1	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01ef6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01efb	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7415 : 					draw_line (x1, y1, x1, y2, MFD_COLOUR1);

  01f00	b8 04 00 00 00	 mov	 eax, 4
  01f05	6b c8 00	 imul	 ecx, eax, 0
  01f08	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01f0e	52		 push	 edx
  01f0f	51		 push	 ecx
  01f10	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01f15	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f1a	51		 push	 ecx
  01f1b	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01f20	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f25	51		 push	 ecx
  01f26	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01f2b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f30	51		 push	 ecx
  01f31	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01f36	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f3b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7416 : 					draw_line (x1, y2, x2, y2, MFD_COLOUR1);

  01f40	b8 04 00 00 00	 mov	 eax, 4
  01f45	6b c8 00	 imul	 ecx, eax, 0
  01f48	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01f4e	52		 push	 edx
  01f4f	51		 push	 ecx
  01f50	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01f55	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f5a	51		 push	 ecx
  01f5b	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  01f60	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f65	51		 push	 ecx
  01f66	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01f6b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f70	51		 push	 ecx
  01f71	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  01f76	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f7b	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7417 : 					draw_line (x2, y1, x2, y2, MFD_COLOUR1);

  01f80	b8 04 00 00 00	 mov	 eax, 4
  01f85	6b c8 00	 imul	 ecx, eax, 0
  01f88	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01f8e	52		 push	 edx
  01f8f	51		 push	 ecx
  01f90	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y2$[ebp]
  01f95	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f9a	51		 push	 ecx
  01f9b	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  01fa0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fa5	51		 push	 ecx
  01fa6	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  01fab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fb0	51		 push	 ecx
  01fb1	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  01fb6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fbb	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN72@draw_large:

; 7418 : 				}
; 7419 : 
; 7420 : 				set_mono_font_type (MONO_FONT_TYPE_7X12);

  01fc0	6a 05		 push	 5
  01fc2	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 7421 : 				set_2d_mono_font_position (pylon_x, pylon_y);

  01fc7	51		 push	 ecx
  01fc8	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_y$18[ebp]
  01fd0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fd5	51		 push	 ecx
  01fd6	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  01fde	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fe3	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7422 : 	
; 7423 : 				if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_HYDRA70_M255)

  01fe8	83 bd 68 ff ff
	ff 1e		 cmp	 DWORD PTR _weapon_sub_type$[ebp], 30 ; 0000001eH
  01fef	75 13		 jne	 SHORT $LN73@draw_large

; 7424 : 					sprintf(s, "MP");

  01ff1	68 00 00 00 00	 push	 OFFSET ??_C@_02MCEHGFCK@MP@
  01ff6	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  01ff9	50		 push	 eax
  01ffa	e8 00 00 00 00	 call	 _sprintf
  01fff	83 c4 08	 add	 esp, 8

; 7425 : 				else

  02002	eb 11		 jmp	 SHORT $LN74@draw_large
$LN73@draw_large:

; 7426 : 					sprintf(s, "RC");

  02004	68 00 00 00 00	 push	 OFFSET ??_C@_02LENCMAPF@RC@
  02009	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  0200c	50		 push	 eax
  0200d	e8 00 00 00 00	 call	 _sprintf
  02012	83 c4 08	 add	 esp, 8
$LN74@draw_large:

; 7427 : 					
; 7428 : 				x_adjust = get_mono_font_string_width (s) * -0.4;

  02015	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  02018	50		 push	 eax
  02019	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0201e	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv2149[ebp]
  02024	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv2149[ebp]
  0202c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfd999999999999a
  02034	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02038	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7429 : 				set_mono_font_rel_position (x_adjust, 0.0);

  02040	51		 push	 ecx
  02041	0f 57 c0	 xorps	 xmm0, xmm0
  02044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02049	51		 push	 ecx
  0204a	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  02052	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02057	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7430 : 				print_mono_font_string (s);

  0205c	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  0205f	50		 push	 eax
  02060	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 7431 : 				
; 7432 : 				set_2d_mono_font_position (pylon_x, pylon_y - 0.1);

  02065	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  0206d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb999999999999a
  02075	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02079	51		 push	 ecx
  0207a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0207f	51		 push	 ecx
  02080	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  02088	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0208d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 7433 : 				sprintf(s, "%2d", number);

  02092	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _number$[ebp]
  02098	50		 push	 eax
  02099	68 00 00 00 00	 push	 OFFSET ??_C@_03GPCJOALC@?$CF2d@
  0209e	8d 4d 84	 lea	 ecx, DWORD PTR _s$[ebp]
  020a1	51		 push	 ecx
  020a2	e8 00 00 00 00	 call	 _sprintf
  020a7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7434 : 				x_adjust = get_mono_font_string_width (s) * -0.4;

  020aa	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  020ad	50		 push	 eax
  020ae	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  020b3	dd 9d d0 fe ff
	ff		 fstp	 QWORD PTR tv2165[ebp]
  020b9	f2 0f 10 85 d0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv2165[ebp]
  020c1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfd999999999999a
  020c9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  020cd	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 7435 : 				set_mono_font_rel_position (x_adjust, 0.0);

  020d5	51		 push	 ecx
  020d6	0f 57 c0	 xorps	 xmm0, xmm0
  020d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020de	51		 push	 ecx
  020df	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  020e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020ec	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 7436 : 				print_mono_font_string (s);

  020f1	8d 45 84	 lea	 eax, DWORD PTR _s$[ebp]
  020f4	50		 push	 eax
  020f5	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
  020fa	e9 b9 03 00 00	 jmp	 $LN85@draw_large
$LN68@draw_large:

; 7437 : 			}
; 7438 : 			else if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AIM92_STINGER)

  020ff	83 bd 68 ff ff
	ff 24		 cmp	 DWORD PTR _weapon_sub_type$[ebp], 36 ; 00000024H
  02106	0f 85 ac 03 00
	00		 jne	 $LN85@draw_large

; 7439 : 			{
; 7440 : 				int selected = (weapon_sub_type == selected_weapon) && !damaged;

  0210c	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  02112	3b 85 70 ff ff
	ff		 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  02118	75 15		 jne	 SHORT $LN105@draw_large
  0211a	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  02121	75 0c		 jne	 SHORT $LN105@draw_large
  02123	c7 85 d4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv998[ebp], 1
  0212d	eb 0a		 jmp	 SHORT $LN106@draw_large
$LN105@draw_large:
  0212f	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv998[ebp], 0
$LN106@draw_large:
  02139	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv998[ebp]
  0213f	89 8d 40 ff ff
	ff		 mov	 DWORD PTR _selected$11[ebp], ecx

; 7441 : 				int left_tip = pylon == APACHE_LHS_WING_TIP_MOUNT;

  02145	83 bd 6c ff ff
	ff 04		 cmp	 DWORD PTR _pylon$[ebp], 4
  0214c	75 0c		 jne	 SHORT $LN107@draw_large
  0214e	c7 85 d4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1000[ebp], 1
  02158	eb 0a		 jmp	 SHORT $LN108@draw_large
$LN107@draw_large:
  0215a	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1000[ebp], 0
$LN108@draw_large:
  02164	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR tv1000[ebp]
  0216a	89 85 3c ff ff
	ff		 mov	 DWORD PTR _left_tip$10[ebp], eax

; 7442 : 				float tip;
; 7443 : 
; 7444 : 				if (number == 2)

  02170	83 bd 78 ff ff
	ff 02		 cmp	 DWORD PTR _number$[ebp], 2
  02177	0f 85 97 01 00
	00		 jne	 $LN80@draw_large

; 7445 : 				{
; 7446 : 					// remove wing drawing
; 7447 : 					if (left_tip)

  0217d	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR _left_tip$10[ebp], 0
  02184	74 3d		 je	 SHORT $LN77@draw_large

; 7448 : 					{
; 7449 : 						tip = wing_tip_left;

  02186	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _wing_tip_left$[ebp]
  0218b	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _tip$9[ebp], xmm0

; 7450 : 						get_2d_float_screen_x_coordinate(-0.93, &x1);

  02193	8d 45 fc	 lea	 eax, DWORD PTR _x1$[ebp]
  02196	50		 push	 eax
  02197	51		 push	 ecx
  02198	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6e147b
  021a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021a5	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7451 : 						get_2d_float_screen_y_coordinate(-0.22, &y1);

  021aa	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  021ad	50		 push	 eax
  021ae	51		 push	 ecx
  021af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be6147ae
  021b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021bc	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 7452 : 					}
; 7453 : 					else

  021c1	eb 3b		 jmp	 SHORT $LN78@draw_large
$LN77@draw_large:

; 7454 : 					{
; 7455 : 						tip = wing_tip_right;

  021c3	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _wing_tip_right$[ebp]
  021c8	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _tip$9[ebp], xmm0

; 7456 : 						get_2d_float_screen_x_coordinate(0.93, &x1);

  021d0	8d 45 fc	 lea	 eax, DWORD PTR _x1$[ebp]
  021d3	50		 push	 eax
  021d4	51		 push	 ecx
  021d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  021dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021e2	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7457 : 						get_2d_float_screen_y_coordinate(-0.22, &y1);

  021e7	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  021ea	50		 push	 eax
  021eb	51		 push	 ecx
  021ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be6147ae
  021f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021f9	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate
$LN78@draw_large:

; 7458 : 					}
; 7459 : 					draw_line(x1, forward_wing, tip, forward_wing, MFD_CLEAR_COLOUR);

  021fe	b8 04 00 00 00	 mov	 eax, 4
  02203	6b c8 0a	 imul	 ecx, eax, 10
  02206	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0220c	52		 push	 edx
  0220d	51		 push	 ecx
  0220e	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  02213	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02218	51		 push	 ecx
  02219	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _tip$9[ebp]
  02221	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02226	51		 push	 ecx
  02227	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  0222c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02231	51		 push	 ecx
  02232	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  02237	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0223c	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7460 : 					draw_line(tip, forward_wing, tip, y1, MFD_CLEAR_COLOUR);

  02241	b8 04 00 00 00	 mov	 eax, 4
  02246	6b c8 0a	 imul	 ecx, eax, 10
  02249	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0224f	52		 push	 edx
  02250	51		 push	 ecx
  02251	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  02256	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0225b	51		 push	 ecx
  0225c	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _tip$9[ebp]
  02264	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02269	51		 push	 ecx
  0226a	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _forward_wing$[ebp]
  0226f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02274	51		 push	 ecx
  02275	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _tip$9[ebp]
  0227d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02282	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7461 : 
; 7462 : 					// draw missile
; 7463 : 					if (selected)

  02287	83 bd 40 ff ff
	ff 00		 cmp	 DWORD PTR _selected$11[ebp], 0
  0228e	74 43		 je	 SHORT $LN79@draw_large

; 7464 : 						draw_2d_mono_sprite(inverted_stinger_missile_data, pylon_x, pylon_y + 0.25, MFD_COLOUR1);

  02290	b8 04 00 00 00	 mov	 eax, 4
  02295	6b c8 00	 imul	 ecx, eax, 0
  02298	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0229e	52		 push	 edx
  0229f	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  022a7	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  022af	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  022b3	51		 push	 ecx
  022b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022b9	51		 push	 ecx
  022ba	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  022c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022c7	68 00 00 00 00	 push	 OFFSET ?inverted_stinger_missile_data@@3PADA
  022cc	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 7465 : 					else

  022d1	eb 41		 jmp	 SHORT $LN80@draw_large
$LN79@draw_large:

; 7466 : 						draw_2d_mono_sprite(stinger_missile_data, pylon_x, pylon_y + 0.25, MFD_COLOUR1);

  022d3	b8 04 00 00 00	 mov	 eax, 4
  022d8	6b c8 00	 imul	 ecx, eax, 0
  022db	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  022e1	52		 push	 edx
  022e2	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  022ea	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  022f2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  022f6	51		 push	 ecx
  022f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022fc	51		 push	 ecx
  022fd	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  02305	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0230a	68 00 00 00 00	 push	 OFFSET ?stinger_missile_data@@3PADA
  0230f	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN80@draw_large:

; 7467 : 				}
; 7468 : 
; 7469 : 				if (number >= 1)

  02314	83 bd 78 ff ff
	ff 01		 cmp	 DWORD PTR _number$[ebp], 1
  0231b	0f 8c 97 01 00
	00		 jl	 $LN85@draw_large

; 7470 : 				{
; 7471 : 					// remove wing drawing
; 7472 : 					if (left_tip)

  02321	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR _left_tip$10[ebp], 0
  02328	74 3d		 je	 SHORT $LN82@draw_large

; 7473 : 					{
; 7474 : 						tip = wing_tip_left;

  0232a	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _wing_tip_left$[ebp]
  0232f	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _tip$9[ebp], xmm0

; 7475 : 						get_2d_float_screen_x_coordinate(-0.91, &x1);

  02337	8d 45 fc	 lea	 eax, DWORD PTR _x1$[ebp]
  0233a	50		 push	 eax
  0233b	51		 push	 ecx
  0233c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf68f5c3
  02344	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02349	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7476 : 						get_2d_float_screen_y_coordinate(-0.27, &y1);

  0234e	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  02351	50		 push	 eax
  02352	51		 push	 ecx
  02353	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8a3d71
  0235b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02360	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 7477 : 					}
; 7478 : 					else

  02365	eb 3b		 jmp	 SHORT $LN83@draw_large
$LN82@draw_large:

; 7479 : 					{
; 7480 : 						tip = wing_tip_right;

  02367	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _wing_tip_right$[ebp]
  0236c	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _tip$9[ebp], xmm0

; 7481 : 						get_2d_float_screen_x_coordinate(0.91, &x1);

  02374	8d 45 fc	 lea	 eax, DWORD PTR _x1$[ebp]
  02377	50		 push	 eax
  02378	51		 push	 ecx
  02379	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  02381	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02386	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 7482 : 						get_2d_float_screen_y_coordinate(-0.27, &y1);

  0238b	8d 45 ec	 lea	 eax, DWORD PTR _y1$[ebp]
  0238e	50		 push	 eax
  0238f	51		 push	 ecx
  02390	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8a3d71
  02398	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0239d	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate
$LN83@draw_large:

; 7483 : 					}
; 7484 : 					draw_line(x1, rear_wing, tip, rear_wing, MFD_CLEAR_COLOUR);

  023a2	b8 04 00 00 00	 mov	 eax, 4
  023a7	6b c8 0a	 imul	 ecx, eax, 10
  023aa	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  023b0	52		 push	 edx
  023b1	51		 push	 ecx
  023b2	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  023b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023bc	51		 push	 ecx
  023bd	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _tip$9[ebp]
  023c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023ca	51		 push	 ecx
  023cb	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  023d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023d5	51		 push	 ecx
  023d6	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  023db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023e0	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7485 : 					draw_line(tip, rear_wing, tip, y1, MFD_CLEAR_COLOUR);

  023e5	b8 04 00 00 00	 mov	 eax, 4
  023ea	6b c8 0a	 imul	 ecx, eax, 10
  023ed	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  023f3	52		 push	 edx
  023f4	51		 push	 ecx
  023f5	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y1$[ebp]
  023fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023ff	51		 push	 ecx
  02400	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _tip$9[ebp]
  02408	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0240d	51		 push	 ecx
  0240e	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _rear_wing$[ebp]
  02413	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02418	51		 push	 ecx
  02419	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _tip$9[ebp]
  02421	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02426	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 7486 : 
; 7487 : 					// draw missile
; 7488 : 					if (selected)

  0242b	83 bd 40 ff ff
	ff 00		 cmp	 DWORD PTR _selected$11[ebp], 0
  02432	74 43		 je	 SHORT $LN84@draw_large

; 7489 : 						draw_2d_mono_sprite(inverted_stinger_missile_data, pylon_x, pylon_y - 0.05, MFD_COLOUR1);

  02434	b8 04 00 00 00	 mov	 eax, 4
  02439	6b c8 00	 imul	 ecx, eax, 0
  0243c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02442	52		 push	 edx
  02443	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  0244b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  02453	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02457	51		 push	 ecx
  02458	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0245d	51		 push	 ecx
  0245e	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  02466	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0246b	68 00 00 00 00	 push	 OFFSET ?inverted_stinger_missile_data@@3PADA
  02470	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 7490 : 					else

  02475	eb 41		 jmp	 SHORT $LN85@draw_large
$LN84@draw_large:

; 7491 : 						draw_2d_mono_sprite(stinger_missile_data, pylon_x, pylon_y - 0.05, MFD_COLOUR1);

  02477	b8 04 00 00 00	 mov	 eax, 4
  0247c	6b c8 00	 imul	 ecx, eax, 0
  0247f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02485	52		 push	 edx
  02486	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  0248e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  02496	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0249a	51		 push	 ecx
  0249b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024a0	51		 push	 ecx
  024a1	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_x$19[ebp]
  024a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024ae	68 00 00 00 00	 push	 OFFSET ?stinger_missile_data@@3PADA
  024b3	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN85@draw_large:

; 7492 : 				}
; 7493 : 			}
; 7494 : 			
; 7495 : 			// if damaged, draw X across pylon
; 7496 : 			if (damaged)

  024b8	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _damaged$[ebp], 0
  024bf	0f 84 c1 01 00
	00		 je	 $LN86@draw_large

; 7497 : 			{
; 7498 : 				float width, height = 0.7, x1, y1, x2, y2, y_offset = 0.0;

  024c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  024cd	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _height$7[ebp], xmm0
  024d5	0f 57 c0	 xorps	 xmm0, xmm0
  024d8	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _y_offset$2[ebp], xmm0

; 7499 : 				
; 7500 : 				if (pylon == APACHE_LHS_WING_TIP_MOUNT || pylon == APACHE_RHS_WING_TIP_MOUNT)

  024e0	83 bd 6c ff ff
	ff 04		 cmp	 DWORD PTR _pylon$[ebp], 4
  024e7	74 09		 je	 SHORT $LN89@draw_large
  024e9	83 bd 6c ff ff
	ff 05		 cmp	 DWORD PTR _pylon$[ebp], 5
  024f0	75 22		 jne	 SHORT $LN87@draw_large
$LN89@draw_large:

; 7501 : 				{
; 7502 : 					// stingers are narrower and drawn more forward than other pylons
; 7503 : 					y_offset = 0.1;

  024f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  024fa	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _y_offset$2[ebp], xmm0

; 7504 : 					width = 0.125;

  02502	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  0250a	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _width$8[ebp], xmm0

; 7505 : 				}
; 7506 : 				else

  02512	eb 10		 jmp	 SHORT $LN88@draw_large
$LN87@draw_large:

; 7507 : 					width = 0.25;

  02514	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  0251c	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _width$8[ebp], xmm0
$LN88@draw_large:

; 7508 : 
; 7509 : 				get_2d_float_screen_coordinates(pylon_x - 0.5 * width, pylon_y - 0.5 * height, &x1, &y1);

  02524	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _y1$5[ebp]
  0252a	50		 push	 eax
  0252b	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _x1$6[ebp]
  02531	51		 push	 ecx
  02532	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_y$18[ebp]
  0253a	f3 0f 5a 8d 30
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _height$7[ebp]
  02542	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0254a	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0254e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02552	51		 push	 ecx
  02553	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02558	f3 0f 5a 85 60
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_x$19[ebp]
  02560	f3 0f 5a 8d 34
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _width$8[ebp]
  02568	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  02570	f2 0f 5c c1	 subsd	 xmm0, xmm1
  02574	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02578	51		 push	 ecx
  02579	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0257e	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 7510 : 				get_2d_float_screen_coordinates(pylon_x + 0.5 * width, pylon_y + y_offset + 0.5 * height, &x2, &y2);

  02583	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR _y2$3[ebp]
  02589	50		 push	 eax
  0258a	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _x2$4[ebp]
  02590	51		 push	 ecx
  02591	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _pylon_y$18[ebp]
  02599	f3 0f 58 85 1c
	ff ff ff	 addss	 xmm0, DWORD PTR _y_offset$2[ebp]
  025a1	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  025a5	f3 0f 5a 8d 30
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _height$7[ebp]
  025ad	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  025b5	f2 0f 58 c1	 addsd	 xmm0, xmm1
  025b9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  025bd	51		 push	 ecx
  025be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025c3	f3 0f 5a 85 60
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _pylon_x$19[ebp]
  025cb	f3 0f 5a 8d 34
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _width$8[ebp]
  025d3	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  025db	f2 0f 58 c1	 addsd	 xmm0, xmm1
  025df	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  025e3	51		 push	 ecx
  025e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  025e9	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 7511 : 				
; 7512 : 				draw_half_thick_line(x1, y1, x2, y2, MFD_COLOUR1);

  025ee	b8 04 00 00 00	 mov	 eax, 4
  025f3	6b c8 00	 imul	 ecx, eax, 0
  025f6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  025fc	52		 push	 edx
  025fd	51		 push	 ecx
  025fe	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y2$3[ebp]
  02606	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0260b	51		 push	 ecx
  0260c	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _x2$4[ebp]
  02614	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02619	51		 push	 ecx
  0261a	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y1$5[ebp]
  02622	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02627	51		 push	 ecx
  02628	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _x1$6[ebp]
  02630	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02635	e8 00 00 00 00	 call	 ?draw_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_half_thick_line

; 7513 : 				draw_half_thick_line(x1, y2, x2, y1, MFD_COLOUR1);

  0263a	b8 04 00 00 00	 mov	 eax, 4
  0263f	6b c8 00	 imul	 ecx, eax, 0
  02642	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02648	52		 push	 edx
  02649	51		 push	 ecx
  0264a	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y1$5[ebp]
  02652	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02657	51		 push	 ecx
  02658	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _x2$4[ebp]
  02660	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02665	51		 push	 ecx
  02666	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _y2$3[ebp]
  0266e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02673	51		 push	 ecx
  02674	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _x1$6[ebp]
  0267c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02681	e8 00 00 00 00	 call	 ?draw_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_half_thick_line
$LN86@draw_large:

; 7514 : 			}
; 7515 : 		}
; 7516 : 	}

  02686	e9 36 f1 ff ff	 jmp	 $LN6@draw_large
$LN7@draw_large:

; 7517 : }

  0268b	5f		 pop	 edi
  0268c	5e		 pop	 esi
  0268d	5b		 pop	 ebx
  0268e	8b e5		 mov	 esp, ebp
  02690	5d		 pop	 ebp
  02691	c2 04 00	 ret	 4
$LN109@draw_large:
  02694	00 00 00 00	 DD	 $LN32@draw_large
  02698	00 00 00 00	 DD	 $LN32@draw_large
  0269c	00 00 00 00	 DD	 $LN33@draw_large
  026a0	00 00 00 00	 DD	 $LN33@draw_large
  026a4	00 00 00 00	 DD	 $LN33@draw_large
  026a8	00 00 00 00	 DD	 $LN35@draw_large
  026ac	00 00 00 00	 DD	 $LN35@draw_large
  026b0	00 00 00 00	 DD	 $LN34@draw_large
$LN110@draw_large:
  026b4	00 00 00 00	 DD	 $LN43@draw_large
  026b8	00 00 00 00	 DD	 $LN44@draw_large
  026bc	00 00 00 00	 DD	 $LN45@draw_large
  026c0	00 00 00 00	 DD	 $LN46@draw_large
  026c4	00 00 00 00	 DD	 $LN47@draw_large
  026c8	00 00 00 00	 DD	 $LN48@draw_large
$LN111@draw_large:
  026cc	00 00 00 00	 DD	 $LN56@draw_large
  026d0	00 00 00 00	 DD	 $LN57@draw_large
  026d4	00 00 00 00	 DD	 $LN58@draw_large
  026d8	00 00 00 00	 DD	 $LN59@draw_large
?draw_large_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@@Z ENDP ; draw_large_weapon_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_weapon_hardpoint_info@@YGXHHH@Z
_TEXT	SEGMENT
tv1575 = -176						; size = 4
tv1455 = -176						; size = 4
tv1440 = -176						; size = 4
tv1320 = -176						; size = 4
tv1287 = -176						; size = 4
tv1261 = -176						; size = 4
tv962 = -176						; size = 4
tv946 = -176						; size = 4
tv915 = -176						; size = 4
tv889 = -176						; size = 4
tv590 = -176						; size = 4
tv574 = -176						; size = 4
tv540 = -176						; size = 4
tv514 = -176						; size = 4
tv442 = -176						; size = 4
tv411 = -176						; size = 4
tv385 = -176						; size = 4
tv313 = -176						; size = 4
_weapon_sub_type$ = -108				; size = 4
_v$ = -104						; size = 4
_u$ = -100						; size = 4
_hardpoint_y$ = -96					; size = 4
_hardpoint_x$ = -92					; size = 4
_damaged$ = -88						; size = 4
_number$ = -84						; size = 4
_buffer$ = -80						; size = 80
_heading_depth$ = 8					; size = 4
_given_weapon$ = 12					; size = 4
_selected_weapon$ = 16					; size = 4
?draw_weapon_hardpoint_info@@YGXHHH@Z PROC		; draw_weapon_hardpoint_info, COMDAT

; 5055 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 5056 : 	char
; 5057 : 		buffer[80];
; 5058 : 
; 5059 : 	int
; 5060 : 		number,
; 5061 : 		damaged,
; 5062 : 		hardpoint_x,
; 5063 : 		hardpoint_y,
; 5064 : 		u,
; 5065 : 		v;
; 5066 : 
; 5067 : 	entity_sub_types
; 5068 : 		weapon_sub_type;
; 5069 : 
; 5070 : 	if (!get_local_entity_weapon_hardpoint_info (get_gunship_entity (), heading_depth, given_weapon, &weapon_sub_type, &number, &damaged))

  0000c	8d 45 a8	 lea	 eax, DWORD PTR _damaged$[ebp]
  0000f	50		 push	 eax
  00010	8d 4d ac	 lea	 ecx, DWORD PTR _number$[ebp]
  00013	51		 push	 ecx
  00014	8d 55 94	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00017	52		 push	 edx
  00018	8b 45 0c	 mov	 eax, DWORD PTR _given_weapon$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _heading_depth$[ebp]
  0001f	51		 push	 ecx
  00020	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00026	52		 push	 edx
  00027	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  0002c	85 c0		 test	 eax, eax
  0002e	75 05		 jne	 SHORT $LN38@draw_weapo

; 5071 : 	{
; 5072 : 		return;

  00030	e9 04 24 00 00	 jmp	 $LN1@draw_weapo
$LN38@draw_weapo:

; 5073 : 	}
; 5074 : 
; 5075 : 	////////////////////////////////////////////////////////////////////////////////
; 5076 : 	//
; 5077 : 	// Chain Gun
; 5078 : 	//
; 5079 : 	////////////////////////////////////////////////////////////////////////////////
; 5080 : 
; 5081 : 	if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_M230_30MM_ROUND)

  00035	83 7d 94 07	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 7
  00039	0f 85 43 04 00
	00		 jne	 $LN39@draw_weapo

; 5082 : 	{
; 5083 : 		if (draw_large_mfd)

  0003f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00046	0f 84 1c 02 00
	00		 je	 $LN40@draw_weapo

; 5084 : 		{
; 5085 : 			////////////////////////////////////////
; 5086 : 			//
; 5087 : 			// LARGE
; 5088 : 			//
; 5089 : 			////////////////////////////////////////
; 5090 : 
; 5091 : 			//
; 5092 : 			// chain gun
; 5093 : 			//
; 5094 : 
; 5095 : 			if (number == 0)

  0004c	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  00050	75 2a		 jne	 SHORT $LN42@draw_weapo

; 5096 : 			{
; 5097 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  00052	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00055	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00058	75 20		 jne	 SHORT $LN44@draw_weapo
  0005a	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0005e	75 1a		 jne	 SHORT $LN44@draw_weapo

; 5098 : 				{
; 5099 : 					draw_sprite (118, 200, 262, 134, 28, 27);

  00060	6a 1b		 push	 27			; 0000001bH
  00062	6a 1c		 push	 28			; 0000001cH
  00064	68 86 00 00 00	 push	 134			; 00000086H
  00069	68 06 01 00 00	 push	 262			; 00000106H
  0006e	68 c8 00 00 00	 push	 200			; 000000c8H
  00073	6a 76		 push	 118			; 00000076H
  00075	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN44@draw_weapo:

; 5100 : 				}
; 5101 : 			}
; 5102 : 			else

  0007a	eb 44		 jmp	 SHORT $LN43@draw_weapo
$LN42@draw_weapo:

; 5103 : 			{
; 5104 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  0007c	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0007f	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00082	75 22		 jne	 SHORT $LN45@draw_weapo
  00084	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00088	75 1c		 jne	 SHORT $LN45@draw_weapo

; 5105 : 				{
; 5106 : 					draw_sprite (118, 200, 292, 134, 28, 27);

  0008a	6a 1b		 push	 27			; 0000001bH
  0008c	6a 1c		 push	 28			; 0000001cH
  0008e	68 86 00 00 00	 push	 134			; 00000086H
  00093	68 24 01 00 00	 push	 292			; 00000124H
  00098	68 c8 00 00 00	 push	 200			; 000000c8H
  0009d	6a 76		 push	 118			; 00000076H
  0009f	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5107 : 				}
; 5108 : 				else

  000a4	eb 1a		 jmp	 SHORT $LN43@draw_weapo
$LN45@draw_weapo:

; 5109 : 				{
; 5110 : 					draw_sprite (118, 200, 322, 134, 27, 27);

  000a6	6a 1b		 push	 27			; 0000001bH
  000a8	6a 1b		 push	 27			; 0000001bH
  000aa	68 86 00 00 00	 push	 134			; 00000086H
  000af	68 42 01 00 00	 push	 322			; 00000142H
  000b4	68 c8 00 00 00	 push	 200			; 000000c8H
  000b9	6a 76		 push	 118			; 00000076H
  000bb	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN43@draw_weapo:

; 5111 : 				}
; 5112 : 			}
; 5113 : 
; 5114 : 			//
; 5115 : 			// digits
; 5116 : 			//
; 5117 : 
; 5118 : 			hardpoint_x = 115;

  000c0	c7 45 a4 73 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 115 ; 00000073H

; 5119 : 			hardpoint_y = 234;

  000c7	c7 45 a0 ea 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 234 ; 000000eaH

; 5120 : 
; 5121 : 			sprintf (buffer, "%04d", number);

  000ce	8b 45 ac	 mov	 eax, DWORD PTR _number$[ebp]
  000d1	50		 push	 eax
  000d2	68 00 00 00 00	 push	 OFFSET ??_C@_04OCCELDNI@?$CF04d@
  000d7	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000da	51		 push	 ecx
  000db	e8 00 00 00 00	 call	 _sprintf
  000e0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5122 : 
; 5123 : 			if ((weapon_sub_type == selected_weapon) && (!damaged))

  000e3	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  000e6	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  000e9	75 0f		 jne	 SHORT $LN47@draw_weapo
  000eb	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  000ef	75 09		 jne	 SHORT $LN47@draw_weapo

; 5124 : 			{
; 5125 : 				v = 32;

  000f1	c7 45 98 20 00
	00 00		 mov	 DWORD PTR _v$[ebp], 32	; 00000020H

; 5126 : 			}
; 5127 : 			else

  000f8	eb 07		 jmp	 SHORT $LN48@draw_weapo
$LN47@draw_weapo:

; 5128 : 			{
; 5129 : 				v = 47;

  000fa	c7 45 98 2f 00
	00 00		 mov	 DWORD PTR _v$[ebp], 47	; 0000002fH
$LN48@draw_weapo:

; 5130 : 			}
; 5131 : 
; 5132 : 			if (buffer[0] == '0')

  00101	b8 01 00 00 00	 mov	 eax, 1
  00106	6b c8 00	 imul	 ecx, eax, 0
  00109	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  0010e	83 fa 30	 cmp	 edx, 48			; 00000030H
  00111	75 09		 jne	 SHORT $LN49@draw_weapo

; 5133 : 			{
; 5134 : 				u = 364 + (9 * 10);

  00113	c7 45 9c c6 01
	00 00		 mov	 DWORD PTR _u$[ebp], 454	; 000001c6H

; 5135 : 			}
; 5136 : 			else

  0011a	eb 1b		 jmp	 SHORT $LN50@draw_weapo
$LN49@draw_weapo:

; 5137 : 			{
; 5138 : 				u = 364 + ((buffer[0] - '1') * 10);

  0011c	b8 01 00 00 00	 mov	 eax, 1
  00121	6b c8 00	 imul	 ecx, eax, 0
  00124	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  00129	83 ea 31	 sub	 edx, 49			; 00000031H
  0012c	6b c2 0a	 imul	 eax, edx, 10
  0012f	05 6c 01 00 00	 add	 eax, 364		; 0000016cH
  00134	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN50@draw_weapo:

; 5139 : 			}
; 5140 : 
; 5141 : 			draw_sprite (hardpoint_x, hardpoint_y, u, v, 8, 12);

  00137	6a 0c		 push	 12			; 0000000cH
  00139	6a 08		 push	 8
  0013b	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  0013e	50		 push	 eax
  0013f	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  00142	51		 push	 ecx
  00143	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  00146	52		 push	 edx
  00147	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  0014a	50		 push	 eax
  0014b	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5142 : 
; 5143 : 			if (buffer[1] == '0')

  00150	b8 01 00 00 00	 mov	 eax, 1
  00155	c1 e0 00	 shl	 eax, 0
  00158	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  0015d	83 f9 30	 cmp	 ecx, 48			; 00000030H
  00160	75 09		 jne	 SHORT $LN51@draw_weapo

; 5144 : 			{
; 5145 : 				u = 364 + (9 * 10);

  00162	c7 45 9c c6 01
	00 00		 mov	 DWORD PTR _u$[ebp], 454	; 000001c6H

; 5146 : 			}
; 5147 : 			else

  00169	eb 1c		 jmp	 SHORT $LN52@draw_weapo
$LN51@draw_weapo:

; 5148 : 			{
; 5149 : 				u = 364 + ((buffer[1] - '1') * 10);

  0016b	b8 01 00 00 00	 mov	 eax, 1
  00170	c1 e0 00	 shl	 eax, 0
  00173	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  00178	83 e9 31	 sub	 ecx, 49			; 00000031H
  0017b	6b d1 0a	 imul	 edx, ecx, 10
  0017e	81 c2 6c 01 00
	00		 add	 edx, 364		; 0000016cH
  00184	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN52@draw_weapo:

; 5150 : 			}
; 5151 : 
; 5152 : 			draw_sprite (hardpoint_x + 9, hardpoint_y, u, v, 8, 12);

  00187	6a 0c		 push	 12			; 0000000cH
  00189	6a 08		 push	 8
  0018b	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  0018e	50		 push	 eax
  0018f	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  00192	51		 push	 ecx
  00193	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  00196	52		 push	 edx
  00197	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  0019a	83 c0 09	 add	 eax, 9
  0019d	50		 push	 eax
  0019e	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5153 : 
; 5154 : 			if (buffer[2] == '0')

  001a3	b8 01 00 00 00	 mov	 eax, 1
  001a8	d1 e0		 shl	 eax, 1
  001aa	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  001af	83 f9 30	 cmp	 ecx, 48			; 00000030H
  001b2	75 09		 jne	 SHORT $LN53@draw_weapo

; 5155 : 			{
; 5156 : 				u = 364 + (9 * 10);

  001b4	c7 45 9c c6 01
	00 00		 mov	 DWORD PTR _u$[ebp], 454	; 000001c6H

; 5157 : 			}
; 5158 : 			else

  001bb	eb 1b		 jmp	 SHORT $LN54@draw_weapo
$LN53@draw_weapo:

; 5159 : 			{
; 5160 : 				u = 364 + ((buffer[2] - '1') * 10);

  001bd	b8 01 00 00 00	 mov	 eax, 1
  001c2	d1 e0		 shl	 eax, 1
  001c4	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  001c9	83 e9 31	 sub	 ecx, 49			; 00000031H
  001cc	6b d1 0a	 imul	 edx, ecx, 10
  001cf	81 c2 6c 01 00
	00		 add	 edx, 364		; 0000016cH
  001d5	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN54@draw_weapo:

; 5161 : 			}
; 5162 : 
; 5163 : 			draw_sprite (hardpoint_x + 18, hardpoint_y, u, v, 8, 12);

  001d8	6a 0c		 push	 12			; 0000000cH
  001da	6a 08		 push	 8
  001dc	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  001df	50		 push	 eax
  001e0	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  001e3	51		 push	 ecx
  001e4	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  001e7	52		 push	 edx
  001e8	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  001eb	83 c0 12	 add	 eax, 18			; 00000012H
  001ee	50		 push	 eax
  001ef	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5164 : 
; 5165 : 			if (buffer[3] == '0')

  001f4	b8 01 00 00 00	 mov	 eax, 1
  001f9	6b c8 03	 imul	 ecx, eax, 3
  001fc	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  00201	83 fa 30	 cmp	 edx, 48			; 00000030H
  00204	75 09		 jne	 SHORT $LN55@draw_weapo

; 5166 : 			{
; 5167 : 				u = 364 + (9 * 10);

  00206	c7 45 9c c6 01
	00 00		 mov	 DWORD PTR _u$[ebp], 454	; 000001c6H

; 5168 : 			}
; 5169 : 			else

  0020d	eb 1b		 jmp	 SHORT $LN56@draw_weapo
$LN55@draw_weapo:

; 5170 : 			{
; 5171 : 				u = 364 + ((buffer[3] - '1') * 10);

  0020f	b8 01 00 00 00	 mov	 eax, 1
  00214	6b c8 03	 imul	 ecx, eax, 3
  00217	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  0021c	83 ea 31	 sub	 edx, 49			; 00000031H
  0021f	6b c2 0a	 imul	 eax, edx, 10
  00222	05 6c 01 00 00	 add	 eax, 364		; 0000016cH
  00227	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN56@draw_weapo:

; 5172 : 			}
; 5173 : 
; 5174 : 			draw_sprite (hardpoint_x + 27, hardpoint_y, u, v, 8, 12);

  0022a	6a 0c		 push	 12			; 0000000cH
  0022c	6a 08		 push	 8
  0022e	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  00231	50		 push	 eax
  00232	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  00235	51		 push	 ecx
  00236	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  00239	52		 push	 edx
  0023a	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  0023d	83 c0 1b	 add	 eax, 27			; 0000001bH
  00240	50		 push	 eax
  00241	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5175 : 
; 5176 : 			//
; 5177 : 			// damage cross
; 5178 : 			//
; 5179 : 
; 5180 : 			if (damaged)

  00246	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0024a	74 17		 je	 SHORT $LN57@draw_weapo

; 5181 : 			{
; 5182 : 				draw_sprite (116, 203, 334, 61, 32, 32);

  0024c	6a 20		 push	 32			; 00000020H
  0024e	6a 20		 push	 32			; 00000020H
  00250	6a 3d		 push	 61			; 0000003dH
  00252	68 4e 01 00 00	 push	 334			; 0000014eH
  00257	68 cb 00 00 00	 push	 203			; 000000cbH
  0025c	6a 74		 push	 116			; 00000074H
  0025e	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN57@draw_weapo:

; 5183 : 			}
; 5184 : 		}
; 5185 : 		else

  00263	e9 1a 02 00 00	 jmp	 $LN39@draw_weapo
$LN40@draw_weapo:

; 5186 : 		{
; 5187 : 			////////////////////////////////////////
; 5188 : 			//
; 5189 : 			// SMALL
; 5190 : 			//
; 5191 : 			////////////////////////////////////////
; 5192 : 
; 5193 : 			//
; 5194 : 			// chain gun
; 5195 : 			//
; 5196 : 
; 5197 : 			if (number == 0)

  00268	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  0026c	75 2a		 jne	 SHORT $LN58@draw_weapo

; 5198 : 			{
; 5199 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  0026e	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00271	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00274	75 20		 jne	 SHORT $LN60@draw_weapo
  00276	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0027a	75 1a		 jne	 SHORT $LN60@draw_weapo

; 5200 : 				{
; 5201 : 					draw_sprite (61, 360, 133, 327, 14, 13);

  0027c	6a 0d		 push	 13			; 0000000dH
  0027e	6a 0e		 push	 14			; 0000000eH
  00280	68 47 01 00 00	 push	 327			; 00000147H
  00285	68 85 00 00 00	 push	 133			; 00000085H
  0028a	68 68 01 00 00	 push	 360			; 00000168H
  0028f	6a 3d		 push	 61			; 0000003dH
  00291	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN60@draw_weapo:

; 5202 : 				}
; 5203 : 			}
; 5204 : 			else

  00296	eb 44		 jmp	 SHORT $LN59@draw_weapo
$LN58@draw_weapo:

; 5205 : 			{
; 5206 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  00298	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0029b	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  0029e	75 22		 jne	 SHORT $LN61@draw_weapo
  002a0	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  002a4	75 1c		 jne	 SHORT $LN61@draw_weapo

; 5207 : 				{
; 5208 : 					draw_sprite (61, 360, 148, 327, 14, 13);

  002a6	6a 0d		 push	 13			; 0000000dH
  002a8	6a 0e		 push	 14			; 0000000eH
  002aa	68 47 01 00 00	 push	 327			; 00000147H
  002af	68 94 00 00 00	 push	 148			; 00000094H
  002b4	68 68 01 00 00	 push	 360			; 00000168H
  002b9	6a 3d		 push	 61			; 0000003dH
  002bb	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5209 : 				}
; 5210 : 				else

  002c0	eb 1a		 jmp	 SHORT $LN59@draw_weapo
$LN61@draw_weapo:

; 5211 : 				{
; 5212 : 					draw_sprite (61, 360, 163, 327, 13, 13);

  002c2	6a 0d		 push	 13			; 0000000dH
  002c4	6a 0d		 push	 13			; 0000000dH
  002c6	68 47 01 00 00	 push	 327			; 00000147H
  002cb	68 a3 00 00 00	 push	 163			; 000000a3H
  002d0	68 68 01 00 00	 push	 360			; 00000168H
  002d5	6a 3d		 push	 61			; 0000003dH
  002d7	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN59@draw_weapo:

; 5213 : 				}
; 5214 : 			}
; 5215 : 
; 5216 : 			//
; 5217 : 			// digits
; 5218 : 			//
; 5219 : 
; 5220 : 			hardpoint_x = 60;

  002dc	c7 45 a4 3c 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 60 ; 0000003cH

; 5221 : 			hardpoint_y = 377;

  002e3	c7 45 a0 79 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 377 ; 00000179H

; 5222 : 
; 5223 : 			sprintf (buffer, "%04d", number);

  002ea	8b 45 ac	 mov	 eax, DWORD PTR _number$[ebp]
  002ed	50		 push	 eax
  002ee	68 00 00 00 00	 push	 OFFSET ??_C@_04OCCELDNI@?$CF04d@
  002f3	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  002f6	51		 push	 ecx
  002f7	e8 00 00 00 00	 call	 _sprintf
  002fc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5224 : 
; 5225 : 			if ((weapon_sub_type == selected_weapon) && (!damaged))

  002ff	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00302	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00305	75 0f		 jne	 SHORT $LN63@draw_weapo
  00307	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0030b	75 09		 jne	 SHORT $LN63@draw_weapo

; 5226 : 			{
; 5227 : 				v = 276;

  0030d	c7 45 98 14 01
	00 00		 mov	 DWORD PTR _v$[ebp], 276	; 00000114H

; 5228 : 			}
; 5229 : 			else

  00314	eb 07		 jmp	 SHORT $LN64@draw_weapo
$LN63@draw_weapo:

; 5230 : 			{
; 5231 : 				v = 283;

  00316	c7 45 98 1b 01
	00 00		 mov	 DWORD PTR _v$[ebp], 283	; 0000011bH
$LN64@draw_weapo:

; 5232 : 			}
; 5233 : 
; 5234 : 			if (buffer[0] == '0')

  0031d	b8 01 00 00 00	 mov	 eax, 1
  00322	6b c8 00	 imul	 ecx, eax, 0
  00325	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  0032a	83 fa 30	 cmp	 edx, 48			; 00000030H
  0032d	75 09		 jne	 SHORT $LN65@draw_weapo

; 5235 : 			{
; 5236 : 				u = 184 + (9 * 5);

  0032f	c7 45 9c e5 00
	00 00		 mov	 DWORD PTR _u$[ebp], 229	; 000000e5H

; 5237 : 			}
; 5238 : 			else

  00336	eb 1b		 jmp	 SHORT $LN66@draw_weapo
$LN65@draw_weapo:

; 5239 : 			{
; 5240 : 				u = 184 + ((buffer[0] - '1') * 5);

  00338	b8 01 00 00 00	 mov	 eax, 1
  0033d	6b c8 00	 imul	 ecx, eax, 0
  00340	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  00345	83 ea 31	 sub	 edx, 49			; 00000031H
  00348	6b c2 05	 imul	 eax, edx, 5
  0034b	05 b8 00 00 00	 add	 eax, 184		; 000000b8H
  00350	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN66@draw_weapo:

; 5241 : 			}
; 5242 : 
; 5243 : 			draw_sprite (hardpoint_x, hardpoint_y, u, v, 4, 6);

  00353	6a 06		 push	 6
  00355	6a 04		 push	 4
  00357	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  0035a	50		 push	 eax
  0035b	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  0035e	51		 push	 ecx
  0035f	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  00362	52		 push	 edx
  00363	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  00366	50		 push	 eax
  00367	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5244 : 
; 5245 : 			if (buffer[1] == '0')

  0036c	b8 01 00 00 00	 mov	 eax, 1
  00371	c1 e0 00	 shl	 eax, 0
  00374	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  00379	83 f9 30	 cmp	 ecx, 48			; 00000030H
  0037c	75 09		 jne	 SHORT $LN67@draw_weapo

; 5246 : 			{
; 5247 : 				u = 184 + (9 * 5);

  0037e	c7 45 9c e5 00
	00 00		 mov	 DWORD PTR _u$[ebp], 229	; 000000e5H

; 5248 : 			}
; 5249 : 			else

  00385	eb 1c		 jmp	 SHORT $LN68@draw_weapo
$LN67@draw_weapo:

; 5250 : 			{
; 5251 : 				u = 184 + ((buffer[1] - '1') * 5);

  00387	b8 01 00 00 00	 mov	 eax, 1
  0038c	c1 e0 00	 shl	 eax, 0
  0038f	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  00394	83 e9 31	 sub	 ecx, 49			; 00000031H
  00397	6b d1 05	 imul	 edx, ecx, 5
  0039a	81 c2 b8 00 00
	00		 add	 edx, 184		; 000000b8H
  003a0	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN68@draw_weapo:

; 5252 : 			}
; 5253 : 
; 5254 : 			draw_sprite (hardpoint_x + 4, hardpoint_y, u, v, 4, 6);

  003a3	6a 06		 push	 6
  003a5	6a 04		 push	 4
  003a7	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  003aa	50		 push	 eax
  003ab	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  003ae	51		 push	 ecx
  003af	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  003b2	52		 push	 edx
  003b3	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  003b6	83 c0 04	 add	 eax, 4
  003b9	50		 push	 eax
  003ba	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5255 : 
; 5256 : 			if (buffer[2] == '0')

  003bf	b8 01 00 00 00	 mov	 eax, 1
  003c4	d1 e0		 shl	 eax, 1
  003c6	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  003cb	83 f9 30	 cmp	 ecx, 48			; 00000030H
  003ce	75 09		 jne	 SHORT $LN69@draw_weapo

; 5257 : 			{
; 5258 : 				u = 184 + (9 * 5);

  003d0	c7 45 9c e5 00
	00 00		 mov	 DWORD PTR _u$[ebp], 229	; 000000e5H

; 5259 : 			}
; 5260 : 			else

  003d7	eb 1b		 jmp	 SHORT $LN70@draw_weapo
$LN69@draw_weapo:

; 5261 : 			{
; 5262 : 				u = 184 + ((buffer[2] - '1') * 5);

  003d9	b8 01 00 00 00	 mov	 eax, 1
  003de	d1 e0		 shl	 eax, 1
  003e0	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  003e5	83 e9 31	 sub	 ecx, 49			; 00000031H
  003e8	6b d1 05	 imul	 edx, ecx, 5
  003eb	81 c2 b8 00 00
	00		 add	 edx, 184		; 000000b8H
  003f1	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN70@draw_weapo:

; 5263 : 			}
; 5264 : 
; 5265 : 			draw_sprite (hardpoint_x + 8, hardpoint_y, u, v, 4, 6);

  003f4	6a 06		 push	 6
  003f6	6a 04		 push	 4
  003f8	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  003fb	50		 push	 eax
  003fc	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  003ff	51		 push	 ecx
  00400	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  00403	52		 push	 edx
  00404	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  00407	83 c0 08	 add	 eax, 8
  0040a	50		 push	 eax
  0040b	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5266 : 
; 5267 : 			if (buffer[3] == '0')

  00410	b8 01 00 00 00	 mov	 eax, 1
  00415	6b c8 03	 imul	 ecx, eax, 3
  00418	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  0041d	83 fa 30	 cmp	 edx, 48			; 00000030H
  00420	75 09		 jne	 SHORT $LN71@draw_weapo

; 5268 : 			{
; 5269 : 				u = 184 + (9 * 5);

  00422	c7 45 9c e5 00
	00 00		 mov	 DWORD PTR _u$[ebp], 229	; 000000e5H

; 5270 : 			}
; 5271 : 			else

  00429	eb 1b		 jmp	 SHORT $LN72@draw_weapo
$LN71@draw_weapo:

; 5272 : 			{
; 5273 : 				u = 184 + ((buffer[3] - '1') * 5);

  0042b	b8 01 00 00 00	 mov	 eax, 1
  00430	6b c8 03	 imul	 ecx, eax, 3
  00433	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  00438	83 ea 31	 sub	 edx, 49			; 00000031H
  0043b	6b c2 05	 imul	 eax, edx, 5
  0043e	05 b8 00 00 00	 add	 eax, 184		; 000000b8H
  00443	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN72@draw_weapo:

; 5274 : 			}
; 5275 : 
; 5276 : 			draw_sprite (hardpoint_x + 12, hardpoint_y, u, v, 4, 6);

  00446	6a 06		 push	 6
  00448	6a 04		 push	 4
  0044a	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  0044d	50		 push	 eax
  0044e	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  00451	51		 push	 ecx
  00452	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  00455	52		 push	 edx
  00456	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  00459	83 c0 0c	 add	 eax, 12			; 0000000cH
  0045c	50		 push	 eax
  0045d	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5277 : 
; 5278 : 			//
; 5279 : 			// damage cross
; 5280 : 			//
; 5281 : 
; 5282 : 			if (damaged)

  00462	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00466	74 1a		 je	 SHORT $LN39@draw_weapo

; 5283 : 			{
; 5284 : 				draw_sprite (60, 361, 169, 290, 16, 16);

  00468	6a 10		 push	 16			; 00000010H
  0046a	6a 10		 push	 16			; 00000010H
  0046c	68 22 01 00 00	 push	 290			; 00000122H
  00471	68 a9 00 00 00	 push	 169			; 000000a9H
  00476	68 69 01 00 00	 push	 361			; 00000169H
  0047b	6a 3c		 push	 60			; 0000003cH
  0047d	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN39@draw_weapo:

; 5285 : 			}
; 5286 : 		}
; 5287 : 	}
; 5288 : 
; 5289 : 	////////////////////////////////////////////////////////////////////////////////
; 5290 : 	//
; 5291 : 	// Hydras
; 5292 : 	//
; 5293 : 	////////////////////////////////////////////////////////////////////////////////
; 5294 : 
; 5295 : 	if ((weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_HYDRA70_M255) || (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_HYDRA70_M261))

  00482	83 7d 94 1e	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 30 ; 0000001eH
  00486	74 0a		 je	 SHORT $LN75@draw_weapo
  00488	83 7d 94 1f	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 31 ; 0000001fH
  0048c	0f 85 ba 06 00
	00		 jne	 $LN74@draw_weapo
$LN75@draw_weapo:

; 5296 : 	{
; 5297 : 		if (draw_large_mfd)

  00492	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00499	0f 84 4a 03 00
	00		 je	 $LN76@draw_weapo

; 5298 : 		{
; 5299 : 			////////////////////////////////////////
; 5300 : 			//
; 5301 : 			// LARGE
; 5302 : 			//
; 5303 : 			////////////////////////////////////////
; 5304 : 
; 5305 : 			//
; 5306 : 			// rocket pod
; 5307 : 			//
; 5308 : 
; 5309 : 			switch (heading_depth)

  0049f	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  004a2	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv313[ebp], eax
  004a8	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv313[ebp], 3
  004af	77 4b		 ja	 SHORT $LN2@draw_weapo
  004b1	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv313[ebp]
  004b7	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN382@draw_weapo[ecx*4]
$LN78@draw_weapo:

; 5310 : 			{
; 5311 : 				case APACHE_LHS_INNER_PYLON:
; 5312 : 				{
; 5313 : 					hardpoint_x = 50;

  004be	c7 45 a4 32 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 50 ; 00000032H

; 5314 : 					hardpoint_y = 177;

  004c5	c7 45 a0 b1 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 177 ; 000000b1H

; 5315 : 
; 5316 : 					break;

  004cc	eb 2e		 jmp	 SHORT $LN2@draw_weapo
$LN79@draw_weapo:

; 5317 : 				}
; 5318 : 				case APACHE_RHS_INNER_PYLON:
; 5319 : 				{
; 5320 : 					hardpoint_x = 188;

  004ce	c7 45 a4 bc 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 188 ; 000000bcH

; 5321 : 					hardpoint_y = 177;

  004d5	c7 45 a0 b1 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 177 ; 000000b1H

; 5322 : 
; 5323 : 					break;

  004dc	eb 1e		 jmp	 SHORT $LN2@draw_weapo
$LN80@draw_weapo:

; 5324 : 				}
; 5325 : 				case APACHE_LHS_OUTER_PYLON:
; 5326 : 				{
; 5327 : 					hardpoint_x = 18;

  004de	c7 45 a4 12 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 18 ; 00000012H

; 5328 : 					hardpoint_y = 177;

  004e5	c7 45 a0 b1 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 177 ; 000000b1H

; 5329 : 
; 5330 : 					break;

  004ec	eb 0e		 jmp	 SHORT $LN2@draw_weapo
$LN81@draw_weapo:

; 5331 : 				}
; 5332 : 				case APACHE_RHS_OUTER_PYLON:
; 5333 : 				{
; 5334 : 					hardpoint_x = 220;

  004ee	c7 45 a4 dc 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 220 ; 000000dcH

; 5335 : 					hardpoint_y = 177;

  004f5	c7 45 a0 b1 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 177 ; 000000b1H
$LN2@draw_weapo:

; 5336 : 
; 5337 : 					break;
; 5338 : 				}
; 5339 : 			}
; 5340 : 
; 5341 : 			if (number == 0)

  004fc	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  00500	75 45		 jne	 SHORT $LN82@draw_weapo

; 5342 : 			{
; 5343 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  00502	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00505	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00508	75 20		 jne	 SHORT $LN84@draw_weapo
  0050a	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0050e	75 1a		 jne	 SHORT $LN84@draw_weapo

; 5344 : 				{
; 5345 : 					draw_sprite (hardpoint_x, hardpoint_y, 262, 99, 26, 33);

  00510	6a 21		 push	 33			; 00000021H
  00512	6a 1a		 push	 26			; 0000001aH
  00514	6a 63		 push	 99			; 00000063H
  00516	68 06 01 00 00	 push	 262			; 00000106H
  0051b	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0051e	50		 push	 eax
  0051f	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00522	51		 push	 ecx
  00523	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5346 : 				}
; 5347 : 				else

  00528	eb 18		 jmp	 SHORT $LN85@draw_weapo
$LN84@draw_weapo:

; 5348 : 				{
; 5349 : 					draw_sprite (hardpoint_x, hardpoint_y, 319, 99, 26, 33);

  0052a	6a 21		 push	 33			; 00000021H
  0052c	6a 1a		 push	 26			; 0000001aH
  0052e	6a 63		 push	 99			; 00000063H
  00530	68 3f 01 00 00	 push	 319			; 0000013fH
  00535	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00538	50		 push	 eax
  00539	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0053c	51		 push	 ecx
  0053d	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN85@draw_weapo:

; 5350 : 				}
; 5351 : 			}
; 5352 : 			else

  00542	e9 27 01 00 00	 jmp	 $LN83@draw_weapo
$LN82@draw_weapo:

; 5353 : 			{
; 5354 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  00547	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0054a	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  0054d	75 20		 jne	 SHORT $LN86@draw_weapo
  0054f	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00553	75 1a		 jne	 SHORT $LN86@draw_weapo

; 5355 : 				{
; 5356 : 					draw_sprite (hardpoint_x, hardpoint_y, 291, 99, 26, 33);

  00555	6a 21		 push	 33			; 00000021H
  00557	6a 1a		 push	 26			; 0000001aH
  00559	6a 63		 push	 99			; 00000063H
  0055b	68 23 01 00 00	 push	 291			; 00000123H
  00560	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00563	50		 push	 eax
  00564	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00567	51		 push	 ecx
  00568	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5357 : 				}
; 5358 : 				else

  0056d	eb 18		 jmp	 SHORT $LN87@draw_weapo
$LN86@draw_weapo:

; 5359 : 				{
; 5360 : 					draw_sprite (hardpoint_x, hardpoint_y, 347, 99, 26, 33);

  0056f	6a 21		 push	 33			; 00000021H
  00571	6a 1a		 push	 26			; 0000001aH
  00573	6a 63		 push	 99			; 00000063H
  00575	68 5b 01 00 00	 push	 347			; 0000015bH
  0057a	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0057d	50		 push	 eax
  0057e	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00581	51		 push	 ecx
  00582	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN87@draw_weapo:

; 5361 : 				}
; 5362 : 
; 5363 : 				//
; 5364 : 				// digits
; 5365 : 				//
; 5366 : 
; 5367 : 				hardpoint_x += 4;

  00587	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  0058a	83 c0 04	 add	 eax, 4
  0058d	89 45 a4	 mov	 DWORD PTR _hardpoint_x$[ebp], eax

; 5368 : 				hardpoint_y += 14;

  00590	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00593	83 c0 0e	 add	 eax, 14			; 0000000eH
  00596	89 45 a0	 mov	 DWORD PTR _hardpoint_y$[ebp], eax

; 5369 : 
; 5370 : 				sprintf (buffer, "%02d", number);

  00599	8b 45 ac	 mov	 eax, DWORD PTR _number$[ebp]
  0059c	50		 push	 eax
  0059d	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  005a2	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  005a5	51		 push	 ecx
  005a6	e8 00 00 00 00	 call	 _sprintf
  005ab	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5371 : 
; 5372 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  005ae	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  005b1	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  005b4	75 0f		 jne	 SHORT $LN88@draw_weapo
  005b6	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  005ba	75 09		 jne	 SHORT $LN88@draw_weapo

; 5373 : 				{
; 5374 : 					v = 32;

  005bc	c7 45 98 20 00
	00 00		 mov	 DWORD PTR _v$[ebp], 32	; 00000020H

; 5375 : 				}
; 5376 : 				else

  005c3	eb 07		 jmp	 SHORT $LN89@draw_weapo
$LN88@draw_weapo:

; 5377 : 				{
; 5378 : 					v = 47;

  005c5	c7 45 98 2f 00
	00 00		 mov	 DWORD PTR _v$[ebp], 47	; 0000002fH
$LN89@draw_weapo:

; 5379 : 				}
; 5380 : 
; 5381 : 				if (buffer[0] == '0')

  005cc	b8 01 00 00 00	 mov	 eax, 1
  005d1	6b c8 00	 imul	 ecx, eax, 0
  005d4	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  005d9	83 fa 30	 cmp	 edx, 48			; 00000030H
  005dc	75 09		 jne	 SHORT $LN90@draw_weapo

; 5382 : 				{
; 5383 : 					u = 263 + (9 * 10);

  005de	c7 45 9c 61 01
	00 00		 mov	 DWORD PTR _u$[ebp], 353	; 00000161H

; 5384 : 				}
; 5385 : 				else

  005e5	eb 1b		 jmp	 SHORT $LN91@draw_weapo
$LN90@draw_weapo:

; 5386 : 				{
; 5387 : 					u = 263 + ((buffer[0] - '1') * 10);

  005e7	b8 01 00 00 00	 mov	 eax, 1
  005ec	6b c8 00	 imul	 ecx, eax, 0
  005ef	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  005f4	83 ea 31	 sub	 edx, 49			; 00000031H
  005f7	6b c2 0a	 imul	 eax, edx, 10
  005fa	05 07 01 00 00	 add	 eax, 263		; 00000107H
  005ff	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN91@draw_weapo:

; 5388 : 				}
; 5389 : 
; 5390 : 				draw_sprite (hardpoint_x, hardpoint_y, u, v, 8, 12);

  00602	6a 0c		 push	 12			; 0000000cH
  00604	6a 08		 push	 8
  00606	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  00609	50		 push	 eax
  0060a	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  0060d	51		 push	 ecx
  0060e	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  00611	52		 push	 edx
  00612	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  00615	50		 push	 eax
  00616	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5391 : 
; 5392 : 				if (buffer[1] == '0')

  0061b	b8 01 00 00 00	 mov	 eax, 1
  00620	c1 e0 00	 shl	 eax, 0
  00623	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  00628	83 f9 30	 cmp	 ecx, 48			; 00000030H
  0062b	75 09		 jne	 SHORT $LN92@draw_weapo

; 5393 : 				{
; 5394 : 					u = 263 + (9 * 10);

  0062d	c7 45 9c 61 01
	00 00		 mov	 DWORD PTR _u$[ebp], 353	; 00000161H

; 5395 : 				}
; 5396 : 				else

  00634	eb 1c		 jmp	 SHORT $LN93@draw_weapo
$LN92@draw_weapo:

; 5397 : 				{
; 5398 : 					u = 263 + ((buffer[1] - '1') * 10);

  00636	b8 01 00 00 00	 mov	 eax, 1
  0063b	c1 e0 00	 shl	 eax, 0
  0063e	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  00643	83 e9 31	 sub	 ecx, 49			; 00000031H
  00646	6b d1 0a	 imul	 edx, ecx, 10
  00649	81 c2 07 01 00
	00		 add	 edx, 263		; 00000107H
  0064f	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN93@draw_weapo:

; 5399 : 				}
; 5400 : 
; 5401 : 				draw_sprite (hardpoint_x + 8, hardpoint_y, u, v, 8, 12);

  00652	6a 0c		 push	 12			; 0000000cH
  00654	6a 08		 push	 8
  00656	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  00659	50		 push	 eax
  0065a	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  0065d	51		 push	 ecx
  0065e	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  00661	52		 push	 edx
  00662	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  00665	83 c0 08	 add	 eax, 8
  00668	50		 push	 eax
  00669	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN83@draw_weapo:

; 5402 : 			}
; 5403 : 
; 5404 : 			//
; 5405 : 			// damage cross
; 5406 : 			//
; 5407 : 
; 5408 : 			if (damaged)

  0066e	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00672	0f 84 87 00 00
	00		 je	 $LN94@draw_weapo

; 5409 : 			{
; 5410 : 				switch (heading_depth)

  00678	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  0067b	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv385[ebp], eax
  00681	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv385[ebp], 3
  00688	77 75		 ja	 SHORT $LN94@draw_weapo
  0068a	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv385[ebp]
  00690	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN383@draw_weapo[ecx*4]
$LN95@draw_weapo:

; 5411 : 				{
; 5412 : 					case APACHE_LHS_INNER_PYLON:
; 5413 : 					{
; 5414 : 						draw_sprite (47, 181, 334, 61, 32, 32);

  00697	6a 20		 push	 32			; 00000020H
  00699	6a 20		 push	 32			; 00000020H
  0069b	6a 3d		 push	 61			; 0000003dH
  0069d	68 4e 01 00 00	 push	 334			; 0000014eH
  006a2	68 b5 00 00 00	 push	 181			; 000000b5H
  006a7	6a 2f		 push	 47			; 0000002fH
  006a9	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5415 : 
; 5416 : 						break;

  006ae	eb 4f		 jmp	 SHORT $LN94@draw_weapo
$LN96@draw_weapo:

; 5417 : 					}
; 5418 : 					case APACHE_RHS_INNER_PYLON:
; 5419 : 					{
; 5420 : 						draw_sprite (185, 181, 334, 61, 32, 32);

  006b0	6a 20		 push	 32			; 00000020H
  006b2	6a 20		 push	 32			; 00000020H
  006b4	6a 3d		 push	 61			; 0000003dH
  006b6	68 4e 01 00 00	 push	 334			; 0000014eH
  006bb	68 b5 00 00 00	 push	 181			; 000000b5H
  006c0	68 b9 00 00 00	 push	 185			; 000000b9H
  006c5	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5421 : 
; 5422 : 						break;

  006ca	eb 33		 jmp	 SHORT $LN94@draw_weapo
$LN97@draw_weapo:

; 5423 : 					}
; 5424 : 					case APACHE_LHS_OUTER_PYLON:
; 5425 : 					{
; 5426 : 						draw_sprite (15, 181, 334, 61, 32, 32);

  006cc	6a 20		 push	 32			; 00000020H
  006ce	6a 20		 push	 32			; 00000020H
  006d0	6a 3d		 push	 61			; 0000003dH
  006d2	68 4e 01 00 00	 push	 334			; 0000014eH
  006d7	68 b5 00 00 00	 push	 181			; 000000b5H
  006dc	6a 0f		 push	 15			; 0000000fH
  006de	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5427 : 
; 5428 : 						break;

  006e3	eb 1a		 jmp	 SHORT $LN94@draw_weapo
$LN98@draw_weapo:

; 5429 : 					}
; 5430 : 					case APACHE_RHS_OUTER_PYLON:
; 5431 : 					{
; 5432 : 						draw_sprite (217, 181, 334, 61, 32, 32);

  006e5	6a 20		 push	 32			; 00000020H
  006e7	6a 20		 push	 32			; 00000020H
  006e9	6a 3d		 push	 61			; 0000003dH
  006eb	68 4e 01 00 00	 push	 334			; 0000014eH
  006f0	68 b5 00 00 00	 push	 181			; 000000b5H
  006f5	68 d9 00 00 00	 push	 217			; 000000d9H
  006fa	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN94@draw_weapo:

; 5433 : 
; 5434 : 						break;
; 5435 : 					}
; 5436 : 				}
; 5437 : 			}
; 5438 : 
; 5439 : 			//
; 5440 : 			// type
; 5441 : 			//
; 5442 : 
; 5443 : 			switch (heading_depth)

  006ff	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  00702	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv411[ebp], eax
  00708	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv411[ebp], 3
  0070f	77 4b		 ja	 SHORT $LN6@draw_weapo
  00711	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv411[ebp]
  00717	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN384@draw_weapo[ecx*4]
$LN99@draw_weapo:

; 5444 : 			{
; 5445 : 				case APACHE_LHS_INNER_PYLON:
; 5446 : 				{
; 5447 : 					hardpoint_x = 47;

  0071e	c7 45 a4 2f 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 47 ; 0000002fH

; 5448 : 					hardpoint_y = 234;

  00725	c7 45 a0 ea 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 234 ; 000000eaH

; 5449 : 
; 5450 : 					break;

  0072c	eb 2e		 jmp	 SHORT $LN6@draw_weapo
$LN100@draw_weapo:

; 5451 : 				}
; 5452 : 				case APACHE_RHS_INNER_PYLON:
; 5453 : 				{
; 5454 : 					hardpoint_x = 185;

  0072e	c7 45 a4 b9 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 185 ; 000000b9H

; 5455 : 					hardpoint_y = 234;

  00735	c7 45 a0 ea 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 234 ; 000000eaH

; 5456 : 
; 5457 : 					break;

  0073c	eb 1e		 jmp	 SHORT $LN6@draw_weapo
$LN101@draw_weapo:

; 5458 : 				}
; 5459 : 				case APACHE_LHS_OUTER_PYLON:
; 5460 : 				{
; 5461 : 					hardpoint_x = 15;

  0073e	c7 45 a4 0f 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 15 ; 0000000fH

; 5462 : 					hardpoint_y = 234;

  00745	c7 45 a0 ea 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 234 ; 000000eaH

; 5463 : 
; 5464 : 					break;

  0074c	eb 0e		 jmp	 SHORT $LN6@draw_weapo
$LN102@draw_weapo:

; 5465 : 				}
; 5466 : 				case APACHE_RHS_OUTER_PYLON:
; 5467 : 				{
; 5468 : 					hardpoint_x = 217;

  0074e	c7 45 a4 d9 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 217 ; 000000d9H

; 5469 : 					hardpoint_y = 234;

  00755	c7 45 a0 ea 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 234 ; 000000eaH
$LN6@draw_weapo:

; 5470 : 
; 5471 : 					break;
; 5472 : 				}
; 5473 : 			}
; 5474 : 
; 5475 : 			if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_HYDRA70_M255)

  0075c	83 7d 94 1e	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 30 ; 0000001eH
  00760	75 42		 jne	 SHORT $LN103@draw_weapo

; 5476 : 			{
; 5477 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  00762	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00765	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00768	75 20		 jne	 SHORT $LN105@draw_weapo
  0076a	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0076e	75 1a		 jne	 SHORT $LN105@draw_weapo

; 5478 : 				{
; 5479 : 					draw_sprite (hardpoint_x, hardpoint_y, 262, 17, 31, 12);

  00770	6a 0c		 push	 12			; 0000000cH
  00772	6a 1f		 push	 31			; 0000001fH
  00774	6a 11		 push	 17			; 00000011H
  00776	68 06 01 00 00	 push	 262			; 00000106H
  0077b	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0077e	50		 push	 eax
  0077f	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00782	51		 push	 ecx
  00783	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5480 : 				}
; 5481 : 				else

  00788	eb 18		 jmp	 SHORT $LN106@draw_weapo
$LN105@draw_weapo:

; 5482 : 				{
; 5483 : 					draw_sprite (hardpoint_x, hardpoint_y, 342, 17, 31, 12);

  0078a	6a 0c		 push	 12			; 0000000cH
  0078c	6a 1f		 push	 31			; 0000001fH
  0078e	6a 11		 push	 17			; 00000011H
  00790	68 56 01 00 00	 push	 342			; 00000156H
  00795	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00798	50		 push	 eax
  00799	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0079c	51		 push	 ecx
  0079d	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN106@draw_weapo:

; 5484 : 				}
; 5485 : 			}
; 5486 : 			else

  007a2	eb 40		 jmp	 SHORT $LN104@draw_weapo
$LN103@draw_weapo:

; 5487 : 			{
; 5488 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  007a4	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  007a7	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  007aa	75 20		 jne	 SHORT $LN107@draw_weapo
  007ac	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  007b0	75 1a		 jne	 SHORT $LN107@draw_weapo

; 5489 : 				{
; 5490 : 					draw_sprite (hardpoint_x, hardpoint_y, 295, 17, 31, 12);

  007b2	6a 0c		 push	 12			; 0000000cH
  007b4	6a 1f		 push	 31			; 0000001fH
  007b6	6a 11		 push	 17			; 00000011H
  007b8	68 27 01 00 00	 push	 295			; 00000127H
  007bd	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  007c0	50		 push	 eax
  007c1	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  007c4	51		 push	 ecx
  007c5	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5491 : 				}
; 5492 : 				else

  007ca	eb 18		 jmp	 SHORT $LN104@draw_weapo
$LN107@draw_weapo:

; 5493 : 				{
; 5494 : 					draw_sprite (hardpoint_x, hardpoint_y, 375, 17, 31, 12);

  007cc	6a 0c		 push	 12			; 0000000cH
  007ce	6a 1f		 push	 31			; 0000001fH
  007d0	6a 11		 push	 17			; 00000011H
  007d2	68 77 01 00 00	 push	 375			; 00000177H
  007d7	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  007da	50		 push	 eax
  007db	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  007de	51		 push	 ecx
  007df	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN104@draw_weapo:

; 5495 : 				}
; 5496 : 			}
; 5497 : 		}
; 5498 : 		else

  007e4	e9 63 03 00 00	 jmp	 $LN74@draw_weapo
$LN76@draw_weapo:

; 5499 : 		{
; 5500 : 			////////////////////////////////////////
; 5501 : 			//
; 5502 : 			// SMALL
; 5503 : 			//
; 5504 : 			////////////////////////////////////////
; 5505 : 
; 5506 : 			//
; 5507 : 			// rocket pod
; 5508 : 			//
; 5509 : 
; 5510 : 			switch (heading_depth)

  007e9	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  007ec	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv442[ebp], eax
  007f2	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv442[ebp], 3
  007f9	77 4b		 ja	 SHORT $LN8@draw_weapo
  007fb	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv442[ebp]
  00801	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN385@draw_weapo[ecx*4]
$LN109@draw_weapo:

; 5511 : 			{
; 5512 : 				case APACHE_LHS_INNER_PYLON:
; 5513 : 				{
; 5514 : 					hardpoint_x = 27;

  00808	c7 45 a4 1b 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 27 ; 0000001bH

; 5515 : 					hardpoint_y = 348;

  0080f	c7 45 a0 5c 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 348 ; 0000015cH

; 5516 : 
; 5517 : 					break;

  00816	eb 2e		 jmp	 SHORT $LN8@draw_weapo
$LN110@draw_weapo:

; 5518 : 				}
; 5519 : 				case APACHE_RHS_INNER_PYLON:
; 5520 : 				{
; 5521 : 					hardpoint_x = 96;

  00818	c7 45 a4 60 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 96 ; 00000060H

; 5522 : 					hardpoint_y = 348;

  0081f	c7 45 a0 5c 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 348 ; 0000015cH

; 5523 : 
; 5524 : 					break;

  00826	eb 1e		 jmp	 SHORT $LN8@draw_weapo
$LN111@draw_weapo:

; 5525 : 				}
; 5526 : 				case APACHE_LHS_OUTER_PYLON:
; 5527 : 				{
; 5528 : 					hardpoint_x = 11;

  00828	c7 45 a4 0b 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 11 ; 0000000bH

; 5529 : 					hardpoint_y = 348;

  0082f	c7 45 a0 5c 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 348 ; 0000015cH

; 5530 : 
; 5531 : 					break;

  00836	eb 0e		 jmp	 SHORT $LN8@draw_weapo
$LN112@draw_weapo:

; 5532 : 				}
; 5533 : 				case APACHE_RHS_OUTER_PYLON:
; 5534 : 				{
; 5535 : 					hardpoint_x = 112;

  00838	c7 45 a4 70 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 112 ; 00000070H

; 5536 : 					hardpoint_y = 348;

  0083f	c7 45 a0 5c 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 348 ; 0000015cH
$LN8@draw_weapo:

; 5537 : 
; 5538 : 					break;
; 5539 : 				}
; 5540 : 			}
; 5541 : 
; 5542 : 			if (number == 0)

  00846	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  0084a	75 4b		 jne	 SHORT $LN113@draw_weapo

; 5543 : 			{
; 5544 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  0084c	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0084f	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00852	75 23		 jne	 SHORT $LN115@draw_weapo
  00854	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00858	75 1d		 jne	 SHORT $LN115@draw_weapo

; 5545 : 				{
; 5546 : 					draw_sprite (hardpoint_x, hardpoint_y, 133, 309, 13, 17);

  0085a	6a 11		 push	 17			; 00000011H
  0085c	6a 0d		 push	 13			; 0000000dH
  0085e	68 35 01 00 00	 push	 309			; 00000135H
  00863	68 85 00 00 00	 push	 133			; 00000085H
  00868	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0086b	50		 push	 eax
  0086c	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0086f	51		 push	 ecx
  00870	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5547 : 				}
; 5548 : 				else

  00875	eb 1b		 jmp	 SHORT $LN116@draw_weapo
$LN115@draw_weapo:

; 5549 : 				{
; 5550 : 					draw_sprite (hardpoint_x, hardpoint_y, 161, 309, 13, 17);

  00877	6a 11		 push	 17			; 00000011H
  00879	6a 0d		 push	 13			; 0000000dH
  0087b	68 35 01 00 00	 push	 309			; 00000135H
  00880	68 a1 00 00 00	 push	 161			; 000000a1H
  00885	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00888	50		 push	 eax
  00889	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0088c	51		 push	 ecx
  0088d	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN116@draw_weapo:

; 5551 : 				}
; 5552 : 			}
; 5553 : 			else

  00892	e9 2d 01 00 00	 jmp	 $LN114@draw_weapo
$LN113@draw_weapo:

; 5554 : 			{
; 5555 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  00897	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0089a	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  0089d	75 23		 jne	 SHORT $LN117@draw_weapo
  0089f	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  008a3	75 1d		 jne	 SHORT $LN117@draw_weapo

; 5556 : 				{
; 5557 : 					draw_sprite (hardpoint_x, hardpoint_y, 147, 309, 13, 17);

  008a5	6a 11		 push	 17			; 00000011H
  008a7	6a 0d		 push	 13			; 0000000dH
  008a9	68 35 01 00 00	 push	 309			; 00000135H
  008ae	68 93 00 00 00	 push	 147			; 00000093H
  008b3	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  008b6	50		 push	 eax
  008b7	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  008ba	51		 push	 ecx
  008bb	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5558 : 				}
; 5559 : 				else

  008c0	eb 1b		 jmp	 SHORT $LN118@draw_weapo
$LN117@draw_weapo:

; 5560 : 				{
; 5561 : 					draw_sprite (hardpoint_x, hardpoint_y, 175, 309, 13, 17);

  008c2	6a 11		 push	 17			; 00000011H
  008c4	6a 0d		 push	 13			; 0000000dH
  008c6	68 35 01 00 00	 push	 309			; 00000135H
  008cb	68 af 00 00 00	 push	 175			; 000000afH
  008d0	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  008d3	50		 push	 eax
  008d4	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  008d7	51		 push	 ecx
  008d8	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN118@draw_weapo:

; 5562 : 				}
; 5563 : 
; 5564 : 				//
; 5565 : 				// digits
; 5566 : 				//
; 5567 : 
; 5568 : 				hardpoint_x += 2;

  008dd	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  008e0	83 c0 02	 add	 eax, 2
  008e3	89 45 a4	 mov	 DWORD PTR _hardpoint_x$[ebp], eax

; 5569 : 				hardpoint_y += 7;

  008e6	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  008e9	83 c0 07	 add	 eax, 7
  008ec	89 45 a0	 mov	 DWORD PTR _hardpoint_y$[ebp], eax

; 5570 : 
; 5571 : 				sprintf (buffer, "%02d", number);

  008ef	8b 45 ac	 mov	 eax, DWORD PTR _number$[ebp]
  008f2	50		 push	 eax
  008f3	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  008f8	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  008fb	51		 push	 ecx
  008fc	e8 00 00 00 00	 call	 _sprintf
  00901	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5572 : 
; 5573 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  00904	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00907	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  0090a	75 0f		 jne	 SHORT $LN119@draw_weapo
  0090c	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00910	75 09		 jne	 SHORT $LN119@draw_weapo

; 5574 : 				{
; 5575 : 					v = 276;

  00912	c7 45 98 14 01
	00 00		 mov	 DWORD PTR _v$[ebp], 276	; 00000114H

; 5576 : 				}
; 5577 : 				else

  00919	eb 07		 jmp	 SHORT $LN120@draw_weapo
$LN119@draw_weapo:

; 5578 : 				{
; 5579 : 					v = 283;

  0091b	c7 45 98 1b 01
	00 00		 mov	 DWORD PTR _v$[ebp], 283	; 0000011bH
$LN120@draw_weapo:

; 5580 : 				}
; 5581 : 
; 5582 : 				if (buffer[0] == '0')

  00922	b8 01 00 00 00	 mov	 eax, 1
  00927	6b c8 00	 imul	 ecx, eax, 0
  0092a	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  0092f	83 fa 30	 cmp	 edx, 48			; 00000030H
  00932	75 09		 jne	 SHORT $LN121@draw_weapo

; 5583 : 				{
; 5584 : 					u = 133 + (9 * 5);

  00934	c7 45 9c b2 00
	00 00		 mov	 DWORD PTR _u$[ebp], 178	; 000000b2H

; 5585 : 				}
; 5586 : 				else

  0093b	eb 1b		 jmp	 SHORT $LN122@draw_weapo
$LN121@draw_weapo:

; 5587 : 				{
; 5588 : 					u = 133 + ((buffer[0] - '1') * 5);

  0093d	b8 01 00 00 00	 mov	 eax, 1
  00942	6b c8 00	 imul	 ecx, eax, 0
  00945	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  0094a	83 ea 31	 sub	 edx, 49			; 00000031H
  0094d	6b c2 05	 imul	 eax, edx, 5
  00950	05 85 00 00 00	 add	 eax, 133		; 00000085H
  00955	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN122@draw_weapo:

; 5589 : 				}
; 5590 : 
; 5591 : 				draw_sprite (hardpoint_x, hardpoint_y, u, v, 4, 6);

  00958	6a 06		 push	 6
  0095a	6a 04		 push	 4
  0095c	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  0095f	50		 push	 eax
  00960	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  00963	51		 push	 ecx
  00964	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  00967	52		 push	 edx
  00968	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  0096b	50		 push	 eax
  0096c	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5592 : 
; 5593 : 				if (buffer[1] == '0')

  00971	b8 01 00 00 00	 mov	 eax, 1
  00976	c1 e0 00	 shl	 eax, 0
  00979	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  0097e	83 f9 30	 cmp	 ecx, 48			; 00000030H
  00981	75 09		 jne	 SHORT $LN123@draw_weapo

; 5594 : 				{
; 5595 : 					u = 133 + (9 * 5);

  00983	c7 45 9c b2 00
	00 00		 mov	 DWORD PTR _u$[ebp], 178	; 000000b2H

; 5596 : 				}
; 5597 : 				else

  0098a	eb 1c		 jmp	 SHORT $LN124@draw_weapo
$LN123@draw_weapo:

; 5598 : 				{
; 5599 : 					u = 133 + ((buffer[1] - '1') * 5);

  0098c	b8 01 00 00 00	 mov	 eax, 1
  00991	c1 e0 00	 shl	 eax, 0
  00994	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  00999	83 e9 31	 sub	 ecx, 49			; 00000031H
  0099c	6b d1 05	 imul	 edx, ecx, 5
  0099f	81 c2 85 00 00
	00		 add	 edx, 133		; 00000085H
  009a5	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN124@draw_weapo:

; 5600 : 				}
; 5601 : 
; 5602 : 				draw_sprite (hardpoint_x + 4, hardpoint_y, u, v, 4, 6);

  009a8	6a 06		 push	 6
  009aa	6a 04		 push	 4
  009ac	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  009af	50		 push	 eax
  009b0	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  009b3	51		 push	 ecx
  009b4	8b 55 a0	 mov	 edx, DWORD PTR _hardpoint_y$[ebp]
  009b7	52		 push	 edx
  009b8	8b 45 a4	 mov	 eax, DWORD PTR _hardpoint_x$[ebp]
  009bb	83 c0 04	 add	 eax, 4
  009be	50		 push	 eax
  009bf	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN114@draw_weapo:

; 5603 : 			}
; 5604 : 
; 5605 : 			//
; 5606 : 			// damage cross
; 5607 : 			//
; 5608 : 
; 5609 : 			if (damaged)

  009c4	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  009c8	0f 84 8d 00 00
	00		 je	 $LN125@draw_weapo

; 5610 : 			{
; 5611 : 				switch (heading_depth)

  009ce	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  009d1	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv514[ebp], eax
  009d7	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv514[ebp], 3
  009de	77 7b		 ja	 SHORT $LN125@draw_weapo
  009e0	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv514[ebp]
  009e6	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN386@draw_weapo[ecx*4]
$LN126@draw_weapo:

; 5612 : 				{
; 5613 : 					case APACHE_LHS_INNER_PYLON:
; 5614 : 					{
; 5615 : 						draw_sprite (26, 350, 169, 290, 16, 16);

  009ed	6a 10		 push	 16			; 00000010H
  009ef	6a 10		 push	 16			; 00000010H
  009f1	68 22 01 00 00	 push	 290			; 00000122H
  009f6	68 a9 00 00 00	 push	 169			; 000000a9H
  009fb	68 5e 01 00 00	 push	 350			; 0000015eH
  00a00	6a 1a		 push	 26			; 0000001aH
  00a02	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5616 : 
; 5617 : 						break;

  00a07	eb 52		 jmp	 SHORT $LN125@draw_weapo
$LN127@draw_weapo:

; 5618 : 					}
; 5619 : 					case APACHE_RHS_INNER_PYLON:
; 5620 : 					{
; 5621 : 						draw_sprite (95, 350, 169, 290, 16, 16);

  00a09	6a 10		 push	 16			; 00000010H
  00a0b	6a 10		 push	 16			; 00000010H
  00a0d	68 22 01 00 00	 push	 290			; 00000122H
  00a12	68 a9 00 00 00	 push	 169			; 000000a9H
  00a17	68 5e 01 00 00	 push	 350			; 0000015eH
  00a1c	6a 5f		 push	 95			; 0000005fH
  00a1e	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5622 : 
; 5623 : 						break;

  00a23	eb 36		 jmp	 SHORT $LN125@draw_weapo
$LN128@draw_weapo:

; 5624 : 					}
; 5625 : 					case APACHE_LHS_OUTER_PYLON:
; 5626 : 					{
; 5627 : 						draw_sprite (10, 350, 169, 290, 16, 16);

  00a25	6a 10		 push	 16			; 00000010H
  00a27	6a 10		 push	 16			; 00000010H
  00a29	68 22 01 00 00	 push	 290			; 00000122H
  00a2e	68 a9 00 00 00	 push	 169			; 000000a9H
  00a33	68 5e 01 00 00	 push	 350			; 0000015eH
  00a38	6a 0a		 push	 10			; 0000000aH
  00a3a	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5628 : 
; 5629 : 						break;

  00a3f	eb 1a		 jmp	 SHORT $LN125@draw_weapo
$LN129@draw_weapo:

; 5630 : 					}
; 5631 : 					case APACHE_RHS_OUTER_PYLON:
; 5632 : 					{
; 5633 : 						draw_sprite (111, 350, 169, 290, 16, 16);

  00a41	6a 10		 push	 16			; 00000010H
  00a43	6a 10		 push	 16			; 00000010H
  00a45	68 22 01 00 00	 push	 290			; 00000122H
  00a4a	68 a9 00 00 00	 push	 169			; 000000a9H
  00a4f	68 5e 01 00 00	 push	 350			; 0000015eH
  00a54	6a 6f		 push	 111			; 0000006fH
  00a56	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN125@draw_weapo:

; 5634 : 
; 5635 : 						break;
; 5636 : 					}
; 5637 : 				}
; 5638 : 			}
; 5639 : 
; 5640 : 			//
; 5641 : 			// type
; 5642 : 			//
; 5643 : 
; 5644 : 			switch (heading_depth)

  00a5b	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  00a5e	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv540[ebp], eax
  00a64	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv540[ebp], 3
  00a6b	77 4b		 ja	 SHORT $LN12@draw_weapo
  00a6d	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv540[ebp]
  00a73	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN387@draw_weapo[ecx*4]
$LN130@draw_weapo:

; 5645 : 			{
; 5646 : 				case APACHE_LHS_INNER_PYLON:
; 5647 : 				{
; 5648 : 					hardpoint_x = 26;

  00a7a	c7 45 a4 1a 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 26 ; 0000001aH

; 5649 : 					hardpoint_y = 377;

  00a81	c7 45 a0 79 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 377 ; 00000179H

; 5650 : 
; 5651 : 					break;

  00a88	eb 2e		 jmp	 SHORT $LN12@draw_weapo
$LN131@draw_weapo:

; 5652 : 				}
; 5653 : 				case APACHE_RHS_INNER_PYLON:
; 5654 : 				{
; 5655 : 					hardpoint_x = 95;

  00a8a	c7 45 a4 5f 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 95 ; 0000005fH

; 5656 : 					hardpoint_y = 377;

  00a91	c7 45 a0 79 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 377 ; 00000179H

; 5657 : 
; 5658 : 					break;

  00a98	eb 1e		 jmp	 SHORT $LN12@draw_weapo
$LN132@draw_weapo:

; 5659 : 				}
; 5660 : 				case APACHE_LHS_OUTER_PYLON:
; 5661 : 				{
; 5662 : 					hardpoint_x = 10;

  00a9a	c7 45 a4 0a 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 10 ; 0000000aH

; 5663 : 					hardpoint_y = 377;

  00aa1	c7 45 a0 79 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 377 ; 00000179H

; 5664 : 
; 5665 : 					break;

  00aa8	eb 0e		 jmp	 SHORT $LN12@draw_weapo
$LN133@draw_weapo:

; 5666 : 				}
; 5667 : 				case APACHE_RHS_OUTER_PYLON:
; 5668 : 				{
; 5669 : 					hardpoint_x = 111;

  00aaa	c7 45 a4 6f 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 111 ; 0000006fH

; 5670 : 					hardpoint_y = 377;

  00ab1	c7 45 a0 79 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 377 ; 00000179H
$LN12@draw_weapo:

; 5671 : 
; 5672 : 					break;
; 5673 : 				}
; 5674 : 			}
; 5675 : 
; 5676 : 			if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_HYDRA70_M255)

  00ab8	83 7d 94 1e	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 30 ; 0000001eH
  00abc	75 48		 jne	 SHORT $LN134@draw_weapo

; 5677 : 			{
; 5678 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  00abe	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00ac1	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00ac4	75 23		 jne	 SHORT $LN136@draw_weapo
  00ac6	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00aca	75 1d		 jne	 SHORT $LN136@draw_weapo

; 5679 : 				{
; 5680 : 					draw_sprite (hardpoint_x, hardpoint_y, 133, 268, 15, 6);

  00acc	6a 06		 push	 6
  00ace	6a 0f		 push	 15			; 0000000fH
  00ad0	68 0c 01 00 00	 push	 268			; 0000010cH
  00ad5	68 85 00 00 00	 push	 133			; 00000085H
  00ada	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00add	50		 push	 eax
  00ade	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00ae1	51		 push	 ecx
  00ae2	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5681 : 				}
; 5682 : 				else

  00ae7	eb 1b		 jmp	 SHORT $LN137@draw_weapo
$LN136@draw_weapo:

; 5683 : 				{
; 5684 : 					draw_sprite (hardpoint_x, hardpoint_y, 173, 268, 15, 6);

  00ae9	6a 06		 push	 6
  00aeb	6a 0f		 push	 15			; 0000000fH
  00aed	68 0c 01 00 00	 push	 268			; 0000010cH
  00af2	68 ad 00 00 00	 push	 173			; 000000adH
  00af7	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00afa	50		 push	 eax
  00afb	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00afe	51		 push	 ecx
  00aff	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN137@draw_weapo:

; 5685 : 				}
; 5686 : 			}
; 5687 : 			else

  00b04	eb 46		 jmp	 SHORT $LN74@draw_weapo
$LN134@draw_weapo:

; 5688 : 			{
; 5689 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  00b06	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00b09	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00b0c	75 23		 jne	 SHORT $LN138@draw_weapo
  00b0e	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00b12	75 1d		 jne	 SHORT $LN138@draw_weapo

; 5690 : 				{
; 5691 : 					draw_sprite (hardpoint_x, hardpoint_y, 149, 268, 15, 6);

  00b14	6a 06		 push	 6
  00b16	6a 0f		 push	 15			; 0000000fH
  00b18	68 0c 01 00 00	 push	 268			; 0000010cH
  00b1d	68 95 00 00 00	 push	 149			; 00000095H
  00b22	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00b25	50		 push	 eax
  00b26	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00b29	51		 push	 ecx
  00b2a	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5692 : 				}
; 5693 : 				else

  00b2f	eb 1b		 jmp	 SHORT $LN74@draw_weapo
$LN138@draw_weapo:

; 5694 : 				{
; 5695 : 					draw_sprite (hardpoint_x, hardpoint_y, 189, 268, 15, 6);

  00b31	6a 06		 push	 6
  00b33	6a 0f		 push	 15			; 0000000fH
  00b35	68 0c 01 00 00	 push	 268			; 0000010cH
  00b3a	68 bd 00 00 00	 push	 189			; 000000bdH
  00b3f	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00b42	50		 push	 eax
  00b43	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00b46	51		 push	 ecx
  00b47	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN74@draw_weapo:

; 5696 : 				}
; 5697 : 			}
; 5698 : 		}
; 5699 : 	}
; 5700 : 
; 5701 : 	////////////////////////////////////////////////////////////////////////////////
; 5702 : 	//
; 5703 : 	// Hellfires
; 5704 : 	//
; 5705 : 	////////////////////////////////////////////////////////////////////////////////
; 5706 : 
; 5707 : 	if ((weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AGM114L_LONGBOW_HELLFIRE) || (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AGM114K_HELLFIRE_II))

  00b4c	83 7d 94 2d	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 45 ; 0000002dH
  00b50	74 0a		 je	 SHORT $LN141@draw_weapo
  00b52	83 7d 94 2e	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 46 ; 0000002eH
  00b56	0f 85 00 0f 00
	00		 jne	 $LN140@draw_weapo
$LN141@draw_weapo:

; 5708 : 	{
; 5709 : 		if (draw_large_mfd)

  00b5c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00b63	0f 84 40 07 00
	00		 je	 $LN142@draw_weapo

; 5710 : 		{
; 5711 : 			////////////////////////////////////////
; 5712 : 			//
; 5713 : 			// LARGE
; 5714 : 			//
; 5715 : 			////////////////////////////////////////
; 5716 : 
; 5717 : 			//
; 5718 : 			// pylon
; 5719 : 			//
; 5720 : 
; 5721 : 			switch (heading_depth)

  00b69	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  00b6c	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv574[ebp], eax
  00b72	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv574[ebp], 3
  00b79	77 4b		 ja	 SHORT $LN14@draw_weapo
  00b7b	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv574[ebp]
  00b81	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN388@draw_weapo[ecx*4]
$LN144@draw_weapo:

; 5722 : 			{
; 5723 : 				case APACHE_LHS_INNER_PYLON:
; 5724 : 				{
; 5725 : 					hardpoint_x = 53;

  00b88	c7 45 a4 35 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 53 ; 00000035H

; 5726 : 					hardpoint_y = 177;

  00b8f	c7 45 a0 b1 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 177 ; 000000b1H

; 5727 : 
; 5728 : 					break;

  00b96	eb 2e		 jmp	 SHORT $LN14@draw_weapo
$LN145@draw_weapo:

; 5729 : 				}
; 5730 : 				case APACHE_RHS_INNER_PYLON:
; 5731 : 				{
; 5732 : 					hardpoint_x = 191;

  00b98	c7 45 a4 bf 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 191 ; 000000bfH

; 5733 : 					hardpoint_y = 177;

  00b9f	c7 45 a0 b1 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 177 ; 000000b1H

; 5734 : 
; 5735 : 					break;

  00ba6	eb 1e		 jmp	 SHORT $LN14@draw_weapo
$LN146@draw_weapo:

; 5736 : 				}
; 5737 : 				case APACHE_LHS_OUTER_PYLON:
; 5738 : 				{
; 5739 : 					hardpoint_x = 21;

  00ba8	c7 45 a4 15 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 21 ; 00000015H

; 5740 : 					hardpoint_y = 177;

  00baf	c7 45 a0 b1 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 177 ; 000000b1H

; 5741 : 
; 5742 : 					break;

  00bb6	eb 0e		 jmp	 SHORT $LN14@draw_weapo
$LN147@draw_weapo:

; 5743 : 				}
; 5744 : 				case APACHE_RHS_OUTER_PYLON:
; 5745 : 				{
; 5746 : 					hardpoint_x = 223;

  00bb8	c7 45 a4 df 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 223 ; 000000dfH

; 5747 : 					hardpoint_y = 177;

  00bbf	c7 45 a0 b1 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 177 ; 000000b1H
$LN14@draw_weapo:

; 5748 : 
; 5749 : 					break;
; 5750 : 				}
; 5751 : 			}
; 5752 : 
; 5753 : 			if ((weapon_sub_type == selected_weapon) && (!damaged))

  00bc6	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00bc9	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00bcc	75 20		 jne	 SHORT $LN148@draw_weapo
  00bce	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00bd2	75 1a		 jne	 SHORT $LN148@draw_weapo

; 5754 : 			{
; 5755 : 				draw_sprite (hardpoint_x, hardpoint_y, 262, 79, 20, 18);

  00bd4	6a 12		 push	 18			; 00000012H
  00bd6	6a 14		 push	 20			; 00000014H
  00bd8	6a 4f		 push	 79			; 0000004fH
  00bda	68 06 01 00 00	 push	 262			; 00000106H
  00bdf	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00be2	50		 push	 eax
  00be3	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00be6	51		 push	 ecx
  00be7	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5756 : 			}
; 5757 : 			else

  00bec	eb 18		 jmp	 SHORT $LN149@draw_weapo
$LN148@draw_weapo:

; 5758 : 			{
; 5759 : 				draw_sprite (hardpoint_x, hardpoint_y, 284, 79, 20, 18);

  00bee	6a 12		 push	 18			; 00000012H
  00bf0	6a 14		 push	 20			; 00000014H
  00bf2	6a 4f		 push	 79			; 0000004fH
  00bf4	68 1c 01 00 00	 push	 284			; 0000011cH
  00bf9	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00bfc	50		 push	 eax
  00bfd	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00c00	51		 push	 ecx
  00c01	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN149@draw_weapo:

; 5760 : 			}
; 5761 : 
; 5762 : 			//
; 5763 : 			// missiles
; 5764 : 			//
; 5765 : 
; 5766 : 			switch (heading_depth)

  00c06	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  00c09	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv590[ebp], eax
  00c0f	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv590[ebp], 3
  00c16	0f 87 12 05 00
	00		 ja	 $LN16@draw_weapo
  00c1c	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv590[ebp]
  00c22	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN389@draw_weapo[ecx*4]
$LN150@draw_weapo:

; 5767 : 			{
; 5768 : 				case APACHE_LHS_INNER_PYLON:
; 5769 : 				case APACHE_LHS_OUTER_PYLON:
; 5770 : 				{
; 5771 : 					if (number > 3)

  00c29	83 7d ac 03	 cmp	 DWORD PTR _number$[ebp], 3
  00c2d	7e 4e		 jle	 SHORT $LN151@draw_weapo

; 5772 : 					{
; 5773 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00c2f	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00c32	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00c35	75 26		 jne	 SHORT $LN153@draw_weapo
  00c37	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00c3b	75 20		 jne	 SHORT $LN153@draw_weapo

; 5774 : 						{
; 5775 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 19, 280, 61, 16, 16);

  00c3d	6a 10		 push	 16			; 00000010H
  00c3f	6a 10		 push	 16			; 00000010H
  00c41	6a 3d		 push	 61			; 0000003dH
  00c43	68 18 01 00 00	 push	 280			; 00000118H
  00c48	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00c4b	83 c0 13	 add	 eax, 19			; 00000013H
  00c4e	50		 push	 eax
  00c4f	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00c52	83 e9 06	 sub	 ecx, 6
  00c55	51		 push	 ecx
  00c56	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5776 : 						}
; 5777 : 						else

  00c5b	eb 1e		 jmp	 SHORT $LN154@draw_weapo
$LN153@draw_weapo:

; 5778 : 						{
; 5779 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 19, 316, 61, 16, 16);

  00c5d	6a 10		 push	 16			; 00000010H
  00c5f	6a 10		 push	 16			; 00000010H
  00c61	6a 3d		 push	 61			; 0000003dH
  00c63	68 3c 01 00 00	 push	 316			; 0000013cH
  00c68	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00c6b	83 c0 13	 add	 eax, 19			; 00000013H
  00c6e	50		 push	 eax
  00c6f	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00c72	83 e9 06	 sub	 ecx, 6
  00c75	51		 push	 ecx
  00c76	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN154@draw_weapo:

; 5780 : 						}
; 5781 : 					}
; 5782 : 					else

  00c7b	eb 4c		 jmp	 SHORT $LN152@draw_weapo
$LN151@draw_weapo:

; 5783 : 					{
; 5784 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00c7d	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00c80	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00c83	75 26		 jne	 SHORT $LN155@draw_weapo
  00c85	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00c89	75 20		 jne	 SHORT $LN155@draw_weapo

; 5785 : 						{
; 5786 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 19, 262, 61, 16, 16);

  00c8b	6a 10		 push	 16			; 00000010H
  00c8d	6a 10		 push	 16			; 00000010H
  00c8f	6a 3d		 push	 61			; 0000003dH
  00c91	68 06 01 00 00	 push	 262			; 00000106H
  00c96	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00c99	83 c0 13	 add	 eax, 19			; 00000013H
  00c9c	50		 push	 eax
  00c9d	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00ca0	83 e9 06	 sub	 ecx, 6
  00ca3	51		 push	 ecx
  00ca4	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5787 : 						}
; 5788 : 						else

  00ca9	eb 1e		 jmp	 SHORT $LN152@draw_weapo
$LN155@draw_weapo:

; 5789 : 						{
; 5790 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 19, 298, 61, 16, 16);

  00cab	6a 10		 push	 16			; 00000010H
  00cad	6a 10		 push	 16			; 00000010H
  00caf	6a 3d		 push	 61			; 0000003dH
  00cb1	68 2a 01 00 00	 push	 298			; 0000012aH
  00cb6	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00cb9	83 c0 13	 add	 eax, 19			; 00000013H
  00cbc	50		 push	 eax
  00cbd	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00cc0	83 e9 06	 sub	 ecx, 6
  00cc3	51		 push	 ecx
  00cc4	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN152@draw_weapo:

; 5791 : 						}
; 5792 : 					}
; 5793 : 
; 5794 : 					if (number > 2)

  00cc9	83 7d ac 02	 cmp	 DWORD PTR _number$[ebp], 2
  00ccd	7e 4e		 jle	 SHORT $LN157@draw_weapo

; 5795 : 					{
; 5796 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00ccf	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00cd2	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00cd5	75 26		 jne	 SHORT $LN159@draw_weapo
  00cd7	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00cdb	75 20		 jne	 SHORT $LN159@draw_weapo

; 5797 : 						{
; 5798 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 19, 280, 61, 16, 16);

  00cdd	6a 10		 push	 16			; 00000010H
  00cdf	6a 10		 push	 16			; 00000010H
  00ce1	6a 3d		 push	 61			; 0000003dH
  00ce3	68 18 01 00 00	 push	 280			; 00000118H
  00ce8	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00ceb	83 c0 13	 add	 eax, 19			; 00000013H
  00cee	50		 push	 eax
  00cef	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00cf2	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00cf5	51		 push	 ecx
  00cf6	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5799 : 						}
; 5800 : 						else

  00cfb	eb 1e		 jmp	 SHORT $LN160@draw_weapo
$LN159@draw_weapo:

; 5801 : 						{
; 5802 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 19, 316, 61, 16, 16);

  00cfd	6a 10		 push	 16			; 00000010H
  00cff	6a 10		 push	 16			; 00000010H
  00d01	6a 3d		 push	 61			; 0000003dH
  00d03	68 3c 01 00 00	 push	 316			; 0000013cH
  00d08	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00d0b	83 c0 13	 add	 eax, 19			; 00000013H
  00d0e	50		 push	 eax
  00d0f	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00d12	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00d15	51		 push	 ecx
  00d16	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN160@draw_weapo:

; 5803 : 						}
; 5804 : 					}
; 5805 : 					else

  00d1b	eb 4c		 jmp	 SHORT $LN158@draw_weapo
$LN157@draw_weapo:

; 5806 : 					{
; 5807 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00d1d	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00d20	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00d23	75 26		 jne	 SHORT $LN161@draw_weapo
  00d25	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00d29	75 20		 jne	 SHORT $LN161@draw_weapo

; 5808 : 						{
; 5809 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 19, 262, 61, 16, 16);

  00d2b	6a 10		 push	 16			; 00000010H
  00d2d	6a 10		 push	 16			; 00000010H
  00d2f	6a 3d		 push	 61			; 0000003dH
  00d31	68 06 01 00 00	 push	 262			; 00000106H
  00d36	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00d39	83 c0 13	 add	 eax, 19			; 00000013H
  00d3c	50		 push	 eax
  00d3d	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00d40	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00d43	51		 push	 ecx
  00d44	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5810 : 						}
; 5811 : 						else

  00d49	eb 1e		 jmp	 SHORT $LN158@draw_weapo
$LN161@draw_weapo:

; 5812 : 						{
; 5813 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 19, 298, 61, 16, 16);

  00d4b	6a 10		 push	 16			; 00000010H
  00d4d	6a 10		 push	 16			; 00000010H
  00d4f	6a 3d		 push	 61			; 0000003dH
  00d51	68 2a 01 00 00	 push	 298			; 0000012aH
  00d56	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00d59	83 c0 13	 add	 eax, 19			; 00000013H
  00d5c	50		 push	 eax
  00d5d	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00d60	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00d63	51		 push	 ecx
  00d64	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN158@draw_weapo:

; 5814 : 						}
; 5815 : 					}
; 5816 : 
; 5817 : 					if (number > 1)

  00d69	83 7d ac 01	 cmp	 DWORD PTR _number$[ebp], 1
  00d6d	7e 4e		 jle	 SHORT $LN163@draw_weapo

; 5818 : 					{
; 5819 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00d6f	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00d72	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00d75	75 26		 jne	 SHORT $LN165@draw_weapo
  00d77	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00d7b	75 20		 jne	 SHORT $LN165@draw_weapo

; 5820 : 						{
; 5821 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 35, 280, 61, 16, 16);

  00d7d	6a 10		 push	 16			; 00000010H
  00d7f	6a 10		 push	 16			; 00000010H
  00d81	6a 3d		 push	 61			; 0000003dH
  00d83	68 18 01 00 00	 push	 280			; 00000118H
  00d88	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00d8b	83 c0 23	 add	 eax, 35			; 00000023H
  00d8e	50		 push	 eax
  00d8f	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00d92	83 e9 06	 sub	 ecx, 6
  00d95	51		 push	 ecx
  00d96	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5822 : 						}
; 5823 : 						else

  00d9b	eb 1e		 jmp	 SHORT $LN166@draw_weapo
$LN165@draw_weapo:

; 5824 : 						{
; 5825 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 35, 316, 61, 16, 16);

  00d9d	6a 10		 push	 16			; 00000010H
  00d9f	6a 10		 push	 16			; 00000010H
  00da1	6a 3d		 push	 61			; 0000003dH
  00da3	68 3c 01 00 00	 push	 316			; 0000013cH
  00da8	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00dab	83 c0 23	 add	 eax, 35			; 00000023H
  00dae	50		 push	 eax
  00daf	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00db2	83 e9 06	 sub	 ecx, 6
  00db5	51		 push	 ecx
  00db6	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN166@draw_weapo:

; 5826 : 						}
; 5827 : 					}
; 5828 : 					else

  00dbb	eb 4c		 jmp	 SHORT $LN164@draw_weapo
$LN163@draw_weapo:

; 5829 : 					{
; 5830 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00dbd	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00dc0	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00dc3	75 26		 jne	 SHORT $LN167@draw_weapo
  00dc5	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00dc9	75 20		 jne	 SHORT $LN167@draw_weapo

; 5831 : 						{
; 5832 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 35, 262, 61, 16, 16);

  00dcb	6a 10		 push	 16			; 00000010H
  00dcd	6a 10		 push	 16			; 00000010H
  00dcf	6a 3d		 push	 61			; 0000003dH
  00dd1	68 06 01 00 00	 push	 262			; 00000106H
  00dd6	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00dd9	83 c0 23	 add	 eax, 35			; 00000023H
  00ddc	50		 push	 eax
  00ddd	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00de0	83 e9 06	 sub	 ecx, 6
  00de3	51		 push	 ecx
  00de4	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5833 : 						}
; 5834 : 						else

  00de9	eb 1e		 jmp	 SHORT $LN164@draw_weapo
$LN167@draw_weapo:

; 5835 : 						{
; 5836 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 35, 298, 61, 16, 16);

  00deb	6a 10		 push	 16			; 00000010H
  00ded	6a 10		 push	 16			; 00000010H
  00def	6a 3d		 push	 61			; 0000003dH
  00df1	68 2a 01 00 00	 push	 298			; 0000012aH
  00df6	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00df9	83 c0 23	 add	 eax, 35			; 00000023H
  00dfc	50		 push	 eax
  00dfd	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00e00	83 e9 06	 sub	 ecx, 6
  00e03	51		 push	 ecx
  00e04	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN164@draw_weapo:

; 5837 : 						}
; 5838 : 					}
; 5839 : 
; 5840 : 					if (number > 0)

  00e09	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  00e0d	7e 4e		 jle	 SHORT $LN169@draw_weapo

; 5841 : 					{
; 5842 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00e0f	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00e12	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00e15	75 26		 jne	 SHORT $LN171@draw_weapo
  00e17	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00e1b	75 20		 jne	 SHORT $LN171@draw_weapo

; 5843 : 						{
; 5844 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 35, 280, 61, 16, 16);

  00e1d	6a 10		 push	 16			; 00000010H
  00e1f	6a 10		 push	 16			; 00000010H
  00e21	6a 3d		 push	 61			; 0000003dH
  00e23	68 18 01 00 00	 push	 280			; 00000118H
  00e28	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00e2b	83 c0 23	 add	 eax, 35			; 00000023H
  00e2e	50		 push	 eax
  00e2f	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00e32	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00e35	51		 push	 ecx
  00e36	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5845 : 						}
; 5846 : 						else

  00e3b	eb 1e		 jmp	 SHORT $LN172@draw_weapo
$LN171@draw_weapo:

; 5847 : 						{
; 5848 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 35, 316, 61, 16, 16);

  00e3d	6a 10		 push	 16			; 00000010H
  00e3f	6a 10		 push	 16			; 00000010H
  00e41	6a 3d		 push	 61			; 0000003dH
  00e43	68 3c 01 00 00	 push	 316			; 0000013cH
  00e48	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00e4b	83 c0 23	 add	 eax, 35			; 00000023H
  00e4e	50		 push	 eax
  00e4f	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00e52	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00e55	51		 push	 ecx
  00e56	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN172@draw_weapo:

; 5849 : 						}
; 5850 : 					}
; 5851 : 					else

  00e5b	eb 4c		 jmp	 SHORT $LN170@draw_weapo
$LN169@draw_weapo:

; 5852 : 					{
; 5853 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00e5d	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00e60	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00e63	75 26		 jne	 SHORT $LN173@draw_weapo
  00e65	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00e69	75 20		 jne	 SHORT $LN173@draw_weapo

; 5854 : 						{
; 5855 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 35, 262, 61, 16, 16);

  00e6b	6a 10		 push	 16			; 00000010H
  00e6d	6a 10		 push	 16			; 00000010H
  00e6f	6a 3d		 push	 61			; 0000003dH
  00e71	68 06 01 00 00	 push	 262			; 00000106H
  00e76	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00e79	83 c0 23	 add	 eax, 35			; 00000023H
  00e7c	50		 push	 eax
  00e7d	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00e80	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00e83	51		 push	 ecx
  00e84	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5856 : 						}
; 5857 : 						else

  00e89	eb 1e		 jmp	 SHORT $LN170@draw_weapo
$LN173@draw_weapo:

; 5858 : 						{
; 5859 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 35, 298, 61, 16, 16);

  00e8b	6a 10		 push	 16			; 00000010H
  00e8d	6a 10		 push	 16			; 00000010H
  00e8f	6a 3d		 push	 61			; 0000003dH
  00e91	68 2a 01 00 00	 push	 298			; 0000012aH
  00e96	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00e99	83 c0 23	 add	 eax, 35			; 00000023H
  00e9c	50		 push	 eax
  00e9d	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00ea0	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00ea3	51		 push	 ecx
  00ea4	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN170@draw_weapo:

; 5860 : 						}
; 5861 : 					}
; 5862 : 
; 5863 : 					break;

  00ea9	e9 80 02 00 00	 jmp	 $LN16@draw_weapo
$LN175@draw_weapo:

; 5864 : 				}
; 5865 : 				case APACHE_RHS_INNER_PYLON:
; 5866 : 				case APACHE_RHS_OUTER_PYLON:
; 5867 : 				{
; 5868 : 					if (number > 3)

  00eae	83 7d ac 03	 cmp	 DWORD PTR _number$[ebp], 3
  00eb2	7e 4e		 jle	 SHORT $LN176@draw_weapo

; 5869 : 					{
; 5870 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00eb4	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00eb7	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00eba	75 26		 jne	 SHORT $LN178@draw_weapo
  00ebc	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00ec0	75 20		 jne	 SHORT $LN178@draw_weapo

; 5871 : 						{
; 5872 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 19, 280, 61, 16, 16);

  00ec2	6a 10		 push	 16			; 00000010H
  00ec4	6a 10		 push	 16			; 00000010H
  00ec6	6a 3d		 push	 61			; 0000003dH
  00ec8	68 18 01 00 00	 push	 280			; 00000118H
  00ecd	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00ed0	83 c0 13	 add	 eax, 19			; 00000013H
  00ed3	50		 push	 eax
  00ed4	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00ed7	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00eda	51		 push	 ecx
  00edb	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5873 : 						}
; 5874 : 						else

  00ee0	eb 1e		 jmp	 SHORT $LN179@draw_weapo
$LN178@draw_weapo:

; 5875 : 						{
; 5876 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 19, 316, 61, 16, 16);

  00ee2	6a 10		 push	 16			; 00000010H
  00ee4	6a 10		 push	 16			; 00000010H
  00ee6	6a 3d		 push	 61			; 0000003dH
  00ee8	68 3c 01 00 00	 push	 316			; 0000013cH
  00eed	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00ef0	83 c0 13	 add	 eax, 19			; 00000013H
  00ef3	50		 push	 eax
  00ef4	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00ef7	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00efa	51		 push	 ecx
  00efb	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN179@draw_weapo:

; 5877 : 						}
; 5878 : 					}
; 5879 : 					else

  00f00	eb 4c		 jmp	 SHORT $LN177@draw_weapo
$LN176@draw_weapo:

; 5880 : 					{
; 5881 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00f02	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00f05	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00f08	75 26		 jne	 SHORT $LN180@draw_weapo
  00f0a	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00f0e	75 20		 jne	 SHORT $LN180@draw_weapo

; 5882 : 						{
; 5883 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 19, 262, 61, 16, 16);

  00f10	6a 10		 push	 16			; 00000010H
  00f12	6a 10		 push	 16			; 00000010H
  00f14	6a 3d		 push	 61			; 0000003dH
  00f16	68 06 01 00 00	 push	 262			; 00000106H
  00f1b	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00f1e	83 c0 13	 add	 eax, 19			; 00000013H
  00f21	50		 push	 eax
  00f22	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00f25	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00f28	51		 push	 ecx
  00f29	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5884 : 						}
; 5885 : 						else

  00f2e	eb 1e		 jmp	 SHORT $LN177@draw_weapo
$LN180@draw_weapo:

; 5886 : 						{
; 5887 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 19, 298, 61, 16, 16);

  00f30	6a 10		 push	 16			; 00000010H
  00f32	6a 10		 push	 16			; 00000010H
  00f34	6a 3d		 push	 61			; 0000003dH
  00f36	68 2a 01 00 00	 push	 298			; 0000012aH
  00f3b	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00f3e	83 c0 13	 add	 eax, 19			; 00000013H
  00f41	50		 push	 eax
  00f42	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00f45	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00f48	51		 push	 ecx
  00f49	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN177@draw_weapo:

; 5888 : 						}
; 5889 : 					}
; 5890 : 
; 5891 : 					if (number > 2)

  00f4e	83 7d ac 02	 cmp	 DWORD PTR _number$[ebp], 2
  00f52	7e 4e		 jle	 SHORT $LN182@draw_weapo

; 5892 : 					{
; 5893 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00f54	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00f57	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00f5a	75 26		 jne	 SHORT $LN184@draw_weapo
  00f5c	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00f60	75 20		 jne	 SHORT $LN184@draw_weapo

; 5894 : 						{
; 5895 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 19, 280, 61, 16, 16);

  00f62	6a 10		 push	 16			; 00000010H
  00f64	6a 10		 push	 16			; 00000010H
  00f66	6a 3d		 push	 61			; 0000003dH
  00f68	68 18 01 00 00	 push	 280			; 00000118H
  00f6d	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00f70	83 c0 13	 add	 eax, 19			; 00000013H
  00f73	50		 push	 eax
  00f74	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00f77	83 e9 06	 sub	 ecx, 6
  00f7a	51		 push	 ecx
  00f7b	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5896 : 						}
; 5897 : 						else

  00f80	eb 1e		 jmp	 SHORT $LN185@draw_weapo
$LN184@draw_weapo:

; 5898 : 						{
; 5899 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 19, 316, 61, 16, 16);

  00f82	6a 10		 push	 16			; 00000010H
  00f84	6a 10		 push	 16			; 00000010H
  00f86	6a 3d		 push	 61			; 0000003dH
  00f88	68 3c 01 00 00	 push	 316			; 0000013cH
  00f8d	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00f90	83 c0 13	 add	 eax, 19			; 00000013H
  00f93	50		 push	 eax
  00f94	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00f97	83 e9 06	 sub	 ecx, 6
  00f9a	51		 push	 ecx
  00f9b	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN185@draw_weapo:

; 5900 : 						}
; 5901 : 					}
; 5902 : 					else

  00fa0	eb 4c		 jmp	 SHORT $LN183@draw_weapo
$LN182@draw_weapo:

; 5903 : 					{
; 5904 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00fa2	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00fa5	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00fa8	75 26		 jne	 SHORT $LN186@draw_weapo
  00faa	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00fae	75 20		 jne	 SHORT $LN186@draw_weapo

; 5905 : 						{
; 5906 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 19, 262, 61, 16, 16);

  00fb0	6a 10		 push	 16			; 00000010H
  00fb2	6a 10		 push	 16			; 00000010H
  00fb4	6a 3d		 push	 61			; 0000003dH
  00fb6	68 06 01 00 00	 push	 262			; 00000106H
  00fbb	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00fbe	83 c0 13	 add	 eax, 19			; 00000013H
  00fc1	50		 push	 eax
  00fc2	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00fc5	83 e9 06	 sub	 ecx, 6
  00fc8	51		 push	 ecx
  00fc9	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5907 : 						}
; 5908 : 						else

  00fce	eb 1e		 jmp	 SHORT $LN183@draw_weapo
$LN186@draw_weapo:

; 5909 : 						{
; 5910 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 19, 298, 61, 16, 16);

  00fd0	6a 10		 push	 16			; 00000010H
  00fd2	6a 10		 push	 16			; 00000010H
  00fd4	6a 3d		 push	 61			; 0000003dH
  00fd6	68 2a 01 00 00	 push	 298			; 0000012aH
  00fdb	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  00fde	83 c0 13	 add	 eax, 19			; 00000013H
  00fe1	50		 push	 eax
  00fe2	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  00fe5	83 e9 06	 sub	 ecx, 6
  00fe8	51		 push	 ecx
  00fe9	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN183@draw_weapo:

; 5911 : 						}
; 5912 : 					}
; 5913 : 
; 5914 : 					if (number > 1)

  00fee	83 7d ac 01	 cmp	 DWORD PTR _number$[ebp], 1
  00ff2	7e 4e		 jle	 SHORT $LN188@draw_weapo

; 5915 : 					{
; 5916 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  00ff4	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00ff7	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00ffa	75 26		 jne	 SHORT $LN190@draw_weapo
  00ffc	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01000	75 20		 jne	 SHORT $LN190@draw_weapo

; 5917 : 						{
; 5918 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 35, 280, 61, 16, 16);

  01002	6a 10		 push	 16			; 00000010H
  01004	6a 10		 push	 16			; 00000010H
  01006	6a 3d		 push	 61			; 0000003dH
  01008	68 18 01 00 00	 push	 280			; 00000118H
  0100d	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01010	83 c0 23	 add	 eax, 35			; 00000023H
  01013	50		 push	 eax
  01014	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01017	83 c1 0a	 add	 ecx, 10			; 0000000aH
  0101a	51		 push	 ecx
  0101b	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5919 : 						}
; 5920 : 						else

  01020	eb 1e		 jmp	 SHORT $LN191@draw_weapo
$LN190@draw_weapo:

; 5921 : 						{
; 5922 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 35, 316, 61, 16, 16);

  01022	6a 10		 push	 16			; 00000010H
  01024	6a 10		 push	 16			; 00000010H
  01026	6a 3d		 push	 61			; 0000003dH
  01028	68 3c 01 00 00	 push	 316			; 0000013cH
  0102d	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01030	83 c0 23	 add	 eax, 35			; 00000023H
  01033	50		 push	 eax
  01034	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01037	83 c1 0a	 add	 ecx, 10			; 0000000aH
  0103a	51		 push	 ecx
  0103b	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN191@draw_weapo:

; 5923 : 						}
; 5924 : 					}
; 5925 : 					else

  01040	eb 4c		 jmp	 SHORT $LN189@draw_weapo
$LN188@draw_weapo:

; 5926 : 					{
; 5927 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01042	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01045	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01048	75 26		 jne	 SHORT $LN192@draw_weapo
  0104a	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0104e	75 20		 jne	 SHORT $LN192@draw_weapo

; 5928 : 						{
; 5929 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 35, 262, 61, 16, 16);

  01050	6a 10		 push	 16			; 00000010H
  01052	6a 10		 push	 16			; 00000010H
  01054	6a 3d		 push	 61			; 0000003dH
  01056	68 06 01 00 00	 push	 262			; 00000106H
  0105b	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0105e	83 c0 23	 add	 eax, 35			; 00000023H
  01061	50		 push	 eax
  01062	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01065	83 c1 0a	 add	 ecx, 10			; 0000000aH
  01068	51		 push	 ecx
  01069	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5930 : 						}
; 5931 : 						else

  0106e	eb 1e		 jmp	 SHORT $LN189@draw_weapo
$LN192@draw_weapo:

; 5932 : 						{
; 5933 : 							draw_sprite (hardpoint_x + 10, hardpoint_y + 35, 298, 61, 16, 16);

  01070	6a 10		 push	 16			; 00000010H
  01072	6a 10		 push	 16			; 00000010H
  01074	6a 3d		 push	 61			; 0000003dH
  01076	68 2a 01 00 00	 push	 298			; 0000012aH
  0107b	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0107e	83 c0 23	 add	 eax, 35			; 00000023H
  01081	50		 push	 eax
  01082	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01085	83 c1 0a	 add	 ecx, 10			; 0000000aH
  01088	51		 push	 ecx
  01089	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN189@draw_weapo:

; 5934 : 						}
; 5935 : 					}
; 5936 : 
; 5937 : 					if (number > 0)

  0108e	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  01092	7e 4e		 jle	 SHORT $LN194@draw_weapo

; 5938 : 					{
; 5939 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01094	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01097	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  0109a	75 26		 jne	 SHORT $LN196@draw_weapo
  0109c	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  010a0	75 20		 jne	 SHORT $LN196@draw_weapo

; 5940 : 						{
; 5941 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 35, 280, 61, 16, 16);

  010a2	6a 10		 push	 16			; 00000010H
  010a4	6a 10		 push	 16			; 00000010H
  010a6	6a 3d		 push	 61			; 0000003dH
  010a8	68 18 01 00 00	 push	 280			; 00000118H
  010ad	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  010b0	83 c0 23	 add	 eax, 35			; 00000023H
  010b3	50		 push	 eax
  010b4	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  010b7	83 e9 06	 sub	 ecx, 6
  010ba	51		 push	 ecx
  010bb	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5942 : 						}
; 5943 : 						else

  010c0	eb 1e		 jmp	 SHORT $LN197@draw_weapo
$LN196@draw_weapo:

; 5944 : 						{
; 5945 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 35, 316, 61, 16, 16);

  010c2	6a 10		 push	 16			; 00000010H
  010c4	6a 10		 push	 16			; 00000010H
  010c6	6a 3d		 push	 61			; 0000003dH
  010c8	68 3c 01 00 00	 push	 316			; 0000013cH
  010cd	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  010d0	83 c0 23	 add	 eax, 35			; 00000023H
  010d3	50		 push	 eax
  010d4	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  010d7	83 e9 06	 sub	 ecx, 6
  010da	51		 push	 ecx
  010db	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN197@draw_weapo:

; 5946 : 						}
; 5947 : 					}
; 5948 : 					else

  010e0	eb 4c		 jmp	 SHORT $LN16@draw_weapo
$LN194@draw_weapo:

; 5949 : 					{
; 5950 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  010e2	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  010e5	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  010e8	75 26		 jne	 SHORT $LN198@draw_weapo
  010ea	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  010ee	75 20		 jne	 SHORT $LN198@draw_weapo

; 5951 : 						{
; 5952 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 35, 262, 61, 16, 16);

  010f0	6a 10		 push	 16			; 00000010H
  010f2	6a 10		 push	 16			; 00000010H
  010f4	6a 3d		 push	 61			; 0000003dH
  010f6	68 06 01 00 00	 push	 262			; 00000106H
  010fb	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  010fe	83 c0 23	 add	 eax, 35			; 00000023H
  01101	50		 push	 eax
  01102	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01105	83 e9 06	 sub	 ecx, 6
  01108	51		 push	 ecx
  01109	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5953 : 						}
; 5954 : 						else

  0110e	eb 1e		 jmp	 SHORT $LN16@draw_weapo
$LN198@draw_weapo:

; 5955 : 						{
; 5956 : 							draw_sprite (hardpoint_x - 6, hardpoint_y + 35, 298, 61, 16, 16);

  01110	6a 10		 push	 16			; 00000010H
  01112	6a 10		 push	 16			; 00000010H
  01114	6a 3d		 push	 61			; 0000003dH
  01116	68 2a 01 00 00	 push	 298			; 0000012aH
  0111b	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0111e	83 c0 23	 add	 eax, 35			; 00000023H
  01121	50		 push	 eax
  01122	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01125	83 e9 06	 sub	 ecx, 6
  01128	51		 push	 ecx
  01129	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN16@draw_weapo:

; 5957 : 						}
; 5958 : 					}
; 5959 : 
; 5960 : 					break;
; 5961 : 				}
; 5962 : 			}
; 5963 : 
; 5964 : 			//
; 5965 : 			// damage cross
; 5966 : 			//
; 5967 : 
; 5968 : 			if (damaged)

  0112e	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01132	0f 84 87 00 00
	00		 je	 $LN200@draw_weapo

; 5969 : 			{
; 5970 : 				switch (heading_depth)

  01138	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  0113b	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv889[ebp], eax
  01141	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv889[ebp], 3
  01148	77 75		 ja	 SHORT $LN200@draw_weapo
  0114a	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv889[ebp]
  01150	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN390@draw_weapo[ecx*4]
$LN201@draw_weapo:

; 5971 : 				{
; 5972 : 					case APACHE_LHS_INNER_PYLON:
; 5973 : 					{
; 5974 : 						draw_sprite (47, 196, 334, 61, 32, 32);

  01157	6a 20		 push	 32			; 00000020H
  01159	6a 20		 push	 32			; 00000020H
  0115b	6a 3d		 push	 61			; 0000003dH
  0115d	68 4e 01 00 00	 push	 334			; 0000014eH
  01162	68 c4 00 00 00	 push	 196			; 000000c4H
  01167	6a 2f		 push	 47			; 0000002fH
  01169	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5975 : 
; 5976 : 						break;

  0116e	eb 4f		 jmp	 SHORT $LN200@draw_weapo
$LN202@draw_weapo:

; 5977 : 					}
; 5978 : 					case APACHE_RHS_INNER_PYLON:
; 5979 : 					{
; 5980 : 						draw_sprite (185, 196, 334, 61, 32, 32);

  01170	6a 20		 push	 32			; 00000020H
  01172	6a 20		 push	 32			; 00000020H
  01174	6a 3d		 push	 61			; 0000003dH
  01176	68 4e 01 00 00	 push	 334			; 0000014eH
  0117b	68 c4 00 00 00	 push	 196			; 000000c4H
  01180	68 b9 00 00 00	 push	 185			; 000000b9H
  01185	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5981 : 
; 5982 : 						break;

  0118a	eb 33		 jmp	 SHORT $LN200@draw_weapo
$LN203@draw_weapo:

; 5983 : 					}
; 5984 : 					case APACHE_LHS_OUTER_PYLON:
; 5985 : 					{
; 5986 : 						draw_sprite (15, 196, 334, 61, 32, 32);

  0118c	6a 20		 push	 32			; 00000020H
  0118e	6a 20		 push	 32			; 00000020H
  01190	6a 3d		 push	 61			; 0000003dH
  01192	68 4e 01 00 00	 push	 334			; 0000014eH
  01197	68 c4 00 00 00	 push	 196			; 000000c4H
  0119c	6a 0f		 push	 15			; 0000000fH
  0119e	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 5987 : 
; 5988 : 						break;

  011a3	eb 1a		 jmp	 SHORT $LN200@draw_weapo
$LN204@draw_weapo:

; 5989 : 					}
; 5990 : 					case APACHE_RHS_OUTER_PYLON:
; 5991 : 					{
; 5992 : 						draw_sprite (217, 196, 334, 61, 32, 32);

  011a5	6a 20		 push	 32			; 00000020H
  011a7	6a 20		 push	 32			; 00000020H
  011a9	6a 3d		 push	 61			; 0000003dH
  011ab	68 4e 01 00 00	 push	 334			; 0000014eH
  011b0	68 c4 00 00 00	 push	 196			; 000000c4H
  011b5	68 d9 00 00 00	 push	 217			; 000000d9H
  011ba	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN200@draw_weapo:

; 5993 : 
; 5994 : 						break;
; 5995 : 					}
; 5996 : 				}
; 5997 : 			}
; 5998 : 
; 5999 : 			//
; 6000 : 			// type
; 6001 : 			//
; 6002 : 
; 6003 : 			switch (heading_depth)

  011bf	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  011c2	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv915[ebp], eax
  011c8	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv915[ebp], 3
  011cf	77 4b		 ja	 SHORT $LN20@draw_weapo
  011d1	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv915[ebp]
  011d7	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN391@draw_weapo[ecx*4]
$LN205@draw_weapo:

; 6004 : 			{
; 6005 : 				case APACHE_LHS_INNER_PYLON:
; 6006 : 				{
; 6007 : 					hardpoint_x = 47;

  011de	c7 45 a4 2f 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 47 ; 0000002fH

; 6008 : 					hardpoint_y = 234;

  011e5	c7 45 a0 ea 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 234 ; 000000eaH

; 6009 : 
; 6010 : 					break;

  011ec	eb 2e		 jmp	 SHORT $LN20@draw_weapo
$LN206@draw_weapo:

; 6011 : 				}
; 6012 : 				case APACHE_RHS_INNER_PYLON:
; 6013 : 				{
; 6014 : 					hardpoint_x = 185;

  011ee	c7 45 a4 b9 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 185 ; 000000b9H

; 6015 : 					hardpoint_y = 234;

  011f5	c7 45 a0 ea 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 234 ; 000000eaH

; 6016 : 
; 6017 : 					break;

  011fc	eb 1e		 jmp	 SHORT $LN20@draw_weapo
$LN207@draw_weapo:

; 6018 : 				}
; 6019 : 				case APACHE_LHS_OUTER_PYLON:
; 6020 : 				{
; 6021 : 					hardpoint_x = 15;

  011fe	c7 45 a4 0f 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 15 ; 0000000fH

; 6022 : 					hardpoint_y = 234;

  01205	c7 45 a0 ea 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 234 ; 000000eaH

; 6023 : 
; 6024 : 					break;

  0120c	eb 0e		 jmp	 SHORT $LN20@draw_weapo
$LN208@draw_weapo:

; 6025 : 				}
; 6026 : 				case APACHE_RHS_OUTER_PYLON:
; 6027 : 				{
; 6028 : 					hardpoint_x = 217;

  0120e	c7 45 a4 d9 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 217 ; 000000d9H

; 6029 : 					hardpoint_y = 234;

  01215	c7 45 a0 ea 00
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 234 ; 000000eaH
$LN20@draw_weapo:

; 6030 : 
; 6031 : 					break;
; 6032 : 				}
; 6033 : 			}
; 6034 : 
; 6035 : 			if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AGM114K_HELLFIRE_II)

  0121c	83 7d 94 2e	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 46 ; 0000002eH
  01220	75 42		 jne	 SHORT $LN209@draw_weapo

; 6036 : 			{
; 6037 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  01222	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01225	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01228	75 20		 jne	 SHORT $LN211@draw_weapo
  0122a	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0122e	75 1a		 jne	 SHORT $LN211@draw_weapo

; 6038 : 				{
; 6039 : 					draw_sprite (hardpoint_x, hardpoint_y, 262, 3, 31, 12);

  01230	6a 0c		 push	 12			; 0000000cH
  01232	6a 1f		 push	 31			; 0000001fH
  01234	6a 03		 push	 3
  01236	68 06 01 00 00	 push	 262			; 00000106H
  0123b	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0123e	50		 push	 eax
  0123f	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01242	51		 push	 ecx
  01243	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6040 : 				}
; 6041 : 				else

  01248	eb 18		 jmp	 SHORT $LN212@draw_weapo
$LN211@draw_weapo:

; 6042 : 				{
; 6043 : 					draw_sprite (hardpoint_x, hardpoint_y, 342, 3, 31, 12);

  0124a	6a 0c		 push	 12			; 0000000cH
  0124c	6a 1f		 push	 31			; 0000001fH
  0124e	6a 03		 push	 3
  01250	68 56 01 00 00	 push	 342			; 00000156H
  01255	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01258	50		 push	 eax
  01259	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0125c	51		 push	 ecx
  0125d	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN212@draw_weapo:

; 6044 : 				}
; 6045 : 			}
; 6046 : 			else

  01262	eb 40		 jmp	 SHORT $LN210@draw_weapo
$LN209@draw_weapo:

; 6047 : 			{
; 6048 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  01264	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01267	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  0126a	75 20		 jne	 SHORT $LN213@draw_weapo
  0126c	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01270	75 1a		 jne	 SHORT $LN213@draw_weapo

; 6049 : 				{
; 6050 : 					draw_sprite (hardpoint_x, hardpoint_y, 295, 3, 31, 12);

  01272	6a 0c		 push	 12			; 0000000cH
  01274	6a 1f		 push	 31			; 0000001fH
  01276	6a 03		 push	 3
  01278	68 27 01 00 00	 push	 295			; 00000127H
  0127d	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01280	50		 push	 eax
  01281	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01284	51		 push	 ecx
  01285	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6051 : 				}
; 6052 : 				else

  0128a	eb 18		 jmp	 SHORT $LN210@draw_weapo
$LN213@draw_weapo:

; 6053 : 				{
; 6054 : 					draw_sprite (hardpoint_x, hardpoint_y, 375, 3, 31, 12);

  0128c	6a 0c		 push	 12			; 0000000cH
  0128e	6a 1f		 push	 31			; 0000001fH
  01290	6a 03		 push	 3
  01292	68 77 01 00 00	 push	 375			; 00000177H
  01297	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0129a	50		 push	 eax
  0129b	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0129e	51		 push	 ecx
  0129f	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN210@draw_weapo:

; 6055 : 				}
; 6056 : 			}
; 6057 : 		}
; 6058 : 		else

  012a4	e9 b3 07 00 00	 jmp	 $LN140@draw_weapo
$LN142@draw_weapo:

; 6059 : 		{
; 6060 : 			////////////////////////////////////////
; 6061 : 			//
; 6062 : 			// SMALL
; 6063 : 			//
; 6064 : 			////////////////////////////////////////
; 6065 : 
; 6066 : 			//
; 6067 : 			// pylon
; 6068 : 			//
; 6069 : 
; 6070 : 			switch (heading_depth)

  012a9	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  012ac	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv946[ebp], eax
  012b2	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv946[ebp], 3
  012b9	77 4b		 ja	 SHORT $LN22@draw_weapo
  012bb	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv946[ebp]
  012c1	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN392@draw_weapo[ecx*4]
$LN215@draw_weapo:

; 6071 : 			{
; 6072 : 				case APACHE_LHS_INNER_PYLON:
; 6073 : 				{
; 6074 : 					hardpoint_x = 29;

  012c8	c7 45 a4 1d 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 29 ; 0000001dH

; 6075 : 					hardpoint_y = 348;

  012cf	c7 45 a0 5c 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 348 ; 0000015cH

; 6076 : 
; 6077 : 					break;

  012d6	eb 2e		 jmp	 SHORT $LN22@draw_weapo
$LN216@draw_weapo:

; 6078 : 				}
; 6079 : 				case APACHE_RHS_INNER_PYLON:
; 6080 : 				{
; 6081 : 					hardpoint_x = 98;

  012d8	c7 45 a4 62 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 98 ; 00000062H

; 6082 : 					hardpoint_y = 348;

  012df	c7 45 a0 5c 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 348 ; 0000015cH

; 6083 : 
; 6084 : 					break;

  012e6	eb 1e		 jmp	 SHORT $LN22@draw_weapo
$LN217@draw_weapo:

; 6085 : 				}
; 6086 : 				case APACHE_LHS_OUTER_PYLON:
; 6087 : 				{
; 6088 : 					hardpoint_x = 13;

  012e8	c7 45 a4 0d 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 13 ; 0000000dH

; 6089 : 					hardpoint_y = 348;

  012ef	c7 45 a0 5c 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 348 ; 0000015cH

; 6090 : 
; 6091 : 					break;

  012f6	eb 0e		 jmp	 SHORT $LN22@draw_weapo
$LN218@draw_weapo:

; 6092 : 				}
; 6093 : 				case APACHE_RHS_OUTER_PYLON:
; 6094 : 				{
; 6095 : 					hardpoint_x = 114;

  012f8	c7 45 a4 72 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 114 ; 00000072H

; 6096 : 					hardpoint_y = 348;

  012ff	c7 45 a0 5c 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 348 ; 0000015cH
$LN22@draw_weapo:

; 6097 : 
; 6098 : 					break;
; 6099 : 				}
; 6100 : 			}
; 6101 : 
; 6102 : 			if ((weapon_sub_type == selected_weapon) && (!damaged))

  01306	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01309	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  0130c	75 23		 jne	 SHORT $LN219@draw_weapo
  0130e	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01312	75 1d		 jne	 SHORT $LN219@draw_weapo

; 6103 : 			{
; 6104 : 				draw_sprite (hardpoint_x, hardpoint_y, 133, 299, 10, 9);

  01314	6a 09		 push	 9
  01316	6a 0a		 push	 10			; 0000000aH
  01318	68 2b 01 00 00	 push	 299			; 0000012bH
  0131d	68 85 00 00 00	 push	 133			; 00000085H
  01322	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01325	50		 push	 eax
  01326	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01329	51		 push	 ecx
  0132a	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6105 : 			}
; 6106 : 			else

  0132f	eb 1b		 jmp	 SHORT $LN220@draw_weapo
$LN219@draw_weapo:

; 6107 : 			{
; 6108 : 				draw_sprite (hardpoint_x, hardpoint_y, 144, 299, 10, 9);

  01331	6a 09		 push	 9
  01333	6a 0a		 push	 10			; 0000000aH
  01335	68 2b 01 00 00	 push	 299			; 0000012bH
  0133a	68 90 00 00 00	 push	 144			; 00000090H
  0133f	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01342	50		 push	 eax
  01343	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01346	51		 push	 ecx
  01347	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN220@draw_weapo:

; 6109 : 			}
; 6110 : 
; 6111 : 			//
; 6112 : 			// missiles
; 6113 : 			//
; 6114 : 
; 6115 : 			switch (heading_depth)

  0134c	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  0134f	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv962[ebp], eax
  01355	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv962[ebp], 3
  0135c	0f 87 72 05 00
	00		 ja	 $LN24@draw_weapo
  01362	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv962[ebp]
  01368	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN393@draw_weapo[ecx*4]
$LN221@draw_weapo:

; 6116 : 			{
; 6117 : 				case APACHE_LHS_INNER_PYLON:
; 6118 : 				case APACHE_LHS_OUTER_PYLON:
; 6119 : 				{
; 6120 : 					if (number > 3)

  0136f	83 7d ac 03	 cmp	 DWORD PTR _number$[ebp], 3
  01373	7e 54		 jle	 SHORT $LN222@draw_weapo

; 6121 : 					{
; 6122 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01375	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01378	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  0137b	75 29		 jne	 SHORT $LN224@draw_weapo
  0137d	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01381	75 23		 jne	 SHORT $LN224@draw_weapo

; 6123 : 						{
; 6124 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 10, 142, 290, 8, 8);

  01383	6a 08		 push	 8
  01385	6a 08		 push	 8
  01387	68 22 01 00 00	 push	 290			; 00000122H
  0138c	68 8e 00 00 00	 push	 142			; 0000008eH
  01391	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01394	83 c0 0a	 add	 eax, 10			; 0000000aH
  01397	50		 push	 eax
  01398	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0139b	83 e9 03	 sub	 ecx, 3
  0139e	51		 push	 ecx
  0139f	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6125 : 						}
; 6126 : 						else

  013a4	eb 21		 jmp	 SHORT $LN225@draw_weapo
$LN224@draw_weapo:

; 6127 : 						{
; 6128 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 10, 160, 290, 8, 8);

  013a6	6a 08		 push	 8
  013a8	6a 08		 push	 8
  013aa	68 22 01 00 00	 push	 290			; 00000122H
  013af	68 a0 00 00 00	 push	 160			; 000000a0H
  013b4	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  013b7	83 c0 0a	 add	 eax, 10			; 0000000aH
  013ba	50		 push	 eax
  013bb	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  013be	83 e9 03	 sub	 ecx, 3
  013c1	51		 push	 ecx
  013c2	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN225@draw_weapo:

; 6129 : 						}
; 6130 : 					}
; 6131 : 					else

  013c7	eb 52		 jmp	 SHORT $LN223@draw_weapo
$LN222@draw_weapo:

; 6132 : 					{
; 6133 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  013c9	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  013cc	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  013cf	75 29		 jne	 SHORT $LN226@draw_weapo
  013d1	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  013d5	75 23		 jne	 SHORT $LN226@draw_weapo

; 6134 : 						{
; 6135 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 10, 133, 290, 8, 8);

  013d7	6a 08		 push	 8
  013d9	6a 08		 push	 8
  013db	68 22 01 00 00	 push	 290			; 00000122H
  013e0	68 85 00 00 00	 push	 133			; 00000085H
  013e5	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  013e8	83 c0 0a	 add	 eax, 10			; 0000000aH
  013eb	50		 push	 eax
  013ec	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  013ef	83 e9 03	 sub	 ecx, 3
  013f2	51		 push	 ecx
  013f3	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6136 : 						}
; 6137 : 						else

  013f8	eb 21		 jmp	 SHORT $LN223@draw_weapo
$LN226@draw_weapo:

; 6138 : 						{
; 6139 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 10, 151, 290, 8, 8);

  013fa	6a 08		 push	 8
  013fc	6a 08		 push	 8
  013fe	68 22 01 00 00	 push	 290			; 00000122H
  01403	68 97 00 00 00	 push	 151			; 00000097H
  01408	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0140b	83 c0 0a	 add	 eax, 10			; 0000000aH
  0140e	50		 push	 eax
  0140f	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01412	83 e9 03	 sub	 ecx, 3
  01415	51		 push	 ecx
  01416	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN223@draw_weapo:

; 6140 : 						}
; 6141 : 					}
; 6142 : 
; 6143 : 					if (number > 2)

  0141b	83 7d ac 02	 cmp	 DWORD PTR _number$[ebp], 2
  0141f	7e 54		 jle	 SHORT $LN228@draw_weapo

; 6144 : 					{
; 6145 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01421	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01424	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01427	75 29		 jne	 SHORT $LN230@draw_weapo
  01429	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0142d	75 23		 jne	 SHORT $LN230@draw_weapo

; 6146 : 						{
; 6147 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 10, 142, 290, 8, 8);

  0142f	6a 08		 push	 8
  01431	6a 08		 push	 8
  01433	68 22 01 00 00	 push	 290			; 00000122H
  01438	68 8e 00 00 00	 push	 142			; 0000008eH
  0143d	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01440	83 c0 0a	 add	 eax, 10			; 0000000aH
  01443	50		 push	 eax
  01444	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01447	83 c1 05	 add	 ecx, 5
  0144a	51		 push	 ecx
  0144b	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6148 : 						}
; 6149 : 						else

  01450	eb 21		 jmp	 SHORT $LN231@draw_weapo
$LN230@draw_weapo:

; 6150 : 						{
; 6151 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 10, 160, 290, 8, 8);

  01452	6a 08		 push	 8
  01454	6a 08		 push	 8
  01456	68 22 01 00 00	 push	 290			; 00000122H
  0145b	68 a0 00 00 00	 push	 160			; 000000a0H
  01460	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01463	83 c0 0a	 add	 eax, 10			; 0000000aH
  01466	50		 push	 eax
  01467	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0146a	83 c1 05	 add	 ecx, 5
  0146d	51		 push	 ecx
  0146e	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN231@draw_weapo:

; 6152 : 						}
; 6153 : 					}
; 6154 : 					else

  01473	eb 52		 jmp	 SHORT $LN229@draw_weapo
$LN228@draw_weapo:

; 6155 : 					{
; 6156 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01475	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01478	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  0147b	75 29		 jne	 SHORT $LN232@draw_weapo
  0147d	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01481	75 23		 jne	 SHORT $LN232@draw_weapo

; 6157 : 						{
; 6158 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 10, 133, 290, 8, 8);

  01483	6a 08		 push	 8
  01485	6a 08		 push	 8
  01487	68 22 01 00 00	 push	 290			; 00000122H
  0148c	68 85 00 00 00	 push	 133			; 00000085H
  01491	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01494	83 c0 0a	 add	 eax, 10			; 0000000aH
  01497	50		 push	 eax
  01498	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0149b	83 c1 05	 add	 ecx, 5
  0149e	51		 push	 ecx
  0149f	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6159 : 						}
; 6160 : 						else

  014a4	eb 21		 jmp	 SHORT $LN229@draw_weapo
$LN232@draw_weapo:

; 6161 : 						{
; 6162 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 10, 151, 290, 8, 8);

  014a6	6a 08		 push	 8
  014a8	6a 08		 push	 8
  014aa	68 22 01 00 00	 push	 290			; 00000122H
  014af	68 97 00 00 00	 push	 151			; 00000097H
  014b4	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  014b7	83 c0 0a	 add	 eax, 10			; 0000000aH
  014ba	50		 push	 eax
  014bb	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  014be	83 c1 05	 add	 ecx, 5
  014c1	51		 push	 ecx
  014c2	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN229@draw_weapo:

; 6163 : 						}
; 6164 : 					}
; 6165 : 
; 6166 : 					if (number > 1)

  014c7	83 7d ac 01	 cmp	 DWORD PTR _number$[ebp], 1
  014cb	7e 54		 jle	 SHORT $LN234@draw_weapo

; 6167 : 					{
; 6168 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  014cd	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  014d0	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  014d3	75 29		 jne	 SHORT $LN236@draw_weapo
  014d5	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  014d9	75 23		 jne	 SHORT $LN236@draw_weapo

; 6169 : 						{
; 6170 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 18, 142, 290, 8, 8);

  014db	6a 08		 push	 8
  014dd	6a 08		 push	 8
  014df	68 22 01 00 00	 push	 290			; 00000122H
  014e4	68 8e 00 00 00	 push	 142			; 0000008eH
  014e9	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  014ec	83 c0 12	 add	 eax, 18			; 00000012H
  014ef	50		 push	 eax
  014f0	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  014f3	83 e9 03	 sub	 ecx, 3
  014f6	51		 push	 ecx
  014f7	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6171 : 						}
; 6172 : 						else

  014fc	eb 21		 jmp	 SHORT $LN237@draw_weapo
$LN236@draw_weapo:

; 6173 : 						{
; 6174 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 18, 160, 290, 8, 8);

  014fe	6a 08		 push	 8
  01500	6a 08		 push	 8
  01502	68 22 01 00 00	 push	 290			; 00000122H
  01507	68 a0 00 00 00	 push	 160			; 000000a0H
  0150c	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0150f	83 c0 12	 add	 eax, 18			; 00000012H
  01512	50		 push	 eax
  01513	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01516	83 e9 03	 sub	 ecx, 3
  01519	51		 push	 ecx
  0151a	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN237@draw_weapo:

; 6175 : 						}
; 6176 : 					}
; 6177 : 					else

  0151f	eb 52		 jmp	 SHORT $LN235@draw_weapo
$LN234@draw_weapo:

; 6178 : 					{
; 6179 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01521	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01524	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01527	75 29		 jne	 SHORT $LN238@draw_weapo
  01529	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0152d	75 23		 jne	 SHORT $LN238@draw_weapo

; 6180 : 						{
; 6181 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 18, 133, 290, 8, 8);

  0152f	6a 08		 push	 8
  01531	6a 08		 push	 8
  01533	68 22 01 00 00	 push	 290			; 00000122H
  01538	68 85 00 00 00	 push	 133			; 00000085H
  0153d	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01540	83 c0 12	 add	 eax, 18			; 00000012H
  01543	50		 push	 eax
  01544	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01547	83 e9 03	 sub	 ecx, 3
  0154a	51		 push	 ecx
  0154b	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6182 : 						}
; 6183 : 						else

  01550	eb 21		 jmp	 SHORT $LN235@draw_weapo
$LN238@draw_weapo:

; 6184 : 						{
; 6185 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 18, 151, 290, 8, 8);

  01552	6a 08		 push	 8
  01554	6a 08		 push	 8
  01556	68 22 01 00 00	 push	 290			; 00000122H
  0155b	68 97 00 00 00	 push	 151			; 00000097H
  01560	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01563	83 c0 12	 add	 eax, 18			; 00000012H
  01566	50		 push	 eax
  01567	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0156a	83 e9 03	 sub	 ecx, 3
  0156d	51		 push	 ecx
  0156e	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN235@draw_weapo:

; 6186 : 						}
; 6187 : 					}
; 6188 : 
; 6189 : 					if (number > 0)

  01573	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  01577	7e 54		 jle	 SHORT $LN240@draw_weapo

; 6190 : 					{
; 6191 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01579	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0157c	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  0157f	75 29		 jne	 SHORT $LN242@draw_weapo
  01581	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01585	75 23		 jne	 SHORT $LN242@draw_weapo

; 6192 : 						{
; 6193 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 18, 142, 290, 8, 8);

  01587	6a 08		 push	 8
  01589	6a 08		 push	 8
  0158b	68 22 01 00 00	 push	 290			; 00000122H
  01590	68 8e 00 00 00	 push	 142			; 0000008eH
  01595	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01598	83 c0 12	 add	 eax, 18			; 00000012H
  0159b	50		 push	 eax
  0159c	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0159f	83 c1 05	 add	 ecx, 5
  015a2	51		 push	 ecx
  015a3	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6194 : 						}
; 6195 : 						else

  015a8	eb 21		 jmp	 SHORT $LN243@draw_weapo
$LN242@draw_weapo:

; 6196 : 						{
; 6197 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 18, 160, 290, 8, 8);

  015aa	6a 08		 push	 8
  015ac	6a 08		 push	 8
  015ae	68 22 01 00 00	 push	 290			; 00000122H
  015b3	68 a0 00 00 00	 push	 160			; 000000a0H
  015b8	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  015bb	83 c0 12	 add	 eax, 18			; 00000012H
  015be	50		 push	 eax
  015bf	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  015c2	83 c1 05	 add	 ecx, 5
  015c5	51		 push	 ecx
  015c6	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN243@draw_weapo:

; 6198 : 						}
; 6199 : 					}
; 6200 : 					else

  015cb	eb 52		 jmp	 SHORT $LN241@draw_weapo
$LN240@draw_weapo:

; 6201 : 					{
; 6202 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  015cd	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  015d0	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  015d3	75 29		 jne	 SHORT $LN244@draw_weapo
  015d5	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  015d9	75 23		 jne	 SHORT $LN244@draw_weapo

; 6203 : 						{
; 6204 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 18, 133, 290, 8, 8);

  015db	6a 08		 push	 8
  015dd	6a 08		 push	 8
  015df	68 22 01 00 00	 push	 290			; 00000122H
  015e4	68 85 00 00 00	 push	 133			; 00000085H
  015e9	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  015ec	83 c0 12	 add	 eax, 18			; 00000012H
  015ef	50		 push	 eax
  015f0	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  015f3	83 c1 05	 add	 ecx, 5
  015f6	51		 push	 ecx
  015f7	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6205 : 						}
; 6206 : 						else

  015fc	eb 21		 jmp	 SHORT $LN241@draw_weapo
$LN244@draw_weapo:

; 6207 : 						{
; 6208 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 18, 151, 290, 8, 8);

  015fe	6a 08		 push	 8
  01600	6a 08		 push	 8
  01602	68 22 01 00 00	 push	 290			; 00000122H
  01607	68 97 00 00 00	 push	 151			; 00000097H
  0160c	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0160f	83 c0 12	 add	 eax, 18			; 00000012H
  01612	50		 push	 eax
  01613	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01616	83 c1 05	 add	 ecx, 5
  01619	51		 push	 ecx
  0161a	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN241@draw_weapo:

; 6209 : 						}
; 6210 : 					}
; 6211 : 
; 6212 : 					break;

  0161f	e9 b0 02 00 00	 jmp	 $LN24@draw_weapo
$LN246@draw_weapo:

; 6213 : 				}
; 6214 : 				case APACHE_RHS_INNER_PYLON:
; 6215 : 				case APACHE_RHS_OUTER_PYLON:
; 6216 : 				{
; 6217 : 					if (number > 3)

  01624	83 7d ac 03	 cmp	 DWORD PTR _number$[ebp], 3
  01628	7e 54		 jle	 SHORT $LN247@draw_weapo

; 6218 : 					{
; 6219 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  0162a	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0162d	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01630	75 29		 jne	 SHORT $LN249@draw_weapo
  01632	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01636	75 23		 jne	 SHORT $LN249@draw_weapo

; 6220 : 						{
; 6221 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 10, 142, 290, 8, 8);

  01638	6a 08		 push	 8
  0163a	6a 08		 push	 8
  0163c	68 22 01 00 00	 push	 290			; 00000122H
  01641	68 8e 00 00 00	 push	 142			; 0000008eH
  01646	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01649	83 c0 0a	 add	 eax, 10			; 0000000aH
  0164c	50		 push	 eax
  0164d	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01650	83 c1 05	 add	 ecx, 5
  01653	51		 push	 ecx
  01654	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6222 : 						}
; 6223 : 						else

  01659	eb 21		 jmp	 SHORT $LN250@draw_weapo
$LN249@draw_weapo:

; 6224 : 						{
; 6225 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 10, 160, 290, 8, 8);

  0165b	6a 08		 push	 8
  0165d	6a 08		 push	 8
  0165f	68 22 01 00 00	 push	 290			; 00000122H
  01664	68 a0 00 00 00	 push	 160			; 000000a0H
  01669	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0166c	83 c0 0a	 add	 eax, 10			; 0000000aH
  0166f	50		 push	 eax
  01670	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01673	83 c1 05	 add	 ecx, 5
  01676	51		 push	 ecx
  01677	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN250@draw_weapo:

; 6226 : 						}
; 6227 : 					}
; 6228 : 					else

  0167c	eb 52		 jmp	 SHORT $LN248@draw_weapo
$LN247@draw_weapo:

; 6229 : 					{
; 6230 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  0167e	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01681	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01684	75 29		 jne	 SHORT $LN251@draw_weapo
  01686	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0168a	75 23		 jne	 SHORT $LN251@draw_weapo

; 6231 : 						{
; 6232 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 10, 133, 290, 8, 8);

  0168c	6a 08		 push	 8
  0168e	6a 08		 push	 8
  01690	68 22 01 00 00	 push	 290			; 00000122H
  01695	68 85 00 00 00	 push	 133			; 00000085H
  0169a	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0169d	83 c0 0a	 add	 eax, 10			; 0000000aH
  016a0	50		 push	 eax
  016a1	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  016a4	83 c1 05	 add	 ecx, 5
  016a7	51		 push	 ecx
  016a8	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6233 : 						}
; 6234 : 						else

  016ad	eb 21		 jmp	 SHORT $LN248@draw_weapo
$LN251@draw_weapo:

; 6235 : 						{
; 6236 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 10, 151, 290, 8, 8);

  016af	6a 08		 push	 8
  016b1	6a 08		 push	 8
  016b3	68 22 01 00 00	 push	 290			; 00000122H
  016b8	68 97 00 00 00	 push	 151			; 00000097H
  016bd	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  016c0	83 c0 0a	 add	 eax, 10			; 0000000aH
  016c3	50		 push	 eax
  016c4	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  016c7	83 c1 05	 add	 ecx, 5
  016ca	51		 push	 ecx
  016cb	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN248@draw_weapo:

; 6237 : 						}
; 6238 : 					}
; 6239 : 
; 6240 : 					if (number > 2)

  016d0	83 7d ac 02	 cmp	 DWORD PTR _number$[ebp], 2
  016d4	7e 54		 jle	 SHORT $LN253@draw_weapo

; 6241 : 					{
; 6242 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  016d6	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  016d9	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  016dc	75 29		 jne	 SHORT $LN255@draw_weapo
  016de	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  016e2	75 23		 jne	 SHORT $LN255@draw_weapo

; 6243 : 						{
; 6244 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 10, 142, 290, 8, 8);

  016e4	6a 08		 push	 8
  016e6	6a 08		 push	 8
  016e8	68 22 01 00 00	 push	 290			; 00000122H
  016ed	68 8e 00 00 00	 push	 142			; 0000008eH
  016f2	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  016f5	83 c0 0a	 add	 eax, 10			; 0000000aH
  016f8	50		 push	 eax
  016f9	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  016fc	83 e9 03	 sub	 ecx, 3
  016ff	51		 push	 ecx
  01700	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6245 : 						}
; 6246 : 						else

  01705	eb 21		 jmp	 SHORT $LN256@draw_weapo
$LN255@draw_weapo:

; 6247 : 						{
; 6248 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 10, 160, 290, 8, 8);

  01707	6a 08		 push	 8
  01709	6a 08		 push	 8
  0170b	68 22 01 00 00	 push	 290			; 00000122H
  01710	68 a0 00 00 00	 push	 160			; 000000a0H
  01715	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01718	83 c0 0a	 add	 eax, 10			; 0000000aH
  0171b	50		 push	 eax
  0171c	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0171f	83 e9 03	 sub	 ecx, 3
  01722	51		 push	 ecx
  01723	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN256@draw_weapo:

; 6249 : 						}
; 6250 : 					}
; 6251 : 					else

  01728	eb 52		 jmp	 SHORT $LN254@draw_weapo
$LN253@draw_weapo:

; 6252 : 					{
; 6253 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  0172a	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0172d	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01730	75 29		 jne	 SHORT $LN257@draw_weapo
  01732	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01736	75 23		 jne	 SHORT $LN257@draw_weapo

; 6254 : 						{
; 6255 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 10, 133, 290, 8, 8);

  01738	6a 08		 push	 8
  0173a	6a 08		 push	 8
  0173c	68 22 01 00 00	 push	 290			; 00000122H
  01741	68 85 00 00 00	 push	 133			; 00000085H
  01746	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01749	83 c0 0a	 add	 eax, 10			; 0000000aH
  0174c	50		 push	 eax
  0174d	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01750	83 e9 03	 sub	 ecx, 3
  01753	51		 push	 ecx
  01754	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6256 : 						}
; 6257 : 						else

  01759	eb 21		 jmp	 SHORT $LN254@draw_weapo
$LN257@draw_weapo:

; 6258 : 						{
; 6259 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 10, 151, 290, 8, 8);

  0175b	6a 08		 push	 8
  0175d	6a 08		 push	 8
  0175f	68 22 01 00 00	 push	 290			; 00000122H
  01764	68 97 00 00 00	 push	 151			; 00000097H
  01769	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0176c	83 c0 0a	 add	 eax, 10			; 0000000aH
  0176f	50		 push	 eax
  01770	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01773	83 e9 03	 sub	 ecx, 3
  01776	51		 push	 ecx
  01777	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN254@draw_weapo:

; 6260 : 						}
; 6261 : 					}
; 6262 : 
; 6263 : 					if (number > 1)

  0177c	83 7d ac 01	 cmp	 DWORD PTR _number$[ebp], 1
  01780	7e 54		 jle	 SHORT $LN259@draw_weapo

; 6264 : 					{
; 6265 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01782	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01785	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01788	75 29		 jne	 SHORT $LN261@draw_weapo
  0178a	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0178e	75 23		 jne	 SHORT $LN261@draw_weapo

; 6266 : 						{
; 6267 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 18, 142, 290, 8, 8);

  01790	6a 08		 push	 8
  01792	6a 08		 push	 8
  01794	68 22 01 00 00	 push	 290			; 00000122H
  01799	68 8e 00 00 00	 push	 142			; 0000008eH
  0179e	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  017a1	83 c0 12	 add	 eax, 18			; 00000012H
  017a4	50		 push	 eax
  017a5	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  017a8	83 c1 05	 add	 ecx, 5
  017ab	51		 push	 ecx
  017ac	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6268 : 						}
; 6269 : 						else

  017b1	eb 21		 jmp	 SHORT $LN262@draw_weapo
$LN261@draw_weapo:

; 6270 : 						{
; 6271 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 18, 160, 290, 8, 8);

  017b3	6a 08		 push	 8
  017b5	6a 08		 push	 8
  017b7	68 22 01 00 00	 push	 290			; 00000122H
  017bc	68 a0 00 00 00	 push	 160			; 000000a0H
  017c1	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  017c4	83 c0 12	 add	 eax, 18			; 00000012H
  017c7	50		 push	 eax
  017c8	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  017cb	83 c1 05	 add	 ecx, 5
  017ce	51		 push	 ecx
  017cf	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN262@draw_weapo:

; 6272 : 						}
; 6273 : 					}
; 6274 : 					else

  017d4	eb 52		 jmp	 SHORT $LN260@draw_weapo
$LN259@draw_weapo:

; 6275 : 					{
; 6276 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  017d6	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  017d9	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  017dc	75 29		 jne	 SHORT $LN263@draw_weapo
  017de	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  017e2	75 23		 jne	 SHORT $LN263@draw_weapo

; 6277 : 						{
; 6278 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 18, 133, 290, 8, 8);

  017e4	6a 08		 push	 8
  017e6	6a 08		 push	 8
  017e8	68 22 01 00 00	 push	 290			; 00000122H
  017ed	68 85 00 00 00	 push	 133			; 00000085H
  017f2	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  017f5	83 c0 12	 add	 eax, 18			; 00000012H
  017f8	50		 push	 eax
  017f9	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  017fc	83 c1 05	 add	 ecx, 5
  017ff	51		 push	 ecx
  01800	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6279 : 						}
; 6280 : 						else

  01805	eb 21		 jmp	 SHORT $LN260@draw_weapo
$LN263@draw_weapo:

; 6281 : 						{
; 6282 : 							draw_sprite (hardpoint_x + 5, hardpoint_y + 18, 151, 290, 8, 8);

  01807	6a 08		 push	 8
  01809	6a 08		 push	 8
  0180b	68 22 01 00 00	 push	 290			; 00000122H
  01810	68 97 00 00 00	 push	 151			; 00000097H
  01815	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01818	83 c0 12	 add	 eax, 18			; 00000012H
  0181b	50		 push	 eax
  0181c	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  0181f	83 c1 05	 add	 ecx, 5
  01822	51		 push	 ecx
  01823	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN260@draw_weapo:

; 6283 : 						}
; 6284 : 					}
; 6285 : 
; 6286 : 					if (number > 0)

  01828	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  0182c	7e 54		 jle	 SHORT $LN265@draw_weapo

; 6287 : 					{
; 6288 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  0182e	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01831	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01834	75 29		 jne	 SHORT $LN267@draw_weapo
  01836	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0183a	75 23		 jne	 SHORT $LN267@draw_weapo

; 6289 : 						{
; 6290 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 18, 142, 290, 8, 8);

  0183c	6a 08		 push	 8
  0183e	6a 08		 push	 8
  01840	68 22 01 00 00	 push	 290			; 00000122H
  01845	68 8e 00 00 00	 push	 142			; 0000008eH
  0184a	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  0184d	83 c0 12	 add	 eax, 18			; 00000012H
  01850	50		 push	 eax
  01851	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01854	83 e9 03	 sub	 ecx, 3
  01857	51		 push	 ecx
  01858	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6291 : 						}
; 6292 : 						else

  0185d	eb 21		 jmp	 SHORT $LN268@draw_weapo
$LN267@draw_weapo:

; 6293 : 						{
; 6294 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 18, 160, 290, 8, 8);

  0185f	6a 08		 push	 8
  01861	6a 08		 push	 8
  01863	68 22 01 00 00	 push	 290			; 00000122H
  01868	68 a0 00 00 00	 push	 160			; 000000a0H
  0186d	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01870	83 c0 12	 add	 eax, 18			; 00000012H
  01873	50		 push	 eax
  01874	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01877	83 e9 03	 sub	 ecx, 3
  0187a	51		 push	 ecx
  0187b	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN268@draw_weapo:

; 6295 : 						}
; 6296 : 					}
; 6297 : 					else

  01880	eb 52		 jmp	 SHORT $LN24@draw_weapo
$LN265@draw_weapo:

; 6298 : 					{
; 6299 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01882	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01885	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01888	75 29		 jne	 SHORT $LN269@draw_weapo
  0188a	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0188e	75 23		 jne	 SHORT $LN269@draw_weapo

; 6300 : 						{
; 6301 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 18, 133, 290, 8, 8);

  01890	6a 08		 push	 8
  01892	6a 08		 push	 8
  01894	68 22 01 00 00	 push	 290			; 00000122H
  01899	68 85 00 00 00	 push	 133			; 00000085H
  0189e	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  018a1	83 c0 12	 add	 eax, 18			; 00000012H
  018a4	50		 push	 eax
  018a5	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  018a8	83 e9 03	 sub	 ecx, 3
  018ab	51		 push	 ecx
  018ac	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6302 : 						}
; 6303 : 						else

  018b1	eb 21		 jmp	 SHORT $LN24@draw_weapo
$LN269@draw_weapo:

; 6304 : 						{
; 6305 : 							draw_sprite (hardpoint_x - 3, hardpoint_y + 18, 151, 290, 8, 8);

  018b3	6a 08		 push	 8
  018b5	6a 08		 push	 8
  018b7	68 22 01 00 00	 push	 290			; 00000122H
  018bc	68 97 00 00 00	 push	 151			; 00000097H
  018c1	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  018c4	83 c0 12	 add	 eax, 18			; 00000012H
  018c7	50		 push	 eax
  018c8	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  018cb	83 e9 03	 sub	 ecx, 3
  018ce	51		 push	 ecx
  018cf	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN24@draw_weapo:

; 6306 : 						}
; 6307 : 					}
; 6308 : 
; 6309 : 					break;
; 6310 : 				}
; 6311 : 			}
; 6312 : 
; 6313 : 			//
; 6314 : 			// damage cross
; 6315 : 			//
; 6316 : 
; 6317 : 			if (damaged)

  018d4	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  018d8	0f 84 8d 00 00
	00		 je	 $LN271@draw_weapo

; 6318 : 			{
; 6319 : 				switch (heading_depth)

  018de	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  018e1	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv1261[ebp], eax
  018e7	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv1261[ebp], 3
  018ee	77 7b		 ja	 SHORT $LN271@draw_weapo
  018f0	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv1261[ebp]
  018f6	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN394@draw_weapo[ecx*4]
$LN272@draw_weapo:

; 6320 : 				{
; 6321 : 					case APACHE_LHS_INNER_PYLON:
; 6322 : 					{
; 6323 : 						draw_sprite (26, 358, 169, 290, 16, 16);

  018fd	6a 10		 push	 16			; 00000010H
  018ff	6a 10		 push	 16			; 00000010H
  01901	68 22 01 00 00	 push	 290			; 00000122H
  01906	68 a9 00 00 00	 push	 169			; 000000a9H
  0190b	68 66 01 00 00	 push	 358			; 00000166H
  01910	6a 1a		 push	 26			; 0000001aH
  01912	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6324 : 
; 6325 : 						break;

  01917	eb 52		 jmp	 SHORT $LN271@draw_weapo
$LN273@draw_weapo:

; 6326 : 					}
; 6327 : 					case APACHE_RHS_INNER_PYLON:
; 6328 : 					{
; 6329 : 						draw_sprite (95, 358, 169, 290, 16, 16);

  01919	6a 10		 push	 16			; 00000010H
  0191b	6a 10		 push	 16			; 00000010H
  0191d	68 22 01 00 00	 push	 290			; 00000122H
  01922	68 a9 00 00 00	 push	 169			; 000000a9H
  01927	68 66 01 00 00	 push	 358			; 00000166H
  0192c	6a 5f		 push	 95			; 0000005fH
  0192e	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6330 : 
; 6331 : 						break;

  01933	eb 36		 jmp	 SHORT $LN271@draw_weapo
$LN274@draw_weapo:

; 6332 : 					}
; 6333 : 					case APACHE_LHS_OUTER_PYLON:
; 6334 : 					{
; 6335 : 						draw_sprite (10, 358, 169, 290, 16, 16);

  01935	6a 10		 push	 16			; 00000010H
  01937	6a 10		 push	 16			; 00000010H
  01939	68 22 01 00 00	 push	 290			; 00000122H
  0193e	68 a9 00 00 00	 push	 169			; 000000a9H
  01943	68 66 01 00 00	 push	 358			; 00000166H
  01948	6a 0a		 push	 10			; 0000000aH
  0194a	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6336 : 
; 6337 : 						break;

  0194f	eb 1a		 jmp	 SHORT $LN271@draw_weapo
$LN275@draw_weapo:

; 6338 : 					}
; 6339 : 					case APACHE_RHS_OUTER_PYLON:
; 6340 : 					{
; 6341 : 						draw_sprite (111, 358, 169, 290, 16, 16);

  01951	6a 10		 push	 16			; 00000010H
  01953	6a 10		 push	 16			; 00000010H
  01955	68 22 01 00 00	 push	 290			; 00000122H
  0195a	68 a9 00 00 00	 push	 169			; 000000a9H
  0195f	68 66 01 00 00	 push	 358			; 00000166H
  01964	6a 6f		 push	 111			; 0000006fH
  01966	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN271@draw_weapo:

; 6342 : 
; 6343 : 						break;
; 6344 : 					}
; 6345 : 				}
; 6346 : 			}
; 6347 : 
; 6348 : 			//
; 6349 : 			// type
; 6350 : 			//
; 6351 : 
; 6352 : 			switch (heading_depth)

  0196b	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  0196e	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv1287[ebp], eax
  01974	83 bd 50 ff ff
	ff 03		 cmp	 DWORD PTR tv1287[ebp], 3
  0197b	77 4b		 ja	 SHORT $LN28@draw_weapo
  0197d	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv1287[ebp]
  01983	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN395@draw_weapo[ecx*4]
$LN276@draw_weapo:

; 6353 : 			{
; 6354 : 				case APACHE_LHS_INNER_PYLON:
; 6355 : 				{
; 6356 : 					hardpoint_x = 26;

  0198a	c7 45 a4 1a 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 26 ; 0000001aH

; 6357 : 					hardpoint_y = 377;

  01991	c7 45 a0 79 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 377 ; 00000179H

; 6358 : 
; 6359 : 					break;

  01998	eb 2e		 jmp	 SHORT $LN28@draw_weapo
$LN277@draw_weapo:

; 6360 : 				}
; 6361 : 				case APACHE_RHS_INNER_PYLON:
; 6362 : 				{
; 6363 : 					hardpoint_x = 95;

  0199a	c7 45 a4 5f 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 95 ; 0000005fH

; 6364 : 					hardpoint_y = 377;

  019a1	c7 45 a0 79 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 377 ; 00000179H

; 6365 : 
; 6366 : 					break;

  019a8	eb 1e		 jmp	 SHORT $LN28@draw_weapo
$LN278@draw_weapo:

; 6367 : 				}
; 6368 : 				case APACHE_LHS_OUTER_PYLON:
; 6369 : 				{
; 6370 : 					hardpoint_x = 10;

  019aa	c7 45 a4 0a 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 10 ; 0000000aH

; 6371 : 					hardpoint_y = 377;

  019b1	c7 45 a0 79 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 377 ; 00000179H

; 6372 : 
; 6373 : 					break;

  019b8	eb 0e		 jmp	 SHORT $LN28@draw_weapo
$LN279@draw_weapo:

; 6374 : 				}
; 6375 : 				case APACHE_RHS_OUTER_PYLON:
; 6376 : 				{
; 6377 : 					hardpoint_x = 111;

  019ba	c7 45 a4 6f 00
	00 00		 mov	 DWORD PTR _hardpoint_x$[ebp], 111 ; 0000006fH

; 6378 : 					hardpoint_y = 377;

  019c1	c7 45 a0 79 01
	00 00		 mov	 DWORD PTR _hardpoint_y$[ebp], 377 ; 00000179H
$LN28@draw_weapo:

; 6379 : 
; 6380 : 					break;
; 6381 : 				}
; 6382 : 			}
; 6383 : 
; 6384 : 			if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AGM114K_HELLFIRE_II)

  019c8	83 7d 94 2e	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 46 ; 0000002eH
  019cc	75 48		 jne	 SHORT $LN280@draw_weapo

; 6385 : 			{
; 6386 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  019ce	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  019d1	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  019d4	75 23		 jne	 SHORT $LN282@draw_weapo
  019d6	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  019da	75 1d		 jne	 SHORT $LN282@draw_weapo

; 6387 : 				{
; 6388 : 					draw_sprite (hardpoint_x, hardpoint_y, 133, 261, 15, 6);

  019dc	6a 06		 push	 6
  019de	6a 0f		 push	 15			; 0000000fH
  019e0	68 05 01 00 00	 push	 261			; 00000105H
  019e5	68 85 00 00 00	 push	 133			; 00000085H
  019ea	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  019ed	50		 push	 eax
  019ee	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  019f1	51		 push	 ecx
  019f2	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6389 : 				}
; 6390 : 				else

  019f7	eb 1b		 jmp	 SHORT $LN283@draw_weapo
$LN282@draw_weapo:

; 6391 : 				{
; 6392 : 					draw_sprite (hardpoint_x, hardpoint_y, 173, 261, 15, 6);

  019f9	6a 06		 push	 6
  019fb	6a 0f		 push	 15			; 0000000fH
  019fd	68 05 01 00 00	 push	 261			; 00000105H
  01a02	68 ad 00 00 00	 push	 173			; 000000adH
  01a07	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01a0a	50		 push	 eax
  01a0b	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01a0e	51		 push	 ecx
  01a0f	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN283@draw_weapo:

; 6393 : 				}
; 6394 : 			}
; 6395 : 			else

  01a14	eb 46		 jmp	 SHORT $LN140@draw_weapo
$LN280@draw_weapo:

; 6396 : 			{
; 6397 : 				if ((weapon_sub_type == selected_weapon) && (!damaged))

  01a16	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01a19	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01a1c	75 23		 jne	 SHORT $LN284@draw_weapo
  01a1e	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01a22	75 1d		 jne	 SHORT $LN284@draw_weapo

; 6398 : 				{
; 6399 : 					draw_sprite (hardpoint_x, hardpoint_y, 149, 261, 15, 6);

  01a24	6a 06		 push	 6
  01a26	6a 0f		 push	 15			; 0000000fH
  01a28	68 05 01 00 00	 push	 261			; 00000105H
  01a2d	68 95 00 00 00	 push	 149			; 00000095H
  01a32	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01a35	50		 push	 eax
  01a36	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01a39	51		 push	 ecx
  01a3a	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6400 : 				}
; 6401 : 				else

  01a3f	eb 1b		 jmp	 SHORT $LN140@draw_weapo
$LN284@draw_weapo:

; 6402 : 				{
; 6403 : 					draw_sprite (hardpoint_x, hardpoint_y, 189, 261, 15, 6);

  01a41	6a 06		 push	 6
  01a43	6a 0f		 push	 15			; 0000000fH
  01a45	68 05 01 00 00	 push	 261			; 00000105H
  01a4a	68 bd 00 00 00	 push	 189			; 000000bdH
  01a4f	8b 45 a0	 mov	 eax, DWORD PTR _hardpoint_y$[ebp]
  01a52	50		 push	 eax
  01a53	8b 4d a4	 mov	 ecx, DWORD PTR _hardpoint_x$[ebp]
  01a56	51		 push	 ecx
  01a57	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN140@draw_weapo:

; 6404 : 				}
; 6405 : 			}
; 6406 : 		}
; 6407 : 	}
; 6408 : 
; 6409 : 	////////////////////////////////////////////////////////////////////////////////
; 6410 : 	//
; 6411 : 	// Stingers
; 6412 : 	//
; 6413 : 	////////////////////////////////////////////////////////////////////////////////
; 6414 : 
; 6415 : 	if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_AIM92_STINGER)

  01a5c	83 7d 94 24	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 36 ; 00000024H
  01a60	0f 85 7b 05 00
	00		 jne	 $LN286@draw_weapo

; 6416 : 	{
; 6417 : 		if (draw_large_mfd)

  01a66	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01a6d	0f 84 ac 02 00
	00		 je	 $LN287@draw_weapo

; 6418 : 		{
; 6419 : 			////////////////////////////////////////
; 6420 : 			//
; 6421 : 			// LARGE
; 6422 : 			//
; 6423 : 			////////////////////////////////////////
; 6424 : 
; 6425 : 			//
; 6426 : 			// missiles
; 6427 : 			//
; 6428 : 
; 6429 : 			switch (heading_depth)

  01a73	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  01a76	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv1320[ebp], eax
  01a7c	83 bd 50 ff ff
	ff 04		 cmp	 DWORD PTR tv1320[ebp], 4
  01a83	74 12		 je	 SHORT $LN289@draw_weapo
  01a85	83 bd 50 ff ff
	ff 05		 cmp	 DWORD PTR tv1320[ebp], 5
  01a8c	0f 84 12 01 00
	00		 je	 $LN302@draw_weapo
  01a92	e9 2d 02 00 00	 jmp	 $LN30@draw_weapo
$LN289@draw_weapo:

; 6430 : 			{
; 6431 : 				case APACHE_LHS_WING_TIP_MOUNT:
; 6432 : 				{
; 6433 : 					if (number > 1)

  01a97	83 7d ac 01	 cmp	 DWORD PTR _number$[ebp], 1
  01a9b	7e 40		 jle	 SHORT $LN290@draw_weapo

; 6434 : 					{
; 6435 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01a9d	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01aa0	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01aa3	75 1f		 jne	 SHORT $LN292@draw_weapo
  01aa5	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01aa9	75 19		 jne	 SHORT $LN292@draw_weapo

; 6436 : 						{
; 6437 : 							draw_sprite (6, 144, 280, 61, 16, 16);

  01aab	6a 10		 push	 16			; 00000010H
  01aad	6a 10		 push	 16			; 00000010H
  01aaf	6a 3d		 push	 61			; 0000003dH
  01ab1	68 18 01 00 00	 push	 280			; 00000118H
  01ab6	68 90 00 00 00	 push	 144			; 00000090H
  01abb	6a 06		 push	 6
  01abd	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6438 : 						}
; 6439 : 						else

  01ac2	eb 17		 jmp	 SHORT $LN293@draw_weapo
$LN292@draw_weapo:

; 6440 : 						{
; 6441 : 							draw_sprite (6, 144, 316, 61, 16, 16);

  01ac4	6a 10		 push	 16			; 00000010H
  01ac6	6a 10		 push	 16			; 00000010H
  01ac8	6a 3d		 push	 61			; 0000003dH
  01aca	68 3c 01 00 00	 push	 316			; 0000013cH
  01acf	68 90 00 00 00	 push	 144			; 00000090H
  01ad4	6a 06		 push	 6
  01ad6	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN293@draw_weapo:

; 6442 : 						}
; 6443 : 					}
; 6444 : 					else

  01adb	eb 3e		 jmp	 SHORT $LN291@draw_weapo
$LN290@draw_weapo:

; 6445 : 					{
; 6446 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01add	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01ae0	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01ae3	75 1f		 jne	 SHORT $LN294@draw_weapo
  01ae5	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01ae9	75 19		 jne	 SHORT $LN294@draw_weapo

; 6447 : 						{
; 6448 : 							draw_sprite (6, 144, 262, 61, 16, 16);

  01aeb	6a 10		 push	 16			; 00000010H
  01aed	6a 10		 push	 16			; 00000010H
  01aef	6a 3d		 push	 61			; 0000003dH
  01af1	68 06 01 00 00	 push	 262			; 00000106H
  01af6	68 90 00 00 00	 push	 144			; 00000090H
  01afb	6a 06		 push	 6
  01afd	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6449 : 						}
; 6450 : 						else

  01b02	eb 17		 jmp	 SHORT $LN291@draw_weapo
$LN294@draw_weapo:

; 6451 : 						{
; 6452 : 							draw_sprite (6, 144, 298, 61, 16, 16);

  01b04	6a 10		 push	 16			; 00000010H
  01b06	6a 10		 push	 16			; 00000010H
  01b08	6a 3d		 push	 61			; 0000003dH
  01b0a	68 2a 01 00 00	 push	 298			; 0000012aH
  01b0f	68 90 00 00 00	 push	 144			; 00000090H
  01b14	6a 06		 push	 6
  01b16	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN291@draw_weapo:

; 6453 : 						}
; 6454 : 					}
; 6455 : 
; 6456 : 					if (number > 0)

  01b1b	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  01b1f	7e 40		 jle	 SHORT $LN296@draw_weapo

; 6457 : 					{
; 6458 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01b21	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01b24	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01b27	75 1f		 jne	 SHORT $LN298@draw_weapo
  01b29	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01b2d	75 19		 jne	 SHORT $LN298@draw_weapo

; 6459 : 						{
; 6460 : 							draw_sprite (6, 161, 280, 61, 16, 16);

  01b2f	6a 10		 push	 16			; 00000010H
  01b31	6a 10		 push	 16			; 00000010H
  01b33	6a 3d		 push	 61			; 0000003dH
  01b35	68 18 01 00 00	 push	 280			; 00000118H
  01b3a	68 a1 00 00 00	 push	 161			; 000000a1H
  01b3f	6a 06		 push	 6
  01b41	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6461 : 						}
; 6462 : 						else

  01b46	eb 17		 jmp	 SHORT $LN299@draw_weapo
$LN298@draw_weapo:

; 6463 : 						{
; 6464 : 							draw_sprite (6, 161, 316, 61, 16, 16);

  01b48	6a 10		 push	 16			; 00000010H
  01b4a	6a 10		 push	 16			; 00000010H
  01b4c	6a 3d		 push	 61			; 0000003dH
  01b4e	68 3c 01 00 00	 push	 316			; 0000013cH
  01b53	68 a1 00 00 00	 push	 161			; 000000a1H
  01b58	6a 06		 push	 6
  01b5a	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN299@draw_weapo:

; 6465 : 						}
; 6466 : 					}
; 6467 : 					else

  01b5f	eb 3e		 jmp	 SHORT $LN297@draw_weapo
$LN296@draw_weapo:

; 6468 : 					{
; 6469 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01b61	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01b64	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01b67	75 1f		 jne	 SHORT $LN300@draw_weapo
  01b69	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01b6d	75 19		 jne	 SHORT $LN300@draw_weapo

; 6470 : 						{
; 6471 : 							draw_sprite (6, 161, 262, 61, 16, 16);

  01b6f	6a 10		 push	 16			; 00000010H
  01b71	6a 10		 push	 16			; 00000010H
  01b73	6a 3d		 push	 61			; 0000003dH
  01b75	68 06 01 00 00	 push	 262			; 00000106H
  01b7a	68 a1 00 00 00	 push	 161			; 000000a1H
  01b7f	6a 06		 push	 6
  01b81	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6472 : 						}
; 6473 : 						else

  01b86	eb 17		 jmp	 SHORT $LN297@draw_weapo
$LN300@draw_weapo:

; 6474 : 						{
; 6475 : 							draw_sprite (6, 161, 298, 61, 16, 16);

  01b88	6a 10		 push	 16			; 00000010H
  01b8a	6a 10		 push	 16			; 00000010H
  01b8c	6a 3d		 push	 61			; 0000003dH
  01b8e	68 2a 01 00 00	 push	 298			; 0000012aH
  01b93	68 a1 00 00 00	 push	 161			; 000000a1H
  01b98	6a 06		 push	 6
  01b9a	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN297@draw_weapo:

; 6476 : 						}
; 6477 : 					}
; 6478 : 
; 6479 : 					break;

  01b9f	e9 20 01 00 00	 jmp	 $LN30@draw_weapo
$LN302@draw_weapo:

; 6480 : 				}
; 6481 : 				case APACHE_RHS_WING_TIP_MOUNT:
; 6482 : 				{
; 6483 : 					if (number > 1)

  01ba4	83 7d ac 01	 cmp	 DWORD PTR _number$[ebp], 1
  01ba8	7e 46		 jle	 SHORT $LN303@draw_weapo

; 6484 : 					{
; 6485 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01baa	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01bad	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01bb0	75 22		 jne	 SHORT $LN305@draw_weapo
  01bb2	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01bb6	75 1c		 jne	 SHORT $LN305@draw_weapo

; 6486 : 						{
; 6487 : 							draw_sprite (242, 144, 280, 61, 16, 16);

  01bb8	6a 10		 push	 16			; 00000010H
  01bba	6a 10		 push	 16			; 00000010H
  01bbc	6a 3d		 push	 61			; 0000003dH
  01bbe	68 18 01 00 00	 push	 280			; 00000118H
  01bc3	68 90 00 00 00	 push	 144			; 00000090H
  01bc8	68 f2 00 00 00	 push	 242			; 000000f2H
  01bcd	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6488 : 						}
; 6489 : 						else

  01bd2	eb 1a		 jmp	 SHORT $LN306@draw_weapo
$LN305@draw_weapo:

; 6490 : 						{
; 6491 : 							draw_sprite (242, 144, 316, 61, 16, 16);

  01bd4	6a 10		 push	 16			; 00000010H
  01bd6	6a 10		 push	 16			; 00000010H
  01bd8	6a 3d		 push	 61			; 0000003dH
  01bda	68 3c 01 00 00	 push	 316			; 0000013cH
  01bdf	68 90 00 00 00	 push	 144			; 00000090H
  01be4	68 f2 00 00 00	 push	 242			; 000000f2H
  01be9	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN306@draw_weapo:

; 6492 : 						}
; 6493 : 					}
; 6494 : 					else

  01bee	eb 44		 jmp	 SHORT $LN304@draw_weapo
$LN303@draw_weapo:

; 6495 : 					{
; 6496 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01bf0	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01bf3	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01bf6	75 22		 jne	 SHORT $LN307@draw_weapo
  01bf8	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01bfc	75 1c		 jne	 SHORT $LN307@draw_weapo

; 6497 : 						{
; 6498 : 							draw_sprite (242, 144, 262, 61, 16, 16);

  01bfe	6a 10		 push	 16			; 00000010H
  01c00	6a 10		 push	 16			; 00000010H
  01c02	6a 3d		 push	 61			; 0000003dH
  01c04	68 06 01 00 00	 push	 262			; 00000106H
  01c09	68 90 00 00 00	 push	 144			; 00000090H
  01c0e	68 f2 00 00 00	 push	 242			; 000000f2H
  01c13	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6499 : 						}
; 6500 : 						else

  01c18	eb 1a		 jmp	 SHORT $LN304@draw_weapo
$LN307@draw_weapo:

; 6501 : 						{
; 6502 : 							draw_sprite (242, 144, 298, 61, 16, 16);

  01c1a	6a 10		 push	 16			; 00000010H
  01c1c	6a 10		 push	 16			; 00000010H
  01c1e	6a 3d		 push	 61			; 0000003dH
  01c20	68 2a 01 00 00	 push	 298			; 0000012aH
  01c25	68 90 00 00 00	 push	 144			; 00000090H
  01c2a	68 f2 00 00 00	 push	 242			; 000000f2H
  01c2f	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN304@draw_weapo:

; 6503 : 						}
; 6504 : 					}
; 6505 : 
; 6506 : 					if (number > 0)

  01c34	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  01c38	7e 46		 jle	 SHORT $LN309@draw_weapo

; 6507 : 					{
; 6508 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01c3a	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01c3d	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01c40	75 22		 jne	 SHORT $LN311@draw_weapo
  01c42	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01c46	75 1c		 jne	 SHORT $LN311@draw_weapo

; 6509 : 						{
; 6510 : 							draw_sprite (242, 161, 280, 61, 16, 16);

  01c48	6a 10		 push	 16			; 00000010H
  01c4a	6a 10		 push	 16			; 00000010H
  01c4c	6a 3d		 push	 61			; 0000003dH
  01c4e	68 18 01 00 00	 push	 280			; 00000118H
  01c53	68 a1 00 00 00	 push	 161			; 000000a1H
  01c58	68 f2 00 00 00	 push	 242			; 000000f2H
  01c5d	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6511 : 						}
; 6512 : 						else

  01c62	eb 1a		 jmp	 SHORT $LN312@draw_weapo
$LN311@draw_weapo:

; 6513 : 						{
; 6514 : 							draw_sprite (242, 161, 316, 61, 16, 16);

  01c64	6a 10		 push	 16			; 00000010H
  01c66	6a 10		 push	 16			; 00000010H
  01c68	6a 3d		 push	 61			; 0000003dH
  01c6a	68 3c 01 00 00	 push	 316			; 0000013cH
  01c6f	68 a1 00 00 00	 push	 161			; 000000a1H
  01c74	68 f2 00 00 00	 push	 242			; 000000f2H
  01c79	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN312@draw_weapo:

; 6515 : 						}
; 6516 : 					}
; 6517 : 					else

  01c7e	eb 44		 jmp	 SHORT $LN30@draw_weapo
$LN309@draw_weapo:

; 6518 : 					{
; 6519 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01c80	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01c83	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01c86	75 22		 jne	 SHORT $LN313@draw_weapo
  01c88	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01c8c	75 1c		 jne	 SHORT $LN313@draw_weapo

; 6520 : 						{
; 6521 : 							draw_sprite (242, 161, 262, 61, 16, 16);

  01c8e	6a 10		 push	 16			; 00000010H
  01c90	6a 10		 push	 16			; 00000010H
  01c92	6a 3d		 push	 61			; 0000003dH
  01c94	68 06 01 00 00	 push	 262			; 00000106H
  01c99	68 a1 00 00 00	 push	 161			; 000000a1H
  01c9e	68 f2 00 00 00	 push	 242			; 000000f2H
  01ca3	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6522 : 						}
; 6523 : 						else

  01ca8	eb 1a		 jmp	 SHORT $LN30@draw_weapo
$LN313@draw_weapo:

; 6524 : 						{
; 6525 : 							draw_sprite (242, 161, 298, 61, 16, 16);

  01caa	6a 10		 push	 16			; 00000010H
  01cac	6a 10		 push	 16			; 00000010H
  01cae	6a 3d		 push	 61			; 0000003dH
  01cb0	68 2a 01 00 00	 push	 298			; 0000012aH
  01cb5	68 a1 00 00 00	 push	 161			; 000000a1H
  01cba	68 f2 00 00 00	 push	 242			; 000000f2H
  01cbf	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN30@draw_weapo:

; 6526 : 						}
; 6527 : 					}
; 6528 : 
; 6529 : 					break;
; 6530 : 				}
; 6531 : 			}
; 6532 : 
; 6533 : 			//
; 6534 : 			// damage cross
; 6535 : 			//
; 6536 : 
; 6537 : 			if (damaged)

  01cc4	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01cc8	74 50		 je	 SHORT $LN315@draw_weapo

; 6538 : 			{
; 6539 : 				switch (heading_depth)

  01cca	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  01ccd	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv1440[ebp], eax
  01cd3	83 bd 50 ff ff
	ff 04		 cmp	 DWORD PTR tv1440[ebp], 4
  01cda	74 0b		 je	 SHORT $LN316@draw_weapo
  01cdc	83 bd 50 ff ff
	ff 05		 cmp	 DWORD PTR tv1440[ebp], 5
  01ce3	74 1b		 je	 SHORT $LN317@draw_weapo
  01ce5	eb 33		 jmp	 SHORT $LN315@draw_weapo
$LN316@draw_weapo:

; 6540 : 				{
; 6541 : 					case APACHE_LHS_WING_TIP_MOUNT:
; 6542 : 					{
; 6543 : 						draw_sprite (6, 144, 368, 61, 17, 33);

  01ce7	6a 21		 push	 33			; 00000021H
  01ce9	6a 11		 push	 17			; 00000011H
  01ceb	6a 3d		 push	 61			; 0000003dH
  01ced	68 70 01 00 00	 push	 368			; 00000170H
  01cf2	68 90 00 00 00	 push	 144			; 00000090H
  01cf7	6a 06		 push	 6
  01cf9	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6544 : 
; 6545 : 						break;

  01cfe	eb 1a		 jmp	 SHORT $LN315@draw_weapo
$LN317@draw_weapo:

; 6546 : 					}
; 6547 : 					case APACHE_RHS_WING_TIP_MOUNT:
; 6548 : 					{
; 6549 : 						draw_sprite (241, 144, 368, 61, 17, 33);

  01d00	6a 21		 push	 33			; 00000021H
  01d02	6a 11		 push	 17			; 00000011H
  01d04	6a 3d		 push	 61			; 0000003dH
  01d06	68 70 01 00 00	 push	 368			; 00000170H
  01d0b	68 90 00 00 00	 push	 144			; 00000090H
  01d10	68 f1 00 00 00	 push	 241			; 000000f1H
  01d15	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN315@draw_weapo:

; 6550 : 
; 6551 : 						break;
; 6552 : 					}
; 6553 : 				}
; 6554 : 			}
; 6555 : 		}
; 6556 : 		else

  01d1a	e9 c2 02 00 00	 jmp	 $LN286@draw_weapo
$LN287@draw_weapo:

; 6557 : 		{
; 6558 : 			////////////////////////////////////////
; 6559 : 			//
; 6560 : 			// SMALL
; 6561 : 			//
; 6562 : 			////////////////////////////////////////
; 6563 : 
; 6564 : 			//
; 6565 : 			// missiles
; 6566 : 			//
; 6567 : 
; 6568 : 			switch (heading_depth)

  01d1f	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  01d22	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv1455[ebp], eax
  01d28	83 bd 50 ff ff
	ff 04		 cmp	 DWORD PTR tv1455[ebp], 4
  01d2f	74 12		 je	 SHORT $LN318@draw_weapo
  01d31	83 bd 50 ff ff
	ff 05		 cmp	 DWORD PTR tv1455[ebp], 5
  01d38	0f 84 2a 01 00
	00		 je	 $LN331@draw_weapo
  01d3e	e9 45 02 00 00	 jmp	 $LN34@draw_weapo
$LN318@draw_weapo:

; 6569 : 			{
; 6570 : 				case APACHE_LHS_WING_TIP_MOUNT:
; 6571 : 				{
; 6572 : 					if (number > 1)

  01d43	83 7d ac 01	 cmp	 DWORD PTR _number$[ebp], 1
  01d47	7e 46		 jle	 SHORT $LN319@draw_weapo

; 6573 : 					{
; 6574 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01d49	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01d4c	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01d4f	75 22		 jne	 SHORT $LN321@draw_weapo
  01d51	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01d55	75 1c		 jne	 SHORT $LN321@draw_weapo

; 6575 : 						{
; 6576 : 							draw_sprite (5, 332, 142, 290, 8, 8);

  01d57	6a 08		 push	 8
  01d59	6a 08		 push	 8
  01d5b	68 22 01 00 00	 push	 290			; 00000122H
  01d60	68 8e 00 00 00	 push	 142			; 0000008eH
  01d65	68 4c 01 00 00	 push	 332			; 0000014cH
  01d6a	6a 05		 push	 5
  01d6c	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6577 : 						}
; 6578 : 						else

  01d71	eb 1a		 jmp	 SHORT $LN322@draw_weapo
$LN321@draw_weapo:

; 6579 : 						{
; 6580 : 							draw_sprite (5, 332, 160, 290, 8, 8);

  01d73	6a 08		 push	 8
  01d75	6a 08		 push	 8
  01d77	68 22 01 00 00	 push	 290			; 00000122H
  01d7c	68 a0 00 00 00	 push	 160			; 000000a0H
  01d81	68 4c 01 00 00	 push	 332			; 0000014cH
  01d86	6a 05		 push	 5
  01d88	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN322@draw_weapo:

; 6581 : 						}
; 6582 : 					}
; 6583 : 					else

  01d8d	eb 44		 jmp	 SHORT $LN320@draw_weapo
$LN319@draw_weapo:

; 6584 : 					{
; 6585 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01d8f	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01d92	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01d95	75 22		 jne	 SHORT $LN323@draw_weapo
  01d97	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01d9b	75 1c		 jne	 SHORT $LN323@draw_weapo

; 6586 : 						{
; 6587 : 							draw_sprite (5, 332, 133, 290, 8, 8);

  01d9d	6a 08		 push	 8
  01d9f	6a 08		 push	 8
  01da1	68 22 01 00 00	 push	 290			; 00000122H
  01da6	68 85 00 00 00	 push	 133			; 00000085H
  01dab	68 4c 01 00 00	 push	 332			; 0000014cH
  01db0	6a 05		 push	 5
  01db2	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6588 : 						}
; 6589 : 						else

  01db7	eb 1a		 jmp	 SHORT $LN320@draw_weapo
$LN323@draw_weapo:

; 6590 : 						{
; 6591 : 							draw_sprite (5, 332, 151, 290, 8, 8);

  01db9	6a 08		 push	 8
  01dbb	6a 08		 push	 8
  01dbd	68 22 01 00 00	 push	 290			; 00000122H
  01dc2	68 97 00 00 00	 push	 151			; 00000097H
  01dc7	68 4c 01 00 00	 push	 332			; 0000014cH
  01dcc	6a 05		 push	 5
  01dce	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN320@draw_weapo:

; 6592 : 						}
; 6593 : 					}
; 6594 : 
; 6595 : 					if (number > 0)

  01dd3	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  01dd7	7e 46		 jle	 SHORT $LN325@draw_weapo

; 6596 : 					{
; 6597 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01dd9	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01ddc	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01ddf	75 22		 jne	 SHORT $LN327@draw_weapo
  01de1	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01de5	75 1c		 jne	 SHORT $LN327@draw_weapo

; 6598 : 						{
; 6599 : 							draw_sprite (5, 340, 142, 290, 8, 8);

  01de7	6a 08		 push	 8
  01de9	6a 08		 push	 8
  01deb	68 22 01 00 00	 push	 290			; 00000122H
  01df0	68 8e 00 00 00	 push	 142			; 0000008eH
  01df5	68 54 01 00 00	 push	 340			; 00000154H
  01dfa	6a 05		 push	 5
  01dfc	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6600 : 						}
; 6601 : 						else

  01e01	eb 1a		 jmp	 SHORT $LN328@draw_weapo
$LN327@draw_weapo:

; 6602 : 						{
; 6603 : 							draw_sprite (5, 340, 160, 290, 8, 8);

  01e03	6a 08		 push	 8
  01e05	6a 08		 push	 8
  01e07	68 22 01 00 00	 push	 290			; 00000122H
  01e0c	68 a0 00 00 00	 push	 160			; 000000a0H
  01e11	68 54 01 00 00	 push	 340			; 00000154H
  01e16	6a 05		 push	 5
  01e18	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN328@draw_weapo:

; 6604 : 						}
; 6605 : 					}
; 6606 : 					else

  01e1d	eb 44		 jmp	 SHORT $LN326@draw_weapo
$LN325@draw_weapo:

; 6607 : 					{
; 6608 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01e1f	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01e22	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01e25	75 22		 jne	 SHORT $LN329@draw_weapo
  01e27	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01e2b	75 1c		 jne	 SHORT $LN329@draw_weapo

; 6609 : 						{
; 6610 : 							draw_sprite (5, 340, 133, 290, 8, 8);

  01e2d	6a 08		 push	 8
  01e2f	6a 08		 push	 8
  01e31	68 22 01 00 00	 push	 290			; 00000122H
  01e36	68 85 00 00 00	 push	 133			; 00000085H
  01e3b	68 54 01 00 00	 push	 340			; 00000154H
  01e40	6a 05		 push	 5
  01e42	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6611 : 						}
; 6612 : 						else

  01e47	eb 1a		 jmp	 SHORT $LN326@draw_weapo
$LN329@draw_weapo:

; 6613 : 						{
; 6614 : 							draw_sprite (5, 340, 151, 290, 8, 8);

  01e49	6a 08		 push	 8
  01e4b	6a 08		 push	 8
  01e4d	68 22 01 00 00	 push	 290			; 00000122H
  01e52	68 97 00 00 00	 push	 151			; 00000097H
  01e57	68 54 01 00 00	 push	 340			; 00000154H
  01e5c	6a 05		 push	 5
  01e5e	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN326@draw_weapo:

; 6615 : 						}
; 6616 : 					}
; 6617 : 
; 6618 : 					break;

  01e63	e9 20 01 00 00	 jmp	 $LN34@draw_weapo
$LN331@draw_weapo:

; 6619 : 				}
; 6620 : 				case APACHE_RHS_WING_TIP_MOUNT:
; 6621 : 				{
; 6622 : 					if (number > 1)

  01e68	83 7d ac 01	 cmp	 DWORD PTR _number$[ebp], 1
  01e6c	7e 46		 jle	 SHORT $LN332@draw_weapo

; 6623 : 					{
; 6624 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01e6e	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01e71	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01e74	75 22		 jne	 SHORT $LN334@draw_weapo
  01e76	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01e7a	75 1c		 jne	 SHORT $LN334@draw_weapo

; 6625 : 						{
; 6626 : 							draw_sprite (123, 332, 142, 290, 8, 8);

  01e7c	6a 08		 push	 8
  01e7e	6a 08		 push	 8
  01e80	68 22 01 00 00	 push	 290			; 00000122H
  01e85	68 8e 00 00 00	 push	 142			; 0000008eH
  01e8a	68 4c 01 00 00	 push	 332			; 0000014cH
  01e8f	6a 7b		 push	 123			; 0000007bH
  01e91	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6627 : 						}
; 6628 : 						else

  01e96	eb 1a		 jmp	 SHORT $LN335@draw_weapo
$LN334@draw_weapo:

; 6629 : 						{
; 6630 : 							draw_sprite (123, 332, 160, 290, 8, 8);

  01e98	6a 08		 push	 8
  01e9a	6a 08		 push	 8
  01e9c	68 22 01 00 00	 push	 290			; 00000122H
  01ea1	68 a0 00 00 00	 push	 160			; 000000a0H
  01ea6	68 4c 01 00 00	 push	 332			; 0000014cH
  01eab	6a 7b		 push	 123			; 0000007bH
  01ead	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN335@draw_weapo:

; 6631 : 						}
; 6632 : 					}
; 6633 : 					else

  01eb2	eb 44		 jmp	 SHORT $LN333@draw_weapo
$LN332@draw_weapo:

; 6634 : 					{
; 6635 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01eb4	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01eb7	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01eba	75 22		 jne	 SHORT $LN336@draw_weapo
  01ebc	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01ec0	75 1c		 jne	 SHORT $LN336@draw_weapo

; 6636 : 						{
; 6637 : 							draw_sprite (123, 332, 133, 290, 8, 8);

  01ec2	6a 08		 push	 8
  01ec4	6a 08		 push	 8
  01ec6	68 22 01 00 00	 push	 290			; 00000122H
  01ecb	68 85 00 00 00	 push	 133			; 00000085H
  01ed0	68 4c 01 00 00	 push	 332			; 0000014cH
  01ed5	6a 7b		 push	 123			; 0000007bH
  01ed7	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6638 : 						}
; 6639 : 						else

  01edc	eb 1a		 jmp	 SHORT $LN333@draw_weapo
$LN336@draw_weapo:

; 6640 : 						{
; 6641 : 							draw_sprite (123, 332, 151, 290, 8, 8);

  01ede	6a 08		 push	 8
  01ee0	6a 08		 push	 8
  01ee2	68 22 01 00 00	 push	 290			; 00000122H
  01ee7	68 97 00 00 00	 push	 151			; 00000097H
  01eec	68 4c 01 00 00	 push	 332			; 0000014cH
  01ef1	6a 7b		 push	 123			; 0000007bH
  01ef3	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN333@draw_weapo:

; 6642 : 						}
; 6643 : 					}
; 6644 : 
; 6645 : 					if (number > 0)

  01ef8	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  01efc	7e 46		 jle	 SHORT $LN338@draw_weapo

; 6646 : 					{
; 6647 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01efe	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01f01	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01f04	75 22		 jne	 SHORT $LN340@draw_weapo
  01f06	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01f0a	75 1c		 jne	 SHORT $LN340@draw_weapo

; 6648 : 						{
; 6649 : 							draw_sprite (123, 340, 142, 290, 8, 8);

  01f0c	6a 08		 push	 8
  01f0e	6a 08		 push	 8
  01f10	68 22 01 00 00	 push	 290			; 00000122H
  01f15	68 8e 00 00 00	 push	 142			; 0000008eH
  01f1a	68 54 01 00 00	 push	 340			; 00000154H
  01f1f	6a 7b		 push	 123			; 0000007bH
  01f21	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6650 : 						}
; 6651 : 						else

  01f26	eb 1a		 jmp	 SHORT $LN341@draw_weapo
$LN340@draw_weapo:

; 6652 : 						{
; 6653 : 							draw_sprite (123, 340, 160, 290, 8, 8);

  01f28	6a 08		 push	 8
  01f2a	6a 08		 push	 8
  01f2c	68 22 01 00 00	 push	 290			; 00000122H
  01f31	68 a0 00 00 00	 push	 160			; 000000a0H
  01f36	68 54 01 00 00	 push	 340			; 00000154H
  01f3b	6a 7b		 push	 123			; 0000007bH
  01f3d	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN341@draw_weapo:

; 6654 : 						}
; 6655 : 					}
; 6656 : 					else

  01f42	eb 44		 jmp	 SHORT $LN34@draw_weapo
$LN338@draw_weapo:

; 6657 : 					{
; 6658 : 						if ((weapon_sub_type == selected_weapon) && (!damaged))

  01f44	8b 45 94	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01f47	3b 45 10	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01f4a	75 22		 jne	 SHORT $LN342@draw_weapo
  01f4c	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01f50	75 1c		 jne	 SHORT $LN342@draw_weapo

; 6659 : 						{
; 6660 : 							draw_sprite (123, 340, 133, 290, 8, 8);

  01f52	6a 08		 push	 8
  01f54	6a 08		 push	 8
  01f56	68 22 01 00 00	 push	 290			; 00000122H
  01f5b	68 85 00 00 00	 push	 133			; 00000085H
  01f60	68 54 01 00 00	 push	 340			; 00000154H
  01f65	6a 7b		 push	 123			; 0000007bH
  01f67	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6661 : 						}
; 6662 : 						else

  01f6c	eb 1a		 jmp	 SHORT $LN34@draw_weapo
$LN342@draw_weapo:

; 6663 : 						{
; 6664 : 							draw_sprite (123, 340, 151, 290, 8, 8);

  01f6e	6a 08		 push	 8
  01f70	6a 08		 push	 8
  01f72	68 22 01 00 00	 push	 290			; 00000122H
  01f77	68 97 00 00 00	 push	 151			; 00000097H
  01f7c	68 54 01 00 00	 push	 340			; 00000154H
  01f81	6a 7b		 push	 123			; 0000007bH
  01f83	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN34@draw_weapo:

; 6665 : 						}
; 6666 : 					}
; 6667 : 
; 6668 : 					break;
; 6669 : 				}
; 6670 : 			}
; 6671 : 
; 6672 : 			//
; 6673 : 			// damage cross
; 6674 : 			//
; 6675 : 
; 6676 : 			if (damaged)

  01f88	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01f8c	74 53		 je	 SHORT $LN286@draw_weapo

; 6677 : 			{
; 6678 : 				switch (heading_depth)

  01f8e	8b 45 08	 mov	 eax, DWORD PTR _heading_depth$[ebp]
  01f91	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv1575[ebp], eax
  01f97	83 bd 50 ff ff
	ff 04		 cmp	 DWORD PTR tv1575[ebp], 4
  01f9e	74 0b		 je	 SHORT $LN345@draw_weapo
  01fa0	83 bd 50 ff ff
	ff 05		 cmp	 DWORD PTR tv1575[ebp], 5
  01fa7	74 1e		 je	 SHORT $LN346@draw_weapo
  01fa9	eb 36		 jmp	 SHORT $LN286@draw_weapo
$LN345@draw_weapo:

; 6679 : 				{
; 6680 : 					case APACHE_LHS_WING_TIP_MOUNT:
; 6681 : 					{
; 6682 : 						draw_sprite (5, 332, 186, 290, 8, 17);

  01fab	6a 11		 push	 17			; 00000011H
  01fad	6a 08		 push	 8
  01faf	68 22 01 00 00	 push	 290			; 00000122H
  01fb4	68 ba 00 00 00	 push	 186			; 000000baH
  01fb9	68 4c 01 00 00	 push	 332			; 0000014cH
  01fbe	6a 05		 push	 5
  01fc0	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6683 : 
; 6684 : 						break;

  01fc5	eb 1a		 jmp	 SHORT $LN286@draw_weapo
$LN346@draw_weapo:

; 6685 : 					}
; 6686 : 					case APACHE_RHS_WING_TIP_MOUNT:
; 6687 : 					{
; 6688 : 						draw_sprite (122, 332, 186, 290, 8, 17);

  01fc7	6a 11		 push	 17			; 00000011H
  01fc9	6a 08		 push	 8
  01fcb	68 22 01 00 00	 push	 290			; 00000122H
  01fd0	68 ba 00 00 00	 push	 186			; 000000baH
  01fd5	68 4c 01 00 00	 push	 332			; 0000014cH
  01fda	6a 7a		 push	 122			; 0000007aH
  01fdc	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN286@draw_weapo:

; 6689 : 
; 6690 : 						break;
; 6691 : 					}
; 6692 : 				}
; 6693 : 			}
; 6694 : 		}
; 6695 : 	}
; 6696 : 
; 6697 : 	////////////////////////////////////////////////////////////////////////////////
; 6698 : 	//
; 6699 : 	// Chaff
; 6700 : 	//
; 6701 : 	////////////////////////////////////////////////////////////////////////////////
; 6702 : 
; 6703 : 	if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_CHAFF)

  01fe1	83 7d 94 43	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 67 ; 00000043H
  01fe5	0f 85 1c 02 00
	00		 jne	 $LN347@draw_weapo

; 6704 : 	{
; 6705 : 		if (draw_large_mfd)

  01feb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01ff2	0f 84 07 01 00
	00		 je	 $LN348@draw_weapo

; 6706 : 		{
; 6707 : 			////////////////////////////////////////
; 6708 : 			//
; 6709 : 			// LARGE
; 6710 : 			//
; 6711 : 			////////////////////////////////////////
; 6712 : 
; 6713 : 			//
; 6714 : 			// digits
; 6715 : 			//
; 6716 : 
; 6717 : 			if ((number > 0) && (!damaged))

  01ff8	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  01ffc	7e 26		 jle	 SHORT $LN350@draw_weapo
  01ffe	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  02002	75 20		 jne	 SHORT $LN350@draw_weapo

; 6718 : 			{
; 6719 : 				draw_sprite (94, 160, 483, 3, 18, 14);

  02004	6a 0e		 push	 14			; 0000000eH
  02006	6a 12		 push	 18			; 00000012H
  02008	6a 03		 push	 3
  0200a	68 e3 01 00 00	 push	 483			; 000001e3H
  0200f	68 a0 00 00 00	 push	 160			; 000000a0H
  02014	6a 5e		 push	 94			; 0000005eH
  02016	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6720 : 
; 6721 : 				v = 32;

  0201b	c7 45 98 20 00
	00 00		 mov	 DWORD PTR _v$[ebp], 32	; 00000020H

; 6722 : 			}
; 6723 : 			else

  02022	eb 07		 jmp	 SHORT $LN351@draw_weapo
$LN350@draw_weapo:

; 6724 : 			{
; 6725 : 				v = 47;

  02024	c7 45 98 2f 00
	00 00		 mov	 DWORD PTR _v$[ebp], 47	; 0000002fH
$LN351@draw_weapo:

; 6726 : 			}
; 6727 : 
; 6728 : 			sprintf (buffer, "%02d", number);

  0202b	8b 45 ac	 mov	 eax, DWORD PTR _number$[ebp]
  0202e	50		 push	 eax
  0202f	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  02034	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  02037	51		 push	 ecx
  02038	e8 00 00 00 00	 call	 _sprintf
  0203d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6729 : 
; 6730 : 			if (buffer[0] == '0')

  02040	b8 01 00 00 00	 mov	 eax, 1
  02045	6b c8 00	 imul	 ecx, eax, 0
  02048	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  0204d	83 fa 30	 cmp	 edx, 48			; 00000030H
  02050	75 09		 jne	 SHORT $LN352@draw_weapo

; 6731 : 			{
; 6732 : 				u = 364 + (9 * 10);

  02052	c7 45 9c c6 01
	00 00		 mov	 DWORD PTR _u$[ebp], 454	; 000001c6H

; 6733 : 			}
; 6734 : 			else

  02059	eb 1b		 jmp	 SHORT $LN353@draw_weapo
$LN352@draw_weapo:

; 6735 : 			{
; 6736 : 				u = 364 + ((buffer[0] - '1') * 10);

  0205b	b8 01 00 00 00	 mov	 eax, 1
  02060	6b c8 00	 imul	 ecx, eax, 0
  02063	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  02068	83 ea 31	 sub	 edx, 49			; 00000031H
  0206b	6b c2 0a	 imul	 eax, edx, 10
  0206e	05 6c 01 00 00	 add	 eax, 364		; 0000016cH
  02073	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN353@draw_weapo:

; 6737 : 			}
; 6738 : 
; 6739 : 			draw_sprite (112, 161, u, v, 8, 12);

  02076	6a 0c		 push	 12			; 0000000cH
  02078	6a 08		 push	 8
  0207a	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  0207d	50		 push	 eax
  0207e	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  02081	51		 push	 ecx
  02082	68 a1 00 00 00	 push	 161			; 000000a1H
  02087	6a 70		 push	 112			; 00000070H
  02089	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6740 : 
; 6741 : 			if (buffer[1] == '0')

  0208e	b8 01 00 00 00	 mov	 eax, 1
  02093	c1 e0 00	 shl	 eax, 0
  02096	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  0209b	83 f9 30	 cmp	 ecx, 48			; 00000030H
  0209e	75 09		 jne	 SHORT $LN354@draw_weapo

; 6742 : 			{
; 6743 : 				u = 364 + (9 * 10);

  020a0	c7 45 9c c6 01
	00 00		 mov	 DWORD PTR _u$[ebp], 454	; 000001c6H

; 6744 : 			}
; 6745 : 			else

  020a7	eb 1c		 jmp	 SHORT $LN355@draw_weapo
$LN354@draw_weapo:

; 6746 : 			{
; 6747 : 				u = 364 + ((buffer[1] - '1') * 10);

  020a9	b8 01 00 00 00	 mov	 eax, 1
  020ae	c1 e0 00	 shl	 eax, 0
  020b1	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  020b6	83 e9 31	 sub	 ecx, 49			; 00000031H
  020b9	6b d1 0a	 imul	 edx, ecx, 10
  020bc	81 c2 6c 01 00
	00		 add	 edx, 364		; 0000016cH
  020c2	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN355@draw_weapo:

; 6748 : 			}
; 6749 : 
; 6750 : 			draw_sprite (121, 161, u, v, 8, 12);

  020c5	6a 0c		 push	 12			; 0000000cH
  020c7	6a 08		 push	 8
  020c9	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  020cc	50		 push	 eax
  020cd	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  020d0	51		 push	 ecx
  020d1	68 a1 00 00 00	 push	 161			; 000000a1H
  020d6	6a 79		 push	 121			; 00000079H
  020d8	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6751 : 
; 6752 : 			//
; 6753 : 			// damage cross
; 6754 : 			//
; 6755 : 
; 6756 : 			if (damaged)

  020dd	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  020e1	74 17		 je	 SHORT $LN356@draw_weapo

; 6757 : 			{
; 6758 : 				draw_sprite (96, 159, 387, 61, 33, 17);

  020e3	6a 11		 push	 17			; 00000011H
  020e5	6a 21		 push	 33			; 00000021H
  020e7	6a 3d		 push	 61			; 0000003dH
  020e9	68 83 01 00 00	 push	 387			; 00000183H
  020ee	68 9f 00 00 00	 push	 159			; 0000009fH
  020f3	6a 60		 push	 96			; 00000060H
  020f5	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN356@draw_weapo:

; 6759 : 			}
; 6760 : 		}
; 6761 : 		else

  020fa	e9 08 01 00 00	 jmp	 $LN347@draw_weapo
$LN348@draw_weapo:

; 6762 : 		{
; 6763 : 			////////////////////////////////////////
; 6764 : 			//
; 6765 : 			// SMALL
; 6766 : 			//
; 6767 : 			////////////////////////////////////////
; 6768 : 
; 6769 : 			//
; 6770 : 			// digits
; 6771 : 			//
; 6772 : 
; 6773 : 			if ((number > 0) && (!damaged))

  020ff	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  02103	7e 29		 jle	 SHORT $LN357@draw_weapo
  02105	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  02109	75 23		 jne	 SHORT $LN357@draw_weapo

; 6774 : 			{
; 6775 : 				draw_sprite (49, 340, 243, 261, 9, 7);

  0210b	6a 07		 push	 7
  0210d	6a 09		 push	 9
  0210f	68 05 01 00 00	 push	 261			; 00000105H
  02114	68 f3 00 00 00	 push	 243			; 000000f3H
  02119	68 54 01 00 00	 push	 340			; 00000154H
  0211e	6a 31		 push	 49			; 00000031H
  02120	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6776 : 
; 6777 : 				v = 276;

  02125	c7 45 98 14 01
	00 00		 mov	 DWORD PTR _v$[ebp], 276	; 00000114H

; 6778 : 			}
; 6779 : 			else

  0212c	eb 07		 jmp	 SHORT $LN358@draw_weapo
$LN357@draw_weapo:

; 6780 : 			{
; 6781 : 				v = 283;

  0212e	c7 45 98 1b 01
	00 00		 mov	 DWORD PTR _v$[ebp], 283	; 0000011bH
$LN358@draw_weapo:

; 6782 : 			}
; 6783 : 
; 6784 : 			sprintf (buffer, "%02d", number);

  02135	8b 45 ac	 mov	 eax, DWORD PTR _number$[ebp]
  02138	50		 push	 eax
  02139	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  0213e	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  02141	51		 push	 ecx
  02142	e8 00 00 00 00	 call	 _sprintf
  02147	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6785 : 
; 6786 : 			if (buffer[0] == '0')

  0214a	b8 01 00 00 00	 mov	 eax, 1
  0214f	6b c8 00	 imul	 ecx, eax, 0
  02152	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  02157	83 fa 30	 cmp	 edx, 48			; 00000030H
  0215a	75 09		 jne	 SHORT $LN359@draw_weapo

; 6787 : 			{
; 6788 : 				u = 184 + (9 * 5);

  0215c	c7 45 9c e5 00
	00 00		 mov	 DWORD PTR _u$[ebp], 229	; 000000e5H

; 6789 : 			}
; 6790 : 			else

  02163	eb 1b		 jmp	 SHORT $LN360@draw_weapo
$LN359@draw_weapo:

; 6791 : 			{
; 6792 : 				u = 184 + ((buffer[0] - '1') * 5);

  02165	b8 01 00 00 00	 mov	 eax, 1
  0216a	6b c8 00	 imul	 ecx, eax, 0
  0216d	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  02172	83 ea 31	 sub	 edx, 49			; 00000031H
  02175	6b c2 05	 imul	 eax, edx, 5
  02178	05 b8 00 00 00	 add	 eax, 184		; 000000b8H
  0217d	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN360@draw_weapo:

; 6793 : 			}
; 6794 : 
; 6795 : 			draw_sprite (58, 341, u, v, 4, 6);

  02180	6a 06		 push	 6
  02182	6a 04		 push	 4
  02184	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  02187	50		 push	 eax
  02188	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  0218b	51		 push	 ecx
  0218c	68 55 01 00 00	 push	 341			; 00000155H
  02191	6a 3a		 push	 58			; 0000003aH
  02193	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6796 : 
; 6797 : 			if (buffer[1] == '0')

  02198	b8 01 00 00 00	 mov	 eax, 1
  0219d	c1 e0 00	 shl	 eax, 0
  021a0	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  021a5	83 f9 30	 cmp	 ecx, 48			; 00000030H
  021a8	75 09		 jne	 SHORT $LN361@draw_weapo

; 6798 : 			{
; 6799 : 				u = 184 + (9 * 5);

  021aa	c7 45 9c e5 00
	00 00		 mov	 DWORD PTR _u$[ebp], 229	; 000000e5H

; 6800 : 			}
; 6801 : 			else

  021b1	eb 1c		 jmp	 SHORT $LN362@draw_weapo
$LN361@draw_weapo:

; 6802 : 			{
; 6803 : 				u = 184 + ((buffer[1] - '1') * 5);

  021b3	b8 01 00 00 00	 mov	 eax, 1
  021b8	c1 e0 00	 shl	 eax, 0
  021bb	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  021c0	83 e9 31	 sub	 ecx, 49			; 00000031H
  021c3	6b d1 05	 imul	 edx, ecx, 5
  021c6	81 c2 b8 00 00
	00		 add	 edx, 184		; 000000b8H
  021cc	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN362@draw_weapo:

; 6804 : 			}
; 6805 : 
; 6806 : 			draw_sprite (62, 341, u, v, 4, 6);

  021cf	6a 06		 push	 6
  021d1	6a 04		 push	 4
  021d3	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  021d6	50		 push	 eax
  021d7	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  021da	51		 push	 ecx
  021db	68 55 01 00 00	 push	 341			; 00000155H
  021e0	6a 3e		 push	 62			; 0000003eH
  021e2	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6807 : 
; 6808 : 			//
; 6809 : 			// damage cross
; 6810 : 			//
; 6811 : 
; 6812 : 			if (damaged)

  021e7	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  021eb	74 1a		 je	 SHORT $LN347@draw_weapo

; 6813 : 			{
; 6814 : 				draw_sprite (49, 339, 196, 290, 17, 9);

  021ed	6a 09		 push	 9
  021ef	6a 11		 push	 17			; 00000011H
  021f1	68 22 01 00 00	 push	 290			; 00000122H
  021f6	68 c4 00 00 00	 push	 196			; 000000c4H
  021fb	68 53 01 00 00	 push	 339			; 00000153H
  02200	6a 31		 push	 49			; 00000031H
  02202	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN347@draw_weapo:

; 6815 : 			}
; 6816 : 		}
; 6817 : 	}
; 6818 : 
; 6819 : 	////////////////////////////////////////////////////////////////////////////////
; 6820 : 	//
; 6821 : 	// Flare
; 6822 : 	//
; 6823 : 	////////////////////////////////////////////////////////////////////////////////
; 6824 : 
; 6825 : 	if (weapon_sub_type == ENTITY_SUB_TYPE_WEAPON_FLARE)

  02207	83 7d 94 44	 cmp	 DWORD PTR _weapon_sub_type$[ebp], 68 ; 00000044H
  0220b	0f 85 28 02 00
	00		 jne	 $LN1@draw_weapo

; 6826 : 	{
; 6827 : 		if (draw_large_mfd)

  02211	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02218	0f 84 13 01 00
	00		 je	 $LN365@draw_weapo

; 6828 : 		{
; 6829 : 			////////////////////////////////////////
; 6830 : 			//
; 6831 : 			// LARGE
; 6832 : 			//
; 6833 : 			////////////////////////////////////////
; 6834 : 
; 6835 : 			//
; 6836 : 			// digits
; 6837 : 			//
; 6838 : 
; 6839 : 			if ((number > 0) && (!damaged))

  0221e	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  02222	7e 29		 jle	 SHORT $LN367@draw_weapo
  02224	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  02228	75 23		 jne	 SHORT $LN367@draw_weapo

; 6840 : 			{
; 6841 : 				draw_sprite (134, 160, 503, 3, 15, 14);

  0222a	6a 0e		 push	 14			; 0000000eH
  0222c	6a 0f		 push	 15			; 0000000fH
  0222e	6a 03		 push	 3
  02230	68 f7 01 00 00	 push	 503			; 000001f7H
  02235	68 a0 00 00 00	 push	 160			; 000000a0H
  0223a	68 86 00 00 00	 push	 134			; 00000086H
  0223f	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6842 : 
; 6843 : 				v = 32;

  02244	c7 45 98 20 00
	00 00		 mov	 DWORD PTR _v$[ebp], 32	; 00000020H

; 6844 : 			}
; 6845 : 			else

  0224b	eb 07		 jmp	 SHORT $LN368@draw_weapo
$LN367@draw_weapo:

; 6846 : 			{
; 6847 : 				v = 47;

  0224d	c7 45 98 2f 00
	00 00		 mov	 DWORD PTR _v$[ebp], 47	; 0000002fH
$LN368@draw_weapo:

; 6848 : 			}
; 6849 : 
; 6850 : 			sprintf (buffer, "%02d", number);

  02254	8b 45 ac	 mov	 eax, DWORD PTR _number$[ebp]
  02257	50		 push	 eax
  02258	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  0225d	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  02260	51		 push	 ecx
  02261	e8 00 00 00 00	 call	 _sprintf
  02266	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6851 : 
; 6852 : 			if (buffer[0] == '0')

  02269	b8 01 00 00 00	 mov	 eax, 1
  0226e	6b c8 00	 imul	 ecx, eax, 0
  02271	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  02276	83 fa 30	 cmp	 edx, 48			; 00000030H
  02279	75 09		 jne	 SHORT $LN369@draw_weapo

; 6853 : 			{
; 6854 : 				u = 364 + (9 * 10);

  0227b	c7 45 9c c6 01
	00 00		 mov	 DWORD PTR _u$[ebp], 454	; 000001c6H

; 6855 : 			}
; 6856 : 			else

  02282	eb 1b		 jmp	 SHORT $LN370@draw_weapo
$LN369@draw_weapo:

; 6857 : 			{
; 6858 : 				u = 364 + ((buffer[0] - '1') * 10);

  02284	b8 01 00 00 00	 mov	 eax, 1
  02289	6b c8 00	 imul	 ecx, eax, 0
  0228c	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  02291	83 ea 31	 sub	 edx, 49			; 00000031H
  02294	6b c2 0a	 imul	 eax, edx, 10
  02297	05 6c 01 00 00	 add	 eax, 364		; 0000016cH
  0229c	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN370@draw_weapo:

; 6859 : 			}
; 6860 : 
; 6861 : 			draw_sprite (149, 161, u, v, 8, 12);

  0229f	6a 0c		 push	 12			; 0000000cH
  022a1	6a 08		 push	 8
  022a3	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  022a6	50		 push	 eax
  022a7	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  022aa	51		 push	 ecx
  022ab	68 a1 00 00 00	 push	 161			; 000000a1H
  022b0	68 95 00 00 00	 push	 149			; 00000095H
  022b5	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6862 : 
; 6863 : 			if (buffer[1] == '0')

  022ba	b8 01 00 00 00	 mov	 eax, 1
  022bf	c1 e0 00	 shl	 eax, 0
  022c2	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  022c7	83 f9 30	 cmp	 ecx, 48			; 00000030H
  022ca	75 09		 jne	 SHORT $LN371@draw_weapo

; 6864 : 			{
; 6865 : 				u = 364 + (9 * 10);

  022cc	c7 45 9c c6 01
	00 00		 mov	 DWORD PTR _u$[ebp], 454	; 000001c6H

; 6866 : 			}
; 6867 : 			else

  022d3	eb 1c		 jmp	 SHORT $LN372@draw_weapo
$LN371@draw_weapo:

; 6868 : 			{
; 6869 : 				u = 364 + ((buffer[1] - '1') * 10);

  022d5	b8 01 00 00 00	 mov	 eax, 1
  022da	c1 e0 00	 shl	 eax, 0
  022dd	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  022e2	83 e9 31	 sub	 ecx, 49			; 00000031H
  022e5	6b d1 0a	 imul	 edx, ecx, 10
  022e8	81 c2 6c 01 00
	00		 add	 edx, 364		; 0000016cH
  022ee	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN372@draw_weapo:

; 6870 : 			}
; 6871 : 
; 6872 : 			draw_sprite (158, 161, u, v, 8, 12);

  022f1	6a 0c		 push	 12			; 0000000cH
  022f3	6a 08		 push	 8
  022f5	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  022f8	50		 push	 eax
  022f9	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  022fc	51		 push	 ecx
  022fd	68 a1 00 00 00	 push	 161			; 000000a1H
  02302	68 9e 00 00 00	 push	 158			; 0000009eH
  02307	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6873 : 
; 6874 : 			//
; 6875 : 			// damage cross
; 6876 : 			//
; 6877 : 
; 6878 : 			if (damaged)

  0230c	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  02310	74 1a		 je	 SHORT $LN373@draw_weapo

; 6879 : 			{
; 6880 : 				draw_sprite (135, 159, 387, 61, 33, 17);

  02312	6a 11		 push	 17			; 00000011H
  02314	6a 21		 push	 33			; 00000021H
  02316	6a 3d		 push	 61			; 0000003dH
  02318	68 83 01 00 00	 push	 387			; 00000183H
  0231d	68 9f 00 00 00	 push	 159			; 0000009fH
  02322	68 87 00 00 00	 push	 135			; 00000087H
  02327	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN373@draw_weapo:

; 6881 : 			}
; 6882 : 		}
; 6883 : 		else

  0232c	e9 08 01 00 00	 jmp	 $LN1@draw_weapo
$LN365@draw_weapo:

; 6884 : 		{
; 6885 : 			////////////////////////////////////////
; 6886 : 			//
; 6887 : 			// SMALL
; 6888 : 			//
; 6889 : 			////////////////////////////////////////
; 6890 : 
; 6891 : 			//
; 6892 : 			// digits
; 6893 : 			//
; 6894 : 
; 6895 : 			if ((number > 0) && (!damaged))

  02331	83 7d ac 00	 cmp	 DWORD PTR _number$[ebp], 0
  02335	7e 29		 jle	 SHORT $LN374@draw_weapo
  02337	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0233b	75 23		 jne	 SHORT $LN374@draw_weapo

; 6896 : 			{
; 6897 : 				draw_sprite (69, 340, 253, 261, 8, 7);

  0233d	6a 07		 push	 7
  0233f	6a 08		 push	 8
  02341	68 05 01 00 00	 push	 261			; 00000105H
  02346	68 fd 00 00 00	 push	 253			; 000000fdH
  0234b	68 54 01 00 00	 push	 340			; 00000154H
  02350	6a 45		 push	 69			; 00000045H
  02352	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6898 : 
; 6899 : 				v = 276;

  02357	c7 45 98 14 01
	00 00		 mov	 DWORD PTR _v$[ebp], 276	; 00000114H

; 6900 : 			}
; 6901 : 			else

  0235e	eb 07		 jmp	 SHORT $LN375@draw_weapo
$LN374@draw_weapo:

; 6902 : 			{
; 6903 : 				v = 283;

  02360	c7 45 98 1b 01
	00 00		 mov	 DWORD PTR _v$[ebp], 283	; 0000011bH
$LN375@draw_weapo:

; 6904 : 			}
; 6905 : 
; 6906 : 			sprintf (buffer, "%02d", number);

  02367	8b 45 ac	 mov	 eax, DWORD PTR _number$[ebp]
  0236a	50		 push	 eax
  0236b	68 00 00 00 00	 push	 OFFSET ??_C@_04OGKJMPGK@?$CF02d@
  02370	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  02373	51		 push	 ecx
  02374	e8 00 00 00 00	 call	 _sprintf
  02379	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6907 : 
; 6908 : 			if (buffer[0] == '0')

  0237c	b8 01 00 00 00	 mov	 eax, 1
  02381	6b c8 00	 imul	 ecx, eax, 0
  02384	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  02389	83 fa 30	 cmp	 edx, 48			; 00000030H
  0238c	75 09		 jne	 SHORT $LN376@draw_weapo

; 6909 : 			{
; 6910 : 				u = 184 + (9 * 5);

  0238e	c7 45 9c e5 00
	00 00		 mov	 DWORD PTR _u$[ebp], 229	; 000000e5H

; 6911 : 			}
; 6912 : 			else

  02395	eb 1b		 jmp	 SHORT $LN377@draw_weapo
$LN376@draw_weapo:

; 6913 : 			{
; 6914 : 				u = 184 + ((buffer[0] - '1') * 5);

  02397	b8 01 00 00 00	 mov	 eax, 1
  0239c	6b c8 00	 imul	 ecx, eax, 0
  0239f	0f b6 54 0d b0	 movzx	 edx, BYTE PTR _buffer$[ebp+ecx]
  023a4	83 ea 31	 sub	 edx, 49			; 00000031H
  023a7	6b c2 05	 imul	 eax, edx, 5
  023aa	05 b8 00 00 00	 add	 eax, 184		; 000000b8H
  023af	89 45 9c	 mov	 DWORD PTR _u$[ebp], eax
$LN377@draw_weapo:

; 6915 : 			}
; 6916 : 
; 6917 : 			draw_sprite (77, 341, u, v, 4, 6);

  023b2	6a 06		 push	 6
  023b4	6a 04		 push	 4
  023b6	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  023b9	50		 push	 eax
  023ba	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  023bd	51		 push	 ecx
  023be	68 55 01 00 00	 push	 341			; 00000155H
  023c3	6a 4d		 push	 77			; 0000004dH
  023c5	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6918 : 
; 6919 : 			if (buffer[1] == '0')

  023ca	b8 01 00 00 00	 mov	 eax, 1
  023cf	c1 e0 00	 shl	 eax, 0
  023d2	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  023d7	83 f9 30	 cmp	 ecx, 48			; 00000030H
  023da	75 09		 jne	 SHORT $LN378@draw_weapo

; 6920 : 			{
; 6921 : 				u = 184 + (9 * 5);

  023dc	c7 45 9c e5 00
	00 00		 mov	 DWORD PTR _u$[ebp], 229	; 000000e5H

; 6922 : 			}
; 6923 : 			else

  023e3	eb 1c		 jmp	 SHORT $LN379@draw_weapo
$LN378@draw_weapo:

; 6924 : 			{
; 6925 : 				u = 184 + ((buffer[1] - '1') * 5);

  023e5	b8 01 00 00 00	 mov	 eax, 1
  023ea	c1 e0 00	 shl	 eax, 0
  023ed	0f b6 4c 05 b0	 movzx	 ecx, BYTE PTR _buffer$[ebp+eax]
  023f2	83 e9 31	 sub	 ecx, 49			; 00000031H
  023f5	6b d1 05	 imul	 edx, ecx, 5
  023f8	81 c2 b8 00 00
	00		 add	 edx, 184		; 000000b8H
  023fe	89 55 9c	 mov	 DWORD PTR _u$[ebp], edx
$LN379@draw_weapo:

; 6926 : 			}
; 6927 : 
; 6928 : 			draw_sprite (81, 341, u, v, 4, 6);

  02401	6a 06		 push	 6
  02403	6a 04		 push	 4
  02405	8b 45 98	 mov	 eax, DWORD PTR _v$[ebp]
  02408	50		 push	 eax
  02409	8b 4d 9c	 mov	 ecx, DWORD PTR _u$[ebp]
  0240c	51		 push	 ecx
  0240d	68 55 01 00 00	 push	 341			; 00000155H
  02412	6a 51		 push	 81			; 00000051H
  02414	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite

; 6929 : 
; 6930 : 			//
; 6931 : 			// damage cross
; 6932 : 			//
; 6933 : 
; 6934 : 			if (damaged)

  02419	83 7d a8 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0241d	74 1a		 je	 SHORT $LN1@draw_weapo

; 6935 : 			{
; 6936 : 				draw_sprite (69, 339, 196, 290, 17, 9);

  0241f	6a 09		 push	 9
  02421	6a 11		 push	 17			; 00000011H
  02423	68 22 01 00 00	 push	 290			; 00000122H
  02428	68 c4 00 00 00	 push	 196			; 000000c4H
  0242d	68 53 01 00 00	 push	 339			; 00000153H
  02432	6a 45		 push	 69			; 00000045H
  02434	e8 00 00 00 00	 call	 ?draw_sprite@@YGXHHHHHH@Z ; draw_sprite
$LN1@draw_weapo:

; 6937 : 			}
; 6938 : 		}
; 6939 : 	}
; 6940 : }

  02439	5f		 pop	 edi
  0243a	5e		 pop	 esi
  0243b	5b		 pop	 ebx
  0243c	8b e5		 mov	 esp, ebp
  0243e	5d		 pop	 ebp
  0243f	c2 0c 00	 ret	 12			; 0000000cH
  02442	66 90		 npad	 2
$LN382@draw_weapo:
  02444	00 00 00 00	 DD	 $LN78@draw_weapo
  02448	00 00 00 00	 DD	 $LN79@draw_weapo
  0244c	00 00 00 00	 DD	 $LN80@draw_weapo
  02450	00 00 00 00	 DD	 $LN81@draw_weapo
$LN383@draw_weapo:
  02454	00 00 00 00	 DD	 $LN95@draw_weapo
  02458	00 00 00 00	 DD	 $LN96@draw_weapo
  0245c	00 00 00 00	 DD	 $LN97@draw_weapo
  02460	00 00 00 00	 DD	 $LN98@draw_weapo
$LN384@draw_weapo:
  02464	00 00 00 00	 DD	 $LN99@draw_weapo
  02468	00 00 00 00	 DD	 $LN100@draw_weapo
  0246c	00 00 00 00	 DD	 $LN101@draw_weapo
  02470	00 00 00 00	 DD	 $LN102@draw_weapo
$LN385@draw_weapo:
  02474	00 00 00 00	 DD	 $LN109@draw_weapo
  02478	00 00 00 00	 DD	 $LN110@draw_weapo
  0247c	00 00 00 00	 DD	 $LN111@draw_weapo
  02480	00 00 00 00	 DD	 $LN112@draw_weapo
$LN386@draw_weapo:
  02484	00 00 00 00	 DD	 $LN126@draw_weapo
  02488	00 00 00 00	 DD	 $LN127@draw_weapo
  0248c	00 00 00 00	 DD	 $LN128@draw_weapo
  02490	00 00 00 00	 DD	 $LN129@draw_weapo
$LN387@draw_weapo:
  02494	00 00 00 00	 DD	 $LN130@draw_weapo
  02498	00 00 00 00	 DD	 $LN131@draw_weapo
  0249c	00 00 00 00	 DD	 $LN132@draw_weapo
  024a0	00 00 00 00	 DD	 $LN133@draw_weapo
$LN388@draw_weapo:
  024a4	00 00 00 00	 DD	 $LN144@draw_weapo
  024a8	00 00 00 00	 DD	 $LN145@draw_weapo
  024ac	00 00 00 00	 DD	 $LN146@draw_weapo
  024b0	00 00 00 00	 DD	 $LN147@draw_weapo
$LN389@draw_weapo:
  024b4	00 00 00 00	 DD	 $LN150@draw_weapo
  024b8	00 00 00 00	 DD	 $LN175@draw_weapo
  024bc	00 00 00 00	 DD	 $LN150@draw_weapo
  024c0	00 00 00 00	 DD	 $LN175@draw_weapo
$LN390@draw_weapo:
  024c4	00 00 00 00	 DD	 $LN201@draw_weapo
  024c8	00 00 00 00	 DD	 $LN202@draw_weapo
  024cc	00 00 00 00	 DD	 $LN203@draw_weapo
  024d0	00 00 00 00	 DD	 $LN204@draw_weapo
$LN391@draw_weapo:
  024d4	00 00 00 00	 DD	 $LN205@draw_weapo
  024d8	00 00 00 00	 DD	 $LN206@draw_weapo
  024dc	00 00 00 00	 DD	 $LN207@draw_weapo
  024e0	00 00 00 00	 DD	 $LN208@draw_weapo
$LN392@draw_weapo:
  024e4	00 00 00 00	 DD	 $LN215@draw_weapo
  024e8	00 00 00 00	 DD	 $LN216@draw_weapo
  024ec	00 00 00 00	 DD	 $LN217@draw_weapo
  024f0	00 00 00 00	 DD	 $LN218@draw_weapo
$LN393@draw_weapo:
  024f4	00 00 00 00	 DD	 $LN221@draw_weapo
  024f8	00 00 00 00	 DD	 $LN246@draw_weapo
  024fc	00 00 00 00	 DD	 $LN221@draw_weapo
  02500	00 00 00 00	 DD	 $LN246@draw_weapo
$LN394@draw_weapo:
  02504	00 00 00 00	 DD	 $LN272@draw_weapo
  02508	00 00 00 00	 DD	 $LN273@draw_weapo
  0250c	00 00 00 00	 DD	 $LN274@draw_weapo
  02510	00 00 00 00	 DD	 $LN275@draw_weapo
$LN395@draw_weapo:
  02514	00 00 00 00	 DD	 $LN276@draw_weapo
  02518	00 00 00 00	 DD	 $LN277@draw_weapo
  0251c	00 00 00 00	 DD	 $LN278@draw_weapo
  02520	00 00 00 00	 DD	 $LN279@draw_weapo
?draw_weapon_hardpoint_info@@YGXHHH@Z ENDP		; draw_weapon_hardpoint_info
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_sprite@@YGXHHHHHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_u$ = 16						; size = 4
_v$ = 20						; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
?draw_sprite@@YGXHHHHHH@Z PROC				; draw_sprite, COMDAT

; 5020 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5021 : 	ASSERT (x >= 0);

  00009	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  0000d	7d 18		 jge	 SHORT $LN2@draw_sprit
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_sprite@@YGXHHHHHH@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06EBODONHD@x?5?$DO?$DN?50@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@draw_sprit:

; 5022 : 	ASSERT (y >= 0);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _y$[ebp], 0
  0002b	7d 18		 jge	 SHORT $LN3@draw_sprit
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_sprite@@YGXHHHHHH@Z@4JA
  00032	83 c0 02	 add	 eax, 2
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_06OHJEOGMH@y?5?$DO?$DN?50@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@draw_sprit:

; 5023 : 
; 5024 : 	weapon_sprite.x = weapon_x_offset + x;

  00045	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_x_offset@@3HA
  0004a	03 45 08	 add	 eax, DWORD PTR _x$[ebp]
  0004d	a3 00 00 00 00	 mov	 DWORD PTR ?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A, eax

; 5025 : 
; 5026 : 	weapon_sprite.y = weapon_y_offset + y;

  00052	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_y_offset@@3HA
  00057	03 45 0c	 add	 eax, DWORD PTR _y$[ebp]
  0005a	a3 04 00 00 00	 mov	 DWORD PTR ?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A+4, eax

; 5027 : 
; 5028 : 	weapon_sprite.u = u;

  0005f	8b 45 10	 mov	 eax, DWORD PTR _u$[ebp]
  00062	a3 08 00 00 00	 mov	 DWORD PTR ?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A+8, eax

; 5029 : 
; 5030 : 	weapon_sprite.v = v;

  00067	8b 45 14	 mov	 eax, DWORD PTR _v$[ebp]
  0006a	a3 0c 00 00 00	 mov	 DWORD PTR ?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A+12, eax

; 5031 : 
; 5032 : 	weapon_sprite.width = width;

  0006f	8b 45 18	 mov	 eax, DWORD PTR _width$[ebp]
  00072	a3 10 00 00 00	 mov	 DWORD PTR ?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A+16, eax

; 5033 : 
; 5034 : 	weapon_sprite.height = height;

  00077	8b 45 1c	 mov	 eax, DWORD PTR _height$[ebp]
  0007a	a3 14 00 00 00	 mov	 DWORD PTR ?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A+20, eax

; 5035 : 
; 5036 : 	// JB 030311 Disable EEAH check
; 5037 : 	if (!weapon_sprite_data)

  0007f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?weapon_sprite_data@@3PAEA, 0
  00086	75 02		 jne	 SHORT $LN4@draw_sprit

; 5038 : 		return;

  00088	eb 40		 jmp	 SHORT $LN1@draw_sprit
$LN4@draw_sprit:

; 5039 : 
; 5040 : 	if (weapon_draw_on_texture)

  0008a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?weapon_draw_on_texture@@3HA, 0
  00091	74 20		 je	 SHORT $LN5@draw_sprit

; 5041 : 	{
; 5042 : 		blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture (weapon_sprite_data, weapon_mask_data, &weapon_sprite, video_screen);

  00093	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00098	50		 push	 eax
  00099	68 00 00 00 00	 push	 OFFSET ?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A
  0009e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_mask_data@@3PAEA
  000a4	51		 push	 ecx
  000a5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?weapon_sprite_data@@3PAEA
  000ab	52		 push	 edx
  000ac	e8 00 00 00 00	 call	 ?blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@PAUSCREEN@@@Z ; blit_rgb_alpha_masked_sprite_zero_mask_value_onto_texture

; 5043 : 	}
; 5044 : 	else

  000b1	eb 17		 jmp	 SHORT $LN1@draw_sprit
$LN5@draw_sprit:

; 5045 : 	{
; 5046 : 		blit_rgb_alpha_masked_sprite_zero_mask_value (weapon_sprite_data, weapon_mask_data, &weapon_sprite);

  000b3	68 00 00 00 00	 push	 OFFSET ?weapon_sprite@@3URGB_ALPHA_MASKED_SPRITE_DATA@@A
  000b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_mask_data@@3PAEA
  000bd	50		 push	 eax
  000be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_sprite_data@@3PAEA
  000c4	51		 push	 ecx
  000c5	e8 00 00 00 00	 call	 ?blit_rgb_alpha_masked_sprite_zero_mask_value@@YGXPBE0PBURGB_ALPHA_MASKED_SPRITE_DATA@@@Z ; blit_rgb_alpha_masked_sprite_zero_mask_value
$LN1@draw_sprit:

; 5047 : 	}
; 5048 : }

  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c2 18 00	 ret	 24			; 00000018H
?draw_sprite@@YGXHHHHHH@Z ENDP				; draw_sprite
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_aircraft_survivability_equipment_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv1279 = -352						; size = 4
tv1034 = -348						; size = 4
tv1012 = -348						; size = 4
tv984 = -348						; size = 4
tv962 = -348						; size = 4
tv814 = -348						; size = 4
tv761 = -348						; size = 4
tv738 = -348						; size = 4
tv717 = -348						; size = 4
tv697 = -348						; size = 4
tv662 = -348						; size = 4
tv641 = -348						; size = 4
tv620 = -348						; size = 4
tv601 = -348						; size = 4
tv582 = -348						; size = 4
tv561 = -348						; size = 4
tv540 = -348						; size = 4
tv519 = -348						; size = 4
tv500 = -348						; size = 4
tv481 = -348						; size = 4
tv462 = -348						; size = 4
tv442 = -348						; size = 4
tv414 = -348						; size = 4
tv393 = -348						; size = 4
tv374 = -348						; size = 4
tv355 = -348						; size = 4
tv335 = -348						; size = 4
tv308 = -348						; size = 4
tv280 = -348						; size = 4
tv258 = -348						; size = 4
tv237 = -348						; size = 4
tv218 = -348						; size = 4
tv199 = -348						; size = 4
tv170 = -348						; size = 4
tv150 = -348						; size = 4
tv130 = -348						; size = 4
tv78 = -348						; size = 4
tv1027 = -344						; size = 4
tv1005 = -344						; size = 4
tv977 = -344						; size = 4
tv923 = -344						; size = 4
tv806 = -344						; size = 4
tv753 = -344						; size = 4
tv730 = -344						; size = 4
tv709 = -344						; size = 4
tv689 = -344						; size = 4
tv654 = -344						; size = 4
tv633 = -344						; size = 4
tv613 = -344						; size = 4
tv594 = -344						; size = 4
tv574 = -344						; size = 4
tv554 = -344						; size = 4
tv532 = -344						; size = 4
tv512 = -344						; size = 4
tv493 = -344						; size = 4
tv474 = -344						; size = 4
tv454 = -344						; size = 4
tv434 = -344						; size = 4
tv406 = -344						; size = 4
tv386 = -344						; size = 4
tv367 = -344						; size = 4
tv347 = -344						; size = 4
tv327 = -344						; size = 4
tv300 = -344						; size = 4
tv272 = -344						; size = 4
tv250 = -344						; size = 4
tv230 = -344						; size = 4
tv211 = -344						; size = 4
tv191 = -344						; size = 4
tv162 = -344						; size = 4
tv142 = -344						; size = 4
tv90 = -344						; size = 4
tv70 = -344						; size = 4
_time_to_impact$1 = -276				; size = 4
_closest_missile$2 = -272				; size = 4
_dy$3 = -268						; size = 4
_dx$4 = -264						; size = 4
_air_scan_range$5 = -260				; size = 4
_draw_threat_line$6 = -256				; size = 4
_threat_type$7 = -252					; size = 4
_threat_position$8 = -248				; size = 4
_launched_weapon$9 = -244				; size = 4
_threat$10 = -240					; size = 4
_source_position$ = -236				; size = 4
_source_target$ = -232					; size = 4
_source$ = -228						; size = 4
_source_heading$ = -224					; size = 4
_y_adjust$ = -220					; size = 4
_width$ = -216						; size = 4
_scale$ = -212						; size = 4
_source_side$ = -208					; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
?draw_aircraft_survivability_equipment_display_mfd@@YGXXZ PROC ; draw_aircraft_survivability_equipment_display_mfd, COMDAT

; 4406 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 60 01 00
	00		 sub	 esp, 352		; 00000160H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 4407 : 	char
; 4408 : 		*s,
; 4409 : 		buffer[200];
; 4410 : 
; 4411 : 	entity_sides
; 4412 : 		source_side;
; 4413 : 
; 4414 : 	float
; 4415 : 		scale,
; 4416 : 		width,
; 4417 : 		y_adjust,
; 4418 : 		source_heading;
; 4419 : 
; 4420 : 	entity
; 4421 : 		*source,
; 4422 : 		*source_target;
; 4423 : 
; 4424 : 	vec3d
; 4425 : 		*source_position;
; 4426 : 
; 4427 : 	source = get_gunship_entity ();

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00011	89 85 1c ff ff
	ff		 mov	 DWORD PTR _source$[ebp], eax

; 4428 : 
; 4429 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);

  00017	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0001e	74 10		 je	 SHORT $LN93@draw_aircr
  00020	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]
  00028	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv70[ebp], ecx
  0002e	eb 24		 jmp	 SHORT $LN94@draw_aircr
$LN93@draw_aircr:
  00030	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00036	83 c2 17	 add	 edx, 23			; 00000017H
  00039	52		 push	 edx
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0004a	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN94@draw_aircr:
  00054	b9 01 00 00 00	 mov	 ecx, 1
  00059	85 c9		 test	 ecx, ecx
  0005b	74 0c		 je	 SHORT $LN95@draw_aircr
  0005d	c7 85 a4 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv78[ebp], 187 ; 000000bbH
  00067	eb 24		 jmp	 SHORT $LN96@draw_aircr
$LN95@draw_aircr:
  00069	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  0006f	83 c2 17	 add	 edx, 23			; 00000017H
  00072	52		 push	 edx
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00078	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00083	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN96@draw_aircr:
  0008d	68 bb 00 00 00	 push	 187			; 000000bbH
  00092	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00098	51		 push	 ecx
  00099	69 95 a8 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv70[ebp], 1116
  000a3	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv78[ebp]
  000a9	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000b0	ff d1		 call	 ecx
  000b2	89 85 30 ff ff
	ff		 mov	 DWORD PTR _source_side$[ebp], eax

; 4430 : 
; 4431 : 	source_heading = get_local_entity_float_value (source, FLOAT_TYPE_HEADING);

  000b8	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  000bf	74 10		 je	 SHORT $LN97@draw_aircr
  000c1	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  000c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c9	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  000cf	eb 24		 jmp	 SHORT $LN98@draw_aircr
$LN97@draw_aircr:
  000d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  000d7	83 c2 19	 add	 edx, 25			; 00000019H
  000da	52		 push	 edx
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000eb	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv90[ebp], 0
$LN98@draw_aircr:
  000f5	b9 01 00 00 00	 mov	 ecx, 1
  000fa	85 c9		 test	 ecx, ecx
  000fc	74 0c		 je	 SHORT $LN99@draw_aircr
  000fe	c7 85 a4 fe ff
	ff 34 00 00 00	 mov	 DWORD PTR tv130[ebp], 52 ; 00000034H
  00108	eb 24		 jmp	 SHORT $LN100@draw_aircr
$LN99@draw_aircr:
  0010a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00110	83 c2 19	 add	 edx, 25			; 00000019H
  00113	52		 push	 edx
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00119	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00124	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv130[ebp], 0
$LN100@draw_aircr:
  0012e	6a 34		 push	 52			; 00000034H
  00130	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00136	51		 push	 ecx
  00137	69 95 a8 fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv90[ebp], 700
  00141	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv130[ebp]
  00147	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  0014e	ff d1		 call	 ecx
  00150	d9 9d 20 ff ff
	ff		 fstp	 DWORD PTR _source_heading$[ebp]

; 4432 : 
; 4433 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  00156	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0015d	74 10		 je	 SHORT $LN101@draw_aircr
  0015f	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00165	8b 08		 mov	 ecx, DWORD PTR [eax]
  00167	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv142[ebp], ecx
  0016d	eb 24		 jmp	 SHORT $LN102@draw_aircr
$LN101@draw_aircr:
  0016f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00175	83 c2 1b	 add	 edx, 27			; 0000001bH
  00178	52		 push	 edx
  00179	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0017e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00183	50		 push	 eax
  00184	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00189	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv142[ebp], 0
$LN102@draw_aircr:
  00193	b9 01 00 00 00	 mov	 ecx, 1
  00198	85 c9		 test	 ecx, ecx
  0019a	74 0c		 je	 SHORT $LN103@draw_aircr
  0019c	c7 85 a4 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv150[ebp], 8
  001a6	eb 24		 jmp	 SHORT $LN104@draw_aircr
$LN103@draw_aircr:
  001a8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  001ae	83 c2 1b	 add	 edx, 27			; 0000001bH
  001b1	52		 push	 edx
  001b2	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001bc	50		 push	 eax
  001bd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c2	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], 0
$LN104@draw_aircr:
  001cc	6a 08		 push	 8
  001ce	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  001d4	51		 push	 ecx
  001d5	6b 95 a8 fe ff
	ff 60		 imul	 edx, DWORD PTR tv142[ebp], 96
  001dc	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv150[ebp]
  001e2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  001e9	ff d1		 call	 ecx
  001eb	89 85 14 ff ff
	ff		 mov	 DWORD PTR _source_position$[ebp], eax

; 4434 : 
; 4435 : 	source_target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  001f1	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  001f8	74 10		 je	 SHORT $LN105@draw_aircr
  001fa	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00200	8b 08		 mov	 ecx, DWORD PTR [eax]
  00202	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv162[ebp], ecx
  00208	eb 24		 jmp	 SHORT $LN106@draw_aircr
$LN105@draw_aircr:
  0020a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00210	83 c2 1d	 add	 edx, 29			; 0000001dH
  00213	52		 push	 edx
  00214	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00219	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0021e	50		 push	 eax
  0021f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00224	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv162[ebp], 0
$LN106@draw_aircr:
  0022e	b9 01 00 00 00	 mov	 ecx, 1
  00233	85 c9		 test	 ecx, ecx
  00235	74 0c		 je	 SHORT $LN107@draw_aircr
  00237	c7 85 a4 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv170[ebp], 38 ; 00000026H
  00241	eb 24		 jmp	 SHORT $LN108@draw_aircr
$LN107@draw_aircr:
  00243	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00249	83 c2 1d	 add	 edx, 29			; 0000001dH
  0024c	52		 push	 edx
  0024d	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00252	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00257	50		 push	 eax
  00258	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0025d	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv170[ebp], 0
$LN108@draw_aircr:
  00267	6a 26		 push	 38			; 00000026H
  00269	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  0026f	51		 push	 ecx
  00270	69 95 a8 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv162[ebp], 180
  0027a	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv170[ebp]
  00280	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00287	ff d1		 call	 ecx
  00289	89 85 18 ff ff
	ff		 mov	 DWORD PTR _source_target$[ebp], eax

; 4436 : 
; 4437 : 	scale = RADIUS / tsd_ase_range;

  0028f	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?tsd_ase_range@@3MA
  00297	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fe999999999999a
  0029f	f2 0f 5e c8	 divsd	 xmm1, xmm0
  002a3	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  002a7	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _scale$[ebp], xmm0

; 4438 : 
; 4439 : 	////////////////////////////////////////
; 4440 : 	//
; 4441 : 	// threats
; 4442 : 	//
; 4443 : 	////////////////////////////////////////
; 4444 : 
; 4445 : 	{
; 4446 : 		entity
; 4447 : 			*threat,
; 4448 : 			*launched_weapon;
; 4449 : 
; 4450 : 		vec3d
; 4451 : 			*threat_position;
; 4452 : 
; 4453 : 		threat_types
; 4454 : 			threat_type;
; 4455 : 
; 4456 : 		int
; 4457 : 			draw_threat_line;
; 4458 : 
; 4459 : 		float
; 4460 : 			air_scan_range,
; 4461 : 			dx,
; 4462 : 			dy;
; 4463 : 
; 4464 : 		ase_threat_line_flash_timer -= get_delta_time ();

  002af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?ase_threat_line_flash_timer@@3MA
  002b7	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  002bf	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?ase_threat_line_flash_timer@@3MA, xmm0

; 4465 : 
; 4466 : 		if (ase_threat_line_flash_timer < 0.0)

  002c7	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?ase_threat_line_flash_timer@@3MA
  002cf	0f 57 c9	 xorps	 xmm1, xmm1
  002d2	66 0f 2f c8	 comisd	 xmm1, xmm0
  002d6	76 1d		 jbe	 SHORT $LN12@draw_aircr

; 4467 : 		{
; 4468 : 			ase_threat_line_flash_timer = ASE_THREAT_LINE_FLASH_RATE;

  002d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  002e0	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?ase_threat_line_flash_timer@@3MA, xmm0

; 4469 : 
; 4470 : 			ase_draw_threat_line_status ^= 1;

  002e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ase_draw_threat_line_status@@3HA
  002ed	83 f0 01	 xor	 eax, 1
  002f0	a3 00 00 00 00	 mov	 DWORD PTR ?ase_draw_threat_line_status@@3HA, eax
$LN12@draw_aircr:

; 4471 : 		}
; 4472 : 
; 4473 : 		set_2d_window_rotation (mfd_env, source_heading);

  002f5	51		 push	 ecx
  002f6	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  002fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00303	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00308	50		 push	 eax
  00309	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 4474 : 
; 4475 : 		//
; 4476 : 		// display enemy SAM and AAA threat range circles
; 4477 : 		//
; 4478 : 		// (use the gunship target list so that threats which are not targetting the player are still visible)
; 4479 : 		//
; 4480 : 
; 4481 : 		threat = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  0030e	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00315	74 10		 je	 SHORT $LN109@draw_aircr
  00317	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0031d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0031f	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv191[ebp], ecx
  00325	eb 24		 jmp	 SHORT $LN110@draw_aircr
$LN109@draw_aircr:
  00327	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  0032d	83 c2 4b	 add	 edx, 75			; 0000004bH
  00330	52		 push	 edx
  00331	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00336	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0033b	50		 push	 eax
  0033c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00341	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv191[ebp], 0
$LN110@draw_aircr:
  0034b	b9 01 00 00 00	 mov	 ecx, 1
  00350	85 c9		 test	 ecx, ecx
  00352	74 0c		 je	 SHORT $LN111@draw_aircr
  00354	c7 85 a4 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv199[ebp], 18 ; 00000012H
  0035e	eb 24		 jmp	 SHORT $LN112@draw_aircr
$LN111@draw_aircr:
  00360	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00366	83 c2 4b	 add	 edx, 75			; 0000004bH
  00369	52		 push	 edx
  0036a	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0036f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00374	50		 push	 eax
  00375	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0037a	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv199[ebp], 0
$LN112@draw_aircr:
  00384	6a 12		 push	 18			; 00000012H
  00386	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  0038c	51		 push	 ecx
  0038d	69 95 a8 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv191[ebp], 180
  00397	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv199[ebp]
  0039d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  003a4	ff d1		 call	 ecx
  003a6	89 85 10 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN2@draw_aircr:

; 4482 : 
; 4483 : 		while (threat)

  003ac	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  003b3	0f 84 6a 04 00
	00		 je	 $LN3@draw_aircr

; 4484 : 		{
; 4485 : 			if (!get_local_entity_int_value (threat, INT_TYPE_GROUND_RADAR_CLUTTER))

  003b9	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  003c0	74 10		 je	 SHORT $LN113@draw_aircr
  003c2	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  003c8	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ca	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv211[ebp], ecx
  003d0	eb 20		 jmp	 SHORT $LN114@draw_aircr
$LN113@draw_aircr:
  003d2	68 85 11 00 00	 push	 4485			; 00001185H
  003d7	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  003dc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003e2	52		 push	 edx
  003e3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003e8	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv211[ebp], 0
$LN114@draw_aircr:
  003f2	b8 01 00 00 00	 mov	 eax, 1
  003f7	85 c0		 test	 eax, eax
  003f9	74 0c		 je	 SHORT $LN115@draw_aircr
  003fb	c7 85 a4 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv218[ebp], 66 ; 00000042H
  00405	eb 20		 jmp	 SHORT $LN116@draw_aircr
$LN115@draw_aircr:
  00407	68 85 11 00 00	 push	 4485			; 00001185H
  0040c	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00411	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00417	51		 push	 ecx
  00418	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0041d	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv218[ebp], 0
$LN116@draw_aircr:
  00427	6a 42		 push	 66			; 00000042H
  00429	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  0042f	52		 push	 edx
  00430	69 85 a8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv211[ebp], 1116
  0043a	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv218[ebp]
  00440	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00447	ff d2		 call	 edx
  00449	85 c0		 test	 eax, eax
  0044b	0f 85 2f 03 00
	00		 jne	 $LN15@draw_aircr

; 4486 : 			{
; 4487 : 				if (source_side != get_local_entity_int_value (threat, INT_TYPE_SIDE))

  00451	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00458	74 10		 je	 SHORT $LN117@draw_aircr
  0045a	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00460	8b 08		 mov	 ecx, DWORD PTR [eax]
  00462	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv230[ebp], ecx
  00468	eb 20		 jmp	 SHORT $LN118@draw_aircr
$LN117@draw_aircr:
  0046a	68 87 11 00 00	 push	 4487			; 00001187H
  0046f	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00474	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0047a	52		 push	 edx
  0047b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00480	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv230[ebp], 0
$LN118@draw_aircr:
  0048a	b8 01 00 00 00	 mov	 eax, 1
  0048f	85 c0		 test	 eax, eax
  00491	74 0c		 je	 SHORT $LN119@draw_aircr
  00493	c7 85 a4 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv237[ebp], 187 ; 000000bbH
  0049d	eb 20		 jmp	 SHORT $LN120@draw_aircr
$LN119@draw_aircr:
  0049f	68 87 11 00 00	 push	 4487			; 00001187H
  004a4	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  004a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  004af	51		 push	 ecx
  004b0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004b5	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv237[ebp], 0
$LN120@draw_aircr:
  004bf	68 bb 00 00 00	 push	 187			; 000000bbH
  004c4	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  004ca	52		 push	 edx
  004cb	69 85 a8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv230[ebp], 1116
  004d5	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv237[ebp]
  004db	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  004e2	ff d2		 call	 edx
  004e4	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  004ea	0f 84 90 02 00
	00		 je	 $LN15@draw_aircr

; 4488 : 				{
; 4489 : 					threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  004f0	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  004f7	74 10		 je	 SHORT $LN121@draw_aircr
  004f9	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  004ff	8b 08		 mov	 ecx, DWORD PTR [eax]
  00501	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv250[ebp], ecx
  00507	eb 24		 jmp	 SHORT $LN122@draw_aircr
$LN121@draw_aircr:
  00509	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  0050f	83 c2 53	 add	 edx, 83			; 00000053H
  00512	52		 push	 edx
  00513	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00518	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0051d	50		 push	 eax
  0051e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00523	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv250[ebp], 0
$LN122@draw_aircr:
  0052d	b9 01 00 00 00	 mov	 ecx, 1
  00532	85 c9		 test	 ecx, ecx
  00534	74 0c		 je	 SHORT $LN123@draw_aircr
  00536	c7 85 a4 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv258[ebp], 233 ; 000000e9H
  00540	eb 24		 jmp	 SHORT $LN124@draw_aircr
$LN123@draw_aircr:
  00542	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00548	83 c2 53	 add	 edx, 83			; 00000053H
  0054b	52		 push	 edx
  0054c	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00551	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00556	50		 push	 eax
  00557	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0055c	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv258[ebp], 0
$LN124@draw_aircr:
  00566	68 e9 00 00 00	 push	 233			; 000000e9H
  0056b	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00571	51		 push	 ecx
  00572	69 95 a8 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv250[ebp], 1116
  0057c	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv258[ebp]
  00582	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00589	ff d1		 call	 ecx
  0058b	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 4490 : 
; 4491 : 					if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA))

  00591	83 bd 04 ff ff
	ff 05		 cmp	 DWORD PTR _threat_type$7[ebp], 5
  00598	74 0d		 je	 SHORT $LN16@draw_aircr
  0059a	83 bd 04 ff ff
	ff 06		 cmp	 DWORD PTR _threat_type$7[ebp], 6
  005a1	0f 85 d9 01 00
	00		 jne	 $LN15@draw_aircr
$LN16@draw_aircr:

; 4492 : 					{
; 4493 : 						threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  005a7	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  005ae	74 10		 je	 SHORT $LN125@draw_aircr
  005b0	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  005b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  005b8	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv272[ebp], ecx
  005be	eb 24		 jmp	 SHORT $LN126@draw_aircr
$LN125@draw_aircr:
  005c0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  005c6	83 c2 57	 add	 edx, 87			; 00000057H
  005c9	52		 push	 edx
  005ca	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  005cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  005d4	50		 push	 eax
  005d5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005da	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv272[ebp], 0
$LN126@draw_aircr:
  005e4	b9 01 00 00 00	 mov	 ecx, 1
  005e9	85 c9		 test	 ecx, ecx
  005eb	74 0c		 je	 SHORT $LN127@draw_aircr
  005ed	c7 85 a4 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv280[ebp], 8
  005f7	eb 24		 jmp	 SHORT $LN128@draw_aircr
$LN127@draw_aircr:
  005f9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  005ff	83 c2 57	 add	 edx, 87			; 00000057H
  00602	52		 push	 edx
  00603	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00608	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0060d	50		 push	 eax
  0060e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00613	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv280[ebp], 0
$LN128@draw_aircr:
  0061d	6a 08		 push	 8
  0061f	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00625	51		 push	 ecx
  00626	6b 95 a8 fe ff
	ff 60		 imul	 edx, DWORD PTR tv272[ebp], 96
  0062d	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv280[ebp]
  00633	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0063a	ff d1		 call	 ecx
  0063c	89 85 08 ff ff
	ff		 mov	 DWORD PTR _threat_position$8[ebp], eax

; 4494 : 
; 4495 : 						dx = (threat_position->x - source_position->x) * scale;

  00642	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  00648	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  0064e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00652	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00656	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0065e	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 4496 : 						dy = (threat_position->z - source_position->z) * scale;

  00666	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  0066c	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  00672	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00677	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0067c	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00684	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _dy$3[ebp], xmm0

; 4497 : 
; 4498 : 						air_scan_range = get_local_entity_float_value (threat, FLOAT_TYPE_AIR_SCAN_RANGE) * scale;

  0068c	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00693	74 10		 je	 SHORT $LN129@draw_aircr
  00695	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  0069b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0069d	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv300[ebp], ecx
  006a3	eb 24		 jmp	 SHORT $LN130@draw_aircr
$LN129@draw_aircr:
  006a5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  006ab	83 c2 5c	 add	 edx, 92			; 0000005cH
  006ae	52		 push	 edx
  006af	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  006b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  006b9	50		 push	 eax
  006ba	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006bf	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv300[ebp], 0
$LN130@draw_aircr:
  006c9	b9 01 00 00 00	 mov	 ecx, 1
  006ce	85 c9		 test	 ecx, ecx
  006d0	74 0c		 je	 SHORT $LN131@draw_aircr
  006d2	c7 85 a4 fe ff
	ff 05 00 00 00	 mov	 DWORD PTR tv308[ebp], 5
  006dc	eb 24		 jmp	 SHORT $LN132@draw_aircr
$LN131@draw_aircr:
  006de	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  006e4	83 c2 5c	 add	 edx, 92			; 0000005cH
  006e7	52		 push	 edx
  006e8	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  006ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  006f2	50		 push	 eax
  006f3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006f8	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv308[ebp], 0
$LN132@draw_aircr:
  00702	6a 05		 push	 5
  00704	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  0070a	51		 push	 ecx
  0070b	69 95 a8 fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv300[ebp], 700
  00715	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv308[ebp]
  0071b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00722	ff d1		 call	 ecx
  00724	d9 9d a0 fe ff
	ff		 fstp	 DWORD PTR tv1279[ebp]
  0072a	f3 0f 10 85 a0
	fe ff ff	 movss	 xmm0, DWORD PTR tv1279[ebp]
  00732	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0073a	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR _air_scan_range$5[ebp], xmm0

; 4499 : 
; 4500 : 						draw_2d_circle (dx, dy, air_scan_range, MFD_COLOUR2);

  00742	b8 04 00 00 00	 mov	 eax, 4
  00747	c1 e0 00	 shl	 eax, 0
  0074a	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00750	51		 push	 ecx
  00751	51		 push	 ecx
  00752	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR _air_scan_range$5[ebp]
  0075a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0075f	51		 push	 ecx
  00760	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  00768	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0076d	51		 push	 ecx
  0076e	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  00776	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077b	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle
$LN15@draw_aircr:

; 4501 : 					}
; 4502 : 				}
; 4503 : 			}
; 4504 : 
; 4505 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_GUNSHIP_TARGET);

  00780	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00787	74 10		 je	 SHORT $LN133@draw_aircr
  00789	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  0078f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00791	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv327[ebp], ecx
  00797	eb 24		 jmp	 SHORT $LN134@draw_aircr
$LN133@draw_aircr:
  00799	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  0079f	83 c2 63	 add	 edx, 99			; 00000063H
  007a2	52		 push	 edx
  007a3	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  007a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  007ad	50		 push	 eax
  007ae	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  007b3	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv327[ebp], 0
$LN134@draw_aircr:
  007bd	b9 01 00 00 00	 mov	 ecx, 1
  007c2	85 c9		 test	 ecx, ecx
  007c4	74 0c		 je	 SHORT $LN135@draw_aircr
  007c6	c7 85 a4 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv335[ebp], 18 ; 00000012H
  007d0	eb 24		 jmp	 SHORT $LN136@draw_aircr
$LN135@draw_aircr:
  007d2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  007d8	83 c2 63	 add	 edx, 99			; 00000063H
  007db	52		 push	 edx
  007dc	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  007e1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  007e6	50		 push	 eax
  007e7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  007ec	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv335[ebp], 0
$LN136@draw_aircr:
  007f6	6a 12		 push	 18			; 00000012H
  007f8	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  007fe	51		 push	 ecx
  007ff	69 95 a8 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv327[ebp], 180
  00809	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv335[ebp]
  0080f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00816	ff d1		 call	 ecx
  00818	89 85 10 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 4506 : 		}

  0081e	e9 89 fb ff ff	 jmp	 $LN2@draw_aircr
$LN3@draw_aircr:

; 4507 : 
; 4508 : 		//
; 4509 : 		// display enemy SAM, AAA and AIRBORNE_RADAR threats
; 4510 : 		//
; 4511 : 
; 4512 : 		threat = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  00823	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0082a	74 10		 je	 SHORT $LN137@draw_aircr
  0082c	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00832	8b 08		 mov	 ecx, DWORD PTR [eax]
  00834	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv347[ebp], ecx
  0083a	eb 24		 jmp	 SHORT $LN138@draw_aircr
$LN137@draw_aircr:
  0083c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00842	83 c2 6a	 add	 edx, 106		; 0000006aH
  00845	52		 push	 edx
  00846	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0084b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00850	50		 push	 eax
  00851	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00856	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv347[ebp], 0
$LN138@draw_aircr:
  00860	b9 01 00 00 00	 mov	 ecx, 1
  00865	85 c9		 test	 ecx, ecx
  00867	74 0c		 je	 SHORT $LN139@draw_aircr
  00869	c7 85 a4 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv355[ebp], 18 ; 00000012H
  00873	eb 24		 jmp	 SHORT $LN140@draw_aircr
$LN139@draw_aircr:
  00875	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  0087b	83 c2 6a	 add	 edx, 106		; 0000006aH
  0087e	52		 push	 edx
  0087f	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00884	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00889	50		 push	 eax
  0088a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0088f	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv355[ebp], 0
$LN140@draw_aircr:
  00899	6a 12		 push	 18			; 00000012H
  0089b	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  008a1	51		 push	 ecx
  008a2	69 95 a8 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv347[ebp], 180
  008ac	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv355[ebp]
  008b2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  008b9	ff d1		 call	 ecx
  008bb	89 85 10 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN4@draw_aircr:

; 4513 : 
; 4514 : 		while (threat)

  008c1	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  008c8	0f 84 bb 02 00
	00		 je	 $LN5@draw_aircr

; 4515 : 		{
; 4516 : 			if (!get_local_entity_int_value (threat, INT_TYPE_GROUND_RADAR_CLUTTER))

  008ce	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  008d5	74 10		 je	 SHORT $LN141@draw_aircr
  008d7	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  008dd	8b 08		 mov	 ecx, DWORD PTR [eax]
  008df	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv367[ebp], ecx
  008e5	eb 20		 jmp	 SHORT $LN142@draw_aircr
$LN141@draw_aircr:
  008e7	68 a4 11 00 00	 push	 4516			; 000011a4H
  008ec	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  008f1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  008f7	52		 push	 edx
  008f8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008fd	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv367[ebp], 0
$LN142@draw_aircr:
  00907	b8 01 00 00 00	 mov	 eax, 1
  0090c	85 c0		 test	 eax, eax
  0090e	74 0c		 je	 SHORT $LN143@draw_aircr
  00910	c7 85 a4 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv374[ebp], 66 ; 00000042H
  0091a	eb 20		 jmp	 SHORT $LN144@draw_aircr
$LN143@draw_aircr:
  0091c	68 a4 11 00 00	 push	 4516			; 000011a4H
  00921	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00926	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0092c	51		 push	 ecx
  0092d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00932	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv374[ebp], 0
$LN144@draw_aircr:
  0093c	6a 42		 push	 66			; 00000042H
  0093e	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00944	52		 push	 edx
  00945	69 85 a8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv367[ebp], 1116
  0094f	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv374[ebp]
  00955	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0095c	ff d2		 call	 edx
  0095e	85 c0		 test	 eax, eax
  00960	0f 85 80 01 00
	00		 jne	 $LN19@draw_aircr

; 4517 : 			{
; 4518 : 				if (source_side != get_local_entity_int_value (threat, INT_TYPE_SIDE))

  00966	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0096d	74 10		 je	 SHORT $LN145@draw_aircr
  0096f	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00975	8b 08		 mov	 ecx, DWORD PTR [eax]
  00977	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv386[ebp], ecx
  0097d	eb 20		 jmp	 SHORT $LN146@draw_aircr
$LN145@draw_aircr:
  0097f	68 a6 11 00 00	 push	 4518			; 000011a6H
  00984	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00989	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0098f	52		 push	 edx
  00990	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00995	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv386[ebp], 0
$LN146@draw_aircr:
  0099f	b8 01 00 00 00	 mov	 eax, 1
  009a4	85 c0		 test	 eax, eax
  009a6	74 0c		 je	 SHORT $LN147@draw_aircr
  009a8	c7 85 a4 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv393[ebp], 187 ; 000000bbH
  009b2	eb 20		 jmp	 SHORT $LN148@draw_aircr
$LN147@draw_aircr:
  009b4	68 a6 11 00 00	 push	 4518			; 000011a6H
  009b9	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  009be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  009c4	51		 push	 ecx
  009c5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009ca	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv393[ebp], 0
$LN148@draw_aircr:
  009d4	68 bb 00 00 00	 push	 187			; 000000bbH
  009d9	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  009df	52		 push	 edx
  009e0	69 85 a8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv386[ebp], 1116
  009ea	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv393[ebp]
  009f0	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  009f7	ff d2		 call	 edx
  009f9	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  009ff	0f 84 e1 00 00
	00		 je	 $LN19@draw_aircr

; 4519 : 				{
; 4520 : 					threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  00a05	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00a0c	74 10		 je	 SHORT $LN149@draw_aircr
  00a0e	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00a14	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a16	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv406[ebp], ecx
  00a1c	eb 24		 jmp	 SHORT $LN150@draw_aircr
$LN149@draw_aircr:
  00a1e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00a24	83 c2 72	 add	 edx, 114		; 00000072H
  00a27	52		 push	 edx
  00a28	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a2d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00a32	50		 push	 eax
  00a33	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a38	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv406[ebp], 0
$LN150@draw_aircr:
  00a42	b9 01 00 00 00	 mov	 ecx, 1
  00a47	85 c9		 test	 ecx, ecx
  00a49	74 0c		 je	 SHORT $LN151@draw_aircr
  00a4b	c7 85 a4 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv414[ebp], 233 ; 000000e9H
  00a55	eb 24		 jmp	 SHORT $LN152@draw_aircr
$LN151@draw_aircr:
  00a57	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00a5d	83 c2 72	 add	 edx, 114		; 00000072H
  00a60	52		 push	 edx
  00a61	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a66	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00a6b	50		 push	 eax
  00a6c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a71	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv414[ebp], 0
$LN152@draw_aircr:
  00a7b	68 e9 00 00 00	 push	 233			; 000000e9H
  00a80	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00a86	51		 push	 ecx
  00a87	69 95 a8 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv406[ebp], 1116
  00a91	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv414[ebp]
  00a97	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00a9e	ff d1		 call	 ecx
  00aa0	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 4521 : 
; 4522 : 					if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA) || (threat_type == THREAT_TYPE_AIRBORNE_RADAR))

  00aa6	83 bd 04 ff ff
	ff 05		 cmp	 DWORD PTR _threat_type$7[ebp], 5
  00aad	74 12		 je	 SHORT $LN20@draw_aircr
  00aaf	83 bd 04 ff ff
	ff 06		 cmp	 DWORD PTR _threat_type$7[ebp], 6
  00ab6	74 09		 je	 SHORT $LN20@draw_aircr
  00ab8	83 bd 04 ff ff
	ff 04		 cmp	 DWORD PTR _threat_type$7[ebp], 4
  00abf	75 25		 jne	 SHORT $LN19@draw_aircr
$LN20@draw_aircr:

; 4523 : 					{
; 4524 : 						draw_radar_target_symbol (threat, source_position, scale, FALSE, FALSE);

  00ac1	6a 00		 push	 0
  00ac3	6a 00		 push	 0
  00ac5	51		 push	 ecx
  00ac6	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00ace	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ad3	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00ad9	50		 push	 eax
  00ada	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00ae0	51		 push	 ecx
  00ae1	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN19@draw_aircr:

; 4525 : 					}
; 4526 : 				}
; 4527 : 			}
; 4528 : 
; 4529 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_GUNSHIP_TARGET);

  00ae6	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00aed	74 10		 je	 SHORT $LN153@draw_aircr
  00aef	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00af5	8b 08		 mov	 ecx, DWORD PTR [eax]
  00af7	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv434[ebp], ecx
  00afd	eb 24		 jmp	 SHORT $LN154@draw_aircr
$LN153@draw_aircr:
  00aff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00b05	83 c2 7b	 add	 edx, 123		; 0000007bH
  00b08	52		 push	 edx
  00b09	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b0e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00b13	50		 push	 eax
  00b14	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b19	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv434[ebp], 0
$LN154@draw_aircr:
  00b23	b9 01 00 00 00	 mov	 ecx, 1
  00b28	85 c9		 test	 ecx, ecx
  00b2a	74 0c		 je	 SHORT $LN155@draw_aircr
  00b2c	c7 85 a4 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv442[ebp], 18 ; 00000012H
  00b36	eb 24		 jmp	 SHORT $LN156@draw_aircr
$LN155@draw_aircr:
  00b38	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00b3e	83 c2 7b	 add	 edx, 123		; 0000007bH
  00b41	52		 push	 edx
  00b42	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b47	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00b4c	50		 push	 eax
  00b4d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b52	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv442[ebp], 0
$LN156@draw_aircr:
  00b5c	6a 12		 push	 18			; 00000012H
  00b5e	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00b64	51		 push	 ecx
  00b65	69 95 a8 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv434[ebp], 180
  00b6f	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv442[ebp]
  00b75	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00b7c	ff d1		 call	 ecx
  00b7e	89 85 10 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 4530 : 		}

  00b84	e9 38 fd ff ff	 jmp	 $LN4@draw_aircr
$LN5@draw_aircr:

; 4531 : 
; 4532 : 		//
; 4533 : 		// draw threat line if gunship is targetted (flash if missile fired)
; 4534 : 		//
; 4535 : 
; 4536 : 		threat = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  00b89	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00b90	74 10		 je	 SHORT $LN157@draw_aircr
  00b92	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00b98	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b9a	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv454[ebp], ecx
  00ba0	eb 27		 jmp	 SHORT $LN158@draw_aircr
$LN157@draw_aircr:
  00ba2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00ba8	81 c2 82 00 00
	00		 add	 edx, 130		; 00000082H
  00bae	52		 push	 edx
  00baf	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00bb4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00bb9	50		 push	 eax
  00bba	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00bbf	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv454[ebp], 0
$LN158@draw_aircr:
  00bc9	b9 01 00 00 00	 mov	 ecx, 1
  00bce	85 c9		 test	 ecx, ecx
  00bd0	74 0c		 je	 SHORT $LN159@draw_aircr
  00bd2	c7 85 a4 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv462[ebp], 18 ; 00000012H
  00bdc	eb 27		 jmp	 SHORT $LN160@draw_aircr
$LN159@draw_aircr:
  00bde	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00be4	81 c2 82 00 00
	00		 add	 edx, 130		; 00000082H
  00bea	52		 push	 edx
  00beb	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00bf0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00bf5	50		 push	 eax
  00bf6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00bfb	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv462[ebp], 0
$LN160@draw_aircr:
  00c05	6a 12		 push	 18			; 00000012H
  00c07	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00c0d	51		 push	 ecx
  00c0e	69 95 a8 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv454[ebp], 180
  00c18	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv462[ebp]
  00c1e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00c25	ff d1		 call	 ecx
  00c27	89 85 10 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN6@draw_aircr:

; 4537 : 
; 4538 : 		while (threat)

  00c2d	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00c34	0f 84 be 07 00
	00		 je	 $LN7@draw_aircr

; 4539 : 		{
; 4540 : 			if (!get_local_entity_int_value (threat, INT_TYPE_GROUND_RADAR_CLUTTER))

  00c3a	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00c41	74 10		 je	 SHORT $LN161@draw_aircr
  00c43	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00c49	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c4b	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv474[ebp], ecx
  00c51	eb 20		 jmp	 SHORT $LN162@draw_aircr
$LN161@draw_aircr:
  00c53	68 bc 11 00 00	 push	 4540			; 000011bcH
  00c58	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c5d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00c63	52		 push	 edx
  00c64	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c69	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv474[ebp], 0
$LN162@draw_aircr:
  00c73	b8 01 00 00 00	 mov	 eax, 1
  00c78	85 c0		 test	 eax, eax
  00c7a	74 0c		 je	 SHORT $LN163@draw_aircr
  00c7c	c7 85 a4 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv481[ebp], 66 ; 00000042H
  00c86	eb 20		 jmp	 SHORT $LN164@draw_aircr
$LN163@draw_aircr:
  00c88	68 bc 11 00 00	 push	 4540			; 000011bcH
  00c8d	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c92	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00c98	51		 push	 ecx
  00c99	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c9e	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv481[ebp], 0
$LN164@draw_aircr:
  00ca8	6a 42		 push	 66			; 00000042H
  00caa	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00cb0	52		 push	 edx
  00cb1	69 85 a8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv474[ebp], 1116
  00cbb	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv481[ebp]
  00cc1	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00cc8	ff d2		 call	 edx
  00cca	85 c0		 test	 eax, eax
  00ccc	0f 85 7d 06 00
	00		 jne	 $LN29@draw_aircr

; 4541 : 			{
; 4542 : 				if (source_side != get_local_entity_int_value (threat, INT_TYPE_SIDE))

  00cd2	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00cd9	74 10		 je	 SHORT $LN165@draw_aircr
  00cdb	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00ce1	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ce3	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv493[ebp], ecx
  00ce9	eb 20		 jmp	 SHORT $LN166@draw_aircr
$LN165@draw_aircr:
  00ceb	68 be 11 00 00	 push	 4542			; 000011beH
  00cf0	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00cf5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00cfb	52		 push	 edx
  00cfc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d01	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv493[ebp], 0
$LN166@draw_aircr:
  00d0b	b8 01 00 00 00	 mov	 eax, 1
  00d10	85 c0		 test	 eax, eax
  00d12	74 0c		 je	 SHORT $LN167@draw_aircr
  00d14	c7 85 a4 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv500[ebp], 187 ; 000000bbH
  00d1e	eb 20		 jmp	 SHORT $LN168@draw_aircr
$LN167@draw_aircr:
  00d20	68 be 11 00 00	 push	 4542			; 000011beH
  00d25	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d2a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00d30	51		 push	 ecx
  00d31	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d36	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv500[ebp], 0
$LN168@draw_aircr:
  00d40	68 bb 00 00 00	 push	 187			; 000000bbH
  00d45	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00d4b	52		 push	 edx
  00d4c	69 85 a8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv493[ebp], 1116
  00d56	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv500[ebp]
  00d5c	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00d63	ff d2		 call	 edx
  00d65	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  00d6b	0f 84 de 05 00
	00		 je	 $LN29@draw_aircr

; 4543 : 				{
; 4544 : 					if (get_local_entity_int_value (threat, INT_TYPE_RADAR_ON))

  00d71	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00d78	74 10		 je	 SHORT $LN169@draw_aircr
  00d7a	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00d80	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d82	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv512[ebp], ecx
  00d88	eb 20		 jmp	 SHORT $LN170@draw_aircr
$LN169@draw_aircr:
  00d8a	68 c0 11 00 00	 push	 4544			; 000011c0H
  00d8f	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d94	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00d9a	52		 push	 edx
  00d9b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00da0	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv512[ebp], 0
$LN170@draw_aircr:
  00daa	b8 01 00 00 00	 mov	 eax, 1
  00daf	85 c0		 test	 eax, eax
  00db1	74 0c		 je	 SHORT $LN171@draw_aircr
  00db3	c7 85 a4 fe ff
	ff a9 00 00 00	 mov	 DWORD PTR tv519[ebp], 169 ; 000000a9H
  00dbd	eb 20		 jmp	 SHORT $LN172@draw_aircr
$LN171@draw_aircr:
  00dbf	68 c0 11 00 00	 push	 4544			; 000011c0H
  00dc4	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00dc9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00dcf	51		 push	 ecx
  00dd0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00dd5	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv519[ebp], 0
$LN172@draw_aircr:
  00ddf	68 a9 00 00 00	 push	 169			; 000000a9H
  00de4	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00dea	52		 push	 edx
  00deb	69 85 a8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv512[ebp], 1116
  00df5	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv519[ebp]
  00dfb	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00e02	ff d2		 call	 edx
  00e04	85 c0		 test	 eax, eax
  00e06	0f 84 43 05 00
	00		 je	 $LN29@draw_aircr

; 4545 : 					{
; 4546 : 						threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  00e0c	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00e13	74 10		 je	 SHORT $LN173@draw_aircr
  00e15	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00e1b	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e1d	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv532[ebp], ecx
  00e23	eb 27		 jmp	 SHORT $LN174@draw_aircr
$LN173@draw_aircr:
  00e25	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00e2b	81 c2 8c 00 00
	00		 add	 edx, 140		; 0000008cH
  00e31	52		 push	 edx
  00e32	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e37	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00e3c	50		 push	 eax
  00e3d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e42	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv532[ebp], 0
$LN174@draw_aircr:
  00e4c	b9 01 00 00 00	 mov	 ecx, 1
  00e51	85 c9		 test	 ecx, ecx
  00e53	74 0c		 je	 SHORT $LN175@draw_aircr
  00e55	c7 85 a4 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv540[ebp], 233 ; 000000e9H
  00e5f	eb 27		 jmp	 SHORT $LN176@draw_aircr
$LN175@draw_aircr:
  00e61	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00e67	81 c2 8c 00 00
	00		 add	 edx, 140		; 0000008cH
  00e6d	52		 push	 edx
  00e6e	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e73	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00e78	50		 push	 eax
  00e79	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e7e	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv540[ebp], 0
$LN176@draw_aircr:
  00e88	68 e9 00 00 00	 push	 233			; 000000e9H
  00e8d	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00e93	51		 push	 ecx
  00e94	69 95 a8 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv532[ebp], 1116
  00e9e	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv540[ebp]
  00ea4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00eab	ff d1		 call	 ecx
  00ead	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 4547 : 
; 4548 : 						if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA) || (threat_type == THREAT_TYPE_AIRBORNE_RADAR))

  00eb3	83 bd 04 ff ff
	ff 05		 cmp	 DWORD PTR _threat_type$7[ebp], 5
  00eba	74 16		 je	 SHORT $LN25@draw_aircr
  00ebc	83 bd 04 ff ff
	ff 06		 cmp	 DWORD PTR _threat_type$7[ebp], 6
  00ec3	74 0d		 je	 SHORT $LN25@draw_aircr
  00ec5	83 bd 04 ff ff
	ff 04		 cmp	 DWORD PTR _threat_type$7[ebp], 4
  00ecc	0f 85 7d 04 00
	00		 jne	 $LN29@draw_aircr
$LN25@draw_aircr:

; 4549 : 						{
; 4550 : 							if (get_local_entity_parent (threat, LIST_TYPE_TARGET) == source)

  00ed2	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00ed9	74 10		 je	 SHORT $LN177@draw_aircr
  00edb	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00ee1	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ee3	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv554[ebp], ecx
  00ee9	eb 20		 jmp	 SHORT $LN178@draw_aircr
$LN177@draw_aircr:
  00eeb	68 c6 11 00 00	 push	 4550			; 000011c6H
  00ef0	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ef5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00efb	52		 push	 edx
  00efc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f01	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv554[ebp], 0
$LN178@draw_aircr:
  00f0b	b8 01 00 00 00	 mov	 eax, 1
  00f10	85 c0		 test	 eax, eax
  00f12	74 0c		 je	 SHORT $LN179@draw_aircr
  00f14	c7 85 a4 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv561[ebp], 38 ; 00000026H
  00f1e	eb 20		 jmp	 SHORT $LN180@draw_aircr
$LN179@draw_aircr:
  00f20	68 c6 11 00 00	 push	 4550			; 000011c6H
  00f25	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f2a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00f30	51		 push	 ecx
  00f31	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f36	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv561[ebp], 0
$LN180@draw_aircr:
  00f40	6a 26		 push	 38			; 00000026H
  00f42	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00f48	52		 push	 edx
  00f49	69 85 a8 fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv554[ebp], 180
  00f53	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv561[ebp]
  00f59	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  00f60	ff d2		 call	 edx
  00f62	3b 85 1c ff ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  00f68	0f 85 e1 03 00
	00		 jne	 $LN29@draw_aircr

; 4551 : 							{
; 4552 : 								draw_threat_line = TRUE;

  00f6e	c7 85 00 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _draw_threat_line$6[ebp], 1

; 4553 : 
; 4554 : 								launched_weapon = get_local_entity_first_child (threat, LIST_TYPE_LAUNCHED_WEAPON);

  00f78	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00f7f	74 10		 je	 SHORT $LN181@draw_aircr
  00f81	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00f87	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f89	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv574[ebp], ecx
  00f8f	eb 27		 jmp	 SHORT $LN182@draw_aircr
$LN181@draw_aircr:
  00f91	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00f97	81 c2 94 00 00
	00		 add	 edx, 148		; 00000094H
  00f9d	52		 push	 edx
  00f9e	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00fa3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00fa8	50		 push	 eax
  00fa9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00fae	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv574[ebp], 0
$LN182@draw_aircr:
  00fb8	b9 01 00 00 00	 mov	 ecx, 1
  00fbd	85 c9		 test	 ecx, ecx
  00fbf	74 0c		 je	 SHORT $LN183@draw_aircr
  00fc1	c7 85 a4 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv582[ebp], 24 ; 00000018H
  00fcb	eb 27		 jmp	 SHORT $LN184@draw_aircr
$LN183@draw_aircr:
  00fcd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  00fd3	81 c2 94 00 00
	00		 add	 edx, 148		; 00000094H
  00fd9	52		 push	 edx
  00fda	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00fdf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00fe4	50		 push	 eax
  00fe5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00fea	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv582[ebp], 0
$LN184@draw_aircr:
  00ff4	6a 18		 push	 24			; 00000018H
  00ff6	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00ffc	51		 push	 ecx
  00ffd	69 95 a8 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv574[ebp], 180
  01007	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv582[ebp]
  0100d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01014	ff d1		 call	 ecx
  01016	89 85 0c ff ff
	ff		 mov	 DWORD PTR _launched_weapon$9[ebp], eax
$LN8@draw_aircr:

; 4555 : 
; 4556 : 								while (launched_weapon)

  0101c	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  01023	0f 84 ec 01 00
	00		 je	 $LN9@draw_aircr

; 4557 : 								{
; 4558 : 									if (get_local_entity_int_value (launched_weapon, INT_TYPE_WEAPON_GUIDANCE_TYPE) != WEAPON_GUIDANCE_TYPE_NONE)

  01029	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  01030	74 10		 je	 SHORT $LN185@draw_aircr
  01032	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$9[ebp]
  01038	8b 08		 mov	 ecx, DWORD PTR [eax]
  0103a	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv594[ebp], ecx
  01040	eb 20		 jmp	 SHORT $LN186@draw_aircr
$LN185@draw_aircr:
  01042	68 ce 11 00 00	 push	 4558			; 000011ceH
  01047	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0104c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01052	52		 push	 edx
  01053	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01058	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv594[ebp], 0
$LN186@draw_aircr:
  01062	b8 01 00 00 00	 mov	 eax, 1
  01067	85 c0		 test	 eax, eax
  01069	74 0c		 je	 SHORT $LN187@draw_aircr
  0106b	c7 85 a4 fe ff
	ff 07 01 00 00	 mov	 DWORD PTR tv601[ebp], 263 ; 00000107H
  01075	eb 20		 jmp	 SHORT $LN188@draw_aircr
$LN187@draw_aircr:
  01077	68 ce 11 00 00	 push	 4558			; 000011ceH
  0107c	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01081	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01087	51		 push	 ecx
  01088	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0108d	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv601[ebp], 0
$LN188@draw_aircr:
  01097	68 07 01 00 00	 push	 263			; 00000107H
  0109c	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$9[ebp]
  010a2	52		 push	 edx
  010a3	69 85 a8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv594[ebp], 1116
  010ad	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv601[ebp]
  010b3	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  010ba	ff d2		 call	 edx
  010bc	85 c0		 test	 eax, eax
  010be	0f 84 a8 00 00
	00		 je	 $LN28@draw_aircr

; 4559 : 									{
; 4560 : 										if (get_local_entity_parent (launched_weapon, LIST_TYPE_TARGET) == source)

  010c4	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  010cb	74 10		 je	 SHORT $LN189@draw_aircr
  010cd	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$9[ebp]
  010d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  010d5	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv613[ebp], ecx
  010db	eb 20		 jmp	 SHORT $LN190@draw_aircr
$LN189@draw_aircr:
  010dd	68 d0 11 00 00	 push	 4560			; 000011d0H
  010e2	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  010e7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  010ed	52		 push	 edx
  010ee	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  010f3	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv613[ebp], 0
$LN190@draw_aircr:
  010fd	b8 01 00 00 00	 mov	 eax, 1
  01102	85 c0		 test	 eax, eax
  01104	74 0c		 je	 SHORT $LN191@draw_aircr
  01106	c7 85 a4 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv620[ebp], 38 ; 00000026H
  01110	eb 20		 jmp	 SHORT $LN192@draw_aircr
$LN191@draw_aircr:
  01112	68 d0 11 00 00	 push	 4560			; 000011d0H
  01117	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0111c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01122	51		 push	 ecx
  01123	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01128	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv620[ebp], 0
$LN192@draw_aircr:
  01132	6a 26		 push	 38			; 00000026H
  01134	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$9[ebp]
  0113a	52		 push	 edx
  0113b	69 85 a8 fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv613[ebp], 180
  01145	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv620[ebp]
  0114b	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  01152	ff d2		 call	 edx
  01154	3b 85 1c ff ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  0115a	75 10		 jne	 SHORT $LN28@draw_aircr

; 4561 : 										{
; 4562 : 											draw_threat_line = ase_draw_threat_line_status;

  0115c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ase_draw_threat_line_status@@3HA
  01161	89 85 00 ff ff
	ff		 mov	 DWORD PTR _draw_threat_line$6[ebp], eax

; 4563 : 
; 4564 : 											break;

  01167	e9 a9 00 00 00	 jmp	 $LN9@draw_aircr
$LN28@draw_aircr:

; 4565 : 										}
; 4566 : 									}
; 4567 : 
; 4568 : 									launched_weapon = get_local_entity_child_succ (launched_weapon, LIST_TYPE_LAUNCHED_WEAPON);

  0116c	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  01173	74 10		 je	 SHORT $LN193@draw_aircr
  01175	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$9[ebp]
  0117b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0117d	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv633[ebp], ecx
  01183	eb 27		 jmp	 SHORT $LN194@draw_aircr
$LN193@draw_aircr:
  01185	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  0118b	81 c2 a2 00 00
	00		 add	 edx, 162		; 000000a2H
  01191	52		 push	 edx
  01192	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01197	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0119c	50		 push	 eax
  0119d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  011a2	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv633[ebp], 0
$LN194@draw_aircr:
  011ac	b9 01 00 00 00	 mov	 ecx, 1
  011b1	85 c9		 test	 ecx, ecx
  011b3	74 0c		 je	 SHORT $LN195@draw_aircr
  011b5	c7 85 a4 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv641[ebp], 24 ; 00000018H
  011bf	eb 27		 jmp	 SHORT $LN196@draw_aircr
$LN195@draw_aircr:
  011c1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  011c7	81 c2 a2 00 00
	00		 add	 edx, 162		; 000000a2H
  011cd	52		 push	 edx
  011ce	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  011d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  011d8	50		 push	 eax
  011d9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  011de	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv641[ebp], 0
$LN196@draw_aircr:
  011e8	6a 18		 push	 24			; 00000018H
  011ea	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _launched_weapon$9[ebp]
  011f0	51		 push	 ecx
  011f1	69 95 a8 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv633[ebp], 180
  011fb	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv641[ebp]
  01201	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01208	ff d1		 call	 ecx
  0120a	89 85 0c ff ff
	ff		 mov	 DWORD PTR _launched_weapon$9[ebp], eax

; 4569 : 								}

  01210	e9 07 fe ff ff	 jmp	 $LN8@draw_aircr
$LN9@draw_aircr:

; 4570 : 
; 4571 : 								if (draw_threat_line)

  01215	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _draw_threat_line$6[ebp], 0
  0121c	0f 84 2d 01 00
	00		 je	 $LN29@draw_aircr

; 4572 : 								{
; 4573 : 									threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  01222	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  01229	74 10		 je	 SHORT $LN197@draw_aircr
  0122b	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  01231	8b 08		 mov	 ecx, DWORD PTR [eax]
  01233	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv654[ebp], ecx
  01239	eb 27		 jmp	 SHORT $LN198@draw_aircr
$LN197@draw_aircr:
  0123b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  01241	81 c2 a7 00 00
	00		 add	 edx, 167		; 000000a7H
  01247	52		 push	 edx
  01248	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0124d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01252	50		 push	 eax
  01253	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01258	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv654[ebp], 0
$LN198@draw_aircr:
  01262	b9 01 00 00 00	 mov	 ecx, 1
  01267	85 c9		 test	 ecx, ecx
  01269	74 0c		 je	 SHORT $LN199@draw_aircr
  0126b	c7 85 a4 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv662[ebp], 8
  01275	eb 27		 jmp	 SHORT $LN200@draw_aircr
$LN199@draw_aircr:
  01277	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  0127d	81 c2 a7 00 00
	00		 add	 edx, 167		; 000000a7H
  01283	52		 push	 edx
  01284	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01289	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0128e	50		 push	 eax
  0128f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01294	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv662[ebp], 0
$LN200@draw_aircr:
  0129e	6a 08		 push	 8
  012a0	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  012a6	51		 push	 ecx
  012a7	6b 95 a8 fe ff
	ff 60		 imul	 edx, DWORD PTR tv654[ebp], 96
  012ae	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv662[ebp]
  012b4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  012bb	ff d1		 call	 ecx
  012bd	89 85 08 ff ff
	ff		 mov	 DWORD PTR _threat_position$8[ebp], eax

; 4574 : 
; 4575 : 									dx = (threat_position->x - source_position->x) * scale;

  012c3	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  012c9	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  012cf	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  012d3	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  012d7	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  012df	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 4576 : 									dy = (threat_position->z - source_position->z) * scale;

  012e7	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  012ed	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  012f3	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  012f8	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  012fd	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01305	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _dy$3[ebp], xmm0

; 4577 : 
; 4578 : 									draw_2d_line (0.0, 0.0, dx, dy, MFD_COLOUR1);

  0130d	b8 04 00 00 00	 mov	 eax, 4
  01312	6b c8 00	 imul	 ecx, eax, 0
  01315	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0131b	52		 push	 edx
  0131c	51		 push	 ecx
  0131d	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  01325	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0132a	51		 push	 ecx
  0132b	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  01333	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01338	51		 push	 ecx
  01339	0f 57 c0	 xorps	 xmm0, xmm0
  0133c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01341	51		 push	 ecx
  01342	0f 57 c0	 xorps	 xmm0, xmm0
  01345	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0134a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN29@draw_aircr:

; 4579 : 								}
; 4580 : 							}
; 4581 : 						}
; 4582 : 					}
; 4583 : 				}
; 4584 : 			}
; 4585 : 
; 4586 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_GUNSHIP_TARGET);

  0134f	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  01356	74 10		 je	 SHORT $LN201@draw_aircr
  01358	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  0135e	8b 08		 mov	 ecx, DWORD PTR [eax]
  01360	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv689[ebp], ecx
  01366	eb 27		 jmp	 SHORT $LN202@draw_aircr
$LN201@draw_aircr:
  01368	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  0136e	81 c2 b4 00 00
	00		 add	 edx, 180		; 000000b4H
  01374	52		 push	 edx
  01375	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0137a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0137f	50		 push	 eax
  01380	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01385	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv689[ebp], 0
$LN202@draw_aircr:
  0138f	b9 01 00 00 00	 mov	 ecx, 1
  01394	85 c9		 test	 ecx, ecx
  01396	74 0c		 je	 SHORT $LN203@draw_aircr
  01398	c7 85 a4 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv697[ebp], 18 ; 00000012H
  013a2	eb 27		 jmp	 SHORT $LN204@draw_aircr
$LN203@draw_aircr:
  013a4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  013aa	81 c2 b4 00 00
	00		 add	 edx, 180		; 000000b4H
  013b0	52		 push	 edx
  013b1	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  013b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  013bb	50		 push	 eax
  013bc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  013c1	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv697[ebp], 0
$LN204@draw_aircr:
  013cb	6a 12		 push	 18			; 00000012H
  013cd	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  013d3	51		 push	 ecx
  013d4	69 95 a8 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv689[ebp], 180
  013de	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv697[ebp]
  013e4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  013eb	ff d1		 call	 ecx
  013ed	89 85 10 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 4587 : 		}

  013f3	e9 35 f8 ff ff	 jmp	 $LN6@draw_aircr
$LN7@draw_aircr:

; 4588 : 
; 4589 : 		//
; 4590 : 		// draw incoming missiles
; 4591 : 		//
; 4592 : 
; 4593 : 		threat = get_local_entity_first_child (source, LIST_TYPE_TARGET);

  013f8	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  013ff	74 10		 je	 SHORT $LN205@draw_aircr
  01401	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01407	8b 08		 mov	 ecx, DWORD PTR [eax]
  01409	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv709[ebp], ecx
  0140f	eb 27		 jmp	 SHORT $LN206@draw_aircr
$LN205@draw_aircr:
  01411	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  01417	81 c2 bb 00 00
	00		 add	 edx, 187		; 000000bbH
  0141d	52		 push	 edx
  0141e	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01423	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01428	50		 push	 eax
  01429	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0142e	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv709[ebp], 0
$LN206@draw_aircr:
  01438	b9 01 00 00 00	 mov	 ecx, 1
  0143d	85 c9		 test	 ecx, ecx
  0143f	74 0c		 je	 SHORT $LN207@draw_aircr
  01441	c7 85 a4 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv717[ebp], 38 ; 00000026H
  0144b	eb 27		 jmp	 SHORT $LN208@draw_aircr
$LN207@draw_aircr:
  0144d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  01453	81 c2 bb 00 00
	00		 add	 edx, 187		; 000000bbH
  01459	52		 push	 edx
  0145a	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0145f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01464	50		 push	 eax
  01465	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0146a	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv717[ebp], 0
$LN208@draw_aircr:
  01474	6a 26		 push	 38			; 00000026H
  01476	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  0147c	51		 push	 ecx
  0147d	69 95 a8 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv709[ebp], 180
  01487	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv717[ebp]
  0148d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01494	ff d1		 call	 ecx
  01496	89 85 10 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN10@draw_aircr:

; 4594 : 
; 4595 : 		while (threat)

  0149c	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  014a3	0f 84 39 03 00
	00		 je	 $LN11@draw_aircr

; 4596 : 		{
; 4597 : 			threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  014a9	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  014b0	74 10		 je	 SHORT $LN209@draw_aircr
  014b2	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  014b8	8b 08		 mov	 ecx, DWORD PTR [eax]
  014ba	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv730[ebp], ecx
  014c0	eb 27		 jmp	 SHORT $LN210@draw_aircr
$LN209@draw_aircr:
  014c2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  014c8	81 c2 bf 00 00
	00		 add	 edx, 191		; 000000bfH
  014ce	52		 push	 edx
  014cf	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  014d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  014d9	50		 push	 eax
  014da	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  014df	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv730[ebp], 0
$LN210@draw_aircr:
  014e9	b9 01 00 00 00	 mov	 ecx, 1
  014ee	85 c9		 test	 ecx, ecx
  014f0	74 0c		 je	 SHORT $LN211@draw_aircr
  014f2	c7 85 a4 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv738[ebp], 233 ; 000000e9H
  014fc	eb 27		 jmp	 SHORT $LN212@draw_aircr
$LN211@draw_aircr:
  014fe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  01504	81 c2 bf 00 00
	00		 add	 edx, 191		; 000000bfH
  0150a	52		 push	 edx
  0150b	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01510	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01515	50		 push	 eax
  01516	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0151b	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv738[ebp], 0
$LN212@draw_aircr:
  01525	68 e9 00 00 00	 push	 233			; 000000e9H
  0152a	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  01530	51		 push	 ecx
  01531	69 95 a8 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv730[ebp], 1116
  0153b	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv738[ebp]
  01541	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  01548	ff d1		 call	 ecx
  0154a	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 4598 : 
; 4599 : 			if ((threat_type == THREAT_TYPE_RF_MISSILE) || (threat_type == THREAT_TYPE_IR_MISSILE) || (threat_type == THREAT_TYPE_LASER_MISSILE))

  01550	83 bd 04 ff ff
	ff 01		 cmp	 DWORD PTR _threat_type$7[ebp], 1
  01557	74 16		 je	 SHORT $LN31@draw_aircr
  01559	83 bd 04 ff ff
	ff 02		 cmp	 DWORD PTR _threat_type$7[ebp], 2
  01560	74 0d		 je	 SHORT $LN31@draw_aircr
  01562	83 bd 04 ff ff
	ff 03		 cmp	 DWORD PTR _threat_type$7[ebp], 3
  01569	0f 85 ca 01 00
	00		 jne	 $LN33@draw_aircr
$LN31@draw_aircr:

; 4600 : 			{
; 4601 : 				threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  0156f	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  01576	74 10		 je	 SHORT $LN213@draw_aircr
  01578	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  0157e	8b 08		 mov	 ecx, DWORD PTR [eax]
  01580	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv753[ebp], ecx
  01586	eb 27		 jmp	 SHORT $LN214@draw_aircr
$LN213@draw_aircr:
  01588	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  0158e	81 c2 c3 00 00
	00		 add	 edx, 195		; 000000c3H
  01594	52		 push	 edx
  01595	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0159a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0159f	50		 push	 eax
  015a0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  015a5	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv753[ebp], 0
$LN214@draw_aircr:
  015af	b9 01 00 00 00	 mov	 ecx, 1
  015b4	85 c9		 test	 ecx, ecx
  015b6	74 0c		 je	 SHORT $LN215@draw_aircr
  015b8	c7 85 a4 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv761[ebp], 8
  015c2	eb 27		 jmp	 SHORT $LN216@draw_aircr
$LN215@draw_aircr:
  015c4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  015ca	81 c2 c3 00 00
	00		 add	 edx, 195		; 000000c3H
  015d0	52		 push	 edx
  015d1	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  015d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  015db	50		 push	 eax
  015dc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  015e1	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv761[ebp], 0
$LN216@draw_aircr:
  015eb	6a 08		 push	 8
  015ed	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  015f3	51		 push	 ecx
  015f4	6b 95 a8 fe ff
	ff 60		 imul	 edx, DWORD PTR tv753[ebp], 96
  015fb	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv761[ebp]
  01601	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  01608	ff d1		 call	 ecx
  0160a	89 85 08 ff ff
	ff		 mov	 DWORD PTR _threat_position$8[ebp], eax

; 4602 : 
; 4603 : 				dx = (threat_position->x - source_position->x) * scale;

  01610	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  01616	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  0161c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01620	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  01624	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0162c	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 4604 : 				dy = (threat_position->z - source_position->z) * scale;

  01634	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  0163a	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01640	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01645	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0164a	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01652	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _dy$3[ebp], xmm0

; 4605 : 
; 4606 : 				if (draw_large_mfd)

  0165a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01661	74 6c		 je	 SHORT $LN32@draw_aircr

; 4607 : 				{
; 4608 : 					draw_2d_mono_sprite (large_ase_missile_mask, dx, dy, MFD_COLOUR6);

  01663	b8 04 00 00 00	 mov	 eax, 4
  01668	6b c8 05	 imul	 ecx, eax, 5
  0166b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01671	52		 push	 edx
  01672	51		 push	 ecx
  01673	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  0167b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01680	51		 push	 ecx
  01681	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  01689	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0168e	68 00 00 00 00	 push	 OFFSET ?large_ase_missile_mask@@3PADA
  01693	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4609 : 
; 4610 : 					draw_2d_mono_sprite (large_ase_missile, dx, dy, MFD_COLOUR1);

  01698	b8 04 00 00 00	 mov	 eax, 4
  0169d	6b c8 00	 imul	 ecx, eax, 0
  016a0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  016a6	52		 push	 edx
  016a7	51		 push	 ecx
  016a8	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  016b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016b5	51		 push	 ecx
  016b6	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  016be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016c3	68 00 00 00 00	 push	 OFFSET ?large_ase_missile@@3PADA
  016c8	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4611 : 				}
; 4612 : 				else

  016cd	eb 6a		 jmp	 SHORT $LN33@draw_aircr
$LN32@draw_aircr:

; 4613 : 				{
; 4614 : 					draw_2d_mono_sprite (small_ase_missile_mask, dx, dy, MFD_COLOUR6);

  016cf	b8 04 00 00 00	 mov	 eax, 4
  016d4	6b c8 05	 imul	 ecx, eax, 5
  016d7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  016dd	52		 push	 edx
  016de	51		 push	 ecx
  016df	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  016e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016ec	51		 push	 ecx
  016ed	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  016f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016fa	68 00 00 00 00	 push	 OFFSET ?small_ase_missile_mask@@3PADA
  016ff	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4615 : 
; 4616 : 					draw_2d_mono_sprite (small_ase_missile, dx, dy, MFD_COLOUR1);

  01704	b8 04 00 00 00	 mov	 eax, 4
  01709	6b c8 00	 imul	 ecx, eax, 0
  0170c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01712	52		 push	 edx
  01713	51		 push	 ecx
  01714	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  0171c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01721	51		 push	 ecx
  01722	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  0172a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0172f	68 00 00 00 00	 push	 OFFSET ?small_ase_missile@@3PADA
  01734	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN33@draw_aircr:

; 4617 : 				}
; 4618 : 			}
; 4619 : 
; 4620 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_TARGET);

  01739	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  01740	74 10		 je	 SHORT $LN217@draw_aircr
  01742	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  01748	8b 08		 mov	 ecx, DWORD PTR [eax]
  0174a	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv806[ebp], ecx
  01750	eb 27		 jmp	 SHORT $LN218@draw_aircr
$LN217@draw_aircr:
  01752	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  01758	81 c2 d6 00 00
	00		 add	 edx, 214		; 000000d6H
  0175e	52		 push	 edx
  0175f	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01764	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01769	50		 push	 eax
  0176a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0176f	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv806[ebp], 0
$LN218@draw_aircr:
  01779	b9 01 00 00 00	 mov	 ecx, 1
  0177e	85 c9		 test	 ecx, ecx
  01780	74 0c		 je	 SHORT $LN219@draw_aircr
  01782	c7 85 a4 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv814[ebp], 38 ; 00000026H
  0178c	eb 27		 jmp	 SHORT $LN220@draw_aircr
$LN219@draw_aircr:
  0178e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXXZ@4JA
  01794	81 c2 d6 00 00
	00		 add	 edx, 214		; 000000d6H
  0179a	52		 push	 edx
  0179b	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  017a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  017a5	50		 push	 eax
  017a6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  017ab	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv814[ebp], 0
$LN220@draw_aircr:
  017b5	6a 26		 push	 38			; 00000026H
  017b7	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  017bd	51		 push	 ecx
  017be	69 95 a8 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv806[ebp], 180
  017c8	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv814[ebp]
  017ce	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  017d5	ff d1		 call	 ecx
  017d7	89 85 10 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 4621 : 		}

  017dd	e9 ba fc ff ff	 jmp	 $LN10@draw_aircr
$LN11@draw_aircr:

; 4622 : 
; 4623 : 		set_2d_window_rotation (mfd_env, 0.0);

  017e2	51		 push	 ecx
  017e3	0f 57 c0	 xorps	 xmm0, xmm0
  017e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  017f0	50		 push	 eax
  017f1	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 4624 : 	}
; 4625 : 
; 4626 : 	////////////////////////////////////////
; 4627 : 	//
; 4628 : 	// aircraft datum symbol
; 4629 : 	//
; 4630 : 	////////////////////////////////////////
; 4631 : 
; 4632 : 	if (draw_large_mfd)

  017f6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  017fd	74 58		 je	 SHORT $LN34@draw_aircr

; 4633 : 	{
; 4634 : 		draw_2d_mono_sprite (large_tsd_ase_aircraft_datum_mask, 0.0, 0.0, MFD_COLOUR6);

  017ff	b8 04 00 00 00	 mov	 eax, 4
  01804	6b c8 05	 imul	 ecx, eax, 5
  01807	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0180d	52		 push	 edx
  0180e	51		 push	 ecx
  0180f	0f 57 c0	 xorps	 xmm0, xmm0
  01812	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01817	51		 push	 ecx
  01818	0f 57 c0	 xorps	 xmm0, xmm0
  0181b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01820	68 00 00 00 00	 push	 OFFSET ?large_tsd_ase_aircraft_datum_mask@@3PADA
  01825	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4635 : 
; 4636 : 		draw_2d_mono_sprite (large_tsd_ase_aircraft_datum, 0.0, 0.0, MFD_COLOUR1);

  0182a	b8 04 00 00 00	 mov	 eax, 4
  0182f	6b c8 00	 imul	 ecx, eax, 0
  01832	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01838	52		 push	 edx
  01839	51		 push	 ecx
  0183a	0f 57 c0	 xorps	 xmm0, xmm0
  0183d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01842	51		 push	 ecx
  01843	0f 57 c0	 xorps	 xmm0, xmm0
  01846	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0184b	68 00 00 00 00	 push	 OFFSET ?large_tsd_ase_aircraft_datum@@3PADA
  01850	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4637 : 	}
; 4638 : 	else

  01855	eb 56		 jmp	 SHORT $LN35@draw_aircr
$LN34@draw_aircr:

; 4639 : 	{
; 4640 : 		draw_2d_mono_sprite (small_tsd_ase_aircraft_datum_mask, 0.0, 0.0, MFD_COLOUR6);

  01857	b8 04 00 00 00	 mov	 eax, 4
  0185c	6b c8 05	 imul	 ecx, eax, 5
  0185f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01865	52		 push	 edx
  01866	51		 push	 ecx
  01867	0f 57 c0	 xorps	 xmm0, xmm0
  0186a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0186f	51		 push	 ecx
  01870	0f 57 c0	 xorps	 xmm0, xmm0
  01873	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01878	68 00 00 00 00	 push	 OFFSET ?small_tsd_ase_aircraft_datum_mask@@3PADA
  0187d	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 4641 : 
; 4642 : 		draw_2d_mono_sprite (small_tsd_ase_aircraft_datum, 0.0, 0.0, MFD_COLOUR1);

  01882	b8 04 00 00 00	 mov	 eax, 4
  01887	6b c8 00	 imul	 ecx, eax, 0
  0188a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01890	52		 push	 edx
  01891	51		 push	 ecx
  01892	0f 57 c0	 xorps	 xmm0, xmm0
  01895	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0189a	51		 push	 ecx
  0189b	0f 57 c0	 xorps	 xmm0, xmm0
  0189e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018a3	68 00 00 00 00	 push	 OFFSET ?small_tsd_ase_aircraft_datum@@3PADA
  018a8	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN35@draw_aircr:

; 4643 : 	}
; 4644 : 
; 4645 : 	set_mono_font_colour (MFD_COLOUR1);

  018ad	b8 04 00 00 00	 mov	 eax, 4
  018b2	6b c8 00	 imul	 ecx, eax, 0
  018b5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  018bb	52		 push	 edx
  018bc	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4646 : 
; 4647 : 	if (draw_large_mfd)

  018c1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  018c8	74 09		 je	 SHORT $LN36@draw_aircr

; 4648 : 	{
; 4649 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  018ca	6a 05		 push	 5
  018cc	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 4650 : 	}
; 4651 : 	else

  018d1	eb 07		 jmp	 SHORT $LN37@draw_aircr
$LN36@draw_aircr:

; 4652 : 	{
; 4653 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  018d3	6a 01		 push	 1
  018d5	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN37@draw_aircr:

; 4654 : 	}
; 4655 : 
; 4656 : 	////////////////////////////////////////
; 4657 : 	//
; 4658 : 	// text
; 4659 : 	//
; 4660 : 	////////////////////////////////////////
; 4661 : 
; 4662 : 	//
; 4663 : 	// closest incoming missile
; 4664 : 	//
; 4665 : 
; 4666 : 	{
; 4667 : 		entity
; 4668 : 			*closest_missile;
; 4669 : 
; 4670 : 		float
; 4671 : 			time_to_impact;
; 4672 : 
; 4673 : 		if (draw_large_mfd)

  018da	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  018e1	74 12		 je	 SHORT $LN38@draw_aircr

; 4674 : 		{
; 4675 : 			y_adjust = 5.0;

  018e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  018eb	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4676 : 		}
; 4677 : 		else

  018f3	eb 10		 jmp	 SHORT $LN39@draw_aircr
$LN38@draw_aircr:

; 4678 : 		{
; 4679 : 			y_adjust = 2.0;

  018f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  018fd	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN39@draw_aircr:

; 4680 : 		}
; 4681 : 
; 4682 : 		set_2d_mono_font_position (-0.8, 1.0);

  01905	51		 push	 ecx
  01906	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0190e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01913	51		 push	 ecx
  01914	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0191c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01921	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4683 : 
; 4684 : 		set_mono_font_rel_position (1.0, y_adjust);

  01926	51		 push	 ecx
  01927	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0192f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01934	51		 push	 ecx
  01935	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0193d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01942	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4685 : 
; 4686 : 		closest_missile = get_closest_missile (source, source_position, THREAT_TYPE_IR_MISSILE, &time_to_impact);

  01947	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _time_to_impact$1[ebp]
  0194d	50		 push	 eax
  0194e	6a 02		 push	 2
  01950	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01956	51		 push	 ecx
  01957	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  0195d	52		 push	 edx
  0195e	e8 00 00 00 00	 call	 ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ; get_closest_missile
  01963	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _closest_missile$2[ebp], eax

; 4687 : 
; 4688 : 		if (closest_missile)

  01969	83 bd f0 fe ff
	ff 00		 cmp	 DWORD PTR _closest_missile$2[ebp], 0
  01970	0f 84 9d 00 00
	00		 je	 $LN40@draw_aircr

; 4689 : 		{
; 4690 : 			sprintf (buffer, "IR MSL:%.1f", time_to_impact);

  01976	f3 0f 5a 85 ec
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _time_to_impact$1[ebp]
  0197e	83 ec 08	 sub	 esp, 8
  01981	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01986	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@
  0198b	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01991	50		 push	 eax
  01992	e8 00 00 00 00	 call	 _sprintf
  01997	83 c4 10	 add	 esp, 16			; 00000010H

; 4691 : 
; 4692 : 			print_mono_font_string (buffer);

  0199a	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  019a0	50		 push	 eax
  019a1	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4693 : 
; 4694 : 			if (draw_large_mfd)

  019a6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  019ad	74 12		 je	 SHORT $LN41@draw_aircr

; 4695 : 			{
; 4696 : 				y_adjust = 2.0;

  019af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  019b7	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4697 : 			}
; 4698 : 			else

  019bf	eb 10		 jmp	 SHORT $LN42@draw_aircr
$LN41@draw_aircr:

; 4699 : 			{
; 4700 : 				y_adjust = 2.0;

  019c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  019c9	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN42@draw_aircr:

; 4701 : 			}
; 4702 : 
; 4703 : 			set_2d_mono_font_position (-0.8, 0.9);

  019d1	51		 push	 ecx
  019d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  019da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019df	51		 push	 ecx
  019e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  019e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019ed	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4704 : 
; 4705 : 			set_mono_font_rel_position (1.0, y_adjust);

  019f2	51		 push	 ecx
  019f3	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  019fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a00	51		 push	 ecx
  01a01	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01a09	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a0e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN40@draw_aircr:

; 4706 : 		}
; 4707 : 
; 4708 : 		closest_missile = get_closest_missile (source, source_position, THREAT_TYPE_RF_MISSILE, &time_to_impact);

  01a13	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _time_to_impact$1[ebp]
  01a19	50		 push	 eax
  01a1a	6a 01		 push	 1
  01a1c	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01a22	51		 push	 ecx
  01a23	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01a29	52		 push	 edx
  01a2a	e8 00 00 00 00	 call	 ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ; get_closest_missile
  01a2f	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _closest_missile$2[ebp], eax

; 4709 : 
; 4710 : 		if (closest_missile)

  01a35	83 bd f0 fe ff
	ff 00		 cmp	 DWORD PTR _closest_missile$2[ebp], 0
  01a3c	0f 84 9d 00 00
	00		 je	 $LN43@draw_aircr

; 4711 : 		{
; 4712 : 			sprintf (buffer, "RF MSL:%.1f", time_to_impact);

  01a42	f3 0f 5a 85 ec
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _time_to_impact$1[ebp]
  01a4a	83 ec 08	 sub	 esp, 8
  01a4d	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01a52	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@
  01a57	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01a5d	50		 push	 eax
  01a5e	e8 00 00 00 00	 call	 _sprintf
  01a63	83 c4 10	 add	 esp, 16			; 00000010H

; 4713 : 
; 4714 : 			print_mono_font_string (buffer);

  01a66	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01a6c	50		 push	 eax
  01a6d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4715 : 
; 4716 : 			if (draw_large_mfd)

  01a72	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01a79	74 12		 je	 SHORT $LN44@draw_aircr

; 4717 : 			{
; 4718 : 				y_adjust = -2.0;

  01a7b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  01a83	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4719 : 			}
; 4720 : 			else

  01a8b	eb 10		 jmp	 SHORT $LN45@draw_aircr
$LN44@draw_aircr:

; 4721 : 			{
; 4722 : 				y_adjust = 3.0;

  01a8d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  01a95	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN45@draw_aircr:

; 4723 : 			}
; 4724 : 
; 4725 : 			set_2d_mono_font_position (-0.8, 0.8);

  01a9d	51		 push	 ecx
  01a9e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  01aa6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aab	51		 push	 ecx
  01aac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  01ab4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ab9	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4726 : 
; 4727 : 			set_mono_font_rel_position (1.0, y_adjust);

  01abe	51		 push	 ecx
  01abf	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01ac7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01acc	51		 push	 ecx
  01acd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01ad5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ada	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN43@draw_aircr:

; 4728 : 		}
; 4729 : 
; 4730 : 		closest_missile = get_closest_missile (source, source_position, THREAT_TYPE_LASER_MISSILE, &time_to_impact);

  01adf	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _time_to_impact$1[ebp]
  01ae5	50		 push	 eax
  01ae6	6a 03		 push	 3
  01ae8	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01aee	51		 push	 ecx
  01aef	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01af5	52		 push	 edx
  01af6	e8 00 00 00 00	 call	 ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ; get_closest_missile
  01afb	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _closest_missile$2[ebp], eax

; 4731 : 
; 4732 : 		if (closest_missile)

  01b01	83 bd f0 fe ff
	ff 00		 cmp	 DWORD PTR _closest_missile$2[ebp], 0
  01b08	74 30		 je	 SHORT $LN46@draw_aircr

; 4733 : 		{
; 4734 : 			sprintf (buffer, "LS MSL:%.1f", time_to_impact);

  01b0a	f3 0f 5a 85 ec
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _time_to_impact$1[ebp]
  01b12	83 ec 08	 sub	 esp, 8
  01b15	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01b1a	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@
  01b1f	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01b25	50		 push	 eax
  01b26	e8 00 00 00 00	 call	 _sprintf
  01b2b	83 c4 10	 add	 esp, 16			; 00000010H

; 4735 : 
; 4736 : 			print_mono_font_string (buffer);

  01b2e	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01b34	50		 push	 eax
  01b35	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN46@draw_aircr:

; 4737 : 		}
; 4738 : 	}
; 4739 : 
; 4740 : 	//
; 4741 : 	// ASE range
; 4742 : 	//
; 4743 : 
; 4744 : 	if (tsd_ase_range == TSD_ASE_RANGE_2000)

  01b3a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  01b42	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  01b49	9f		 lahf
  01b4a	f6 c4 44	 test	 ah, 68			; 00000044H
  01b4d	7a 09		 jp	 SHORT $LN47@draw_aircr

; 4745 : 	{
; 4746 : 		s = "2Km";

  01b4f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03CIAFGHAC@2Km@
  01b56	eb 61		 jmp	 SHORT $LN54@draw_aircr
$LN47@draw_aircr:

; 4747 : 	}
; 4748 : 	else if (tsd_ase_range == TSD_ASE_RANGE_5000)

  01b58	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  01b60	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  01b67	9f		 lahf
  01b68	f6 c4 44	 test	 ah, 68			; 00000044H
  01b6b	7a 09		 jp	 SHORT $LN49@draw_aircr

; 4749 : 	{
; 4750 : 		s = "5Km";

  01b6d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03LFNCFPLL@5Km@
  01b74	eb 43		 jmp	 SHORT $LN54@draw_aircr
$LN49@draw_aircr:

; 4751 : 	}
; 4752 : 	else if (tsd_ase_range == TSD_ASE_RANGE_10000)

  01b76	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  01b7e	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  01b85	9f		 lahf
  01b86	f6 c4 44	 test	 ah, 68			; 00000044H
  01b89	7a 09		 jp	 SHORT $LN51@draw_aircr

; 4753 : 	{
; 4754 : 		s = "10Km";

  01b8b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04PJCLBGLO@10Km@
  01b92	eb 25		 jmp	 SHORT $LN54@draw_aircr
$LN51@draw_aircr:

; 4755 : 	}
; 4756 : 	else if (tsd_ase_range == TSD_ASE_RANGE_25000)

  01b94	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  01b9c	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  01ba3	9f		 lahf
  01ba4	f6 c4 44	 test	 ah, 68			; 00000044H
  01ba7	7a 09		 jp	 SHORT $LN53@draw_aircr

; 4757 : 	{
; 4758 : 		s = "25Km";

  01ba9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04IJFFJMFM@25Km@

; 4759 : 	}
; 4760 : 	else

  01bb0	eb 07		 jmp	 SHORT $LN54@draw_aircr
$LN53@draw_aircr:

; 4761 : 	{
; 4762 : 		s = "XXX";

  01bb2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN54@draw_aircr:

; 4763 : 	}
; 4764 : 
; 4765 : 	width = get_mono_font_string_width (s);

  01bb9	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  01bbc	50		 push	 eax
  01bbd	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01bc2	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 4766 : 
; 4767 : 	if (draw_large_mfd)

  01bc8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01bcf	74 12		 je	 SHORT $LN55@draw_aircr

; 4768 : 	{
; 4769 : 		y_adjust = 5.0;

  01bd1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  01bd9	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4770 : 	}
; 4771 : 	else

  01be1	eb 10		 jmp	 SHORT $LN56@draw_aircr
$LN55@draw_aircr:

; 4772 : 	{
; 4773 : 		y_adjust = 2.0;

  01be3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  01beb	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN56@draw_aircr:

; 4774 : 	}
; 4775 : 
; 4776 : 	set_2d_mono_font_position (0.8, 1.0);

  01bf3	51		 push	 ecx
  01bf4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01bfc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c01	51		 push	 ecx
  01c02	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  01c0a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c0f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4777 : 
; 4778 : 	set_mono_font_rel_position (-width, y_adjust);

  01c14	51		 push	 ecx
  01c15	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01c1d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c22	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  01c2a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01c31	51		 push	 ecx
  01c32	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c37	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4779 : 
; 4780 : 	print_mono_font_string (s);

  01c3c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  01c3f	50		 push	 eax
  01c40	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4781 : 
; 4782 : 	//
; 4783 : 	// jammers
; 4784 : 	//
; 4785 : 
; 4786 : 	if (draw_large_mfd)

  01c45	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01c4c	0f 84 d2 00 00
	00		 je	 $LN57@draw_aircr

; 4787 : 	{
; 4788 : 		if (blackhawk_damage.infra_red_jammer)

  01c52	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  01c57	c1 e8 08	 shr	 eax, 8
  01c5a	83 e0 01	 and	 eax, 1
  01c5d	74 0c		 je	 SHORT $LN59@draw_aircr

; 4789 : 		{
; 4790 : 			s = "IR JAM XXX";

  01c5f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@DADPKEOI@IR?5JAM?5XXX@

; 4791 : 		}
; 4792 : 		else

  01c66	e9 a4 00 00 00	 jmp	 $LN62@draw_aircr
$LN59@draw_aircr:

; 4793 : 		{
; 4794 : 			if (get_local_entity_int_value (source, INT_TYPE_INFRA_RED_JAMMER_ON))

  01c6b	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01c72	74 10		 je	 SHORT $LN221@draw_aircr
  01c74	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01c7a	8b 08		 mov	 ecx, DWORD PTR [eax]
  01c7c	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv923[ebp], ecx
  01c82	eb 20		 jmp	 SHORT $LN222@draw_aircr
$LN221@draw_aircr:
  01c84	68 ba 12 00 00	 push	 4794			; 000012baH
  01c89	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01c8e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01c94	52		 push	 edx
  01c95	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01c9a	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv923[ebp], 0
$LN222@draw_aircr:
  01ca4	b8 01 00 00 00	 mov	 eax, 1
  01ca9	85 c0		 test	 eax, eax
  01cab	74 0c		 je	 SHORT $LN223@draw_aircr
  01cad	c7 85 a4 fe ff
	ff 68 00 00 00	 mov	 DWORD PTR tv962[ebp], 104 ; 00000068H
  01cb7	eb 20		 jmp	 SHORT $LN224@draw_aircr
$LN223@draw_aircr:
  01cb9	68 ba 12 00 00	 push	 4794			; 000012baH
  01cbe	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01cc3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01cc9	51		 push	 ecx
  01cca	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01ccf	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv962[ebp], 0
$LN224@draw_aircr:
  01cd9	6a 68		 push	 104			; 00000068H
  01cdb	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01ce1	52		 push	 edx
  01ce2	69 85 a8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv923[ebp], 1116
  01cec	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv962[ebp]
  01cf2	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01cf9	ff d2		 call	 edx
  01cfb	85 c0		 test	 eax, eax
  01cfd	74 09		 je	 SHORT $LN61@draw_aircr

; 4795 : 			{
; 4796 : 				s = "IR JAM ON";

  01cff	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_09OKBKNIAL@IR?5JAM?5ON@

; 4797 : 			}
; 4798 : 			else

  01d06	eb 07		 jmp	 SHORT $LN62@draw_aircr
$LN61@draw_aircr:

; 4799 : 			{
; 4800 : 				s = "IR JAM OFF";

  01d08	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@
$LN62@draw_aircr:

; 4801 : 			}
; 4802 : 		}
; 4803 : 
; 4804 : 		y_adjust = -25.0;

  01d0f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  01d17	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4805 : 	}
; 4806 : 	else

  01d1f	e9 cd 00 00 00	 jmp	 $LN58@draw_aircr
$LN57@draw_aircr:

; 4807 : 	{
; 4808 : 		if (blackhawk_damage.infra_red_jammer)

  01d24	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  01d29	c1 e8 08	 shr	 eax, 8
  01d2c	83 e0 01	 and	 eax, 1
  01d2f	74 0c		 je	 SHORT $LN63@draw_aircr

; 4809 : 		{
; 4810 : 			s = "IR XXX";

  01d31	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06CNPDBJMK@IR?5XXX@

; 4811 : 		}
; 4812 : 		else

  01d38	e9 a4 00 00 00	 jmp	 $LN66@draw_aircr
$LN63@draw_aircr:

; 4813 : 		{
; 4814 : 			if (get_local_entity_int_value (source, INT_TYPE_INFRA_RED_JAMMER_ON))

  01d3d	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01d44	74 10		 je	 SHORT $LN225@draw_aircr
  01d46	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01d4c	8b 08		 mov	 ecx, DWORD PTR [eax]
  01d4e	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv977[ebp], ecx
  01d54	eb 20		 jmp	 SHORT $LN226@draw_aircr
$LN225@draw_aircr:
  01d56	68 ce 12 00 00	 push	 4814			; 000012ceH
  01d5b	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01d60	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01d66	52		 push	 edx
  01d67	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01d6c	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv977[ebp], 0
$LN226@draw_aircr:
  01d76	b8 01 00 00 00	 mov	 eax, 1
  01d7b	85 c0		 test	 eax, eax
  01d7d	74 0c		 je	 SHORT $LN227@draw_aircr
  01d7f	c7 85 a4 fe ff
	ff 68 00 00 00	 mov	 DWORD PTR tv984[ebp], 104 ; 00000068H
  01d89	eb 20		 jmp	 SHORT $LN228@draw_aircr
$LN227@draw_aircr:
  01d8b	68 ce 12 00 00	 push	 4814			; 000012ceH
  01d90	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01d95	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01d9b	51		 push	 ecx
  01d9c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01da1	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv984[ebp], 0
$LN228@draw_aircr:
  01dab	6a 68		 push	 104			; 00000068H
  01dad	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01db3	52		 push	 edx
  01db4	69 85 a8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv977[ebp], 1116
  01dbe	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv984[ebp]
  01dc4	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01dcb	ff d2		 call	 edx
  01dcd	85 c0		 test	 eax, eax
  01dcf	74 09		 je	 SHORT $LN65@draw_aircr

; 4815 : 			{
; 4816 : 				s = "IR ON";

  01dd1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_05JBLHJOBL@IR?5ON@

; 4817 : 			}
; 4818 : 			else

  01dd8	eb 07		 jmp	 SHORT $LN66@draw_aircr
$LN65@draw_aircr:

; 4819 : 			{
; 4820 : 				s = "IR OFF";

  01dda	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06CCMEMHEJ@IR?5OFF@
$LN66@draw_aircr:

; 4821 : 			}
; 4822 : 		}
; 4823 : 
; 4824 : 		y_adjust = -12.0;

  01de1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  01de9	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN58@draw_aircr:

; 4825 : 	}
; 4826 : 
; 4827 : 	set_2d_mono_font_position (-0.8, -1.0);

  01df1	51		 push	 ecx
  01df2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01dfa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dff	51		 push	 ecx
  01e00	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  01e08	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e0d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4828 : 
; 4829 : 	set_mono_font_rel_position (1.0, y_adjust);

  01e12	51		 push	 ecx
  01e13	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01e1b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e20	51		 push	 ecx
  01e21	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01e29	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e2e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4830 : 
; 4831 : 	print_mono_font_string (s);

  01e33	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  01e36	50		 push	 eax
  01e37	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4832 : 
; 4833 : 	if (draw_large_mfd)

  01e3c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01e43	0f 84 d5 00 00
	00		 je	 $LN67@draw_aircr

; 4834 : 	{
; 4835 : 		if (blackhawk_damage.radar_jammer)

  01e49	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  01e4e	c1 e8 07	 shr	 eax, 7
  01e51	83 e0 01	 and	 eax, 1
  01e54	74 0c		 je	 SHORT $LN69@draw_aircr

; 4836 : 		{
; 4837 : 			s = "RD JAM XXX";

  01e56	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@JHFIBGMI@RD?5JAM?5XXX@

; 4838 : 		}
; 4839 : 		else

  01e5d	e9 a7 00 00 00	 jmp	 $LN72@draw_aircr
$LN69@draw_aircr:

; 4840 : 		{
; 4841 : 			if (get_local_entity_int_value (source, INT_TYPE_RADAR_JAMMER_ON))

  01e62	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01e69	74 10		 je	 SHORT $LN229@draw_aircr
  01e6b	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01e71	8b 08		 mov	 ecx, DWORD PTR [eax]
  01e73	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv1005[ebp], ecx
  01e79	eb 20		 jmp	 SHORT $LN230@draw_aircr
$LN229@draw_aircr:
  01e7b	68 e9 12 00 00	 push	 4841			; 000012e9H
  01e80	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01e85	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01e8b	52		 push	 edx
  01e8c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01e91	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1005[ebp], 0
$LN230@draw_aircr:
  01e9b	b8 01 00 00 00	 mov	 eax, 1
  01ea0	85 c0		 test	 eax, eax
  01ea2	74 0c		 je	 SHORT $LN231@draw_aircr
  01ea4	c7 85 a4 fe ff
	ff a8 00 00 00	 mov	 DWORD PTR tv1012[ebp], 168 ; 000000a8H
  01eae	eb 20		 jmp	 SHORT $LN232@draw_aircr
$LN231@draw_aircr:
  01eb0	68 e9 12 00 00	 push	 4841			; 000012e9H
  01eb5	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01eba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01ec0	51		 push	 ecx
  01ec1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01ec6	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1012[ebp], 0
$LN232@draw_aircr:
  01ed0	68 a8 00 00 00	 push	 168			; 000000a8H
  01ed5	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01edb	52		 push	 edx
  01edc	69 85 a8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1005[ebp], 1116
  01ee6	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv1012[ebp]
  01eec	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01ef3	ff d2		 call	 edx
  01ef5	85 c0		 test	 eax, eax
  01ef7	74 09		 je	 SHORT $LN71@draw_aircr

; 4842 : 			{
; 4843 : 				s = "RD JAM ON";

  01ef9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_09OKIOJJOP@RD?5JAM?5ON@

; 4844 : 			}
; 4845 : 			else

  01f00	eb 07		 jmp	 SHORT $LN72@draw_aircr
$LN71@draw_aircr:

; 4846 : 			{
; 4847 : 				s = "RD JAM OFF";

  01f02	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@JIGPMIEL@RD?5JAM?5OFF@
$LN72@draw_aircr:

; 4848 : 			}
; 4849 : 		}
; 4850 : 
; 4851 : 		y_adjust = -12.0;

  01f09	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  01f11	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4852 : 	}
; 4853 : 	else

  01f19	e9 d0 00 00 00	 jmp	 $LN68@draw_aircr
$LN67@draw_aircr:

; 4854 : 	{
; 4855 : 		if (blackhawk_damage.radar_jammer)

  01f1e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  01f23	c1 e8 07	 shr	 eax, 7
  01f26	83 e0 01	 and	 eax, 1
  01f29	74 0c		 je	 SHORT $LN73@draw_aircr

; 4856 : 		{
; 4857 : 			s = "RD XXX";

  01f2b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06JNKFDAHI@RD?5XXX@

; 4858 : 		}
; 4859 : 		else

  01f32	e9 a7 00 00 00	 jmp	 $LN76@draw_aircr
$LN73@draw_aircr:

; 4860 : 		{
; 4861 : 			if (get_local_entity_int_value (source, INT_TYPE_RADAR_JAMMER_ON))

  01f37	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01f3e	74 10		 je	 SHORT $LN233@draw_aircr
  01f40	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01f46	8b 08		 mov	 ecx, DWORD PTR [eax]
  01f48	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv1027[ebp], ecx
  01f4e	eb 20		 jmp	 SHORT $LN234@draw_aircr
$LN233@draw_aircr:
  01f50	68 fd 12 00 00	 push	 4861			; 000012fdH
  01f55	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01f5a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01f60	52		 push	 edx
  01f61	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01f66	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1027[ebp], 0
$LN234@draw_aircr:
  01f70	b8 01 00 00 00	 mov	 eax, 1
  01f75	85 c0		 test	 eax, eax
  01f77	74 0c		 je	 SHORT $LN235@draw_aircr
  01f79	c7 85 a4 fe ff
	ff a8 00 00 00	 mov	 DWORD PTR tv1034[ebp], 168 ; 000000a8H
  01f83	eb 20		 jmp	 SHORT $LN236@draw_aircr
$LN235@draw_aircr:
  01f85	68 fd 12 00 00	 push	 4861			; 000012fdH
  01f8a	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01f8f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01f95	51		 push	 ecx
  01f96	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01f9b	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1034[ebp], 0
$LN236@draw_aircr:
  01fa5	68 a8 00 00 00	 push	 168			; 000000a8H
  01faa	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01fb0	52		 push	 edx
  01fb1	69 85 a8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1027[ebp], 1116
  01fbb	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv1034[ebp]
  01fc1	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01fc8	ff d2		 call	 edx
  01fca	85 c0		 test	 eax, eax
  01fcc	74 09		 je	 SHORT $LN75@draw_aircr

; 4862 : 			{
; 4863 : 				s = "RD ON";

  01fce	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_05BHAGAOGB@RD?5ON@

; 4864 : 			}
; 4865 : 			else

  01fd5	eb 07		 jmp	 SHORT $LN76@draw_aircr
$LN75@draw_aircr:

; 4866 : 			{
; 4867 : 				s = "RD OFF";

  01fd7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06JCJCOOPL@RD?5OFF@
$LN76@draw_aircr:

; 4868 : 			}
; 4869 : 		}
; 4870 : 
; 4871 : 		y_adjust = -5.0;

  01fde	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  01fe6	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN68@draw_aircr:

; 4872 : 	}
; 4873 : 
; 4874 : 	set_2d_mono_font_position (-0.8, -1.0);

  01fee	51		 push	 ecx
  01fef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01ff7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ffc	51		 push	 ecx
  01ffd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  02005	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0200a	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4875 : 
; 4876 : 	set_mono_font_rel_position (1.0, y_adjust);

  0200f	51		 push	 ecx
  02010	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02018	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0201d	51		 push	 ecx
  0201e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02026	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0202b	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4877 : 
; 4878 : 	print_mono_font_string (s);

  02030	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02033	50		 push	 eax
  02034	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4879 : 
; 4880 : 	//
; 4881 : 	// auto-countermeasures
; 4882 : 	//
; 4883 : 
; 4884 : 	if (get_global_auto_counter_measures ())

  02039	83 3d 90 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+144, 0
  02040	0f 84 de 00 00
	00		 je	 $LN77@draw_aircr

; 4885 : 	{
; 4886 : 		s = "AUTO";

  02046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04LMMJFDCN@AUTO@

; 4887 : 
; 4888 : 		width = get_mono_font_string_width (s);

  0204d	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02050	50		 push	 eax
  02051	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02056	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 4889 : 
; 4890 : 		if (draw_large_mfd)

  0205c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02063	74 12		 je	 SHORT $LN78@draw_aircr

; 4891 : 		{
; 4892 : 			y_adjust = -38.0;

  02065	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2180000
  0206d	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4893 : 		}
; 4894 : 		else

  02075	eb 10		 jmp	 SHORT $LN79@draw_aircr
$LN78@draw_aircr:

; 4895 : 		{
; 4896 : 			y_adjust = -19.0;

  02077	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1980000
  0207f	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN79@draw_aircr:

; 4897 : 		}
; 4898 : 
; 4899 : 		set_2d_mono_font_position (-0.8, -1.0);

  02087	51		 push	 ecx
  02088	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02090	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02095	51		 push	 ecx
  02096	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0209e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020a3	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4900 : 
; 4901 : 		set_mono_font_rel_position (1.0, y_adjust);

  020a8	51		 push	 ecx
  020a9	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  020b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020b6	51		 push	 ecx
  020b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  020bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020c4	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4902 : 
; 4903 : 		print_mono_font_string (s);

  020c9	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  020cc	50		 push	 eax
  020cd	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4904 : 
; 4905 : 		set_2d_mono_font_position (0.8, -1.0);

  020d2	51		 push	 ecx
  020d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  020db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020e0	51		 push	 ecx
  020e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  020e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020ee	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4906 : 
; 4907 : 		set_mono_font_rel_position (-width, y_adjust);

  020f3	51		 push	 ecx
  020f4	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  020fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02101	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  02109	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  02110	51		 push	 ecx
  02111	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02116	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4908 : 
; 4909 : 		print_mono_font_string (s);

  0211b	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0211e	50		 push	 eax
  0211f	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN77@draw_aircr:

; 4910 : 	}
; 4911 : 
; 4912 : 	//
; 4913 : 	// chaff
; 4914 : 	//
; 4915 : 
; 4916 : 	if (draw_large_mfd)

  02124	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0212b	74 58		 je	 SHORT $LN80@draw_aircr

; 4917 : 	{
; 4918 : 		if (blackhawk_damage.chaff_dispenser)

  0212d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  02132	c1 e8 1d	 shr	 eax, 29			; 0000001dH
  02135	83 e0 01	 and	 eax, 1
  02138	74 16		 je	 SHORT $LN82@draw_aircr

; 4919 : 		{
; 4920 : 			sprintf (buffer, "CHAFF:XX");

  0213a	68 00 00 00 00	 push	 OFFSET ??_C@_08GHAEIHAP@CHAFF?3XX@
  0213f	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02145	50		 push	 eax
  02146	e8 00 00 00 00	 call	 _sprintf
  0214b	83 c4 08	 add	 esp, 8

; 4921 : 		}
; 4922 : 		else

  0214e	eb 23		 jmp	 SHORT $LN83@draw_aircr
$LN82@draw_aircr:

; 4923 : 		{
; 4924 : 			sprintf (buffer, "CHAFF:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_CHAFF));

  02150	6a 43		 push	 67			; 00000043H
  02152	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  02158	50		 push	 eax
  02159	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  0215e	50		 push	 eax
  0215f	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@
  02164	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0216a	51		 push	 ecx
  0216b	e8 00 00 00 00	 call	 _sprintf
  02170	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN83@draw_aircr:

; 4925 : 		}
; 4926 : 
; 4927 : 		y_adjust = -25.0;

  02173	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  0217b	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4928 : 	}
; 4929 : 	else

  02183	eb 56		 jmp	 SHORT $LN81@draw_aircr
$LN80@draw_aircr:

; 4930 : 	{
; 4931 : 		if (blackhawk_damage.chaff_dispenser)

  02185	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  0218a	c1 e8 1d	 shr	 eax, 29			; 0000001dH
  0218d	83 e0 01	 and	 eax, 1
  02190	74 16		 je	 SHORT $LN84@draw_aircr

; 4932 : 		{
; 4933 : 			sprintf (buffer, "C:XX");

  02192	68 00 00 00 00	 push	 OFFSET ??_C@_04KJNFJKOK@C?3XX@
  02197	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0219d	50		 push	 eax
  0219e	e8 00 00 00 00	 call	 _sprintf
  021a3	83 c4 08	 add	 esp, 8

; 4934 : 		}
; 4935 : 		else

  021a6	eb 23		 jmp	 SHORT $LN85@draw_aircr
$LN84@draw_aircr:

; 4936 : 		{
; 4937 : 			sprintf (buffer, "C:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_CHAFF));

  021a8	6a 43		 push	 67			; 00000043H
  021aa	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  021b0	50		 push	 eax
  021b1	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  021b6	50		 push	 eax
  021b7	68 00 00 00 00	 push	 OFFSET ??_C@_06GNOFKMCG@C?3?$CF02d@
  021bc	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  021c2	51		 push	 ecx
  021c3	e8 00 00 00 00	 call	 _sprintf
  021c8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN85@draw_aircr:

; 4938 : 		}
; 4939 : 
; 4940 : 		y_adjust = -12.0;

  021cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  021d3	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN81@draw_aircr:

; 4941 : 	}
; 4942 : 
; 4943 : 	width = get_mono_font_string_width (buffer);

  021db	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  021e1	50		 push	 eax
  021e2	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  021e7	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 4944 : 
; 4945 : 	set_2d_mono_font_position (0.8, -1.0);

  021ed	51		 push	 ecx
  021ee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  021f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021fb	51		 push	 ecx
  021fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  02204	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02209	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4946 : 
; 4947 : 	set_mono_font_rel_position (-width, y_adjust);

  0220e	51		 push	 ecx
  0220f	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02217	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0221c	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  02224	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0222b	51		 push	 ecx
  0222c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02231	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4948 : 
; 4949 : 	print_mono_font_string (buffer);

  02236	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0223c	50		 push	 eax
  0223d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4950 : 
; 4951 : 	//
; 4952 : 	// flares
; 4953 : 	//
; 4954 : 
; 4955 : 	if (draw_large_mfd)

  02242	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02249	74 58		 je	 SHORT $LN86@draw_aircr

; 4956 : 	{
; 4957 : 		if (blackhawk_damage.flare_dispenser)

  0224b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  02250	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02253	83 e0 01	 and	 eax, 1
  02256	74 16		 je	 SHORT $LN88@draw_aircr

; 4958 : 		{
; 4959 : 			sprintf (buffer, "FLARE:XX");

  02258	68 00 00 00 00	 push	 OFFSET ??_C@_08HGDOPGOH@FLARE?3XX@
  0225d	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02263	50		 push	 eax
  02264	e8 00 00 00 00	 call	 _sprintf
  02269	83 c4 08	 add	 esp, 8

; 4960 : 		}
; 4961 : 		else

  0226c	eb 23		 jmp	 SHORT $LN89@draw_aircr
$LN88@draw_aircr:

; 4962 : 		{
; 4963 : 			sprintf (buffer, "FLARE:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_FLARE));

  0226e	6a 44		 push	 68			; 00000044H
  02270	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  02276	50		 push	 eax
  02277	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  0227c	50		 push	 eax
  0227d	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@
  02282	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  02288	51		 push	 ecx
  02289	e8 00 00 00 00	 call	 _sprintf
  0228e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN89@draw_aircr:

; 4964 : 		}
; 4965 : 
; 4966 : 		y_adjust = -12.0;

  02291	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  02299	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4967 : 	}
; 4968 : 	else

  022a1	eb 56		 jmp	 SHORT $LN87@draw_aircr
$LN86@draw_aircr:

; 4969 : 	{
; 4970 : 		if (blackhawk_damage.flare_dispenser)

  022a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  022a8	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  022ab	83 e0 01	 and	 eax, 1
  022ae	74 16		 je	 SHORT $LN90@draw_aircr

; 4971 : 		{
; 4972 : 			sprintf (buffer, "F:XX");

  022b0	68 00 00 00 00	 push	 OFFSET ??_C@_04GBDFBFJK@F?3XX@
  022b5	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  022bb	50		 push	 eax
  022bc	e8 00 00 00 00	 call	 _sprintf
  022c1	83 c4 08	 add	 esp, 8

; 4973 : 		}
; 4974 : 		else

  022c4	eb 23		 jmp	 SHORT $LN91@draw_aircr
$LN90@draw_aircr:

; 4975 : 		{
; 4976 : 			sprintf (buffer, "F:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_FLARE));

  022c6	6a 44		 push	 68			; 00000044H
  022c8	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  022ce	50		 push	 eax
  022cf	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  022d4	50		 push	 eax
  022d5	68 00 00 00 00	 push	 OFFSET ??_C@_06DPNNIDIB@F?3?$CF02d@
  022da	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  022e0	51		 push	 ecx
  022e1	e8 00 00 00 00	 call	 _sprintf
  022e6	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN91@draw_aircr:

; 4977 : 		}
; 4978 : 
; 4979 : 		y_adjust = -5.0;

  022e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  022f1	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN87@draw_aircr:

; 4980 : 	}
; 4981 : 
; 4982 : 	width = get_mono_font_string_width (buffer);

  022f9	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  022ff	50		 push	 eax
  02300	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02305	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 4983 : 
; 4984 : 	set_2d_mono_font_position (0.8, -1.0);

  0230b	51		 push	 ecx
  0230c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02314	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02319	51		 push	 ecx
  0231a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  02322	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02327	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4985 : 
; 4986 : 	set_mono_font_rel_position (-width, y_adjust);

  0232c	51		 push	 ecx
  0232d	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02335	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0233a	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  02342	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  02349	51		 push	 ecx
  0234a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0234f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4987 : 
; 4988 : 	print_mono_font_string (buffer);

  02354	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0235a	50		 push	 eax
  0235b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4989 : }

  02360	5f		 pop	 edi
  02361	5e		 pop	 esi
  02362	5b		 pop	 ebx
  02363	8b e5		 mov	 esp, ebp
  02365	5d		 pop	 ebp
  02366	c3		 ret	 0
?draw_aircraft_survivability_equipment_display_mfd@@YGXXZ ENDP ; draw_aircraft_survivability_equipment_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z
_TEXT	SEGMENT
tv253 = -128						; size = 4
tv190 = -128						; size = 4
tv167 = -128						; size = 4
tv146 = -128						; size = 4
tv95 = -128						; size = 4
tv245 = -124						; size = 4
tv223 = -124						; size = 4
tv182 = -124						; size = 4
tv159 = -124						; size = 4
tv139 = -124						; size = 4
tv87 = -124						; size = 4
$T1 = -120						; size = 4
_attitude$ = -52					; size = 4
_uvec_threat_to_target$ = -48				; size = 12
_threat_position$ = -36					; size = 4
_cos_error$ = -32					; size = 4
_length$ = -28						; size = 4
_time_to_impact$ = -24					; size = 4
_threat_velocity$ = -20					; size = 4
_threat_range$ = -16					; size = 4
_overshot$ = -12					; size = 4
_closest_missile$ = -8					; size = 4
_threat$ = -4						; size = 4
_source$ = 8						; size = 4
_source_position$ = 12					; size = 4
_threat_type$ = 16					; size = 4
_closest_missile_time_to_impact$ = 20			; size = 4
?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z PROC ; get_closest_missile, COMDAT

; 4303 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 4304 : 	entity
; 4305 : 		*threat,
; 4306 : 		*closest_missile;
; 4307 : 
; 4308 : 	int
; 4309 : 		overshot;
; 4310 : 
; 4311 : 	float
; 4312 : 		threat_range,
; 4313 : 		threat_velocity,
; 4314 : 		time_to_impact,
; 4315 : 		length,
; 4316 : 		cos_error;
; 4317 : 
; 4318 : 	vec3d
; 4319 : 		*threat_position,
; 4320 : 		uvec_threat_to_target;
; 4321 : 
; 4322 : 	matrix3x3
; 4323 : 		*attitude;
; 4324 : 
; 4325 : 	ASSERT (source);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _source$[ebp], 0
  00010	75 18		 jne	 SHORT $LN4@get_closes
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00017	83 c0 16	 add	 eax, 22			; 00000016H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_06OEKOLKIL@source@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_closes:

; 4326 : 
; 4327 : 	ASSERT (source_position);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _source_position$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN5@get_closes
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00035	83 c0 18	 add	 eax, 24			; 00000018H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IIPCKJML@source_position@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@get_closes:

; 4328 : 
; 4329 : 	ASSERT ((threat_type == THREAT_TYPE_RF_MISSILE) || (threat_type == THREAT_TYPE_IR_MISSILE) || (threat_type == THREAT_TYPE_LASER_MISSILE));

  00048	83 7d 10 01	 cmp	 DWORD PTR _threat_type$[ebp], 1
  0004c	74 24		 je	 SHORT $LN6@get_closes
  0004e	83 7d 10 02	 cmp	 DWORD PTR _threat_type$[ebp], 2
  00052	74 1e		 je	 SHORT $LN6@get_closes
  00054	83 7d 10 03	 cmp	 DWORD PTR _threat_type$[ebp], 3
  00058	74 18		 je	 SHORT $LN6@get_closes
  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  0005f	83 c0 1a	 add	 eax, 26			; 0000001aH
  00062	50		 push	 eax
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@
  0006d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_closes:

; 4330 : 
; 4331 : 	closest_missile = NULL;

  00072	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _closest_missile$[ebp], 0

; 4332 : 
; 4333 : 	*closest_missile_time_to_impact = 1000000.0;

  00079	8b 45 14	 mov	 eax, DWORD PTR _closest_missile_time_to_impact$[ebp]
  0007c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@49742400
  00084	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 4334 : 
; 4335 : 	threat = get_local_entity_first_child (get_gunship_entity (), LIST_TYPE_TARGET);

  00088	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0008f	74 0c		 je	 SHORT $LN15@get_closes
  00091	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00096	8b 08		 mov	 ecx, DWORD PTR [eax]
  00098	89 4d 84	 mov	 DWORD PTR tv87[ebp], ecx
  0009b	eb 21		 jmp	 SHORT $LN16@get_closes
$LN15@get_closes:
  0009d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  000a3	83 c2 20	 add	 edx, 32			; 00000020H
  000a6	52		 push	 edx
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b7	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$LN16@get_closes:
  000be	b9 01 00 00 00	 mov	 ecx, 1
  000c3	85 c9		 test	 ecx, ecx
  000c5	74 09		 je	 SHORT $LN17@get_closes
  000c7	c7 45 80 26 00
	00 00		 mov	 DWORD PTR tv95[ebp], 38	; 00000026H
  000ce	eb 21		 jmp	 SHORT $LN18@get_closes
$LN17@get_closes:
  000d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  000d6	83 c2 20	 add	 edx, 32			; 00000020H
  000d9	52		 push	 edx
  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ea	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv95[ebp], 0
$LN18@get_closes:
  000f1	6a 26		 push	 38			; 00000026H
  000f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000f9	51		 push	 ecx
  000fa	69 55 84 b4 00
	00 00		 imul	 edx, DWORD PTR tv87[ebp], 180
  00101	8b 45 80	 mov	 eax, DWORD PTR tv95[ebp]
  00104	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0010b	ff d1		 call	 ecx
  0010d	89 45 fc	 mov	 DWORD PTR _threat$[ebp], eax
$LN2@get_closes:

; 4336 : 
; 4337 : 	while (threat)

  00110	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  00114	0f 84 74 03 00
	00		 je	 $LN3@get_closes

; 4338 : 	{
; 4339 : 		if (get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE) == threat_type)

  0011a	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0011e	74 0a		 je	 SHORT $LN19@get_closes
  00120	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  00123	8b 08		 mov	 ecx, DWORD PTR [eax]
  00125	89 4d 84	 mov	 DWORD PTR tv139[ebp], ecx
  00128	eb 1d		 jmp	 SHORT $LN20@get_closes
$LN19@get_closes:
  0012a	68 f3 10 00 00	 push	 4339			; 000010f3H
  0012f	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00134	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0013a	52		 push	 edx
  0013b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00140	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv139[ebp], 0
$LN20@get_closes:
  00147	b8 01 00 00 00	 mov	 eax, 1
  0014c	85 c0		 test	 eax, eax
  0014e	74 09		 je	 SHORT $LN21@get_closes
  00150	c7 45 80 e9 00
	00 00		 mov	 DWORD PTR tv146[ebp], 233 ; 000000e9H
  00157	eb 1d		 jmp	 SHORT $LN22@get_closes
$LN21@get_closes:
  00159	68 f3 10 00 00	 push	 4339			; 000010f3H
  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00163	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00169	51		 push	 ecx
  0016a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0016f	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv146[ebp], 0
$LN22@get_closes:
  00176	68 e9 00 00 00	 push	 233			; 000000e9H
  0017b	8b 55 fc	 mov	 edx, DWORD PTR _threat$[ebp]
  0017e	52		 push	 edx
  0017f	69 45 84 5c 04
	00 00		 imul	 eax, DWORD PTR tv139[ebp], 1116
  00186	8b 4d 80	 mov	 ecx, DWORD PTR tv146[ebp]
  00189	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00190	ff d2		 call	 edx
  00192	3b 45 10	 cmp	 eax, DWORD PTR _threat_type$[ebp]
  00195	0f 85 6e 02 00
	00		 jne	 $LN13@get_closes

; 4340 : 		{
; 4341 : 			threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  0019b	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0019f	74 0a		 je	 SHORT $LN23@get_closes
  001a1	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  001a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a6	89 4d 84	 mov	 DWORD PTR tv159[ebp], ecx
  001a9	eb 21		 jmp	 SHORT $LN24@get_closes
$LN23@get_closes:
  001ab	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  001b1	83 c2 26	 add	 edx, 38			; 00000026H
  001b4	52		 push	 edx
  001b5	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001bf	50		 push	 eax
  001c0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c5	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv159[ebp], 0
$LN24@get_closes:
  001cc	b9 01 00 00 00	 mov	 ecx, 1
  001d1	85 c9		 test	 ecx, ecx
  001d3	74 09		 je	 SHORT $LN25@get_closes
  001d5	c7 45 80 08 00
	00 00		 mov	 DWORD PTR tv167[ebp], 8
  001dc	eb 21		 jmp	 SHORT $LN26@get_closes
$LN25@get_closes:
  001de	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  001e4	83 c2 26	 add	 edx, 38			; 00000026H
  001e7	52		 push	 edx
  001e8	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001f2	50		 push	 eax
  001f3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001f8	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv167[ebp], 0
$LN26@get_closes:
  001ff	6a 08		 push	 8
  00201	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00204	51		 push	 ecx
  00205	6b 55 84 60	 imul	 edx, DWORD PTR tv159[ebp], 96
  00209	8b 45 80	 mov	 eax, DWORD PTR tv167[ebp]
  0020c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00213	ff d1		 call	 ecx
  00215	89 45 dc	 mov	 DWORD PTR _threat_position$[ebp], eax

; 4342 : 
; 4343 : 			threat_range = get_3d_range (source_position, threat_position);

  00218	8b 45 dc	 mov	 eax, DWORD PTR _threat_position$[ebp]
  0021b	50		 push	 eax
  0021c	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  0021f	51		 push	 ecx
  00220	e8 00 00 00 00	 call	 ?get_3d_range@@YGMPBUVEC3D@@0@Z ; get_3d_range
  00225	d9 5d f0	 fstp	 DWORD PTR _threat_range$[ebp]

; 4344 : 
; 4345 : 			threat_velocity = get_local_entity_float_value (threat, FLOAT_TYPE_VELOCITY);

  00228	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0022c	74 0a		 je	 SHORT $LN27@get_closes
  0022e	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  00231	8b 08		 mov	 ecx, DWORD PTR [eax]
  00233	89 4d 84	 mov	 DWORD PTR tv182[ebp], ecx
  00236	eb 21		 jmp	 SHORT $LN28@get_closes
$LN27@get_closes:
  00238	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  0023e	83 c2 2a	 add	 edx, 42			; 0000002aH
  00241	52		 push	 edx
  00242	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00247	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0024c	50		 push	 eax
  0024d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00252	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv182[ebp], 0
$LN28@get_closes:
  00259	b9 01 00 00 00	 mov	 ecx, 1
  0025e	85 c9		 test	 ecx, ecx
  00260	74 09		 je	 SHORT $LN29@get_closes
  00262	c7 45 80 93 00
	00 00		 mov	 DWORD PTR tv190[ebp], 147 ; 00000093H
  00269	eb 21		 jmp	 SHORT $LN30@get_closes
$LN29@get_closes:
  0026b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00271	83 c2 2a	 add	 edx, 42			; 0000002aH
  00274	52		 push	 edx
  00275	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0027a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0027f	50		 push	 eax
  00280	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00285	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv190[ebp], 0
$LN30@get_closes:
  0028c	68 93 00 00 00	 push	 147			; 00000093H
  00291	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00294	51		 push	 ecx
  00295	69 55 84 bc 02
	00 00		 imul	 edx, DWORD PTR tv182[ebp], 700
  0029c	8b 45 80	 mov	 eax, DWORD PTR tv190[ebp]
  0029f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  002a6	ff d1		 call	 ecx
  002a8	d9 5d ec	 fstp	 DWORD PTR _threat_velocity$[ebp]

; 4346 : 
; 4347 : 			time_to_impact = threat_range / max (threat_velocity, 1.0f);

  002ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002b3	f3 0f 11 45 88	 movss	 DWORD PTR $T1[ebp], xmm0
  002b8	8d 45 88	 lea	 eax, DWORD PTR $T1[ebp]
  002bb	50		 push	 eax
  002bc	8d 4d ec	 lea	 ecx, DWORD PTR _threat_velocity$[ebp]
  002bf	51		 push	 ecx
  002c0	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  002c5	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _threat_range$[ebp]
  002ca	f3 0f 5e 00	 divss	 xmm0, DWORD PTR [eax]
  002ce	f3 0f 11 45 e8	 movss	 DWORD PTR _time_to_impact$[ebp], xmm0

; 4348 : 
; 4349 : 			//
; 4350 : 			// guard against 'overshot target' to prevent spurious indications
; 4351 : 			//
; 4352 : 
; 4353 : 			overshot = FALSE;

  002d3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _overshot$[ebp], 0

; 4354 : 
; 4355 : 			if (time_to_impact < 1.0)

  002da	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _time_to_impact$[ebp]
  002df	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  002e7	66 0f 2f c8	 comisd	 xmm1, xmm0
  002eb	0f 86 f3 00 00
	00		 jbe	 $LN10@get_closes

; 4356 : 			{
; 4357 : 				uvec_threat_to_target.x = source_position->x - threat_position->x;

  002f1	8b 45 0c	 mov	 eax, DWORD PTR _source_position$[ebp]
  002f4	8b 4d dc	 mov	 ecx, DWORD PTR _threat_position$[ebp]
  002f7	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002fb	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  002ff	f3 0f 11 45 d0	 movss	 DWORD PTR _uvec_threat_to_target$[ebp], xmm0

; 4358 : 				uvec_threat_to_target.y = source_position->y - threat_position->y;

  00304	8b 45 0c	 mov	 eax, DWORD PTR _source_position$[ebp]
  00307	8b 4d dc	 mov	 ecx, DWORD PTR _threat_position$[ebp]
  0030a	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0030f	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00314	f3 0f 11 45 d4	 movss	 DWORD PTR _uvec_threat_to_target$[ebp+4], xmm0

; 4359 : 				uvec_threat_to_target.z = source_position->z - threat_position->z;

  00319	8b 45 0c	 mov	 eax, DWORD PTR _source_position$[ebp]
  0031c	8b 4d dc	 mov	 ecx, DWORD PTR _threat_position$[ebp]
  0031f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00324	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00329	f3 0f 11 45 d8	 movss	 DWORD PTR _uvec_threat_to_target$[ebp+8], xmm0

; 4360 : 
; 4361 : 				length = get_3d_vector_magnitude (&uvec_threat_to_target);

  0032e	8d 45 d0	 lea	 eax, DWORD PTR _uvec_threat_to_target$[ebp]
  00331	50		 push	 eax
  00332	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  00337	d9 5d e4	 fstp	 DWORD PTR _length$[ebp]

; 4362 : 
; 4363 : 				if (length > 1.0)

  0033a	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  0033f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  00347	0f 86 90 00 00
	00		 jbe	 $LN9@get_closes

; 4364 : 				{
; 4365 : 					normalise_3d_vector_given_magnitude (&uvec_threat_to_target, length);

  0034d	51		 push	 ecx
  0034e	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _length$[ebp]
  00353	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00358	8d 45 d0	 lea	 eax, DWORD PTR _uvec_threat_to_target$[ebp]
  0035b	50		 push	 eax
  0035c	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 4366 : 
; 4367 : 					attitude = get_local_entity_attitude_matrix_ptr (threat);

  00361	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  00365	74 0a		 je	 SHORT $LN31@get_closes
  00367	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  0036a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0036c	89 4d 84	 mov	 DWORD PTR tv223[ebp], ecx
  0036f	eb 21		 jmp	 SHORT $LN32@get_closes
$LN31@get_closes:
  00371	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00377	83 c2 40	 add	 edx, 64			; 00000040H
  0037a	52		 push	 edx
  0037b	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00380	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00385	50		 push	 eax
  00386	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0038b	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv223[ebp], 0
$LN32@get_closes:
  00392	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00395	51		 push	 ecx
  00396	8b 55 84	 mov	 edx, DWORD PTR tv223[ebp]
  00399	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_attitude_matrix_ptr@@3PAP6GPAY122MPAUENTITY@@@ZA[edx*4]
  003a0	ff d0		 call	 eax
  003a2	89 45 cc	 mov	 DWORD PTR _attitude$[ebp], eax

; 4368 : 
; 4369 : 					cos_error = get_3d_unit_vector_dot_product ((vec3d *) &((*attitude) [2][0]), &uvec_threat_to_target);

  003a5	8d 45 d0	 lea	 eax, DWORD PTR _uvec_threat_to_target$[ebp]
  003a8	50		 push	 eax
  003a9	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  003ae	d1 e1		 shl	 ecx, 1
  003b0	03 4d cc	 add	 ecx, DWORD PTR _attitude$[ebp]
  003b3	ba 04 00 00 00	 mov	 edx, 4
  003b8	6b c2 00	 imul	 eax, edx, 0
  003bb	03 c8		 add	 ecx, eax
  003bd	51		 push	 ecx
  003be	e8 00 00 00 00	 call	 ?get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z ; get_3d_unit_vector_dot_product
  003c3	d9 5d e0	 fstp	 DWORD PTR _cos_error$[ebp]

; 4370 : 
; 4371 : 					if (cos_error < 0.0)

  003c6	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _cos_error$[ebp]
  003cb	0f 57 c9	 xorps	 xmm1, xmm1
  003ce	66 0f 2f c8	 comisd	 xmm1, xmm0
  003d2	76 07		 jbe	 SHORT $LN11@get_closes

; 4372 : 					{
; 4373 : 						overshot = TRUE;

  003d4	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _overshot$[ebp], 1
$LN11@get_closes:

; 4374 : 					}
; 4375 : 				}
; 4376 : 				else

  003db	eb 07		 jmp	 SHORT $LN10@get_closes
$LN9@get_closes:

; 4377 : 				{
; 4378 : 					overshot = TRUE;

  003dd	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _overshot$[ebp], 1
$LN10@get_closes:

; 4379 : 				}
; 4380 : 			}
; 4381 : 
; 4382 : 			if (!overshot)

  003e4	83 7d f4 00	 cmp	 DWORD PTR _overshot$[ebp], 0
  003e8	75 1f		 jne	 SHORT $LN13@get_closes

; 4383 : 			{
; 4384 : 				if (time_to_impact < *closest_missile_time_to_impact)

  003ea	8b 45 14	 mov	 eax, DWORD PTR _closest_missile_time_to_impact$[ebp]
  003ed	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  003f1	0f 2f 45 e8	 comiss	 xmm0, DWORD PTR _time_to_impact$[ebp]
  003f5	76 12		 jbe	 SHORT $LN13@get_closes

; 4385 : 				{
; 4386 : 					closest_missile = threat;

  003f7	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  003fa	89 45 f8	 mov	 DWORD PTR _closest_missile$[ebp], eax

; 4387 : 
; 4388 : 					*closest_missile_time_to_impact = time_to_impact;

  003fd	8b 45 14	 mov	 eax, DWORD PTR _closest_missile_time_to_impact$[ebp]
  00400	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _time_to_impact$[ebp]
  00405	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
$LN13@get_closes:

; 4389 : 				}
; 4390 : 			}
; 4391 : 		}
; 4392 : 
; 4393 : 		threat = get_local_entity_child_succ (threat, LIST_TYPE_TARGET);

  00409	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0040d	74 0a		 je	 SHORT $LN33@get_closes
  0040f	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  00412	8b 08		 mov	 ecx, DWORD PTR [eax]
  00414	89 4d 84	 mov	 DWORD PTR tv245[ebp], ecx
  00417	eb 21		 jmp	 SHORT $LN34@get_closes
$LN33@get_closes:
  00419	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  0041f	83 c2 5a	 add	 edx, 90			; 0000005aH
  00422	52		 push	 edx
  00423	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00428	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0042d	50		 push	 eax
  0042e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00433	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv245[ebp], 0
$LN34@get_closes:
  0043a	b9 01 00 00 00	 mov	 ecx, 1
  0043f	85 c9		 test	 ecx, ecx
  00441	74 09		 je	 SHORT $LN35@get_closes
  00443	c7 45 80 26 00
	00 00		 mov	 DWORD PTR tv253[ebp], 38 ; 00000026H
  0044a	eb 21		 jmp	 SHORT $LN36@get_closes
$LN35@get_closes:
  0044c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00452	83 c2 5a	 add	 edx, 90			; 0000005aH
  00455	52		 push	 edx
  00456	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0045b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00460	50		 push	 eax
  00461	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00466	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv253[ebp], 0
$LN36@get_closes:
  0046d	6a 26		 push	 38			; 00000026H
  0046f	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00472	51		 push	 ecx
  00473	69 55 84 b4 00
	00 00		 imul	 edx, DWORD PTR tv245[ebp], 180
  0047a	8b 45 80	 mov	 eax, DWORD PTR tv253[ebp]
  0047d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00484	ff d1		 call	 ecx
  00486	89 45 fc	 mov	 DWORD PTR _threat$[ebp], eax

; 4394 : 	}

  00489	e9 82 fc ff ff	 jmp	 $LN2@get_closes
$LN3@get_closes:

; 4395 : 
; 4396 : 	return (closest_missile);

  0048e	8b 45 f8	 mov	 eax, DWORD PTR _closest_missile$[ebp]

; 4397 : }

  00491	5f		 pop	 edi
  00492	5e		 pop	 esi
  00493	5b		 pop	 ebx
  00494	8b e5		 mov	 esp, ebp
  00496	5d		 pop	 ebp
  00497	c2 10 00	 ret	 16			; 00000010H
?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ENDP ; get_closest_missile
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_tactical_situation_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv2105 = -448						; size = 4
tv1458 = -444						; size = 4
tv1429 = -444						; size = 4
tv1393 = -444						; size = 4
tv1326 = -444						; size = 4
tv1160 = -444						; size = 4
tv1125 = -444						; size = 4
tv1104 = -444						; size = 4
tv1083 = -444						; size = 4
tv1064 = -444						; size = 4
tv1045 = -444						; size = 4
tv1024 = -444						; size = 4
tv1003 = -444						; size = 4
tv982 = -444						; size = 4
tv963 = -444						; size = 4
tv944 = -444						; size = 4
tv925 = -444						; size = 4
tv893 = -444						; size = 4
tv861 = -444						; size = 4
tv842 = -444						; size = 4
tv822 = -444						; size = 4
tv781 = -444						; size = 4
tv753 = -444						; size = 4
tv731 = -444						; size = 4
tv710 = -444						; size = 4
tv691 = -444						; size = 4
tv672 = -444						; size = 4
tv635 = -444						; size = 4
tv614 = -444						; size = 4
tv541 = -444						; size = 4
tv480 = -444						; size = 4
tv170 = -444						; size = 4
tv150 = -444						; size = 4
tv130 = -444						; size = 4
tv78 = -444						; size = 4
tv1450 = -440						; size = 4
tv1421 = -440						; size = 4
tv1385 = -440						; size = 4
tv1318 = -440						; size = 4
tv1213 = -440						; size = 4
tv1205 = -440						; size = 4
tv1152 = -440						; size = 4
tv1117 = -440						; size = 4
tv1096 = -440						; size = 4
tv1076 = -440						; size = 4
tv1057 = -440						; size = 4
tv1037 = -440						; size = 4
tv1017 = -440						; size = 4
tv995 = -440						; size = 4
tv975 = -440						; size = 4
tv956 = -440						; size = 4
tv937 = -440						; size = 4
tv917 = -440						; size = 4
tv885 = -440						; size = 4
tv854 = -440						; size = 4
tv834 = -440						; size = 4
tv814 = -440						; size = 4
tv773 = -440						; size = 4
tv745 = -440						; size = 4
tv723 = -440						; size = 4
tv703 = -440						; size = 4
tv684 = -440						; size = 4
tv664 = -440						; size = 4
tv627 = -440						; size = 4
tv606 = -440						; size = 4
tv533 = -440						; size = 4
tv472 = -440						; size = 4
tv162 = -440						; size = 4
tv142 = -440						; size = 4
tv90 = -440						; size = 4
tv70 = -440						; size = 4
_seconds$1 = -372					; size = 4
_minutes$2 = -368					; size = 4
_hours$3 = -364						; size = 4
_time_to_go$4 = -360					; size = 4
_f$5 = -356						; size = 4
_i$6 = -352						; size = 4
_waypoint_range$7 = -348				; size = 4
_waypoint_position$8 = -344				; size = 12
_wp$9 = -332						; size = 4
_target_range$10 = -328					; size = 4
_target_position$11 = -324				; size = 4
_dy$12 = -320						; size = 4
_dx$13 = -316						; size = 4
_air_scan_range$14 = -312				; size = 4
_draw_threat_line$15 = -308				; size = 4
_threat_type$16 = -304					; size = 4
_target_position$17 = -300				; size = 4
_launched_weapon$18 = -296				; size = 4
_target$19 = -292					; size = 4
_wp2_rel_position$20 = -288				; size = 12
_wp1_rel_position$21 = -276				; size = 12
_wp2$22 = -264						; size = 4
_wp1$23 = -260						; size = 4
_radius$24 = -256					; size = 4
_source_position$ = -252				; size = 4
_source_target$ = -248					; size = 4
_source$ = -244						; size = 4
_source_heading$ = -240					; size = 4
_y_adjust$ = -236					; size = 4
_width$ = -232						; size = 4
_y_origin$ = -228					; size = 4
_x_origin$ = -224					; size = 4
_scale$ = -220						; size = 4
_v$ = -216						; size = 4
_u$ = -212						; size = 4
_source_side$ = -208					; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
?draw_tactical_situation_display_mfd@@YGXXZ PROC	; draw_tactical_situation_display_mfd, COMDAT

; 3423 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 01 00
	00		 sub	 esp, 448		; 000001c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3424 : 	char
; 3425 : 		*s,
; 3426 : 		buffer[200];
; 3427 : 
; 3428 : 	entity_sides
; 3429 : 		source_side;
; 3430 : 
; 3431 : 	float
; 3432 : 		u,
; 3433 : 		v,
; 3434 : 		scale,
; 3435 : 		x_origin,
; 3436 : 		y_origin,
; 3437 : 		width,
; 3438 : 		y_adjust,
; 3439 : 		source_heading;
; 3440 : 
; 3441 : 	entity
; 3442 : 		*source,
; 3443 : 		*source_target;
; 3444 : 
; 3445 : 	vec3d
; 3446 : 		*source_position;
; 3447 : 
; 3448 : 	source = get_gunship_entity ();

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00011	89 85 0c ff ff
	ff		 mov	 DWORD PTR _source$[ebp], eax

; 3449 : 
; 3450 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);

  00017	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0001e	74 10		 je	 SHORT $LN130@draw_tacti
  00020	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]
  00028	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv70[ebp], ecx
  0002e	eb 24		 jmp	 SHORT $LN131@draw_tacti
$LN130@draw_tacti:
  00030	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  00036	83 c2 1b	 add	 edx, 27			; 0000001bH
  00039	52		 push	 edx
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0004a	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN131@draw_tacti:
  00054	b9 01 00 00 00	 mov	 ecx, 1
  00059	85 c9		 test	 ecx, ecx
  0005b	74 0c		 je	 SHORT $LN132@draw_tacti
  0005d	c7 85 44 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv78[ebp], 187 ; 000000bbH
  00067	eb 24		 jmp	 SHORT $LN133@draw_tacti
$LN132@draw_tacti:
  00069	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  0006f	83 c2 1b	 add	 edx, 27			; 0000001bH
  00072	52		 push	 edx
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00078	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00083	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN133@draw_tacti:
  0008d	68 bb 00 00 00	 push	 187			; 000000bbH
  00092	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00098	51		 push	 ecx
  00099	69 95 48 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv70[ebp], 1116
  000a3	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR tv78[ebp]
  000a9	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000b0	ff d1		 call	 ecx
  000b2	89 85 30 ff ff
	ff		 mov	 DWORD PTR _source_side$[ebp], eax

; 3451 : 
; 3452 : 	source_heading = get_local_entity_float_value (source, FLOAT_TYPE_HEADING);

  000b8	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  000bf	74 10		 je	 SHORT $LN134@draw_tacti
  000c1	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  000c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c9	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  000cf	eb 24		 jmp	 SHORT $LN135@draw_tacti
$LN134@draw_tacti:
  000d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  000d7	83 c2 1d	 add	 edx, 29			; 0000001dH
  000da	52		 push	 edx
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000eb	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv90[ebp], 0
$LN135@draw_tacti:
  000f5	b9 01 00 00 00	 mov	 ecx, 1
  000fa	85 c9		 test	 ecx, ecx
  000fc	74 0c		 je	 SHORT $LN136@draw_tacti
  000fe	c7 85 44 fe ff
	ff 34 00 00 00	 mov	 DWORD PTR tv130[ebp], 52 ; 00000034H
  00108	eb 24		 jmp	 SHORT $LN137@draw_tacti
$LN136@draw_tacti:
  0010a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  00110	83 c2 1d	 add	 edx, 29			; 0000001dH
  00113	52		 push	 edx
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00119	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00124	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv130[ebp], 0
$LN137@draw_tacti:
  0012e	6a 34		 push	 52			; 00000034H
  00130	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00136	51		 push	 ecx
  00137	69 95 48 fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv90[ebp], 700
  00141	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR tv130[ebp]
  00147	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  0014e	ff d1		 call	 ecx
  00150	d9 9d 10 ff ff
	ff		 fstp	 DWORD PTR _source_heading$[ebp]

; 3453 : 
; 3454 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  00156	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0015d	74 10		 je	 SHORT $LN138@draw_tacti
  0015f	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00165	8b 08		 mov	 ecx, DWORD PTR [eax]
  00167	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv142[ebp], ecx
  0016d	eb 24		 jmp	 SHORT $LN139@draw_tacti
$LN138@draw_tacti:
  0016f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  00175	83 c2 1f	 add	 edx, 31			; 0000001fH
  00178	52		 push	 edx
  00179	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0017e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00183	50		 push	 eax
  00184	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00189	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv142[ebp], 0
$LN139@draw_tacti:
  00193	b9 01 00 00 00	 mov	 ecx, 1
  00198	85 c9		 test	 ecx, ecx
  0019a	74 0c		 je	 SHORT $LN140@draw_tacti
  0019c	c7 85 44 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv150[ebp], 8
  001a6	eb 24		 jmp	 SHORT $LN141@draw_tacti
$LN140@draw_tacti:
  001a8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  001ae	83 c2 1f	 add	 edx, 31			; 0000001fH
  001b1	52		 push	 edx
  001b2	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001bc	50		 push	 eax
  001bd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c2	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], 0
$LN141@draw_tacti:
  001cc	6a 08		 push	 8
  001ce	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  001d4	51		 push	 ecx
  001d5	6b 95 48 fe ff
	ff 60		 imul	 edx, DWORD PTR tv142[ebp], 96
  001dc	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR tv150[ebp]
  001e2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  001e9	ff d1		 call	 ecx
  001eb	89 85 04 ff ff
	ff		 mov	 DWORD PTR _source_position$[ebp], eax

; 3455 : 
; 3456 : 	source_target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  001f1	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  001f8	74 10		 je	 SHORT $LN142@draw_tacti
  001fa	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00200	8b 08		 mov	 ecx, DWORD PTR [eax]
  00202	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv162[ebp], ecx
  00208	eb 24		 jmp	 SHORT $LN143@draw_tacti
$LN142@draw_tacti:
  0020a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  00210	83 c2 21	 add	 edx, 33			; 00000021H
  00213	52		 push	 edx
  00214	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00219	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0021e	50		 push	 eax
  0021f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00224	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv162[ebp], 0
$LN143@draw_tacti:
  0022e	b9 01 00 00 00	 mov	 ecx, 1
  00233	85 c9		 test	 ecx, ecx
  00235	74 0c		 je	 SHORT $LN144@draw_tacti
  00237	c7 85 44 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv170[ebp], 38 ; 00000026H
  00241	eb 24		 jmp	 SHORT $LN145@draw_tacti
$LN144@draw_tacti:
  00243	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  00249	83 c2 21	 add	 edx, 33			; 00000021H
  0024c	52		 push	 edx
  0024d	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00252	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00257	50		 push	 eax
  00258	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0025d	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv170[ebp], 0
$LN145@draw_tacti:
  00267	6a 26		 push	 38			; 00000026H
  00269	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  0026f	51		 push	 ecx
  00270	69 95 48 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv162[ebp], 180
  0027a	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR tv170[ebp]
  00280	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00287	ff d1		 call	 ecx
  00289	89 85 08 ff ff
	ff		 mov	 DWORD PTR _source_target$[ebp], eax

; 3457 : 
; 3458 : 	scale = RADIUS / tsd_ase_range;

  0028f	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?tsd_ase_range@@3MA
  00297	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff5d3d193333333
  0029f	f2 0f 5e c8	 divsd	 xmm1, xmm0
  002a3	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  002a7	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _scale$[ebp], xmm0

; 3459 : 
; 3460 : 	//
; 3461 : 	// match ground radar origin
; 3462 : 	//
; 3463 : 
; 3464 : 	if (draw_large_mfd)

  002af	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  002b6	74 1d		 je	 SHORT $LN18@draw_tacti

; 3465 : 	{
; 3466 : 		x_origin = 0.0;

  002b8	0f 57 c0	 xorps	 xmm0, xmm0
  002bb	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _x_origin$[ebp], xmm0

; 3467 : 		y_origin = -0.65;

  002c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  002cb	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _y_origin$[ebp], xmm0

; 3468 : 	}
; 3469 : 	else

  002d3	eb 1b		 jmp	 SHORT $LN19@draw_tacti
$LN18@draw_tacti:

; 3470 : 	{
; 3471 : 		x_origin = 0.0;

  002d5	0f 57 c0	 xorps	 xmm0, xmm0
  002d8	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _x_origin$[ebp], xmm0

; 3472 : 		y_origin = -0.70;

  002e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  002e8	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _y_origin$[ebp], xmm0
$LN19@draw_tacti:

; 3473 : 	}
; 3474 : 
; 3475 : 	get_2d_float_screen_coordinates (x_origin, y_origin, &u, &v);

  002f0	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _v$[ebp]
  002f6	50		 push	 eax
  002f7	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _u$[ebp]
  002fd	51		 push	 ecx
  002fe	51		 push	 ecx
  002ff	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  00307	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030c	51		 push	 ecx
  0030d	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  00315	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0031a	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 3476 : 
; 3477 : 	u -= mfd_viewport_x_min;

  0031f	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  00327	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0032f	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _u$[ebp], xmm0

; 3478 : 	v -= mfd_viewport_y_min;

  00337	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  0033f	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00347	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _v$[ebp], xmm0

; 3479 : 
; 3480 : 	////////////////////////////////////////
; 3481 : 	//
; 3482 : 	//VJ 030423 TSD RENDER MOD
; 3483 : 	//
; 3484 : 	////////////////////////////////////////
; 3485 : 
; 3486 : 	if (tsd_render_mode != TSD_RENDER_CONTOUR_MODE && !blackhawk_damage.navigation_computer)

  0034f	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  00356	0f 84 05 02 00
	00		 je	 $LN20@draw_tacti
  0035c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  00361	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  00364	83 e0 01	 and	 eax, 1
  00367	0f 85 f4 01 00
	00		 jne	 $LN20@draw_tacti

; 3487 : 	{
; 3488 : 		//VJ 030423 TSD render mod
; 3489 : 		set_rgb_colour (MFD_COLOUR1,	0, 0,  96, 255);  //dark blue

  0036d	b8 04 00 00 00	 mov	 eax, 4
  00372	6b c8 00	 imul	 ecx, eax, 0
  00375	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  0037c	b8 04 00 00 00	 mov	 eax, 4
  00381	6b c8 00	 imul	 ecx, eax, 0
  00384	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 0
  0038b	b8 04 00 00 00	 mov	 eax, 4
  00390	6b c8 00	 imul	 ecx, eax, 0
  00393	c6 81 00 00 00
	00 60		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 96 ; 00000060H
  0039a	b8 04 00 00 00	 mov	 eax, 4
  0039f	6b c8 00	 imul	 ecx, eax, 0
  003a2	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 3490 : 	   set_rgb_colour (MFD_COLOUR2,	32, 32,  164, 255); //light blue

  003a9	b8 04 00 00 00	 mov	 eax, 4
  003ae	c1 e0 00	 shl	 eax, 0
  003b1	c6 80 02 00 00
	00 20		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 32 ; 00000020H
  003b8	b8 04 00 00 00	 mov	 eax, 4
  003bd	c1 e0 00	 shl	 eax, 0
  003c0	c6 80 01 00 00
	00 20		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 32 ; 00000020H
  003c7	b8 04 00 00 00	 mov	 eax, 4
  003cc	c1 e0 00	 shl	 eax, 0
  003cf	c6 80 00 00 00
	00 a4		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 164 ; 000000a4H
  003d6	b8 04 00 00 00	 mov	 eax, 4
  003db	c1 e0 00	 shl	 eax, 0
  003de	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 3491 : 		set_rgb_colour (MFD_COLOUR3,	240, 64,   0, 255); //bright red

  003e5	b8 04 00 00 00	 mov	 eax, 4
  003ea	d1 e0		 shl	 eax, 1
  003ec	c6 80 02 00 00
	00 f0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 240 ; 000000f0H
  003f3	b8 04 00 00 00	 mov	 eax, 4
  003f8	d1 e0		 shl	 eax, 1
  003fa	c6 80 01 00 00
	00 40		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 64 ; 00000040H
  00401	b8 04 00 00 00	 mov	 eax, 4
  00406	d1 e0		 shl	 eax, 1
  00408	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  0040f	b8 04 00 00 00	 mov	 eax, 4
  00414	d1 e0		 shl	 eax, 1
  00416	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 3492 : 		set_rgb_colour (MFD_COLOUR4,	148, 32,   0, 255);//dark red

  0041d	b8 04 00 00 00	 mov	 eax, 4
  00422	6b c8 03	 imul	 ecx, eax, 3
  00425	c6 81 02 00 00
	00 94		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 148 ; 00000094H
  0042c	b8 04 00 00 00	 mov	 eax, 4
  00431	6b c8 03	 imul	 ecx, eax, 3
  00434	c6 81 01 00 00
	00 20		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 32 ; 00000020H
  0043b	b8 04 00 00 00	 mov	 eax, 4
  00440	6b c8 03	 imul	 ecx, eax, 3
  00443	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  0044a	b8 04 00 00 00	 mov	 eax, 4
  0044f	6b c8 03	 imul	 ecx, eax, 3
  00452	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 3493 : 
; 3494 : 		set_rgb_colour (MFD_COLOUR6,	255, 255,  0, 255);

  00459	b8 04 00 00 00	 mov	 eax, 4
  0045e	6b c8 05	 imul	 ecx, eax, 5
  00461	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  00468	b8 04 00 00 00	 mov	 eax, 4
  0046d	6b c8 05	 imul	 ecx, eax, 5
  00470	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  00477	b8 04 00 00 00	 mov	 eax, 4
  0047c	6b c8 05	 imul	 ecx, eax, 5
  0047f	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00486	b8 04 00 00 00	 mov	 eax, 4
  0048b	6b c8 05	 imul	 ecx, eax, 5
  0048e	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 3495 : 		//VJ 030511 colours 7 and 8 are grays when enemy colour option is off in eech.ini		
; 3496 : 		//VJ 030530 colour tweaks: black and dark gray are best
; 3497 : 		set_rgb_colour (MFD_COLOUR7,    64, 64, 64, 255);

  00495	b8 04 00 00 00	 mov	 eax, 4
  0049a	6b c8 0b	 imul	 ecx, eax, 11
  0049d	c6 81 02 00 00
	00 40		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 64 ; 00000040H
  004a4	b8 04 00 00 00	 mov	 eax, 4
  004a9	6b c8 0b	 imul	 ecx, eax, 11
  004ac	c6 81 01 00 00
	00 40		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 64 ; 00000040H
  004b3	b8 04 00 00 00	 mov	 eax, 4
  004b8	6b c8 0b	 imul	 ecx, eax, 11
  004bb	c6 81 00 00 00
	00 40		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 64 ; 00000040H
  004c2	b8 04 00 00 00	 mov	 eax, 4
  004c7	6b c8 0b	 imul	 ecx, eax, 11
  004ca	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 3498 : 		set_rgb_colour (MFD_COLOUR8,   0, 0, 0, 255);

  004d1	b8 04 00 00 00	 mov	 eax, 4
  004d6	6b c8 0c	 imul	 ecx, eax, 12
  004d9	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  004e0	b8 04 00 00 00	 mov	 eax, 4
  004e5	6b c8 0c	 imul	 ecx, eax, 12
  004e8	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 0
  004ef	b8 04 00 00 00	 mov	 eax, 4
  004f4	6b c8 0c	 imul	 ecx, eax, 12
  004f7	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  004fe	b8 04 00 00 00	 mov	 eax, 4
  00503	6b c8 0c	 imul	 ecx, eax, 12
  00506	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 3499 : 		
; 3500 : 	   draw_tsd_terrain_map (mfd_env, -y_origin, tsd_ase_range, scale, source_position, source_heading, FALSE);

  0050d	6a 00		 push	 0
  0050f	51		 push	 ecx
  00510	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  00518	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0051d	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00523	50		 push	 eax
  00524	51		 push	 ecx
  00525	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  0052d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00532	51		 push	 ecx
  00533	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  0053b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00540	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  00548	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0054f	51		 push	 ecx
  00550	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00555	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0055b	51		 push	 ecx
  0055c	e8 00 00 00 00	 call	 ?draw_tsd_terrain_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MH@Z ; draw_tsd_terrain_map
$LN20@draw_tacti:

; 3501 : 	}
; 3502 : 	
; 3503 : 	////////////////////////////////////////
; 3504 : 	//
; 3505 : 	// contour map
; 3506 : 	//
; 3507 : 	////////////////////////////////////////
; 3508 : 	
; 3509 : //VJ 030423 TSD render mod, added mfd_env
; 3510 : 	if (!blackhawk_damage.navigation_computer)

  00561	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  00566	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  00569	83 e0 01	 and	 eax, 1
  0056c	75 5a		 jne	 SHORT $LN21@draw_tacti

; 3511 : 		draw_tsd_contour_map (mfd_env, -y_origin, tsd_ase_range, scale, source_position, source_heading, draw_large_mfd, FALSE);

  0056e	6a 00		 push	 0
  00570	a1 00 00 00 00	 mov	 eax, DWORD PTR ?draw_large_mfd@@3HA
  00575	50		 push	 eax
  00576	51		 push	 ecx
  00577	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  0057f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00584	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  0058a	51		 push	 ecx
  0058b	51		 push	 ecx
  0058c	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00594	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00599	51		 push	 ecx
  0059a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  005a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a7	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  005af	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  005b6	51		 push	 ecx
  005b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005bc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  005c2	52		 push	 edx
  005c3	e8 00 00 00 00	 call	 ?draw_tsd_contour_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MHH@Z ; draw_tsd_contour_map
$LN21@draw_tacti:

; 3512 : 
; 3513 : 
; 3514 : 	////////////////////////////////////////
; 3515 : 	//
; 3516 : 	// radar scan
; 3517 : 	//
; 3518 : 	////////////////////////////////////////
; 3519 : 
; 3520 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_NAVIGATION)

  005c8	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
  005cf	0f 84 4a 04 00
	00		 je	 $LN27@draw_tacti

; 3521 : 	{
; 3522 : 		float
; 3523 : 			radius;
; 3524 : 
; 3525 : 		if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_GROUND_RADAR)

  005d5	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 1 ; target_acquisition_system
  005dc	0f 85 d5 01 00
	00		 jne	 $LN23@draw_tacti

; 3526 : 		{
; 3527 : 			set_2d_viewport_origin (mfd_env, u, v);

  005e2	51		 push	 ecx
  005e3	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  005eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f0	51		 push	 ecx
  005f1	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  005f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00603	50		 push	 eax
  00604	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 3528 : 
; 3529 : 			radius = ground_radar.scan_range * scale;

  00609	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A
  00611	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00619	f3 0f 11 85 00
	ff ff ff	 movss	 DWORD PTR _radius$24[ebp], xmm0

; 3530 : 
; 3531 : 			set_2d_window_rotation (mfd_env, -ground_radar.scan_datum);

  00621	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  00629	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00630	51		 push	 ecx
  00631	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00636	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0063b	50		 push	 eax
  0063c	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 3532 : 
; 3533 : 			draw_radar_arc (ground_radar.scan_arc_size, radius, MFD_COLOUR4);

  00641	b8 04 00 00 00	 mov	 eax, 4
  00646	6b c8 03	 imul	 ecx, eax, 3
  00649	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0064f	52		 push	 edx
  00650	51		 push	 ecx
  00651	f3 0f 10 85 00
	ff ff ff	 movss	 xmm0, DWORD PTR _radius$24[ebp]
  00659	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0065e	51		 push	 ecx
  0065f	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  00667	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0066c	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 3534 : 
; 3535 : 			set_2d_window_rotation (mfd_env, -(ground_radar.scan_datum - (ground_radar.scan_arc_size * 0.5)));

  00671	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  00679	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  00681	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00689	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0068d	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00694	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00698	51		 push	 ecx
  00699	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0069e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  006a3	50		 push	 eax
  006a4	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 3536 : 
; 3537 : 			draw_2d_line (0.0, 0.0, 0.0, radius, MFD_COLOUR4);

  006a9	b8 04 00 00 00	 mov	 eax, 4
  006ae	6b c8 03	 imul	 ecx, eax, 3
  006b1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006b7	52		 push	 edx
  006b8	51		 push	 ecx
  006b9	f3 0f 10 85 00
	ff ff ff	 movss	 xmm0, DWORD PTR _radius$24[ebp]
  006c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006c6	51		 push	 ecx
  006c7	0f 57 c0	 xorps	 xmm0, xmm0
  006ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006cf	51		 push	 ecx
  006d0	0f 57 c0	 xorps	 xmm0, xmm0
  006d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d8	51		 push	 ecx
  006d9	0f 57 c0	 xorps	 xmm0, xmm0
  006dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006e1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3538 : 
; 3539 : 			set_2d_window_rotation (mfd_env, -(ground_radar.scan_datum + (ground_radar.scan_arc_size * 0.5)));

  006e6	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  006ee	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  006f6	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  006fe	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00702	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00709	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0070d	51		 push	 ecx
  0070e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00713	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00718	50		 push	 eax
  00719	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 3540 : 
; 3541 : 			draw_2d_line (0.0, 0.0, 0.0, radius, MFD_COLOUR4);

  0071e	b8 04 00 00 00	 mov	 eax, 4
  00723	6b c8 03	 imul	 ecx, eax, 3
  00726	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0072c	52		 push	 edx
  0072d	51		 push	 ecx
  0072e	f3 0f 10 85 00
	ff ff ff	 movss	 xmm0, DWORD PTR _radius$24[ebp]
  00736	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0073b	51		 push	 ecx
  0073c	0f 57 c0	 xorps	 xmm0, xmm0
  0073f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00744	51		 push	 ecx
  00745	0f 57 c0	 xorps	 xmm0, xmm0
  00748	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0074d	51		 push	 ecx
  0074e	0f 57 c0	 xorps	 xmm0, xmm0
  00751	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00756	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3542 : 
; 3543 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  0075b	51		 push	 ecx
  0075c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00764	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00769	51		 push	 ecx
  0076a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00772	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00777	51		 push	 ecx
  00778	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00780	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00785	51		 push	 ecx
  00786	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0078e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00793	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00798	50		 push	 eax
  00799	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 3544 : 
; 3545 : 			set_2d_window_rotation (mfd_env, 0.0);

  0079e	51		 push	 ecx
  0079f	0f 57 c0	 xorps	 xmm0, xmm0
  007a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  007ac	50		 push	 eax
  007ad	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
  007b2	e9 68 02 00 00	 jmp	 $LN27@draw_tacti
$LN23@draw_tacti:

; 3546 : 		}
; 3547 : 		else if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_AIR_RADAR)

  007b7	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 2 ; target_acquisition_system
  007be	0f 85 5b 02 00
	00		 jne	 $LN27@draw_tacti

; 3548 : 		{
; 3549 : 			set_2d_viewport_origin (mfd_env, u, v);

  007c4	51		 push	 ecx
  007c5	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  007cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d2	51		 push	 ecx
  007d3	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  007db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  007e5	50		 push	 eax
  007e6	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 3550 : 
; 3551 : 			radius = air_radar.scan_range * scale;

  007eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A
  007f3	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  007fb	f3 0f 11 85 00
	ff ff ff	 movss	 DWORD PTR _radius$24[ebp], xmm0

; 3552 : 
; 3553 : 			if (air_radar.scan_arc_size == APACHE_RADAR_SCAN_ARC_SIZE_360)

  00803	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  0080b	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@40c90fdb
  00812	9f		 lahf
  00813	f6 c4 44	 test	 ah, 68			; 00000044H
  00816	7a 39		 jp	 SHORT $LN26@draw_tacti

; 3554 : 			{
; 3555 : 				draw_2d_circle (0.0, 0.0, radius, MFD_COLOUR4);

  00818	b8 04 00 00 00	 mov	 eax, 4
  0081d	6b c8 03	 imul	 ecx, eax, 3
  00820	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00826	52		 push	 edx
  00827	51		 push	 ecx
  00828	f3 0f 10 85 00
	ff ff ff	 movss	 xmm0, DWORD PTR _radius$24[ebp]
  00830	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00835	51		 push	 ecx
  00836	0f 57 c0	 xorps	 xmm0, xmm0
  00839	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0083e	51		 push	 ecx
  0083f	0f 57 c0	 xorps	 xmm0, xmm0
  00842	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00847	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 3556 : 			}
; 3557 : 			else

  0084c	e9 ce 01 00 00	 jmp	 $LN27@draw_tacti
$LN26@draw_tacti:

; 3558 : 			{
; 3559 : 				set_2d_window_rotation (mfd_env, -air_radar.scan_datum);

  00851	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  00859	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00860	51		 push	 ecx
  00861	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00866	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0086b	50		 push	 eax
  0086c	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 3560 : 
; 3561 : 				draw_radar_arc (air_radar.scan_arc_size, radius, MFD_COLOUR4);

  00871	b8 04 00 00 00	 mov	 eax, 4
  00876	6b c8 03	 imul	 ecx, eax, 3
  00879	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0087f	52		 push	 edx
  00880	51		 push	 ecx
  00881	f3 0f 10 85 00
	ff ff ff	 movss	 xmm0, DWORD PTR _radius$24[ebp]
  00889	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0088e	51		 push	 ecx
  0088f	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  00897	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0089c	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 3562 : 
; 3563 : 				draw_2d_line (0.0, 0.0, 0.0, radius, MFD_COLOUR4);

  008a1	b8 04 00 00 00	 mov	 eax, 4
  008a6	6b c8 03	 imul	 ecx, eax, 3
  008a9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008af	52		 push	 edx
  008b0	51		 push	 ecx
  008b1	f3 0f 10 85 00
	ff ff ff	 movss	 xmm0, DWORD PTR _radius$24[ebp]
  008b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008be	51		 push	 ecx
  008bf	0f 57 c0	 xorps	 xmm0, xmm0
  008c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c7	51		 push	 ecx
  008c8	0f 57 c0	 xorps	 xmm0, xmm0
  008cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d0	51		 push	 ecx
  008d1	0f 57 c0	 xorps	 xmm0, xmm0
  008d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3564 : 
; 3565 : 				set_2d_window_rotation (mfd_env, -(air_radar.scan_datum - (air_radar.scan_arc_size * 0.5)));

  008de	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  008e6	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  008ee	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  008f6	f2 0f 5c c1	 subsd	 xmm0, xmm1
  008fa	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00901	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00905	51		 push	 ecx
  00906	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0090b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00910	50		 push	 eax
  00911	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 3566 : 
; 3567 : 				draw_2d_line (0.0, 0.0, 0.0, radius, MFD_COLOUR4);

  00916	b8 04 00 00 00	 mov	 eax, 4
  0091b	6b c8 03	 imul	 ecx, eax, 3
  0091e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00924	52		 push	 edx
  00925	51		 push	 ecx
  00926	f3 0f 10 85 00
	ff ff ff	 movss	 xmm0, DWORD PTR _radius$24[ebp]
  0092e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00933	51		 push	 ecx
  00934	0f 57 c0	 xorps	 xmm0, xmm0
  00937	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0093c	51		 push	 ecx
  0093d	0f 57 c0	 xorps	 xmm0, xmm0
  00940	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00945	51		 push	 ecx
  00946	0f 57 c0	 xorps	 xmm0, xmm0
  00949	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0094e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3568 : 
; 3569 : 				set_2d_window_rotation (mfd_env, -(air_radar.scan_datum + (air_radar.scan_arc_size * 0.5)));

  00953	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  0095b	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  00963	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0096b	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0096f	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00976	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0097a	51		 push	 ecx
  0097b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00980	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00985	50		 push	 eax
  00986	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 3570 : 
; 3571 : 				draw_2d_line (0.0, 0.0, 0.0, radius, MFD_COLOUR4);

  0098b	b8 04 00 00 00	 mov	 eax, 4
  00990	6b c8 03	 imul	 ecx, eax, 3
  00993	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00999	52		 push	 edx
  0099a	51		 push	 ecx
  0099b	f3 0f 10 85 00
	ff ff ff	 movss	 xmm0, DWORD PTR _radius$24[ebp]
  009a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009a8	51		 push	 ecx
  009a9	0f 57 c0	 xorps	 xmm0, xmm0
  009ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b1	51		 push	 ecx
  009b2	0f 57 c0	 xorps	 xmm0, xmm0
  009b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ba	51		 push	 ecx
  009bb	0f 57 c0	 xorps	 xmm0, xmm0
  009be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009c3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3572 : 
; 3573 : 				set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  009c8	51		 push	 ecx
  009c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  009d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009d6	51		 push	 ecx
  009d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  009df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009e4	51		 push	 ecx
  009e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  009ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009f2	51		 push	 ecx
  009f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  009fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a00	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a05	50		 push	 eax
  00a06	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 3574 : 
; 3575 : 				set_2d_window_rotation (mfd_env, 0.0);

  00a0b	51		 push	 ecx
  00a0c	0f 57 c0	 xorps	 xmm0, xmm0
  00a0f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a14	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a19	50		 push	 eax
  00a1a	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN27@draw_tacti:

; 3576 : 			}
; 3577 : 		}
; 3578 : 	}
; 3579 : 
; 3580 : 	////////////////////////////////////////
; 3581 : 	//
; 3582 : 	// waypoint route
; 3583 : 	//
; 3584 : 	////////////////////////////////////////
; 3585 : 
; 3586 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_TARGET && !blackhawk_damage.navigation_computer)

  00a1f	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  00a26	0f 84 e1 07 00
	00		 je	 $LN29@draw_tacti
  00a2c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  00a31	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  00a34	83 e0 01	 and	 eax, 1
  00a37	0f 85 d0 07 00
	00		 jne	 $LN29@draw_tacti

; 3587 : 	{
; 3588 : 		entity
; 3589 : 			*wp1,
; 3590 : 			*wp2;
; 3591 : 
; 3592 : 		vec3d
; 3593 : 			wp1_rel_position,
; 3594 : 			wp2_rel_position;
; 3595 : 
; 3596 : 		wp1 = get_local_entity_first_waypoint (source);

  00a3d	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00a43	50		 push	 eax
  00a44	e8 00 00 00 00	 call	 ?get_local_entity_first_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_first_waypoint
  00a49	89 85 fc fe ff
	ff		 mov	 DWORD PTR _wp1$23[ebp], eax

; 3597 : 
; 3598 : 		if (wp1)

  00a4f	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _wp1$23[ebp], 0
  00a56	0f 84 b1 07 00
	00		 je	 $LN29@draw_tacti

; 3599 : 		{
; 3600 : 			set_2d_viewport_origin (mfd_env, u, v);

  00a5c	51		 push	 ecx
  00a5d	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  00a65	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a6a	51		 push	 ecx
  00a6b	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  00a73	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a78	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a7d	50		 push	 eax
  00a7e	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 3601 : 
; 3602 : 			set_2d_window_rotation (mfd_env, source_heading);

  00a83	51		 push	 ecx
  00a84	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  00a8c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a91	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a96	50		 push	 eax
  00a97	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 3603 : 
; 3604 : 			//
; 3605 : 			// waypoint route
; 3606 : 			//
; 3607 : 
; 3608 : 			get_waypoint_display_position (source, wp1, &wp1_rel_position);

  00a9c	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _wp1_rel_position$21[ebp]
  00aa2	50		 push	 eax
  00aa3	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$23[ebp]
  00aa9	51		 push	 ecx
  00aaa	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  00ab0	52		 push	 edx
  00ab1	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 3609 : 
; 3610 : 			wp1_rel_position.x = (wp1_rel_position.x - source_position->x) * scale;

  00ab6	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00abc	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00ac4	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00ac8	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00ad0	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$21[ebp], xmm0

; 3611 : 			wp1_rel_position.z = (wp1_rel_position.z - source_position->z) * scale;

  00ad8	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00ade	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00ae6	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00aeb	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00af3	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$21[ebp+8], xmm0

; 3612 : 
; 3613 : 			wp2 = get_local_entity_child_succ (wp1, LIST_TYPE_WAYPOINT);

  00afb	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _wp1$23[ebp], 0
  00b02	74 10		 je	 SHORT $LN146@draw_tacti
  00b04	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _wp1$23[ebp]
  00b0a	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b0c	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv472[ebp], ecx
  00b12	eb 27		 jmp	 SHORT $LN147@draw_tacti
$LN146@draw_tacti:
  00b14	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  00b1a	81 c2 be 00 00
	00		 add	 edx, 190		; 000000beH
  00b20	52		 push	 edx
  00b21	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b26	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00b2b	50		 push	 eax
  00b2c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b31	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv472[ebp], 0
$LN147@draw_tacti:
  00b3b	b9 01 00 00 00	 mov	 ecx, 1
  00b40	85 c9		 test	 ecx, ecx
  00b42	74 0c		 je	 SHORT $LN148@draw_tacti
  00b44	c7 85 44 fe ff
	ff 2c 00 00 00	 mov	 DWORD PTR tv480[ebp], 44 ; 0000002cH
  00b4e	eb 27		 jmp	 SHORT $LN149@draw_tacti
$LN148@draw_tacti:
  00b50	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  00b56	81 c2 be 00 00
	00		 add	 edx, 190		; 000000beH
  00b5c	52		 push	 edx
  00b5d	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b62	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00b67	50		 push	 eax
  00b68	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b6d	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv480[ebp], 0
$LN149@draw_tacti:
  00b77	6a 2c		 push	 44			; 0000002cH
  00b79	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$23[ebp]
  00b7f	51		 push	 ecx
  00b80	69 95 48 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv472[ebp], 180
  00b8a	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR tv480[ebp]
  00b90	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00b97	ff d1		 call	 ecx
  00b99	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _wp2$22[ebp], eax
$LN2@draw_tacti:

; 3614 : 
; 3615 : 			while (wp2)

  00b9f	83 bd f8 fe ff
	ff 00		 cmp	 DWORD PTR _wp2$22[ebp], 0
  00ba6	0f 84 90 02 00
	00		 je	 $LN3@draw_tacti

; 3616 : 			{
; 3617 : 				get_waypoint_display_position (source, wp2, &wp2_rel_position);

  00bac	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _wp2_rel_position$20[ebp]
  00bb2	50		 push	 eax
  00bb3	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _wp2$22[ebp]
  00bb9	51		 push	 ecx
  00bba	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  00bc0	52		 push	 edx
  00bc1	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 3618 : 
; 3619 : 				wp2_rel_position.x = (wp2_rel_position.x - source_position->x) * scale;

  00bc6	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00bcc	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp]
  00bd4	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00bd8	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00be0	f3 0f 11 85 e0
	fe ff ff	 movss	 DWORD PTR _wp2_rel_position$20[ebp], xmm0

; 3620 : 				wp2_rel_position.z = (wp2_rel_position.z - source_position->z) * scale;

  00be8	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00bee	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp+8]
  00bf6	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00bfb	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00c03	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _wp2_rel_position$20[ebp+8], xmm0

; 3621 : //VJ 030423 TSD render mod
; 3622 : 				if (draw_large_mfd)

  00c0b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00c12	0f 84 a8 00 00
	00		 je	 $LN30@draw_tacti

; 3623 : 				{
; 3624 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  00c18	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  00c1f	75 4e		 jne	 SHORT $LN32@draw_tacti

; 3625 : 						draw_2d_half_thick_line (wp1_rel_position.x, wp1_rel_position.z, wp2_rel_position.x, wp2_rel_position.z, MFD_COLOUR2);

  00c21	b8 04 00 00 00	 mov	 eax, 4
  00c26	c1 e0 00	 shl	 eax, 0
  00c29	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00c2f	51		 push	 ecx
  00c30	51		 push	 ecx
  00c31	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp+8]
  00c39	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c3e	51		 push	 ecx
  00c3f	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp]
  00c47	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c4c	51		 push	 ecx
  00c4d	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00c55	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c5a	51		 push	 ecx
  00c5b	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00c63	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c68	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 3626 : 					else

  00c6d	eb 4c		 jmp	 SHORT $LN33@draw_tacti
$LN32@draw_tacti:

; 3627 : 						draw_2d_half_thick_line (wp1_rel_position.x, wp1_rel_position.z, wp2_rel_position.x, wp2_rel_position.z, MFD_COLOUR5);

  00c6f	b8 04 00 00 00	 mov	 eax, 4
  00c74	c1 e0 02	 shl	 eax, 2
  00c77	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00c7d	51		 push	 ecx
  00c7e	51		 push	 ecx
  00c7f	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp+8]
  00c87	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c8c	51		 push	 ecx
  00c8d	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp]
  00c95	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c9a	51		 push	 ecx
  00c9b	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00ca3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ca8	51		 push	 ecx
  00ca9	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00cb1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cb6	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN33@draw_tacti:

; 3628 : 				}
; 3629 : 				else

  00cbb	e9 a3 00 00 00	 jmp	 $LN35@draw_tacti
$LN30@draw_tacti:

; 3630 : 				{
; 3631 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  00cc0	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  00cc7	75 4e		 jne	 SHORT $LN34@draw_tacti

; 3632 : 						draw_2d_line (wp1_rel_position.x, wp1_rel_position.z, wp2_rel_position.x, wp2_rel_position.z, MFD_COLOUR2);

  00cc9	b8 04 00 00 00	 mov	 eax, 4
  00cce	c1 e0 00	 shl	 eax, 0
  00cd1	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00cd7	51		 push	 ecx
  00cd8	51		 push	 ecx
  00cd9	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp+8]
  00ce1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ce6	51		 push	 ecx
  00ce7	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp]
  00cef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cf4	51		 push	 ecx
  00cf5	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00cfd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d02	51		 push	 ecx
  00d03	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00d0b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d10	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3633 : 					else

  00d15	eb 4c		 jmp	 SHORT $LN35@draw_tacti
$LN34@draw_tacti:

; 3634 : 						draw_2d_line (wp1_rel_position.x, wp1_rel_position.z, wp2_rel_position.x, wp2_rel_position.z, MFD_COLOUR5);

  00d17	b8 04 00 00 00	 mov	 eax, 4
  00d1c	c1 e0 02	 shl	 eax, 2
  00d1f	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00d25	51		 push	 ecx
  00d26	51		 push	 ecx
  00d27	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp+8]
  00d2f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d34	51		 push	 ecx
  00d35	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$20[ebp]
  00d3d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d42	51		 push	 ecx
  00d43	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00d4b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d50	51		 push	 ecx
  00d51	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00d59	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d5e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN35@draw_tacti:

; 3635 : 				}
; 3636 : 				wp1 = wp2;

  00d63	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _wp2$22[ebp]
  00d69	89 85 fc fe ff
	ff		 mov	 DWORD PTR _wp1$23[ebp], eax

; 3637 : 
; 3638 : 				wp1_rel_position = wp2_rel_position;

  00d6f	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _wp2_rel_position$20[ebp]
  00d75	89 85 ec fe ff
	ff		 mov	 DWORD PTR _wp1_rel_position$21[ebp], eax
  00d7b	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _wp2_rel_position$20[ebp+4]
  00d81	89 8d f0 fe ff
	ff		 mov	 DWORD PTR _wp1_rel_position$21[ebp+4], ecx
  00d87	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _wp2_rel_position$20[ebp+8]
  00d8d	89 95 f4 fe ff
	ff		 mov	 DWORD PTR _wp1_rel_position$21[ebp+8], edx

; 3639 : 
; 3640 : 				wp2 = get_local_entity_child_succ (wp1, LIST_TYPE_WAYPOINT);

  00d93	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _wp1$23[ebp], 0
  00d9a	74 10		 je	 SHORT $LN150@draw_tacti
  00d9c	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _wp1$23[ebp]
  00da2	8b 08		 mov	 ecx, DWORD PTR [eax]
  00da4	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv533[ebp], ecx
  00daa	eb 27		 jmp	 SHORT $LN151@draw_tacti
$LN150@draw_tacti:
  00dac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  00db2	81 c2 d9 00 00
	00		 add	 edx, 217		; 000000d9H
  00db8	52		 push	 edx
  00db9	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00dbe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00dc3	50		 push	 eax
  00dc4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00dc9	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv533[ebp], 0
$LN151@draw_tacti:
  00dd3	b9 01 00 00 00	 mov	 ecx, 1
  00dd8	85 c9		 test	 ecx, ecx
  00dda	74 0c		 je	 SHORT $LN152@draw_tacti
  00ddc	c7 85 44 fe ff
	ff 2c 00 00 00	 mov	 DWORD PTR tv541[ebp], 44 ; 0000002cH
  00de6	eb 27		 jmp	 SHORT $LN153@draw_tacti
$LN152@draw_tacti:
  00de8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  00dee	81 c2 d9 00 00
	00		 add	 edx, 217		; 000000d9H
  00df4	52		 push	 edx
  00df5	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00dfa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00dff	50		 push	 eax
  00e00	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e05	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv541[ebp], 0
$LN153@draw_tacti:
  00e0f	6a 2c		 push	 44			; 0000002cH
  00e11	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$23[ebp]
  00e17	51		 push	 ecx
  00e18	69 95 48 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv533[ebp], 180
  00e22	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR tv541[ebp]
  00e28	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00e2f	ff d1		 call	 ecx
  00e31	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _wp2$22[ebp], eax

; 3641 : 			}

  00e37	e9 63 fd ff ff	 jmp	 $LN2@draw_tacti
$LN3@draw_tacti:

; 3642 : 
; 3643 : 			//
; 3644 : 			// waypoint markers
; 3645 : 			//
; 3646 : 
; 3647 : 			set_mono_font_colour (MFD_COLOUR6);

  00e3c	b8 04 00 00 00	 mov	 eax, 4
  00e41	6b c8 05	 imul	 ecx, eax, 5
  00e44	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e4a	52		 push	 edx
  00e4b	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 3648 : 
; 3649 : 			if (draw_large_mfd)

  00e50	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00e57	74 09		 je	 SHORT $LN36@draw_tacti

; 3650 : 			{
; 3651 : 				set_mono_font_type (MONO_FONT_TYPE_7X12);

  00e59	6a 05		 push	 5
  00e5b	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 3652 : 			}
; 3653 : 			else

  00e60	eb 07		 jmp	 SHORT $LN37@draw_tacti
$LN36@draw_tacti:

; 3654 : 			{
; 3655 : 				set_mono_font_type (MONO_FONT_TYPE_5X7);

  00e62	6a 01		 push	 1
  00e64	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN37@draw_tacti:

; 3656 : 			}
; 3657 : 
; 3658 : 			wp1 = get_local_entity_first_waypoint (source);

  00e69	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00e6f	50		 push	 eax
  00e70	e8 00 00 00 00	 call	 ?get_local_entity_first_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_first_waypoint
  00e75	89 85 fc fe ff
	ff		 mov	 DWORD PTR _wp1$23[ebp], eax
$LN4@draw_tacti:

; 3659 : 
; 3660 : 			while (wp1)

  00e7b	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _wp1$23[ebp], 0
  00e82	0f 84 2e 03 00
	00		 je	 $LN5@draw_tacti

; 3661 : 			{
; 3662 : 				get_waypoint_display_position (source, wp1, &wp1_rel_position);

  00e88	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _wp1_rel_position$21[ebp]
  00e8e	50		 push	 eax
  00e8f	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$23[ebp]
  00e95	51		 push	 ecx
  00e96	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  00e9c	52		 push	 edx
  00e9d	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 3663 : 
; 3664 : 				wp1_rel_position.x = (wp1_rel_position.x - source_position->x) * scale;

  00ea2	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00ea8	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00eb0	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00eb4	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00ebc	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$21[ebp], xmm0

; 3665 : 				wp1_rel_position.z = (wp1_rel_position.z - source_position->z) * scale;

  00ec4	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00eca	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00ed2	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00ed7	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00edf	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$21[ebp+8], xmm0

; 3666 : 
; 3667 : 				if (draw_large_mfd)

  00ee7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00eee	0f 84 bc 00 00
	00		 je	 $LN38@draw_tacti

; 3668 : 				{
; 3669 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  00ef4	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  00efb	75 37		 jne	 SHORT $LN40@draw_tacti

; 3670 : 						draw_2d_mono_sprite (large_tsd_waypoint_marker, wp1_rel_position.x, wp1_rel_position.z, MFD_COLOUR2);

  00efd	b8 04 00 00 00	 mov	 eax, 4
  00f02	c1 e0 00	 shl	 eax, 0
  00f05	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00f0b	51		 push	 ecx
  00f0c	51		 push	 ecx
  00f0d	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00f15	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f1a	51		 push	 ecx
  00f1b	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00f23	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f28	68 00 00 00 00	 push	 OFFSET ?large_tsd_waypoint_marker@@3PADA
  00f2d	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 3671 : 					else

  00f32	eb 35		 jmp	 SHORT $LN41@draw_tacti
$LN40@draw_tacti:

; 3672 : 						draw_2d_mono_sprite (large_tsd_waypoint_marker, wp1_rel_position.x, wp1_rel_position.z, MFD_COLOUR5);

  00f34	b8 04 00 00 00	 mov	 eax, 4
  00f39	c1 e0 02	 shl	 eax, 2
  00f3c	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00f42	51		 push	 ecx
  00f43	51		 push	 ecx
  00f44	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00f4c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f51	51		 push	 ecx
  00f52	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00f5a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f5f	68 00 00 00 00	 push	 OFFSET ?large_tsd_waypoint_marker@@3PADA
  00f64	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN41@draw_tacti:

; 3673 : 	
; 3674 : 					set_2d_mono_font_position (wp1_rel_position.x, wp1_rel_position.z);

  00f69	51		 push	 ecx
  00f6a	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00f72	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f77	51		 push	 ecx
  00f78	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00f80	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f85	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3675 : 
; 3676 : 					set_mono_font_rel_position (-2.0, -4.0);

  00f8a	51		 push	 ecx
  00f8b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  00f93	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f98	51		 push	 ecx
  00f99	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00fa1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fa6	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3677 : 				}
; 3678 : 				else

  00fab	e9 b7 00 00 00	 jmp	 $LN39@draw_tacti
$LN38@draw_tacti:

; 3679 : 				{
; 3680 : //VJ 030423 TSD render mod
; 3681 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  00fb0	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  00fb7	75 37		 jne	 SHORT $LN42@draw_tacti

; 3682 : 						draw_2d_mono_sprite (small_tsd_waypoint_marker, wp1_rel_position.x, wp1_rel_position.z, MFD_COLOUR2);

  00fb9	b8 04 00 00 00	 mov	 eax, 4
  00fbe	c1 e0 00	 shl	 eax, 0
  00fc1	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00fc7	51		 push	 ecx
  00fc8	51		 push	 ecx
  00fc9	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  00fd1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fd6	51		 push	 ecx
  00fd7	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  00fdf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fe4	68 00 00 00 00	 push	 OFFSET ?small_tsd_waypoint_marker@@3PADA
  00fe9	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 3683 : 					else

  00fee	eb 35		 jmp	 SHORT $LN43@draw_tacti
$LN42@draw_tacti:

; 3684 : 						draw_2d_mono_sprite (small_tsd_waypoint_marker, wp1_rel_position.x, wp1_rel_position.z, MFD_COLOUR5);

  00ff0	b8 04 00 00 00	 mov	 eax, 4
  00ff5	c1 e0 02	 shl	 eax, 2
  00ff8	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00ffe	51		 push	 ecx
  00fff	51		 push	 ecx
  01000	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  01008	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0100d	51		 push	 ecx
  0100e	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  01016	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0101b	68 00 00 00 00	 push	 OFFSET ?small_tsd_waypoint_marker@@3PADA
  01020	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN43@draw_tacti:

; 3685 : 
; 3686 : 					set_2d_mono_font_position (wp1_rel_position.x, wp1_rel_position.z);

  01025	51		 push	 ecx
  01026	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp+8]
  0102e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01033	51		 push	 ecx
  01034	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$21[ebp]
  0103c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01041	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3687 : 
; 3688 : 					set_mono_font_rel_position (-2.0, -2.0);

  01046	51		 push	 ecx
  01047	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  0104f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01054	51		 push	 ecx
  01055	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  0105d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01062	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN39@draw_tacti:

; 3689 : 				}
; 3690 : 
; 3691 : 				print_mono_font_char (get_local_entity_char_value (wp1, CHAR_TYPE_TAG));

  01067	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _wp1$23[ebp], 0
  0106e	74 10		 je	 SHORT $LN154@draw_tacti
  01070	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _wp1$23[ebp]
  01076	8b 08		 mov	 ecx, DWORD PTR [eax]
  01078	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv606[ebp], ecx
  0107e	eb 27		 jmp	 SHORT $LN155@draw_tacti
$LN154@draw_tacti:
  01080	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01086	81 c2 0c 01 00
	00		 add	 edx, 268		; 0000010cH
  0108c	52		 push	 edx
  0108d	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01092	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01097	50		 push	 eax
  01098	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0109d	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv606[ebp], 0
$LN155@draw_tacti:
  010a7	b9 01 00 00 00	 mov	 ecx, 1
  010ac	85 c9		 test	 ecx, ecx
  010ae	74 0c		 je	 SHORT $LN156@draw_tacti
  010b0	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv614[ebp], 0
  010ba	eb 27		 jmp	 SHORT $LN157@draw_tacti
$LN156@draw_tacti:
  010bc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  010c2	81 c2 0c 01 00
	00		 add	 edx, 268		; 0000010cH
  010c8	52		 push	 edx
  010c9	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  010ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  010d3	50		 push	 eax
  010d4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  010d9	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv614[ebp], 0
$LN157@draw_tacti:
  010e3	6a 00		 push	 0
  010e5	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$23[ebp]
  010eb	51		 push	 ecx
  010ec	8b 95 44 fe ff
	ff		 mov	 edx, DWORD PTR tv614[ebp]
  010f2	c1 e2 02	 shl	 edx, 2
  010f5	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR tv606[ebp]
  010fb	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[edx+eax*8]
  01102	ff d1		 call	 ecx
  01104	0f b6 d0	 movzx	 edx, al
  01107	52		 push	 edx
  01108	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 3692 : 
; 3693 : 				wp1 = get_local_entity_child_succ (wp1, LIST_TYPE_WAYPOINT);

  0110d	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _wp1$23[ebp], 0
  01114	74 10		 je	 SHORT $LN158@draw_tacti
  01116	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _wp1$23[ebp]
  0111c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0111e	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv627[ebp], ecx
  01124	eb 27		 jmp	 SHORT $LN159@draw_tacti
$LN158@draw_tacti:
  01126	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  0112c	81 c2 0e 01 00
	00		 add	 edx, 270		; 0000010eH
  01132	52		 push	 edx
  01133	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01138	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0113d	50		 push	 eax
  0113e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01143	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv627[ebp], 0
$LN159@draw_tacti:
  0114d	b9 01 00 00 00	 mov	 ecx, 1
  01152	85 c9		 test	 ecx, ecx
  01154	74 0c		 je	 SHORT $LN160@draw_tacti
  01156	c7 85 44 fe ff
	ff 2c 00 00 00	 mov	 DWORD PTR tv635[ebp], 44 ; 0000002cH
  01160	eb 27		 jmp	 SHORT $LN161@draw_tacti
$LN160@draw_tacti:
  01162	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01168	81 c2 0e 01 00
	00		 add	 edx, 270		; 0000010eH
  0116e	52		 push	 edx
  0116f	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01174	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01179	50		 push	 eax
  0117a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0117f	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv635[ebp], 0
$LN161@draw_tacti:
  01189	6a 2c		 push	 44			; 0000002cH
  0118b	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _wp1$23[ebp]
  01191	51		 push	 ecx
  01192	69 95 48 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv627[ebp], 180
  0119c	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR tv635[ebp]
  011a2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  011a9	ff d1		 call	 ecx
  011ab	89 85 fc fe ff
	ff		 mov	 DWORD PTR _wp1$23[ebp], eax

; 3694 : 			}

  011b1	e9 c5 fc ff ff	 jmp	 $LN4@draw_tacti
$LN5@draw_tacti:

; 3695 : 
; 3696 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  011b6	51		 push	 ecx
  011b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  011bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011c4	51		 push	 ecx
  011c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  011cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011d2	51		 push	 ecx
  011d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  011db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011e0	51		 push	 ecx
  011e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  011e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  011f3	50		 push	 eax
  011f4	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 3697 : 
; 3698 : 			set_2d_window_rotation (mfd_env, 0.0);

  011f9	51		 push	 ecx
  011fa	0f 57 c0	 xorps	 xmm0, xmm0
  011fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01202	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01207	50		 push	 eax
  01208	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN29@draw_tacti:

; 3699 : 		}
; 3700 : 	}
; 3701 : 
; 3702 : 	////////////////////////////////////////
; 3703 : 	//
; 3704 : 	// targets
; 3705 : 	//
; 3706 : 	////////////////////////////////////////
; 3707 : 
; 3708 : 	{
; 3709 : 		entity
; 3710 : 			*target,
; 3711 : 			*launched_weapon;
; 3712 : 
; 3713 : 		vec3d
; 3714 : 			*target_position;
; 3715 : 
; 3716 : 		threat_types
; 3717 : 			threat_type;
; 3718 : 
; 3719 : 		int
; 3720 : 			draw_threat_line;
; 3721 : 
; 3722 : 		float
; 3723 : 			air_scan_range,
; 3724 : 			dx,
; 3725 : 			dy;
; 3726 : 
; 3727 : 		if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_NAVIGATION)

  0120d	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
  01214	0f 84 b5 11 00
	00		 je	 $LN44@draw_tacti

; 3728 : 		{
; 3729 : 			tsd_threat_line_flash_timer -= get_delta_time ();

  0121a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_threat_line_flash_timer@@3MA
  01222	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0122a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_threat_line_flash_timer@@3MA, xmm0

; 3730 : 
; 3731 : 			if (tsd_threat_line_flash_timer < 0.0)

  01232	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?tsd_threat_line_flash_timer@@3MA
  0123a	0f 57 c9	 xorps	 xmm1, xmm1
  0123d	66 0f 2f c8	 comisd	 xmm1, xmm0
  01241	76 1d		 jbe	 SHORT $LN45@draw_tacti

; 3732 : 			{
; 3733 : 				tsd_threat_line_flash_timer = TSD_THREAT_LINE_FLASH_RATE;

  01243	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0124b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_threat_line_flash_timer@@3MA, xmm0

; 3734 : 
; 3735 : 				tsd_draw_threat_line_status ^= 1;

  01253	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tsd_draw_threat_line_status@@3HA
  01258	83 f0 01	 xor	 eax, 1
  0125b	a3 00 00 00 00	 mov	 DWORD PTR ?tsd_draw_threat_line_status@@3HA, eax
$LN45@draw_tacti:

; 3736 : 			}
; 3737 : 
; 3738 : 			set_2d_viewport_origin (mfd_env, u, v);

  01260	51		 push	 ecx
  01261	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  01269	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0126e	51		 push	 ecx
  0126f	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  01277	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0127c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01281	50		 push	 eax
  01282	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 3739 : 
; 3740 : 			set_2d_window_rotation (mfd_env, source_heading);

  01287	51		 push	 ecx
  01288	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  01290	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01295	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0129a	50		 push	 eax
  0129b	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 3741 : 
; 3742 : 			//
; 3743 : 			// display enemy SAM and AAA threat range circles
; 3744 : 			//
; 3745 : 
; 3746 : 			target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  012a0	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  012a7	74 10		 je	 SHORT $LN162@draw_tacti
  012a9	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  012af	8b 08		 mov	 ecx, DWORD PTR [eax]
  012b1	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv664[ebp], ecx
  012b7	eb 27		 jmp	 SHORT $LN163@draw_tacti
$LN162@draw_tacti:
  012b9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  012bf	81 c2 43 01 00
	00		 add	 edx, 323		; 00000143H
  012c5	52		 push	 edx
  012c6	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  012cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  012d0	50		 push	 eax
  012d1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  012d6	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv664[ebp], 0
$LN163@draw_tacti:
  012e0	b9 01 00 00 00	 mov	 ecx, 1
  012e5	85 c9		 test	 ecx, ecx
  012e7	74 0c		 je	 SHORT $LN164@draw_tacti
  012e9	c7 85 44 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv672[ebp], 18 ; 00000012H
  012f3	eb 27		 jmp	 SHORT $LN165@draw_tacti
$LN164@draw_tacti:
  012f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  012fb	81 c2 43 01 00
	00		 add	 edx, 323		; 00000143H
  01301	52		 push	 edx
  01302	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01307	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0130c	50		 push	 eax
  0130d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01312	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv672[ebp], 0
$LN165@draw_tacti:
  0131c	6a 12		 push	 18			; 00000012H
  0131e	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  01324	51		 push	 ecx
  01325	69 95 48 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv664[ebp], 180
  0132f	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR tv672[ebp]
  01335	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0133c	ff d1		 call	 ecx
  0133e	89 85 dc fe ff
	ff		 mov	 DWORD PTR _target$19[ebp], eax
$LN6@draw_tacti:

; 3747 : 
; 3748 : 			while (target)

  01344	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  0134b	0f 84 17 05 00
	00		 je	 $LN7@draw_tacti

; 3749 : 			{
; 3750 : 				if (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  01351	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01358	74 10		 je	 SHORT $LN166@draw_tacti
  0135a	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01360	8b 08		 mov	 ecx, DWORD PTR [eax]
  01362	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv684[ebp], ecx
  01368	eb 20		 jmp	 SHORT $LN167@draw_tacti
$LN166@draw_tacti:
  0136a	68 a6 0e 00 00	 push	 3750			; 00000ea6H
  0136f	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01374	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0137a	52		 push	 edx
  0137b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01380	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv684[ebp], 0
$LN167@draw_tacti:
  0138a	b8 01 00 00 00	 mov	 eax, 1
  0138f	85 c0		 test	 eax, eax
  01391	74 0c		 je	 SHORT $LN168@draw_tacti
  01393	c7 85 44 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv691[ebp], 66 ; 00000042H
  0139d	eb 20		 jmp	 SHORT $LN169@draw_tacti
$LN168@draw_tacti:
  0139f	68 a6 0e 00 00	 push	 3750			; 00000ea6H
  013a4	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  013a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  013af	51		 push	 ecx
  013b0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  013b5	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv691[ebp], 0
$LN169@draw_tacti:
  013bf	6a 42		 push	 66			; 00000042H
  013c1	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _target$19[ebp]
  013c7	52		 push	 edx
  013c8	69 85 48 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv684[ebp], 1116
  013d2	8b 8d 44 fe ff
	ff		 mov	 ecx, DWORD PTR tv691[ebp]
  013d8	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  013df	ff d2		 call	 edx
  013e1	85 c0		 test	 eax, eax
  013e3	0f 85 d6 03 00
	00		 jne	 $LN53@draw_tacti

; 3751 : 				{
; 3752 : 					if (source_side != get_local_entity_int_value (target, INT_TYPE_SIDE))

  013e9	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  013f0	74 10		 je	 SHORT $LN170@draw_tacti
  013f2	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  013f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  013fa	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv703[ebp], ecx
  01400	eb 20		 jmp	 SHORT $LN171@draw_tacti
$LN170@draw_tacti:
  01402	68 a8 0e 00 00	 push	 3752			; 00000ea8H
  01407	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0140c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01412	52		 push	 edx
  01413	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01418	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv703[ebp], 0
$LN171@draw_tacti:
  01422	b8 01 00 00 00	 mov	 eax, 1
  01427	85 c0		 test	 eax, eax
  01429	74 0c		 je	 SHORT $LN172@draw_tacti
  0142b	c7 85 44 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv710[ebp], 187 ; 000000bbH
  01435	eb 20		 jmp	 SHORT $LN173@draw_tacti
$LN172@draw_tacti:
  01437	68 a8 0e 00 00	 push	 3752			; 00000ea8H
  0143c	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01441	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01447	51		 push	 ecx
  01448	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0144d	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv710[ebp], 0
$LN173@draw_tacti:
  01457	68 bb 00 00 00	 push	 187			; 000000bbH
  0145c	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _target$19[ebp]
  01462	52		 push	 edx
  01463	69 85 48 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv703[ebp], 1116
  0146d	8b 8d 44 fe ff
	ff		 mov	 ecx, DWORD PTR tv710[ebp]
  01473	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0147a	ff d2		 call	 edx
  0147c	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  01482	0f 84 37 03 00
	00		 je	 $LN53@draw_tacti

; 3753 : 					{
; 3754 : 						threat_type = (threat_types) get_local_entity_int_value (target, INT_TYPE_THREAT_TYPE);

  01488	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  0148f	74 10		 je	 SHORT $LN174@draw_tacti
  01491	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01497	8b 08		 mov	 ecx, DWORD PTR [eax]
  01499	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv723[ebp], ecx
  0149f	eb 27		 jmp	 SHORT $LN175@draw_tacti
$LN174@draw_tacti:
  014a1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  014a7	81 c2 4b 01 00
	00		 add	 edx, 331		; 0000014bH
  014ad	52		 push	 edx
  014ae	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  014b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  014b8	50		 push	 eax
  014b9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  014be	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv723[ebp], 0
$LN175@draw_tacti:
  014c8	b9 01 00 00 00	 mov	 ecx, 1
  014cd	85 c9		 test	 ecx, ecx
  014cf	74 0c		 je	 SHORT $LN176@draw_tacti
  014d1	c7 85 44 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv731[ebp], 233 ; 000000e9H
  014db	eb 27		 jmp	 SHORT $LN177@draw_tacti
$LN176@draw_tacti:
  014dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  014e3	81 c2 4b 01 00
	00		 add	 edx, 331		; 0000014bH
  014e9	52		 push	 edx
  014ea	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  014ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  014f4	50		 push	 eax
  014f5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  014fa	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv731[ebp], 0
$LN177@draw_tacti:
  01504	68 e9 00 00 00	 push	 233			; 000000e9H
  01509	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  0150f	51		 push	 ecx
  01510	69 95 48 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv723[ebp], 1116
  0151a	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR tv731[ebp]
  01520	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  01527	ff d1		 call	 ecx
  01529	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _threat_type$16[ebp], eax

; 3755 : 
; 3756 : 						if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA))

  0152f	83 bd d0 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$16[ebp], 5
  01536	74 0d		 je	 SHORT $LN49@draw_tacti
  01538	83 bd d0 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$16[ebp], 6
  0153f	0f 85 7a 02 00
	00		 jne	 $LN53@draw_tacti
$LN49@draw_tacti:

; 3757 : 						{
; 3758 : 							target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  01545	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  0154c	74 10		 je	 SHORT $LN178@draw_tacti
  0154e	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01554	8b 08		 mov	 ecx, DWORD PTR [eax]
  01556	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv745[ebp], ecx
  0155c	eb 27		 jmp	 SHORT $LN179@draw_tacti
$LN178@draw_tacti:
  0155e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01564	81 c2 4f 01 00
	00		 add	 edx, 335		; 0000014fH
  0156a	52		 push	 edx
  0156b	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01570	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01575	50		 push	 eax
  01576	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0157b	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv745[ebp], 0
$LN179@draw_tacti:
  01585	b9 01 00 00 00	 mov	 ecx, 1
  0158a	85 c9		 test	 ecx, ecx
  0158c	74 0c		 je	 SHORT $LN180@draw_tacti
  0158e	c7 85 44 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv753[ebp], 8
  01598	eb 27		 jmp	 SHORT $LN181@draw_tacti
$LN180@draw_tacti:
  0159a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  015a0	81 c2 4f 01 00
	00		 add	 edx, 335		; 0000014fH
  015a6	52		 push	 edx
  015a7	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  015ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  015b1	50		 push	 eax
  015b2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  015b7	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv753[ebp], 0
$LN181@draw_tacti:
  015c1	6a 08		 push	 8
  015c3	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  015c9	51		 push	 ecx
  015ca	6b 95 48 fe ff
	ff 60		 imul	 edx, DWORD PTR tv745[ebp], 96
  015d1	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR tv753[ebp]
  015d7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  015de	ff d1		 call	 ecx
  015e0	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _target_position$17[ebp], eax

; 3759 : 
; 3760 : 							dx = (target_position->x - source_position->x) * scale;

  015e6	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _target_position$17[ebp]
  015ec	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  015f2	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  015f6	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  015fa	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01602	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR _dx$13[ebp], xmm0

; 3761 : 							dy = (target_position->z - source_position->z) * scale;

  0160a	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _target_position$17[ebp]
  01610	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01616	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0161b	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  01620	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01628	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR _dy$12[ebp], xmm0

; 3762 : 
; 3763 : 							air_scan_range = get_local_entity_float_value (target, FLOAT_TYPE_AIR_SCAN_RANGE) * scale;

  01630	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01637	74 10		 je	 SHORT $LN182@draw_tacti
  01639	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  0163f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01641	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv773[ebp], ecx
  01647	eb 27		 jmp	 SHORT $LN183@draw_tacti
$LN182@draw_tacti:
  01649	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  0164f	81 c2 54 01 00
	00		 add	 edx, 340		; 00000154H
  01655	52		 push	 edx
  01656	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0165b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01660	50		 push	 eax
  01661	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01666	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv773[ebp], 0
$LN183@draw_tacti:
  01670	b9 01 00 00 00	 mov	 ecx, 1
  01675	85 c9		 test	 ecx, ecx
  01677	74 0c		 je	 SHORT $LN184@draw_tacti
  01679	c7 85 44 fe ff
	ff 05 00 00 00	 mov	 DWORD PTR tv781[ebp], 5
  01683	eb 27		 jmp	 SHORT $LN185@draw_tacti
$LN184@draw_tacti:
  01685	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  0168b	81 c2 54 01 00
	00		 add	 edx, 340		; 00000154H
  01691	52		 push	 edx
  01692	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01697	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0169c	50		 push	 eax
  0169d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  016a2	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv781[ebp], 0
$LN185@draw_tacti:
  016ac	6a 05		 push	 5
  016ae	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  016b4	51		 push	 ecx
  016b5	69 95 48 fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv773[ebp], 700
  016bf	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR tv781[ebp]
  016c5	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  016cc	ff d1		 call	 ecx
  016ce	d9 9d 40 fe ff
	ff		 fstp	 DWORD PTR tv2105[ebp]
  016d4	f3 0f 10 85 40
	fe ff ff	 movss	 xmm0, DWORD PTR tv2105[ebp]
  016dc	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  016e4	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR _air_scan_range$14[ebp], xmm0

; 3764 : 
; 3765 : //VJ 030423 TSD render mod, enemy of comanche so red
; 3766 : //VJ 030511 TSD render mod, enemy optional in eech.ini
; 3767 : //VJ 030530 TSD render mod, corrected colour vor original view MFD_COLOUR2
; 3768 : 							if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE) 

  016ec	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  016f3	75 43		 jne	 SHORT $LN50@draw_tacti

; 3769 : 								draw_2d_circle (dx, dy, air_scan_range, MFD_COLOUR2);

  016f5	b8 04 00 00 00	 mov	 eax, 4
  016fa	c1 e0 00	 shl	 eax, 0
  016fd	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  01703	51		 push	 ecx
  01704	51		 push	 ecx
  01705	f3 0f 10 85 c8
	fe ff ff	 movss	 xmm0, DWORD PTR _air_scan_range$14[ebp]
  0170d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01712	51		 push	 ecx
  01713	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$12[ebp]
  0171b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01720	51		 push	 ecx
  01721	f3 0f 10 85 c4
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$13[ebp]
  01729	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0172e	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 3770 : 							else	

  01733	e9 87 00 00 00	 jmp	 $LN53@draw_tacti
$LN50@draw_tacti:

; 3771 : 								if (command_line_tsd_enemy_colours)

  01738	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_tsd_enemy_colours@@3HA, 0 ; command_line_tsd_enemy_colours
  0173f	74 40		 je	 SHORT $LN52@draw_tacti

; 3772 : 									draw_2d_circle (dx, dy, air_scan_range, MFD_COLOUR4);

  01741	b8 04 00 00 00	 mov	 eax, 4
  01746	6b c8 03	 imul	 ecx, eax, 3
  01749	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0174f	52		 push	 edx
  01750	51		 push	 ecx
  01751	f3 0f 10 85 c8
	fe ff ff	 movss	 xmm0, DWORD PTR _air_scan_range$14[ebp]
  01759	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0175e	51		 push	 ecx
  0175f	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$12[ebp]
  01767	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0176c	51		 push	 ecx
  0176d	f3 0f 10 85 c4
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$13[ebp]
  01775	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0177a	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 3773 : 								else				

  0177f	eb 3e		 jmp	 SHORT $LN53@draw_tacti
$LN52@draw_tacti:

; 3774 : 									draw_2d_circle (dx, dy, air_scan_range, MFD_COLOUR8);

  01781	b8 04 00 00 00	 mov	 eax, 4
  01786	6b c8 0c	 imul	 ecx, eax, 12
  01789	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0178f	52		 push	 edx
  01790	51		 push	 ecx
  01791	f3 0f 10 85 c8
	fe ff ff	 movss	 xmm0, DWORD PTR _air_scan_range$14[ebp]
  01799	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0179e	51		 push	 ecx
  0179f	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$12[ebp]
  017a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017ac	51		 push	 ecx
  017ad	f3 0f 10 85 c4
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$13[ebp]
  017b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017ba	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle
$LN53@draw_tacti:

; 3775 : 						}
; 3776 : 					}
; 3777 : 				}
; 3778 : 
; 3779 : 				target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  017bf	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  017c6	74 10		 je	 SHORT $LN186@draw_tacti
  017c8	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  017ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  017d0	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv814[ebp], ecx
  017d6	eb 27		 jmp	 SHORT $LN187@draw_tacti
$LN186@draw_tacti:
  017d8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  017de	81 c2 64 01 00
	00		 add	 edx, 356		; 00000164H
  017e4	52		 push	 edx
  017e5	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  017ea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  017ef	50		 push	 eax
  017f0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  017f5	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv814[ebp], 0
$LN187@draw_tacti:
  017ff	b9 01 00 00 00	 mov	 ecx, 1
  01804	85 c9		 test	 ecx, ecx
  01806	74 0c		 je	 SHORT $LN188@draw_tacti
  01808	c7 85 44 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv822[ebp], 18 ; 00000012H
  01812	eb 27		 jmp	 SHORT $LN189@draw_tacti
$LN188@draw_tacti:
  01814	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  0181a	81 c2 64 01 00
	00		 add	 edx, 356		; 00000164H
  01820	52		 push	 edx
  01821	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01826	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0182b	50		 push	 eax
  0182c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01831	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv822[ebp], 0
$LN189@draw_tacti:
  0183b	6a 12		 push	 18			; 00000012H
  0183d	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  01843	51		 push	 ecx
  01844	69 95 48 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv814[ebp], 180
  0184e	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR tv822[ebp]
  01854	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0185b	ff d1		 call	 ecx
  0185d	89 85 dc fe ff
	ff		 mov	 DWORD PTR _target$19[ebp], eax

; 3780 : 			}

  01863	e9 dc fa ff ff	 jmp	 $LN6@draw_tacti
$LN7@draw_tacti:

; 3781 : 
; 3782 : 			//
; 3783 : 			// display all gunship targets (do not show ground radar clutter)
; 3784 : 			//
; 3785 : 
; 3786 : 			target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  01868	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0186f	74 10		 je	 SHORT $LN190@draw_tacti
  01871	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01877	8b 08		 mov	 ecx, DWORD PTR [eax]
  01879	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv834[ebp], ecx
  0187f	eb 27		 jmp	 SHORT $LN191@draw_tacti
$LN190@draw_tacti:
  01881	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01887	81 c2 6b 01 00
	00		 add	 edx, 363		; 0000016bH
  0188d	52		 push	 edx
  0188e	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01893	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01898	50		 push	 eax
  01899	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0189e	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv834[ebp], 0
$LN191@draw_tacti:
  018a8	b9 01 00 00 00	 mov	 ecx, 1
  018ad	85 c9		 test	 ecx, ecx
  018af	74 0c		 je	 SHORT $LN192@draw_tacti
  018b1	c7 85 44 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv842[ebp], 18 ; 00000012H
  018bb	eb 27		 jmp	 SHORT $LN193@draw_tacti
$LN192@draw_tacti:
  018bd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  018c3	81 c2 6b 01 00
	00		 add	 edx, 363		; 0000016bH
  018c9	52		 push	 edx
  018ca	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  018cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  018d4	50		 push	 eax
  018d5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  018da	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv842[ebp], 0
$LN193@draw_tacti:
  018e4	6a 12		 push	 18			; 00000012H
  018e6	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  018ec	51		 push	 ecx
  018ed	69 95 48 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv834[ebp], 180
  018f7	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR tv842[ebp]
  018fd	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01904	ff d1		 call	 ecx
  01906	89 85 dc fe ff
	ff		 mov	 DWORD PTR _target$19[ebp], eax
$LN8@draw_tacti:

; 3787 : 
; 3788 : 			while (target)

  0190c	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01913	0f 84 92 01 00
	00		 je	 $LN9@draw_tacti

; 3789 : 			{
; 3790 : 				if (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  01919	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01920	74 10		 je	 SHORT $LN194@draw_tacti
  01922	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01928	8b 08		 mov	 ecx, DWORD PTR [eax]
  0192a	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv854[ebp], ecx
  01930	eb 20		 jmp	 SHORT $LN195@draw_tacti
$LN194@draw_tacti:
  01932	68 ce 0e 00 00	 push	 3790			; 00000eceH
  01937	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0193c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01942	52		 push	 edx
  01943	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01948	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv854[ebp], 0
$LN195@draw_tacti:
  01952	b8 01 00 00 00	 mov	 eax, 1
  01957	85 c0		 test	 eax, eax
  01959	74 0c		 je	 SHORT $LN196@draw_tacti
  0195b	c7 85 44 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv861[ebp], 66 ; 00000042H
  01965	eb 20		 jmp	 SHORT $LN197@draw_tacti
$LN196@draw_tacti:
  01967	68 ce 0e 00 00	 push	 3790			; 00000eceH
  0196c	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01971	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01977	51		 push	 ecx
  01978	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0197d	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv861[ebp], 0
$LN197@draw_tacti:
  01987	6a 42		 push	 66			; 00000042H
  01989	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _target$19[ebp]
  0198f	52		 push	 edx
  01990	69 85 48 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv854[ebp], 1116
  0199a	8b 8d 44 fe ff
	ff		 mov	 ecx, DWORD PTR tv861[ebp]
  019a0	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  019a7	ff d2		 call	 edx
  019a9	85 c0		 test	 eax, eax
  019ab	75 55		 jne	 SHORT $LN56@draw_tacti

; 3791 : 				{
; 3792 : 					//VJ 030423 TSD render mod
; 3793 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  019ad	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  019b4	75 27		 jne	 SHORT $LN55@draw_tacti

; 3794 : 						draw_radar_target_symbol (target, source_position, scale, FALSE, FALSE);

  019b6	6a 00		 push	 0
  019b8	6a 00		 push	 0
  019ba	51		 push	 ecx
  019bb	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  019c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019c8	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  019ce	50		 push	 eax
  019cf	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  019d5	51		 push	 ecx
  019d6	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol

; 3795 : 					else

  019db	eb 25		 jmp	 SHORT $LN56@draw_tacti
$LN55@draw_tacti:

; 3796 : 						draw_radar_target_symbol (target, source_position, scale, FALSE, TRUE);

  019dd	6a 01		 push	 1
  019df	6a 00		 push	 0
  019e1	51		 push	 ecx
  019e2	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  019ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019ef	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  019f5	50		 push	 eax
  019f6	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  019fc	51		 push	 ecx
  019fd	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN56@draw_tacti:

; 3797 : 				}
; 3798 : 
; 3799 : 				target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  01a02	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01a09	74 10		 je	 SHORT $LN198@draw_tacti
  01a0b	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01a11	8b 08		 mov	 ecx, DWORD PTR [eax]
  01a13	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv885[ebp], ecx
  01a19	eb 27		 jmp	 SHORT $LN199@draw_tacti
$LN198@draw_tacti:
  01a1b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01a21	81 c2 78 01 00
	00		 add	 edx, 376		; 00000178H
  01a27	52		 push	 edx
  01a28	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01a2d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01a32	50		 push	 eax
  01a33	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01a38	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv885[ebp], 0
$LN199@draw_tacti:
  01a42	b9 01 00 00 00	 mov	 ecx, 1
  01a47	85 c9		 test	 ecx, ecx
  01a49	74 0c		 je	 SHORT $LN200@draw_tacti
  01a4b	c7 85 44 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv893[ebp], 18 ; 00000012H
  01a55	eb 27		 jmp	 SHORT $LN201@draw_tacti
$LN200@draw_tacti:
  01a57	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01a5d	81 c2 78 01 00
	00		 add	 edx, 376		; 00000178H
  01a63	52		 push	 edx
  01a64	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01a69	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01a6e	50		 push	 eax
  01a6f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01a74	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv893[ebp], 0
$LN201@draw_tacti:
  01a7e	6a 12		 push	 18			; 00000012H
  01a80	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  01a86	51		 push	 ecx
  01a87	69 95 48 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv885[ebp], 180
  01a91	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR tv893[ebp]
  01a97	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01a9e	ff d1		 call	 ecx
  01aa0	89 85 dc fe ff
	ff		 mov	 DWORD PTR _target$19[ebp], eax

; 3800 : 			}

  01aa6	e9 61 fe ff ff	 jmp	 $LN8@draw_tacti
$LN9@draw_tacti:

; 3801 : 
; 3802 : 			//
; 3803 : 			// draw selected target last
; 3804 : 			//
; 3805 : 
; 3806 : 			if (source_target)

  01aab	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _source_target$[ebp], 0
  01ab2	74 55		 je	 SHORT $LN59@draw_tacti

; 3807 : 			{
; 3808 : 				//VJ 030423 TSD render mod
; 3809 : 				if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  01ab4	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  01abb	75 27		 jne	 SHORT $LN58@draw_tacti

; 3810 : 					draw_radar_target_symbol (source_target, source_position, scale, TRUE, FALSE);

  01abd	6a 00		 push	 0
  01abf	6a 01		 push	 1
  01ac1	51		 push	 ecx
  01ac2	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  01aca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01acf	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  01ad5	50		 push	 eax
  01ad6	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_target$[ebp]
  01adc	51		 push	 ecx
  01add	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol

; 3811 : 				else

  01ae2	eb 25		 jmp	 SHORT $LN59@draw_tacti
$LN58@draw_tacti:

; 3812 : 					draw_radar_target_symbol (source_target, source_position, scale, TRUE, TRUE);

  01ae4	6a 01		 push	 1
  01ae6	6a 01		 push	 1
  01ae8	51		 push	 ecx
  01ae9	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  01af1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01af6	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  01afc	50		 push	 eax
  01afd	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_target$[ebp]
  01b03	51		 push	 ecx
  01b04	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN59@draw_tacti:

; 3813 : 			}
; 3814 : 
; 3815 : 			//
; 3816 : 			// draw threat line if gunship is targetted (flash if missile fired)
; 3817 : 			//
; 3818 : 
; 3819 : 			target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  01b09	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01b10	74 10		 je	 SHORT $LN202@draw_tacti
  01b12	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01b18	8b 08		 mov	 ecx, DWORD PTR [eax]
  01b1a	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv917[ebp], ecx
  01b20	eb 27		 jmp	 SHORT $LN203@draw_tacti
$LN202@draw_tacti:
  01b22	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01b28	81 c2 8c 01 00
	00		 add	 edx, 396		; 0000018cH
  01b2e	52		 push	 edx
  01b2f	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01b34	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01b39	50		 push	 eax
  01b3a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01b3f	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv917[ebp], 0
$LN203@draw_tacti:
  01b49	b9 01 00 00 00	 mov	 ecx, 1
  01b4e	85 c9		 test	 ecx, ecx
  01b50	74 0c		 je	 SHORT $LN204@draw_tacti
  01b52	c7 85 44 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv925[ebp], 18 ; 00000012H
  01b5c	eb 27		 jmp	 SHORT $LN205@draw_tacti
$LN204@draw_tacti:
  01b5e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01b64	81 c2 8c 01 00
	00		 add	 edx, 396		; 0000018cH
  01b6a	52		 push	 edx
  01b6b	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01b70	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01b75	50		 push	 eax
  01b76	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01b7b	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv925[ebp], 0
$LN205@draw_tacti:
  01b85	6a 12		 push	 18			; 00000012H
  01b87	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  01b8d	51		 push	 ecx
  01b8e	69 95 48 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv917[ebp], 180
  01b98	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR tv925[ebp]
  01b9e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01ba5	ff d1		 call	 ecx
  01ba7	89 85 dc fe ff
	ff		 mov	 DWORD PTR _target$19[ebp], eax
$LN10@draw_tacti:

; 3820 : 
; 3821 : 			while (target)

  01bad	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01bb4	0f 84 be 07 00
	00		 je	 $LN11@draw_tacti

; 3822 : 			{
; 3823 : 				if (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  01bba	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01bc1	74 10		 je	 SHORT $LN206@draw_tacti
  01bc3	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01bc9	8b 08		 mov	 ecx, DWORD PTR [eax]
  01bcb	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv937[ebp], ecx
  01bd1	eb 20		 jmp	 SHORT $LN207@draw_tacti
$LN206@draw_tacti:
  01bd3	68 ef 0e 00 00	 push	 3823			; 00000eefH
  01bd8	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01bdd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01be3	52		 push	 edx
  01be4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01be9	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv937[ebp], 0
$LN207@draw_tacti:
  01bf3	b8 01 00 00 00	 mov	 eax, 1
  01bf8	85 c0		 test	 eax, eax
  01bfa	74 0c		 je	 SHORT $LN208@draw_tacti
  01bfc	c7 85 44 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv944[ebp], 66 ; 00000042H
  01c06	eb 20		 jmp	 SHORT $LN209@draw_tacti
$LN208@draw_tacti:
  01c08	68 ef 0e 00 00	 push	 3823			; 00000eefH
  01c0d	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01c12	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01c18	51		 push	 ecx
  01c19	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01c1e	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv944[ebp], 0
$LN209@draw_tacti:
  01c28	6a 42		 push	 66			; 00000042H
  01c2a	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _target$19[ebp]
  01c30	52		 push	 edx
  01c31	69 85 48 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv937[ebp], 1116
  01c3b	8b 8d 44 fe ff
	ff		 mov	 ecx, DWORD PTR tv944[ebp]
  01c41	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01c48	ff d2		 call	 edx
  01c4a	85 c0		 test	 eax, eax
  01c4c	0f 85 7d 06 00
	00		 jne	 $LN68@draw_tacti

; 3824 : 				{
; 3825 : 					if (source_side != get_local_entity_int_value (target, INT_TYPE_SIDE))

  01c52	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01c59	74 10		 je	 SHORT $LN210@draw_tacti
  01c5b	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01c61	8b 08		 mov	 ecx, DWORD PTR [eax]
  01c63	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv956[ebp], ecx
  01c69	eb 20		 jmp	 SHORT $LN211@draw_tacti
$LN210@draw_tacti:
  01c6b	68 f1 0e 00 00	 push	 3825			; 00000ef1H
  01c70	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01c75	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01c7b	52		 push	 edx
  01c7c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01c81	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv956[ebp], 0
$LN211@draw_tacti:
  01c8b	b8 01 00 00 00	 mov	 eax, 1
  01c90	85 c0		 test	 eax, eax
  01c92	74 0c		 je	 SHORT $LN212@draw_tacti
  01c94	c7 85 44 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv963[ebp], 187 ; 000000bbH
  01c9e	eb 20		 jmp	 SHORT $LN213@draw_tacti
$LN212@draw_tacti:
  01ca0	68 f1 0e 00 00	 push	 3825			; 00000ef1H
  01ca5	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01caa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01cb0	51		 push	 ecx
  01cb1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01cb6	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv963[ebp], 0
$LN213@draw_tacti:
  01cc0	68 bb 00 00 00	 push	 187			; 000000bbH
  01cc5	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _target$19[ebp]
  01ccb	52		 push	 edx
  01ccc	69 85 48 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv956[ebp], 1116
  01cd6	8b 8d 44 fe ff
	ff		 mov	 ecx, DWORD PTR tv963[ebp]
  01cdc	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01ce3	ff d2		 call	 edx
  01ce5	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  01ceb	0f 84 de 05 00
	00		 je	 $LN68@draw_tacti

; 3826 : 					{
; 3827 : 						if (get_local_entity_int_value (target, INT_TYPE_RADAR_ON))

  01cf1	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01cf8	74 10		 je	 SHORT $LN214@draw_tacti
  01cfa	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01d00	8b 08		 mov	 ecx, DWORD PTR [eax]
  01d02	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv975[ebp], ecx
  01d08	eb 20		 jmp	 SHORT $LN215@draw_tacti
$LN214@draw_tacti:
  01d0a	68 f3 0e 00 00	 push	 3827			; 00000ef3H
  01d0f	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01d14	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01d1a	52		 push	 edx
  01d1b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01d20	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv975[ebp], 0
$LN215@draw_tacti:
  01d2a	b8 01 00 00 00	 mov	 eax, 1
  01d2f	85 c0		 test	 eax, eax
  01d31	74 0c		 je	 SHORT $LN216@draw_tacti
  01d33	c7 85 44 fe ff
	ff a9 00 00 00	 mov	 DWORD PTR tv982[ebp], 169 ; 000000a9H
  01d3d	eb 20		 jmp	 SHORT $LN217@draw_tacti
$LN216@draw_tacti:
  01d3f	68 f3 0e 00 00	 push	 3827			; 00000ef3H
  01d44	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01d49	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01d4f	51		 push	 ecx
  01d50	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01d55	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv982[ebp], 0
$LN217@draw_tacti:
  01d5f	68 a9 00 00 00	 push	 169			; 000000a9H
  01d64	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _target$19[ebp]
  01d6a	52		 push	 edx
  01d6b	69 85 48 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv975[ebp], 1116
  01d75	8b 8d 44 fe ff
	ff		 mov	 ecx, DWORD PTR tv982[ebp]
  01d7b	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01d82	ff d2		 call	 edx
  01d84	85 c0		 test	 eax, eax
  01d86	0f 84 43 05 00
	00		 je	 $LN68@draw_tacti

; 3828 : 						{
; 3829 : 							threat_type = (threat_types) get_local_entity_int_value (target, INT_TYPE_THREAT_TYPE);

  01d8c	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01d93	74 10		 je	 SHORT $LN218@draw_tacti
  01d95	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01d9b	8b 08		 mov	 ecx, DWORD PTR [eax]
  01d9d	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv995[ebp], ecx
  01da3	eb 27		 jmp	 SHORT $LN219@draw_tacti
$LN218@draw_tacti:
  01da5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01dab	81 c2 96 01 00
	00		 add	 edx, 406		; 00000196H
  01db1	52		 push	 edx
  01db2	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01db7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01dbc	50		 push	 eax
  01dbd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01dc2	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv995[ebp], 0
$LN219@draw_tacti:
  01dcc	b9 01 00 00 00	 mov	 ecx, 1
  01dd1	85 c9		 test	 ecx, ecx
  01dd3	74 0c		 je	 SHORT $LN220@draw_tacti
  01dd5	c7 85 44 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv1003[ebp], 233 ; 000000e9H
  01ddf	eb 27		 jmp	 SHORT $LN221@draw_tacti
$LN220@draw_tacti:
  01de1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01de7	81 c2 96 01 00
	00		 add	 edx, 406		; 00000196H
  01ded	52		 push	 edx
  01dee	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01df3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01df8	50		 push	 eax
  01df9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01dfe	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1003[ebp], 0
$LN221@draw_tacti:
  01e08	68 e9 00 00 00	 push	 233			; 000000e9H
  01e0d	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  01e13	51		 push	 ecx
  01e14	69 95 48 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv995[ebp], 1116
  01e1e	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR tv1003[ebp]
  01e24	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  01e2b	ff d1		 call	 ecx
  01e2d	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _threat_type$16[ebp], eax

; 3830 : 
; 3831 : 							if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA) || (threat_type == THREAT_TYPE_AIRBORNE_RADAR))

  01e33	83 bd d0 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$16[ebp], 5
  01e3a	74 16		 je	 SHORT $LN64@draw_tacti
  01e3c	83 bd d0 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$16[ebp], 6
  01e43	74 0d		 je	 SHORT $LN64@draw_tacti
  01e45	83 bd d0 fe ff
	ff 04		 cmp	 DWORD PTR _threat_type$16[ebp], 4
  01e4c	0f 85 7d 04 00
	00		 jne	 $LN68@draw_tacti
$LN64@draw_tacti:

; 3832 : 							{
; 3833 : 								if (get_local_entity_parent (target, LIST_TYPE_TARGET) == source)

  01e52	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01e59	74 10		 je	 SHORT $LN222@draw_tacti
  01e5b	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01e61	8b 08		 mov	 ecx, DWORD PTR [eax]
  01e63	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv1017[ebp], ecx
  01e69	eb 20		 jmp	 SHORT $LN223@draw_tacti
$LN222@draw_tacti:
  01e6b	68 f9 0e 00 00	 push	 3833			; 00000ef9H
  01e70	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01e75	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01e7b	52		 push	 edx
  01e7c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01e81	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1017[ebp], 0
$LN223@draw_tacti:
  01e8b	b8 01 00 00 00	 mov	 eax, 1
  01e90	85 c0		 test	 eax, eax
  01e92	74 0c		 je	 SHORT $LN224@draw_tacti
  01e94	c7 85 44 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv1024[ebp], 38 ; 00000026H
  01e9e	eb 20		 jmp	 SHORT $LN225@draw_tacti
$LN224@draw_tacti:
  01ea0	68 f9 0e 00 00	 push	 3833			; 00000ef9H
  01ea5	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01eaa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01eb0	51		 push	 ecx
  01eb1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01eb6	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1024[ebp], 0
$LN225@draw_tacti:
  01ec0	6a 26		 push	 38			; 00000026H
  01ec2	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _target$19[ebp]
  01ec8	52		 push	 edx
  01ec9	69 85 48 fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv1017[ebp], 180
  01ed3	8b 8d 44 fe ff
	ff		 mov	 ecx, DWORD PTR tv1024[ebp]
  01ed9	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  01ee0	ff d2		 call	 edx
  01ee2	3b 85 0c ff ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  01ee8	0f 85 e1 03 00
	00		 jne	 $LN68@draw_tacti

; 3834 : 								{
; 3835 : 									draw_threat_line = TRUE;

  01eee	c7 85 cc fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _draw_threat_line$15[ebp], 1

; 3836 : 
; 3837 : 									launched_weapon = get_local_entity_first_child (target, LIST_TYPE_LAUNCHED_WEAPON);

  01ef8	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  01eff	74 10		 je	 SHORT $LN226@draw_tacti
  01f01	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  01f07	8b 08		 mov	 ecx, DWORD PTR [eax]
  01f09	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv1037[ebp], ecx
  01f0f	eb 27		 jmp	 SHORT $LN227@draw_tacti
$LN226@draw_tacti:
  01f11	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01f17	81 c2 9e 01 00
	00		 add	 edx, 414		; 0000019eH
  01f1d	52		 push	 edx
  01f1e	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01f23	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01f28	50		 push	 eax
  01f29	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01f2e	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1037[ebp], 0
$LN227@draw_tacti:
  01f38	b9 01 00 00 00	 mov	 ecx, 1
  01f3d	85 c9		 test	 ecx, ecx
  01f3f	74 0c		 je	 SHORT $LN228@draw_tacti
  01f41	c7 85 44 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv1045[ebp], 24 ; 00000018H
  01f4b	eb 27		 jmp	 SHORT $LN229@draw_tacti
$LN228@draw_tacti:
  01f4d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  01f53	81 c2 9e 01 00
	00		 add	 edx, 414		; 0000019eH
  01f59	52		 push	 edx
  01f5a	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01f5f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01f64	50		 push	 eax
  01f65	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01f6a	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1045[ebp], 0
$LN229@draw_tacti:
  01f74	6a 18		 push	 24			; 00000018H
  01f76	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  01f7c	51		 push	 ecx
  01f7d	69 95 48 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv1037[ebp], 180
  01f87	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR tv1045[ebp]
  01f8d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01f94	ff d1		 call	 ecx
  01f96	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _launched_weapon$18[ebp], eax
$LN12@draw_tacti:

; 3838 : 
; 3839 : 									while (launched_weapon)

  01f9c	83 bd d8 fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$18[ebp], 0
  01fa3	0f 84 ec 01 00
	00		 je	 $LN13@draw_tacti

; 3840 : 									{
; 3841 : 										if (get_local_entity_int_value (launched_weapon, INT_TYPE_WEAPON_GUIDANCE_TYPE) != WEAPON_GUIDANCE_TYPE_NONE)

  01fa9	83 bd d8 fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$18[ebp], 0
  01fb0	74 10		 je	 SHORT $LN230@draw_tacti
  01fb2	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$18[ebp]
  01fb8	8b 08		 mov	 ecx, DWORD PTR [eax]
  01fba	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv1057[ebp], ecx
  01fc0	eb 20		 jmp	 SHORT $LN231@draw_tacti
$LN230@draw_tacti:
  01fc2	68 01 0f 00 00	 push	 3841			; 00000f01H
  01fc7	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01fcc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01fd2	52		 push	 edx
  01fd3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01fd8	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1057[ebp], 0
$LN231@draw_tacti:
  01fe2	b8 01 00 00 00	 mov	 eax, 1
  01fe7	85 c0		 test	 eax, eax
  01fe9	74 0c		 je	 SHORT $LN232@draw_tacti
  01feb	c7 85 44 fe ff
	ff 07 01 00 00	 mov	 DWORD PTR tv1064[ebp], 263 ; 00000107H
  01ff5	eb 20		 jmp	 SHORT $LN233@draw_tacti
$LN232@draw_tacti:
  01ff7	68 01 0f 00 00	 push	 3841			; 00000f01H
  01ffc	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  02001	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  02007	51		 push	 ecx
  02008	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0200d	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1064[ebp], 0
$LN233@draw_tacti:
  02017	68 07 01 00 00	 push	 263			; 00000107H
  0201c	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$18[ebp]
  02022	52		 push	 edx
  02023	69 85 48 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1057[ebp], 1116
  0202d	8b 8d 44 fe ff
	ff		 mov	 ecx, DWORD PTR tv1064[ebp]
  02033	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0203a	ff d2		 call	 edx
  0203c	85 c0		 test	 eax, eax
  0203e	0f 84 a8 00 00
	00		 je	 $LN67@draw_tacti

; 3842 : 										{
; 3843 : 											if (get_local_entity_parent (launched_weapon, LIST_TYPE_TARGET) == source)

  02044	83 bd d8 fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$18[ebp], 0
  0204b	74 10		 je	 SHORT $LN234@draw_tacti
  0204d	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$18[ebp]
  02053	8b 08		 mov	 ecx, DWORD PTR [eax]
  02055	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv1076[ebp], ecx
  0205b	eb 20		 jmp	 SHORT $LN235@draw_tacti
$LN234@draw_tacti:
  0205d	68 03 0f 00 00	 push	 3843			; 00000f03H
  02062	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  02067	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0206d	52		 push	 edx
  0206e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02073	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1076[ebp], 0
$LN235@draw_tacti:
  0207d	b8 01 00 00 00	 mov	 eax, 1
  02082	85 c0		 test	 eax, eax
  02084	74 0c		 je	 SHORT $LN236@draw_tacti
  02086	c7 85 44 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv1083[ebp], 38 ; 00000026H
  02090	eb 20		 jmp	 SHORT $LN237@draw_tacti
$LN236@draw_tacti:
  02092	68 03 0f 00 00	 push	 3843			; 00000f03H
  02097	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0209c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  020a2	51		 push	 ecx
  020a3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  020a8	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1083[ebp], 0
$LN237@draw_tacti:
  020b2	6a 26		 push	 38			; 00000026H
  020b4	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$18[ebp]
  020ba	52		 push	 edx
  020bb	69 85 48 fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv1076[ebp], 180
  020c5	8b 8d 44 fe ff
	ff		 mov	 ecx, DWORD PTR tv1083[ebp]
  020cb	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  020d2	ff d2		 call	 edx
  020d4	3b 85 0c ff ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  020da	75 10		 jne	 SHORT $LN67@draw_tacti

; 3844 : 											{
; 3845 : 												draw_threat_line = tsd_draw_threat_line_status;

  020dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tsd_draw_threat_line_status@@3HA
  020e1	89 85 cc fe ff
	ff		 mov	 DWORD PTR _draw_threat_line$15[ebp], eax

; 3846 : 
; 3847 : 												break;

  020e7	e9 a9 00 00 00	 jmp	 $LN13@draw_tacti
$LN67@draw_tacti:

; 3848 : 											}
; 3849 : 										}
; 3850 : 
; 3851 : 										launched_weapon = get_local_entity_child_succ (launched_weapon, LIST_TYPE_LAUNCHED_WEAPON);

  020ec	83 bd d8 fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$18[ebp], 0
  020f3	74 10		 je	 SHORT $LN238@draw_tacti
  020f5	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$18[ebp]
  020fb	8b 08		 mov	 ecx, DWORD PTR [eax]
  020fd	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv1096[ebp], ecx
  02103	eb 27		 jmp	 SHORT $LN239@draw_tacti
$LN238@draw_tacti:
  02105	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  0210b	81 c2 ac 01 00
	00		 add	 edx, 428		; 000001acH
  02111	52		 push	 edx
  02112	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  02117	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0211c	50		 push	 eax
  0211d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02122	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1096[ebp], 0
$LN239@draw_tacti:
  0212c	b9 01 00 00 00	 mov	 ecx, 1
  02131	85 c9		 test	 ecx, ecx
  02133	74 0c		 je	 SHORT $LN240@draw_tacti
  02135	c7 85 44 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv1104[ebp], 24 ; 00000018H
  0213f	eb 27		 jmp	 SHORT $LN241@draw_tacti
$LN240@draw_tacti:
  02141	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  02147	81 c2 ac 01 00
	00		 add	 edx, 428		; 000001acH
  0214d	52		 push	 edx
  0214e	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  02153	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  02158	50		 push	 eax
  02159	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0215e	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1104[ebp], 0
$LN241@draw_tacti:
  02168	6a 18		 push	 24			; 00000018H
  0216a	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _launched_weapon$18[ebp]
  02170	51		 push	 ecx
  02171	69 95 48 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv1096[ebp], 180
  0217b	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR tv1104[ebp]
  02181	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  02188	ff d1		 call	 ecx
  0218a	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _launched_weapon$18[ebp], eax

; 3852 : 									}

  02190	e9 07 fe ff ff	 jmp	 $LN12@draw_tacti
$LN13@draw_tacti:

; 3853 : 
; 3854 : 									if (draw_threat_line)

  02195	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _draw_threat_line$15[ebp], 0
  0219c	0f 84 2d 01 00
	00		 je	 $LN68@draw_tacti

; 3855 : 									{
; 3856 : 										target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  021a2	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  021a9	74 10		 je	 SHORT $LN242@draw_tacti
  021ab	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  021b1	8b 08		 mov	 ecx, DWORD PTR [eax]
  021b3	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv1117[ebp], ecx
  021b9	eb 27		 jmp	 SHORT $LN243@draw_tacti
$LN242@draw_tacti:
  021bb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  021c1	81 c2 b1 01 00
	00		 add	 edx, 433		; 000001b1H
  021c7	52		 push	 edx
  021c8	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  021cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  021d2	50		 push	 eax
  021d3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  021d8	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1117[ebp], 0
$LN243@draw_tacti:
  021e2	b9 01 00 00 00	 mov	 ecx, 1
  021e7	85 c9		 test	 ecx, ecx
  021e9	74 0c		 je	 SHORT $LN244@draw_tacti
  021eb	c7 85 44 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv1125[ebp], 8
  021f5	eb 27		 jmp	 SHORT $LN245@draw_tacti
$LN244@draw_tacti:
  021f7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  021fd	81 c2 b1 01 00
	00		 add	 edx, 433		; 000001b1H
  02203	52		 push	 edx
  02204	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  02209	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0220e	50		 push	 eax
  0220f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02214	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1125[ebp], 0
$LN245@draw_tacti:
  0221e	6a 08		 push	 8
  02220	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  02226	51		 push	 ecx
  02227	6b 95 48 fe ff
	ff 60		 imul	 edx, DWORD PTR tv1117[ebp], 96
  0222e	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR tv1125[ebp]
  02234	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0223b	ff d1		 call	 ecx
  0223d	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _target_position$17[ebp], eax

; 3857 : 
; 3858 : 										dx = (target_position->x - source_position->x) * scale;

  02243	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _target_position$17[ebp]
  02249	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  0224f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  02253	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  02257	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0225f	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR _dx$13[ebp], xmm0

; 3859 : 										dy = (target_position->z - source_position->z) * scale;

  02267	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _target_position$17[ebp]
  0226d	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  02273	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  02278	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0227d	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  02285	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR _dy$12[ebp], xmm0

; 3860 : 
; 3861 : 										draw_2d_line (0.0, 0.0, dx, dy, MFD_COLOUR1);

  0228d	b8 04 00 00 00	 mov	 eax, 4
  02292	6b c8 00	 imul	 ecx, eax, 0
  02295	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0229b	52		 push	 edx
  0229c	51		 push	 ecx
  0229d	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$12[ebp]
  022a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022aa	51		 push	 ecx
  022ab	f3 0f 10 85 c4
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$13[ebp]
  022b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022b8	51		 push	 ecx
  022b9	0f 57 c0	 xorps	 xmm0, xmm0
  022bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022c1	51		 push	 ecx
  022c2	0f 57 c0	 xorps	 xmm0, xmm0
  022c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022ca	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN68@draw_tacti:

; 3862 : 									}
; 3863 : 								}
; 3864 : 							}
; 3865 : 						}
; 3866 : 					}
; 3867 : 				}
; 3868 : 
; 3869 : 				target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  022cf	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _target$19[ebp], 0
  022d6	74 10		 je	 SHORT $LN246@draw_tacti
  022d8	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _target$19[ebp]
  022de	8b 08		 mov	 ecx, DWORD PTR [eax]
  022e0	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv1152[ebp], ecx
  022e6	eb 27		 jmp	 SHORT $LN247@draw_tacti
$LN246@draw_tacti:
  022e8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  022ee	81 c2 be 01 00
	00		 add	 edx, 446		; 000001beH
  022f4	52		 push	 edx
  022f5	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  022fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  022ff	50		 push	 eax
  02300	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02305	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1152[ebp], 0
$LN247@draw_tacti:
  0230f	b9 01 00 00 00	 mov	 ecx, 1
  02314	85 c9		 test	 ecx, ecx
  02316	74 0c		 je	 SHORT $LN248@draw_tacti
  02318	c7 85 44 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv1160[ebp], 18 ; 00000012H
  02322	eb 27		 jmp	 SHORT $LN249@draw_tacti
$LN248@draw_tacti:
  02324	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  0232a	81 c2 be 01 00
	00		 add	 edx, 446		; 000001beH
  02330	52		 push	 edx
  02331	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  02336	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0233b	50		 push	 eax
  0233c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02341	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1160[ebp], 0
$LN249@draw_tacti:
  0234b	6a 12		 push	 18			; 00000012H
  0234d	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _target$19[ebp]
  02353	51		 push	 ecx
  02354	69 95 48 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv1152[ebp], 180
  0235e	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR tv1160[ebp]
  02364	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0236b	ff d1		 call	 ecx
  0236d	89 85 dc fe ff
	ff		 mov	 DWORD PTR _target$19[ebp], eax

; 3870 : 			}

  02373	e9 35 f8 ff ff	 jmp	 $LN10@draw_tacti
$LN11@draw_tacti:

; 3871 : 
; 3872 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  02378	51		 push	 ecx
  02379	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  02381	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02386	51		 push	 ecx
  02387	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0238f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02394	51		 push	 ecx
  02395	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0239d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023a2	51		 push	 ecx
  023a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  023ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  023b5	50		 push	 eax
  023b6	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 3873 : 
; 3874 : 			set_2d_window_rotation (mfd_env, 0.0);

  023bb	51		 push	 ecx
  023bc	0f 57 c0	 xorps	 xmm0, xmm0
  023bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  023c9	50		 push	 eax
  023ca	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN44@draw_tacti:

; 3875 : 		}
; 3876 : 	}
; 3877 : 
; 3878 : 	////////////////////////////////////////
; 3879 : 	//
; 3880 : 	// aircraft datum symbol
; 3881 : 	//
; 3882 : 	////////////////////////////////////////
; 3883 : 
; 3884 : 	if (draw_large_mfd)

  023cf	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  023d6	74 6c		 je	 SHORT $LN69@draw_tacti

; 3885 : 	{
; 3886 : 		draw_2d_mono_sprite (large_tsd_ase_aircraft_datum_mask, x_origin, y_origin, MFD_COLOUR6);

  023d8	b8 04 00 00 00	 mov	 eax, 4
  023dd	6b c8 05	 imul	 ecx, eax, 5
  023e0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  023e6	52		 push	 edx
  023e7	51		 push	 ecx
  023e8	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  023f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023f5	51		 push	 ecx
  023f6	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  023fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02403	68 00 00 00 00	 push	 OFFSET ?large_tsd_ase_aircraft_datum_mask@@3PADA
  02408	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 3887 : 
; 3888 : 		draw_2d_mono_sprite (large_tsd_ase_aircraft_datum, x_origin, y_origin, MFD_COLOUR1);

  0240d	b8 04 00 00 00	 mov	 eax, 4
  02412	6b c8 00	 imul	 ecx, eax, 0
  02415	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0241b	52		 push	 edx
  0241c	51		 push	 ecx
  0241d	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  02425	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0242a	51		 push	 ecx
  0242b	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  02433	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02438	68 00 00 00 00	 push	 OFFSET ?large_tsd_ase_aircraft_datum@@3PADA
  0243d	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 3889 : 	}
; 3890 : 	else

  02442	eb 6a		 jmp	 SHORT $LN70@draw_tacti
$LN69@draw_tacti:

; 3891 : 	{
; 3892 : 		draw_2d_mono_sprite (small_tsd_ase_aircraft_datum_mask, x_origin, y_origin, MFD_COLOUR6);

  02444	b8 04 00 00 00	 mov	 eax, 4
  02449	6b c8 05	 imul	 ecx, eax, 5
  0244c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02452	52		 push	 edx
  02453	51		 push	 ecx
  02454	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  0245c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02461	51		 push	 ecx
  02462	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  0246a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0246f	68 00 00 00 00	 push	 OFFSET ?small_tsd_ase_aircraft_datum_mask@@3PADA
  02474	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 3893 : 
; 3894 : 		draw_2d_mono_sprite (small_tsd_ase_aircraft_datum, x_origin, y_origin, MFD_COLOUR1);

  02479	b8 04 00 00 00	 mov	 eax, 4
  0247e	6b c8 00	 imul	 ecx, eax, 0
  02481	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02487	52		 push	 edx
  02488	51		 push	 ecx
  02489	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  02491	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02496	51		 push	 ecx
  02497	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  0249f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024a4	68 00 00 00 00	 push	 OFFSET ?small_tsd_ase_aircraft_datum@@3PADA
  024a9	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN70@draw_tacti:

; 3895 : 	}
; 3896 : 
; 3897 : 	////////////////////////////////////////
; 3898 : 	//
; 3899 : 	// text
; 3900 : 	//
; 3901 : 	////////////////////////////////////////
; 3902 : 
; 3903 : 	set_mono_font_colour (MFD_COLOUR1);

  024ae	b8 04 00 00 00	 mov	 eax, 4
  024b3	6b c8 00	 imul	 ecx, eax, 0
  024b6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  024bc	52		 push	 edx
  024bd	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 3904 : 
; 3905 : 	if (draw_large_mfd)

  024c2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  024c9	74 09		 je	 SHORT $LN71@draw_tacti

; 3906 : 	{
; 3907 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  024cb	6a 05		 push	 5
  024cd	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 3908 : 	}
; 3909 : 	else

  024d2	eb 07		 jmp	 SHORT $LN72@draw_tacti
$LN71@draw_tacti:

; 3910 : 	{
; 3911 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  024d4	6a 01		 push	 1
  024d6	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN72@draw_tacti:

; 3912 : 	}
; 3913 : 
; 3914 : 	//
; 3915 : 	// sensor type
; 3916 : 	//
; 3917 : 
; 3918 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_NAVIGATION)

  024db	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
  024e2	0f 84 9f 01 00
	00		 je	 $LN73@draw_tacti

; 3919 : 	{
; 3920 : 		switch (target_acquisition_system)

  024e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; target_acquisition_system
  024ed	89 85 48 fe ff
	ff		 mov	 DWORD PTR tv1205[ebp], eax
  024f3	83 bd 48 fe ff
	ff 08		 cmp	 DWORD PTR tv1205[ebp], 8
  024fa	77 31		 ja	 SHORT $LN78@draw_tacti
  024fc	8b 8d 48 fe ff
	ff		 mov	 ecx, DWORD PTR tv1205[ebp]
  02502	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN266@draw_tacti[ecx*4]
$LN74@draw_tacti:

; 3921 : 		{
; 3922 : 			case TARGET_ACQUISITION_SYSTEM_OFF:
; 3923 : 			{
; 3924 : 				s = "NO ACQ";

  02509	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06LLLMNJMM@NO?5ACQ@

; 3925 : 
; 3926 : 				break;

  02510	eb 22		 jmp	 SHORT $LN14@draw_tacti
$LN75@draw_tacti:

; 3927 : 			}
; 3928 : 			case TARGET_ACQUISITION_SYSTEM_GROUND_RADAR:
; 3929 : 			case TARGET_ACQUISITION_SYSTEM_AIR_RADAR:
; 3930 : 			{
; 3931 : 				s = "FCR";

  02512	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03JKJFCLEN@FCR@

; 3932 : 
; 3933 : 				break;

  02519	eb 19		 jmp	 SHORT $LN14@draw_tacti
$LN76@draw_tacti:

; 3934 : 			}
; 3935 : 			case TARGET_ACQUISITION_SYSTEM_FLIR:
; 3936 : 			case TARGET_ACQUISITION_SYSTEM_DTV:
; 3937 : 			case TARGET_ACQUISITION_SYSTEM_DVO:
; 3938 : 			{
; 3939 : 				s = "TADS";

  0251b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04DBODHFDK@TADS@

; 3940 : 
; 3941 : 				break;

  02522	eb 10		 jmp	 SHORT $LN14@draw_tacti
$LN77@draw_tacti:

; 3942 : 			}
; 3943 : 			case TARGET_ACQUISITION_SYSTEM_IHADSS:
; 3944 : 			{
; 3945 : 				s = "IHADSS";

  02524	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06NOICLIMH@IHADSS@

; 3946 : 
; 3947 : 				break;

  0252b	eb 07		 jmp	 SHORT $LN14@draw_tacti
$LN78@draw_tacti:

; 3948 : 			}
; 3949 : 			default:
; 3950 : 			{
; 3951 : 				s = "XXX";

  0252d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN14@draw_tacti:

; 3952 : 
; 3953 : 				break;
; 3954 : 			}
; 3955 : 		}
; 3956 : 
; 3957 : 		if (draw_large_mfd)

  02534	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0253b	74 12		 je	 SHORT $LN79@draw_tacti

; 3958 : 		{
; 3959 : 			y_adjust = 5.0;

  0253d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  02545	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3960 : 		}
; 3961 : 		else

  0254d	eb 10		 jmp	 SHORT $LN80@draw_tacti
$LN79@draw_tacti:

; 3962 : 		{
; 3963 : 			y_adjust = 2.0;

  0254f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  02557	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN80@draw_tacti:

; 3964 : 		}
; 3965 : 
; 3966 : 		set_2d_mono_font_position (-0.8, 1.0);

  0255f	51		 push	 ecx
  02560	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02568	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0256d	51		 push	 ecx
  0256e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  02576	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0257b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3967 : 
; 3968 : 		set_mono_font_rel_position (1.0, y_adjust);

  02580	51		 push	 ecx
  02581	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02589	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0258e	51		 push	 ecx
  0258f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02597	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0259c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3969 : 
; 3970 : 		print_mono_font_string (s);

  025a1	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  025a4	50		 push	 eax
  025a5	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3971 : 
; 3972 : 		switch (target_acquisition_system)

  025aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; target_acquisition_system
  025af	89 85 48 fe ff
	ff		 mov	 DWORD PTR tv1213[ebp], eax
  025b5	83 bd 48 fe ff
	ff 08		 cmp	 DWORD PTR tv1213[ebp], 8
  025bc	77 4c		 ja	 SHORT $LN88@draw_tacti
  025be	8b 8d 48 fe ff
	ff		 mov	 ecx, DWORD PTR tv1213[ebp]
  025c4	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN267@draw_tacti[ecx*4]
$LN81@draw_tacti:

; 3973 : 		{
; 3974 : 			case TARGET_ACQUISITION_SYSTEM_OFF:
; 3975 : 			{
; 3976 : 				s = "";

  025cb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_00CNPNBAHC@@

; 3977 : 
; 3978 : 				break;

  025d2	eb 3d		 jmp	 SHORT $LN16@draw_tacti
$LN82@draw_tacti:

; 3979 : 			}
; 3980 : 			case TARGET_ACQUISITION_SYSTEM_GROUND_RADAR:
; 3981 : 			{
; 3982 : 				s = "GND";

  025d4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03DGGJGKKM@GND@

; 3983 : 
; 3984 : 				break;

  025db	eb 34		 jmp	 SHORT $LN16@draw_tacti
$LN83@draw_tacti:

; 3985 : 			}
; 3986 : 			case TARGET_ACQUISITION_SYSTEM_AIR_RADAR:
; 3987 : 			{
; 3988 : 				s = "AIR";

  025dd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03KNFJGCC@AIR@

; 3989 : 
; 3990 : 				break;

  025e4	eb 2b		 jmp	 SHORT $LN16@draw_tacti
$LN84@draw_tacti:

; 3991 : 			}
; 3992 : 			case TARGET_ACQUISITION_SYSTEM_FLIR:
; 3993 : 			{
; 3994 : 				s = "FLIR";

  025e6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04MIGKMLBH@FLIR@

; 3995 : 
; 3996 : 				break;

  025ed	eb 22		 jmp	 SHORT $LN16@draw_tacti
$LN85@draw_tacti:

; 3997 : 			}
; 3998 : 			case TARGET_ACQUISITION_SYSTEM_DTV:
; 3999 : 			{
; 4000 : 				s = "DTV";

  025ef	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03ENJJJDDH@DTV@

; 4001 : 
; 4002 : 				break;

  025f6	eb 19		 jmp	 SHORT $LN16@draw_tacti
$LN86@draw_tacti:

; 4003 : 			}
; 4004 : 			case TARGET_ACQUISITION_SYSTEM_DVO:
; 4005 : 			{
; 4006 : 				s = "DVO";

  025f8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03NFBNOOEB@DVO@

; 4007 : 
; 4008 : 				break;

  025ff	eb 10		 jmp	 SHORT $LN16@draw_tacti
$LN87@draw_tacti:

; 4009 : 			}
; 4010 : 			case TARGET_ACQUISITION_SYSTEM_IHADSS:
; 4011 : 			{
; 4012 : 				s = "";

  02601	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_00CNPNBAHC@@

; 4013 : 
; 4014 : 				break;

  02608	eb 07		 jmp	 SHORT $LN16@draw_tacti
$LN88@draw_tacti:

; 4015 : 			}
; 4016 : 			default:
; 4017 : 			{
; 4018 : 				s = "XXX";

  0260a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN16@draw_tacti:

; 4019 : 
; 4020 : 				break;
; 4021 : 			}
; 4022 : 		}
; 4023 : 
; 4024 : 		if (draw_large_mfd)

  02611	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02618	74 12		 je	 SHORT $LN89@draw_tacti

; 4025 : 		{
; 4026 : 			y_adjust = 2.0;

  0261a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  02622	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4027 : 		}
; 4028 : 		else

  0262a	eb 10		 jmp	 SHORT $LN90@draw_tacti
$LN89@draw_tacti:

; 4029 : 		{
; 4030 : 			y_adjust = 2.0;

  0262c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  02634	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN90@draw_tacti:

; 4031 : 		}
; 4032 : 
; 4033 : 		set_2d_mono_font_position (-0.8, 0.9);

  0263c	51		 push	 ecx
  0263d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  02645	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0264a	51		 push	 ecx
  0264b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  02653	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02658	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4034 : 
; 4035 : 		set_mono_font_rel_position (1.0, y_adjust);

  0265d	51		 push	 ecx
  0265e	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02666	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0266b	51		 push	 ecx
  0266c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02674	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02679	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4036 : 
; 4037 : 		print_mono_font_string (s);

  0267e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02681	50		 push	 eax
  02682	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN73@draw_tacti:

; 4038 : 	}
; 4039 : 
; 4040 : 	//
; 4041 : 	// TSD range
; 4042 : 	//
; 4043 : 
; 4044 : 	if (tsd_ase_range == TSD_ASE_RANGE_2000)

  02687	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  0268f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  02696	9f		 lahf
  02697	f6 c4 44	 test	 ah, 68			; 00000044H
  0269a	7a 09		 jp	 SHORT $LN91@draw_tacti

; 4045 : 	{
; 4046 : 		s = "2Km";

  0269c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03CIAFGHAC@2Km@
  026a3	eb 61		 jmp	 SHORT $LN98@draw_tacti
$LN91@draw_tacti:

; 4047 : 	}
; 4048 : 	else if (tsd_ase_range == TSD_ASE_RANGE_5000)

  026a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  026ad	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  026b4	9f		 lahf
  026b5	f6 c4 44	 test	 ah, 68			; 00000044H
  026b8	7a 09		 jp	 SHORT $LN93@draw_tacti

; 4049 : 	{
; 4050 : 		s = "5Km";

  026ba	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03LFNCFPLL@5Km@
  026c1	eb 43		 jmp	 SHORT $LN98@draw_tacti
$LN93@draw_tacti:

; 4051 : 	}
; 4052 : 	else if (tsd_ase_range == TSD_ASE_RANGE_10000)

  026c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  026cb	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  026d2	9f		 lahf
  026d3	f6 c4 44	 test	 ah, 68			; 00000044H
  026d6	7a 09		 jp	 SHORT $LN95@draw_tacti

; 4053 : 	{
; 4054 : 		s = "10Km";

  026d8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04PJCLBGLO@10Km@
  026df	eb 25		 jmp	 SHORT $LN98@draw_tacti
$LN95@draw_tacti:

; 4055 : 	}
; 4056 : 	else if (tsd_ase_range == TSD_ASE_RANGE_25000)

  026e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  026e9	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  026f0	9f		 lahf
  026f1	f6 c4 44	 test	 ah, 68			; 00000044H
  026f4	7a 09		 jp	 SHORT $LN97@draw_tacti

; 4057 : 	{
; 4058 : 		s = "25Km";

  026f6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04IJFFJMFM@25Km@

; 4059 : 	}
; 4060 : 	else

  026fd	eb 07		 jmp	 SHORT $LN98@draw_tacti
$LN97@draw_tacti:

; 4061 : 	{
; 4062 : 		s = "XXX";

  026ff	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN98@draw_tacti:

; 4063 : 	}
; 4064 : 
; 4065 : 	width = get_mono_font_string_width (s);

  02706	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02709	50		 push	 eax
  0270a	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0270f	d9 9d 18 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 4066 : 
; 4067 : 	if (draw_large_mfd)

  02715	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0271c	74 12		 je	 SHORT $LN99@draw_tacti

; 4068 : 	{
; 4069 : 		y_adjust = 5.0;

  0271e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  02726	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4070 : 	}
; 4071 : 	else

  0272e	eb 10		 jmp	 SHORT $LN100@draw_tacti
$LN99@draw_tacti:

; 4072 : 	{
; 4073 : 		y_adjust = 2.0;

  02730	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  02738	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN100@draw_tacti:

; 4074 : 	}
; 4075 : 
; 4076 : 	set_2d_mono_font_position (0.8, 1.0);

  02740	51		 push	 ecx
  02741	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02749	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0274e	51		 push	 ecx
  0274f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  02757	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0275c	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4077 : 
; 4078 : 	set_mono_font_rel_position (-width, y_adjust);

  02761	51		 push	 ecx
  02762	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0276a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0276f	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  02777	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0277e	51		 push	 ecx
  0277f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02784	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4079 : 
; 4080 : 	print_mono_font_string (s);

  02789	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0278c	50		 push	 eax
  0278d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4081 : 
; 4082 : 	//
; 4083 : 	// TSD declutter level
; 4084 : 	//
; 4085 : 
; 4086 : 	if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_ALL)

  02792	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0
  02799	75 09		 jne	 SHORT $LN101@draw_tacti

; 4087 : 	{
; 4088 : 		s = "ALL";

  0279b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03NIFPGLBG@ALL@
  027a2	eb 2b		 jmp	 SHORT $LN106@draw_tacti
$LN101@draw_tacti:

; 4089 : 	}
; 4090 : 	else if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  027a4	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  027ab	75 09		 jne	 SHORT $LN103@draw_tacti

; 4091 : 	{
; 4092 : 		s = "TGT";

  027ad	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03DBNGLLAD@TGT@
  027b4	eb 19		 jmp	 SHORT $LN106@draw_tacti
$LN103@draw_tacti:

; 4093 : 	}
; 4094 : 	else if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_NAVIGATION)

  027b6	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
  027bd	75 09		 jne	 SHORT $LN105@draw_tacti

; 4095 : 	{
; 4096 : 		s = "NAV";

  027bf	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03DIMJBCMI@NAV@

; 4097 : 	}
; 4098 : 	else

  027c6	eb 07		 jmp	 SHORT $LN106@draw_tacti
$LN105@draw_tacti:

; 4099 : 	{
; 4100 : 		s = "XXX";

  027c8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN106@draw_tacti:

; 4101 : 	}
; 4102 : 
; 4103 : 	width = get_mono_font_string_width (s);

  027cf	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  027d2	50		 push	 eax
  027d3	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  027d8	d9 9d 18 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 4104 : 
; 4105 : 	if (draw_large_mfd)

  027de	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  027e5	74 12		 je	 SHORT $LN107@draw_tacti

; 4106 : 	{
; 4107 : 		y_adjust = 2.0;

  027e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  027ef	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4108 : 	}
; 4109 : 	else

  027f7	eb 10		 jmp	 SHORT $LN108@draw_tacti
$LN107@draw_tacti:

; 4110 : 	{
; 4111 : 		y_adjust = 2.0;

  027f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  02801	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN108@draw_tacti:

; 4112 : 	}
; 4113 : 
; 4114 : 	set_2d_mono_font_position (0.8, 0.9);

  02809	51		 push	 ecx
  0280a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  02812	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02817	51		 push	 ecx
  02818	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  02820	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02825	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4115 : 
; 4116 : 	set_mono_font_rel_position (-width, y_adjust);

  0282a	51		 push	 ecx
  0282b	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02833	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02838	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  02840	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  02847	51		 push	 ecx
  02848	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0284d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4117 : 
; 4118 : 	print_mono_font_string (s);

  02852	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02855	50		 push	 eax
  02856	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4119 : 
; 4120 : 	//
; 4121 : 	// target range
; 4122 : 	//
; 4123 : 
; 4124 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_NAVIGATION)

  0285b	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
  02862	0f 84 c7 01 00
	00		 je	 $LN110@draw_tacti

; 4125 : 	{
; 4126 : 		if (source_target)

  02868	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _source_target$[ebp], 0
  0286f	0f 84 ba 01 00
	00		 je	 $LN110@draw_tacti

; 4127 : 		{
; 4128 : 			vec3d
; 4129 : 				*target_position;
; 4130 : 
; 4131 : 			float
; 4132 : 				target_range;
; 4133 : 
; 4134 : 			target_position = get_local_entity_vec3d_ptr (source_target, VEC3D_TYPE_POSITION);

  02875	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _source_target$[ebp], 0
  0287c	74 10		 je	 SHORT $LN250@draw_tacti
  0287e	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _source_target$[ebp]
  02884	8b 08		 mov	 ecx, DWORD PTR [eax]
  02886	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv1318[ebp], ecx
  0288c	eb 27		 jmp	 SHORT $LN251@draw_tacti
$LN250@draw_tacti:
  0288e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  02894	81 c2 c7 02 00
	00		 add	 edx, 711		; 000002c7H
  0289a	52		 push	 edx
  0289b	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  028a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  028a5	50		 push	 eax
  028a6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  028ab	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1318[ebp], 0
$LN251@draw_tacti:
  028b5	b9 01 00 00 00	 mov	 ecx, 1
  028ba	85 c9		 test	 ecx, ecx
  028bc	74 0c		 je	 SHORT $LN252@draw_tacti
  028be	c7 85 44 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv1326[ebp], 8
  028c8	eb 27		 jmp	 SHORT $LN253@draw_tacti
$LN252@draw_tacti:
  028ca	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  028d0	81 c2 c7 02 00
	00		 add	 edx, 711		; 000002c7H
  028d6	52		 push	 edx
  028d7	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  028dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  028e1	50		 push	 eax
  028e2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  028e7	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1326[ebp], 0
$LN253@draw_tacti:
  028f1	6a 08		 push	 8
  028f3	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_target$[ebp]
  028f9	51		 push	 ecx
  028fa	6b 95 48 fe ff
	ff 60		 imul	 edx, DWORD PTR tv1318[ebp], 96
  02901	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR tv1326[ebp]
  02907	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0290e	ff d1		 call	 ecx
  02910	89 85 bc fe ff
	ff		 mov	 DWORD PTR _target_position$11[ebp], eax

; 4135 : 
; 4136 : 			target_range = get_3d_range (source_position, target_position);

  02916	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _target_position$11[ebp]
  0291c	50		 push	 eax
  0291d	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  02923	51		 push	 ecx
  02924	e8 00 00 00 00	 call	 ?get_3d_range@@YGMPBUVEC3D@@0@Z ; get_3d_range
  02929	d9 9d b8 fe ff
	ff		 fstp	 DWORD PTR _target_range$10[ebp]

; 4137 : 
; 4138 : 			if ((target_range < 1000.0) && (!blackhawk_damage.laser_designator))

  0292f	f3 0f 5a 85 b8
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$10[ebp]
  02937	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  0293f	66 0f 2f c8	 comisd	 xmm1, xmm0
  02943	76 2c		 jbe	 SHORT $LN111@draw_tacti
  02945	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  0294a	c1 e8 06	 shr	 eax, 6
  0294d	83 e0 01	 and	 eax, 1
  02950	75 1f		 jne	 SHORT $LN111@draw_tacti

; 4139 : 			{
; 4140 : 				sprintf (buffer, "%dm", (int) target_range);

  02952	f3 0f 2c 85 b8
	fe ff ff	 cvttss2si eax, DWORD PTR _target_range$10[ebp]
  0295a	50		 push	 eax
  0295b	68 00 00 00 00	 push	 OFFSET ??_C@_03NGNKAJPJ@?$CFdm@
  02960	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  02966	51		 push	 ecx
  02967	e8 00 00 00 00	 call	 _sprintf
  0296c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4141 : 			}
; 4142 : 			else

  0296f	eb 2c		 jmp	 SHORT $LN112@draw_tacti
$LN111@draw_tacti:

; 4143 : 			{
; 4144 : 				sprintf (buffer, "%.1fKm", target_range * (1.0 / 1000.0));

  02971	f3 0f 5a 85 b8
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$10[ebp]
  02979	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  02981	83 ec 08	 sub	 esp, 8
  02984	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  02989	68 00 00 00 00	 push	 OFFSET ??_C@_06OMCABMNO@?$CF?41fKm@
  0298e	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02994	50		 push	 eax
  02995	e8 00 00 00 00	 call	 _sprintf
  0299a	83 c4 10	 add	 esp, 16			; 00000010H
$LN112@draw_tacti:

; 4145 : 			}
; 4146 : 
; 4147 : 			width = get_mono_font_string_width (buffer);

  0299d	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  029a3	50		 push	 eax
  029a4	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  029a9	d9 9d 18 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 4148 : 
; 4149 : 			if (draw_large_mfd)

  029af	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  029b6	74 12		 je	 SHORT $LN113@draw_tacti

; 4150 : 			{
; 4151 : 				y_adjust = -12.0;

  029b8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  029c0	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4152 : 			}
; 4153 : 			else

  029c8	eb 10		 jmp	 SHORT $LN114@draw_tacti
$LN113@draw_tacti:

; 4154 : 			{
; 4155 : 				y_adjust = -5.0;

  029ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  029d2	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN114@draw_tacti:

; 4156 : 			}
; 4157 : 
; 4158 : 			set_2d_mono_font_position (0.8, -1.0);

  029da	51		 push	 ecx
  029db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  029e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029e8	51		 push	 ecx
  029e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  029f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029f6	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4159 : 
; 4160 : 			set_mono_font_rel_position (-width, y_adjust);

  029fb	51		 push	 ecx
  029fc	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02a04	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a09	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  02a11	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  02a18	51		 push	 ecx
  02a19	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a1e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4161 : 
; 4162 : 			print_mono_font_string (buffer);

  02a23	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02a29	50		 push	 eax
  02a2a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN110@draw_tacti:

; 4163 : 		}
; 4164 : 	}
; 4165 : 
; 4166 : 	//
; 4167 : 	// waypoint information
; 4168 : 	//
; 4169 : 
; 4170 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_TARGET && !blackhawk_damage.navigation_computer)

  02a2f	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  02a36	0f 84 f7 04 00
	00		 je	 $LN116@draw_tacti
  02a3c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  02a41	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  02a44	83 e0 01	 and	 eax, 1
  02a47	0f 85 e6 04 00
	00		 jne	 $LN116@draw_tacti

; 4171 : 	{
; 4172 : 		entity
; 4173 : 			*wp;
; 4174 : 
; 4175 : 		vec3d
; 4176 : 			waypoint_position;
; 4177 : 
; 4178 : 		float
; 4179 : 			waypoint_range;
; 4180 : 
; 4181 : 		wp = get_local_entity_current_waypoint (source);

  02a4d	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  02a53	50		 push	 eax
  02a54	e8 00 00 00 00	 call	 ?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_current_waypoint
  02a59	89 85 b4 fe ff
	ff		 mov	 DWORD PTR _wp$9[ebp], eax

; 4182 : 
; 4183 : 		if (wp)

  02a5f	83 bd b4 fe ff
	ff 00		 cmp	 DWORD PTR _wp$9[ebp], 0
  02a66	0f 84 c7 04 00
	00		 je	 $LN116@draw_tacti

; 4184 : 		{
; 4185 : 			get_waypoint_display_position (source, wp, &waypoint_position);

  02a6c	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR _waypoint_position$8[ebp]
  02a72	50		 push	 eax
  02a73	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR _wp$9[ebp]
  02a79	51		 push	 ecx
  02a7a	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  02a80	52		 push	 edx
  02a81	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 4186 : 
; 4187 : 			//
; 4188 : 			// waypoint id & range
; 4189 : 			//
; 4190 : 
; 4191 : 			waypoint_range = get_2d_range (source_position, &waypoint_position);

  02a86	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR _waypoint_position$8[ebp]
  02a8c	50		 push	 eax
  02a8d	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  02a93	51		 push	 ecx
  02a94	e8 00 00 00 00	 call	 ?get_2d_range@@YGMPBUVEC3D@@0@Z ; get_2d_range
  02a99	d9 9d a4 fe ff
	ff		 fstp	 DWORD PTR _waypoint_range$7[ebp]

; 4192 : 
; 4193 : 			if (!blackhawk_damage.navigation_computer)

  02a9f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  02aa4	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  02aa7	83 e0 01	 and	 eax, 1
  02aaa	0f 85 cb 02 00
	00		 jne	 $LN117@draw_tacti

; 4194 : 			{
; 4195 : 				if (waypoint_range < 1000.0)

  02ab0	f3 0f 5a 85 a4
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _waypoint_range$7[ebp]
  02ab8	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  02ac0	66 0f 2f c8	 comisd	 xmm1, xmm0
  02ac4	0f 86 c3 00 00
	00		 jbe	 $LN119@draw_tacti

; 4196 : 				{
; 4197 : 					sprintf (buffer, "%c:%dm", get_local_entity_char_value (wp, CHAR_TYPE_TAG), (int) waypoint_range);

  02aca	83 bd b4 fe ff
	ff 00		 cmp	 DWORD PTR _wp$9[ebp], 0
  02ad1	74 10		 je	 SHORT $LN254@draw_tacti
  02ad3	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _wp$9[ebp]
  02ad9	8b 08		 mov	 ecx, DWORD PTR [eax]
  02adb	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv1385[ebp], ecx
  02ae1	eb 27		 jmp	 SHORT $LN255@draw_tacti
$LN254@draw_tacti:
  02ae3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  02ae9	81 c2 06 03 00
	00		 add	 edx, 774		; 00000306H
  02aef	52		 push	 edx
  02af0	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  02af5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  02afa	50		 push	 eax
  02afb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02b00	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1385[ebp], 0
$LN255@draw_tacti:
  02b0a	b9 01 00 00 00	 mov	 ecx, 1
  02b0f	85 c9		 test	 ecx, ecx
  02b11	74 0c		 je	 SHORT $LN256@draw_tacti
  02b13	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1393[ebp], 0
  02b1d	eb 27		 jmp	 SHORT $LN257@draw_tacti
$LN256@draw_tacti:
  02b1f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  02b25	81 c2 06 03 00
	00		 add	 edx, 774		; 00000306H
  02b2b	52		 push	 edx
  02b2c	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  02b31	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  02b36	50		 push	 eax
  02b37	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02b3c	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1393[ebp], 0
$LN257@draw_tacti:
  02b46	f3 0f 2c 8d a4
	fe ff ff	 cvttss2si ecx, DWORD PTR _waypoint_range$7[ebp]
  02b4e	51		 push	 ecx
  02b4f	6a 00		 push	 0
  02b51	8b 95 b4 fe ff
	ff		 mov	 edx, DWORD PTR _wp$9[ebp]
  02b57	52		 push	 edx
  02b58	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR tv1393[ebp]
  02b5e	c1 e0 02	 shl	 eax, 2
  02b61	8b 8d 48 fe ff
	ff		 mov	 ecx, DWORD PTR tv1385[ebp]
  02b67	8b 94 c8 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[eax+ecx*8]
  02b6e	ff d2		 call	 edx
  02b70	0f b6 c0	 movzx	 eax, al
  02b73	50		 push	 eax
  02b74	68 00 00 00 00	 push	 OFFSET ??_C@_06JCIGMCHD@?$CFc?3?$CFdm@
  02b79	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  02b7f	51		 push	 ecx
  02b80	e8 00 00 00 00	 call	 _sprintf
  02b85	83 c4 10	 add	 esp, 16			; 00000010H
  02b88	e9 ec 01 00 00	 jmp	 $LN122@draw_tacti
$LN119@draw_tacti:

; 4198 : 				}
; 4199 : 				else if (waypoint_range < 100000.0)

  02b8d	f3 0f 5a 85 a4
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _waypoint_range$7[ebp]
  02b95	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40f86a0000000000
  02b9d	66 0f 2f c8	 comisd	 xmm1, xmm0
  02ba1	0f 86 08 01 00
	00		 jbe	 $LN121@draw_tacti

; 4200 : 				{
; 4201 : 					int
; 4202 : 						i;
; 4203 : 
; 4204 : 					float
; 4205 : 						f;
; 4206 : 
; 4207 : 					//
; 4208 : 					// this is required to prevent rounding errors around the 100Km mark
; 4209 : 					//
; 4210 : 
; 4211 : 					i = (int) waypoint_range * (1.0 / 100.0);

  02ba7	f3 0f 2c 85 a4
	fe ff ff	 cvttss2si eax, DWORD PTR _waypoint_range$7[ebp]
  02baf	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  02bb3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  02bbb	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  02bbf	89 8d a0 fe ff
	ff		 mov	 DWORD PTR _i$6[ebp], ecx

; 4212 : 
; 4213 : 					f = (float) i * (1.0 / 10.0);

  02bc5	f3 0f 2a 85 a0
	fe ff ff	 cvtsi2ss xmm0, DWORD PTR _i$6[ebp]
  02bcd	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  02bd1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  02bd9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02bdd	f3 0f 11 85 9c
	fe ff ff	 movss	 DWORD PTR _f$5[ebp], xmm0

; 4214 : 
; 4215 : 					sprintf (buffer, "%c:%.1fKm", get_local_entity_char_value (wp, CHAR_TYPE_TAG), f);

  02be5	83 bd b4 fe ff
	ff 00		 cmp	 DWORD PTR _wp$9[ebp], 0
  02bec	74 10		 je	 SHORT $LN258@draw_tacti
  02bee	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _wp$9[ebp]
  02bf4	8b 08		 mov	 ecx, DWORD PTR [eax]
  02bf6	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv1421[ebp], ecx
  02bfc	eb 27		 jmp	 SHORT $LN259@draw_tacti
$LN258@draw_tacti:
  02bfe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  02c04	81 c2 18 03 00
	00		 add	 edx, 792		; 00000318H
  02c0a	52		 push	 edx
  02c0b	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  02c10	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  02c15	50		 push	 eax
  02c16	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02c1b	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1421[ebp], 0
$LN259@draw_tacti:
  02c25	b9 01 00 00 00	 mov	 ecx, 1
  02c2a	85 c9		 test	 ecx, ecx
  02c2c	74 0c		 je	 SHORT $LN260@draw_tacti
  02c2e	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1429[ebp], 0
  02c38	eb 27		 jmp	 SHORT $LN261@draw_tacti
$LN260@draw_tacti:
  02c3a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  02c40	81 c2 18 03 00
	00		 add	 edx, 792		; 00000318H
  02c46	52		 push	 edx
  02c47	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  02c4c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  02c51	50		 push	 eax
  02c52	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02c57	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1429[ebp], 0
$LN261@draw_tacti:
  02c61	f3 0f 5a 85 9c
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _f$5[ebp]
  02c69	83 ec 08	 sub	 esp, 8
  02c6c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  02c71	6a 00		 push	 0
  02c73	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR _wp$9[ebp]
  02c79	51		 push	 ecx
  02c7a	8b 95 44 fe ff
	ff		 mov	 edx, DWORD PTR tv1429[ebp]
  02c80	c1 e2 02	 shl	 edx, 2
  02c83	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR tv1421[ebp]
  02c89	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[edx+eax*8]
  02c90	ff d1		 call	 ecx
  02c92	0f b6 d0	 movzx	 edx, al
  02c95	52		 push	 edx
  02c96	68 00 00 00 00	 push	 OFFSET ??_C@_09EKFBJBJG@?$CFc?3?$CF?41fKm@
  02c9b	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02ca1	50		 push	 eax
  02ca2	e8 00 00 00 00	 call	 _sprintf
  02ca7	83 c4 14	 add	 esp, 20			; 00000014H

; 4216 : 				}
; 4217 : 				else

  02caa	e9 ca 00 00 00	 jmp	 $LN122@draw_tacti
$LN121@draw_tacti:

; 4218 : 				{
; 4219 : 					sprintf (buffer, "%c:%dKm", get_local_entity_char_value (wp, CHAR_TYPE_TAG), (int) (waypoint_range * (1.0 / 1000.0)));

  02caf	83 bd b4 fe ff
	ff 00		 cmp	 DWORD PTR _wp$9[ebp], 0
  02cb6	74 10		 je	 SHORT $LN262@draw_tacti
  02cb8	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _wp$9[ebp]
  02cbe	8b 08		 mov	 ecx, DWORD PTR [eax]
  02cc0	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv1450[ebp], ecx
  02cc6	eb 27		 jmp	 SHORT $LN263@draw_tacti
$LN262@draw_tacti:
  02cc8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  02cce	81 c2 1c 03 00
	00		 add	 edx, 796		; 0000031cH
  02cd4	52		 push	 edx
  02cd5	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  02cda	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  02cdf	50		 push	 eax
  02ce0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02ce5	c7 85 48 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1450[ebp], 0
$LN263@draw_tacti:
  02cef	b9 01 00 00 00	 mov	 ecx, 1
  02cf4	85 c9		 test	 ecx, ecx
  02cf6	74 0c		 je	 SHORT $LN264@draw_tacti
  02cf8	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1458[ebp], 0
  02d02	eb 27		 jmp	 SHORT $LN265@draw_tacti
$LN264@draw_tacti:
  02d04	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXXZ@4JA
  02d0a	81 c2 1c 03 00
	00		 add	 edx, 796		; 0000031cH
  02d10	52		 push	 edx
  02d11	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  02d16	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  02d1b	50		 push	 eax
  02d1c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02d21	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1458[ebp], 0
$LN265@draw_tacti:
  02d2b	f3 0f 5a 85 a4
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _waypoint_range$7[ebp]
  02d33	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  02d3b	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  02d3f	51		 push	 ecx
  02d40	6a 00		 push	 0
  02d42	8b 95 b4 fe ff
	ff		 mov	 edx, DWORD PTR _wp$9[ebp]
  02d48	52		 push	 edx
  02d49	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR tv1458[ebp]
  02d4f	c1 e0 02	 shl	 eax, 2
  02d52	8b 8d 48 fe ff
	ff		 mov	 ecx, DWORD PTR tv1450[ebp]
  02d58	8b 94 c8 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[eax+ecx*8]
  02d5f	ff d2		 call	 edx
  02d61	0f b6 c0	 movzx	 eax, al
  02d64	50		 push	 eax
  02d65	68 00 00 00 00	 push	 OFFSET ??_C@_07CFANIJPM@?$CFc?3?$CFdKm@
  02d6a	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  02d70	51		 push	 ecx
  02d71	e8 00 00 00 00	 call	 _sprintf
  02d76	83 c4 10	 add	 esp, 16			; 00000010H
$LN122@draw_tacti:

; 4220 : 				}
; 4221 : 			}
; 4222 : 			else

  02d79	eb 14		 jmp	 SHORT $LN118@draw_tacti
$LN117@draw_tacti:

; 4223 : 			{
; 4224 : 				sprintf (buffer, "-:--.-");

  02d7b	68 00 00 00 00	 push	 OFFSET ??_C@_06BAOIPBEF@?9?3?9?9?4?9@
  02d80	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02d86	50		 push	 eax
  02d87	e8 00 00 00 00	 call	 _sprintf
  02d8c	83 c4 08	 add	 esp, 8
$LN118@draw_tacti:

; 4225 : 			}
; 4226 : 
; 4227 : 			if (draw_large_mfd)

  02d8f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02d96	74 12		 je	 SHORT $LN123@draw_tacti

; 4228 : 			{
; 4229 : 				y_adjust = -25.0;

  02d98	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  02da0	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4230 : 			}
; 4231 : 			else

  02da8	eb 10		 jmp	 SHORT $LN124@draw_tacti
$LN123@draw_tacti:

; 4232 : 			{
; 4233 : 				y_adjust = -12.0;

  02daa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  02db2	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN124@draw_tacti:

; 4234 : 			}
; 4235 : 
; 4236 : 			set_2d_mono_font_position (-0.8, -1.0);

  02dba	51		 push	 ecx
  02dbb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02dc3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02dc8	51		 push	 ecx
  02dc9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  02dd1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02dd6	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4237 : 
; 4238 : 			set_mono_font_rel_position (1.0, y_adjust);

  02ddb	51		 push	 ecx
  02ddc	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02de4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02de9	51		 push	 ecx
  02dea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02df2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02df7	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4239 : 
; 4240 : 			print_mono_font_string (buffer);

  02dfc	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02e02	50		 push	 eax
  02e03	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4241 : 
; 4242 : 			//
; 4243 : 			// time to go
; 4244 : 			//
; 4245 : 
; 4246 : 			if ((current_flight_dynamics->velocity_z.value > 0.1) && (!blackhawk_damage.navigation_computer))

  02e08	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  02e0d	f3 0f 5a 80 9c
	20 00 00	 cvtss2sd xmm0, DWORD PTR [eax+8348]
  02e15	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fb999999999999a
  02e1d	0f 86 83 00 00
	00		 jbe	 $LN125@draw_tacti
  02e23	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  02e28	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  02e2b	83 e0 01	 and	 eax, 1
  02e2e	75 76		 jne	 SHORT $LN125@draw_tacti

; 4247 : 			{
; 4248 : 				float
; 4249 : 					time_to_go,
; 4250 : 					hours,
; 4251 : 					minutes,
; 4252 : 					seconds;
; 4253 : 
; 4254 : 				time_to_go = waypoint_range / current_flight_dynamics->velocity_z.value;

  02e30	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  02e35	f3 0f 10 85 a4
	fe ff ff	 movss	 xmm0, DWORD PTR _waypoint_range$7[ebp]
  02e3d	f3 0f 5e 80 9c
	20 00 00	 divss	 xmm0, DWORD PTR [eax+8348]
  02e45	f3 0f 11 85 98
	fe ff ff	 movss	 DWORD PTR _time_to_go$4[ebp], xmm0

; 4255 : 
; 4256 : 				get_digital_clock_values (time_to_go, &hours, &minutes, &seconds);

  02e4d	8d 85 8c fe ff
	ff		 lea	 eax, DWORD PTR _seconds$1[ebp]
  02e53	50		 push	 eax
  02e54	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _minutes$2[ebp]
  02e5a	51		 push	 ecx
  02e5b	8d 95 94 fe ff
	ff		 lea	 edx, DWORD PTR _hours$3[ebp]
  02e61	52		 push	 edx
  02e62	51		 push	 ecx
  02e63	f3 0f 10 85 98
	fe ff ff	 movss	 xmm0, DWORD PTR _time_to_go$4[ebp]
  02e6b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e70	e8 00 00 00 00	 call	 ?get_digital_clock_values@@YGXMPAM00@Z ; get_digital_clock_values

; 4257 : 
; 4258 : 				sprintf (buffer, "%02d:%02d:%02d", (int) hours, (int) minutes, (int) seconds);

  02e75	f3 0f 2c 85 8c
	fe ff ff	 cvttss2si eax, DWORD PTR _seconds$1[ebp]
  02e7d	50		 push	 eax
  02e7e	f3 0f 2c 8d 90
	fe ff ff	 cvttss2si ecx, DWORD PTR _minutes$2[ebp]
  02e86	51		 push	 ecx
  02e87	f3 0f 2c 95 94
	fe ff ff	 cvttss2si edx, DWORD PTR _hours$3[ebp]
  02e8f	52		 push	 edx
  02e90	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@
  02e95	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02e9b	50		 push	 eax
  02e9c	e8 00 00 00 00	 call	 _sprintf
  02ea1	83 c4 14	 add	 esp, 20			; 00000014H

; 4259 : 			}
; 4260 : 			else

  02ea4	eb 14		 jmp	 SHORT $LN126@draw_tacti
$LN125@draw_tacti:

; 4261 : 			{
; 4262 : 				strcpy (buffer, "--:--:--");

  02ea6	68 00 00 00 00	 push	 OFFSET ??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@
  02eab	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02eb1	50		 push	 eax
  02eb2	e8 00 00 00 00	 call	 _strcpy
  02eb7	83 c4 08	 add	 esp, 8
$LN126@draw_tacti:

; 4263 : 			}
; 4264 : 
; 4265 : 			if (draw_large_mfd)

  02eba	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02ec1	74 12		 je	 SHORT $LN127@draw_tacti

; 4266 : 			{
; 4267 : 				y_adjust = -12.0;

  02ec3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  02ecb	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4268 : 			}
; 4269 : 			else

  02ed3	eb 10		 jmp	 SHORT $LN128@draw_tacti
$LN127@draw_tacti:

; 4270 : 			{
; 4271 : 				y_adjust = -5.0;

  02ed5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  02edd	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN128@draw_tacti:

; 4272 : 			}
; 4273 : 
; 4274 : 			set_2d_mono_font_position (-0.8, -1.0);

  02ee5	51		 push	 ecx
  02ee6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02eee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ef3	51		 push	 ecx
  02ef4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  02efc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02f01	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4275 : 
; 4276 : 			set_mono_font_rel_position (1.0, y_adjust);

  02f06	51		 push	 ecx
  02f07	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02f0f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02f14	51		 push	 ecx
  02f15	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02f1d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02f22	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4277 : 
; 4278 : 			print_mono_font_string (buffer);

  02f27	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02f2d	50		 push	 eax
  02f2e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN116@draw_tacti:

; 4279 : 		}
; 4280 : 	}
; 4281 : //VJ 030423 TSD render mod	
; 4282 : 	set_rgb_colour (MFD_COLOUR1,              0, 255,   0, 255);

  02f33	b8 04 00 00 00	 mov	 eax, 4
  02f38	6b c8 00	 imul	 ecx, eax, 0
  02f3b	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  02f42	b8 04 00 00 00	 mov	 eax, 4
  02f47	6b c8 00	 imul	 ecx, eax, 0
  02f4a	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  02f51	b8 04 00 00 00	 mov	 eax, 4
  02f56	6b c8 00	 imul	 ecx, eax, 0
  02f59	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  02f60	b8 04 00 00 00	 mov	 eax, 4
  02f65	6b c8 00	 imul	 ecx, eax, 0
  02f68	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 4283 : 	set_rgb_colour (MFD_COLOUR2,              0, 200,   0, 255);

  02f6f	b8 04 00 00 00	 mov	 eax, 4
  02f74	c1 e0 00	 shl	 eax, 0
  02f77	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  02f7e	b8 04 00 00 00	 mov	 eax, 4
  02f83	c1 e0 00	 shl	 eax, 0
  02f86	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  02f8d	b8 04 00 00 00	 mov	 eax, 4
  02f92	c1 e0 00	 shl	 eax, 0
  02f95	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  02f9c	b8 04 00 00 00	 mov	 eax, 4
  02fa1	c1 e0 00	 shl	 eax, 0
  02fa4	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 4284 : 	set_rgb_colour (MFD_COLOUR3,              0, 176,   0, 255);

  02fab	b8 04 00 00 00	 mov	 eax, 4
  02fb0	d1 e0		 shl	 eax, 1
  02fb2	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  02fb9	b8 04 00 00 00	 mov	 eax, 4
  02fbe	d1 e0		 shl	 eax, 1
  02fc0	c6 80 01 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 176 ; 000000b0H
  02fc7	b8 04 00 00 00	 mov	 eax, 4
  02fcc	d1 e0		 shl	 eax, 1
  02fce	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  02fd5	b8 04 00 00 00	 mov	 eax, 4
  02fda	d1 e0		 shl	 eax, 1
  02fdc	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 4285 : 	set_rgb_colour (MFD_COLOUR4,              0, 151,   0, 255);

  02fe3	b8 04 00 00 00	 mov	 eax, 4
  02fe8	6b c8 03	 imul	 ecx, eax, 3
  02feb	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  02ff2	b8 04 00 00 00	 mov	 eax, 4
  02ff7	6b c8 03	 imul	 ecx, eax, 3
  02ffa	c6 81 01 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 151 ; 00000097H
  03001	b8 04 00 00 00	 mov	 eax, 4
  03006	6b c8 03	 imul	 ecx, eax, 3
  03009	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  03010	b8 04 00 00 00	 mov	 eax, 4
  03015	6b c8 03	 imul	 ecx, eax, 3
  03018	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 4286 : 	set_rgb_colour (MFD_COLOUR5,              0, 128,   0, 255);

  0301f	b8 04 00 00 00	 mov	 eax, 4
  03024	c1 e0 02	 shl	 eax, 2
  03027	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  0302e	b8 04 00 00 00	 mov	 eax, 4
  03033	c1 e0 02	 shl	 eax, 2
  03036	c6 80 01 00 00
	00 80		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 128 ; 00000080H
  0303d	b8 04 00 00 00	 mov	 eax, 4
  03042	c1 e0 02	 shl	 eax, 2
  03045	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  0304c	b8 04 00 00 00	 mov	 eax, 4
  03051	c1 e0 02	 shl	 eax, 2
  03054	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 4287 : 	set_rgb_colour (MFD_COLOUR6,             40,  68,  56, 255);

  0305b	b8 04 00 00 00	 mov	 eax, 4
  03060	6b c8 05	 imul	 ecx, eax, 5
  03063	c6 81 02 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 40 ; 00000028H
  0306a	b8 04 00 00 00	 mov	 eax, 4
  0306f	6b c8 05	 imul	 ecx, eax, 5
  03072	c6 81 01 00 00
	00 44		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 68 ; 00000044H
  03079	b8 04 00 00 00	 mov	 eax, 4
  0307e	6b c8 05	 imul	 ecx, eax, 5
  03081	c6 81 00 00 00
	00 38		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 56 ; 00000038H
  03088	b8 04 00 00 00	 mov	 eax, 4
  0308d	6b c8 05	 imul	 ecx, eax, 5
  03090	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 4288 : }

  03097	5f		 pop	 edi
  03098	5e		 pop	 esi
  03099	5b		 pop	 ebx
  0309a	8b e5		 mov	 esp, ebp
  0309c	5d		 pop	 ebp
  0309d	c3		 ret	 0
  0309e	66 90		 npad	 2
$LN266@draw_tacti:
  030a0	00 00 00 00	 DD	 $LN74@draw_tacti
  030a4	00 00 00 00	 DD	 $LN75@draw_tacti
  030a8	00 00 00 00	 DD	 $LN75@draw_tacti
  030ac	00 00 00 00	 DD	 $LN76@draw_tacti
  030b0	00 00 00 00	 DD	 $LN76@draw_tacti
  030b4	00 00 00 00	 DD	 $LN76@draw_tacti
  030b8	00 00 00 00	 DD	 $LN78@draw_tacti
  030bc	00 00 00 00	 DD	 $LN78@draw_tacti
  030c0	00 00 00 00	 DD	 $LN77@draw_tacti
$LN267@draw_tacti:
  030c4	00 00 00 00	 DD	 $LN81@draw_tacti
  030c8	00 00 00 00	 DD	 $LN82@draw_tacti
  030cc	00 00 00 00	 DD	 $LN83@draw_tacti
  030d0	00 00 00 00	 DD	 $LN84@draw_tacti
  030d4	00 00 00 00	 DD	 $LN85@draw_tacti
  030d8	00 00 00 00	 DD	 $LN86@draw_tacti
  030dc	00 00 00 00	 DD	 $LN88@draw_tacti
  030e0	00 00 00 00	 DD	 $LN88@draw_tacti
  030e4	00 00 00 00	 DD	 $LN87@draw_tacti
?draw_tactical_situation_display_mfd@@YGXXZ ENDP	; draw_tactical_situation_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_2d_dvo_mfd@@YGXHH@Z
_TEXT	SEGMENT
_valid_3d$ = 8						; size = 4
_scaled_3d$ = 12					; size = 4
?draw_2d_dvo_mfd@@YGXHH@Z PROC				; draw_2d_dvo_mfd, COMDAT

; 3402 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3403 : 	draw_2d_eo_display (&blackhawk_dvo, TARGET_ACQUISITION_SYSTEM_DVO, blackhawk_damage.dvo, valid_3d, scaled_3d);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _scaled_3d$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _valid_3d$[ebp]
  00010	51		 push	 ecx
  00011	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  00017	c1 ea 04	 shr	 edx, 4
  0001a	83 e2 01	 and	 edx, 1
  0001d	52		 push	 edx
  0001e	6a 05		 push	 5
  00020	68 00 00 00 00	 push	 OFFSET ?blackhawk_dvo@@3UEO_PARAMS@@A ; blackhawk_dvo
  00025	e8 00 00 00 00	 call	 ?draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z ; draw_2d_eo_display

; 3404 : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?draw_2d_dvo_mfd@@YGXHH@Z ENDP				; draw_2d_dvo_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_3d_dvo_mfd@@YGXW4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_location$ = 8						; size = 4
?draw_3d_dvo_mfd@@YGXW4MFD_LOCATIONS@@@Z PROC		; draw_3d_dvo_mfd, COMDAT

; 3390 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3391 : 	if (!blackhawk_damage.dvo)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  0000e	c1 e8 04	 shr	 eax, 4
  00011	83 e0 01	 and	 eax, 1
  00014	75 10		 jne	 SHORT $LN1@draw_3d_dv

; 3392 : 	{
; 3393 : 		draw_3d_eo_display (&blackhawk_dvo, TARGET_ACQUISITION_SYSTEM_DVO, location);

  00016	8b 45 08	 mov	 eax, DWORD PTR _location$[ebp]
  00019	50		 push	 eax
  0001a	6a 05		 push	 5
  0001c	68 00 00 00 00	 push	 OFFSET ?blackhawk_dvo@@3UEO_PARAMS@@A ; blackhawk_dvo
  00021	e8 00 00 00 00	 call	 ?draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z ; draw_3d_eo_display
$LN1@draw_3d_dv:

; 3394 : 	}
; 3395 : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?draw_3d_dvo_mfd@@YGXW4MFD_LOCATIONS@@@Z ENDP		; draw_3d_dvo_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_2d_dtv_mfd@@YGXHH@Z
_TEXT	SEGMENT
_valid_3d$ = 8						; size = 4
_scaled_3d$ = 12					; size = 4
?draw_2d_dtv_mfd@@YGXHH@Z PROC				; draw_2d_dtv_mfd, COMDAT

; 3375 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3376 : 	draw_2d_eo_display (&blackhawk_dtv, TARGET_ACQUISITION_SYSTEM_DTV, blackhawk_damage.dtv, valid_3d, scaled_3d);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _scaled_3d$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _valid_3d$[ebp]
  00010	51		 push	 ecx
  00011	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  00017	c1 ea 03	 shr	 edx, 3
  0001a	83 e2 01	 and	 edx, 1
  0001d	52		 push	 edx
  0001e	6a 04		 push	 4
  00020	68 00 00 00 00	 push	 OFFSET ?blackhawk_dtv@@3UEO_PARAMS@@A ; blackhawk_dtv
  00025	e8 00 00 00 00	 call	 ?draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z ; draw_2d_eo_display

; 3377 : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?draw_2d_dtv_mfd@@YGXHH@Z ENDP				; draw_2d_dtv_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_3d_dtv_mfd@@YGXW4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_location$ = 8						; size = 4
?draw_3d_dtv_mfd@@YGXW4MFD_LOCATIONS@@@Z PROC		; draw_3d_dtv_mfd, COMDAT

; 3363 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3364 : 	if (!blackhawk_damage.dtv)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  0000e	c1 e8 03	 shr	 eax, 3
  00011	83 e0 01	 and	 eax, 1
  00014	75 10		 jne	 SHORT $LN1@draw_3d_dt

; 3365 : 	{
; 3366 : 		draw_3d_eo_display (&blackhawk_dtv, TARGET_ACQUISITION_SYSTEM_DTV, location);

  00016	8b 45 08	 mov	 eax, DWORD PTR _location$[ebp]
  00019	50		 push	 eax
  0001a	6a 04		 push	 4
  0001c	68 00 00 00 00	 push	 OFFSET ?blackhawk_dtv@@3UEO_PARAMS@@A ; blackhawk_dtv
  00021	e8 00 00 00 00	 call	 ?draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z ; draw_3d_eo_display
$LN1@draw_3d_dt:

; 3367 : 	}
; 3368 : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?draw_3d_dtv_mfd@@YGXW4MFD_LOCATIONS@@@Z ENDP		; draw_3d_dtv_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_2d_flir_mfd@@YGXHH@Z
_TEXT	SEGMENT
_valid_3d$ = 8						; size = 4
_scaled_3d$ = 12					; size = 4
?draw_2d_flir_mfd@@YGXHH@Z PROC				; draw_2d_flir_mfd, COMDAT

; 3348 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3349 : 	draw_2d_eo_display (&blackhawk_flir, TARGET_ACQUISITION_SYSTEM_FLIR, blackhawk_damage.flir, valid_3d, scaled_3d);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _scaled_3d$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _valid_3d$[ebp]
  00010	51		 push	 ecx
  00011	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  00017	c1 ea 02	 shr	 edx, 2
  0001a	83 e2 01	 and	 edx, 1
  0001d	52		 push	 edx
  0001e	6a 03		 push	 3
  00020	68 00 00 00 00	 push	 OFFSET ?blackhawk_flir@@3UEO_PARAMS@@A ; blackhawk_flir
  00025	e8 00 00 00 00	 call	 ?draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z ; draw_2d_eo_display

; 3350 : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?draw_2d_flir_mfd@@YGXHH@Z ENDP				; draw_2d_flir_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_3d_flir_mfd@@YGXW4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_location$ = 8						; size = 4
?draw_3d_flir_mfd@@YGXW4MFD_LOCATIONS@@@Z PROC		; draw_3d_flir_mfd, COMDAT

; 3336 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 3337 : 	if (!blackhawk_damage.flir)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  0000e	c1 e8 02	 shr	 eax, 2
  00011	83 e0 01	 and	 eax, 1
  00014	75 10		 jne	 SHORT $LN1@draw_3d_fl

; 3338 : 	{
; 3339 : 		draw_3d_eo_display (&blackhawk_flir, TARGET_ACQUISITION_SYSTEM_FLIR, location);

  00016	8b 45 08	 mov	 eax, DWORD PTR _location$[ebp]
  00019	50		 push	 eax
  0001a	6a 03		 push	 3
  0001c	68 00 00 00 00	 push	 OFFSET ?blackhawk_flir@@3UEO_PARAMS@@A ; blackhawk_flir
  00021	e8 00 00 00 00	 call	 ?draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z ; draw_3d_eo_display
$LN1@draw_3d_fl:

; 3340 : 	}
; 3341 : }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?draw_3d_flir_mfd@@YGXW4MFD_LOCATIONS@@@Z ENDP		; draw_3d_flir_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z
_TEXT	SEGMENT
tv300 = -384						; size = 4
tv281 = -384						; size = 4
tv156 = -384						; size = 4
tv135 = -384						; size = 4
tv83 = -384						; size = 4
tv779 = -380						; size = 4
tv293 = -380						; size = 4
tv273 = -380						; size = 4
tv210 = -380						; size = 4
tv176 = -380						; size = 4
tv148 = -380						; size = 4
tv95 = -380						; size = 4
tv75 = -380						; size = 4
_visibility$ = -312					; size = 4
_tmp$ = -308						; size = 48
_target_point$ = -260					; size = 12
_target_position$ = -248				; size = 4
_source_position$ = -244				; size = 4
_target$ = -240						; size = 4
_source$ = -236						; size = 4
_y$ = -232						; size = 4
_x$ = -228						; size = 4
_j$ = -224						; size = 4
_i$ = -220						; size = 4
_y_adjust$ = -216					; size = 4
_target_range$ = -212					; size = 4
_width$ = -208						; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
_damaged$ = 16						; size = 4
_valid_3d$ = 20						; size = 4
_scaled_3d$ = 24					; size = 4
?draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z PROC ; draw_2d_eo_display, COMDAT

; 2940 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 01 00
	00		 sub	 esp, 384		; 00000180H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2941 : 	const char
; 2942 : 		*s;
; 2943 : 	char
; 2944 : 		buffer[200];
; 2945 : 
; 2946 : 	float
; 2947 : 		width,
; 2948 : 		target_range,
; 2949 : 		y_adjust,
; 2950 : 		i,
; 2951 : 		j,
; 2952 : 		x,
; 2953 : 		y;
; 2954 : 
; 2955 : 	entity
; 2956 : 		*source,
; 2957 : 		*target;
; 2958 : 
; 2959 : 	vec3d
; 2960 : 		*source_position,
; 2961 : 		*target_position,
; 2962 : 		target_point;
; 2963 : 
; 2964 : 	viewpoint
; 2965 : 		tmp;
; 2966 : 
; 2967 : 	object_3d_visibility
; 2968 : 		visibility;
; 2969 : 
; 2970 : 	ASSERT (eo);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  00010	75 18		 jne	 SHORT $LN6@draw_2d_eo
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z@4JA
  00017	83 c0 1e	 add	 eax, 30			; 0000001eH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@draw_2d_eo:

; 2971 : 
; 2972 : 	source = get_gunship_entity ();

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0002f	89 85 14 ff ff
	ff		 mov	 DWORD PTR _source$[ebp], eax

; 2973 : 
; 2974 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  00035	83 bd 14 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0003c	74 10		 je	 SHORT $LN50@draw_2d_eo
  0003e	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00044	8b 08		 mov	 ecx, DWORD PTR [eax]
  00046	89 8d 84 fe ff
	ff		 mov	 DWORD PTR tv75[ebp], ecx
  0004c	eb 24		 jmp	 SHORT $LN51@draw_2d_eo
$LN50@draw_2d_eo:
  0004e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z@4JA
  00054	83 c2 22	 add	 edx, 34			; 00000022H
  00057	52		 push	 edx
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00068	c7 85 84 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv75[ebp], 0
$LN51@draw_2d_eo:
  00072	b9 01 00 00 00	 mov	 ecx, 1
  00077	85 c9		 test	 ecx, ecx
  00079	74 0c		 je	 SHORT $LN52@draw_2d_eo
  0007b	c7 85 80 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv83[ebp], 8
  00085	eb 24		 jmp	 SHORT $LN53@draw_2d_eo
$LN52@draw_2d_eo:
  00087	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z@4JA
  0008d	83 c2 22	 add	 edx, 34			; 00000022H
  00090	52		 push	 edx
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00096	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a1	c7 85 80 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv83[ebp], 0
$LN53@draw_2d_eo:
  000ab	6a 08		 push	 8
  000ad	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  000b3	51		 push	 ecx
  000b4	6b 95 84 fe ff
	ff 60		 imul	 edx, DWORD PTR tv75[ebp], 96
  000bb	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR tv83[ebp]
  000c1	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000c8	ff d1		 call	 ecx
  000ca	89 85 0c ff ff
	ff		 mov	 DWORD PTR _source_position$[ebp], eax

; 2975 : 
; 2976 : 	target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  000d0	83 bd 14 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  000d7	74 10		 je	 SHORT $LN54@draw_2d_eo
  000d9	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  000df	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e1	89 8d 84 fe ff
	ff		 mov	 DWORD PTR tv95[ebp], ecx
  000e7	eb 24		 jmp	 SHORT $LN55@draw_2d_eo
$LN54@draw_2d_eo:
  000e9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z@4JA
  000ef	83 c2 24	 add	 edx, 36			; 00000024H
  000f2	52		 push	 edx
  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000fd	50		 push	 eax
  000fe	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00103	c7 85 84 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv95[ebp], 0
$LN55@draw_2d_eo:
  0010d	b9 01 00 00 00	 mov	 ecx, 1
  00112	85 c9		 test	 ecx, ecx
  00114	74 0c		 je	 SHORT $LN56@draw_2d_eo
  00116	c7 85 80 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv135[ebp], 38 ; 00000026H
  00120	eb 24		 jmp	 SHORT $LN57@draw_2d_eo
$LN56@draw_2d_eo:
  00122	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z@4JA
  00128	83 c2 24	 add	 edx, 36			; 00000024H
  0012b	52		 push	 edx
  0012c	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00131	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00136	50		 push	 eax
  00137	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0013c	c7 85 80 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv135[ebp], 0
$LN57@draw_2d_eo:
  00146	6a 26		 push	 38			; 00000026H
  00148	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  0014e	51		 push	 ecx
  0014f	69 95 84 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv95[ebp], 180
  00159	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR tv135[ebp]
  0015f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00166	ff d1		 call	 ecx
  00168	89 85 10 ff ff
	ff		 mov	 DWORD PTR _target$[ebp], eax

; 2977 : 
; 2978 : 	if (target)

  0016e	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  00175	0f 84 b4 00 00
	00		 je	 $LN7@draw_2d_eo

; 2979 : 	{
; 2980 : 		target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  0017b	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  00182	74 10		 je	 SHORT $LN58@draw_2d_eo
  00184	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _target$[ebp]
  0018a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0018c	89 8d 84 fe ff
	ff		 mov	 DWORD PTR tv148[ebp], ecx
  00192	eb 24		 jmp	 SHORT $LN59@draw_2d_eo
$LN58@draw_2d_eo:
  00194	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z@4JA
  0019a	83 c2 28	 add	 edx, 40			; 00000028H
  0019d	52		 push	 edx
  0019e	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001a8	50		 push	 eax
  001a9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001ae	c7 85 84 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv148[ebp], 0
$LN59@draw_2d_eo:
  001b8	b9 01 00 00 00	 mov	 ecx, 1
  001bd	85 c9		 test	 ecx, ecx
  001bf	74 0c		 je	 SHORT $LN60@draw_2d_eo
  001c1	c7 85 80 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv156[ebp], 8
  001cb	eb 24		 jmp	 SHORT $LN61@draw_2d_eo
$LN60@draw_2d_eo:
  001cd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z@4JA
  001d3	83 c2 28	 add	 edx, 40			; 00000028H
  001d6	52		 push	 edx
  001d7	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001e1	50		 push	 eax
  001e2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001e7	c7 85 80 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv156[ebp], 0
$LN61@draw_2d_eo:
  001f1	6a 08		 push	 8
  001f3	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _target$[ebp]
  001f9	51		 push	 ecx
  001fa	6b 95 84 fe ff
	ff 60		 imul	 edx, DWORD PTR tv148[ebp], 96
  00201	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR tv156[ebp]
  00207	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0020e	ff d1		 call	 ecx
  00210	89 85 08 ff ff
	ff		 mov	 DWORD PTR _target_position$[ebp], eax

; 2981 : 
; 2982 : 		target_range = get_3d_range (source_position, target_position);

  00216	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _target_position$[ebp]
  0021c	50		 push	 eax
  0021d	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  00223	51		 push	 ecx
  00224	e8 00 00 00 00	 call	 ?get_3d_range@@YGMPBUVEC3D@@0@Z ; get_3d_range
  00229	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _target_range$[ebp]
$LN7@draw_2d_eo:

; 2983 : 	}
; 2984 : 
; 2985 : 	////////////////////////////////////////
; 2986 : 	//
; 2987 : 	// text
; 2988 : 	//
; 2989 : 	////////////////////////////////////////
; 2990 : 
; 2991 : 	set_mono_font_colour (MFD_COLOUR1);

  0022f	b8 04 00 00 00	 mov	 eax, 4
  00234	6b c8 00	 imul	 ecx, eax, 0
  00237	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0023d	52		 push	 edx
  0023e	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 2992 : 
; 2993 : 	if (draw_large_mfd)

  00243	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0024a	74 09		 je	 SHORT $LN8@draw_2d_eo

; 2994 : 	{
; 2995 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  0024c	6a 05		 push	 5
  0024e	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 2996 : 	}
; 2997 : 	else

  00253	eb 07		 jmp	 SHORT $LN9@draw_2d_eo
$LN8@draw_2d_eo:

; 2998 : 	{
; 2999 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  00255	6a 01		 push	 1
  00257	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN9@draw_2d_eo:

; 3000 : 	}
; 3001 : 
; 3002 : 	//
; 3003 : 	// sensor type
; 3004 : 	//
; 3005 : 
; 3006 : 	if (draw_large_mfd)

  0025c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00263	74 12		 je	 SHORT $LN10@draw_2d_eo

; 3007 : 	{
; 3008 : 		y_adjust = 5.0;

  00265	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  0026d	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3009 : 	}
; 3010 : 	else

  00275	eb 10		 jmp	 SHORT $LN11@draw_2d_eo
$LN10@draw_2d_eo:

; 3011 : 	{
; 3012 : 		y_adjust = 2.0;

  00277	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0027f	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN11@draw_2d_eo:

; 3013 : 	}
; 3014 : 
; 3015 : 	set_2d_mono_font_position (-0.8, 1.0);

  00287	51		 push	 ecx
  00288	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00290	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00295	51		 push	 ecx
  00296	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0029e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a3	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3016 : 
; 3017 : 	set_mono_font_rel_position (1.0, y_adjust);

  002a8	51		 push	 ecx
  002a9	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  002b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b6	51		 push	 ecx
  002b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c4	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3018 : 
; 3019 : 	switch (system)

  002c9	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  002cc	89 85 84 fe ff
	ff		 mov	 DWORD PTR tv176[ebp], eax
  002d2	83 bd 84 fe ff
	ff 03		 cmp	 DWORD PTR tv176[ebp], 3
  002d9	74 14		 je	 SHORT $LN12@draw_2d_eo
  002db	83 bd 84 fe ff
	ff 04		 cmp	 DWORD PTR tv176[ebp], 4
  002e2	74 17		 je	 SHORT $LN13@draw_2d_eo
  002e4	83 bd 84 fe ff
	ff 05		 cmp	 DWORD PTR tv176[ebp], 5
  002eb	74 1a		 je	 SHORT $LN14@draw_2d_eo
  002ed	eb 24		 jmp	 SHORT $LN15@draw_2d_eo
$LN12@draw_2d_eo:

; 3020 : 	{
; 3021 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 3022 : 		{
; 3023 : 			print_mono_font_string ("FLIR");

  002ef	68 00 00 00 00	 push	 OFFSET ??_C@_04MIGKMLBH@FLIR@
  002f4	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3024 : 
; 3025 : 			break;

  002f9	eb 22		 jmp	 SHORT $LN2@draw_2d_eo
$LN13@draw_2d_eo:

; 3026 : 		}
; 3027 : 		case TARGET_ACQUISITION_SYSTEM_DTV:
; 3028 : 		{
; 3029 : 			print_mono_font_string ("DTV");

  002fb	68 00 00 00 00	 push	 OFFSET ??_C@_03ENJJJDDH@DTV@
  00300	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3030 : 
; 3031 : 			break;

  00305	eb 16		 jmp	 SHORT $LN2@draw_2d_eo
$LN14@draw_2d_eo:

; 3032 : 		}
; 3033 : 		case TARGET_ACQUISITION_SYSTEM_DVO:
; 3034 : 		{
; 3035 : 			print_mono_font_string ("DVO");

  00307	68 00 00 00 00	 push	 OFFSET ??_C@_03NFBNOOEB@DVO@
  0030c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3036 : 
; 3037 : 			break;

  00311	eb 0a		 jmp	 SHORT $LN2@draw_2d_eo
$LN15@draw_2d_eo:

; 3038 : 		}
; 3039 : 		default:
; 3040 : 		{
; 3041 : 			print_mono_font_string ("XXX");

  00313	68 00 00 00 00	 push	 OFFSET ??_C@_03MAMPKPPK@XXX@
  00318	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN2@draw_2d_eo:

; 3042 : 
; 3043 : 			break;
; 3044 : 		}
; 3045 : 	}
; 3046 : 
; 3047 : 	//
; 3048 : 	// damaged
; 3049 : 	//
; 3050 : 
; 3051 : 	if (damaged)

  0031d	83 7d 10 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00321	0f 84 9d 00 00
	00		 je	 $LN16@draw_2d_eo

; 3052 : 	{
; 3053 : 		draw_2d_line (-0.5, -0.5,  0.5, 0.5, MFD_COLOUR1);

  00327	b8 04 00 00 00	 mov	 eax, 4
  0032c	6b c8 00	 imul	 ecx, eax, 0
  0032f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00335	52		 push	 edx
  00336	51		 push	 ecx
  00337	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0033f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00344	51		 push	 ecx
  00345	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0034d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00352	51		 push	 ecx
  00353	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0035b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00360	51		 push	 ecx
  00361	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00369	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3054 : 		draw_2d_line ( 0.5, -0.5, -0.5, 0.5, MFD_COLOUR1);

  00373	b8 04 00 00 00	 mov	 eax, 4
  00378	6b c8 00	 imul	 ecx, eax, 0
  0037b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00381	52		 push	 edx
  00382	51		 push	 ecx
  00383	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0038b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00390	51		 push	 ecx
  00391	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00399	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039e	51		 push	 ecx
  0039f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  003a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ac	51		 push	 ecx
  003ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  003b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ba	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3055 : 
; 3056 : 		return;

  003bf	e9 f3 0c 00 00	 jmp	 $LN1@draw_2d_eo
$LN16@draw_2d_eo:

; 3057 : 	}
; 3058 : 
; 3059 : 	if (eo_low_light)

  003c4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_low_light@@3HA, 0 ; eo_low_light
  003cb	0f 84 82 00 00
	00		 je	 $LN19@draw_2d_eo

; 3060 : 	{
; 3061 : 		set_2d_mono_font_position (-0.8, 0.9);

  003d1	51		 push	 ecx
  003d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  003da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003df	51		 push	 ecx
  003e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  003e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ed	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3062 : 
; 3063 : 		if (draw_large_mfd)

  003f2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  003f9	74 2d		 je	 SHORT $LN18@draw_2d_eo

; 3064 : 		{
; 3065 : 			set_mono_font_rel_position (1.0, 2.0);

  003fb	51		 push	 ecx
  003fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00404	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00409	51		 push	 ecx
  0040a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00412	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00417	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3066 : 
; 3067 : 			print_mono_font_string ("LO LIGHT");

  0041c	68 00 00 00 00	 push	 OFFSET ??_C@_08JFLECGBM@LO?5LIGHT@
  00421	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3068 : 		}
; 3069 : 		else

  00426	eb 2b		 jmp	 SHORT $LN19@draw_2d_eo
$LN18@draw_2d_eo:

; 3070 : 		{
; 3071 : 			set_mono_font_rel_position (1.0, 2.0);

  00428	51		 push	 ecx
  00429	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00431	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00436	51		 push	 ecx
  00437	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0043f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00444	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3072 : 
; 3073 : 			print_mono_font_string ("LO");

  00449	68 00 00 00 00	 push	 OFFSET ??_C@_02ONPABID@LO@
  0044e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN19@draw_2d_eo:

; 3074 : 		}
; 3075 : 	}
; 3076 : 
; 3077 : 	//
; 3078 : 	// field of view
; 3079 : 	//
; 3080 : 
; 3081 : 	switch (eo->field_of_view)

  00453	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  00456	8b 08		 mov	 ecx, DWORD PTR [eax]
  00458	89 8d 84 fe ff
	ff		 mov	 DWORD PTR tv210[ebp], ecx
  0045e	83 bd 84 fe ff
	ff 01		 cmp	 DWORD PTR tv210[ebp], 1
  00465	74 14		 je	 SHORT $LN20@draw_2d_eo
  00467	83 bd 84 fe ff
	ff 02		 cmp	 DWORD PTR tv210[ebp], 2
  0046e	74 26		 je	 SHORT $LN23@draw_2d_eo
  00470	83 bd 84 fe ff
	ff 03		 cmp	 DWORD PTR tv210[ebp], 3
  00477	74 38		 je	 SHORT $LN26@draw_2d_eo
  00479	eb 3f		 jmp	 SHORT $LN27@draw_2d_eo
$LN20@draw_2d_eo:

; 3082 : 	{
; 3083 : 		case EO_FOV_NARROW:
; 3084 : 		{
; 3085 : 			if (draw_large_mfd)

  0047b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00482	74 09		 je	 SHORT $LN21@draw_2d_eo

; 3086 : 			{
; 3087 : 				s = "NARROW";

  00484	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06BPEIKNIA@NARROW@

; 3088 : 			}
; 3089 : 			else

  0048b	eb 07		 jmp	 SHORT $LN22@draw_2d_eo
$LN21@draw_2d_eo:

; 3090 : 			{
; 3091 : 				s = "NAR";

  0048d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03FMKFNHMM@NAR@
$LN22@draw_2d_eo:

; 3092 : 			}
; 3093 : 
; 3094 : 			break;

  00494	eb 2b		 jmp	 SHORT $LN4@draw_2d_eo
$LN23@draw_2d_eo:

; 3095 : 		}
; 3096 : 		case EO_FOV_MEDIUM:
; 3097 : 		{
; 3098 : 			if (draw_large_mfd)

  00496	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0049d	74 09		 je	 SHORT $LN24@draw_2d_eo

; 3099 : 			{
; 3100 : 				s = "MEDIUM";

  0049f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06HMBFJLMK@MEDIUM@

; 3101 : 			}
; 3102 : 			else

  004a6	eb 07		 jmp	 SHORT $LN25@draw_2d_eo
$LN24@draw_2d_eo:

; 3103 : 			{
; 3104 : 				s = "MED";

  004a8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03FFIBGFCJ@MED@
$LN25@draw_2d_eo:

; 3105 : 			}
; 3106 : 
; 3107 : 			break;

  004af	eb 10		 jmp	 SHORT $LN4@draw_2d_eo
$LN26@draw_2d_eo:

; 3108 : 		}
; 3109 : 		case EO_FOV_WIDE:
; 3110 : 		{
; 3111 : 			s = "WIDE";

  004b1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04KPGPJCNC@WIDE@

; 3112 : 
; 3113 : 			break;

  004b8	eb 07		 jmp	 SHORT $LN4@draw_2d_eo
$LN27@draw_2d_eo:

; 3114 : 		}
; 3115 : 		default:
; 3116 : 		{
; 3117 : 			s = "XXX";

  004ba	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN4@draw_2d_eo:

; 3118 : 
; 3119 : 			break;
; 3120 : 		}
; 3121 : 	}
; 3122 : 
; 3123 : 	width = get_mono_font_string_width (s);

  004c1	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  004c4	50		 push	 eax
  004c5	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  004ca	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 3124 : 
; 3125 : 	if (draw_large_mfd)

  004d0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  004d7	74 12		 je	 SHORT $LN28@draw_2d_eo

; 3126 : 	{
; 3127 : 		y_adjust = 5.0;

  004d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  004e1	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3128 : 	}
; 3129 : 	else

  004e9	eb 10		 jmp	 SHORT $LN29@draw_2d_eo
$LN28@draw_2d_eo:

; 3130 : 	{
; 3131 : 		y_adjust = 2.0;

  004eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  004f3	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN29@draw_2d_eo:

; 3132 : 	}
; 3133 : 
; 3134 : 	set_2d_mono_font_position (0.8, 1.0);

  004fb	51		 push	 ecx
  004fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00504	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00509	51		 push	 ecx
  0050a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00512	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00517	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3135 : 
; 3136 : 	set_mono_font_rel_position (-width, y_adjust);

  0051c	51		 push	 ecx
  0051d	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00525	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0052a	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00532	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00539	51		 push	 ecx
  0053a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3137 : 
; 3138 : 	print_mono_font_string (s);

  00544	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00547	50		 push	 eax
  00548	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3139 : 
; 3140 : 	//
; 3141 : 	// target name
; 3142 : 	//
; 3143 : 
; 3144 : 	if (draw_large_mfd)

  0054d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00554	74 12		 je	 SHORT $LN30@draw_2d_eo

; 3145 : 	{
; 3146 : 		y_adjust = -12.0;

  00556	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  0055e	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3147 : 	}
; 3148 : 	else

  00566	eb 10		 jmp	 SHORT $LN31@draw_2d_eo
$LN30@draw_2d_eo:

; 3149 : 	{
; 3150 : 		y_adjust = -5.0;

  00568	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  00570	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN31@draw_2d_eo:

; 3151 : 	}
; 3152 : 
; 3153 : 	s = get_target_display_name (target, buffer, draw_large_mfd);

  00578	a1 00 00 00 00	 mov	 eax, DWORD PTR ?draw_large_mfd@@3HA
  0057d	50		 push	 eax
  0057e	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00584	51		 push	 ecx
  00585	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _target$[ebp]
  0058b	52		 push	 edx
  0058c	e8 00 00 00 00	 call	 ?get_target_display_name@@YGPBDPAUENTITY@@PADH@Z ; get_target_display_name
  00591	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 3154 : 
; 3155 : 	if (s)

  00594	83 7d fc 00	 cmp	 DWORD PTR _s$[ebp], 0
  00598	74 4b		 je	 SHORT $LN32@draw_2d_eo

; 3156 : 	{
; 3157 : 		set_2d_mono_font_position (-0.8, -1.0);

  0059a	51		 push	 ecx
  0059b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  005a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a8	51		 push	 ecx
  005a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  005b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b6	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3158 : 
; 3159 : 		set_mono_font_rel_position (1.0, y_adjust);

  005bb	51		 push	 ecx
  005bc	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  005c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c9	51		 push	 ecx
  005ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  005d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d7	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3160 : 
; 3161 : 		print_mono_font_string (s);

  005dc	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  005df	50		 push	 eax
  005e0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN32@draw_2d_eo:

; 3162 : 	}
; 3163 : 
; 3164 : 	//
; 3165 : 	// target range
; 3166 : 	//
; 3167 : 
; 3168 : 	if (target)

  005e5	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  005ec	0f 84 d5 00 00
	00		 je	 $LN33@draw_2d_eo

; 3169 : 	{
; 3170 : 		if ((target_range < 1000.0) && (!blackhawk_damage.laser_designator))

  005f2	f3 0f 5a 85 2c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  005fa	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  00602	66 0f 2f c8	 comisd	 xmm1, xmm0
  00606	76 2c		 jbe	 SHORT $LN34@draw_2d_eo
  00608	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  0060d	c1 e8 06	 shr	 eax, 6
  00610	83 e0 01	 and	 eax, 1
  00613	75 1f		 jne	 SHORT $LN34@draw_2d_eo

; 3171 : 		{
; 3172 : 			sprintf (buffer, "%dm", (int) target_range);

  00615	f3 0f 2c 85 2c
	ff ff ff	 cvttss2si eax, DWORD PTR _target_range$[ebp]
  0061d	50		 push	 eax
  0061e	68 00 00 00 00	 push	 OFFSET ??_C@_03NGNKAJPJ@?$CFdm@
  00623	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00629	51		 push	 ecx
  0062a	e8 00 00 00 00	 call	 _sprintf
  0062f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3173 : 		}
; 3174 : 		else

  00632	eb 2c		 jmp	 SHORT $LN35@draw_2d_eo
$LN34@draw_2d_eo:

; 3175 : 		{
; 3176 : 			sprintf (buffer, "%.1fKm", target_range * (1.0 / 1000.0));

  00634	f3 0f 5a 85 2c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  0063c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00644	83 ec 08	 sub	 esp, 8
  00647	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0064c	68 00 00 00 00	 push	 OFFSET ??_C@_06OMCABMNO@?$CF?41fKm@
  00651	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00657	50		 push	 eax
  00658	e8 00 00 00 00	 call	 _sprintf
  0065d	83 c4 10	 add	 esp, 16			; 00000010H
$LN35@draw_2d_eo:

; 3177 : 		}
; 3178 : 
; 3179 : 		width = get_mono_font_string_width (buffer);

  00660	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00666	50		 push	 eax
  00667	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0066c	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 3180 : 
; 3181 : 		set_2d_mono_font_position (0.8, -1.0);

  00672	51		 push	 ecx
  00673	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0067b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00680	51		 push	 ecx
  00681	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00689	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0068e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3182 : 
; 3183 : 		set_mono_font_rel_position (-width, y_adjust);

  00693	51		 push	 ecx
  00694	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0069c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a1	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  006a9	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  006b0	51		 push	 ecx
  006b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b6	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3184 : 
; 3185 : 		print_mono_font_string (buffer);

  006bb	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  006c1	50		 push	 eax
  006c2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN33@draw_2d_eo:

; 3186 : 	}
; 3187 : 
; 3188 : 	//
; 3189 : 	// locked
; 3190 : 	//
; 3191 : 
; 3192 : 	if (eo_is_locked())

  006c7	e8 00 00 00 00	 call	 ?eo_is_locked@@YGHXZ	; eo_is_locked
  006cc	85 c0		 test	 eax, eax
  006ce	74 77		 je	 SHORT $LN36@draw_2d_eo

; 3193 : 	{
; 3194 : 		if (draw_large_mfd)

  006d0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  006d7	74 12		 je	 SHORT $LN37@draw_2d_eo

; 3195 : 		{
; 3196 : 			y_adjust = -25.0;

  006d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  006e1	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3197 : 		}
; 3198 : 		else

  006e9	eb 10		 jmp	 SHORT $LN38@draw_2d_eo
$LN37@draw_2d_eo:

; 3199 : 		{
; 3200 : 			y_adjust = -12.0;

  006eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  006f3	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN38@draw_2d_eo:

; 3201 : 		}
; 3202 : 
; 3203 : 		set_2d_mono_font_position (-0.8, -1.0);

  006fb	51		 push	 ecx
  006fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00704	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00709	51		 push	 ecx
  0070a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00712	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00717	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3204 : 
; 3205 : 		set_mono_font_rel_position (1.0, y_adjust);

  0071c	51		 push	 ecx
  0071d	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00725	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0072a	51		 push	 ecx
  0072b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00733	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00738	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3206 : 
; 3207 : 		print_mono_font_string ("LOCKED");

  0073d	68 00 00 00 00	 push	 OFFSET ??_C@_06KODELPLK@LOCKED@
  00742	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN36@draw_2d_eo:

; 3208 : 	}
; 3209 : // Jabberwock 031107 Designated targets
; 3210 : 	
; 3211 : 	target = get_local_entity_parent (get_gunship_entity (), LIST_TYPE_TARGET);

  00747	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0074e	74 0f		 je	 SHORT $LN62@draw_2d_eo
  00750	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00755	8b 08		 mov	 ecx, DWORD PTR [eax]
  00757	89 8d 84 fe ff
	ff		 mov	 DWORD PTR tv273[ebp], ecx
  0075d	eb 27		 jmp	 SHORT $LN63@draw_2d_eo
$LN62@draw_2d_eo:
  0075f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z@4JA
  00765	81 c2 0f 01 00
	00		 add	 edx, 271		; 0000010fH
  0076b	52		 push	 edx
  0076c	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00771	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00776	50		 push	 eax
  00777	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0077c	c7 85 84 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv273[ebp], 0
$LN63@draw_2d_eo:
  00786	b9 01 00 00 00	 mov	 ecx, 1
  0078b	85 c9		 test	 ecx, ecx
  0078d	74 0c		 je	 SHORT $LN64@draw_2d_eo
  0078f	c7 85 80 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv281[ebp], 38 ; 00000026H
  00799	eb 27		 jmp	 SHORT $LN65@draw_2d_eo
$LN64@draw_2d_eo:
  0079b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z@4JA
  007a1	81 c2 0f 01 00
	00		 add	 edx, 271		; 0000010fH
  007a7	52		 push	 edx
  007a8	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  007ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  007b2	50		 push	 eax
  007b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  007b8	c7 85 80 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv281[ebp], 0
$LN65@draw_2d_eo:
  007c2	6a 26		 push	 38			; 00000026H
  007c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  007ca	51		 push	 ecx
  007cb	69 95 84 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv273[ebp], 180
  007d5	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR tv281[ebp]
  007db	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  007e2	ff d1		 call	 ecx
  007e4	89 85 10 ff ff
	ff		 mov	 DWORD PTR _target$[ebp], eax

; 3212 : 	
; 3213 : 	if (target && get_local_entity_parent (target, LIST_TYPE_DESIGNATED_TARGET))

  007ea	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  007f1	0f 84 36 01 00
	00		 je	 $LN39@draw_2d_eo
  007f7	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  007fe	74 10		 je	 SHORT $LN66@draw_2d_eo
  00800	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _target$[ebp]
  00806	8b 08		 mov	 ecx, DWORD PTR [eax]
  00808	89 8d 84 fe ff
	ff		 mov	 DWORD PTR tv293[ebp], ecx
  0080e	eb 20		 jmp	 SHORT $LN67@draw_2d_eo
$LN66@draw_2d_eo:
  00810	68 8d 0c 00 00	 push	 3213			; 00000c8dH
  00815	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0081a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00820	52		 push	 edx
  00821	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00826	c7 85 84 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv293[ebp], 0
$LN67@draw_2d_eo:
  00830	b8 01 00 00 00	 mov	 eax, 1
  00835	85 c0		 test	 eax, eax
  00837	74 0c		 je	 SHORT $LN68@draw_2d_eo
  00839	c7 85 80 fe ff
	ff 0a 00 00 00	 mov	 DWORD PTR tv300[ebp], 10 ; 0000000aH
  00843	eb 20		 jmp	 SHORT $LN69@draw_2d_eo
$LN68@draw_2d_eo:
  00845	68 8d 0c 00 00	 push	 3213			; 00000c8dH
  0084a	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0084f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00855	51		 push	 ecx
  00856	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0085b	c7 85 80 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv300[ebp], 0
$LN69@draw_2d_eo:
  00865	6a 0a		 push	 10			; 0000000aH
  00867	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _target$[ebp]
  0086d	52		 push	 edx
  0086e	69 85 84 fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv293[ebp], 180
  00878	8b 8d 80 fe ff
	ff		 mov	 ecx, DWORD PTR tv300[ebp]
  0087e	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  00885	ff d2		 call	 edx
  00887	85 c0		 test	 eax, eax
  00889	0f 84 9e 00 00
	00		 je	 $LN39@draw_2d_eo

; 3214 : 	{
; 3215 : 		if (draw_large_mfd)

  0088f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00896	74 12		 je	 SHORT $LN40@draw_2d_eo

; 3216 : 		{
; 3217 : 			y_adjust = -25.0;

  00898	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  008a0	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3218 : 		}
; 3219 : 		else

  008a8	eb 10		 jmp	 SHORT $LN41@draw_2d_eo
$LN40@draw_2d_eo:

; 3220 : 		{
; 3221 : 			y_adjust = -12.0;

  008aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  008b2	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN41@draw_2d_eo:

; 3222 : 		}
; 3223 : 
; 3224 : 		width = get_mono_font_string_width ("MARKED");

  008ba	68 00 00 00 00	 push	 OFFSET ??_C@_06GPMJGLEM@MARKED@
  008bf	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  008c4	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 3225 : 		
; 3226 : 		set_2d_mono_font_position (1.0, -1.0);

  008ca	51		 push	 ecx
  008cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  008d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d8	51		 push	 ecx
  008d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  008e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e6	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3227 : 
; 3228 : 		set_mono_font_rel_position (-width - 1.0, y_adjust);

  008eb	51		 push	 ecx
  008ec	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  008f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f9	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00901	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00908	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0090c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00914	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00918	51		 push	 ecx
  00919	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0091e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3229 : 		
; 3230 : 		print_mono_font_string ("MARKED");		

  00923	68 00 00 00 00	 push	 OFFSET ??_C@_06GPMJGLEM@MARKED@
  00928	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN39@draw_2d_eo:

; 3231 : 	}
; 3232 : // Jabberwock 031107 ends
; 3233 : 
; 3234 : 	////////////////////////////////////////
; 3235 : 	//
; 3236 : 	// draw heading scale
; 3237 : 	//
; 3238 : 	////////////////////////////////////////
; 3239 : 
; 3240 : 	draw_heading_scale (get_heading_from_attitude_matrix (eo_vp.attitude));

  0092d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00932	d1 e0		 shl	 eax, 1
  00934	b9 04 00 00 00	 mov	 ecx, 4
  00939	d1 e1		 shl	 ecx, 1
  0093b	51		 push	 ecx
  0093c	f3 0f 10 84 08
	0c 00 00 00	 movss	 xmm0, DWORD PTR ?eo_vp@@3UVIEWPOINT@@A[eax+ecx+12]
  00945	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0094a	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0094f	d1 e2		 shl	 edx, 1
  00951	b8 04 00 00 00	 mov	 eax, 4
  00956	6b c8 00	 imul	 ecx, eax, 0
  00959	51		 push	 ecx
  0095a	f3 0f 10 84 0a
	0c 00 00 00	 movss	 xmm0, DWORD PTR ?eo_vp@@3UVIEWPOINT@@A[edx+ecx+12]
  00963	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00968	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  0096d	d9 9d 84 fe ff
	ff		 fstp	 DWORD PTR tv779[ebp]
  00973	f3 0f 10 85 84
	fe ff ff	 movss	 xmm0, DWORD PTR tv779[ebp]
  0097b	51		 push	 ecx
  0097c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00981	e8 00 00 00 00	 call	 ?draw_heading_scale@@YGXM@Z ; draw_heading_scale

; 3241 : 
; 3242 : 	////////////////////////////////////////
; 3243 : 	//
; 3244 : 	// draw field of regard and view boxes
; 3245 : 	//
; 3246 : 	////////////////////////////////////////
; 3247 : 
; 3248 : 	draw_field_of_regard_and_view_boxes ();

  00986	e8 00 00 00 00	 call	 ?draw_field_of_regard_and_view_boxes@@YGXXZ ; draw_field_of_regard_and_view_boxes

; 3249 : 
; 3250 : 	////////////////////////////////////////
; 3251 : 	//
; 3252 : 	// line graphics
; 3253 : 	//
; 3254 : 	////////////////////////////////////////
; 3255 : 
; 3256 : 	//
; 3257 : 	// datum
; 3258 : 	//
; 3259 : 
; 3260 : 	if (draw_large_mfd)

  0098b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00992	0f 84 0d 01 00
	00		 je	 $LN42@draw_2d_eo

; 3261 : 	{
; 3262 : 		draw_2d_line (-0.075, 0.0, -0.025, 0.0, MFD_COLOUR1);

  00998	b8 04 00 00 00	 mov	 eax, 4
  0099d	6b c8 00	 imul	 ecx, eax, 0
  009a0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009a6	52		 push	 edx
  009a7	51		 push	 ecx
  009a8	0f 57 c0	 xorps	 xmm0, xmm0
  009ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b0	51		 push	 ecx
  009b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  009b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009be	51		 push	 ecx
  009bf	0f 57 c0	 xorps	 xmm0, xmm0
  009c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009c7	51		 push	 ecx
  009c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  009d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009d5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3263 : 
; 3264 : 		draw_2d_line (0.035, 0.0, 0.08, 0.0, MFD_COLOUR1);

  009da	b8 04 00 00 00	 mov	 eax, 4
  009df	6b c8 00	 imul	 ecx, eax, 0
  009e2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009e8	52		 push	 edx
  009e9	51		 push	 ecx
  009ea	0f 57 c0	 xorps	 xmm0, xmm0
  009ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009f2	51		 push	 ecx
  009f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  009fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a00	51		 push	 ecx
  00a01	0f 57 c0	 xorps	 xmm0, xmm0
  00a04	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a09	51		 push	 ecx
  00a0a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00a12	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a17	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3265 : 
; 3266 : 		draw_2d_line (0.0, -0.075, 0.0, -0.025, MFD_COLOUR1);

  00a1c	b8 04 00 00 00	 mov	 eax, 4
  00a21	6b c8 00	 imul	 ecx, eax, 0
  00a24	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a2a	52		 push	 edx
  00a2b	51		 push	 ecx
  00a2c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  00a34	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a39	51		 push	 ecx
  00a3a	0f 57 c0	 xorps	 xmm0, xmm0
  00a3d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a42	51		 push	 ecx
  00a43	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00a4b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a50	51		 push	 ecx
  00a51	0f 57 c0	 xorps	 xmm0, xmm0
  00a54	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a59	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3267 : 
; 3268 : 		draw_2d_line (0.0, 0.035, 0.0, 0.08, MFD_COLOUR1);

  00a5e	b8 04 00 00 00	 mov	 eax, 4
  00a63	6b c8 00	 imul	 ecx, eax, 0
  00a66	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a6c	52		 push	 edx
  00a6d	51		 push	 ecx
  00a6e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  00a76	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a7b	51		 push	 ecx
  00a7c	0f 57 c0	 xorps	 xmm0, xmm0
  00a7f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a84	51		 push	 ecx
  00a85	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00a8d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a92	51		 push	 ecx
  00a93	0f 57 c0	 xorps	 xmm0, xmm0
  00a96	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a9b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3269 : 	}
; 3270 : 	else

  00aa0	e9 08 01 00 00	 jmp	 $LN43@draw_2d_eo
$LN42@draw_2d_eo:

; 3271 : 	{
; 3272 : 		draw_2d_line (-0.075, 0.0, -0.025, 0.0, MFD_COLOUR1);

  00aa5	b8 04 00 00 00	 mov	 eax, 4
  00aaa	6b c8 00	 imul	 ecx, eax, 0
  00aad	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ab3	52		 push	 edx
  00ab4	51		 push	 ecx
  00ab5	0f 57 c0	 xorps	 xmm0, xmm0
  00ab8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00abd	51		 push	 ecx
  00abe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  00ac6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00acb	51		 push	 ecx
  00acc	0f 57 c0	 xorps	 xmm0, xmm0
  00acf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ad4	51		 push	 ecx
  00ad5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00add	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ae2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3273 : 
; 3274 : 		draw_2d_line (0.035, 0.0, 0.09, 0.0, MFD_COLOUR1);

  00ae7	b8 04 00 00 00	 mov	 eax, 4
  00aec	6b c8 00	 imul	 ecx, eax, 0
  00aef	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00af5	52		 push	 edx
  00af6	51		 push	 ecx
  00af7	0f 57 c0	 xorps	 xmm0, xmm0
  00afa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aff	51		 push	 ecx
  00b00	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3db851ec
  00b08	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b0d	51		 push	 ecx
  00b0e	0f 57 c0	 xorps	 xmm0, xmm0
  00b11	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b16	51		 push	 ecx
  00b17	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00b1f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b24	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3275 : 
; 3276 : 		draw_2d_line (0.0, -0.075, 0.0, -0.025, MFD_COLOUR1);

  00b29	b8 04 00 00 00	 mov	 eax, 4
  00b2e	6b c8 00	 imul	 ecx, eax, 0
  00b31	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b37	52		 push	 edx
  00b38	51		 push	 ecx
  00b39	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  00b41	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b46	51		 push	 ecx
  00b47	0f 57 c0	 xorps	 xmm0, xmm0
  00b4a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b4f	51		 push	 ecx
  00b50	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00b58	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b5d	51		 push	 ecx
  00b5e	0f 57 c0	 xorps	 xmm0, xmm0
  00b61	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b66	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3277 : 
; 3278 : 		draw_2d_line (0.0, 0.035, 0.0, 0.09, MFD_COLOUR1);

  00b6b	b8 04 00 00 00	 mov	 eax, 4
  00b70	6b c8 00	 imul	 ecx, eax, 0
  00b73	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b79	52		 push	 edx
  00b7a	51		 push	 ecx
  00b7b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3db851ec
  00b83	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b88	51		 push	 ecx
  00b89	0f 57 c0	 xorps	 xmm0, xmm0
  00b8c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b91	51		 push	 ecx
  00b92	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00b9a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b9f	51		 push	 ecx
  00ba0	0f 57 c0	 xorps	 xmm0, xmm0
  00ba3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ba8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN43@draw_2d_eo:

; 3279 : 	}
; 3280 : 
; 3281 : 	//
; 3282 : 	// target gates
; 3283 : 	//
; 3284 : 
; 3285 : 	if (target)

  00bad	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  00bb4	0f 84 fd 04 00
	00		 je	 $LN45@draw_2d_eo

; 3286 : 	{
; 3287 : 		if (valid_3d)

  00bba	83 7d 14 00	 cmp	 DWORD PTR _valid_3d$[ebp], 0
  00bbe	0f 84 f3 04 00
	00		 je	 $LN45@draw_2d_eo

; 3288 : 		{
; 3289 : 			tmp = main_vp;

  00bc4	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00bc9	be 00 00 00 00	 mov	 esi, OFFSET ?main_vp@@3UVIEWPOINT@@A ; main_vp
  00bce	8d bd cc fe ff
	ff		 lea	 edi, DWORD PTR _tmp$[ebp]
  00bd4	f3 a5		 rep movsd

; 3290 : 
; 3291 : 			main_vp = eo_vp;

  00bd6	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00bdb	be 00 00 00 00	 mov	 esi, OFFSET ?eo_vp@@3UVIEWPOINT@@A ; eo_vp
  00be0	bf 00 00 00 00	 mov	 edi, OFFSET ?main_vp@@3UVIEWPOINT@@A ; main_vp
  00be5	f3 a5		 rep movsd

; 3292 : 
; 3293 : 			get_local_entity_target_point (target, &target_point);

  00be7	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _target_point$[ebp]
  00bed	50		 push	 eax
  00bee	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _target$[ebp]
  00bf4	51		 push	 ecx
  00bf5	e8 00 00 00 00	 call	 ?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_local_entity_target_point

; 3294 : 
; 3295 : 			visibility = get_position_3d_screen_coordinates (&target_point, &i, &j);

  00bfa	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR _j$[ebp]
  00c00	50		 push	 eax
  00c01	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _i$[ebp]
  00c07	51		 push	 ecx
  00c08	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _target_point$[ebp]
  00c0e	52		 push	 edx
  00c0f	e8 00 00 00 00	 call	 ?get_position_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUVEC3D@@PAM1@Z ; get_position_3d_screen_coordinates
  00c14	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _visibility$[ebp], eax

; 3296 : 
; 3297 : 			if ((visibility == OBJECT_3D_COMPLETELY_VISIBLE) || (visibility == OBJECT_3D_PARTIALLY_VISIBLE))

  00c1a	83 bd c8 fe ff
	ff 01		 cmp	 DWORD PTR _visibility$[ebp], 1
  00c21	74 0d		 je	 SHORT $LN47@draw_2d_eo
  00c23	83 bd c8 fe ff
	ff 02		 cmp	 DWORD PTR _visibility$[ebp], 2
  00c2a	0f 85 75 04 00
	00		 jne	 $LN46@draw_2d_eo
$LN47@draw_2d_eo:

; 3298 : 			{
; 3299 : 				if (scaled_3d)

  00c30	83 7d 18 00	 cmp	 DWORD PTR _scaled_3d$[ebp], 0
  00c34	74 60		 je	 SHORT $LN48@draw_2d_eo

; 3300 : 				{
; 3301 : 					i -= i_translate_3d;

  00c36	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _i$[ebp]
  00c3e	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?i_translate_3d@@3MA
  00c46	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _i$[ebp], xmm0

; 3302 : 					j -= j_translate_3d;

  00c4e	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _j$[ebp]
  00c56	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?j_translate_3d@@3MA
  00c5e	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _j$[ebp], xmm0

; 3303 : 
; 3304 : 					i *= i_scale_3d;

  00c66	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _i$[ebp]
  00c6e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?i_scale_3d@@3MA
  00c76	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _i$[ebp], xmm0

; 3305 : 					j *= j_scale_3d;

  00c7e	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _j$[ebp]
  00c86	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?j_scale_3d@@3MA
  00c8e	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _j$[ebp], xmm0
$LN48@draw_2d_eo:

; 3306 : 				}
; 3307 : 
; 3308 : 				get_2d_world_position (i, j, &x, &y);

  00c96	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _y$[ebp]
  00c9c	50		 push	 eax
  00c9d	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR _x$[ebp]
  00ca3	51		 push	 ecx
  00ca4	51		 push	 ecx
  00ca5	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _j$[ebp]
  00cad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cb2	51		 push	 ecx
  00cb3	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _i$[ebp]
  00cbb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cc0	e8 00 00 00 00	 call	 ?get_2d_world_position@@YGXMMPAM0@Z ; get_2d_world_position

; 3309 : 
; 3310 : 				draw_2d_line (x - 0.20, y + 0.20, x - 0.15, y + 0.20, MFD_COLOUR1);

  00cc5	b8 04 00 00 00	 mov	 eax, 4
  00cca	6b c8 00	 imul	 ecx, eax, 0
  00ccd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00cd3	52		 push	 edx
  00cd4	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00cdc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00ce4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ce8	51		 push	 ecx
  00ce9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cee	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00cf6	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  00cfe	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00d02	51		 push	 ecx
  00d03	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d08	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00d10	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00d18	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00d1c	51		 push	 ecx
  00d1d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d22	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00d2a	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00d32	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00d36	51		 push	 ecx
  00d37	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d3c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3311 : 				draw_2d_line (x + 0.20, y + 0.20, x + 0.15, y + 0.20, MFD_COLOUR1);

  00d41	b8 04 00 00 00	 mov	 eax, 4
  00d46	6b c8 00	 imul	 ecx, eax, 0
  00d49	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00d4f	52		 push	 edx
  00d50	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00d58	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00d60	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00d64	51		 push	 ecx
  00d65	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d6a	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00d72	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  00d7a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00d7e	51		 push	 ecx
  00d7f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d84	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00d8c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00d94	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00d98	51		 push	 ecx
  00d99	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d9e	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00da6	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00dae	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00db2	51		 push	 ecx
  00db3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00db8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3312 : 				draw_2d_line (x - 0.20, y - 0.20, x - 0.15, y - 0.20, MFD_COLOUR1);

  00dbd	b8 04 00 00 00	 mov	 eax, 4
  00dc2	6b c8 00	 imul	 ecx, eax, 0
  00dc5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00dcb	52		 push	 edx
  00dcc	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00dd4	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00ddc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00de0	51		 push	 ecx
  00de1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00de6	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00dee	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  00df6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00dfa	51		 push	 ecx
  00dfb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e00	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00e08	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00e10	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00e14	51		 push	 ecx
  00e15	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e1a	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00e22	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00e2a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00e2e	51		 push	 ecx
  00e2f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e34	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3313 : 				draw_2d_line (x + 0.20, y - 0.20, x + 0.15, y - 0.20, MFD_COLOUR1);

  00e39	b8 04 00 00 00	 mov	 eax, 4
  00e3e	6b c8 00	 imul	 ecx, eax, 0
  00e41	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e47	52		 push	 edx
  00e48	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00e50	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00e58	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00e5c	51		 push	 ecx
  00e5d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e62	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00e6a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  00e72	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00e76	51		 push	 ecx
  00e77	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e7c	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00e84	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00e8c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00e90	51		 push	 ecx
  00e91	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e96	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00e9e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00ea6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00eaa	51		 push	 ecx
  00eab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eb0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3314 : 				draw_2d_line (x - 0.20, y + 0.20, x - 0.20, y + 0.15, MFD_COLOUR1);

  00eb5	b8 04 00 00 00	 mov	 eax, 4
  00eba	6b c8 00	 imul	 ecx, eax, 0
  00ebd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ec3	52		 push	 edx
  00ec4	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00ecc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  00ed4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ed8	51		 push	 ecx
  00ed9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ede	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00ee6	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00eee	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ef2	51		 push	 ecx
  00ef3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ef8	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00f00	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00f08	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00f0c	51		 push	 ecx
  00f0d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f12	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00f1a	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00f22	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00f26	51		 push	 ecx
  00f27	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f2c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3315 : 				draw_2d_line (x - 0.20, y - 0.20, x - 0.20, y - 0.15, MFD_COLOUR1);

  00f31	b8 04 00 00 00	 mov	 eax, 4
  00f36	6b c8 00	 imul	 ecx, eax, 0
  00f39	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f3f	52		 push	 edx
  00f40	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00f48	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  00f50	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00f54	51		 push	 ecx
  00f55	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f5a	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00f62	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00f6a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00f6e	51		 push	 ecx
  00f6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f74	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00f7c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00f84	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00f88	51		 push	 ecx
  00f89	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f8e	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00f96	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00f9e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00fa2	51		 push	 ecx
  00fa3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fa8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3316 : 				draw_2d_line (x + 0.20, y + 0.20, x + 0.20, y + 0.15, MFD_COLOUR1);

  00fad	b8 04 00 00 00	 mov	 eax, 4
  00fb2	6b c8 00	 imul	 ecx, eax, 0
  00fb5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00fbb	52		 push	 edx
  00fbc	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00fc4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  00fcc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00fd0	51		 push	 ecx
  00fd1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fd6	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00fde	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00fe6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00fea	51		 push	 ecx
  00feb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ff0	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00ff8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01000	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01004	51		 push	 ecx
  01005	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0100a	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01012	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0101a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0101e	51		 push	 ecx
  0101f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01024	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3317 : 				draw_2d_line (x + 0.20, y - 0.20, x + 0.20, y - 0.15, MFD_COLOUR1);

  01029	b8 04 00 00 00	 mov	 eax, 4
  0102e	6b c8 00	 imul	 ecx, eax, 0
  01031	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01037	52		 push	 edx
  01038	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01040	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01048	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0104c	51		 push	 ecx
  0104d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01052	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0105a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01062	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01066	51		 push	 ecx
  01067	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0106c	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01074	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0107c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01080	51		 push	 ecx
  01081	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01086	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0108e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01096	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0109a	51		 push	 ecx
  0109b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010a0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN46@draw_2d_eo:

; 3318 : 			}
; 3319 : 
; 3320 : 			main_vp = tmp;

  010a5	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  010aa	8d b5 cc fe ff
	ff		 lea	 esi, DWORD PTR _tmp$[ebp]
  010b0	bf 00 00 00 00	 mov	 edi, OFFSET ?main_vp@@3UVIEWPOINT@@A ; main_vp
  010b5	f3 a5		 rep movsd
$LN45@draw_2d_eo:
$LN1@draw_2d_eo:

; 3321 : 		}
; 3322 : 	}
; 3323 : }

  010b7	5f		 pop	 edi
  010b8	5e		 pop	 esi
  010b9	5b		 pop	 ebx
  010ba	8b e5		 mov	 esp, ebp
  010bc	5d		 pop	 ebp
  010bd	c2 14 00	 ret	 20			; 00000014H
?draw_2d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@HHH@Z ENDP ; draw_2d_eo_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z
_TEXT	SEGMENT
tv151 = -96						; size = 4
tv91 = -96						; size = 4
tv163 = -92						; size = 4
tv143 = -92						; size = 4
tv83 = -92						; size = 4
tv70 = -92						; size = 4
_day_segment_type$ = -24				; size = 4
_weather_mode$ = -20					; size = 4
_position$ = -16					; size = 4
_noise_level$ = -12					; size = 4
_light_level$ = -8					; size = 4
_zoom$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_size$ = 24						; size = 4
?draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z PROC ; draw_overlaid_3d_eo_display, COMDAT

; 2833 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2834 : 	float
; 2835 : 		zoom;
; 2836 : 
; 2837 : 	display_3d_light_levels
; 2838 : 		light_level;
; 2839 : 
; 2840 : 	display_3d_noise_levels
; 2841 : 		noise_level;
; 2842 : 
; 2843 : 	vec3d
; 2844 : 		*position;
; 2845 : 
; 2846 : 	weathermodes
; 2847 : 		weather_mode;
; 2848 : 
; 2849 : 	day_segment_types
; 2850 : 		day_segment_type;
; 2851 : 
; 2852 : 	ASSERT (eo);

  00009	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN6@draw_overl
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
  00014	83 c0 13	 add	 eax, 19			; 00000013H
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@draw_overl:

; 2853 : 
; 2854 : 	switch (eo->field_of_view)

  00027	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  0002a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002c	89 4d a4	 mov	 DWORD PTR tv70[ebp], ecx
  0002f	83 7d a4 01	 cmp	 DWORD PTR tv70[ebp], 1
  00033	74 0e		 je	 SHORT $LN7@draw_overl
  00035	83 7d a4 02	 cmp	 DWORD PTR tv70[ebp], 2
  00039	74 17		 je	 SHORT $LN8@draw_overl
  0003b	83 7d a4 03	 cmp	 DWORD PTR tv70[ebp], 3
  0003f	74 20		 je	 SHORT $LN9@draw_overl
  00041	eb 2d		 jmp	 SHORT $LN10@draw_overl
$LN7@draw_overl:

; 2855 : 	{
; 2856 : 		case EO_FOV_NARROW:
; 2857 : 		{
; 2858 : 			zoom = 1.0 / 128.0;

  00043	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c000000
  0004b	f3 0f 11 45 fc	 movss	 DWORD PTR _zoom$[ebp], xmm0

; 2859 : 
; 2860 : 			break;

  00050	eb 31		 jmp	 SHORT $LN2@draw_overl
$LN8@draw_overl:

; 2861 : 		}
; 2862 : 		case EO_FOV_MEDIUM:
; 2863 : 		{
; 2864 : 			zoom = 1.0 / 8.0;

  00052	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  0005a	f3 0f 11 45 fc	 movss	 DWORD PTR _zoom$[ebp], xmm0

; 2865 : 
; 2866 : 			break;

  0005f	eb 22		 jmp	 SHORT $LN2@draw_overl
$LN9@draw_overl:

; 2867 : 		}
; 2868 : 		case EO_FOV_WIDE:
; 2869 : 		{
; 2870 : 			zoom = 1.0;

  00061	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00069	f3 0f 11 45 fc	 movss	 DWORD PTR _zoom$[ebp], xmm0

; 2871 : 
; 2872 : 			break;

  0006e	eb 13		 jmp	 SHORT $LN2@draw_overl
$LN10@draw_overl:

; 2873 : 		}
; 2874 : 		default:
; 2875 : 		{
; 2876 : 			debug_fatal ("Invalid field of view = %d", eo->field_of_view);

  00070	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  00073	8b 08		 mov	 ecx, DWORD PTR [eax]
  00075	51		 push	 ecx
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@MNOBOANG@Invalid?5field?5of?5view?5?$DN?5?$CFd@
  0007b	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00080	83 c4 08	 add	 esp, 8
$LN2@draw_overl:

; 2877 : 
; 2878 : 			break;
; 2879 : 		}
; 2880 : 	}
; 2881 : 
; 2882 : 	position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  00083	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0008a	74 0c		 je	 SHORT $LN20@draw_overl
  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00091	8b 08		 mov	 ecx, DWORD PTR [eax]
  00093	89 4d a4	 mov	 DWORD PTR tv83[ebp], ecx
  00096	eb 21		 jmp	 SHORT $LN21@draw_overl
$LN20@draw_overl:
  00098	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
  0009e	83 c2 31	 add	 edx, 49			; 00000031H
  000a1	52		 push	 edx
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b2	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN21@draw_overl:
  000b9	b9 01 00 00 00	 mov	 ecx, 1
  000be	85 c9		 test	 ecx, ecx
  000c0	74 09		 je	 SHORT $LN22@draw_overl
  000c2	c7 45 a0 08 00
	00 00		 mov	 DWORD PTR tv91[ebp], 8
  000c9	eb 21		 jmp	 SHORT $LN23@draw_overl
$LN22@draw_overl:
  000cb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
  000d1	83 c2 31	 add	 edx, 49			; 00000031H
  000d4	52		 push	 edx
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000e5	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv91[ebp], 0
$LN23@draw_overl:
  000ec	6a 08		 push	 8
  000ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000f4	51		 push	 ecx
  000f5	6b 55 a4 60	 imul	 edx, DWORD PTR tv83[ebp], 96
  000f9	8b 45 a0	 mov	 eax, DWORD PTR tv91[ebp]
  000fc	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00103	ff d1		 call	 ecx
  00105	89 45 f0	 mov	 DWORD PTR _position$[ebp], eax

; 2883 : 
; 2884 : 	weather_mode = get_simple_session_weather_at_point (position);

  00108	8b 45 f0	 mov	 eax, DWORD PTR _position$[ebp]
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z ; get_simple_session_weather_at_point
  00111	89 45 ec	 mov	 DWORD PTR _weather_mode$[ebp], eax

; 2885 : 
; 2886 : 	ASSERT ((weather_mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LAST));

  00114	83 7d ec 00	 cmp	 DWORD PTR _weather_mode$[ebp], 0
  00118	7e 06		 jle	 SHORT $LN12@draw_overl
  0011a	83 7d ec 05	 cmp	 DWORD PTR _weather_mode$[ebp], 5
  0011e	7c 18		 jl	 SHORT $LN11@draw_overl
$LN12@draw_overl:
  00120	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
  00125	83 c0 35	 add	 eax, 53			; 00000035H
  00128	50		 push	 eax
  00129	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0012e	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
  00133	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN11@draw_overl:

; 2887 : 
; 2888 : 	day_segment_type = (day_segment_types) get_local_entity_int_value (get_session_entity (), INT_TYPE_DAY_SEGMENT_TYPE);

  00138	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  0013f	74 0c		 je	 SHORT $LN24@draw_overl
  00141	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  00146	8b 08		 mov	 ecx, DWORD PTR [eax]
  00148	89 4d a4	 mov	 DWORD PTR tv143[ebp], ecx
  0014b	eb 21		 jmp	 SHORT $LN25@draw_overl
$LN24@draw_overl:
  0014d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
  00153	83 c2 37	 add	 edx, 55			; 00000037H
  00156	52		 push	 edx
  00157	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0015c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00161	50		 push	 eax
  00162	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00167	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv143[ebp], 0
$LN25@draw_overl:
  0016e	b9 01 00 00 00	 mov	 ecx, 1
  00173	85 c9		 test	 ecx, ecx
  00175	74 09		 je	 SHORT $LN26@draw_overl
  00177	c7 45 a0 27 00
	00 00		 mov	 DWORD PTR tv151[ebp], 39 ; 00000027H
  0017e	eb 21		 jmp	 SHORT $LN27@draw_overl
$LN26@draw_overl:
  00180	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
  00186	83 c2 37	 add	 edx, 55			; 00000037H
  00189	52		 push	 edx
  0018a	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0018f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00194	50		 push	 eax
  00195	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0019a	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv151[ebp], 0
$LN27@draw_overl:
  001a1	6a 27		 push	 39			; 00000027H
  001a3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  001a9	51		 push	 ecx
  001aa	69 55 a4 5c 04
	00 00		 imul	 edx, DWORD PTR tv143[ebp], 1116
  001b1	8b 45 a0	 mov	 eax, DWORD PTR tv151[ebp]
  001b4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  001bb	ff d1		 call	 ecx
  001bd	89 45 e8	 mov	 DWORD PTR _day_segment_type$[ebp], eax

; 2889 : 
; 2890 : 	ASSERT ((day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT_TYPES));

  001c0	83 7d e8 00	 cmp	 DWORD PTR _day_segment_type$[ebp], 0
  001c4	7c 06		 jl	 SHORT $LN14@draw_overl
  001c6	83 7d e8 04	 cmp	 DWORD PTR _day_segment_type$[ebp], 4
  001ca	7c 18		 jl	 SHORT $LN13@draw_overl
$LN14@draw_overl:
  001cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z@4JA
  001d1	83 c0 39	 add	 eax, 57			; 00000039H
  001d4	50		 push	 eax
  001d5	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001da	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
  001df	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN13@draw_overl:

; 2891 : 
; 2892 : 	switch (system)

  001e4	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  001e7	89 45 a4	 mov	 DWORD PTR tv163[ebp], eax
  001ea	83 7d a4 03	 cmp	 DWORD PTR tv163[ebp], 3
  001ee	74 0e		 je	 SHORT $LN15@draw_overl
  001f0	83 7d a4 04	 cmp	 DWORD PTR tv163[ebp], 4
  001f4	74 30		 je	 SHORT $LN16@draw_overl
  001f6	83 7d a4 05	 cmp	 DWORD PTR tv163[ebp], 5
  001fa	74 52		 je	 SHORT $LN17@draw_overl
  001fc	eb 78		 jmp	 SHORT $LN18@draw_overl
$LN15@draw_overl:

; 2893 : 	{
; 2894 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 2895 : 		{
; 2896 : 			light_level = flir_light_levels[weather_mode][day_segment_type];

  001fe	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00201	c1 e0 04	 shl	 eax, 4
  00204	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00207	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  0020e	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 2897 : 
; 2898 : 			noise_level = flir_noise_levels[weather_mode][day_segment_type];

  00211	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00214	c1 e0 04	 shl	 eax, 4
  00217	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  0021a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  00221	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 2899 : 
; 2900 : 			break;

  00224	eb 61		 jmp	 SHORT $LN4@draw_overl
$LN16@draw_overl:

; 2901 : 		}
; 2902 : 		case TARGET_ACQUISITION_SYSTEM_DTV:
; 2903 : 		{
; 2904 : 			light_level = dtv_light_levels[weather_mode][day_segment_type];

  00226	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00229	c1 e0 04	 shl	 eax, 4
  0022c	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  0022f	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  00236	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 2905 : 
; 2906 : 			noise_level = dtv_noise_levels[weather_mode][day_segment_type];

  00239	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0023c	c1 e0 04	 shl	 eax, 4
  0023f	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00242	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  00249	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 2907 : 
; 2908 : 			break;

  0024c	eb 39		 jmp	 SHORT $LN4@draw_overl
$LN17@draw_overl:

; 2909 : 		}
; 2910 : 		case TARGET_ACQUISITION_SYSTEM_DVO:
; 2911 : 		{
; 2912 : 			light_level = dvo_light_levels[weather_mode][day_segment_type];

  0024e	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00251	c1 e0 04	 shl	 eax, 4
  00254	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00257	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dvo_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  0025e	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 2913 : 
; 2914 : 			noise_level = dvo_noise_levels[weather_mode][day_segment_type];

  00261	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00264	c1 e0 04	 shl	 eax, 4
  00267	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  0026a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dvo_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  00271	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 2915 : 
; 2916 : 			break;

  00274	eb 11		 jmp	 SHORT $LN4@draw_overl
$LN18@draw_overl:

; 2917 : 		}
; 2918 : 		default:
; 2919 : 		{
; 2920 : 			debug_fatal ("Invalid target acquisition system = %d", system);

  00276	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  00279	50		 push	 eax
  0027a	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
  0027f	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00284	83 c4 08	 add	 esp, 8
$LN4@draw_overl:

; 2921 : 
; 2922 : 			break;
; 2923 : 		}
; 2924 : 	}
; 2925 : 
; 2926 : 	set_main_3d_params (DISPLAY_3D_TINT_GREEN, light_level, noise_level, x, y, size, size, rad (59.99) * zoom, rad (59.99) * zoom);

  00287	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  0028c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  00294	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00298	51		 push	 ecx
  00299	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029e	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  002a3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  002ab	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002af	51		 push	 ecx
  002b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b5	51		 push	 ecx
  002b6	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _size$[ebp]
  002bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c0	51		 push	 ecx
  002c1	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _size$[ebp]
  002c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002cb	51		 push	 ecx
  002cc	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y$[ebp]
  002d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d6	51		 push	 ecx
  002d7	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x$[ebp]
  002dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e1	8b 45 f4	 mov	 eax, DWORD PTR _noise_level$[ebp]
  002e4	50		 push	 eax
  002e5	8b 4d f8	 mov	 ecx, DWORD PTR _light_level$[ebp]
  002e8	51		 push	 ecx
  002e9	6a 03		 push	 3
  002eb	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params

; 2927 : 
; 2928 : 	draw_eo_3d_scene = TRUE;

  002f0	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 1 ; draw_eo_3d_scene

; 2929 : 
; 2930 : 	draw_main_3d_scene (&eo_vp);

  002fa	68 00 00 00 00	 push	 OFFSET ?eo_vp@@3UVIEWPOINT@@A ; eo_vp
  002ff	e8 00 00 00 00	 call	 ?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z ; draw_main_3d_scene

; 2931 : 
; 2932 : 	draw_eo_3d_scene = FALSE;

  00304	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 0 ; draw_eo_3d_scene

; 2933 : }

  0030e	5f		 pop	 edi
  0030f	5e		 pop	 esi
  00310	5b		 pop	 ebx
  00311	8b e5		 mov	 esp, ebp
  00313	5d		 pop	 ebp
  00314	c2 14 00	 ret	 20			; 00000014H
?draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z ENDP ; draw_overlaid_3d_eo_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z
_TEXT	SEGMENT
tv161 = -100						; size = 4
tv133 = -100						; size = 4
tv173 = -96						; size = 4
tv153 = -96						; size = 4
tv93 = -96						; size = 4
tv80 = -96						; size = 4
_tint$ = -28						; size = 4
_day_segment_type$ = -24				; size = 4
_weather_mode$ = -20					; size = 4
_position$ = -16					; size = 4
_noise_level$ = -12					; size = 4
_light_level$ = -8					; size = 4
_zoom$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
?draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z PROC ; draw_3d_eo_display_on_texture, COMDAT

; 2707 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2708 : 	float
; 2709 : 		zoom;
; 2710 : 
; 2711 : 	display_3d_light_levels
; 2712 : 		light_level;
; 2713 : 
; 2714 : 	display_3d_noise_levels
; 2715 : 		noise_level;
; 2716 : 
; 2717 : 	vec3d
; 2718 : 		*position;
; 2719 : 
; 2720 : 	weathermodes
; 2721 : 		weather_mode;
; 2722 : 
; 2723 : 	day_segment_types
; 2724 : 		day_segment_type;
; 2725 : 
; 2726 : 	display_3d_tints
; 2727 : 		tint;
; 2728 : 
; 2729 : 	ASSERT (eo);

  00009	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN6@draw_3d_eo
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00014	83 c0 16	 add	 eax, 22			; 00000016H
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@draw_3d_eo:

; 2730 : 
; 2731 : 	ASSERT (eo_3d_texture_screen);

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, 0
  0002e	75 18		 jne	 SHORT $LN7@draw_3d_eo
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00035	83 c0 18	 add	 eax, 24			; 00000018H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@draw_3d_eo:

; 2732 : 
; 2733 : 	ASSERT (d3d_can_render_to_texture);

  00048	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  0004f	75 18		 jne	 SHORT $LN8@draw_3d_eo
  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00056	83 c0 1a	 add	 eax, 26			; 0000001aH
  00059	50		 push	 eax
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@EPIBEIKA@d3d_can_render_to_texture@
  00064	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@draw_3d_eo:

; 2734 : 
; 2735 : 	switch (eo->field_of_view)

  00069	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	89 4d a0	 mov	 DWORD PTR tv80[ebp], ecx
  00071	83 7d a0 01	 cmp	 DWORD PTR tv80[ebp], 1
  00075	74 0e		 je	 SHORT $LN9@draw_3d_eo
  00077	83 7d a0 02	 cmp	 DWORD PTR tv80[ebp], 2
  0007b	74 17		 je	 SHORT $LN10@draw_3d_eo
  0007d	83 7d a0 03	 cmp	 DWORD PTR tv80[ebp], 3
  00081	74 20		 je	 SHORT $LN11@draw_3d_eo
  00083	eb 2d		 jmp	 SHORT $LN12@draw_3d_eo
$LN9@draw_3d_eo:

; 2736 : 	{
; 2737 : 		case EO_FOV_NARROW:
; 2738 : 		{
; 2739 : 			zoom = 1.0 / 128.0;

  00085	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c000000
  0008d	f3 0f 11 45 fc	 movss	 DWORD PTR _zoom$[ebp], xmm0

; 2740 : 
; 2741 : 			break;

  00092	eb 31		 jmp	 SHORT $LN2@draw_3d_eo
$LN10@draw_3d_eo:

; 2742 : 		}
; 2743 : 		case EO_FOV_MEDIUM:
; 2744 : 		{
; 2745 : 			zoom = 1.0 / 8.0;

  00094	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  0009c	f3 0f 11 45 fc	 movss	 DWORD PTR _zoom$[ebp], xmm0

; 2746 : 
; 2747 : 			break;

  000a1	eb 22		 jmp	 SHORT $LN2@draw_3d_eo
$LN11@draw_3d_eo:

; 2748 : 		}
; 2749 : 		case EO_FOV_WIDE:
; 2750 : 		{
; 2751 : 			zoom = 1.0;

  000a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000ab	f3 0f 11 45 fc	 movss	 DWORD PTR _zoom$[ebp], xmm0

; 2752 : 
; 2753 : 			break;

  000b0	eb 13		 jmp	 SHORT $LN2@draw_3d_eo
$LN12@draw_3d_eo:

; 2754 : 		}
; 2755 : 		default:
; 2756 : 		{
; 2757 : 			debug_fatal ("Invalid field of view = %d", eo->field_of_view);

  000b2	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  000b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b7	51		 push	 ecx
  000b8	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@MNOBOANG@Invalid?5field?5of?5view?5?$DN?5?$CFd@
  000bd	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000c2	83 c4 08	 add	 esp, 8
$LN2@draw_3d_eo:

; 2758 : 
; 2759 : 			break;
; 2760 : 		}
; 2761 : 	}
; 2762 : 
; 2763 : 	position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  000c5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  000cc	74 0c		 je	 SHORT $LN22@draw_3d_eo
  000ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d5	89 4d a0	 mov	 DWORD PTR tv93[ebp], ecx
  000d8	eb 21		 jmp	 SHORT $LN23@draw_3d_eo
$LN22@draw_3d_eo:
  000da	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  000e0	83 c2 38	 add	 edx, 56			; 00000038H
  000e3	52		 push	 edx
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000ee	50		 push	 eax
  000ef	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000f4	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv93[ebp], 0
$LN23@draw_3d_eo:
  000fb	b9 01 00 00 00	 mov	 ecx, 1
  00100	85 c9		 test	 ecx, ecx
  00102	74 09		 je	 SHORT $LN24@draw_3d_eo
  00104	c7 45 9c 08 00
	00 00		 mov	 DWORD PTR tv133[ebp], 8
  0010b	eb 21		 jmp	 SHORT $LN25@draw_3d_eo
$LN24@draw_3d_eo:
  0010d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00113	83 c2 38	 add	 edx, 56			; 00000038H
  00116	52		 push	 edx
  00117	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0011c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00121	50		 push	 eax
  00122	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00127	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv133[ebp], 0
$LN25@draw_3d_eo:
  0012e	6a 08		 push	 8
  00130	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00136	51		 push	 ecx
  00137	6b 55 a0 60	 imul	 edx, DWORD PTR tv93[ebp], 96
  0013b	8b 45 9c	 mov	 eax, DWORD PTR tv133[ebp]
  0013e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00145	ff d1		 call	 ecx
  00147	89 45 f0	 mov	 DWORD PTR _position$[ebp], eax

; 2764 : 
; 2765 : 	weather_mode = get_simple_session_weather_at_point (position);

  0014a	8b 45 f0	 mov	 eax, DWORD PTR _position$[ebp]
  0014d	50		 push	 eax
  0014e	e8 00 00 00 00	 call	 ?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z ; get_simple_session_weather_at_point
  00153	89 45 ec	 mov	 DWORD PTR _weather_mode$[ebp], eax

; 2766 : 
; 2767 : 	ASSERT ((weather_mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LAST));

  00156	83 7d ec 00	 cmp	 DWORD PTR _weather_mode$[ebp], 0
  0015a	7e 06		 jle	 SHORT $LN14@draw_3d_eo
  0015c	83 7d ec 05	 cmp	 DWORD PTR _weather_mode$[ebp], 5
  00160	7c 18		 jl	 SHORT $LN13@draw_3d_eo
$LN14@draw_3d_eo:
  00162	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00167	83 c0 3c	 add	 eax, 60			; 0000003cH
  0016a	50		 push	 eax
  0016b	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00170	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
  00175	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN13@draw_3d_eo:

; 2768 : 
; 2769 : 	day_segment_type = (day_segment_types) get_local_entity_int_value (get_session_entity (), INT_TYPE_DAY_SEGMENT_TYPE);

  0017a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  00181	74 0c		 je	 SHORT $LN26@draw_3d_eo
  00183	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  00188	8b 08		 mov	 ecx, DWORD PTR [eax]
  0018a	89 4d a0	 mov	 DWORD PTR tv153[ebp], ecx
  0018d	eb 21		 jmp	 SHORT $LN27@draw_3d_eo
$LN26@draw_3d_eo:
  0018f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00195	83 c2 3e	 add	 edx, 62			; 0000003eH
  00198	52		 push	 edx
  00199	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0019e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001a3	50		 push	 eax
  001a4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001a9	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv153[ebp], 0
$LN27@draw_3d_eo:
  001b0	b9 01 00 00 00	 mov	 ecx, 1
  001b5	85 c9		 test	 ecx, ecx
  001b7	74 09		 je	 SHORT $LN28@draw_3d_eo
  001b9	c7 45 9c 27 00
	00 00		 mov	 DWORD PTR tv161[ebp], 39 ; 00000027H
  001c0	eb 21		 jmp	 SHORT $LN29@draw_3d_eo
$LN28@draw_3d_eo:
  001c2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  001c8	83 c2 3e	 add	 edx, 62			; 0000003eH
  001cb	52		 push	 edx
  001cc	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  001d6	50		 push	 eax
  001d7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001dc	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv161[ebp], 0
$LN29@draw_3d_eo:
  001e3	6a 27		 push	 39			; 00000027H
  001e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  001eb	51		 push	 ecx
  001ec	69 55 a0 5c 04
	00 00		 imul	 edx, DWORD PTR tv153[ebp], 1116
  001f3	8b 45 9c	 mov	 eax, DWORD PTR tv161[ebp]
  001f6	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  001fd	ff d1		 call	 ecx
  001ff	89 45 e8	 mov	 DWORD PTR _day_segment_type$[ebp], eax

; 2770 : 
; 2771 : 	ASSERT ((day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT_TYPES));

  00202	83 7d e8 00	 cmp	 DWORD PTR _day_segment_type$[ebp], 0
  00206	7c 06		 jl	 SHORT $LN16@draw_3d_eo
  00208	83 7d e8 04	 cmp	 DWORD PTR _day_segment_type$[ebp], 4
  0020c	7c 18		 jl	 SHORT $LN15@draw_3d_eo
$LN16@draw_3d_eo:
  0020e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00213	83 c0 40	 add	 eax, 64			; 00000040H
  00216	50		 push	 eax
  00217	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0021c	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
  00221	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN15@draw_3d_eo:

; 2772 : 
; 2773 : 	switch (system)

  00226	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  00229	89 45 a0	 mov	 DWORD PTR tv173[ebp], eax
  0022c	83 7d a0 03	 cmp	 DWORD PTR tv173[ebp], 3
  00230	74 0e		 je	 SHORT $LN17@draw_3d_eo
  00232	83 7d a0 04	 cmp	 DWORD PTR tv173[ebp], 4
  00236	74 30		 je	 SHORT $LN18@draw_3d_eo
  00238	83 7d a0 05	 cmp	 DWORD PTR tv173[ebp], 5
  0023c	74 52		 je	 SHORT $LN19@draw_3d_eo
  0023e	eb 78		 jmp	 SHORT $LN20@draw_3d_eo
$LN17@draw_3d_eo:

; 2774 : 	{
; 2775 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 2776 : 		{
; 2777 : 			light_level = flir_light_levels[weather_mode][day_segment_type];

  00240	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00243	c1 e0 04	 shl	 eax, 4
  00246	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00249	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  00250	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 2778 : 
; 2779 : 			noise_level = flir_noise_levels[weather_mode][day_segment_type];

  00253	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00256	c1 e0 04	 shl	 eax, 4
  00259	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  0025c	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  00263	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 2780 : 
; 2781 : 			break;

  00266	eb 61		 jmp	 SHORT $LN4@draw_3d_eo
$LN18@draw_3d_eo:

; 2782 : 		}
; 2783 : 		case TARGET_ACQUISITION_SYSTEM_DTV:
; 2784 : 		{
; 2785 : 			light_level = dtv_light_levels[weather_mode][day_segment_type];

  00268	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0026b	c1 e0 04	 shl	 eax, 4
  0026e	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00271	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  00278	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 2786 : 
; 2787 : 			noise_level = dtv_noise_levels[weather_mode][day_segment_type];

  0027b	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0027e	c1 e0 04	 shl	 eax, 4
  00281	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00284	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  0028b	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 2788 : 
; 2789 : 			break;

  0028e	eb 39		 jmp	 SHORT $LN4@draw_3d_eo
$LN19@draw_3d_eo:

; 2790 : 		}
; 2791 : 		case TARGET_ACQUISITION_SYSTEM_DVO:
; 2792 : 		{
; 2793 : 			light_level = dvo_light_levels[weather_mode][day_segment_type];

  00290	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00293	c1 e0 04	 shl	 eax, 4
  00296	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00299	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dvo_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  002a0	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 2794 : 
; 2795 : 			noise_level = dvo_noise_levels[weather_mode][day_segment_type];

  002a3	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  002a6	c1 e0 04	 shl	 eax, 4
  002a9	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  002ac	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dvo_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  002b3	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 2796 : 
; 2797 : 			break;

  002b6	eb 11		 jmp	 SHORT $LN4@draw_3d_eo
$LN20@draw_3d_eo:

; 2798 : 		}
; 2799 : 		default:
; 2800 : 		{
; 2801 : 			debug_fatal ("Invalid target acquisition system = %d", system);

  002b8	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  002bb	50		 push	 eax
  002bc	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
  002c1	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  002c6	83 c4 08	 add	 esp, 8
$LN4@draw_3d_eo:

; 2802 : 
; 2803 : 			break;
; 2804 : 		}
; 2805 : 	}
; 2806 : 
; 2807 : 	set_3d_render_target (eo_3d_texture_screen);

  002c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  002ce	50		 push	 eax
  002cf	e8 00 00 00 00	 call	 ?set_3d_render_target@@YGHPAUSCREEN@@@Z ; set_3d_render_target

; 2808 : 
; 2809 : 	set_active_screen (eo_3d_texture_screen);

  002d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  002d9	50		 push	 eax
  002da	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 2810 : 
; 2811 : 	tint = DISPLAY_3D_TINT_GREEN;

  002df	c7 45 e4 03 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 3

; 2812 : 
; 2813 : 	set_main_3d_params (tint, light_level, noise_level, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_size, mfd_viewport_size, rad (59.99) * zoom, rad (59.99) * zoom);

  002e6	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  002eb	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  002f3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002f7	51		 push	 ecx
  002f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fd	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  00302	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  0030a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0030e	51		 push	 ecx
  0030f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00314	51		 push	 ecx
  00315	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  0031d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00322	51		 push	 ecx
  00323	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  0032b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00330	51		 push	 ecx
  00331	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00339	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033e	51		 push	 ecx
  0033f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00347	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034c	8b 45 f4	 mov	 eax, DWORD PTR _noise_level$[ebp]
  0034f	50		 push	 eax
  00350	8b 4d f8	 mov	 ecx, DWORD PTR _light_level$[ebp]
  00353	51		 push	 ecx
  00354	8b 55 e4	 mov	 edx, DWORD PTR _tint$[ebp]
  00357	52		 push	 edx
  00358	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params

; 2814 : 
; 2815 : 	draw_eo_3d_scene = TRUE;

  0035d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 1 ; draw_eo_3d_scene

; 2816 : 
; 2817 : 	draw_main_3d_scene (&eo_vp);

  00367	68 00 00 00 00	 push	 OFFSET ?eo_vp@@3UVIEWPOINT@@A ; eo_vp
  0036c	e8 00 00 00 00	 call	 ?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z ; draw_main_3d_scene

; 2818 : 
; 2819 : 	draw_eo_3d_scene = FALSE;

  00371	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 0 ; draw_eo_3d_scene

; 2820 : 
; 2821 : 	finalise_3d_render_target_texture (eo_3d_texture_screen);

  0037b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00380	50		 push	 eax
  00381	e8 00 00 00 00	 call	 ?finalise_3d_render_target_texture@@YGXPAUSCREEN@@@Z ; finalise_3d_render_target_texture

; 2822 : 
; 2823 : 	set_3d_render_target (video_screen);

  00386	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  0038b	50		 push	 eax
  0038c	e8 00 00 00 00	 call	 ?set_3d_render_target@@YGHPAUSCREEN@@@Z ; set_3d_render_target

; 2824 : 
; 2825 : 	set_active_screen (video_screen);

  00391	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00396	50		 push	 eax
  00397	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 2826 : }

  0039c	5f		 pop	 edi
  0039d	5e		 pop	 esi
  0039e	5b		 pop	 ebx
  0039f	8b e5		 mov	 esp, ebp
  003a1	5d		 pop	 ebp
  003a2	c2 08 00	 ret	 8
?draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ENDP ; draw_3d_eo_display_on_texture
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv151 = -100						; size = 4
tv91 = -100						; size = 4
tv163 = -96						; size = 4
tv143 = -96						; size = 4
tv83 = -96						; size = 4
tv70 = -96						; size = 4
_tint$ = -28						; size = 4
_day_segment_type$ = -24				; size = 4
_weather_mode$ = -20					; size = 4
_position$ = -16					; size = 4
_noise_level$ = -12					; size = 4
_light_level$ = -8					; size = 4
_zoom$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
_location$ = 16						; size = 4
?draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z PROC ; draw_3d_eo_display, COMDAT

; 2574 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2575 : 	float
; 2576 : 		zoom;
; 2577 : 
; 2578 : 	display_3d_light_levels
; 2579 : 		light_level;
; 2580 : 
; 2581 : 	display_3d_noise_levels
; 2582 : 		noise_level;
; 2583 : 
; 2584 : 	vec3d
; 2585 : 		*position;
; 2586 : 
; 2587 : 	weathermodes
; 2588 : 		weather_mode;
; 2589 : 
; 2590 : 	day_segment_types
; 2591 : 		day_segment_type;
; 2592 : 
; 2593 : 	display_3d_tints
; 2594 : 		tint;
; 2595 : 
; 2596 : 	ASSERT (eo);

  00009	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN6@draw_3d_eo
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z@4JA
  00014	83 c0 16	 add	 eax, 22			; 00000016H
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@draw_3d_eo:

; 2597 : 
; 2598 : 	switch (eo->field_of_view)

  00027	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  0002a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002c	89 4d a0	 mov	 DWORD PTR tv70[ebp], ecx
  0002f	83 7d a0 01	 cmp	 DWORD PTR tv70[ebp], 1
  00033	74 0e		 je	 SHORT $LN7@draw_3d_eo
  00035	83 7d a0 02	 cmp	 DWORD PTR tv70[ebp], 2
  00039	74 17		 je	 SHORT $LN8@draw_3d_eo
  0003b	83 7d a0 03	 cmp	 DWORD PTR tv70[ebp], 3
  0003f	74 20		 je	 SHORT $LN9@draw_3d_eo
  00041	eb 2d		 jmp	 SHORT $LN10@draw_3d_eo
$LN7@draw_3d_eo:

; 2599 : 	{
; 2600 : 		case EO_FOV_NARROW:
; 2601 : 		{
; 2602 : 			zoom = 1.0 / 128.0;

  00043	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c000000
  0004b	f3 0f 11 45 fc	 movss	 DWORD PTR _zoom$[ebp], xmm0

; 2603 : 
; 2604 : 			break;

  00050	eb 31		 jmp	 SHORT $LN2@draw_3d_eo
$LN8@draw_3d_eo:

; 2605 : 		}
; 2606 : 		case EO_FOV_MEDIUM:
; 2607 : 		{
; 2608 : 			zoom = 1.0 / 8.0;

  00052	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  0005a	f3 0f 11 45 fc	 movss	 DWORD PTR _zoom$[ebp], xmm0

; 2609 : 
; 2610 : 			break;

  0005f	eb 22		 jmp	 SHORT $LN2@draw_3d_eo
$LN9@draw_3d_eo:

; 2611 : 		}
; 2612 : 		case EO_FOV_WIDE:
; 2613 : 		{
; 2614 : 			zoom = 1.0;

  00061	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00069	f3 0f 11 45 fc	 movss	 DWORD PTR _zoom$[ebp], xmm0

; 2615 : 
; 2616 : 			break;

  0006e	eb 13		 jmp	 SHORT $LN2@draw_3d_eo
$LN10@draw_3d_eo:

; 2617 : 		}
; 2618 : 		default:
; 2619 : 		{
; 2620 : 			debug_fatal ("Invalid field of view = %d", eo->field_of_view);

  00070	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  00073	8b 08		 mov	 ecx, DWORD PTR [eax]
  00075	51		 push	 ecx
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@MNOBOANG@Invalid?5field?5of?5view?5?$DN?5?$CFd@
  0007b	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00080	83 c4 08	 add	 esp, 8
$LN2@draw_3d_eo:

; 2621 : 
; 2622 : 			break;
; 2623 : 		}
; 2624 : 	}
; 2625 : 
; 2626 : 	position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  00083	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0008a	74 0c		 je	 SHORT $LN26@draw_3d_eo
  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00091	8b 08		 mov	 ecx, DWORD PTR [eax]
  00093	89 4d a0	 mov	 DWORD PTR tv83[ebp], ecx
  00096	eb 21		 jmp	 SHORT $LN27@draw_3d_eo
$LN26@draw_3d_eo:
  00098	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z@4JA
  0009e	83 c2 34	 add	 edx, 52			; 00000034H
  000a1	52		 push	 edx
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b2	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN27@draw_3d_eo:
  000b9	b9 01 00 00 00	 mov	 ecx, 1
  000be	85 c9		 test	 ecx, ecx
  000c0	74 09		 je	 SHORT $LN28@draw_3d_eo
  000c2	c7 45 9c 08 00
	00 00		 mov	 DWORD PTR tv91[ebp], 8
  000c9	eb 21		 jmp	 SHORT $LN29@draw_3d_eo
$LN28@draw_3d_eo:
  000cb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z@4JA
  000d1	83 c2 34	 add	 edx, 52			; 00000034H
  000d4	52		 push	 edx
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000e5	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv91[ebp], 0
$LN29@draw_3d_eo:
  000ec	6a 08		 push	 8
  000ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000f4	51		 push	 ecx
  000f5	6b 55 a0 60	 imul	 edx, DWORD PTR tv83[ebp], 96
  000f9	8b 45 9c	 mov	 eax, DWORD PTR tv91[ebp]
  000fc	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00103	ff d1		 call	 ecx
  00105	89 45 f0	 mov	 DWORD PTR _position$[ebp], eax

; 2627 : 
; 2628 : 	weather_mode = get_simple_session_weather_at_point (position);

  00108	8b 45 f0	 mov	 eax, DWORD PTR _position$[ebp]
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z ; get_simple_session_weather_at_point
  00111	89 45 ec	 mov	 DWORD PTR _weather_mode$[ebp], eax

; 2629 : 
; 2630 : 	ASSERT ((weather_mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LAST));

  00114	83 7d ec 00	 cmp	 DWORD PTR _weather_mode$[ebp], 0
  00118	7e 06		 jle	 SHORT $LN12@draw_3d_eo
  0011a	83 7d ec 05	 cmp	 DWORD PTR _weather_mode$[ebp], 5
  0011e	7c 18		 jl	 SHORT $LN11@draw_3d_eo
$LN12@draw_3d_eo:
  00120	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z@4JA
  00125	83 c0 38	 add	 eax, 56			; 00000038H
  00128	50		 push	 eax
  00129	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0012e	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
  00133	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN11@draw_3d_eo:

; 2631 : 
; 2632 : 	day_segment_type = (day_segment_types) get_local_entity_int_value (get_session_entity (), INT_TYPE_DAY_SEGMENT_TYPE);

  00138	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  0013f	74 0c		 je	 SHORT $LN30@draw_3d_eo
  00141	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  00146	8b 08		 mov	 ecx, DWORD PTR [eax]
  00148	89 4d a0	 mov	 DWORD PTR tv143[ebp], ecx
  0014b	eb 21		 jmp	 SHORT $LN31@draw_3d_eo
$LN30@draw_3d_eo:
  0014d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z@4JA
  00153	83 c2 3a	 add	 edx, 58			; 0000003aH
  00156	52		 push	 edx
  00157	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0015c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00161	50		 push	 eax
  00162	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00167	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv143[ebp], 0
$LN31@draw_3d_eo:
  0016e	b9 01 00 00 00	 mov	 ecx, 1
  00173	85 c9		 test	 ecx, ecx
  00175	74 09		 je	 SHORT $LN32@draw_3d_eo
  00177	c7 45 9c 27 00
	00 00		 mov	 DWORD PTR tv151[ebp], 39 ; 00000027H
  0017e	eb 21		 jmp	 SHORT $LN33@draw_3d_eo
$LN32@draw_3d_eo:
  00180	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z@4JA
  00186	83 c2 3a	 add	 edx, 58			; 0000003aH
  00189	52		 push	 edx
  0018a	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0018f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00194	50		 push	 eax
  00195	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0019a	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv151[ebp], 0
$LN33@draw_3d_eo:
  001a1	6a 27		 push	 39			; 00000027H
  001a3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  001a9	51		 push	 ecx
  001aa	69 55 a0 5c 04
	00 00		 imul	 edx, DWORD PTR tv143[ebp], 1116
  001b1	8b 45 9c	 mov	 eax, DWORD PTR tv151[ebp]
  001b4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  001bb	ff d1		 call	 ecx
  001bd	89 45 e8	 mov	 DWORD PTR _day_segment_type$[ebp], eax

; 2633 : 
; 2634 : 	ASSERT ((day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT_TYPES));

  001c0	83 7d e8 00	 cmp	 DWORD PTR _day_segment_type$[ebp], 0
  001c4	7c 06		 jl	 SHORT $LN14@draw_3d_eo
  001c6	83 7d e8 04	 cmp	 DWORD PTR _day_segment_type$[ebp], 4
  001ca	7c 18		 jl	 SHORT $LN13@draw_3d_eo
$LN14@draw_3d_eo:
  001cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z@4JA
  001d1	83 c0 3c	 add	 eax, 60			; 0000003cH
  001d4	50		 push	 eax
  001d5	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001da	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
  001df	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN13@draw_3d_eo:

; 2635 : 
; 2636 : 	switch (system)

  001e4	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  001e7	89 45 a0	 mov	 DWORD PTR tv163[ebp], eax
  001ea	83 7d a0 03	 cmp	 DWORD PTR tv163[ebp], 3
  001ee	74 0e		 je	 SHORT $LN15@draw_3d_eo
  001f0	83 7d a0 04	 cmp	 DWORD PTR tv163[ebp], 4
  001f4	74 30		 je	 SHORT $LN16@draw_3d_eo
  001f6	83 7d a0 05	 cmp	 DWORD PTR tv163[ebp], 5
  001fa	74 52		 je	 SHORT $LN17@draw_3d_eo
  001fc	eb 78		 jmp	 SHORT $LN18@draw_3d_eo
$LN15@draw_3d_eo:

; 2637 : 	{
; 2638 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 2639 : 		{
; 2640 : 			light_level = flir_light_levels[weather_mode][day_segment_type];

  001fe	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00201	c1 e0 04	 shl	 eax, 4
  00204	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00207	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  0020e	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 2641 : 
; 2642 : 			noise_level = flir_noise_levels[weather_mode][day_segment_type];

  00211	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00214	c1 e0 04	 shl	 eax, 4
  00217	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  0021a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  00221	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 2643 : 
; 2644 : 			break;

  00224	eb 61		 jmp	 SHORT $LN4@draw_3d_eo
$LN16@draw_3d_eo:

; 2645 : 		}
; 2646 : 		case TARGET_ACQUISITION_SYSTEM_DTV:
; 2647 : 		{
; 2648 : 			light_level = dtv_light_levels[weather_mode][day_segment_type];

  00226	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00229	c1 e0 04	 shl	 eax, 4
  0022c	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  0022f	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  00236	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 2649 : 
; 2650 : 			noise_level = dtv_noise_levels[weather_mode][day_segment_type];

  00239	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  0023c	c1 e0 04	 shl	 eax, 4
  0023f	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00242	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dtv_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  00249	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 2651 : 
; 2652 : 			break;

  0024c	eb 39		 jmp	 SHORT $LN4@draw_3d_eo
$LN17@draw_3d_eo:

; 2653 : 		}
; 2654 : 		case TARGET_ACQUISITION_SYSTEM_DVO:
; 2655 : 		{
; 2656 : 			light_level = dvo_light_levels[weather_mode][day_segment_type];

  0024e	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00251	c1 e0 04	 shl	 eax, 4
  00254	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  00257	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dvo_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  0025e	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 2657 : 
; 2658 : 			noise_level = dvo_noise_levels[weather_mode][day_segment_type];

  00261	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00264	c1 e0 04	 shl	 eax, 4
  00267	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  0026a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?dvo_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  00271	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 2659 : 
; 2660 : 			break;

  00274	eb 11		 jmp	 SHORT $LN4@draw_3d_eo
$LN18@draw_3d_eo:

; 2661 : 		}
; 2662 : 		default:
; 2663 : 		{
; 2664 : 			debug_fatal ("Invalid target acquisition system = %d", system);

  00276	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  00279	50		 push	 eax
  0027a	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
  0027f	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00284	83 c4 08	 add	 esp, 8
$LN4@draw_3d_eo:

; 2665 : 
; 2666 : 			break;
; 2667 : 		}
; 2668 : 	}
; 2669 : 
; 2670 : 	tint = DISPLAY_3D_TINT_GREEN;

  00287	c7 45 e4 03 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 3

; 2671 : 
; 2672 : 	if (draw_large_mfd)

  0028e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00295	0f 84 32 01 00
	00		 je	 $LN19@draw_3d_eo

; 2673 : 	{
; 2674 : 		if (location == MFD_LOCATION_LHS)

  0029b	83 7d 10 00	 cmp	 DWORD PTR _location$[ebp], 0
  0029f	0f 85 94 00 00
	00		 jne	 $LN21@draw_3d_eo

; 2675 : 		{
; 2676 : 			set_main_3d_params (tint, light_level, noise_level, mfd_viewport_x_min - 1.5, mfd_viewport_y_min - 1.5, 334.0, 333.0, rad (59.99) * zoom, rad (59.99) * zoom);

  002a5	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  002aa	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  002b2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002b6	51		 push	 ecx
  002b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002bc	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  002c1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  002c9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002cd	51		 push	 ecx
  002ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d3	51		 push	 ecx
  002d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43a68000
  002dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e1	51		 push	 ecx
  002e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43a70000
  002ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ef	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  002f7	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff8000000000000
  002ff	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00303	51		 push	 ecx
  00304	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00309	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00311	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff8000000000000
  00319	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0031d	51		 push	 ecx
  0031e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00323	8b 45 f4	 mov	 eax, DWORD PTR _noise_level$[ebp]
  00326	50		 push	 eax
  00327	8b 4d f8	 mov	 ecx, DWORD PTR _light_level$[ebp]
  0032a	51		 push	 ecx
  0032b	8b 55 e4	 mov	 edx, DWORD PTR _tint$[ebp]
  0032e	52		 push	 edx
  0032f	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params

; 2677 : 		}
; 2678 : 		else

  00334	e9 8f 00 00 00	 jmp	 $LN22@draw_3d_eo
$LN21@draw_3d_eo:

; 2679 : 		{
; 2680 : 			set_main_3d_params (tint, light_level, noise_level, mfd_viewport_x_min - 1.5, mfd_viewport_y_min - 1.5, 334.0, 333.0, rad (59.99) * zoom, rad (59.99) * zoom);

  00339	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  0033e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  00346	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0034a	51		 push	 ecx
  0034b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00350	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  00355	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  0035d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00361	51		 push	 ecx
  00362	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00367	51		 push	 ecx
  00368	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43a68000
  00370	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00375	51		 push	 ecx
  00376	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43a70000
  0037e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00383	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0038b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff8000000000000
  00393	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00397	51		 push	 ecx
  00398	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  003a5	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff8000000000000
  003ad	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003b1	51		 push	 ecx
  003b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b7	8b 45 f4	 mov	 eax, DWORD PTR _noise_level$[ebp]
  003ba	50		 push	 eax
  003bb	8b 4d f8	 mov	 ecx, DWORD PTR _light_level$[ebp]
  003be	51		 push	 ecx
  003bf	8b 55 e4	 mov	 edx, DWORD PTR _tint$[ebp]
  003c2	52		 push	 edx
  003c3	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params
$LN22@draw_3d_eo:

; 2681 : 		}
; 2682 : 	}
; 2683 : 	else

  003c8	e9 f6 00 00 00	 jmp	 $LN24@draw_3d_eo
$LN19@draw_3d_eo:

; 2684 : 	{
; 2685 : 		if (location == MFD_LOCATION_LHS)

  003cd	83 7d 10 00	 cmp	 DWORD PTR _location$[ebp], 0
  003d1	75 79		 jne	 SHORT $LN23@draw_3d_eo

; 2686 : 		{
; 2687 : 			set_main_3d_params (tint, light_level, noise_level, mfd_viewport_x_min, mfd_viewport_y_min, 128.0, 128.0, rad (59.99) * zoom, rad (59.99) * zoom);

  003d3	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  003d8	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  003e0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003e4	51		 push	 ecx
  003e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ea	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  003ef	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  003f7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003fb	51		 push	 ecx
  003fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00401	51		 push	 ecx
  00402	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  0040a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040f	51		 push	 ecx
  00410	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  00418	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0041d	51		 push	 ecx
  0041e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00426	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042b	51		 push	 ecx
  0042c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00434	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00439	8b 45 f4	 mov	 eax, DWORD PTR _noise_level$[ebp]
  0043c	50		 push	 eax
  0043d	8b 4d f8	 mov	 ecx, DWORD PTR _light_level$[ebp]
  00440	51		 push	 ecx
  00441	8b 55 e4	 mov	 edx, DWORD PTR _tint$[ebp]
  00444	52		 push	 edx
  00445	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params

; 2688 : 		}
; 2689 : 		else

  0044a	eb 77		 jmp	 SHORT $LN24@draw_3d_eo
$LN23@draw_3d_eo:

; 2690 : 		{
; 2691 : 			set_main_3d_params (tint, light_level, noise_level, mfd_viewport_x_min, mfd_viewport_y_min, 128.0, 128.0, rad (59.99) * zoom, rad (59.99) * zoom);

  0044c	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  00451	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  00459	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0045d	51		 push	 ecx
  0045e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00463	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  00468	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  00470	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00474	51		 push	 ecx
  00475	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047a	51		 push	 ecx
  0047b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  00483	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00488	51		 push	 ecx
  00489	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  00491	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00496	51		 push	 ecx
  00497	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0049f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a4	51		 push	 ecx
  004a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  004ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b2	8b 45 f4	 mov	 eax, DWORD PTR _noise_level$[ebp]
  004b5	50		 push	 eax
  004b6	8b 4d f8	 mov	 ecx, DWORD PTR _light_level$[ebp]
  004b9	51		 push	 ecx
  004ba	8b 55 e4	 mov	 edx, DWORD PTR _tint$[ebp]
  004bd	52		 push	 edx
  004be	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params
$LN24@draw_3d_eo:

; 2692 : 		}
; 2693 : 	}
; 2694 : 
; 2695 : 	draw_eo_3d_scene = TRUE;

  004c3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 1 ; draw_eo_3d_scene

; 2696 : 
; 2697 : 	draw_main_3d_scene (&eo_vp);

  004cd	68 00 00 00 00	 push	 OFFSET ?eo_vp@@3UVIEWPOINT@@A ; eo_vp
  004d2	e8 00 00 00 00	 call	 ?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z ; draw_main_3d_scene

; 2698 : 
; 2699 : 	draw_eo_3d_scene = FALSE;

  004d7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 0 ; draw_eo_3d_scene

; 2700 : }

  004e1	5f		 pop	 edi
  004e2	5e		 pop	 esi
  004e3	5b		 pop	 ebx
  004e4	8b e5		 mov	 esp, ebp
  004e6	5d		 pop	 ebp
  004e7	c2 0c 00	 ret	 12			; 0000000cH
?draw_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@W4MFD_LOCATIONS@@@Z ENDP ; draw_3d_eo_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_air_radar_mfd@@YGXXZ
_TEXT	SEGMENT
tv415 = -108						; size = 4
tv394 = -108						; size = 4
tv361 = -108						; size = 4
tv336 = -108						; size = 4
tv187 = -108						; size = 4
tv166 = -108						; size = 4
tv130 = -108						; size = 4
tv78 = -108						; size = 4
tv407 = -104						; size = 4
tv386 = -104						; size = 4
tv353 = -104						; size = 4
tv328 = -104						; size = 4
tv179 = -104						; size = 4
tv158 = -104						; size = 4
tv90 = -104						; size = 4
tv70 = -104						; size = 4
_target_position$ = -36					; size = 4
_source_position$ = -32					; size = 4
_target$ = -28						; size = 4
_source$ = -24						; size = 4
_y_adjust$ = -20					; size = 4
_target_range$ = -16					; size = 4
_scale$ = -12						; size = 4
_source_heading$ = -8					; size = 4
_source_side$ = -4					; size = 4
?draw_air_radar_mfd@@YGXXZ PROC				; draw_air_radar_mfd, COMDAT

; 2080 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2081 : 	entity_sides
; 2082 : 		source_side;
; 2083 : 
; 2084 : 	float
; 2085 : 		source_heading,
; 2086 : 		scale,
; 2087 : 		target_range,
; 2088 : 		y_adjust;
; 2089 : 
; 2090 : 	entity
; 2091 : 		*source,
; 2092 : 		*target;
; 2093 : 
; 2094 : 	vec3d
; 2095 : 		*source_position,
; 2096 : 		*target_position;
; 2097 : 
; 2098 : 	source = get_gunship_entity ();

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0000e	89 45 e8	 mov	 DWORD PTR _source$[ebp], eax

; 2099 : 
; 2100 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  00011	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  00015	74 0a		 je	 SHORT $LN23@draw_air_r
  00017	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 4d 98	 mov	 DWORD PTR tv70[ebp], ecx
  0001f	eb 21		 jmp	 SHORT $LN24@draw_air_r
$LN23@draw_air_r:
  00021	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00027	83 c2 14	 add	 edx, 20			; 00000014H
  0002a	52		 push	 edx
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0003b	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN24@draw_air_r:
  00042	b9 01 00 00 00	 mov	 ecx, 1
  00047	85 c9		 test	 ecx, ecx
  00049	74 09		 je	 SHORT $LN25@draw_air_r
  0004b	c7 45 94 08 00
	00 00		 mov	 DWORD PTR tv78[ebp], 8
  00052	eb 21		 jmp	 SHORT $LN26@draw_air_r
$LN25@draw_air_r:
  00054	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  0005a	83 c2 14	 add	 edx, 20			; 00000014H
  0005d	52		 push	 edx
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006e	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN26@draw_air_r:
  00075	6a 08		 push	 8
  00077	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  0007a	51		 push	 ecx
  0007b	6b 55 98 60	 imul	 edx, DWORD PTR tv70[ebp], 96
  0007f	8b 45 94	 mov	 eax, DWORD PTR tv78[ebp]
  00082	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00089	ff d1		 call	 ecx
  0008b	89 45 e0	 mov	 DWORD PTR _source_position$[ebp], eax

; 2101 : 
; 2102 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);

  0008e	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  00092	74 0a		 je	 SHORT $LN27@draw_air_r
  00094	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  00097	8b 08		 mov	 ecx, DWORD PTR [eax]
  00099	89 4d 98	 mov	 DWORD PTR tv90[ebp], ecx
  0009c	eb 21		 jmp	 SHORT $LN28@draw_air_r
$LN27@draw_air_r:
  0009e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  000a4	83 c2 16	 add	 edx, 22			; 00000016H
  000a7	52		 push	 edx
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b8	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN28@draw_air_r:
  000bf	b9 01 00 00 00	 mov	 ecx, 1
  000c4	85 c9		 test	 ecx, ecx
  000c6	74 09		 je	 SHORT $LN29@draw_air_r
  000c8	c7 45 94 bb 00
	00 00		 mov	 DWORD PTR tv130[ebp], 187 ; 000000bbH
  000cf	eb 21		 jmp	 SHORT $LN30@draw_air_r
$LN29@draw_air_r:
  000d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  000d7	83 c2 16	 add	 edx, 22			; 00000016H
  000da	52		 push	 edx
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000eb	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN30@draw_air_r:
  000f2	68 bb 00 00 00	 push	 187			; 000000bbH
  000f7	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  000fa	51		 push	 ecx
  000fb	69 55 98 5c 04
	00 00		 imul	 edx, DWORD PTR tv90[ebp], 1116
  00102	8b 45 94	 mov	 eax, DWORD PTR tv130[ebp]
  00105	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  0010c	ff d1		 call	 ecx
  0010e	89 45 fc	 mov	 DWORD PTR _source_side$[ebp], eax

; 2103 : 
; 2104 : 	////////////////////////////////////////
; 2105 : 	//
; 2106 : 	// text
; 2107 : 	//
; 2108 : 	////////////////////////////////////////
; 2109 : 
; 2110 : 	set_mono_font_colour (MFD_COLOUR1);

  00111	b8 04 00 00 00	 mov	 eax, 4
  00116	6b c8 00	 imul	 ecx, eax, 0
  00119	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0011f	52		 push	 edx
  00120	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 2111 : 
; 2112 : 	if (draw_large_mfd)

  00125	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0012c	74 09		 je	 SHORT $LN4@draw_air_r

; 2113 : 	{
; 2114 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  0012e	6a 05		 push	 5
  00130	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 2115 : 	}
; 2116 : 	else

  00135	eb 07		 jmp	 SHORT $LN5@draw_air_r
$LN4@draw_air_r:

; 2117 : 	{
; 2118 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  00137	6a 01		 push	 1
  00139	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN5@draw_air_r:

; 2119 : 	}
; 2120 : 
; 2121 : 	//
; 2122 : 	// declutter status
; 2123 : 	//
; 2124 : 
; 2125 : 	if (draw_large_mfd)

  0013e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00145	74 0f		 je	 SHORT $LN6@draw_air_r

; 2126 : 	{
; 2127 : 		y_adjust = 5.0;

  00147	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  0014f	f3 0f 11 45 ec	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2128 : 	}
; 2129 : 	else

  00154	eb 0d		 jmp	 SHORT $LN7@draw_air_r
$LN6@draw_air_r:

; 2130 : 	{
; 2131 : 		y_adjust = 2.0;

  00156	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0015e	f3 0f 11 45 ec	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN7@draw_air_r:

; 2132 : 	}
; 2133 : 
; 2134 : 	set_2d_mono_font_position (-0.8, 1.0);

  00163	51		 push	 ecx
  00164	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0016c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00171	51		 push	 ecx
  00172	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0017a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2135 : 
; 2136 : 	set_mono_font_rel_position (1.0, y_adjust);

  00184	51		 push	 ecx
  00185	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0018a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018f	51		 push	 ecx
  00190	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00198	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2137 : 
; 2138 : 	if (air_radar.show_allied_targets)

  001a2	83 3d 1c 00 00
	00 00		 cmp	 DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+28, 0
  001a9	74 0c		 je	 SHORT $LN8@draw_air_r

; 2139 : 	{
; 2140 : 		print_mono_font_string ("ALL");

  001ab	68 00 00 00 00	 push	 OFFSET ??_C@_03NIFPGLBG@ALL@
  001b0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2141 : 	}
; 2142 : 	else

  001b5	eb 0a		 jmp	 SHORT $LN9@draw_air_r
$LN8@draw_air_r:

; 2143 : 	{
; 2144 : 		print_mono_font_string ("ENEMY");

  001b7	68 00 00 00 00	 push	 OFFSET ??_C@_05EJJKHDCK@ENEMY@
  001bc	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN9@draw_air_r:

; 2145 : 	}
; 2146 : 
; 2147 : 	//
; 2148 : 	// scan range
; 2149 : 	//
; 2150 : 
; 2151 : 	display_radar_scan_range (air_radar.scan_range);

  001c1	51		 push	 ecx
  001c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A
  001ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cf	e8 00 00 00 00	 call	 ?display_radar_scan_range@@YGXM@Z ; display_radar_scan_range

; 2152 : 
; 2153 : 	//
; 2154 : 	// target details
; 2155 : 	//
; 2156 : 
; 2157 : 	if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_AIR_RADAR)

  001d4	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 2 ; target_acquisition_system
  001db	0f 85 3a 01 00
	00		 jne	 $LN10@draw_air_r

; 2158 : 	{
; 2159 : 		target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  001e1	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  001e5	74 0a		 je	 SHORT $LN31@draw_air_r
  001e7	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  001ea	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ec	89 4d 98	 mov	 DWORD PTR tv158[ebp], ecx
  001ef	eb 21		 jmp	 SHORT $LN32@draw_air_r
$LN31@draw_air_r:
  001f1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  001f7	83 c2 4f	 add	 edx, 79			; 0000004fH
  001fa	52		 push	 edx
  001fb	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00200	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00205	50		 push	 eax
  00206	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0020b	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv158[ebp], 0
$LN32@draw_air_r:
  00212	b9 01 00 00 00	 mov	 ecx, 1
  00217	85 c9		 test	 ecx, ecx
  00219	74 09		 je	 SHORT $LN33@draw_air_r
  0021b	c7 45 94 26 00
	00 00		 mov	 DWORD PTR tv166[ebp], 38 ; 00000026H
  00222	eb 21		 jmp	 SHORT $LN34@draw_air_r
$LN33@draw_air_r:
  00224	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  0022a	83 c2 4f	 add	 edx, 79			; 0000004fH
  0022d	52		 push	 edx
  0022e	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00233	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00238	50		 push	 eax
  00239	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0023e	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv166[ebp], 0
$LN34@draw_air_r:
  00245	6a 26		 push	 38			; 00000026H
  00247	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  0024a	51		 push	 ecx
  0024b	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv158[ebp], 180
  00252	8b 45 94	 mov	 eax, DWORD PTR tv166[ebp]
  00255	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0025c	ff d1		 call	 ecx
  0025e	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax

; 2160 : 
; 2161 : 		if (target)

  00261	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  00265	0f 84 8f 00 00
	00		 je	 $LN11@draw_air_r

; 2162 : 		{
; 2163 : 			target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  0026b	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  0026f	74 0a		 je	 SHORT $LN35@draw_air_r
  00271	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  00274	8b 08		 mov	 ecx, DWORD PTR [eax]
  00276	89 4d 98	 mov	 DWORD PTR tv179[ebp], ecx
  00279	eb 21		 jmp	 SHORT $LN36@draw_air_r
$LN35@draw_air_r:
  0027b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00281	83 c2 53	 add	 edx, 83			; 00000053H
  00284	52		 push	 edx
  00285	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0028a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0028f	50		 push	 eax
  00290	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00295	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv179[ebp], 0
$LN36@draw_air_r:
  0029c	b9 01 00 00 00	 mov	 ecx, 1
  002a1	85 c9		 test	 ecx, ecx
  002a3	74 09		 je	 SHORT $LN37@draw_air_r
  002a5	c7 45 94 08 00
	00 00		 mov	 DWORD PTR tv187[ebp], 8
  002ac	eb 21		 jmp	 SHORT $LN38@draw_air_r
$LN37@draw_air_r:
  002ae	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  002b4	83 c2 53	 add	 edx, 83			; 00000053H
  002b7	52		 push	 edx
  002b8	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  002bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  002c2	50		 push	 eax
  002c3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002c8	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv187[ebp], 0
$LN38@draw_air_r:
  002cf	6a 08		 push	 8
  002d1	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  002d4	51		 push	 ecx
  002d5	6b 55 98 60	 imul	 edx, DWORD PTR tv179[ebp], 96
  002d9	8b 45 94	 mov	 eax, DWORD PTR tv187[ebp]
  002dc	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  002e3	ff d1		 call	 ecx
  002e5	89 45 dc	 mov	 DWORD PTR _target_position$[ebp], eax

; 2164 : 
; 2165 : 			target_range = get_3d_range (source_position, target_position);

  002e8	8b 45 dc	 mov	 eax, DWORD PTR _target_position$[ebp]
  002eb	50		 push	 eax
  002ec	8b 4d e0	 mov	 ecx, DWORD PTR _source_position$[ebp]
  002ef	51		 push	 ecx
  002f0	e8 00 00 00 00	 call	 ?get_3d_range@@YGMPBUVEC3D@@0@Z ; get_3d_range
  002f5	d9 5d f0	 fstp	 DWORD PTR _target_range$[ebp]

; 2166 : 		}
; 2167 : 		else

  002f8	eb 08		 jmp	 SHORT $LN12@draw_air_r
$LN11@draw_air_r:

; 2168 : 		{
; 2169 : 			target_range = 0.0;

  002fa	0f 57 c0	 xorps	 xmm0, xmm0
  002fd	f3 0f 11 45 f0	 movss	 DWORD PTR _target_range$[ebp], xmm0
$LN12@draw_air_r:

; 2170 : 		}
; 2171 : 
; 2172 : 		display_radar_target_details (target, target_range, &air_radar);

  00302	68 00 00 00 00	 push	 OFFSET ?air_radar@@3URADAR_PARAMS@@A ; air_radar
  00307	51		 push	 ecx
  00308	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _target_range$[ebp]
  0030d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00312	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  00315	50		 push	 eax
  00316	e8 00 00 00 00	 call	 ?display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z ; display_radar_target_details
$LN10@draw_air_r:

; 2173 : 	}
; 2174 : 
; 2175 : 	////////////////////////////////////////
; 2176 : 	//
; 2177 : 	// line graphics
; 2178 : 	//
; 2179 : 	////////////////////////////////////////
; 2180 : 
; 2181 : 	//
; 2182 : 	// datum markers
; 2183 : 	//
; 2184 : 
; 2185 : 	draw_2d_line ( 0.00,  TICK1,  0.00,  TICK2, MFD_COLOUR4);

  0031b	b8 04 00 00 00	 mov	 eax, 4
  00320	6b c8 03	 imul	 ecx, eax, 3
  00323	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00329	52		 push	 edx
  0032a	51		 push	 ecx
  0032b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ac083
  00333	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00338	51		 push	 ecx
  00339	0f 57 c0	 xorps	 xmm0, xmm0
  0033c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00341	51		 push	 ecx
  00342	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3851ec
  0034a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034f	51		 push	 ecx
  00350	0f 57 c0	 xorps	 xmm0, xmm0
  00353	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00358	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2186 : 	draw_2d_line ( TICK1,  0.00,  TICK2,  0.00, MFD_COLOUR4);

  0035d	b8 04 00 00 00	 mov	 eax, 4
  00362	6b c8 03	 imul	 ecx, eax, 3
  00365	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0036b	52		 push	 edx
  0036c	51		 push	 ecx
  0036d	0f 57 c0	 xorps	 xmm0, xmm0
  00370	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00375	51		 push	 ecx
  00376	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ac083
  0037e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00383	51		 push	 ecx
  00384	0f 57 c0	 xorps	 xmm0, xmm0
  00387	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038c	51		 push	 ecx
  0038d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3851ec
  00395	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2187 : 	draw_2d_line ( 0.00, -TICK1,  0.00, -TICK2, MFD_COLOUR4);

  0039f	b8 04 00 00 00	 mov	 eax, 4
  003a4	6b c8 03	 imul	 ecx, eax, 3
  003a7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003ad	52		 push	 edx
  003ae	51		 push	 ecx
  003af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ac083
  003b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003bc	51		 push	 ecx
  003bd	0f 57 c0	 xorps	 xmm0, xmm0
  003c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c5	51		 push	 ecx
  003c6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3851ec
  003ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d3	51		 push	 ecx
  003d4	0f 57 c0	 xorps	 xmm0, xmm0
  003d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003dc	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2188 : 	draw_2d_line (-TICK1,  0.00, -TICK2,  0.00, MFD_COLOUR4);

  003e1	b8 04 00 00 00	 mov	 eax, 4
  003e6	6b c8 03	 imul	 ecx, eax, 3
  003e9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003ef	52		 push	 edx
  003f0	51		 push	 ecx
  003f1	0f 57 c0	 xorps	 xmm0, xmm0
  003f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f9	51		 push	 ecx
  003fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ac083
  00402	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00407	51		 push	 ecx
  00408	0f 57 c0	 xorps	 xmm0, xmm0
  0040b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00410	51		 push	 ecx
  00411	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3851ec
  00419	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0041e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2189 : 
; 2190 : 	//
; 2191 : 	// range markers
; 2192 : 	//
; 2193 : 
; 2194 : 	draw_2d_circle (0.0, 0.0, RADIUS * 0.25, MFD_COLOUR4);

  00423	b8 04 00 00 00	 mov	 eax, 4
  00428	6b c8 03	 imul	 ecx, eax, 3
  0042b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00431	52		 push	 edx
  00432	51		 push	 ecx
  00433	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0043b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00440	51		 push	 ecx
  00441	0f 57 c0	 xorps	 xmm0, xmm0
  00444	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00449	51		 push	 ecx
  0044a	0f 57 c0	 xorps	 xmm0, xmm0
  0044d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00452	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 2195 : 	draw_2d_circle (0.0, 0.0, RADIUS * 0.50, MFD_COLOUR4);

  00457	b8 04 00 00 00	 mov	 eax, 4
  0045c	6b c8 03	 imul	 ecx, eax, 3
  0045f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00465	52		 push	 edx
  00466	51		 push	 ecx
  00467	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  0046f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00474	51		 push	 ecx
  00475	0f 57 c0	 xorps	 xmm0, xmm0
  00478	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047d	51		 push	 ecx
  0047e	0f 57 c0	 xorps	 xmm0, xmm0
  00481	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00486	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 2196 : 	draw_2d_circle (0.0, 0.0, RADIUS * 0.75, MFD_COLOUR4);

  0048b	b8 04 00 00 00	 mov	 eax, 4
  00490	6b c8 03	 imul	 ecx, eax, 3
  00493	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00499	52		 push	 edx
  0049a	51		 push	 ecx
  0049b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  004a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a8	51		 push	 ecx
  004a9	0f 57 c0	 xorps	 xmm0, xmm0
  004ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b1	51		 push	 ecx
  004b2	0f 57 c0	 xorps	 xmm0, xmm0
  004b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ba	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 2197 : 
; 2198 : 	//
; 2199 : 	// scan limits
; 2200 : 	//
; 2201 : 
; 2202 : 	if (air_radar.scan_arc_size == APACHE_RADAR_SCAN_ARC_SIZE_360)

  004bf	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  004c7	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@40c90fdb
  004ce	9f		 lahf
  004cf	f6 c4 44	 test	 ah, 68			; 00000044H
  004d2	7a 39		 jp	 SHORT $LN13@draw_air_r

; 2203 : 	{
; 2204 : 		draw_2d_circle (0.0, 0.0, RADIUS, MFD_COLOUR1);

  004d4	b8 04 00 00 00	 mov	 eax, 4
  004d9	6b c8 00	 imul	 ecx, eax, 0
  004dc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004e2	52		 push	 edx
  004e3	51		 push	 ecx
  004e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  004ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004f1	51		 push	 ecx
  004f2	0f 57 c0	 xorps	 xmm0, xmm0
  004f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fa	51		 push	 ecx
  004fb	0f 57 c0	 xorps	 xmm0, xmm0
  004fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00503	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 2205 : 	}
; 2206 : 	else

  00508	e9 ab 01 00 00	 jmp	 $LN14@draw_air_r
$LN13@draw_air_r:

; 2207 : 	{
; 2208 : 		draw_2d_circle (0.0, 0.0, RADIUS, MFD_COLOUR4);

  0050d	b8 04 00 00 00	 mov	 eax, 4
  00512	6b c8 03	 imul	 ecx, eax, 3
  00515	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0051b	52		 push	 edx
  0051c	51		 push	 ecx
  0051d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00525	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0052a	51		 push	 ecx
  0052b	0f 57 c0	 xorps	 xmm0, xmm0
  0052e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00533	51		 push	 ecx
  00534	0f 57 c0	 xorps	 xmm0, xmm0
  00537	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053c	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle

; 2209 : 
; 2210 : 		set_2d_window_rotation (mfd_env, -air_radar.scan_datum);

  00541	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  00549	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00550	51		 push	 ecx
  00551	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00556	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0055b	50		 push	 eax
  0055c	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2211 : 
; 2212 : 		draw_radar_arc (air_radar.scan_arc_size, RADIUS, MFD_COLOUR1);

  00561	b8 04 00 00 00	 mov	 eax, 4
  00566	6b c8 00	 imul	 ecx, eax, 0
  00569	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0056f	52		 push	 edx
  00570	51		 push	 ecx
  00571	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00579	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057e	51		 push	 ecx
  0057f	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  00587	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0058c	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 2213 : 
; 2214 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  00591	b8 04 00 00 00	 mov	 eax, 4
  00596	6b c8 00	 imul	 ecx, eax, 0
  00599	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0059f	52		 push	 edx
  005a0	51		 push	 ecx
  005a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  005a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ae	51		 push	 ecx
  005af	0f 57 c0	 xorps	 xmm0, xmm0
  005b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b7	51		 push	 ecx
  005b8	0f 57 c0	 xorps	 xmm0, xmm0
  005bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c0	51		 push	 ecx
  005c1	0f 57 c0	 xorps	 xmm0, xmm0
  005c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2215 : 
; 2216 : 		set_2d_window_rotation (mfd_env, -(air_radar.scan_datum - (air_radar.scan_arc_size * 0.5)));

  005ce	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  005d6	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  005de	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  005e6	f2 0f 5c c1	 subsd	 xmm0, xmm1
  005ea	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  005f1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005f5	51		 push	 ecx
  005f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005fb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00600	50		 push	 eax
  00601	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2217 : 
; 2218 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  00606	b8 04 00 00 00	 mov	 eax, 4
  0060b	6b c8 00	 imul	 ecx, eax, 0
  0060e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00614	52		 push	 edx
  00615	51		 push	 ecx
  00616	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  0061e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00623	51		 push	 ecx
  00624	0f 57 c0	 xorps	 xmm0, xmm0
  00627	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0062c	51		 push	 ecx
  0062d	0f 57 c0	 xorps	 xmm0, xmm0
  00630	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00635	51		 push	 ecx
  00636	0f 57 c0	 xorps	 xmm0, xmm0
  00639	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2219 : 
; 2220 : 		set_2d_window_rotation (mfd_env, -(air_radar.scan_datum + (air_radar.scan_arc_size * 0.5)));

  00643	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  0064b	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+8
  00653	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0065b	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0065f	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00666	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0066a	51		 push	 ecx
  0066b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00670	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00675	50		 push	 eax
  00676	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2221 : 
; 2222 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  0067b	b8 04 00 00 00	 mov	 eax, 4
  00680	6b c8 00	 imul	 ecx, eax, 0
  00683	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00689	52		 push	 edx
  0068a	51		 push	 ecx
  0068b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00693	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00698	51		 push	 ecx
  00699	0f 57 c0	 xorps	 xmm0, xmm0
  0069c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a1	51		 push	 ecx
  006a2	0f 57 c0	 xorps	 xmm0, xmm0
  006a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006aa	51		 push	 ecx
  006ab	0f 57 c0	 xorps	 xmm0, xmm0
  006ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN14@draw_air_r:

; 2223 : 	}
; 2224 : 
; 2225 : 	//
; 2226 : 	// sweep
; 2227 : 	//
; 2228 : 
; 2229 : 	if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_AIR_RADAR)

  006b8	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 2 ; target_acquisition_system
  006bf	75 65		 jne	 SHORT $LN15@draw_air_r

; 2230 : 	{
; 2231 : 		set_2d_window_rotation (mfd_env, -(air_radar.scan_datum + air_radar.sweep_offset));

  006c1	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+4
  006c9	f3 0f 58 05 0c
	00 00 00	 addss	 xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A+12
  006d1	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  006d8	51		 push	 ecx
  006d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  006e3	50		 push	 eax
  006e4	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2232 : 
; 2233 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  006e9	b8 04 00 00 00	 mov	 eax, 4
  006ee	6b c8 00	 imul	 ecx, eax, 0
  006f1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006f7	52		 push	 edx
  006f8	51		 push	 ecx
  006f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00701	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00706	51		 push	 ecx
  00707	0f 57 c0	 xorps	 xmm0, xmm0
  0070a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0070f	51		 push	 ecx
  00710	0f 57 c0	 xorps	 xmm0, xmm0
  00713	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00718	51		 push	 ecx
  00719	0f 57 c0	 xorps	 xmm0, xmm0
  0071c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00721	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN15@draw_air_r:

; 2234 : 	}
; 2235 : 
; 2236 : 	set_2d_window_rotation (mfd_env, 0.0);

  00726	51		 push	 ecx
  00727	0f 57 c0	 xorps	 xmm0, xmm0
  0072a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0072f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00734	50		 push	 eax
  00735	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2237 : 
; 2238 : 	////////////////////////////////////////
; 2239 : 	//
; 2240 : 	// draw targets
; 2241 : 	//
; 2242 : 	////////////////////////////////////////
; 2243 : 
; 2244 : 	if (!blackhawk_damage.radar)

  0073a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  0073f	83 e0 01	 and	 eax, 1
  00742	0f 85 d7 02 00
	00		 jne	 $LN16@draw_air_r

; 2245 : 	{
; 2246 : 		source_heading = get_local_entity_float_value (source, FLOAT_TYPE_HEADING);

  00748	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  0074c	74 0a		 je	 SHORT $LN39@draw_air_r
  0074e	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  00751	8b 08		 mov	 ecx, DWORD PTR [eax]
  00753	89 4d 98	 mov	 DWORD PTR tv328[ebp], ecx
  00756	eb 24		 jmp	 SHORT $LN40@draw_air_r
$LN39@draw_air_r:
  00758	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  0075e	81 c2 a6 00 00
	00		 add	 edx, 166		; 000000a6H
  00764	52		 push	 edx
  00765	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0076a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0076f	50		 push	 eax
  00770	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00775	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv328[ebp], 0
$LN40@draw_air_r:
  0077c	b9 01 00 00 00	 mov	 ecx, 1
  00781	85 c9		 test	 ecx, ecx
  00783	74 09		 je	 SHORT $LN41@draw_air_r
  00785	c7 45 94 34 00
	00 00		 mov	 DWORD PTR tv336[ebp], 52 ; 00000034H
  0078c	eb 24		 jmp	 SHORT $LN42@draw_air_r
$LN41@draw_air_r:
  0078e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00794	81 c2 a6 00 00
	00		 add	 edx, 166		; 000000a6H
  0079a	52		 push	 edx
  0079b	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  007a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  007a5	50		 push	 eax
  007a6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  007ab	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv336[ebp], 0
$LN42@draw_air_r:
  007b2	6a 34		 push	 52			; 00000034H
  007b4	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  007b7	51		 push	 ecx
  007b8	69 55 98 bc 02
	00 00		 imul	 edx, DWORD PTR tv328[ebp], 700
  007bf	8b 45 94	 mov	 eax, DWORD PTR tv336[ebp]
  007c2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  007c9	ff d1		 call	 ecx
  007cb	d9 5d f8	 fstp	 DWORD PTR _source_heading$[ebp]

; 2247 : 
; 2248 : 		set_2d_window_rotation (mfd_env, source_heading);

  007ce	51		 push	 ecx
  007cf	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  007d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  007de	50		 push	 eax
  007df	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2249 : 
; 2250 : 		scale = RADIUS / air_radar.scan_range;

  007e4	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?air_radar@@3URADAR_PARAMS@@A
  007ec	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fe999999999999a
  007f4	f2 0f 5e c8	 divsd	 xmm1, xmm0
  007f8	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  007fc	f3 0f 11 45 f4	 movss	 DWORD PTR _scale$[ebp], xmm0

; 2251 : 
; 2252 : 		target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  00801	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  00805	74 0a		 je	 SHORT $LN43@draw_air_r
  00807	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  0080a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0080c	89 4d 98	 mov	 DWORD PTR tv353[ebp], ecx
  0080f	eb 24		 jmp	 SHORT $LN44@draw_air_r
$LN43@draw_air_r:
  00811	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00817	81 c2 ac 00 00
	00		 add	 edx, 172		; 000000acH
  0081d	52		 push	 edx
  0081e	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00823	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00828	50		 push	 eax
  00829	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0082e	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv353[ebp], 0
$LN44@draw_air_r:
  00835	b9 01 00 00 00	 mov	 ecx, 1
  0083a	85 c9		 test	 ecx, ecx
  0083c	74 09		 je	 SHORT $LN45@draw_air_r
  0083e	c7 45 94 12 00
	00 00		 mov	 DWORD PTR tv361[ebp], 18 ; 00000012H
  00845	eb 24		 jmp	 SHORT $LN46@draw_air_r
$LN45@draw_air_r:
  00847	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  0084d	81 c2 ac 00 00
	00		 add	 edx, 172		; 000000acH
  00853	52		 push	 edx
  00854	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00859	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0085e	50		 push	 eax
  0085f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00864	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv361[ebp], 0
$LN46@draw_air_r:
  0086b	6a 12		 push	 18			; 00000012H
  0086d	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  00870	51		 push	 ecx
  00871	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv353[ebp], 180
  00878	8b 45 94	 mov	 eax, DWORD PTR tv361[ebp]
  0087b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00882	ff d1		 call	 ecx
  00884	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax
$LN2@draw_air_r:

; 2253 : 
; 2254 : 		while (target)

  00887	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  0088b	0f 84 c5 00 00
	00		 je	 $LN3@draw_air_r

; 2255 : 		{
; 2256 : 			if (get_gunship_target_valid_for_air_radar (target))

  00891	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  00894	50		 push	 eax
  00895	e8 00 00 00 00	 call	 ?get_gunship_target_valid_for_air_radar@@YGHPAUENTITY@@@Z ; get_gunship_target_valid_for_air_radar
  0089a	85 c0		 test	 eax, eax
  0089c	74 2d		 je	 SHORT $LN18@draw_air_r

; 2257 : 			{
; 2258 : 				if (get_target_matches_air_radar_declutter_criteria (target, source_side))

  0089e	8b 45 fc	 mov	 eax, DWORD PTR _source_side$[ebp]
  008a1	50		 push	 eax
  008a2	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  008a5	51		 push	 ecx
  008a6	e8 00 00 00 00	 call	 ?get_target_matches_air_radar_declutter_criteria@@YGHPAUENTITY@@W4ENTITY_SIDES@@@Z ; get_target_matches_air_radar_declutter_criteria
  008ab	85 c0		 test	 eax, eax
  008ad	74 1c		 je	 SHORT $LN18@draw_air_r

; 2259 : 				{
; 2260 : 					draw_radar_target_symbol (target, source_position, scale, FALSE, FALSE);

  008af	6a 00		 push	 0
  008b1	6a 00		 push	 0
  008b3	51		 push	 ecx
  008b4	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _scale$[ebp]
  008b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008be	8b 45 e0	 mov	 eax, DWORD PTR _source_position$[ebp]
  008c1	50		 push	 eax
  008c2	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  008c5	51		 push	 ecx
  008c6	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN18@draw_air_r:

; 2261 : 				}
; 2262 : 			}
; 2263 : 
; 2264 : 			target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  008cb	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  008cf	74 0a		 je	 SHORT $LN47@draw_air_r
  008d1	8b 45 e4	 mov	 eax, DWORD PTR _target$[ebp]
  008d4	8b 08		 mov	 ecx, DWORD PTR [eax]
  008d6	89 4d 98	 mov	 DWORD PTR tv386[ebp], ecx
  008d9	eb 24		 jmp	 SHORT $LN48@draw_air_r
$LN47@draw_air_r:
  008db	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  008e1	81 c2 b8 00 00
	00		 add	 edx, 184		; 000000b8H
  008e7	52		 push	 edx
  008e8	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  008ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  008f2	50		 push	 eax
  008f3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008f8	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv386[ebp], 0
$LN48@draw_air_r:
  008ff	b9 01 00 00 00	 mov	 ecx, 1
  00904	85 c9		 test	 ecx, ecx
  00906	74 09		 je	 SHORT $LN49@draw_air_r
  00908	c7 45 94 12 00
	00 00		 mov	 DWORD PTR tv394[ebp], 18 ; 00000012H
  0090f	eb 24		 jmp	 SHORT $LN50@draw_air_r
$LN49@draw_air_r:
  00911	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00917	81 c2 b8 00 00
	00		 add	 edx, 184		; 000000b8H
  0091d	52		 push	 edx
  0091e	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00923	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00928	50		 push	 eax
  00929	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0092e	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv394[ebp], 0
$LN50@draw_air_r:
  00935	6a 12		 push	 18			; 00000012H
  00937	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  0093a	51		 push	 ecx
  0093b	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv386[ebp], 180
  00942	8b 45 94	 mov	 eax, DWORD PTR tv394[ebp]
  00945	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0094c	ff d1		 call	 ecx
  0094e	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax

; 2265 : 		}

  00951	e9 31 ff ff ff	 jmp	 $LN2@draw_air_r
$LN3@draw_air_r:

; 2266 : 
; 2267 : 		//
; 2268 : 		// draw selected target last
; 2269 : 		//
; 2270 : 
; 2271 : 		if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_AIR_RADAR)

  00956	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 2 ; target_acquisition_system
  0095d	0f 85 a8 00 00
	00		 jne	 $LN20@draw_air_r

; 2272 : 		{
; 2273 : 			target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  00963	83 7d e8 00	 cmp	 DWORD PTR _source$[ebp], 0
  00967	74 0a		 je	 SHORT $LN51@draw_air_r
  00969	8b 45 e8	 mov	 eax, DWORD PTR _source$[ebp]
  0096c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0096e	89 4d 98	 mov	 DWORD PTR tv407[ebp], ecx
  00971	eb 24		 jmp	 SHORT $LN52@draw_air_r
$LN51@draw_air_r:
  00973	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  00979	81 c2 c1 00 00
	00		 add	 edx, 193		; 000000c1H
  0097f	52		 push	 edx
  00980	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00985	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0098a	50		 push	 eax
  0098b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00990	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv407[ebp], 0
$LN52@draw_air_r:
  00997	b9 01 00 00 00	 mov	 ecx, 1
  0099c	85 c9		 test	 ecx, ecx
  0099e	74 09		 je	 SHORT $LN53@draw_air_r
  009a0	c7 45 94 26 00
	00 00		 mov	 DWORD PTR tv415[ebp], 38 ; 00000026H
  009a7	eb 24		 jmp	 SHORT $LN54@draw_air_r
$LN53@draw_air_r:
  009a9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_air_radar_mfd@@YGXXZ@4JA
  009af	81 c2 c1 00 00
	00		 add	 edx, 193		; 000000c1H
  009b5	52		 push	 edx
  009b6	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  009bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  009c0	50		 push	 eax
  009c1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009c6	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv415[ebp], 0
$LN54@draw_air_r:
  009cd	6a 26		 push	 38			; 00000026H
  009cf	8b 4d e8	 mov	 ecx, DWORD PTR _source$[ebp]
  009d2	51		 push	 ecx
  009d3	69 55 98 b4 00
	00 00		 imul	 edx, DWORD PTR tv407[ebp], 180
  009da	8b 45 94	 mov	 eax, DWORD PTR tv415[ebp]
  009dd	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  009e4	ff d1		 call	 ecx
  009e6	89 45 e4	 mov	 DWORD PTR _target$[ebp], eax

; 2274 : 
; 2275 : 			if (target)

  009e9	83 7d e4 00	 cmp	 DWORD PTR _target$[ebp], 0
  009ed	74 1c		 je	 SHORT $LN20@draw_air_r

; 2276 : 			{
; 2277 : 				draw_radar_target_symbol (target, source_position, scale, TRUE, FALSE);

  009ef	6a 00		 push	 0
  009f1	6a 01		 push	 1
  009f3	51		 push	 ecx
  009f4	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _scale$[ebp]
  009f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009fe	8b 45 e0	 mov	 eax, DWORD PTR _source_position$[ebp]
  00a01	50		 push	 eax
  00a02	8b 4d e4	 mov	 ecx, DWORD PTR _target$[ebp]
  00a05	51		 push	 ecx
  00a06	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN20@draw_air_r:

; 2278 : 			}
; 2279 : 		}
; 2280 : 
; 2281 : 		set_2d_window_rotation (mfd_env, 0.0);

  00a0b	51		 push	 ecx
  00a0c	0f 57 c0	 xorps	 xmm0, xmm0
  00a0f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a14	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a19	50		 push	 eax
  00a1a	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN16@draw_air_r:

; 2282 : 	}
; 2283 : 
; 2284 : 	////////////////////////////////////////
; 2285 : 	//
; 2286 : 	// damaged
; 2287 : 	//
; 2288 : 	////////////////////////////////////////
; 2289 : 
; 2290 : 	if (blackhawk_damage.radar)

  00a1f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  00a24	83 e0 01	 and	 eax, 1
  00a27	0f 84 98 00 00
	00		 je	 $LN21@draw_air_r

; 2291 : 	{
; 2292 : 		draw_2d_line (-0.5, -0.5,  0.5, 0.5, MFD_COLOUR1);

  00a2d	b8 04 00 00 00	 mov	 eax, 4
  00a32	6b c8 00	 imul	 ecx, eax, 0
  00a35	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a3b	52		 push	 edx
  00a3c	51		 push	 ecx
  00a3d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00a45	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a4a	51		 push	 ecx
  00a4b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00a53	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a58	51		 push	 ecx
  00a59	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00a61	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a66	51		 push	 ecx
  00a67	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00a6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a74	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2293 : 		draw_2d_line ( 0.5, -0.5, -0.5, 0.5, MFD_COLOUR1);

  00a79	b8 04 00 00 00	 mov	 eax, 4
  00a7e	6b c8 00	 imul	 ecx, eax, 0
  00a81	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a87	52		 push	 edx
  00a88	51		 push	 ecx
  00a89	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00a91	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a96	51		 push	 ecx
  00a97	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00a9f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa4	51		 push	 ecx
  00aa5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00aad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ab2	51		 push	 ecx
  00ab3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00abb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN21@draw_air_r:

; 2294 : 	}
; 2295 : }

  00ac5	5f		 pop	 edi
  00ac6	5e		 pop	 esi
  00ac7	5b		 pop	 ebx
  00ac8	8b e5		 mov	 esp, ebp
  00aca	5d		 pop	 ebp
  00acb	c3		 ret	 0
?draw_air_radar_mfd@@YGXXZ ENDP				; draw_air_radar_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_ground_radar_mfd@@YGXXZ
_TEXT	SEGMENT
tv704 = -116						; size = 4
tv514 = -112						; size = 4
tv493 = -112						; size = 4
tv461 = -112						; size = 4
tv343 = -112						; size = 4
tv317 = -112						; size = 4
tv296 = -112						; size = 4
tv215 = -112						; size = 4
tv191 = -112						; size = 4
tv172 = -112						; size = 4
tv130 = -112						; size = 4
tv78 = -112						; size = 4
tv506 = -108						; size = 4
tv485 = -108						; size = 4
tv453 = -108						; size = 4
tv335 = -108						; size = 4
tv309 = -108						; size = 4
tv288 = -108						; size = 4
tv239 = -108						; size = 4
tv207 = -108						; size = 4
tv184 = -108						; size = 4
tv164 = -108						; size = 4
tv90 = -108						; size = 4
tv70 = -108						; size = 4
_target_position$ = -40					; size = 4
_source_position$ = -36					; size = 4
_target$ = -32						; size = 4
_source$ = -28						; size = 4
_target_range$ = -24					; size = 4
_scale$ = -20						; size = 4
_source_heading$ = -16					; size = 4
_v$ = -12						; size = 4
_u$ = -8						; size = 4
_y_adjust$ = -4						; size = 4
?draw_ground_radar_mfd@@YGXXZ PROC			; draw_ground_radar_mfd, COMDAT

; 1767 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1768 : 	float
; 1769 : 		y_adjust,
; 1770 : 		u,
; 1771 : 		v,
; 1772 : 		source_heading,
; 1773 : 		scale,
; 1774 : 		target_range;
; 1775 : 
; 1776 : 	entity
; 1777 : 		*source,
; 1778 : 		*target;
; 1779 : 
; 1780 : 	vec3d
; 1781 : 		*source_position,
; 1782 : 		*target_position;
; 1783 : 
; 1784 : 	source = get_gunship_entity ();

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0000e	89 45 e4	 mov	 DWORD PTR _source$[ebp], eax

; 1785 : 
; 1786 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  00011	83 7d e4 00	 cmp	 DWORD PTR _source$[ebp], 0
  00015	74 0a		 je	 SHORT $LN34@draw_groun
  00017	8b 45 e4	 mov	 eax, DWORD PTR _source$[ebp]
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 4d 94	 mov	 DWORD PTR tv70[ebp], ecx
  0001f	eb 21		 jmp	 SHORT $LN35@draw_groun
$LN34@draw_groun:
  00021	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00027	83 c2 13	 add	 edx, 19			; 00000013H
  0002a	52		 push	 edx
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0003b	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN35@draw_groun:
  00042	b9 01 00 00 00	 mov	 ecx, 1
  00047	85 c9		 test	 ecx, ecx
  00049	74 09		 je	 SHORT $LN36@draw_groun
  0004b	c7 45 90 08 00
	00 00		 mov	 DWORD PTR tv78[ebp], 8
  00052	eb 21		 jmp	 SHORT $LN37@draw_groun
$LN36@draw_groun:
  00054	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  0005a	83 c2 13	 add	 edx, 19			; 00000013H
  0005d	52		 push	 edx
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006e	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN37@draw_groun:
  00075	6a 08		 push	 8
  00077	8b 4d e4	 mov	 ecx, DWORD PTR _source$[ebp]
  0007a	51		 push	 ecx
  0007b	6b 55 94 60	 imul	 edx, DWORD PTR tv70[ebp], 96
  0007f	8b 45 90	 mov	 eax, DWORD PTR tv78[ebp]
  00082	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00089	ff d1		 call	 ecx
  0008b	89 45 dc	 mov	 DWORD PTR _source_position$[ebp], eax

; 1787 : 
; 1788 : 	source_heading = get_local_entity_float_value (source, FLOAT_TYPE_HEADING);

  0008e	83 7d e4 00	 cmp	 DWORD PTR _source$[ebp], 0
  00092	74 0a		 je	 SHORT $LN38@draw_groun
  00094	8b 45 e4	 mov	 eax, DWORD PTR _source$[ebp]
  00097	8b 08		 mov	 ecx, DWORD PTR [eax]
  00099	89 4d 94	 mov	 DWORD PTR tv90[ebp], ecx
  0009c	eb 21		 jmp	 SHORT $LN39@draw_groun
$LN38@draw_groun:
  0009e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  000a4	83 c2 15	 add	 edx, 21			; 00000015H
  000a7	52		 push	 edx
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b8	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN39@draw_groun:
  000bf	b9 01 00 00 00	 mov	 ecx, 1
  000c4	85 c9		 test	 ecx, ecx
  000c6	74 09		 je	 SHORT $LN40@draw_groun
  000c8	c7 45 90 34 00
	00 00		 mov	 DWORD PTR tv130[ebp], 52 ; 00000034H
  000cf	eb 21		 jmp	 SHORT $LN41@draw_groun
$LN40@draw_groun:
  000d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  000d7	83 c2 15	 add	 edx, 21			; 00000015H
  000da	52		 push	 edx
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000eb	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN41@draw_groun:
  000f2	6a 34		 push	 52			; 00000034H
  000f4	8b 4d e4	 mov	 ecx, DWORD PTR _source$[ebp]
  000f7	51		 push	 ecx
  000f8	69 55 94 bc 02
	00 00		 imul	 edx, DWORD PTR tv90[ebp], 700
  000ff	8b 45 90	 mov	 eax, DWORD PTR tv130[ebp]
  00102	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00109	ff d1		 call	 ecx
  0010b	d9 5d f0	 fstp	 DWORD PTR _source_heading$[ebp]

; 1789 : 
; 1790 : 	scale = RADIUS / ground_radar.scan_range;

  0010e	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A
  00116	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff5d3d193333333
  0011e	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00122	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00126	f3 0f 11 45 ec	 movss	 DWORD PTR _scale$[ebp], xmm0

; 1791 : 
; 1792 : 	if (draw_large_mfd)

  0012b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00132	74 26		 je	 SHORT $LN8@draw_groun

; 1793 : 	{
; 1794 : 		get_2d_float_screen_coordinates (0.0, -0.65, &u, &v);

  00134	8d 45 f4	 lea	 eax, DWORD PTR _v$[ebp]
  00137	50		 push	 eax
  00138	8d 4d f8	 lea	 ecx, DWORD PTR _u$[ebp]
  0013b	51		 push	 ecx
  0013c	51		 push	 ecx
  0013d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  00145	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014a	51		 push	 ecx
  0014b	0f 57 c0	 xorps	 xmm0, xmm0
  0014e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00153	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 1795 : 	}
; 1796 : 	else

  00158	eb 24		 jmp	 SHORT $LN9@draw_groun
$LN8@draw_groun:

; 1797 : 	{
; 1798 : 		get_2d_float_screen_coordinates (0.0, -0.7, &u, &v);

  0015a	8d 45 f4	 lea	 eax, DWORD PTR _v$[ebp]
  0015d	50		 push	 eax
  0015e	8d 4d f8	 lea	 ecx, DWORD PTR _u$[ebp]
  00161	51		 push	 ecx
  00162	51		 push	 ecx
  00163	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  0016b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00170	51		 push	 ecx
  00171	0f 57 c0	 xorps	 xmm0, xmm0
  00174	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00179	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates
$LN9@draw_groun:

; 1799 : 	}
; 1800 : 
; 1801 : 	u -= mfd_viewport_x_min;

  0017e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _u$[ebp]
  00183	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0018b	f3 0f 11 45 f8	 movss	 DWORD PTR _u$[ebp], xmm0

; 1802 : 	v -= mfd_viewport_y_min;

  00190	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _v$[ebp]
  00195	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0019d	f3 0f 11 45 f4	 movss	 DWORD PTR _v$[ebp], xmm0

; 1803 : 
; 1804 : 	////////////////////////////////////////
; 1805 : 	//
; 1806 : 	// draw radar clutter
; 1807 : 	//
; 1808 : 	////////////////////////////////////////
; 1809 : 
; 1810 : 	if (!blackhawk_damage.radar)

  001a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  001a7	83 e0 01	 and	 eax, 1
  001aa	0f 85 38 02 00
	00		 jne	 $LN10@draw_groun

; 1811 : 	{
; 1812 : 		set_hatched_pattern (radar_clutter_hatch_pattern);

  001b0	68 00 00 00 00	 push	 OFFSET ?radar_clutter_hatch_pattern@@3PAIA ; radar_clutter_hatch_pattern
  001b5	e8 00 00 00 00	 call	 ?set_hatched_pattern@@YGXPAI@Z ; set_hatched_pattern

; 1813 : 
; 1814 : 		set_2d_viewport_origin (mfd_env, u, v);

  001ba	51		 push	 ecx
  001bb	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _v$[ebp]
  001c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c5	51		 push	 ecx
  001c6	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _u$[ebp]
  001cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001d5	50		 push	 eax
  001d6	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 1815 : 
; 1816 : 		set_2d_window_rotation (mfd_env, source_heading);

  001db	51		 push	 ecx
  001dc	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  001e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001eb	50		 push	 eax
  001ec	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 1817 : 
; 1818 : 		target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  001f1	83 7d e4 00	 cmp	 DWORD PTR _source$[ebp], 0
  001f5	74 0a		 je	 SHORT $LN42@draw_groun
  001f7	8b 45 e4	 mov	 eax, DWORD PTR _source$[ebp]
  001fa	8b 08		 mov	 ecx, DWORD PTR [eax]
  001fc	89 4d 94	 mov	 DWORD PTR tv164[ebp], ecx
  001ff	eb 21		 jmp	 SHORT $LN43@draw_groun
$LN42@draw_groun:
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00207	83 c2 33	 add	 edx, 51			; 00000033H
  0020a	52		 push	 edx
  0020b	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00210	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00215	50		 push	 eax
  00216	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0021b	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv164[ebp], 0
$LN43@draw_groun:
  00222	b9 01 00 00 00	 mov	 ecx, 1
  00227	85 c9		 test	 ecx, ecx
  00229	74 09		 je	 SHORT $LN44@draw_groun
  0022b	c7 45 90 12 00
	00 00		 mov	 DWORD PTR tv172[ebp], 18 ; 00000012H
  00232	eb 21		 jmp	 SHORT $LN45@draw_groun
$LN44@draw_groun:
  00234	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  0023a	83 c2 33	 add	 edx, 51			; 00000033H
  0023d	52		 push	 edx
  0023e	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00243	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00248	50		 push	 eax
  00249	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0024e	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv172[ebp], 0
$LN45@draw_groun:
  00255	6a 12		 push	 18			; 00000012H
  00257	8b 4d e4	 mov	 ecx, DWORD PTR _source$[ebp]
  0025a	51		 push	 ecx
  0025b	69 55 94 b4 00
	00 00		 imul	 edx, DWORD PTR tv164[ebp], 180
  00262	8b 45 90	 mov	 eax, DWORD PTR tv172[ebp]
  00265	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0026c	ff d1		 call	 ecx
  0026e	89 45 e0	 mov	 DWORD PTR _target$[ebp], eax
$LN2@draw_groun:

; 1819 : 
; 1820 : 		while (target)

  00271	83 7d e0 00	 cmp	 DWORD PTR _target$[ebp], 0
  00275	0f 84 16 01 00
	00		 je	 $LN3@draw_groun

; 1821 : 		{
; 1822 : 			if (get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  0027b	83 7d e0 00	 cmp	 DWORD PTR _target$[ebp], 0
  0027f	74 0a		 je	 SHORT $LN46@draw_groun
  00281	8b 45 e0	 mov	 eax, DWORD PTR _target$[ebp]
  00284	8b 08		 mov	 ecx, DWORD PTR [eax]
  00286	89 4d 94	 mov	 DWORD PTR tv184[ebp], ecx
  00289	eb 1d		 jmp	 SHORT $LN47@draw_groun
$LN46@draw_groun:
  0028b	68 1e 07 00 00	 push	 1822			; 0000071eH
  00290	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00295	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0029b	52		 push	 edx
  0029c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002a1	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv184[ebp], 0
$LN47@draw_groun:
  002a8	b8 01 00 00 00	 mov	 eax, 1
  002ad	85 c0		 test	 eax, eax
  002af	74 09		 je	 SHORT $LN48@draw_groun
  002b1	c7 45 90 42 00
	00 00		 mov	 DWORD PTR tv191[ebp], 66 ; 00000042H
  002b8	eb 1d		 jmp	 SHORT $LN49@draw_groun
$LN48@draw_groun:
  002ba	68 1e 07 00 00	 push	 1822			; 0000071eH
  002bf	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  002c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  002ca	51		 push	 ecx
  002cb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002d0	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv191[ebp], 0
$LN49@draw_groun:
  002d7	6a 42		 push	 66			; 00000042H
  002d9	8b 55 e0	 mov	 edx, DWORD PTR _target$[ebp]
  002dc	52		 push	 edx
  002dd	69 45 94 5c 04
	00 00		 imul	 eax, DWORD PTR tv184[ebp], 1116
  002e4	8b 4d 90	 mov	 ecx, DWORD PTR tv191[ebp]
  002e7	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  002ee	ff d2		 call	 edx
  002f0	85 c0		 test	 eax, eax
  002f2	74 18		 je	 SHORT $LN11@draw_groun

; 1823 : 			{
; 1824 : 				draw_ground_radar_clutter (target, source_position, scale);

  002f4	51		 push	 ecx
  002f5	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _scale$[ebp]
  002fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ff	8b 45 dc	 mov	 eax, DWORD PTR _source_position$[ebp]
  00302	50		 push	 eax
  00303	8b 4d e0	 mov	 ecx, DWORD PTR _target$[ebp]
  00306	51		 push	 ecx
  00307	e8 00 00 00 00	 call	 ?draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z ; draw_ground_radar_clutter
$LN11@draw_groun:

; 1825 : 			}
; 1826 : 
; 1827 : 			target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  0030c	83 7d e0 00	 cmp	 DWORD PTR _target$[ebp], 0
  00310	74 0a		 je	 SHORT $LN50@draw_groun
  00312	8b 45 e0	 mov	 eax, DWORD PTR _target$[ebp]
  00315	8b 08		 mov	 ecx, DWORD PTR [eax]
  00317	89 4d 94	 mov	 DWORD PTR tv207[ebp], ecx
  0031a	eb 21		 jmp	 SHORT $LN51@draw_groun
$LN50@draw_groun:
  0031c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00322	83 c2 3c	 add	 edx, 60			; 0000003cH
  00325	52		 push	 edx
  00326	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0032b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00330	50		 push	 eax
  00331	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00336	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv207[ebp], 0
$LN51@draw_groun:
  0033d	b9 01 00 00 00	 mov	 ecx, 1
  00342	85 c9		 test	 ecx, ecx
  00344	74 09		 je	 SHORT $LN52@draw_groun
  00346	c7 45 90 12 00
	00 00		 mov	 DWORD PTR tv215[ebp], 18 ; 00000012H
  0034d	eb 21		 jmp	 SHORT $LN53@draw_groun
$LN52@draw_groun:
  0034f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00355	83 c2 3c	 add	 edx, 60			; 0000003cH
  00358	52		 push	 edx
  00359	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0035e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00363	50		 push	 eax
  00364	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00369	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv215[ebp], 0
$LN53@draw_groun:
  00370	6a 12		 push	 18			; 00000012H
  00372	8b 4d e0	 mov	 ecx, DWORD PTR _target$[ebp]
  00375	51		 push	 ecx
  00376	69 55 94 b4 00
	00 00		 imul	 edx, DWORD PTR tv207[ebp], 180
  0037d	8b 45 90	 mov	 eax, DWORD PTR tv215[ebp]
  00380	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00387	ff d1		 call	 ecx
  00389	89 45 e0	 mov	 DWORD PTR _target$[ebp], eax

; 1828 : 		}

  0038c	e9 e0 fe ff ff	 jmp	 $LN2@draw_groun
$LN3@draw_groun:

; 1829 : 
; 1830 : 		set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00391	51		 push	 ecx
  00392	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0039a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039f	51		 push	 ecx
  003a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  003a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ad	51		 push	 ecx
  003ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  003b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003bb	51		 push	 ecx
  003bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  003c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  003ce	50		 push	 eax
  003cf	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1831 : 
; 1832 : 		set_2d_window_rotation (mfd_env, 0.0);

  003d4	51		 push	 ecx
  003d5	0f 57 c0	 xorps	 xmm0, xmm0
  003d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  003e2	50		 push	 eax
  003e3	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN10@draw_groun:

; 1833 : 	}
; 1834 : 
; 1835 : 	////////////////////////////////////////
; 1836 : 	//
; 1837 : 	// text
; 1838 : 	//
; 1839 : 	////////////////////////////////////////
; 1840 : 
; 1841 : 	set_mono_font_colour (MFD_COLOUR1);

  003e8	b8 04 00 00 00	 mov	 eax, 4
  003ed	6b c8 00	 imul	 ecx, eax, 0
  003f0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003f6	52		 push	 edx
  003f7	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 1842 : 
; 1843 : 	if (draw_large_mfd)

  003fc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00403	74 09		 je	 SHORT $LN12@draw_groun

; 1844 : 	{
; 1845 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  00405	6a 05		 push	 5
  00407	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1846 : 	}
; 1847 : 	else

  0040c	eb 07		 jmp	 SHORT $LN13@draw_groun
$LN12@draw_groun:

; 1848 : 	{
; 1849 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  0040e	6a 01		 push	 1
  00410	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN13@draw_groun:

; 1850 : 	}
; 1851 : 
; 1852 : 	//
; 1853 : 	// declutter status
; 1854 : 	//
; 1855 : 
; 1856 : 	if (draw_large_mfd)

  00415	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0041c	74 0f		 je	 SHORT $LN14@draw_groun

; 1857 : 	{
; 1858 : 		y_adjust = 5.0;

  0041e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  00426	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1859 : 	}
; 1860 : 	else

  0042b	eb 0d		 jmp	 SHORT $LN15@draw_groun
$LN14@draw_groun:

; 1861 : 	{
; 1862 : 		y_adjust = 2.0;

  0042d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00435	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN15@draw_groun:

; 1863 : 	}
; 1864 : 
; 1865 : 	set_2d_mono_font_position (-0.8, 1.0);

  0043a	51		 push	 ecx
  0043b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00443	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00448	51		 push	 ecx
  00449	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00451	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00456	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1866 : 
; 1867 : 	set_mono_font_rel_position (1.0, y_adjust);

  0045b	51		 push	 ecx
  0045c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00461	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00466	51		 push	 ecx
  00467	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0046f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00474	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1868 : 
; 1869 : 	switch (ground_radar.target_priority_type)

  00479	a1 2c 00 00 00	 mov	 eax, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+44
  0047e	89 45 94	 mov	 DWORD PTR tv239[ebp], eax
  00481	83 7d 94 04	 cmp	 DWORD PTR tv239[ebp], 4
  00485	77 59		 ja	 SHORT $LN4@draw_groun
  00487	8b 4d 94	 mov	 ecx, DWORD PTR tv239[ebp]
  0048a	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN78@draw_groun[ecx*4]
$LN16@draw_groun:

; 1870 : 	{
; 1871 : 		case TARGET_PRIORITY_UNKNOWN:
; 1872 : 		{
; 1873 : 			print_mono_font_string ("ALL");

  00491	68 00 00 00 00	 push	 OFFSET ??_C@_03NIFPGLBG@ALL@
  00496	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1874 : 
; 1875 : 			break;

  0049b	eb 43		 jmp	 SHORT $LN4@draw_groun
$LN17@draw_groun:

; 1876 : 		}
; 1877 : 		case TARGET_PRIORITY_LOW:
; 1878 : 		{
; 1879 : 			print_mono_font_string ("LOW");

  0049d	68 00 00 00 00	 push	 OFFSET ??_C@_03IBEFMGAI@LOW@
  004a2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1880 : 
; 1881 : 			break;

  004a7	eb 37		 jmp	 SHORT $LN4@draw_groun
$LN18@draw_groun:

; 1882 : 		}
; 1883 : 		case TARGET_PRIORITY_MEDIUM:
; 1884 : 		{
; 1885 : 			if (draw_large_mfd)

  004a9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  004b0	74 0c		 je	 SHORT $LN19@draw_groun

; 1886 : 			{
; 1887 : 				print_mono_font_string ("MEDIUM");

  004b2	68 00 00 00 00	 push	 OFFSET ??_C@_06HMBFJLMK@MEDIUM@
  004b7	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1888 : 			}
; 1889 : 			else

  004bc	eb 0a		 jmp	 SHORT $LN20@draw_groun
$LN19@draw_groun:

; 1890 : 			{
; 1891 : 				print_mono_font_string ("MED");

  004be	68 00 00 00 00	 push	 OFFSET ??_C@_03FFIBGFCJ@MED@
  004c3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN20@draw_groun:

; 1892 : 			}
; 1893 : 
; 1894 : 			break;

  004c8	eb 16		 jmp	 SHORT $LN4@draw_groun
$LN21@draw_groun:

; 1895 : 		}
; 1896 : 		case TARGET_PRIORITY_HIGH:
; 1897 : 		{
; 1898 : 			print_mono_font_string ("HIGH");

  004ca	68 00 00 00 00	 push	 OFFSET ??_C@_04PKDHFCJF@HIGH@
  004cf	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1899 : 
; 1900 : 			break;

  004d4	eb 0a		 jmp	 SHORT $LN4@draw_groun
$LN22@draw_groun:

; 1901 : 		}
; 1902 : 		// Jabberwock 031107 Designated targets
; 1903 : 		case TARGET_PRIORITY_DESIGNATED:
; 1904 : 		{
; 1905 : 			print_mono_font_string ("MARK");

  004d6	68 00 00 00 00	 push	 OFFSET ??_C@_04MGKDMHFC@MARK@
  004db	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN4@draw_groun:

; 1906 : 
; 1907 : 			break;
; 1908 : 		}
; 1909 : 		// Jabberwock 031107 ends	
; 1910 : 	}
; 1911 : 	//
; 1912 : 	// scan range
; 1913 : 	//
; 1914 : 
; 1915 : 	display_radar_scan_range (ground_radar.scan_range);

  004e0	51		 push	 ecx
  004e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A
  004e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ee	e8 00 00 00 00	 call	 ?display_radar_scan_range@@YGXM@Z ; display_radar_scan_range

; 1916 : 
; 1917 : 	//
; 1918 : 	// target details
; 1919 : 	//
; 1920 : 
; 1921 : 	if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_GROUND_RADAR)

  004f3	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 1 ; target_acquisition_system
  004fa	0f 85 46 01 00
	00		 jne	 $LN23@draw_groun

; 1922 : 	{
; 1923 : 		target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  00500	83 7d e4 00	 cmp	 DWORD PTR _source$[ebp], 0
  00504	74 0a		 je	 SHORT $LN54@draw_groun
  00506	8b 45 e4	 mov	 eax, DWORD PTR _source$[ebp]
  00509	8b 08		 mov	 ecx, DWORD PTR [eax]
  0050b	89 4d 94	 mov	 DWORD PTR tv288[ebp], ecx
  0050e	eb 24		 jmp	 SHORT $LN55@draw_groun
$LN54@draw_groun:
  00510	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00516	81 c2 9c 00 00
	00		 add	 edx, 156		; 0000009cH
  0051c	52		 push	 edx
  0051d	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00522	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00527	50		 push	 eax
  00528	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0052d	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv288[ebp], 0
$LN55@draw_groun:
  00534	b9 01 00 00 00	 mov	 ecx, 1
  00539	85 c9		 test	 ecx, ecx
  0053b	74 09		 je	 SHORT $LN56@draw_groun
  0053d	c7 45 90 26 00
	00 00		 mov	 DWORD PTR tv296[ebp], 38 ; 00000026H
  00544	eb 24		 jmp	 SHORT $LN57@draw_groun
$LN56@draw_groun:
  00546	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  0054c	81 c2 9c 00 00
	00		 add	 edx, 156		; 0000009cH
  00552	52		 push	 edx
  00553	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00558	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0055d	50		 push	 eax
  0055e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00563	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv296[ebp], 0
$LN57@draw_groun:
  0056a	6a 26		 push	 38			; 00000026H
  0056c	8b 4d e4	 mov	 ecx, DWORD PTR _source$[ebp]
  0056f	51		 push	 ecx
  00570	69 55 94 b4 00
	00 00		 imul	 edx, DWORD PTR tv288[ebp], 180
  00577	8b 45 90	 mov	 eax, DWORD PTR tv296[ebp]
  0057a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00581	ff d1		 call	 ecx
  00583	89 45 e0	 mov	 DWORD PTR _target$[ebp], eax

; 1924 : 
; 1925 : 		if (target)

  00586	83 7d e0 00	 cmp	 DWORD PTR _target$[ebp], 0
  0058a	0f 84 95 00 00
	00		 je	 $LN24@draw_groun

; 1926 : 		{
; 1927 : 			target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00590	83 7d e0 00	 cmp	 DWORD PTR _target$[ebp], 0
  00594	74 0a		 je	 SHORT $LN58@draw_groun
  00596	8b 45 e0	 mov	 eax, DWORD PTR _target$[ebp]
  00599	8b 08		 mov	 ecx, DWORD PTR [eax]
  0059b	89 4d 94	 mov	 DWORD PTR tv309[ebp], ecx
  0059e	eb 24		 jmp	 SHORT $LN59@draw_groun
$LN58@draw_groun:
  005a0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  005a6	81 c2 a0 00 00
	00		 add	 edx, 160		; 000000a0H
  005ac	52		 push	 edx
  005ad	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  005b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  005b7	50		 push	 eax
  005b8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005bd	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv309[ebp], 0
$LN59@draw_groun:
  005c4	b9 01 00 00 00	 mov	 ecx, 1
  005c9	85 c9		 test	 ecx, ecx
  005cb	74 09		 je	 SHORT $LN60@draw_groun
  005cd	c7 45 90 08 00
	00 00		 mov	 DWORD PTR tv317[ebp], 8
  005d4	eb 24		 jmp	 SHORT $LN61@draw_groun
$LN60@draw_groun:
  005d6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  005dc	81 c2 a0 00 00
	00		 add	 edx, 160		; 000000a0H
  005e2	52		 push	 edx
  005e3	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  005e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  005ed	50		 push	 eax
  005ee	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005f3	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv317[ebp], 0
$LN61@draw_groun:
  005fa	6a 08		 push	 8
  005fc	8b 4d e0	 mov	 ecx, DWORD PTR _target$[ebp]
  005ff	51		 push	 ecx
  00600	6b 55 94 60	 imul	 edx, DWORD PTR tv309[ebp], 96
  00604	8b 45 90	 mov	 eax, DWORD PTR tv317[ebp]
  00607	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0060e	ff d1		 call	 ecx
  00610	89 45 d8	 mov	 DWORD PTR _target_position$[ebp], eax

; 1928 : 
; 1929 : 			target_range = get_3d_range (source_position, target_position);

  00613	8b 45 d8	 mov	 eax, DWORD PTR _target_position$[ebp]
  00616	50		 push	 eax
  00617	8b 4d dc	 mov	 ecx, DWORD PTR _source_position$[ebp]
  0061a	51		 push	 ecx
  0061b	e8 00 00 00 00	 call	 ?get_3d_range@@YGMPBUVEC3D@@0@Z ; get_3d_range
  00620	d9 5d e8	 fstp	 DWORD PTR _target_range$[ebp]

; 1930 : 		}
; 1931 : 		else

  00623	eb 08		 jmp	 SHORT $LN25@draw_groun
$LN24@draw_groun:

; 1932 : 		{
; 1933 : 			target_range = 0.0;

  00625	0f 57 c0	 xorps	 xmm0, xmm0
  00628	f3 0f 11 45 e8	 movss	 DWORD PTR _target_range$[ebp], xmm0
$LN25@draw_groun:

; 1934 : 		}
; 1935 : 
; 1936 : 		display_radar_target_details (target, target_range, &ground_radar);

  0062d	68 00 00 00 00	 push	 OFFSET ?ground_radar@@3URADAR_PARAMS@@A ; ground_radar
  00632	51		 push	 ecx
  00633	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _target_range$[ebp]
  00638	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063d	8b 45 e0	 mov	 eax, DWORD PTR _target$[ebp]
  00640	50		 push	 eax
  00641	e8 00 00 00 00	 call	 ?display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z ; display_radar_target_details
$LN23@draw_groun:

; 1937 : 	}
; 1938 : 
; 1939 : 	////////////////////////////////////////
; 1940 : 	//
; 1941 : 	// draw heading scale
; 1942 : 	//
; 1943 : 	////////////////////////////////////////
; 1944 : 
; 1945 : 	draw_heading_scale (get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_HEADING));

  00646	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0064d	74 0c		 je	 SHORT $LN62@draw_groun
  0064f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00654	8b 08		 mov	 ecx, DWORD PTR [eax]
  00656	89 4d 94	 mov	 DWORD PTR tv335[ebp], ecx
  00659	eb 24		 jmp	 SHORT $LN63@draw_groun
$LN62@draw_groun:
  0065b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00661	81 c2 b2 00 00
	00		 add	 edx, 178		; 000000b2H
  00667	52		 push	 edx
  00668	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0066d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00672	50		 push	 eax
  00673	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00678	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv335[ebp], 0
$LN63@draw_groun:
  0067f	b9 01 00 00 00	 mov	 ecx, 1
  00684	85 c9		 test	 ecx, ecx
  00686	74 09		 je	 SHORT $LN64@draw_groun
  00688	c7 45 90 34 00
	00 00		 mov	 DWORD PTR tv343[ebp], 52 ; 00000034H
  0068f	eb 24		 jmp	 SHORT $LN65@draw_groun
$LN64@draw_groun:
  00691	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00697	81 c2 b2 00 00
	00		 add	 edx, 178		; 000000b2H
  0069d	52		 push	 edx
  0069e	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  006a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  006a8	50		 push	 eax
  006a9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006ae	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv343[ebp], 0
$LN65@draw_groun:
  006b5	6a 34		 push	 52			; 00000034H
  006b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  006bd	51		 push	 ecx
  006be	69 55 94 bc 02
	00 00		 imul	 edx, DWORD PTR tv335[ebp], 700
  006c5	8b 45 90	 mov	 eax, DWORD PTR tv343[ebp]
  006c8	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  006cf	ff d1		 call	 ecx
  006d1	d9 5d 8c	 fstp	 DWORD PTR tv704[ebp]
  006d4	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR tv704[ebp]
  006d9	51		 push	 ecx
  006da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006df	e8 00 00 00 00	 call	 ?draw_heading_scale@@YGXM@Z ; draw_heading_scale

; 1946 : 
; 1947 : 	////////////////////////////////////////
; 1948 : 	//
; 1949 : 	// draw field of regard and view boxes
; 1950 : 	//
; 1951 : 	////////////////////////////////////////
; 1952 : 
; 1953 : 	draw_field_of_regard_and_view_boxes ();

  006e4	e8 00 00 00 00	 call	 ?draw_field_of_regard_and_view_boxes@@YGXXZ ; draw_field_of_regard_and_view_boxes

; 1954 : 
; 1955 : 	////////////////////////////////////////
; 1956 : 	//
; 1957 : 	// line graphics
; 1958 : 	//
; 1959 : 	////////////////////////////////////////
; 1960 : 
; 1961 : 	set_2d_viewport_origin (mfd_env, u, v);

  006e9	51		 push	 ecx
  006ea	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _v$[ebp]
  006ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f4	51		 push	 ecx
  006f5	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _u$[ebp]
  006fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00704	50		 push	 eax
  00705	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 1962 : 
; 1963 : 	//
; 1964 : 	// max scan limits
; 1965 : 	//
; 1966 : 
; 1967 : 	draw_2d_line (0.0, 0.0, -0.965, 0.965, MFD_COLOUR4);

  0070a	b8 04 00 00 00	 mov	 eax, 4
  0070f	6b c8 03	 imul	 ecx, eax, 3
  00712	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00718	52		 push	 edx
  00719	51		 push	 ecx
  0071a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f770a3d
  00722	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00727	51		 push	 ecx
  00728	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf770a3d
  00730	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00735	51		 push	 ecx
  00736	0f 57 c0	 xorps	 xmm0, xmm0
  00739	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0073e	51		 push	 ecx
  0073f	0f 57 c0	 xorps	 xmm0, xmm0
  00742	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00747	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1968 : 
; 1969 : 	draw_2d_line (0.0, 0.0, 0.965, 0.965, MFD_COLOUR4);

  0074c	b8 04 00 00 00	 mov	 eax, 4
  00751	6b c8 03	 imul	 ecx, eax, 3
  00754	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0075a	52		 push	 edx
  0075b	51		 push	 ecx
  0075c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f770a3d
  00764	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00769	51		 push	 ecx
  0076a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f770a3d
  00772	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00777	51		 push	 ecx
  00778	0f 57 c0	 xorps	 xmm0, xmm0
  0077b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00780	51		 push	 ecx
  00781	0f 57 c0	 xorps	 xmm0, xmm0
  00784	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00789	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1970 : 
; 1971 : 	draw_radar_arc (APACHE_RADAR_SCAN_ARC_SIZE_90, RADIUS, MFD_COLOUR4);

  0078e	b8 04 00 00 00	 mov	 eax, 4
  00793	6b c8 03	 imul	 ecx, eax, 3
  00796	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0079c	52		 push	 edx
  0079d	51		 push	 ecx
  0079e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fae9e8d
  007a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ab	51		 push	 ecx
  007ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  007b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b9	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 1972 : 
; 1973 : 	//
; 1974 : 	// scan limits and range markers
; 1975 : 	//
; 1976 : 
; 1977 : 	set_2d_window_rotation (mfd_env, -ground_radar.scan_datum);

  007be	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  007c6	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  007cd	51		 push	 ecx
  007ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  007d8	50		 push	 eax
  007d9	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 1978 : 
; 1979 : 	draw_radar_arc (ground_radar.scan_arc_size, RADIUS, MFD_COLOUR1);

  007de	b8 04 00 00 00	 mov	 eax, 4
  007e3	6b c8 00	 imul	 ecx, eax, 0
  007e6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007ec	52		 push	 edx
  007ed	51		 push	 ecx
  007ee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fae9e8d
  007f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007fb	51		 push	 ecx
  007fc	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  00804	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00809	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 1980 : 
; 1981 : 	draw_radar_arc (ground_radar.scan_arc_size, RADIUS * 0.25, MFD_COLOUR4);

  0080e	b8 04 00 00 00	 mov	 eax, 4
  00813	6b c8 03	 imul	 ecx, eax, 3
  00816	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0081c	52		 push	 edx
  0081d	51		 push	 ecx
  0081e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eae9e8d
  00826	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0082b	51		 push	 ecx
  0082c	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  00834	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00839	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 1982 : 	draw_radar_arc (ground_radar.scan_arc_size, RADIUS * 0.50, MFD_COLOUR4);

  0083e	b8 04 00 00 00	 mov	 eax, 4
  00843	6b c8 03	 imul	 ecx, eax, 3
  00846	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0084c	52		 push	 edx
  0084d	51		 push	 ecx
  0084e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f2e9e8d
  00856	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0085b	51		 push	 ecx
  0085c	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  00864	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00869	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 1983 : 	draw_radar_arc (ground_radar.scan_arc_size, RADIUS * 0.75, MFD_COLOUR4);

  0086e	b8 04 00 00 00	 mov	 eax, 4
  00873	6b c8 03	 imul	 ecx, eax, 3
  00876	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0087c	52		 push	 edx
  0087d	51		 push	 ecx
  0087e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f82f6e9
  00886	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0088b	51		 push	 ecx
  0088c	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  00894	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00899	e8 00 00 00 00	 call	 ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ; draw_radar_arc

; 1984 : 
; 1985 : 	set_2d_window_rotation (mfd_env, -(ground_radar.scan_datum - (ground_radar.scan_arc_size * 0.5)));

  0089e	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  008a6	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  008ae	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  008b6	f2 0f 5c c1	 subsd	 xmm0, xmm1
  008ba	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  008c1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  008c5	51		 push	 ecx
  008c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  008d0	50		 push	 eax
  008d1	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 1986 : 
; 1987 : 	draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  008d6	b8 04 00 00 00	 mov	 eax, 4
  008db	6b c8 00	 imul	 ecx, eax, 0
  008de	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008e4	52		 push	 edx
  008e5	51		 push	 ecx
  008e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fae9e8d
  008ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f3	51		 push	 ecx
  008f4	0f 57 c0	 xorps	 xmm0, xmm0
  008f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008fc	51		 push	 ecx
  008fd	0f 57 c0	 xorps	 xmm0, xmm0
  00900	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00905	51		 push	 ecx
  00906	0f 57 c0	 xorps	 xmm0, xmm0
  00909	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0090e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1988 : 
; 1989 : 	set_2d_window_rotation (mfd_env, -(ground_radar.scan_datum + (ground_radar.scan_arc_size * 0.5)));

  00913	f3 0f 5a 05 04
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  0091b	f3 0f 5a 0d 08
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+8
  00923	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0092b	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0092f	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00936	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0093a	51		 push	 ecx
  0093b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00940	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00945	50		 push	 eax
  00946	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 1990 : 
; 1991 : 	draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  0094b	b8 04 00 00 00	 mov	 eax, 4
  00950	6b c8 00	 imul	 ecx, eax, 0
  00953	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00959	52		 push	 edx
  0095a	51		 push	 ecx
  0095b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fae9e8d
  00963	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00968	51		 push	 ecx
  00969	0f 57 c0	 xorps	 xmm0, xmm0
  0096c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00971	51		 push	 ecx
  00972	0f 57 c0	 xorps	 xmm0, xmm0
  00975	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0097a	51		 push	 ecx
  0097b	0f 57 c0	 xorps	 xmm0, xmm0
  0097e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00983	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1992 : 
; 1993 : 	//
; 1994 : 	// sweep
; 1995 : 	//
; 1996 : 
; 1997 : 	if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_GROUND_RADAR)

  00988	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 1 ; target_acquisition_system
  0098f	75 65		 jne	 SHORT $LN26@draw_groun

; 1998 : 	{
; 1999 : 		set_2d_window_rotation (mfd_env, -(ground_radar.scan_datum + ground_radar.sweep_offset));

  00991	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+4
  00999	f3 0f 58 05 0c
	00 00 00	 addss	 xmm0, DWORD PTR ?ground_radar@@3URADAR_PARAMS@@A+12
  009a1	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  009a8	51		 push	 ecx
  009a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  009b3	50		 push	 eax
  009b4	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2000 : 
; 2001 : 		draw_2d_line (0.0, 0.0, 0.0, RADIUS, MFD_COLOUR1);

  009b9	b8 04 00 00 00	 mov	 eax, 4
  009be	6b c8 00	 imul	 ecx, eax, 0
  009c1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009c7	52		 push	 edx
  009c8	51		 push	 ecx
  009c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fae9e8d
  009d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009d6	51		 push	 ecx
  009d7	0f 57 c0	 xorps	 xmm0, xmm0
  009da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009df	51		 push	 ecx
  009e0	0f 57 c0	 xorps	 xmm0, xmm0
  009e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009e8	51		 push	 ecx
  009e9	0f 57 c0	 xorps	 xmm0, xmm0
  009ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009f1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN26@draw_groun:

; 2002 : 	}
; 2003 : 
; 2004 : 	set_2d_window_rotation (mfd_env, 0.0);

  009f6	51		 push	 ecx
  009f7	0f 57 c0	 xorps	 xmm0, xmm0
  009fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a04	50		 push	 eax
  00a05	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2005 : 
; 2006 : 	////////////////////////////////////////
; 2007 : 	//
; 2008 : 	// targets
; 2009 : 	//
; 2010 : 	////////////////////////////////////////
; 2011 : 
; 2012 : 	if (!blackhawk_damage.radar)

  00a0a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  00a0f	83 e0 01	 and	 eax, 1
  00a12	0f 85 30 02 00
	00		 jne	 $LN27@draw_groun

; 2013 : 	{
; 2014 : 		set_2d_window_rotation (mfd_env, source_heading);

  00a18	51		 push	 ecx
  00a19	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  00a1e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a23	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a28	50		 push	 eax
  00a29	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2015 : 
; 2016 : 		target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  00a2e	83 7d e4 00	 cmp	 DWORD PTR _source$[ebp], 0
  00a32	74 0a		 je	 SHORT $LN66@draw_groun
  00a34	8b 45 e4	 mov	 eax, DWORD PTR _source$[ebp]
  00a37	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a39	89 4d 94	 mov	 DWORD PTR tv453[ebp], ecx
  00a3c	eb 24		 jmp	 SHORT $LN67@draw_groun
$LN66@draw_groun:
  00a3e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00a44	81 c2 f9 00 00
	00		 add	 edx, 249		; 000000f9H
  00a4a	52		 push	 edx
  00a4b	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a50	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00a55	50		 push	 eax
  00a56	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a5b	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv453[ebp], 0
$LN67@draw_groun:
  00a62	b9 01 00 00 00	 mov	 ecx, 1
  00a67	85 c9		 test	 ecx, ecx
  00a69	74 09		 je	 SHORT $LN68@draw_groun
  00a6b	c7 45 90 12 00
	00 00		 mov	 DWORD PTR tv461[ebp], 18 ; 00000012H
  00a72	eb 24		 jmp	 SHORT $LN69@draw_groun
$LN68@draw_groun:
  00a74	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00a7a	81 c2 f9 00 00
	00		 add	 edx, 249		; 000000f9H
  00a80	52		 push	 edx
  00a81	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a86	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00a8b	50		 push	 eax
  00a8c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a91	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv461[ebp], 0
$LN69@draw_groun:
  00a98	6a 12		 push	 18			; 00000012H
  00a9a	8b 4d e4	 mov	 ecx, DWORD PTR _source$[ebp]
  00a9d	51		 push	 ecx
  00a9e	69 55 94 b4 00
	00 00		 imul	 edx, DWORD PTR tv453[ebp], 180
  00aa5	8b 45 90	 mov	 eax, DWORD PTR tv461[ebp]
  00aa8	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00aaf	ff d1		 call	 ecx
  00ab1	89 45 e0	 mov	 DWORD PTR _target$[ebp], eax
$LN6@draw_groun:

; 2017 : 
; 2018 : 		while (target)

  00ab4	83 7d e0 00	 cmp	 DWORD PTR _target$[ebp], 0
  00ab8	0f 84 c1 00 00
	00		 je	 $LN7@draw_groun

; 2019 : 		{
; 2020 : 			if (get_gunship_target_valid_for_ground_radar (target))

  00abe	8b 45 e0	 mov	 eax, DWORD PTR _target$[ebp]
  00ac1	50		 push	 eax
  00ac2	e8 00 00 00 00	 call	 ?get_gunship_target_valid_for_ground_radar@@YGHPAUENTITY@@@Z ; get_gunship_target_valid_for_ground_radar
  00ac7	85 c0		 test	 eax, eax
  00ac9	74 29		 je	 SHORT $LN29@draw_groun

; 2021 : 			{
; 2022 : 				if (get_target_matches_ground_radar_declutter_criteria (target))

  00acb	8b 45 e0	 mov	 eax, DWORD PTR _target$[ebp]
  00ace	50		 push	 eax
  00acf	e8 00 00 00 00	 call	 ?get_target_matches_ground_radar_declutter_criteria@@YGHPAUENTITY@@@Z ; get_target_matches_ground_radar_declutter_criteria
  00ad4	85 c0		 test	 eax, eax
  00ad6	74 1c		 je	 SHORT $LN29@draw_groun

; 2023 : 				{
; 2024 : 					draw_radar_target_symbol (target, source_position, scale, FALSE, FALSE);

  00ad8	6a 00		 push	 0
  00ada	6a 00		 push	 0
  00adc	51		 push	 ecx
  00add	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00ae2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ae7	8b 45 dc	 mov	 eax, DWORD PTR _source_position$[ebp]
  00aea	50		 push	 eax
  00aeb	8b 4d e0	 mov	 ecx, DWORD PTR _target$[ebp]
  00aee	51		 push	 ecx
  00aef	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN29@draw_groun:

; 2025 : 				}
; 2026 : 			}
; 2027 : 
; 2028 : 			target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  00af4	83 7d e0 00	 cmp	 DWORD PTR _target$[ebp], 0
  00af8	74 0a		 je	 SHORT $LN70@draw_groun
  00afa	8b 45 e0	 mov	 eax, DWORD PTR _target$[ebp]
  00afd	8b 08		 mov	 ecx, DWORD PTR [eax]
  00aff	89 4d 94	 mov	 DWORD PTR tv485[ebp], ecx
  00b02	eb 24		 jmp	 SHORT $LN71@draw_groun
$LN70@draw_groun:
  00b04	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00b0a	81 c2 05 01 00
	00		 add	 edx, 261		; 00000105H
  00b10	52		 push	 edx
  00b11	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b16	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00b1b	50		 push	 eax
  00b1c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b21	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv485[ebp], 0
$LN71@draw_groun:
  00b28	b9 01 00 00 00	 mov	 ecx, 1
  00b2d	85 c9		 test	 ecx, ecx
  00b2f	74 09		 je	 SHORT $LN72@draw_groun
  00b31	c7 45 90 12 00
	00 00		 mov	 DWORD PTR tv493[ebp], 18 ; 00000012H
  00b38	eb 24		 jmp	 SHORT $LN73@draw_groun
$LN72@draw_groun:
  00b3a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00b40	81 c2 05 01 00
	00		 add	 edx, 261		; 00000105H
  00b46	52		 push	 edx
  00b47	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b4c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00b51	50		 push	 eax
  00b52	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b57	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv493[ebp], 0
$LN73@draw_groun:
  00b5e	6a 12		 push	 18			; 00000012H
  00b60	8b 4d e0	 mov	 ecx, DWORD PTR _target$[ebp]
  00b63	51		 push	 ecx
  00b64	69 55 94 b4 00
	00 00		 imul	 edx, DWORD PTR tv485[ebp], 180
  00b6b	8b 45 90	 mov	 eax, DWORD PTR tv493[ebp]
  00b6e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00b75	ff d1		 call	 ecx
  00b77	89 45 e0	 mov	 DWORD PTR _target$[ebp], eax

; 2029 : 		}

  00b7a	e9 35 ff ff ff	 jmp	 $LN6@draw_groun
$LN7@draw_groun:

; 2030 : 
; 2031 : 		//
; 2032 : 		// draw selected target last
; 2033 : 		//
; 2034 : 
; 2035 : 		if (target_acquisition_system == TARGET_ACQUISITION_SYSTEM_GROUND_RADAR)

  00b7f	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 1 ; target_acquisition_system
  00b86	0f 85 a8 00 00
	00		 jne	 $LN31@draw_groun

; 2036 : 		{
; 2037 : 			target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  00b8c	83 7d e4 00	 cmp	 DWORD PTR _source$[ebp], 0
  00b90	74 0a		 je	 SHORT $LN74@draw_groun
  00b92	8b 45 e4	 mov	 eax, DWORD PTR _source$[ebp]
  00b95	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b97	89 4d 94	 mov	 DWORD PTR tv506[ebp], ecx
  00b9a	eb 24		 jmp	 SHORT $LN75@draw_groun
$LN74@draw_groun:
  00b9c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00ba2	81 c2 0e 01 00
	00		 add	 edx, 270		; 0000010eH
  00ba8	52		 push	 edx
  00ba9	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00bae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00bb3	50		 push	 eax
  00bb4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00bb9	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv506[ebp], 0
$LN75@draw_groun:
  00bc0	b9 01 00 00 00	 mov	 ecx, 1
  00bc5	85 c9		 test	 ecx, ecx
  00bc7	74 09		 je	 SHORT $LN76@draw_groun
  00bc9	c7 45 90 26 00
	00 00		 mov	 DWORD PTR tv514[ebp], 38 ; 00000026H
  00bd0	eb 24		 jmp	 SHORT $LN77@draw_groun
$LN76@draw_groun:
  00bd2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_mfd@@YGXXZ@4JA
  00bd8	81 c2 0e 01 00
	00		 add	 edx, 270		; 0000010eH
  00bde	52		 push	 edx
  00bdf	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00be4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00be9	50		 push	 eax
  00bea	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00bef	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv514[ebp], 0
$LN77@draw_groun:
  00bf6	6a 26		 push	 38			; 00000026H
  00bf8	8b 4d e4	 mov	 ecx, DWORD PTR _source$[ebp]
  00bfb	51		 push	 ecx
  00bfc	69 55 94 b4 00
	00 00		 imul	 edx, DWORD PTR tv506[ebp], 180
  00c03	8b 45 90	 mov	 eax, DWORD PTR tv514[ebp]
  00c06	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00c0d	ff d1		 call	 ecx
  00c0f	89 45 e0	 mov	 DWORD PTR _target$[ebp], eax

; 2038 : 
; 2039 : 			if (target)

  00c12	83 7d e0 00	 cmp	 DWORD PTR _target$[ebp], 0
  00c16	74 1c		 je	 SHORT $LN31@draw_groun

; 2040 : 			{
; 2041 : 				draw_radar_target_symbol (target, source_position, scale, TRUE, FALSE);

  00c18	6a 00		 push	 0
  00c1a	6a 01		 push	 1
  00c1c	51		 push	 ecx
  00c1d	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00c22	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c27	8b 45 dc	 mov	 eax, DWORD PTR _source_position$[ebp]
  00c2a	50		 push	 eax
  00c2b	8b 4d e0	 mov	 ecx, DWORD PTR _target$[ebp]
  00c2e	51		 push	 ecx
  00c2f	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN31@draw_groun:

; 2042 : 			}
; 2043 : 		}
; 2044 : 
; 2045 : 		set_2d_window_rotation (mfd_env, 0.0);

  00c34	51		 push	 ecx
  00c35	0f 57 c0	 xorps	 xmm0, xmm0
  00c38	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c3d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00c42	50		 push	 eax
  00c43	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN27@draw_groun:

; 2046 : 	}
; 2047 : 
; 2048 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00c48	51		 push	 ecx
  00c49	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00c51	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c56	51		 push	 ecx
  00c57	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00c5f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c64	51		 push	 ecx
  00c65	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00c6d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c72	51		 push	 ecx
  00c73	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00c7b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c80	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00c85	50		 push	 eax
  00c86	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 2049 : 
; 2050 : 	////////////////////////////////////////
; 2051 : 	//
; 2052 : 	// damaged
; 2053 : 	//
; 2054 : 	////////////////////////////////////////
; 2055 : 
; 2056 : 	if (blackhawk_damage.radar)

  00c8b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  00c90	83 e0 01	 and	 eax, 1
  00c93	0f 84 98 00 00
	00		 je	 $LN32@draw_groun

; 2057 : 	{
; 2058 : 		draw_2d_line (-0.5, -0.5,  0.5, 0.5, MFD_COLOUR1);

  00c99	b8 04 00 00 00	 mov	 eax, 4
  00c9e	6b c8 00	 imul	 ecx, eax, 0
  00ca1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ca7	52		 push	 edx
  00ca8	51		 push	 ecx
  00ca9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00cb1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cb6	51		 push	 ecx
  00cb7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00cbf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cc4	51		 push	 ecx
  00cc5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00ccd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cd2	51		 push	 ecx
  00cd3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00cdb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ce0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2059 : 		draw_2d_line ( 0.5, -0.5, -0.5, 0.5, MFD_COLOUR1);

  00ce5	b8 04 00 00 00	 mov	 eax, 4
  00cea	6b c8 00	 imul	 ecx, eax, 0
  00ced	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00cf3	52		 push	 edx
  00cf4	51		 push	 ecx
  00cf5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00cfd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d02	51		 push	 ecx
  00d03	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00d0b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d10	51		 push	 ecx
  00d11	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00d19	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d1e	51		 push	 ecx
  00d1f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00d27	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d2c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN32@draw_groun:

; 2060 : 	}
; 2061 : }

  00d31	5f		 pop	 edi
  00d32	5e		 pop	 esi
  00d33	5b		 pop	 ebx
  00d34	8b e5		 mov	 esp, ebp
  00d36	5d		 pop	 ebp
  00d37	c3		 ret	 0
$LN78@draw_groun:
  00d38	00 00 00 00	 DD	 $LN16@draw_groun
  00d3c	00 00 00 00	 DD	 $LN17@draw_groun
  00d40	00 00 00 00	 DD	 $LN18@draw_groun
  00d44	00 00 00 00	 DD	 $LN21@draw_groun
  00d48	00 00 00 00	 DD	 $LN22@draw_groun
?draw_ground_radar_mfd@@YGXXZ ENDP			; draw_ground_radar_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z
_TEXT	SEGMENT
tv180 = -100						; size = 4
tv160 = -100						; size = 4
tv132 = -100						; size = 4
tv172 = -96						; size = 4
tv152 = -96						; size = 4
tv92 = -96						; size = 4
tv80 = -96						; size = 4
$T1 = -92						; size = 4
_bounding_box_max$ = -24				; size = 4
_bounding_box_min$ = -20				; size = 4
_target_position$ = -16					; size = 4
_radius$ = -12						; size = 4
_dy$ = -8						; size = 4
_dx$ = -4						; size = 4
_target$ = 8						; size = 4
_source_position$ = 12					; size = 4
_scale$ = 16						; size = 4
?draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z PROC ; draw_ground_radar_clutter, COMDAT

; 1721 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1722 : 	float
; 1723 : 		dx,
; 1724 : 		dy,
; 1725 : 		radius;
; 1726 : 
; 1727 : 	vec3d
; 1728 : 		*target_position,
; 1729 : 		*bounding_box_min,
; 1730 : 		*bounding_box_max;
; 1731 : 
; 1732 : 	ASSERT (target);

  00009	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@draw_groun
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00014	83 c0 0b	 add	 eax, 11			; 0000000bH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@draw_groun:

; 1733 : 
; 1734 : 	ASSERT (source_position);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _source_position$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@draw_groun
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00032	83 c0 0d	 add	 eax, 13			; 0000000dH
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IIPCKJML@source_position@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@draw_groun:

; 1735 : 
; 1736 : 	ASSERT (get_local_entity_type (target) == ENTITY_TYPE_CITY);

  00045	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00049	74 0a		 je	 SHORT $LN7@draw_groun
  0004b	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	89 4d a0	 mov	 DWORD PTR tv80[ebp], ecx
  00053	eb 21		 jmp	 SHORT $LN8@draw_groun
$LN7@draw_groun:
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  0005b	83 c2 0f	 add	 edx, 15			; 0000000fH
  0005e	52		 push	 edx
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006f	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN8@draw_groun:
  00076	83 7d a0 05	 cmp	 DWORD PTR tv80[ebp], 5
  0007a	74 18		 je	 SHORT $LN4@draw_groun
  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00081	83 c0 0f	 add	 eax, 15			; 0000000fH
  00084	50		 push	 eax
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@KDAGALDF@get_local_entity_type?5?$CItarget?$CJ?5@
  0008f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_groun:

; 1737 : 
; 1738 : 	target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00094	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00098	74 0a		 je	 SHORT $LN9@draw_groun
  0009a	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0009d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009f	89 4d a0	 mov	 DWORD PTR tv92[ebp], ecx
  000a2	eb 21		 jmp	 SHORT $LN10@draw_groun
$LN9@draw_groun:
  000a4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  000aa	83 c2 11	 add	 edx, 17			; 00000011H
  000ad	52		 push	 edx
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000be	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv92[ebp], 0
$LN10@draw_groun:
  000c5	b9 01 00 00 00	 mov	 ecx, 1
  000ca	85 c9		 test	 ecx, ecx
  000cc	74 09		 je	 SHORT $LN11@draw_groun
  000ce	c7 45 9c 08 00
	00 00		 mov	 DWORD PTR tv132[ebp], 8
  000d5	eb 21		 jmp	 SHORT $LN12@draw_groun
$LN11@draw_groun:
  000d7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  000dd	83 c2 11	 add	 edx, 17			; 00000011H
  000e0	52		 push	 edx
  000e1	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000eb	50		 push	 eax
  000ec	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000f1	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
$LN12@draw_groun:
  000f8	6a 08		 push	 8
  000fa	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  000fd	51		 push	 ecx
  000fe	6b 55 a0 60	 imul	 edx, DWORD PTR tv92[ebp], 96
  00102	8b 45 9c	 mov	 eax, DWORD PTR tv132[ebp]
  00105	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0010c	ff d1		 call	 ecx
  0010e	89 45 f0	 mov	 DWORD PTR _target_position$[ebp], eax

; 1739 : 
; 1740 : 	dx = (target_position->x - source_position->x) * scale;

  00111	8b 45 f0	 mov	 eax, DWORD PTR _target_position$[ebp]
  00114	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  00117	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0011b	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0011f	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00124	f3 0f 11 45 fc	 movss	 DWORD PTR _dx$[ebp], xmm0

; 1741 : 	dy = (target_position->z - source_position->z) * scale;

  00129	8b 45 f0	 mov	 eax, DWORD PTR _target_position$[ebp]
  0012c	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  0012f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00134	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00139	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0013e	f3 0f 11 45 f8	 movss	 DWORD PTR _dy$[ebp], xmm0

; 1742 : 
; 1743 : 	bounding_box_min = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_BOUNDING_BOX_MIN);

  00143	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00147	74 0a		 je	 SHORT $LN13@draw_groun
  00149	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0014c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014e	89 4d a0	 mov	 DWORD PTR tv152[ebp], ecx
  00151	eb 21		 jmp	 SHORT $LN14@draw_groun
$LN13@draw_groun:
  00153	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00159	83 c2 16	 add	 edx, 22			; 00000016H
  0015c	52		 push	 edx
  0015d	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00162	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00167	50		 push	 eax
  00168	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0016d	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv152[ebp], 0
$LN14@draw_groun:
  00174	b9 01 00 00 00	 mov	 ecx, 1
  00179	85 c9		 test	 ecx, ecx
  0017b	74 09		 je	 SHORT $LN15@draw_groun
  0017d	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv160[ebp], 1
  00184	eb 21		 jmp	 SHORT $LN16@draw_groun
$LN15@draw_groun:
  00186	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  0018c	83 c2 16	 add	 edx, 22			; 00000016H
  0018f	52		 push	 edx
  00190	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00195	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001a0	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv160[ebp], 0
$LN16@draw_groun:
  001a7	6a 01		 push	 1
  001a9	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  001ac	51		 push	 ecx
  001ad	6b 55 a0 60	 imul	 edx, DWORD PTR tv152[ebp], 96
  001b1	8b 45 9c	 mov	 eax, DWORD PTR tv160[ebp]
  001b4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  001bb	ff d1		 call	 ecx
  001bd	89 45 ec	 mov	 DWORD PTR _bounding_box_min$[ebp], eax

; 1744 : 	bounding_box_max = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_BOUNDING_BOX_MAX);

  001c0	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  001c4	74 0a		 je	 SHORT $LN17@draw_groun
  001c6	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  001c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001cb	89 4d a0	 mov	 DWORD PTR tv172[ebp], ecx
  001ce	eb 21		 jmp	 SHORT $LN18@draw_groun
$LN17@draw_groun:
  001d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  001d6	83 c2 17	 add	 edx, 23			; 00000017H
  001d9	52		 push	 edx
  001da	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001e4	50		 push	 eax
  001e5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001ea	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv172[ebp], 0
$LN18@draw_groun:
  001f1	b9 01 00 00 00	 mov	 ecx, 1
  001f6	85 c9		 test	 ecx, ecx
  001f8	74 09		 je	 SHORT $LN19@draw_groun
  001fa	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv180[ebp], 0
  00201	eb 21		 jmp	 SHORT $LN20@draw_groun
$LN19@draw_groun:
  00203	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z@4JA
  00209	83 c2 17	 add	 edx, 23			; 00000017H
  0020c	52		 push	 edx
  0020d	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00212	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00217	50		 push	 eax
  00218	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0021d	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv180[ebp], 0
$LN20@draw_groun:
  00224	6a 00		 push	 0
  00226	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00229	51		 push	 ecx
  0022a	6b 55 a0 60	 imul	 edx, DWORD PTR tv172[ebp], 96
  0022e	8b 45 9c	 mov	 eax, DWORD PTR tv180[ebp]
  00231	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00238	ff d1		 call	 ecx
  0023a	89 45 e8	 mov	 DWORD PTR _bounding_box_max$[ebp], eax

; 1745 : 
; 1746 : 	radius = get_approx_2d_range (bounding_box_min, bounding_box_max);

  0023d	8b 45 e8	 mov	 eax, DWORD PTR _bounding_box_max$[ebp]
  00240	50		 push	 eax
  00241	8b 4d ec	 mov	 ecx, DWORD PTR _bounding_box_min$[ebp]
  00244	51		 push	 ecx
  00245	e8 00 00 00 00	 call	 ?get_approx_2d_range@@YGMPBUVEC3D@@0@Z ; get_approx_2d_range
  0024a	d9 5d f4	 fstp	 DWORD PTR _radius$[ebp]

; 1747 : 
; 1748 : 	//
; 1749 : 	// radius check to ignore oil pipelines and overly large city blocks
; 1750 : 	//
; 1751 : 
; 1752 : 	if (radius < 2000.0)

  0024d	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _radius$[ebp]
  00252	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@409f400000000000
  0025a	66 0f 2f c8	 comisd	 xmm1, xmm0
  0025e	76 5d		 jbe	 SHORT $LN5@draw_groun

; 1753 : 	{
; 1754 : 		radius = max (50.0f, radius);

  00260	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  00268	f3 0f 11 45 a4	 movss	 DWORD PTR $T1[ebp], xmm0
  0026d	8d 45 f4	 lea	 eax, DWORD PTR _radius$[ebp]
  00270	50		 push	 eax
  00271	8d 4d a4	 lea	 ecx, DWORD PTR $T1[ebp]
  00274	51		 push	 ecx
  00275	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0027a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0027e	f3 0f 11 45 f4	 movss	 DWORD PTR _radius$[ebp], xmm0

; 1755 : 
; 1756 : 		draw_2d_hatched_circle (dx, dy, radius * scale, MFD_COLOUR5);

  00283	b8 04 00 00 00	 mov	 eax, 4
  00288	c1 e0 02	 shl	 eax, 2
  0028b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00291	51		 push	 ecx
  00292	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _radius$[ebp]
  00297	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0029c	51		 push	 ecx
  0029d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a2	51		 push	 ecx
  002a3	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  002a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ad	51		 push	 ecx
  002ae	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _dx$[ebp]
  002b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b8	e8 00 00 00 00	 call	 ?draw_2d_hatched_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_hatched_circle
$LN5@draw_groun:

; 1757 : 	}
; 1758 : }

  002bd	5f		 pop	 edi
  002be	5e		 pop	 esi
  002bf	5b		 pop	 ebx
  002c0	8b e5		 mov	 esp, ebp
  002c2	5d		 pop	 ebp
  002c3	c2 0c 00	 ret	 12			; 0000000cH
?draw_ground_radar_clutter@@YGXPAUENTITY@@PAUVEC3D@@M@Z ENDP ; draw_ground_radar_clutter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z
_TEXT	SEGMENT
tv367 = -100						; size = 4
tv288 = -100						; size = 4
tv256 = -100						; size = 4
tv223 = -100						; size = 4
tv193 = -100						; size = 4
tv165 = -100						; size = 4
tv145 = -100						; size = 4
tv88 = -100						; size = 4
tv360 = -96						; size = 4
tv281 = -96						; size = 4
tv249 = -96						; size = 4
tv216 = -96						; size = 4
tv185 = -96						; size = 4
tv157 = -96						; size = 4
tv137 = -96						; size = 4
tv80 = -96						; size = 4
_target_position$ = -28					; size = 4
_dy$ = -24						; size = 4
_dx$ = -20						; size = 4
_source$ = -16						; size = 4
_source_side$ = -12					; size = 4
_target_symbol_colour$ = -8				; size = 4
_target_symbol_type$ = -4				; size = 4
_target$ = 8						; size = 4
_source_position$ = 12					; size = 4
_scale$ = 16						; size = 4
_selected_target$ = 20					; size = 4
_display_on_tsd$ = 24					; size = 4
?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z PROC ; draw_radar_target_symbol, COMDAT

; 1546 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1547 : 	target_symbol_types
; 1548 : 		target_symbol_type;
; 1549 : 
; 1550 : 	rgb_colour
; 1551 : 		target_symbol_colour;
; 1552 : 		
; 1553 : //VJ 030423 TSD render mod
; 1554 : 	entity_sides
; 1555 : 		source_side;
; 1556 : 	entity	
; 1557 : 		*source;		
; 1558 : 
; 1559 : 	float
; 1560 : 		dx,
; 1561 : 		dy;
; 1562 : 
; 1563 : 	vec3d
; 1564 : 		*target_position;
; 1565 : 
; 1566 : 	ASSERT (target);

  00009	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@draw_radar
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  00014	83 c0 14	 add	 eax, 20			; 00000014H
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@draw_radar:

; 1567 : 
; 1568 : 	ASSERT (source_position);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _source_position$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@draw_radar
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  00032	83 c0 16	 add	 eax, 22			; 00000016H
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IIPCKJML@source_position@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@draw_radar:

; 1569 : 
; 1570 : 	ASSERT (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER));

  00045	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00049	74 0a		 je	 SHORT $LN46@draw_radar
  0004b	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	89 4d a0	 mov	 DWORD PTR tv80[ebp], ecx
  00053	eb 21		 jmp	 SHORT $LN47@draw_radar
$LN46@draw_radar:
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0005b	83 c2 18	 add	 edx, 24			; 00000018H
  0005e	52		 push	 edx
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006f	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN47@draw_radar:
  00076	b9 01 00 00 00	 mov	 ecx, 1
  0007b	85 c9		 test	 ecx, ecx
  0007d	74 09		 je	 SHORT $LN48@draw_radar
  0007f	c7 45 9c 42 00
	00 00		 mov	 DWORD PTR tv88[ebp], 66	; 00000042H
  00086	eb 21		 jmp	 SHORT $LN49@draw_radar
$LN48@draw_radar:
  00088	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0008e	83 c2 18	 add	 edx, 24			; 00000018H
  00091	52		 push	 edx
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a2	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$LN49@draw_radar:
  000a9	6a 42		 push	 66			; 00000042H
  000ab	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  000ae	51		 push	 ecx
  000af	69 55 a0 5c 04
	00 00		 imul	 edx, DWORD PTR tv80[ebp], 1116
  000b6	8b 45 9c	 mov	 eax, DWORD PTR tv88[ebp]
  000b9	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000c0	ff d1		 call	 ecx
  000c2	85 c0		 test	 eax, eax
  000c4	74 18		 je	 SHORT $LN4@draw_radar
  000c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  000cb	83 c0 18	 add	 eax, 24			; 00000018H
  000ce	50		 push	 eax
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@
  000d9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_radar:

; 1571 : 
; 1572 : //VJ 030423 TSD render mod
; 1573 : 	source = get_gunship_entity ();

  000de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000e3	89 45 f0	 mov	 DWORD PTR _source$[ebp], eax

; 1574 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);	

  000e6	83 7d f0 00	 cmp	 DWORD PTR _source$[ebp], 0
  000ea	74 0a		 je	 SHORT $LN50@draw_radar
  000ec	8b 45 f0	 mov	 eax, DWORD PTR _source$[ebp]
  000ef	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f1	89 4d a0	 mov	 DWORD PTR tv137[ebp], ecx
  000f4	eb 21		 jmp	 SHORT $LN51@draw_radar
$LN50@draw_radar:
  000f6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  000fc	83 c2 1c	 add	 edx, 28			; 0000001cH
  000ff	52		 push	 edx
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00105	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00110	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$LN51@draw_radar:
  00117	b9 01 00 00 00	 mov	 ecx, 1
  0011c	85 c9		 test	 ecx, ecx
  0011e	74 09		 je	 SHORT $LN52@draw_radar
  00120	c7 45 9c bb 00
	00 00		 mov	 DWORD PTR tv145[ebp], 187 ; 000000bbH
  00127	eb 21		 jmp	 SHORT $LN53@draw_radar
$LN52@draw_radar:
  00129	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0012f	83 c2 1c	 add	 edx, 28			; 0000001cH
  00132	52		 push	 edx
  00133	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00138	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0013d	50		 push	 eax
  0013e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00143	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv145[ebp], 0
$LN53@draw_radar:
  0014a	68 bb 00 00 00	 push	 187			; 000000bbH
  0014f	8b 4d f0	 mov	 ecx, DWORD PTR _source$[ebp]
  00152	51		 push	 ecx
  00153	69 55 a0 5c 04
	00 00		 imul	 edx, DWORD PTR tv137[ebp], 1116
  0015a	8b 45 9c	 mov	 eax, DWORD PTR tv145[ebp]
  0015d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00164	ff d1		 call	 ecx
  00166	89 45 f4	 mov	 DWORD PTR _source_side$[ebp], eax

; 1575 : 
; 1576 : 	target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00169	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0016d	74 0a		 je	 SHORT $LN54@draw_radar
  0016f	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00172	8b 08		 mov	 ecx, DWORD PTR [eax]
  00174	89 4d a0	 mov	 DWORD PTR tv157[ebp], ecx
  00177	eb 21		 jmp	 SHORT $LN55@draw_radar
$LN54@draw_radar:
  00179	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0017f	83 c2 1e	 add	 edx, 30			; 0000001eH
  00182	52		 push	 edx
  00183	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00188	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0018d	50		 push	 eax
  0018e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00193	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv157[ebp], 0
$LN55@draw_radar:
  0019a	b9 01 00 00 00	 mov	 ecx, 1
  0019f	85 c9		 test	 ecx, ecx
  001a1	74 09		 je	 SHORT $LN56@draw_radar
  001a3	c7 45 9c 08 00
	00 00		 mov	 DWORD PTR tv165[ebp], 8
  001aa	eb 21		 jmp	 SHORT $LN57@draw_radar
$LN56@draw_radar:
  001ac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  001b2	83 c2 1e	 add	 edx, 30			; 0000001eH
  001b5	52		 push	 edx
  001b6	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001c0	50		 push	 eax
  001c1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c6	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv165[ebp], 0
$LN57@draw_radar:
  001cd	6a 08		 push	 8
  001cf	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  001d2	51		 push	 ecx
  001d3	6b 55 a0 60	 imul	 edx, DWORD PTR tv157[ebp], 96
  001d7	8b 45 9c	 mov	 eax, DWORD PTR tv165[ebp]
  001da	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  001e1	ff d1		 call	 ecx
  001e3	89 45 e4	 mov	 DWORD PTR _target_position$[ebp], eax

; 1577 : 
; 1578 : 	dx = (target_position->x - source_position->x) * scale;

  001e6	8b 45 e4	 mov	 eax, DWORD PTR _target_position$[ebp]
  001e9	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  001ec	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001f0	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  001f4	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  001f9	f3 0f 11 45 ec	 movss	 DWORD PTR _dx$[ebp], xmm0

; 1579 : 	dy = (target_position->z - source_position->z) * scale;

  001fe	8b 45 e4	 mov	 eax, DWORD PTR _target_position$[ebp]
  00201	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  00204	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00209	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0020e	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00213	f3 0f 11 45 e8	 movss	 DWORD PTR _dy$[ebp], xmm0

; 1580 : 
; 1581 : 	target_symbol_type = (target_symbol_types) get_local_entity_int_value (target, INT_TYPE_TARGET_SYMBOL_TYPE);

  00218	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0021c	74 0a		 je	 SHORT $LN58@draw_radar
  0021e	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00221	8b 08		 mov	 ecx, DWORD PTR [eax]
  00223	89 4d a0	 mov	 DWORD PTR tv185[ebp], ecx
  00226	eb 21		 jmp	 SHORT $LN59@draw_radar
$LN58@draw_radar:
  00228	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0022e	83 c2 23	 add	 edx, 35			; 00000023H
  00231	52		 push	 edx
  00232	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00237	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0023c	50		 push	 eax
  0023d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00242	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv185[ebp], 0
$LN59@draw_radar:
  00249	b9 01 00 00 00	 mov	 ecx, 1
  0024e	85 c9		 test	 ecx, ecx
  00250	74 09		 je	 SHORT $LN60@draw_radar
  00252	c7 45 9c d5 00
	00 00		 mov	 DWORD PTR tv193[ebp], 213 ; 000000d5H
  00259	eb 21		 jmp	 SHORT $LN61@draw_radar
$LN60@draw_radar:
  0025b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  00261	83 c2 23	 add	 edx, 35			; 00000023H
  00264	52		 push	 edx
  00265	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0026a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0026f	50		 push	 eax
  00270	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00275	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv193[ebp], 0
$LN61@draw_radar:
  0027c	68 d5 00 00 00	 push	 213			; 000000d5H
  00281	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00284	51		 push	 ecx
  00285	69 55 a0 5c 04
	00 00		 imul	 edx, DWORD PTR tv185[ebp], 1116
  0028c	8b 45 9c	 mov	 eax, DWORD PTR tv193[ebp]
  0028f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00296	ff d1		 call	 ecx
  00298	89 45 fc	 mov	 DWORD PTR _target_symbol_type$[ebp], eax

; 1582 : 
; 1583 : 	ASSERT ((target_symbol_type >= 0) && (target_symbol_type < NUM_TARGET_SYMBOL_TYPES));

  0029b	83 7d fc 00	 cmp	 DWORD PTR _target_symbol_type$[ebp], 0
  0029f	7c 06		 jl	 SHORT $LN6@draw_radar
  002a1	83 7d fc 08	 cmp	 DWORD PTR _target_symbol_type$[ebp], 8
  002a5	7c 18		 jl	 SHORT $LN5@draw_radar
$LN6@draw_radar:
  002a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  002ac	83 c0 25	 add	 eax, 37			; 00000025H
  002af	50		 push	 eax
  002b0	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  002b5	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@
  002ba	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@draw_radar:

; 1584 : 
; 1585 : 	if (get_local_entity_index (target) & 1)

  002bf	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  002c2	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  002c8	c1 f8 04	 sar	 eax, 4
  002cb	83 e0 01	 and	 eax, 1
  002ce	0f 84 e3 00 00
	00		 je	 $LN7@draw_radar

; 1586 : 	{
; 1587 : //VJ 030423 TSD render mod
; 1588 : 		if (display_on_tsd)

  002d4	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  002d8	0f 84 c3 00 00
	00		 je	 $LN9@draw_radar

; 1589 : 		{
; 1590 : 			//VJ 030511 TSD render mod, treat enemy colours as cheat
; 1591 : 			if (command_line_tsd_enemy_colours)

  002de	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_tsd_enemy_colours@@3HA, 0 ; command_line_tsd_enemy_colours
  002e5	0f 84 a3 00 00
	00		 je	 $LN11@draw_radar

; 1592 : 			{
; 1593 : 				if (source_side == get_local_entity_int_value (target, INT_TYPE_SIDE))

  002eb	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  002ef	74 0a		 je	 SHORT $LN62@draw_radar
  002f1	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  002f4	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f6	89 4d a0	 mov	 DWORD PTR tv216[ebp], ecx
  002f9	eb 1d		 jmp	 SHORT $LN63@draw_radar
$LN62@draw_radar:
  002fb	68 39 06 00 00	 push	 1593			; 00000639H
  00300	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00305	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0030b	52		 push	 edx
  0030c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00311	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv216[ebp], 0
$LN63@draw_radar:
  00318	b8 01 00 00 00	 mov	 eax, 1
  0031d	85 c0		 test	 eax, eax
  0031f	74 09		 je	 SHORT $LN64@draw_radar
  00321	c7 45 9c bb 00
	00 00		 mov	 DWORD PTR tv223[ebp], 187 ; 000000bbH
  00328	eb 1d		 jmp	 SHORT $LN65@draw_radar
$LN64@draw_radar:
  0032a	68 39 06 00 00	 push	 1593			; 00000639H
  0032f	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00334	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0033a	51		 push	 ecx
  0033b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00340	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv223[ebp], 0
$LN65@draw_radar:
  00347	68 bb 00 00 00	 push	 187			; 000000bbH
  0034c	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  0034f	52		 push	 edx
  00350	69 45 a0 5c 04
	00 00		 imul	 eax, DWORD PTR tv216[ebp], 1116
  00357	8b 4d 9c	 mov	 ecx, DWORD PTR tv223[ebp]
  0035a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00361	ff d2		 call	 edx
  00363	39 45 f4	 cmp	 DWORD PTR _source_side$[ebp], eax
  00366	75 13		 jne	 SHORT $LN13@draw_radar

; 1594 : 					target_symbol_colour = MFD_COLOUR2;

  00368	b8 04 00 00 00	 mov	 eax, 4
  0036d	c1 e0 00	 shl	 eax, 0
  00370	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00376	89 4d f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], ecx

; 1595 : 				else

  00379	eb 11		 jmp	 SHORT $LN14@draw_radar
$LN13@draw_radar:

; 1596 : 					target_symbol_colour = MFD_COLOUR4;

  0037b	b8 04 00 00 00	 mov	 eax, 4
  00380	6b c8 03	 imul	 ecx, eax, 3
  00383	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00389	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN14@draw_radar:

; 1597 : 			}
; 1598 : 			else

  0038c	eb 11		 jmp	 SHORT $LN12@draw_radar
$LN11@draw_radar:

; 1599 : 			{
; 1600 : 					target_symbol_colour = MFD_COLOUR7;

  0038e	b8 04 00 00 00	 mov	 eax, 4
  00393	6b c8 0b	 imul	 ecx, eax, 11
  00396	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0039c	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN12@draw_radar:

; 1601 : 			}
; 1602 : 		}		
; 1603 : 		else

  0039f	eb 11		 jmp	 SHORT $LN10@draw_radar
$LN9@draw_radar:

; 1604 : 			target_symbol_colour = MFD_COLOUR1;

  003a1	b8 04 00 00 00	 mov	 eax, 4
  003a6	6b c8 00	 imul	 ecx, eax, 0
  003a9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003af	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN10@draw_radar:

; 1605 : 	}
; 1606 : 	else

  003b2	e9 dd 00 00 00	 jmp	 $LN16@draw_radar
$LN7@draw_radar:

; 1607 : 	{
; 1608 : //VJ 030423 TSD render mod
; 1609 : 		if (display_on_tsd)

  003b7	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  003bb	0f 84 c2 00 00
	00		 je	 $LN15@draw_radar

; 1610 : 		{
; 1611 : 			//VJ 030511 TSD render mod, treat enemy colours as cheat
; 1612 : 			if (command_line_tsd_enemy_colours)

  003c1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_tsd_enemy_colours@@3HA, 0 ; command_line_tsd_enemy_colours
  003c8	0f 84 a2 00 00
	00		 je	 $LN17@draw_radar

; 1613 : 			{
; 1614 : 				if (source_side == get_local_entity_int_value (target, INT_TYPE_SIDE))

  003ce	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  003d2	74 0a		 je	 SHORT $LN66@draw_radar
  003d4	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  003d7	8b 08		 mov	 ecx, DWORD PTR [eax]
  003d9	89 4d a0	 mov	 DWORD PTR tv249[ebp], ecx
  003dc	eb 1d		 jmp	 SHORT $LN67@draw_radar
$LN66@draw_radar:
  003de	68 4e 06 00 00	 push	 1614			; 0000064eH
  003e3	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  003e8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003ee	52		 push	 edx
  003ef	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003f4	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv249[ebp], 0
$LN67@draw_radar:
  003fb	b8 01 00 00 00	 mov	 eax, 1
  00400	85 c0		 test	 eax, eax
  00402	74 09		 je	 SHORT $LN68@draw_radar
  00404	c7 45 9c bb 00
	00 00		 mov	 DWORD PTR tv256[ebp], 187 ; 000000bbH
  0040b	eb 1d		 jmp	 SHORT $LN69@draw_radar
$LN68@draw_radar:
  0040d	68 4e 06 00 00	 push	 1614			; 0000064eH
  00412	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00417	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0041d	51		 push	 ecx
  0041e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00423	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv256[ebp], 0
$LN69@draw_radar:
  0042a	68 bb 00 00 00	 push	 187			; 000000bbH
  0042f	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00432	52		 push	 edx
  00433	69 45 a0 5c 04
	00 00		 imul	 eax, DWORD PTR tv249[ebp], 1116
  0043a	8b 4d 9c	 mov	 ecx, DWORD PTR tv256[ebp]
  0043d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00444	ff d2		 call	 edx
  00446	39 45 f4	 cmp	 DWORD PTR _source_side$[ebp], eax
  00449	75 13		 jne	 SHORT $LN19@draw_radar

; 1615 : 					target_symbol_colour = MFD_COLOUR1;

  0044b	b8 04 00 00 00	 mov	 eax, 4
  00450	6b c8 00	 imul	 ecx, eax, 0
  00453	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00459	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx

; 1616 : 				else

  0045c	eb 10		 jmp	 SHORT $LN20@draw_radar
$LN19@draw_radar:

; 1617 : 					target_symbol_colour = MFD_COLOUR3;

  0045e	b8 04 00 00 00	 mov	 eax, 4
  00463	d1 e0		 shl	 eax, 1
  00465	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0046b	89 4d f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], ecx
$LN20@draw_radar:

; 1618 : 			}
; 1619 : 			else

  0046e	eb 11		 jmp	 SHORT $LN18@draw_radar
$LN17@draw_radar:

; 1620 : 			{
; 1621 : 					target_symbol_colour = MFD_COLOUR8;

  00470	b8 04 00 00 00	 mov	 eax, 4
  00475	6b c8 0c	 imul	 ecx, eax, 12
  00478	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0047e	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN18@draw_radar:

; 1622 : 			}
; 1623 : 		}		
; 1624 : 		else

  00481	eb 11		 jmp	 SHORT $LN16@draw_radar
$LN15@draw_radar:

; 1625 : 			target_symbol_colour = MFD_COLOUR2;

  00483	b8 04 00 00 00	 mov	 eax, 4
  00488	c1 e0 00	 shl	 eax, 0
  0048b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00491	89 4d f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], ecx
$LN16@draw_radar:

; 1626 : 	}
; 1627 : 
; 1628 : 	if (draw_large_mfd)

  00494	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0049b	0f 84 44 02 00
	00		 je	 $LN21@draw_radar

; 1629 : 	{
; 1630 : 		if (get_local_entity_int_value (target, INT_TYPE_GUNSHIP_RADAR_LOS_CLEAR))

  004a1	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  004a5	74 0a		 je	 SHORT $LN70@draw_radar
  004a7	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  004aa	8b 08		 mov	 ecx, DWORD PTR [eax]
  004ac	89 4d a0	 mov	 DWORD PTR tv281[ebp], ecx
  004af	eb 1d		 jmp	 SHORT $LN71@draw_radar
$LN70@draw_radar:
  004b1	68 5e 06 00 00	 push	 1630			; 0000065eH
  004b6	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  004bb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  004c1	52		 push	 edx
  004c2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004c7	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv281[ebp], 0
$LN71@draw_radar:
  004ce	b8 01 00 00 00	 mov	 eax, 1
  004d3	85 c0		 test	 eax, eax
  004d5	74 09		 je	 SHORT $LN72@draw_radar
  004d7	c7 45 9c 50 00
	00 00		 mov	 DWORD PTR tv288[ebp], 80 ; 00000050H
  004de	eb 1d		 jmp	 SHORT $LN73@draw_radar
$LN72@draw_radar:
  004e0	68 5e 06 00 00	 push	 1630			; 0000065eH
  004e5	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  004ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  004f0	51		 push	 ecx
  004f1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004f6	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv288[ebp], 0
$LN73@draw_radar:
  004fd	6a 50		 push	 80			; 00000050H
  004ff	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00502	52		 push	 edx
  00503	69 45 a0 5c 04
	00 00		 imul	 eax, DWORD PTR tv281[ebp], 1116
  0050a	8b 4d 9c	 mov	 ecx, DWORD PTR tv288[ebp]
  0050d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00514	ff d2		 call	 edx
  00516	85 c0		 test	 eax, eax
  00518	0f 84 9e 00 00
	00		 je	 $LN23@draw_radar

; 1631 : 		{
; 1632 : 			if (selected_target)

  0051e	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00522	74 69		 je	 SHORT $LN27@draw_radar

; 1633 : 			{
; 1634 : //VJ 030423 TSD render mod
; 1635 : 				if (display_on_tsd)

  00524	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  00528	74 2e		 je	 SHORT $LN26@draw_radar

; 1636 : 					draw_2d_mono_sprite (large_display_target_symbols_los_mask[target_symbol_type], dx, dy, clear_mfd_colour);

  0052a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0052f	50		 push	 eax
  00530	51		 push	 ecx
  00531	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00536	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053b	51		 push	 ecx
  0053c	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00541	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00546	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  00549	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_los_mask@@3PAPBDA[ecx*4]
  00550	52		 push	 edx
  00551	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1637 : 				else

  00556	eb 35		 jmp	 SHORT $LN27@draw_radar
$LN26@draw_radar:

; 1638 : 					draw_2d_mono_sprite (large_display_target_symbols_los_mask[target_symbol_type], dx, dy, MFD_COLOUR6);

  00558	b8 04 00 00 00	 mov	 eax, 4
  0055d	6b c8 05	 imul	 ecx, eax, 5
  00560	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00566	52		 push	 edx
  00567	51		 push	 ecx
  00568	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0056d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00572	51		 push	 ecx
  00573	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00578	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057d	8b 45 fc	 mov	 eax, DWORD PTR _target_symbol_type$[ebp]
  00580	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?large_display_target_symbols_los_mask@@3PAPBDA[eax*4]
  00587	51		 push	 ecx
  00588	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN27@draw_radar:

; 1639 : 			}
; 1640 : 
; 1641 : 			draw_2d_mono_sprite (large_display_target_symbols_los[target_symbol_type], dx, dy, target_symbol_colour);

  0058d	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  00590	50		 push	 eax
  00591	51		 push	 ecx
  00592	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00597	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0059c	51		 push	 ecx
  0059d	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  005a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a7	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  005aa	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_los@@3PAPBDA[ecx*4]
  005b1	52		 push	 edx
  005b2	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1642 : 		}
; 1643 : 		else

  005b7	e9 99 00 00 00	 jmp	 $LN24@draw_radar
$LN23@draw_radar:

; 1644 : 		{
; 1645 : 			if (selected_target)

  005bc	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  005c0	74 69		 je	 SHORT $LN30@draw_radar

; 1646 : 			{
; 1647 : //VJ 030423 TSD render mod
; 1648 : 				if (display_on_tsd)

  005c2	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  005c6	74 2e		 je	 SHORT $LN29@draw_radar

; 1649 : 					draw_2d_mono_sprite (large_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, clear_mfd_colour);

  005c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  005cd	50		 push	 eax
  005ce	51		 push	 ecx
  005cf	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  005d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d9	51		 push	 ecx
  005da	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  005df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e4	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  005e7	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_no_los_mask@@3PAPBDA[ecx*4]
  005ee	52		 push	 edx
  005ef	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1650 : 				else

  005f4	eb 35		 jmp	 SHORT $LN30@draw_radar
$LN29@draw_radar:

; 1651 : 					draw_2d_mono_sprite (large_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, MFD_COLOUR6);

  005f6	b8 04 00 00 00	 mov	 eax, 4
  005fb	6b c8 05	 imul	 ecx, eax, 5
  005fe	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00604	52		 push	 edx
  00605	51		 push	 ecx
  00606	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0060b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00610	51		 push	 ecx
  00611	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00616	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0061b	8b 45 fc	 mov	 eax, DWORD PTR _target_symbol_type$[ebp]
  0061e	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?large_display_target_symbols_no_los_mask@@3PAPBDA[eax*4]
  00625	51		 push	 ecx
  00626	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN30@draw_radar:

; 1652 : 			}
; 1653 : 
; 1654 : 			draw_2d_mono_sprite (large_display_target_symbols_no_los[target_symbol_type], dx, dy, target_symbol_colour);

  0062b	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  0062e	50		 push	 eax
  0062f	51		 push	 ecx
  00630	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00635	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063a	51		 push	 ecx
  0063b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00640	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00645	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  00648	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_no_los@@3PAPBDA[ecx*4]
  0064f	52		 push	 edx
  00650	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN24@draw_radar:

; 1655 : 		}
; 1656 : 
; 1657 : 		if (selected_target)

  00655	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00659	0f 84 81 00 00
	00		 je	 $LN31@draw_radar

; 1658 : 		{
; 1659 : //VJ 030423 TSD render mod
; 1660 : 			if (display_on_tsd)

  0065f	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  00663	74 28		 je	 SHORT $LN32@draw_radar

; 1661 : 				draw_2d_mono_sprite (large_display_target_symbol_selected_target_mask, dx, dy, clear_mfd_colour);

  00665	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0066a	50		 push	 eax
  0066b	51		 push	 ecx
  0066c	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00671	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00676	51		 push	 ecx
  00677	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0067c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00681	68 00 00 00 00	 push	 OFFSET ?large_display_target_symbol_selected_target_mask@@3QBDB ; large_display_target_symbol_selected_target_mask
  00686	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1662 : 			else

  0068b	eb 2f		 jmp	 SHORT $LN33@draw_radar
$LN32@draw_radar:

; 1663 : 				draw_2d_mono_sprite (large_display_target_symbol_selected_target_mask, dx, dy, MFD_COLOUR6);

  0068d	b8 04 00 00 00	 mov	 eax, 4
  00692	6b c8 05	 imul	 ecx, eax, 5
  00695	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0069b	52		 push	 edx
  0069c	51		 push	 ecx
  0069d	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  006a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a7	51		 push	 ecx
  006a8	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  006ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b2	68 00 00 00 00	 push	 OFFSET ?large_display_target_symbol_selected_target_mask@@3QBDB ; large_display_target_symbol_selected_target_mask
  006b7	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN33@draw_radar:

; 1664 : 
; 1665 : 			draw_2d_mono_sprite (large_display_target_symbol_selected_target, dx, dy, target_symbol_colour);

  006bc	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  006bf	50		 push	 eax
  006c0	51		 push	 ecx
  006c1	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  006c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006cb	51		 push	 ecx
  006cc	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  006d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d6	68 00 00 00 00	 push	 OFFSET ?large_display_target_symbol_selected_target@@3QBDB ; large_display_target_symbol_selected_target
  006db	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN31@draw_radar:

; 1666 : 		}
; 1667 : 	}
; 1668 : 	else

  006e0	e9 3f 02 00 00	 jmp	 $LN42@draw_radar
$LN21@draw_radar:

; 1669 : 	{
; 1670 : 		if (get_local_entity_int_value (target, INT_TYPE_GUNSHIP_RADAR_LOS_CLEAR))

  006e5	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  006e9	74 0a		 je	 SHORT $LN74@draw_radar
  006eb	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  006ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  006f0	89 4d a0	 mov	 DWORD PTR tv360[ebp], ecx
  006f3	eb 1d		 jmp	 SHORT $LN75@draw_radar
$LN74@draw_radar:
  006f5	68 86 06 00 00	 push	 1670			; 00000686H
  006fa	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  006ff	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00705	52		 push	 edx
  00706	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0070b	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv360[ebp], 0
$LN75@draw_radar:
  00712	b8 01 00 00 00	 mov	 eax, 1
  00717	85 c0		 test	 eax, eax
  00719	74 09		 je	 SHORT $LN76@draw_radar
  0071b	c7 45 9c 50 00
	00 00		 mov	 DWORD PTR tv367[ebp], 80 ; 00000050H
  00722	eb 1d		 jmp	 SHORT $LN77@draw_radar
$LN76@draw_radar:
  00724	68 86 06 00 00	 push	 1670			; 00000686H
  00729	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0072e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00734	51		 push	 ecx
  00735	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0073a	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv367[ebp], 0
$LN77@draw_radar:
  00741	6a 50		 push	 80			; 00000050H
  00743	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00746	52		 push	 edx
  00747	69 45 a0 5c 04
	00 00		 imul	 eax, DWORD PTR tv360[ebp], 1116
  0074e	8b 4d 9c	 mov	 ecx, DWORD PTR tv367[ebp]
  00751	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00758	ff d2		 call	 edx
  0075a	85 c0		 test	 eax, eax
  0075c	0f 84 9e 00 00
	00		 je	 $LN34@draw_radar

; 1671 : 		{
; 1672 : 			if (selected_target)

  00762	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00766	74 69		 je	 SHORT $LN38@draw_radar

; 1673 : 			{
; 1674 : //VJ 030423 TSD render mod
; 1675 : 				if (display_on_tsd)

  00768	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  0076c	74 2e		 je	 SHORT $LN37@draw_radar

; 1676 : 					draw_2d_mono_sprite (small_display_target_symbols_los_mask[target_symbol_type], dx, dy, clear_mfd_colour);

  0076e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00773	50		 push	 eax
  00774	51		 push	 ecx
  00775	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0077a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077f	51		 push	 ecx
  00780	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00785	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078a	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  0078d	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_los_mask@@3PAPBDA[ecx*4]
  00794	52		 push	 edx
  00795	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1677 : 				else

  0079a	eb 35		 jmp	 SHORT $LN38@draw_radar
$LN37@draw_radar:

; 1678 : 					draw_2d_mono_sprite (small_display_target_symbols_los_mask[target_symbol_type], dx, dy, MFD_COLOUR6);

  0079c	b8 04 00 00 00	 mov	 eax, 4
  007a1	6b c8 05	 imul	 ecx, eax, 5
  007a4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007aa	52		 push	 edx
  007ab	51		 push	 ecx
  007ac	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  007b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b6	51		 push	 ecx
  007b7	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  007bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c1	8b 45 fc	 mov	 eax, DWORD PTR _target_symbol_type$[ebp]
  007c4	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?small_display_target_symbols_los_mask@@3PAPBDA[eax*4]
  007cb	51		 push	 ecx
  007cc	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN38@draw_radar:

; 1679 : 			}
; 1680 : 
; 1681 : 			draw_2d_mono_sprite (small_display_target_symbols_los[target_symbol_type], dx, dy, target_symbol_colour);

  007d1	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  007d4	50		 push	 eax
  007d5	51		 push	 ecx
  007d6	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  007db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e0	51		 push	 ecx
  007e1	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  007e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007eb	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  007ee	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_los@@3PAPBDA[ecx*4]
  007f5	52		 push	 edx
  007f6	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1682 : 		}
; 1683 : 		else

  007fb	e9 99 00 00 00	 jmp	 $LN35@draw_radar
$LN34@draw_radar:

; 1684 : 		{
; 1685 : 			if (selected_target)

  00800	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00804	74 69		 je	 SHORT $LN41@draw_radar

; 1686 : 			{
; 1687 : //VJ 030423 TSD render mod
; 1688 : 				if (display_on_tsd)

  00806	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  0080a	74 2e		 je	 SHORT $LN40@draw_radar

; 1689 : 					draw_2d_mono_sprite (small_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, clear_mfd_colour);

  0080c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00811	50		 push	 eax
  00812	51		 push	 ecx
  00813	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00818	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081d	51		 push	 ecx
  0081e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00823	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00828	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  0082b	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_no_los_mask@@3PAPBDA[ecx*4]
  00832	52		 push	 edx
  00833	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1690 : 				else

  00838	eb 35		 jmp	 SHORT $LN41@draw_radar
$LN40@draw_radar:

; 1691 : 					draw_2d_mono_sprite (small_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, MFD_COLOUR6);

  0083a	b8 04 00 00 00	 mov	 eax, 4
  0083f	6b c8 05	 imul	 ecx, eax, 5
  00842	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00848	52		 push	 edx
  00849	51		 push	 ecx
  0084a	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0084f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00854	51		 push	 ecx
  00855	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0085a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0085f	8b 45 fc	 mov	 eax, DWORD PTR _target_symbol_type$[ebp]
  00862	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?small_display_target_symbols_no_los_mask@@3PAPBDA[eax*4]
  00869	51		 push	 ecx
  0086a	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN41@draw_radar:

; 1692 : 			}
; 1693 : 
; 1694 : 			draw_2d_mono_sprite (small_display_target_symbols_no_los[target_symbol_type], dx, dy, target_symbol_colour);

  0086f	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  00872	50		 push	 eax
  00873	51		 push	 ecx
  00874	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00879	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0087e	51		 push	 ecx
  0087f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00884	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00889	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  0088c	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_no_los@@3PAPBDA[ecx*4]
  00893	52		 push	 edx
  00894	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN35@draw_radar:

; 1695 : 		}
; 1696 : 
; 1697 : 		if (selected_target)

  00899	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  0089d	0f 84 81 00 00
	00		 je	 $LN42@draw_radar

; 1698 : 		{
; 1699 : //VJ 030423 TSD render mod
; 1700 : 			if (display_on_tsd)

  008a3	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  008a7	74 28		 je	 SHORT $LN43@draw_radar

; 1701 : 				draw_2d_mono_sprite (small_display_target_symbol_selected_target_mask, dx, dy, clear_mfd_colour);

  008a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  008ae	50		 push	 eax
  008af	51		 push	 ecx
  008b0	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  008b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ba	51		 push	 ecx
  008bb	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  008c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c5	68 00 00 00 00	 push	 OFFSET ?small_display_target_symbol_selected_target_mask@@3QBDB ; small_display_target_symbol_selected_target_mask
  008ca	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 1702 : 			else

  008cf	eb 2f		 jmp	 SHORT $LN44@draw_radar
$LN43@draw_radar:

; 1703 : 				draw_2d_mono_sprite (small_display_target_symbol_selected_target_mask, dx, dy, MFD_COLOUR6);

  008d1	b8 04 00 00 00	 mov	 eax, 4
  008d6	6b c8 05	 imul	 ecx, eax, 5
  008d9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008df	52		 push	 edx
  008e0	51		 push	 ecx
  008e1	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  008e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008eb	51		 push	 ecx
  008ec	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  008f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f6	68 00 00 00 00	 push	 OFFSET ?small_display_target_symbol_selected_target_mask@@3QBDB ; small_display_target_symbol_selected_target_mask
  008fb	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN44@draw_radar:

; 1704 : 
; 1705 : 			draw_2d_mono_sprite (small_display_target_symbol_selected_target, dx, dy, target_symbol_colour);

  00900	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  00903	50		 push	 eax
  00904	51		 push	 ecx
  00905	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0090a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0090f	51		 push	 ecx
  00910	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00915	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0091a	68 00 00 00 00	 push	 OFFSET ?small_display_target_symbol_selected_target@@3QBDB ; small_display_target_symbol_selected_target
  0091f	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN42@draw_radar:

; 1706 : 		}
; 1707 : 	}
; 1708 : }

  00924	5f		 pop	 edi
  00925	5e		 pop	 esi
  00926	5b		 pop	 ebx
  00927	8b e5		 mov	 esp, ebp
  00929	5d		 pop	 ebp
  0092a	c2 14 00	 ret	 20			; 00000014H
?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ENDP ; draw_radar_target_symbol
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z
_TEXT	SEGMENT
tv90 = -108						; size = 4
_index$1 = -40						; size = 4
_index$2 = -36						; size = 4
_y2$ = -32						; size = 4
_x2$ = -28						; size = 4
_y1$ = -24						; size = 4
_x1$ = -20						; size = 4
_cos_theta$ = -16					; size = 4
_sin_theta$ = -12					; size = 4
_theta$ = -8						; size = 4
_num_segments$ = -4					; size = 4
_arc_size$ = 8						; size = 4
_radius$ = 12						; size = 4
_colour$ = 16						; size = 4
?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z PROC		; draw_radar_arc, COMDAT

; 1500 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1501 : 	int
; 1502 : 		num_segments;
; 1503 : 
; 1504 : 	float
; 1505 : 		theta,
; 1506 : 		sin_theta,
; 1507 : 		cos_theta,
; 1508 : 		x1,
; 1509 : 		y1,
; 1510 : 		x2,
; 1511 : 		y2;
; 1512 : 
; 1513 : 	num_segments = (int) (arc_size * (1.0 / APACHE_RADAR_SCAN_ARC_SEGMENT_SIZE));

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _arc_size$[ebp]
  0000e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4026eb1686b280e6
  00016	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0001a	89 45 fc	 mov	 DWORD PTR _num_segments$[ebp], eax

; 1514 : 
; 1515 : 	if (num_segments > 0)

  0001d	83 7d fc 00	 cmp	 DWORD PTR _num_segments$[ebp], 0
  00021	0f 8e 9f 01 00
	00		 jle	 $LN3@draw_radar

; 1516 : 	{
; 1517 : 		theta = arc_size * 0.5;

  00027	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _arc_size$[ebp]
  0002c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00034	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00038	f3 0f 11 45 f8	 movss	 DWORD PTR _theta$[ebp], xmm0

; 1518 : 
; 1519 : 		sine_cosine (theta, &sin_theta, &cos_theta);

  0003d	8d 45 dc	 lea	 eax, DWORD PTR _index$2[ebp]
  00040	50		 push	 eax
  00041	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _theta$[ebp]
  00046	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@40845f306446f9b4
  0004e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00052	51		 push	 ecx
  00053	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00058	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  0005d	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  00060	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00065	89 45 dc	 mov	 DWORD PTR _index$2[ebp], eax
  00068	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  0006b	f3 0f 10 04 85
	00 00 00 00	 movss	 xmm0, DWORD PTR ?sine_table@@3PAMA[eax*4]
  00074	f3 0f 11 45 f4	 movss	 DWORD PTR _sin_theta$[ebp], xmm0
  00079	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  0007c	05 00 04 00 00	 add	 eax, 1024		; 00000400H
  00081	89 45 dc	 mov	 DWORD PTR _index$2[ebp], eax
  00084	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  00087	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0008c	89 45 dc	 mov	 DWORD PTR _index$2[ebp], eax
  0008f	8b 45 dc	 mov	 eax, DWORD PTR _index$2[ebp]
  00092	f3 0f 10 04 85
	00 00 00 00	 movss	 xmm0, DWORD PTR ?sine_table@@3PAMA[eax*4]
  0009b	f3 0f 11 45 f0	 movss	 DWORD PTR _cos_theta$[ebp], xmm0

; 1520 : 
; 1521 : 		x1 = -radius * sin_theta;

  000a0	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
  000a5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000ac	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _sin_theta$[ebp]
  000b1	f3 0f 11 45 ec	 movss	 DWORD PTR _x1$[ebp], xmm0

; 1522 : 		y1 = radius * cos_theta;

  000b6	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
  000bb	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _cos_theta$[ebp]
  000c0	f3 0f 11 45 e8	 movss	 DWORD PTR _y1$[ebp], xmm0
$LN2@draw_radar:

; 1523 : 
; 1524 : 		while (num_segments--)

  000c5	8b 45 fc	 mov	 eax, DWORD PTR _num_segments$[ebp]
  000c8	89 45 94	 mov	 DWORD PTR tv90[ebp], eax
  000cb	8b 4d fc	 mov	 ecx, DWORD PTR _num_segments$[ebp]
  000ce	83 e9 01	 sub	 ecx, 1
  000d1	89 4d fc	 mov	 DWORD PTR _num_segments$[ebp], ecx
  000d4	83 7d 94 00	 cmp	 DWORD PTR tv90[ebp], 0
  000d8	0f 84 e8 00 00
	00		 je	 $LN3@draw_radar

; 1525 : 		{
; 1526 : 			theta -= APACHE_RADAR_SCAN_ARC_SEGMENT_SIZE;

  000de	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _theta$[ebp]
  000e3	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3db2b8c2
  000eb	f3 0f 11 45 f8	 movss	 DWORD PTR _theta$[ebp], xmm0

; 1527 : 
; 1528 : 			sine_cosine (theta, &sin_theta, &cos_theta);

  000f0	8d 45 d8	 lea	 eax, DWORD PTR _index$1[ebp]
  000f3	50		 push	 eax
  000f4	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _theta$[ebp]
  000f9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@40845f306446f9b4
  00101	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00105	51		 push	 ecx
  00106	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010b	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  00110	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  00113	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00118	89 45 d8	 mov	 DWORD PTR _index$1[ebp], eax
  0011b	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  0011e	f3 0f 10 04 85
	00 00 00 00	 movss	 xmm0, DWORD PTR ?sine_table@@3PAMA[eax*4]
  00127	f3 0f 11 45 f4	 movss	 DWORD PTR _sin_theta$[ebp], xmm0
  0012c	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  0012f	05 00 04 00 00	 add	 eax, 1024		; 00000400H
  00134	89 45 d8	 mov	 DWORD PTR _index$1[ebp], eax
  00137	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  0013a	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0013f	89 45 d8	 mov	 DWORD PTR _index$1[ebp], eax
  00142	8b 45 d8	 mov	 eax, DWORD PTR _index$1[ebp]
  00145	f3 0f 10 04 85
	00 00 00 00	 movss	 xmm0, DWORD PTR ?sine_table@@3PAMA[eax*4]
  0014e	f3 0f 11 45 f0	 movss	 DWORD PTR _cos_theta$[ebp], xmm0

; 1529 : 
; 1530 : 			x2 = -radius * sin_theta;

  00153	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
  00158	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0015f	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _sin_theta$[ebp]
  00164	f3 0f 11 45 e4	 movss	 DWORD PTR _x2$[ebp], xmm0

; 1531 : 			y2 = radius * cos_theta;

  00169	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
  0016e	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _cos_theta$[ebp]
  00173	f3 0f 11 45 e0	 movss	 DWORD PTR _y2$[ebp], xmm0

; 1532 : 
; 1533 : 			draw_2d_line (x1, y1, x2, y2, colour);

  00178	8b 45 10	 mov	 eax, DWORD PTR _colour$[ebp]
  0017b	50		 push	 eax
  0017c	51		 push	 ecx
  0017d	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00182	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00187	51		 push	 ecx
  00188	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0018d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00192	51		 push	 ecx
  00193	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00198	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019d	51		 push	 ecx
  0019e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x1$[ebp]
  001a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1534 : 
; 1535 : 			x1 = x2;

  001ad	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x2$[ebp]
  001b2	f3 0f 11 45 ec	 movss	 DWORD PTR _x1$[ebp], xmm0

; 1536 : 			y1 = y2;

  001b7	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  001bc	f3 0f 11 45 e8	 movss	 DWORD PTR _y1$[ebp], xmm0

; 1537 : 		}

  001c1	e9 ff fe ff ff	 jmp	 $LN2@draw_radar
$LN3@draw_radar:

; 1538 : 	}
; 1539 : }

  001c6	5f		 pop	 edi
  001c7	5e		 pop	 esi
  001c8	5b		 pop	 ebx
  001c9	8b e5		 mov	 esp, ebp
  001cb	5d		 pop	 ebp
  001cc	c2 0c 00	 ret	 12			; 0000000cH
?draw_radar_arc@@YGXMMUREAL_COLOUR@@@Z ENDP		; draw_radar_arc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z
_TEXT	SEGMENT
tv214 = -284						; size = 4
tv195 = -284						; size = 4
tv149 = -284						; size = 4
tv207 = -280						; size = 4
tv187 = -280						; size = 4
tv142 = -280						; size = 4
_width$ = -212						; size = 4
_y_adjust$ = -208					; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
_target$ = 8						; size = 4
_target_range$ = 12					; size = 4
_radar$ = 16						; size = 4
?display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z PROC ; display_radar_target_details, COMDAT

; 1337 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1338 : 	const char
; 1339 : 		*s;
; 1340 : 	char
; 1341 : 		buffer[200];
; 1342 : 
; 1343 : 	float
; 1344 : 		y_adjust,
; 1345 : 		width;
; 1346 : 
; 1347 : 	ASSERT (radar);

  0000c	83 7d 10 00	 cmp	 DWORD PTR _radar$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@display_ra
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA
  00017	83 c0 0a	 add	 eax, 10			; 0000000aH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_05EMNNHGFM@radar@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@display_ra:

; 1348 : 
; 1349 : 	if (blackhawk_damage.radar)

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  0002f	83 e0 01	 and	 eax, 1
  00032	74 05		 je	 SHORT $LN3@display_ra

; 1350 : 	{
; 1351 : 		return;

  00034	e9 5f 05 00 00	 jmp	 $LN1@display_ra
$LN3@display_ra:

; 1352 : 	}
; 1353 : 
; 1354 : 	if (draw_large_mfd)

  00039	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00040	74 12		 je	 SHORT $LN4@display_ra

; 1355 : 	{
; 1356 : 		y_adjust = -12.0;

  00042	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  0004a	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1357 : 	}
; 1358 : 	else

  00052	eb 10		 jmp	 SHORT $LN5@display_ra
$LN4@display_ra:

; 1359 : 	{
; 1360 : 		y_adjust = -5.0;

  00054	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  0005c	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN5@display_ra:

; 1361 : 	}
; 1362 : 
; 1363 : 	//
; 1364 : 	// name
; 1365 : 	//
; 1366 : 
; 1367 : 	s = get_target_display_name (target, buffer, draw_large_mfd);

  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?draw_large_mfd@@3HA
  00069	50		 push	 eax
  0006a	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00070	51		 push	 ecx
  00071	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00074	52		 push	 edx
  00075	e8 00 00 00 00	 call	 ?get_target_display_name@@YGPBDPAUENTITY@@PADH@Z ; get_target_display_name
  0007a	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1368 : 
; 1369 : 	if (s)

  0007d	83 7d fc 00	 cmp	 DWORD PTR _s$[ebp], 0
  00081	74 4b		 je	 SHORT $LN6@display_ra

; 1370 : 	{
; 1371 : 		set_2d_mono_font_position (-0.8, -1.0);

  00083	51		 push	 ecx
  00084	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0008c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00091	51		 push	 ecx
  00092	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0009a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1372 : 
; 1373 : 		set_mono_font_rel_position (1.0, y_adjust);

  000a4	51		 push	 ecx
  000a5	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b2	51		 push	 ecx
  000b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c0	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1374 : 
; 1375 : 		print_mono_font_string (s);

  000c5	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN6@display_ra:

; 1376 : 	}
; 1377 : 
; 1378 : 	if (target)

  000ce	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  000d2	0f 84 e9 01 00
	00		 je	 $LN10@display_ra

; 1379 : 	{
; 1380 : 		//
; 1381 : 		// range
; 1382 : 		//
; 1383 : 
; 1384 : 		if ((target_range < 1000.0) && (!blackhawk_damage.laser_designator))

  000d8	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  000dd	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  000e5	66 0f 2f c8	 comisd	 xmm1, xmm0
  000e9	76 29		 jbe	 SHORT $LN8@display_ra
  000eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  000f0	c1 e8 06	 shr	 eax, 6
  000f3	83 e0 01	 and	 eax, 1
  000f6	75 1c		 jne	 SHORT $LN8@display_ra

; 1385 : 		{
; 1386 : 			sprintf (buffer, "%dm", (int) target_range);

  000f8	f3 0f 2c 45 0c	 cvttss2si eax, DWORD PTR _target_range$[ebp]
  000fd	50		 push	 eax
  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_03NGNKAJPJ@?$CFdm@
  00103	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00109	51		 push	 ecx
  0010a	e8 00 00 00 00	 call	 _sprintf
  0010f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1387 : 		}
; 1388 : 		else

  00112	eb 29		 jmp	 SHORT $LN9@display_ra
$LN8@display_ra:

; 1389 : 		{
; 1390 : 			sprintf (buffer, "%.1fKm", target_range * (1.0 / 1000.0));

  00114	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  00119	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00121	83 ec 08	 sub	 esp, 8
  00124	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00129	68 00 00 00 00	 push	 OFFSET ??_C@_06OMCABMNO@?$CF?41fKm@
  0012e	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 _sprintf
  0013a	83 c4 10	 add	 esp, 16			; 00000010H
$LN9@display_ra:

; 1391 : 		}
; 1392 : 
; 1393 : 		width = get_mono_font_string_width (buffer);

  0013d	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00149	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 1394 : 
; 1395 : 		set_2d_mono_font_position (0.8, -1.0);

  0014f	51		 push	 ecx
  00150	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00158	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015d	51		 push	 ecx
  0015e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00166	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1396 : 
; 1397 : 		set_mono_font_rel_position (-width, y_adjust);

  00170	51		 push	 ecx
  00171	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00179	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017e	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00186	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0018d	51		 push	 ecx
  0018e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00193	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1398 : 
; 1399 : 		print_mono_font_string (buffer);

  00198	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0019e	50		 push	 eax
  0019f	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1400 : 
; 1401 : 		//
; 1402 : 		// no line of sight
; 1403 : 		//
; 1404 : 
; 1405 : 		if (!get_local_entity_int_value (target, INT_TYPE_GUNSHIP_RADAR_LOS_CLEAR))

  001a4	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  001a8	74 0d		 je	 SHORT $LN23@display_ra
  001aa	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  001ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  001af	89 8d e8 fe ff
	ff		 mov	 DWORD PTR tv142[ebp], ecx
  001b5	eb 20		 jmp	 SHORT $LN24@display_ra
$LN23@display_ra:
  001b7	68 7d 05 00 00	 push	 1405			; 0000057dH
  001bc	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001c1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001c7	52		 push	 edx
  001c8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001cd	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv142[ebp], 0
$LN24@display_ra:
  001d7	b8 01 00 00 00	 mov	 eax, 1
  001dc	85 c0		 test	 eax, eax
  001de	74 0c		 je	 SHORT $LN25@display_ra
  001e0	c7 85 e4 fe ff
	ff 50 00 00 00	 mov	 DWORD PTR tv149[ebp], 80 ; 00000050H
  001ea	eb 20		 jmp	 SHORT $LN26@display_ra
$LN25@display_ra:
  001ec	68 7d 05 00 00	 push	 1405			; 0000057dH
  001f1	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001f6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  001fc	51		 push	 ecx
  001fd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00202	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv149[ebp], 0
$LN26@display_ra:
  0020c	6a 50		 push	 80			; 00000050H
  0020e	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00211	52		 push	 edx
  00212	69 85 e8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv142[ebp], 1116
  0021c	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR tv149[ebp]
  00222	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00229	ff d2		 call	 edx
  0022b	85 c0		 test	 eax, eax
  0022d	0f 85 8e 00 00
	00		 jne	 $LN10@display_ra

; 1406 : 		{
; 1407 : 			if (draw_large_mfd)

  00233	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0023a	74 12		 je	 SHORT $LN11@display_ra

; 1408 : 			{
; 1409 : 				y_adjust = -25.0;

  0023c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  00244	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1410 : 			}
; 1411 : 			else

  0024c	eb 10		 jmp	 SHORT $LN12@display_ra
$LN11@display_ra:

; 1412 : 			{
; 1413 : 				y_adjust = -12.0;

  0024e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  00256	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN12@display_ra:

; 1414 : 			}
; 1415 : 
; 1416 : 			width = get_mono_font_string_width ("NO LOS");

  0025e	68 00 00 00 00	 push	 OFFSET ??_C@_06HCPKJKPH@NO?5LOS@
  00263	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00268	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 1417 : 
; 1418 : 			set_2d_mono_font_position (0.8, -1.0);

  0026e	51		 push	 ecx
  0026f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00277	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027c	51		 push	 ecx
  0027d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00285	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028a	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1419 : 
; 1420 : 			set_mono_font_rel_position (-width, y_adjust);

  0028f	51		 push	 ecx
  00290	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00298	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029d	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  002a5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  002ac	51		 push	 ecx
  002ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1421 : 
; 1422 : 			print_mono_font_string ("NO LOS");

  002b7	68 00 00 00 00	 push	 OFFSET ??_C@_06HCPKJKPH@NO?5LOS@
  002bc	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN10@display_ra:

; 1423 : 		}
; 1424 : 	}
; 1425 : 
; 1426 : 	//
; 1427 : 	// auto
; 1428 : 	//
; 1429 : 
; 1430 : 	if (radar->auto_target)

  002c1	8b 45 10	 mov	 eax, DWORD PTR _radar$[ebp]
  002c4	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  002c8	74 77		 je	 SHORT $LN13@display_ra

; 1431 : 	{
; 1432 : 		if (draw_large_mfd)

  002ca	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  002d1	74 12		 je	 SHORT $LN14@display_ra

; 1433 : 		{
; 1434 : 			y_adjust = 18.0;

  002d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41900000
  002db	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1435 : 		}
; 1436 : 		else

  002e3	eb 10		 jmp	 SHORT $LN15@display_ra
$LN14@display_ra:

; 1437 : 		{
; 1438 : 			y_adjust = 9.0;

  002e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41100000
  002ed	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN15@display_ra:

; 1439 : 		}
; 1440 : 
; 1441 : 		set_2d_mono_font_position (-0.8, 1.0);

  002f5	51		 push	 ecx
  002f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00303	51		 push	 ecx
  00304	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0030c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00311	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1442 : 
; 1443 : 		set_mono_font_rel_position (1.0, y_adjust);

  00316	51		 push	 ecx
  00317	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0031f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00324	51		 push	 ecx
  00325	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0032d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00332	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1444 : 
; 1445 : 		print_mono_font_string ("AUTO");

  00337	68 00 00 00 00	 push	 OFFSET ??_C@_04LMMJFDCN@AUTO@
  0033c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN13@display_ra:

; 1446 : 	}
; 1447 : 
; 1448 : 	//
; 1449 : 	// locked
; 1450 : 	//
; 1451 : 
; 1452 : 	if (radar->target_locked)

  00341	8b 45 10	 mov	 eax, DWORD PTR _radar$[ebp]
  00344	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00348	74 77		 je	 SHORT $LN16@display_ra

; 1453 : 	{
; 1454 : 		if (draw_large_mfd)

  0034a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00351	74 12		 je	 SHORT $LN17@display_ra

; 1455 : 		{
; 1456 : 			y_adjust = -25.0;

  00353	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  0035b	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1457 : 		}
; 1458 : 		else

  00363	eb 10		 jmp	 SHORT $LN18@display_ra
$LN17@display_ra:

; 1459 : 		{
; 1460 : 			y_adjust = -12.0;

  00365	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  0036d	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN18@display_ra:

; 1461 : 		}
; 1462 : 
; 1463 : 		set_2d_mono_font_position (-0.8, -1.0);

  00375	51		 push	 ecx
  00376	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0037e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00383	51		 push	 ecx
  00384	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0038c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00391	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1464 : 
; 1465 : 		set_mono_font_rel_position (1.0, y_adjust);

  00396	51		 push	 ecx
  00397	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0039f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a4	51		 push	 ecx
  003a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1466 : 
; 1467 : 		print_mono_font_string ("LOCKED");

  003b7	68 00 00 00 00	 push	 OFFSET ??_C@_06KODELPLK@LOCKED@
  003bc	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN16@display_ra:

; 1468 : 	}
; 1469 : // Jabberwock 031107 Designated targets
; 1470 : 
; 1471 : 	target = get_local_entity_parent (get_gunship_entity (), LIST_TYPE_TARGET);

  003c1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  003c8	74 0f		 je	 SHORT $LN27@display_ra
  003ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  003cf	8b 08		 mov	 ecx, DWORD PTR [eax]
  003d1	89 8d e8 fe ff
	ff		 mov	 DWORD PTR tv187[ebp], ecx
  003d7	eb 27		 jmp	 SHORT $LN28@display_ra
$LN27@display_ra:
  003d9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA
  003df	81 c2 86 00 00
	00		 add	 edx, 134		; 00000086H
  003e5	52		 push	 edx
  003e6	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  003eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003f0	50		 push	 eax
  003f1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003f6	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv187[ebp], 0
$LN28@display_ra:
  00400	b9 01 00 00 00	 mov	 ecx, 1
  00405	85 c9		 test	 ecx, ecx
  00407	74 0c		 je	 SHORT $LN29@display_ra
  00409	c7 85 e4 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv195[ebp], 38 ; 00000026H
  00413	eb 27		 jmp	 SHORT $LN30@display_ra
$LN29@display_ra:
  00415	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z@4JA
  0041b	81 c2 86 00 00
	00		 add	 edx, 134		; 00000086H
  00421	52		 push	 edx
  00422	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00427	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0042c	50		 push	 eax
  0042d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00432	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv195[ebp], 0
$LN30@display_ra:
  0043c	6a 26		 push	 38			; 00000026H
  0043e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00444	51		 push	 ecx
  00445	69 95 e8 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv187[ebp], 180
  0044f	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR tv195[ebp]
  00455	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0045c	ff d1		 call	 ecx
  0045e	89 45 08	 mov	 DWORD PTR _target$[ebp], eax

; 1472 : 
; 1473 : 	if (target && get_local_entity_parent (target, LIST_TYPE_DESIGNATED_TARGET))

  00461	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00465	0f 84 2d 01 00
	00		 je	 $LN19@display_ra
  0046b	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0046f	74 0d		 je	 SHORT $LN31@display_ra
  00471	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00474	8b 08		 mov	 ecx, DWORD PTR [eax]
  00476	89 8d e8 fe ff
	ff		 mov	 DWORD PTR tv207[ebp], ecx
  0047c	eb 20		 jmp	 SHORT $LN32@display_ra
$LN31@display_ra:
  0047e	68 c1 05 00 00	 push	 1473			; 000005c1H
  00483	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00488	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0048e	52		 push	 edx
  0048f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00494	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv207[ebp], 0
$LN32@display_ra:
  0049e	b8 01 00 00 00	 mov	 eax, 1
  004a3	85 c0		 test	 eax, eax
  004a5	74 0c		 je	 SHORT $LN33@display_ra
  004a7	c7 85 e4 fe ff
	ff 0a 00 00 00	 mov	 DWORD PTR tv214[ebp], 10 ; 0000000aH
  004b1	eb 20		 jmp	 SHORT $LN34@display_ra
$LN33@display_ra:
  004b3	68 c1 05 00 00	 push	 1473			; 000005c1H
  004b8	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  004bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  004c3	51		 push	 ecx
  004c4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004c9	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv214[ebp], 0
$LN34@display_ra:
  004d3	6a 0a		 push	 10			; 0000000aH
  004d5	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  004d8	52		 push	 edx
  004d9	69 85 e8 fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv207[ebp], 180
  004e3	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR tv214[ebp]
  004e9	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  004f0	ff d2		 call	 edx
  004f2	85 c0		 test	 eax, eax
  004f4	0f 84 9e 00 00
	00		 je	 $LN19@display_ra

; 1474 : 	{
; 1475 : 		if (draw_large_mfd)

  004fa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00501	74 12		 je	 SHORT $LN20@display_ra

; 1476 : 		{
; 1477 : 			y_adjust = -25.0;

  00503	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  0050b	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1478 : 		}
; 1479 : 		else

  00513	eb 10		 jmp	 SHORT $LN21@display_ra
$LN20@display_ra:

; 1480 : 		{
; 1481 : 			y_adjust = -12.0;

  00515	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  0051d	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN21@display_ra:

; 1482 : 		}
; 1483 : 
; 1484 : 		width = get_mono_font_string_width ("MARKED");

  00525	68 00 00 00 00	 push	 OFFSET ??_C@_06GPMJGLEM@MARKED@
  0052a	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0052f	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 1485 : 
; 1486 : 		set_2d_mono_font_position (1.0, -1.0);

  00535	51		 push	 ecx
  00536	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0053e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00543	51		 push	 ecx
  00544	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0054c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00551	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1487 : 
; 1488 : 		set_mono_font_rel_position (-width -1.0, y_adjust);

  00556	51		 push	 ecx
  00557	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0055f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00564	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  0056c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00573	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00577	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0057f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00583	51		 push	 ecx
  00584	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00589	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1489 : 
; 1490 : 		print_mono_font_string ("MARKED");		

  0058e	68 00 00 00 00	 push	 OFFSET ??_C@_06GPMJGLEM@MARKED@
  00593	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN19@display_ra:
$LN1@display_ra:

; 1491 : 	}
; 1492 : // Jabberwock 031107 ends
; 1493 : }

  00598	5f		 pop	 edi
  00599	5e		 pop	 esi
  0059a	5b		 pop	 ebx
  0059b	8b e5		 mov	 esp, ebp
  0059d	5d		 pop	 ebp
  0059e	c2 0c 00	 ret	 12			; 0000000cH
?display_radar_target_details@@YGXPAUENTITY@@MPAURADAR_PARAMS@@@Z ENDP ; display_radar_target_details
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?display_radar_scan_range@@YGXM@Z
_TEXT	SEGMENT
_y_adjust$ = -16					; size = 4
_width$ = -12						; size = 4
_s$ = -8						; size = 8
_scan_range$ = 8					; size = 4
?display_radar_scan_range@@YGXM@Z PROC			; display_radar_scan_range, COMDAT

; 1273 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1274 : //VJ 030807 radar range adjustable
; 1275 : 	char
; 1276 : 		s[8];
; 1277 : //		*s;
; 1278 : 
; 1279 : 	float
; 1280 : 		width,
; 1281 : 		y_adjust;
; 1282 : 
; 1283 : 	if (scan_range == BLACKHAWK_RADAR_SCAN_RANGE_500)

  00009	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  0000e	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?BLACKHAWK_RADAR_SCAN_RANGE_500@@3MA
  00015	9f		 lahf
  00016	f6 c4 44	 test	 ah, 68			; 00000044H
  00019	7a 26		 jp	 SHORT $LN2@display_ra

; 1284 : 	{
; 1285 : //		s = "500m";
; 1286 : 		sprintf(s,"%.0fm",BLACKHAWK_RADAR_SCAN_RANGE_500);

  0001b	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?BLACKHAWK_RADAR_SCAN_RANGE_500@@3MA
  00023	83 ec 08	 sub	 esp, 8
  00026	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_05LIPABGF@?$CF?40fm@
  00030	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 _sprintf
  00039	83 c4 10	 add	 esp, 16			; 00000010H
  0003c	e9 1b 01 00 00	 jmp	 $LN11@display_ra
$LN2@display_ra:

; 1287 : 	}
; 1288 : 	else if (scan_range == BLACKHAWK_RADAR_SCAN_RANGE_1000)

  00041	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  00046	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?BLACKHAWK_RADAR_SCAN_RANGE_1000@@3MA
  0004d	9f		 lahf
  0004e	f6 c4 44	 test	 ah, 68			; 00000044H
  00051	7a 32		 jp	 SHORT $LN4@display_ra

; 1289 : 	{
; 1290 : //		s = "1Km";
; 1291 : 		sprintf(s,"%.0fKm",BLACKHAWK_RADAR_SCAN_RANGE_1000/1000);

  00053	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?BLACKHAWK_RADAR_SCAN_RANGE_1000@@3MA
  0005b	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  00063	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00067	83 ec 08	 sub	 esp, 8
  0006a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_06NBEADFGO@?$CF?40fKm@
  00074	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 _sprintf
  0007d	83 c4 10	 add	 esp, 16			; 00000010H
  00080	e9 d7 00 00 00	 jmp	 $LN11@display_ra
$LN4@display_ra:

; 1292 : 	}
; 1293 : 	else if (scan_range == BLACKHAWK_RADAR_SCAN_RANGE_2000)

  00085	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  0008a	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?BLACKHAWK_RADAR_SCAN_RANGE_2000@@3MA
  00091	9f		 lahf
  00092	f6 c4 44	 test	 ah, 68			; 00000044H
  00095	7a 32		 jp	 SHORT $LN6@display_ra

; 1294 : 	{
; 1295 : //		s = "2Km";
; 1296 : 		sprintf(s,"%.0fKm",BLACKHAWK_RADAR_SCAN_RANGE_2000/1000);

  00097	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?BLACKHAWK_RADAR_SCAN_RANGE_2000@@3MA
  0009f	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  000a7	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000ab	83 ec 08	 sub	 esp, 8
  000ae	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000b3	68 00 00 00 00	 push	 OFFSET ??_C@_06NBEADFGO@?$CF?40fKm@
  000b8	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 _sprintf
  000c1	83 c4 10	 add	 esp, 16			; 00000010H
  000c4	e9 93 00 00 00	 jmp	 $LN11@display_ra
$LN6@display_ra:

; 1297 : 	}
; 1298 : 	else if (scan_range == BLACKHAWK_RADAR_SCAN_RANGE_4000)

  000c9	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  000ce	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?BLACKHAWK_RADAR_SCAN_RANGE_4000@@3MA
  000d5	9f		 lahf
  000d6	f6 c4 44	 test	 ah, 68			; 00000044H
  000d9	7a 2f		 jp	 SHORT $LN8@display_ra

; 1299 : 	{
; 1300 : //		s = "4Km";
; 1301 : 		sprintf(s,"%.0fKm",BLACKHAWK_RADAR_SCAN_RANGE_4000/1000);

  000db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?BLACKHAWK_RADAR_SCAN_RANGE_4000@@3MA
  000e3	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  000eb	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000ef	83 ec 08	 sub	 esp, 8
  000f2	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000f7	68 00 00 00 00	 push	 OFFSET ??_C@_06NBEADFGO@?$CF?40fKm@
  000fc	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 _sprintf
  00105	83 c4 10	 add	 esp, 16			; 00000010H
  00108	eb 52		 jmp	 SHORT $LN11@display_ra
$LN8@display_ra:

; 1302 : 	}
; 1303 : 	else if (scan_range == BLACKHAWK_RADAR_SCAN_RANGE_8000)

  0010a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _scan_range$[ebp]
  0010f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR ?BLACKHAWK_RADAR_SCAN_RANGE_8000@@3MA
  00116	9f		 lahf
  00117	f6 c4 44	 test	 ah, 68			; 00000044H
  0011a	7a 2f		 jp	 SHORT $LN10@display_ra

; 1304 : 	{
; 1305 : //		s = "8Km";
; 1306 : 		sprintf(s,"%.0fKm",BLACKHAWK_RADAR_SCAN_RANGE_8000/1000);

  0011c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?BLACKHAWK_RADAR_SCAN_RANGE_8000@@3MA
  00124	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  0012c	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00130	83 ec 08	 sub	 esp, 8
  00133	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00138	68 00 00 00 00	 push	 OFFSET ??_C@_06NBEADFGO@?$CF?40fKm@
  0013d	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  00140	50		 push	 eax
  00141	e8 00 00 00 00	 call	 _sprintf
  00146	83 c4 10	 add	 esp, 16			; 00000010H

; 1307 : 	}
; 1308 : 	else

  00149	eb 11		 jmp	 SHORT $LN11@display_ra
$LN10@display_ra:

; 1309 : 	{
; 1310 : //		s = "XXX";
; 1311 : 		sprintf(s,"XXX");

  0014b	68 00 00 00 00	 push	 OFFSET ??_C@_03MAMPKPPK@XXX@
  00150	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 _sprintf
  00159	83 c4 08	 add	 esp, 8
$LN11@display_ra:

; 1312 : 	}
; 1313 : 
; 1314 : 	width = get_mono_font_string_width (s);

  0015c	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  0015f	50		 push	 eax
  00160	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00165	d9 5d f4	 fstp	 DWORD PTR _width$[ebp]

; 1315 : 
; 1316 : 	if (draw_large_mfd)

  00168	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0016f	74 0f		 je	 SHORT $LN12@display_ra

; 1317 : 	{
; 1318 : 		y_adjust = 5.0;

  00171	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  00179	f3 0f 11 45 f0	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1319 : 	}
; 1320 : 	else

  0017e	eb 0d		 jmp	 SHORT $LN13@display_ra
$LN12@display_ra:

; 1321 : 	{
; 1322 : 		y_adjust = 2.0;

  00180	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00188	f3 0f 11 45 f0	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN13@display_ra:

; 1323 : 	}
; 1324 : 
; 1325 : 	set_2d_mono_font_position (0.8, 1.0);

  0018d	51		 push	 ecx
  0018e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00196	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019b	51		 push	 ecx
  0019c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  001a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a9	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1326 : 
; 1327 : 	set_mono_font_rel_position (-width, y_adjust);

  001ae	51		 push	 ecx
  001af	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  001b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b9	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _width$[ebp]
  001be	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001c5	51		 push	 ecx
  001c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cb	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1328 : 
; 1329 : 	print_mono_font_string (s);

  001d0	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  001d3	50		 push	 eax
  001d4	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1330 : }

  001d9	5f		 pop	 edi
  001da	5e		 pop	 esi
  001db	5b		 pop	 ebx
  001dc	8b e5		 mov	 esp, ebp
  001de	5d		 pop	 ebp
  001df	c2 04 00	 ret	 4
?display_radar_scan_range@@YGXM@Z ENDP			; display_radar_scan_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_field_of_regard_and_view_boxes@@YGXXZ
_TEXT	SEGMENT
_y$ = -8						; size = 4
_x$ = -4						; size = 4
?draw_field_of_regard_and_view_boxes@@YGXXZ PROC	; draw_field_of_regard_and_view_boxes, COMDAT

; 1203 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1204 : 	float
; 1205 : 		x,
; 1206 : 		y;
; 1207 : 
; 1208 : 	if (draw_large_mfd)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00010	0f 84 93 05 00
	00		 je	 $LN2@draw_field

; 1209 : 	{
; 1210 : 		draw_2d_line (-0.3000, -0.6750,  0.3000, -0.6750, MFD_COLOUR1);

  00016	b8 04 00 00 00	 mov	 eax, 4
  0001b	6b c8 00	 imul	 ecx, eax, 0
  0001e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00024	52		 push	 edx
  00025	51		 push	 ecx
  00026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2ccccd
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	51		 push	 ecx
  00034	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  0003c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00041	51		 push	 ecx
  00042	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2ccccd
  0004a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004f	51		 push	 ecx
  00050	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  00058	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1211 : 		draw_2d_line (-0.3000, -0.9000,  0.3000, -0.9000, MFD_COLOUR1);

  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	6b c8 00	 imul	 ecx, eax, 0
  0006a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00070	52		 push	 edx
  00071	51		 push	 ecx
  00072	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  0007a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007f	51		 push	 ecx
  00080	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00088	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008d	51		 push	 ecx
  0008e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  00096	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009b	51		 push	 ecx
  0009c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  000a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1212 : 		draw_2d_line (-0.3000, -0.6750, -0.3000, -0.9000, MFD_COLOUR1);

  000ae	b8 04 00 00 00	 mov	 eax, 4
  000b3	6b c8 00	 imul	 ecx, eax, 0
  000b6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000bc	52		 push	 edx
  000bd	51		 push	 ecx
  000be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  000c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cb	51		 push	 ecx
  000cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  000d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d9	51		 push	 ecx
  000da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2ccccd
  000e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e7	51		 push	 ecx
  000e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  000f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1213 : 		draw_2d_line ( 0.3000, -0.6750,  0.3000, -0.9000, MFD_COLOUR1);

  000fa	b8 04 00 00 00	 mov	 eax, 4
  000ff	6b c8 00	 imul	 ecx, eax, 0
  00102	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00108	52		 push	 edx
  00109	51		 push	 ecx
  0010a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  00112	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00117	51		 push	 ecx
  00118	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00120	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00125	51		 push	 ecx
  00126	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2ccccd
  0012e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00133	51		 push	 ecx
  00134	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  0013c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00141	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1214 : 
; 1215 : 		draw_2d_line ( 0.0000, -0.6750,  0.0000, -0.6950, MFD_COLOUR1);

  00146	b8 04 00 00 00	 mov	 eax, 4
  0014b	6b c8 00	 imul	 ecx, eax, 0
  0014e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00154	52		 push	 edx
  00155	51		 push	 ecx
  00156	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf31eb85
  0015e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00163	51		 push	 ecx
  00164	0f 57 c0	 xorps	 xmm0, xmm0
  00167	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016c	51		 push	 ecx
  0016d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2ccccd
  00175	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017a	51		 push	 ecx
  0017b	0f 57 c0	 xorps	 xmm0, xmm0
  0017e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00183	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1216 : 		draw_2d_line (-0.2250, -0.6750, -0.2250, -0.6950, MFD_COLOUR1);

  00188	b8 04 00 00 00	 mov	 eax, 4
  0018d	6b c8 00	 imul	 ecx, eax, 0
  00190	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00196	52		 push	 edx
  00197	51		 push	 ecx
  00198	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf31eb85
  001a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a5	51		 push	 ecx
  001a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be666666
  001ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b3	51		 push	 ecx
  001b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2ccccd
  001bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c1	51		 push	 ecx
  001c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be666666
  001ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001cf	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1217 : 		draw_2d_line ( 0.2250, -0.6750,  0.2250, -0.6950, MFD_COLOUR1);

  001d4	b8 04 00 00 00	 mov	 eax, 4
  001d9	6b c8 00	 imul	 ecx, eax, 0
  001dc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001e2	52		 push	 edx
  001e3	51		 push	 ecx
  001e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf31eb85
  001ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f1	51		 push	 ecx
  001f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e666666
  001fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ff	51		 push	 ecx
  00200	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2ccccd
  00208	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020d	51		 push	 ecx
  0020e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e666666
  00216	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1218 : 
; 1219 : 		draw_2d_line ( 0.0000, -0.8800,  0.0000, -0.9000, MFD_COLOUR1);

  00220	b8 04 00 00 00	 mov	 eax, 4
  00225	6b c8 00	 imul	 ecx, eax, 0
  00228	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0022e	52		 push	 edx
  0022f	51		 push	 ecx
  00230	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  00238	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023d	51		 push	 ecx
  0023e	0f 57 c0	 xorps	 xmm0, xmm0
  00241	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00246	51		 push	 ecx
  00247	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  0024f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00254	51		 push	 ecx
  00255	0f 57 c0	 xorps	 xmm0, xmm0
  00258	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1220 : 		draw_2d_line (-0.2250, -0.8800, -0.2250, -0.9000, MFD_COLOUR1);

  00262	b8 04 00 00 00	 mov	 eax, 4
  00267	6b c8 00	 imul	 ecx, eax, 0
  0026a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00270	52		 push	 edx
  00271	51		 push	 ecx
  00272	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  0027a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027f	51		 push	 ecx
  00280	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be666666
  00288	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028d	51		 push	 ecx
  0028e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  00296	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029b	51		 push	 ecx
  0029c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be666666
  002a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1221 : 		draw_2d_line ( 0.2250, -0.8800,  0.2250, -0.9000, MFD_COLOUR1);

  002ae	b8 04 00 00 00	 mov	 eax, 4
  002b3	6b c8 00	 imul	 ecx, eax, 0
  002b6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002bc	52		 push	 edx
  002bd	51		 push	 ecx
  002be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  002c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002cb	51		 push	 ecx
  002cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e666666
  002d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d9	51		 push	 ecx
  002da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  002e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e7	51		 push	 ecx
  002e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e666666
  002f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1222 : 
; 1223 : 		draw_2d_line (-0.3000, -0.7500, -0.2800, -0.7500, MFD_COLOUR1);

  002fa	b8 04 00 00 00	 mov	 eax, 4
  002ff	6b c8 00	 imul	 ecx, eax, 0
  00302	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00308	52		 push	 edx
  00309	51		 push	 ecx
  0030a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  00312	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00317	51		 push	 ecx
  00318	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8f5c29
  00320	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00325	51		 push	 ecx
  00326	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  0032e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00333	51		 push	 ecx
  00334	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  0033c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00341	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1224 : 		draw_2d_line ( 0.3000, -0.7500,  0.2800, -0.7500, MFD_COLOUR1);

  00346	b8 04 00 00 00	 mov	 eax, 4
  0034b	6b c8 00	 imul	 ecx, eax, 0
  0034e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00354	52		 push	 edx
  00355	51		 push	 ecx
  00356	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  0035e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00363	51		 push	 ecx
  00364	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e8f5c29
  0036c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00371	51		 push	 ecx
  00372	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  0037a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037f	51		 push	 ecx
  00380	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00388	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1225 : 
; 1226 : 		x = eo_azimuth / eo_max_azimuth * 0.3;

  00392	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  0039a	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_max_azimuth@@3MA
  003a2	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  003a6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd3333333333333
  003ae	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003b2	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0

; 1227 : 		y = (eo_elevation / eo_min_elevation * -0.15) - 0.75;

  003b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  003bf	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_min_elevation@@3MA
  003c7	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  003cb	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfc3333333333333
  003d3	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe8000000000000
  003db	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003df	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0

; 1228 : 
; 1229 : 		draw_2d_line (x - 0.0400, y - 0.0300, x + 0.0400, y - 0.0300, MFD_COLOUR1);

  003e4	b8 04 00 00 00	 mov	 eax, 4
  003e9	6b c8 00	 imul	 ecx, eax, 0
  003ec	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003f2	52		 push	 edx
  003f3	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  003f8	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  00400	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00404	51		 push	 ecx
  00405	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040a	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0040f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00417	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0041b	51		 push	 ecx
  0041c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00421	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00426	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  0042e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00432	51		 push	 ecx
  00433	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00438	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0043d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00445	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00449	51		 push	 ecx
  0044a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1230 : 		draw_2d_line (x - 0.0400, y + 0.0300, x + 0.0400, y + 0.0300, MFD_COLOUR1);

  00454	b8 04 00 00 00	 mov	 eax, 4
  00459	6b c8 00	 imul	 ecx, eax, 0
  0045c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00462	52		 push	 edx
  00463	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00468	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  00470	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00474	51		 push	 ecx
  00475	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047a	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0047f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00487	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0048b	51		 push	 ecx
  0048c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00491	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00496	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  0049e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004a2	51		 push	 ecx
  004a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a8	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  004ad	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  004b5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004b9	51		 push	 ecx
  004ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004bf	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1231 : 		draw_2d_line (x - 0.0400, y - 0.0300, x - 0.0400, y + 0.0300, MFD_COLOUR1);

  004c4	b8 04 00 00 00	 mov	 eax, 4
  004c9	6b c8 00	 imul	 ecx, eax, 0
  004cc	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004d2	52		 push	 edx
  004d3	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  004d8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  004e0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004e4	51		 push	 ecx
  004e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ea	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  004ef	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  004f7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004fb	51		 push	 ecx
  004fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00501	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00506	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  0050e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00512	51		 push	 ecx
  00513	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00518	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0051d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00525	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00529	51		 push	 ecx
  0052a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0052f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1232 : 		draw_2d_line (x + 0.0400, y - 0.0300, x + 0.0400, y + 0.0300, MFD_COLOUR1);

  00534	b8 04 00 00 00	 mov	 eax, 4
  00539	6b c8 00	 imul	 ecx, eax, 0
  0053c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00542	52		 push	 edx
  00543	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00548	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  00550	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00554	51		 push	 ecx
  00555	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0055a	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0055f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00567	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0056b	51		 push	 ecx
  0056c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00571	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00576	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  0057e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00582	51		 push	 ecx
  00583	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00588	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0058d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00595	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00599	51		 push	 ecx
  0059a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0059f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1233 : 	}
; 1234 : 	else

  005a4	e9 8e 05 00 00	 jmp	 $LN3@draw_field
$LN2@draw_field:

; 1235 : 	{
; 1236 : 		draw_2d_line (-0.2000, -0.7250,  0.2000, -0.7250, MFD_COLOUR1);

  005a9	b8 04 00 00 00	 mov	 eax, 4
  005ae	6b c8 00	 imul	 ecx, eax, 0
  005b1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005b7	52		 push	 edx
  005b8	51		 push	 ecx
  005b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf39999a
  005c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c6	51		 push	 ecx
  005c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  005cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d4	51		 push	 ecx
  005d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf39999a
  005dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e2	51		 push	 ecx
  005e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  005eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1237 : 		draw_2d_line (-0.2000, -0.8750,  0.2000, -0.8750, MFD_COLOUR1);

  005f5	b8 04 00 00 00	 mov	 eax, 4
  005fa	6b c8 00	 imul	 ecx, eax, 0
  005fd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00603	52		 push	 edx
  00604	51		 push	 ecx
  00605	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf600000
  0060d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00612	51		 push	 ecx
  00613	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0061b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00620	51		 push	 ecx
  00621	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf600000
  00629	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0062e	51		 push	 ecx
  0062f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00637	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1238 : 		draw_2d_line (-0.2000, -0.7250, -0.2000, -0.8750, MFD_COLOUR1);

  00641	b8 04 00 00 00	 mov	 eax, 4
  00646	6b c8 00	 imul	 ecx, eax, 0
  00649	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0064f	52		 push	 edx
  00650	51		 push	 ecx
  00651	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf600000
  00659	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0065e	51		 push	 ecx
  0065f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00667	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0066c	51		 push	 ecx
  0066d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf39999a
  00675	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0067a	51		 push	 ecx
  0067b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00683	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00688	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1239 : 		draw_2d_line ( 0.2000, -0.7250,  0.2000, -0.8750, MFD_COLOUR1);

  0068d	b8 04 00 00 00	 mov	 eax, 4
  00692	6b c8 00	 imul	 ecx, eax, 0
  00695	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0069b	52		 push	 edx
  0069c	51		 push	 ecx
  0069d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf600000
  006a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006aa	51		 push	 ecx
  006ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  006b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b8	51		 push	 ecx
  006b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf39999a
  006c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006c6	51		 push	 ecx
  006c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  006cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1240 : 
; 1241 : 		draw_2d_line ( 0.0000, -0.7250,  0.0000, -0.7475, MFD_COLOUR1);

  006d9	b8 04 00 00 00	 mov	 eax, 4
  006de	6b c8 00	 imul	 ecx, eax, 0
  006e1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006e7	52		 push	 edx
  006e8	51		 push	 ecx
  006e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3f5c29
  006f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f6	51		 push	 ecx
  006f7	0f 57 c0	 xorps	 xmm0, xmm0
  006fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ff	51		 push	 ecx
  00700	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf39999a
  00708	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0070d	51		 push	 ecx
  0070e	0f 57 c0	 xorps	 xmm0, xmm0
  00711	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00716	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1242 : 		draw_2d_line (-0.1500, -0.7250, -0.1500, -0.7475, MFD_COLOUR1);

  0071b	b8 04 00 00 00	 mov	 eax, 4
  00720	6b c8 00	 imul	 ecx, eax, 0
  00723	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00729	52		 push	 edx
  0072a	51		 push	 ecx
  0072b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3f5c29
  00733	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00738	51		 push	 ecx
  00739	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  00741	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00746	51		 push	 ecx
  00747	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf39999a
  0074f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00754	51		 push	 ecx
  00755	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  0075d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00762	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1243 : 		draw_2d_line ( 0.1500, -0.7250,  0.1500, -0.7475, MFD_COLOUR1);

  00767	b8 04 00 00 00	 mov	 eax, 4
  0076c	6b c8 00	 imul	 ecx, eax, 0
  0076f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00775	52		 push	 edx
  00776	51		 push	 ecx
  00777	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3f5c29
  0077f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00784	51		 push	 ecx
  00785	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  0078d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00792	51		 push	 ecx
  00793	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf39999a
  0079b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a0	51		 push	 ecx
  007a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  007a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ae	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1244 : 
; 1245 : 		draw_2d_line ( 0.0000, -0.8525,  0.0000, -0.8750, MFD_COLOUR1);

  007b3	b8 04 00 00 00	 mov	 eax, 4
  007b8	6b c8 00	 imul	 ecx, eax, 0
  007bb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007c1	52		 push	 edx
  007c2	51		 push	 ecx
  007c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf600000
  007cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d0	51		 push	 ecx
  007d1	0f 57 c0	 xorps	 xmm0, xmm0
  007d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d9	51		 push	 ecx
  007da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5a3d71
  007e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e7	51		 push	 ecx
  007e8	0f 57 c0	 xorps	 xmm0, xmm0
  007eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1246 : 		draw_2d_line (-0.1500, -0.8525, -0.1500, -0.8750, MFD_COLOUR1);

  007f5	b8 04 00 00 00	 mov	 eax, 4
  007fa	6b c8 00	 imul	 ecx, eax, 0
  007fd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00803	52		 push	 edx
  00804	51		 push	 ecx
  00805	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf600000
  0080d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00812	51		 push	 ecx
  00813	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  0081b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00820	51		 push	 ecx
  00821	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5a3d71
  00829	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0082e	51		 push	 ecx
  0082f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  00837	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0083c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1247 : 		draw_2d_line ( 0.1500, -0.8525,  0.1500, -0.8750, MFD_COLOUR1);

  00841	b8 04 00 00 00	 mov	 eax, 4
  00846	6b c8 00	 imul	 ecx, eax, 0
  00849	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0084f	52		 push	 edx
  00850	51		 push	 ecx
  00851	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf600000
  00859	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0085e	51		 push	 ecx
  0085f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00867	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0086c	51		 push	 ecx
  0086d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5a3d71
  00875	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0087a	51		 push	 ecx
  0087b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  00883	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00888	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1248 : 
; 1249 : 		draw_2d_line (-0.2000, -0.7750, -0.1775, -0.7750, MFD_COLOUR1);

  0088d	b8 04 00 00 00	 mov	 eax, 4
  00892	6b c8 00	 imul	 ecx, eax, 0
  00895	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0089b	52		 push	 edx
  0089c	51		 push	 ecx
  0089d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf466666
  008a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008aa	51		 push	 ecx
  008ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be35c28f
  008b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008b8	51		 push	 ecx
  008b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf466666
  008c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c6	51		 push	 ecx
  008c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  008cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1250 : 		draw_2d_line ( 0.2000, -0.7750,  0.1775, -0.7750, MFD_COLOUR1);

  008d9	b8 04 00 00 00	 mov	 eax, 4
  008de	6b c8 00	 imul	 ecx, eax, 0
  008e1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008e7	52		 push	 edx
  008e8	51		 push	 ecx
  008e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf466666
  008f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f6	51		 push	 ecx
  008f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e35c28f
  008ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00904	51		 push	 ecx
  00905	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf466666
  0090d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00912	51		 push	 ecx
  00913	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0091b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00920	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1251 : 
; 1252 : 		x = eo_azimuth / eo_max_azimuth * 0.2;

  00925	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  0092d	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_max_azimuth@@3MA
  00935	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00939	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc999999999999a
  00941	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00945	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0

; 1253 : 		y = (eo_elevation / eo_min_elevation * -0.1) - 0.775;

  0094a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  00952	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_min_elevation@@3MA
  0095a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0095e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfb999999999999a
  00966	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe8cccccccccccd
  0096e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00972	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0

; 1254 : 
; 1255 : 		draw_2d_line (x - 0.0267, y - 0.0200, x + 0.0267, y - 0.0200, MFD_COLOUR1);

  00977	b8 04 00 00 00	 mov	 eax, 4
  0097c	6b c8 00	 imul	 ecx, eax, 0
  0097f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00985	52		 push	 edx
  00986	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  0098b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00993	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00997	51		 push	 ecx
  00998	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0099d	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  009a2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9b573eab367a10
  009aa	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009ae	51		 push	 ecx
  009af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b4	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  009b9	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  009c1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009c5	51		 push	 ecx
  009c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009cb	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  009d0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9b573eab367a10
  009d8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009dc	51		 push	 ecx
  009dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009e2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1256 : 		draw_2d_line (x - 0.0267, y + 0.0200, x + 0.0267, y + 0.0200, MFD_COLOUR1);

  009e7	b8 04 00 00 00	 mov	 eax, 4
  009ec	6b c8 00	 imul	 ecx, eax, 0
  009ef	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009f5	52		 push	 edx
  009f6	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  009fb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00a03	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a07	51		 push	 ecx
  00a08	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a0d	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00a12	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9b573eab367a10
  00a1a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a1e	51		 push	 ecx
  00a1f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a24	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00a29	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00a31	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a35	51		 push	 ecx
  00a36	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a3b	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00a40	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9b573eab367a10
  00a48	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a4c	51		 push	 ecx
  00a4d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a52	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1257 : 		draw_2d_line (x - 0.0267, y - 0.0200, x - 0.0267, y + 0.0200, MFD_COLOUR1);

  00a57	b8 04 00 00 00	 mov	 eax, 4
  00a5c	6b c8 00	 imul	 ecx, eax, 0
  00a5f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00a65	52		 push	 edx
  00a66	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00a6b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00a73	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a77	51		 push	 ecx
  00a78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a7d	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00a82	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9b573eab367a10
  00a8a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a8e	51		 push	 ecx
  00a8f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a94	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00a99	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00aa1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00aa5	51		 push	 ecx
  00aa6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aab	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00ab0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9b573eab367a10
  00ab8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00abc	51		 push	 ecx
  00abd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1258 : 		draw_2d_line (x + 0.0267, y - 0.0200, x + 0.0267, y + 0.0200, MFD_COLOUR1);

  00ac7	b8 04 00 00 00	 mov	 eax, 4
  00acc	6b c8 00	 imul	 ecx, eax, 0
  00acf	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ad5	52		 push	 edx
  00ad6	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00adb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00ae3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ae7	51		 push	 ecx
  00ae8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aed	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00af2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9b573eab367a10
  00afa	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00afe	51		 push	 ecx
  00aff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b04	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00b09	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f947ae147ae147b
  00b11	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b15	51		 push	 ecx
  00b16	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b1b	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00b20	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9b573eab367a10
  00b28	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b2c	51		 push	 ecx
  00b2d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b32	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN3@draw_field:

; 1259 : 	}
; 1260 : }

  00b37	5f		 pop	 edi
  00b38	5e		 pop	 esi
  00b39	5b		 pop	 ebx
  00b3a	8b e5		 mov	 esp, ebp
  00b3c	5d		 pop	 ebp
  00b3d	c3		 ret	 0
?draw_field_of_regard_and_view_boxes@@YGXXZ ENDP	; draw_field_of_regard_and_view_boxes
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_heading_scale@@YGXM@Z
_TEXT	SEGMENT
tv209 = -144						; size = 4
tv206 = -144						; size = 4
tv167 = -144						; size = 4
_tick_type$ = -76					; size = 4
_int_heading_step_10$ = -72				; size = 4
_loop$ = -68						; size = 4
_mod_heading_step_10$ = -64				; size = 4
_heading_step_10$ = -60					; size = 4
_x$ = -56						; size = 4
_mfd_vp_x_max$ = -52					; size = 4
_mfd_vp_x_min$ = -48					; size = 4
_tick_datum_bottom$ = -44				; size = 4
_tick_datum_top$ = -40					; size = 4
_tick_30_deg_bottom$ = -36				; size = 4
_tick_30_deg_top$ = -32					; size = 4
_tick_10_deg_bottom$ = -28				; size = 4
_tick_10_deg_top$ = -24					; size = 4
_y_adjust$ = -20					; size = 4
_x_adjust_double$ = -16					; size = 4
_x_adjust_single$ = -12					; size = 4
_heading_tick_x_spacing$ = -8				; size = 4
_heading_width_ratio$ = -4				; size = 4
_heading$ = 8						; size = 4
?draw_heading_scale@@YGXM@Z PROC			; draw_heading_scale, COMDAT

; 986  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 987  : 	float
; 988  : 		heading_width_ratio,
; 989  : 		heading_tick_x_spacing,
; 990  : 		x_adjust_single,
; 991  : 		x_adjust_double,
; 992  : 		y_adjust,
; 993  : 		tick_10_deg_top,
; 994  : 		tick_10_deg_bottom,
; 995  : 		tick_30_deg_top,
; 996  : 		tick_30_deg_bottom,
; 997  : 		tick_datum_top,
; 998  : 		tick_datum_bottom,
; 999  : 		mfd_vp_x_min,
; 1000 : 		mfd_vp_x_max,
; 1001 : 		x,
; 1002 : 		heading_step_10,
; 1003 : 		mod_heading_step_10;
; 1004 : 
; 1005 : 	int
; 1006 : 		loop,
; 1007 : 		int_heading_step_10,
; 1008 : 		tick_type;
; 1009 : 
; 1010 : 	//
; 1011 : 	// sort large and small mfd differences
; 1012 : 	//
; 1013 : 
; 1014 : 	if (draw_large_mfd)

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00013	0f 84 9b 00 00
	00		 je	 $LN7@draw_headi

; 1015 : 	{
; 1016 : 		set_mono_font_type (MONO_FONT_TYPE_5X9);

  00019	6a 02		 push	 2
  0001b	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1017 : 
; 1018 : 		heading_width_ratio		= 0.4;

  00020	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  00028	f3 0f 11 45 fc	 movss	 DWORD PTR _heading_width_ratio$[ebp], xmm0

; 1019 : 
; 1020 : 		heading_tick_x_spacing	= 0.4 / 6.5;

  0002d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d7c0fc1
  00035	f3 0f 11 45 f8	 movss	 DWORD PTR _heading_tick_x_spacing$[ebp], xmm0

; 1021 : 
; 1022 : 		x_adjust_single  			= -2.0;

  0003a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00042	f3 0f 11 45 f4	 movss	 DWORD PTR _x_adjust_single$[ebp], xmm0

; 1023 : 		x_adjust_double  			= -5.0;

  00047	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  0004f	f3 0f 11 45 f0	 movss	 DWORD PTR _x_adjust_double$[ebp], xmm0

; 1024 : 		y_adjust			  			= -8.0;

  00054	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  0005c	f3 0f 11 45 ec	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1025 : 
; 1026 : 		tick_10_deg_top			= 0.9375 - 0.015;

  00061	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6c28f6
  00069	f3 0f 11 45 e8	 movss	 DWORD PTR _tick_10_deg_top$[ebp], xmm0

; 1027 : 		tick_10_deg_bottom  		= 0.9375 - 0.015 - 0.045;

  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f60a3d7
  00076	f3 0f 11 45 e4	 movss	 DWORD PTR _tick_10_deg_bottom$[ebp], xmm0

; 1028 : 		tick_30_deg_top	  		= 0.9375;

  0007b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f700000
  00083	f3 0f 11 45 e0	 movss	 DWORD PTR _tick_30_deg_top$[ebp], xmm0

; 1029 : 		tick_30_deg_bottom  		= 0.9375 - 0.075;

  00088	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5ccccd
  00090	f3 0f 11 45 dc	 movss	 DWORD PTR _tick_30_deg_bottom$[ebp], xmm0

; 1030 : 		tick_datum_top		  		= 0.9375 - 0.075 - 0.010;

  00095	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5a3d71
  0009d	f3 0f 11 45 d8	 movss	 DWORD PTR _tick_datum_top$[ebp], xmm0

; 1031 : 		tick_datum_bottom	  		= 0.9375 - 0.075 - 0.010 - 0.045;

  000a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4eb852
  000aa	f3 0f 11 45 d4	 movss	 DWORD PTR _tick_datum_bottom$[ebp], xmm0

; 1032 : 	}
; 1033 : 	else

  000af	e9 96 00 00 00	 jmp	 $LN8@draw_headi
$LN7@draw_headi:

; 1034 : 	{
; 1035 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  000b4	6a 00		 push	 0
  000b6	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1036 : 
; 1037 : 		heading_width_ratio		= 0.3;

  000bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  000c3	f3 0f 11 45 fc	 movss	 DWORD PTR _heading_width_ratio$[ebp], xmm0

; 1038 : 
; 1039 : 		heading_tick_x_spacing	= 0.4 / 5.0;

  000c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  000d0	f3 0f 11 45 f8	 movss	 DWORD PTR _heading_tick_x_spacing$[ebp], xmm0

; 1040 : 
; 1041 : 		x_adjust_single			= -1.0;

  000d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000dd	f3 0f 11 45 f4	 movss	 DWORD PTR _x_adjust_single$[ebp], xmm0

; 1042 : 		x_adjust_double  			= -3.0;

  000e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  000ea	f3 0f 11 45 f0	 movss	 DWORD PTR _x_adjust_double$[ebp], xmm0

; 1043 : 		y_adjust			  			= -6.0;

  000ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  000f7	f3 0f 11 45 ec	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1044 : 
; 1045 : 		tick_10_deg_top  			= 0.875 - 0.015;

  000fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5c28f6
  00104	f3 0f 11 45 e8	 movss	 DWORD PTR _tick_10_deg_top$[ebp], xmm0

; 1046 : 		tick_10_deg_bottom 		= 0.875 - 0.015 - 0.045;

  00109	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f50a3d7
  00111	f3 0f 11 45 e4	 movss	 DWORD PTR _tick_10_deg_bottom$[ebp], xmm0

; 1047 : 		tick_30_deg_top	  		= 0.875;

  00116	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f600000
  0011e	f3 0f 11 45 e0	 movss	 DWORD PTR _tick_30_deg_top$[ebp], xmm0

; 1048 : 		tick_30_deg_bottom  		= 0.875 - 0.075;

  00123	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  0012b	f3 0f 11 45 dc	 movss	 DWORD PTR _tick_30_deg_bottom$[ebp], xmm0

; 1049 : 		tick_datum_top		  		= 0.875 - 0.075 - 0.010;

  00130	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4a3d71
  00138	f3 0f 11 45 d8	 movss	 DWORD PTR _tick_datum_top$[ebp], xmm0

; 1050 : 		tick_datum_bottom	  		= 0.875 - 0.075 - 0.010 - 0.045;

  0013d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3eb852
  00145	f3 0f 11 45 d4	 movss	 DWORD PTR _tick_datum_bottom$[ebp], xmm0
$LN8@draw_headi:

; 1051 : 	}
; 1052 : 
; 1053 : 	//
; 1054 : 	// adjust 2D environment for heading scale clipping
; 1055 : 	//
; 1056 : heading_width_ratio = 0.1;

  0014a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00152	f3 0f 11 45 fc	 movss	 DWORD PTR _heading_width_ratio$[ebp], xmm0

; 1057 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN * heading_width_ratio, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX * heading_width_ratio, MFD_WINDOW_Y_MAX);

  00157	51		 push	 ecx
  00158	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  00160	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00165	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _heading_width_ratio$[ebp]
  0016a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff199999999999a
  00172	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00176	51		 push	 ecx
  00177	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017c	51		 push	 ecx
  0017d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  00185	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018a	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _heading_width_ratio$[ebp]
  0018f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff199999999999a
  00197	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0019b	51		 push	 ecx
  0019c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001a6	50		 push	 eax
  001a7	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 1058 : 
; 1059 : 	mfd_vp_x_min = mfd_viewport_x_org - (mfd_viewport_size * (heading_width_ratio * 0.5));

  001ac	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  001b4	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  001bc	f3 0f 5a 55 fc	 cvtss2sd xmm2, DWORD PTR _heading_width_ratio$[ebp]
  001c1	f2 0f 59 15 00
	00 00 00	 mulsd	 xmm2, QWORD PTR __real@3fe0000000000000
  001c9	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  001cd	f2 0f 5c c1	 subsd	 xmm0, xmm1
  001d1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001d5	f3 0f 11 45 d0	 movss	 DWORD PTR _mfd_vp_x_min$[ebp], xmm0

; 1060 : 
; 1061 : 	mfd_vp_x_max = mfd_viewport_x_org + (mfd_viewport_size * (heading_width_ratio * 0.5)) - 0.001;

  001da	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  001e2	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  001ea	f3 0f 5a 55 fc	 cvtss2sd xmm2, DWORD PTR _heading_width_ratio$[ebp]
  001ef	f2 0f 59 15 00
	00 00 00	 mulsd	 xmm2, QWORD PTR __real@3fe0000000000000
  001f7	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  001fb	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001ff	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00207	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0020b	f3 0f 11 45 cc	 movss	 DWORD PTR _mfd_vp_x_max$[ebp], xmm0

; 1062 : 
; 1063 : 	set_2d_viewport (mfd_env, mfd_vp_x_min, mfd_viewport_y_min, mfd_vp_x_max, mfd_viewport_y_max);

  00210	51		 push	 ecx
  00211	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00219	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021e	51		 push	 ecx
  0021f	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _mfd_vp_x_max$[ebp]
  00224	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00229	51		 push	 ecx
  0022a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00232	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00237	51		 push	 ecx
  00238	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _mfd_vp_x_min$[ebp]
  0023d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00242	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00247	50		 push	 eax
  00248	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1064 : 
; 1065 : 	//
; 1066 : 	// draw heading datum tick
; 1067 : 	//
; 1068 : 
; 1069 : 	draw_2d_line (0.0, tick_datum_top, 0.0, tick_datum_bottom, MFD_COLOUR1);

  0024d	b8 04 00 00 00	 mov	 eax, 4
  00252	6b c8 00	 imul	 ecx, eax, 0
  00255	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0025b	52		 push	 edx
  0025c	51		 push	 ecx
  0025d	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _tick_datum_bottom$[ebp]
  00262	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00267	51		 push	 ecx
  00268	0f 57 c0	 xorps	 xmm0, xmm0
  0026b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00270	51		 push	 ecx
  00271	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _tick_datum_top$[ebp]
  00276	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027b	51		 push	 ecx
  0027c	0f 57 c0	 xorps	 xmm0, xmm0
  0027f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00284	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1070 : 
; 1071 : 	//
; 1072 : 	// draw heading scale
; 1073 : 	//
; 1074 : 
; 1075 : 	heading_step_10 = deg (heading * 0.1);

  00289	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _heading$[ebp]
  0028e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00296	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@404ca5dc00000000
  0029e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002a2	f3 0f 11 45 c4	 movss	 DWORD PTR _heading_step_10$[ebp], xmm0

; 1076 : 
; 1077 : 	int_heading_step_10 = (int) heading_step_10;

  002a7	f3 0f 2c 45 c4	 cvttss2si eax, DWORD PTR _heading_step_10$[ebp]
  002ac	89 45 b8	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax

; 1078 : 
; 1079 : 	mod_heading_step_10 = heading_step_10 - (float) int_heading_step_10;

  002af	f3 0f 2a 45 b8	 cvtsi2ss xmm0, DWORD PTR _int_heading_step_10$[ebp]
  002b4	f3 0f 10 4d c4	 movss	 xmm1, DWORD PTR _heading_step_10$[ebp]
  002b9	f3 0f 5c c8	 subss	 xmm1, xmm0
  002bd	f3 0f 11 4d c0	 movss	 DWORD PTR _mod_heading_step_10$[ebp], xmm1

; 1080 : 
; 1081 : 	int_heading_step_10 -= 10;

  002c2	8b 45 b8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  002c5	83 e8 0a	 sub	 eax, 10			; 0000000aH
  002c8	89 45 b8	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax

; 1082 : 
; 1083 : 	if (int_heading_step_10 < 0)

  002cb	79 09		 jns	 SHORT $LN9@draw_headi

; 1084 : 	{
; 1085 : 		int_heading_step_10 += 36;

  002cd	8b 45 b8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  002d0	83 c0 24	 add	 eax, 36			; 00000024H
  002d3	89 45 b8	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax
$LN9@draw_headi:

; 1086 : 	}
; 1087 : 
; 1088 : 	// tick type:-
; 1089 : 	//
; 1090 : 	//		0 = long tick (30 degs)
; 1091 : 	//		1 = short tick (10 degs)
; 1092 : 	//		2 = short tick (20 degs)
; 1093 : 
; 1094 : 	tick_type = int_heading_step_10 % 3;

  002d6	8b 45 b8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  002d9	99		 cdq
  002da	b9 03 00 00 00	 mov	 ecx, 3
  002df	f7 f9		 idiv	 ecx
  002e1	89 55 b4	 mov	 DWORD PTR _tick_type$[ebp], edx

; 1095 : 
; 1096 : 	x = - (10.0 + mod_heading_step_10) * heading_tick_x_spacing;

  002e4	f3 0f 5a 45 c0	 cvtss2sd xmm0, DWORD PTR _mod_heading_step_10$[ebp]
  002e9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4024000000000000
  002f1	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  002f8	f3 0f 5a 4d f8	 cvtss2sd xmm1, DWORD PTR _heading_tick_x_spacing$[ebp]
  002fd	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00301	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00305	f3 0f 11 45 c8	 movss	 DWORD PTR _x$[ebp], xmm0

; 1097 : 
; 1098 : 	for (loop = 0; loop <= 20; loop++)

  0030a	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  00311	eb 09		 jmp	 SHORT $LN4@draw_headi
$LN2@draw_headi:
  00313	8b 45 bc	 mov	 eax, DWORD PTR _loop$[ebp]
  00316	83 c0 01	 add	 eax, 1
  00319	89 45 bc	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@draw_headi:
  0031c	83 7d bc 14	 cmp	 DWORD PTR _loop$[ebp], 20 ; 00000014H
  00320	0f 8f 4a 02 00
	00		 jg	 $LN3@draw_headi

; 1099 : 	{
; 1100 : 		if (tick_type == 0)

  00326	83 7d b4 00	 cmp	 DWORD PTR _tick_type$[ebp], 0
  0032a	0f 85 92 01 00
	00		 jne	 $LN10@draw_headi

; 1101 : 		{
; 1102 : 			draw_2d_line (x, tick_30_deg_top, x, tick_30_deg_bottom, MFD_COLOUR1);

  00330	b8 04 00 00 00	 mov	 eax, 4
  00335	6b c8 00	 imul	 ecx, eax, 0
  00338	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0033e	52		 push	 edx
  0033f	51		 push	 ecx
  00340	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _tick_30_deg_bottom$[ebp]
  00345	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034a	51		 push	 ecx
  0034b	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00350	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00355	51		 push	 ecx
  00356	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _tick_30_deg_top$[ebp]
  0035b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00360	51		 push	 ecx
  00361	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00366	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1103 : 
; 1104 : 			set_2d_mono_font_position (x, tick_30_deg_top);

  00370	51		 push	 ecx
  00371	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _tick_30_deg_top$[ebp]
  00376	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037b	51		 push	 ecx
  0037c	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00381	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00386	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1105 : 
; 1106 : 			switch (int_heading_step_10)

  0038b	8b 45 b8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  0038e	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv167[ebp], eax
  00394	83 bd 70 ff ff
	ff 1b		 cmp	 DWORD PTR tv167[ebp], 27 ; 0000001bH
  0039b	0f 87 ad 00 00
	00		 ja	 $LN16@draw_headi
  003a1	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR tv167[ebp]
  003a7	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN24@draw_headi[ecx]
  003ae	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN25@draw_headi[edx*4]
$LN12@draw_headi:

; 1107 : 			{
; 1108 : 				////////////////////////////////////////
; 1109 : 				case 0:
; 1110 : 				////////////////////////////////////////
; 1111 : 				{
; 1112 : 					set_mono_font_rel_position (x_adjust_single, y_adjust);

  003b5	51		 push	 ecx
  003b6	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  003bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c0	51		 push	 ecx
  003c1	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  003c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003cb	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1113 : 
; 1114 : 					print_mono_font_char ('N');

  003d0	6a 4e		 push	 78			; 0000004eH
  003d2	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 1115 : 
; 1116 : 					break;

  003d7	e9 e4 00 00 00	 jmp	 $LN5@draw_headi
$LN13@draw_headi:

; 1117 : 				}
; 1118 : 				////////////////////////////////////////
; 1119 : 				case 9:
; 1120 : 				////////////////////////////////////////
; 1121 : 				{
; 1122 : 					set_mono_font_rel_position (x_adjust_single, y_adjust);

  003dc	51		 push	 ecx
  003dd	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  003e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e7	51		 push	 ecx
  003e8	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  003ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1123 : 
; 1124 : 					print_mono_font_char ('E');

  003f7	6a 45		 push	 69			; 00000045H
  003f9	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 1125 : 
; 1126 : 					break;

  003fe	e9 bd 00 00 00	 jmp	 $LN5@draw_headi
$LN14@draw_headi:

; 1127 : 				}
; 1128 : 				////////////////////////////////////////
; 1129 : 				case 18:
; 1130 : 				////////////////////////////////////////
; 1131 : 				{
; 1132 : 					set_mono_font_rel_position (x_adjust_single, y_adjust);

  00403	51		 push	 ecx
  00404	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00409	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040e	51		 push	 ecx
  0040f	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  00414	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00419	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1133 : 
; 1134 : 					print_mono_font_char ('S');

  0041e	6a 53		 push	 83			; 00000053H
  00420	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 1135 : 
; 1136 : 					break;

  00425	e9 96 00 00 00	 jmp	 $LN5@draw_headi
$LN15@draw_headi:

; 1137 : 				}
; 1138 : 				////////////////////////////////////////
; 1139 : 				case 27:
; 1140 : 				////////////////////////////////////////
; 1141 : 				{
; 1142 : 					set_mono_font_rel_position (x_adjust_single, y_adjust);

  0042a	51		 push	 ecx
  0042b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00430	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00435	51		 push	 ecx
  00436	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  0043b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00440	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1143 : 
; 1144 : 					print_mono_font_char ('W');

  00445	6a 57		 push	 87			; 00000057H
  00447	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 1145 : 
; 1146 : 					break;

  0044c	eb 72		 jmp	 SHORT $LN5@draw_headi
$LN16@draw_headi:

; 1147 : 				}
; 1148 : 				////////////////////////////////////////
; 1149 : 				default:
; 1150 : 				////////////////////////////////////////
; 1151 : 				{
; 1152 : 					if (int_heading_step_10 < 10)

  0044e	83 7d b8 0a	 cmp	 DWORD PTR _int_heading_step_10$[ebp], 10 ; 0000000aH
  00452	7d 29		 jge	 SHORT $LN17@draw_headi

; 1153 : 					{
; 1154 : 						set_mono_font_rel_position (x_adjust_single, y_adjust);

  00454	51		 push	 ecx
  00455	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0045a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0045f	51		 push	 ecx
  00460	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x_adjust_single$[ebp]
  00465	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1155 : 
; 1156 : 						print_mono_font_char ('0' + int_heading_step_10);

  0046f	8b 45 b8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  00472	83 c0 30	 add	 eax, 48			; 00000030H
  00475	50		 push	 eax
  00476	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 1157 : 					}
; 1158 : 					else

  0047b	eb 43		 jmp	 SHORT $LN18@draw_headi
$LN17@draw_headi:

; 1159 : 					{
; 1160 : 						set_mono_font_rel_position (x_adjust_double, y_adjust);

  0047d	51		 push	 ecx
  0047e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00483	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00488	51		 push	 ecx
  00489	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _x_adjust_double$[ebp]
  0048e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00493	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1161 : 
; 1162 : 						print_mono_font_char ('0' + int_heading_step_10 / 10);

  00498	8b 45 b8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  0049b	99		 cdq
  0049c	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  004a1	f7 f9		 idiv	 ecx
  004a3	83 c0 30	 add	 eax, 48			; 00000030H
  004a6	50		 push	 eax
  004a7	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 1163 : 
; 1164 : 						print_mono_font_char ('0' + int_heading_step_10 % 10);

  004ac	8b 45 b8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  004af	99		 cdq
  004b0	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  004b5	f7 f9		 idiv	 ecx
  004b7	83 c2 30	 add	 edx, 48			; 00000030H
  004ba	52		 push	 edx
  004bb	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char
$LN18@draw_headi:
$LN5@draw_headi:

; 1165 : 					}
; 1166 : 
; 1167 : 					break;
; 1168 : 				}
; 1169 : 			}
; 1170 : 		}
; 1171 : 		else

  004c0	eb 40		 jmp	 SHORT $LN11@draw_headi
$LN10@draw_headi:

; 1172 : 		{
; 1173 : 			draw_2d_line (x, tick_10_deg_top, x, tick_10_deg_bottom, MFD_COLOUR1);

  004c2	b8 04 00 00 00	 mov	 eax, 4
  004c7	6b c8 00	 imul	 ecx, eax, 0
  004ca	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004d0	52		 push	 edx
  004d1	51		 push	 ecx
  004d2	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _tick_10_deg_bottom$[ebp]
  004d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004dc	51		 push	 ecx
  004dd	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  004e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e7	51		 push	 ecx
  004e8	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _tick_10_deg_top$[ebp]
  004ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004f2	51		 push	 ecx
  004f3	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  004f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN11@draw_headi:

; 1174 : 		}
; 1175 : 
; 1176 : 		int_heading_step_10 = (++int_heading_step_10 == 36) ? 0 : int_heading_step_10;

  00502	8b 45 b8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  00505	83 c0 01	 add	 eax, 1
  00508	89 45 b8	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax
  0050b	83 7d b8 24	 cmp	 DWORD PTR _int_heading_step_10$[ebp], 36 ; 00000024H
  0050f	75 0c		 jne	 SHORT $LN20@draw_headi
  00511	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv206[ebp], 0
  0051b	eb 09		 jmp	 SHORT $LN21@draw_headi
$LN20@draw_headi:
  0051d	8b 4d b8	 mov	 ecx, DWORD PTR _int_heading_step_10$[ebp]
  00520	89 8d 70 ff ff
	ff		 mov	 DWORD PTR tv206[ebp], ecx
$LN21@draw_headi:
  00526	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR tv206[ebp]
  0052c	89 55 b8	 mov	 DWORD PTR _int_heading_step_10$[ebp], edx

; 1177 : 
; 1178 : 		tick_type = (++tick_type == 3) ? 0 : tick_type;

  0052f	8b 45 b4	 mov	 eax, DWORD PTR _tick_type$[ebp]
  00532	83 c0 01	 add	 eax, 1
  00535	89 45 b4	 mov	 DWORD PTR _tick_type$[ebp], eax
  00538	83 7d b4 03	 cmp	 DWORD PTR _tick_type$[ebp], 3
  0053c	75 0c		 jne	 SHORT $LN22@draw_headi
  0053e	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv209[ebp], 0
  00548	eb 09		 jmp	 SHORT $LN23@draw_headi
$LN22@draw_headi:
  0054a	8b 4d b4	 mov	 ecx, DWORD PTR _tick_type$[ebp]
  0054d	89 8d 70 ff ff
	ff		 mov	 DWORD PTR tv209[ebp], ecx
$LN23@draw_headi:
  00553	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR tv209[ebp]
  00559	89 55 b4	 mov	 DWORD PTR _tick_type$[ebp], edx

; 1179 : 
; 1180 : 		x += heading_tick_x_spacing;

  0055c	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00561	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _heading_tick_x_spacing$[ebp]
  00566	f3 0f 11 45 c8	 movss	 DWORD PTR _x$[ebp], xmm0

; 1181 : 	}

  0056b	e9 a3 fd ff ff	 jmp	 $LN2@draw_headi
$LN3@draw_headi:

; 1182 : 
; 1183 : 	//
; 1184 : 	// restore 2D environment
; 1185 : 	//
; 1186 : 
; 1187 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  00570	51		 push	 ecx
  00571	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  00579	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057e	51		 push	 ecx
  0057f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  00587	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0058c	51		 push	 ecx
  0058d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  00595	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0059a	51		 push	 ecx
  0059b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  005a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  005ad	50		 push	 eax
  005ae	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 1188 : 
; 1189 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  005b3	51		 push	 ecx
  005b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  005bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c1	51		 push	 ecx
  005c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  005ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005cf	51		 push	 ecx
  005d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  005d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005dd	51		 push	 ecx
  005de	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  005e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  005f0	50		 push	 eax
  005f1	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1190 : }

  005f6	5f		 pop	 edi
  005f7	5e		 pop	 esi
  005f8	5b		 pop	 ebx
  005f9	8b e5		 mov	 esp, ebp
  005fb	5d		 pop	 ebp
  005fc	c2 04 00	 ret	 4
  005ff	90		 npad	 1
$LN25@draw_headi:
  00600	00 00 00 00	 DD	 $LN12@draw_headi
  00604	00 00 00 00	 DD	 $LN13@draw_headi
  00608	00 00 00 00	 DD	 $LN14@draw_headi
  0060c	00 00 00 00	 DD	 $LN15@draw_headi
  00610	00 00 00 00	 DD	 $LN16@draw_headi
$LN24@draw_headi:
  00614	00		 DB	 0
  00615	04		 DB	 4
  00616	04		 DB	 4
  00617	04		 DB	 4
  00618	04		 DB	 4
  00619	04		 DB	 4
  0061a	04		 DB	 4
  0061b	04		 DB	 4
  0061c	04		 DB	 4
  0061d	01		 DB	 1
  0061e	04		 DB	 4
  0061f	04		 DB	 4
  00620	04		 DB	 4
  00621	04		 DB	 4
  00622	04		 DB	 4
  00623	04		 DB	 4
  00624	04		 DB	 4
  00625	04		 DB	 4
  00626	02		 DB	 2
  00627	04		 DB	 4
  00628	04		 DB	 4
  00629	04		 DB	 4
  0062a	04		 DB	 4
  0062b	04		 DB	 4
  0062c	04		 DB	 4
  0062d	04		 DB	 4
  0062e	04		 DB	 4
  0062f	03		 DB	 3
?draw_heading_scale@@YGXM@Z ENDP			; draw_heading_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_damaged_mfd@@YGXXZ
_TEXT	SEGMENT
_y$ = -36						; size = 4
_x_right$ = -32						; size = 4
_x_left$ = -28						; size = 4
_x_delta$ = -24						; size = 4
_x_centre$ = -20					; size = 4
_col$ = -16						; size = 4
_i$ = -12						; size = 4
_max_lines$ = -8					; size = 4
_count$ = -4						; size = 4
?draw_damaged_mfd@@YGXXZ PROC				; draw_damaged_mfd, COMDAT

; 925  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 926  : 	int
; 927  : 		count,
; 928  : 		max_lines,
; 929  : 		i;
; 930  : 
; 931  : 	rgb_colour
; 932  : 		col;
; 933  : 
; 934  : 	float
; 935  : 		x_centre,
; 936  : 		x_delta,
; 937  : 		x_left,
; 938  : 		x_right,
; 939  : 		y;
; 940  : 
; 941  : 	col.r = 0;

  00009	c6 45 f2 00	 mov	 BYTE PTR _col$[ebp+2], 0

; 942  : 	col.g = 0;

  0000d	c6 45 f1 00	 mov	 BYTE PTR _col$[ebp+1], 0

; 943  : 	col.b = 0;

  00011	c6 45 f0 00	 mov	 BYTE PTR _col$[ebp], 0

; 944  : 	col.a = 255;

  00015	c6 45 f3 ff	 mov	 BYTE PTR _col$[ebp+3], 255 ; 000000ffH

; 945  : 
; 946  : 	if (draw_large_mfd)

  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00020	74 09		 je	 SHORT $LN5@draw_damag

; 947  : 	{
; 948  : 		max_lines = 150;

  00022	c7 45 f8 96 00
	00 00		 mov	 DWORD PTR _max_lines$[ebp], 150 ; 00000096H

; 949  : 	}
; 950  : 	else

  00029	eb 07		 jmp	 SHORT $LN6@draw_damag
$LN5@draw_damag:

; 951  : 	{
; 952  : 		max_lines = 75;

  0002b	c7 45 f8 4b 00
	00 00		 mov	 DWORD PTR _max_lines$[ebp], 75 ; 0000004bH
$LN6@draw_damag:

; 953  : 	}
; 954  : 
; 955  : 	for (count = 0; count < max_lines; count++)

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00039	eb 09		 jmp	 SHORT $LN4@draw_damag
$LN2@draw_damag:
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0003e	83 c0 01	 add	 eax, 1
  00041	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@draw_damag:
  00044	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00047	3b 45 f8	 cmp	 eax, DWORD PTR _max_lines$[ebp]
  0004a	0f 8d 71 01 00
	00		 jge	 $LN3@draw_damag

; 956  : 	{
; 957  : 		convert_float_to_int (frand1 () * 127.0, &i);

  00050	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  0005a	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  0005f	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00064	8d 4d f4	 lea	 ecx, DWORD PTR _i$[ebp]
  00067	51		 push	 ecx
  00068	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  0006e	c1 fa 10	 sar	 edx, 16			; 00000010H
  00071	81 e2 ff 7f 00
	00		 and	 edx, 32767		; 00007fffH
  00077	f2 0f 2a c2	 cvtsi2sd xmm0, edx
  0007b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00083	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@405fc00000000000
  0008b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0008f	51		 push	 ecx
  00090	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00095	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 958  : 
; 959  : 		col.g = i + 128;

  0009a	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0009d	05 80 00 00 00	 add	 eax, 128		; 00000080H
  000a2	88 45 f1	 mov	 BYTE PTR _col$[ebp+1], al

; 960  : 
; 961  : 		x_centre = sfrand1 ();

  000a5	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  000af	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  000b4	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  000b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  000bf	c1 f9 10	 sar	 ecx, 16			; 00000010H
  000c2	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  000c8	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  000ce	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  000d2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  000da	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000de	f3 0f 11 45 ec	 movss	 DWORD PTR _x_centre$[ebp], xmm0

; 962  : 
; 963  : 		x_delta = (frand1 () * 0.5) + 0.25;

  000e3	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  000ed	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  000f2	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  000f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  000fd	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00100	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00106	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  0010a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00112	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0011a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  00122	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00126	f3 0f 11 45 e8	 movss	 DWORD PTR _x_delta$[ebp], xmm0

; 964  : 
; 965  : 		x_left = x_centre - x_delta;

  0012b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  00130	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _x_delta$[ebp]
  00135	f3 0f 11 45 e4	 movss	 DWORD PTR _x_left$[ebp], xmm0

; 966  : 
; 967  : 		x_right = x_centre + x_delta;

  0013a	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  0013f	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _x_delta$[ebp]
  00144	f3 0f 11 45 e0	 movss	 DWORD PTR _x_right$[ebp], xmm0

; 968  : 
; 969  : 		y = sfrand1 ();

  00149	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  00153	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00158	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  0015d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00163	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00166	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  0016c	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  00172	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00176	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  0017e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00182	f3 0f 11 45 dc	 movss	 DWORD PTR _y$[ebp], xmm0

; 970  : 
; 971  : 		draw_2d_line (x_left, y, x_right, y, col);

  00187	8b 45 f0	 mov	 eax, DWORD PTR _col$[ebp]
  0018a	50		 push	 eax
  0018b	51		 push	 ecx
  0018c	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y$[ebp]
  00191	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00196	51		 push	 ecx
  00197	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x_right$[ebp]
  0019c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a1	51		 push	 ecx
  001a2	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y$[ebp]
  001a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ac	51		 push	 ecx
  001ad	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x_left$[ebp]
  001b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b7	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 972  : 	}

  001bc	e9 7a fe ff ff	 jmp	 $LN2@draw_damag
$LN3@draw_damag:

; 973  : }

  001c1	5f		 pop	 edi
  001c2	5e		 pop	 esi
  001c3	5b		 pop	 ebx
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
?draw_damaged_mfd@@YGXXZ ENDP				; draw_damaged_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_layout_grid@@YGXXZ
_TEXT	SEGMENT
_y$ = -8						; size = 4
_x$ = -4						; size = 4
?draw_layout_grid@@YGXXZ PROC				; draw_layout_grid, COMDAT

; 895  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 896  : 	float
; 897  : 		x,
; 898  : 		y;
; 899  : 
; 900  : 	if (display_mfd_layout_grid)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?display_mfd_layout_grid@@3HA, 0 ; display_mfd_layout_grid
  00010	0f 84 ee 00 00
	00		 je	 $LN6@draw_layou

; 901  : 	{
; 902  : 		for (x = -1.0; x <= 1.0; x += 0.1)

  00016	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0001e	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0
  00023	eb 16		 jmp	 SHORT $LN4@draw_layou
$LN2@draw_layou:
  00025	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0002a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00032	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00036	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0
$LN4@draw_layou:
  0003b	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00040	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00048	66 0f 2f c8	 comisd	 xmm1, xmm0
  0004c	72 3f		 jb	 SHORT $LN3@draw_layou

; 903  : 		{
; 904  : 			draw_2d_line (x, -1.0, x, 1.0, sys_col_red);

  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  00053	50		 push	 eax
  00054	51		 push	 ecx
  00055	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0005d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00062	51		 push	 ecx
  00063	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00068	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006d	51		 push	 ecx
  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00076	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007b	51		 push	 ecx
  0007c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00081	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00086	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 905  : 		}

  0008b	eb 98		 jmp	 SHORT $LN2@draw_layou
$LN3@draw_layou:

; 906  : 
; 907  : 		for (y = -1.0; y <= 1.0; y += 0.1)

  0008d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00095	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0
  0009a	eb 16		 jmp	 SHORT $LN7@draw_layou
$LN5@draw_layou:
  0009c	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  000a1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  000a9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ad	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0
$LN7@draw_layou:
  000b2	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  000b7	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000bf	66 0f 2f c8	 comisd	 xmm1, xmm0
  000c3	72 3f		 jb	 SHORT $LN6@draw_layou

; 908  : 		{
; 909  : 			draw_2d_line (-1.0, y, 1.0, y, sys_col_red);

  000c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  000ca	50		 push	 eax
  000cb	51		 push	 ecx
  000cc	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d6	51		 push	 ecx
  000d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e4	51		 push	 ecx
  000e5	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ef	51		 push	 ecx
  000f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 910  : 		}

  00102	eb 98		 jmp	 SHORT $LN5@draw_layou
$LN6@draw_layou:

; 911  : 	}
; 912  : }

  00104	5f		 pop	 edi
  00105	5e		 pop	 esi
  00106	5b		 pop	 ebx
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c3		 ret	 0
?draw_layout_grid@@YGXXZ ENDP				; draw_layout_grid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z
_TEXT	SEGMENT
_y_max$1 = -32						; size = 4
_y_min$2 = -28						; size = 4
_x_max$3 = -24						; size = 4
_x_min$4 = -20						; size = 4
_y2$ = -16						; size = 4
_y1$ = -12						; size = 4
_x2$ = -8						; size = 4
_x1$ = -4						; size = 4
_x1_c$ = 8						; size = 4
_y1_c$ = 12						; size = 4
_x2_c$ = 16						; size = 4
_y2_c$ = 20						; size = 4
_filled$ = 24						; size = 4
_colour$ = 28						; size = 4
?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z PROC		; draw_box, COMDAT

; 6971 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6972 : 	float x1, x2, y1, y2;
; 6973 : 	
; 6974 : 	get_2d_float_screen_coordinates (x1_c, y1_c, &x1, &y1);

  00009	8d 45 f4	 lea	 eax, DWORD PTR _y1$[ebp]
  0000c	50		 push	 eax
  0000d	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  00010	51		 push	 ecx
  00011	51		 push	 ecx
  00012	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y1_c$[ebp]
  00017	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001c	51		 push	 ecx
  0001d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x1_c$[ebp]
  00022	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00027	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 6975 : 	get_2d_float_screen_coordinates (x2_c, y2_c, &x2, &y2);

  0002c	8d 45 f0	 lea	 eax, DWORD PTR _y2$[ebp]
  0002f	50		 push	 eax
  00030	8d 4d f8	 lea	 ecx, DWORD PTR _x2$[ebp]
  00033	51		 push	 ecx
  00034	51		 push	 ecx
  00035	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y2_c$[ebp]
  0003a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003f	51		 push	 ecx
  00040	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x2_c$[ebp]
  00045	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004a	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 6976 : 
; 6977 : 	if (filled)

  0004f	83 7d 18 00	 cmp	 DWORD PTR _filled$[ebp], 0
  00053	74 7e		 je	 SHORT $LN2@draw_box

; 6978 : 	{
; 6979 : 		float x_min = min(x1, x2), x_max = max(x1, x2);

  00055	8d 45 f8	 lea	 eax, DWORD PTR _x2$[ebp]
  00058	50		 push	 eax
  00059	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  0005c	51		 push	 ecx
  0005d	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00062	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00066	f3 0f 11 45 ec	 movss	 DWORD PTR _x_min$4[ebp], xmm0
  0006b	8d 45 f8	 lea	 eax, DWORD PTR _x2$[ebp]
  0006e	50		 push	 eax
  0006f	8d 4d fc	 lea	 ecx, DWORD PTR _x1$[ebp]
  00072	51		 push	 ecx
  00073	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00078	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0007c	f3 0f 11 45 e8	 movss	 DWORD PTR _x_max$3[ebp], xmm0

; 6980 : 		float y_min = min(y1, y2), y_max = max(y1, y2);

  00081	8d 45 f0	 lea	 eax, DWORD PTR _y2$[ebp]
  00084	50		 push	 eax
  00085	8d 4d f4	 lea	 ecx, DWORD PTR _y1$[ebp]
  00088	51		 push	 ecx
  00089	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  0008e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00092	f3 0f 11 45 e4	 movss	 DWORD PTR _y_min$2[ebp], xmm0
  00097	8d 45 f0	 lea	 eax, DWORD PTR _y2$[ebp]
  0009a	50		 push	 eax
  0009b	8d 4d f4	 lea	 ecx, DWORD PTR _y1$[ebp]
  0009e	51		 push	 ecx
  0009f	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  000a4	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000a8	f3 0f 11 45 e0	 movss	 DWORD PTR _y_max$1[ebp], xmm0

; 6981 : 
; 6982 : 		// set block likes to have its smallest arguments first		
; 6983 : 		set_block(x_min, y_min, x_max, y_max, colour);

  000ad	8b 45 1c	 mov	 eax, DWORD PTR _colour$[ebp]
  000b0	50		 push	 eax
  000b1	f3 0f 2c 4d e0	 cvttss2si ecx, DWORD PTR _y_max$1[ebp]
  000b6	51		 push	 ecx
  000b7	f3 0f 2c 55 e8	 cvttss2si edx, DWORD PTR _x_max$3[ebp]
  000bc	52		 push	 edx
  000bd	f3 0f 2c 45 e4	 cvttss2si eax, DWORD PTR _y_min$2[ebp]
  000c2	50		 push	 eax
  000c3	f3 0f 2c 4d ec	 cvttss2si ecx, DWORD PTR _x_min$4[ebp]
  000c8	51		 push	 ecx
  000c9	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 6984 : 	}
; 6985 : 	else

  000ce	e9 d4 00 00 00	 jmp	 $LN3@draw_box
$LN2@draw_box:

; 6986 : 	{
; 6987 : 		draw_line(x1, y1, x2, y1, colour);

  000d3	8b 45 1c	 mov	 eax, DWORD PTR _colour$[ebp]
  000d6	50		 push	 eax
  000d7	51		 push	 ecx
  000d8	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  000dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e2	51		 push	 ecx
  000e3	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  000e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ed	51		 push	 ecx
  000ee	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  000f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f8	51		 push	 ecx
  000f9	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  000fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00103	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 6988 : 		draw_line(x1, y1, x1, y2, colour);

  00108	8b 45 1c	 mov	 eax, DWORD PTR _colour$[ebp]
  0010b	50		 push	 eax
  0010c	51		 push	 ecx
  0010d	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00112	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00117	51		 push	 ecx
  00118	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0011d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00122	51		 push	 ecx
  00123	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00128	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012d	51		 push	 ecx
  0012e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00133	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00138	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 6989 : 		draw_line(x1, y2, x2, y2, colour);

  0013d	8b 45 1c	 mov	 eax, DWORD PTR _colour$[ebp]
  00140	50		 push	 eax
  00141	51		 push	 ecx
  00142	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00147	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014c	51		 push	 ecx
  0014d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00152	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00157	51		 push	 ecx
  00158	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0015d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00162	51		 push	 ecx
  00163	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00168	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016d	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 6990 : 		draw_line(x2, y1, x2, y2, colour);

  00172	8b 45 1c	 mov	 eax, DWORD PTR _colour$[ebp]
  00175	50		 push	 eax
  00176	51		 push	 ecx
  00177	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0017c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00181	51		 push	 ecx
  00182	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00187	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018c	51		 push	 ecx
  0018d	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00192	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00197	51		 push	 ecx
  00198	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0019d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a2	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line
$LN3@draw_box:

; 6991 : 	}
; 6992 : }

  001a7	5f		 pop	 edi
  001a8	5e		 pop	 esi
  001a9	5b		 pop	 ebx
  001aa	8b e5		 mov	 esp, ebp
  001ac	5d		 pop	 ebp
  001ad	c2 18 00	 ret	 24			; 00000018H
?draw_box@@YGXMMMMHUREAL_COLOUR@@@Z ENDP		; draw_box
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?get_blackhawk_tads_display_visible@@YGHXZ
_TEXT	SEGMENT
tv70 = -68						; size = 4
?get_blackhawk_tads_display_visible@@YGHXZ PROC		; get_blackhawk_tads_display_visible, COMDAT

; 10986: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10987: 	return

  00009	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 4
  00010	74 36		 je	 SHORT $LN3@get_blackh
  00012	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 5
  00019	74 2d		 je	 SHORT $LN3@get_blackh
  0001b	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 6
  00022	74 24		 je	 SHORT $LN3@get_blackh
  00024	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 4
  0002b	74 1b		 je	 SHORT $LN3@get_blackh
  0002d	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 5
  00034	74 12		 je	 SHORT $LN3@get_blackh
  00036	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 6
  0003d	74 09		 je	 SHORT $LN3@get_blackh
  0003f	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
  00046	eb 07		 jmp	 SHORT $LN4@get_blackh
$LN3@get_blackh:
  00048	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv70[ebp], 1
$LN4@get_blackh:
  0004f	8b 45 bc	 mov	 eax, DWORD PTR tv70[ebp]

; 10988: 	(
; 10989: 		(lhs_mfd_mode == MFD_MODE_FLIR) ||
; 10990: 		(lhs_mfd_mode == MFD_MODE_DTV) ||
; 10991: 		(lhs_mfd_mode == MFD_MODE_DVO) ||
; 10992: 		(rhs_mfd_mode == MFD_MODE_FLIR) ||
; 10993: 		(rhs_mfd_mode == MFD_MODE_DTV) ||
; 10994: 		(rhs_mfd_mode == MFD_MODE_DVO)
; 10995: 	);
; 10996: }

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
?get_blackhawk_tads_display_visible@@YGHXZ ENDP		; get_blackhawk_tads_display_visible
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?get_blackhawk_mfd_has_focus@@YGHW4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv75 = -76						; size = 4
tv73 = -76						; size = 4
tv71 = -76						; size = 4
tv69 = -76						; size = 4
tv67 = -76						; size = 4
tv65 = -76						; size = 4
_mfd_mode$ = -8						; size = 4
_result$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?get_blackhawk_mfd_has_focus@@YGHW4MFD_LOCATIONS@@@Z PROC ; get_blackhawk_mfd_has_focus, COMDAT

; 10910: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10911: 	int
; 10912: 		result;
; 10913: 
; 10914: 	mfd_modes
; 10915: 		mfd_mode;
; 10916: 
; 10917: 	if (mfd_location == MFD_LOCATION_LHS)

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	75 0a		 jne	 SHORT $LN4@get_blackh

; 10918: 	{
; 10919: 		mfd_mode = lhs_mfd_mode;

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A
  00014	89 45 f8	 mov	 DWORD PTR _mfd_mode$[ebp], eax

; 10920: 	}
; 10921: 	else

  00017	eb 08		 jmp	 SHORT $LN5@get_blackh
$LN4@get_blackh:

; 10922: 	{
; 10923: 		mfd_mode = rhs_mfd_mode;

  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A
  0001e	89 45 f8	 mov	 DWORD PTR _mfd_mode$[ebp], eax
$LN5@get_blackh:

; 10924: 	}
; 10925: 
; 10926: 	switch (target_acquisition_system)

  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; target_acquisition_system
  00026	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  00029	8b 4d b4	 mov	 ecx, DWORD PTR tv65[ebp]
  0002c	83 e9 01	 sub	 ecx, 1
  0002f	89 4d b4	 mov	 DWORD PTR tv65[ebp], ecx
  00032	83 7d b4 04	 cmp	 DWORD PTR tv65[ebp], 4
  00036	0f 87 a0 00 00
	00		 ja	 $LN11@get_blackh
  0003c	8b 55 b4	 mov	 edx, DWORD PTR tv65[ebp]
  0003f	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN23@get_blackh[edx*4]
$LN6@get_blackh:

; 10927: 	{
; 10928: 		////////////////////////////////////////
; 10929: 		case TARGET_ACQUISITION_SYSTEM_GROUND_RADAR:
; 10930: 		////////////////////////////////////////
; 10931: 		{
; 10932: 			result = (mfd_mode == MFD_MODE_GROUND_RADAR);

  00046	83 7d f8 02	 cmp	 DWORD PTR _mfd_mode$[ebp], 2
  0004a	75 09		 jne	 SHORT $LN13@get_blackh
  0004c	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  00053	eb 07		 jmp	 SHORT $LN14@get_blackh
$LN13@get_blackh:
  00055	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$LN14@get_blackh:
  0005c	8b 45 b4	 mov	 eax, DWORD PTR tv67[ebp]
  0005f	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 10933: 
; 10934: 			break;

  00062	eb 7f		 jmp	 SHORT $LN2@get_blackh
$LN7@get_blackh:

; 10935: 		}
; 10936: 		////////////////////////////////////////
; 10937: 		case TARGET_ACQUISITION_SYSTEM_AIR_RADAR:
; 10938: 		////////////////////////////////////////
; 10939: 		{
; 10940: 			result = (mfd_mode == MFD_MODE_AIR_RADAR);

  00064	83 7d f8 03	 cmp	 DWORD PTR _mfd_mode$[ebp], 3
  00068	75 09		 jne	 SHORT $LN15@get_blackh
  0006a	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  00071	eb 07		 jmp	 SHORT $LN16@get_blackh
$LN15@get_blackh:
  00073	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN16@get_blackh:
  0007a	8b 45 b4	 mov	 eax, DWORD PTR tv69[ebp]
  0007d	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 10941: 
; 10942: 			break;

  00080	eb 61		 jmp	 SHORT $LN2@get_blackh
$LN8@get_blackh:

; 10943: 		}
; 10944: 		////////////////////////////////////////
; 10945: 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 10946: 		////////////////////////////////////////
; 10947: 		{
; 10948: 			result = (mfd_mode == MFD_MODE_FLIR);

  00082	83 7d f8 04	 cmp	 DWORD PTR _mfd_mode$[ebp], 4
  00086	75 09		 jne	 SHORT $LN17@get_blackh
  00088	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv71[ebp], 1
  0008f	eb 07		 jmp	 SHORT $LN18@get_blackh
$LN17@get_blackh:
  00091	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$LN18@get_blackh:
  00098	8b 45 b4	 mov	 eax, DWORD PTR tv71[ebp]
  0009b	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 10949: 
; 10950: 			break;

  0009e	eb 43		 jmp	 SHORT $LN2@get_blackh
$LN9@get_blackh:

; 10951: 		}
; 10952: 		////////////////////////////////////////
; 10953: 		case TARGET_ACQUISITION_SYSTEM_DTV:
; 10954: 		////////////////////////////////////////
; 10955: 		{
; 10956: 			result = (mfd_mode == MFD_MODE_DTV);

  000a0	83 7d f8 05	 cmp	 DWORD PTR _mfd_mode$[ebp], 5
  000a4	75 09		 jne	 SHORT $LN19@get_blackh
  000a6	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv73[ebp], 1
  000ad	eb 07		 jmp	 SHORT $LN20@get_blackh
$LN19@get_blackh:
  000af	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN20@get_blackh:
  000b6	8b 45 b4	 mov	 eax, DWORD PTR tv73[ebp]
  000b9	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 10957: 
; 10958: 			break;

  000bc	eb 25		 jmp	 SHORT $LN2@get_blackh
$LN10@get_blackh:

; 10959: 		}
; 10960: 		////////////////////////////////////////
; 10961: 		case TARGET_ACQUISITION_SYSTEM_DVO:
; 10962: 		////////////////////////////////////////
; 10963: 		{
; 10964: 			result = (mfd_mode == MFD_MODE_DVO);

  000be	83 7d f8 06	 cmp	 DWORD PTR _mfd_mode$[ebp], 6
  000c2	75 09		 jne	 SHORT $LN21@get_blackh
  000c4	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv75[ebp], 1
  000cb	eb 07		 jmp	 SHORT $LN22@get_blackh
$LN21@get_blackh:
  000cd	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$LN22@get_blackh:
  000d4	8b 45 b4	 mov	 eax, DWORD PTR tv75[ebp]
  000d7	89 45 fc	 mov	 DWORD PTR _result$[ebp], eax

; 10965: 
; 10966: 			break;

  000da	eb 07		 jmp	 SHORT $LN2@get_blackh
$LN11@get_blackh:

; 10967: 		}
; 10968: 		////////////////////////////////////////
; 10969: 		default:
; 10970: 		////////////////////////////////////////
; 10971: 		{
; 10972: 			result = FALSE;

  000dc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0
$LN2@get_blackh:

; 10973: 
; 10974: 			break;
; 10975: 		}
; 10976: 	}
; 10977: 
; 10978: 	return (result);

  000e3	8b 45 fc	 mov	 eax, DWORD PTR _result$[ebp]

; 10979: }

  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi
  000e8	5b		 pop	 ebx
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 04 00	 ret	 4
  000ef	90		 npad	 1
$LN23@get_blackh:
  000f0	00 00 00 00	 DD	 $LN6@get_blackh
  000f4	00 00 00 00	 DD	 $LN7@get_blackh
  000f8	00 00 00 00	 DD	 $LN8@get_blackh
  000fc	00 00 00 00	 DD	 $LN9@get_blackh
  00100	00 00 00 00	 DD	 $LN10@get_blackh
?get_blackhawk_mfd_has_focus@@YGHW4MFD_LOCATIONS@@@Z ENDP ; get_blackhawk_mfd_has_focus
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?toggle_blackhawk_rhs_mfd_on_off@@YGXXZ
_TEXT	SEGMENT
?toggle_blackhawk_rhs_mfd_on_off@@YGXXZ PROC		; toggle_blackhawk_rhs_mfd_on_off, COMDAT

; 10894: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10895: 	if (rhs_mfd_mode != MFD_MODE_OFF)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 0
  00010	74 0b		 je	 SHORT $LN2@toggle_bla

; 10896: 	{
; 10897: 		select_blackhawk_mfd_mode (MFD_MODE_OFF, MFD_LOCATION_RHS);

  00012	6a 01		 push	 1
  00014	6a 00		 push	 0
  00016	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10898: 	}
; 10899: 	else

  0001b	eb 05		 jmp	 SHORT $LN1@toggle_bla
$LN2@toggle_bla:

; 10900: 	{
; 10901: 		select_next_blackhawk_rhs_mfd ();

  0001d	e8 00 00 00 00	 call	 ?select_next_blackhawk_rhs_mfd@@YGXXZ ; select_next_blackhawk_rhs_mfd
$LN1@toggle_bla:

; 10902: 	}
; 10903: }

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?toggle_blackhawk_rhs_mfd_on_off@@YGXXZ ENDP		; toggle_blackhawk_rhs_mfd_on_off
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?toggle_blackhawk_lhs_mfd_on_off@@YGXXZ
_TEXT	SEGMENT
?toggle_blackhawk_lhs_mfd_on_off@@YGXXZ PROC		; toggle_blackhawk_lhs_mfd_on_off, COMDAT

; 10878: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10879: 	if (lhs_mfd_mode != MFD_MODE_OFF)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 0
  00010	74 0b		 je	 SHORT $LN2@toggle_bla

; 10880: 	{
; 10881: 		select_blackhawk_mfd_mode (MFD_MODE_OFF, MFD_LOCATION_LHS);

  00012	6a 00		 push	 0
  00014	6a 00		 push	 0
  00016	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10882: 	}
; 10883: 	else

  0001b	eb 05		 jmp	 SHORT $LN1@toggle_bla
$LN2@toggle_bla:

; 10884: 	{
; 10885: 		select_next_blackhawk_lhs_mfd ();

  0001d	e8 00 00 00 00	 call	 ?select_next_blackhawk_lhs_mfd@@YGXXZ ; select_next_blackhawk_lhs_mfd
$LN1@toggle_bla:

; 10886: 	}
; 10887: }

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?toggle_blackhawk_lhs_mfd_on_off@@YGXXZ ENDP		; toggle_blackhawk_lhs_mfd_on_off
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?auto_page_blackhawk_ase_mfd@@YGXXZ
_TEXT	SEGMENT
?auto_page_blackhawk_ase_mfd@@YGXXZ PROC		; auto_page_blackhawk_ase_mfd, COMDAT

; 10764: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10765: 	if (!get_global_ase_auto_page ())

  00009	83 3d 64 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+868, 0
  00010	75 05		 jne	 SHORT $LN2@auto_page_

; 10766: 	{
; 10767: 		return;

  00012	e9 1d 01 00 00	 jmp	 $LN1@auto_page_
$LN2@auto_page_:

; 10768: 	}
; 10769: 
; 10770: 	////////////////////////////////////////
; 10771: 	//
; 10772: 	// select viewed large MFD
; 10773: 	//
; 10774: 	////////////////////////////////////////
; 10775: 
; 10776: 	if (get_view_mode () == VIEW_MODE_COCKPIT_PANEL_SPECIAL_APACHE_LHS_MFD)

  00017	83 3d 00 00 00
	00 1c		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 28 ; view_mode, 0000001cH
  0001e	75 1b		 jne	 SHORT $LN3@auto_page_

; 10777: 	{
; 10778: 		if (!blackhawk_damage.lh_mfd)

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  00025	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  00028	83 e0 01	 and	 eax, 1
  0002b	75 0e		 jne	 SHORT $LN3@auto_page_

; 10779: 		{
; 10780: 			select_blackhawk_mfd_mode (MFD_MODE_ASE, MFD_LOCATION_LHS);

  0002d	6a 00		 push	 0
  0002f	6a 09		 push	 9
  00031	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10781: 
; 10782: 			return;

  00036	e9 f9 00 00 00	 jmp	 $LN1@auto_page_
$LN3@auto_page_:

; 10783: 		}
; 10784: 	}
; 10785: 
; 10786: 	if (get_view_mode () == VIEW_MODE_COCKPIT_PANEL_SPECIAL_APACHE_RHS_MFD)

  0003b	83 3d 00 00 00
	00 1d		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 29 ; view_mode, 0000001dH
  00042	75 1b		 jne	 SHORT $LN5@auto_page_

; 10787: 	{
; 10788: 		if (!blackhawk_damage.rh_mfd)

  00044	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  00049	c1 e8 11	 shr	 eax, 17			; 00000011H
  0004c	83 e0 01	 and	 eax, 1
  0004f	75 0e		 jne	 SHORT $LN5@auto_page_

; 10789: 		{
; 10790: 			select_blackhawk_mfd_mode (MFD_MODE_ASE, MFD_LOCATION_RHS);

  00051	6a 01		 push	 1
  00053	6a 09		 push	 9
  00055	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10791: 
; 10792: 			return;

  0005a	e9 d5 00 00 00	 jmp	 $LN1@auto_page_
$LN5@auto_page_:

; 10793: 		}
; 10794: 	}
; 10795: 
; 10796: 	////////////////////////////////////////
; 10797: 	//
; 10798: 	// check if already displayed
; 10799: 	//
; 10800: 	////////////////////////////////////////
; 10801: 
; 10802: 	if (lhs_mfd_mode == MFD_MODE_ASE)

  0005f	83 3d 00 00 00
	00 09		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 9
  00066	75 05		 jne	 SHORT $LN7@auto_page_

; 10803: 	{
; 10804: 		return;

  00068	e9 c7 00 00 00	 jmp	 $LN1@auto_page_
$LN7@auto_page_:

; 10805: 	}
; 10806: 
; 10807: 	if (rhs_mfd_mode == MFD_MODE_ASE)

  0006d	83 3d 00 00 00
	00 09		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 9
  00074	75 05		 jne	 SHORT $LN8@auto_page_

; 10808: 	{
; 10809: 		return;

  00076	e9 b9 00 00 00	 jmp	 $LN1@auto_page_
$LN8@auto_page_:

; 10810: 	}
; 10811: 
; 10812: 	////////////////////////////////////////
; 10813: 	//
; 10814: 	// select undamaged off MFD
; 10815: 	//
; 10816: 	////////////////////////////////////////
; 10817: 
; 10818: 	if ((lhs_mfd_mode == MFD_MODE_OFF) && (!blackhawk_damage.lh_mfd))

  0007b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 0
  00082	75 1b		 jne	 SHORT $LN9@auto_page_
  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  00089	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  0008c	83 e0 01	 and	 eax, 1
  0008f	75 0e		 jne	 SHORT $LN9@auto_page_

; 10819: 	{
; 10820: 		select_blackhawk_mfd_mode (MFD_MODE_ASE, MFD_LOCATION_LHS);

  00091	6a 00		 push	 0
  00093	6a 09		 push	 9
  00095	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10821: 
; 10822: 		return;

  0009a	e9 95 00 00 00	 jmp	 $LN1@auto_page_
$LN9@auto_page_:

; 10823: 	}
; 10824: 
; 10825: 	if ((rhs_mfd_mode == MFD_MODE_OFF) && (!blackhawk_damage.rh_mfd))

  0009f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 0
  000a6	75 18		 jne	 SHORT $LN10@auto_page_
  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  000ad	c1 e8 11	 shr	 eax, 17			; 00000011H
  000b0	83 e0 01	 and	 eax, 1
  000b3	75 0b		 jne	 SHORT $LN10@auto_page_

; 10826: 	{
; 10827: 		select_blackhawk_mfd_mode (MFD_MODE_ASE, MFD_LOCATION_RHS);

  000b5	6a 01		 push	 1
  000b7	6a 09		 push	 9
  000b9	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10828: 
; 10829: 		return;

  000be	eb 74		 jmp	 SHORT $LN1@auto_page_
$LN10@auto_page_:

; 10830: 	}
; 10831: 
; 10832: 	////////////////////////////////////////
; 10833: 	//
; 10834: 	// select unfocused MFD
; 10835: 	//
; 10836: 	////////////////////////////////////////
; 10837: 
; 10838: 	if ((!get_blackhawk_mfd_has_focus (MFD_LOCATION_LHS)) && (!blackhawk_damage.lh_mfd))

  000c0	6a 00		 push	 0
  000c2	e8 00 00 00 00	 call	 ?get_blackhawk_mfd_has_focus@@YGHW4MFD_LOCATIONS@@@Z ; get_blackhawk_mfd_has_focus
  000c7	85 c0		 test	 eax, eax
  000c9	75 18		 jne	 SHORT $LN11@auto_page_
  000cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  000d0	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  000d3	83 e0 01	 and	 eax, 1
  000d6	75 0b		 jne	 SHORT $LN11@auto_page_

; 10839: 	{
; 10840: 		select_blackhawk_mfd_mode (MFD_MODE_ASE, MFD_LOCATION_LHS);

  000d8	6a 00		 push	 0
  000da	6a 09		 push	 9
  000dc	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10841: 
; 10842: 		return;

  000e1	eb 51		 jmp	 SHORT $LN1@auto_page_
$LN11@auto_page_:

; 10843: 	}
; 10844: 
; 10845: 	if ((!get_blackhawk_mfd_has_focus (MFD_LOCATION_RHS)) && (!blackhawk_damage.rh_mfd))

  000e3	6a 01		 push	 1
  000e5	e8 00 00 00 00	 call	 ?get_blackhawk_mfd_has_focus@@YGHW4MFD_LOCATIONS@@@Z ; get_blackhawk_mfd_has_focus
  000ea	85 c0		 test	 eax, eax
  000ec	75 18		 jne	 SHORT $LN12@auto_page_
  000ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  000f3	c1 e8 11	 shr	 eax, 17			; 00000011H
  000f6	83 e0 01	 and	 eax, 1
  000f9	75 0b		 jne	 SHORT $LN12@auto_page_

; 10846: 	{
; 10847: 		select_blackhawk_mfd_mode (MFD_MODE_ASE, MFD_LOCATION_RHS);

  000fb	6a 01		 push	 1
  000fd	6a 09		 push	 9
  000ff	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10848: 
; 10849: 		return;

  00104	eb 2e		 jmp	 SHORT $LN1@auto_page_
$LN12@auto_page_:

; 10850: 	}
; 10851: 
; 10852: 	////////////////////////////////////////
; 10853: 	//
; 10854: 	// select undamaged MFD
; 10855: 	//
; 10856: 	////////////////////////////////////////
; 10857: 
; 10858: 	if (!blackhawk_damage.lh_mfd)

  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  0010b	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  0010e	83 e0 01	 and	 eax, 1
  00111	75 0b		 jne	 SHORT $LN13@auto_page_

; 10859: 	{
; 10860: 		select_blackhawk_mfd_mode (MFD_MODE_ASE, MFD_LOCATION_LHS);

  00113	6a 00		 push	 0
  00115	6a 09		 push	 9
  00117	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10861: 
; 10862: 		return;

  0011c	eb 16		 jmp	 SHORT $LN1@auto_page_
$LN13@auto_page_:

; 10863: 	}
; 10864: 
; 10865: 	if (!blackhawk_damage.rh_mfd)

  0011e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  00123	c1 e8 11	 shr	 eax, 17			; 00000011H
  00126	83 e0 01	 and	 eax, 1
  00129	75 09		 jne	 SHORT $LN1@auto_page_

; 10866: 	{
; 10867: 		select_blackhawk_mfd_mode (MFD_MODE_ASE, MFD_LOCATION_RHS);

  0012b	6a 01		 push	 1
  0012d	6a 09		 push	 9
  0012f	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode
$LN1@auto_page_:

; 10868: 
; 10869: 		return;
; 10870: 	}
; 10871: }

  00134	5f		 pop	 edi
  00135	5e		 pop	 esi
  00136	5b		 pop	 ebx
  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c3		 ret	 0
?auto_page_blackhawk_ase_mfd@@YGXXZ ENDP		; auto_page_blackhawk_ase_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?toggle_blackhawk_ase_auto_page@@YGXXZ
_TEXT	SEGMENT
?toggle_blackhawk_ase_auto_page@@YGXXZ PROC		; toggle_blackhawk_ase_auto_page, COMDAT

; 10755: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10756: 	set_global_ase_auto_page (get_global_ase_auto_page () ^ 1);

  00009	a1 64 03 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+868
  0000e	83 f0 01	 xor	 eax, 1
  00011	a3 64 03 00 00	 mov	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+868, eax

; 10757: }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?toggle_blackhawk_ase_auto_page@@YGXXZ ENDP		; toggle_blackhawk_ase_auto_page
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?select_blackhawk_tads_mfd@@YGXXZ
_TEXT	SEGMENT
?select_blackhawk_tads_mfd@@YGXXZ PROC			; select_blackhawk_tads_mfd, COMDAT

; 10686: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10687: 	if (get_view_mode () == VIEW_MODE_COCKPIT_PANEL_SPECIAL_APACHE_LHS_MFD)

  00009	83 3d 00 00 00
	00 1c		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 28 ; view_mode, 0000001cH
  00010	75 1f		 jne	 SHORT $LN2@select_bla

; 10688: 	{
; 10689: 		if (!blackhawk_damage.lh_mfd)

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  00017	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  0001a	83 e0 01	 and	 eax, 1
  0001d	75 12		 jne	 SHORT $LN2@select_bla

; 10690: 		{
; 10691: 			select_blackhawk_mfd_mode (get_mfd_mode_for_eo_sensor (), MFD_LOCATION_LHS);

  0001f	6a 00		 push	 0
  00021	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10692: 
; 10693: 			return;

  0002c	e9 02 01 00 00	 jmp	 $LN1@select_bla
$LN2@select_bla:

; 10694: 		}
; 10695: 	}
; 10696: 
; 10697: 	if (get_view_mode () == VIEW_MODE_COCKPIT_PANEL_SPECIAL_APACHE_RHS_MFD)

  00031	83 3d 00 00 00
	00 1d		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 29 ; view_mode, 0000001dH
  00038	75 1f		 jne	 SHORT $LN4@select_bla

; 10698: 	{
; 10699: 		if (!blackhawk_damage.rh_mfd)

  0003a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  0003f	c1 e8 11	 shr	 eax, 17			; 00000011H
  00042	83 e0 01	 and	 eax, 1
  00045	75 12		 jne	 SHORT $LN4@select_bla

; 10700: 		{
; 10701: 			select_blackhawk_mfd_mode (get_mfd_mode_for_eo_sensor (), MFD_LOCATION_RHS);

  00047	6a 01		 push	 1
  00049	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10702: 
; 10703: 			return;

  00054	e9 da 00 00 00	 jmp	 $LN1@select_bla
$LN4@select_bla:

; 10704: 		}
; 10705: 	}
; 10706: 
; 10707: 	if ((lhs_mfd_mode == MFD_MODE_FLIR) || (lhs_mfd_mode == MFD_MODE_DTV) || (lhs_mfd_mode == MFD_MODE_DVO))

  00059	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 4
  00060	74 12		 je	 SHORT $LN7@select_bla
  00062	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 5
  00069	74 09		 je	 SHORT $LN7@select_bla
  0006b	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 6
  00072	75 12		 jne	 SHORT $LN6@select_bla
$LN7@select_bla:

; 10708: 	{
; 10709: 		select_blackhawk_mfd_mode (get_mfd_mode_for_eo_sensor (), MFD_LOCATION_LHS);

  00074	6a 00		 push	 0
  00076	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10710: 
; 10711: 		return;

  00081	e9 ad 00 00 00	 jmp	 $LN1@select_bla
$LN6@select_bla:

; 10712: 	}
; 10713: 
; 10714: 	if ((rhs_mfd_mode == MFD_MODE_FLIR) || (rhs_mfd_mode == MFD_MODE_DTV) || (rhs_mfd_mode == MFD_MODE_DVO))

  00086	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 4
  0008d	74 12		 je	 SHORT $LN9@select_bla
  0008f	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 5
  00096	74 09		 je	 SHORT $LN9@select_bla
  00098	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 6
  0009f	75 12		 jne	 SHORT $LN8@select_bla
$LN9@select_bla:

; 10715: 	{
; 10716: 		select_blackhawk_mfd_mode (get_mfd_mode_for_eo_sensor (), MFD_LOCATION_RHS);

  000a1	6a 01		 push	 1
  000a3	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10717: 
; 10718: 		return;

  000ae	e9 80 00 00 00	 jmp	 $LN1@select_bla
$LN8@select_bla:

; 10719: 	}
; 10720: 
; 10721: 	if ((lhs_mfd_mode == MFD_MODE_OFF) && (!blackhawk_damage.lh_mfd))

  000b3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 0
  000ba	75 1c		 jne	 SHORT $LN10@select_bla
  000bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  000c1	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  000c4	83 e0 01	 and	 eax, 1
  000c7	75 0f		 jne	 SHORT $LN10@select_bla

; 10722: 	{
; 10723: 		select_blackhawk_mfd_mode (get_mfd_mode_for_eo_sensor (), MFD_LOCATION_LHS);

  000c9	6a 00		 push	 0
  000cb	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10724: 
; 10725: 		return;

  000d6	eb 5b		 jmp	 SHORT $LN1@select_bla
$LN10@select_bla:

; 10726: 	}
; 10727: 
; 10728: 	if ((rhs_mfd_mode == MFD_MODE_OFF) && (!blackhawk_damage.rh_mfd))

  000d8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 0
  000df	75 1c		 jne	 SHORT $LN11@select_bla
  000e1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  000e6	c1 e8 11	 shr	 eax, 17			; 00000011H
  000e9	83 e0 01	 and	 eax, 1
  000ec	75 0f		 jne	 SHORT $LN11@select_bla

; 10729: 	{
; 10730: 		select_blackhawk_mfd_mode (get_mfd_mode_for_eo_sensor (), MFD_LOCATION_RHS);

  000ee	6a 01		 push	 1
  000f0	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10731: 
; 10732: 		return;

  000fb	eb 36		 jmp	 SHORT $LN1@select_bla
$LN11@select_bla:

; 10733: 	}
; 10734: 
; 10735: 	if (!blackhawk_damage.lh_mfd)

  000fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  00102	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  00105	83 e0 01	 and	 eax, 1
  00108	75 0f		 jne	 SHORT $LN12@select_bla

; 10736: 	{
; 10737: 		select_blackhawk_mfd_mode (get_mfd_mode_for_eo_sensor (), MFD_LOCATION_LHS);

  0010a	6a 00		 push	 0
  0010c	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00111	50		 push	 eax
  00112	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10738: 
; 10739: 		return;

  00117	eb 1a		 jmp	 SHORT $LN1@select_bla
$LN12@select_bla:

; 10740: 	}
; 10741: 
; 10742: 	if (!blackhawk_damage.rh_mfd)

  00119	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  0011e	c1 e8 11	 shr	 eax, 17			; 00000011H
  00121	83 e0 01	 and	 eax, 1
  00124	75 0d		 jne	 SHORT $LN1@select_bla

; 10743: 	{
; 10744: 		select_blackhawk_mfd_mode (get_mfd_mode_for_eo_sensor (), MFD_LOCATION_RHS);

  00126	6a 01		 push	 1
  00128	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode
$LN1@select_bla:

; 10745: 
; 10746: 		return;
; 10747: 	}
; 10748: }

  00133	5f		 pop	 edi
  00134	5e		 pop	 esi
  00135	5b		 pop	 ebx
  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c3		 ret	 0
?select_blackhawk_tads_mfd@@YGXXZ ENDP			; select_blackhawk_tads_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?select_blackhawk_air_radar_mfd@@YGXXZ
_TEXT	SEGMENT
?select_blackhawk_air_radar_mfd@@YGXXZ PROC		; select_blackhawk_air_radar_mfd, COMDAT

; 10607: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10608: 	if (get_view_mode () == VIEW_MODE_COCKPIT_PANEL_SPECIAL_APACHE_LHS_MFD)

  00009	83 3d 00 00 00
	00 1c		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 28 ; view_mode, 0000001cH
  00010	75 1b		 jne	 SHORT $LN2@select_bla

; 10609: 	{
; 10610: 		if (!blackhawk_damage.lh_mfd)

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  00017	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  0001a	83 e0 01	 and	 eax, 1
  0001d	75 0e		 jne	 SHORT $LN2@select_bla

; 10611: 		{
; 10612: 			select_blackhawk_mfd_mode (MFD_MODE_AIR_RADAR, MFD_LOCATION_LHS);

  0001f	6a 00		 push	 0
  00021	6a 03		 push	 3
  00023	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10613: 
; 10614: 			return;

  00028	e9 db 00 00 00	 jmp	 $LN1@select_bla
$LN2@select_bla:

; 10615: 		}
; 10616: 	}
; 10617: 
; 10618: 	if (get_view_mode () == VIEW_MODE_COCKPIT_PANEL_SPECIAL_APACHE_RHS_MFD)

  0002d	83 3d 00 00 00
	00 1d		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 29 ; view_mode, 0000001dH
  00034	75 1b		 jne	 SHORT $LN4@select_bla

; 10619: 	{
; 10620: 		if (!blackhawk_damage.rh_mfd)

  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  0003b	c1 e8 11	 shr	 eax, 17			; 00000011H
  0003e	83 e0 01	 and	 eax, 1
  00041	75 0e		 jne	 SHORT $LN4@select_bla

; 10621: 		{
; 10622: 			select_blackhawk_mfd_mode (MFD_MODE_AIR_RADAR, MFD_LOCATION_RHS);

  00043	6a 01		 push	 1
  00045	6a 03		 push	 3
  00047	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10623: 
; 10624: 			return;

  0004c	e9 b7 00 00 00	 jmp	 $LN1@select_bla
$LN4@select_bla:

; 10625: 		}
; 10626: 	}
; 10627: 
; 10628: 	if (lhs_mfd_mode == MFD_MODE_AIR_RADAR)

  00051	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 3
  00058	75 05		 jne	 SHORT $LN6@select_bla

; 10629: 	{
; 10630: 		return;

  0005a	e9 a9 00 00 00	 jmp	 $LN1@select_bla
$LN6@select_bla:

; 10631: 	}
; 10632: 
; 10633: 	if (rhs_mfd_mode == MFD_MODE_AIR_RADAR)

  0005f	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 3
  00066	75 05		 jne	 SHORT $LN7@select_bla

; 10634: 	{
; 10635: 		return;

  00068	e9 9b 00 00 00	 jmp	 $LN1@select_bla
$LN7@select_bla:

; 10636: 	}
; 10637: 
; 10638: 	if (lhs_mfd_mode == MFD_MODE_GROUND_RADAR)

  0006d	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 2
  00074	75 0e		 jne	 SHORT $LN8@select_bla

; 10639: 	{
; 10640: 		select_blackhawk_mfd_mode (MFD_MODE_AIR_RADAR, MFD_LOCATION_LHS);

  00076	6a 00		 push	 0
  00078	6a 03		 push	 3
  0007a	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10641: 
; 10642: 		return;

  0007f	e9 84 00 00 00	 jmp	 $LN1@select_bla
$LN8@select_bla:

; 10643: 	}
; 10644: 
; 10645: 	if (rhs_mfd_mode == MFD_MODE_GROUND_RADAR)

  00084	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 2
  0008b	75 0b		 jne	 SHORT $LN9@select_bla

; 10646: 	{
; 10647: 		select_blackhawk_mfd_mode (MFD_MODE_AIR_RADAR, MFD_LOCATION_RHS);

  0008d	6a 01		 push	 1
  0008f	6a 03		 push	 3
  00091	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10648: 
; 10649: 		return;

  00096	eb 70		 jmp	 SHORT $LN1@select_bla
$LN9@select_bla:

; 10650: 	}
; 10651: 
; 10652: 	if ((lhs_mfd_mode == MFD_MODE_OFF) && (!blackhawk_damage.lh_mfd))

  00098	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 0
  0009f	75 18		 jne	 SHORT $LN10@select_bla
  000a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  000a6	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  000a9	83 e0 01	 and	 eax, 1
  000ac	75 0b		 jne	 SHORT $LN10@select_bla

; 10653: 	{
; 10654: 		select_blackhawk_mfd_mode (MFD_MODE_AIR_RADAR, MFD_LOCATION_LHS);

  000ae	6a 00		 push	 0
  000b0	6a 03		 push	 3
  000b2	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10655: 
; 10656: 		return;

  000b7	eb 4f		 jmp	 SHORT $LN1@select_bla
$LN10@select_bla:

; 10657: 	}
; 10658: 
; 10659: 	if ((rhs_mfd_mode == MFD_MODE_OFF) && (!blackhawk_damage.rh_mfd))

  000b9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 0
  000c0	75 18		 jne	 SHORT $LN11@select_bla
  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  000c7	c1 e8 11	 shr	 eax, 17			; 00000011H
  000ca	83 e0 01	 and	 eax, 1
  000cd	75 0b		 jne	 SHORT $LN11@select_bla

; 10660: 	{
; 10661: 		select_blackhawk_mfd_mode (MFD_MODE_AIR_RADAR, MFD_LOCATION_RHS);

  000cf	6a 01		 push	 1
  000d1	6a 03		 push	 3
  000d3	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10662: 
; 10663: 		return;

  000d8	eb 2e		 jmp	 SHORT $LN1@select_bla
$LN11@select_bla:

; 10664: 	}
; 10665: 
; 10666: 	if (!blackhawk_damage.lh_mfd)

  000da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  000df	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  000e2	83 e0 01	 and	 eax, 1
  000e5	75 0b		 jne	 SHORT $LN12@select_bla

; 10667: 	{
; 10668: 		select_blackhawk_mfd_mode (MFD_MODE_AIR_RADAR, MFD_LOCATION_LHS);

  000e7	6a 00		 push	 0
  000e9	6a 03		 push	 3
  000eb	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10669: 
; 10670: 		return;

  000f0	eb 16		 jmp	 SHORT $LN1@select_bla
$LN12@select_bla:

; 10671: 	}
; 10672: 
; 10673: 	if (!blackhawk_damage.rh_mfd)

  000f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  000f7	c1 e8 11	 shr	 eax, 17			; 00000011H
  000fa	83 e0 01	 and	 eax, 1
  000fd	75 09		 jne	 SHORT $LN1@select_bla

; 10674: 	{
; 10675: 		select_blackhawk_mfd_mode (MFD_MODE_AIR_RADAR, MFD_LOCATION_RHS);

  000ff	6a 01		 push	 1
  00101	6a 03		 push	 3
  00103	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode
$LN1@select_bla:

; 10676: 
; 10677: 		return;
; 10678: 	}
; 10679: }

  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	5b		 pop	 ebx
  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	c3		 ret	 0
?select_blackhawk_air_radar_mfd@@YGXXZ ENDP		; select_blackhawk_air_radar_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?select_blackhawk_ground_radar_mfd@@YGXXZ
_TEXT	SEGMENT
?select_blackhawk_ground_radar_mfd@@YGXXZ PROC		; select_blackhawk_ground_radar_mfd, COMDAT

; 10528: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10529: 	if (get_view_mode () == VIEW_MODE_COCKPIT_PANEL_SPECIAL_APACHE_LHS_MFD)

  00009	83 3d 00 00 00
	00 1c		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 28 ; view_mode, 0000001cH
  00010	75 1b		 jne	 SHORT $LN2@select_bla

; 10530: 	{
; 10531: 		if (!blackhawk_damage.lh_mfd)

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  00017	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  0001a	83 e0 01	 and	 eax, 1
  0001d	75 0e		 jne	 SHORT $LN2@select_bla

; 10532: 		{
; 10533: 			select_blackhawk_mfd_mode (MFD_MODE_GROUND_RADAR, MFD_LOCATION_LHS);

  0001f	6a 00		 push	 0
  00021	6a 02		 push	 2
  00023	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10534: 
; 10535: 			return;

  00028	e9 db 00 00 00	 jmp	 $LN1@select_bla
$LN2@select_bla:

; 10536: 		}
; 10537: 	}
; 10538: 
; 10539: 	if (get_view_mode () == VIEW_MODE_COCKPIT_PANEL_SPECIAL_APACHE_RHS_MFD)

  0002d	83 3d 00 00 00
	00 1d		 cmp	 DWORD PTR ?view_mode@@3W4VIEW_MODES@@A, 29 ; view_mode, 0000001dH
  00034	75 1b		 jne	 SHORT $LN4@select_bla

; 10540: 	{
; 10541: 		if (!blackhawk_damage.rh_mfd)

  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  0003b	c1 e8 11	 shr	 eax, 17			; 00000011H
  0003e	83 e0 01	 and	 eax, 1
  00041	75 0e		 jne	 SHORT $LN4@select_bla

; 10542: 		{
; 10543: 			select_blackhawk_mfd_mode (MFD_MODE_GROUND_RADAR, MFD_LOCATION_RHS);

  00043	6a 01		 push	 1
  00045	6a 02		 push	 2
  00047	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10544: 
; 10545: 			return;

  0004c	e9 b7 00 00 00	 jmp	 $LN1@select_bla
$LN4@select_bla:

; 10546: 		}
; 10547: 	}
; 10548: 
; 10549: 	if (lhs_mfd_mode == MFD_MODE_GROUND_RADAR)

  00051	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 2
  00058	75 05		 jne	 SHORT $LN6@select_bla

; 10550: 	{
; 10551: 		return;

  0005a	e9 a9 00 00 00	 jmp	 $LN1@select_bla
$LN6@select_bla:

; 10552: 	}
; 10553: 
; 10554: 	if (rhs_mfd_mode == MFD_MODE_GROUND_RADAR)

  0005f	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 2
  00066	75 05		 jne	 SHORT $LN7@select_bla

; 10555: 	{
; 10556: 		return;

  00068	e9 9b 00 00 00	 jmp	 $LN1@select_bla
$LN7@select_bla:

; 10557: 	}
; 10558: 
; 10559: 	if (lhs_mfd_mode == MFD_MODE_AIR_RADAR)

  0006d	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 3
  00074	75 0e		 jne	 SHORT $LN8@select_bla

; 10560: 	{
; 10561: 		select_blackhawk_mfd_mode (MFD_MODE_GROUND_RADAR, MFD_LOCATION_LHS);

  00076	6a 00		 push	 0
  00078	6a 02		 push	 2
  0007a	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10562: 
; 10563: 		return;

  0007f	e9 84 00 00 00	 jmp	 $LN1@select_bla
$LN8@select_bla:

; 10564: 	}
; 10565: 
; 10566: 	if (rhs_mfd_mode == MFD_MODE_AIR_RADAR)

  00084	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 3
  0008b	75 0b		 jne	 SHORT $LN9@select_bla

; 10567: 	{
; 10568: 		select_blackhawk_mfd_mode (MFD_MODE_GROUND_RADAR, MFD_LOCATION_RHS);

  0008d	6a 01		 push	 1
  0008f	6a 02		 push	 2
  00091	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10569: 
; 10570: 		return;

  00096	eb 70		 jmp	 SHORT $LN1@select_bla
$LN9@select_bla:

; 10571: 	}
; 10572: 
; 10573: 	if ((lhs_mfd_mode == MFD_MODE_OFF) && (!blackhawk_damage.lh_mfd))

  00098	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 0
  0009f	75 18		 jne	 SHORT $LN10@select_bla
  000a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  000a6	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  000a9	83 e0 01	 and	 eax, 1
  000ac	75 0b		 jne	 SHORT $LN10@select_bla

; 10574: 	{
; 10575: 		select_blackhawk_mfd_mode (MFD_MODE_GROUND_RADAR, MFD_LOCATION_LHS);

  000ae	6a 00		 push	 0
  000b0	6a 02		 push	 2
  000b2	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10576: 
; 10577: 		return;

  000b7	eb 4f		 jmp	 SHORT $LN1@select_bla
$LN10@select_bla:

; 10578: 	}
; 10579: 
; 10580: 	if ((rhs_mfd_mode == MFD_MODE_OFF) && (!blackhawk_damage.rh_mfd))

  000b9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 0
  000c0	75 18		 jne	 SHORT $LN11@select_bla
  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  000c7	c1 e8 11	 shr	 eax, 17			; 00000011H
  000ca	83 e0 01	 and	 eax, 1
  000cd	75 0b		 jne	 SHORT $LN11@select_bla

; 10581: 	{
; 10582: 		select_blackhawk_mfd_mode (MFD_MODE_GROUND_RADAR, MFD_LOCATION_RHS);

  000cf	6a 01		 push	 1
  000d1	6a 02		 push	 2
  000d3	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10583: 
; 10584: 		return;

  000d8	eb 2e		 jmp	 SHORT $LN1@select_bla
$LN11@select_bla:

; 10585: 	}
; 10586: 
; 10587: 	if (!blackhawk_damage.lh_mfd)

  000da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  000df	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  000e2	83 e0 01	 and	 eax, 1
  000e5	75 0b		 jne	 SHORT $LN12@select_bla

; 10588: 	{
; 10589: 		select_blackhawk_mfd_mode (MFD_MODE_GROUND_RADAR, MFD_LOCATION_LHS);

  000e7	6a 00		 push	 0
  000e9	6a 02		 push	 2
  000eb	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10590: 
; 10591: 		return;

  000f0	eb 16		 jmp	 SHORT $LN1@select_bla
$LN12@select_bla:

; 10592: 	}
; 10593: 
; 10594: 	if (!blackhawk_damage.rh_mfd)

  000f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  000f7	c1 e8 11	 shr	 eax, 17			; 00000011H
  000fa	83 e0 01	 and	 eax, 1
  000fd	75 09		 jne	 SHORT $LN1@select_bla

; 10595: 	{
; 10596: 		select_blackhawk_mfd_mode (MFD_MODE_GROUND_RADAR, MFD_LOCATION_RHS);

  000ff	6a 01		 push	 1
  00101	6a 02		 push	 2
  00103	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode
$LN1@select_bla:

; 10597: 
; 10598: 		return;
; 10599: 	}
; 10600: }

  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	5b		 pop	 ebx
  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	c3		 ret	 0
?select_blackhawk_ground_radar_mfd@@YGXXZ ENDP		; select_blackhawk_ground_radar_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?select_previous_blackhawk_rhs_mfd@@YGXXZ
_TEXT	SEGMENT
_previous_mfd_mode$ = -4				; size = 4
?select_previous_blackhawk_rhs_mfd@@YGXXZ PROC		; select_previous_blackhawk_rhs_mfd, COMDAT

; 10504: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10505: 	mfd_modes
; 10506: 		previous_mfd_mode;
; 10507: 
; 10508: 	previous_mfd_mode = get_previous_mfd_mode (rhs_mfd_mode);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?get_previous_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z ; get_previous_mfd_mode
  00014	89 45 fc	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax

; 10509: 
; 10510: 	if (previous_mfd_mode != MFD_MODE_DAMAGED)

  00017	83 7d fc 01	 cmp	 DWORD PTR _previous_mfd_mode$[ebp], 1
  0001b	74 3a		 je	 SHORT $LN2@select_pre

; 10511: 	{
; 10512: 		if (previous_mfd_mode == lhs_mfd_mode)

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _previous_mfd_mode$[ebp]
  00020	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A
  00026	75 0c		 jne	 SHORT $LN3@select_pre

; 10513: 		{
; 10514: 			previous_mfd_mode = get_previous_mfd_mode (previous_mfd_mode);

  00028	8b 45 fc	 mov	 eax, DWORD PTR _previous_mfd_mode$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?get_previous_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z ; get_previous_mfd_mode
  00031	89 45 fc	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax
$LN3@select_pre:

; 10515: 		}
; 10516: 
; 10517: 		ASSERT (previous_mfd_mode != lhs_mfd_mode);

  00034	8b 45 fc	 mov	 eax, DWORD PTR _previous_mfd_mode$[ebp]
  00037	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A
  0003d	75 18		 jne	 SHORT $LN2@select_pre
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_previous_blackhawk_rhs_mfd@@YGXXZ@4JA
  00044	83 c0 0d	 add	 eax, 13			; 0000000dH
  00047	50		 push	 eax
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@DBEDONKD@previous_mfd_mode?5?$CB?$DN?5lhs_mfd_mo@
  00052	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@select_pre:

; 10518: 	}
; 10519: 
; 10520: 	select_blackhawk_mfd_mode (previous_mfd_mode, MFD_LOCATION_RHS);

  00057	6a 01		 push	 1
  00059	8b 45 fc	 mov	 eax, DWORD PTR _previous_mfd_mode$[ebp]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10521: }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
?select_previous_blackhawk_rhs_mfd@@YGXXZ ENDP		; select_previous_blackhawk_rhs_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?select_next_blackhawk_rhs_mfd@@YGXXZ
_TEXT	SEGMENT
_next_mfd_mode$ = -4					; size = 4
?select_next_blackhawk_rhs_mfd@@YGXXZ PROC		; select_next_blackhawk_rhs_mfd, COMDAT

; 10480: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10481: 	mfd_modes
; 10482: 		next_mfd_mode;
; 10483: 
; 10484: 	next_mfd_mode = get_next_mfd_mode (rhs_mfd_mode);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?get_next_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z ; get_next_mfd_mode
  00014	89 45 fc	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax

; 10485: 
; 10486: 	if (next_mfd_mode != MFD_MODE_DAMAGED)

  00017	83 7d fc 01	 cmp	 DWORD PTR _next_mfd_mode$[ebp], 1
  0001b	74 3a		 je	 SHORT $LN2@select_nex

; 10487: 	{
; 10488: 		if (next_mfd_mode == lhs_mfd_mode)

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]
  00020	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A
  00026	75 0c		 jne	 SHORT $LN3@select_nex

; 10489: 		{
; 10490: 			next_mfd_mode = get_next_mfd_mode (next_mfd_mode);

  00028	8b 45 fc	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?get_next_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z ; get_next_mfd_mode
  00031	89 45 fc	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax
$LN3@select_nex:

; 10491: 		}
; 10492: 
; 10493: 		ASSERT (next_mfd_mode != lhs_mfd_mode);

  00034	8b 45 fc	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]
  00037	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A
  0003d	75 18		 jne	 SHORT $LN2@select_nex
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_next_blackhawk_rhs_mfd@@YGXXZ@4JA
  00044	83 c0 0d	 add	 eax, 13			; 0000000dH
  00047	50		 push	 eax
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@IPOHAJBI@next_mfd_mode?5?$CB?$DN?5lhs_mfd_mode@
  00052	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@select_nex:

; 10494: 	}
; 10495: 
; 10496: 	select_blackhawk_mfd_mode (next_mfd_mode, MFD_LOCATION_RHS);

  00057	6a 01		 push	 1
  00059	8b 45 fc	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10497: }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
?select_next_blackhawk_rhs_mfd@@YGXXZ ENDP		; select_next_blackhawk_rhs_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?select_previous_blackhawk_lhs_mfd@@YGXXZ
_TEXT	SEGMENT
_previous_mfd_mode$ = -4				; size = 4
?select_previous_blackhawk_lhs_mfd@@YGXXZ PROC		; select_previous_blackhawk_lhs_mfd, COMDAT

; 10456: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10457: 	mfd_modes
; 10458: 		previous_mfd_mode;
; 10459: 
; 10460: 	previous_mfd_mode = get_previous_mfd_mode (lhs_mfd_mode);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?get_previous_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z ; get_previous_mfd_mode
  00014	89 45 fc	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax

; 10461: 
; 10462: 	if (previous_mfd_mode != MFD_MODE_DAMAGED)

  00017	83 7d fc 01	 cmp	 DWORD PTR _previous_mfd_mode$[ebp], 1
  0001b	74 3a		 je	 SHORT $LN2@select_pre

; 10463: 	{
; 10464: 		if (previous_mfd_mode == rhs_mfd_mode)

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _previous_mfd_mode$[ebp]
  00020	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A
  00026	75 0c		 jne	 SHORT $LN3@select_pre

; 10465: 		{
; 10466: 			previous_mfd_mode = get_previous_mfd_mode (previous_mfd_mode);

  00028	8b 45 fc	 mov	 eax, DWORD PTR _previous_mfd_mode$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?get_previous_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z ; get_previous_mfd_mode
  00031	89 45 fc	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax
$LN3@select_pre:

; 10467: 		}
; 10468: 
; 10469: 		ASSERT (previous_mfd_mode != rhs_mfd_mode);

  00034	8b 45 fc	 mov	 eax, DWORD PTR _previous_mfd_mode$[ebp]
  00037	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A
  0003d	75 18		 jne	 SHORT $LN2@select_pre
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_previous_blackhawk_lhs_mfd@@YGXXZ@4JA
  00044	83 c0 0d	 add	 eax, 13			; 0000000dH
  00047	50		 push	 eax
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@HPKCEHMJ@previous_mfd_mode?5?$CB?$DN?5rhs_mfd_mo@
  00052	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@select_pre:

; 10470: 	}
; 10471: 
; 10472: 	select_blackhawk_mfd_mode (previous_mfd_mode, MFD_LOCATION_LHS);

  00057	6a 00		 push	 0
  00059	8b 45 fc	 mov	 eax, DWORD PTR _previous_mfd_mode$[ebp]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10473: }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
?select_previous_blackhawk_lhs_mfd@@YGXXZ ENDP		; select_previous_blackhawk_lhs_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?select_next_blackhawk_lhs_mfd@@YGXXZ
_TEXT	SEGMENT
_next_mfd_mode$ = -4					; size = 4
?select_next_blackhawk_lhs_mfd@@YGXXZ PROC		; select_next_blackhawk_lhs_mfd, COMDAT

; 10432: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10433: 	mfd_modes
; 10434: 		next_mfd_mode;
; 10435: 
; 10436: 	next_mfd_mode = get_next_mfd_mode (lhs_mfd_mode);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?get_next_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z ; get_next_mfd_mode
  00014	89 45 fc	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax

; 10437: 
; 10438: 	if (next_mfd_mode != MFD_MODE_DAMAGED)

  00017	83 7d fc 01	 cmp	 DWORD PTR _next_mfd_mode$[ebp], 1
  0001b	74 3a		 je	 SHORT $LN2@select_nex

; 10439: 	{
; 10440: 		if (next_mfd_mode == rhs_mfd_mode)

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]
  00020	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A
  00026	75 0c		 jne	 SHORT $LN3@select_nex

; 10441: 		{
; 10442: 			next_mfd_mode = get_next_mfd_mode (next_mfd_mode);

  00028	8b 45 fc	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?get_next_mfd_mode@@YG?AW4MFD_MODES@@W41@@Z ; get_next_mfd_mode
  00031	89 45 fc	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax
$LN3@select_nex:

; 10443: 		}
; 10444: 
; 10445: 		ASSERT (next_mfd_mode != rhs_mfd_mode);

  00034	8b 45 fc	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]
  00037	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A
  0003d	75 18		 jne	 SHORT $LN2@select_nex
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_next_blackhawk_lhs_mfd@@YGXXZ@4JA
  00044	83 c0 0d	 add	 eax, 13			; 0000000dH
  00047	50		 push	 eax
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@MBAGKDHC@next_mfd_mode?5?$CB?$DN?5rhs_mfd_mode@
  00052	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@select_nex:

; 10446: 	}
; 10447: 
; 10448: 	select_blackhawk_mfd_mode (next_mfd_mode, MFD_LOCATION_LHS);

  00057	6a 00		 push	 0
  00059	8b 45 fc	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 10449: }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
?select_next_blackhawk_lhs_mfd@@YGXXZ ENDP		; select_next_blackhawk_lhs_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?select_previous_blackhawk_tsd_declutter_level@@YGXXZ
_TEXT	SEGMENT
?select_previous_blackhawk_tsd_declutter_level@@YGXXZ PROC ; select_previous_blackhawk_tsd_declutter_level, COMDAT

; 10234: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10235: 	if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_NAVIGATION)

  00009	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
  00010	75 0c		 jne	 SHORT $LN2@select_pre

; 10236: 	{
; 10237: 		tsd_declutter_level = TSD_DECLUTTER_LEVEL_TARGET;

  00012	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  0001c	eb 1f		 jmp	 SHORT $LN1@select_pre
$LN2@select_pre:

; 10238: 	}
; 10239: 	else if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  0001e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  00025	75 0c		 jne	 SHORT $LN4@select_pre

; 10240: 	{
; 10241: 		tsd_declutter_level = TSD_DECLUTTER_LEVEL_ALL;

  00027	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0

; 10242: 	}
; 10243: 	else

  00031	eb 0a		 jmp	 SHORT $LN1@select_pre
$LN4@select_pre:

; 10244: 	{
; 10245: 		tsd_declutter_level = TSD_DECLUTTER_LEVEL_NAVIGATION;

  00033	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
$LN1@select_pre:

; 10246: 	}
; 10247: }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?select_previous_blackhawk_tsd_declutter_level@@YGXXZ ENDP ; select_previous_blackhawk_tsd_declutter_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?select_next_blackhawk_tsd_declutter_level@@YGXXZ
_TEXT	SEGMENT
?select_next_blackhawk_tsd_declutter_level@@YGXXZ PROC	; select_next_blackhawk_tsd_declutter_level, COMDAT

; 10214: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10215: 	if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_ALL)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0
  00010	75 0c		 jne	 SHORT $LN2@select_nex

; 10216: 	{
; 10217: 		tsd_declutter_level = TSD_DECLUTTER_LEVEL_TARGET;

  00012	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  0001c	eb 1f		 jmp	 SHORT $LN1@select_nex
$LN2@select_nex:

; 10218: 	}
; 10219: 	else if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  0001e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  00025	75 0c		 jne	 SHORT $LN4@select_nex

; 10220: 	{
; 10221: 		tsd_declutter_level = TSD_DECLUTTER_LEVEL_NAVIGATION;

  00027	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2

; 10222: 	}
; 10223: 	else

  00031	eb 0a		 jmp	 SHORT $LN1@select_nex
$LN4@select_nex:

; 10224: 	{
; 10225: 		tsd_declutter_level = TSD_DECLUTTER_LEVEL_ALL;

  00033	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0
$LN1@select_nex:

; 10226: 	}
; 10227: }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?select_next_blackhawk_tsd_declutter_level@@YGXXZ ENDP	; select_next_blackhawk_tsd_declutter_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?select_previous_blackhawk_tsd_ase_range@@YGXXZ
_TEXT	SEGMENT
?select_previous_blackhawk_tsd_ase_range@@YGXXZ PROC	; select_previous_blackhawk_tsd_ase_range, COMDAT

; 10194: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10195: 	if (tsd_ase_range == TSD_ASE_RANGE_25000)

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  00011	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  00018	9f		 lahf
  00019	f6 c4 44	 test	 ah, 68			; 00000044H
  0001c	7a 12		 jp	 SHORT $LN2@select_pre

; 10196: 	{
; 10197: 		tsd_ase_range = TSD_ASE_RANGE_10000;

  0001e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c4000
  00026	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_ase_range@@3MA, xmm0
  0002e	eb 4c		 jmp	 SHORT $LN6@select_pre
$LN2@select_pre:

; 10198: 	}
; 10199: 	else if (tsd_ase_range == TSD_ASE_RANGE_10000)

  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  00038	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  0003f	9f		 lahf
  00040	f6 c4 44	 test	 ah, 68			; 00000044H
  00043	7a 12		 jp	 SHORT $LN4@select_pre

; 10200: 	{
; 10201: 		tsd_ase_range = TSD_ASE_RANGE_5000;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  0004d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_ase_range@@3MA, xmm0
  00055	eb 25		 jmp	 SHORT $LN6@select_pre
$LN4@select_pre:

; 10202: 	}
; 10203: 	else if (tsd_ase_range == TSD_ASE_RANGE_5000)

  00057	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  0005f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  00066	9f		 lahf
  00067	f6 c4 44	 test	 ah, 68			; 00000044H
  0006a	7a 10		 jp	 SHORT $LN6@select_pre

; 10204: 	{
; 10205: 		tsd_ase_range = TSD_ASE_RANGE_2000;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44fa0000
  00074	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_ase_range@@3MA, xmm0
$LN6@select_pre:

; 10206: 	}
; 10207: }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?select_previous_blackhawk_tsd_ase_range@@YGXXZ ENDP	; select_previous_blackhawk_tsd_ase_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?select_next_blackhawk_tsd_ase_range@@YGXXZ
_TEXT	SEGMENT
?select_next_blackhawk_tsd_ase_range@@YGXXZ PROC	; select_next_blackhawk_tsd_ase_range, COMDAT

; 10174: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 10175: 	if (tsd_ase_range == TSD_ASE_RANGE_2000)

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  00011	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  00018	9f		 lahf
  00019	f6 c4 44	 test	 ah, 68			; 00000044H
  0001c	7a 12		 jp	 SHORT $LN2@select_nex

; 10176: 	{
; 10177: 		tsd_ase_range = TSD_ASE_RANGE_5000;

  0001e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  00026	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_ase_range@@3MA, xmm0
  0002e	eb 4c		 jmp	 SHORT $LN6@select_nex
$LN2@select_nex:

; 10178: 	}
; 10179: 	else if (tsd_ase_range == TSD_ASE_RANGE_5000)

  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  00038	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  0003f	9f		 lahf
  00040	f6 c4 44	 test	 ah, 68			; 00000044H
  00043	7a 12		 jp	 SHORT $LN4@select_nex

; 10180: 	{
; 10181: 		tsd_ase_range = TSD_ASE_RANGE_10000;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c4000
  0004d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_ase_range@@3MA, xmm0
  00055	eb 25		 jmp	 SHORT $LN6@select_nex
$LN4@select_nex:

; 10182: 	}
; 10183: 	else if (tsd_ase_range == TSD_ASE_RANGE_10000)

  00057	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  0005f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  00066	9f		 lahf
  00067	f6 c4 44	 test	 ah, 68			; 00000044H
  0006a	7a 10		 jp	 SHORT $LN6@select_nex

; 10184: 	{
; 10185: 		tsd_ase_range = TSD_ASE_RANGE_25000;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@46c35000
  00074	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_ase_range@@3MA, xmm0
$LN6@select_nex:

; 10186: 	}
; 10187: }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?select_next_blackhawk_tsd_ase_range@@YGXXZ ENDP	; select_next_blackhawk_tsd_ase_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_overlaid_blackhawk_mfd@@YGXMMMW4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv186 = -388						; size = 4
tv93 = -388						; size = 4
_specular$1 = -320					; size = 4
_colour$2 = -316					; size = 4
_quad$3 = -312						; size = 256
_org_offset$4 = -56					; size = 4
_scaley$5 = -52						; size = 4
_scalex$6 = -48						; size = 4
_mfd_screen_y_max$ = -44				; size = 4
_mfd_screen_x_max$ = -40				; size = 4
_mfd_screen_y_min$ = -36				; size = 4
_mfd_screen_x_min$ = -32				; size = 4
_mfd_screen_y_org$ = -28				; size = 4
_mfd_screen_x_org$ = -24				; size = 4
_mfd_screen_half_size$ = -20				; size = 4
_mfd_screen_size$ = -16					; size = 4
_texture_index$ = -12					; size = 4
_mfd_texture_screen$ = -8				; size = 4
_mfd_mode$ = -4						; size = 4
_x_org$ = 8						; size = 4
_y_org$ = 12						; size = 4
_size$ = 16						; size = 4
_location$ = 20						; size = 4
?draw_overlaid_blackhawk_mfd@@YGXMMMW4MFD_LOCATIONS@@@Z PROC ; draw_overlaid_blackhawk_mfd, COMDAT

; 9544 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 01 00
	00		 sub	 esp, 388		; 00000184H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 9545 : 	mfd_modes
; 9546 : 		*mfd_mode;
; 9547 : 
; 9548 : 	screen
; 9549 : 		*mfd_texture_screen;
; 9550 : 
; 9551 : 	texture_index_numbers
; 9552 : 		texture_index;
; 9553 : 
; 9554 : 	float
; 9555 : 		mfd_screen_size,
; 9556 : 		mfd_screen_half_size,
; 9557 : 		mfd_screen_x_org,
; 9558 : 		mfd_screen_y_org,
; 9559 : 		mfd_screen_x_min,
; 9560 : 		mfd_screen_y_min,
; 9561 : 		mfd_screen_x_max,
; 9562 : 		mfd_screen_y_max;
; 9563 : 
; 9564 : 	ASSERT ((location == MFD_LOCATION_LHS) || (location == MFD_LOCATION_RHS));

  0000c	83 7d 14 00	 cmp	 DWORD PTR _location$[ebp], 0
  00010	74 1e		 je	 SHORT $LN4@draw_overl
  00012	83 7d 14 01	 cmp	 DWORD PTR _location$[ebp], 1
  00016	74 18		 je	 SHORT $LN4@draw_overl
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_blackhawk_mfd@@YGXMMMW4MFD_LOCATIONS@@@Z@4JA
  0001d	83 c0 14	 add	 eax, 20			; 00000014H
  00020	50		 push	 eax
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@HOBNFLGC@?$CIlocation?5?$DN?$DN?5MFD_LOCATION_LHS?$CJ?5@
  0002b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_overl:

; 9565 : 
; 9566 : 	if (location == MFD_LOCATION_LHS)

  00030	83 7d 14 00	 cmp	 DWORD PTR _location$[ebp], 0
  00034	75 18		 jne	 SHORT $LN5@draw_overl

; 9567 : 	{
; 9568 : 		mfd_mode = &lhs_mfd_mode;

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], OFFSET ?lhs_mfd_mode@@3W4MFD_MODES@@A

; 9569 : 
; 9570 : 		mfd_texture_screen = lhs_overlaid_mfd_texture_screen;

  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lhs_overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  00042	89 45 f8	 mov	 DWORD PTR _mfd_texture_screen$[ebp], eax

; 9571 : 
; 9572 : 		texture_index = LHS_OVERLAID_MFD_TEXTURE_INDEX;

  00045	c7 45 f4 54 06
	00 00		 mov	 DWORD PTR _texture_index$[ebp], 1620 ; 00000654H

; 9573 : 	}
; 9574 : 	else

  0004c	eb 16		 jmp	 SHORT $LN6@draw_overl
$LN5@draw_overl:

; 9575 : 	{
; 9576 : 		mfd_mode = &rhs_mfd_mode;

  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], OFFSET ?rhs_mfd_mode@@3W4MFD_MODES@@A

; 9577 : 
; 9578 : 		mfd_texture_screen = rhs_overlaid_mfd_texture_screen;

  00055	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rhs_overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  0005a	89 45 f8	 mov	 DWORD PTR _mfd_texture_screen$[ebp], eax

; 9579 : 
; 9580 : 		texture_index = RHS_OVERLAID_MFD_TEXTURE_INDEX;

  0005d	c7 45 f4 57 06
	00 00		 mov	 DWORD PTR _texture_index$[ebp], 1623 ; 00000657H
$LN6@draw_overl:

; 9581 : 	}
; 9582 : 
; 9583 : 	if (*mfd_mode == MFD_MODE_OFF)

  00064	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00067	83 38 00	 cmp	 DWORD PTR [eax], 0
  0006a	75 05		 jne	 SHORT $LN7@draw_overl

; 9584 : 	{
; 9585 : 		return;

  0006c	e9 1a 11 00 00	 jmp	 $LN1@draw_overl
$LN7@draw_overl:

; 9586 : 	}
; 9587 : 
; 9588 : 	////////////////////////////////////////
; 9589 : 	//
; 9590 : 	// scale position and size wrt screen resolution
; 9591 : 	//
; 9592 : 	////////////////////////////////////////
; 9593 : 
; 9594 : /*	if (get_global_unscaled_displays ())
; 9595 : 	{
; 9596 : 		float
; 9597 : 			org_offset;
; 9598 : 
; 9599 : 		mfd_screen_size = size;
; 9600 : 
; 9601 : 		mfd_screen_half_size = mfd_screen_size * 0.5;
; 9602 : 
; 9603 : 		mfd_screen_x_org = x_org * full_screen_width * (1.0 / 640.0);
; 9604 : 		mfd_screen_y_org = y_org * full_screen_height * (1.0 / 480.0);
; 9605 : 
; 9606 : 		org_offset = ((size * full_screen_width * (1.0 / 640.0)) - size) * 0.5;
; 9607 : 
; 9608 : 		if (location == MFD_LOCATION_LHS)
; 9609 : 		{
; 9610 : 			mfd_screen_x_org -= org_offset;
; 9611 : 		}
; 9612 : 		else
; 9613 : 		{
; 9614 : 			mfd_screen_x_org += org_offset;
; 9615 : 		}
; 9616 : 
; 9617 : 		mfd_screen_y_org += org_offset;
; 9618 : 
; 9619 : 		mfd_screen_x_min = mfd_screen_x_org - mfd_screen_half_size;
; 9620 : 		mfd_screen_y_min = mfd_screen_y_org - mfd_screen_half_size;
; 9621 : 		mfd_screen_x_max = mfd_screen_x_org + mfd_screen_half_size - 0.001;
; 9622 : 		mfd_screen_y_max = mfd_screen_y_org + mfd_screen_half_size - 0.001;
; 9623 : 	}
; 9624 : 	else*/
; 9625 : 	{
; 9626 : 		float
; 9627 : 			scalex,
; 9628 : 			scaley,
; 9629 : 			org_offset;
; 9630 : 
; 9631 : 		scalex = full_screen_width * (1.0 / 640.0);

  00071	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  00079	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f5999999999999a
  00081	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00085	f3 0f 11 45 d0	 movss	 DWORD PTR _scalex$6[ebp], xmm0

; 9632 : 		scaley = full_screen_height * (1.0 / 480.0);

  0008a	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  00092	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f61111111111111
  0009a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0009e	f3 0f 11 45 cc	 movss	 DWORD PTR _scaley$5[ebp], xmm0

; 9633 : 
; 9634 : 		mfd_screen_size = size * global_mfd_size * scalex;

  000a3	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _size$[ebp]
  000a8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?global_mfd_size@@3MA
  000b0	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _scalex$6[ebp]
  000b5	f3 0f 11 45 f0	 movss	 DWORD PTR _mfd_screen_size$[ebp], xmm0

; 9635 : 		mfd_screen_half_size = mfd_screen_size * 0.5;

  000ba	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _mfd_screen_size$[ebp]
  000bf	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  000c7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000cb	f3 0f 11 45 ec	 movss	 DWORD PTR _mfd_screen_half_size$[ebp], xmm0

; 9636 : 
; 9637 : 		mfd_screen_x_org = x_org * scalex;

  000d0	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_org$[ebp]
  000d5	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _scalex$6[ebp]
  000da	f3 0f 11 45 e8	 movss	 DWORD PTR _mfd_screen_x_org$[ebp], xmm0

; 9638 : 		mfd_screen_y_org = y_org * scaley;

  000df	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_org$[ebp]
  000e4	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _scaley$5[ebp]
  000e9	f3 0f 11 45 e4	 movss	 DWORD PTR _mfd_screen_y_org$[ebp], xmm0

; 9639 : 
; 9640 : 		org_offset = size * scalex * 0.5 - mfd_screen_half_size;

  000ee	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _size$[ebp]
  000f3	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _scalex$6[ebp]
  000f8	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000fc	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00104	f3 0f 5a 4d ec	 cvtss2sd xmm1, DWORD PTR _mfd_screen_half_size$[ebp]
  00109	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0010d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00111	f3 0f 11 45 c8	 movss	 DWORD PTR _org_offset$4[ebp], xmm0

; 9641 : 		mfd_screen_x_org += location == MFD_LOCATION_LHS ? -org_offset : org_offset;

  00116	83 7d 14 00	 cmp	 DWORD PTR _location$[ebp], 0
  0011a	75 16		 jne	 SHORT $LN46@draw_overl
  0011c	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _org_offset$4[ebp]
  00121	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00128	f3 0f 11 85 7c
	fe ff ff	 movss	 DWORD PTR tv93[ebp], xmm0
  00130	eb 0d		 jmp	 SHORT $LN47@draw_overl
$LN46@draw_overl:
  00132	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _org_offset$4[ebp]
  00137	f3 0f 11 85 7c
	fe ff ff	 movss	 DWORD PTR tv93[ebp], xmm0
$LN47@draw_overl:
  0013f	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _mfd_screen_x_org$[ebp]
  00144	f3 0f 58 85 7c
	fe ff ff	 addss	 xmm0, DWORD PTR tv93[ebp]
  0014c	f3 0f 11 45 e8	 movss	 DWORD PTR _mfd_screen_x_org$[ebp], xmm0

; 9642 : 		mfd_screen_y_org += size * scaley * 0.5 - mfd_screen_half_size;

  00151	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _size$[ebp]
  00156	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _scaley$5[ebp]
  0015b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0015f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00167	f3 0f 5a 4d ec	 cvtss2sd xmm1, DWORD PTR _mfd_screen_half_size$[ebp]
  0016c	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00170	f3 0f 5a 4d e4	 cvtss2sd xmm1, DWORD PTR _mfd_screen_y_org$[ebp]
  00175	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00179	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0017d	f3 0f 11 45 e4	 movss	 DWORD PTR _mfd_screen_y_org$[ebp], xmm0

; 9643 : 
; 9644 : 		mfd_screen_x_min = mfd_screen_x_org - mfd_screen_half_size;

  00182	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _mfd_screen_x_org$[ebp]
  00187	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _mfd_screen_half_size$[ebp]
  0018c	f3 0f 11 45 e0	 movss	 DWORD PTR _mfd_screen_x_min$[ebp], xmm0

; 9645 : 		mfd_screen_y_min = mfd_screen_y_org - mfd_screen_half_size;

  00191	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _mfd_screen_y_org$[ebp]
  00196	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _mfd_screen_half_size$[ebp]
  0019b	f3 0f 11 45 dc	 movss	 DWORD PTR _mfd_screen_y_min$[ebp], xmm0

; 9646 : 		mfd_screen_x_max = mfd_screen_x_org + mfd_screen_half_size - 0.001;

  001a0	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _mfd_screen_x_org$[ebp]
  001a5	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _mfd_screen_half_size$[ebp]
  001aa	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001ae	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001b6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001ba	f3 0f 11 45 d8	 movss	 DWORD PTR _mfd_screen_x_max$[ebp], xmm0

; 9647 : 		mfd_screen_y_max = mfd_screen_y_org + mfd_screen_half_size - 0.001;

  001bf	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _mfd_screen_y_org$[ebp]
  001c4	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _mfd_screen_half_size$[ebp]
  001c9	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001cd	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001d5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001d9	f3 0f 11 45 d4	 movss	 DWORD PTR _mfd_screen_y_max$[ebp], xmm0

; 9648 : 	}
; 9649 : 
; 9650 : 	//
; 9651 : 	// translate & scale values (EO 3D display does not match texture)
; 9652 : 	//
; 9653 : 
; 9654 : 	i_translate_3d = mfd_screen_x_min;

  001de	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  001e3	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?i_translate_3d@@3MA, xmm0

; 9655 : 	j_translate_3d = mfd_screen_y_min;

  001eb	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  001f0	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?j_translate_3d@@3MA, xmm0

; 9656 : 
; 9657 : 	i_scale_3d = mfd_texture_size / mfd_screen_size;

  001f8	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_texture_size@@3HA
  00200	f3 0f 5e 45 f0	 divss	 xmm0, DWORD PTR _mfd_screen_size$[ebp]
  00205	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?i_scale_3d@@3MA, xmm0

; 9658 : 	j_scale_3d = mfd_texture_size / mfd_screen_size;

  0020d	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_texture_size@@3HA
  00215	f3 0f 5e 45 f0	 divss	 xmm0, DWORD PTR _mfd_screen_size$[ebp]
  0021a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?j_scale_3d@@3MA, xmm0

; 9659 : 
; 9660 : 	////////////////////////////////////////
; 9661 : 	//
; 9662 : 	// set up MFD 2D environment
; 9663 : 	//
; 9664 : 	////////////////////////////////////////
; 9665 : 
; 9666 : 	set_2d_active_environment (mfd_env);

  00222	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00227	50		 push	 eax
  00228	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 9667 : 
; 9668 : 	//
; 9669 : 	// window
; 9670 : 	//
; 9671 : 
; 9672 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  0022d	51		 push	 ecx
  0022e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  00236	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023b	51		 push	 ecx
  0023c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  00244	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00249	51		 push	 ecx
  0024a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  00252	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00257	51		 push	 ecx
  00258	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  00260	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00265	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0026a	50		 push	 eax
  0026b	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 9673 : 
; 9674 : 	//
; 9675 : 	// viewport
; 9676 : 	//
; 9677 : 
; 9678 : 	if (draw_large_mfd)

  00270	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00277	74 12		 je	 SHORT $LN8@draw_overl

; 9679 : 		mfd_viewport_size = MFD_VIEWPORT_LARGE_SIZE;

  00279	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  00281	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 9680 : 	else

  00289	eb 10		 jmp	 SHORT $LN9@draw_overl
$LN8@draw_overl:

; 9681 : 		mfd_viewport_size = MFD_VIEWPORT_SMALL_SIZE;

  0028b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  00293	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0
$LN9@draw_overl:

; 9682 : 
; 9683 : 	ASSERT (mfd_viewport_size <= mfd_texture_size);

  0029b	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_texture_size@@3HA
  002a3	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  002aa	73 1a		 jae	 SHORT $LN10@draw_overl
  002ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_blackhawk_mfd@@YGXMMMW4MFD_LOCATIONS@@@Z@4JA
  002b1	05 8b 00 00 00	 add	 eax, 139		; 0000008bH
  002b6	50		 push	 eax
  002b7	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  002bc	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@IPIPCLFE@mfd_viewport_size?5?$DM?$DN?5mfd_textur@
  002c1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@draw_overl:

; 9684 : 
; 9685 : 	mfd_viewport_x_org = mfd_viewport_texture_x_org;

  002c6	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_viewport_texture_x_org@@3HA
  002ce	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 9686 : 
; 9687 : 	mfd_viewport_y_org = mfd_viewport_texture_y_org;

  002d6	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_viewport_texture_y_org@@3HA
  002de	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 9688 : 
; 9689 : 	mfd_viewport_x_min = mfd_viewport_x_org - (mfd_viewport_size * 0.5);

  002e6	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  002ee	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  002f6	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  002fe	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00302	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00306	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 9690 : 
; 9691 : 	mfd_viewport_y_min = mfd_viewport_y_org - (mfd_viewport_size * 0.5);

  0030e	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_org@@3MA
  00316	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  0031e	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00326	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0032a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0032e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 9692 : 
; 9693 : 	mfd_viewport_x_max = mfd_viewport_x_org + (mfd_viewport_size * 0.5) - 0.001;

  00336	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  0033e	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00346	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0034e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00352	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0035a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0035e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 9694 : 
; 9695 : 	mfd_viewport_y_max = mfd_viewport_y_org + (mfd_viewport_size * 0.5) - 0.001;

  00366	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_org@@3MA
  0036e	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00376	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0037e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00382	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0038a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0038e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 9696 : 
; 9697 : 	////////////////////////////////////////
; 9698 : 	//
; 9699 : 	// draw MFD display
; 9700 : 	//
; 9701 : 	////////////////////////////////////////
; 9702 : 
; 9703 : 	switch (*mfd_mode)

  00396	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00399	8b 08		 mov	 ecx, DWORD PTR [eax]
  0039b	89 8d 7c fe ff
	ff		 mov	 DWORD PTR tv186[ebp], ecx
  003a1	83 bd 7c fe ff
	ff 0c		 cmp	 DWORD PTR tv186[ebp], 12 ; 0000000cH
  003a8	0f 87 53 0a 00
	00		 ja	 $LN2@draw_overl
  003ae	8b 95 7c fe ff
	ff		 mov	 edx, DWORD PTR tv186[ebp]
  003b4	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN48@draw_overl[edx*4]
$LN11@draw_overl:

; 9704 : 	{
; 9705 : 		////////////////////////////////////////
; 9706 : 		case MFD_MODE_OFF:
; 9707 : 		////////////////////////////////////////
; 9708 : 		{
; 9709 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  003bb	51		 push	 ecx
  003bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  003c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c9	51		 push	 ecx
  003ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  003d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d7	51		 push	 ecx
  003d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  003e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e5	51		 push	 ecx
  003e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  003ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  003f8	50		 push	 eax
  003f9	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9710 : 
; 9711 : 			set_active_screen (mfd_texture_screen);

  003fe	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00401	50		 push	 eax
  00402	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9712 : 
; 9713 : 			if (lock_screen (mfd_texture_screen))

  00407	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0040a	50		 push	 eax
  0040b	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00410	85 c0		 test	 eax, eax
  00412	74 3a		 je	 SHORT $LN12@draw_overl

; 9714 : 			{
; 9715 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00414	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00419	50		 push	 eax
  0041a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00420	83 e9 01	 sub	 ecx, 1
  00423	51		 push	 ecx
  00424	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  0042a	83 ea 01	 sub	 edx, 1
  0042d	52		 push	 edx
  0042e	6a 00		 push	 0
  00430	6a 00		 push	 0
  00432	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9716 : 
; 9717 : 				draw_layout_grid ();

  00437	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9718 : 
; 9719 : 				flush_screen_texture_graphics (mfd_texture_screen);

  0043c	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0043f	50		 push	 eax
  00440	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9720 : 
; 9721 : 				unlock_screen (mfd_texture_screen);

  00445	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00448	50		 push	 eax
  00449	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN12@draw_overl:

; 9722 : 			}
; 9723 : 
; 9724 : 			break;

  0044e	e9 ae 09 00 00	 jmp	 $LN2@draw_overl
$LN13@draw_overl:

; 9725 : 		}
; 9726 : 		////////////////////////////////////////
; 9727 : 		case MFD_MODE_DAMAGED:
; 9728 : 		////////////////////////////////////////
; 9729 : 		{
; 9730 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00453	51		 push	 ecx
  00454	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00459	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0045e	51		 push	 ecx
  0045f	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00464	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00469	51		 push	 ecx
  0046a	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  0046f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00474	51		 push	 ecx
  00475	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  0047a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047f	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 9731 : 
; 9732 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00484	51		 push	 ecx
  00485	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0048d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00492	51		 push	 ecx
  00493	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0049b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a0	51		 push	 ecx
  004a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  004a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ae	51		 push	 ecx
  004af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  004b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  004c1	50		 push	 eax
  004c2	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9733 : 
; 9734 : 			set_active_screen (mfd_texture_screen);

  004c7	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  004ca	50		 push	 eax
  004cb	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9735 : 
; 9736 : 			if (lock_screen (mfd_texture_screen))

  004d0	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  004d3	50		 push	 eax
  004d4	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  004d9	85 c0		 test	 eax, eax
  004db	74 3f		 je	 SHORT $LN14@draw_overl

; 9737 : 			{
; 9738 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  004dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  004e2	50		 push	 eax
  004e3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  004e9	83 e9 01	 sub	 ecx, 1
  004ec	51		 push	 ecx
  004ed	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  004f3	83 ea 01	 sub	 edx, 1
  004f6	52		 push	 edx
  004f7	6a 00		 push	 0
  004f9	6a 00		 push	 0
  004fb	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9739 : 
; 9740 : 				draw_layout_grid ();

  00500	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9741 : 
; 9742 : 				draw_damaged_mfd ();

  00505	e8 00 00 00 00	 call	 ?draw_damaged_mfd@@YGXXZ ; draw_damaged_mfd

; 9743 : 
; 9744 : 				flush_screen_texture_graphics (mfd_texture_screen);

  0050a	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0050d	50		 push	 eax
  0050e	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9745 : 
; 9746 : 				unlock_screen (mfd_texture_screen);

  00513	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00516	50		 push	 eax
  00517	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN14@draw_overl:

; 9747 : 			}
; 9748 : 
; 9749 : 			break;

  0051c	e9 e0 08 00 00	 jmp	 $LN2@draw_overl
$LN15@draw_overl:

; 9750 : 		}
; 9751 : 		////////////////////////////////////////
; 9752 : 		case MFD_MODE_GROUND_RADAR:
; 9753 : 		////////////////////////////////////////
; 9754 : 		{
; 9755 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00521	51		 push	 ecx
  00522	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00527	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0052c	51		 push	 ecx
  0052d	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00532	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00537	51		 push	 ecx
  00538	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  0053d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00542	51		 push	 ecx
  00543	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00548	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0054d	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 9756 : 
; 9757 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00552	51		 push	 ecx
  00553	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0055b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00560	51		 push	 ecx
  00561	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00569	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0056e	51		 push	 ecx
  0056f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00577	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057c	51		 push	 ecx
  0057d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00585	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0058a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0058f	50		 push	 eax
  00590	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9758 : 
; 9759 : 			set_active_screen (mfd_texture_screen);

  00595	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00598	50		 push	 eax
  00599	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9760 : 
; 9761 : 			if (lock_screen (mfd_texture_screen))

  0059e	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  005a1	50		 push	 eax
  005a2	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  005a7	85 c0		 test	 eax, eax
  005a9	74 3f		 je	 SHORT $LN16@draw_overl

; 9762 : 			{
; 9763 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  005ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  005b0	50		 push	 eax
  005b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  005b7	83 e9 01	 sub	 ecx, 1
  005ba	51		 push	 ecx
  005bb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  005c1	83 ea 01	 sub	 edx, 1
  005c4	52		 push	 edx
  005c5	6a 00		 push	 0
  005c7	6a 00		 push	 0
  005c9	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9764 : 
; 9765 : 				draw_layout_grid ();

  005ce	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9766 : 
; 9767 : 				draw_ground_radar_mfd ();

  005d3	e8 00 00 00 00	 call	 ?draw_ground_radar_mfd@@YGXXZ ; draw_ground_radar_mfd

; 9768 : 
; 9769 : 				flush_screen_texture_graphics (mfd_texture_screen);

  005d8	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  005db	50		 push	 eax
  005dc	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9770 : 
; 9771 : 				unlock_screen (mfd_texture_screen);

  005e1	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  005e4	50		 push	 eax
  005e5	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN16@draw_overl:

; 9772 : 			}
; 9773 : 
; 9774 : 			break;

  005ea	e9 12 08 00 00	 jmp	 $LN2@draw_overl
$LN17@draw_overl:

; 9775 : 		}
; 9776 : 		////////////////////////////////////////
; 9777 : 		case MFD_MODE_AIR_RADAR:
; 9778 : 		////////////////////////////////////////
; 9779 : 		{
; 9780 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  005ef	51		 push	 ecx
  005f0	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  005f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005fa	51		 push	 ecx
  005fb	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00600	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00605	51		 push	 ecx
  00606	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  0060b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00610	51		 push	 ecx
  00611	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00616	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0061b	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 9781 : 
; 9782 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00620	51		 push	 ecx
  00621	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00629	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0062e	51		 push	 ecx
  0062f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00637	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063c	51		 push	 ecx
  0063d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00645	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0064a	51		 push	 ecx
  0064b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00653	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00658	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0065d	50		 push	 eax
  0065e	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9783 : 
; 9784 : 			set_active_screen (mfd_texture_screen);

  00663	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00666	50		 push	 eax
  00667	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9785 : 
; 9786 : 			if (lock_screen (mfd_texture_screen))

  0066c	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0066f	50		 push	 eax
  00670	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00675	85 c0		 test	 eax, eax
  00677	74 3f		 je	 SHORT $LN18@draw_overl

; 9787 : 			{
; 9788 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00679	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0067e	50		 push	 eax
  0067f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00685	83 e9 01	 sub	 ecx, 1
  00688	51		 push	 ecx
  00689	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  0068f	83 ea 01	 sub	 edx, 1
  00692	52		 push	 edx
  00693	6a 00		 push	 0
  00695	6a 00		 push	 0
  00697	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9789 : 
; 9790 : 				draw_layout_grid ();

  0069c	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9791 : 
; 9792 : 				draw_air_radar_mfd ();

  006a1	e8 00 00 00 00	 call	 ?draw_air_radar_mfd@@YGXXZ ; draw_air_radar_mfd

; 9793 : 
; 9794 : 				flush_screen_texture_graphics (mfd_texture_screen);

  006a6	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  006a9	50		 push	 eax
  006aa	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9795 : 
; 9796 : 				unlock_screen (mfd_texture_screen);

  006af	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  006b2	50		 push	 eax
  006b3	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN18@draw_overl:

; 9797 : 			}
; 9798 : 
; 9799 : 			break;

  006b8	e9 44 07 00 00	 jmp	 $LN2@draw_overl
$LN19@draw_overl:

; 9800 : 		}
; 9801 : 		////////////////////////////////////////
; 9802 : 		case MFD_MODE_FLIR:
; 9803 : 		////////////////////////////////////////
; 9804 : 		{
; 9805 : 			if (!blackhawk_damage.flir)

  006bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  006c2	c1 e8 02	 shr	 eax, 2
  006c5	83 e0 01	 and	 eax, 1
  006c8	75 2f		 jne	 SHORT $LN20@draw_overl

; 9806 : 			{
; 9807 : 				draw_overlaid_3d_eo_display (&blackhawk_flir, TARGET_ACQUISITION_SYSTEM_FLIR, mfd_screen_x_min, mfd_screen_y_min, mfd_screen_size);

  006ca	51		 push	 ecx
  006cb	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _mfd_screen_size$[ebp]
  006d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d5	51		 push	 ecx
  006d6	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  006db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006e0	51		 push	 ecx
  006e1	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  006e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006eb	6a 03		 push	 3
  006ed	68 00 00 00 00	 push	 OFFSET ?blackhawk_flir@@3UEO_PARAMS@@A ; blackhawk_flir
  006f2	e8 00 00 00 00	 call	 ?draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z ; draw_overlaid_3d_eo_display

; 9808 : 			}
; 9809 : 			else

  006f7	eb 31		 jmp	 SHORT $LN21@draw_overl
$LN20@draw_overl:

; 9810 : 			{
; 9811 : 				draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  006f9	51		 push	 ecx
  006fa	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  006ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00704	51		 push	 ecx
  00705	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  0070a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0070f	51		 push	 ecx
  00710	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00715	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0071a	51		 push	 ecx
  0071b	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00720	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00725	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background
$LN21@draw_overl:

; 9812 : 			}
; 9813 : 
; 9814 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  0072a	51		 push	 ecx
  0072b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00733	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00738	51		 push	 ecx
  00739	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00741	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00746	51		 push	 ecx
  00747	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0074f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00754	51		 push	 ecx
  00755	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0075d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00762	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00767	50		 push	 eax
  00768	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9815 : 
; 9816 : 			set_active_screen (mfd_texture_screen);

  0076d	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00770	50		 push	 eax
  00771	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9817 : 
; 9818 : 			if (lock_screen (mfd_texture_screen))

  00776	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00779	50		 push	 eax
  0077a	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0077f	85 c0		 test	 eax, eax
  00781	74 43		 je	 SHORT $LN22@draw_overl

; 9819 : 			{
; 9820 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00783	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00788	50		 push	 eax
  00789	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  0078f	83 e9 01	 sub	 ecx, 1
  00792	51		 push	 ecx
  00793	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00799	83 ea 01	 sub	 edx, 1
  0079c	52		 push	 edx
  0079d	6a 00		 push	 0
  0079f	6a 00		 push	 0
  007a1	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9821 : 
; 9822 : 				draw_layout_grid ();

  007a6	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9823 : 
; 9824 : 				draw_2d_flir_mfd (TRUE, TRUE);

  007ab	6a 01		 push	 1
  007ad	6a 01		 push	 1
  007af	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXHH@Z ; draw_2d_flir_mfd

; 9825 : 
; 9826 : 				flush_screen_texture_graphics (mfd_texture_screen);

  007b4	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  007b7	50		 push	 eax
  007b8	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9827 : 
; 9828 : 				unlock_screen (mfd_texture_screen);

  007bd	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  007c0	50		 push	 eax
  007c1	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN22@draw_overl:

; 9829 : 			}
; 9830 : 
; 9831 : 			set_pilots_full_screen_params (FALSE);

  007c6	6a 00		 push	 0
  007c8	e8 00 00 00 00	 call	 ?set_pilots_full_screen_params@@YGXH@Z ; set_pilots_full_screen_params

; 9832 : 
; 9833 : 			break;

  007cd	e9 2f 06 00 00	 jmp	 $LN2@draw_overl
$LN23@draw_overl:

; 9834 : 		}
; 9835 : 		////////////////////////////////////////
; 9836 : 		case MFD_MODE_DTV:
; 9837 : 		////////////////////////////////////////
; 9838 : 		{
; 9839 : 			if (!blackhawk_damage.dtv)

  007d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  007d7	c1 e8 03	 shr	 eax, 3
  007da	83 e0 01	 and	 eax, 1
  007dd	75 2f		 jne	 SHORT $LN24@draw_overl

; 9840 : 			{
; 9841 : 				draw_overlaid_3d_eo_display (&blackhawk_dtv, TARGET_ACQUISITION_SYSTEM_DTV, mfd_screen_x_min, mfd_screen_y_min, mfd_screen_size);

  007df	51		 push	 ecx
  007e0	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _mfd_screen_size$[ebp]
  007e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ea	51		 push	 ecx
  007eb	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  007f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f5	51		 push	 ecx
  007f6	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  007fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00800	6a 04		 push	 4
  00802	68 00 00 00 00	 push	 OFFSET ?blackhawk_dtv@@3UEO_PARAMS@@A ; blackhawk_dtv
  00807	e8 00 00 00 00	 call	 ?draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z ; draw_overlaid_3d_eo_display

; 9842 : 			}
; 9843 : 			else

  0080c	eb 31		 jmp	 SHORT $LN25@draw_overl
$LN24@draw_overl:

; 9844 : 			{
; 9845 : 				draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  0080e	51		 push	 ecx
  0080f	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00814	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00819	51		 push	 ecx
  0081a	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  0081f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00824	51		 push	 ecx
  00825	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  0082a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0082f	51		 push	 ecx
  00830	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00835	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0083a	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background
$LN25@draw_overl:

; 9846 : 			}
; 9847 : 
; 9848 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  0083f	51		 push	 ecx
  00840	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00848	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0084d	51		 push	 ecx
  0084e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00856	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0085b	51		 push	 ecx
  0085c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00864	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00869	51		 push	 ecx
  0086a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00872	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00877	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0087c	50		 push	 eax
  0087d	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9849 : 
; 9850 : 			set_active_screen (mfd_texture_screen);

  00882	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00885	50		 push	 eax
  00886	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9851 : 
; 9852 : 			if (lock_screen (mfd_texture_screen))

  0088b	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0088e	50		 push	 eax
  0088f	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00894	85 c0		 test	 eax, eax
  00896	74 43		 je	 SHORT $LN26@draw_overl

; 9853 : 			{
; 9854 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00898	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0089d	50		 push	 eax
  0089e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  008a4	83 e9 01	 sub	 ecx, 1
  008a7	51		 push	 ecx
  008a8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  008ae	83 ea 01	 sub	 edx, 1
  008b1	52		 push	 edx
  008b2	6a 00		 push	 0
  008b4	6a 00		 push	 0
  008b6	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9855 : 
; 9856 : 				draw_layout_grid ();

  008bb	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9857 : 
; 9858 : 				draw_2d_dtv_mfd (TRUE, TRUE);

  008c0	6a 01		 push	 1
  008c2	6a 01		 push	 1
  008c4	e8 00 00 00 00	 call	 ?draw_2d_dtv_mfd@@YGXHH@Z ; draw_2d_dtv_mfd

; 9859 : 
; 9860 : 				flush_screen_texture_graphics (mfd_texture_screen);

  008c9	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  008cc	50		 push	 eax
  008cd	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9861 : 
; 9862 : 				unlock_screen (mfd_texture_screen);

  008d2	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  008d5	50		 push	 eax
  008d6	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN26@draw_overl:

; 9863 : 			}
; 9864 : 
; 9865 : 			set_pilots_full_screen_params (FALSE);

  008db	6a 00		 push	 0
  008dd	e8 00 00 00 00	 call	 ?set_pilots_full_screen_params@@YGXH@Z ; set_pilots_full_screen_params

; 9866 : 
; 9867 : 			break;

  008e2	e9 1a 05 00 00	 jmp	 $LN2@draw_overl
$LN27@draw_overl:

; 9868 : 		}
; 9869 : 		////////////////////////////////////////
; 9870 : 		case MFD_MODE_DVO:
; 9871 : 		////////////////////////////////////////
; 9872 : 		{
; 9873 : 			if (!blackhawk_damage.dvo)

  008e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  008ec	c1 e8 04	 shr	 eax, 4
  008ef	83 e0 01	 and	 eax, 1
  008f2	75 2f		 jne	 SHORT $LN28@draw_overl

; 9874 : 			{
; 9875 : 				draw_overlaid_3d_eo_display (&blackhawk_dvo, TARGET_ACQUISITION_SYSTEM_DVO, mfd_screen_x_min, mfd_screen_y_min, mfd_screen_size);

  008f4	51		 push	 ecx
  008f5	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _mfd_screen_size$[ebp]
  008fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ff	51		 push	 ecx
  00900	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00905	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0090a	51		 push	 ecx
  0090b	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00910	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00915	6a 05		 push	 5
  00917	68 00 00 00 00	 push	 OFFSET ?blackhawk_dvo@@3UEO_PARAMS@@A ; blackhawk_dvo
  0091c	e8 00 00 00 00	 call	 ?draw_overlaid_3d_eo_display@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@MMM@Z ; draw_overlaid_3d_eo_display

; 9876 : 			}
; 9877 : 			else

  00921	eb 31		 jmp	 SHORT $LN29@draw_overl
$LN28@draw_overl:

; 9878 : 			{
; 9879 : 				draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00923	51		 push	 ecx
  00924	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00929	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0092e	51		 push	 ecx
  0092f	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00934	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00939	51		 push	 ecx
  0093a	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  0093f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00944	51		 push	 ecx
  00945	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  0094a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0094f	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background
$LN29@draw_overl:

; 9880 : 			}
; 9881 : 
; 9882 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00954	51		 push	 ecx
  00955	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0095d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00962	51		 push	 ecx
  00963	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0096b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00970	51		 push	 ecx
  00971	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00979	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0097e	51		 push	 ecx
  0097f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00987	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0098c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00991	50		 push	 eax
  00992	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9883 : 
; 9884 : 			set_active_screen (mfd_texture_screen);

  00997	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0099a	50		 push	 eax
  0099b	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9885 : 
; 9886 : 			if (lock_screen (mfd_texture_screen))

  009a0	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  009a3	50		 push	 eax
  009a4	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  009a9	85 c0		 test	 eax, eax
  009ab	74 43		 je	 SHORT $LN30@draw_overl

; 9887 : 			{
; 9888 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  009ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  009b2	50		 push	 eax
  009b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  009b9	83 e9 01	 sub	 ecx, 1
  009bc	51		 push	 ecx
  009bd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  009c3	83 ea 01	 sub	 edx, 1
  009c6	52		 push	 edx
  009c7	6a 00		 push	 0
  009c9	6a 00		 push	 0
  009cb	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9889 : 
; 9890 : 				draw_layout_grid ();

  009d0	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9891 : 
; 9892 : 				draw_2d_dvo_mfd (TRUE, TRUE);

  009d5	6a 01		 push	 1
  009d7	6a 01		 push	 1
  009d9	e8 00 00 00 00	 call	 ?draw_2d_dvo_mfd@@YGXHH@Z ; draw_2d_dvo_mfd

; 9893 : 
; 9894 : 				flush_screen_texture_graphics (mfd_texture_screen);

  009de	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  009e1	50		 push	 eax
  009e2	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9895 : 
; 9896 : 				unlock_screen (mfd_texture_screen);

  009e7	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  009ea	50		 push	 eax
  009eb	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN30@draw_overl:

; 9897 : 			}
; 9898 : 
; 9899 : 			set_pilots_full_screen_params (FALSE);

  009f0	6a 00		 push	 0
  009f2	e8 00 00 00 00	 call	 ?set_pilots_full_screen_params@@YGXH@Z ; set_pilots_full_screen_params

; 9900 : 
; 9901 : 			break;

  009f7	e9 05 04 00 00	 jmp	 $LN2@draw_overl
$LN31@draw_overl:

; 9902 : 		}
; 9903 : 		////////////////////////////////////////
; 9904 : 		case MFD_MODE_TSD:
; 9905 : 		////////////////////////////////////////
; 9906 : 		{
; 9907 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  009fc	51		 push	 ecx
  009fd	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00a02	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a07	51		 push	 ecx
  00a08	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00a0d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a12	51		 push	 ecx
  00a13	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00a18	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a1d	51		 push	 ecx
  00a1e	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00a23	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a28	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 9908 : 
; 9909 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00a2d	51		 push	 ecx
  00a2e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00a36	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a3b	51		 push	 ecx
  00a3c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00a44	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a49	51		 push	 ecx
  00a4a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00a52	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a57	51		 push	 ecx
  00a58	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00a60	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a65	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a6a	50		 push	 eax
  00a6b	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9910 : 
; 9911 : 			set_active_screen (mfd_texture_screen);

  00a70	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00a73	50		 push	 eax
  00a74	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9912 : 
; 9913 : 			if (lock_screen (mfd_texture_screen))

  00a79	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00a7c	50		 push	 eax
  00a7d	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00a82	85 c0		 test	 eax, eax
  00a84	74 3f		 je	 SHORT $LN32@draw_overl

; 9914 : 			{
; 9915 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00a86	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00a8b	50		 push	 eax
  00a8c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00a92	83 e9 01	 sub	 ecx, 1
  00a95	51		 push	 ecx
  00a96	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00a9c	83 ea 01	 sub	 edx, 1
  00a9f	52		 push	 edx
  00aa0	6a 00		 push	 0
  00aa2	6a 00		 push	 0
  00aa4	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9916 : 
; 9917 : 				draw_layout_grid ();

  00aa9	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9918 : 
; 9919 : 				draw_tactical_situation_display_mfd ();

  00aae	e8 00 00 00 00	 call	 ?draw_tactical_situation_display_mfd@@YGXXZ ; draw_tactical_situation_display_mfd

; 9920 : 
; 9921 : 				flush_screen_texture_graphics (mfd_texture_screen);

  00ab3	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00ab6	50		 push	 eax
  00ab7	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9922 : 
; 9923 : 				unlock_screen (mfd_texture_screen);

  00abc	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00abf	50		 push	 eax
  00ac0	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN32@draw_overl:

; 9924 : 			}
; 9925 : 
; 9926 : 			break;

  00ac5	e9 37 03 00 00	 jmp	 $LN2@draw_overl
$LN33@draw_overl:

; 9927 : 		}
; 9928 : 		////////////////////////////////////////
; 9929 : 		case MFD_MODE_ASE:
; 9930 : 		////////////////////////////////////////
; 9931 : 		{
; 9932 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00aca	51		 push	 ecx
  00acb	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00ad0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ad5	51		 push	 ecx
  00ad6	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00adb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ae0	51		 push	 ecx
  00ae1	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00ae6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aeb	51		 push	 ecx
  00aec	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00af1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00af6	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 9933 : 
; 9934 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00afb	51		 push	 ecx
  00afc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00b04	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b09	51		 push	 ecx
  00b0a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00b12	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b17	51		 push	 ecx
  00b18	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00b20	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b25	51		 push	 ecx
  00b26	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00b2e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b33	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00b38	50		 push	 eax
  00b39	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9935 : 
; 9936 : 			set_active_screen (mfd_texture_screen);

  00b3e	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00b41	50		 push	 eax
  00b42	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9937 : 
; 9938 : 			if (lock_screen (mfd_texture_screen))

  00b47	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00b4a	50		 push	 eax
  00b4b	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00b50	85 c0		 test	 eax, eax
  00b52	74 3f		 je	 SHORT $LN34@draw_overl

; 9939 : 			{
; 9940 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00b54	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00b59	50		 push	 eax
  00b5a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00b60	83 e9 01	 sub	 ecx, 1
  00b63	51		 push	 ecx
  00b64	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00b6a	83 ea 01	 sub	 edx, 1
  00b6d	52		 push	 edx
  00b6e	6a 00		 push	 0
  00b70	6a 00		 push	 0
  00b72	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9941 : 
; 9942 : 				draw_layout_grid ();

  00b77	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9943 : 
; 9944 : 				draw_aircraft_survivability_equipment_display_mfd ();

  00b7c	e8 00 00 00 00	 call	 ?draw_aircraft_survivability_equipment_display_mfd@@YGXXZ ; draw_aircraft_survivability_equipment_display_mfd

; 9945 : 
; 9946 : 				flush_screen_texture_graphics (mfd_texture_screen);

  00b81	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00b84	50		 push	 eax
  00b85	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9947 : 
; 9948 : 				unlock_screen (mfd_texture_screen);

  00b8a	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00b8d	50		 push	 eax
  00b8e	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN34@draw_overl:

; 9949 : 			}
; 9950 : 
; 9951 : 			break;

  00b93	e9 69 02 00 00	 jmp	 $LN2@draw_overl
$LN35@draw_overl:

; 9952 : 		}
; 9953 : 		////////////////////////////////////////
; 9954 : 		case MFD_MODE_WEAPON:
; 9955 : 		////////////////////////////////////////
; 9956 : 		{
; 9957 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00b98	51		 push	 ecx
  00b99	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00b9e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ba3	51		 push	 ecx
  00ba4	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00ba9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bae	51		 push	 ecx
  00baf	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00bb4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bb9	51		 push	 ecx
  00bba	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00bbf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bc4	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 9958 : 
; 9959 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00bc9	51		 push	 ecx
  00bca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00bd2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bd7	51		 push	 ecx
  00bd8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00be0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00be5	51		 push	 ecx
  00be6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00bee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bf3	51		 push	 ecx
  00bf4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00bfc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c01	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00c06	50		 push	 eax
  00c07	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9960 : 
; 9961 : 			set_active_screen (mfd_texture_screen);

  00c0c	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00c0f	50		 push	 eax
  00c10	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9962 : 
; 9963 : 			if (lock_screen (mfd_texture_screen))

  00c15	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00c18	50		 push	 eax
  00c19	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00c1e	85 c0		 test	 eax, eax
  00c20	74 43		 je	 SHORT $LN36@draw_overl

; 9964 : 			{
; 9965 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00c22	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00c27	50		 push	 eax
  00c28	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00c2e	83 e9 01	 sub	 ecx, 1
  00c31	51		 push	 ecx
  00c32	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00c38	83 ea 01	 sub	 edx, 1
  00c3b	52		 push	 edx
  00c3c	6a 00		 push	 0
  00c3e	6a 00		 push	 0
  00c40	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9966 : 
; 9967 : 				draw_layout_grid ();

  00c45	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9968 : 
; 9969 : 				draw_weapon_display_mfd (MFD_LOCATION_DONT_CARE, TRUE);

  00c4a	6a 01		 push	 1
  00c4c	6a ff		 push	 -1
  00c4e	e8 00 00 00 00	 call	 ?draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z ; draw_weapon_display_mfd

; 9970 : 
; 9971 : 				flush_screen_texture_graphics (mfd_texture_screen);

  00c53	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00c56	50		 push	 eax
  00c57	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9972 : 
; 9973 : 				unlock_screen (mfd_texture_screen);

  00c5c	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00c5f	50		 push	 eax
  00c60	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN36@draw_overl:

; 9974 : 			}
; 9975 : 
; 9976 : 			break;

  00c65	e9 97 01 00 00	 jmp	 $LN2@draw_overl
$LN37@draw_overl:

; 9977 : 		}
; 9978 : 		////////////////////////////////////////
; 9979 : 		case MFD_MODE_SYSTEM:
; 9980 : 		////////////////////////////////////////
; 9981 : 		{
; 9982 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00c6a	51		 push	 ecx
  00c6b	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00c70	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c75	51		 push	 ecx
  00c76	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00c7b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c80	51		 push	 ecx
  00c81	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00c86	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c8b	51		 push	 ecx
  00c8c	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00c91	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c96	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 9983 : 
; 9984 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00c9b	51		 push	 ecx
  00c9c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00ca4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ca9	51		 push	 ecx
  00caa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00cb2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cb7	51		 push	 ecx
  00cb8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00cc0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cc5	51		 push	 ecx
  00cc6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00cce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cd3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00cd8	50		 push	 eax
  00cd9	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9985 : 
; 9986 : 			set_active_screen (mfd_texture_screen);

  00cde	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00ce1	50		 push	 eax
  00ce2	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9987 : 
; 9988 : 			if (lock_screen (mfd_texture_screen))

  00ce7	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00cea	50		 push	 eax
  00ceb	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00cf0	85 c0		 test	 eax, eax
  00cf2	74 3f		 je	 SHORT $LN38@draw_overl

; 9989 : 			{
; 9990 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00cf4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00cf9	50		 push	 eax
  00cfa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00d00	83 e9 01	 sub	 ecx, 1
  00d03	51		 push	 ecx
  00d04	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00d0a	83 ea 01	 sub	 edx, 1
  00d0d	52		 push	 edx
  00d0e	6a 00		 push	 0
  00d10	6a 00		 push	 0
  00d12	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9991 : 
; 9992 : 				draw_layout_grid ();

  00d17	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9993 : 
; 9994 : 				draw_system_display_mfd ();

  00d1c	e8 00 00 00 00	 call	 ?draw_system_display_mfd@@YGXXZ ; draw_system_display_mfd

; 9995 : 
; 9996 : 				flush_screen_texture_graphics (mfd_texture_screen);

  00d21	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00d24	50		 push	 eax
  00d25	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9997 : 
; 9998 : 				unlock_screen (mfd_texture_screen);

  00d2a	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00d2d	50		 push	 eax
  00d2e	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN38@draw_overl:

; 9999 : 			}
; 10000: 
; 10001: 			break;

  00d33	e9 c9 00 00 00	 jmp	 $LN2@draw_overl
$LN39@draw_overl:

; 10002: 		}
; 10003: 		////////////////////////////////////////
; 10004: 		case MFD_MODE_ENGINE:
; 10005: 		////////////////////////////////////////
; 10006: 		{
; 10007: 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00d38	51		 push	 ecx
  00d39	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00d3e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d43	51		 push	 ecx
  00d44	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00d49	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d4e	51		 push	 ecx
  00d4f	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00d54	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d59	51		 push	 ecx
  00d5a	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00d5f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d64	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 10008: 
; 10009: 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00d69	51		 push	 ecx
  00d6a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00d72	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d77	51		 push	 ecx
  00d78	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00d80	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d85	51		 push	 ecx
  00d86	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00d8e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d93	51		 push	 ecx
  00d94	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00d9c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00da1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00da6	50		 push	 eax
  00da7	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 10010: 
; 10011: 			set_active_screen (mfd_texture_screen);

  00dac	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00daf	50		 push	 eax
  00db0	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 10012: 
; 10013: 			if (lock_screen (mfd_texture_screen))

  00db5	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00db8	50		 push	 eax
  00db9	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00dbe	85 c0		 test	 eax, eax
  00dc0	74 3f		 je	 SHORT $LN40@draw_overl

; 10014: 			{
; 10015: 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00dc2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00dc7	50		 push	 eax
  00dc8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00dce	83 e9 01	 sub	 ecx, 1
  00dd1	51		 push	 ecx
  00dd2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00dd8	83 ea 01	 sub	 edx, 1
  00ddb	52		 push	 edx
  00ddc	6a 00		 push	 0
  00dde	6a 00		 push	 0
  00de0	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 10016: 
; 10017: 				draw_layout_grid ();

  00de5	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 10018: 
; 10019: 				draw_engine_display_mfd ();

  00dea	e8 00 00 00 00	 call	 ?draw_engine_display_mfd@@YGXXZ ; draw_engine_display_mfd

; 10020: 
; 10021: 				flush_screen_texture_graphics (mfd_texture_screen);

  00def	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00df2	50		 push	 eax
  00df3	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 10022: 
; 10023: 				unlock_screen (mfd_texture_screen);

  00df8	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00dfb	50		 push	 eax
  00dfc	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN40@draw_overl:
$LN2@draw_overl:

; 10024: 			}
; 10025: 
; 10026: 			break;
; 10027: 		}
; 10028: 	}
; 10029: 
; 10030: 	set_active_screen (video_screen);

  00e01	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00e06	50		 push	 eax
  00e07	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 10031: 
; 10032: 	////////////////////////////////////////
; 10033: 	//
; 10034: 	// render MFD to screen
; 10035: 	//
; 10036: 	////////////////////////////////////////
; 10037: 	{
; 10038: 		vertex
; 10039: 			quad[4];
; 10040: 
; 10041: 		real_colour
; 10042: 			colour,
; 10043: 			specular;
; 10044: 
; 10045: 		set_3d_active_environment (main_3d_env);

  00e0c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  00e11	50		 push	 eax
  00e12	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 10046: 
; 10047: 		if (begin_3d_scene ())

  00e17	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  00e1c	85 c0		 test	 eax, eax
  00e1e	0f 84 67 03 00
	00		 je	 $LN41@draw_overl

; 10048: 		{
; 10049: 			set_d3d_transparency_on ();

  00e24	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 10050: 
; 10051: 			set_d3d_zbuffer_comparison (FALSE);

  00e29	6a 00		 push	 0
  00e2b	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 10052: 
; 10053: 			set_d3d_culling (FALSE);

  00e30	6a 00		 push	 0
  00e32	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 10054: 
; 10055: 			set_d3d_texture_wrapping (0, FALSE);

  00e37	6a 00		 push	 0
  00e39	6a 00		 push	 0
  00e3b	e8 00 00 00 00	 call	 ?set_d3d_texture_wrapping@@YGXHH@Z ; set_d3d_texture_wrapping

; 10056: 
; 10057: 			if ((application_video_width == 640) || (get_global_unscaled_displays ()))

  00e40	81 3d 00 00 00
	00 80 02 00 00	 cmp	 DWORD PTR ?application_video_width@@3HA, 640 ; application_video_width, 00000280H
  00e4a	74 09		 je	 SHORT $LN44@draw_overl
  00e4c	83 3d 74 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+884, 0
  00e53	74 17		 je	 SHORT $LN42@draw_overl
$LN44@draw_overl:

; 10058: 			{
; 10059: 				set_d3d_texture_mag_filtering (FALSE);

  00e55	6a 00		 push	 0
  00e57	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 10060: 				set_d3d_texture_min_filtering (FALSE);

  00e5c	6a 00		 push	 0
  00e5e	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 10061: 				set_d3d_texture_mip_filtering (FALSE);

  00e63	6a 00		 push	 0
  00e65	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering

; 10062: 			}
; 10063: 			else

  00e6a	eb 15		 jmp	 SHORT $LN43@draw_overl
$LN42@draw_overl:

; 10064: 			{
; 10065: 				set_d3d_texture_mag_filtering (TRUE);

  00e6c	6a 01		 push	 1
  00e6e	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 10066: 				set_d3d_texture_min_filtering (TRUE);

  00e73	6a 01		 push	 1
  00e75	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 10067: 				set_d3d_texture_mip_filtering (FALSE);

  00e7a	6a 00		 push	 0
  00e7c	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering
$LN43@draw_overl:

; 10068: 			}
; 10069: 
; 10070: 			set_d3d_flat_shaded_textured_renderstate (get_system_texture_ptr (texture_index));

  00e81	8b 45 f4	 mov	 eax, DWORD PTR _texture_index$[ebp]
  00e84	50		 push	 eax
  00e85	e8 00 00 00 00	 call	 ?get_system_texture_ptr@@YGPAUSCREEN@@H@Z ; get_system_texture_ptr
  00e8a	50		 push	 eax
  00e8b	e8 00 00 00 00	 call	 ?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z ; set_d3d_flat_shaded_textured_renderstate

; 10071: 
; 10072: 			////////////////////////////////////////
; 10073: 			//
; 10074: 
; 10075: 			colour.red	 			= 255;

  00e90	c6 85 c6 fe ff
	ff ff		 mov	 BYTE PTR _colour$2[ebp+2], 255 ; 000000ffH

; 10076: 			colour.green			= 255;

  00e97	c6 85 c5 fe ff
	ff ff		 mov	 BYTE PTR _colour$2[ebp+1], 255 ; 000000ffH

; 10077: 			colour.blue	 			= 255;

  00e9e	c6 85 c4 fe ff
	ff ff		 mov	 BYTE PTR _colour$2[ebp], 255 ; 000000ffH

; 10078: 			colour.alpha  			= 255;

  00ea5	c6 85 c7 fe ff
	ff ff		 mov	 BYTE PTR _colour$2[ebp+3], 255 ; 000000ffH

; 10079: 
; 10080: 			specular.red 			= 0;

  00eac	c6 85 c2 fe ff
	ff 00		 mov	 BYTE PTR _specular$1[ebp+2], 0

; 10081: 			specular.green	 		= 0;

  00eb3	c6 85 c1 fe ff
	ff 00		 mov	 BYTE PTR _specular$1[ebp+1], 0

; 10082: 			specular.blue 			= 0;

  00eba	c6 85 c0 fe ff
	ff 00		 mov	 BYTE PTR _specular$1[ebp], 0

; 10083: 			specular.alpha	  		= 255;

  00ec1	c6 85 c3 fe ff
	ff ff		 mov	 BYTE PTR _specular$1[ebp+3], 255 ; 000000ffH

; 10084: 
; 10085: 			quad[0].i 				= mfd_screen_x_min;

  00ec8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00ecd	6b c8 00	 imul	 ecx, eax, 0
  00ed0	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  00ed5	f3 0f 11 84 0d
	d8 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+16], xmm0

; 10086: 			quad[0].j  				= mfd_screen_y_min;

  00ede	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00ee3	6b c8 00	 imul	 ecx, eax, 0
  00ee6	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00eeb	f3 0f 11 84 0d
	dc fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+20], xmm0

; 10087: 			quad[0].z  				= 0.5;

  00ef4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00ef9	6b c8 00	 imul	 ecx, eax, 0
  00efc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00f04	f3 0f 11 84 0d
	d0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+8], xmm0

; 10088: 			quad[0].q  				= 0.5;

  00f0d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f12	6b c8 00	 imul	 ecx, eax, 0
  00f15	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00f1d	f3 0f 11 84 0d
	d4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+12], xmm0

; 10089: 			quad[0].u  				= 0.0;

  00f26	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f2b	6b c8 00	 imul	 ecx, eax, 0
  00f2e	0f 57 c0	 xorps	 xmm0, xmm0
  00f31	f3 0f 11 84 0d
	e0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+24], xmm0

; 10090: 			quad[0].v				= 0.0;

  00f3a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f3f	6b c8 00	 imul	 ecx, eax, 0
  00f42	0f 57 c0	 xorps	 xmm0, xmm0
  00f45	f3 0f 11 84 0d
	e4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+28], xmm0

; 10091: 
; 10092: 			quad[1].i  				= mfd_screen_x_max;

  00f4e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f53	c1 e0 00	 shl	 eax, 0
  00f56	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00f5b	f3 0f 11 84 05
	d8 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+16], xmm0

; 10093: 			quad[1].j  				= mfd_screen_y_min;

  00f64	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f69	c1 e0 00	 shl	 eax, 0
  00f6c	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _mfd_screen_y_min$[ebp]
  00f71	f3 0f 11 84 05
	dc fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+20], xmm0

; 10094: 			quad[1].z  				= 0.5;

  00f7a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f7f	c1 e0 00	 shl	 eax, 0
  00f82	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00f8a	f3 0f 11 84 05
	d0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+8], xmm0

; 10095: 			quad[1].q  				= 0.5;

  00f93	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f98	c1 e0 00	 shl	 eax, 0
  00f9b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00fa3	f3 0f 11 84 05
	d4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+12], xmm0

; 10096: 			quad[1].u  				= 1.0;

  00fac	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00fb1	c1 e0 00	 shl	 eax, 0
  00fb4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00fbc	f3 0f 11 84 05
	e0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+24], xmm0

; 10097: 			quad[1].v  				= 0.0;

  00fc5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00fca	c1 e0 00	 shl	 eax, 0
  00fcd	0f 57 c0	 xorps	 xmm0, xmm0
  00fd0	f3 0f 11 84 05
	e4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+28], xmm0

; 10098: 
; 10099: 			quad[2].i				= mfd_screen_x_max;

  00fd9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00fde	d1 e0		 shl	 eax, 1
  00fe0	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _mfd_screen_x_max$[ebp]
  00fe5	f3 0f 11 84 05
	d8 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+16], xmm0

; 10100: 			quad[2].j  				= mfd_screen_y_max;

  00fee	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00ff3	d1 e0		 shl	 eax, 1
  00ff5	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  00ffa	f3 0f 11 84 05
	dc fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+20], xmm0

; 10101: 			quad[2].z  				= 0.5;

  01003	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01008	d1 e0		 shl	 eax, 1
  0100a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  01012	f3 0f 11 84 05
	d0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+8], xmm0

; 10102: 			quad[2].q  				= 0.5;

  0101b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01020	d1 e0		 shl	 eax, 1
  01022	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0102a	f3 0f 11 84 05
	d4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+12], xmm0

; 10103: 			quad[2].u  				= 1.0;

  01033	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01038	d1 e0		 shl	 eax, 1
  0103a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01042	f3 0f 11 84 05
	e0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+24], xmm0

; 10104: 			quad[2].v  				= 1.0;

  0104b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01050	d1 e0		 shl	 eax, 1
  01052	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0105a	f3 0f 11 84 05
	e4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+eax+28], xmm0

; 10105: 
; 10106: 			quad[3].i  				= mfd_screen_x_min;

  01063	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01068	6b c8 03	 imul	 ecx, eax, 3
  0106b	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mfd_screen_x_min$[ebp]
  01070	f3 0f 11 84 0d
	d8 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+16], xmm0

; 10107: 			quad[3].j  				= mfd_screen_y_max;

  01079	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0107e	6b c8 03	 imul	 ecx, eax, 3
  01081	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _mfd_screen_y_max$[ebp]
  01086	f3 0f 11 84 0d
	dc fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+20], xmm0

; 10108: 			quad[3].z  				= 0.5;

  0108f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01094	6b c8 03	 imul	 ecx, eax, 3
  01097	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0109f	f3 0f 11 84 0d
	d0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+8], xmm0

; 10109: 			quad[3].q  				= 0.5;

  010a8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  010ad	6b c8 03	 imul	 ecx, eax, 3
  010b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  010b8	f3 0f 11 84 0d
	d4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+12], xmm0

; 10110: 			quad[3].u				= 0.0;

  010c1	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  010c6	6b c8 03	 imul	 ecx, eax, 3
  010c9	0f 57 c0	 xorps	 xmm0, xmm0
  010cc	f3 0f 11 84 0d
	e0 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+24], xmm0

; 10111: 			quad[3].v				= 1.0;

  010d5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  010da	6b c8 03	 imul	 ecx, eax, 3
  010dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  010e5	f3 0f 11 84 0d
	e4 fe ff ff	 movss	 DWORD PTR _quad$3[ebp+ecx+28], xmm0

; 10112: 
; 10113: 			quad[0].next_vertex	= &quad[1];

  010ee	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  010f3	c1 e0 00	 shl	 eax, 0
  010f6	8d 8c 05 c8 fe
	ff ff		 lea	 ecx, DWORD PTR _quad$3[ebp+eax]
  010fd	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  01102	6b c2 00	 imul	 eax, edx, 0
  01105	89 8c 05 f0 fe
	ff ff		 mov	 DWORD PTR _quad$3[ebp+eax+40], ecx

; 10114: 			quad[1].next_vertex	= &quad[2];

  0110c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01111	d1 e0		 shl	 eax, 1
  01113	8d 8c 05 c8 fe
	ff ff		 lea	 ecx, DWORD PTR _quad$3[ebp+eax]
  0111a	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0111f	c1 e2 00	 shl	 edx, 0
  01122	89 8c 15 f0 fe
	ff ff		 mov	 DWORD PTR _quad$3[ebp+edx+40], ecx

; 10115: 			quad[2].next_vertex	= &quad[3];

  01129	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0112e	6b c8 03	 imul	 ecx, eax, 3
  01131	8d 94 0d c8 fe
	ff ff		 lea	 edx, DWORD PTR _quad$3[ebp+ecx]
  01138	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0113d	d1 e0		 shl	 eax, 1
  0113f	89 94 05 f0 fe
	ff ff		 mov	 DWORD PTR _quad$3[ebp+eax+40], edx

; 10116: 			quad[3].next_vertex	= NULL;

  01146	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0114b	6b c8 03	 imul	 ecx, eax, 3
  0114e	c7 84 0d f0 fe
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$3[ebp+ecx+40], 0

; 10117: 
; 10118: 			//
; 10119: 			////////////////////////////////////////
; 10120: 
; 10121: 			draw_wbuffered_flat_shaded_textured_polygon (quad, colour, specular);

  01159	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _specular$1[ebp]
  0115f	50		 push	 eax
  01160	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _colour$2[ebp]
  01166	51		 push	 ecx
  01167	8d 95 c8 fe ff
	ff		 lea	 edx, DWORD PTR _quad$3[ebp]
  0116d	52		 push	 edx
  0116e	e8 00 00 00 00	 call	 ?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_flat_shaded_textured_polygon

; 10122: 
; 10123: 			set_d3d_transparency_off ();

  01173	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 10124: 
; 10125: 			set_d3d_zbuffer_comparison (TRUE);

  01178	6a 01		 push	 1
  0117a	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 10126: 
; 10127: 			set_d3d_culling (TRUE);

  0117f	6a 01		 push	 1
  01181	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 10128: 
; 10129: 			end_3d_scene ();

  01186	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN41@draw_overl:
$LN1@draw_overl:

; 10130: 		}
; 10131: 	}
; 10132: }

  0118b	5f		 pop	 edi
  0118c	5e		 pop	 esi
  0118d	5b		 pop	 ebx
  0118e	8b e5		 mov	 esp, ebp
  01190	5d		 pop	 ebp
  01191	c2 10 00	 ret	 16			; 00000010H
$LN48@draw_overl:
  01194	00 00 00 00	 DD	 $LN11@draw_overl
  01198	00 00 00 00	 DD	 $LN13@draw_overl
  0119c	00 00 00 00	 DD	 $LN15@draw_overl
  011a0	00 00 00 00	 DD	 $LN17@draw_overl
  011a4	00 00 00 00	 DD	 $LN19@draw_overl
  011a8	00 00 00 00	 DD	 $LN23@draw_overl
  011ac	00 00 00 00	 DD	 $LN27@draw_overl
  011b0	00 00 00 00	 DD	 $LN2@draw_overl
  011b4	00 00 00 00	 DD	 $LN31@draw_overl
  011b8	00 00 00 00	 DD	 $LN33@draw_overl
  011bc	00 00 00 00	 DD	 $LN35@draw_overl
  011c0	00 00 00 00	 DD	 $LN37@draw_overl
  011c4	00 00 00 00	 DD	 $LN39@draw_overl
?draw_overlaid_blackhawk_mfd@@YGXMMMW4MFD_LOCATIONS@@@Z ENDP ; draw_overlaid_blackhawk_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_blackhawk_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv148 = -84						; size = 4
_right_export$ = -16					; size = 4
_left_export$ = -12					; size = 4
_mfd_texture_screen$ = -8				; size = 4
_mfd_mode$ = -4						; size = 4
_location$ = 8						; size = 4
?draw_blackhawk_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z PROC ; draw_blackhawk_mfd_on_texture, COMDAT

; 9027 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 9028 : 	mfd_modes
; 9029 : 		*mfd_mode;
; 9030 : 
; 9031 : 	screen
; 9032 : 		*mfd_texture_screen,
; 9033 : 		*left_export,
; 9034 : 		*right_export;
; 9035 : 
; 9036 : 	ASSERT ((location == MFD_LOCATION_LHS) || (location == MFD_LOCATION_RHS));

  00009	83 7d 08 00	 cmp	 DWORD PTR _location$[ebp], 0
  0000d	74 1e		 je	 SHORT $LN4@draw_black
  0000f	83 7d 08 01	 cmp	 DWORD PTR _location$[ebp], 1
  00013	74 18		 je	 SHORT $LN4@draw_black
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_blackhawk_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 09	 add	 eax, 9
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@HOBNFLGC@?$CIlocation?5?$DN?$DN?5MFD_LOCATION_LHS?$CJ?5@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_black:

; 9037 : 
; 9038 : 	if (location == MFD_LOCATION_LHS)

  0002d	83 7d 08 00	 cmp	 DWORD PTR _location$[ebp], 0
  00031	75 21		 jne	 SHORT $LN5@draw_black

; 9039 : 	{
; 9040 : 		mfd_mode = &lhs_mfd_mode;

  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], OFFSET ?lhs_mfd_mode@@3W4MFD_MODES@@A

; 9041 : 
; 9042 : 		mfd_texture_screen = lhs_mfd_texture_screen;

  0003a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lhs_mfd_texture_screen@@3PAUSCREEN@@A
  0003f	89 45 f8	 mov	 DWORD PTR _mfd_texture_screen$[ebp], eax

; 9043 : 
; 9044 : 		set_system_texture_screen (lhs_mfd_texture_screen, TEXTURE_INDEX_AVCKPT_DISPLAY_LHS_MFD);

  00042	68 f8 00 00 00	 push	 248			; 000000f8H
  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lhs_mfd_texture_screen@@3PAUSCREEN@@A
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 9045 : 	}
; 9046 : 	else

  00052	eb 1f		 jmp	 SHORT $LN6@draw_black
$LN5@draw_black:

; 9047 : 	{
; 9048 : 		mfd_mode = &rhs_mfd_mode;

  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], OFFSET ?rhs_mfd_mode@@3W4MFD_MODES@@A

; 9049 : 
; 9050 : 		mfd_texture_screen = rhs_mfd_texture_screen;

  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rhs_mfd_texture_screen@@3PAUSCREEN@@A
  00060	89 45 f8	 mov	 DWORD PTR _mfd_texture_screen$[ebp], eax

; 9051 : 
; 9052 : 		set_system_texture_screen (rhs_mfd_texture_screen, TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD);

  00063	68 f9 00 00 00	 push	 249			; 000000f9H
  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rhs_mfd_texture_screen@@3PAUSCREEN@@A
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen
$LN6@draw_black:

; 9053 : 	}
; 9054 : 
; 9055 : 	////////////////////////////////////////
; 9056 : 	//
; 9057 : 	// set up MFD 2D environment
; 9058 : 	//
; 9059 : 	////////////////////////////////////////
; 9060 : 
; 9061 : 	set_2d_active_environment (mfd_env);

  00073	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 9062 : 
; 9063 : 	//
; 9064 : 	// window
; 9065 : 	//
; 9066 : 
; 9067 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  0007e	51		 push	 ecx
  0007f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  00087	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008c	51		 push	 ecx
  0008d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  00095	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009a	51		 push	 ecx
  0009b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  000a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a8	51		 push	 ecx
  000a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  000b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 9068 : 
; 9069 : 	//
; 9070 : 	// viewport
; 9071 : 	//
; 9072 : 
; 9073 : 	ASSERT (mfd_viewport_size <= mfd_texture_size);

  000c1	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_texture_size@@3HA
  000c9	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  000d0	73 18		 jae	 SHORT $LN7@draw_black
  000d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_blackhawk_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z@4JA
  000d7	83 c0 2e	 add	 eax, 46			; 0000002eH
  000da	50		 push	 eax
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@IPIPCLFE@mfd_viewport_size?5?$DM?$DN?5mfd_textur@
  000e5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@draw_black:

; 9074 : 
; 9075 : 	mfd_viewport_x_org = mfd_viewport_texture_x_org;

  000ea	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_viewport_texture_x_org@@3HA
  000f2	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 9076 : 
; 9077 : 	mfd_viewport_y_org = mfd_viewport_texture_y_org;

  000fa	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?mfd_viewport_texture_y_org@@3HA
  00102	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 9078 : 
; 9079 : 	mfd_viewport_x_min = mfd_viewport_x_org - (mfd_viewport_size * 0.5);

  0010a	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  00112	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  0011a	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00122	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00126	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0012a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 9080 : 
; 9081 : 	mfd_viewport_y_min = mfd_viewport_y_org - (mfd_viewport_size * 0.5);

  00132	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_org@@3MA
  0013a	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00142	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0014a	f2 0f 5c c1	 subsd	 xmm0, xmm1
  0014e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00152	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 9082 : 
; 9083 : 	mfd_viewport_x_max = mfd_viewport_x_org + (mfd_viewport_size * 0.5) - 0.001;

  0015a	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  00162	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  0016a	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00172	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00176	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0017e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00182	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 9084 : 
; 9085 : 	mfd_viewport_y_max = mfd_viewport_y_org + (mfd_viewport_size * 0.5) - 0.001;

  0018a	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_org@@3MA
  00192	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  0019a	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  001a2	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001a6	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001ae	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001b2	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 9086 : 
; 9087 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  001ba	51		 push	 ecx
  001bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  001c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c8	51		 push	 ecx
  001c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  001d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d6	51		 push	 ecx
  001d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  001df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e4	51		 push	 ecx
  001e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  001ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001f7	50		 push	 eax
  001f8	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 9088 : 
; 9089 : 	////////////////////////////////////////
; 9090 : 	//
; 9091 : 	// draw MFD display
; 9092 : 	//
; 9093 : 	////////////////////////////////////////
; 9094 : 
; 9095 : 	switch (*mfd_mode)

  001fd	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00200	8b 08		 mov	 ecx, DWORD PTR [eax]
  00202	89 4d ac	 mov	 DWORD PTR tv148[ebp], ecx
  00205	83 7d ac 0c	 cmp	 DWORD PTR tv148[ebp], 12 ; 0000000cH
  00209	0f 87 79 06 00
	00		 ja	 $LN2@draw_black
  0020f	8b 55 ac	 mov	 edx, DWORD PTR tv148[ebp]
  00212	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN54@draw_black[edx*4]
$LN8@draw_black:

; 9096 : 	{
; 9097 : 		////////////////////////////////////////
; 9098 : 		case MFD_MODE_OFF:
; 9099 : 		////////////////////////////////////////
; 9100 : 		{
; 9101 : 			set_active_screen (mfd_texture_screen);

  00219	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0021c	50		 push	 eax
  0021d	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9102 : 
; 9103 : 			if (lock_screen (mfd_texture_screen))

  00222	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00225	50		 push	 eax
  00226	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0022b	85 c0		 test	 eax, eax
  0022d	74 3a		 je	 SHORT $LN9@draw_black

; 9104 : 			{
; 9105 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  0022f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00234	50		 push	 eax
  00235	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  0023b	83 e9 01	 sub	 ecx, 1
  0023e	51		 push	 ecx
  0023f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00245	83 ea 01	 sub	 edx, 1
  00248	52		 push	 edx
  00249	6a 00		 push	 0
  0024b	6a 00		 push	 0
  0024d	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9106 : 
; 9107 : 				draw_layout_grid ();

  00252	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9108 : 
; 9109 : 				flush_screen_texture_graphics (mfd_texture_screen);

  00257	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0025a	50		 push	 eax
  0025b	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9110 : 
; 9111 : 				unlock_screen (mfd_texture_screen);

  00260	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00263	50		 push	 eax
  00264	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN9@draw_black:

; 9112 : 			}
; 9113 : 
; 9114 : 			break;

  00269	e9 1a 06 00 00	 jmp	 $LN2@draw_black
$LN10@draw_black:

; 9115 : 		}
; 9116 : 		////////////////////////////////////////
; 9117 : 		case MFD_MODE_DAMAGED:
; 9118 : 		////////////////////////////////////////
; 9119 : 		{
; 9120 : 			set_active_screen (mfd_texture_screen);

  0026e	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00271	50		 push	 eax
  00272	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9121 : 
; 9122 : 			if (lock_screen (mfd_texture_screen))

  00277	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0027a	50		 push	 eax
  0027b	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00280	85 c0		 test	 eax, eax
  00282	74 3f		 je	 SHORT $LN11@draw_black

; 9123 : 			{
; 9124 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00284	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00289	50		 push	 eax
  0028a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00290	83 e9 01	 sub	 ecx, 1
  00293	51		 push	 ecx
  00294	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  0029a	83 ea 01	 sub	 edx, 1
  0029d	52		 push	 edx
  0029e	6a 00		 push	 0
  002a0	6a 00		 push	 0
  002a2	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9125 : 
; 9126 : 				draw_layout_grid ();

  002a7	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9127 : 
; 9128 : 				draw_damaged_mfd ();

  002ac	e8 00 00 00 00	 call	 ?draw_damaged_mfd@@YGXXZ ; draw_damaged_mfd

; 9129 : 
; 9130 : 				flush_screen_texture_graphics (mfd_texture_screen);

  002b1	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  002b4	50		 push	 eax
  002b5	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9131 : 
; 9132 : 				unlock_screen (mfd_texture_screen);

  002ba	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  002bd	50		 push	 eax
  002be	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN11@draw_black:

; 9133 : 			}
; 9134 : 
; 9135 : 			break;

  002c3	e9 c0 05 00 00	 jmp	 $LN2@draw_black
$LN12@draw_black:

; 9136 : 		}
; 9137 : 		////////////////////////////////////////
; 9138 : 		case MFD_MODE_GROUND_RADAR:
; 9139 : 		////////////////////////////////////////
; 9140 : 		{
; 9141 : 			set_active_screen (mfd_texture_screen);

  002c8	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  002cb	50		 push	 eax
  002cc	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9142 : 
; 9143 : 			if (lock_screen (mfd_texture_screen))

  002d1	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  002d4	50		 push	 eax
  002d5	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  002da	85 c0		 test	 eax, eax
  002dc	74 3f		 je	 SHORT $LN13@draw_black

; 9144 : 			{
; 9145 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  002de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  002e3	50		 push	 eax
  002e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  002ea	83 e9 01	 sub	 ecx, 1
  002ed	51		 push	 ecx
  002ee	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  002f4	83 ea 01	 sub	 edx, 1
  002f7	52		 push	 edx
  002f8	6a 00		 push	 0
  002fa	6a 00		 push	 0
  002fc	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9146 : 
; 9147 : 				draw_layout_grid ();

  00301	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9148 : 
; 9149 : 				draw_ground_radar_mfd ();

  00306	e8 00 00 00 00	 call	 ?draw_ground_radar_mfd@@YGXXZ ; draw_ground_radar_mfd

; 9150 : 
; 9151 : 				flush_screen_texture_graphics (mfd_texture_screen);

  0030b	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0030e	50		 push	 eax
  0030f	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9152 : 
; 9153 : 				unlock_screen (mfd_texture_screen);

  00314	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00317	50		 push	 eax
  00318	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN13@draw_black:

; 9154 : 			}
; 9155 : 
; 9156 : 			break;

  0031d	e9 66 05 00 00	 jmp	 $LN2@draw_black
$LN14@draw_black:

; 9157 : 		}
; 9158 : 		////////////////////////////////////////
; 9159 : 		case MFD_MODE_AIR_RADAR:
; 9160 : 		////////////////////////////////////////
; 9161 : 		{
; 9162 : 			set_active_screen (mfd_texture_screen);

  00322	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00325	50		 push	 eax
  00326	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9163 : 
; 9164 : 			if (lock_screen (mfd_texture_screen))

  0032b	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0032e	50		 push	 eax
  0032f	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00334	85 c0		 test	 eax, eax
  00336	74 3f		 je	 SHORT $LN15@draw_black

; 9165 : 			{
; 9166 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00338	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0033d	50		 push	 eax
  0033e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00344	83 e9 01	 sub	 ecx, 1
  00347	51		 push	 ecx
  00348	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  0034e	83 ea 01	 sub	 edx, 1
  00351	52		 push	 edx
  00352	6a 00		 push	 0
  00354	6a 00		 push	 0
  00356	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9167 : 
; 9168 : 				draw_layout_grid ();

  0035b	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9169 : 
; 9170 : 				draw_air_radar_mfd ();

  00360	e8 00 00 00 00	 call	 ?draw_air_radar_mfd@@YGXXZ ; draw_air_radar_mfd

; 9171 : 
; 9172 : 				flush_screen_texture_graphics (mfd_texture_screen);

  00365	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00368	50		 push	 eax
  00369	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9173 : 
; 9174 : 				unlock_screen (mfd_texture_screen);

  0036e	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00371	50		 push	 eax
  00372	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN15@draw_black:

; 9175 : 			}
; 9176 : 
; 9177 : 			break;

  00377	e9 0c 05 00 00	 jmp	 $LN2@draw_black
$LN16@draw_black:

; 9178 : 		}
; 9179 : 		////////////////////////////////////////
; 9180 : 		case MFD_MODE_FLIR:
; 9181 : 		////////////////////////////////////////
; 9182 : 		{
; 9183 : 			if ((d3d_can_render_to_texture) && (!blackhawk_damage.flir))

  0037c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  00383	0f 84 af 00 00
	00		 je	 $LN17@draw_black
  00389	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  0038e	c1 e8 02	 shr	 eax, 2
  00391	83 e0 01	 and	 eax, 1
  00394	0f 85 9e 00 00
	00		 jne	 $LN17@draw_black

; 9184 : 			{
; 9185 : 				ASSERT (eo_3d_texture_screen);

  0039a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, 0
  003a1	75 1a		 jne	 SHORT $LN19@draw_black
  003a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_blackhawk_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z@4JA
  003a8	05 9e 00 00 00	 add	 eax, 158		; 0000009eH
  003ad	50		 push	 eax
  003ae	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  003b3	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
  003b8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN19@draw_black:

; 9186 : 
; 9187 : 				if (location == MFD_LOCATION_LHS)

  003bd	83 7d 08 00	 cmp	 DWORD PTR _location$[ebp], 0
  003c1	75 12		 jne	 SHORT $LN20@draw_black

; 9188 : 				{
; 9189 : 					set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_AVCKPT_DISPLAY_LHS_MFD);

  003c3	68 f8 00 00 00	 push	 248			; 000000f8H
  003c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  003cd	50		 push	 eax
  003ce	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 9190 : 				}
; 9191 : 				else

  003d3	eb 10		 jmp	 SHORT $LN21@draw_black
$LN20@draw_black:

; 9192 : 				{
; 9193 : 					set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD);

  003d5	68 f9 00 00 00	 push	 249			; 000000f9H
  003da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  003df	50		 push	 eax
  003e0	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen
$LN21@draw_black:

; 9194 : 				}
; 9195 : 
; 9196 : 				draw_3d_eo_display_on_texture (&blackhawk_flir, TARGET_ACQUISITION_SYSTEM_FLIR);

  003e5	6a 03		 push	 3
  003e7	68 00 00 00 00	 push	 OFFSET ?blackhawk_flir@@3UEO_PARAMS@@A ; blackhawk_flir
  003ec	e8 00 00 00 00	 call	 ?draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_3d_eo_display_on_texture

; 9197 : 
; 9198 : 				set_active_screen (eo_3d_texture_screen);

  003f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  003f6	50		 push	 eax
  003f7	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9199 : 
; 9200 : 				if (lock_screen (eo_3d_texture_screen))

  003fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00401	50		 push	 eax
  00402	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00407	85 c0		 test	 eax, eax
  00409	74 24		 je	 SHORT $LN22@draw_black

; 9201 : 				{
; 9202 : 					draw_layout_grid ();

  0040b	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9203 : 
; 9204 : 					draw_2d_flir_mfd (TRUE, FALSE);

  00410	6a 00		 push	 0
  00412	6a 01		 push	 1
  00414	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXHH@Z ; draw_2d_flir_mfd

; 9205 : 
; 9206 : 					flush_screen_texture_graphics (eo_3d_texture_screen);

  00419	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  0041e	50		 push	 eax
  0041f	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9207 : 
; 9208 : 					unlock_screen (eo_3d_texture_screen);

  00424	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00429	50		 push	 eax
  0042a	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN22@draw_black:

; 9209 : 				}
; 9210 : 
; 9211 : 				set_pilots_full_screen_params (FALSE);

  0042f	6a 00		 push	 0
  00431	e8 00 00 00 00	 call	 ?set_pilots_full_screen_params@@YGXH@Z ; set_pilots_full_screen_params

; 9212 : 			}
; 9213 : 			else

  00436	eb 59		 jmp	 SHORT $LN23@draw_black
$LN17@draw_black:

; 9214 : 			{
; 9215 : 				set_active_screen (mfd_texture_screen);

  00438	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0043b	50		 push	 eax
  0043c	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9216 : 
; 9217 : 				if (lock_screen (mfd_texture_screen))

  00441	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00444	50		 push	 eax
  00445	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0044a	85 c0		 test	 eax, eax
  0044c	74 43		 je	 SHORT $LN23@draw_black

; 9218 : 				{
; 9219 : 					set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  0044e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00453	50		 push	 eax
  00454	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  0045a	83 e9 01	 sub	 ecx, 1
  0045d	51		 push	 ecx
  0045e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00464	83 ea 01	 sub	 edx, 1
  00467	52		 push	 edx
  00468	6a 00		 push	 0
  0046a	6a 00		 push	 0
  0046c	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9220 : 
; 9221 : 					draw_layout_grid ();

  00471	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9222 : 
; 9223 : 					draw_2d_flir_mfd (FALSE, FALSE);

  00476	6a 00		 push	 0
  00478	6a 00		 push	 0
  0047a	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXHH@Z ; draw_2d_flir_mfd

; 9224 : 
; 9225 : 					flush_screen_texture_graphics (mfd_texture_screen);

  0047f	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00482	50		 push	 eax
  00483	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9226 : 
; 9227 : 					unlock_screen (mfd_texture_screen);

  00488	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0048b	50		 push	 eax
  0048c	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN23@draw_black:

; 9228 : 				}
; 9229 : 			}
; 9230 : 
; 9231 : 			break;

  00491	e9 f2 03 00 00	 jmp	 $LN2@draw_black
$LN24@draw_black:

; 9232 : 		}
; 9233 : 		////////////////////////////////////////
; 9234 : 		case MFD_MODE_DTV:
; 9235 : 		////////////////////////////////////////
; 9236 : 		{
; 9237 : 			if ((d3d_can_render_to_texture) && (!blackhawk_damage.dtv))

  00496	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  0049d	0f 84 af 00 00
	00		 je	 $LN25@draw_black
  004a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  004a8	c1 e8 03	 shr	 eax, 3
  004ab	83 e0 01	 and	 eax, 1
  004ae	0f 85 9e 00 00
	00		 jne	 $LN25@draw_black

; 9238 : 			{
; 9239 : 				ASSERT (eo_3d_texture_screen);

  004b4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, 0
  004bb	75 1a		 jne	 SHORT $LN27@draw_black
  004bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_blackhawk_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z@4JA
  004c2	05 d4 00 00 00	 add	 eax, 212		; 000000d4H
  004c7	50		 push	 eax
  004c8	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  004cd	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
  004d2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN27@draw_black:

; 9240 : 
; 9241 : 				if (location == MFD_LOCATION_LHS)

  004d7	83 7d 08 00	 cmp	 DWORD PTR _location$[ebp], 0
  004db	75 12		 jne	 SHORT $LN28@draw_black

; 9242 : 				{
; 9243 : 					set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_AVCKPT_DISPLAY_LHS_MFD);

  004dd	68 f8 00 00 00	 push	 248			; 000000f8H
  004e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  004e7	50		 push	 eax
  004e8	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 9244 : 				}
; 9245 : 				else

  004ed	eb 10		 jmp	 SHORT $LN29@draw_black
$LN28@draw_black:

; 9246 : 				{
; 9247 : 					set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD);

  004ef	68 f9 00 00 00	 push	 249			; 000000f9H
  004f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  004f9	50		 push	 eax
  004fa	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen
$LN29@draw_black:

; 9248 : 				}
; 9249 : 
; 9250 : 				draw_3d_eo_display_on_texture (&blackhawk_dtv, TARGET_ACQUISITION_SYSTEM_DTV);

  004ff	6a 04		 push	 4
  00501	68 00 00 00 00	 push	 OFFSET ?blackhawk_dtv@@3UEO_PARAMS@@A ; blackhawk_dtv
  00506	e8 00 00 00 00	 call	 ?draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_3d_eo_display_on_texture

; 9251 : 
; 9252 : 				set_active_screen (eo_3d_texture_screen);

  0050b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00510	50		 push	 eax
  00511	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9253 : 
; 9254 : 				if (lock_screen (eo_3d_texture_screen))

  00516	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  0051b	50		 push	 eax
  0051c	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00521	85 c0		 test	 eax, eax
  00523	74 24		 je	 SHORT $LN30@draw_black

; 9255 : 				{
; 9256 : 					draw_layout_grid ();

  00525	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9257 : 
; 9258 : 					draw_2d_dtv_mfd (TRUE, FALSE);

  0052a	6a 00		 push	 0
  0052c	6a 01		 push	 1
  0052e	e8 00 00 00 00	 call	 ?draw_2d_dtv_mfd@@YGXHH@Z ; draw_2d_dtv_mfd

; 9259 : 
; 9260 : 					flush_screen_texture_graphics (eo_3d_texture_screen);

  00533	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00538	50		 push	 eax
  00539	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9261 : 
; 9262 : 					unlock_screen (eo_3d_texture_screen);

  0053e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00543	50		 push	 eax
  00544	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN30@draw_black:

; 9263 : 				}
; 9264 : 
; 9265 : 				set_pilots_full_screen_params (FALSE);

  00549	6a 00		 push	 0
  0054b	e8 00 00 00 00	 call	 ?set_pilots_full_screen_params@@YGXH@Z ; set_pilots_full_screen_params

; 9266 : 			}
; 9267 : 			else

  00550	eb 59		 jmp	 SHORT $LN31@draw_black
$LN25@draw_black:

; 9268 : 			{
; 9269 : 				set_active_screen (mfd_texture_screen);

  00552	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00555	50		 push	 eax
  00556	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9270 : 
; 9271 : 				if (lock_screen (mfd_texture_screen))

  0055b	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0055e	50		 push	 eax
  0055f	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00564	85 c0		 test	 eax, eax
  00566	74 43		 je	 SHORT $LN31@draw_black

; 9272 : 				{
; 9273 : 					set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00568	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0056d	50		 push	 eax
  0056e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00574	83 e9 01	 sub	 ecx, 1
  00577	51		 push	 ecx
  00578	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  0057e	83 ea 01	 sub	 edx, 1
  00581	52		 push	 edx
  00582	6a 00		 push	 0
  00584	6a 00		 push	 0
  00586	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9274 : 
; 9275 : 					draw_layout_grid ();

  0058b	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9276 : 
; 9277 : 					draw_2d_dtv_mfd (FALSE, FALSE);

  00590	6a 00		 push	 0
  00592	6a 00		 push	 0
  00594	e8 00 00 00 00	 call	 ?draw_2d_dtv_mfd@@YGXHH@Z ; draw_2d_dtv_mfd

; 9278 : 
; 9279 : 					flush_screen_texture_graphics (mfd_texture_screen);

  00599	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0059c	50		 push	 eax
  0059d	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9280 : 
; 9281 : 					unlock_screen (mfd_texture_screen);

  005a2	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  005a5	50		 push	 eax
  005a6	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN31@draw_black:

; 9282 : 				}
; 9283 : 			}
; 9284 : 
; 9285 : 			break;

  005ab	e9 d8 02 00 00	 jmp	 $LN2@draw_black
$LN32@draw_black:

; 9286 : 		}
; 9287 : 		////////////////////////////////////////
; 9288 : 		case MFD_MODE_DVO:
; 9289 : 		////////////////////////////////////////
; 9290 : 		{
; 9291 : 			if ((d3d_can_render_to_texture) && (!blackhawk_damage.dvo))

  005b0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  005b7	0f 84 af 00 00
	00		 je	 $LN33@draw_black
  005bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  005c2	c1 e8 04	 shr	 eax, 4
  005c5	83 e0 01	 and	 eax, 1
  005c8	0f 85 9e 00 00
	00		 jne	 $LN33@draw_black

; 9292 : 			{
; 9293 : 				ASSERT (eo_3d_texture_screen);

  005ce	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, 0
  005d5	75 1a		 jne	 SHORT $LN35@draw_black
  005d7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_blackhawk_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z@4JA
  005dc	05 0a 01 00 00	 add	 eax, 266		; 0000010aH
  005e1	50		 push	 eax
  005e2	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  005e7	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
  005ec	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN35@draw_black:

; 9294 : 
; 9295 : 				if (location == MFD_LOCATION_LHS)

  005f1	83 7d 08 00	 cmp	 DWORD PTR _location$[ebp], 0
  005f5	75 12		 jne	 SHORT $LN36@draw_black

; 9296 : 				{
; 9297 : 					set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_AVCKPT_DISPLAY_LHS_MFD);

  005f7	68 f8 00 00 00	 push	 248			; 000000f8H
  005fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00601	50		 push	 eax
  00602	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 9298 : 				}
; 9299 : 				else

  00607	eb 10		 jmp	 SHORT $LN37@draw_black
$LN36@draw_black:

; 9300 : 				{
; 9301 : 					set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD);

  00609	68 f9 00 00 00	 push	 249			; 000000f9H
  0060e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00613	50		 push	 eax
  00614	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen
$LN37@draw_black:

; 9302 : 				}
; 9303 : 
; 9304 : 				draw_3d_eo_display_on_texture (&blackhawk_dvo, TARGET_ACQUISITION_SYSTEM_DVO);

  00619	6a 05		 push	 5
  0061b	68 00 00 00 00	 push	 OFFSET ?blackhawk_dvo@@3UEO_PARAMS@@A ; blackhawk_dvo
  00620	e8 00 00 00 00	 call	 ?draw_3d_eo_display_on_texture@@YGXPAUEO_PARAMS@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_3d_eo_display_on_texture

; 9305 : 
; 9306 : 				set_active_screen (eo_3d_texture_screen);

  00625	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  0062a	50		 push	 eax
  0062b	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9307 : 
; 9308 : 				if (lock_screen (eo_3d_texture_screen))

  00630	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00635	50		 push	 eax
  00636	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0063b	85 c0		 test	 eax, eax
  0063d	74 24		 je	 SHORT $LN38@draw_black

; 9309 : 				{
; 9310 : 					draw_layout_grid ();

  0063f	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9311 : 
; 9312 : 					draw_2d_dvo_mfd (TRUE, FALSE);

  00644	6a 00		 push	 0
  00646	6a 01		 push	 1
  00648	e8 00 00 00 00	 call	 ?draw_2d_dvo_mfd@@YGXHH@Z ; draw_2d_dvo_mfd

; 9313 : 
; 9314 : 					flush_screen_texture_graphics (eo_3d_texture_screen);

  0064d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00652	50		 push	 eax
  00653	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9315 : 
; 9316 : 					unlock_screen (eo_3d_texture_screen);

  00658	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  0065d	50		 push	 eax
  0065e	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN38@draw_black:

; 9317 : 				}
; 9318 : 
; 9319 : 				set_pilots_full_screen_params (FALSE);

  00663	6a 00		 push	 0
  00665	e8 00 00 00 00	 call	 ?set_pilots_full_screen_params@@YGXH@Z ; set_pilots_full_screen_params

; 9320 : 			}
; 9321 : 			else

  0066a	eb 59		 jmp	 SHORT $LN39@draw_black
$LN33@draw_black:

; 9322 : 			{
; 9323 : 				set_active_screen (mfd_texture_screen);

  0066c	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0066f	50		 push	 eax
  00670	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9324 : 
; 9325 : 				if (lock_screen (mfd_texture_screen))

  00675	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00678	50		 push	 eax
  00679	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0067e	85 c0		 test	 eax, eax
  00680	74 43		 je	 SHORT $LN39@draw_black

; 9326 : 				{
; 9327 : 					set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00682	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00687	50		 push	 eax
  00688	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  0068e	83 e9 01	 sub	 ecx, 1
  00691	51		 push	 ecx
  00692	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00698	83 ea 01	 sub	 edx, 1
  0069b	52		 push	 edx
  0069c	6a 00		 push	 0
  0069e	6a 00		 push	 0
  006a0	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9328 : 
; 9329 : 					draw_layout_grid ();

  006a5	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9330 : 
; 9331 : 					draw_2d_dvo_mfd (FALSE, FALSE);

  006aa	6a 00		 push	 0
  006ac	6a 00		 push	 0
  006ae	e8 00 00 00 00	 call	 ?draw_2d_dvo_mfd@@YGXHH@Z ; draw_2d_dvo_mfd

; 9332 : 
; 9333 : 					flush_screen_texture_graphics (mfd_texture_screen);

  006b3	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  006b6	50		 push	 eax
  006b7	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9334 : 
; 9335 : 					unlock_screen (mfd_texture_screen);

  006bc	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  006bf	50		 push	 eax
  006c0	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN39@draw_black:

; 9336 : 				}
; 9337 : 			}
; 9338 : 
; 9339 : 			break;

  006c5	e9 be 01 00 00	 jmp	 $LN2@draw_black
$LN40@draw_black:

; 9340 : 		}
; 9341 : 		////////////////////////////////////////
; 9342 : 		case MFD_MODE_TSD:
; 9343 : 		////////////////////////////////////////
; 9344 : 		{
; 9345 : 			set_active_screen (mfd_texture_screen);

  006ca	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  006cd	50		 push	 eax
  006ce	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9346 : 
; 9347 : 			if (lock_screen (mfd_texture_screen))

  006d3	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  006d6	50		 push	 eax
  006d7	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  006dc	85 c0		 test	 eax, eax
  006de	74 3f		 je	 SHORT $LN41@draw_black

; 9348 : 			{
; 9349 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  006e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  006e5	50		 push	 eax
  006e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  006ec	83 e9 01	 sub	 ecx, 1
  006ef	51		 push	 ecx
  006f0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  006f6	83 ea 01	 sub	 edx, 1
  006f9	52		 push	 edx
  006fa	6a 00		 push	 0
  006fc	6a 00		 push	 0
  006fe	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9350 : 
; 9351 : 				draw_layout_grid ();

  00703	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9352 : 
; 9353 : 				draw_tactical_situation_display_mfd ();

  00708	e8 00 00 00 00	 call	 ?draw_tactical_situation_display_mfd@@YGXXZ ; draw_tactical_situation_display_mfd

; 9354 : 
; 9355 : 				flush_screen_texture_graphics (mfd_texture_screen);

  0070d	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00710	50		 push	 eax
  00711	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9356 : 
; 9357 : 				unlock_screen (mfd_texture_screen);

  00716	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00719	50		 push	 eax
  0071a	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN41@draw_black:

; 9358 : 			}
; 9359 : 
; 9360 : 			break;

  0071f	e9 64 01 00 00	 jmp	 $LN2@draw_black
$LN42@draw_black:

; 9361 : 		}
; 9362 : 		////////////////////////////////////////
; 9363 : 		case MFD_MODE_ASE:
; 9364 : 		////////////////////////////////////////
; 9365 : 		{
; 9366 : 			set_active_screen (mfd_texture_screen);

  00724	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00727	50		 push	 eax
  00728	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9367 : 
; 9368 : 			if (lock_screen (mfd_texture_screen))

  0072d	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00730	50		 push	 eax
  00731	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00736	85 c0		 test	 eax, eax
  00738	74 3f		 je	 SHORT $LN43@draw_black

; 9369 : 			{
; 9370 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  0073a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0073f	50		 push	 eax
  00740	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00746	83 e9 01	 sub	 ecx, 1
  00749	51		 push	 ecx
  0074a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00750	83 ea 01	 sub	 edx, 1
  00753	52		 push	 edx
  00754	6a 00		 push	 0
  00756	6a 00		 push	 0
  00758	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9371 : 
; 9372 : 				draw_layout_grid ();

  0075d	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9373 : 
; 9374 : 				draw_aircraft_survivability_equipment_display_mfd ();

  00762	e8 00 00 00 00	 call	 ?draw_aircraft_survivability_equipment_display_mfd@@YGXXZ ; draw_aircraft_survivability_equipment_display_mfd

; 9375 : 
; 9376 : 				flush_screen_texture_graphics (mfd_texture_screen);

  00767	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0076a	50		 push	 eax
  0076b	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9377 : 
; 9378 : 				unlock_screen (mfd_texture_screen);

  00770	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00773	50		 push	 eax
  00774	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN43@draw_black:

; 9379 : 			}
; 9380 : 
; 9381 : 			break;

  00779	e9 0a 01 00 00	 jmp	 $LN2@draw_black
$LN44@draw_black:

; 9382 : 		}
; 9383 : 		////////////////////////////////////////
; 9384 : 		case MFD_MODE_WEAPON:
; 9385 : 		////////////////////////////////////////
; 9386 : 		{
; 9387 : 			set_active_screen (mfd_texture_screen);

  0077e	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00781	50		 push	 eax
  00782	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9388 : 
; 9389 : 			if (lock_screen (mfd_texture_screen))

  00787	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0078a	50		 push	 eax
  0078b	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00790	85 c0		 test	 eax, eax
  00792	74 43		 je	 SHORT $LN45@draw_black

; 9390 : 			{
; 9391 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00794	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00799	50		 push	 eax
  0079a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  007a0	83 e9 01	 sub	 ecx, 1
  007a3	51		 push	 ecx
  007a4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  007aa	83 ea 01	 sub	 edx, 1
  007ad	52		 push	 edx
  007ae	6a 00		 push	 0
  007b0	6a 00		 push	 0
  007b2	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9392 : 
; 9393 : 				draw_layout_grid ();

  007b7	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9394 : 
; 9395 : 				draw_weapon_display_mfd (MFD_LOCATION_DONT_CARE, TRUE);

  007bc	6a 01		 push	 1
  007be	6a ff		 push	 -1
  007c0	e8 00 00 00 00	 call	 ?draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z ; draw_weapon_display_mfd

; 9396 : 
; 9397 : 				flush_screen_texture_graphics (mfd_texture_screen);

  007c5	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  007c8	50		 push	 eax
  007c9	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9398 : 
; 9399 : 				unlock_screen (mfd_texture_screen);

  007ce	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  007d1	50		 push	 eax
  007d2	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN45@draw_black:

; 9400 : 			}
; 9401 : 
; 9402 : 			break;

  007d7	e9 ac 00 00 00	 jmp	 $LN2@draw_black
$LN46@draw_black:

; 9403 : 		}
; 9404 : 		////////////////////////////////////////
; 9405 : 		case MFD_MODE_SYSTEM:
; 9406 : 		////////////////////////////////////////
; 9407 : 		{
; 9408 : 			set_active_screen (mfd_texture_screen);

  007dc	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  007df	50		 push	 eax
  007e0	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9409 : 
; 9410 : 			if (lock_screen (mfd_texture_screen))

  007e5	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  007e8	50		 push	 eax
  007e9	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  007ee	85 c0		 test	 eax, eax
  007f0	74 3f		 je	 SHORT $LN47@draw_black

; 9411 : 			{
; 9412 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  007f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  007f7	50		 push	 eax
  007f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  007fe	83 e9 01	 sub	 ecx, 1
  00801	51		 push	 ecx
  00802	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  00808	83 ea 01	 sub	 edx, 1
  0080b	52		 push	 edx
  0080c	6a 00		 push	 0
  0080e	6a 00		 push	 0
  00810	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9413 : 
; 9414 : 				draw_layout_grid ();

  00815	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9415 : 
; 9416 : 				draw_system_display_mfd ();

  0081a	e8 00 00 00 00	 call	 ?draw_system_display_mfd@@YGXXZ ; draw_system_display_mfd

; 9417 : 
; 9418 : 				flush_screen_texture_graphics (mfd_texture_screen);

  0081f	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00822	50		 push	 eax
  00823	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9419 : 
; 9420 : 				unlock_screen (mfd_texture_screen);

  00828	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0082b	50		 push	 eax
  0082c	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN47@draw_black:

; 9421 : 			}
; 9422 : 
; 9423 : 			break;

  00831	eb 55		 jmp	 SHORT $LN2@draw_black
$LN48@draw_black:

; 9424 : 		}
; 9425 : 		////////////////////////////////////////
; 9426 : 		case MFD_MODE_ENGINE:
; 9427 : 		////////////////////////////////////////
; 9428 : 		{
; 9429 : 			set_active_screen (mfd_texture_screen);

  00833	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00836	50		 push	 eax
  00837	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9430 : 
; 9431 : 			if (lock_screen (mfd_texture_screen))

  0083c	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  0083f	50		 push	 eax
  00840	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00845	85 c0		 test	 eax, eax
  00847	74 3f		 je	 SHORT $LN49@draw_black

; 9432 : 			{
; 9433 : 				set_block (0, 0, mfd_texture_size - 1, mfd_texture_size - 1, clear_mfd_colour);

  00849	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0084e	50		 push	 eax
  0084f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00855	83 e9 01	 sub	 ecx, 1
  00858	51		 push	 ecx
  00859	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_texture_size@@3HA
  0085f	83 ea 01	 sub	 edx, 1
  00862	52		 push	 edx
  00863	6a 00		 push	 0
  00865	6a 00		 push	 0
  00867	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 9434 : 
; 9435 : 				draw_layout_grid ();

  0086c	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9436 : 
; 9437 : 				draw_engine_display_mfd ();

  00871	e8 00 00 00 00	 call	 ?draw_engine_display_mfd@@YGXXZ ; draw_engine_display_mfd

; 9438 : 
; 9439 : 				flush_screen_texture_graphics (mfd_texture_screen);

  00876	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00879	50		 push	 eax
  0087a	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 9440 : 
; 9441 : 				unlock_screen (mfd_texture_screen);

  0087f	8b 45 f8	 mov	 eax, DWORD PTR _mfd_texture_screen$[ebp]
  00882	50		 push	 eax
  00883	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN49@draw_black:
$LN2@draw_black:

; 9442 : 			}
; 9443 : 
; 9444 : 			break;
; 9445 : 		}
; 9446 : 	}
; 9447 : 
; 9448 : 	set_active_screen (video_screen);

  00888	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  0088d	50		 push	 eax
  0088e	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 9449 : 	if(command_line_export_mfd)

  00893	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_export_mfd@@3HA, 0 ; command_line_export_mfd
  0089a	74 38		 je	 SHORT $LN52@draw_black

; 9450 : 	{
; 9451 : 		if(location == MFD_LOCATION_LHS)

  0089c	83 7d 08 00	 cmp	 DWORD PTR _location$[ebp], 0
  008a0	75 1a		 jne	 SHORT $LN51@draw_black

; 9452 : 		{
; 9453 : 			left_export=create_screen_for_system_texture (TEXTURE_INDEX_AVCKPT_DISPLAY_LHS_MFD);

  008a2	68 f8 00 00 00	 push	 248			; 000000f8H
  008a7	e8 00 00 00 00	 call	 ?create_screen_for_system_texture@@YGPAUSCREEN@@H@Z ; create_screen_for_system_texture
  008ac	89 45 f4	 mov	 DWORD PTR _left_export$[ebp], eax

; 9454 : 			copy_export_mfd(left_export,NULL);

  008af	6a 00		 push	 0
  008b1	8b 45 f4	 mov	 eax, DWORD PTR _left_export$[ebp]
  008b4	50		 push	 eax
  008b5	e8 00 00 00 00	 call	 ?copy_export_mfd@@YGXPAUSCREEN@@0@Z ; copy_export_mfd

; 9455 : 		}
; 9456 : 		else

  008ba	eb 18		 jmp	 SHORT $LN52@draw_black
$LN51@draw_black:

; 9457 : 		{
; 9458 : 			right_export=create_screen_for_system_texture (TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD);

  008bc	68 f9 00 00 00	 push	 249			; 000000f9H
  008c1	e8 00 00 00 00	 call	 ?create_screen_for_system_texture@@YGPAUSCREEN@@H@Z ; create_screen_for_system_texture
  008c6	89 45 f0	 mov	 DWORD PTR _right_export$[ebp], eax

; 9459 : 			copy_export_mfd(NULL,right_export);

  008c9	8b 45 f0	 mov	 eax, DWORD PTR _right_export$[ebp]
  008cc	50		 push	 eax
  008cd	6a 00		 push	 0
  008cf	e8 00 00 00 00	 call	 ?copy_export_mfd@@YGXPAUSCREEN@@0@Z ; copy_export_mfd
$LN52@draw_black:

; 9460 : 		}
; 9461 : 	}
; 9462 : }

  008d4	5f		 pop	 edi
  008d5	5e		 pop	 esi
  008d6	5b		 pop	 ebx
  008d7	8b e5		 mov	 esp, ebp
  008d9	5d		 pop	 ebp
  008da	c2 04 00	 ret	 4
  008dd	0f 1f 00	 npad	 3
$LN54@draw_black:
  008e0	00 00 00 00	 DD	 $LN8@draw_black
  008e4	00 00 00 00	 DD	 $LN10@draw_black
  008e8	00 00 00 00	 DD	 $LN12@draw_black
  008ec	00 00 00 00	 DD	 $LN14@draw_black
  008f0	00 00 00 00	 DD	 $LN16@draw_black
  008f4	00 00 00 00	 DD	 $LN24@draw_black
  008f8	00 00 00 00	 DD	 $LN32@draw_black
  008fc	00 00 00 00	 DD	 $LN2@draw_black
  00900	00 00 00 00	 DD	 $LN40@draw_black
  00904	00 00 00 00	 DD	 $LN42@draw_black
  00908	00 00 00 00	 DD	 $LN44@draw_black
  0090c	00 00 00 00	 DD	 $LN46@draw_black
  00910	00 00 00 00	 DD	 $LN48@draw_black
?draw_blackhawk_mfd_on_texture@@YGXW4MFD_LOCATIONS@@@Z ENDP ; draw_blackhawk_mfd_on_texture
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?draw_blackhawk_mfd_on_cockpit@@YGXMMHHW4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv227 = -352						; size = 4
_y_max$1 = -284						; size = 4
_x_max$2 = -280						; size = 4
_y_min$3 = -276						; size = 4
_x_min$4 = -272						; size = 4
_specular$5 = -268					; size = 4
_colour$6 = -264					; size = 4
_quad$7 = -260						; size = 256
_mfd_mode$ = -4						; size = 4
_x_org$ = 8						; size = 4
_y_org$ = 12						; size = 4
_large_mfd$ = 16					; size = 4
_draw_translucent_background$ = 20			; size = 4
_location$ = 24						; size = 4
?draw_blackhawk_mfd_on_cockpit@@YGXMMHHW4MFD_LOCATIONS@@@Z PROC ; draw_blackhawk_mfd_on_cockpit, COMDAT

; 8663 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 60 01 00
	00		 sub	 esp, 352		; 00000160H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 8664 : 	mfd_modes
; 8665 : 		*mfd_mode;
; 8666 : 
; 8667 : 	ASSERT ((location == MFD_LOCATION_LHS) || (location == MFD_LOCATION_RHS));

  0000c	83 7d 18 00	 cmp	 DWORD PTR _location$[ebp], 0
  00010	74 1e		 je	 SHORT $LN4@draw_black
  00012	83 7d 18 01	 cmp	 DWORD PTR _location$[ebp], 1
  00016	74 18		 je	 SHORT $LN4@draw_black
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_blackhawk_mfd_on_cockpit@@YGXMMHHW4MFD_LOCATIONS@@@Z@4JA
  0001d	83 c0 04	 add	 eax, 4
  00020	50		 push	 eax
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@HOBNFLGC@?$CIlocation?5?$DN?$DN?5MFD_LOCATION_LHS?$CJ?5@
  0002b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_black:

; 8668 : 
; 8669 : 	if (location == MFD_LOCATION_LHS)

  00030	83 7d 18 00	 cmp	 DWORD PTR _location$[ebp], 0
  00034	75 09		 jne	 SHORT $LN5@draw_black

; 8670 : 	{
; 8671 : 		mfd_mode = &lhs_mfd_mode;

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], OFFSET ?lhs_mfd_mode@@3W4MFD_MODES@@A

; 8672 : 	}
; 8673 : 	else

  0003d	eb 07		 jmp	 SHORT $LN6@draw_black
$LN5@draw_black:

; 8674 : 	{
; 8675 : 		mfd_mode = &rhs_mfd_mode;

  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], OFFSET ?rhs_mfd_mode@@3W4MFD_MODES@@A
$LN6@draw_black:

; 8676 : 	}
; 8677 : 
; 8678 : 	////////////////////////////////////////
; 8679 : 	//
; 8680 : 	// set up MFD 2D environment
; 8681 : 	//
; 8682 : 	////////////////////////////////////////
; 8683 : 
; 8684 : 	set_2d_active_environment (mfd_env);

  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 8685 : 
; 8686 : 	//
; 8687 : 	// window
; 8688 : 	//
; 8689 : 
; 8690 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  00051	51		 push	 ecx
  00052	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	51		 push	 ecx
  00060	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  00068	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006d	51		 push	 ecx
  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  00076	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007b	51		 push	 ecx
  0007c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf8ccccd
  00084	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00089	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 8691 : 
; 8692 : 	//
; 8693 : 	// viewport
; 8694 : 	//
; 8695 : 
; 8696 : 	draw_large_mfd = large_mfd;

  00094	8b 45 10	 mov	 eax, DWORD PTR _large_mfd$[ebp]
  00097	a3 00 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, eax

; 8697 : 
; 8698 : 	if (draw_large_mfd)

  0009c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  000a3	74 12		 je	 SHORT $LN7@draw_black

; 8699 : 	{
; 8700 : 		mfd_viewport_size = MFD_VIEWPORT_LARGE_SIZE;  

  000a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  000ad	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 8701 : 	}
; 8702 : 	else

  000b5	eb 10		 jmp	 SHORT $LN8@draw_black
$LN7@draw_black:

; 8703 : 	{
; 8704 : 		mfd_viewport_size = MFD_VIEWPORT_SMALL_SIZE;

  000b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  000bf	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0
$LN8@draw_black:

; 8705 : 	}
; 8706 : 
; 8707 : 	mfd_viewport_x_org = x_org;

  000c7	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_org$[ebp]
  000cc	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 8708 : 
; 8709 : 	mfd_viewport_y_org = y_org;

  000d4	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_org$[ebp]
  000d9	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 8710 : 
; 8711 : 	mfd_viewport_x_min = mfd_viewport_x_org - (mfd_viewport_size * 0.5);

  000e1	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  000e9	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  000f1	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  000f9	f2 0f 5c c1	 subsd	 xmm0, xmm1
  000fd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00101	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 8712 : 
; 8713 : 	mfd_viewport_y_min = mfd_viewport_y_org - (mfd_viewport_size * 0.5);

  00109	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_org@@3MA
  00111	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00119	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00121	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00125	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00129	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 8714 : 
; 8715 : 	mfd_viewport_x_max = mfd_viewport_x_org + (mfd_viewport_size * 0.5) - 0.001;

  00131	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  00139	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00141	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00149	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0014d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00155	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00159	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 8716 : 
; 8717 : 	mfd_viewport_y_max = mfd_viewport_y_org + (mfd_viewport_size * 0.5) - 0.001;

  00161	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_y_org@@3MA
  00169	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00171	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00179	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0017d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00185	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00189	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 8718 : 
; 8719 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00191	51		 push	 ecx
  00192	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0019a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019f	51		 push	 ecx
  001a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  001a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ad	51		 push	 ecx
  001ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  001b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bb	51		 push	 ecx
  001bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  001c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 8720 : 
; 8721 : 	////////////////////////////////////////
; 8722 : 	//
; 8723 : 	// draw translucent background
; 8724 : 	//
; 8725 : 	////////////////////////////////////////
; 8726 : 
; 8727 : 	if (draw_translucent_background)

  001d4	83 7d 14 00	 cmp	 DWORD PTR _draw_translucent_background$[ebp], 0
  001d8	0f 84 28 03 00
	00		 je	 $LN13@draw_black

; 8728 : 	{
; 8729 : 		if (!draw_large_mfd)

  001de	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  001e5	0f 85 1b 03 00
	00		 jne	 $LN13@draw_black

; 8730 : 		{
; 8731 : 			if
; 8732 : 			(
; 8733 : 				(*mfd_mode == MFD_MODE_DAMAGED) ||
; 8734 : 				(*mfd_mode == MFD_MODE_GROUND_RADAR) ||
; 8735 : 				(*mfd_mode == MFD_MODE_AIR_RADAR) ||
; 8736 : 				(*mfd_mode == MFD_MODE_TSD) ||
; 8737 : 				(*mfd_mode == MFD_MODE_ASE) ||
; 8738 : 				(*mfd_mode == MFD_MODE_WEAPON) ||
; 8739 : 				(*mfd_mode == MFD_MODE_SYSTEM) ||

  001eb	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  001ee	83 38 01	 cmp	 DWORD PTR [eax], 1
  001f1	74 3c		 je	 SHORT $LN12@draw_black
  001f3	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  001f6	83 38 02	 cmp	 DWORD PTR [eax], 2
  001f9	74 34		 je	 SHORT $LN12@draw_black
  001fb	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  001fe	83 38 03	 cmp	 DWORD PTR [eax], 3
  00201	74 2c		 je	 SHORT $LN12@draw_black
  00203	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00206	83 38 08	 cmp	 DWORD PTR [eax], 8
  00209	74 24		 je	 SHORT $LN12@draw_black
  0020b	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  0020e	83 38 09	 cmp	 DWORD PTR [eax], 9
  00211	74 1c		 je	 SHORT $LN12@draw_black
  00213	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00216	83 38 0a	 cmp	 DWORD PTR [eax], 10	; 0000000aH
  00219	74 14		 je	 SHORT $LN12@draw_black
  0021b	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  0021e	83 38 0b	 cmp	 DWORD PTR [eax], 11	; 0000000bH
  00221	74 0c		 je	 SHORT $LN12@draw_black
  00223	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00226	83 38 0c	 cmp	 DWORD PTR [eax], 12	; 0000000cH
  00229	0f 85 d7 02 00
	00		 jne	 $LN13@draw_black
$LN12@draw_black:

; 8740 : 				(*mfd_mode == MFD_MODE_ENGINE)
; 8741 : 			)
; 8742 : 			{
; 8743 : 				vertex
; 8744 : 					quad[4];
; 8745 : 
; 8746 : 				real_colour
; 8747 : 					colour,
; 8748 : 					specular;
; 8749 : 
; 8750 : 				float
; 8751 : 					x_min,
; 8752 : 					y_min,
; 8753 : 					x_max,
; 8754 : 					y_max;
; 8755 : 
; 8756 : 				if (begin_3d_scene ())

  0022f	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  00234	85 c0		 test	 eax, eax
  00236	0f 84 ca 02 00
	00		 je	 $LN13@draw_black

; 8757 : 				{
; 8758 : 					colour.red = 0;

  0023c	c6 85 fa fe ff
	ff 00		 mov	 BYTE PTR _colour$6[ebp+2], 0

; 8759 : 					colour.green = 0;

  00243	c6 85 f9 fe ff
	ff 00		 mov	 BYTE PTR _colour$6[ebp+1], 0

; 8760 : 					colour.blue = 0;

  0024a	c6 85 f8 fe ff
	ff 00		 mov	 BYTE PTR _colour$6[ebp], 0

; 8761 : 					colour.alpha = 64;

  00251	c6 85 fb fe ff
	ff 40		 mov	 BYTE PTR _colour$6[ebp+3], 64 ; 00000040H

; 8762 : 
; 8763 : 					specular.red = 0;

  00258	c6 85 f6 fe ff
	ff 00		 mov	 BYTE PTR _specular$5[ebp+2], 0

; 8764 : 					specular.green = 0;

  0025f	c6 85 f5 fe ff
	ff 00		 mov	 BYTE PTR _specular$5[ebp+1], 0

; 8765 : 					specular.blue = 0;

  00266	c6 85 f4 fe ff
	ff 00		 mov	 BYTE PTR _specular$5[ebp], 0

; 8766 : 					specular.alpha = 255;

  0026d	c6 85 f7 fe ff
	ff ff		 mov	 BYTE PTR _specular$5[ebp+3], 255 ; 000000ffH

; 8767 : 
; 8768 : 					set_d3d_transparency_on ();

  00274	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 8769 : 
; 8770 : 					set_d3d_zbuffer_comparison (FALSE);

  00279	6a 00		 push	 0
  0027b	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 8771 : 
; 8772 : 					set_d3d_plain_renderstate ();

  00280	e8 00 00 00 00	 call	 ?set_d3d_plain_renderstate@@YGXXZ ; set_d3d_plain_renderstate

; 8773 : 
; 8774 : 					set_d3d_culling (FALSE);

  00285	6a 00		 push	 0
  00287	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 8775 : 
; 8776 : 					//
; 8777 : 					// match co-ordinates with small EO 3D display
; 8778 : 					//
; 8779 : 
; 8780 : 					x_min = mfd_viewport_x_min;

  0028c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00294	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _x_min$4[ebp], xmm0

; 8781 : 					y_min = mfd_viewport_y_min;

  0029c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  002a4	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _y_min$3[ebp], xmm0

; 8782 : 					x_max = x_min + 128.0;

  002ac	f3 0f 5a 85 f0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _x_min$4[ebp]
  002b4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4060000000000000
  002bc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002c0	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _x_max$2[ebp], xmm0

; 8783 : 					y_max = y_min + 128.0;

  002c8	f3 0f 5a 85 ec
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_min$3[ebp]
  002d0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4060000000000000
  002d8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002dc	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR _y_max$1[ebp], xmm0

; 8784 : 
; 8785 : 					quad[0].i = x_min;

  002e4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002e9	6b c8 00	 imul	 ecx, eax, 0
  002ec	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$4[ebp]
  002f4	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+16], xmm0

; 8786 : 					quad[0].j = y_min;

  002fd	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00302	6b c8 00	 imul	 ecx, eax, 0
  00305	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _y_min$3[ebp]
  0030d	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+20], xmm0

; 8787 : 					quad[0].z = 0.5;

  00316	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0031b	6b c8 00	 imul	 ecx, eax, 0
  0031e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00326	f3 0f 11 84 0d
	04 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+8], xmm0

; 8788 : 					quad[0].q = 0.5;

  0032f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00334	6b c8 00	 imul	 ecx, eax, 0
  00337	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0033f	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+12], xmm0

; 8789 : 					quad[0].next_vertex = &quad[1];

  00348	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0034d	c1 e0 00	 shl	 eax, 0
  00350	8d 8c 05 fc fe
	ff ff		 lea	 ecx, DWORD PTR _quad$7[ebp+eax]
  00357	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0035c	6b c2 00	 imul	 eax, edx, 0
  0035f	89 8c 05 24 ff
	ff ff		 mov	 DWORD PTR _quad$7[ebp+eax+40], ecx

; 8790 : 
; 8791 : 					quad[1].i = x_max;

  00366	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0036b	c1 e0 00	 shl	 eax, 0
  0036e	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$2[ebp]
  00376	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+16], xmm0

; 8792 : 					quad[1].j = y_min;

  0037f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00384	c1 e0 00	 shl	 eax, 0
  00387	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _y_min$3[ebp]
  0038f	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+20], xmm0

; 8793 : 					quad[1].z = 0.5;

  00398	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0039d	c1 e0 00	 shl	 eax, 0
  003a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  003a8	f3 0f 11 84 05
	04 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+8], xmm0

; 8794 : 					quad[1].q = 0.5;

  003b1	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003b6	c1 e0 00	 shl	 eax, 0
  003b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  003c1	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+12], xmm0

; 8795 : 					quad[1].next_vertex = &quad[2];

  003ca	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003cf	d1 e0		 shl	 eax, 1
  003d1	8d 8c 05 fc fe
	ff ff		 lea	 ecx, DWORD PTR _quad$7[ebp+eax]
  003d8	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  003dd	c1 e2 00	 shl	 edx, 0
  003e0	89 8c 15 24 ff
	ff ff		 mov	 DWORD PTR _quad$7[ebp+edx+40], ecx

; 8796 : 
; 8797 : 					quad[2].i = x_max;

  003e7	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003ec	d1 e0		 shl	 eax, 1
  003ee	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$2[ebp]
  003f6	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+16], xmm0

; 8798 : 					quad[2].j = y_max;

  003ff	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00404	d1 e0		 shl	 eax, 1
  00406	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _y_max$1[ebp]
  0040e	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+20], xmm0

; 8799 : 					quad[2].z = 0.5;

  00417	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0041c	d1 e0		 shl	 eax, 1
  0041e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00426	f3 0f 11 84 05
	04 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+8], xmm0

; 8800 : 					quad[2].q = 0.5;

  0042f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00434	d1 e0		 shl	 eax, 1
  00436	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0043e	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+eax+12], xmm0

; 8801 : 					quad[2].next_vertex = &quad[3];

  00447	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0044c	6b c8 03	 imul	 ecx, eax, 3
  0044f	8d 94 0d fc fe
	ff ff		 lea	 edx, DWORD PTR _quad$7[ebp+ecx]
  00456	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0045b	d1 e0		 shl	 eax, 1
  0045d	89 94 05 24 ff
	ff ff		 mov	 DWORD PTR _quad$7[ebp+eax+40], edx

; 8802 : 
; 8803 : 					quad[3].i = x_min;

  00464	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00469	6b c8 03	 imul	 ecx, eax, 3
  0046c	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$4[ebp]
  00474	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+16], xmm0

; 8804 : 					quad[3].j = y_max;

  0047d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00482	6b c8 03	 imul	 ecx, eax, 3
  00485	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _y_max$1[ebp]
  0048d	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+20], xmm0

; 8805 : 					quad[3].z = 0.5;

  00496	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0049b	6b c8 03	 imul	 ecx, eax, 3
  0049e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  004a6	f3 0f 11 84 0d
	04 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+8], xmm0

; 8806 : 					quad[3].q = 0.5;

  004af	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004b4	6b c8 03	 imul	 ecx, eax, 3
  004b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  004bf	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$7[ebp+ecx+12], xmm0

; 8807 : 					quad[3].next_vertex = NULL;

  004c8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004cd	6b c8 03	 imul	 ecx, eax, 3
  004d0	c7 84 0d 24 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$7[ebp+ecx+40], 0

; 8808 : 
; 8809 : 					draw_wbuffered_plain_polygon (quad, colour, specular);

  004db	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _specular$5[ebp]
  004e1	50		 push	 eax
  004e2	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _colour$6[ebp]
  004e8	51		 push	 ecx
  004e9	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _quad$7[ebp]
  004ef	52		 push	 edx
  004f0	e8 00 00 00 00	 call	 ?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_plain_polygon

; 8810 : 
; 8811 : 					set_d3d_transparency_off ();

  004f5	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 8812 : 
; 8813 : 					set_d3d_zbuffer_comparison (TRUE);

  004fa	6a 01		 push	 1
  004fc	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 8814 : 
; 8815 : 					end_3d_scene ();

  00501	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN13@draw_black:

; 8816 : 				}
; 8817 : 			}
; 8818 : 		}
; 8819 : 	}
; 8820 : 
; 8821 : 	////////////////////////////////////////
; 8822 : 	//
; 8823 : 	// draw MFD
; 8824 : 	//
; 8825 : 	////////////////////////////////////////
; 8826 : 
; 8827 : 	switch (*mfd_mode)

  00506	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00509	8b 08		 mov	 ecx, DWORD PTR [eax]
  0050b	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv227[ebp], ecx
  00511	83 bd a0 fe ff
	ff 0c		 cmp	 DWORD PTR tv227[ebp], 12 ; 0000000cH
  00518	0f 87 13 02 00
	00		 ja	 $LN2@draw_black
  0051e	8b 95 a0 fe ff
	ff		 mov	 edx, DWORD PTR tv227[ebp]
  00524	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN39@draw_black[edx*4]
$LN14@draw_black:

; 8828 : 	{
; 8829 : 		////////////////////////////////////////
; 8830 : 		case MFD_MODE_OFF:
; 8831 : 		////////////////////////////////////////
; 8832 : 		{
; 8833 : 			if (lock_screen (active_screen))

  0052b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00530	50		 push	 eax
  00531	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00536	85 c0		 test	 eax, eax
  00538	74 10		 je	 SHORT $LN15@draw_black

; 8834 : 			{
; 8835 : 				draw_layout_grid ();

  0053a	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 8836 : 
; 8837 : 				unlock_screen (active_screen);

  0053f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00544	50		 push	 eax
  00545	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN15@draw_black:

; 8838 : 			}
; 8839 : 
; 8840 : 			break;

  0054a	e9 e2 01 00 00	 jmp	 $LN2@draw_black
$LN16@draw_black:

; 8841 : 		}
; 8842 : 		////////////////////////////////////////
; 8843 : 		case MFD_MODE_DAMAGED:
; 8844 : 		////////////////////////////////////////
; 8845 : 		{
; 8846 : 			if (lock_screen (active_screen))

  0054f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00554	50		 push	 eax
  00555	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0055a	85 c0		 test	 eax, eax
  0055c	74 15		 je	 SHORT $LN17@draw_black

; 8847 : 			{
; 8848 : 				draw_layout_grid ();

  0055e	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 8849 : 
; 8850 : 				draw_damaged_mfd ();

  00563	e8 00 00 00 00	 call	 ?draw_damaged_mfd@@YGXXZ ; draw_damaged_mfd

; 8851 : 
; 8852 : 				unlock_screen (active_screen);

  00568	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0056d	50		 push	 eax
  0056e	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN17@draw_black:

; 8853 : 			}
; 8854 : 
; 8855 : 			break;

  00573	e9 b9 01 00 00	 jmp	 $LN2@draw_black
$LN18@draw_black:

; 8856 : 		}
; 8857 : 		////////////////////////////////////////
; 8858 : 		case MFD_MODE_GROUND_RADAR:
; 8859 : 		////////////////////////////////////////
; 8860 : 		{
; 8861 : 			if (lock_screen (active_screen))

  00578	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0057d	50		 push	 eax
  0057e	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00583	85 c0		 test	 eax, eax
  00585	74 15		 je	 SHORT $LN19@draw_black

; 8862 : 			{
; 8863 : 				draw_layout_grid ();

  00587	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 8864 : 
; 8865 : 				draw_ground_radar_mfd ();

  0058c	e8 00 00 00 00	 call	 ?draw_ground_radar_mfd@@YGXXZ ; draw_ground_radar_mfd

; 8866 : 
; 8867 : 				unlock_screen (active_screen);

  00591	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00596	50		 push	 eax
  00597	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN19@draw_black:

; 8868 : 			}
; 8869 : 
; 8870 : 			break;

  0059c	e9 90 01 00 00	 jmp	 $LN2@draw_black
$LN20@draw_black:

; 8871 : 		}
; 8872 : 		////////////////////////////////////////
; 8873 : 		case MFD_MODE_AIR_RADAR:
; 8874 : 		////////////////////////////////////////
; 8875 : 		{
; 8876 : 			if (lock_screen (active_screen))

  005a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  005a6	50		 push	 eax
  005a7	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  005ac	85 c0		 test	 eax, eax
  005ae	74 15		 je	 SHORT $LN21@draw_black

; 8877 : 			{
; 8878 : 				draw_layout_grid ();

  005b0	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 8879 : 
; 8880 : 				draw_air_radar_mfd ();

  005b5	e8 00 00 00 00	 call	 ?draw_air_radar_mfd@@YGXXZ ; draw_air_radar_mfd

; 8881 : 
; 8882 : 				unlock_screen (active_screen);

  005ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  005bf	50		 push	 eax
  005c0	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN21@draw_black:

; 8883 : 			}
; 8884 : 
; 8885 : 			break;

  005c5	e9 67 01 00 00	 jmp	 $LN2@draw_black
$LN22@draw_black:

; 8886 : 		}
; 8887 : 		////////////////////////////////////////
; 8888 : 		case MFD_MODE_FLIR:
; 8889 : 		////////////////////////////////////////
; 8890 : 		{
; 8891 : 			draw_3d_flir_mfd (location);

  005ca	8b 45 18	 mov	 eax, DWORD PTR _location$[ebp]
  005cd	50		 push	 eax
  005ce	e8 00 00 00 00	 call	 ?draw_3d_flir_mfd@@YGXW4MFD_LOCATIONS@@@Z ; draw_3d_flir_mfd

; 8892 : 
; 8893 : 			if (lock_screen (active_screen))

  005d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  005d8	50		 push	 eax
  005d9	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  005de	85 c0		 test	 eax, eax
  005e0	74 19		 je	 SHORT $LN23@draw_black

; 8894 : 			{
; 8895 : 				draw_layout_grid ();

  005e2	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 8896 : 
; 8897 : 				draw_2d_flir_mfd (TRUE, FALSE);

  005e7	6a 00		 push	 0
  005e9	6a 01		 push	 1
  005eb	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXHH@Z ; draw_2d_flir_mfd

; 8898 : 
; 8899 : 				unlock_screen (active_screen);

  005f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  005f5	50		 push	 eax
  005f6	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN23@draw_black:

; 8900 : 			}
; 8901 : 
; 8902 : 			break;

  005fb	e9 31 01 00 00	 jmp	 $LN2@draw_black
$LN24@draw_black:

; 8903 : 		}
; 8904 : 		////////////////////////////////////////
; 8905 : 		case MFD_MODE_DTV:
; 8906 : 		////////////////////////////////////////
; 8907 : 		{
; 8908 : 			draw_3d_dtv_mfd (location);

  00600	8b 45 18	 mov	 eax, DWORD PTR _location$[ebp]
  00603	50		 push	 eax
  00604	e8 00 00 00 00	 call	 ?draw_3d_dtv_mfd@@YGXW4MFD_LOCATIONS@@@Z ; draw_3d_dtv_mfd

; 8909 : 
; 8910 : 			if (lock_screen (active_screen))

  00609	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0060e	50		 push	 eax
  0060f	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00614	85 c0		 test	 eax, eax
  00616	74 19		 je	 SHORT $LN25@draw_black

; 8911 : 			{
; 8912 : 				draw_layout_grid ();

  00618	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 8913 : 
; 8914 : 				draw_2d_dtv_mfd (TRUE, FALSE);

  0061d	6a 00		 push	 0
  0061f	6a 01		 push	 1
  00621	e8 00 00 00 00	 call	 ?draw_2d_dtv_mfd@@YGXHH@Z ; draw_2d_dtv_mfd

; 8915 : 
; 8916 : 				unlock_screen (active_screen);

  00626	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0062b	50		 push	 eax
  0062c	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN25@draw_black:

; 8917 : 			}
; 8918 : 
; 8919 : 			break;

  00631	e9 fb 00 00 00	 jmp	 $LN2@draw_black
$LN26@draw_black:

; 8920 : 		}
; 8921 : 		////////////////////////////////////////
; 8922 : 		case MFD_MODE_DVO:
; 8923 : 		////////////////////////////////////////
; 8924 : 		{
; 8925 : 			draw_3d_dvo_mfd (location);

  00636	8b 45 18	 mov	 eax, DWORD PTR _location$[ebp]
  00639	50		 push	 eax
  0063a	e8 00 00 00 00	 call	 ?draw_3d_dvo_mfd@@YGXW4MFD_LOCATIONS@@@Z ; draw_3d_dvo_mfd

; 8926 : 
; 8927 : 			if (lock_screen (active_screen))

  0063f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00644	50		 push	 eax
  00645	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0064a	85 c0		 test	 eax, eax
  0064c	74 19		 je	 SHORT $LN27@draw_black

; 8928 : 			{
; 8929 : 				draw_layout_grid ();

  0064e	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 8930 : 
; 8931 : 				draw_2d_dvo_mfd (TRUE, FALSE);

  00653	6a 00		 push	 0
  00655	6a 01		 push	 1
  00657	e8 00 00 00 00	 call	 ?draw_2d_dvo_mfd@@YGXHH@Z ; draw_2d_dvo_mfd

; 8932 : 
; 8933 : 				unlock_screen (active_screen);

  0065c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00661	50		 push	 eax
  00662	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN27@draw_black:

; 8934 : 			}
; 8935 : 
; 8936 : 			break;

  00667	e9 c5 00 00 00	 jmp	 $LN2@draw_black
$LN28@draw_black:

; 8937 : 		}
; 8938 : 		////////////////////////////////////////
; 8939 : 		case MFD_MODE_TSD:
; 8940 : 		////////////////////////////////////////
; 8941 : 		{
; 8942 : 			if (lock_screen (active_screen))

  0066c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00671	50		 push	 eax
  00672	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00677	85 c0		 test	 eax, eax
  00679	74 15		 je	 SHORT $LN29@draw_black

; 8943 : 			{
; 8944 : 				draw_layout_grid ();

  0067b	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 8945 : 
; 8946 : 				draw_tactical_situation_display_mfd ();

  00680	e8 00 00 00 00	 call	 ?draw_tactical_situation_display_mfd@@YGXXZ ; draw_tactical_situation_display_mfd

; 8947 : 
; 8948 : 				unlock_screen (active_screen);

  00685	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0068a	50		 push	 eax
  0068b	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN29@draw_black:

; 8949 : 			}
; 8950 : 
; 8951 : 			break;

  00690	e9 9c 00 00 00	 jmp	 $LN2@draw_black
$LN30@draw_black:

; 8952 : 		}
; 8953 : 		////////////////////////////////////////
; 8954 : 		case MFD_MODE_ASE:
; 8955 : 		////////////////////////////////////////
; 8956 : 		{
; 8957 : 			if (lock_screen (active_screen))

  00695	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0069a	50		 push	 eax
  0069b	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  006a0	85 c0		 test	 eax, eax
  006a2	74 15		 je	 SHORT $LN31@draw_black

; 8958 : 			{
; 8959 : 				draw_layout_grid ();

  006a4	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 8960 : 
; 8961 : 				draw_aircraft_survivability_equipment_display_mfd ();

  006a9	e8 00 00 00 00	 call	 ?draw_aircraft_survivability_equipment_display_mfd@@YGXXZ ; draw_aircraft_survivability_equipment_display_mfd

; 8962 : 
; 8963 : 				unlock_screen (active_screen);

  006ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  006b3	50		 push	 eax
  006b4	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN31@draw_black:

; 8964 : 			}
; 8965 : 
; 8966 : 			break;

  006b9	eb 76		 jmp	 SHORT $LN2@draw_black
$LN32@draw_black:

; 8967 : 		}
; 8968 : 		////////////////////////////////////////
; 8969 : 		case MFD_MODE_WEAPON:
; 8970 : 		////////////////////////////////////////
; 8971 : 		{
; 8972 : 			if (lock_screen (active_screen))

  006bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  006c0	50		 push	 eax
  006c1	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  006c6	85 c0		 test	 eax, eax
  006c8	74 1b		 je	 SHORT $LN33@draw_black

; 8973 : 			{
; 8974 : 				draw_layout_grid ();

  006ca	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 8975 : 
; 8976 : 				draw_weapon_display_mfd (location, FALSE);

  006cf	6a 00		 push	 0
  006d1	8b 45 18	 mov	 eax, DWORD PTR _location$[ebp]
  006d4	50		 push	 eax
  006d5	e8 00 00 00 00	 call	 ?draw_weapon_display_mfd@@YGXW4MFD_LOCATIONS@@H@Z ; draw_weapon_display_mfd

; 8977 : 
; 8978 : 				unlock_screen (active_screen);

  006da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  006df	50		 push	 eax
  006e0	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN33@draw_black:

; 8979 : 			}
; 8980 : 
; 8981 : 			break;

  006e5	eb 4a		 jmp	 SHORT $LN2@draw_black
$LN34@draw_black:

; 8982 : 		}
; 8983 : 		////////////////////////////////////////
; 8984 : 		case MFD_MODE_SYSTEM:
; 8985 : 		////////////////////////////////////////
; 8986 : 		{
; 8987 : 			if (lock_screen (active_screen))

  006e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  006ec	50		 push	 eax
  006ed	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  006f2	85 c0		 test	 eax, eax
  006f4	74 15		 je	 SHORT $LN35@draw_black

; 8988 : 			{
; 8989 : 				draw_layout_grid ();

  006f6	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 8990 : 
; 8991 : 				draw_system_display_mfd ();

  006fb	e8 00 00 00 00	 call	 ?draw_system_display_mfd@@YGXXZ ; draw_system_display_mfd

; 8992 : 
; 8993 : 				unlock_screen (active_screen);

  00700	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00705	50		 push	 eax
  00706	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN35@draw_black:

; 8994 : 			}
; 8995 : 
; 8996 : 			break;

  0070b	eb 24		 jmp	 SHORT $LN2@draw_black
$LN36@draw_black:

; 8997 : 		}
; 8998 : 		////////////////////////////////////////
; 8999 : 		case MFD_MODE_ENGINE:
; 9000 : 		////////////////////////////////////////
; 9001 : 		{
; 9002 : 			if (lock_screen (active_screen))

  0070d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00712	50		 push	 eax
  00713	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00718	85 c0		 test	 eax, eax
  0071a	74 15		 je	 SHORT $LN37@draw_black

; 9003 : 			{
; 9004 : 				draw_layout_grid ();

  0071c	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 9005 : 
; 9006 : 				draw_engine_display_mfd ();

  00721	e8 00 00 00 00	 call	 ?draw_engine_display_mfd@@YGXXZ ; draw_engine_display_mfd

; 9007 : 
; 9008 : 				unlock_screen (active_screen);

  00726	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0072b	50		 push	 eax
  0072c	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN37@draw_black:
$LN2@draw_black:

; 9009 : 			}
; 9010 : 
; 9011 : 			break;
; 9012 : 		}
; 9013 : 	}
; 9014 : }

  00731	5f		 pop	 edi
  00732	5e		 pop	 esi
  00733	5b		 pop	 ebx
  00734	8b e5		 mov	 esp, ebp
  00736	5d		 pop	 ebp
  00737	c2 14 00	 ret	 20			; 00000014H
  0073a	66 90		 npad	 2
$LN39@draw_black:
  0073c	00 00 00 00	 DD	 $LN14@draw_black
  00740	00 00 00 00	 DD	 $LN16@draw_black
  00744	00 00 00 00	 DD	 $LN18@draw_black
  00748	00 00 00 00	 DD	 $LN20@draw_black
  0074c	00 00 00 00	 DD	 $LN22@draw_black
  00750	00 00 00 00	 DD	 $LN24@draw_black
  00754	00 00 00 00	 DD	 $LN26@draw_black
  00758	00 00 00 00	 DD	 $LN2@draw_black
  0075c	00 00 00 00	 DD	 $LN28@draw_black
  00760	00 00 00 00	 DD	 $LN30@draw_black
  00764	00 00 00 00	 DD	 $LN32@draw_black
  00768	00 00 00 00	 DD	 $LN34@draw_black
  0076c	00 00 00 00	 DD	 $LN36@draw_black
?draw_blackhawk_mfd_on_cockpit@@YGXMMHHW4MFD_LOCATIONS@@@Z ENDP ; draw_blackhawk_mfd_on_cockpit
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_mfd_mode$ = 8						; size = 4
_location$ = 12						; size = 4
?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z PROC ; select_blackhawk_mfd_mode, COMDAT

; 827  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 828  : 	ASSERT ((mfd_mode >= MFD_MODE_OFF) && (mfd_mode < NUM_MFD_MODES));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@select_bla
  0000f	83 7d 08 0e	 cmp	 DWORD PTR _mfd_mode$[ebp], 14 ; 0000000eH
  00013	7c 18		 jl	 SHORT $LN2@select_bla
$LN3@select_bla:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 01	 add	 eax, 1
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@HPJGECJI@?$CImfd_mode?5?$DO?$DN?5MFD_MODE_OFF?$CJ?5?$CG?$CG?5?$CI@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@select_bla:

; 829  : 
; 830  : 	ASSERT (mfd_mode != MFD_MODE_LLLTV);

  0002d	83 7d 08 07	 cmp	 DWORD PTR _mfd_mode$[ebp], 7
  00031	75 18		 jne	 SHORT $LN4@select_bla
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z@4JA
  00038	83 c0 03	 add	 eax, 3
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@JNKLHOPK@mfd_mode?5?$CB?$DN?5MFD_MODE_LLLTV@
  00046	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@select_bla:

; 831  : 
; 832  : 	ASSERT ((location == MFD_LOCATION_LHS) || (location == MFD_LOCATION_RHS));

  0004b	83 7d 0c 00	 cmp	 DWORD PTR _location$[ebp], 0
  0004f	74 1e		 je	 SHORT $LN5@select_bla
  00051	83 7d 0c 01	 cmp	 DWORD PTR _location$[ebp], 1
  00055	74 18		 je	 SHORT $LN5@select_bla
  00057	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z@4JA
  0005c	83 c0 05	 add	 eax, 5
  0005f	50		 push	 eax
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@IBGHMIC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@HOBNFLGC@?$CIlocation?5?$DN?$DN?5MFD_LOCATION_LHS?$CJ?5@
  0006a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@select_bla:

; 833  : 
; 834  : 	if (location == MFD_LOCATION_LHS)

  0006f	83 7d 0c 00	 cmp	 DWORD PTR _location$[ebp], 0
  00073	75 75		 jne	 SHORT $LN6@select_bla

; 835  : 	{
; 836  : 		if ((mfd_mode == MFD_MODE_DAMAGED) && (lhs_mfd_mode == MFD_MODE_OFF))

  00075	83 7d 08 01	 cmp	 DWORD PTR _mfd_mode$[ebp], 1
  00079	75 10		 jne	 SHORT $LN8@select_bla
  0007b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 0
  00082	75 07		 jne	 SHORT $LN8@select_bla

; 837  : 		{
; 838  : 			mfd_mode = MFD_MODE_OFF;

  00084	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 0
$LN8@select_bla:

; 839  : 		}
; 840  : 
; 841  : 		if (blackhawk_damage.lh_mfd)

  0008b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  00090	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  00093	83 e0 01	 and	 eax, 1
  00096	74 0d		 je	 SHORT $LN9@select_bla

; 842  : 		{
; 843  : 			if (mfd_mode != MFD_MODE_OFF)

  00098	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  0009c	74 07		 je	 SHORT $LN9@select_bla

; 844  : 			{
; 845  : 				mfd_mode = MFD_MODE_DAMAGED;

  0009e	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 1
$LN9@select_bla:

; 846  : 			}
; 847  : 		}
; 848  : 
; 849  : 		if ((mfd_mode != MFD_MODE_OFF) && (mfd_mode != MFD_MODE_DAMAGED) && (mfd_mode == rhs_mfd_mode))

  000a5	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  000a9	74 1b		 je	 SHORT $LN11@select_bla
  000ab	83 7d 08 01	 cmp	 DWORD PTR _mfd_mode$[ebp], 1
  000af	74 15		 je	 SHORT $LN11@select_bla
  000b1	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  000b4	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A
  000ba	75 0a		 jne	 SHORT $LN11@select_bla

; 850  : 		{
; 851  : 			rhs_mfd_mode = MFD_MODE_OFF;

  000bc	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 0
$LN11@select_bla:

; 852  : 		}
; 853  : 
; 854  : 		lhs_mfd_mode = mfd_mode;

  000c6	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  000c9	a3 00 00 00 00	 mov	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, eax

; 855  : 
; 856  : 		debug_log ("LHS MFD: %s", mfd_mode_names[lhs_mfd_mode]);

  000ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A
  000d3	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?mfd_mode_names@@3PAPBDA[eax*4]
  000da	51		 push	 ecx
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0M@HNKHPKIB@LHS?5MFD?3?5?$CFs@
  000e0	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000e5	83 c4 08	 add	 esp, 8

; 857  : 	}
; 858  : 	else

  000e8	eb 73		 jmp	 SHORT $LN1@select_bla
$LN6@select_bla:

; 859  : 	{
; 860  : 		if ((mfd_mode == MFD_MODE_DAMAGED) && (rhs_mfd_mode == MFD_MODE_OFF))

  000ea	83 7d 08 01	 cmp	 DWORD PTR _mfd_mode$[ebp], 1
  000ee	75 10		 jne	 SHORT $LN12@select_bla
  000f0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, 0
  000f7	75 07		 jne	 SHORT $LN12@select_bla

; 861  : 		{
; 862  : 			mfd_mode = MFD_MODE_OFF;

  000f9	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 0
$LN12@select_bla:

; 863  : 		}
; 864  : 
; 865  : 		if (blackhawk_damage.rh_mfd)

  00100	a1 00 00 00 00	 mov	 eax, DWORD PTR ?blackhawk_damage@@3TBLACKHAWK_DAMAGE_FLAGS@@A ; blackhawk_damage
  00105	c1 e8 11	 shr	 eax, 17			; 00000011H
  00108	83 e0 01	 and	 eax, 1
  0010b	74 0d		 je	 SHORT $LN13@select_bla

; 866  : 		{
; 867  : 			if (mfd_mode != MFD_MODE_OFF)

  0010d	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  00111	74 07		 je	 SHORT $LN13@select_bla

; 868  : 			{
; 869  : 				mfd_mode = MFD_MODE_DAMAGED;

  00113	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 1
$LN13@select_bla:

; 870  : 			}
; 871  : 		}
; 872  : 
; 873  : 		if ((mfd_mode != MFD_MODE_OFF) && (mfd_mode != MFD_MODE_DAMAGED) && (mfd_mode == lhs_mfd_mode))

  0011a	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  0011e	74 1b		 je	 SHORT $LN15@select_bla
  00120	83 7d 08 01	 cmp	 DWORD PTR _mfd_mode$[ebp], 1
  00124	74 15		 je	 SHORT $LN15@select_bla
  00126	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00129	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A
  0012f	75 0a		 jne	 SHORT $LN15@select_bla

; 874  : 		{
; 875  : 			lhs_mfd_mode = MFD_MODE_OFF;

  00131	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?lhs_mfd_mode@@3W4MFD_MODES@@A, 0
$LN15@select_bla:

; 876  : 		}
; 877  : 
; 878  : 		rhs_mfd_mode = mfd_mode;

  0013b	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  0013e	a3 00 00 00 00	 mov	 DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A, eax

; 879  : 
; 880  : 		debug_log ("RHS MFD: %s", mfd_mode_names[rhs_mfd_mode]);

  00143	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rhs_mfd_mode@@3W4MFD_MODES@@A
  00148	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?mfd_mode_names@@3PAPBDA[eax*4]
  0014f	51		 push	 ecx
  00150	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JIIOMEGD@RHS?5MFD?3?5?$CFs@
  00155	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0015a	83 c4 08	 add	 esp, 8
$LN1@select_bla:

; 881  : 	}
; 882  : }

  0015d	5f		 pop	 edi
  0015e	5e		 pop	 esi
  0015f	5b		 pop	 ebx
  00160	8b e5		 mov	 esp, ebp
  00162	5d		 pop	 ebp
  00163	c2 08 00	 ret	 8
?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ENDP ; select_blackhawk_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?deinitialise_blackhawk_mfd@@YGXXZ
_TEXT	SEGMENT
?deinitialise_blackhawk_mfd@@YGXXZ PROC			; deinitialise_blackhawk_mfd, COMDAT

; 812  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 813  : 	destroy_2d_environment (mfd_env);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?destroy_2d_environment@@YGXPAUENV_2D@@@Z ; destroy_2d_environment

; 814  : 
; 815  : 	destroy_screen (lhs_mfd_texture_screen);

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lhs_mfd_texture_screen@@3PAUSCREEN@@A
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 816  : 	destroy_screen (rhs_mfd_texture_screen);

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rhs_mfd_texture_screen@@3PAUSCREEN@@A
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 817  : 
; 818  : 	destroy_screen (lhs_overlaid_mfd_texture_screen);

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lhs_overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 819  : 	destroy_screen (rhs_overlaid_mfd_texture_screen);

  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rhs_overlaid_mfd_texture_screen@@3PAUSCREEN@@A
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 820  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?deinitialise_blackhawk_mfd@@YGXXZ ENDP			; deinitialise_blackhawk_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\blackhawk\bh_mfd.c
;	COMDAT ?initialise_blackhawk_mfd@@YGXXZ
_TEXT	SEGMENT
tv75 = -68						; size = 4
?initialise_blackhawk_mfd@@YGXXZ PROC			; initialise_blackhawk_mfd, COMDAT

; 707  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 708  : 	if (command_line_dynamics_engine_startup)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_dynamics_engine_startup@@3HA, 0 ; command_line_dynamics_engine_startup
  00010	74 14		 je	 SHORT $LN4@initialise

; 709  : 	{
; 710  : 		select_blackhawk_mfd_mode (MFD_MODE_OFF, MFD_LOCATION_LHS);

  00012	6a 00		 push	 0
  00014	6a 00		 push	 0
  00016	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 711  : 		select_blackhawk_mfd_mode (MFD_MODE_OFF, MFD_LOCATION_RHS);

  0001b	6a 01		 push	 1
  0001d	6a 00		 push	 0
  0001f	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 712  : 	}
; 713  : 	else

  00024	eb 12		 jmp	 SHORT $LN5@initialise
$LN4@initialise:

; 714  : 	{
; 715  : 		select_blackhawk_mfd_mode (MFD_MODE_ENGINE, MFD_LOCATION_LHS);

  00026	6a 00		 push	 0
  00028	6a 0c		 push	 12			; 0000000cH
  0002a	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode

; 716  : 		select_blackhawk_mfd_mode (MFD_MODE_TSD, MFD_LOCATION_RHS);

  0002f	6a 01		 push	 1
  00031	6a 08		 push	 8
  00033	e8 00 00 00 00	 call	 ?select_blackhawk_mfd_mode@@YGXW4MFD_MODES@@W4MFD_LOCATIONS@@@Z ; select_blackhawk_mfd_mode
$LN5@initialise:

; 717  : 	}
; 718  : 
; 719  : 	tsd_ase_range = TSD_ASE_RANGE_5000;

  00038	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  00040	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_ase_range@@3MA, xmm0

; 720  : 
; 721  : 	tsd_declutter_level = TSD_DECLUTTER_LEVEL_ALL;

  00048	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0

; 722  : 
; 723  : 	tsd_threat_line_flash_timer = TSD_THREAT_LINE_FLASH_RATE;

  00052	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0005a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_threat_line_flash_timer@@3MA, xmm0

; 724  : 
; 725  : 	tsd_draw_threat_line_status = 0;

  00062	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tsd_draw_threat_line_status@@3HA, 0

; 726  : 
; 727  : 	ase_threat_line_flash_timer = ASE_THREAT_LINE_FLASH_RATE;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00074	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?ase_threat_line_flash_timer@@3MA, xmm0

; 728  : 
; 729  : 	ase_draw_threat_line_status = 0;

  0007c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ase_draw_threat_line_status@@3HA, 0

; 730  : 
; 731  : 	mfd_env = create_2d_environment ();

  00086	e8 00 00 00 00	 call	 ?create_2d_environment@@YGPAUENV_2D@@XZ ; create_2d_environment
  0008b	a3 00 00 00 00	 mov	 DWORD PTR ?mfd_env@@3PAUENV_2D@@A, eax

; 732  : 
; 733  : 
; 734  : 	if (!command_line_high_res_mfd)

  00090	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_high_res_mfd@@3HA, 0 ; command_line_high_res_mfd
  00097	75 2e		 jne	 SHORT $LN6@initialise

; 735  : 	{
; 736  : 		switch (get_view_mode ())

  00099	a1 00 00 00 00	 mov	 eax, DWORD PTR ?view_mode@@3W4VIEW_MODES@@A ; view_mode
  0009e	89 45 bc	 mov	 DWORD PTR tv75[ebp], eax
  000a1	83 7d bc 26	 cmp	 DWORD PTR tv75[ebp], 38	; 00000026H
  000a5	7c 14		 jl	 SHORT $LN9@initialise
  000a7	83 7d bc 29	 cmp	 DWORD PTR tv75[ebp], 41	; 00000029H
  000ab	7e 02		 jle	 SHORT $LN8@initialise
  000ad	eb 0c		 jmp	 SHORT $LN9@initialise
$LN8@initialise:

; 737  : 		{
; 738  : 		case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY:
; 739  : 		case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY:
; 740  : 		case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY:
; 741  : 		case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY:
; 742  : 			draw_large_mfd = TRUE;

  000af	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 1

; 743  : 			break;

  000b9	eb 0a		 jmp	 SHORT $LN2@initialise
$LN9@initialise:

; 744  : 		default:
; 745  : 			draw_large_mfd = FALSE;

  000bb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 0
$LN2@initialise:

; 746  : 			break;
; 747  : 		}
; 748  : 	}
; 749  : 	else

  000c5	eb 0a		 jmp	 SHORT $LN7@initialise
$LN6@initialise:

; 750  : 		draw_large_mfd = TRUE;

  000c7	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 1
$LN7@initialise:

; 751  : 		
; 752  : 	if (draw_large_mfd)

  000d1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  000d8	74 30		 je	 SHORT $LN10@initialise

; 753  : 	{
; 754  : 		mfd_viewport_size = MFD_VIEWPORT_LARGE_SIZE;

  000da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  000e2	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 755  : 		mfd_texture_size = MFD_TEXTURE_LARGE_SIZE;

  000ea	c7 05 00 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?mfd_texture_size@@3HA, 256 ; 00000100H

; 756  : 		eo_3d_texture_screen = large_eo_3d_texture_screen;

  000f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_eo_3d_texture_screen@@3PAUSCREEN@@A ; large_eo_3d_texture_screen
  000f9	a3 00 00 00 00	 mov	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, eax

; 757  : 		draw_line_func = draw_2d_half_thick_line;

  000fe	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_line_func@@3P6GXMMMMUREAL_COLOUR@@@ZA, OFFSET ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 758  : 	}
; 759  : 	else

  00108	eb 2e		 jmp	 SHORT $LN11@initialise
$LN10@initialise:

; 760  : 	{
; 761  : 		mfd_viewport_size = MFD_VIEWPORT_SMALL_SIZE;

  0010a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  00112	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 762  : 		mfd_texture_size = MFD_TEXTURE_SMALL_SIZE;

  0011a	c7 05 00 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?mfd_texture_size@@3HA, 128 ; 00000080H

; 763  : 		eo_3d_texture_screen = small_eo_3d_texture_screen;

  00124	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_eo_3d_texture_screen@@3PAUSCREEN@@A ; small_eo_3d_texture_screen
  00129	a3 00 00 00 00	 mov	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, eax

; 764  : 		draw_line_func = draw_2d_line;

  0012e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_line_func@@3P6GXMMMMUREAL_COLOUR@@@ZA, OFFSET ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN11@initialise:

; 765  : 	}
; 766  : 	mfd_viewport_texture_x_org = mfd_texture_size / 2;

  00138	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  0013d	99		 cdq
  0013e	2b c2		 sub	 eax, edx
  00140	d1 f8		 sar	 eax, 1
  00142	a3 00 00 00 00	 mov	 DWORD PTR ?mfd_viewport_texture_x_org@@3HA, eax

; 767  : 	mfd_viewport_texture_y_org = mfd_texture_size / 2;

  00147	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  0014c	99		 cdq
  0014d	2b c2		 sub	 eax, edx
  0014f	d1 f8		 sar	 eax, 1
  00151	a3 00 00 00 00	 mov	 DWORD PTR ?mfd_viewport_texture_y_org@@3HA, eax

; 768  : 
; 769  : 	lhs_mfd_texture_screen = create_system_texture_screen (mfd_texture_size, mfd_texture_size, TEXTURE_INDEX_AVCKPT_DISPLAY_LHS_MFD, TEXTURE_TYPE_SINGLEALPHA);

  00156	6a 02		 push	 2
  00158	68 f8 00 00 00	 push	 248			; 000000f8H
  0015d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  00162	50		 push	 eax
  00163	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00169	51		 push	 ecx
  0016a	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  0016f	a3 00 00 00 00	 mov	 DWORD PTR ?lhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 770  : 	rhs_mfd_texture_screen = create_system_texture_screen (mfd_texture_size, mfd_texture_size, TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD, TEXTURE_TYPE_SINGLEALPHA);

  00174	6a 02		 push	 2
  00176	68 f9 00 00 00	 push	 249			; 000000f9H
  0017b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  00180	50		 push	 eax
  00181	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  00187	51		 push	 ecx
  00188	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  0018d	a3 00 00 00 00	 mov	 DWORD PTR ?rhs_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 771  : 	lhs_overlaid_mfd_texture_screen = create_system_texture_screen (mfd_texture_size, mfd_texture_size, LHS_OVERLAID_MFD_TEXTURE_INDEX, TEXTURE_TYPE_SINGLEALPHA);

  00192	6a 02		 push	 2
  00194	68 54 06 00 00	 push	 1620			; 00000654H
  00199	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  0019e	50		 push	 eax
  0019f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  001a5	51		 push	 ecx
  001a6	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  001ab	a3 00 00 00 00	 mov	 DWORD PTR ?lhs_overlaid_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 772  : 	rhs_overlaid_mfd_texture_screen = create_system_texture_screen (mfd_texture_size, mfd_texture_size, RHS_OVERLAID_MFD_TEXTURE_INDEX, TEXTURE_TYPE_SINGLEALPHA);

  001b0	6a 02		 push	 2
  001b2	68 57 06 00 00	 push	 1623			; 00000657H
  001b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_texture_size@@3HA
  001bc	50		 push	 eax
  001bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_texture_size@@3HA
  001c3	51		 push	 ecx
  001c4	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  001c9	a3 00 00 00 00	 mov	 DWORD PTR ?rhs_overlaid_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 773  : 
; 774  : 	set_rgb_colour (MFD_COLOUR1,   0, 255,   0, 255);

  001ce	b8 04 00 00 00	 mov	 eax, 4
  001d3	6b c8 00	 imul	 ecx, eax, 0
  001d6	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  001dd	b8 04 00 00 00	 mov	 eax, 4
  001e2	6b c8 00	 imul	 ecx, eax, 0
  001e5	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  001ec	b8 04 00 00 00	 mov	 eax, 4
  001f1	6b c8 00	 imul	 ecx, eax, 0
  001f4	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  001fb	b8 04 00 00 00	 mov	 eax, 4
  00200	6b c8 00	 imul	 ecx, eax, 0
  00203	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 775  : 	set_rgb_colour (MFD_COLOUR2,   0, 200,   0, 255);

  0020a	b8 04 00 00 00	 mov	 eax, 4
  0020f	c1 e0 00	 shl	 eax, 0
  00212	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  00219	b8 04 00 00 00	 mov	 eax, 4
  0021e	c1 e0 00	 shl	 eax, 0
  00221	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  00228	b8 04 00 00 00	 mov	 eax, 4
  0022d	c1 e0 00	 shl	 eax, 0
  00230	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00237	b8 04 00 00 00	 mov	 eax, 4
  0023c	c1 e0 00	 shl	 eax, 0
  0023f	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 776  : 	set_rgb_colour (MFD_COLOUR3,   0, 176,   0, 255);

  00246	b8 04 00 00 00	 mov	 eax, 4
  0024b	d1 e0		 shl	 eax, 1
  0024d	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  00254	b8 04 00 00 00	 mov	 eax, 4
  00259	d1 e0		 shl	 eax, 1
  0025b	c6 80 01 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 176 ; 000000b0H
  00262	b8 04 00 00 00	 mov	 eax, 4
  00267	d1 e0		 shl	 eax, 1
  00269	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00270	b8 04 00 00 00	 mov	 eax, 4
  00275	d1 e0		 shl	 eax, 1
  00277	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 777  : 	set_rgb_colour (MFD_COLOUR4,   0, 151,   0, 255);

  0027e	b8 04 00 00 00	 mov	 eax, 4
  00283	6b c8 03	 imul	 ecx, eax, 3
  00286	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  0028d	b8 04 00 00 00	 mov	 eax, 4
  00292	6b c8 03	 imul	 ecx, eax, 3
  00295	c6 81 01 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 151 ; 00000097H
  0029c	b8 04 00 00 00	 mov	 eax, 4
  002a1	6b c8 03	 imul	 ecx, eax, 3
  002a4	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  002ab	b8 04 00 00 00	 mov	 eax, 4
  002b0	6b c8 03	 imul	 ecx, eax, 3
  002b3	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 778  : 	set_rgb_colour (MFD_COLOUR5,   0, 149,   0, 255);

  002ba	b8 04 00 00 00	 mov	 eax, 4
  002bf	c1 e0 02	 shl	 eax, 2
  002c2	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  002c9	b8 04 00 00 00	 mov	 eax, 4
  002ce	c1 e0 02	 shl	 eax, 2
  002d1	c6 80 01 00 00
	00 95		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 149 ; 00000095H
  002d8	b8 04 00 00 00	 mov	 eax, 4
  002dd	c1 e0 02	 shl	 eax, 2
  002e0	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  002e7	b8 04 00 00 00	 mov	 eax, 4
  002ec	c1 e0 02	 shl	 eax, 2
  002ef	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 779  : 	set_rgb_colour (MFD_COLOUR6,  40,  68,  56, 255);

  002f6	b8 04 00 00 00	 mov	 eax, 4
  002fb	6b c8 05	 imul	 ecx, eax, 5
  002fe	c6 81 02 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 40 ; 00000028H
  00305	b8 04 00 00 00	 mov	 eax, 4
  0030a	6b c8 05	 imul	 ecx, eax, 5
  0030d	c6 81 01 00 00
	00 44		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 68 ; 00000044H
  00314	b8 04 00 00 00	 mov	 eax, 4
  00319	6b c8 05	 imul	 ecx, eax, 5
  0031c	c6 81 00 00 00
	00 38		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 56 ; 00000038H
  00323	b8 04 00 00 00	 mov	 eax, 4
  00328	6b c8 05	 imul	 ecx, eax, 5
  0032b	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 780  : 
; 781  : 	set_rgb_colour (clear_mfd_colour, 0, 255, 0, 0);

  00332	c6 05 02 00 00
	00 00		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A+2, 0
  00339	c6 05 01 00 00
	00 ff		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A+1, 255 ; 000000ffH
  00340	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A, 0
  00347	c6 05 03 00 00
	00 00		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A+3, 0

; 782  : 	
; 783  : 	//VJ 030423 TSd render mod
; 784  : 	set_rgb_colour (MFD_COLOUR1,              0, 255,   0, 255);

  0034e	b8 04 00 00 00	 mov	 eax, 4
  00353	6b c8 00	 imul	 ecx, eax, 0
  00356	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  0035d	b8 04 00 00 00	 mov	 eax, 4
  00362	6b c8 00	 imul	 ecx, eax, 0
  00365	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  0036c	b8 04 00 00 00	 mov	 eax, 4
  00371	6b c8 00	 imul	 ecx, eax, 0
  00374	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  0037b	b8 04 00 00 00	 mov	 eax, 4
  00380	6b c8 00	 imul	 ecx, eax, 0
  00383	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 785  : 	set_rgb_colour (MFD_COLOUR2,              0, 200,   0, 255);

  0038a	b8 04 00 00 00	 mov	 eax, 4
  0038f	c1 e0 00	 shl	 eax, 0
  00392	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  00399	b8 04 00 00 00	 mov	 eax, 4
  0039e	c1 e0 00	 shl	 eax, 0
  003a1	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  003a8	b8 04 00 00 00	 mov	 eax, 4
  003ad	c1 e0 00	 shl	 eax, 0
  003b0	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  003b7	b8 04 00 00 00	 mov	 eax, 4
  003bc	c1 e0 00	 shl	 eax, 0
  003bf	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 786  : 	set_rgb_colour (MFD_COLOUR3,              0, 176,   0, 255);

  003c6	b8 04 00 00 00	 mov	 eax, 4
  003cb	d1 e0		 shl	 eax, 1
  003cd	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  003d4	b8 04 00 00 00	 mov	 eax, 4
  003d9	d1 e0		 shl	 eax, 1
  003db	c6 80 01 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 176 ; 000000b0H
  003e2	b8 04 00 00 00	 mov	 eax, 4
  003e7	d1 e0		 shl	 eax, 1
  003e9	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  003f0	b8 04 00 00 00	 mov	 eax, 4
  003f5	d1 e0		 shl	 eax, 1
  003f7	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 787  : 	set_rgb_colour (MFD_COLOUR4,              0, 151,   0, 255);

  003fe	b8 04 00 00 00	 mov	 eax, 4
  00403	6b c8 03	 imul	 ecx, eax, 3
  00406	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  0040d	b8 04 00 00 00	 mov	 eax, 4
  00412	6b c8 03	 imul	 ecx, eax, 3
  00415	c6 81 01 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 151 ; 00000097H
  0041c	b8 04 00 00 00	 mov	 eax, 4
  00421	6b c8 03	 imul	 ecx, eax, 3
  00424	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  0042b	b8 04 00 00 00	 mov	 eax, 4
  00430	6b c8 03	 imul	 ecx, eax, 3
  00433	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 788  : 	set_rgb_colour (MFD_COLOUR5,              0, 128,   0, 255);

  0043a	b8 04 00 00 00	 mov	 eax, 4
  0043f	c1 e0 02	 shl	 eax, 2
  00442	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  00449	b8 04 00 00 00	 mov	 eax, 4
  0044e	c1 e0 02	 shl	 eax, 2
  00451	c6 80 01 00 00
	00 80		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 128 ; 00000080H
  00458	b8 04 00 00 00	 mov	 eax, 4
  0045d	c1 e0 02	 shl	 eax, 2
  00460	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00467	b8 04 00 00 00	 mov	 eax, 4
  0046c	c1 e0 02	 shl	 eax, 2
  0046f	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 789  : 	set_rgb_colour (MFD_COLOUR6,             40,  68,  56, 255);

  00476	b8 04 00 00 00	 mov	 eax, 4
  0047b	6b c8 05	 imul	 ecx, eax, 5
  0047e	c6 81 02 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 40 ; 00000028H
  00485	b8 04 00 00 00	 mov	 eax, 4
  0048a	6b c8 05	 imul	 ecx, eax, 5
  0048d	c6 81 01 00 00
	00 44		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 68 ; 00000044H
  00494	b8 04 00 00 00	 mov	 eax, 4
  00499	6b c8 05	 imul	 ecx, eax, 5
  0049c	c6 81 00 00 00
	00 38		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 56 ; 00000038H
  004a3	b8 04 00 00 00	 mov	 eax, 4
  004a8	6b c8 05	 imul	 ecx, eax, 5
  004ab	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 790  : 	set_rgb_colour (MFD_CONTOUR_COLOUR,     255, 100,   0, 255);

  004b2	b8 04 00 00 00	 mov	 eax, 4
  004b7	6b c8 06	 imul	 ecx, eax, 6
  004ba	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  004c1	b8 04 00 00 00	 mov	 eax, 4
  004c6	6b c8 06	 imul	 ecx, eax, 6
  004c9	c6 81 01 00 00
	00 64		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 100 ; 00000064H
  004d0	b8 04 00 00 00	 mov	 eax, 4
  004d5	6b c8 06	 imul	 ecx, eax, 6
  004d8	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  004df	b8 04 00 00 00	 mov	 eax, 4
  004e4	6b c8 06	 imul	 ecx, eax, 6
  004e7	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 791  : 	set_rgb_colour (MFD_RIVER_COLOUR,        50,  75, 225, 255);

  004ee	b8 04 00 00 00	 mov	 eax, 4
  004f3	6b c8 07	 imul	 ecx, eax, 7
  004f6	c6 81 02 00 00
	00 32		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 50 ; 00000032H
  004fd	b8 04 00 00 00	 mov	 eax, 4
  00502	6b c8 07	 imul	 ecx, eax, 7
  00505	c6 81 01 00 00
	00 4b		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 75 ; 0000004bH
  0050c	b8 04 00 00 00	 mov	 eax, 4
  00511	6b c8 07	 imul	 ecx, eax, 7
  00514	c6 81 00 00 00
	00 e1		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 225 ; 000000e1H
  0051b	b8 04 00 00 00	 mov	 eax, 4
  00520	6b c8 07	 imul	 ecx, eax, 7
  00523	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 792  : 	set_rgb_colour (MFD_ROAD_COLOUR,        255, 200,   0, 255);

  0052a	b8 04 00 00 00	 mov	 eax, 4
  0052f	c1 e0 03	 shl	 eax, 3
  00532	c6 80 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 255 ; 000000ffH
  00539	b8 04 00 00 00	 mov	 eax, 4
  0053e	c1 e0 03	 shl	 eax, 3
  00541	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  00548	b8 04 00 00 00	 mov	 eax, 4
  0054d	c1 e0 03	 shl	 eax, 3
  00550	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00557	b8 04 00 00 00	 mov	 eax, 4
  0055c	c1 e0 03	 shl	 eax, 3
  0055f	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 793  : 	set_rgb_colour (MFD_BACKGROUND_COLOUR,   15,  24,  16, 255);

  00566	b8 04 00 00 00	 mov	 eax, 4
  0056b	6b c8 09	 imul	 ecx, eax, 9
  0056e	c6 81 02 00 00
	00 0f		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 15 ; 0000000fH
  00575	b8 04 00 00 00	 mov	 eax, 4
  0057a	6b c8 09	 imul	 ecx, eax, 9
  0057d	c6 81 01 00 00
	00 18		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 24 ; 00000018H
  00584	b8 04 00 00 00	 mov	 eax, 4
  00589	6b c8 09	 imul	 ecx, eax, 9
  0058c	c6 81 00 00 00
	00 10		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 16 ; 00000010H
  00593	b8 04 00 00 00	 mov	 eax, 4
  00598	6b c8 09	 imul	 ecx, eax, 9
  0059b	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 794  : 	set_rgb_colour (MFD_CLEAR_COLOUR,         0,   0,   0,   0);

  005a2	b8 04 00 00 00	 mov	 eax, 4
  005a7	6b c8 0a	 imul	 ecx, eax, 10
  005aa	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  005b1	b8 04 00 00 00	 mov	 eax, 4
  005b6	6b c8 0a	 imul	 ecx, eax, 10
  005b9	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 0
  005c0	b8 04 00 00 00	 mov	 eax, 4
  005c5	6b c8 0a	 imul	 ecx, eax, 10
  005c8	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  005cf	b8 04 00 00 00	 mov	 eax, 4
  005d4	6b c8 0a	 imul	 ecx, eax, 10
  005d7	c6 81 03 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 0

; 795  : 
; 796  : 	set_rgb_colour (TEXT_COLOUR1,           254, 204,   1, 255);

  005de	b8 04 00 00 00	 mov	 eax, 4
  005e3	6b c8 00	 imul	 ecx, eax, 0
  005e6	c6 81 02 00 00
	00 fe		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx+2], 254 ; 000000feH
  005ed	b8 04 00 00 00	 mov	 eax, 4
  005f2	6b c8 00	 imul	 ecx, eax, 0
  005f5	c6 81 01 00 00
	00 cc		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx+1], 204 ; 000000ccH
  005fc	b8 04 00 00 00	 mov	 eax, 4
  00601	6b c8 00	 imul	 ecx, eax, 0
  00604	c6 81 00 00 00
	00 01		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx], 1
  0060b	b8 04 00 00 00	 mov	 eax, 4
  00610	6b c8 00	 imul	 ecx, eax, 0
  00613	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 797  : 	set_rgb_colour (TEXT_BACKGROUND_COLOUR,  66,  35,  11, 255);

  0061a	b8 04 00 00 00	 mov	 eax, 4
  0061f	c1 e0 00	 shl	 eax, 0
  00622	c6 80 02 00 00
	00 42		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax+2], 66 ; 00000042H
  00629	b8 04 00 00 00	 mov	 eax, 4
  0062e	c1 e0 00	 shl	 eax, 0
  00631	c6 80 01 00 00
	00 23		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax+1], 35 ; 00000023H
  00638	b8 04 00 00 00	 mov	 eax, 4
  0063d	c1 e0 00	 shl	 eax, 0
  00640	c6 80 00 00 00
	00 0b		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax], 11 ; 0000000bH
  00647	b8 04 00 00 00	 mov	 eax, 4
  0064c	c1 e0 00	 shl	 eax, 0
  0064f	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 798  : 
; 799  : 	if(command_line_export_mfd)

  00656	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_export_mfd@@3HA, 0 ; command_line_export_mfd
  0065d	74 14		 je	 SHORT $LN12@initialise

; 800  : 	{
; 801  : 		clear_mfd_colour=MFD_COLOUR6;

  0065f	b8 04 00 00 00	 mov	 eax, 4
  00664	6b c8 05	 imul	 ecx, eax, 5
  00667	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0066d	89 15 00 00 00
	00		 mov	 DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A, edx
$LN12@initialise:

; 802  : 	}
; 803  :    Initialise_TSD_render_terrain();

  00673	e8 00 00 00 00	 call	 ?Initialise_TSD_render_terrain@@YGXXZ ; Initialise_TSD_render_terrain

; 804  : 
; 805  : }

  00678	5f		 pop	 edi
  00679	5e		 pop	 esi
  0067a	5b		 pop	 ebx
  0067b	8b e5		 mov	 esp, ebp
  0067d	5d		 pop	 ebp
  0067e	c3		 ret	 0
?initialise_blackhawk_mfd@@YGXXZ ENDP			; initialise_blackhawk_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan2@@YGMMM@Z
_TEXT	SEGMENT
__Yx$ = 8						; size = 4
__Xx$ = 12						; size = 4
?atan2@@YGMMM@Z PROC					; atan2, COMDAT

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return (_CSTD atan2f(_Yx, _Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _atan2f
  00024	83 c4 08	 add	 esp, 8

; 58   : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?atan2@@YGMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv74 = -68						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 633  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 634  :             return (float)atan2(_Y, _X);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _atan2
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 635  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
