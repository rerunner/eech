; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\maths\range.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_fabsf
PUBLIC	_sqrtf
PUBLIC	?fabs@@YGMM@Z					; fabs
PUBLIC	?sqrt@@YGMM@Z					; sqrt
PUBLIC	?get_2d_range@@YGMPBUVEC3D@@0@Z			; get_2d_range
PUBLIC	?get_sqr_2d_range@@YGMPBUVEC3D@@0@Z		; get_sqr_2d_range
PUBLIC	?get_2d_double_range@@YGNPBUDOUBLE_VEC3D@@0@Z	; get_2d_double_range
PUBLIC	?get_sqr_2d_double_range@@YGNPBUDOUBLE_VEC3D@@0@Z ; get_sqr_2d_double_range
PUBLIC	?get_approx_2d_range@@YGMPBUVEC3D@@0@Z		; get_approx_2d_range
PUBLIC	?get_3d_range@@YGMPBUVEC3D@@0@Z			; get_3d_range
PUBLIC	?get_sqr_3d_range@@YGMPBUVEC3D@@0@Z		; get_sqr_3d_range
PUBLIC	?get_approx_3d_range@@YGMPBUVEC3D@@0@Z		; get_approx_3d_range
PUBLIC	?__LINE__Var@?0??get_2d_range@@YGMPBUVEC3D@@0@Z@4JA ; `get_2d_range'::`1'::__LINE__Var
PUBLIC	??_C@_0DD@PKLGKHOO@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_02JGJPDFLN@v1@				; `string'
PUBLIC	??_C@_02LNLCGGHO@v2@				; `string'
PUBLIC	?__LINE__Var@?0??get_sqr_2d_range@@YGMPBUVEC3D@@0@Z@4JA ; `get_sqr_2d_range'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_2d_double_range@@YGNPBUDOUBLE_VEC3D@@0@Z@4JA ; `get_2d_double_range'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_sqr_2d_double_range@@YGNPBUDOUBLE_VEC3D@@0@Z@4JA ; `get_sqr_2d_double_range'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_approx_2d_range@@YGMPBUVEC3D@@0@Z@4JA ; `get_approx_2d_range'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_3d_range@@YGMPBUVEC3D@@0@Z@4JA ; `get_3d_range'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_sqr_3d_range@@YGMPBUVEC3D@@0@Z@4JA ; `get_sqr_3d_range'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_approx_3d_range@@YGMPBUVEC3D@@0@Z@4JA ; `get_approx_3d_range'::`1'::__LINE__Var
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@4010000000000000
EXTRN	_fabs:PROC
EXTRN	_sqrt:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	__fltused:DWORD
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_approx_3d_range@@YGMPBUVEC3D@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_approx_3d_range@@YGMPBUVEC3D@@0@Z@4JA DD 0efH ; `get_approx_3d_range'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_sqr_3d_range@@YGMPBUVEC3D@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_sqr_3d_range@@YGMPBUVEC3D@@0@Z@4JA DD 0d7H ; `get_sqr_3d_range'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_3d_range@@YGMPBUVEC3D@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_3d_range@@YGMPBUVEC3D@@0@Z@4JA DD 0bfH ; `get_3d_range'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_approx_2d_range@@YGMPBUVEC3D@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_approx_2d_range@@YGMPBUVEC3D@@0@Z@4JA DD 0a2H ; `get_approx_2d_range'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_sqr_2d_double_range@@YGNPBUDOUBLE_VEC3D@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_sqr_2d_double_range@@YGNPBUDOUBLE_VEC3D@@0@Z@4JA DD 08cH ; `get_sqr_2d_double_range'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_2d_double_range@@YGNPBUDOUBLE_VEC3D@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_2d_double_range@@YGNPBUDOUBLE_VEC3D@@0@Z@4JA DD 076H ; `get_2d_double_range'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_sqr_2d_range@@YGMPBUVEC3D@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_sqr_2d_range@@YGMPBUVEC3D@@0@Z@4JA DD 060H ; `get_sqr_2d_range'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02LNLCGGHO@v2@
CONST	SEGMENT
??_C@_02LNLCGGHO@v2@ DB 'v2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JGJPDFLN@v1@
CONST	SEGMENT
??_C@_02JGJPDFLN@v1@ DB 'v1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@PKLGKHOO@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DD@PKLGKHOO@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\maths\range.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_2d_range@@YGMPBUVEC3D@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_2d_range@@YGMPBUVEC3D@@0@Z@4JA DD 04aH ; `get_2d_range'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\range.c
;	COMDAT ?get_approx_3d_range@@YGMPBUVEC3D@@0@Z
_TEXT	SEGMENT
_range$ = -20						; size = 4
_tmp$ = -16						; size = 4
_dz$ = -12						; size = 4
_dy$ = -8						; size = 4
_dx$ = -4						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
?get_approx_3d_range@@YGMPBUVEC3D@@0@Z PROC		; get_approx_3d_range, COMDAT

; 239  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 240  : 	float
; 241  : 		dx,
; 242  : 		dy,
; 243  : 		dz,
; 244  : 		tmp,
; 245  : 		range;
; 246  : 
; 247  : 	ASSERT (v1);

  00009	83 7d 08 00	 cmp	 DWORD PTR _v1$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_approx
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_approx_3d_range@@YGMPBUVEC3D@@0@Z@4JA
  00014	83 c0 08	 add	 eax, 8
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@PKLGKHOO@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02JGJPDFLN@v1@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_approx:

; 248  : 	ASSERT (v2);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _v2$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@get_approx
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_approx_3d_range@@YGMPBUVEC3D@@0@Z@4JA
  00032	83 c0 09	 add	 eax, 9
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@PKLGKHOO@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_02LNLCGGHO@v2@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_approx:

; 249  : 
; 250  : 	dx = fabs (v1->x - v2->x);

  00045	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  00048	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  0004b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0004f	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00053	51		 push	 ecx
  00054	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00059	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  0005e	d9 5d fc	 fstp	 DWORD PTR _dx$[ebp]

; 251  : 	dy = fabs (v1->y - v2->y);

  00061	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  00064	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  00067	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0006c	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00071	51		 push	 ecx
  00072	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00077	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  0007c	d9 5d f8	 fstp	 DWORD PTR _dy$[ebp]

; 252  : 	dz = fabs (v1->z - v2->z);

  0007f	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  00082	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  00085	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0008a	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0008f	51		 push	 ecx
  00090	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00095	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  0009a	d9 5d f4	 fstp	 DWORD PTR _dz$[ebp]

; 253  : 
; 254  : 	//
; 255  : 	// approx 3D range = max + ((med + min) / 4) (only need to find max value)
; 256  : 	//
; 257  : 
; 258  : 	if (dx < dy)

  0009d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  000a2	0f 2f 45 fc	 comiss	 xmm0, DWORD PTR _dx$[ebp]
  000a6	76 1e		 jbe	 SHORT $LN4@get_approx

; 259  : 	{
; 260  : 		tmp = dx; dx = dy; dy = tmp;

  000a8	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _dx$[ebp]
  000ad	f3 0f 11 45 f0	 movss	 DWORD PTR _tmp$[ebp], xmm0
  000b2	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  000b7	f3 0f 11 45 fc	 movss	 DWORD PTR _dx$[ebp], xmm0
  000bc	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _tmp$[ebp]
  000c1	f3 0f 11 45 f8	 movss	 DWORD PTR _dy$[ebp], xmm0
$LN4@get_approx:

; 261  : 	}
; 262  : 
; 263  : 	if (dx < dz)

  000c6	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _dz$[ebp]
  000cb	0f 2f 45 fc	 comiss	 xmm0, DWORD PTR _dx$[ebp]
  000cf	76 1e		 jbe	 SHORT $LN5@get_approx

; 264  : 	{
; 265  : 		tmp = dx; dx = dz; dz = tmp;

  000d1	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _dx$[ebp]
  000d6	f3 0f 11 45 f0	 movss	 DWORD PTR _tmp$[ebp], xmm0
  000db	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _dz$[ebp]
  000e0	f3 0f 11 45 fc	 movss	 DWORD PTR _dx$[ebp], xmm0
  000e5	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _tmp$[ebp]
  000ea	f3 0f 11 45 f4	 movss	 DWORD PTR _dz$[ebp], xmm0
$LN5@get_approx:

; 266  : 	}
; 267  : 
; 268  : 	range = dx + ((dy + dz) * (1.0 / 4.0));

  000ef	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _dx$[ebp]
  000f4	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _dy$[ebp]
  000f9	f3 0f 58 4d f4	 addss	 xmm1, DWORD PTR _dz$[ebp]
  000fe	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00102	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fd0000000000000
  0010a	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0010e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00112	f3 0f 11 45 ec	 movss	 DWORD PTR _range$[ebp], xmm0

; 269  : 
; 270  : 	return (range);

  00117	d9 45 ec	 fld	 DWORD PTR _range$[ebp]

; 271  : }

  0011a	5f		 pop	 edi
  0011b	5e		 pop	 esi
  0011c	5b		 pop	 ebx
  0011d	8b e5		 mov	 esp, ebp
  0011f	5d		 pop	 ebp
  00120	c2 08 00	 ret	 8
?get_approx_3d_range@@YGMPBUVEC3D@@0@Z ENDP		; get_approx_3d_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\range.c
;	COMDAT ?get_sqr_3d_range@@YGMPBUVEC3D@@0@Z
_TEXT	SEGMENT
_range$ = -16						; size = 4
_dz$ = -12						; size = 4
_dy$ = -8						; size = 4
_dx$ = -4						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
?get_sqr_3d_range@@YGMPBUVEC3D@@0@Z PROC		; get_sqr_3d_range, COMDAT

; 215  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 216  : 	float
; 217  : 		dx,
; 218  : 		dy,
; 219  : 		dz,
; 220  : 		range;
; 221  : 
; 222  : 	ASSERT (v1);

  00009	83 7d 08 00	 cmp	 DWORD PTR _v1$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_sqr_3d
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_sqr_3d_range@@YGMPBUVEC3D@@0@Z@4JA
  00014	83 c0 07	 add	 eax, 7
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@PKLGKHOO@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02JGJPDFLN@v1@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_sqr_3d:

; 223  : 	ASSERT (v2);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _v2$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@get_sqr_3d
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_sqr_3d_range@@YGMPBUVEC3D@@0@Z@4JA
  00032	83 c0 08	 add	 eax, 8
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@PKLGKHOO@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_02LNLCGGHO@v2@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_sqr_3d:

; 224  : 
; 225  : 	dx = v1->x - v2->x;

  00045	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  00048	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  0004b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0004f	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00053	f3 0f 11 45 fc	 movss	 DWORD PTR _dx$[ebp], xmm0

; 226  : 	dy = v1->y - v2->y;

  00058	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  0005e	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00063	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00068	f3 0f 11 45 f8	 movss	 DWORD PTR _dy$[ebp], xmm0

; 227  : 	dz = v1->z - v2->z;

  0006d	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  00073	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00078	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0007d	f3 0f 11 45 f4	 movss	 DWORD PTR _dz$[ebp], xmm0

; 228  : 
; 229  : 	range = (dx * dx) + (dy * dy) + (dz * dz);

  00082	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00087	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _dx$[ebp]
  0008c	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _dy$[ebp]
  00091	f3 0f 59 4d f8	 mulss	 xmm1, DWORD PTR _dy$[ebp]
  00096	f3 0f 58 c1	 addss	 xmm0, xmm1
  0009a	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _dz$[ebp]
  0009f	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR _dz$[ebp]
  000a4	f3 0f 58 c1	 addss	 xmm0, xmm1
  000a8	f3 0f 11 45 f0	 movss	 DWORD PTR _range$[ebp], xmm0

; 230  : 
; 231  : 	return (range);

  000ad	d9 45 f0	 fld	 DWORD PTR _range$[ebp]

; 232  : }

  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 08 00	 ret	 8
?get_sqr_3d_range@@YGMPBUVEC3D@@0@Z ENDP		; get_sqr_3d_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\range.c
;	COMDAT ?get_3d_range@@YGMPBUVEC3D@@0@Z
_TEXT	SEGMENT
_range$ = -16						; size = 4
_dz$ = -12						; size = 4
_dy$ = -8						; size = 4
_dx$ = -4						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
?get_3d_range@@YGMPBUVEC3D@@0@Z PROC			; get_3d_range, COMDAT

; 191  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 192  : 	float
; 193  : 		dx,
; 194  : 		dy,
; 195  : 		dz,
; 196  : 		range;
; 197  : 
; 198  : 	ASSERT (v1);

  00009	83 7d 08 00	 cmp	 DWORD PTR _v1$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_3d_ran
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_range@@YGMPBUVEC3D@@0@Z@4JA
  00014	83 c0 07	 add	 eax, 7
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@PKLGKHOO@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02JGJPDFLN@v1@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_3d_ran:

; 199  : 	ASSERT (v2);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _v2$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@get_3d_ran
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_3d_range@@YGMPBUVEC3D@@0@Z@4JA
  00032	83 c0 08	 add	 eax, 8
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@PKLGKHOO@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_02LNLCGGHO@v2@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_3d_ran:

; 200  : 
; 201  : 	dx = v1->x - v2->x;

  00045	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  00048	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  0004b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0004f	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00053	f3 0f 11 45 fc	 movss	 DWORD PTR _dx$[ebp], xmm0

; 202  : 	dy = v1->y - v2->y;

  00058	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  0005e	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00063	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00068	f3 0f 11 45 f8	 movss	 DWORD PTR _dy$[ebp], xmm0

; 203  : 	dz = v1->z - v2->z;

  0006d	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  00073	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00078	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0007d	f3 0f 11 45 f4	 movss	 DWORD PTR _dz$[ebp], xmm0

; 204  : 
; 205  : 	range = sqrt ((dx * dx) + (dy * dy) + (dz * dz));

  00082	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00087	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _dx$[ebp]
  0008c	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _dy$[ebp]
  00091	f3 0f 59 4d f8	 mulss	 xmm1, DWORD PTR _dy$[ebp]
  00096	f3 0f 58 c1	 addss	 xmm0, xmm1
  0009a	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _dz$[ebp]
  0009f	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR _dz$[ebp]
  000a4	f3 0f 58 c1	 addss	 xmm0, xmm1
  000a8	51		 push	 ecx
  000a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ae	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  000b3	d9 5d f0	 fstp	 DWORD PTR _range$[ebp]

; 206  : 
; 207  : 	return (range);

  000b6	d9 45 f0	 fld	 DWORD PTR _range$[ebp]

; 208  : }

  000b9	5f		 pop	 edi
  000ba	5e		 pop	 esi
  000bb	5b		 pop	 ebx
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c2 08 00	 ret	 8
?get_3d_range@@YGMPBUVEC3D@@0@Z ENDP			; get_3d_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\range.c
;	COMDAT ?get_approx_2d_range@@YGMPBUVEC3D@@0@Z
_TEXT	SEGMENT
_range$ = -12						; size = 4
_dz$ = -8						; size = 4
_dx$ = -4						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
?get_approx_2d_range@@YGMPBUVEC3D@@0@Z PROC		; get_approx_2d_range, COMDAT

; 162  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 163  : 	float
; 164  : 		dx,
; 165  : 		dz,
; 166  : 		range;
; 167  : 
; 168  : 	ASSERT (v1);

  00009	83 7d 08 00	 cmp	 DWORD PTR _v1$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_approx
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_approx_2d_range@@YGMPBUVEC3D@@0@Z@4JA
  00014	83 c0 06	 add	 eax, 6
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@PKLGKHOO@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02JGJPDFLN@v1@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_approx:

; 169  : 	ASSERT (v2);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _v2$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@get_approx
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_approx_2d_range@@YGMPBUVEC3D@@0@Z@4JA
  00032	83 c0 07	 add	 eax, 7
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@PKLGKHOO@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_02LNLCGGHO@v2@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_approx:

; 170  : 
; 171  : 	dx = fabs (v1->x - v2->x);

  00045	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  00048	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  0004b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0004f	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00053	51		 push	 ecx
  00054	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00059	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  0005e	d9 5d fc	 fstp	 DWORD PTR _dx$[ebp]

; 172  : 	dz = fabs (v1->z - v2->z);

  00061	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  00064	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  00067	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0006c	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00071	51		 push	 ecx
  00072	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00077	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  0007c	d9 5d f8	 fstp	 DWORD PTR _dz$[ebp]

; 173  : 
; 174  : 	if (dx > dz)

  0007f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00084	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _dz$[ebp]
  00088	76 29		 jbe	 SHORT $LN4@get_approx

; 175  : 	{
; 176  : 		range = ((dx * 4.0) + dz) * (1.0 / 4.0);

  0008a	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _dx$[ebp]
  0008f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4010000000000000
  00097	f3 0f 5a 4d f8	 cvtss2sd xmm1, DWORD PTR _dz$[ebp]
  0009c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000a0	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd0000000000000
  000a8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ac	f3 0f 11 45 f4	 movss	 DWORD PTR _range$[ebp], xmm0

; 177  : 	}
; 178  : 	else

  000b1	eb 27		 jmp	 SHORT $LN5@get_approx
$LN4@get_approx:

; 179  : 	{
; 180  : 		range = ((dz * 4.0) + dx) * (1.0 / 4.0);

  000b3	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _dz$[ebp]
  000b8	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4010000000000000
  000c0	f3 0f 5a 4d fc	 cvtss2sd xmm1, DWORD PTR _dx$[ebp]
  000c5	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000c9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd0000000000000
  000d1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000d5	f3 0f 11 45 f4	 movss	 DWORD PTR _range$[ebp], xmm0
$LN5@get_approx:

; 181  : 	}
; 182  : 
; 183  : 	return (range);

  000da	d9 45 f4	 fld	 DWORD PTR _range$[ebp]

; 184  : }

  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
?get_approx_2d_range@@YGMPBUVEC3D@@0@Z ENDP		; get_approx_2d_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\range.c
;	COMDAT ?get_sqr_2d_double_range@@YGNPBUDOUBLE_VEC3D@@0@Z
_TEXT	SEGMENT
_range$ = -24						; size = 8
_dz$ = -16						; size = 8
_dx$ = -8						; size = 8
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
?get_sqr_2d_double_range@@YGNPBUDOUBLE_VEC3D@@0@Z PROC	; get_sqr_2d_double_range, COMDAT

; 140  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 141  : 	double
; 142  : 		dx,
; 143  : 		dz,
; 144  : 		range;
; 145  : 
; 146  : 	ASSERT (v1);

  00009	83 7d 08 00	 cmp	 DWORD PTR _v1$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_sqr_2d
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_sqr_2d_double_range@@YGNPBUDOUBLE_VEC3D@@0@Z@4JA
  00014	83 c0 06	 add	 eax, 6
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@PKLGKHOO@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02JGJPDFLN@v1@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_sqr_2d:

; 147  : 	ASSERT (v2);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _v2$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@get_sqr_2d
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_sqr_2d_double_range@@YGNPBUDOUBLE_VEC3D@@0@Z@4JA
  00032	83 c0 07	 add	 eax, 7
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@PKLGKHOO@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_02LNLCGGHO@v2@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_sqr_2d:

; 148  : 
; 149  : 	dx = v1->x - v2->x;

  00045	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  00048	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  0004b	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  0004f	f2 0f 5c 01	 subsd	 xmm0, QWORD PTR [ecx]
  00053	f2 0f 11 45 f8	 movsd	 QWORD PTR _dx$[ebp], xmm0

; 150  : 	dz = v1->z - v2->z;

  00058	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  0005e	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
  00063	f2 0f 5c 41 10	 subsd	 xmm0, QWORD PTR [ecx+16]
  00068	f2 0f 11 45 f0	 movsd	 QWORD PTR _dz$[ebp], xmm0

; 151  : 
; 152  : 	range = (dx * dx) + (dz * dz);

  0006d	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _dx$[ebp]
  00072	f2 0f 59 45 f8	 mulsd	 xmm0, QWORD PTR _dx$[ebp]
  00077	f2 0f 10 4d f0	 movsd	 xmm1, QWORD PTR _dz$[ebp]
  0007c	f2 0f 59 4d f0	 mulsd	 xmm1, QWORD PTR _dz$[ebp]
  00081	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00085	f2 0f 11 45 e8	 movsd	 QWORD PTR _range$[ebp], xmm0

; 153  : 
; 154  : 	return (range);

  0008a	dd 45 e8	 fld	 QWORD PTR _range$[ebp]

; 155  : }

  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 08 00	 ret	 8
?get_sqr_2d_double_range@@YGNPBUDOUBLE_VEC3D@@0@Z ENDP	; get_sqr_2d_double_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\range.c
;	COMDAT ?get_2d_double_range@@YGNPBUDOUBLE_VEC3D@@0@Z
_TEXT	SEGMENT
_range$ = -24						; size = 8
_dz$ = -16						; size = 8
_dx$ = -8						; size = 8
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
?get_2d_double_range@@YGNPBUDOUBLE_VEC3D@@0@Z PROC	; get_2d_double_range, COMDAT

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 119  : 	double
; 120  : 		dx,
; 121  : 		dz,
; 122  : 		range;
; 123  : 
; 124  : 	ASSERT (v1);

  00009	83 7d 08 00	 cmp	 DWORD PTR _v1$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_2d_dou
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_2d_double_range@@YGNPBUDOUBLE_VEC3D@@0@Z@4JA
  00014	83 c0 06	 add	 eax, 6
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@PKLGKHOO@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02JGJPDFLN@v1@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_2d_dou:

; 125  : 	ASSERT (v2);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _v2$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@get_2d_dou
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_2d_double_range@@YGNPBUDOUBLE_VEC3D@@0@Z@4JA
  00032	83 c0 07	 add	 eax, 7
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@PKLGKHOO@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_02LNLCGGHO@v2@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_2d_dou:

; 126  : 
; 127  : 	dx = v1->x - v2->x;

  00045	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  00048	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  0004b	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  0004f	f2 0f 5c 01	 subsd	 xmm0, QWORD PTR [ecx]
  00053	f2 0f 11 45 f8	 movsd	 QWORD PTR _dx$[ebp], xmm0

; 128  : 	dz = v1->z - v2->z;

  00058	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  0005e	f2 0f 10 40 10	 movsd	 xmm0, QWORD PTR [eax+16]
  00063	f2 0f 5c 41 10	 subsd	 xmm0, QWORD PTR [ecx+16]
  00068	f2 0f 11 45 f0	 movsd	 QWORD PTR _dz$[ebp], xmm0

; 129  : 
; 130  : 	range = sqrt ((dx * dx) + (dz * dz));

  0006d	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _dx$[ebp]
  00072	f2 0f 59 45 f8	 mulsd	 xmm0, QWORD PTR _dx$[ebp]
  00077	f2 0f 10 4d f0	 movsd	 xmm1, QWORD PTR _dz$[ebp]
  0007c	f2 0f 59 4d f0	 mulsd	 xmm1, QWORD PTR _dz$[ebp]
  00081	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00085	83 ec 08	 sub	 esp, 8
  00088	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0008d	e8 00 00 00 00	 call	 _sqrt
  00092	83 c4 08	 add	 esp, 8
  00095	dd 5d e8	 fstp	 QWORD PTR _range$[ebp]

; 131  : 
; 132  : 	return (range);

  00098	dd 45 e8	 fld	 QWORD PTR _range$[ebp]

; 133  : }

  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 08 00	 ret	 8
?get_2d_double_range@@YGNPBUDOUBLE_VEC3D@@0@Z ENDP	; get_2d_double_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\range.c
;	COMDAT ?get_sqr_2d_range@@YGMPBUVEC3D@@0@Z
_TEXT	SEGMENT
_range$ = -12						; size = 4
_dz$ = -8						; size = 4
_dx$ = -4						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
?get_sqr_2d_range@@YGMPBUVEC3D@@0@Z PROC		; get_sqr_2d_range, COMDAT

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 97   : 	float
; 98   : 		dx,
; 99   : 		dz,
; 100  : 		range;
; 101  : 
; 102  : 	ASSERT (v1);

  00009	83 7d 08 00	 cmp	 DWORD PTR _v1$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_sqr_2d
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_sqr_2d_range@@YGMPBUVEC3D@@0@Z@4JA
  00014	83 c0 06	 add	 eax, 6
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@PKLGKHOO@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02JGJPDFLN@v1@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_sqr_2d:

; 103  : 	ASSERT (v2);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _v2$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@get_sqr_2d
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_sqr_2d_range@@YGMPBUVEC3D@@0@Z@4JA
  00032	83 c0 07	 add	 eax, 7
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@PKLGKHOO@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_02LNLCGGHO@v2@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_sqr_2d:

; 104  : 
; 105  : 	dx = v1->x - v2->x;

  00045	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  00048	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  0004b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0004f	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00053	f3 0f 11 45 fc	 movss	 DWORD PTR _dx$[ebp], xmm0

; 106  : 	dz = v1->z - v2->z;

  00058	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  0005e	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00063	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00068	f3 0f 11 45 f8	 movss	 DWORD PTR _dz$[ebp], xmm0

; 107  : 
; 108  : 	range = (dx * dx) + (dz * dz);

  0006d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00072	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _dx$[ebp]
  00077	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _dz$[ebp]
  0007c	f3 0f 59 4d f8	 mulss	 xmm1, DWORD PTR _dz$[ebp]
  00081	f3 0f 58 c1	 addss	 xmm0, xmm1
  00085	f3 0f 11 45 f4	 movss	 DWORD PTR _range$[ebp], xmm0

; 109  : 
; 110  : 	return (range);

  0008a	d9 45 f4	 fld	 DWORD PTR _range$[ebp]

; 111  : }

  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 08 00	 ret	 8
?get_sqr_2d_range@@YGMPBUVEC3D@@0@Z ENDP		; get_sqr_2d_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\range.c
;	COMDAT ?get_2d_range@@YGMPBUVEC3D@@0@Z
_TEXT	SEGMENT
_range$ = -12						; size = 4
_dz$ = -8						; size = 4
_dx$ = -4						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
?get_2d_range@@YGMPBUVEC3D@@0@Z PROC			; get_2d_range, COMDAT

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 75   : 	float
; 76   : 		dx,
; 77   : 		dz,
; 78   : 		range;
; 79   : 
; 80   : 	ASSERT (v1);

  00009	83 7d 08 00	 cmp	 DWORD PTR _v1$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_2d_ran
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_2d_range@@YGMPBUVEC3D@@0@Z@4JA
  00014	83 c0 06	 add	 eax, 6
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@PKLGKHOO@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02JGJPDFLN@v1@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_2d_ran:

; 81   : 	ASSERT (v2);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _v2$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@get_2d_ran
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_2d_range@@YGMPBUVEC3D@@0@Z@4JA
  00032	83 c0 07	 add	 eax, 7
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@PKLGKHOO@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_02LNLCGGHO@v2@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_2d_ran:

; 82   : 
; 83   : 	dx = v1->x - v2->x;

  00045	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  00048	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  0004b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0004f	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00053	f3 0f 11 45 fc	 movss	 DWORD PTR _dx$[ebp], xmm0

; 84   : 	dz = v1->z - v2->z;

  00058	8b 45 08	 mov	 eax, DWORD PTR _v1$[ebp]
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  0005e	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00063	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00068	f3 0f 11 45 f8	 movss	 DWORD PTR _dz$[ebp], xmm0

; 85   : 
; 86   : 	range = sqrt ((dx * dx) + (dz * dz));

  0006d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00072	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _dx$[ebp]
  00077	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _dz$[ebp]
  0007c	f3 0f 59 4d f8	 mulss	 xmm1, DWORD PTR _dz$[ebp]
  00081	f3 0f 58 c1	 addss	 xmm0, xmm1
  00085	51		 push	 ecx
  00086	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008b	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  00090	d9 5d f4	 fstp	 DWORD PTR _range$[ebp]

; 87   : 
; 88   : 	return (range);

  00093	d9 45 f4	 fld	 DWORD PTR _range$[ebp]

; 89   : }

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c2 08 00	 ret	 8
?get_2d_range@@YGMPBUVEC3D@@0@Z ENDP			; get_2d_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sqrt@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sqrt@@YGMM@Z PROC					; sqrt, COMDAT

; 294  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 295  : 	return (_CSTD sqrtf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sqrtf
  00019	83 c4 04	 add	 esp, 4

; 296  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sqrt@@YGMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fabs@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?fabs@@YGMM@Z PROC					; fabs, COMDAT

; 112  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 113  : 	return (_CSTD fabsf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _fabsf
  00019	83 c4 04	 add	 esp, 4

; 114  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?fabs@@YGMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 760  :             return (float)sqrt(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sqrt
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 761  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 671  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 672  :             return (float)fabs(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _fabs
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 673  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
END
