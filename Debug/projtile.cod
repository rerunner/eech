; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\maths\projtile.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_atanf
PUBLIC	_sqrtf
PUBLIC	?atan@@YGMM@Z					; atan
PUBLIC	?sqrt@@YGMM@Z					; sqrt
PUBLIC	?get_angle_of_projection@@YGHPBUVEC3D@@0MPAM@Z	; get_angle_of_projection
PUBLIC	?get_angle_of_projection_with_range@@YGHPBUVEC3D@@0MPAMM@Z ; get_angle_of_projection_with_range
PUBLIC	?__LINE__Var@?0??get_angle_of_projection_with_range@@YGHPBUVEC3D@@0MPAMM@Z@4JA ; `get_angle_of_projection_with_range'::`1'::__LINE__Var
PUBLIC	??_C@_0DG@FJOMCNLP@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_06OEKOLKIL@source@			; `string'
PUBLIC	??_C@_06JJLAMBGK@target@			; `string'
PUBLIC	??_C@_0BE@GNBBINKD@angle_of_projection@		; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@4000000000000000
PUBLIC	__real@4010000000000000
PUBLIC	__real@411cf5c3
EXTRN	_atan:PROC
EXTRN	_sqrt:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?get_2d_range@@YGMPBUVEC3D@@0@Z:PROC		; get_2d_range
EXTRN	__fltused:DWORD
;	COMDAT __real@411cf5c3
CONST	SEGMENT
__real@411cf5c3 DD 0411cf5c3r			; 9.81
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_0BE@GNBBINKD@angle_of_projection@
CONST	SEGMENT
??_C@_0BE@GNBBINKD@angle_of_projection@ DB 'angle_of_projection', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JJLAMBGK@target@
CONST	SEGMENT
??_C@_06JJLAMBGK@target@ DB 'target', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OEKOLKIL@source@
CONST	SEGMENT
??_C@_06OEKOLKIL@source@ DB 'source', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@FJOMCNLP@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DG@FJOMCNLP@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\maths\projtile.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_angle_of_projection_with_range@@YGHPBUVEC3D@@0MPAMM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_angle_of_projection_with_range@@YGHPBUVEC3D@@0MPAMM@Z@4JA DD 056H ; `get_angle_of_projection_with_range'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\projtile.c
;	COMDAT ?get_angle_of_projection_with_range@@YGHPBUVEC3D@@0MPAMM@Z
_TEXT	SEGMENT
tv169 = -100						; size = 4
_result$ = -32						; size = 4
_theta$ = -28						; size = 4
_tan_theta$ = -24					; size = 4
_x_squared$ = -20					; size = 4
_s$ = -16						; size = 4
_m$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
_source$ = 8						; size = 4
_target$ = 12						; size = 4
_velocity$ = 16						; size = 4
_angle_of_projection$ = 20				; size = 4
_range$ = 24						; size = 4
?get_angle_of_projection_with_range@@YGHPBUVEC3D@@0MPAMM@Z PROC ; get_angle_of_projection_with_range, COMDAT

; 86   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   : 	float
; 88   : 		x,
; 89   : 		y,
; 90   : 		m,
; 91   : 		s,
; 92   : 		x_squared,
; 93   : 		tan_theta,
; 94   : 		theta;
; 95   : 
; 96   : 	int
; 97   : 		result;
; 98   : 
; 99   : 	ASSERT (source);

  00009	83 7d 08 00	 cmp	 DWORD PTR _source$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_angle_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_angle_of_projection_with_range@@YGHPBUVEC3D@@0MPAMM@Z@4JA
  00014	83 c0 0d	 add	 eax, 13			; 0000000dH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@FJOMCNLP@c?3?2users?2nhv90?2projects?2eech?2mo@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06OEKOLKIL@source@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_angle_:

; 100  : 
; 101  : 	ASSERT (target);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@get_angle_
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_angle_of_projection_with_range@@YGHPBUVEC3D@@0MPAMM@Z@4JA
  00032	83 c0 0f	 add	 eax, 15			; 0000000fH
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@FJOMCNLP@c?3?2users?2nhv90?2projects?2eech?2mo@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@get_angle_:

; 102  : 
; 103  : 	ASSERT (angle_of_projection);

  00045	83 7d 14 00	 cmp	 DWORD PTR _angle_of_projection$[ebp], 0
  00049	75 18		 jne	 SHORT $LN4@get_angle_
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_angle_of_projection_with_range@@YGHPBUVEC3D@@0MPAMM@Z@4JA
  00050	83 c0 11	 add	 eax, 17			; 00000011H
  00053	50		 push	 eax
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@FJOMCNLP@c?3?2users?2nhv90?2projects?2eech?2mo@
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@GNBBINKD@angle_of_projection@
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_angle_:

; 104  : 
; 105  : 	theta = 0.0;

  00063	0f 57 c0	 xorps	 xmm0, xmm0
  00066	f3 0f 11 45 e4	 movss	 DWORD PTR _theta$[ebp], xmm0

; 106  : 
; 107  : 	result = FALSE;

  0006b	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0

; 108  : 
; 109  : 	if (velocity > 0.001)

  00072	f3 0f 5a 45 10	 cvtss2sd xmm0, DWORD PTR _velocity$[ebp]
  00077	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0007f	0f 86 1b 01 00
	00		 jbe	 $LN7@get_angle_

; 110  : 	{
; 111  : 		x = range;

  00085	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _range$[ebp]
  0008a	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0

; 112  : 
; 113  : 		if (x > 0.001)

  0008f	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00094	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0009c	0f 86 fe 00 00
	00		 jbe	 $LN7@get_angle_

; 114  : 		{
; 115  : 			y = target->y - source->y;

  000a2	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  000a5	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  000a8	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000ad	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  000b2	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0

; 116  : 
; 117  : 			x_squared = x * x;

  000b7	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  000bc	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _x$[ebp]
  000c1	f3 0f 11 45 ec	 movss	 DWORD PTR _x_squared$[ebp], xmm0

; 118  : 
; 119  : 			m = (x_squared * G) / (2.0 * velocity * velocity);

  000c6	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_squared$[ebp]
  000cb	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@411cf5c3
  000d3	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000d7	f3 0f 5a 4d 10	 cvtss2sd xmm1, DWORD PTR _velocity$[ebp]
  000dc	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4000000000000000
  000e4	f3 0f 5a 55 10	 cvtss2sd xmm2, DWORD PTR _velocity$[ebp]
  000e9	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  000ed	f2 0f 5e c1	 divsd	 xmm0, xmm1
  000f1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000f5	f3 0f 11 45 f4	 movss	 DWORD PTR _m$[ebp], xmm0

; 120  : 
; 121  : 			s = x_squared - (4.0 * m * m) - (4.0 * m * y);

  000fa	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _x_squared$[ebp]
  000ff	f3 0f 5a 4d f4	 cvtss2sd xmm1, DWORD PTR _m$[ebp]
  00104	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4010000000000000
  0010c	f3 0f 5a 55 f4	 cvtss2sd xmm2, DWORD PTR _m$[ebp]
  00111	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00115	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00119	f3 0f 5a 4d f4	 cvtss2sd xmm1, DWORD PTR _m$[ebp]
  0011e	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4010000000000000
  00126	f3 0f 5a 55 f8	 cvtss2sd xmm2, DWORD PTR _y$[ebp]
  0012b	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  0012f	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00133	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00137	f3 0f 11 45 f0	 movss	 DWORD PTR _s$[ebp], xmm0

; 122  : 
; 123  : 			if (s >= 0.0)

  0013c	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _s$[ebp]
  00141	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00149	72 55		 jb	 SHORT $LN7@get_angle_

; 124  : 			{
; 125  : 				tan_theta = (x - sqrt (s)) / (2.0 * m);

  0014b	51		 push	 ecx
  0014c	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _s$[ebp]
  00151	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00156	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  0015b	d9 5d 9c	 fstp	 DWORD PTR tv169[ebp]
  0015e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00163	f3 0f 5c 45 9c	 subss	 xmm0, DWORD PTR tv169[ebp]
  00168	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0016c	f3 0f 5a 4d f4	 cvtss2sd xmm1, DWORD PTR _m$[ebp]
  00171	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4000000000000000
  00179	f2 0f 5e c1	 divsd	 xmm0, xmm1
  0017d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00181	f3 0f 11 45 e8	 movss	 DWORD PTR _tan_theta$[ebp], xmm0

; 126  : 
; 127  : 				theta = atan (tan_theta);

  00186	51		 push	 ecx
  00187	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _tan_theta$[ebp]
  0018c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00191	e8 00 00 00 00	 call	 ?atan@@YGMM@Z		; atan
  00196	d9 5d e4	 fstp	 DWORD PTR _theta$[ebp]

; 128  : 
; 129  : 				result = TRUE;

  00199	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _result$[ebp], 1
$LN7@get_angle_:

; 130  : 			}
; 131  : 		}
; 132  : 	}
; 133  : 
; 134  : 	*angle_of_projection = theta;

  001a0	8b 45 14	 mov	 eax, DWORD PTR _angle_of_projection$[ebp]
  001a3	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _theta$[ebp]
  001a8	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 135  : 
; 136  : 	return (result);

  001ac	8b 45 e0	 mov	 eax, DWORD PTR _result$[ebp]

; 137  : }

  001af	5f		 pop	 edi
  001b0	5e		 pop	 esi
  001b1	5b		 pop	 ebx
  001b2	8b e5		 mov	 esp, ebp
  001b4	5d		 pop	 ebp
  001b5	c2 14 00	 ret	 20			; 00000014H
?get_angle_of_projection_with_range@@YGHPBUVEC3D@@0MPAMM@Z ENDP ; get_angle_of_projection_with_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\projtile.c
;	COMDAT ?get_angle_of_projection@@YGHPBUVEC3D@@0MPAM@Z
_TEXT	SEGMENT
_range$1 = -4						; size = 4
_source$ = 8						; size = 4
_target$ = 12						; size = 4
_velocity$ = 16						; size = 4
_angle_of_projection$ = 20				; size = 4
?get_angle_of_projection@@YGHPBUVEC3D@@0MPAM@Z PROC	; get_angle_of_projection, COMDAT

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 75   : 	if (velocity > 0.001)

  00009	f3 0f 5a 45 10	 cvtss2sd xmm0, DWORD PTR _velocity$[ebp]
  0000e	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00016	76 3b		 jbe	 SHORT $LN2@get_angle_

; 76   : 	{
; 77   : 		float range = get_2d_range (source, target);

  00018	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ?get_2d_range@@YGMPBUVEC3D@@0@Z ; get_2d_range
  00025	d9 5d fc	 fstp	 DWORD PTR _range$1[ebp]

; 78   : 		return get_angle_of_projection_with_range(source, target, velocity, angle_of_projection, range);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _range$1[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	8b 45 14	 mov	 eax, DWORD PTR _angle_of_projection$[ebp]
  00036	50		 push	 eax
  00037	51		 push	 ecx
  00038	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _velocity$[ebp]
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  00045	51		 push	 ecx
  00046	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  00049	52		 push	 edx
  0004a	e8 00 00 00 00	 call	 ?get_angle_of_projection_with_range@@YGHPBUVEC3D@@0MPAMM@Z ; get_angle_of_projection_with_range
  0004f	eb 04		 jmp	 SHORT $LN3@get_angle_

; 79   : 	}
; 80   : 	else

  00051	eb 02		 jmp	 SHORT $LN3@get_angle_
$LN2@get_angle_:

; 81   : 		return FALSE;

  00053	33 c0		 xor	 eax, eax
$LN3@get_angle_:

; 82   : }

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 10 00	 ret	 16			; 00000010H
?get_angle_of_projection@@YGHPBUVEC3D@@0MPAM@Z ENDP	; get_angle_of_projection
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sqrt@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sqrt@@YGMM@Z PROC					; sqrt, COMDAT

; 294  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 295  : 	return (_CSTD sqrtf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sqrtf
  00019	83 c4 04	 add	 esp, 4

; 296  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sqrt@@YGMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?atan@@YGMM@Z PROC					; atan, COMDAT

; 46   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 47   : 	return (_CSTD atanf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _atanf
  00019	83 c4 04	 add	 esp, 4

; 48   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?atan@@YGMM@Z ENDP					; atan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 760  :             return (float)sqrt(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sqrt
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 761  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atanf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_atanf	PROC						; COMDAT

; 638  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 639  :             return (float)atan(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _atan
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 640  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_atanf	ENDP
_TEXT	ENDS
END
