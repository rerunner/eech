; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\mobile\aircraft\helicop\hc_pack.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?overload_helicopter_pack_functions@@YGXXZ	; overload_helicopter_pack_functions
PUBLIC	?pack_local_gunship_entity@@YGXW4PACK_MODES@@@Z	; pack_local_gunship_entity
PUBLIC	?unpack_local_gunship_entity@@YGXW4PACK_MODES@@@Z ; unpack_local_gunship_entity
PUBLIC	?get_local_helicopter_delta_rotor_direction@@YGHPAUENTITY@@@Z ; get_local_helicopter_delta_rotor_direction
PUBLIC	?__LINE__Var@?0??pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA ; `pack_local_data'::`1'::__LINE__Var
PUBLIC	??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0CH@MMFDPOBJ@?$CImode?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CImode?5?$DM?5NUM_PACK@ ; `string'
PUBLIC	?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA ; `unpack_local_data'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??pack_local_gunship_entity@@YGXW4PACK_MODES@@@Z@4JA ; `pack_local_gunship_entity'::`1'::__LINE__Var
PUBLIC	??_C@_0EI@IDPNMBKF@get_local_entity_type?5?$CIget_guns@ ; `string'
PUBLIC	?__LINE__Var@?0??unpack_local_gunship_entity@@YGXW4PACK_MODES@@@Z@4JA ; `unpack_local_gunship_entity'::`1'::__LINE__Var
PUBLIC	??_C@_0DF@DJDCHDLP@get_local_entity_type?5?$CIgs?$CJ?5?$DN?$DN?5E@ ; `string'
PUBLIC	?__LINE__Var@?0??get_local_helicopter_delta_rotor_direction@@YGHPAUENTITY@@@Z@4JA ; `get_local_helicopter_delta_rotor_direction'::`1'::__LINE__Var
PUBLIC	??_C@_02LFNMGJAP@en@				; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3f10000000000000
PUBLIC	__real@3f91df46a0000000
PUBLIC	__real@400921fb60000000
PUBLIC	__real@401c000000000000
PUBLIC	__real@4059000000000000
PUBLIC	__real@40e00000
EXTRN	_memset:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?malloc_fast_memory@@YGPAXI@Z:PROC		; malloc_fast_memory
EXTRN	?normalise_3d_vector@@YGMPAUVEC3D@@@Z:PROC	; normalise_3d_vector
EXTRN	?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z:PROC	; get_3d_vector_magnitude
EXTRN	?pack_entity_type@@YGXW4ENTITY_TYPES@@@Z:PROC	; pack_entity_type
EXTRN	?insert_local_entity_into_parents_child_list@@YGXPAUENTITY@@W4LIST_TYPES@@00@Z:PROC ; insert_local_entity_into_parents_child_list
EXTRN	?pack_attitude_matrix@@YGXPAUENTITY@@QAY02M@Z:PROC ; pack_attitude_matrix
EXTRN	?unpack_attitude_matrix@@YGXPAUENTITY@@QAY02M@Z:PROC ; unpack_attitude_matrix
EXTRN	?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z:PROC ; pack_float_value
EXTRN	?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z:PROC ; unpack_float_value
EXTRN	?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z:PROC ; pack_int_value
EXTRN	?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z:PROC ; unpack_int_value
EXTRN	?pack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z:PROC ; pack_vec3d
EXTRN	?unpack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z:PROC ; unpack_vec3d
EXTRN	?get_free_entity@@YGPAUENTITY@@H@Z:PROC		; get_free_entity
EXTRN	?unpack_entity_safe_index@@YGHXZ:PROC		; unpack_entity_safe_index
EXTRN	?pack_entity_safe_ptr@@YGXPAUENTITY@@@Z:PROC	; pack_entity_safe_ptr
EXTRN	?unpack_entity_safe_ptr@@YGPAUENTITY@@XZ:PROC	; unpack_entity_safe_ptr
EXTRN	?set_sub_object_type_visible_status@@YGHPAUOBJECT_3D_INSTANCE@@HH@Z:PROC ; set_sub_object_type_visible_status
EXTRN	?pack_mobile_local_sound_effects@@YGHPAUENTITY@@W4PACK_MODES@@@Z:PROC ; pack_mobile_local_sound_effects
EXTRN	?unpack_mobile_local_sound_effects@@YGHPAUENTITY@@W4PACK_MODES@@@Z:PROC ; unpack_mobile_local_sound_effects
EXTRN	?deactivate_weapon_payload_markers@@YGXPAUENTITY@@@Z:PROC ; deactivate_weapon_payload_markers
EXTRN	?pack_aircraft_data@@YGXPAUENTITY@@PAUAIRCRAFT@@W4PACK_MODES@@@Z:PROC ; pack_aircraft_data
EXTRN	?unpack_aircraft_data@@YGXPAUENTITY@@PAUAIRCRAFT@@W4PACK_MODES@@@Z:PROC ; unpack_aircraft_data
EXTRN	?set_raw_gunship_entity@@YGXPAUENTITY@@@Z:PROC	; set_raw_gunship_entity
EXTRN	?damage_helicopter_main_rotors@@YGHPAUENTITY@@@Z:PROC ; damage_helicopter_main_rotors
EXTRN	?damage_helicopter_tail_rotors@@YGHPAUENTITY@@@Z:PROC ; damage_helicopter_tail_rotors
EXTRN	?set_rotation_angle_of_helicopter_main_rotors@@YGXPAUOBJECT_3D_INSTANCE@@M@Z:PROC ; set_rotation_angle_of_helicopter_main_rotors
EXTRN	?set_rotation_angle_of_helicopter_tail_rotor@@YGXPAUOBJECT_3D_INSTANCE@@M@Z:PROC ; set_rotation_angle_of_helicopter_tail_rotor
EXTRN	?set_helicopter_id_number@@YGXPAUENTITY@@@Z:PROC ; set_helicopter_id_number
EXTRN	?get_local_force_entity@@YGPAUENTITY@@W4ENTITY_SIDES@@@Z:PROC ; get_local_force_entity
EXTRN	?add_to_force_info@@YGXPAUENTITY@@0@Z:PROC	; add_to_force_info
EXTRN	?get_local_sector_entity@@YGPAUENTITY@@PAUVEC3D@@@Z:PROC ; get_local_sector_entity
EXTRN	?random_number_seed@@3HA:DWORD			; random_number_seed
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?fn_pack_local_entity_data@@3PAP6GXPAUENTITY@@W4PACK_MODES@@@ZA:BYTE ; fn_pack_local_entity_data
EXTRN	?fn_unpack_local_entity_data@@3PAP6GXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@ZA:BYTE ; fn_unpack_local_entity_data
EXTRN	?fn_set_local_entity_attitude_matrix@@3PAP6GXPAUENTITY@@QAY02M@ZA:BYTE ; fn_set_local_entity_attitude_matrix
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_set_local_entity_float_value@@3PAY0KP@P6GXPAUENTITY@@W4FLOAT_TYPES@@M@ZA:BYTE ; fn_set_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_set_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA:BYTE ; fn_set_local_entity_vec3d
EXTRN	?gunship_entity@@3PAUENTITY@@A:DWORD		; gunship_entity
EXTRN	?min_coning_angle@@3MA:DWORD			; min_coning_angle
EXTRN	?max_coning_angle@@3MA:DWORD			; max_coning_angle
EXTRN	?camera_entity@@3PAUENTITY@@A:DWORD		; camera_entity
EXTRN	?update_entity@@3PAUENTITY@@A:DWORD		; update_entity
EXTRN	?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A:DWORD ; current_flight_dynamics
EXTRN	__fltused:DWORD
;	COMDAT __real@40e00000
CONST	SEGMENT
__real@40e00000 DD 040e00000r			; 7
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@401c000000000000
CONST	SEGMENT
__real@401c000000000000 DQ 0401c000000000000r	; 7
CONST	ENDS
;	COMDAT __real@400921fb60000000
CONST	SEGMENT
__real@400921fb60000000 DQ 0400921fb60000000r	; 3.14159
CONST	ENDS
;	COMDAT __real@3f91df46a0000000
CONST	SEGMENT
__real@3f91df46a0000000 DQ 03f91df46a0000000r	; 0.0174533
CONST	ENDS
;	COMDAT __real@3f10000000000000
CONST	SEGMENT
__real@3f10000000000000 DQ 03f10000000000000r	; 6.10352e-05
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_02LFNMGJAP@en@
CONST	SEGMENT
??_C@_02LFNMGJAP@en@ DB 'en', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_local_helicopter_delta_rotor_direction@@YGHPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_local_helicopter_delta_rotor_direction@@YGHPAUENTITY@@@Z@4JA DD 0358H ; `get_local_helicopter_delta_rotor_direction'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DF@DJDCHDLP@get_local_entity_type?5?$CIgs?$CJ?5?$DN?$DN?5E@
CONST	SEGMENT
??_C@_0DF@DJDCHDLP@get_local_entity_type?5?$CIgs?$CJ?5?$DN?$DN?5E@ DB 'ge'
	DB	't_local_entity_type (gs) == ENTITY_TYPE_HELICOPTER', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??unpack_local_gunship_entity@@YGXW4PACK_MODES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??unpack_local_gunship_entity@@YGXW4PACK_MODES@@@Z@4JA DD 032cH ; `unpack_local_gunship_entity'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EI@IDPNMBKF@get_local_entity_type?5?$CIget_guns@
CONST	SEGMENT
??_C@_0EI@IDPNMBKF@get_local_entity_type?5?$CIget_guns@ DB 'get_local_ent'
	DB	'ity_type (get_gunship_entity ()) == ENTITY_TYPE_HELICOPTER', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??pack_local_gunship_entity@@YGXW4PACK_MODES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??pack_local_gunship_entity@@YGXW4PACK_MODES@@@Z@4JA DD 02fdH ; `pack_local_gunship_entity'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA DD 014cH ; `unpack_local_data'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CH@MMFDPOBJ@?$CImode?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CImode?5?$DM?5NUM_PACK@
CONST	SEGMENT
??_C@_0CH@MMFDPOBJ@?$CImode?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CImode?5?$DM?5NUM_PACK@ DB '('
	DB	'mode >= 0) && (mode < NUM_PACK_MODES)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\mobile\aircraft\helic'
	DB	'op\hc_pack.c', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA DD 050H ; `pack_local_data'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\helicop\hc_pack.c
;	COMDAT ?unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z
_TEXT	SEGMENT
tv1066 = -192						; size = 8
tv740 = -192						; size = 4
tv720 = -192						; size = 4
tv700 = -192						; size = 4
tv680 = -192						; size = 4
tv660 = -192						; size = 4
tv629 = -192						; size = 4
tv524 = -192						; size = 4
tv255 = -192						; size = 4
tv1126 = -188						; size = 4
tv1080 = -188						; size = 4
tv910 = -188						; size = 4
tv778 = -188						; size = 4
tv732 = -188						; size = 4
tv712 = -188						; size = 4
tv692 = -188						; size = 4
tv672 = -188						; size = 4
tv652 = -188						; size = 4
tv641 = -188						; size = 4
tv621 = -188						; size = 4
tv517 = -188						; size = 4
tv459 = -188						; size = 4
tv449 = -188						; size = 4
tv433 = -188						; size = 4
tv423 = -188						; size = 4
tv413 = -188						; size = 4
tv403 = -188						; size = 4
tv393 = -188						; size = 4
tv383 = -188						; size = 4
tv374 = -188						; size = 4
tv360 = -188						; size = 4
tv351 = -188						; size = 4
tv248 = -188						; size = 4
tv178 = -188						; size = 4
tv169 = -188						; size = 4
tv160 = -188						; size = 4
tv70 = -188						; size = 4
_normalised_motion_vector$1 = -120			; size = 12
_tail_rotor_rpm$2 = -108				; size = 4
_main_rotor_blade_coning_angle$3 = -104			; size = 4
_main_rotor_rpm$4 = -100				; size = 4
_velocity$5 = -96					; size = 4
_attitude$6 = -92					; size = 36
_motion_vector$7 = -56					; size = 12
_position$8 = -44					; size = 12
_raw$9 = -32						; size = 4
_index$10 = -28						; size = 4
_tail_rotor_damaged$11 = -24				; size = 4
_main_rotor_damaged$12 = -20				; size = 4
_raw$13 = -16						; size = 4
_index$14 = -12						; size = 4
_tail_rotor_damaged$15 = -8				; size = 4
_main_rotor_damaged$16 = -4				; size = 4
_en$ = 8						; size = 4
_type$ = 12						; size = 4
_mode$ = 16						; size = 4
?unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z PROC ; unpack_local_data, COMDAT

; 332  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 333  : 	ASSERT ((mode >= 0) && (mode < NUM_PACK_MODES));

  0000c	83 7d 10 00	 cmp	 DWORD PTR _mode$[ebp], 0
  00010	7c 06		 jl	 SHORT $LN5@unpack_loc
  00012	83 7d 10 04	 cmp	 DWORD PTR _mode$[ebp], 4
  00016	7c 18		 jl	 SHORT $LN4@unpack_loc
$LN5@unpack_loc:
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA
  0001d	83 c0 01	 add	 eax, 1
  00020	50		 push	 eax
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MMFDPOBJ@?$CImode?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CImode?5?$DM?5NUM_PACK@
  0002b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@unpack_loc:

; 334  : 
; 335  : 	switch (mode)

  00030	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  00033	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], eax
  00039	83 bd 44 ff ff
	ff 00		 cmp	 DWORD PTR tv70[ebp], 0
  00040	74 1f		 je	 SHORT $LN6@unpack_loc
  00042	83 bd 44 ff ff
	ff 01		 cmp	 DWORD PTR tv70[ebp], 1
  00049	0f 84 68 04 00
	00		 je	 $LN11@unpack_loc
  0004f	83 bd 44 ff ff
	ff 03		 cmp	 DWORD PTR tv70[ebp], 3
  00056	0f 84 4f 0a 00
	00		 je	 $LN20@unpack_loc
  0005c	e9 c5 0f 00 00	 jmp	 $LN2@unpack_loc
$LN6@unpack_loc:

; 336  : 	{
; 337  : 		////////////////////////////////////////
; 338  : 		case PACK_MODE_SERVER_SESSION:
; 339  : 		////////////////////////////////////////
; 340  : 		{
; 341  : 			int
; 342  : 				main_rotor_damaged,
; 343  : 				tail_rotor_damaged,
; 344  : 				index;
; 345  : 
; 346  : 			helicopter
; 347  : 				*raw;
; 348  : 
; 349  : 			//
; 350  : 			// create entity
; 351  : 			//
; 352  : 
; 353  : 			index = unpack_entity_safe_index ();

  00061	e8 00 00 00 00	 call	 ?unpack_entity_safe_index@@YGHXZ ; unpack_entity_safe_index
  00066	89 45 f4	 mov	 DWORD PTR _index$14[ebp], eax

; 354  : 
; 355  : 			en = get_free_entity (index);

  00069	8b 45 f4	 mov	 eax, DWORD PTR _index$14[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?get_free_entity@@YGPAUENTITY@@H@Z ; get_free_entity
  00072	89 45 08	 mov	 DWORD PTR _en$[ebp], eax

; 356  : 
; 357  : 			set_local_entity_type (en, type);

  00075	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00078	8b 4d 0c	 mov	 ecx, DWORD PTR _type$[ebp]
  0007b	89 08		 mov	 DWORD PTR [eax], ecx

; 358  : 
; 359  : 			raw = (helicopter *) malloc_fast_mem (sizeof (helicopter));

  0007d	68 e4 01 00 00	 push	 484			; 000001e4H
  00082	e8 00 00 00 00	 call	 ?malloc_fast_memory@@YGPAXI@Z ; malloc_fast_memory
  00087	89 45 f0	 mov	 DWORD PTR _raw$13[ebp], eax

; 360  : 
; 361  : 			set_local_entity_data (en, raw);

  0008a	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0008d	8b 4d f0	 mov	 ecx, DWORD PTR _raw$13[ebp]
  00090	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 362  : 
; 363  : 			memset (raw, 0, sizeof (helicopter));

  00093	68 e4 01 00 00	 push	 484			; 000001e4H
  00098	6a 00		 push	 0
  0009a	8b 45 f0	 mov	 eax, DWORD PTR _raw$13[ebp]
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 _memset
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 364  : 
; 365  : 			//
; 366  : 			// unpack data aircraft (in exactly the same order as the data was packed)
; 367  : 			//
; 368  : 
; 369  : 			unpack_aircraft_data (en, &raw->ac, mode);

  000a6	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  000a9	50		 push	 eax
  000aa	8b 4d f0	 mov	 ecx, DWORD PTR _raw$13[ebp]
  000ad	51		 push	 ecx
  000ae	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  000b1	52		 push	 edx
  000b2	e8 00 00 00 00	 call	 ?unpack_aircraft_data@@YGXPAUENTITY@@PAUAIRCRAFT@@W4PACK_MODES@@@Z ; unpack_aircraft_data

; 370  : 
; 371  : 			raw->ac.mob.velocity = unpack_float_value (en, FLOAT_TYPE_MEDIUM_VELOCITY);

  000b7	6a 50		 push	 80			; 00000050H
  000b9	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  000c2	8b 4d f0	 mov	 ecx, DWORD PTR _raw$13[ebp]
  000c5	d9 59 40	 fstp	 DWORD PTR [ecx+64]

; 372  : 
; 373  : 			//
; 374  : 			// unpack helicopter data
; 375  : 			//
; 376  : 
; 377  : 			raw->fuel_supply_level = unpack_float_value (en, FLOAT_TYPE_FUEL_SUPPLY_LEVEL);

  000c8	6a 30		 push	 48			; 00000030H
  000ca	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  000d3	8b 4d f0	 mov	 ecx, DWORD PTR _raw$13[ebp]
  000d6	d9 99 84 01 00
	00		 fstp	 DWORD PTR [ecx+388]

; 378  : 
; 379  : 			// invulnerable timer
; 380  : 
; 381  : 			raw->main_rotor_rpm = (unpack_float_value (en, FLOAT_TYPE_MAIN_ROTOR_RPM) * 7);

  000dc	6a 48		 push	 72			; 00000048H
  000de	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000e1	50		 push	 eax
  000e2	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  000e7	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv778[ebp]
  000ed	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv778[ebp]
  000f5	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40e00000
  000fd	8b 4d f0	 mov	 ecx, DWORD PTR _raw$13[ebp]
  00100	f3 0f 11 81 8c
	01 00 00	 movss	 DWORD PTR [ecx+396], xmm0

; 382  : 
; 383  : 			raw->main_rotor_pitch = unpack_float_value (en, FLOAT_TYPE_MAIN_ROTOR_PITCH);

  00108	6a 45		 push	 69			; 00000045H
  0010a	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  00113	8b 4d f0	 mov	 ecx, DWORD PTR _raw$13[ebp]
  00116	d9 99 90 01 00
	00		 fstp	 DWORD PTR [ecx+400]

; 384  : 
; 385  : 			raw->main_rotor_roll = unpack_float_value (en, FLOAT_TYPE_MAIN_ROTOR_ROLL);

  0011c	6a 47		 push	 71			; 00000047H
  0011e	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00121	50		 push	 eax
  00122	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  00127	8b 4d f0	 mov	 ecx, DWORD PTR _raw$13[ebp]
  0012a	d9 99 94 01 00
	00		 fstp	 DWORD PTR [ecx+404]

; 386  : 
; 387  : 			raw->main_rotor_blade_coning_angle = unpack_float_value (en, FLOAT_TYPE_MAIN_ROTOR_BLADE_CONING_ANGLE);

  00130	6a 42		 push	 66			; 00000042H
  00132	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00135	50		 push	 eax
  00136	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  0013b	8b 4d f0	 mov	 ecx, DWORD PTR _raw$13[ebp]
  0013e	d9 99 98 01 00
	00		 fstp	 DWORD PTR [ecx+408]

; 388  : 
; 389  : 			raw->main_rotor_spin_up_timer = unpack_float_value (en, FLOAT_TYPE_MAIN_ROTOR_SPIN_UP_TIMER);

  00144	6a 4a		 push	 74			; 0000004aH
  00146	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00149	50		 push	 eax
  0014a	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  0014f	8b 4d f0	 mov	 ecx, DWORD PTR _raw$13[ebp]
  00152	d9 99 9c 01 00
	00		 fstp	 DWORD PTR [ecx+412]

; 390  : 			
; 391  : 			raw->tail_rotor_rpm = unpack_float_value (en, FLOAT_TYPE_TAIL_ROTOR_RPM);

  00158	68 81 00 00 00	 push	 129			; 00000081H
  0015d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00160	50		 push	 eax
  00161	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  00166	8b 4d f0	 mov	 ecx, DWORD PTR _raw$13[ebp]
  00169	d9 99 a8 01 00
	00		 fstp	 DWORD PTR [ecx+424]

; 392  : 
; 393  : 			/////////////////////////////////////////////////////////////////
; 394  : 			if (unpack_int_value (en, INT_TYPE_VALID))

  0016f	68 ef 00 00 00	 push	 239			; 000000efH
  00174	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00177	50		 push	 eax
  00178	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  0017d	85 c0		 test	 eax, eax
  0017f	74 2e		 je	 SHORT $LN7@unpack_loc

; 395  : 			{
; 396  : 
; 397  : 				raw->helicopter_damage_flags = unpack_int_value (en, INT_TYPE_HELICOPTER_DAMAGE_FLAGS);

  00181	6a 54		 push	 84			; 00000054H
  00183	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00186	50		 push	 eax
  00187	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  0018c	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv160[ebp], eax
  00192	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR tv160[ebp]
  00198	8b 55 f0	 mov	 edx, DWORD PTR _raw$13[ebp]
  0019b	8b 82 ac 01 00
	00		 mov	 eax, DWORD PTR [edx+428]
  001a1	83 e0 00	 and	 eax, 0
  001a4	0b c1		 or	 eax, ecx
  001a6	8b 4d f0	 mov	 ecx, DWORD PTR _raw$13[ebp]
  001a9	89 81 ac 01 00
	00		 mov	 DWORD PTR [ecx+428], eax
$LN7@unpack_loc:

; 398  : 			}
; 399  : 			/////////////////////////////////////////////////////////////////
; 400  : 
; 401  : 			raw->auto_pilot = unpack_int_value (en, INT_TYPE_AUTO_PILOT);

  001af	6a 0c		 push	 12			; 0000000cH
  001b1	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  001b4	50		 push	 eax
  001b5	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  001ba	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv169[ebp], eax
  001c0	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR tv169[ebp]
  001c6	83 e1 01	 and	 ecx, 1
  001c9	8b 55 f0	 mov	 edx, DWORD PTR _raw$13[ebp]
  001cc	8b 82 b0 01 00
	00		 mov	 eax, DWORD PTR [edx+432]
  001d2	83 e0 fe	 and	 eax, -2			; fffffffeH
  001d5	0b c1		 or	 eax, ecx
  001d7	8b 4d f0	 mov	 ecx, DWORD PTR _raw$13[ebp]
  001da	89 81 b0 01 00
	00		 mov	 DWORD PTR [ecx+432], eax

; 402  : 
; 403  : 			raw->player = unpack_int_value (en, INT_TYPE_PLAYER);

  001e0	68 9c 00 00 00	 push	 156			; 0000009cH
  001e5	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  001e8	50		 push	 eax
  001e9	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  001ee	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv178[ebp], eax
  001f4	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR tv178[ebp]
  001fa	83 e1 03	 and	 ecx, 3
  001fd	d1 e1		 shl	 ecx, 1
  001ff	8b 55 f0	 mov	 edx, DWORD PTR _raw$13[ebp]
  00202	8b 82 b0 01 00
	00		 mov	 eax, DWORD PTR [edx+432]
  00208	83 e0 f9	 and	 eax, -7			; fffffff9H
  0020b	0b c1		 or	 eax, ecx
  0020d	8b 4d f0	 mov	 ecx, DWORD PTR _raw$13[ebp]
  00210	89 81 b0 01 00
	00		 mov	 DWORD PTR [ecx+432], eax

; 404  : 
; 405  : 			main_rotor_damaged = unpack_int_value (en, INT_TYPE_MAIN_ROTOR_DAMAGED);

  00216	68 81 00 00 00	 push	 129			; 00000081H
  0021b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0021e	50		 push	 eax
  0021f	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00224	89 45 fc	 mov	 DWORD PTR _main_rotor_damaged$16[ebp], eax

; 406  : 
; 407  : 			tail_rotor_damaged = unpack_int_value (en, INT_TYPE_TAIL_ROTOR_DAMAGED);

  00227	68 d2 00 00 00	 push	 210			; 000000d2H
  0022c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0022f	50		 push	 eax
  00230	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00235	89 45 f8	 mov	 DWORD PTR _tail_rotor_damaged$15[ebp], eax

; 408  : 
; 409  : 			// los_to_target
; 410  : 
; 411  : 			// radar_on
; 412  : 
; 413  : 			// laser_on
; 414  : 
; 415  : 			// infra_red_jammer_on
; 416  : 
; 417  : 			// radar_jammer_on
; 418  : 
; 419  : 			raw->weapons_hold = FALSE;

  00238	8b 45 f0	 mov	 eax, DWORD PTR _raw$13[ebp]
  0023b	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  00241	81 e1 ff fb ff
	ff		 and	 ecx, -1025		; fffffbffH
  00247	8b 55 f0	 mov	 edx, DWORD PTR _raw$13[ebp]
  0024a	89 8a b0 01 00
	00		 mov	 DWORD PTR [edx+432], ecx

; 420  : 
; 421  : 			raw->position_hold = FALSE;

  00250	8b 45 f0	 mov	 eax, DWORD PTR _raw$13[ebp]
  00253	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  00259	81 e1 ff f7 ff
	ff		 and	 ecx, -2049		; fffff7ffH
  0025f	8b 55 f0	 mov	 edx, DWORD PTR _raw$13[ebp]
  00262	89 8a b0 01 00
	00		 mov	 DWORD PTR [edx+432], ecx

; 422  : 
; 423  : 			// lock_on_after_launch
; 424  : 
; 425  : 			// gunship_target_root
; 426  : 
; 427  : 			unpack_vec3d (en, VEC3D_TYPE_COVER_POSITION, &raw->cover_position);

  00268	8b 45 f0	 mov	 eax, DWORD PTR _raw$13[ebp]
  0026b	05 c0 01 00 00	 add	 eax, 448		; 000001c0H
  00270	50		 push	 eax
  00271	6a 02		 push	 2
  00273	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00276	51		 push	 ecx
  00277	e8 00 00 00 00	 call	 ?unpack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; unpack_vec3d

; 428  : 
; 429  : 			unpack_vec3d (en, VEC3D_TYPE_EO_TRACKING_POINT, &raw->eo_tracking_point);

  0027c	8b 45 f0	 mov	 eax, DWORD PTR _raw$13[ebp]
  0027f	05 d8 01 00 00	 add	 eax, 472		; 000001d8H
  00284	50		 push	 eax
  00285	6a 03		 push	 3
  00287	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0028a	51		 push	 ecx
  0028b	e8 00 00 00 00	 call	 ?unpack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; unpack_vec3d

; 430  : 
; 431  : 			// wait_position
; 432  : 
; 433  : 			//
; 434  : 			// unpack local only special effects
; 435  : 			//
; 436  : 
; 437  : 			unpack_mobile_local_sound_effects (en, mode);

  00290	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  00293	50		 push	 eax
  00294	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00297	51		 push	 ecx
  00298	e8 00 00 00 00	 call	 ?unpack_mobile_local_sound_effects@@YGHPAUENTITY@@W4PACK_MODES@@@Z ; unpack_mobile_local_sound_effects

; 438  : 
; 439  : 			/////////////////////////////////////////////////////////////////
; 440  : 
; 441  : 			set_helicopter_id_number (en);

  0029d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  002a0	50		 push	 eax
  002a1	e8 00 00 00 00	 call	 ?set_helicopter_id_number@@YGXPAUENTITY@@@Z ; set_helicopter_id_number

; 442  : 
; 443  : 			if (main_rotor_damaged)

  002a6	83 7d fc 00	 cmp	 DWORD PTR _main_rotor_damaged$16[ebp], 0
  002aa	74 1e		 je	 SHORT $LN8@unpack_loc

; 444  : 			{
; 445  : 				damage_helicopter_main_rotors (en);

  002ac	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  002af	50		 push	 eax
  002b0	e8 00 00 00 00	 call	 ?damage_helicopter_main_rotors@@YGHPAUENTITY@@@Z ; damage_helicopter_main_rotors

; 446  : 
; 447  : 				raw->main_rotor_damaged = TRUE;

  002b5	8b 45 f0	 mov	 eax, DWORD PTR _raw$13[ebp]
  002b8	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  002be	83 c9 08	 or	 ecx, 8
  002c1	8b 55 f0	 mov	 edx, DWORD PTR _raw$13[ebp]
  002c4	89 8a b0 01 00
	00		 mov	 DWORD PTR [edx+432], ecx
$LN8@unpack_loc:

; 448  : 			}
; 449  : 
; 450  : 			if (tail_rotor_damaged)

  002ca	83 7d f8 00	 cmp	 DWORD PTR _tail_rotor_damaged$15[ebp], 0
  002ce	74 1e		 je	 SHORT $LN9@unpack_loc

; 451  : 			{
; 452  : 				damage_helicopter_tail_rotors (en);

  002d0	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  002d3	50		 push	 eax
  002d4	e8 00 00 00 00	 call	 ?damage_helicopter_tail_rotors@@YGHPAUENTITY@@@Z ; damage_helicopter_tail_rotors

; 453  : 
; 454  : 				raw->tail_rotor_damaged = TRUE;

  002d9	8b 45 f0	 mov	 eax, DWORD PTR _raw$13[ebp]
  002dc	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  002e2	83 c9 10	 or	 ecx, 16			; 00000010H
  002e5	8b 55 f0	 mov	 edx, DWORD PTR _raw$13[ebp]
  002e8	89 8a b0 01 00
	00		 mov	 DWORD PTR [edx+432], ecx
$LN9@unpack_loc:

; 455  : 			}
; 456  : 
; 457  : 			//
; 458  : 			// vary main rotor start position (ok to use a random number as this is for visual effect only)
; 459  : 			//
; 460  : 
; 461  : 			set_rotation_angle_of_helicopter_main_rotors (raw->ac.inst3d, sfrand1 () * PI);

  002ee	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  002f8	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  002fd	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00302	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00308	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0030b	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00311	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  00317	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  0031b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  00323	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@400921fb60000000
  0032b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0032f	51		 push	 ecx
  00330	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00335	8b 55 f0	 mov	 edx, DWORD PTR _raw$13[ebp]
  00338	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  0033e	50		 push	 eax
  0033f	e8 00 00 00 00	 call	 ?set_rotation_angle_of_helicopter_main_rotors@@YGXPAUOBJECT_3D_INSTANCE@@M@Z ; set_rotation_angle_of_helicopter_main_rotors

; 462  : 
; 463  : 			set_rotation_angle_of_helicopter_tail_rotor (raw->ac.inst3d, sfrand1 () * PI);

  00344	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  0034e	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00353	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00358	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  0035e	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00361	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00367	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  0036d	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00371	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  00379	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@400921fb60000000
  00381	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00385	51		 push	 ecx
  00386	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038b	8b 55 f0	 mov	 edx, DWORD PTR _raw$13[ebp]
  0038e	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  00394	50		 push	 eax
  00395	e8 00 00 00 00	 call	 ?set_rotation_angle_of_helicopter_tail_rotor@@YGXPAUOBJECT_3D_INSTANCE@@M@Z ; set_rotation_angle_of_helicopter_tail_rotor

; 464  : 
; 465  : 			//
; 466  : 			// hide weapon loading specific sub-objects
; 467  : 			//
; 468  : 
; 469  : 			if (get_local_entity_int_value (en, INT_TYPE_PLAYER_CONTROLLABLE))

  0039a	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0039e	74 0d		 je	 SHORT $LN24@unpack_loc
  003a0	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  003a3	8b 08		 mov	 ecx, DWORD PTR [eax]
  003a5	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv248[ebp], ecx
  003ab	eb 20		 jmp	 SHORT $LN25@unpack_loc
$LN24@unpack_loc:
  003ad	68 d5 01 00 00	 push	 469			; 000001d5H
  003b2	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
  003b7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003bd	52		 push	 edx
  003be	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003c3	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv248[ebp], 0
$LN25@unpack_loc:
  003cd	b8 01 00 00 00	 mov	 eax, 1
  003d2	85 c0		 test	 eax, eax
  003d4	74 0c		 je	 SHORT $LN26@unpack_loc
  003d6	c7 85 40 ff ff
	ff 9d 00 00 00	 mov	 DWORD PTR tv255[ebp], 157 ; 0000009dH
  003e0	eb 20		 jmp	 SHORT $LN27@unpack_loc
$LN26@unpack_loc:
  003e2	68 d5 01 00 00	 push	 469			; 000001d5H
  003e7	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
  003ec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  003f2	51		 push	 ecx
  003f3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003f8	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv255[ebp], 0
$LN27@unpack_loc:
  00402	68 9d 00 00 00	 push	 157			; 0000009dH
  00407	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0040a	52		 push	 edx
  0040b	69 85 44 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv248[ebp], 1116
  00415	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR tv255[ebp]
  0041b	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00422	ff d2		 call	 edx
  00424	85 c0		 test	 eax, eax
  00426	74 09		 je	 SHORT $LN10@unpack_loc

; 470  : 			{
; 471  : 				deactivate_weapon_payload_markers (en);

  00428	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0042b	50		 push	 eax
  0042c	e8 00 00 00 00	 call	 ?deactivate_weapon_payload_markers@@YGXPAUENTITY@@@Z ; deactivate_weapon_payload_markers
$LN10@unpack_loc:

; 472  : 			}
; 473  : 
; 474  : 			set_sub_object_type_visible_status (raw->ac.inst3d, OBJECT_3D_SUB_OBJECT_TROOP_TAKEOFF_ROUTE, FALSE);

  00431	6a 00		 push	 0
  00433	6a 34		 push	 52			; 00000034H
  00435	8b 45 f0	 mov	 eax, DWORD PTR _raw$13[ebp]
  00438	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0043e	51		 push	 ecx
  0043f	e8 00 00 00 00	 call	 ?set_sub_object_type_visible_status@@YGHPAUOBJECT_3D_INSTANCE@@HH@Z ; set_sub_object_type_visible_status

; 475  : 			set_sub_object_type_visible_status (raw->ac.inst3d, OBJECT_3D_SUB_OBJECT_TROOP_LANDING_ROUTE, FALSE);

  00444	6a 00		 push	 0
  00446	6a 59		 push	 89			; 00000059H
  00448	8b 45 f0	 mov	 eax, DWORD PTR _raw$13[ebp]
  0044b	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00451	51		 push	 ecx
  00452	e8 00 00 00 00	 call	 ?set_sub_object_type_visible_status@@YGHPAUOBJECT_3D_INSTANCE@@HH@Z ; set_sub_object_type_visible_status

; 476  : 
; 477  : 			//
; 478  : 			// link into system
; 479  : 			//
; 480  : 
; 481  : 			insert_local_entity_into_parents_child_list (en, LIST_TYPE_VIEW, get_camera_entity (), NULL);

  00457	6a 00		 push	 0
  00459	a1 00 00 00 00	 mov	 eax, DWORD PTR ?camera_entity@@3PAUENTITY@@A ; camera_entity
  0045e	50		 push	 eax
  0045f	6a 2a		 push	 42			; 0000002aH
  00461	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00464	51		 push	 ecx
  00465	e8 00 00 00 00	 call	 ?insert_local_entity_into_parents_child_list@@YGXPAUENTITY@@W4LIST_TYPES@@00@Z ; insert_local_entity_into_parents_child_list

; 482  : 
; 483  : 			insert_local_entity_into_parents_child_list (en, LIST_TYPE_SECTOR, get_local_sector_entity (&raw->ac.mob.position), NULL);

  0046a	6a 00		 push	 0
  0046c	8b 45 f0	 mov	 eax, DWORD PTR _raw$13[ebp]
  0046f	83 c0 04	 add	 eax, 4
  00472	50		 push	 eax
  00473	e8 00 00 00 00	 call	 ?get_local_sector_entity@@YGPAUENTITY@@PAUVEC3D@@@Z ; get_local_sector_entity
  00478	50		 push	 eax
  00479	6a 21		 push	 33			; 00000021H
  0047b	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0047e	51		 push	 ecx
  0047f	e8 00 00 00 00	 call	 ?insert_local_entity_into_parents_child_list@@YGXPAUENTITY@@W4LIST_TYPES@@00@Z ; insert_local_entity_into_parents_child_list

; 484  : 
; 485  : 			insert_local_entity_into_parents_child_list (en, LIST_TYPE_UPDATE, get_update_entity (), NULL);

  00484	6a 00		 push	 0
  00486	a1 00 00 00 00	 mov	 eax, DWORD PTR ?update_entity@@3PAUENTITY@@A ; update_entity
  0048b	50		 push	 eax
  0048c	6a 29		 push	 41			; 00000029H
  0048e	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00491	51		 push	 ecx
  00492	e8 00 00 00 00	 call	 ?insert_local_entity_into_parents_child_list@@YGXPAUENTITY@@W4LIST_TYPES@@00@Z ; insert_local_entity_into_parents_child_list

; 486  : 
; 487  : 			add_to_force_info (get_local_force_entity ((entity_sides) raw->ac.mob.side), en);

  00497	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0049a	50		 push	 eax
  0049b	8b 4d f0	 mov	 ecx, DWORD PTR _raw$13[ebp]
  0049e	8b 51 7c	 mov	 edx, DWORD PTR [ecx+124]
  004a1	d1 ea		 shr	 edx, 1
  004a3	83 e2 03	 and	 edx, 3
  004a6	52		 push	 edx
  004a7	e8 00 00 00 00	 call	 ?get_local_force_entity@@YGPAUENTITY@@W4ENTITY_SIDES@@@Z ; get_local_force_entity
  004ac	50		 push	 eax
  004ad	e8 00 00 00 00	 call	 ?add_to_force_info@@YGXPAUENTITY@@0@Z ; add_to_force_info

; 488  : 
; 489  : 			break;

  004b2	e9 6f 0b 00 00	 jmp	 $LN2@unpack_loc
$LN11@unpack_loc:

; 490  : 		}
; 491  : 		////////////////////////////////////////
; 492  : 		case PACK_MODE_CLIENT_SESSION:
; 493  : 		////////////////////////////////////////
; 494  : 		{
; 495  : 			int
; 496  : 				main_rotor_damaged,
; 497  : 				tail_rotor_damaged,
; 498  : 				index;
; 499  : 
; 500  : 			helicopter
; 501  : 				*raw;
; 502  : 
; 503  : 			//
; 504  : 			// create entity
; 505  : 			//
; 506  : 
; 507  : 			index = unpack_entity_safe_index ();

  004b7	e8 00 00 00 00	 call	 ?unpack_entity_safe_index@@YGHXZ ; unpack_entity_safe_index
  004bc	89 45 e4	 mov	 DWORD PTR _index$10[ebp], eax

; 508  : 
; 509  : 			en = get_free_entity (index);

  004bf	8b 45 e4	 mov	 eax, DWORD PTR _index$10[ebp]
  004c2	50		 push	 eax
  004c3	e8 00 00 00 00	 call	 ?get_free_entity@@YGPAUENTITY@@H@Z ; get_free_entity
  004c8	89 45 08	 mov	 DWORD PTR _en$[ebp], eax

; 510  : 
; 511  : 			set_local_entity_type (en, type);

  004cb	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  004ce	8b 4d 0c	 mov	 ecx, DWORD PTR _type$[ebp]
  004d1	89 08		 mov	 DWORD PTR [eax], ecx

; 512  : 
; 513  : 			raw = (helicopter *) malloc_fast_mem (sizeof (helicopter));

  004d3	68 e4 01 00 00	 push	 484			; 000001e4H
  004d8	e8 00 00 00 00	 call	 ?malloc_fast_memory@@YGPAXI@Z ; malloc_fast_memory
  004dd	89 45 e0	 mov	 DWORD PTR _raw$9[ebp], eax

; 514  : 
; 515  : 			set_local_entity_data (en, raw);

  004e0	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  004e3	8b 4d e0	 mov	 ecx, DWORD PTR _raw$9[ebp]
  004e6	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 516  : 
; 517  : 			memset (raw, 0, sizeof (helicopter));

  004e9	68 e4 01 00 00	 push	 484			; 000001e4H
  004ee	6a 00		 push	 0
  004f0	8b 45 e0	 mov	 eax, DWORD PTR _raw$9[ebp]
  004f3	50		 push	 eax
  004f4	e8 00 00 00 00	 call	 _memset
  004f9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 518  : 
; 519  : 			//
; 520  : 			// unpack data aircraft (in exactly the same order as the data was packed)
; 521  : 			//
; 522  : 
; 523  : 			unpack_aircraft_data (en, &raw->ac, mode);

  004fc	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  004ff	50		 push	 eax
  00500	8b 4d e0	 mov	 ecx, DWORD PTR _raw$9[ebp]
  00503	51		 push	 ecx
  00504	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00507	52		 push	 edx
  00508	e8 00 00 00 00	 call	 ?unpack_aircraft_data@@YGXPAUENTITY@@PAUAIRCRAFT@@W4PACK_MODES@@@Z ; unpack_aircraft_data

; 524  : 
; 525  : 			if (unpack_int_value (en, INT_TYPE_VALID))

  0050d	68 ef 00 00 00	 push	 239			; 000000efH
  00512	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00515	50		 push	 eax
  00516	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  0051b	85 c0		 test	 eax, eax
  0051d	74 2f		 je	 SHORT $LN12@unpack_loc

; 526  : 			{
; 527  : 
; 528  : 				raw->ac.mob.velocity = 0.0;

  0051f	8b 45 e0	 mov	 eax, DWORD PTR _raw$9[ebp]
  00522	0f 57 c0	 xorps	 xmm0, xmm0
  00525	f3 0f 11 40 40	 movss	 DWORD PTR [eax+64], xmm0

; 529  : 
; 530  : 				raw->main_rotor_rpm = 0.0;

  0052a	8b 45 e0	 mov	 eax, DWORD PTR _raw$9[ebp]
  0052d	0f 57 c0	 xorps	 xmm0, xmm0
  00530	f3 0f 11 80 8c
	01 00 00	 movss	 DWORD PTR [eax+396], xmm0

; 531  : 
; 532  : 				raw->main_rotor_spin_up_timer = unpack_float_value (en, FLOAT_TYPE_MAIN_ROTOR_SPIN_UP_TIMER);

  00538	6a 4a		 push	 74			; 0000004aH
  0053a	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0053d	50		 push	 eax
  0053e	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  00543	8b 4d e0	 mov	 ecx, DWORD PTR _raw$9[ebp]
  00546	d9 99 9c 01 00
	00		 fstp	 DWORD PTR [ecx+412]

; 533  : 			}
; 534  : 			else

  0054c	eb 4b		 jmp	 SHORT $LN13@unpack_loc
$LN12@unpack_loc:

; 535  : 			{
; 536  : 
; 537  : 				raw->ac.mob.velocity = unpack_float_value (en, FLOAT_TYPE_MEDIUM_VELOCITY);

  0054e	6a 50		 push	 80			; 00000050H
  00550	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00553	50		 push	 eax
  00554	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  00559	8b 4d e0	 mov	 ecx, DWORD PTR _raw$9[ebp]
  0055c	d9 59 40	 fstp	 DWORD PTR [ecx+64]

; 538  : 
; 539  : 				raw->main_rotor_rpm = (unpack_float_value (en, FLOAT_TYPE_MAIN_ROTOR_RPM) * 7);

  0055f	6a 48		 push	 72			; 00000048H
  00561	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00564	50		 push	 eax
  00565	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  0056a	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv910[ebp]
  00570	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv910[ebp]
  00578	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40e00000
  00580	8b 4d e0	 mov	 ecx, DWORD PTR _raw$9[ebp]
  00583	f3 0f 11 81 8c
	01 00 00	 movss	 DWORD PTR [ecx+396], xmm0

; 540  : 
; 541  : 				raw->main_rotor_spin_up_timer = 0.0;

  0058b	8b 45 e0	 mov	 eax, DWORD PTR _raw$9[ebp]
  0058e	0f 57 c0	 xorps	 xmm0, xmm0
  00591	f3 0f 11 80 9c
	01 00 00	 movss	 DWORD PTR [eax+412], xmm0
$LN13@unpack_loc:

; 542  : 			}
; 543  : 
; 544  : 			//
; 545  : 			// unpack helicopter data
; 546  : 			//
; 547  : 
; 548  : 			raw->fuel_supply_level = unpack_float_value (en, FLOAT_TYPE_FUEL_SUPPLY_LEVEL);

  00599	6a 30		 push	 48			; 00000030H
  0059b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0059e	50		 push	 eax
  0059f	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  005a4	8b 4d e0	 mov	 ecx, DWORD PTR _raw$9[ebp]
  005a7	d9 99 84 01 00
	00		 fstp	 DWORD PTR [ecx+388]

; 549  : 
; 550  : 			// invulnerable timer
; 551  : 
; 552  : 			// main_rotor_pitch
; 553  : 
; 554  : 			// main_rotor_roll
; 555  : 
; 556  : 			// main_rotor_blade_coning_angle
; 557  : 
; 558  : 			raw->tail_rotor_rpm = raw->main_rotor_rpm;

  005ad	8b 45 e0	 mov	 eax, DWORD PTR _raw$9[ebp]
  005b0	8b 4d e0	 mov	 ecx, DWORD PTR _raw$9[ebp]
  005b3	8b 91 8c 01 00
	00		 mov	 edx, DWORD PTR [ecx+396]
  005b9	89 90 a8 01 00
	00		 mov	 DWORD PTR [eax+424], edx

; 559  : 
; 560  : 			/////////////////////////////////////////////////////////////////
; 561  : 			if (unpack_int_value (en, INT_TYPE_VALID))

  005bf	68 ef 00 00 00	 push	 239			; 000000efH
  005c4	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  005c7	50		 push	 eax
  005c8	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  005cd	85 c0		 test	 eax, eax
  005cf	74 2e		 je	 SHORT $LN14@unpack_loc

; 562  : 			{
; 563  : 
; 564  : 				raw->helicopter_damage_flags = unpack_int_value (en, INT_TYPE_HELICOPTER_DAMAGE_FLAGS);

  005d1	6a 54		 push	 84			; 00000054H
  005d3	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  005d6	50		 push	 eax
  005d7	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  005dc	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv351[ebp], eax
  005e2	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR tv351[ebp]
  005e8	8b 55 e0	 mov	 edx, DWORD PTR _raw$9[ebp]
  005eb	8b 82 ac 01 00
	00		 mov	 eax, DWORD PTR [edx+428]
  005f1	83 e0 00	 and	 eax, 0
  005f4	0b c1		 or	 eax, ecx
  005f6	8b 4d e0	 mov	 ecx, DWORD PTR _raw$9[ebp]
  005f9	89 81 ac 01 00
	00		 mov	 DWORD PTR [ecx+428], eax
$LN14@unpack_loc:

; 565  : 			}
; 566  : 			/////////////////////////////////////////////////////////////////
; 567  : 
; 568  : 			raw->player = unpack_int_value (en, INT_TYPE_PLAYER);

  005ff	68 9c 00 00 00	 push	 156			; 0000009cH
  00604	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00607	50		 push	 eax
  00608	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  0060d	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv360[ebp], eax
  00613	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR tv360[ebp]
  00619	83 e1 03	 and	 ecx, 3
  0061c	d1 e1		 shl	 ecx, 1
  0061e	8b 55 e0	 mov	 edx, DWORD PTR _raw$9[ebp]
  00621	8b 82 b0 01 00
	00		 mov	 eax, DWORD PTR [edx+432]
  00627	83 e0 f9	 and	 eax, -7			; fffffff9H
  0062a	0b c1		 or	 eax, ecx
  0062c	8b 4d e0	 mov	 ecx, DWORD PTR _raw$9[ebp]
  0062f	89 81 b0 01 00
	00		 mov	 DWORD PTR [ecx+432], eax

; 569  : 
; 570  : 			if (raw->player != ENTITY_PLAYER_AI)

  00635	8b 45 e0	 mov	 eax, DWORD PTR _raw$9[ebp]
  00638	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  0063e	d1 e9		 shr	 ecx, 1
  00640	83 e1 03	 and	 ecx, 3
  00643	0f 84 7a 01 00
	00		 je	 $LN15@unpack_loc

; 571  : 			{
; 572  : 
; 573  : 				raw->auto_pilot = unpack_int_value (en, INT_TYPE_AUTO_PILOT);

  00649	6a 0c		 push	 12			; 0000000cH
  0064b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0064e	50		 push	 eax
  0064f	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00654	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv374[ebp], eax
  0065a	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR tv374[ebp]
  00660	83 e1 01	 and	 ecx, 1
  00663	8b 55 e0	 mov	 edx, DWORD PTR _raw$9[ebp]
  00666	8b 82 b0 01 00
	00		 mov	 eax, DWORD PTR [edx+432]
  0066c	83 e0 fe	 and	 eax, -2			; fffffffeH
  0066f	0b c1		 or	 eax, ecx
  00671	8b 4d e0	 mov	 ecx, DWORD PTR _raw$9[ebp]
  00674	89 81 b0 01 00
	00		 mov	 DWORD PTR [ecx+432], eax

; 574  : 
; 575  : 				raw->los_to_target = unpack_int_value (en, INT_TYPE_LOS_TO_TARGET);

  0067a	68 80 00 00 00	 push	 128			; 00000080H
  0067f	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00682	50		 push	 eax
  00683	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00688	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv383[ebp], eax
  0068e	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR tv383[ebp]
  00694	83 e1 01	 and	 ecx, 1
  00697	c1 e1 05	 shl	 ecx, 5
  0069a	8b 55 e0	 mov	 edx, DWORD PTR _raw$9[ebp]
  0069d	8b 82 b0 01 00
	00		 mov	 eax, DWORD PTR [edx+432]
  006a3	83 e0 df	 and	 eax, -33		; ffffffdfH
  006a6	0b c1		 or	 eax, ecx
  006a8	8b 4d e0	 mov	 ecx, DWORD PTR _raw$9[ebp]
  006ab	89 81 b0 01 00
	00		 mov	 DWORD PTR [ecx+432], eax

; 576  : 
; 577  : 				raw->radar_on = unpack_int_value (en, INT_TYPE_RADAR_ON);

  006b1	68 a9 00 00 00	 push	 169			; 000000a9H
  006b6	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  006b9	50		 push	 eax
  006ba	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  006bf	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv393[ebp], eax
  006c5	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR tv393[ebp]
  006cb	83 e1 01	 and	 ecx, 1
  006ce	c1 e1 06	 shl	 ecx, 6
  006d1	8b 55 e0	 mov	 edx, DWORD PTR _raw$9[ebp]
  006d4	8b 82 b0 01 00
	00		 mov	 eax, DWORD PTR [edx+432]
  006da	83 e0 bf	 and	 eax, -65		; ffffffbfH
  006dd	0b c1		 or	 eax, ecx
  006df	8b 4d e0	 mov	 ecx, DWORD PTR _raw$9[ebp]
  006e2	89 81 b0 01 00
	00		 mov	 DWORD PTR [ecx+432], eax

; 578  : 
; 579  : 				raw->laser_on = unpack_int_value (en, INT_TYPE_LASER_ON);

  006e8	6a 78		 push	 120			; 00000078H
  006ea	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  006ed	50		 push	 eax
  006ee	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  006f3	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv403[ebp], eax
  006f9	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR tv403[ebp]
  006ff	83 e1 01	 and	 ecx, 1
  00702	c1 e1 07	 shl	 ecx, 7
  00705	8b 55 e0	 mov	 edx, DWORD PTR _raw$9[ebp]
  00708	8b 82 b0 01 00
	00		 mov	 eax, DWORD PTR [edx+432]
  0070e	25 7f ff ff ff	 and	 eax, -129		; ffffff7fH
  00713	0b c1		 or	 eax, ecx
  00715	8b 4d e0	 mov	 ecx, DWORD PTR _raw$9[ebp]
  00718	89 81 b0 01 00
	00		 mov	 DWORD PTR [ecx+432], eax

; 580  : 
; 581  : 				raw->infra_red_jammer_on = unpack_int_value (en, INT_TYPE_INFRA_RED_JAMMER_ON);

  0071e	6a 68		 push	 104			; 00000068H
  00720	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00723	50		 push	 eax
  00724	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00729	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv413[ebp], eax
  0072f	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR tv413[ebp]
  00735	83 e1 01	 and	 ecx, 1
  00738	c1 e1 08	 shl	 ecx, 8
  0073b	8b 55 e0	 mov	 edx, DWORD PTR _raw$9[ebp]
  0073e	8b 82 b0 01 00
	00		 mov	 eax, DWORD PTR [edx+432]
  00744	25 ff fe ff ff	 and	 eax, -257		; fffffeffH
  00749	0b c1		 or	 eax, ecx
  0074b	8b 4d e0	 mov	 ecx, DWORD PTR _raw$9[ebp]
  0074e	89 81 b0 01 00
	00		 mov	 DWORD PTR [ecx+432], eax

; 582  : 
; 583  : 				raw->radar_jammer_on = unpack_int_value (en, INT_TYPE_RADAR_JAMMER_ON);

  00754	68 a8 00 00 00	 push	 168			; 000000a8H
  00759	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0075c	50		 push	 eax
  0075d	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00762	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv423[ebp], eax
  00768	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR tv423[ebp]
  0076e	83 e1 01	 and	 ecx, 1
  00771	c1 e1 09	 shl	 ecx, 9
  00774	8b 55 e0	 mov	 edx, DWORD PTR _raw$9[ebp]
  00777	8b 82 b0 01 00
	00		 mov	 eax, DWORD PTR [edx+432]
  0077d	25 ff fd ff ff	 and	 eax, -513		; fffffdffH
  00782	0b c1		 or	 eax, ecx
  00784	8b 4d e0	 mov	 ecx, DWORD PTR _raw$9[ebp]
  00787	89 81 b0 01 00
	00		 mov	 DWORD PTR [ecx+432], eax

; 584  : 
; 585  : 				raw->lock_on_after_launch = unpack_int_value (en, INT_TYPE_LOCK_ON_AFTER_LAUNCH);

  0078d	6a 7e		 push	 126			; 0000007eH
  0078f	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00792	50		 push	 eax
  00793	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00798	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv433[ebp], eax
  0079e	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR tv433[ebp]
  007a4	83 e1 01	 and	 ecx, 1
  007a7	c1 e1 0c	 shl	 ecx, 12			; 0000000cH
  007aa	8b 55 e0	 mov	 edx, DWORD PTR _raw$9[ebp]
  007ad	8b 82 b0 01 00
	00		 mov	 eax, DWORD PTR [edx+432]
  007b3	25 ff ef ff ff	 and	 eax, -4097		; ffffefffH
  007b8	0b c1		 or	 eax, ecx
  007ba	8b 4d e0	 mov	 ecx, DWORD PTR _raw$9[ebp]
  007bd	89 81 b0 01 00
	00		 mov	 DWORD PTR [ecx+432], eax
$LN15@unpack_loc:

; 586  : 			}
; 587  : 
; 588  : 			main_rotor_damaged = unpack_int_value (en, INT_TYPE_MAIN_ROTOR_DAMAGED);

  007c3	68 81 00 00 00	 push	 129			; 00000081H
  007c8	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  007cb	50		 push	 eax
  007cc	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  007d1	89 45 ec	 mov	 DWORD PTR _main_rotor_damaged$12[ebp], eax

; 589  : 
; 590  : 			tail_rotor_damaged = unpack_int_value (en, INT_TYPE_TAIL_ROTOR_DAMAGED);

  007d4	68 d2 00 00 00	 push	 210			; 000000d2H
  007d9	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  007dc	50		 push	 eax
  007dd	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  007e2	89 45 e8	 mov	 DWORD PTR _tail_rotor_damaged$11[ebp], eax

; 591  : 
; 592  : 			raw->weapons_hold = unpack_int_value (en, INT_TYPE_WEAPONS_HOLD);

  007e5	68 11 01 00 00	 push	 273			; 00000111H
  007ea	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  007ed	50		 push	 eax
  007ee	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  007f3	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv449[ebp], eax
  007f9	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR tv449[ebp]
  007ff	83 e1 01	 and	 ecx, 1
  00802	c1 e1 0a	 shl	 ecx, 10			; 0000000aH
  00805	8b 55 e0	 mov	 edx, DWORD PTR _raw$9[ebp]
  00808	8b 82 b0 01 00
	00		 mov	 eax, DWORD PTR [edx+432]
  0080e	25 ff fb ff ff	 and	 eax, -1025		; fffffbffH
  00813	0b c1		 or	 eax, ecx
  00815	8b 4d e0	 mov	 ecx, DWORD PTR _raw$9[ebp]
  00818	89 81 b0 01 00
	00		 mov	 DWORD PTR [ecx+432], eax

; 593  : 
; 594  : 			raw->position_hold = unpack_int_value (en, INT_TYPE_POSITION_HOLD);

  0081e	68 a0 00 00 00	 push	 160			; 000000a0H
  00823	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00826	50		 push	 eax
  00827	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  0082c	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv459[ebp], eax
  00832	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR tv459[ebp]
  00838	83 e1 01	 and	 ecx, 1
  0083b	c1 e1 0b	 shl	 ecx, 11			; 0000000bH
  0083e	8b 55 e0	 mov	 edx, DWORD PTR _raw$9[ebp]
  00841	8b 82 b0 01 00
	00		 mov	 eax, DWORD PTR [edx+432]
  00847	25 ff f7 ff ff	 and	 eax, -2049		; fffff7ffH
  0084c	0b c1		 or	 eax, ecx
  0084e	8b 4d e0	 mov	 ecx, DWORD PTR _raw$9[ebp]
  00851	89 81 b0 01 00
	00		 mov	 DWORD PTR [ecx+432], eax

; 595  : 
; 596  : 			// gunship_target_root
; 597  : 
; 598  : 			// cover_position
; 599  : 
; 600  : 			unpack_vec3d (en, VEC3D_TYPE_WAIT_POSITION, &raw->wait_position);

  00857	8b 45 e0	 mov	 eax, DWORD PTR _raw$9[ebp]
  0085a	05 cc 01 00 00	 add	 eax, 460		; 000001ccH
  0085f	50		 push	 eax
  00860	6a 0c		 push	 12			; 0000000cH
  00862	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00865	51		 push	 ecx
  00866	e8 00 00 00 00	 call	 ?unpack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; unpack_vec3d

; 601  : 
; 602  : 			unpack_vec3d (en, VEC3D_TYPE_EO_TRACKING_POINT, &raw->eo_tracking_point);

  0086b	8b 45 e0	 mov	 eax, DWORD PTR _raw$9[ebp]
  0086e	05 d8 01 00 00	 add	 eax, 472		; 000001d8H
  00873	50		 push	 eax
  00874	6a 03		 push	 3
  00876	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00879	51		 push	 ecx
  0087a	e8 00 00 00 00	 call	 ?unpack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; unpack_vec3d

; 603  : 
; 604  : 			//
; 605  : 			// unpack local only special effects
; 606  : 			//
; 607  : 
; 608  : 			unpack_mobile_local_sound_effects (en, mode);

  0087f	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  00882	50		 push	 eax
  00883	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00886	51		 push	 ecx
  00887	e8 00 00 00 00	 call	 ?unpack_mobile_local_sound_effects@@YGHPAUENTITY@@W4PACK_MODES@@@Z ; unpack_mobile_local_sound_effects

; 609  : 
; 610  : 			/////////////////////////////////////////////////////////////////
; 611  : 
; 612  : 			set_helicopter_id_number (en);

  0088c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0088f	50		 push	 eax
  00890	e8 00 00 00 00	 call	 ?set_helicopter_id_number@@YGXPAUENTITY@@@Z ; set_helicopter_id_number

; 613  : 
; 614  : 			if (main_rotor_damaged)

  00895	83 7d ec 00	 cmp	 DWORD PTR _main_rotor_damaged$12[ebp], 0
  00899	74 1e		 je	 SHORT $LN16@unpack_loc

; 615  : 			{
; 616  : 				damage_helicopter_main_rotors (en);

  0089b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0089e	50		 push	 eax
  0089f	e8 00 00 00 00	 call	 ?damage_helicopter_main_rotors@@YGHPAUENTITY@@@Z ; damage_helicopter_main_rotors

; 617  : 
; 618  : 				raw->main_rotor_damaged = TRUE;

  008a4	8b 45 e0	 mov	 eax, DWORD PTR _raw$9[ebp]
  008a7	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  008ad	83 c9 08	 or	 ecx, 8
  008b0	8b 55 e0	 mov	 edx, DWORD PTR _raw$9[ebp]
  008b3	89 8a b0 01 00
	00		 mov	 DWORD PTR [edx+432], ecx
$LN16@unpack_loc:

; 619  : 			}
; 620  : 
; 621  : 			if (tail_rotor_damaged)

  008b9	83 7d e8 00	 cmp	 DWORD PTR _tail_rotor_damaged$11[ebp], 0
  008bd	74 1e		 je	 SHORT $LN17@unpack_loc

; 622  : 			{
; 623  : 				damage_helicopter_tail_rotors (en);

  008bf	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  008c2	50		 push	 eax
  008c3	e8 00 00 00 00	 call	 ?damage_helicopter_tail_rotors@@YGHPAUENTITY@@@Z ; damage_helicopter_tail_rotors

; 624  : 
; 625  : 				raw->tail_rotor_damaged = TRUE;

  008c8	8b 45 e0	 mov	 eax, DWORD PTR _raw$9[ebp]
  008cb	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  008d1	83 c9 10	 or	 ecx, 16			; 00000010H
  008d4	8b 55 e0	 mov	 edx, DWORD PTR _raw$9[ebp]
  008d7	89 8a b0 01 00
	00		 mov	 DWORD PTR [edx+432], ecx
$LN17@unpack_loc:

; 626  : 			}
; 627  : 
; 628  : 			//
; 629  : 			// vary main rotor start position (ok to use a random number as this is for visual effect only)
; 630  : 			//
; 631  : 
; 632  : 			set_rotation_angle_of_helicopter_main_rotors (raw->ac.inst3d, sfrand1 () * PI);

  008dd	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  008e7	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  008ec	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  008f1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  008f7	c1 f9 10	 sar	 ecx, 16			; 00000010H
  008fa	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00900	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  00906	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  0090a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  00912	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@400921fb60000000
  0091a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0091e	51		 push	 ecx
  0091f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00924	8b 55 e0	 mov	 edx, DWORD PTR _raw$9[ebp]
  00927	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  0092d	50		 push	 eax
  0092e	e8 00 00 00 00	 call	 ?set_rotation_angle_of_helicopter_main_rotors@@YGXPAUOBJECT_3D_INSTANCE@@M@Z ; set_rotation_angle_of_helicopter_main_rotors

; 633  : 
; 634  : 			set_rotation_angle_of_helicopter_tail_rotor (raw->ac.inst3d, sfrand1 () * PI);

  00933	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  0093d	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00942	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00947	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  0094d	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00950	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00956	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  0095c	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00960	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  00968	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@400921fb60000000
  00970	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00974	51		 push	 ecx
  00975	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0097a	8b 55 e0	 mov	 edx, DWORD PTR _raw$9[ebp]
  0097d	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  00983	50		 push	 eax
  00984	e8 00 00 00 00	 call	 ?set_rotation_angle_of_helicopter_tail_rotor@@YGXPAUOBJECT_3D_INSTANCE@@M@Z ; set_rotation_angle_of_helicopter_tail_rotor

; 635  : 
; 636  : 			//
; 637  : 			// hide weapon loading specific sub-objects
; 638  : 			//
; 639  : 
; 640  : 			if (get_local_entity_int_value (en, INT_TYPE_PLAYER_CONTROLLABLE))

  00989	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0098d	74 0d		 je	 SHORT $LN28@unpack_loc
  0098f	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00992	8b 08		 mov	 ecx, DWORD PTR [eax]
  00994	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv517[ebp], ecx
  0099a	eb 20		 jmp	 SHORT $LN29@unpack_loc
$LN28@unpack_loc:
  0099c	68 80 02 00 00	 push	 640			; 00000280H
  009a1	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
  009a6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  009ac	52		 push	 edx
  009ad	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009b2	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv517[ebp], 0
$LN29@unpack_loc:
  009bc	b8 01 00 00 00	 mov	 eax, 1
  009c1	85 c0		 test	 eax, eax
  009c3	74 0c		 je	 SHORT $LN30@unpack_loc
  009c5	c7 85 40 ff ff
	ff 9d 00 00 00	 mov	 DWORD PTR tv524[ebp], 157 ; 0000009dH
  009cf	eb 20		 jmp	 SHORT $LN31@unpack_loc
$LN30@unpack_loc:
  009d1	68 80 02 00 00	 push	 640			; 00000280H
  009d6	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
  009db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  009e1	51		 push	 ecx
  009e2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009e7	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv524[ebp], 0
$LN31@unpack_loc:
  009f1	68 9d 00 00 00	 push	 157			; 0000009dH
  009f6	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  009f9	52		 push	 edx
  009fa	69 85 44 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv517[ebp], 1116
  00a04	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR tv524[ebp]
  00a0a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00a11	ff d2		 call	 edx
  00a13	85 c0		 test	 eax, eax
  00a15	74 09		 je	 SHORT $LN18@unpack_loc

; 641  : 			{
; 642  : 				deactivate_weapon_payload_markers (en);

  00a17	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00a1a	50		 push	 eax
  00a1b	e8 00 00 00 00	 call	 ?deactivate_weapon_payload_markers@@YGXPAUENTITY@@@Z ; deactivate_weapon_payload_markers
$LN18@unpack_loc:

; 643  : 			}
; 644  : 
; 645  : 			set_sub_object_type_visible_status (raw->ac.inst3d, OBJECT_3D_SUB_OBJECT_TROOP_TAKEOFF_ROUTE, FALSE);

  00a20	6a 00		 push	 0
  00a22	6a 34		 push	 52			; 00000034H
  00a24	8b 45 e0	 mov	 eax, DWORD PTR _raw$9[ebp]
  00a27	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00a2d	51		 push	 ecx
  00a2e	e8 00 00 00 00	 call	 ?set_sub_object_type_visible_status@@YGHPAUOBJECT_3D_INSTANCE@@HH@Z ; set_sub_object_type_visible_status

; 646  : 			set_sub_object_type_visible_status (raw->ac.inst3d, OBJECT_3D_SUB_OBJECT_TROOP_LANDING_ROUTE, FALSE);

  00a33	6a 00		 push	 0
  00a35	6a 59		 push	 89			; 00000059H
  00a37	8b 45 e0	 mov	 eax, DWORD PTR _raw$9[ebp]
  00a3a	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00a40	51		 push	 ecx
  00a41	e8 00 00 00 00	 call	 ?set_sub_object_type_visible_status@@YGHPAUOBJECT_3D_INSTANCE@@HH@Z ; set_sub_object_type_visible_status

; 647  : 
; 648  : 			//
; 649  : 			// link into system
; 650  : 			//
; 651  : 
; 652  : 			add_to_force_info (get_local_force_entity ((entity_sides) raw->ac.mob.side), en);

  00a46	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00a49	50		 push	 eax
  00a4a	8b 4d e0	 mov	 ecx, DWORD PTR _raw$9[ebp]
  00a4d	8b 51 7c	 mov	 edx, DWORD PTR [ecx+124]
  00a50	d1 ea		 shr	 edx, 1
  00a52	83 e2 03	 and	 edx, 3
  00a55	52		 push	 edx
  00a56	e8 00 00 00 00	 call	 ?get_local_force_entity@@YGPAUENTITY@@W4ENTITY_SIDES@@@Z ; get_local_force_entity
  00a5b	50		 push	 eax
  00a5c	e8 00 00 00 00	 call	 ?add_to_force_info@@YGXPAUENTITY@@0@Z ; add_to_force_info

; 653  : 
; 654  : 			insert_local_entity_into_parents_child_list (en, LIST_TYPE_VIEW, get_camera_entity (), NULL);

  00a61	6a 00		 push	 0
  00a63	a1 00 00 00 00	 mov	 eax, DWORD PTR ?camera_entity@@3PAUENTITY@@A ; camera_entity
  00a68	50		 push	 eax
  00a69	6a 2a		 push	 42			; 0000002aH
  00a6b	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00a6e	51		 push	 ecx
  00a6f	e8 00 00 00 00	 call	 ?insert_local_entity_into_parents_child_list@@YGXPAUENTITY@@W4LIST_TYPES@@00@Z ; insert_local_entity_into_parents_child_list

; 655  : 
; 656  : 			insert_local_entity_into_parents_child_list (en, LIST_TYPE_SECTOR, get_local_sector_entity (&raw->ac.mob.position), NULL);

  00a74	6a 00		 push	 0
  00a76	8b 45 e0	 mov	 eax, DWORD PTR _raw$9[ebp]
  00a79	83 c0 04	 add	 eax, 4
  00a7c	50		 push	 eax
  00a7d	e8 00 00 00 00	 call	 ?get_local_sector_entity@@YGPAUENTITY@@PAUVEC3D@@@Z ; get_local_sector_entity
  00a82	50		 push	 eax
  00a83	6a 21		 push	 33			; 00000021H
  00a85	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00a88	51		 push	 ecx
  00a89	e8 00 00 00 00	 call	 ?insert_local_entity_into_parents_child_list@@YGXPAUENTITY@@W4LIST_TYPES@@00@Z ; insert_local_entity_into_parents_child_list

; 657  : 
; 658  : 			insert_local_entity_into_parents_child_list (en, LIST_TYPE_UPDATE, get_update_entity (), NULL);

  00a8e	6a 00		 push	 0
  00a90	a1 00 00 00 00	 mov	 eax, DWORD PTR ?update_entity@@3PAUENTITY@@A ; update_entity
  00a95	50		 push	 eax
  00a96	6a 29		 push	 41			; 00000029H
  00a98	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00a9b	51		 push	 ecx
  00a9c	e8 00 00 00 00	 call	 ?insert_local_entity_into_parents_child_list@@YGXPAUENTITY@@W4LIST_TYPES@@00@Z ; insert_local_entity_into_parents_child_list

; 659  : 
; 660  : 			break;

  00aa1	e9 80 05 00 00	 jmp	 $LN2@unpack_loc

; 661  : 		}
; 662  : 		////////////////////////////////////////
; 663  : 		case PACK_MODE_BROWSE_SESSION:
; 664  : 		////////////////////////////////////////
; 665  : 		{
; 666  : 			break;

  00aa6	e9 7b 05 00 00	 jmp	 $LN2@unpack_loc
$LN20@unpack_loc:

; 667  : 		}
; 668  : 		////////////////////////////////////////
; 669  : 		case PACK_MODE_UPDATE_ENTITY:
; 670  : 		////////////////////////////////////////
; 671  : 		{
; 672  : 			vec3d
; 673  : 				position,
; 674  : 				motion_vector;
; 675  : 
; 676  : 			matrix3x3
; 677  : 				attitude;
; 678  : 
; 679  : 			float
; 680  : 				velocity,
; 681  : 				main_rotor_rpm,
; 682  : 				main_rotor_blade_coning_angle,
; 683  : 				tail_rotor_rpm;
; 684  : 
; 685  : 			velocity = 0;

  00aab	0f 57 c0	 xorps	 xmm0, xmm0
  00aae	f3 0f 11 45 a0	 movss	 DWORD PTR _velocity$5[ebp], xmm0

; 686  : 
; 687  : 			//
; 688  : 			// unpack all data (even if the echoed data is to be ignored)
; 689  : 			//
; 690  : 
; 691  : 			unpack_vec3d (en, VEC3D_TYPE_POSITION, &position);

  00ab3	8d 45 d4	 lea	 eax, DWORD PTR _position$8[ebp]
  00ab6	50		 push	 eax
  00ab7	6a 08		 push	 8
  00ab9	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00abc	51		 push	 ecx
  00abd	e8 00 00 00 00	 call	 ?unpack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; unpack_vec3d

; 692  : 
; 693  : 			unpack_attitude_matrix (en, attitude);

  00ac2	8d 45 a4	 lea	 eax, DWORD PTR _attitude$6[ebp]
  00ac5	50		 push	 eax
  00ac6	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00ac9	51		 push	 ecx
  00aca	e8 00 00 00 00	 call	 ?unpack_attitude_matrix@@YGXPAUENTITY@@QAY02M@Z ; unpack_attitude_matrix

; 694  : 
; 695  : 			unpack_vec3d (en, VEC3D_TYPE_MOTION_VECTOR, &motion_vector);

  00acf	8d 45 c8	 lea	 eax, DWORD PTR _motion_vector$7[ebp]
  00ad2	50		 push	 eax
  00ad3	6a 06		 push	 6
  00ad5	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00ad8	51		 push	 ecx
  00ad9	e8 00 00 00 00	 call	 ?unpack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; unpack_vec3d

; 696  : 
; 697  : 			if (!check_zero_3d_vector (&motion_vector))

  00ade	8d 45 c8	 lea	 eax, DWORD PTR _motion_vector$7[ebp]
  00ae1	50		 push	 eax
  00ae2	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  00ae7	dd 9d 40 ff ff
	ff		 fstp	 QWORD PTR tv1066[ebp]
  00aed	f2 0f 10 85 40
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1066[ebp]
  00af5	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00afd	9f		 lahf
  00afe	f6 c4 44	 test	 ah, 68			; 00000044H
  00b01	0f 8b 9b 00 00
	00		 jnp	 $LN21@unpack_loc

; 698  : 			{
; 699  : 
; 700  : 				vec3d
; 701  : 					normalised_motion_vector;
; 702  : 
; 703  : 				normalised_motion_vector = motion_vector;

  00b07	8b 45 c8	 mov	 eax, DWORD PTR _motion_vector$7[ebp]
  00b0a	89 45 88	 mov	 DWORD PTR _normalised_motion_vector$1[ebp], eax
  00b0d	8b 4d cc	 mov	 ecx, DWORD PTR _motion_vector$7[ebp+4]
  00b10	89 4d 8c	 mov	 DWORD PTR _normalised_motion_vector$1[ebp+4], ecx
  00b13	8b 55 d0	 mov	 edx, DWORD PTR _motion_vector$7[ebp+8]
  00b16	89 55 90	 mov	 DWORD PTR _normalised_motion_vector$1[ebp+8], edx

; 704  : 
; 705  : 				normalise_3d_vector (&normalised_motion_vector);

  00b19	8d 45 88	 lea	 eax, DWORD PTR _normalised_motion_vector$1[ebp]
  00b1c	50		 push	 eax
  00b1d	e8 00 00 00 00	 call	 ?normalise_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_3d_vector
  00b22	dd d8		 fstp	 ST(0)

; 706  : 
; 707  : 				velocity = get_3d_vector_magnitude (&motion_vector) *

  00b24	8d 45 c8	 lea	 eax, DWORD PTR _motion_vector$7[ebp]
  00b27	50		 push	 eax
  00b28	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  00b2d	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv1080[ebp]
  00b33	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1080[ebp]
  00b3b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00b40	d1 e1		 shl	 ecx, 1
  00b42	8d 54 0d a4	 lea	 edx, DWORD PTR _attitude$6[ebp+ecx]
  00b46	b8 04 00 00 00	 mov	 eax, 4
  00b4b	6b c8 00	 imul	 ecx, eax, 0
  00b4e	f3 0f 10 4d 88	 movss	 xmm1, DWORD PTR _normalised_motion_vector$1[ebp]
  00b53	f3 0f 59 0c 0a	 mulss	 xmm1, DWORD PTR [edx+ecx]
  00b58	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00b5d	d1 e2		 shl	 edx, 1
  00b5f	8d 44 15 a4	 lea	 eax, DWORD PTR _attitude$6[ebp+edx]
  00b63	b9 04 00 00 00	 mov	 ecx, 4
  00b68	c1 e1 00	 shl	 ecx, 0
  00b6b	f3 0f 10 55 8c	 movss	 xmm2, DWORD PTR _normalised_motion_vector$1[ebp+4]
  00b70	f3 0f 59 14 08	 mulss	 xmm2, DWORD PTR [eax+ecx]
  00b75	f3 0f 58 ca	 addss	 xmm1, xmm2
  00b79	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00b7e	d1 e2		 shl	 edx, 1
  00b80	8d 44 15 a4	 lea	 eax, DWORD PTR _attitude$6[ebp+edx]
  00b84	b9 04 00 00 00	 mov	 ecx, 4
  00b89	d1 e1		 shl	 ecx, 1
  00b8b	f3 0f 10 55 90	 movss	 xmm2, DWORD PTR _normalised_motion_vector$1[ebp+8]
  00b90	f3 0f 59 14 08	 mulss	 xmm2, DWORD PTR [eax+ecx]
  00b95	f3 0f 58 ca	 addss	 xmm1, xmm2
  00b99	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00b9d	f3 0f 11 45 a0	 movss	 DWORD PTR _velocity$5[ebp], xmm0
$LN21@unpack_loc:

; 708  : 									(normalised_motion_vector.x * attitude [2][0] +
; 709  : 									normalised_motion_vector.y * attitude [2][1] +
; 710  : 									normalised_motion_vector.z * attitude [2][2]);
; 711  : 			}
; 712  : 
; 713  : 			main_rotor_rpm = (unpack_float_value (en, FLOAT_TYPE_MAIN_ROTOR_RPM) * 7);

  00ba2	6a 48		 push	 72			; 00000048H
  00ba4	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00ba7	50		 push	 eax
  00ba8	e8 00 00 00 00	 call	 ?unpack_float_value@@YGMPAUENTITY@@W4FLOAT_TYPES@@@Z ; unpack_float_value
  00bad	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv1126[ebp]
  00bb3	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1126[ebp]
  00bbb	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40e00000
  00bc3	f3 0f 11 45 9c	 movss	 DWORD PTR _main_rotor_rpm$4[ebp], xmm0

; 714  : 
; 715  : 			main_rotor_blade_coning_angle = rad ((((max_coning_angle - min_coning_angle) / 100.0) * main_rotor_rpm) - min_coning_angle);

  00bc8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?max_coning_angle@@3MA
  00bd0	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?min_coning_angle@@3MA
  00bd8	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00bdc	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4059000000000000
  00be4	f3 0f 5a 4d 9c	 cvtss2sd xmm1, DWORD PTR _main_rotor_rpm$4[ebp]
  00be9	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00bed	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?min_coning_angle@@3MA
  00bf5	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00bf9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f91df46a0000000
  00c01	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c05	f3 0f 11 45 98	 movss	 DWORD PTR _main_rotor_blade_coning_angle$3[ebp], xmm0

; 716  : 
; 717  : 			tail_rotor_rpm = main_rotor_rpm;

  00c0a	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _main_rotor_rpm$4[ebp]
  00c0f	f3 0f 11 45 94	 movss	 DWORD PTR _tail_rotor_rpm$2[ebp], xmm0

; 718  : 
; 719  : 			//
; 720  : 			// the local player always ignores its echoed data
; 721  : 			//
; 722  : 
; 723  : 			if (en != get_gunship_entity ())

  00c14	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00c17	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00c1d	0f 84 03 04 00
	00		 je	 $LN22@unpack_loc

; 724  : 			{
; 725  : 				//
; 726  : 				// always use access functions to set the data
; 727  : 				//
; 728  : 
; 729  : 				set_local_entity_vec3d (en, VEC3D_TYPE_POSITION, &position);

  00c23	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00c27	74 0d		 je	 SHORT $LN32@unpack_loc
  00c29	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00c2c	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c2e	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv621[ebp], ecx
  00c34	eb 27		 jmp	 SHORT $LN33@unpack_loc
$LN32@unpack_loc:
  00c36	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA
  00c3c	81 c2 8d 01 00
	00		 add	 edx, 397		; 0000018dH
  00c42	52		 push	 edx
  00c43	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c48	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00c4d	50		 push	 eax
  00c4e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c53	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv621[ebp], 0
$LN33@unpack_loc:
  00c5d	b9 01 00 00 00	 mov	 ecx, 1
  00c62	85 c9		 test	 ecx, ecx
  00c64	74 0c		 je	 SHORT $LN34@unpack_loc
  00c66	c7 85 40 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv629[ebp], 8
  00c70	eb 27		 jmp	 SHORT $LN35@unpack_loc
$LN34@unpack_loc:
  00c72	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA
  00c78	81 c2 8d 01 00
	00		 add	 edx, 397		; 0000018dH
  00c7e	52		 push	 edx
  00c7f	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c84	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00c89	50		 push	 eax
  00c8a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c8f	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv629[ebp], 0
$LN35@unpack_loc:
  00c99	8d 4d d4	 lea	 ecx, DWORD PTR _position$8[ebp]
  00c9c	51		 push	 ecx
  00c9d	6a 08		 push	 8
  00c9f	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00ca2	52		 push	 edx
  00ca3	6b 85 44 ff ff
	ff 60		 imul	 eax, DWORD PTR tv621[ebp], 96
  00caa	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR tv629[ebp]
  00cb0	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_set_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  00cb7	ff d2		 call	 edx

; 730  : 
; 731  : 				set_local_entity_attitude_matrix (en, attitude);

  00cb9	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00cbd	74 0d		 je	 SHORT $LN36@unpack_loc
  00cbf	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00cc2	8b 08		 mov	 ecx, DWORD PTR [eax]
  00cc4	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv641[ebp], ecx
  00cca	eb 27		 jmp	 SHORT $LN37@unpack_loc
$LN36@unpack_loc:
  00ccc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA
  00cd2	81 c2 8f 01 00
	00		 add	 edx, 399		; 0000018fH
  00cd8	52		 push	 edx
  00cd9	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
  00cde	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00ce3	50		 push	 eax
  00ce4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ce9	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv641[ebp], 0
$LN37@unpack_loc:
  00cf3	8d 4d a4	 lea	 ecx, DWORD PTR _attitude$6[ebp]
  00cf6	51		 push	 ecx
  00cf7	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00cfa	52		 push	 edx
  00cfb	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR tv641[ebp]
  00d01	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_local_entity_attitude_matrix@@3PAP6GXPAUENTITY@@QAY02M@ZA[eax*4]
  00d08	ff d1		 call	 ecx

; 732  : 
; 733  : 				set_local_entity_vec3d (en, VEC3D_TYPE_MOTION_VECTOR, &motion_vector);

  00d0a	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00d0e	74 0d		 je	 SHORT $LN38@unpack_loc
  00d10	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00d13	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d15	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv652[ebp], ecx
  00d1b	eb 27		 jmp	 SHORT $LN39@unpack_loc
$LN38@unpack_loc:
  00d1d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA
  00d23	81 c2 91 01 00
	00		 add	 edx, 401		; 00000191H
  00d29	52		 push	 edx
  00d2a	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d2f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00d34	50		 push	 eax
  00d35	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d3a	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv652[ebp], 0
$LN39@unpack_loc:
  00d44	b9 01 00 00 00	 mov	 ecx, 1
  00d49	85 c9		 test	 ecx, ecx
  00d4b	74 0c		 je	 SHORT $LN40@unpack_loc
  00d4d	c7 85 40 ff ff
	ff 06 00 00 00	 mov	 DWORD PTR tv660[ebp], 6
  00d57	eb 27		 jmp	 SHORT $LN41@unpack_loc
$LN40@unpack_loc:
  00d59	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA
  00d5f	81 c2 91 01 00
	00		 add	 edx, 401		; 00000191H
  00d65	52		 push	 edx
  00d66	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d6b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00d70	50		 push	 eax
  00d71	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d76	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv660[ebp], 0
$LN41@unpack_loc:
  00d80	8d 4d c8	 lea	 ecx, DWORD PTR _motion_vector$7[ebp]
  00d83	51		 push	 ecx
  00d84	6a 06		 push	 6
  00d86	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00d89	52		 push	 edx
  00d8a	6b 85 44 ff ff
	ff 60		 imul	 eax, DWORD PTR tv652[ebp], 96
  00d91	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR tv660[ebp]
  00d97	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_set_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  00d9e	ff d2		 call	 edx

; 734  : 
; 735  : 				set_local_entity_float_value (en, FLOAT_TYPE_VELOCITY, velocity);

  00da0	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00da4	74 0d		 je	 SHORT $LN42@unpack_loc
  00da6	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00da9	8b 08		 mov	 ecx, DWORD PTR [eax]
  00dab	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv672[ebp], ecx
  00db1	eb 27		 jmp	 SHORT $LN43@unpack_loc
$LN42@unpack_loc:
  00db3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA
  00db9	81 c2 93 01 00
	00		 add	 edx, 403		; 00000193H
  00dbf	52		 push	 edx
  00dc0	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
  00dc5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00dca	50		 push	 eax
  00dcb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00dd0	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv672[ebp], 0
$LN43@unpack_loc:
  00dda	b9 01 00 00 00	 mov	 ecx, 1
  00ddf	85 c9		 test	 ecx, ecx
  00de1	74 0c		 je	 SHORT $LN44@unpack_loc
  00de3	c7 85 40 ff ff
	ff 93 00 00 00	 mov	 DWORD PTR tv680[ebp], 147 ; 00000093H
  00ded	eb 27		 jmp	 SHORT $LN45@unpack_loc
$LN44@unpack_loc:
  00def	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA
  00df5	81 c2 93 01 00
	00		 add	 edx, 403		; 00000193H
  00dfb	52		 push	 edx
  00dfc	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e01	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00e06	50		 push	 eax
  00e07	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e0c	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv680[ebp], 0
$LN45@unpack_loc:
  00e16	51		 push	 ecx
  00e17	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _velocity$5[ebp]
  00e1c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e21	68 93 00 00 00	 push	 147			; 00000093H
  00e26	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00e29	51		 push	 ecx
  00e2a	69 95 44 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv672[ebp], 700
  00e34	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv680[ebp]
  00e3a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_local_entity_float_value@@3PAY0KP@P6GXPAUENTITY@@W4FLOAT_TYPES@@M@ZA[edx+eax*4]
  00e41	ff d1		 call	 ecx

; 736  : 
; 737  : 				set_local_entity_float_value (en, FLOAT_TYPE_MAIN_ROTOR_RPM, main_rotor_rpm);

  00e43	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00e47	74 0d		 je	 SHORT $LN46@unpack_loc
  00e49	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00e4c	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e4e	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv692[ebp], ecx
  00e54	eb 27		 jmp	 SHORT $LN47@unpack_loc
$LN46@unpack_loc:
  00e56	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA
  00e5c	81 c2 95 01 00
	00		 add	 edx, 405		; 00000195H
  00e62	52		 push	 edx
  00e63	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e68	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00e6d	50		 push	 eax
  00e6e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e73	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv692[ebp], 0
$LN47@unpack_loc:
  00e7d	b9 01 00 00 00	 mov	 ecx, 1
  00e82	85 c9		 test	 ecx, ecx
  00e84	74 0c		 je	 SHORT $LN48@unpack_loc
  00e86	c7 85 40 ff ff
	ff 48 00 00 00	 mov	 DWORD PTR tv700[ebp], 72 ; 00000048H
  00e90	eb 27		 jmp	 SHORT $LN49@unpack_loc
$LN48@unpack_loc:
  00e92	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA
  00e98	81 c2 95 01 00
	00		 add	 edx, 405		; 00000195H
  00e9e	52		 push	 edx
  00e9f	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ea4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00ea9	50		 push	 eax
  00eaa	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00eaf	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv700[ebp], 0
$LN49@unpack_loc:
  00eb9	51		 push	 ecx
  00eba	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _main_rotor_rpm$4[ebp]
  00ebf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ec4	6a 48		 push	 72			; 00000048H
  00ec6	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00ec9	51		 push	 ecx
  00eca	69 95 44 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv692[ebp], 700
  00ed4	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv700[ebp]
  00eda	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_local_entity_float_value@@3PAY0KP@P6GXPAUENTITY@@W4FLOAT_TYPES@@M@ZA[edx+eax*4]
  00ee1	ff d1		 call	 ecx

; 738  : 
; 739  : 			 	set_local_entity_float_value (en, FLOAT_TYPE_MAIN_ROTOR_BLADE_CONING_ANGLE, main_rotor_blade_coning_angle);

  00ee3	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00ee7	74 0d		 je	 SHORT $LN50@unpack_loc
  00ee9	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00eec	8b 08		 mov	 ecx, DWORD PTR [eax]
  00eee	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv712[ebp], ecx
  00ef4	eb 27		 jmp	 SHORT $LN51@unpack_loc
$LN50@unpack_loc:
  00ef6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA
  00efc	81 c2 97 01 00
	00		 add	 edx, 407		; 00000197H
  00f02	52		 push	 edx
  00f03	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f08	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00f0d	50		 push	 eax
  00f0e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f13	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv712[ebp], 0
$LN51@unpack_loc:
  00f1d	b9 01 00 00 00	 mov	 ecx, 1
  00f22	85 c9		 test	 ecx, ecx
  00f24	74 0c		 je	 SHORT $LN52@unpack_loc
  00f26	c7 85 40 ff ff
	ff 42 00 00 00	 mov	 DWORD PTR tv720[ebp], 66 ; 00000042H
  00f30	eb 27		 jmp	 SHORT $LN53@unpack_loc
$LN52@unpack_loc:
  00f32	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA
  00f38	81 c2 97 01 00
	00		 add	 edx, 407		; 00000197H
  00f3e	52		 push	 edx
  00f3f	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f44	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00f49	50		 push	 eax
  00f4a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f4f	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv720[ebp], 0
$LN53@unpack_loc:
  00f59	51		 push	 ecx
  00f5a	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _main_rotor_blade_coning_angle$3[ebp]
  00f5f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f64	6a 42		 push	 66			; 00000042H
  00f66	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00f69	51		 push	 ecx
  00f6a	69 95 44 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv712[ebp], 700
  00f74	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv720[ebp]
  00f7a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_local_entity_float_value@@3PAY0KP@P6GXPAUENTITY@@W4FLOAT_TYPES@@M@ZA[edx+eax*4]
  00f81	ff d1		 call	 ecx

; 740  : 
; 741  : 				set_local_entity_float_value (en, FLOAT_TYPE_TAIL_ROTOR_RPM, tail_rotor_rpm);

  00f83	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00f87	74 0d		 je	 SHORT $LN54@unpack_loc
  00f89	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00f8c	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f8e	89 8d 44 ff ff
	ff		 mov	 DWORD PTR tv732[ebp], ecx
  00f94	eb 27		 jmp	 SHORT $LN55@unpack_loc
$LN54@unpack_loc:
  00f96	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA
  00f9c	81 c2 99 01 00
	00		 add	 edx, 409		; 00000199H
  00fa2	52		 push	 edx
  00fa3	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
  00fa8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00fad	50		 push	 eax
  00fae	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00fb3	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv732[ebp], 0
$LN55@unpack_loc:
  00fbd	b9 01 00 00 00	 mov	 ecx, 1
  00fc2	85 c9		 test	 ecx, ecx
  00fc4	74 0c		 je	 SHORT $LN56@unpack_loc
  00fc6	c7 85 40 ff ff
	ff 81 00 00 00	 mov	 DWORD PTR tv740[ebp], 129 ; 00000081H
  00fd0	eb 27		 jmp	 SHORT $LN57@unpack_loc
$LN56@unpack_loc:
  00fd2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z@4JA
  00fd8	81 c2 99 01 00
	00		 add	 edx, 409		; 00000199H
  00fde	52		 push	 edx
  00fdf	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
  00fe4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00fe9	50		 push	 eax
  00fea	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00fef	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv740[ebp], 0
$LN57@unpack_loc:
  00ff9	51		 push	 ecx
  00ffa	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _tail_rotor_rpm$2[ebp]
  00fff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01004	68 81 00 00 00	 push	 129			; 00000081H
  01009	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0100c	51		 push	 ecx
  0100d	69 95 44 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv732[ebp], 700
  01017	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv740[ebp]
  0101d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_local_entity_float_value@@3PAY0KP@P6GXPAUENTITY@@W4FLOAT_TYPES@@M@ZA[edx+eax*4]
  01024	ff d1		 call	 ecx
$LN22@unpack_loc:
$LN2@unpack_loc:

; 742  : 			}
; 743  : 
; 744  : 			break;
; 745  : 		}
; 746  : 	}
; 747  : }

  01026	5f		 pop	 edi
  01027	5e		 pop	 esi
  01028	5b		 pop	 ebx
  01029	8b e5		 mov	 esp, ebp
  0102b	5d		 pop	 ebp
  0102c	c2 0c 00	 ret	 12			; 0000000cH
?unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z ENDP ; unpack_local_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\helicop\hc_pack.c
;	COMDAT ?pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z
_TEXT	SEGMENT
tv205 = -80						; size = 4
tv78 = -80						; size = 4
tv70 = -80						; size = 4
_raw$1 = -12						; size = 4
_raw$2 = -8						; size = 4
_raw$3 = -4						; size = 4
_en$ = 8						; size = 4
_mode$ = 12						; size = 4
?pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z PROC	; pack_local_data, COMDAT

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 81   : 	ASSERT ((mode >= 0) && (mode < NUM_PACK_MODES));

  00009	83 7d 0c 00	 cmp	 DWORD PTR _mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@pack_local
  0000f	83 7d 0c 04	 cmp	 DWORD PTR _mode$[ebp], 4
  00013	7c 18		 jl	 SHORT $LN4@pack_local
$LN5@pack_local:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA
  0001a	83 c0 01	 add	 eax, 1
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MMFDPOBJ@?$CImode?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CImode?5?$DM?5NUM_PACK@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@pack_local:

; 82   : 
; 83   : 	switch (mode)

  0002d	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  00030	89 45 b0	 mov	 DWORD PTR tv70[ebp], eax
  00033	83 7d b0 00	 cmp	 DWORD PTR tv70[ebp], 0
  00037	74 19		 je	 SHORT $LN6@pack_local
  00039	83 7d b0 01	 cmp	 DWORD PTR tv70[ebp], 1
  0003d	0f 84 3a 02 00
	00		 je	 $LN9@pack_local
  00043	83 7d b0 03	 cmp	 DWORD PTR tv70[ebp], 3
  00047	0f 84 65 05 00
	00		 je	 $LN18@pack_local
  0004d	e9 c5 05 00 00	 jmp	 $LN2@pack_local
$LN6@pack_local:

; 84   : 	{
; 85   : 		////////////////////////////////////////
; 86   : 		case PACK_MODE_SERVER_SESSION:
; 87   : 		////////////////////////////////////////
; 88   : 		{
; 89   : 			helicopter
; 90   : 				*raw;
; 91   : 
; 92   : 			raw = (helicopter *) get_local_entity_data (en);

  00052	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00055	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00058	89 4d fc	 mov	 DWORD PTR _raw$3[ebp], ecx

; 93   : 
; 94   : 			pack_entity_type (get_local_entity_type (en));

  0005b	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0005f	74 0a		 je	 SHORT $LN20@pack_local
  00061	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00064	8b 08		 mov	 ecx, DWORD PTR [eax]
  00066	89 4d b0	 mov	 DWORD PTR tv78[ebp], ecx
  00069	eb 21		 jmp	 SHORT $LN21@pack_local
$LN20@pack_local:
  0006b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA
  00071	83 c2 0e	 add	 edx, 14			; 0000000eH
  00074	52		 push	 edx
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
  0007a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00085	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN21@pack_local:
  0008c	8b 4d b0	 mov	 ecx, DWORD PTR tv78[ebp]
  0008f	51		 push	 ecx
  00090	e8 00 00 00 00	 call	 ?pack_entity_type@@YGXW4ENTITY_TYPES@@@Z ; pack_entity_type

; 95   : 
; 96   : 			pack_entity_safe_ptr (en);

  00095	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?pack_entity_safe_ptr@@YGXPAUENTITY@@@Z ; pack_entity_safe_ptr

; 97   : 
; 98   : 			//
; 99   : 			// pack aircraft data
; 100  : 			//
; 101  : 
; 102  : 			pack_aircraft_data (en, &raw->ac, mode);

  0009e	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  000a1	50		 push	 eax
  000a2	8b 4d fc	 mov	 ecx, DWORD PTR _raw$3[ebp]
  000a5	51		 push	 ecx
  000a6	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  000a9	52		 push	 edx
  000aa	e8 00 00 00 00	 call	 ?pack_aircraft_data@@YGXPAUENTITY@@PAUAIRCRAFT@@W4PACK_MODES@@@Z ; pack_aircraft_data

; 103  : 
; 104  : 			pack_float_value (en, FLOAT_TYPE_MEDIUM_VELOCITY, raw->ac.mob.velocity);

  000af	8b 45 fc	 mov	 eax, DWORD PTR _raw$3[ebp]
  000b2	51		 push	 ecx
  000b3	f3 0f 10 40 40	 movss	 xmm0, DWORD PTR [eax+64]
  000b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bd	6a 50		 push	 80			; 00000050H
  000bf	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000c2	51		 push	 ecx
  000c3	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 105  : 
; 106  : 			//
; 107  : 			// pack helicopter data
; 108  : 			//
; 109  : 
; 110  : 			pack_float_value (en, FLOAT_TYPE_FUEL_SUPPLY_LEVEL, raw->fuel_supply_level);

  000c8	8b 45 fc	 mov	 eax, DWORD PTR _raw$3[ebp]
  000cb	51		 push	 ecx
  000cc	f3 0f 10 80 84
	01 00 00	 movss	 xmm0, DWORD PTR [eax+388]
  000d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d9	6a 30		 push	 48			; 00000030H
  000db	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000de	51		 push	 ecx
  000df	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 111  : 
; 112  : 			// invulnerable timer
; 113  : 
; 114  : 			pack_float_value (en, FLOAT_TYPE_MAIN_ROTOR_RPM, raw->main_rotor_rpm / 7.0);

  000e4	8b 45 fc	 mov	 eax, DWORD PTR _raw$3[ebp]
  000e7	f3 0f 5a 80 8c
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+396]
  000ef	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@401c000000000000
  000f7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000fb	51		 push	 ecx
  000fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00101	6a 48		 push	 72			; 00000048H
  00103	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00106	51		 push	 ecx
  00107	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 115  : 
; 116  : 			pack_float_value (en, FLOAT_TYPE_MAIN_ROTOR_PITCH, raw->main_rotor_pitch);

  0010c	8b 45 fc	 mov	 eax, DWORD PTR _raw$3[ebp]
  0010f	51		 push	 ecx
  00110	f3 0f 10 80 90
	01 00 00	 movss	 xmm0, DWORD PTR [eax+400]
  00118	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011d	6a 45		 push	 69			; 00000045H
  0011f	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00122	51		 push	 ecx
  00123	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 117  : 
; 118  : 			pack_float_value (en, FLOAT_TYPE_MAIN_ROTOR_ROLL, raw->main_rotor_roll);

  00128	8b 45 fc	 mov	 eax, DWORD PTR _raw$3[ebp]
  0012b	51		 push	 ecx
  0012c	f3 0f 10 80 94
	01 00 00	 movss	 xmm0, DWORD PTR [eax+404]
  00134	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00139	6a 47		 push	 71			; 00000047H
  0013b	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0013e	51		 push	 ecx
  0013f	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 119  : 
; 120  : 			pack_float_value (en, FLOAT_TYPE_MAIN_ROTOR_BLADE_CONING_ANGLE, raw->main_rotor_blade_coning_angle);

  00144	8b 45 fc	 mov	 eax, DWORD PTR _raw$3[ebp]
  00147	51		 push	 ecx
  00148	f3 0f 10 80 98
	01 00 00	 movss	 xmm0, DWORD PTR [eax+408]
  00150	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00155	6a 42		 push	 66			; 00000042H
  00157	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0015a	51		 push	 ecx
  0015b	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 121  : 
; 122  : 			pack_float_value (en, FLOAT_TYPE_MAIN_ROTOR_SPIN_UP_TIMER, raw->main_rotor_spin_up_timer);

  00160	8b 45 fc	 mov	 eax, DWORD PTR _raw$3[ebp]
  00163	51		 push	 ecx
  00164	f3 0f 10 80 9c
	01 00 00	 movss	 xmm0, DWORD PTR [eax+412]
  0016c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00171	6a 4a		 push	 74			; 0000004aH
  00173	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00176	51		 push	 ecx
  00177	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 123  : 
; 124  : 			pack_float_value (en, FLOAT_TYPE_TAIL_ROTOR_RPM, raw->tail_rotor_rpm);

  0017c	8b 45 fc	 mov	 eax, DWORD PTR _raw$3[ebp]
  0017f	51		 push	 ecx
  00180	f3 0f 10 80 a8
	01 00 00	 movss	 xmm0, DWORD PTR [eax+424]
  00188	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018d	68 81 00 00 00	 push	 129			; 00000081H
  00192	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00195	51		 push	 ecx
  00196	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 125  : 
; 126  : 			/////////////////////////////////////////////////////////////////
; 127  : 			if (raw->helicopter_damage_flags)

  0019b	8b 45 fc	 mov	 eax, DWORD PTR _raw$3[ebp]
  0019e	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [eax+428]
  001a4	85 c9		 test	 ecx, ecx
  001a6	74 27		 je	 SHORT $LN7@pack_local

; 128  : 			{
; 129  : 
; 130  : 				pack_int_value (en, INT_TYPE_VALID, TRUE);

  001a8	6a 01		 push	 1
  001aa	68 ef 00 00 00	 push	 239			; 000000efH
  001af	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  001b2	50		 push	 eax
  001b3	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 131  : 
; 132  : 				pack_int_value (en, INT_TYPE_HELICOPTER_DAMAGE_FLAGS, raw->helicopter_damage_flags);

  001b8	8b 45 fc	 mov	 eax, DWORD PTR _raw$3[ebp]
  001bb	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [eax+428]
  001c1	51		 push	 ecx
  001c2	6a 54		 push	 84			; 00000054H
  001c4	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  001c7	52		 push	 edx
  001c8	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 133  : 			}
; 134  : 			else

  001cd	eb 10		 jmp	 SHORT $LN8@pack_local
$LN7@pack_local:

; 135  : 			{
; 136  : 
; 137  : 				pack_int_value (en, INT_TYPE_VALID, FALSE);

  001cf	6a 00		 push	 0
  001d1	68 ef 00 00 00	 push	 239			; 000000efH
  001d6	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  001d9	50		 push	 eax
  001da	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN8@pack_local:

; 138  : 			}
; 139  : 			/////////////////////////////////////////////////////////////////
; 140  : 
; 141  : 			pack_int_value (en, INT_TYPE_AUTO_PILOT, raw->auto_pilot);

  001df	8b 45 fc	 mov	 eax, DWORD PTR _raw$3[ebp]
  001e2	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  001e8	83 e1 01	 and	 ecx, 1
  001eb	51		 push	 ecx
  001ec	6a 0c		 push	 12			; 0000000cH
  001ee	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  001f1	52		 push	 edx
  001f2	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 142  : 
; 143  : 			pack_int_value (en, INT_TYPE_PLAYER, ENTITY_PLAYER_AI);

  001f7	6a 00		 push	 0
  001f9	68 9c 00 00 00	 push	 156			; 0000009cH
  001fe	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00201	50		 push	 eax
  00202	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 144  : 
; 145  : 			pack_int_value (en, INT_TYPE_MAIN_ROTOR_DAMAGED, raw->main_rotor_damaged);

  00207	8b 45 fc	 mov	 eax, DWORD PTR _raw$3[ebp]
  0020a	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  00210	c1 e9 03	 shr	 ecx, 3
  00213	83 e1 01	 and	 ecx, 1
  00216	51		 push	 ecx
  00217	68 81 00 00 00	 push	 129			; 00000081H
  0021c	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0021f	52		 push	 edx
  00220	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 146  : 
; 147  : 			pack_int_value (en, INT_TYPE_TAIL_ROTOR_DAMAGED, raw->tail_rotor_damaged);

  00225	8b 45 fc	 mov	 eax, DWORD PTR _raw$3[ebp]
  00228	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  0022e	c1 e9 04	 shr	 ecx, 4
  00231	83 e1 01	 and	 ecx, 1
  00234	51		 push	 ecx
  00235	68 d2 00 00 00	 push	 210			; 000000d2H
  0023a	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0023d	52		 push	 edx
  0023e	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 148  : 
; 149  : 			// los_to_target
; 150  : 
; 151  : 			// radar_on
; 152  : 
; 153  : 			// laser_on
; 154  : 
; 155  : 			// infra_red_jammer_on
; 156  : 
; 157  : 			// radar_jammer_on
; 158  : 
; 159  : 			// weapons_hold
; 160  : 
; 161  : 			// position_hold
; 162  : 
; 163  : 			// lock_on_after_launch
; 164  : 
; 165  : 			// gunship_target_root
; 166  : 
; 167  : 			pack_vec3d (en, VEC3D_TYPE_COVER_POSITION, &raw->cover_position);

  00243	8b 45 fc	 mov	 eax, DWORD PTR _raw$3[ebp]
  00246	05 c0 01 00 00	 add	 eax, 448		; 000001c0H
  0024b	50		 push	 eax
  0024c	6a 02		 push	 2
  0024e	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00251	51		 push	 ecx
  00252	e8 00 00 00 00	 call	 ?pack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; pack_vec3d

; 168  : 
; 169  : 			pack_vec3d (en, VEC3D_TYPE_EO_TRACKING_POINT, &raw->eo_tracking_point);

  00257	8b 45 fc	 mov	 eax, DWORD PTR _raw$3[ebp]
  0025a	05 d8 01 00 00	 add	 eax, 472		; 000001d8H
  0025f	50		 push	 eax
  00260	6a 03		 push	 3
  00262	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00265	51		 push	 ecx
  00266	e8 00 00 00 00	 call	 ?pack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; pack_vec3d

; 170  : 
; 171  : 			// wait_position
; 172  : 
; 173  : 			//
; 174  : 			// pack local only special effects
; 175  : 			//
; 176  : 
; 177  : 			pack_mobile_local_sound_effects (en, mode);

  0026b	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  0026e	50		 push	 eax
  0026f	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00272	51		 push	 ecx
  00273	e8 00 00 00 00	 call	 ?pack_mobile_local_sound_effects@@YGHPAUENTITY@@W4PACK_MODES@@@Z ; pack_mobile_local_sound_effects

; 178  : 
; 179  : 			break;

  00278	e9 9a 03 00 00	 jmp	 $LN2@pack_local
$LN9@pack_local:

; 180  : 		}
; 181  : 		////////////////////////////////////////
; 182  : 		case PACK_MODE_CLIENT_SESSION:
; 183  : 		////////////////////////////////////////
; 184  : 		{
; 185  : 			helicopter
; 186  : 				*raw;
; 187  : 
; 188  : 			raw = (helicopter *) get_local_entity_data (en);

  0027d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00280	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00283	89 4d f8	 mov	 DWORD PTR _raw$2[ebp], ecx

; 189  : 
; 190  : 			pack_entity_type (get_local_entity_type (en));

  00286	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0028a	74 0a		 je	 SHORT $LN22@pack_local
  0028c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0028f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00291	89 4d b0	 mov	 DWORD PTR tv205[ebp], ecx
  00294	eb 21		 jmp	 SHORT $LN23@pack_local
$LN22@pack_local:
  00296	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z@4JA
  0029c	83 c2 6e	 add	 edx, 110		; 0000006eH
  0029f	52		 push	 edx
  002a0	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
  002a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002aa	50		 push	 eax
  002ab	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002b0	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv205[ebp], 0
$LN23@pack_local:
  002b7	8b 4d b0	 mov	 ecx, DWORD PTR tv205[ebp]
  002ba	51		 push	 ecx
  002bb	e8 00 00 00 00	 call	 ?pack_entity_type@@YGXW4ENTITY_TYPES@@@Z ; pack_entity_type

; 191  : 
; 192  : 			pack_entity_safe_ptr (en);

  002c0	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  002c3	50		 push	 eax
  002c4	e8 00 00 00 00	 call	 ?pack_entity_safe_ptr@@YGXPAUENTITY@@@Z ; pack_entity_safe_ptr

; 193  : 
; 194  : 			//
; 195  : 			// pack aircraft data
; 196  : 			//
; 197  : 
; 198  : 			pack_aircraft_data (en, &raw->ac, mode);

  002c9	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  002cc	50		 push	 eax
  002cd	8b 4d f8	 mov	 ecx, DWORD PTR _raw$2[ebp]
  002d0	51		 push	 ecx
  002d1	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  002d4	52		 push	 edx
  002d5	e8 00 00 00 00	 call	 ?pack_aircraft_data@@YGXPAUENTITY@@PAUAIRCRAFT@@W4PACK_MODES@@@Z ; pack_aircraft_data

; 199  : 
; 200  : 			if ((raw->ac.mob.velocity == 0.0) && (raw->main_rotor_rpm == 0.0))

  002da	8b 45 f8	 mov	 eax, DWORD PTR _raw$2[ebp]
  002dd	f3 0f 5a 40 40	 cvtss2sd xmm0, DWORD PTR [eax+64]
  002e2	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  002ea	9f		 lahf
  002eb	f6 c4 44	 test	 ah, 68			; 00000044H
  002ee	7a 47		 jp	 SHORT $LN10@pack_local
  002f0	8b 45 f8	 mov	 eax, DWORD PTR _raw$2[ebp]
  002f3	f3 0f 5a 80 8c
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+396]
  002fb	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00303	9f		 lahf
  00304	f6 c4 44	 test	 ah, 68			; 00000044H
  00307	7a 2e		 jp	 SHORT $LN10@pack_local

; 201  : 			{
; 202  : 
; 203  : 				pack_int_value (en, INT_TYPE_VALID, TRUE);

  00309	6a 01		 push	 1
  0030b	68 ef 00 00 00	 push	 239			; 000000efH
  00310	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00313	50		 push	 eax
  00314	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 204  : 
; 205  : 				pack_float_value (en, FLOAT_TYPE_MAIN_ROTOR_SPIN_UP_TIMER, raw->main_rotor_spin_up_timer);

  00319	8b 45 f8	 mov	 eax, DWORD PTR _raw$2[ebp]
  0031c	51		 push	 ecx
  0031d	f3 0f 10 80 9c
	01 00 00	 movss	 xmm0, DWORD PTR [eax+412]
  00325	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032a	6a 4a		 push	 74			; 0000004aH
  0032c	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0032f	51		 push	 ecx
  00330	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 206  : 			}
; 207  : 			else

  00335	eb 51		 jmp	 SHORT $LN11@pack_local
$LN10@pack_local:

; 208  : 			{
; 209  : 
; 210  : 				pack_int_value (en, INT_TYPE_VALID, FALSE);

  00337	6a 00		 push	 0
  00339	68 ef 00 00 00	 push	 239			; 000000efH
  0033e	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00341	50		 push	 eax
  00342	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 211  : 
; 212  : 				pack_float_value (en, FLOAT_TYPE_MEDIUM_VELOCITY, raw->ac.mob.velocity);

  00347	8b 45 f8	 mov	 eax, DWORD PTR _raw$2[ebp]
  0034a	51		 push	 ecx
  0034b	f3 0f 10 40 40	 movss	 xmm0, DWORD PTR [eax+64]
  00350	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00355	6a 50		 push	 80			; 00000050H
  00357	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0035a	51		 push	 ecx
  0035b	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 213  : 
; 214  : 				pack_float_value (en, FLOAT_TYPE_MAIN_ROTOR_RPM, raw->main_rotor_rpm / 7.0);

  00360	8b 45 f8	 mov	 eax, DWORD PTR _raw$2[ebp]
  00363	f3 0f 5a 80 8c
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+396]
  0036b	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@401c000000000000
  00373	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00377	51		 push	 ecx
  00378	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037d	6a 48		 push	 72			; 00000048H
  0037f	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00382	51		 push	 ecx
  00383	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value
$LN11@pack_local:

; 215  : 			}
; 216  : 
; 217  : 			//
; 218  : 			// pack helicopter data
; 219  : 			//
; 220  : 
; 221  : 			pack_float_value (en, FLOAT_TYPE_FUEL_SUPPLY_LEVEL, raw->fuel_supply_level);

  00388	8b 45 f8	 mov	 eax, DWORD PTR _raw$2[ebp]
  0038b	51		 push	 ecx
  0038c	f3 0f 10 80 84
	01 00 00	 movss	 xmm0, DWORD PTR [eax+388]
  00394	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00399	6a 30		 push	 48			; 00000030H
  0039b	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0039e	51		 push	 ecx
  0039f	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value

; 222  : 
; 223  : 			// invulnerable timer
; 224  : 
; 225  : 			// main_rotor_pitch
; 226  : 
; 227  : 			// main_rotor_roll
; 228  : 
; 229  : 			// main_rotor_blade_coning_angle
; 230  : 
; 231  : 			// tail_rotor_rpm
; 232  : 
; 233  : 			/////////////////////////////////////////////////////////////////
; 234  : 			if (raw->helicopter_damage_flags)

  003a4	8b 45 f8	 mov	 eax, DWORD PTR _raw$2[ebp]
  003a7	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [eax+428]
  003ad	85 c9		 test	 ecx, ecx
  003af	74 27		 je	 SHORT $LN12@pack_local

; 235  : 			{
; 236  : 
; 237  : 				pack_int_value (en, INT_TYPE_VALID, TRUE);

  003b1	6a 01		 push	 1
  003b3	68 ef 00 00 00	 push	 239			; 000000efH
  003b8	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  003bb	50		 push	 eax
  003bc	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 238  : 
; 239  : 				pack_int_value (en, INT_TYPE_HELICOPTER_DAMAGE_FLAGS, raw->helicopter_damage_flags);

  003c1	8b 45 f8	 mov	 eax, DWORD PTR _raw$2[ebp]
  003c4	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [eax+428]
  003ca	51		 push	 ecx
  003cb	6a 54		 push	 84			; 00000054H
  003cd	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  003d0	52		 push	 edx
  003d1	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 240  : 			}
; 241  : 			else

  003d6	eb 10		 jmp	 SHORT $LN13@pack_local
$LN12@pack_local:

; 242  : 			{
; 243  : 
; 244  : 				pack_int_value (en, INT_TYPE_VALID, FALSE);

  003d8	6a 00		 push	 0
  003da	68 ef 00 00 00	 push	 239			; 000000efH
  003df	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  003e2	50		 push	 eax
  003e3	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN13@pack_local:

; 245  : 			}
; 246  : 			/////////////////////////////////////////////////////////////////
; 247  : 
; 248  : 			if (raw->player == ENTITY_PLAYER_LOCAL)

  003e8	8b 45 f8	 mov	 eax, DWORD PTR _raw$2[ebp]
  003eb	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  003f1	d1 e9		 shr	 ecx, 1
  003f3	83 e1 03	 and	 ecx, 3
  003f6	83 f9 01	 cmp	 ecx, 1
  003f9	75 12		 jne	 SHORT $LN14@pack_local

; 249  : 			{
; 250  : 				pack_int_value (en, INT_TYPE_PLAYER, ENTITY_PLAYER_REMOTE);

  003fb	6a 02		 push	 2
  003fd	68 9c 00 00 00	 push	 156			; 0000009cH
  00402	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00405	50		 push	 eax
  00406	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 251  : 			}
; 252  : 			else

  0040b	eb 1d		 jmp	 SHORT $LN15@pack_local
$LN14@pack_local:

; 253  : 			{
; 254  : 				pack_int_value (en, INT_TYPE_PLAYER, raw->player);

  0040d	8b 45 f8	 mov	 eax, DWORD PTR _raw$2[ebp]
  00410	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  00416	d1 e9		 shr	 ecx, 1
  00418	83 e1 03	 and	 ecx, 3
  0041b	51		 push	 ecx
  0041c	68 9c 00 00 00	 push	 156			; 0000009cH
  00421	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00424	52		 push	 edx
  00425	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN15@pack_local:

; 255  : 			}
; 256  : 
; 257  : 			if (raw->player != ENTITY_PLAYER_AI)

  0042a	8b 45 f8	 mov	 eax, DWORD PTR _raw$2[ebp]
  0042d	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  00433	d1 e9		 shr	 ecx, 1
  00435	83 e1 03	 and	 ecx, 3
  00438	0f 84 c3 00 00
	00		 je	 $LN16@pack_local

; 258  : 			{
; 259  : 
; 260  : 				pack_int_value (en, INT_TYPE_AUTO_PILOT, raw->auto_pilot);

  0043e	8b 45 f8	 mov	 eax, DWORD PTR _raw$2[ebp]
  00441	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  00447	83 e1 01	 and	 ecx, 1
  0044a	51		 push	 ecx
  0044b	6a 0c		 push	 12			; 0000000cH
  0044d	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00450	52		 push	 edx
  00451	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 261  : 
; 262  : 				pack_int_value (en, INT_TYPE_LOS_TO_TARGET, raw->los_to_target);

  00456	8b 45 f8	 mov	 eax, DWORD PTR _raw$2[ebp]
  00459	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  0045f	c1 e9 05	 shr	 ecx, 5
  00462	83 e1 01	 and	 ecx, 1
  00465	51		 push	 ecx
  00466	68 80 00 00 00	 push	 128			; 00000080H
  0046b	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0046e	52		 push	 edx
  0046f	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 263  : 
; 264  : 				pack_int_value (en, INT_TYPE_RADAR_ON, raw->radar_on);

  00474	8b 45 f8	 mov	 eax, DWORD PTR _raw$2[ebp]
  00477	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  0047d	c1 e9 06	 shr	 ecx, 6
  00480	83 e1 01	 and	 ecx, 1
  00483	51		 push	 ecx
  00484	68 a9 00 00 00	 push	 169			; 000000a9H
  00489	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0048c	52		 push	 edx
  0048d	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 265  : 
; 266  : 				pack_int_value (en, INT_TYPE_LASER_ON, raw->laser_on);

  00492	8b 45 f8	 mov	 eax, DWORD PTR _raw$2[ebp]
  00495	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  0049b	c1 e9 07	 shr	 ecx, 7
  0049e	83 e1 01	 and	 ecx, 1
  004a1	51		 push	 ecx
  004a2	6a 78		 push	 120			; 00000078H
  004a4	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  004a7	52		 push	 edx
  004a8	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 267  : 
; 268  : 				pack_int_value (en, INT_TYPE_INFRA_RED_JAMMER_ON, raw->infra_red_jammer_on);

  004ad	8b 45 f8	 mov	 eax, DWORD PTR _raw$2[ebp]
  004b0	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  004b6	c1 e9 08	 shr	 ecx, 8
  004b9	83 e1 01	 and	 ecx, 1
  004bc	51		 push	 ecx
  004bd	6a 68		 push	 104			; 00000068H
  004bf	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  004c2	52		 push	 edx
  004c3	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 269  : 
; 270  : 				pack_int_value (en, INT_TYPE_RADAR_JAMMER_ON, raw->radar_jammer_on);

  004c8	8b 45 f8	 mov	 eax, DWORD PTR _raw$2[ebp]
  004cb	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  004d1	c1 e9 09	 shr	 ecx, 9
  004d4	83 e1 01	 and	 ecx, 1
  004d7	51		 push	 ecx
  004d8	68 a8 00 00 00	 push	 168			; 000000a8H
  004dd	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  004e0	52		 push	 edx
  004e1	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 271  : 
; 272  : 				pack_int_value (en, INT_TYPE_LOCK_ON_AFTER_LAUNCH, raw->lock_on_after_launch);

  004e6	8b 45 f8	 mov	 eax, DWORD PTR _raw$2[ebp]
  004e9	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  004ef	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  004f2	83 e1 01	 and	 ecx, 1
  004f5	51		 push	 ecx
  004f6	6a 7e		 push	 126			; 0000007eH
  004f8	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  004fb	52		 push	 edx
  004fc	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN16@pack_local:

; 273  : 			}
; 274  : 
; 275  : 			pack_int_value (en, INT_TYPE_MAIN_ROTOR_DAMAGED, raw->main_rotor_damaged);

  00501	8b 45 f8	 mov	 eax, DWORD PTR _raw$2[ebp]
  00504	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  0050a	c1 e9 03	 shr	 ecx, 3
  0050d	83 e1 01	 and	 ecx, 1
  00510	51		 push	 ecx
  00511	68 81 00 00 00	 push	 129			; 00000081H
  00516	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00519	52		 push	 edx
  0051a	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 276  : 
; 277  : 			pack_int_value (en, INT_TYPE_TAIL_ROTOR_DAMAGED, raw->tail_rotor_damaged);

  0051f	8b 45 f8	 mov	 eax, DWORD PTR _raw$2[ebp]
  00522	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  00528	c1 e9 04	 shr	 ecx, 4
  0052b	83 e1 01	 and	 ecx, 1
  0052e	51		 push	 ecx
  0052f	68 d2 00 00 00	 push	 210			; 000000d2H
  00534	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00537	52		 push	 edx
  00538	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 278  : 
; 279  : 			pack_int_value (en, INT_TYPE_WEAPONS_HOLD, raw->weapons_hold);

  0053d	8b 45 f8	 mov	 eax, DWORD PTR _raw$2[ebp]
  00540	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  00546	c1 e9 0a	 shr	 ecx, 10			; 0000000aH
  00549	83 e1 01	 and	 ecx, 1
  0054c	51		 push	 ecx
  0054d	68 11 01 00 00	 push	 273			; 00000111H
  00552	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00555	52		 push	 edx
  00556	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 280  : 
; 281  : 			pack_int_value (en, INT_TYPE_POSITION_HOLD, raw->position_hold);

  0055b	8b 45 f8	 mov	 eax, DWORD PTR _raw$2[ebp]
  0055e	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  00564	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  00567	83 e1 01	 and	 ecx, 1
  0056a	51		 push	 ecx
  0056b	68 a0 00 00 00	 push	 160			; 000000a0H
  00570	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00573	52		 push	 edx
  00574	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 282  : 
; 283  : 			// gunship_target_root
; 284  : 
; 285  : 			// cover_position
; 286  : 
; 287  : 			pack_vec3d (en, VEC3D_TYPE_WAIT_POSITION, &raw->wait_position);

  00579	8b 45 f8	 mov	 eax, DWORD PTR _raw$2[ebp]
  0057c	05 cc 01 00 00	 add	 eax, 460		; 000001ccH
  00581	50		 push	 eax
  00582	6a 0c		 push	 12			; 0000000cH
  00584	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00587	51		 push	 ecx
  00588	e8 00 00 00 00	 call	 ?pack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; pack_vec3d

; 288  : 
; 289  : 			pack_vec3d (en, VEC3D_TYPE_EO_TRACKING_POINT, &raw->eo_tracking_point);

  0058d	8b 45 f8	 mov	 eax, DWORD PTR _raw$2[ebp]
  00590	05 d8 01 00 00	 add	 eax, 472		; 000001d8H
  00595	50		 push	 eax
  00596	6a 03		 push	 3
  00598	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0059b	51		 push	 ecx
  0059c	e8 00 00 00 00	 call	 ?pack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; pack_vec3d

; 290  : 
; 291  : 			//
; 292  : 			// pack local only special effects
; 293  : 			//
; 294  : 
; 295  : 			pack_mobile_local_sound_effects (en, mode);

  005a1	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  005a4	50		 push	 eax
  005a5	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  005a8	51		 push	 ecx
  005a9	e8 00 00 00 00	 call	 ?pack_mobile_local_sound_effects@@YGHPAUENTITY@@W4PACK_MODES@@@Z ; pack_mobile_local_sound_effects

; 296  : 
; 297  : 			break;

  005ae	eb 67		 jmp	 SHORT $LN2@pack_local

; 298  : 		}
; 299  : 		////////////////////////////////////////
; 300  : 		case PACK_MODE_BROWSE_SESSION:
; 301  : 		////////////////////////////////////////
; 302  : 		{
; 303  : 			break;

  005b0	eb 65		 jmp	 SHORT $LN2@pack_local
$LN18@pack_local:

; 304  : 		}
; 305  : 		////////////////////////////////////////
; 306  : 		case PACK_MODE_UPDATE_ENTITY:
; 307  : 		////////////////////////////////////////
; 308  : 		{
; 309  : 			helicopter
; 310  : 				*raw;
; 311  : 
; 312  : 			raw = (helicopter *) get_local_entity_data (en);

  005b2	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  005b5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  005b8	89 4d f4	 mov	 DWORD PTR _raw$1[ebp], ecx

; 313  : 
; 314  : 			pack_vec3d (en, VEC3D_TYPE_POSITION, &raw->ac.mob.position);

  005bb	8b 45 f4	 mov	 eax, DWORD PTR _raw$1[ebp]
  005be	83 c0 04	 add	 eax, 4
  005c1	50		 push	 eax
  005c2	6a 08		 push	 8
  005c4	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  005c7	51		 push	 ecx
  005c8	e8 00 00 00 00	 call	 ?pack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; pack_vec3d

; 315  : 
; 316  : 			pack_attitude_matrix (en, raw->ac.mob.attitude);

  005cd	8b 45 f4	 mov	 eax, DWORD PTR _raw$1[ebp]
  005d0	83 c0 10	 add	 eax, 16			; 00000010H
  005d3	50		 push	 eax
  005d4	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  005d7	51		 push	 ecx
  005d8	e8 00 00 00 00	 call	 ?pack_attitude_matrix@@YGXPAUENTITY@@QAY02M@Z ; pack_attitude_matrix

; 317  : 
; 318  : 			pack_vec3d (en, VEC3D_TYPE_MOTION_VECTOR, &raw->ac.mob.motion_vector);

  005dd	8b 45 f4	 mov	 eax, DWORD PTR _raw$1[ebp]
  005e0	83 c0 34	 add	 eax, 52			; 00000034H
  005e3	50		 push	 eax
  005e4	6a 06		 push	 6
  005e6	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  005e9	51		 push	 ecx
  005ea	e8 00 00 00 00	 call	 ?pack_vec3d@@YGXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@Z ; pack_vec3d

; 319  : 
; 320  : 			pack_float_value (en, FLOAT_TYPE_MAIN_ROTOR_RPM, raw->main_rotor_rpm / 7.0);

  005ef	8b 45 f4	 mov	 eax, DWORD PTR _raw$1[ebp]
  005f2	f3 0f 5a 80 8c
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+396]
  005fa	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@401c000000000000
  00602	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00606	51		 push	 ecx
  00607	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0060c	6a 48		 push	 72			; 00000048H
  0060e	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00611	51		 push	 ecx
  00612	e8 00 00 00 00	 call	 ?pack_float_value@@YGXPAUENTITY@@W4FLOAT_TYPES@@M@Z ; pack_float_value
$LN2@pack_local:

; 321  : 
; 322  : 			break;
; 323  : 		}
; 324  : 	}
; 325  : }

  00617	5f		 pop	 edi
  00618	5e		 pop	 esi
  00619	5b		 pop	 ebx
  0061a	8b e5		 mov	 esp, ebp
  0061c	5d		 pop	 ebp
  0061d	c2 08 00	 ret	 8
?pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z ENDP	; pack_local_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\helicop\hc_pack.c
;	COMDAT ?get_local_helicopter_delta_rotor_direction@@YGHPAUENTITY@@@Z
_TEXT	SEGMENT
_en$ = 8						; size = 4
?get_local_helicopter_delta_rotor_direction@@YGHPAUENTITY@@@Z PROC ; get_local_helicopter_delta_rotor_direction, COMDAT

; 856  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 857  : 
; 858  : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@get_local_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_local_helicopter_delta_rotor_direction@@YGHPAUENTITY@@@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_local_:

; 859  : 
; 860  : 	if (get_gunship_entity () == en)

  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0002c	3b 45 08	 cmp	 eax, DWORD PTR _en$[ebp]
  0002f	75 46		 jne	 SHORT $LN3@get_local_

; 861  : 	{
; 862  : 
; 863  : 		if (current_flight_dynamics)

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A, 0 ; current_flight_dynamics
  00038	74 3b		 je	 SHORT $LN8@get_local_

; 864  : 		{
; 865  : 
; 866  : 			if (current_flight_dynamics->main_rotor_rpm.delta < 0.0)

  0003a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0003f	f3 0f 5a 80 18
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7704]
  00047	0f 57 c9	 xorps	 xmm1, xmm1
  0004a	66 0f 2f c8	 comisd	 xmm1, xmm0
  0004e	76 07		 jbe	 SHORT $LN6@get_local_

; 867  : 			{
; 868  : 
; 869  : 				return -1;

  00050	83 c8 ff	 or	 eax, -1
  00053	eb 2b		 jmp	 SHORT $LN1@get_local_
  00055	eb 1e		 jmp	 SHORT $LN8@get_local_
$LN6@get_local_:

; 870  : 			}
; 871  : 			else if (current_flight_dynamics->main_rotor_rpm.delta > 0.0)

  00057	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0005c	f3 0f 5a 80 18
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7704]
  00064	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0006c	76 07		 jbe	 SHORT $LN8@get_local_

; 872  : 			{
; 873  : 
; 874  : 				return 1;

  0006e	b8 01 00 00 00	 mov	 eax, 1
  00073	eb 0b		 jmp	 SHORT $LN1@get_local_
$LN8@get_local_:

; 875  : 			}
; 876  : 		}
; 877  : 	}
; 878  : 	else

  00075	eb 07		 jmp	 SHORT $LN4@get_local_
$LN3@get_local_:

; 879  : 	{
; 880  : 
; 881  : 		//return get_local_entity_int_value (en, INT_TYPE_DELTA_ROTOR_DIRECTION);
; 882  : 		return 1;

  00077	b8 01 00 00 00	 mov	 eax, 1
  0007c	eb 02		 jmp	 SHORT $LN1@get_local_
$LN4@get_local_:

; 883  : 	}
; 884  : 
; 885  : 	return 0;

  0007e	33 c0		 xor	 eax, eax
$LN1@get_local_:

; 886  : }

  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c2 04 00	 ret	 4
?get_local_helicopter_delta_rotor_direction@@YGHPAUENTITY@@@Z ENDP ; get_local_helicopter_delta_rotor_direction
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\helicop\hc_pack.c
;	COMDAT ?unpack_local_gunship_entity@@YGXW4PACK_MODES@@@Z
_TEXT	SEGMENT
tv132 = -80						; size = 4
tv93 = -76						; size = 4
tv76 = -76						; size = 4
_gs$ = -8						; size = 4
_ks$ = -4						; size = 4
_mode$ = 8						; size = 4
?unpack_local_gunship_entity@@YGXW4PACK_MODES@@@Z PROC	; unpack_local_gunship_entity, COMDAT

; 812  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 813  : 
; 814  : 	entity
; 815  : 		*ks,
; 816  : 		*gs;
; 817  : 
; 818  : 	if (mode != PACK_MODE_SERVER_SESSION)

  00009	83 7d 08 00	 cmp	 DWORD PTR _mode$[ebp], 0
  0000d	74 05		 je	 SHORT $LN2@unpack_loc

; 819  : 	{
; 820  : 
; 821  : 		return;

  0000f	e9 04 01 00 00	 jmp	 $LN1@unpack_loc
$LN2@unpack_loc:

; 822  : 	}
; 823  : 
; 824  : 	// gunship entity
; 825  : 
; 826  : 	if (unpack_int_value (NULL, INT_TYPE_VALID))

  00014	68 ef 00 00 00	 push	 239			; 000000efH
  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00020	85 c0		 test	 eax, eax
  00022	74 60		 je	 SHORT $LN3@unpack_loc

; 827  : 	{
; 828  : 
; 829  : 		gs = unpack_entity_safe_ptr ();

  00024	e8 00 00 00 00	 call	 ?unpack_entity_safe_ptr@@YGPAUENTITY@@XZ ; unpack_entity_safe_ptr
  00029	89 45 f8	 mov	 DWORD PTR _gs$[ebp], eax

; 830  : 
; 831  : 		ASSERT (get_local_entity_type (gs) == ENTITY_TYPE_HELICOPTER);

  0002c	83 7d f8 00	 cmp	 DWORD PTR _gs$[ebp], 0
  00030	74 0a		 je	 SHORT $LN8@unpack_loc
  00032	8b 45 f8	 mov	 eax, DWORD PTR _gs$[ebp]
  00035	8b 08		 mov	 ecx, DWORD PTR [eax]
  00037	89 4d b4	 mov	 DWORD PTR tv76[ebp], ecx
  0003a	eb 21		 jmp	 SHORT $LN9@unpack_loc
$LN8@unpack_loc:
  0003c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??unpack_local_gunship_entity@@YGXW4PACK_MODES@@@Z@4JA
  00042	83 c2 13	 add	 edx, 19			; 00000013H
  00045	52		 push	 edx
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00056	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$LN9@unpack_loc:
  0005d	83 7d b4 0e	 cmp	 DWORD PTR tv76[ebp], 14	; 0000000eH
  00061	74 18		 je	 SHORT $LN4@unpack_loc
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??unpack_local_gunship_entity@@YGXW4PACK_MODES@@@Z@4JA
  00068	83 c0 13	 add	 eax, 19			; 00000013H
  0006b	50		 push	 eax
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@DJDCHDLP@get_local_entity_type?5?$CIgs?$CJ?5?$DN?$DN?5E@
  00076	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@unpack_loc:

; 832  : 
; 833  : 		set_raw_gunship_entity (gs);

  0007b	8b 45 f8	 mov	 eax, DWORD PTR _gs$[ebp]
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?set_raw_gunship_entity@@YGXPAUENTITY@@@Z ; set_raw_gunship_entity
$LN3@unpack_loc:

; 834  : 	}
; 835  : 
; 836  : 	// current base keysite
; 837  : 
; 838  : 	if (unpack_int_value (NULL, INT_TYPE_VALID))

  00084	68 ef 00 00 00	 push	 239			; 000000efH
  00089	6a 00		 push	 0
  0008b	e8 00 00 00 00	 call	 ?unpack_int_value@@YGHPAUENTITY@@W4INT_TYPES@@@Z ; unpack_int_value
  00090	85 c0		 test	 eax, eax
  00092	0f 84 80 00 00
	00		 je	 $LN1@unpack_loc

; 839  : 	{
; 840  : 
; 841  : 		ks = unpack_entity_safe_ptr ();

  00098	e8 00 00 00 00	 call	 ?unpack_entity_safe_ptr@@YGPAUENTITY@@XZ ; unpack_entity_safe_ptr
  0009d	89 45 fc	 mov	 DWORD PTR _ks$[ebp], eax

; 842  : 
; 843  : 		if (get_global_gunship_side () == get_local_entity_int_value (ks, INT_TYPE_SIDE))

  000a0	83 7d fc 00	 cmp	 DWORD PTR _ks$[ebp], 0
  000a4	74 0a		 je	 SHORT $LN10@unpack_loc
  000a6	8b 45 fc	 mov	 eax, DWORD PTR _ks$[ebp]
  000a9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ab	89 4d b4	 mov	 DWORD PTR tv93[ebp], ecx
  000ae	eb 1d		 jmp	 SHORT $LN11@unpack_loc
$LN10@unpack_loc:
  000b0	68 4b 03 00 00	 push	 843			; 0000034bH
  000b5	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ba	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000c0	52		 push	 edx
  000c1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000c6	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv93[ebp], 0
$LN11@unpack_loc:
  000cd	b8 01 00 00 00	 mov	 eax, 1
  000d2	85 c0		 test	 eax, eax
  000d4	74 09		 je	 SHORT $LN12@unpack_loc
  000d6	c7 45 b0 bb 00
	00 00		 mov	 DWORD PTR tv132[ebp], 187 ; 000000bbH
  000dd	eb 1d		 jmp	 SHORT $LN13@unpack_loc
$LN12@unpack_loc:
  000df	68 4b 03 00 00	 push	 843			; 0000034bH
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  000ef	51		 push	 ecx
  000f0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000f5	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
$LN13@unpack_loc:
  000fc	68 bb 00 00 00	 push	 187			; 000000bbH
  00101	8b 55 fc	 mov	 edx, DWORD PTR _ks$[ebp]
  00104	52		 push	 edx
  00105	69 45 b4 5c 04
	00 00		 imul	 eax, DWORD PTR tv93[ebp], 1116
  0010c	8b 4d b0	 mov	 ecx, DWORD PTR tv132[ebp]
  0010f	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00116	ff d2		 call	 edx
$LN1@unpack_loc:

; 844  : 		{
; 845  : 
; 846  : 			//set_base_current_keysite (ks);
; 847  : 		}
; 848  : 	}
; 849  : }

  00118	5f		 pop	 edi
  00119	5e		 pop	 esi
  0011a	5b		 pop	 ebx
  0011b	8b e5		 mov	 esp, ebp
  0011d	5d		 pop	 ebp
  0011e	c2 04 00	 ret	 4
?unpack_local_gunship_entity@@YGXW4PACK_MODES@@@Z ENDP	; unpack_local_gunship_entity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\helicop\hc_pack.c
;	COMDAT ?pack_local_gunship_entity@@YGXW4PACK_MODES@@@Z
_TEXT	SEGMENT
tv72 = -68						; size = 4
_mode$ = 8						; size = 4
?pack_local_gunship_entity@@YGXW4PACK_MODES@@@Z PROC	; pack_local_gunship_entity, COMDAT

; 765  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 766  : 
; 767  : 	if (mode != PACK_MODE_SERVER_SESSION)

  00009	83 7d 08 00	 cmp	 DWORD PTR _mode$[ebp], 0
  0000d	74 05		 je	 SHORT $LN2@pack_local

; 768  : 	{
; 769  : 
; 770  : 		return;

  0000f	e9 a0 00 00 00	 jmp	 $LN1@pack_local
$LN2@pack_local:

; 771  : 	}
; 772  : 
; 773  : 	// gunship
; 774  : 
; 775  : 	if (get_gunship_entity ())

  00014	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0001b	74 73		 je	 SHORT $LN3@pack_local

; 776  : 	{
; 777  : 
; 778  : 		ASSERT (get_local_entity_type (get_gunship_entity ()) == ENTITY_TYPE_HELICOPTER);

  0001d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00024	74 0c		 je	 SHORT $LN7@pack_local
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0002b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002d	89 4d bc	 mov	 DWORD PTR tv72[ebp], ecx
  00030	eb 21		 jmp	 SHORT $LN8@pack_local
$LN7@pack_local:
  00032	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??pack_local_gunship_entity@@YGXW4PACK_MODES@@@Z@4JA
  00038	83 c2 0d	 add	 edx, 13			; 0000000dH
  0003b	52		 push	 edx
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
  00041	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0004c	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$LN8@pack_local:
  00053	83 7d bc 0e	 cmp	 DWORD PTR tv72[ebp], 14	; 0000000eH
  00057	74 18		 je	 SHORT $LN5@pack_local
  00059	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pack_local_gunship_entity@@YGXW4PACK_MODES@@@Z@4JA
  0005e	83 c0 0d	 add	 eax, 13			; 0000000dH
  00061	50		 push	 eax
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@MNNAOLML@c?3?2users?2nhv90?2projects?2eech?2ap@
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@IDPNMBKF@get_local_entity_type?5?$CIget_guns@
  0006c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@pack_local:

; 779  : 
; 780  : 		pack_int_value (get_gunship_entity (), INT_TYPE_VALID, TRUE);

  00071	6a 01		 push	 1
  00073	68 ef 00 00 00	 push	 239			; 000000efH
  00078	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value

; 781  : 
; 782  : 		pack_entity_safe_ptr (get_gunship_entity ());

  00083	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ?pack_entity_safe_ptr@@YGXPAUENTITY@@@Z ; pack_entity_safe_ptr

; 783  : 	}
; 784  : 	else

  0008e	eb 12		 jmp	 SHORT $LN4@pack_local
$LN3@pack_local:

; 785  : 	{
; 786  : 
; 787  : 		pack_int_value (get_gunship_entity (), INT_TYPE_VALID, FALSE);

  00090	6a 00		 push	 0
  00092	68 ef 00 00 00	 push	 239			; 000000efH
  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN4@pack_local:

; 788  : 	}
; 789  : 
; 790  : 	// base keysite
; 791  : /*
; 792  : 	if (get_base_current_keysite ())
; 793  : 	{
; 794  : 
; 795  : 		pack_int_value (get_gunship_entity (), INT_TYPE_VALID, TRUE);
; 796  : 
; 797  : 		pack_entity_safe_ptr (get_base_current_keysite ());
; 798  : 	}
; 799  : 	else
; 800  : 	*/
; 801  : 	{
; 802  : 
; 803  : 		pack_int_value (get_gunship_entity (), INT_TYPE_VALID, FALSE);

  000a2	6a 00		 push	 0
  000a4	68 ef 00 00 00	 push	 239			; 000000efH
  000a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ?pack_int_value@@YGXPAUENTITY@@W4INT_TYPES@@H@Z ; pack_int_value
$LN1@pack_local:

; 804  : 	}
; 805  : }

  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c2 04 00	 ret	 4
?pack_local_gunship_entity@@YGXW4PACK_MODES@@@Z ENDP	; pack_local_gunship_entity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\helicop\hc_pack.c
;	COMDAT ?overload_helicopter_pack_functions@@YGXXZ
_TEXT	SEGMENT
?overload_helicopter_pack_functions@@YGXXZ PROC		; overload_helicopter_pack_functions, COMDAT

; 754  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 755  : 	fn_pack_local_entity_data[ENTITY_TYPE_HELICOPTER]		= pack_local_data;

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 0e	 imul	 ecx, eax, 14
  00011	c7 81 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fn_pack_local_entity_data@@3PAP6GXPAUENTITY@@W4PACK_MODES@@@ZA[ecx], OFFSET ?pack_local_data@@YGXPAUENTITY@@W4PACK_MODES@@@Z ; pack_local_data

; 756  : 
; 757  : 	fn_unpack_local_entity_data[ENTITY_TYPE_HELICOPTER]	= unpack_local_data;

  0001b	b8 04 00 00 00	 mov	 eax, 4
  00020	6b c8 0e	 imul	 ecx, eax, 14
  00023	c7 81 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fn_unpack_local_entity_data@@3PAP6GXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@ZA[ecx], OFFSET ?unpack_local_data@@YGXPAUENTITY@@W4ENTITY_TYPES@@W4PACK_MODES@@@Z ; unpack_local_data

; 758  : }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?overload_helicopter_pack_functions@@YGXXZ ENDP		; overload_helicopter_pack_functions
_TEXT	ENDS
END
