; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\special\camera\cm_flyby.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	?cos@@YGMM@Z					; cos
PUBLIC	?sin@@YGMM@Z					; sin
PUBLIC	?reset_fly_by_camera@@YGXPAUCAMERA@@@Z		; reset_fly_by_camera
PUBLIC	?update_fly_by_camera@@YGXPAUCAMERA@@@Z		; update_fly_by_camera
PUBLIC	?update_fly_by_camera_continued@@YGXPAUCAMERA@@@Z ; update_fly_by_camera_continued
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??reset_fly_by_camera@@YGXPAUCAMERA@@@Z@4JA ; `reset_fly_by_camera'::`1'::__LINE__Var
PUBLIC	??_C@_0EN@ODENEKG@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_03DGOGAGNC@raw@				; `string'
PUBLIC	??_C@_0BK@NIGJPCBN@raw?9?$DOexternal_view_entity@ ; `string'
PUBLIC	??_C@_0BD@OPMCNPNH@Invalid?5force?5?$DN?5?$CFd@	; `string'
PUBLIC	?__LINE__Var@?0??update_fly_by_camera@@YGXPAUCAMERA@@@Z@4JA ; `update_fly_by_camera'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??update_fly_by_camera_continued@@YGXPAUCAMERA@@@Z@4JA ; `update_fly_by_camera_continued'::`1'::__LINE__Var
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	__real@3f00002000400080
PUBLIC	__real@3f10000000000000
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3f800000
PUBLIC	__real@3f8ccccd
PUBLIC	__real@3fb6571848000000
PUBLIC	__real@3fd6571848000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe0c15236000000
PUBLIC	__real@3febecde5a000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff0c15236000000
PUBLIC	__real@3ff4f1a6c3800000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4007bc89cc800000
PUBLIC	__real@400921fb51000000
PUBLIC	__real@4010000000000000
PUBLIC	__real@4018000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_cos:PROC
EXTRN	_sin:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?normalise_3d_vector@@YGMPAUVEC3D@@@Z:PROC	; normalise_3d_vector
EXTRN	?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z:PROC	; get_3d_vector_magnitude
EXTRN	?get_3d_transformation_matrix@@YGXQAY02MMMM@Z:PROC ; get_3d_transformation_matrix
EXTRN	?multiply_matrix3x3_matrix3x3@@YGXQAY02MQAY02$$CBM1@Z:PROC ; multiply_matrix3x3_matrix3x3
EXTRN	?get_matrix3x3_from_unit_vec3d@@YGXQAY02MPBUVEC3D@@@Z:PROC ; get_matrix3x3_from_unit_vec3d
EXTRN	?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z:PROC ; get_3d_terrain_point_data
EXTRN	?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z:PROC ; get_local_entity_target_point
EXTRN	?switch_auto_edit_entity@@YGPAUENTITY@@PAUCAMERA@@@Z:PROC ; switch_auto_edit_entity
EXTRN	?switch_auto_edit_camera_mode@@YGHPAUCAMERA@@@Z:PROC ; switch_auto_edit_camera_mode
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?random_number_seed@@3HA:DWORD			; random_number_seed
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?world_map@@3UWORLD_MAP_DATA@@A:BYTE		; world_map
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA:BYTE ; fn_get_local_entity_vec3d
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@400921fb51000000
CONST	SEGMENT
__real@400921fb51000000 DQ 0400921fb51000000r	; 3.14159
CONST	ENDS
;	COMDAT __real@4007bc89cc800000
CONST	SEGMENT
__real@4007bc89cc800000 DQ 04007bc89cc800000r	; 2.96706
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff4f1a6c3800000
CONST	SEGMENT
__real@3ff4f1a6c3800000 DQ 03ff4f1a6c3800000r	; 1.309
CONST	ENDS
;	COMDAT __real@3ff0c15236000000
CONST	SEGMENT
__real@3ff0c15236000000 DQ 03ff0c15236000000r	; 1.0472
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3febecde5a000000
CONST	SEGMENT
__real@3febecde5a000000 DQ 03febecde5a000000r	; 0.872665
CONST	ENDS
;	COMDAT __real@3fe0c15236000000
CONST	SEGMENT
__real@3fe0c15236000000 DQ 03fe0c15236000000r	; 0.523599
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd6571848000000
CONST	SEGMENT
__real@3fd6571848000000 DQ 03fd6571848000000r	; 0.349066
CONST	ENDS
;	COMDAT __real@3fb6571848000000
CONST	SEGMENT
__real@3fb6571848000000 DQ 03fb6571848000000r	; 0.0872665
CONST	ENDS
;	COMDAT __real@3f8ccccd
CONST	SEGMENT
__real@3f8ccccd DD 03f8ccccdr			; 1.1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3f10000000000000
CONST	SEGMENT
__real@3f10000000000000 DQ 03f10000000000000r	; 6.10352e-05
CONST	ENDS
;	COMDAT __real@3f00002000400080
CONST	SEGMENT
__real@3f00002000400080 DQ 03f00002000400080r	; 3.05185e-05
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??update_fly_by_camera_continued@@YGXPAUCAMERA@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_fly_by_camera_continued@@YGXPAUCAMERA@@@Z@4JA DD 0157H ; `update_fly_by_camera_continued'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??update_fly_by_camera@@YGXPAUCAMERA@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??update_fly_by_camera@@YGXPAUCAMERA@@@Z@4JA DD 0129H ; `update_fly_by_camera'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BD@OPMCNPNH@Invalid?5force?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BD@OPMCNPNH@Invalid?5force?5?$DN?5?$CFd@ DB 'Invalid force = %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NIGJPCBN@raw?9?$DOexternal_view_entity@
CONST	SEGMENT
??_C@_0BK@NIGJPCBN@raw?9?$DOexternal_view_entity@ DB 'raw->external_view_'
	DB	'entity', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03DGOGAGNC@raw@
CONST	SEGMENT
??_C@_03DGOGAGNC@raw@ DB 'raw', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@ODENEKG@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EN@ODENEKG@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nhv'
	DB	'90\projects\eech\aphavoc\source\entity\special\camera\cm_flyb'
	DB	'y.c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??reset_fly_by_camera@@YGXPAUCAMERA@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??reset_fly_by_camera@@YGXPAUCAMERA@@@Z@4JA DD 050H ; `reset_fly_by_camera'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\camera\cm_flyby.c
;	COMDAT ?update_fly_by_camera_continued@@YGXPAUCAMERA@@@Z
_TEXT	SEGMENT
tv194 = -124						; size = 8
tv216 = -116						; size = 8
tv186 = -108						; size = 8
tv207 = -100						; size = 8
tv134 = -100						; size = 4
tv95 = -96						; size = 4
_v$ = -28						; size = 12
_pos$ = -16						; size = 12
_en$ = -4						; size = 4
_raw$ = 8						; size = 4
?update_fly_by_camera_continued@@YGXPAUCAMERA@@@Z PROC	; update_fly_by_camera_continued, COMDAT

; 343  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 344  : 	entity
; 345  : 		*en;
; 346  : 
; 347  : 	vec3d
; 348  : 		pos,
; 349  : 		v;
; 350  : 
; 351  : 	//
; 352  : 	// pre-amble
; 353  : 	//
; 354  : 
; 355  : 	ASSERT (raw);

  00009	83 7d 08 00	 cmp	 DWORD PTR _raw$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@update_fly
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_fly_by_camera_continued@@YGXPAUCAMERA@@@Z@4JA
  00014	83 c0 0c	 add	 eax, 12			; 0000000cH
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@ODENEKG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_03DGOGAGNC@raw@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@update_fly:

; 356  : 
; 357  : 	ASSERT (raw->external_view_entity);

  00027	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0002a	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  00031	75 18		 jne	 SHORT $LN3@update_fly
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_fly_by_camera_continued@@YGXPAUCAMERA@@@Z@4JA
  00038	83 c0 0e	 add	 eax, 14			; 0000000eH
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@ODENEKG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@NIGJPCBN@raw?9?$DOexternal_view_entity@
  00046	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@update_fly:

; 358  : 
; 359  : 	en = raw->external_view_entity;

  0004b	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0004e	8b 88 24 01 00
	00		 mov	 ecx, DWORD PTR [eax+292]
  00054	89 4d fc	 mov	 DWORD PTR _en$[ebp], ecx

; 360  : 
; 361  : 	//
; 362  : 	// get camera to entity vector
; 363  : 	//
; 364  : 
; 365  : 	get_local_entity_target_point (en, &pos);

  00057	8d 45 f0	 lea	 eax, DWORD PTR _pos$[ebp]
  0005a	50		 push	 eax
  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _en$[ebp]
  0005e	51		 push	 ecx
  0005f	e8 00 00 00 00	 call	 ?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_local_entity_target_point

; 366  : 
; 367  : 	v.x = pos.x - raw->position.x;

  00064	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00067	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _pos$[ebp]
  0006c	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00070	f3 0f 11 45 e4	 movss	 DWORD PTR _v$[ebp], xmm0

; 368  : 	v.y = pos.y - raw->position.y;

  00075	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00078	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _pos$[ebp+4]
  0007d	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  00082	f3 0f 11 45 e8	 movss	 DWORD PTR _v$[ebp+4], xmm0

; 369  : 	v.z = pos.z - raw->position.z;

  00087	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0008a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _pos$[ebp+8]
  0008f	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00094	f3 0f 11 45 ec	 movss	 DWORD PTR _v$[ebp+8], xmm0

; 370  : 
; 371  : 	//
; 372  : 	// reset camera position if entity is too close
; 373  : 	//
; 374  : 
; 375  : 	if (get_3d_vector_magnitude (&v) < (get_local_entity_float_value (en, FLOAT_TYPE_CHASE_VIEW_MIN_DISTANCE) * 0.5))

  00099	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  0009d	74 0a		 je	 SHORT $LN7@update_fly
  0009f	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  000a2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a4	89 4d a0	 mov	 DWORD PTR tv95[ebp], ecx
  000a7	eb 1d		 jmp	 SHORT $LN8@update_fly
$LN7@update_fly:
  000a9	68 77 01 00 00	 push	 375			; 00000177H
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@ODENEKG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000b3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b9	52		 push	 edx
  000ba	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000bf	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv95[ebp], 0
$LN8@update_fly:
  000c6	b8 01 00 00 00	 mov	 eax, 1
  000cb	85 c0		 test	 eax, eax
  000cd	74 09		 je	 SHORT $LN9@update_fly
  000cf	c7 45 9c 15 00
	00 00		 mov	 DWORD PTR tv134[ebp], 21 ; 00000015H
  000d6	eb 1d		 jmp	 SHORT $LN10@update_fly
$LN9@update_fly:
  000d8	68 77 01 00 00	 push	 375			; 00000177H
  000dd	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@ODENEKG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ee	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv134[ebp], 0
$LN10@update_fly:
  000f5	8d 55 e4	 lea	 edx, DWORD PTR _v$[ebp]
  000f8	52		 push	 edx
  000f9	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  000fe	dd 5d 94	 fstp	 QWORD PTR tv186[ebp]
  00101	f2 0f 10 45 94	 movsd	 xmm0, QWORD PTR tv186[ebp]
  00106	6a 15		 push	 21			; 00000015H
  00108	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  0010b	50		 push	 eax
  0010c	69 4d a0 bc 02
	00 00		 imul	 ecx, DWORD PTR tv95[ebp], 700
  00113	8b 55 9c	 mov	 edx, DWORD PTR tv134[ebp]
  00116	8b 84 91 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[ecx+edx*4]
  0011d	f2 0f 11 45 8c	 movsd	 QWORD PTR tv216[ebp], xmm0
  00122	ff d0		 call	 eax
  00124	dd 5d 84	 fstp	 QWORD PTR tv194[ebp]
  00127	f2 0f 10 45 84	 movsd	 xmm0, QWORD PTR tv194[ebp]
  0012c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00134	f2 0f 10 4d 8c	 movsd	 xmm1, QWORD PTR tv216[ebp]
  00139	66 0f 2f c1	 comisd	 xmm0, xmm1
  0013d	76 76		 jbe	 SHORT $LN5@update_fly

; 376  : 	{
; 377  : 		reset_fly_by_camera (raw);

  0013f	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00142	50		 push	 eax
  00143	e8 00 00 00 00	 call	 ?reset_fly_by_camera@@YGXPAUCAMERA@@@Z ; reset_fly_by_camera

; 378  : 
; 379  : 		v.x = pos.x - raw->position.x;

  00148	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0014b	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _pos$[ebp]
  00150	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00154	f3 0f 11 45 e4	 movss	 DWORD PTR _v$[ebp], xmm0

; 380  : 		v.y = pos.y - raw->position.y;

  00159	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0015c	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _pos$[ebp+4]
  00161	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  00166	f3 0f 11 45 e8	 movss	 DWORD PTR _v$[ebp+4], xmm0

; 381  : 		v.z = pos.z - raw->position.z;

  0016b	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0016e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _pos$[ebp+8]
  00173	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00178	f3 0f 11 45 ec	 movss	 DWORD PTR _v$[ebp+8], xmm0

; 382  : 
; 383  : 		//
; 384  : 		// prevent divide by zero
; 385  : 		//
; 386  : 
; 387  : 		if (get_3d_vector_magnitude (&v) < 0.001)

  0017d	8d 45 e4	 lea	 eax, DWORD PTR _v$[ebp]
  00180	50		 push	 eax
  00181	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  00186	dd 5d 9c	 fstp	 QWORD PTR tv207[ebp]
  00189	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00191	66 0f 2f 45 9c	 comisd	 xmm0, QWORD PTR tv207[ebp]
  00196	76 1d		 jbe	 SHORT $LN5@update_fly

; 388  : 		{
; 389  : 			v.x = 0.0;

  00198	0f 57 c0	 xorps	 xmm0, xmm0
  0019b	f3 0f 11 45 e4	 movss	 DWORD PTR _v$[ebp], xmm0

; 390  : 			v.y = 0.0;

  001a0	0f 57 c0	 xorps	 xmm0, xmm0
  001a3	f3 0f 11 45 e8	 movss	 DWORD PTR _v$[ebp+4], xmm0

; 391  : 			v.z = 1.0;

  001a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001b0	f3 0f 11 45 ec	 movss	 DWORD PTR _v$[ebp+8], xmm0
$LN5@update_fly:

; 392  : 		}
; 393  : 	}
; 394  : 
; 395  : 	//
; 396  : 	// get camera attitude
; 397  : 	//
; 398  : 
; 399  : 	normalise_3d_vector (&v);

  001b5	8d 45 e4	 lea	 eax, DWORD PTR _v$[ebp]
  001b8	50		 push	 eax
  001b9	e8 00 00 00 00	 call	 ?normalise_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_3d_vector
  001be	dd d8		 fstp	 ST(0)

; 400  : 
; 401  : 	get_matrix3x3_from_unit_vec3d (raw->attitude, &v);

  001c0	8d 45 e4	 lea	 eax, DWORD PTR _v$[ebp]
  001c3	50		 push	 eax
  001c4	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  001c7	83 c1 18	 add	 ecx, 24			; 00000018H
  001ca	51		 push	 ecx
  001cb	e8 00 00 00 00	 call	 ?get_matrix3x3_from_unit_vec3d@@YGXQAY02MPBUVEC3D@@@Z ; get_matrix3x3_from_unit_vec3d

; 402  : }

  001d0	5f		 pop	 edi
  001d1	5e		 pop	 esi
  001d2	5b		 pop	 ebx
  001d3	8b e5		 mov	 esp, ebp
  001d5	5d		 pop	 ebp
  001d6	c2 04 00	 ret	 4
?update_fly_by_camera_continued@@YGXPAUCAMERA@@@Z ENDP	; update_fly_by_camera_continued
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\camera\cm_flyby.c
;	COMDAT ?update_fly_by_camera@@YGXPAUCAMERA@@@Z
_TEXT	SEGMENT
_raw$ = 8						; size = 4
?update_fly_by_camera@@YGXPAUCAMERA@@@Z PROC		; update_fly_by_camera, COMDAT

; 297  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 298  : 	//
; 299  : 	// pre-amble
; 300  : 	//
; 301  : 
; 302  : 	ASSERT (raw);

  00009	83 7d 08 00	 cmp	 DWORD PTR _raw$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@update_fly
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_fly_by_camera@@YGXPAUCAMERA@@@Z@4JA
  00014	83 c0 05	 add	 eax, 5
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@ODENEKG@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_03DGOGAGNC@raw@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@update_fly:

; 303  : 
; 304  : 	ASSERT (raw->external_view_entity);

  00027	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0002a	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  00031	75 18		 jne	 SHORT $LN3@update_fly
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??update_fly_by_camera@@YGXPAUCAMERA@@@Z@4JA
  00038	83 c0 07	 add	 eax, 7
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@ODENEKG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@NIGJPCBN@raw?9?$DOexternal_view_entity@
  00046	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@update_fly:

; 305  : 
; 306  : 	//
; 307  : 	// update timer
; 308  : 	//
; 309  : 
; 310  : 	raw->fly_by_camera_timer -= get_delta_time ();

  0004b	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0004e	f3 0f 10 80 90
	00 00 00	 movss	 xmm0, DWORD PTR [eax+144]
  00056	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00061	f3 0f 11 81 90
	00 00 00	 movss	 DWORD PTR [ecx+144], xmm0

; 311  : 
; 312  : 	if (raw->fly_by_camera_timer < 0.0)

  00069	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0006c	f3 0f 5a 80 90
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+144]
  00074	0f 57 c9	 xorps	 xmm1, xmm1
  00077	66 0f 2f c8	 comisd	 xmm1, xmm0
  0007b	76 2a		 jbe	 SHORT $LN4@update_fly

; 313  : 	{
; 314  : 		if (raw->auto_edit)

  0007d	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00080	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00084	74 18		 je	 SHORT $LN6@update_fly

; 315  : 		{
; 316  : 			switch_auto_edit_entity (raw);

  00086	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ?switch_auto_edit_entity@@YGPAUENTITY@@PAUCAMERA@@@Z ; switch_auto_edit_entity

; 317  : 
; 318  : 			if (switch_auto_edit_camera_mode (raw))

  0008f	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ?switch_auto_edit_camera_mode@@YGHPAUCAMERA@@@Z ; switch_auto_edit_camera_mode
  00098	85 c0		 test	 eax, eax
  0009a	74 02		 je	 SHORT $LN6@update_fly

; 319  : 			{
; 320  : 				//
; 321  : 				// switched to a different camera
; 322  : 				//
; 323  : 
; 324  : 				return;

  0009c	eb 12		 jmp	 SHORT $LN1@update_fly
$LN6@update_fly:

; 325  : 			}
; 326  : 		}
; 327  : 
; 328  : 		reset_fly_by_camera (raw);

  0009e	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ?reset_fly_by_camera@@YGXPAUCAMERA@@@Z ; reset_fly_by_camera
$LN4@update_fly:

; 329  : 	}
; 330  : 
; 331  : 	//
; 332  : 	// continue update
; 333  : 	//
; 334  : 
; 335  : 	update_fly_by_camera_continued (raw);

  000a7	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 ?update_fly_by_camera_continued@@YGXPAUCAMERA@@@Z ; update_fly_by_camera_continued
$LN1@update_fly:

; 336  : }

  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 04 00	 ret	 4
?update_fly_by_camera@@YGXPAUCAMERA@@@Z ENDP		; update_fly_by_camera
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\camera\cm_flyby.c
;	COMDAT ?reset_fly_by_camera@@YGXPAUCAMERA@@@Z
_TEXT	SEGMENT
tv187 = -264						; size = 4
tv164 = -264						; size = 4
tv144 = -264						; size = 4
tv92 = -264						; size = 4
tv605 = -260						; size = 4
tv497 = -260						; size = 4
tv180 = -260						; size = 4
tv170 = -260						; size = 4
tv156 = -260						; size = 4
tv136 = -260						; size = 4
tv84 = -260						; size = 4
$T1 = -256						; size = 4
$T2 = -252						; size = 4
$T3 = -248						; size = 4
_near_to_ground$ = -180					; size = 4
_duration$ = -176					; size = 4
_theta$ = -172						; size = 4
_heading$ = -168					; size = 4
_velocity$ = -164					; size = 4
_rad_alt$ = -160					; size = 4
_min_dist$ = -156					; size = 4
_m3$ = -152						; size = 36
_m2$ = -116						; size = 36
_m1$ = -80						; size = 36
_v$ = -44						; size = 12
_mvec$ = -32						; size = 12
_pos$ = -20						; size = 12
_force$ = -8						; size = 4
_en$ = -4						; size = 4
_raw$ = 8						; size = 4
?reset_fly_by_camera@@YGXPAUCAMERA@@@Z PROC		; reset_fly_by_camera, COMDAT

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 81   : 	entity
; 82   : 		*en;
; 83   : 
; 84   : 	entity_forces
; 85   : 		force;
; 86   : 
; 87   : 	vec3d
; 88   : 		pos,
; 89   : 		mvec,
; 90   : 		v;
; 91   : 
; 92   : 	matrix3x3
; 93   : 		m1,
; 94   : 		m2,
; 95   : 		m3;
; 96   : 
; 97   : 	float
; 98   : 		min_dist,
; 99   : 		rad_alt,
; 100  : 		velocity,
; 101  : 		heading,
; 102  : 		theta,
; 103  : 		duration;
; 104  : 
; 105  : 	int
; 106  : 		near_to_ground;
; 107  : 
; 108  : 	//
; 109  : 	// pre-amble
; 110  : 	//
; 111  : 
; 112  : 	ASSERT (raw);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _raw$[ebp], 0
  00010	75 18		 jne	 SHORT $LN4@reset_fly_
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??reset_fly_by_camera@@YGXPAUCAMERA@@@Z@4JA
  00017	83 c0 20	 add	 eax, 32			; 00000020H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@ODENEKG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_03DGOGAGNC@raw@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@reset_fly_:

; 113  : 
; 114  : 	ASSERT (raw->external_view_entity);

  0002a	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0002d	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  00034	75 18		 jne	 SHORT $LN5@reset_fly_
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??reset_fly_by_camera@@YGXPAUCAMERA@@@Z@4JA
  0003b	83 c0 22	 add	 eax, 34			; 00000022H
  0003e	50		 push	 eax
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@ODENEKG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@NIGJPCBN@raw?9?$DOexternal_view_entity@
  00049	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@reset_fly_:

; 115  : 
; 116  : 	en = raw->external_view_entity;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00051	8b 88 24 01 00
	00		 mov	 ecx, DWORD PTR [eax+292]
  00057	89 4d fc	 mov	 DWORD PTR _en$[ebp], ecx

; 117  : 
; 118  : 	get_local_entity_target_point (en, &pos);

  0005a	8d 45 ec	 lea	 eax, DWORD PTR _pos$[ebp]
  0005d	50		 push	 eax
  0005e	8b 4d fc	 mov	 ecx, DWORD PTR _en$[ebp]
  00061	51		 push	 ecx
  00062	e8 00 00 00 00	 call	 ?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_local_entity_target_point

; 119  : 
; 120  : 	get_local_entity_vec3d (en, VEC3D_TYPE_MOTION_VECTOR, &mvec);

  00067	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  0006b	74 0d		 je	 SHORT $LN22@reset_fly_
  0006d	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  00070	8b 08		 mov	 ecx, DWORD PTR [eax]
  00072	89 8d fc fe ff
	ff		 mov	 DWORD PTR tv84[ebp], ecx
  00078	eb 24		 jmp	 SHORT $LN23@reset_fly_
$LN22@reset_fly_:
  0007a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??reset_fly_by_camera@@YGXPAUCAMERA@@@Z@4JA
  00080	83 c2 28	 add	 edx, 40			; 00000028H
  00083	52		 push	 edx
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@ODENEKG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00089	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00094	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv84[ebp], 0
$LN23@reset_fly_:
  0009e	b9 01 00 00 00	 mov	 ecx, 1
  000a3	85 c9		 test	 ecx, ecx
  000a5	74 0c		 je	 SHORT $LN24@reset_fly_
  000a7	c7 85 f8 fe ff
	ff 06 00 00 00	 mov	 DWORD PTR tv92[ebp], 6
  000b1	eb 24		 jmp	 SHORT $LN25@reset_fly_
$LN24@reset_fly_:
  000b3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??reset_fly_by_camera@@YGXPAUCAMERA@@@Z@4JA
  000b9	83 c2 28	 add	 edx, 40			; 00000028H
  000bc	52		 push	 edx
  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@ODENEKG@c?3?2users?2nhv90?2projects?2eech?2ap@
  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000cd	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv92[ebp], 0
$LN25@reset_fly_:
  000d7	8d 4d e0	 lea	 ecx, DWORD PTR _mvec$[ebp]
  000da	51		 push	 ecx
  000db	6a 06		 push	 6
  000dd	8b 55 fc	 mov	 edx, DWORD PTR _en$[ebp]
  000e0	52		 push	 edx
  000e1	6b 85 fc fe ff
	ff 60		 imul	 eax, DWORD PTR tv84[ebp], 96
  000e8	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR tv92[ebp]
  000ee	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  000f5	ff d2		 call	 edx

; 121  : 
; 122  : 	min_dist = get_local_entity_float_value (en, FLOAT_TYPE_CHASE_VIEW_MIN_DISTANCE);

  000f7	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  000fb	74 0d		 je	 SHORT $LN26@reset_fly_
  000fd	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  00100	8b 08		 mov	 ecx, DWORD PTR [eax]
  00102	89 8d fc fe ff
	ff		 mov	 DWORD PTR tv136[ebp], ecx
  00108	eb 24		 jmp	 SHORT $LN27@reset_fly_
$LN26@reset_fly_:
  0010a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??reset_fly_by_camera@@YGXPAUCAMERA@@@Z@4JA
  00110	83 c2 2a	 add	 edx, 42			; 0000002aH
  00113	52		 push	 edx
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@ODENEKG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00119	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00124	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv136[ebp], 0
$LN27@reset_fly_:
  0012e	b9 01 00 00 00	 mov	 ecx, 1
  00133	85 c9		 test	 ecx, ecx
  00135	74 0c		 je	 SHORT $LN28@reset_fly_
  00137	c7 85 f8 fe ff
	ff 15 00 00 00	 mov	 DWORD PTR tv144[ebp], 21 ; 00000015H
  00141	eb 24		 jmp	 SHORT $LN29@reset_fly_
$LN28@reset_fly_:
  00143	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??reset_fly_by_camera@@YGXPAUCAMERA@@@Z@4JA
  00149	83 c2 2a	 add	 edx, 42			; 0000002aH
  0014c	52		 push	 edx
  0014d	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@ODENEKG@c?3?2users?2nhv90?2projects?2eech?2ap@
  00152	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00157	50		 push	 eax
  00158	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0015d	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv144[ebp], 0
$LN29@reset_fly_:
  00167	6a 15		 push	 21			; 00000015H
  00169	8b 4d fc	 mov	 ecx, DWORD PTR _en$[ebp]
  0016c	51		 push	 ecx
  0016d	69 95 fc fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv136[ebp], 700
  00177	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR tv144[ebp]
  0017d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00184	ff d1		 call	 ecx
  00186	d9 9d 64 ff ff
	ff		 fstp	 DWORD PTR _min_dist$[ebp]

; 123  : 
; 124  : 	//
; 125  : 	// get rotation limits and fly-by duration wrt force
; 126  : 	//
; 127  : 
; 128  : 	force = (entity_forces) get_local_entity_int_value (en, INT_TYPE_FORCE);

  0018c	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  00190	74 0d		 je	 SHORT $LN30@reset_fly_
  00192	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  00195	8b 08		 mov	 ecx, DWORD PTR [eax]
  00197	89 8d fc fe ff
	ff		 mov	 DWORD PTR tv156[ebp], ecx
  0019d	eb 24		 jmp	 SHORT $LN31@reset_fly_
$LN30@reset_fly_:
  0019f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??reset_fly_by_camera@@YGXPAUCAMERA@@@Z@4JA
  001a5	83 c2 30	 add	 edx, 48			; 00000030H
  001a8	52		 push	 edx
  001a9	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@ODENEKG@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001b3	50		 push	 eax
  001b4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001b9	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv156[ebp], 0
$LN31@reset_fly_:
  001c3	b9 01 00 00 00	 mov	 ecx, 1
  001c8	85 c9		 test	 ecx, ecx
  001ca	74 0c		 je	 SHORT $LN32@reset_fly_
  001cc	c7 85 f8 fe ff
	ff 3a 00 00 00	 mov	 DWORD PTR tv164[ebp], 58 ; 0000003aH
  001d6	eb 24		 jmp	 SHORT $LN33@reset_fly_
$LN32@reset_fly_:
  001d8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??reset_fly_by_camera@@YGXPAUCAMERA@@@Z@4JA
  001de	83 c2 30	 add	 edx, 48			; 00000030H
  001e1	52		 push	 edx
  001e2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@ODENEKG@c?3?2users?2nhv90?2projects?2eech?2ap@
  001e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  001ec	50		 push	 eax
  001ed	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001f2	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv164[ebp], 0
$LN33@reset_fly_:
  001fc	6a 3a		 push	 58			; 0000003aH
  001fe	8b 4d fc	 mov	 ecx, DWORD PTR _en$[ebp]
  00201	51		 push	 ecx
  00202	69 95 fc fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv156[ebp], 1116
  0020c	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR tv164[ebp]
  00212	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00219	ff d1		 call	 ecx
  0021b	89 45 f8	 mov	 DWORD PTR _force$[ebp], eax

; 129  : 
; 130  : 	switch (force)

  0021e	8b 45 f8	 mov	 eax, DWORD PTR _force$[ebp]
  00221	89 85 fc fe ff
	ff		 mov	 DWORD PTR tv170[ebp], eax
  00227	83 bd fc fe ff
	ff 01		 cmp	 DWORD PTR tv170[ebp], 1
  0022e	74 1f		 je	 SHORT $LN6@reset_fly_
  00230	83 bd fc fe ff
	ff 02		 cmp	 DWORD PTR tv170[ebp], 2
  00237	0f 84 7b 02 00
	00		 je	 $LN15@reset_fly_
  0023d	83 bd fc fe ff
	ff 03		 cmp	 DWORD PTR tv170[ebp], 3
  00244	0f 84 09 03 00
	00		 je	 $LN16@reset_fly_
  0024a	e9 9c 03 00 00	 jmp	 $LN17@reset_fly_
$LN6@reset_fly_:

; 131  : 	{
; 132  : 		////////////////////////////////////////
; 133  : 		case ENTITY_FORCE_AIR:
; 134  : 		////////////////////////////////////////
; 135  : 		{
; 136  : 			if (point_inside_map_area (&pos))

  0024f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _pos$[ebp]
  00254	0f 2f 05 24 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+36
  0025b	0f 82 5c 01 00
	00		 jb	 $LN7@reset_fly_
  00261	f3 0f 10 05 3c
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+60
  00269	0f 2f 45 ec	 comiss	 xmm0, DWORD PTR _pos$[ebp]
  0026d	0f 82 4a 01 00
	00		 jb	 $LN7@reset_fly_
  00273	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _pos$[ebp+8]
  00278	0f 2f 05 2c 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+44
  0027f	0f 82 38 01 00
	00		 jb	 $LN7@reset_fly_
  00285	f3 0f 10 05 44
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+68
  0028d	0f 2f 45 f4	 comiss	 xmm0, DWORD PTR _pos$[ebp+8]
  00291	0f 82 26 01 00
	00		 jb	 $LN7@reset_fly_

; 137  : 			{
; 138  : 				if (get_local_entity_int_value (en, INT_TYPE_AIRBORNE_AIRCRAFT))

  00297	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  0029b	74 0d		 je	 SHORT $LN34@reset_fly_
  0029d	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  002a0	8b 08		 mov	 ecx, DWORD PTR [eax]
  002a2	89 8d fc fe ff
	ff		 mov	 DWORD PTR tv180[ebp], ecx
  002a8	eb 20		 jmp	 SHORT $LN35@reset_fly_
$LN34@reset_fly_:
  002aa	68 8a 00 00 00	 push	 138			; 0000008aH
  002af	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@ODENEKG@c?3?2users?2nhv90?2projects?2eech?2ap@
  002b4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002ba	52		 push	 edx
  002bb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002c0	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv180[ebp], 0
$LN35@reset_fly_:
  002ca	b8 01 00 00 00	 mov	 eax, 1
  002cf	85 c0		 test	 eax, eax
  002d1	74 0c		 je	 SHORT $LN36@reset_fly_
  002d3	c7 85 f8 fe ff
	ff 04 00 00 00	 mov	 DWORD PTR tv187[ebp], 4
  002dd	eb 20		 jmp	 SHORT $LN37@reset_fly_
$LN36@reset_fly_:
  002df	68 8a 00 00 00	 push	 138			; 0000008aH
  002e4	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@ODENEKG@c?3?2users?2nhv90?2projects?2eech?2ap@
  002e9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  002ef	51		 push	 ecx
  002f0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002f5	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv187[ebp], 0
$LN37@reset_fly_:
  002ff	6a 04		 push	 4
  00301	8b 55 fc	 mov	 edx, DWORD PTR _en$[ebp]
  00304	52		 push	 edx
  00305	69 85 fc fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv180[ebp], 1116
  0030f	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR tv187[ebp]
  00315	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0031c	ff d2		 call	 edx
  0031e	85 c0		 test	 eax, eax
  00320	0f 84 8b 00 00
	00		 je	 $LN9@reset_fly_

; 139  : 				{
; 140  : 					rad_alt = max (pos.y - get_3d_terrain_elevation (pos.x, pos.z), 0.0f);

  00326	0f 57 c0	 xorps	 xmm0, xmm0
  00329	f3 0f 11 85 08
	ff ff ff	 movss	 DWORD PTR $T3[ebp], xmm0
  00331	6a 00		 push	 0
  00333	51		 push	 ecx
  00334	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _pos$[ebp+8]
  00339	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033e	51		 push	 ecx
  0033f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _pos$[ebp]
  00344	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00349	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  0034e	d9 9d fc fe ff
	ff		 fstp	 DWORD PTR tv497[ebp]
  00354	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _pos$[ebp+4]
  00359	f3 0f 5c 85 fc
	fe ff ff	 subss	 xmm0, DWORD PTR tv497[ebp]
  00361	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR $T2[ebp], xmm0
  00369	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0036f	50		 push	 eax
  00370	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00376	51		 push	 ecx
  00377	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0037c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00380	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _rad_alt$[ebp], xmm0

; 141  : 
; 142  : 					if (rad_alt < min_dist)

  00388	f3 0f 10 85 64
	ff ff ff	 movss	 xmm0, DWORD PTR _min_dist$[ebp]
  00390	0f 2f 85 60 ff
	ff ff		 comiss	 xmm0, DWORD PTR _rad_alt$[ebp]
  00397	76 0c		 jbe	 SHORT $LN11@reset_fly_

; 143  : 					{
; 144  : 						near_to_ground = TRUE;

  00399	c7 85 4c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _near_to_ground$[ebp], 1

; 145  : 					}
; 146  : 					else

  003a3	eb 0a		 jmp	 SHORT $LN12@reset_fly_
$LN11@reset_fly_:

; 147  : 					{
; 148  : 						near_to_ground = FALSE;

  003a5	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _near_to_ground$[ebp], 0
$LN12@reset_fly_:

; 149  : 					}
; 150  : 				}
; 151  : 				else

  003af	eb 0a		 jmp	 SHORT $LN10@reset_fly_
$LN9@reset_fly_:

; 152  : 				{
; 153  : 					near_to_ground = TRUE;

  003b1	c7 85 4c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _near_to_ground$[ebp], 1
$LN10@reset_fly_:

; 154  : 				}
; 155  : 			}
; 156  : 			else

  003bb	eb 0a		 jmp	 SHORT $LN8@reset_fly_
$LN7@reset_fly_:

; 157  : 			{
; 158  : 				near_to_ground = TRUE;

  003bd	c7 85 4c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _near_to_ground$[ebp], 1
$LN8@reset_fly_:

; 159  : 			}
; 160  : 
; 161  : 			//
; 162  : 			// prevent underside view if near to ground
; 163  : 			//
; 164  : 
; 165  : 			if (near_to_ground)

  003c7	83 bd 4c ff ff
	ff 00		 cmp	 DWORD PTR _near_to_ground$[ebp], 0
  003ce	74 4d		 je	 SHORT $LN13@reset_fly_

; 166  : 			{
; 167  : 				theta = rad (5.0) + (frand1 () * rad (75.0));

  003d0	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  003da	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  003df	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  003e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  003ea	c1 f9 10	 sar	 ecx, 16			; 00000010H
  003ed	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  003f3	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  003f7	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  003ff	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff4f1a6c3800000
  00407	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb6571848000000
  0040f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00413	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _theta$[ebp], xmm0

; 168  : 			}
; 169  : 			else

  0041b	eb 4b		 jmp	 SHORT $LN14@reset_fly_
$LN13@reset_fly_:

; 170  : 			{
; 171  : 				theta = rad (5.0) + (frand1 () * rad (170.0));

  0041d	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  00427	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  0042c	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00431	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00437	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0043a	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00440	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00444	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  0044c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4007bc89cc800000
  00454	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb6571848000000
  0045c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00460	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _theta$[ebp], xmm0
$LN14@reset_fly_:

; 172  : 			}
; 173  : 
; 174  : 			duration = 2.0 + (frand1 () * 6.0);

  00468	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  00472	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00477	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  0047c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00482	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00485	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  0048b	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  0048f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00497	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4018000000000000
  0049f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  004a7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004ab	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _duration$[ebp], xmm0

; 175  : 
; 176  : 			break;

  004b3	e9 44 01 00 00	 jmp	 $LN2@reset_fly_
$LN15@reset_fly_:

; 177  : 		}
; 178  : 		////////////////////////////////////////
; 179  : 		case ENTITY_FORCE_GROUND:
; 180  : 		////////////////////////////////////////
; 181  : 		{
; 182  : 			theta = rad (30.0) + (frand1 () * rad (50.0));

  004b8	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  004c2	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  004c7	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  004cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  004d2	c1 f9 10	 sar	 ecx, 16			; 00000010H
  004d5	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  004db	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  004df	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  004e7	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3febecde5a000000
  004ef	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0c15236000000
  004f7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004fb	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _theta$[ebp], xmm0

; 183  : 
; 184  : 			duration = 4.0 + (frand1 () * 4.0);

  00503	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  0050d	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00512	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00517	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  0051d	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00520	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00526	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  0052a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00532	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4010000000000000
  0053a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  00542	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00546	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _duration$[ebp], xmm0

; 185  : 
; 186  : 			break;

  0054e	e9 a9 00 00 00	 jmp	 $LN2@reset_fly_
$LN16@reset_fly_:

; 187  : 		}
; 188  : 		////////////////////////////////////////
; 189  : 		case ENTITY_FORCE_SEA:
; 190  : 		////////////////////////////////////////
; 191  : 		{
; 192  : 			theta = rad (60.0) + (frand1 () * rad (20.0));

  00553	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  0055d	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00562	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00567	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  0056d	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00570	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00576	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  0057a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00582	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd6571848000000
  0058a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0c15236000000
  00592	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00596	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _theta$[ebp], xmm0

; 193  : 
; 194  : 			duration = 6.0 + (frand1 () * 4.0);

  0059e	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  005a8	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  005ad	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  005b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  005b8	c1 f9 10	 sar	 ecx, 16			; 00000010H
  005bb	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  005c1	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  005c5	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  005cd	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4010000000000000
  005d5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4018000000000000
  005dd	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005e1	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _duration$[ebp], xmm0

; 195  : 
; 196  : 			break;

  005e9	eb 11		 jmp	 SHORT $LN2@reset_fly_
$LN17@reset_fly_:

; 197  : 		}
; 198  : 		////////////////////////////////////////
; 199  : 		default:
; 200  : 		////////////////////////////////////////
; 201  : 		{
; 202  : 			debug_fatal ("Invalid force = %d", force);

  005eb	8b 45 f8	 mov	 eax, DWORD PTR _force$[ebp]
  005ee	50		 push	 eax
  005ef	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OPMCNPNH@Invalid?5force?5?$DN?5?$CFd@
  005f4	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  005f9	83 c4 08	 add	 esp, 8
$LN2@reset_fly_:

; 203  : 
; 204  : 			break;
; 205  : 		}
; 206  : 	}
; 207  : 
; 208  : 	if (sfrand1 () < 0.0)

  005fc	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  00606	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  0060b	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00610	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00616	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00619	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  0061f	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  00625	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00629	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  00631	0f 57 c9	 xorps	 xmm1, xmm1
  00634	66 0f 2f c8	 comisd	 xmm1, xmm0
  00638	76 17		 jbe	 SHORT $LN18@reset_fly_

; 209  : 	{
; 210  : 		theta = -theta;

  0063a	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _theta$[ebp]
  00642	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00649	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _theta$[ebp], xmm0
$LN18@reset_fly_:

; 211  : 	}
; 212  : 
; 213  : 	raw->fly_by_camera_timer = duration;

  00651	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00654	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _duration$[ebp]
  0065c	f3 0f 11 80 90
	00 00 00	 movss	 DWORD PTR [eax+144], xmm0

; 214  : 
; 215  : 	//
; 216  : 	// if velocity is small then use a random heading
; 217  : 	//
; 218  : 
; 219  : 	velocity = get_3d_vector_magnitude (&mvec);

  00664	8d 45 e0	 lea	 eax, DWORD PTR _mvec$[ebp]
  00667	50		 push	 eax
  00668	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  0066d	d9 9d 5c ff ff
	ff		 fstp	 DWORD PTR _velocity$[ebp]

; 220  : 
; 221  : 	if (velocity < 1.0)

  00673	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _velocity$[ebp]
  0067b	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00683	66 0f 2f c8	 comisd	 xmm1, xmm0
  00687	76 7d		 jbe	 SHORT $LN19@reset_fly_

; 222  : 	{
; 223  : 		heading = sfrand1 () * rad (180.0);

  00689	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  00693	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00698	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  0069d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  006a3	c1 f9 10	 sar	 ecx, 16			; 00000010H
  006a6	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  006ac	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  006b2	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  006b6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  006be	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@400921fb51000000
  006c6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006ca	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _heading$[ebp], xmm0

; 224  : 
; 225  : 		mvec.x = sin (heading);

  006d2	51		 push	 ecx
  006d3	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _heading$[ebp]
  006db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006e0	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  006e5	d9 5d e0	 fstp	 DWORD PTR _mvec$[ebp]

; 226  : 		mvec.y = 0.0;

  006e8	0f 57 c0	 xorps	 xmm0, xmm0
  006eb	f3 0f 11 45 e4	 movss	 DWORD PTR _mvec$[ebp+4], xmm0

; 227  : 		mvec.z = cos (heading);

  006f0	51		 push	 ecx
  006f1	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _heading$[ebp]
  006f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006fe	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  00703	d9 5d e8	 fstp	 DWORD PTR _mvec$[ebp+8]
$LN19@reset_fly_:

; 228  : 	}
; 229  : 
; 230  : 	//
; 231  : 	// get offset vector perpendicular to motion vector (offset vector = y vector of attitude matrix)
; 232  : 	//
; 233  : 
; 234  : 	v = mvec;

  00706	8b 45 e0	 mov	 eax, DWORD PTR _mvec$[ebp]
  00709	89 45 d4	 mov	 DWORD PTR _v$[ebp], eax
  0070c	8b 4d e4	 mov	 ecx, DWORD PTR _mvec$[ebp+4]
  0070f	89 4d d8	 mov	 DWORD PTR _v$[ebp+4], ecx
  00712	8b 55 e8	 mov	 edx, DWORD PTR _mvec$[ebp+8]
  00715	89 55 dc	 mov	 DWORD PTR _v$[ebp+8], edx

; 235  : 
; 236  : 	normalise_3d_vector (&v);

  00718	8d 45 d4	 lea	 eax, DWORD PTR _v$[ebp]
  0071b	50		 push	 eax
  0071c	e8 00 00 00 00	 call	 ?normalise_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_3d_vector
  00721	dd d8		 fstp	 ST(0)

; 237  : 
; 238  : 	get_matrix3x3_from_unit_vec3d (m1, &v);

  00723	8d 45 d4	 lea	 eax, DWORD PTR _v$[ebp]
  00726	50		 push	 eax
  00727	8d 4d b0	 lea	 ecx, DWORD PTR _m1$[ebp]
  0072a	51		 push	 ecx
  0072b	e8 00 00 00 00	 call	 ?get_matrix3x3_from_unit_vec3d@@YGXQAY02MPBUVEC3D@@@Z ; get_matrix3x3_from_unit_vec3d

; 239  : 
; 240  : 	//
; 241  : 	// rotate offset vector about motion vector
; 242  : 	//
; 243  : 
; 244  : 	get_3d_transformation_matrix (m2, 0.0, 0.0, theta);

  00730	51		 push	 ecx
  00731	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _theta$[ebp]
  00739	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0073e	51		 push	 ecx
  0073f	0f 57 c0	 xorps	 xmm0, xmm0
  00742	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00747	51		 push	 ecx
  00748	0f 57 c0	 xorps	 xmm0, xmm0
  0074b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00750	8d 45 8c	 lea	 eax, DWORD PTR _m2$[ebp]
  00753	50		 push	 eax
  00754	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 245  : 
; 246  : 	multiply_matrix3x3_matrix3x3 (m3, m2, m1);

  00759	8d 45 b0	 lea	 eax, DWORD PTR _m1$[ebp]
  0075c	50		 push	 eax
  0075d	8d 4d 8c	 lea	 ecx, DWORD PTR _m2$[ebp]
  00760	51		 push	 ecx
  00761	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _m3$[ebp]
  00767	52		 push	 edx
  00768	e8 00 00 00 00	 call	 ?multiply_matrix3x3_matrix3x3@@YGXQAY02MQAY02$$CBM1@Z ; multiply_matrix3x3_matrix3x3

; 247  : 
; 248  : 	//
; 249  : 	// scale offset vector
; 250  : 	//
; 251  : 
; 252  : 	m3[1][0] *= min_dist;

  0076d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00772	c1 e0 00	 shl	 eax, 0
  00775	8d 8c 05 68 ff
	ff ff		 lea	 ecx, DWORD PTR _m3$[ebp+eax]
  0077c	ba 04 00 00 00	 mov	 edx, 4
  00781	6b c2 00	 imul	 eax, edx, 0
  00784	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00789	f3 0f 59 85 64
	ff ff ff	 mulss	 xmm0, DWORD PTR _min_dist$[ebp]
  00791	b9 04 00 00 00	 mov	 ecx, 4
  00796	6b d1 00	 imul	 edx, ecx, 0
  00799	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0079e	c1 e0 00	 shl	 eax, 0
  007a1	8d 8c 05 68 ff
	ff ff		 lea	 ecx, DWORD PTR _m3$[ebp+eax]
  007a8	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 253  : 	m3[1][1] *= min_dist;

  007ad	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  007b2	c1 e0 00	 shl	 eax, 0
  007b5	8d 8c 05 68 ff
	ff ff		 lea	 ecx, DWORD PTR _m3$[ebp+eax]
  007bc	ba 04 00 00 00	 mov	 edx, 4
  007c1	c1 e2 00	 shl	 edx, 0
  007c4	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  007c9	f3 0f 59 85 64
	ff ff ff	 mulss	 xmm0, DWORD PTR _min_dist$[ebp]
  007d1	b8 04 00 00 00	 mov	 eax, 4
  007d6	c1 e0 00	 shl	 eax, 0
  007d9	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  007de	c1 e1 00	 shl	 ecx, 0
  007e1	8d 94 0d 68 ff
	ff ff		 lea	 edx, DWORD PTR _m3$[ebp+ecx]
  007e8	f3 0f 11 04 02	 movss	 DWORD PTR [edx+eax], xmm0

; 254  : 	m3[1][2] *= min_dist;

  007ed	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  007f2	c1 e0 00	 shl	 eax, 0
  007f5	8d 8c 05 68 ff
	ff ff		 lea	 ecx, DWORD PTR _m3$[ebp+eax]
  007fc	ba 04 00 00 00	 mov	 edx, 4
  00801	d1 e2		 shl	 edx, 1
  00803	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00808	f3 0f 59 85 64
	ff ff ff	 mulss	 xmm0, DWORD PTR _min_dist$[ebp]
  00810	b8 04 00 00 00	 mov	 eax, 4
  00815	d1 e0		 shl	 eax, 1
  00817	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0081c	c1 e1 00	 shl	 ecx, 0
  0081f	8d 94 0d 68 ff
	ff ff		 lea	 edx, DWORD PTR _m3$[ebp+ecx]
  00826	f3 0f 11 04 02	 movss	 DWORD PTR [edx+eax], xmm0

; 255  : 
; 256  : 	//
; 257  : 	// scale motion vector
; 258  : 	//
; 259  : 
; 260  : 	duration *= 0.5;

  0082b	f3 0f 5a 85 50
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _duration$[ebp]
  00833	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0083b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0083f	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _duration$[ebp], xmm0

; 261  : 
; 262  : 	mvec.x *= duration;

  00847	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _mvec$[ebp]
  0084c	f3 0f 59 85 50
	ff ff ff	 mulss	 xmm0, DWORD PTR _duration$[ebp]
  00854	f3 0f 11 45 e0	 movss	 DWORD PTR _mvec$[ebp], xmm0

; 263  : 	mvec.y *= duration;

  00859	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _mvec$[ebp+4]
  0085e	f3 0f 59 85 50
	ff ff ff	 mulss	 xmm0, DWORD PTR _duration$[ebp]
  00866	f3 0f 11 45 e4	 movss	 DWORD PTR _mvec$[ebp+4], xmm0

; 264  : 	mvec.z *= duration;

  0086b	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _mvec$[ebp+8]
  00870	f3 0f 59 85 50
	ff ff ff	 mulss	 xmm0, DWORD PTR _duration$[ebp]
  00878	f3 0f 11 45 e8	 movss	 DWORD PTR _mvec$[ebp+8], xmm0

; 265  : 
; 266  : 	//
; 267  : 	// camera position = entity position + motion vector + offset vector
; 268  : 	//
; 269  : 
; 270  : 	raw->position.x = pos.x + mvec.x + m3[1][0];

  0087d	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _pos$[ebp]
  00882	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _mvec$[ebp]
  00887	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0088c	c1 e0 00	 shl	 eax, 0
  0088f	8d 8c 05 68 ff
	ff ff		 lea	 ecx, DWORD PTR _m3$[ebp+eax]
  00896	ba 04 00 00 00	 mov	 edx, 4
  0089b	6b c2 00	 imul	 eax, edx, 0
  0089e	f3 0f 58 04 01	 addss	 xmm0, DWORD PTR [ecx+eax]
  008a3	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  008a6	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 271  : 	raw->position.y = pos.y + mvec.y + m3[1][1];

  008aa	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _pos$[ebp+4]
  008af	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _mvec$[ebp+4]
  008b4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  008b9	c1 e0 00	 shl	 eax, 0
  008bc	8d 8c 05 68 ff
	ff ff		 lea	 ecx, DWORD PTR _m3$[ebp+eax]
  008c3	ba 04 00 00 00	 mov	 edx, 4
  008c8	c1 e2 00	 shl	 edx, 0
  008cb	f3 0f 58 04 11	 addss	 xmm0, DWORD PTR [ecx+edx]
  008d0	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  008d3	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 272  : 	raw->position.z = pos.z + mvec.z + m3[1][2];

  008d8	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _pos$[ebp+8]
  008dd	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _mvec$[ebp+8]
  008e2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  008e7	c1 e0 00	 shl	 eax, 0
  008ea	8d 8c 05 68 ff
	ff ff		 lea	 ecx, DWORD PTR _m3$[ebp+eax]
  008f1	ba 04 00 00 00	 mov	 edx, 4
  008f6	d1 e2		 shl	 edx, 1
  008f8	f3 0f 58 04 11	 addss	 xmm0, DWORD PTR [ecx+edx]
  008fd	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00900	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 273  : 
; 274  : 	//
; 275  : 	// keep point above ground (unless point off map)
; 276  : 	//
; 277  : 
; 278  : 	if (point_inside_map_area (&raw->position))

  00905	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00908	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0090c	0f 2f 05 24 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+36
  00913	0f 82 96 00 00
	00		 jb	 $LN20@reset_fly_
  00919	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  0091c	f3 0f 10 05 3c
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+60
  00924	0f 2f 00	 comiss	 xmm0, DWORD PTR [eax]
  00927	0f 82 82 00 00
	00		 jb	 $LN20@reset_fly_
  0092d	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00930	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00935	0f 2f 05 2c 00
	00 00		 comiss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+44
  0093c	72 71		 jb	 SHORT $LN20@reset_fly_
  0093e	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00941	f3 0f 10 05 44
	00 00 00	 movss	 xmm0, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+68
  00949	0f 2f 40 08	 comiss	 xmm0, DWORD PTR [eax+8]
  0094d	72 60		 jb	 SHORT $LN20@reset_fly_

; 279  : 	{
; 280  : 		raw->position.y = max (raw->position.y, get_3d_terrain_point_data (raw->position.x, raw->position.z, &raw->terrain_info) + CAMERA_MIN_HEIGHT_ABOVE_GROUND);

  0094f	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  00952	83 c0 50	 add	 eax, 80			; 00000050H
  00955	50		 push	 eax
  00956	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  00959	51		 push	 ecx
  0095a	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0095f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00964	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  00967	51		 push	 ecx
  00968	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0096c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00971	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  00976	d9 9d fc fe ff
	ff		 fstp	 DWORD PTR tv605[ebp]
  0097c	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR tv605[ebp]
  00984	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f8ccccd
  0098c	f3 0f 11 85 00
	ff ff ff	 movss	 DWORD PTR $T1[ebp], xmm0
  00994	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0099a	50		 push	 eax
  0099b	8b 4d 08	 mov	 ecx, DWORD PTR _raw$[ebp]
  0099e	83 c1 04	 add	 ecx, 4
  009a1	51		 push	 ecx
  009a2	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  009a7	8b 55 08	 mov	 edx, DWORD PTR _raw$[ebp]
  009aa	8b 00		 mov	 eax, DWORD PTR [eax]
  009ac	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN20@reset_fly_:

; 281  : 	}
; 282  : 
; 283  : 	//
; 284  : 	// motion vector
; 285  : 	//
; 286  : 
; 287  : 	raw->motion_vector.x = 0.0;

  009af	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  009b2	0f 57 c0	 xorps	 xmm0, xmm0
  009b5	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 288  : 	raw->motion_vector.y = 0.0;

  009ba	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  009bd	0f 57 c0	 xorps	 xmm0, xmm0
  009c0	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0

; 289  : 	raw->motion_vector.z = 0.0;

  009c5	8b 45 08	 mov	 eax, DWORD PTR _raw$[ebp]
  009c8	0f 57 c0	 xorps	 xmm0, xmm0
  009cb	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 290  : }

  009d0	5f		 pop	 edi
  009d1	5e		 pop	 esi
  009d2	5b		 pop	 ebx
  009d3	8b e5		 mov	 esp, ebp
  009d5	5d		 pop	 ebp
  009d6	c2 04 00	 ret	 4
?reset_fly_by_camera@@YGXPAUCAMERA@@@Z ENDP		; reset_fly_by_camera
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sin@@YGMM@Z PROC					; sin, COMDAT

; 284  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 285  : 	return (_CSTD sinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sinf
  00019	83 c4 04	 add	 esp, 4

; 286  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sin@@YGMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?cos@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?cos@@YGMM@Z PROC					; cos, COMDAT

; 77   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 78   : 	return (_CSTD cosf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _cosf
  00019	83 c4 04	 add	 esp, 4

; 79   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?cos@@YGMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 749  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 750  :             return (float)sin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 751  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 648  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 649  :             return (float)cos(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _cos
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 650  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
END
