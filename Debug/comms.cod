; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\comms\comms.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?comms_model_string@@3PBDB			; comms_model_string
PUBLIC	?comms_model_names@@3PAPBDA			; comms_model_names
PUBLIC	?send_type_names@@3PAPBDA			; send_type_names
PUBLIC	?system_comms_model@@3W4COMMS_MODEL_TYPES@@A	; system_comms_model
PUBLIC	?system_comms_data_flow@@3W4COMMS_DATA_FLOW_TYPES@@A ; system_comms_data_flow
PUBLIC	?system_server_id@@3KA				; system_server_id
PUBLIC	?send_group_frame_id@@3HA			; send_group_frame_id
PUBLIC	?resend_packet_list_counter@@3HA		; resend_packet_list_counter
PUBLIC	?group_packet_list_counter@@3HA			; group_packet_list_counter
PUBLIC	?personal_packet_list_counter@@3HA		; personal_packet_list_counter
PUBLIC	?rerequest_packet_list@@3PAUSTUB_PACKET_TYPE@@A	; rerequest_packet_list
PUBLIC	?resend_packet_list@@3PAUSTUB_PACKET_TYPE@@A	; resend_packet_list
PUBLIC	?received_group_packets@@3PAUSTUB_PACKET_TYPE@@A ; received_group_packets
PUBLIC	?received_personal_packets@@3PAUSTUB_PACKET_TYPE@@A ; received_personal_packets
PUBLIC	?comms_weapon_lag_timing@@3HA			; comms_weapon_lag_timing
PUBLIC	?comms_weapon_lag_time@@3MA			; comms_weapon_lag_time
PUBLIC	?av_packet_size_sent@@3MA			; av_packet_size_sent
PUBLIC	?av_packet_size_received@@3MA			; av_packet_size_received
PUBLIC	?instant_packet_size_sent@@3MA			; instant_packet_size_sent
PUBLIC	?packet_record_data_count@@3HA			; packet_record_data_count
PUBLIC	?delta_time@@3MA				; delta_time
PUBLIC	?last_time@@3MA					; last_time
PUBLIC	?network_frame_time@@3MA			; network_frame_time
PUBLIC	?network_frame_rate@@3MA			; network_frame_rate
PUBLIC	?instant_packet_size_received@@3MA		; instant_packet_size_received
PUBLIC	?max_packet_size_sent@@3MA			; max_packet_size_sent
PUBLIC	?max_packet_size_received@@3MA			; max_packet_size_received
PUBLIC	?max_processed_size@@3MA			; max_processed_size
PUBLIC	??_C@_0BD@MNJLBAF@COMMS_MODEL_SERVER@		; `string'
PUBLIC	??_C@_0BD@EDJLGKIG@COMMS_MODEL_CLIENT@		; `string'
PUBLIC	??_C@_0BG@JILPDJNI@NUM_COMMS_MODEL_TYPES@	; `string'
PUBLIC	??_C@_0BD@HIOADFAH@SEND_TYPE_PERSONAL@		; `string'
PUBLIC	??_C@_0BA@LKLBNJGF@SEND_TYPE_GROUP@		; `string'
PUBLIC	??_C@_0P@GBEBFNBA@NUM_SEND_TYPES@		; `string'
_BSS	SEGMENT
?comms_model_string@@3PBDB DD 01H DUP (?)		; comms_model_string
?system_comms_model@@3W4COMMS_MODEL_TYPES@@A DD 01H DUP (?) ; system_comms_model
?system_comms_data_flow@@3W4COMMS_DATA_FLOW_TYPES@@A DD 01H DUP (?) ; system_comms_data_flow
?system_server_id@@3KA DD 01H DUP (?)			; system_server_id
?send_group_frame_id@@3HA DD 01H DUP (?)		; send_group_frame_id
?resend_packet_list_counter@@3HA DD 01H DUP (?)		; resend_packet_list_counter
?group_packet_list_counter@@3HA DD 01H DUP (?)		; group_packet_list_counter
?personal_packet_list_counter@@3HA DD 01H DUP (?)	; personal_packet_list_counter
?rerequest_packet_list@@3PAUSTUB_PACKET_TYPE@@A DD 01H DUP (?) ; rerequest_packet_list
?resend_packet_list@@3PAUSTUB_PACKET_TYPE@@A DD 01H DUP (?) ; resend_packet_list
?received_group_packets@@3PAUSTUB_PACKET_TYPE@@A DD 01H DUP (?) ; received_group_packets
?received_personal_packets@@3PAUSTUB_PACKET_TYPE@@A DD 01H DUP (?) ; received_personal_packets
?comms_weapon_lag_timing@@3HA DD 01H DUP (?)		; comms_weapon_lag_timing
?comms_weapon_lag_time@@3MA DD 01H DUP (?)		; comms_weapon_lag_time
?av_packet_size_sent@@3MA DD 01H DUP (?)		; av_packet_size_sent
?av_packet_size_received@@3MA DD 01H DUP (?)		; av_packet_size_received
?instant_packet_size_sent@@3MA DD 01H DUP (?)		; instant_packet_size_sent
?packet_record_data_count@@3HA DD 01H DUP (?)		; packet_record_data_count
?delta_time@@3MA DD 01H DUP (?)				; delta_time
?last_time@@3MA DD 01H DUP (?)				; last_time
?network_frame_time@@3MA DD 01H DUP (?)			; network_frame_time
?network_frame_rate@@3MA DD 01H DUP (?)			; network_frame_rate
?instant_packet_size_received@@3MA DD 01H DUP (?)	; instant_packet_size_received
?max_packet_size_sent@@3MA DD 01H DUP (?)		; max_packet_size_sent
?max_packet_size_received@@3MA DD 01H DUP (?)		; max_packet_size_received
?max_processed_size@@3MA DD 01H DUP (?)			; max_processed_size
_BSS	ENDS
;	COMDAT ??_C@_0P@GBEBFNBA@NUM_SEND_TYPES@
CONST	SEGMENT
??_C@_0P@GBEBFNBA@NUM_SEND_TYPES@ DB 'NUM_SEND_TYPES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LKLBNJGF@SEND_TYPE_GROUP@
CONST	SEGMENT
??_C@_0BA@LKLBNJGF@SEND_TYPE_GROUP@ DB 'SEND_TYPE_GROUP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HIOADFAH@SEND_TYPE_PERSONAL@
CONST	SEGMENT
??_C@_0BD@HIOADFAH@SEND_TYPE_PERSONAL@ DB 'SEND_TYPE_PERSONAL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JILPDJNI@NUM_COMMS_MODEL_TYPES@
CONST	SEGMENT
??_C@_0BG@JILPDJNI@NUM_COMMS_MODEL_TYPES@ DB 'NUM_COMMS_MODEL_TYPES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EDJLGKIG@COMMS_MODEL_CLIENT@
CONST	SEGMENT
??_C@_0BD@EDJLGKIG@COMMS_MODEL_CLIENT@ DB 'COMMS_MODEL_CLIENT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MNJLBAF@COMMS_MODEL_SERVER@
CONST	SEGMENT
??_C@_0BD@MNJLBAF@COMMS_MODEL_SERVER@ DB 'COMMS_MODEL_SERVER', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?comms_model_names@@3PAPBDA DD FLAT:??_C@_0BD@MNJLBAF@COMMS_MODEL_SERVER@ ; comms_model_names
	DD	FLAT:??_C@_0BD@EDJLGKIG@COMMS_MODEL_CLIENT@
	DD	FLAT:??_C@_0BG@JILPDJNI@NUM_COMMS_MODEL_TYPES@
?send_type_names@@3PAPBDA DD FLAT:??_C@_0BD@HIOADFAH@SEND_TYPE_PERSONAL@ ; send_type_names
	DD	FLAT:??_C@_0BA@LKLBNJGF@SEND_TYPE_GROUP@
	DD	FLAT:??_C@_0P@GBEBFNBA@NUM_SEND_TYPES@
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	?set_comms_data_flow@@YGXW4COMMS_DATA_FLOW_TYPES@@@Z ; set_comms_data_flow
PUBLIC	?set_comms_model@@YGXW4COMMS_MODEL_TYPES@@@Z	; set_comms_model
PUBLIC	?initialise_comms@@YGXXZ			; initialise_comms
PUBLIC	?reset_comms_data@@YGXXZ			; reset_comms_data
PUBLIC	?initialise_comms_debug@@YGXXZ			; initialise_comms_debug
PUBLIC	?deinitialise_comms@@YGXXZ			; deinitialise_comms
PUBLIC	?send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z ; send_packet
PUBLIC	?receive_packets@@YGXXZ				; receive_packets
PUBLIC	?process_packet_list@@YGHW4SEND_TYPES@@PAUCONNECTION_LIST_TYPE@@PAKPAPAEPAH@Z ; process_packet_list
PUBLIC	?get_packet_destination@@YGKXZ			; get_packet_destination
PUBLIC	?resend_packet@@YGPAUSTUB_PACKET_TYPE@@KHHW4SEND_TYPES@@@Z ; resend_packet
PUBLIC	?free_connection_packets@@YGXK@Z		; free_connection_packets
PUBLIC	?remove_stub_packet_from_list@@YGXPAPAUSTUB_PACKET_TYPE@@PAU1@@Z ; remove_stub_packet_from_list
PUBLIC	?update_resend_packet_list@@YGXH@Z		; update_resend_packet_list
PUBLIC	?debug_comms_stats@@YGXXZ			; debug_comms_stats
PUBLIC	?reset_comms_stats@@YGXXZ			; reset_comms_stats
PUBLIC	?reset_receive_packet_list_time_stamps@@YGXXZ	; reset_receive_packet_list_time_stamps
PUBLIC	?display_comms_stats@@YGXXZ			; display_comms_stats
PUBLIC	??$max@H@std@@YGABHABH0@Z			; std::max<int>
PUBLIC	??$min@H@std@@YGABHABH0@Z			; std::min<int>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0BJ@KGGCIBGM@packets?5size?7?7?7?7?7?7?7?7?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_0BI@NOAIOGID@packets?5sent?7?7?7?7?7?7?7?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_0CG@BAPAEELK@packets?5send?5size?5?$CIinstant?$CJ?7?7?7?$DN@ ; `string'
PUBLIC	??_C@_0CC@FEAJPCAG@packets?5send?5size?5?$CIav?$CJ?7?7?7?7?$DN?5?$CF?40@ ; `string'
PUBLIC	??_C@_0CD@BJFLEPCB@packets?5send?5size?5?$CImax?$CJ?7?7?7?7?$DN?5?$CF?4@ ; `string'
PUBLIC	??_C@_0BL@DFAEHFKA@packets?5received?7?7?7?7?7?7?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_0CK@LOHHIMMO@packets?5received?5size?5?$CIinstant?$CJ@ ; `string'
PUBLIC	??_C@_0CF@DKDDMDMA@packets?5received?5size?5?$CIav?$CJ?7?7?7?$DN?5@ ; `string'
PUBLIC	??_C@_0CG@JAKODKFC@packets?5received?5size?5?$CImax?$CJ?7?7?7?$DN@ ; `string'
PUBLIC	??_C@_0BP@IJDMGNAG@packets?5record?5count?7?5?7?7?7?7?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_0CB@KEIDDLMH@processed?5size?5?$CImax?$CJ?7?7?7?7?7?$DN?5?$CF?402@ ; `string'
PUBLIC	??_C@_0BN@EIMBBJM@re?9request?5counter?7?7?7?7?7?7?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_0BO@KGFLFFAF@resend?5packet?5counter?7?7?7?7?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_0CC@DHCLBFCA@group?5packet?5list?5counter?7?7?7?7?$DN?5@ ; `string'
PUBLIC	??_C@_0CE@HKJFLHFM@personal?5packet?5list?5counter?7?7?7@ ; `string'
PUBLIC	??_C@_0CC@BNDLLAK@resend?5packet?5list?5counter?7?7?7?$DN?5@ ; `string'
PUBLIC	??_C@_0CA@JMGMNIFK@packet?5resend?5timer?7?7?7?7?7?$DN?5?$CF?402f@ ; `string'
PUBLIC	??_C@_0BP@LBMKBECH@Max?5Network?5frame?5time?7?7?7?7?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_0BP@PFNPKGAL@Network?5frame?5time?7?7?7?7?7?$DN?5?$CF?402f@ ; `string'
PUBLIC	??_C@_0BP@BDOIAGGM@Network?5frame?5rate?7?7?7?7?7?$DN?5?$CF?402f@ ; `string'
PUBLIC	??_C@_0CA@DGJECGAC@Group?5packet?5list?5size?7?7?7?7?7?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_0CC@LFKIIDCL@Personal?5packet?5list?5size?7?7?7?7?$DN?5@ ; `string'
PUBLIC	??_C@_0CA@IBNJPKCL@Resend?5packet?5list?5size?7?7?7?7?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_0CC@DACCJLGD@Rerequest?5packet?5list?5size?7?7?7?$DN?5@ ; `string'
PUBLIC	??_C@_0BL@OMGCFHAC@Data?5Record?5size?7?7?7?7?7?7?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_0BK@ILCCAICJ@Connection?5size?7?7?7?7?7?7?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_0BL@OPLKKDKJ@Total?5Data?5size?7?7?7?7?7?7?7?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_0EF@FNJBANLP@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@ ; `string'
PUBLIC	??_C@_0N@JJIHLFND@COMMS?5STATS?3@		; `string'
PUBLIC	??_C@_0BI@INHCIDEP@packets?5size?7?7?7?7?7?7?7?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_0CF@PIPAGLNL@packets?5received?5size?5?$CImax?$CJ?7?7?$DN?5@ ; `string'
PUBLIC	??_C@_0BM@EJDABGM@re?9request?5counter?7?7?7?7?7?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_0CB@KAIKFIAB@group?5packet?5list?5counter?7?7?7?$DN?5?$CF@ ; `string'
PUBLIC	??_C@_0CD@KMEJHMGB@personal?5packet?5list?5counter?7?7?$DN@ ; `string'
PUBLIC	??_C@_0BP@MEMIHMEA@Group?5packet?5list?5size?7?7?7?7?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_0CB@CLOIJCFH@Personal?5packet?5list?5size?7?7?7?$DN?5?$CF@ ; `string'
PUBLIC	??_C@_0BK@DMBHALKJ@Total?5Data?5size?7?7?7?7?7?7?$DN?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?0??send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z@4JA ; `send_packet'::`1'::__LINE__Var
PUBLIC	??_C@_0DK@BBIMMIBL@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0BA@DGFCJMGN@new_packet_data@		; `string'
PUBLIC	??_C@_0BC@PODNONFH@ASSERT?5?$CFs?5?$CI?$CFs?3?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0BF@CHNNFJBB@DirectPlay?5error?3?5?$CFd@	; `string'
PUBLIC	??_C@_0M@GPMMIJAD@stub_packet@			; `string'
PUBLIC	??_C@_0EI@LGDGBCEP@COMMS?3?5?5?5?5data?5check_sum?5failed@ ; `string'
PUBLIC	?__LINE__Var@?0??process_packet_list@@YGHW4SEND_TYPES@@PAUCONNECTION_LIST_TYPE@@PAKPAPAEPAH@Z@4JA ; `process_packet_list'::`1'::__LINE__Var
PUBLIC	??_C@_0M@DJJBABNE@this_packet@			; `string'
PUBLIC	??_C@_0CG@JDALEAHI@connection?9?$DOconnection_receive_@ ; `string'
PUBLIC	??_C@_0EG@DOCFECCC@COMMS?3?5rerequest?5for?5frame?5?$CFd?5p@ ; `string'
PUBLIC	??_C@_0EM@HEGOOPKE@WARNING?3?5PACKET?5BEING?5RE?9REQUES@ ; `string'
PUBLIC	??_C@_0EF@LLJOECEO@WARNING?3?5PACKET?5BEING?5RESENT?5TO@ ; `string'
PUBLIC	??_C@_0DA@LKHHHLKE@COMMS?3?5No?5packet?5to?5resend?0?5REJ@ ; `string'
PUBLIC	?__LINE__Var@?0??add_stub_packet_to_list@@YGXPAPAUSTUB_PACKET_TYPE@@PAU2@@Z@4JA ; `add_stub_packet_to_list'::`1'::__LINE__Var
PUBLIC	??_C@_06HKKJOEPD@packet@			; `string'
PUBLIC	??_C@_0M@BCJGBAIB@Comms?5Info?3@		; `string'
PUBLIC	??_C@_0BC@JJADIJAM@packets?5sent?5?$DN?5?$CFd@	; `string'
PUBLIC	??_C@_0BP@OPBAPIHL@packets?5send?5size?5?$CIav?$CJ?5?$DN?5?$CF?402f@ ; `string'
PUBLIC	??_C@_0CA@MPCCNJHH@packets?5send?5size?5?$CImax?$CJ?5?$DN?5?$CF?402f@ ; `string'
PUBLIC	??_C@_0BG@IFCAKOCI@packets?5received?5?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_0CD@DCFEMIPK@packets?5received?5size?5?$CIav?$CJ?5?$DN?5?$CF?4@ ; `string'
PUBLIC	??_C@_0CE@FFEACOPB@packets?5received?5size?5?$CImax?$CJ?5?$DN?5?$CF@ ; `string'
PUBLIC	??_C@_0BN@DJFBNPFD@DirectPlay?5packet?5queue?5?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_0BE@JGBGIKNI@Throttle?5limit?5?$DN?5?$CFd@ ; `string'
PUBLIC	??_C@_0BM@FHMIMAEC@Weapon?5lag?5time?5?$DN?5Timing?4?4?4@ ; `string'
PUBLIC	??_C@_0BI@NDFPHDMC@Weapon?5lag?5time?5?$DN?5?$CF0?42f@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@447a0000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?debug_watch@@YGXPBDW4mt_type@@PAX@Z:PROC	; debug_watch
EXTRN	?debug_colour_watch@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX@Z:PROC ; debug_colour_watch
EXTRN	?get_system_time@@YGIXZ:PROC			; get_system_time
EXTRN	?malloc_fast_memory@@YGPAXI@Z:PROC		; malloc_fast_memory
EXTRN	?malloc_heap_memory@@YGPAXI@Z:PROC		; malloc_heap_memory
EXTRN	?free_mem@@YGXPAX@Z:PROC			; free_mem
EXTRN	?direct_play_send_data@@YGHKPAXH@Z:PROC		; direct_play_send_data
EXTRN	?direct_play_receive_data@@YGHPAXH@Z:PROC	; direct_play_receive_data
EXTRN	?direct_play_get_player_id@@YGHXZ:PROC		; direct_play_get_player_id
EXTRN	?direct_play_get_send_queue_number_of_packets@@YGHXZ:PROC ; direct_play_get_send_queue_number_of_packets
EXTRN	?ui_display_text@@YGMPBDMM@Z:PROC		; ui_display_text
EXTRN	?set_ui_font_type@@YGXW4FONT_TYPES@@@Z:PROC	; set_ui_font_type
EXTRN	?set_ui_font_colour@@YGXUREAL_COLOUR@@@Z:PROC	; set_ui_font_colour
EXTRN	?begin_3d_scene@@YGHXZ:PROC			; begin_3d_scene
EXTRN	?end_3d_scene@@YGXXZ:PROC			; end_3d_scene
EXTRN	?comms_clear_data_record@@YGXXZ:PROC		; comms_clear_data_record
EXTRN	?register_connection@@YGPAUCONNECTION_LIST_TYPE@@K@Z:PROC ; register_connection
EXTRN	?get_connection_list_head@@YGPAUCONNECTION_LIST_TYPE@@XZ:PROC ; get_connection_list_head
EXTRN	?get_connection_list_item@@YGPAUCONNECTION_LIST_TYPE@@K@Z:PROC ; get_connection_list_item
EXTRN	?set_full_screen_viewport@@YGXXZ:PROC		; set_full_screen_viewport
EXTRN	?update_gunships_screen_progress_indicator@@YGXXZ:PROC ; update_gunships_screen_progress_indicator
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?sys_col_amber@@3UREAL_COLOUR@@A:DWORD		; sys_col_amber
EXTRN	?direct_play_comms_mode@@3W4DIRECT_PLAY_COMMS_MODE_TYPES@@A:DWORD ; direct_play_comms_mode
EXTRN	?current_font@@3PAUUI_FONT_TYPE@@A:DWORD	; current_font
EXTRN	?command_line_comms_show_stats@@3HA:DWORD	; command_line_comms_show_stats
EXTRN	?command_line_comms_packet_throttle_limit@@3HA:DWORD ; command_line_comms_packet_throttle_limit
EXTRN	?command_line_comms_packet_data_size@@3HA:DWORD	; command_line_comms_packet_data_size
EXTRN	?command_line_comms_data_record_size@@3HA:DWORD	; command_line_comms_data_record_size
EXTRN	?command_line_comms_timeout@@3HA:DWORD		; command_line_comms_timeout
EXTRN	?command_line_comms_guaranteed_send@@3HA:DWORD	; command_line_comms_guaranteed_send
EXTRN	?command_line_max_game_update_rate@@3HA:DWORD	; command_line_max_game_update_rate
EXTRN	?command_line_comms_packet_resend_timer@@3MA:DWORD ; command_line_comms_packet_resend_timer
EXTRN	?command_line_comms_resend_timeout@@3MA:DWORD	; command_line_comms_resend_timeout
EXTRN	?entities@@3PAUENTITY@@A:DWORD			; entities
EXTRN	?gunship_entity@@3PAUENTITY@@A:DWORD		; gunship_entity
EXTRN	?gunship_screen_progress_message@@3HA:DWORD	; gunship_screen_progress_message
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?new_receive_packet@@3PAUPACKET_HEADER_TYPE@@A DD 01H DUP (?) ; new_receive_packet
?new_receive_packet_data@@3PAEA DD 01H DUP (?)		; new_receive_packet_data
?rerequest_packet_counter@@3HA DD 01H DUP (?)		; rerequest_packet_counter
?resend_packet_counter@@3HA DD 01H DUP (?)		; resend_packet_counter
?total_data_size@@3HA DD 01H DUP (?)			; total_data_size
?total_connection_size@@3HA DD 01H DUP (?)		; total_connection_size
?received_group_list_size@@3HA DD 01H DUP (?)		; received_group_list_size
?received_personal_list_size@@3HA DD 01H DUP (?)	; received_personal_list_size
?resend_list_size@@3HA DD 01H DUP (?)			; resend_list_size
?rerequest_list_size@@3HA DD 01H DUP (?)		; rerequest_list_size
?num_packets_received@@3HA DD 01H DUP (?)		; num_packets_received
?num_packets_sent@@3HA DD 01H DUP (?)			; num_packets_sent
?new_packet@?1??send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z@4PAUPACKET_HEADER_TYPE@@A DD 01H DUP (?) ; `send_packet'::`2'::new_packet
?new_packet_data@?1??send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z@4PAEA DD 01H DUP (?) ; `send_packet'::`2'::new_packet_data
?checklist@?1??count_packets_for_frame@@YGHPAUSTUB_PACKET_TYPE@@HH@Z@4PADA DB 01fa0H DUP (?) ; `count_packets_for_frame'::`2'::checklist
_BSS	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NDFPHDMC@Weapon?5lag?5time?5?$DN?5?$CF0?42f@
CONST	SEGMENT
??_C@_0BI@NDFPHDMC@Weapon?5lag?5time?5?$DN?5?$CF0?42f@ DB 'Weapon lag tim'
	DB	'e = %0.2f', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FHMIMAEC@Weapon?5lag?5time?5?$DN?5Timing?4?4?4@
CONST	SEGMENT
??_C@_0BM@FHMIMAEC@Weapon?5lag?5time?5?$DN?5Timing?4?4?4@ DB 'Weapon lag '
	DB	'time = Timing...', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JGBGIKNI@Throttle?5limit?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BE@JGBGIKNI@Throttle?5limit?5?$DN?5?$CFd@ DB 'Throttle limit = %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DJFBNPFD@DirectPlay?5packet?5queue?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BN@DJFBNPFD@DirectPlay?5packet?5queue?5?$DN?5?$CFd@ DB 'DirectPlay'
	DB	' packet queue = %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FFEACOPB@packets?5received?5size?5?$CImax?$CJ?5?$DN?5?$CF@
CONST	SEGMENT
??_C@_0CE@FFEACOPB@packets?5received?5size?5?$CImax?$CJ?5?$DN?5?$CF@ DB 'p'
	DB	'ackets received size (max) = %.02f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@DCFEMIPK@packets?5received?5size?5?$CIav?$CJ?5?$DN?5?$CF?4@
CONST	SEGMENT
??_C@_0CD@DCFEMIPK@packets?5received?5size?5?$CIav?$CJ?5?$DN?5?$CF?4@ DB 'p'
	DB	'ackets received size (av) = %.02f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IFCAKOCI@packets?5received?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BG@IFCAKOCI@packets?5received?5?$DN?5?$CFd@ DB 'packets received ='
	DB	' %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MPCCNJHH@packets?5send?5size?5?$CImax?$CJ?5?$DN?5?$CF?402f@
CONST	SEGMENT
??_C@_0CA@MPCCNJHH@packets?5send?5size?5?$CImax?$CJ?5?$DN?5?$CF?402f@ DB 'p'
	DB	'ackets send size (max) = %.02f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OPBAPIHL@packets?5send?5size?5?$CIav?$CJ?5?$DN?5?$CF?402f@
CONST	SEGMENT
??_C@_0BP@OPBAPIHL@packets?5send?5size?5?$CIav?$CJ?5?$DN?5?$CF?402f@ DB 'p'
	DB	'ackets send size (av) = %.02f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JJADIJAM@packets?5sent?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BC@JJADIJAM@packets?5sent?5?$DN?5?$CFd@ DB 'packets sent = %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BCJGBAIB@Comms?5Info?3@
CONST	SEGMENT
??_C@_0M@BCJGBAIB@Comms?5Info?3@ DB 'Comms Info:', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HKKJOEPD@packet@
CONST	SEGMENT
??_C@_06HKKJOEPD@packet@ DB 'packet', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??add_stub_packet_to_list@@YGXPAPAUSTUB_PACKET_TYPE@@PAU2@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??add_stub_packet_to_list@@YGXPAPAUSTUB_PACKET_TYPE@@PAU2@@Z@4JA DD 0718H ; `add_stub_packet_to_list'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DA@LKHHHLKE@COMMS?3?5No?5packet?5to?5resend?0?5REJ@
CONST	SEGMENT
??_C@_0DA@LKHHHLKE@COMMS?3?5No?5packet?5to?5resend?0?5REJ@ DB 'COMMS: No '
	DB	'packet to resend, REJECTING player %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@LLJOECEO@WARNING?3?5PACKET?5BEING?5RESENT?5TO@
CONST	SEGMENT
??_C@_0EF@LLJOECEO@WARNING?3?5PACKET?5BEING?5RESENT?5TO@ DB 'WARNING: PAC'
	DB	'KET BEING RESENT TO PLAYER %d FOR %s FRAME %d, PACKET %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@HEGOOPKE@WARNING?3?5PACKET?5BEING?5RE?9REQUES@
CONST	SEGMENT
??_C@_0EM@HEGOOPKE@WARNING?3?5PACKET?5BEING?5RE?9REQUES@ DB 'WARNING: PAC'
	DB	'KET BEING RE-REQUESTED FROM PLAYER %d FOR %s FRAME %d PACKET '
	DB	'%d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@DOCFECCC@COMMS?3?5rerequest?5for?5frame?5?$CFd?5p@
CONST	SEGMENT
??_C@_0EG@DOCFECCC@COMMS?3?5rerequest?5for?5frame?5?$CFd?5p@ DB 'COMMS: r'
	DB	'erequest for frame %d packet %d must be lost, re-rerequesting'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@JDALEAHI@connection?9?$DOconnection_receive_@
CONST	SEGMENT
??_C@_0CG@JDALEAHI@connection?9?$DOconnection_receive_@ DB 'connection->c'
	DB	'onnection_receive_buffer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DJJBABNE@this_packet@
CONST	SEGMENT
??_C@_0M@DJJBABNE@this_packet@ DB 'this_packet', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??process_packet_list@@YGHW4SEND_TYPES@@PAUCONNECTION_LIST_TYPE@@PAKPAPAEPAH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??process_packet_list@@YGHW4SEND_TYPES@@PAUCONNECTION_LIST_TYPE@@PAKPAPAEPAH@Z@4JA DD 03faH ; `process_packet_list'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EI@LGDGBCEP@COMMS?3?5?5?5?5data?5check_sum?5failed@
CONST	SEGMENT
??_C@_0EI@LGDGBCEP@COMMS?3?5?5?5?5data?5check_sum?5failed@ DB 'COMMS:    '
	DB	'data check_sum failed receiver %d, calculated %d, datasize %d'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GPMMIJAD@stub_packet@
CONST	SEGMENT
??_C@_0M@GPMMIJAD@stub_packet@ DB 'stub_packet', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CHNNFJBB@DirectPlay?5error?3?5?$CFd@
CONST	SEGMENT
??_C@_0BF@CHNNFJBB@DirectPlay?5error?3?5?$CFd@ DB 'DirectPlay error: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PODNONFH@ASSERT?5?$CFs?5?$CI?$CFs?3?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BC@PODNONFH@ASSERT?5?$CFs?5?$CI?$CFs?3?$CFd?$CJ@ DB 'ASSERT %s (%s'
	DB	':%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DGFCJMGN@new_packet_data@
CONST	SEGMENT
??_C@_0BA@DGFCJMGN@new_packet_data@ DB 'new_packet_data', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@BBIMMIBL@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0DK@BBIMMIBL@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\comms\comms.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z@4JA DD 01e7H ; `send_packet'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BK@DMBHALKJ@Total?5Data?5size?7?7?7?7?7?7?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BK@DMBHALKJ@Total?5Data?5size?7?7?7?7?7?7?$DN?5?$CFd@ DB 'Total Da'
	DB	'ta size', 09H, 09H, 09H, 09H, 09H, 09H, '= %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@CLOIJCFH@Personal?5packet?5list?5size?7?7?7?$DN?5?$CF@
CONST	SEGMENT
??_C@_0CB@CLOIJCFH@Personal?5packet?5list?5size?7?7?7?$DN?5?$CF@ DB 'Pers'
	DB	'onal packet list size', 09H, 09H, 09H, '= %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MEMIHMEA@Group?5packet?5list?5size?7?7?7?7?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BP@MEMIHMEA@Group?5packet?5list?5size?7?7?7?7?$DN?5?$CFd@ DB 'Grou'
	DB	'p packet list size', 09H, 09H, 09H, 09H, '= %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KMEJHMGB@personal?5packet?5list?5counter?7?7?$DN@
CONST	SEGMENT
??_C@_0CD@KMEJHMGB@personal?5packet?5list?5counter?7?7?$DN@ DB 'personal '
	DB	'packet list counter', 09H, 09H, '= %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KAIKFIAB@group?5packet?5list?5counter?7?7?7?$DN?5?$CF@
CONST	SEGMENT
??_C@_0CB@KAIKFIAB@group?5packet?5list?5counter?7?7?7?$DN?5?$CF@ DB 'grou'
	DB	'p packet list counter', 09H, 09H, 09H, '= %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@EJDABGM@re?9request?5counter?7?7?7?7?7?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BM@EJDABGM@re?9request?5counter?7?7?7?7?7?$DN?5?$CFd@ DB 're-reque'
	DB	'st counter', 09H, 09H, 09H, 09H, 09H, '= %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@PIPAGLNL@packets?5received?5size?5?$CImax?$CJ?7?7?$DN?5@
CONST	SEGMENT
??_C@_0CF@PIPAGLNL@packets?5received?5size?5?$CImax?$CJ?7?7?$DN?5@ DB 'pa'
	DB	'ckets received size (max)', 09H, 09H, '= %.02f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@INHCIDEP@packets?5size?7?7?7?7?7?7?7?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BI@INHCIDEP@packets?5size?7?7?7?7?7?7?7?$DN?5?$CFd@ DB 'packets si'
	DB	'ze', 09H, 09H, 09H, 09H, 09H, 09H, 09H, '= %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JJIHLFND@COMMS?5STATS?3@
CONST	SEGMENT
??_C@_0N@JJIHLFND@COMMS?5STATS?3@ DB 'COMMS STATS:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@FNJBANLP@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
CONST	SEGMENT
??_C@_0EF@FNJBANLP@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@ DB '*'
	DB	'*************************************************************'
	DB	'******', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OPLKKDKJ@Total?5Data?5size?7?7?7?7?7?7?7?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BL@OPLKKDKJ@Total?5Data?5size?7?7?7?7?7?7?7?$DN?5?$CFd@ DB 'Total '
	DB	'Data size', 09H, 09H, 09H, 09H, 09H, 09H, 09H, '= %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@ILCCAICJ@Connection?5size?7?7?7?7?7?7?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BK@ILCCAICJ@Connection?5size?7?7?7?7?7?7?$DN?5?$CFd@ DB 'Connectio'
	DB	'n size', 09H, 09H, 09H, 09H, 09H, 09H, '= %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OMGCFHAC@Data?5Record?5size?7?7?7?7?7?7?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BL@OMGCFHAC@Data?5Record?5size?7?7?7?7?7?7?$DN?5?$CFd@ DB 'Data Re'
	DB	'cord size', 09H, 09H, 09H, 09H, 09H, 09H, '= %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@DACCJLGD@Rerequest?5packet?5list?5size?7?7?7?$DN?5@
CONST	SEGMENT
??_C@_0CC@DACCJLGD@Rerequest?5packet?5list?5size?7?7?7?$DN?5@ DB 'Rereque'
	DB	'st packet list size', 09H, 09H, 09H, '= %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IBNJPKCL@Resend?5packet?5list?5size?7?7?7?7?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0CA@IBNJPKCL@Resend?5packet?5list?5size?7?7?7?7?$DN?5?$CFd@ DB 'Res'
	DB	'end packet list size', 09H, 09H, 09H, 09H, '= %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@LFKIIDCL@Personal?5packet?5list?5size?7?7?7?7?$DN?5@
CONST	SEGMENT
??_C@_0CC@LFKIIDCL@Personal?5packet?5list?5size?7?7?7?7?$DN?5@ DB 'Person'
	DB	'al packet list size', 09H, 09H, 09H, 09H, '= %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DGJECGAC@Group?5packet?5list?5size?7?7?7?7?7?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0CA@DGJECGAC@Group?5packet?5list?5size?7?7?7?7?7?$DN?5?$CFd@ DB 'Gr'
	DB	'oup packet list size', 09H, 09H, 09H, 09H, 09H, '= %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BDOIAGGM@Network?5frame?5rate?7?7?7?7?7?$DN?5?$CF?402f@
CONST	SEGMENT
??_C@_0BP@BDOIAGGM@Network?5frame?5rate?7?7?7?7?7?$DN?5?$CF?402f@ DB 'Net'
	DB	'work frame rate', 09H, 09H, 09H, 09H, 09H, '= %.02f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PFNPKGAL@Network?5frame?5time?7?7?7?7?7?$DN?5?$CF?402f@
CONST	SEGMENT
??_C@_0BP@PFNPKGAL@Network?5frame?5time?7?7?7?7?7?$DN?5?$CF?402f@ DB 'Net'
	DB	'work frame time', 09H, 09H, 09H, 09H, 09H, '= %.02f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@LBMKBECH@Max?5Network?5frame?5time?7?7?7?7?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BP@LBMKBECH@Max?5Network?5frame?5time?7?7?7?7?$DN?5?$CFd@ DB 'Max '
	DB	'Network frame time', 09H, 09H, 09H, 09H, '= %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JMGMNIFK@packet?5resend?5timer?7?7?7?7?7?$DN?5?$CF?402f@
CONST	SEGMENT
??_C@_0CA@JMGMNIFK@packet?5resend?5timer?7?7?7?7?7?$DN?5?$CF?402f@ DB 'pa'
	DB	'cket resend timer', 09H, 09H, 09H, 09H, 09H, '= %.02f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BNDLLAK@resend?5packet?5list?5counter?7?7?7?$DN?5@
CONST	SEGMENT
??_C@_0CC@BNDLLAK@resend?5packet?5list?5counter?7?7?7?$DN?5@ DB 'resend p'
	DB	'acket list counter', 09H, 09H, 09H, '= %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@HKJFLHFM@personal?5packet?5list?5counter?7?7?7@
CONST	SEGMENT
??_C@_0CE@HKJFLHFM@personal?5packet?5list?5counter?7?7?7@ DB 'personal pa'
	DB	'cket list counter', 09H, 09H, 09H, '= %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@DHCLBFCA@group?5packet?5list?5counter?7?7?7?7?$DN?5@
CONST	SEGMENT
??_C@_0CC@DHCLBFCA@group?5packet?5list?5counter?7?7?7?7?$DN?5@ DB 'group '
	DB	'packet list counter', 09H, 09H, 09H, 09H, '= %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@KGFLFFAF@resend?5packet?5counter?7?7?7?7?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BO@KGFLFFAF@resend?5packet?5counter?7?7?7?7?$DN?5?$CFd@ DB 'resend'
	DB	' packet counter', 09H, 09H, 09H, 09H, '= %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EIMBBJM@re?9request?5counter?7?7?7?7?7?7?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BN@EIMBBJM@re?9request?5counter?7?7?7?7?7?7?$DN?5?$CFd@ DB 're-req'
	DB	'uest counter', 09H, 09H, 09H, 09H, 09H, 09H, '= %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KEIDDLMH@processed?5size?5?$CImax?$CJ?7?7?7?7?7?$DN?5?$CF?402@
CONST	SEGMENT
??_C@_0CB@KEIDDLMH@processed?5size?5?$CImax?$CJ?7?7?7?7?7?$DN?5?$CF?402@ DB 'p'
	DB	'rocessed size (max)', 09H, 09H, 09H, 09H, 09H, '= %.02f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@IJDMGNAG@packets?5record?5count?7?5?7?7?7?7?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BP@IJDMGNAG@packets?5record?5count?7?5?7?7?7?7?$DN?5?$CFd@ DB 'pac'
	DB	'kets record count', 09H, ' ', 09H, 09H, 09H, 09H, '= %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@JAKODKFC@packets?5received?5size?5?$CImax?$CJ?7?7?7?$DN@
CONST	SEGMENT
??_C@_0CG@JAKODKFC@packets?5received?5size?5?$CImax?$CJ?7?7?7?$DN@ DB 'pa'
	DB	'ckets received size (max)', 09H, 09H, 09H, '= %.02f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DKDDMDMA@packets?5received?5size?5?$CIav?$CJ?7?7?7?$DN?5@
CONST	SEGMENT
??_C@_0CF@DKDDMDMA@packets?5received?5size?5?$CIav?$CJ?7?7?7?$DN?5@ DB 'p'
	DB	'ackets received size (av)', 09H, 09H, 09H, '= %.02f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@LOHHIMMO@packets?5received?5size?5?$CIinstant?$CJ@
CONST	SEGMENT
??_C@_0CK@LOHHIMMO@packets?5received?5size?5?$CIinstant?$CJ@ DB 'packets '
	DB	'received size (instant) ', 09H, 09H, '= %.02f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DFAEHFKA@packets?5received?7?7?7?7?7?7?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BL@DFAEHFKA@packets?5received?7?7?7?7?7?7?$DN?5?$CFd@ DB 'packets '
	DB	'received', 09H, 09H, 09H, 09H, 09H, 09H, '= %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@BJFLEPCB@packets?5send?5size?5?$CImax?$CJ?7?7?7?7?$DN?5?$CF?4@
CONST	SEGMENT
??_C@_0CD@BJFLEPCB@packets?5send?5size?5?$CImax?$CJ?7?7?7?7?$DN?5?$CF?4@ DB 'p'
	DB	'ackets send size (max)', 09H, 09H, 09H, 09H, '= %.02f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FEAJPCAG@packets?5send?5size?5?$CIav?$CJ?7?7?7?7?$DN?5?$CF?40@
CONST	SEGMENT
??_C@_0CC@FEAJPCAG@packets?5send?5size?5?$CIav?$CJ?7?7?7?7?$DN?5?$CF?40@ DB 'p'
	DB	'ackets send size (av)', 09H, 09H, 09H, 09H, '= %.02f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@BAPAEELK@packets?5send?5size?5?$CIinstant?$CJ?7?7?7?$DN@
CONST	SEGMENT
??_C@_0CG@BAPAEELK@packets?5send?5size?5?$CIinstant?$CJ?7?7?7?$DN@ DB 'pa'
	DB	'ckets send size (instant)', 09H, 09H, 09H, '= %.02f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NOAIOGID@packets?5sent?7?7?7?7?7?7?7?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BI@NOAIOGID@packets?5sent?7?7?7?7?7?7?7?$DN?5?$CFd@ DB 'packets se'
	DB	'nt', 09H, 09H, 09H, 09H, 09H, 09H, 09H, '= %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KGGCIBGM@packets?5size?7?7?7?7?7?7?7?7?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BJ@KGGCIBGM@packets?5size?7?7?7?7?7?7?7?7?$DN?5?$CFd@ DB 'packets '
	DB	'size', 09H, 09H, 09H, 09H, 09H, 09H, 09H, 09H, '= %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@H@std@@YGABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@H@std@@YGABHABH0@Z PROC				; std::min<int>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	7d 61		 jge	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00015	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001f	7c 02		 jl	 SHORT $LN7@min
  00021	eb 4a		 jmp	 SHORT $LN2@min
$LN7@min:
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002d	6a 00		 push	 0
  0002f	68 36 15 00 00	 push	 5430			; 00001536H
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00039	6a 02		 push	 2
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 01		 jne	 SHORT $LN12@min
  00049	cc		 int	 3
$LN12@min:
  0004a	6a 00		 push	 0
  0004c	68 36 15 00 00	 push	 5430			; 00001536H
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00066	83 c4 14	 add	 esp, 20			; 00000014H
  00069	33 c0		 xor	 eax, eax
  0006b	75 b6		 jne	 SHORT $LN7@min
$LN2@min:
  0006d	33 c0		 xor	 eax, eax
  0006f	75 a4		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00071	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00074	eb 03		 jmp	 SHORT $LN11@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  00076	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN11@min:

; 5435 : 	}

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
??$min@H@std@@YGABHABH0@Z ENDP				; std::min<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@H@std@@YGABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@H@std@@YGABHABH0@Z PROC				; std::max<int>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	7d 61		 jge	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00015	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001f	7c 02		 jl	 SHORT $LN7@max
  00021	eb 4a		 jmp	 SHORT $LN2@max
$LN7@max:
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002d	6a 00		 push	 0
  0002f	68 0e 15 00 00	 push	 5390			; 0000150eH
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00039	6a 02		 push	 2
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 01		 jne	 SHORT $LN12@max
  00049	cc		 int	 3
$LN12@max:
  0004a	6a 00		 push	 0
  0004c	68 0e 15 00 00	 push	 5390			; 0000150eH
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00066	83 c4 14	 add	 esp, 20			; 00000014H
  00069	33 c0		 xor	 eax, eax
  0006b	75 b6		 jne	 SHORT $LN7@max
$LN2@max:
  0006d	33 c0		 xor	 eax, eax
  0006f	75 a4		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00071	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00074	eb 03		 jmp	 SHORT $LN11@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  00076	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN11@max:

; 5395 : 	}

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
??$max@H@std@@YGABHABH0@Z ENDP				; std::max<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comms.c
;	COMDAT ?get_comms_checksum@@YGHPAEH@Z
_TEXT	SEGMENT
_checksum$ = -8						; size = 4
_loop$ = -4						; size = 4
_data$ = 8						; size = 4
_send_size$ = 12					; size = 4
?get_comms_checksum@@YGHPAEH@Z PROC			; get_comms_checksum, COMDAT

; 2244 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2245 : 
; 2246 : 	int
; 2247 : 		loop,
; 2248 : 		checksum;
; 2249 : 
; 2250 : 	checksum = 0;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _checksum$[ebp], 0

; 2251 : 
; 2252 : 	if (data)

  00010	83 7d 08 00	 cmp	 DWORD PTR _data$[ebp], 0
  00014	74 2b		 je	 SHORT $LN5@get_comms_

; 2253 : 	{
; 2254 : 
; 2255 : 		for (loop = 0; loop < send_size; loop ++)

  00016	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  0001d	eb 09		 jmp	 SHORT $LN4@get_comms_
$LN2@get_comms_:
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@get_comms_:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  0002b	3b 45 0c	 cmp	 eax, DWORD PTR _send_size$[ebp]
  0002e	7d 11		 jge	 SHORT $LN5@get_comms_

; 2256 : 		{
; 2257 : 
; 2258 : 			checksum += data [loop];

  00030	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00033	03 45 fc	 add	 eax, DWORD PTR _loop$[ebp]
  00036	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00039	03 4d f8	 add	 ecx, DWORD PTR _checksum$[ebp]
  0003c	89 4d f8	 mov	 DWORD PTR _checksum$[ebp], ecx

; 2259 : 		}

  0003f	eb de		 jmp	 SHORT $LN2@get_comms_
$LN5@get_comms_:

; 2260 : 	}
; 2261 : 
; 2262 : 	return checksum;

  00041	8b 45 f8	 mov	 eax, DWORD PTR _checksum$[ebp]

; 2263 : }

  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
?get_comms_checksum@@YGHPAEH@Z ENDP			; get_comms_checksum
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comms.c
;	COMDAT ?count_packets_for_frame@@YGHPAUSTUB_PACKET_TYPE@@HH@Z
_TEXT	SEGMENT
_packet_count$ = -8					; size = 4
_stub_packet$ = -4					; size = 4
_packet_list$ = 8					; size = 4
_player_id$ = 12					; size = 4
_frame_id$ = 16						; size = 4
?count_packets_for_frame@@YGHPAUSTUB_PACKET_TYPE@@HH@Z PROC ; count_packets_for_frame, COMDAT

; 1901 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1902 : 
; 1903 : 	//
; 1904 : 	// get dynamics check list working at some point.
; 1905 : 	//
; 1906 : 
; 1907 :  	#if DYNAMIC_CHECK_LIST
; 1908 : 
; 1909 : 	static char
; 1910 : 		*checklist = NULL;
; 1911 : 
; 1912 : 	static int
; 1913 : 		checklist_size = 0;
; 1914 : 
; 1915 : 	int
; 1916 : 		largest_frame = 0;
; 1917 : 
; 1918 : 	#else
; 1919 : 
; 1920 : 	static char
; 1921 : 		checklist [8096];
; 1922 : 
; 1923 : 	#endif
; 1924 : 
; 1925 : 	stub_packet_type
; 1926 : 		*stub_packet;
; 1927 : 
; 1928 : 	int
; 1929 : 		packet_count = 0;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _packet_count$[ebp], 0

; 1930 : 
; 1931 :  	#if DYNAMIC_CHECK_LIST
; 1932 : 
; 1933 : 	// find largest frame
; 1934 : 
; 1935 : 	stub_packet = packet_list;
; 1936 : 
; 1937 : 	while (stub_packet)
; 1938 : 	{
; 1939 : 
; 1940 : 		if (stub_packet->packet->number_of_packets > largest_frame)
; 1941 : 		{
; 1942 : 
; 1943 : 			largest_frame = stub_packet->packet->number_of_packets;
; 1944 : 		}
; 1945 : 
; 1946 : 		stub_packet = stub_packet->next;
; 1947 : 	}
; 1948 : 
; 1949 : 	// malloc enough memory for largest frame
; 1950 : 
; 1951 : 	if (largest_frame > checklist_size)
; 1952 : 	{
; 1953 : 
; 1954 : 		if (checklist)
; 1955 : 		{
; 1956 : 
; 1957 : 			free_mem (checklist);
; 1958 : 		}
; 1959 : 
; 1960 : 		checklist_size = largest_frame + 1;
; 1961 : 
; 1962 : 		checklist = malloc_heap_mem (sizeof (char) * checklist_size);
; 1963 : 
; 1964 : 		#if DEBUG_MODULE
; 1965 : 
; 1966 : 		debug_log ("COMMS: resizing checklist array to %d", checklist_size);
; 1967 : 
; 1968 : 		#endif
; 1969 : 	}
; 1970 : 
; 1971 : 	memset (checklist, 0, checklist_size);
; 1972 : 
; 1973 : 	#else
; 1974 : 
; 1975 : 	memset (checklist, 0, 8096);

  00010	68 a0 1f 00 00	 push	 8096			; 00001fa0H
  00015	6a 00		 push	 0
  00017	68 00 00 00 00	 push	 OFFSET ?checklist@?1??count_packets_for_frame@@YGHPAUSTUB_PACKET_TYPE@@HH@Z@4PADA
  0001c	e8 00 00 00 00	 call	 _memset
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1976 : 
; 1977 : 	#endif
; 1978 : 
; 1979 : 	stub_packet = packet_list;

  00024	8b 45 08	 mov	 eax, DWORD PTR _packet_list$[ebp]
  00027	89 45 fc	 mov	 DWORD PTR _stub_packet$[ebp], eax
$LN2@count_pack:

; 1980 : 
; 1981 : 	while (stub_packet)

  0002a	83 7d fc 00	 cmp	 DWORD PTR _stub_packet$[ebp], 0
  0002e	74 56		 je	 SHORT $LN3@count_pack

; 1982 : 	{
; 1983 : 
; 1984 : 		#if DYNAMIC_CHECK_LIST
; 1985 : 
; 1986 : 		ASSERT (stub_packet->packet->packet_id < checklist_size);
; 1987 : 
; 1988 : 		#endif
; 1989 : 
; 1990 : 		if (stub_packet->packet->frame_id == frame_id)

  00030	8b 45 fc	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  00033	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00036	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00039	3b 55 10	 cmp	 edx, DWORD PTR _frame_id$[ebp]
  0003c	75 3d		 jne	 SHORT $LN4@count_pack

; 1991 : 		{
; 1992 : 
; 1993 : 			if (stub_packet->packet->player_id == player_id)

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  00041	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00044	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00047	3b 55 0c	 cmp	 edx, DWORD PTR _player_id$[ebp]
  0004a	75 2f		 jne	 SHORT $LN4@count_pack

; 1994 : 			{
; 1995 : 
; 1996 : 				if (!(checklist [stub_packet->packet->packet_id]))

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  0004f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00052	0f bf 51 0e	 movsx	 edx, WORD PTR [ecx+14]
  00056	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR ?checklist@?1??count_packets_for_frame@@YGHPAUSTUB_PACKET_TYPE@@HH@Z@4PADA[edx]
  0005d	85 c0		 test	 eax, eax
  0005f	75 1a		 jne	 SHORT $LN4@count_pack

; 1997 : 				{
; 1998 : 
; 1999 : 					packet_count ++;

  00061	8b 45 f8	 mov	 eax, DWORD PTR _packet_count$[ebp]
  00064	83 c0 01	 add	 eax, 1
  00067	89 45 f8	 mov	 DWORD PTR _packet_count$[ebp], eax

; 2000 : 
; 2001 : 					checklist [stub_packet->packet->packet_id] = TRUE;

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  0006d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00070	0f bf 51 0e	 movsx	 edx, WORD PTR [ecx+14]
  00074	c6 82 00 00 00
	00 01		 mov	 BYTE PTR ?checklist@?1??count_packets_for_frame@@YGHPAUSTUB_PACKET_TYPE@@HH@Z@4PADA[edx], 1
$LN4@count_pack:

; 2002 : 				}
; 2003 : 				else
; 2004 : 				{
; 2005 : 
; 2006 : 					#if DEBUG_MODULE
; 2007 : 
; 2008 : 					debug_log ("COMMS: not counting packet twice %d %d", frame_id, stub_packet->packet->packet_id);
; 2009 : 
; 2010 : 					#endif
; 2011 : 				}
; 2012 : 			}
; 2013 : 		}
; 2014 : 
; 2015 : 		stub_packet = stub_packet->next;

  0007b	8b 45 fc	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  0007e	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00081	89 4d fc	 mov	 DWORD PTR _stub_packet$[ebp], ecx

; 2016 : 	}

  00084	eb a4		 jmp	 SHORT $LN2@count_pack
$LN3@count_pack:

; 2017 : 
; 2018 : 	#if DEBUG_MODULE
; 2019 : 
; 2020 : 	debug_log ("COMMS: received %d packets for frame %d", packet_count, frame_id);
; 2021 : 
; 2022 : 	#endif
; 2023 : 
; 2024 : 	return packet_count;

  00086	8b 45 f8	 mov	 eax, DWORD PTR _packet_count$[ebp]

; 2025 : }

  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c2 0c 00	 ret	 12			; 0000000cH
?count_packets_for_frame@@YGHPAUSTUB_PACKET_TYPE@@HH@Z ENDP ; count_packets_for_frame
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comms.c
;	COMDAT ?add_stub_packet_to_list@@YGXPAPAUSTUB_PACKET_TYPE@@PAU1@@Z
_TEXT	SEGMENT
_list$ = 8						; size = 4
_packet$ = 12						; size = 4
?add_stub_packet_to_list@@YGXPAPAUSTUB_PACKET_TYPE@@PAU1@@Z PROC ; add_stub_packet_to_list, COMDAT

; 1816 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1817 : 
; 1818 : 	ASSERT (packet);

  00009	83 7d 0c 00	 cmp	 DWORD PTR _packet$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@add_stub_p
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??add_stub_packet_to_list@@YGXPAPAUSTUB_PACKET_TYPE@@PAU2@@Z@4JA
  00014	83 c0 02	 add	 eax, 2
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@BBIMMIBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06HKKJOEPD@packet@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@add_stub_p:

; 1819 : 
; 1820 : 	if (*list)

  00027	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	74 0b		 je	 SHORT $LN3@add_stub_p

; 1821 : 	{
; 1822 : 
; 1823 : 		(*list)->prev = packet;

  0002f	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00032	8b 08		 mov	 ecx, DWORD PTR [eax]
  00034	8b 55 0c	 mov	 edx, DWORD PTR _packet$[ebp]
  00037	89 51 18	 mov	 DWORD PTR [ecx+24], edx
$LN3@add_stub_p:

; 1824 : 	}
; 1825 : 
; 1826 : 	packet->next = *list;

  0003a	8b 45 0c	 mov	 eax, DWORD PTR _packet$[ebp]
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _list$[ebp]
  00040	8b 11		 mov	 edx, DWORD PTR [ecx]
  00042	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 1827 : 
; 1828 : 	packet->prev = NULL;

  00045	8b 45 0c	 mov	 eax, DWORD PTR _packet$[ebp]
  00048	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 1829 : 
; 1830 : 	*list = packet;

  0004f	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _packet$[ebp]
  00055	89 08		 mov	 DWORD PTR [eax], ecx

; 1831 : 
; 1832 : 	#if DEBUG_MODULE >= 3
; 1833 : 	{
; 1834 : 
; 1835 : 		stub_packet_type
; 1836 : 			*current_packet;
; 1837 : 
; 1838 : 		int
; 1839 : 			count = 0;
; 1840 : 
; 1841 : 		current_packet = *list;
; 1842 : 
; 1843 : 		while (current_packet)
; 1844 : 		{
; 1845 : 
; 1846 : 			count ++;
; 1847 : 
; 1848 : 			current_packet = current_packet->next;
; 1849 : 		}
; 1850 : 
; 1851 : 		debug_log ("COMMS: Add Stub Packet, count = %d", count);
; 1852 : 
; 1853 : 	}
; 1854 : 	#endif
; 1855 : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 08 00	 ret	 8
?add_stub_packet_to_list@@YGXPAPAUSTUB_PACKET_TYPE@@PAU1@@Z ENDP ; add_stub_packet_to_list
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comms.c
;	COMDAT ?free_stub_packet@@YGXPAUSTUB_PACKET_TYPE@@@Z
_TEXT	SEGMENT
_stub_packet$ = 8					; size = 4
?free_stub_packet@@YGXPAUSTUB_PACKET_TYPE@@@Z PROC	; free_stub_packet, COMDAT

; 1792 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1793 : 
; 1794 : 	#if DEBUG_MODULE >= 3
; 1795 : 
; 1796 : 	debug_log ("COMMS: Free packet");
; 1797 : 
; 1798 : 	#endif
; 1799 : 
; 1800 : 	if (stub_packet->packet)

  00009	8b 45 08	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  0000c	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00010	74 16		 je	 SHORT $LN2@free_stub_

; 1801 : 	{
; 1802 : 
; 1803 : 		free_mem (stub_packet->packet);

  00012	8b 45 08	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  00015	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem

; 1804 : 
; 1805 : 		stub_packet->packet = NULL;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  00021	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
$LN2@free_stub_:

; 1806 : 	}
; 1807 : 
; 1808 : 	free_mem (stub_packet);

  00028	8b 45 08	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem

; 1809 : }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?free_stub_packet@@YGXPAUSTUB_PACKET_TYPE@@@Z ENDP	; free_stub_packet
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comms.c
;	COMDAT ?request_resend_packet@@YGXPAUCONNECTION_LIST_TYPE@@HHHW4SEND_TYPES@@@Z
_TEXT	SEGMENT
tv168 = -96						; size = 8
tv165 = -88						; size = 4
_buffer_ptr$ = -20					; size = 4
_buffer$ = -16						; size = 12
_new_stub_packet$ = -4					; size = 4
_connection$ = 8					; size = 4
_frame_id$ = 12						; size = 4
_packet_id$ = 16					; size = 4
_time_stamp$ = 20					; size = 4
_send_type$ = 24					; size = 4
?request_resend_packet@@YGXPAUCONNECTION_LIST_TYPE@@HHHW4SEND_TYPES@@@Z PROC ; request_resend_packet, COMDAT

; 1498 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1499 : 
; 1500 : 	stub_packet_type
; 1501 : 		*new_stub_packet;
; 1502 : 
; 1503 : 	int
; 1504 : 		buffer [3];
; 1505 : 
; 1506 : 	unsigned char
; 1507 : 		*buffer_ptr;
; 1508 : 
; 1509 : 	//
; 1510 : 	// Add packet to rerequest list
; 1511 : 	//
; 1512 : 
; 1513 : 	new_stub_packet = rerequest_packet_list;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rerequest_packet_list@@3PAUSTUB_PACKET_TYPE@@A ; rerequest_packet_list
  0000e	89 45 fc	 mov	 DWORD PTR _new_stub_packet$[ebp], eax
$LN2@request_re:

; 1514 : 
; 1515 : 	while (new_stub_packet)

  00011	83 7d fc 00	 cmp	 DWORD PTR _new_stub_packet$[ebp], 0
  00015	0f 84 a6 00 00
	00		 je	 $LN3@request_re

; 1516 : 	{
; 1517 : 
; 1518 : 		if ((new_stub_packet->send_type == send_type) &&
; 1519 : 			(new_stub_packet->packet_id == packet_id) &&

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _new_stub_packet$[ebp]
  0001e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00020	3b 4d 18	 cmp	 ecx, DWORD PTR _send_type$[ebp]
  00023	0f 85 8a 00 00
	00		 jne	 $LN4@request_re
  00029	8b 45 fc	 mov	 eax, DWORD PTR _new_stub_packet$[ebp]
  0002c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002f	3b 4d 10	 cmp	 ecx, DWORD PTR _packet_id$[ebp]
  00032	75 7f		 jne	 SHORT $LN4@request_re
  00034	8b 45 fc	 mov	 eax, DWORD PTR _new_stub_packet$[ebp]
  00037	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0003a	3b 4d 0c	 cmp	 ecx, DWORD PTR _frame_id$[ebp]
  0003d	75 74		 jne	 SHORT $LN4@request_re

; 1520 : 			(new_stub_packet->frame_id == frame_id))
; 1521 : 		{
; 1522 : 
; 1523 : 			//
; 1524 : 			// Rererequest after a certain time...
; 1525 : 			//
; 1526 : 
; 1527 : 			if ((get_system_time () - new_stub_packet->actual_time) > (command_line_comms_resend_timeout * TIME_1_SECOND))

  0003f	e8 00 00 00 00	 call	 ?get_system_time@@YGIXZ	; get_system_time
  00044	8b 4d fc	 mov	 ecx, DWORD PTR _new_stub_packet$[ebp]
  00047	2b 41 0c	 sub	 eax, DWORD PTR [ecx+12]
  0004a	89 45 a8	 mov	 DWORD PTR tv165[ebp], eax
  0004d	f2 0f 2a 45 a8	 cvtsi2sd xmm0, DWORD PTR tv165[ebp]
  00052	8b 55 a8	 mov	 edx, DWORD PTR tv165[ebp]
  00055	c1 ea 1f	 shr	 edx, 31			; 0000001fH
  00058	f2 0f 58 04 d5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
  00061	f2 0f 11 45 a0	 movsd	 QWORD PTR tv168[ebp], xmm0
  00066	f2 0f 5a 45 a0	 cvtsd2ss xmm0, QWORD PTR tv168[ebp]
  0006b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?command_line_comms_resend_timeout@@3MA
  00073	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@447a0000
  0007b	0f 2f c1	 comiss	 xmm0, xmm1
  0007e	76 2e		 jbe	 SHORT $LN5@request_re

; 1528 : 			{
; 1529 : 
; 1530 : 				debug_log ("COMMS: rerequest for frame %d packet %d must be lost, re-rerequesting", frame_id, packet_id);

  00080	8b 45 10	 mov	 eax, DWORD PTR _packet_id$[ebp]
  00083	50		 push	 eax
  00084	8b 4d 0c	 mov	 ecx, DWORD PTR _frame_id$[ebp]
  00087	51		 push	 ecx
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@DOCFECCC@COMMS?3?5rerequest?5for?5frame?5?$CFd?5p@
  0008d	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00092	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1531 : 
; 1532 : 				remove_stub_packet_from_list (&rerequest_packet_list, new_stub_packet);

  00095	8b 45 fc	 mov	 eax, DWORD PTR _new_stub_packet$[ebp]
  00098	50		 push	 eax
  00099	68 00 00 00 00	 push	 OFFSET ?rerequest_packet_list@@3PAUSTUB_PACKET_TYPE@@A ; rerequest_packet_list
  0009e	e8 00 00 00 00	 call	 ?remove_stub_packet_from_list@@YGXPAPAUSTUB_PACKET_TYPE@@PAU1@@Z ; remove_stub_packet_from_list

; 1533 : 
; 1534 : 				free_mem (new_stub_packet);

  000a3	8b 45 fc	 mov	 eax, DWORD PTR _new_stub_packet$[ebp]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem

; 1535 : 
; 1536 : 				break;

  000ac	eb 13		 jmp	 SHORT $LN3@request_re
$LN5@request_re:

; 1537 : 			}
; 1538 : 			else
; 1539 : 			{
; 1540 : 
; 1541 : 				#if DEBUG_MODULE
; 1542 : 
; 1543 : 				debug_log ("COMMS: rerequest for frame %d packet %d already exists, waiting... (waited %f so far)", frame_id, packet_id, (float) (get_system_time () - new_stub_packet->actual_time) / TIME_1_SECOND);
; 1544 : 
; 1545 : 				#endif
; 1546 : 			}
; 1547 : 
; 1548 : 			return;

  000ae	e9 01 01 00 00	 jmp	 $LN1@request_re
$LN4@request_re:

; 1549 : 		}
; 1550 : 
; 1551 : 		new_stub_packet = new_stub_packet->next;

  000b3	8b 45 fc	 mov	 eax, DWORD PTR _new_stub_packet$[ebp]
  000b6	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000b9	89 4d fc	 mov	 DWORD PTR _new_stub_packet$[ebp], ecx

; 1552 : 	}

  000bc	e9 50 ff ff ff	 jmp	 $LN2@request_re
$LN3@request_re:

; 1553 : 
; 1554 : 	buffer_ptr = (unsigned char *) buffer;

  000c1	8d 45 f0	 lea	 eax, DWORD PTR _buffer$[ebp]
  000c4	89 45 ec	 mov	 DWORD PTR _buffer_ptr$[ebp], eax

; 1555 : 
; 1556 : 	quick_set_list_item (buffer_ptr, int, frame_id);

  000c7	8b 45 ec	 mov	 eax, DWORD PTR _buffer_ptr$[ebp]
  000ca	83 c0 04	 add	 eax, 4
  000cd	89 45 ec	 mov	 DWORD PTR _buffer_ptr$[ebp], eax
  000d0	8b 4d ec	 mov	 ecx, DWORD PTR _buffer_ptr$[ebp]
  000d3	8b 55 0c	 mov	 edx, DWORD PTR _frame_id$[ebp]
  000d6	89 51 fc	 mov	 DWORD PTR [ecx-4], edx

; 1557 : 
; 1558 : 	quick_set_list_item (buffer_ptr, int, packet_id);

  000d9	8b 45 ec	 mov	 eax, DWORD PTR _buffer_ptr$[ebp]
  000dc	83 c0 04	 add	 eax, 4
  000df	89 45 ec	 mov	 DWORD PTR _buffer_ptr$[ebp], eax
  000e2	8b 4d ec	 mov	 ecx, DWORD PTR _buffer_ptr$[ebp]
  000e5	8b 55 10	 mov	 edx, DWORD PTR _packet_id$[ebp]
  000e8	89 51 fc	 mov	 DWORD PTR [ecx-4], edx

; 1559 : 
; 1560 : 	quick_set_list_item (buffer_ptr, send_types, send_type);

  000eb	8b 45 ec	 mov	 eax, DWORD PTR _buffer_ptr$[ebp]
  000ee	83 c0 04	 add	 eax, 4
  000f1	89 45 ec	 mov	 DWORD PTR _buffer_ptr$[ebp], eax
  000f4	8b 4d ec	 mov	 ecx, DWORD PTR _buffer_ptr$[ebp]
  000f7	8b 55 18	 mov	 edx, DWORD PTR _send_type$[ebp]
  000fa	89 51 fc	 mov	 DWORD PTR [ecx-4], edx

; 1561 : 
; 1562 : 	send_packet (connection->connection_id, PACKET_TYPE_RESEND_PACKET, (unsigned char *) buffer, sizeof (buffer), SEND_TYPE_PERSONAL);

  000fd	6a 00		 push	 0
  000ff	6a 0c		 push	 12			; 0000000cH
  00101	8d 45 f0	 lea	 eax, DWORD PTR _buffer$[ebp]
  00104	50		 push	 eax
  00105	6a 02		 push	 2
  00107	8b 4d 08	 mov	 ecx, DWORD PTR _connection$[ebp]
  0010a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0010c	52		 push	 edx
  0010d	e8 00 00 00 00	 call	 ?send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z ; send_packet

; 1563 : 
; 1564 : 	rerequest_packet_counter ++;

  00112	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rerequest_packet_counter@@3HA
  00117	83 c0 01	 add	 eax, 1
  0011a	a3 00 00 00 00	 mov	 DWORD PTR ?rerequest_packet_counter@@3HA, eax

; 1565 : 
; 1566 : 	connection->packet_rerequested ++;

  0011f	8b 45 08	 mov	 eax, DWORD PTR _connection$[ebp]
  00122	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00125	83 c1 01	 add	 ecx, 1
  00128	8b 55 08	 mov	 edx, DWORD PTR _connection$[ebp]
  0012b	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1567 : 
; 1568 : 	#if COMMS_DEBUG_BAD_CONNECTION
; 1569 : 
; 1570 : 	debug_log ("COMMS BAD CONNECTION: Re-requesting packet for frame %d, packet %d", frame_id, packet_id);
; 1571 : 
; 1572 : 	#else
; 1573 : 
; 1574 : 	debug_log ("WARNING: PACKET BEING RE-REQUESTED FROM PLAYER %d FOR %s FRAME %d PACKET %d",

  0012e	8b 45 10	 mov	 eax, DWORD PTR _packet_id$[ebp]
  00131	50		 push	 eax
  00132	8b 4d 0c	 mov	 ecx, DWORD PTR _frame_id$[ebp]
  00135	51		 push	 ecx
  00136	8b 55 18	 mov	 edx, DWORD PTR _send_type$[ebp]
  00139	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?send_type_names@@3PAPBDA[edx*4]
  00140	50		 push	 eax
  00141	8b 4d 08	 mov	 ecx, DWORD PTR _connection$[ebp]
  00144	8b 11		 mov	 edx, DWORD PTR [ecx]
  00146	52		 push	 edx
  00147	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@HEGOOPKE@WARNING?3?5PACKET?5BEING?5RE?9REQUES@
  0014c	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00151	83 c4 14	 add	 esp, 20			; 00000014H

; 1575 : 					connection->connection_id,
; 1576 : 					send_type_names [send_type],
; 1577 : 					frame_id,
; 1578 : 					packet_id);
; 1579 : 
; 1580 : 	#endif
; 1581 : 
; 1582 : 	new_stub_packet = (stub_packet_type *) malloc_fast_mem (sizeof (stub_packet_type));

  00154	6a 20		 push	 32			; 00000020H
  00156	e8 00 00 00 00	 call	 ?malloc_fast_memory@@YGPAXI@Z ; malloc_fast_memory
  0015b	89 45 fc	 mov	 DWORD PTR _new_stub_packet$[ebp], eax

; 1583 : 
; 1584 : 	memset (new_stub_packet, 0, sizeof (stub_packet_type));

  0015e	6a 20		 push	 32			; 00000020H
  00160	6a 00		 push	 0
  00162	8b 45 fc	 mov	 eax, DWORD PTR _new_stub_packet$[ebp]
  00165	50		 push	 eax
  00166	e8 00 00 00 00	 call	 _memset
  0016b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1585 : 
; 1586 : 	new_stub_packet->send_type = send_type;

  0016e	8b 45 fc	 mov	 eax, DWORD PTR _new_stub_packet$[ebp]
  00171	8b 4d 18	 mov	 ecx, DWORD PTR _send_type$[ebp]
  00174	89 08		 mov	 DWORD PTR [eax], ecx

; 1587 : 
; 1588 : 	new_stub_packet->received_time = time_stamp;

  00176	8b 45 fc	 mov	 eax, DWORD PTR _new_stub_packet$[ebp]
  00179	8b 4d 14	 mov	 ecx, DWORD PTR _time_stamp$[ebp]
  0017c	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1589 : 
; 1590 : 	new_stub_packet->actual_time = get_system_time ();

  0017f	e8 00 00 00 00	 call	 ?get_system_time@@YGIXZ	; get_system_time
  00184	8b 4d fc	 mov	 ecx, DWORD PTR _new_stub_packet$[ebp]
  00187	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 1591 : 
; 1592 : 	new_stub_packet->frame_id = frame_id;

  0018a	8b 45 fc	 mov	 eax, DWORD PTR _new_stub_packet$[ebp]
  0018d	8b 4d 0c	 mov	 ecx, DWORD PTR _frame_id$[ebp]
  00190	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1593 : 
; 1594 : 	new_stub_packet->packet_id = packet_id;

  00193	8b 45 fc	 mov	 eax, DWORD PTR _new_stub_packet$[ebp]
  00196	8b 4d 10	 mov	 ecx, DWORD PTR _packet_id$[ebp]
  00199	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1595 : 
; 1596 : 	new_stub_packet->packet = NULL;

  0019c	8b 45 fc	 mov	 eax, DWORD PTR _new_stub_packet$[ebp]
  0019f	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 1597 : 
; 1598 : 	add_stub_packet_to_list (&rerequest_packet_list, new_stub_packet);

  001a6	8b 45 fc	 mov	 eax, DWORD PTR _new_stub_packet$[ebp]
  001a9	50		 push	 eax
  001aa	68 00 00 00 00	 push	 OFFSET ?rerequest_packet_list@@3PAUSTUB_PACKET_TYPE@@A ; rerequest_packet_list
  001af	e8 00 00 00 00	 call	 ?add_stub_packet_to_list@@YGXPAPAUSTUB_PACKET_TYPE@@PAU1@@Z ; add_stub_packet_to_list
$LN1@request_re:

; 1599 : 
; 1600 : 	#if DEBUG_MODULE
; 1601 : 
; 1602 : 	debug_log ("COMMS:     rerequest %s frame %d, packet %d, time %d, added to rerequest list",
; 1603 : 					send_type_names [send_type],
; 1604 : 					frame_id,
; 1605 : 					packet_id,
; 1606 : 					get_system_time ());
; 1607 : 
; 1608 : 	#endif
; 1609 : }

  001b4	5f		 pop	 edi
  001b5	5e		 pop	 esi
  001b6	5b		 pop	 ebx
  001b7	8b e5		 mov	 esp, ebp
  001b9	5d		 pop	 ebp
  001ba	c2 14 00	 ret	 20			; 00000014H
?request_resend_packet@@YGXPAUCONNECTION_LIST_TYPE@@HHHW4SEND_TYPES@@@Z ENDP ; request_resend_packet
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comms.c
;	COMDAT ?get_stub_packet_for_frame@@YGPAUSTUB_PACKET_TYPE@@W4SEND_TYPES@@KHH@Z
_TEXT	SEGMENT
_packet_list$ = -4					; size = 4
_send_type$ = 8						; size = 4
_player_id$ = 12					; size = 4
_frame_id$ = 16						; size = 4
_packet_id$ = 20					; size = 4
?get_stub_packet_for_frame@@YGPAUSTUB_PACKET_TYPE@@W4SEND_TYPES@@KHH@Z PROC ; get_stub_packet_for_frame, COMDAT

; 1395 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1396 : 
; 1397 : #if DEBUG_MODULE >= 4
; 1398 : 
; 1399 : 	stub_packet_type
; 1400 : 		*the_packet,
; 1401 : 		*packet_list;
; 1402 : 
; 1403 : 	if (send_type == SEND_TYPE_GROUP)
; 1404 : 	{
; 1405 : 
; 1406 : 		packet_list = received_group_packets;
; 1407 : 
; 1408 : 		debug_log ("COMMS: GROUP PACKET LIST");
; 1409 : 	}
; 1410 : 	else
; 1411 : 	{
; 1412 : 
; 1413 : 		packet_list = received_personal_packets;
; 1414 : 
; 1415 : 		debug_log ("COMMS: PERSONAL PACKET LIST");
; 1416 : 	}
; 1417 : 
; 1418 : 	the_packet = NULL;
; 1419 : 
; 1420 : 	while (packet_list)
; 1421 : 	{
; 1422 : 
; 1423 : 		if (packet_list->packet->frame_id > 1)
; 1424 : 		{
; 1425 : 
; 1426 : 			debug_log ("COMMS:     %s packet frame %d, packet %d, player id %d",
; 1427 : 						send_type_names [send_type],
; 1428 : 						packet_list->packet->frame_id,
; 1429 : 						packet_list->packet->packet_id,
; 1430 : 						packet_list->packet->player_id);
; 1431 : 		}
; 1432 : 
; 1433 : 		if (packet_list->packet->frame_id == frame_id)
; 1434 : 		{
; 1435 : 
; 1436 : 			if (packet_list->packet->packet_id == packet_id)
; 1437 : 			{
; 1438 : 
; 1439 : 				if (packet_list->packet->player_id == player_id)
; 1440 : 				{
; 1441 : 
; 1442 : 					the_packet = packet_list;
; 1443 : 				}
; 1444 : 			}
; 1445 : 		}
; 1446 : 
; 1447 : 		packet_list = packet_list->next;
; 1448 : 	}
; 1449 : 
; 1450 : 	return the_packet;
; 1451 : 
; 1452 : #else
; 1453 : 
; 1454 : 	stub_packet_type
; 1455 : 		*packet_list;
; 1456 : 
; 1457 : 	if (send_type == SEND_TYPE_GROUP)

  00009	83 7d 08 01	 cmp	 DWORD PTR _send_type$[ebp], 1
  0000d	75 0a		 jne	 SHORT $LN4@get_stub_p

; 1458 : 	{
; 1459 : 
; 1460 : 		packet_list = received_group_packets;

  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?received_group_packets@@3PAUSTUB_PACKET_TYPE@@A ; received_group_packets
  00014	89 45 fc	 mov	 DWORD PTR _packet_list$[ebp], eax

; 1461 : 	}
; 1462 : 	else

  00017	eb 08		 jmp	 SHORT $LN2@get_stub_p
$LN4@get_stub_p:

; 1463 : 	{
; 1464 : 
; 1465 : 		packet_list = received_personal_packets;

  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ?received_personal_packets@@3PAUSTUB_PACKET_TYPE@@A ; received_personal_packets
  0001e	89 45 fc	 mov	 DWORD PTR _packet_list$[ebp], eax
$LN2@get_stub_p:

; 1466 : 	}
; 1467 : 
; 1468 : 	while (packet_list)

  00021	83 7d fc 00	 cmp	 DWORD PTR _packet_list$[ebp], 0
  00025	74 3b		 je	 SHORT $LN3@get_stub_p

; 1469 : 	{
; 1470 : 
; 1471 : 		if (packet_list->packet->frame_id == frame_id)

  00027	8b 45 fc	 mov	 eax, DWORD PTR _packet_list$[ebp]
  0002a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0002d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00030	3b 55 10	 cmp	 edx, DWORD PTR _frame_id$[ebp]
  00033	75 22		 jne	 SHORT $LN6@get_stub_p

; 1472 : 		{
; 1473 : 
; 1474 : 			if (packet_list->packet->packet_id == packet_id)

  00035	8b 45 fc	 mov	 eax, DWORD PTR _packet_list$[ebp]
  00038	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0003b	0f bf 51 0e	 movsx	 edx, WORD PTR [ecx+14]
  0003f	3b 55 14	 cmp	 edx, DWORD PTR _packet_id$[ebp]
  00042	75 13		 jne	 SHORT $LN6@get_stub_p

; 1475 : 			{
; 1476 : 
; 1477 : 				if (packet_list->packet->player_id == player_id)

  00044	8b 45 fc	 mov	 eax, DWORD PTR _packet_list$[ebp]
  00047	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0004a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0004d	3b 55 0c	 cmp	 edx, DWORD PTR _player_id$[ebp]
  00050	75 05		 jne	 SHORT $LN6@get_stub_p

; 1478 : 				{
; 1479 : 
; 1480 : 					return packet_list;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _packet_list$[ebp]
  00055	eb 0d		 jmp	 SHORT $LN1@get_stub_p
$LN6@get_stub_p:

; 1481 : 				}
; 1482 : 			}
; 1483 : 		}
; 1484 : 
; 1485 : 		packet_list = packet_list->next;

  00057	8b 45 fc	 mov	 eax, DWORD PTR _packet_list$[ebp]
  0005a	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0005d	89 4d fc	 mov	 DWORD PTR _packet_list$[ebp], ecx

; 1486 : 	}

  00060	eb bf		 jmp	 SHORT $LN2@get_stub_p
$LN3@get_stub_p:

; 1487 : 
; 1488 : 	return NULL;

  00062	33 c0		 xor	 eax, eax
$LN1@get_stub_p:

; 1489 : 
; 1490 : #endif
; 1491 : }

  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 10 00	 ret	 16			; 00000010H
?get_stub_packet_for_frame@@YGPAUSTUB_PACKET_TYPE@@W4SEND_TYPES@@KHH@Z ENDP ; get_stub_packet_for_frame
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comms.c
;	COMDAT ?display_comms_stats@@YGXXZ
_TEXT	SEGMENT
_y$ = -204						; size = 4
_s$ = -200						; size = 200
?display_comms_stats@@YGXXZ PROC			; display_comms_stats, COMDAT

; 2320 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2321 : 
; 2322 : 	char
; 2323 : 		s[200];
; 2324 : 
; 2325 : 	float
; 2326 : 		y;
; 2327 : 
; 2328 : 	if (!command_line_comms_show_stats)

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_comms_show_stats@@3HA, 0 ; command_line_comms_show_stats
  00013	75 05		 jne	 SHORT $LN2@display_co

; 2329 : 	{
; 2330 : 
; 2331 : 		return;

  00015	e9 7d 04 00 00	 jmp	 $LN1@display_co
$LN2@display_co:

; 2332 : 	}
; 2333 : 
; 2334 : 	if (!begin_3d_scene ())

  0001a	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  0001f	85 c0		 test	 eax, eax
  00021	75 05		 jne	 SHORT $LN3@display_co

; 2335 : 	{
; 2336 : 
; 2337 : 		return;

  00023	e9 6f 04 00 00	 jmp	 $LN1@display_co
$LN3@display_co:

; 2338 : 	}
; 2339 : 
; 2340 : 	set_full_screen_viewport ();

  00028	e8 00 00 00 00	 call	 ?set_full_screen_viewport@@YGXXZ ; set_full_screen_viewport

; 2341 : 
; 2342 : 	y = 0.0;

  0002d	0f 57 c0	 xorps	 xmm0, xmm0
  00030	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _y$[ebp], xmm0

; 2343 : 
; 2344 : 	set_ui_font_type (UI_FONT_ARIAL_14);

  00038	6a 01		 push	 1
  0003a	e8 00 00 00 00	 call	 ?set_ui_font_type@@YGXW4FONT_TYPES@@@Z ; set_ui_font_type

; 2345 : 	set_ui_font_colour (sys_col_amber);

  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_amber@@3UREAL_COLOUR@@A ; sys_col_amber
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?set_ui_font_colour@@YGXUREAL_COLOUR@@@Z ; set_ui_font_colour

; 2346 : 
; 2347 : 	/////////////////////////////////////////////////////////////////
; 2348 : 
; 2349 : 	sprintf (s, "Comms Info:");

  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BCJGBAIB@Comms?5Info?3@
  0004f	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _s$[ebp]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 _sprintf
  0005b	83 c4 08	 add	 esp, 8

; 2350 : 	ui_display_text (s, 0, y);

  0005e	51		 push	 ecx
  0005f	f3 0f 10 85 34
	ff ff ff	 movss	 xmm0, DWORD PTR _y$[ebp]
  00067	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006c	51		 push	 ecx
  0006d	0f 57 c0	 xorps	 xmm0, xmm0
  00070	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00075	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _s$[ebp]
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?ui_display_text@@YGMPBDMM@Z ; ui_display_text
  00081	dd d8		 fstp	 ST(0)

; 2351 : 	y += ui_get_font_height () + 1;

  00083	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_font@@3PAUUI_FONT_TYPE@@A ; current_font
  00088	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0008b	83 c1 01	 add	 ecx, 1
  0008e	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00092	f3 0f 58 85 34
	ff ff ff	 addss	 xmm0, DWORD PTR _y$[ebp]
  0009a	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _y$[ebp], xmm0

; 2352 : 
; 2353 : 	/////////////////////////////////////////////////////////////////
; 2354 : 
; 2355 : 	sprintf (s, "packets sent = %d", num_packets_sent);

  000a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?num_packets_sent@@3HA
  000a7	50		 push	 eax
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@JJADIJAM@packets?5sent?5?$DN?5?$CFd@
  000ad	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _s$[ebp]
  000b3	51		 push	 ecx
  000b4	e8 00 00 00 00	 call	 _sprintf
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2356 : 	ui_display_text (s, 0, y);

  000bc	51		 push	 ecx
  000bd	f3 0f 10 85 34
	ff ff ff	 movss	 xmm0, DWORD PTR _y$[ebp]
  000c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ca	51		 push	 ecx
  000cb	0f 57 c0	 xorps	 xmm0, xmm0
  000ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d3	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _s$[ebp]
  000d9	50		 push	 eax
  000da	e8 00 00 00 00	 call	 ?ui_display_text@@YGMPBDMM@Z ; ui_display_text
  000df	dd d8		 fstp	 ST(0)

; 2357 : 	y += ui_get_font_height () + 1;

  000e1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_font@@3PAUUI_FONT_TYPE@@A ; current_font
  000e6	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000e9	83 c1 01	 add	 ecx, 1
  000ec	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  000f0	f3 0f 58 85 34
	ff ff ff	 addss	 xmm0, DWORD PTR _y$[ebp]
  000f8	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _y$[ebp], xmm0

; 2358 : 
; 2359 : 	sprintf (s, "packets send size (av) = %.02f", av_packet_size_sent);

  00100	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?av_packet_size_sent@@3MA
  00108	83 ec 08	 sub	 esp, 8
  0010b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00110	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OPBAPIHL@packets?5send?5size?5?$CIav?$CJ?5?$DN?5?$CF?402f@
  00115	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _s$[ebp]
  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 _sprintf
  00121	83 c4 10	 add	 esp, 16			; 00000010H

; 2360 : 	ui_display_text (s, 0, y);

  00124	51		 push	 ecx
  00125	f3 0f 10 85 34
	ff ff ff	 movss	 xmm0, DWORD PTR _y$[ebp]
  0012d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00132	51		 push	 ecx
  00133	0f 57 c0	 xorps	 xmm0, xmm0
  00136	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013b	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _s$[ebp]
  00141	50		 push	 eax
  00142	e8 00 00 00 00	 call	 ?ui_display_text@@YGMPBDMM@Z ; ui_display_text
  00147	dd d8		 fstp	 ST(0)

; 2361 : 	y += ui_get_font_height () + 1;

  00149	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_font@@3PAUUI_FONT_TYPE@@A ; current_font
  0014e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00151	83 c1 01	 add	 ecx, 1
  00154	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00158	f3 0f 58 85 34
	ff ff ff	 addss	 xmm0, DWORD PTR _y$[ebp]
  00160	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _y$[ebp], xmm0

; 2362 : 
; 2363 : 	sprintf (s, "packets send size (max) = %.02f", max_packet_size_sent);

  00168	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?max_packet_size_sent@@3MA
  00170	83 ec 08	 sub	 esp, 8
  00173	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00178	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@MPCCNJHH@packets?5send?5size?5?$CImax?$CJ?5?$DN?5?$CF?402f@
  0017d	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _s$[ebp]
  00183	50		 push	 eax
  00184	e8 00 00 00 00	 call	 _sprintf
  00189	83 c4 10	 add	 esp, 16			; 00000010H

; 2364 : 	ui_display_text (s, 0, y);

  0018c	51		 push	 ecx
  0018d	f3 0f 10 85 34
	ff ff ff	 movss	 xmm0, DWORD PTR _y$[ebp]
  00195	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019a	51		 push	 ecx
  0019b	0f 57 c0	 xorps	 xmm0, xmm0
  0019e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a3	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _s$[ebp]
  001a9	50		 push	 eax
  001aa	e8 00 00 00 00	 call	 ?ui_display_text@@YGMPBDMM@Z ; ui_display_text
  001af	dd d8		 fstp	 ST(0)

; 2365 : 	y += ui_get_font_height () + 1;

  001b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_font@@3PAUUI_FONT_TYPE@@A ; current_font
  001b6	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  001b9	83 c1 01	 add	 ecx, 1
  001bc	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  001c0	f3 0f 58 85 34
	ff ff ff	 addss	 xmm0, DWORD PTR _y$[ebp]
  001c8	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _y$[ebp], xmm0

; 2366 : 
; 2367 : 	sprintf (s, "packets received = %d", num_packets_received);

  001d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?num_packets_received@@3HA
  001d5	50		 push	 eax
  001d6	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@IFCAKOCI@packets?5received?5?$DN?5?$CFd@
  001db	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _s$[ebp]
  001e1	51		 push	 ecx
  001e2	e8 00 00 00 00	 call	 _sprintf
  001e7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2368 : 	ui_display_text (s, 0, y);

  001ea	51		 push	 ecx
  001eb	f3 0f 10 85 34
	ff ff ff	 movss	 xmm0, DWORD PTR _y$[ebp]
  001f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f8	51		 push	 ecx
  001f9	0f 57 c0	 xorps	 xmm0, xmm0
  001fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00201	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _s$[ebp]
  00207	50		 push	 eax
  00208	e8 00 00 00 00	 call	 ?ui_display_text@@YGMPBDMM@Z ; ui_display_text
  0020d	dd d8		 fstp	 ST(0)

; 2369 : 	y += ui_get_font_height () + 1;

  0020f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_font@@3PAUUI_FONT_TYPE@@A ; current_font
  00214	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00217	83 c1 01	 add	 ecx, 1
  0021a	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0021e	f3 0f 58 85 34
	ff ff ff	 addss	 xmm0, DWORD PTR _y$[ebp]
  00226	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _y$[ebp], xmm0

; 2370 : 
; 2371 : 	sprintf (s, "packets received size (av) = %.02f", av_packet_size_received);

  0022e	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?av_packet_size_received@@3MA
  00236	83 ec 08	 sub	 esp, 8
  00239	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0023e	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@DCFEMIPK@packets?5received?5size?5?$CIav?$CJ?5?$DN?5?$CF?4@
  00243	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _s$[ebp]
  00249	50		 push	 eax
  0024a	e8 00 00 00 00	 call	 _sprintf
  0024f	83 c4 10	 add	 esp, 16			; 00000010H

; 2372 : 	ui_display_text (s, 0, y);

  00252	51		 push	 ecx
  00253	f3 0f 10 85 34
	ff ff ff	 movss	 xmm0, DWORD PTR _y$[ebp]
  0025b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00260	51		 push	 ecx
  00261	0f 57 c0	 xorps	 xmm0, xmm0
  00264	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00269	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _s$[ebp]
  0026f	50		 push	 eax
  00270	e8 00 00 00 00	 call	 ?ui_display_text@@YGMPBDMM@Z ; ui_display_text
  00275	dd d8		 fstp	 ST(0)

; 2373 : 	y += ui_get_font_height () + 1;

  00277	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_font@@3PAUUI_FONT_TYPE@@A ; current_font
  0027c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0027f	83 c1 01	 add	 ecx, 1
  00282	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00286	f3 0f 58 85 34
	ff ff ff	 addss	 xmm0, DWORD PTR _y$[ebp]
  0028e	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _y$[ebp], xmm0

; 2374 : 
; 2375 : 	sprintf (s, "packets received size (max) = %.02f", max_packet_size_received);

  00296	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?max_packet_size_received@@3MA
  0029e	83 ec 08	 sub	 esp, 8
  002a1	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  002a6	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@FFEACOPB@packets?5received?5size?5?$CImax?$CJ?5?$DN?5?$CF@
  002ab	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _s$[ebp]
  002b1	50		 push	 eax
  002b2	e8 00 00 00 00	 call	 _sprintf
  002b7	83 c4 10	 add	 esp, 16			; 00000010H

; 2376 : 	ui_display_text (s, 0, y);

  002ba	51		 push	 ecx
  002bb	f3 0f 10 85 34
	ff ff ff	 movss	 xmm0, DWORD PTR _y$[ebp]
  002c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c8	51		 push	 ecx
  002c9	0f 57 c0	 xorps	 xmm0, xmm0
  002cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d1	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _s$[ebp]
  002d7	50		 push	 eax
  002d8	e8 00 00 00 00	 call	 ?ui_display_text@@YGMPBDMM@Z ; ui_display_text
  002dd	dd d8		 fstp	 ST(0)

; 2377 : 	y += ui_get_font_height () + 1;

  002df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_font@@3PAUUI_FONT_TYPE@@A ; current_font
  002e4	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  002e7	83 c1 01	 add	 ecx, 1
  002ea	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  002ee	f3 0f 58 85 34
	ff ff ff	 addss	 xmm0, DWORD PTR _y$[ebp]
  002f6	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _y$[ebp], xmm0

; 2378 : 
; 2379 : 	sprintf (s, "DirectPlay packet queue = %d", direct_play_get_send_queue_number_of_packets ());

  002fe	e8 00 00 00 00	 call	 ?direct_play_get_send_queue_number_of_packets@@YGHXZ ; direct_play_get_send_queue_number_of_packets
  00303	50		 push	 eax
  00304	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DJFBNPFD@DirectPlay?5packet?5queue?5?$DN?5?$CFd@
  00309	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _s$[ebp]
  0030f	50		 push	 eax
  00310	e8 00 00 00 00	 call	 _sprintf
  00315	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2380 : 	ui_display_text (s, 0, y);

  00318	51		 push	 ecx
  00319	f3 0f 10 85 34
	ff ff ff	 movss	 xmm0, DWORD PTR _y$[ebp]
  00321	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00326	51		 push	 ecx
  00327	0f 57 c0	 xorps	 xmm0, xmm0
  0032a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032f	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _s$[ebp]
  00335	50		 push	 eax
  00336	e8 00 00 00 00	 call	 ?ui_display_text@@YGMPBDMM@Z ; ui_display_text
  0033b	dd d8		 fstp	 ST(0)

; 2381 : 	y += ui_get_font_height () + 1;

  0033d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_font@@3PAUUI_FONT_TYPE@@A ; current_font
  00342	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00345	83 c1 01	 add	 ecx, 1
  00348	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0034c	f3 0f 58 85 34
	ff ff ff	 addss	 xmm0, DWORD PTR _y$[ebp]
  00354	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _y$[ebp], xmm0

; 2382 : 
; 2383 : 	sprintf (s, "Throttle limit = %d", command_line_comms_packet_throttle_limit);

  0035c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_line_comms_packet_throttle_limit@@3HA ; command_line_comms_packet_throttle_limit
  00361	50		 push	 eax
  00362	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JGBGIKNI@Throttle?5limit?5?$DN?5?$CFd@
  00367	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _s$[ebp]
  0036d	51		 push	 ecx
  0036e	e8 00 00 00 00	 call	 _sprintf
  00373	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2384 : 	ui_display_text (s, 0, y);

  00376	51		 push	 ecx
  00377	f3 0f 10 85 34
	ff ff ff	 movss	 xmm0, DWORD PTR _y$[ebp]
  0037f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00384	51		 push	 ecx
  00385	0f 57 c0	 xorps	 xmm0, xmm0
  00388	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038d	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _s$[ebp]
  00393	50		 push	 eax
  00394	e8 00 00 00 00	 call	 ?ui_display_text@@YGMPBDMM@Z ; ui_display_text
  00399	dd d8		 fstp	 ST(0)

; 2385 : 	y += ui_get_font_height () + 1;

  0039b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_font@@3PAUUI_FONT_TYPE@@A ; current_font
  003a0	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  003a3	83 c1 01	 add	 ecx, 1
  003a6	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  003aa	f3 0f 58 85 34
	ff ff ff	 addss	 xmm0, DWORD PTR _y$[ebp]
  003b2	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _y$[ebp], xmm0

; 2386 : 
; 2387 : 	if (get_gunship_entity ())

  003ba	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  003c1	0f 84 cb 00 00
	00		 je	 $LN6@display_co

; 2388 : 	{
; 2389 : 
; 2390 : 		if (comms_weapon_lag_timing)

  003c7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?comms_weapon_lag_timing@@3HA, 0 ; comms_weapon_lag_timing
  003ce	74 5a		 je	 SHORT $LN5@display_co

; 2391 : 		{
; 2392 : 
; 2393 : 			sprintf (s, "Weapon lag time = Timing...");

  003d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@FHMIMAEC@Weapon?5lag?5time?5?$DN?5Timing?4?4?4@
  003d5	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _s$[ebp]
  003db	50		 push	 eax
  003dc	e8 00 00 00 00	 call	 _sprintf
  003e1	83 c4 08	 add	 esp, 8

; 2394 : 			ui_display_text (s, 0, y);

  003e4	51		 push	 ecx
  003e5	f3 0f 10 85 34
	ff ff ff	 movss	 xmm0, DWORD PTR _y$[ebp]
  003ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f2	51		 push	 ecx
  003f3	0f 57 c0	 xorps	 xmm0, xmm0
  003f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003fb	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _s$[ebp]
  00401	50		 push	 eax
  00402	e8 00 00 00 00	 call	 ?ui_display_text@@YGMPBDMM@Z ; ui_display_text
  00407	dd d8		 fstp	 ST(0)

; 2395 : 			y += ui_get_font_height () + 1;

  00409	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_font@@3PAUUI_FONT_TYPE@@A ; current_font
  0040e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00411	83 c1 01	 add	 ecx, 1
  00414	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00418	f3 0f 58 85 34
	ff ff ff	 addss	 xmm0, DWORD PTR _y$[ebp]
  00420	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _y$[ebp], xmm0

; 2396 : 		}
; 2397 : 		else

  00428	eb 68		 jmp	 SHORT $LN6@display_co
$LN5@display_co:

; 2398 : 		{
; 2399 : 
; 2400 : 			sprintf (s, "Weapon lag time = %0.2f", comms_weapon_lag_time);

  0042a	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?comms_weapon_lag_time@@3MA
  00432	83 ec 08	 sub	 esp, 8
  00435	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0043a	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NDFPHDMC@Weapon?5lag?5time?5?$DN?5?$CF0?42f@
  0043f	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _s$[ebp]
  00445	50		 push	 eax
  00446	e8 00 00 00 00	 call	 _sprintf
  0044b	83 c4 10	 add	 esp, 16			; 00000010H

; 2401 : 			ui_display_text (s, 0, y);

  0044e	51		 push	 ecx
  0044f	f3 0f 10 85 34
	ff ff ff	 movss	 xmm0, DWORD PTR _y$[ebp]
  00457	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0045c	51		 push	 ecx
  0045d	0f 57 c0	 xorps	 xmm0, xmm0
  00460	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00465	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _s$[ebp]
  0046b	50		 push	 eax
  0046c	e8 00 00 00 00	 call	 ?ui_display_text@@YGMPBDMM@Z ; ui_display_text
  00471	dd d8		 fstp	 ST(0)

; 2402 : 			y += ui_get_font_height () + 1;

  00473	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_font@@3PAUUI_FONT_TYPE@@A ; current_font
  00478	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0047b	83 c1 01	 add	 ecx, 1
  0047e	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00482	f3 0f 58 85 34
	ff ff ff	 addss	 xmm0, DWORD PTR _y$[ebp]
  0048a	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _y$[ebp], xmm0
$LN6@display_co:

; 2403 : 		}
; 2404 : 	}
; 2405 : 
; 2406 : 	end_3d_scene ();

  00492	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN1@display_co:

; 2407 : }

  00497	5f		 pop	 edi
  00498	5e		 pop	 esi
  00499	5b		 pop	 ebx
  0049a	8b e5		 mov	 esp, ebp
  0049c	5d		 pop	 ebp
  0049d	c3		 ret	 0
?display_comms_stats@@YGXXZ ENDP			; display_comms_stats
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comms.c
;	COMDAT ?reset_receive_packet_list_time_stamps@@YGXXZ
_TEXT	SEGMENT
_packet$ = -4						; size = 4
?reset_receive_packet_list_time_stamps@@YGXXZ PROC	; reset_receive_packet_list_time_stamps, COMDAT

; 2297 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2298 : 
; 2299 : 	stub_packet_type
; 2300 : 		*packet;
; 2301 : 
; 2302 : 	packet = received_group_packets;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?received_group_packets@@3PAUSTUB_PACKET_TYPE@@A ; received_group_packets
  0000e	89 45 fc	 mov	 DWORD PTR _packet$[ebp], eax
$LN2@reset_rece:

; 2303 : 
; 2304 : 	while (packet)

  00011	83 7d fc 00	 cmp	 DWORD PTR _packet$[ebp], 0
  00015	74 2b		 je	 SHORT $LN1@reset_rece

; 2305 : 	{
; 2306 : 
; 2307 : 		packet->actual_time = get_system_time () + TIME_1_SECOND;

  00017	e8 00 00 00 00	 call	 ?get_system_time@@YGIXZ	; get_system_time
  0001c	05 e8 03 00 00	 add	 eax, 1000		; 000003e8H
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _packet$[ebp]
  00024	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 2308 : 
; 2309 : 		packet->received_time = get_system_time () + TIME_1_SECOND;

  00027	e8 00 00 00 00	 call	 ?get_system_time@@YGIXZ	; get_system_time
  0002c	05 e8 03 00 00	 add	 eax, 1000		; 000003e8H
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _packet$[ebp]
  00034	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 2310 : 
; 2311 : 		packet = packet->next;

  00037	8b 45 fc	 mov	 eax, DWORD PTR _packet$[ebp]
  0003a	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0003d	89 4d fc	 mov	 DWORD PTR _packet$[ebp], ecx

; 2312 : 	}

  00040	eb cf		 jmp	 SHORT $LN2@reset_rece
$LN1@reset_rece:

; 2313 : }

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?reset_receive_packet_list_time_stamps@@YGXXZ ENDP	; reset_receive_packet_list_time_stamps
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comms.c
;	COMDAT ?reset_comms_stats@@YGXXZ
_TEXT	SEGMENT
?reset_comms_stats@@YGXXZ PROC				; reset_comms_stats, COMDAT

; 2270 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2271 : 
; 2272 : 	packet_record_data_count = 0;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?packet_record_data_count@@3HA, 0 ; packet_record_data_count

; 2273 : 
; 2274 : 	total_data_size = 0;

  00013	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?total_data_size@@3HA, 0

; 2275 : 	total_connection_size = 0;

  0001d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?total_connection_size@@3HA, 0

; 2276 : 	received_group_list_size = 0;

  00027	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?received_group_list_size@@3HA, 0

; 2277 : 	received_personal_list_size = 0;

  00031	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?received_personal_list_size@@3HA, 0

; 2278 : 	resend_list_size = 0;

  0003b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?resend_list_size@@3HA, 0

; 2279 : 	rerequest_list_size = 0;

  00045	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?rerequest_list_size@@3HA, 0

; 2280 : 	num_packets_received = 0;

  0004f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?num_packets_received@@3HA, 0

; 2281 : 	num_packets_sent = 0;

  00059	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?num_packets_sent@@3HA, 0

; 2282 : 
; 2283 : 	instant_packet_size_sent = 0.0;

  00063	0f 57 c0	 xorps	 xmm0, xmm0
  00066	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?instant_packet_size_sent@@3MA, xmm0

; 2284 : 	instant_packet_size_received = 0.0;

  0006e	0f 57 c0	 xorps	 xmm0, xmm0
  00071	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?instant_packet_size_received@@3MA, xmm0

; 2285 : 	av_packet_size_sent = 0.0;

  00079	0f 57 c0	 xorps	 xmm0, xmm0
  0007c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?av_packet_size_sent@@3MA, xmm0

; 2286 : 	av_packet_size_received = 0.0;

  00084	0f 57 c0	 xorps	 xmm0, xmm0
  00087	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?av_packet_size_received@@3MA, xmm0

; 2287 : 	max_packet_size_sent = 0.0;

  0008f	0f 57 c0	 xorps	 xmm0, xmm0
  00092	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?max_packet_size_sent@@3MA, xmm0

; 2288 : 	max_packet_size_received = 0.0;

  0009a	0f 57 c0	 xorps	 xmm0, xmm0
  0009d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?max_packet_size_received@@3MA, xmm0

; 2289 : 	max_processed_size = 0.0;

  000a5	0f 57 c0	 xorps	 xmm0, xmm0
  000a8	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?max_processed_size@@3MA, xmm0

; 2290 : }

  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
?reset_comms_stats@@YGXXZ ENDP				; reset_comms_stats
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comms.c
;	COMDAT ?debug_comms_stats@@YGXXZ
_TEXT	SEGMENT
tv150 = -84						; size = 8
tv137 = -84						; size = 8
tv147 = -76						; size = 4
tv134 = -76						; size = 4
_stub_packet$ = -8					; size = 4
_connection$ = -4					; size = 4
?debug_comms_stats@@YGXXZ PROC				; debug_comms_stats, COMDAT

; 2116 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2117 : 
; 2118 : 	connection_list_type
; 2119 : 		*connection;
; 2120 : 
; 2121 : 	stub_packet_type
; 2122 : 		*stub_packet;
; 2123 : 
; 2124 : 	delta_time = get_system_time () - last_time;

  00009	e8 00 00 00 00	 call	 ?get_system_time@@YGIXZ	; get_system_time
  0000e	89 45 b4	 mov	 DWORD PTR tv134[ebp], eax
  00011	f2 0f 2a 45 b4	 cvtsi2sd xmm0, DWORD PTR tv134[ebp]
  00016	8b 45 b4	 mov	 eax, DWORD PTR tv134[ebp]
  00019	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001c	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00025	f2 0f 11 45 ac	 movsd	 QWORD PTR tv137[ebp], xmm0
  0002a	f2 0f 5a 45 ac	 cvtsd2ss xmm0, QWORD PTR tv137[ebp]
  0002f	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?last_time@@3MA
  00037	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?delta_time@@3MA, xmm0

; 2125 : 
; 2126 : 	network_frame_time = (delta_time / TIME_1_SECOND);

  0003f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?delta_time@@3MA
  00047	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  0004f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?network_frame_time@@3MA, xmm0

; 2127 : 
; 2128 : 	if (network_frame_time > 0)

  00057	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?network_frame_time@@3MA
  0005f	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00066	76 22		 jbe	 SHORT $LN12@debug_comm

; 2129 : 	{
; 2130 : 
; 2131 : 		network_frame_rate = 1.0 / network_frame_time;

  00068	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?network_frame_time@@3MA
  00070	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00078	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0007c	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00080	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?network_frame_rate@@3MA, xmm0

; 2132 : 	}
; 2133 : 	else

  00088	eb 0b		 jmp	 SHORT $LN13@debug_comm
$LN12@debug_comm:

; 2134 : 	{
; 2135 : 
; 2136 : 		network_frame_rate = 0.0;

  0008a	0f 57 c0	 xorps	 xmm0, xmm0
  0008d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?network_frame_rate@@3MA, xmm0
$LN13@debug_comm:

; 2137 : 	}
; 2138 : 
; 2139 : 	last_time = get_system_time ();

  00095	e8 00 00 00 00	 call	 ?get_system_time@@YGIXZ	; get_system_time
  0009a	89 45 b4	 mov	 DWORD PTR tv147[ebp], eax
  0009d	f2 0f 2a 45 b4	 cvtsi2sd xmm0, DWORD PTR tv147[ebp]
  000a2	8b 45 b4	 mov	 eax, DWORD PTR tv147[ebp]
  000a5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000a8	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  000b1	f2 0f 11 45 ac	 movsd	 QWORD PTR tv150[ebp], xmm0
  000b6	f2 0f 5a 45 ac	 cvtsd2ss xmm0, QWORD PTR tv150[ebp]
  000bb	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?last_time@@3MA, xmm0

; 2140 : 
; 2141 : 	//
; 2142 : 	// count up group packets
; 2143 : 	//
; 2144 : 
; 2145 : 	stub_packet = received_group_packets;

  000c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?received_group_packets@@3PAUSTUB_PACKET_TYPE@@A ; received_group_packets
  000c8	89 45 f8	 mov	 DWORD PTR _stub_packet$[ebp], eax

; 2146 : 
; 2147 : 	received_group_list_size = 0;

  000cb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?received_group_list_size@@3HA, 0
$LN2@debug_comm:

; 2148 : 
; 2149 : 	while (stub_packet)

  000d5	83 7d f8 00	 cmp	 DWORD PTR _stub_packet$[ebp], 0
  000d9	74 25		 je	 SHORT $LN3@debug_comm

; 2150 : 	{
; 2151 : 
; 2152 : 		received_group_list_size += sizeof (stub_packet_type);

  000db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?received_group_list_size@@3HA
  000e0	83 c0 20	 add	 eax, 32			; 00000020H
  000e3	a3 00 00 00 00	 mov	 DWORD PTR ?received_group_list_size@@3HA, eax

; 2153 : 
; 2154 : 		received_group_list_size += sizeof (packet_header_type);

  000e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?received_group_list_size@@3HA
  000ed	83 c0 18	 add	 eax, 24			; 00000018H
  000f0	a3 00 00 00 00	 mov	 DWORD PTR ?received_group_list_size@@3HA, eax

; 2155 : 
; 2156 : 		stub_packet = stub_packet->next;

  000f5	8b 45 f8	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  000f8	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000fb	89 4d f8	 mov	 DWORD PTR _stub_packet$[ebp], ecx

; 2157 : 	}

  000fe	eb d5		 jmp	 SHORT $LN2@debug_comm
$LN3@debug_comm:

; 2158 : 
; 2159 : 	//
; 2160 : 	// count up personal packets
; 2161 : 	//
; 2162 : 
; 2163 : 	stub_packet = received_personal_packets;

  00100	a1 00 00 00 00	 mov	 eax, DWORD PTR ?received_personal_packets@@3PAUSTUB_PACKET_TYPE@@A ; received_personal_packets
  00105	89 45 f8	 mov	 DWORD PTR _stub_packet$[ebp], eax

; 2164 : 
; 2165 : 	received_personal_list_size = 0;

  00108	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?received_personal_list_size@@3HA, 0
$LN4@debug_comm:

; 2166 : 
; 2167 : 	while (stub_packet)

  00112	83 7d f8 00	 cmp	 DWORD PTR _stub_packet$[ebp], 0
  00116	74 25		 je	 SHORT $LN5@debug_comm

; 2168 : 	{
; 2169 : 
; 2170 : 		received_personal_list_size += sizeof (stub_packet_type);

  00118	a1 00 00 00 00	 mov	 eax, DWORD PTR ?received_personal_list_size@@3HA
  0011d	83 c0 20	 add	 eax, 32			; 00000020H
  00120	a3 00 00 00 00	 mov	 DWORD PTR ?received_personal_list_size@@3HA, eax

; 2171 : 
; 2172 : 		received_personal_list_size += sizeof (packet_header_type);

  00125	a1 00 00 00 00	 mov	 eax, DWORD PTR ?received_personal_list_size@@3HA
  0012a	83 c0 18	 add	 eax, 24			; 00000018H
  0012d	a3 00 00 00 00	 mov	 DWORD PTR ?received_personal_list_size@@3HA, eax

; 2173 : 
; 2174 : 		stub_packet = stub_packet->next;

  00132	8b 45 f8	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  00135	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00138	89 4d f8	 mov	 DWORD PTR _stub_packet$[ebp], ecx

; 2175 : 	}

  0013b	eb d5		 jmp	 SHORT $LN4@debug_comm
$LN5@debug_comm:

; 2176 : 
; 2177 : 	//
; 2178 : 	// count up resend packets
; 2179 : 	//
; 2180 : 
; 2181 : 	stub_packet = resend_packet_list;

  0013d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?resend_packet_list@@3PAUSTUB_PACKET_TYPE@@A ; resend_packet_list
  00142	89 45 f8	 mov	 DWORD PTR _stub_packet$[ebp], eax

; 2182 : 
; 2183 : 	resend_list_size = 0;

  00145	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?resend_list_size@@3HA, 0
$LN6@debug_comm:

; 2184 : 
; 2185 : 	while (stub_packet)

  0014f	83 7d f8 00	 cmp	 DWORD PTR _stub_packet$[ebp], 0
  00153	74 25		 je	 SHORT $LN7@debug_comm

; 2186 : 	{
; 2187 : 
; 2188 : 		resend_list_size += sizeof (stub_packet_type);

  00155	a1 00 00 00 00	 mov	 eax, DWORD PTR ?resend_list_size@@3HA
  0015a	83 c0 20	 add	 eax, 32			; 00000020H
  0015d	a3 00 00 00 00	 mov	 DWORD PTR ?resend_list_size@@3HA, eax

; 2189 : 
; 2190 : 		resend_list_size += sizeof (packet_header_type);

  00162	a1 00 00 00 00	 mov	 eax, DWORD PTR ?resend_list_size@@3HA
  00167	83 c0 18	 add	 eax, 24			; 00000018H
  0016a	a3 00 00 00 00	 mov	 DWORD PTR ?resend_list_size@@3HA, eax

; 2191 : 
; 2192 : 		stub_packet = stub_packet->next;

  0016f	8b 45 f8	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  00172	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00175	89 4d f8	 mov	 DWORD PTR _stub_packet$[ebp], ecx

; 2193 : 	}

  00178	eb d5		 jmp	 SHORT $LN6@debug_comm
$LN7@debug_comm:

; 2194 : 
; 2195 : 	//
; 2196 : 	// count up rerequest stub packets
; 2197 : 	//
; 2198 : 
; 2199 : 	stub_packet = rerequest_packet_list;

  0017a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rerequest_packet_list@@3PAUSTUB_PACKET_TYPE@@A ; rerequest_packet_list
  0017f	89 45 f8	 mov	 DWORD PTR _stub_packet$[ebp], eax

; 2200 : 
; 2201 : 	rerequest_list_size = 0;

  00182	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?rerequest_list_size@@3HA, 0
$LN8@debug_comm:

; 2202 : 
; 2203 : 	while (stub_packet)

  0018c	83 7d f8 00	 cmp	 DWORD PTR _stub_packet$[ebp], 0
  00190	74 18		 je	 SHORT $LN9@debug_comm

; 2204 : 	{
; 2205 : 
; 2206 : 		rerequest_list_size += sizeof (stub_packet_type);

  00192	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rerequest_list_size@@3HA
  00197	83 c0 20	 add	 eax, 32			; 00000020H
  0019a	a3 00 00 00 00	 mov	 DWORD PTR ?rerequest_list_size@@3HA, eax

; 2207 : 
; 2208 : 		stub_packet = stub_packet->next;

  0019f	8b 45 f8	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  001a2	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  001a5	89 4d f8	 mov	 DWORD PTR _stub_packet$[ebp], ecx

; 2209 : 	}

  001a8	eb e2		 jmp	 SHORT $LN8@debug_comm
$LN9@debug_comm:

; 2210 : 
; 2211 : 	//
; 2212 : 	// count up connections
; 2213 : 	//
; 2214 : 
; 2215 : 	connection = get_connection_list_head ();

  001aa	e8 00 00 00 00	 call	 ?get_connection_list_head@@YGPAUCONNECTION_LIST_TYPE@@XZ ; get_connection_list_head
  001af	89 45 fc	 mov	 DWORD PTR _connection$[ebp], eax

; 2216 : 
; 2217 : 	total_connection_size = 0;

  001b2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?total_connection_size@@3HA, 0
$LN10@debug_comm:

; 2218 : 
; 2219 : 	while (connection)

  001bc	83 7d fc 00	 cmp	 DWORD PTR _connection$[ebp], 0
  001c0	74 2a		 je	 SHORT $LN11@debug_comm

; 2220 : 	{
; 2221 : 
; 2222 : 		total_connection_size += sizeof (connection_list_type);

  001c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?total_connection_size@@3HA
  001c7	83 c0 58	 add	 eax, 88			; 00000058H
  001ca	a3 00 00 00 00	 mov	 DWORD PTR ?total_connection_size@@3HA, eax

; 2223 : 
; 2224 : 		total_connection_size += connection->connection_receive_buffer_size;

  001cf	8b 45 fc	 mov	 eax, DWORD PTR _connection$[ebp]
  001d2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?total_connection_size@@3HA
  001d8	03 48 1c	 add	 ecx, DWORD PTR [eax+28]
  001db	89 0d 00 00 00
	00		 mov	 DWORD PTR ?total_connection_size@@3HA, ecx

; 2225 : 
; 2226 : 		connection = connection->next;

  001e1	8b 45 fc	 mov	 eax, DWORD PTR _connection$[ebp]
  001e4	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  001e7	89 4d fc	 mov	 DWORD PTR _connection$[ebp], ecx

; 2227 : 	}

  001ea	eb d0		 jmp	 SHORT $LN10@debug_comm
$LN11@debug_comm:

; 2228 : 
; 2229 : 	total_data_size = received_group_list_size +

  001ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?received_group_list_size@@3HA
  001f1	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?received_personal_list_size@@3HA
  001f7	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?resend_list_size@@3HA
  001fd	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?rerequest_list_size@@3HA
  00203	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?command_line_comms_data_record_size@@3HA ; command_line_comms_data_record_size
  00209	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?total_connection_size@@3HA
  0020f	a3 00 00 00 00	 mov	 DWORD PTR ?total_data_size@@3HA, eax

; 2230 : 							received_personal_list_size +
; 2231 : 							resend_list_size +
; 2232 : 							rerequest_list_size +
; 2233 : 							command_line_comms_data_record_size +
; 2234 : 							total_connection_size;
; 2235 : }

  00214	5f		 pop	 edi
  00215	5e		 pop	 esi
  00216	5b		 pop	 ebx
  00217	8b e5		 mov	 esp, ebp
  00219	5d		 pop	 ebp
  0021a	c3		 ret	 0
?debug_comms_stats@@YGXXZ ENDP				; debug_comms_stats
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comms.c
;	COMDAT ?update_resend_packet_list@@YGXH@Z
_TEXT	SEGMENT
_packet$ = -12						; size = 4
_destroy_packet$ = -8					; size = 4
_count$ = -4						; size = 4
_packet_limit$ = 8					; size = 4
?update_resend_packet_list@@YGXH@Z PROC			; update_resend_packet_list, COMDAT

; 2032 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2033 : 
; 2034 : 	int
; 2035 : 		count;
; 2036 : 
; 2037 : 	stub_packet_type
; 2038 : 		*destroy_packet,
; 2039 : 		*packet;
; 2040 : 
; 2041 : 	if (resend_packet_list_counter >= packet_limit)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?resend_packet_list_counter@@3HA ; resend_packet_list_counter
  0000e	3b 45 08	 cmp	 eax, DWORD PTR _packet_limit$[ebp]
  00011	7c 5d		 jl	 SHORT $LN1@update_res

; 2042 : 	{
; 2043 : 
; 2044 : 		#if DEBUG_MODULE >= 2
; 2045 : 
; 2046 : 		debug_log ("COMMS: resend packet list > %d", packet_limit);
; 2047 : 
; 2048 : 		#endif
; 2049 : 
; 2050 : 		packet = resend_packet_list;

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?resend_packet_list@@3PAUSTUB_PACKET_TYPE@@A ; resend_packet_list
  00018	89 45 f4	 mov	 DWORD PTR _packet$[ebp], eax

; 2051 : 
; 2052 : 		count = 0;

  0001b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
$LN2@update_res:

; 2053 : 
; 2054 : 		while (packet)

  00022	83 7d f4 00	 cmp	 DWORD PTR _packet$[ebp], 0
  00026	74 48		 je	 SHORT $LN1@update_res

; 2055 : 		{
; 2056 : 
; 2057 : 			count ++;

  00028	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0002b	83 c0 01	 add	 eax, 1
  0002e	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax

; 2058 : 
; 2059 : 			destroy_packet = packet;

  00031	8b 45 f4	 mov	 eax, DWORD PTR _packet$[ebp]
  00034	89 45 f8	 mov	 DWORD PTR _destroy_packet$[ebp], eax

; 2060 : 
; 2061 : 			packet = packet->next;

  00037	8b 45 f4	 mov	 eax, DWORD PTR _packet$[ebp]
  0003a	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0003d	89 4d f4	 mov	 DWORD PTR _packet$[ebp], ecx

; 2062 : 
; 2063 : 			if (count >= packet_limit)

  00040	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00043	3b 45 08	 cmp	 eax, DWORD PTR _packet_limit$[ebp]
  00046	7c 26		 jl	 SHORT $LN5@update_res

; 2064 : 			{
; 2065 : 
; 2066 : 				remove_stub_packet_from_resend_list (destroy_packet);

  00048	8b 45 f8	 mov	 eax, DWORD PTR _destroy_packet$[ebp]
  0004b	50		 push	 eax
  0004c	68 00 00 00 00	 push	 OFFSET ?resend_packet_list@@3PAUSTUB_PACKET_TYPE@@A ; resend_packet_list
  00051	e8 00 00 00 00	 call	 ?remove_stub_packet_from_list@@YGXPAPAUSTUB_PACKET_TYPE@@PAU1@@Z ; remove_stub_packet_from_list
  00056	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resend_packet_list_counter@@3HA ; resend_packet_list_counter
  0005c	83 e9 01	 sub	 ecx, 1
  0005f	89 0d 00 00 00
	00		 mov	 DWORD PTR ?resend_packet_list_counter@@3HA, ecx ; resend_packet_list_counter

; 2067 : 
; 2068 : 				free_stub_packet (destroy_packet);

  00065	8b 45 f8	 mov	 eax, DWORD PTR _destroy_packet$[ebp]
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?free_stub_packet@@YGXPAUSTUB_PACKET_TYPE@@@Z ; free_stub_packet
$LN5@update_res:

; 2069 : 			}
; 2070 : 		}

  0006e	eb b2		 jmp	 SHORT $LN2@update_res
$LN1@update_res:

; 2071 : 	}
; 2072 : 
; 2073 : 	#if DEBUG_MODULE >= 4
; 2074 : 	{
; 2075 : 
; 2076 : 		char
; 2077 : 			buffer [10],
; 2078 : 			buffer2 [256];
; 2079 : 
; 2080 : 		strcpy (buffer2, "->");
; 2081 : 
; 2082 : 		packet = resend_packet_list;
; 2083 : 
; 2084 : 		while (packet)
; 2085 : 		{
; 2086 : 
; 2087 : 			sprintf (buffer, "%d:", packet->packet->frame_id);
; 2088 : 
; 2089 : 			if ((strlen (buffer2) + strlen (buffer)) > 253)
; 2090 : 			{
; 2091 : 
; 2092 : 				strcat (buffer2, "...");
; 2093 : 
; 2094 : 				break;
; 2095 : 			}
; 2096 : 
; 2097 : 			strcat (buffer2, buffer);
; 2098 : 
; 2099 : 			packet = packet->next;
; 2100 : 		}
; 2101 : 
; 2102 : 		debug_log ("COMMS: RESEND LIST %d", packet_limit);
; 2103 : 
; 2104 : 		debug_log (buffer2);
; 2105 : 	}
; 2106 : 	#endif
; 2107 : }

  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c2 04 00	 ret	 4
?update_resend_packet_list@@YGXH@Z ENDP			; update_resend_packet_list
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comms.c
;	COMDAT ?remove_stub_packet_from_list@@YGXPAPAUSTUB_PACKET_TYPE@@PAU1@@Z
_TEXT	SEGMENT
_prev$ = -8						; size = 4
_next$ = -4						; size = 4
_list$ = 8						; size = 4
_packet$ = 12						; size = 4
?remove_stub_packet_from_list@@YGXPAPAUSTUB_PACKET_TYPE@@PAU1@@Z PROC ; remove_stub_packet_from_list, COMDAT

; 1862 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1863 : 
; 1864 : 	stub_packet_type
; 1865 : 		*next,
; 1866 : 		*prev;
; 1867 : 
; 1868 : 	next = packet->next;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _packet$[ebp]
  0000c	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0000f	89 4d fc	 mov	 DWORD PTR _next$[ebp], ecx

; 1869 : 
; 1870 : 	prev = packet->prev;

  00012	8b 45 0c	 mov	 eax, DWORD PTR _packet$[ebp]
  00015	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00018	89 4d f8	 mov	 DWORD PTR _prev$[ebp], ecx

; 1871 : 
; 1872 : 	if (next)

  0001b	83 7d fc 00	 cmp	 DWORD PTR _next$[ebp], 0
  0001f	74 09		 je	 SHORT $LN2@remove_stu

; 1873 : 	{
; 1874 : 
; 1875 : 		next->prev = prev;

  00021	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00024	8b 4d f8	 mov	 ecx, DWORD PTR _prev$[ebp]
  00027	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN2@remove_stu:

; 1876 : 	}
; 1877 : 
; 1878 : 	if (prev)

  0002a	83 7d f8 00	 cmp	 DWORD PTR _prev$[ebp], 0
  0002e	74 0b		 je	 SHORT $LN3@remove_stu

; 1879 : 	{
; 1880 : 
; 1881 : 		prev->next = next;

  00030	8b 45 f8	 mov	 eax, DWORD PTR _prev$[ebp]
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _next$[ebp]
  00036	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 1882 : 	}
; 1883 : 	else

  00039	eb 08		 jmp	 SHORT $LN4@remove_stu
$LN3@remove_stu:

; 1884 : 	{
; 1885 : 
; 1886 : 		*list = next;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _next$[ebp]
  00041	89 08		 mov	 DWORD PTR [eax], ecx
$LN4@remove_stu:

; 1887 : 	}
; 1888 : 
; 1889 : 	packet->prev = NULL;

  00043	8b 45 0c	 mov	 eax, DWORD PTR _packet$[ebp]
  00046	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 1890 : 
; 1891 : 	packet->next = NULL;

  0004d	8b 45 0c	 mov	 eax, DWORD PTR _packet$[ebp]
  00050	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 1892 : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 08 00	 ret	 8
?remove_stub_packet_from_list@@YGXPAPAUSTUB_PACKET_TYPE@@PAU1@@Z ENDP ; remove_stub_packet_from_list
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comms.c
;	COMDAT ?free_connection_packets@@YGXK@Z
_TEXT	SEGMENT
tv90 = -76						; size = 4
tv76 = -76						; size = 4
_packet$ = -8						; size = 4
_destroy_packet$ = -4					; size = 4
_connection_id$ = 8					; size = 4
?free_connection_packets@@YGXK@Z PROC			; free_connection_packets, COMDAT

; 1730 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1731 : 
; 1732 : 	stub_packet_type
; 1733 : 		*destroy_packet,
; 1734 : 		*packet;
; 1735 : 
; 1736 : 	#if DEBUG_MODULE >= 2
; 1737 : 
; 1738 : 	debug_log ("COMMS: Removing connection %d packets from list", connection_id);
; 1739 : 
; 1740 : 	#endif
; 1741 : 
; 1742 : 	//
; 1743 : 	// Free group packets for connection
; 1744 : 	//
; 1745 : 
; 1746 : 	packet = received_group_packets;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?received_group_packets@@3PAUSTUB_PACKET_TYPE@@A ; received_group_packets
  0000e	89 45 f8	 mov	 DWORD PTR _packet$[ebp], eax
$LN2@free_conne:

; 1747 : 
; 1748 : 	while (packet)

  00011	83 7d f8 00	 cmp	 DWORD PTR _packet$[ebp], 0
  00015	74 7e		 je	 SHORT $LN3@free_conne

; 1749 : 	{
; 1750 : 
; 1751 : 		destroy_packet = packet;

  00017	8b 45 f8	 mov	 eax, DWORD PTR _packet$[ebp]
  0001a	89 45 fc	 mov	 DWORD PTR _destroy_packet$[ebp], eax

; 1752 : 
; 1753 : 		packet = packet->next;

  0001d	8b 45 f8	 mov	 eax, DWORD PTR _packet$[ebp]
  00020	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00023	89 4d f8	 mov	 DWORD PTR _packet$[ebp], ecx

; 1754 : 
; 1755 : 		if (destroy_packet->packet->player_id == connection_id)

  00026	8b 45 fc	 mov	 eax, DWORD PTR _destroy_packet$[ebp]
  00029	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0002c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002f	3b 55 08	 cmp	 edx, DWORD PTR _connection_id$[ebp]
  00032	75 5c		 jne	 SHORT $LN6@free_conne

; 1756 : 		{
; 1757 : 
; 1758 : 			remove_stub_packet_from_receive_list (SEND_TYPE_GROUP, destroy_packet);

  00034	b8 01 00 00 00	 mov	 eax, 1
  00039	85 c0		 test	 eax, eax
  0003b	74 26		 je	 SHORT $LN9@free_conne
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _destroy_packet$[ebp]
  00040	51		 push	 ecx
  00041	68 00 00 00 00	 push	 OFFSET ?received_group_packets@@3PAUSTUB_PACKET_TYPE@@A ; received_group_packets
  00046	e8 00 00 00 00	 call	 ?remove_stub_packet_from_list@@YGXPAPAUSTUB_PACKET_TYPE@@PAU1@@Z ; remove_stub_packet_from_list
  0004b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?group_packet_list_counter@@3HA ; group_packet_list_counter
  00051	89 55 b4	 mov	 DWORD PTR tv76[ebp], edx
  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR ?group_packet_list_counter@@3HA ; group_packet_list_counter
  00059	83 e8 01	 sub	 eax, 1
  0005c	a3 00 00 00 00	 mov	 DWORD PTR ?group_packet_list_counter@@3HA, eax ; group_packet_list_counter
  00061	eb 24		 jmp	 SHORT $LN10@free_conne
$LN9@free_conne:
  00063	8b 4d fc	 mov	 ecx, DWORD PTR _destroy_packet$[ebp]
  00066	51		 push	 ecx
  00067	68 00 00 00 00	 push	 OFFSET ?received_personal_packets@@3PAUSTUB_PACKET_TYPE@@A ; received_personal_packets
  0006c	e8 00 00 00 00	 call	 ?remove_stub_packet_from_list@@YGXPAPAUSTUB_PACKET_TYPE@@PAU1@@Z ; remove_stub_packet_from_list
  00071	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?personal_packet_list_counter@@3HA ; personal_packet_list_counter
  00077	89 55 b4	 mov	 DWORD PTR tv76[ebp], edx
  0007a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?personal_packet_list_counter@@3HA ; personal_packet_list_counter
  0007f	83 e8 01	 sub	 eax, 1
  00082	a3 00 00 00 00	 mov	 DWORD PTR ?personal_packet_list_counter@@3HA, eax ; personal_packet_list_counter
$LN10@free_conne:

; 1759 : 
; 1760 : 			free_stub_packet (destroy_packet);

  00087	8b 45 fc	 mov	 eax, DWORD PTR _destroy_packet$[ebp]
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 ?free_stub_packet@@YGXPAUSTUB_PACKET_TYPE@@@Z ; free_stub_packet
$LN6@free_conne:

; 1761 : 		}
; 1762 : 	}

  00090	e9 7c ff ff ff	 jmp	 $LN2@free_conne
$LN3@free_conne:

; 1763 : 
; 1764 : 	//
; 1765 : 	// Free personal packets for connection
; 1766 : 	//
; 1767 : 
; 1768 : 	packet = received_personal_packets;

  00095	a1 00 00 00 00	 mov	 eax, DWORD PTR ?received_personal_packets@@3PAUSTUB_PACKET_TYPE@@A ; received_personal_packets
  0009a	89 45 f8	 mov	 DWORD PTR _packet$[ebp], eax
$LN4@free_conne:

; 1769 : 
; 1770 : 	while (packet)

  0009d	83 7d f8 00	 cmp	 DWORD PTR _packet$[ebp], 0
  000a1	74 76		 je	 SHORT $LN1@free_conne

; 1771 : 	{
; 1772 : 
; 1773 : 		destroy_packet = packet;

  000a3	8b 45 f8	 mov	 eax, DWORD PTR _packet$[ebp]
  000a6	89 45 fc	 mov	 DWORD PTR _destroy_packet$[ebp], eax

; 1774 : 
; 1775 : 		packet = packet->next;

  000a9	8b 45 f8	 mov	 eax, DWORD PTR _packet$[ebp]
  000ac	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000af	89 4d f8	 mov	 DWORD PTR _packet$[ebp], ecx

; 1776 : 
; 1777 : 		if (destroy_packet->packet->player_id == connection_id)

  000b2	8b 45 fc	 mov	 eax, DWORD PTR _destroy_packet$[ebp]
  000b5	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000b8	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000bb	3b 55 08	 cmp	 edx, DWORD PTR _connection_id$[ebp]
  000be	75 57		 jne	 SHORT $LN7@free_conne

; 1778 : 		{
; 1779 : 
; 1780 : 			remove_stub_packet_from_receive_list (SEND_TYPE_PERSONAL, destroy_packet);

  000c0	33 c0		 xor	 eax, eax
  000c2	74 26		 je	 SHORT $LN11@free_conne
  000c4	8b 4d fc	 mov	 ecx, DWORD PTR _destroy_packet$[ebp]
  000c7	51		 push	 ecx
  000c8	68 00 00 00 00	 push	 OFFSET ?received_group_packets@@3PAUSTUB_PACKET_TYPE@@A ; received_group_packets
  000cd	e8 00 00 00 00	 call	 ?remove_stub_packet_from_list@@YGXPAPAUSTUB_PACKET_TYPE@@PAU1@@Z ; remove_stub_packet_from_list
  000d2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?group_packet_list_counter@@3HA ; group_packet_list_counter
  000d8	89 55 b4	 mov	 DWORD PTR tv90[ebp], edx
  000db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?group_packet_list_counter@@3HA ; group_packet_list_counter
  000e0	83 e8 01	 sub	 eax, 1
  000e3	a3 00 00 00 00	 mov	 DWORD PTR ?group_packet_list_counter@@3HA, eax ; group_packet_list_counter
  000e8	eb 24		 jmp	 SHORT $LN12@free_conne
$LN11@free_conne:
  000ea	8b 4d fc	 mov	 ecx, DWORD PTR _destroy_packet$[ebp]
  000ed	51		 push	 ecx
  000ee	68 00 00 00 00	 push	 OFFSET ?received_personal_packets@@3PAUSTUB_PACKET_TYPE@@A ; received_personal_packets
  000f3	e8 00 00 00 00	 call	 ?remove_stub_packet_from_list@@YGXPAPAUSTUB_PACKET_TYPE@@PAU1@@Z ; remove_stub_packet_from_list
  000f8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?personal_packet_list_counter@@3HA ; personal_packet_list_counter
  000fe	89 55 b4	 mov	 DWORD PTR tv90[ebp], edx
  00101	a1 00 00 00 00	 mov	 eax, DWORD PTR ?personal_packet_list_counter@@3HA ; personal_packet_list_counter
  00106	83 e8 01	 sub	 eax, 1
  00109	a3 00 00 00 00	 mov	 DWORD PTR ?personal_packet_list_counter@@3HA, eax ; personal_packet_list_counter
$LN12@free_conne:

; 1781 : 
; 1782 : 			free_stub_packet (destroy_packet);

  0010e	8b 45 fc	 mov	 eax, DWORD PTR _destroy_packet$[ebp]
  00111	50		 push	 eax
  00112	e8 00 00 00 00	 call	 ?free_stub_packet@@YGXPAUSTUB_PACKET_TYPE@@@Z ; free_stub_packet
$LN7@free_conne:

; 1783 : 		}
; 1784 : 	}

  00117	eb 84		 jmp	 SHORT $LN4@free_conne
$LN1@free_conne:

; 1785 : }

  00119	5f		 pop	 edi
  0011a	5e		 pop	 esi
  0011b	5b		 pop	 ebx
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c2 04 00	 ret	 4
?free_connection_packets@@YGXK@Z ENDP			; free_connection_packets
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comms.c
;	COMDAT ?resend_packet@@YGPAUSTUB_PACKET_TYPE@@KHHW4SEND_TYPES@@@Z
_TEXT	SEGMENT
_stub_packet$ = -12					; size = 4
_index_number$ = -8					; size = 4
_packet_size$ = -4					; size = 4
_player_id$ = 8						; size = 4
_frame_id$ = 12						; size = 4
_packet_id$ = 16					; size = 4
_send_type$ = 20					; size = 4
?resend_packet@@YGPAUSTUB_PACKET_TYPE@@KHHW4SEND_TYPES@@@Z PROC ; resend_packet, COMDAT

; 1616 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1617 : 
; 1618 : 	int
; 1619 : 		packet_size,
; 1620 : 		index_number;
; 1621 : 
; 1622 : 	stub_packet_type
; 1623 : 		*stub_packet;
; 1624 : 
; 1625 : 	#if COMMS_DEBUG_BAD_CONNECTION
; 1626 : 
; 1627 : 	debug_log ("COMMS BAD CONNECTION: Sending packet requested for %s frame %d, packet %d", send_type_names [send_type], frame_id, packet_id);
; 1628 : 
; 1629 : 	#else
; 1630 : 
; 1631 : 	debug_log ("WARNING: PACKET BEING RESENT TO PLAYER %d FOR %s FRAME %d, PACKET %d",

  00009	8b 45 10	 mov	 eax, DWORD PTR _packet_id$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR _frame_id$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 14	 mov	 edx, DWORD PTR _send_type$[ebp]
  00014	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?send_type_names@@3PAPBDA[edx*4]
  0001b	50		 push	 eax
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _player_id$[ebp]
  0001f	51		 push	 ecx
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@LLJOECEO@WARNING?3?5PACKET?5BEING?5RESENT?5TO@
  00025	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0002a	83 c4 14	 add	 esp, 20			; 00000014H

; 1632 : 					player_id,
; 1633 : 					send_type_names [send_type],
; 1634 : 					frame_id,
; 1635 : 					packet_id);
; 1636 : 
; 1637 : 	#endif
; 1638 : 
; 1639 : 	resend_packet_counter ++;

  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?resend_packet_counter@@3HA
  00032	83 c0 01	 add	 eax, 1
  00035	a3 00 00 00 00	 mov	 DWORD PTR ?resend_packet_counter@@3HA, eax

; 1640 : 
; 1641 : 	stub_packet = resend_packet_list;

  0003a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?resend_packet_list@@3PAUSTUB_PACKET_TYPE@@A ; resend_packet_list
  0003f	89 45 f4	 mov	 DWORD PTR _stub_packet$[ebp], eax
$LN2@resend_pac:

; 1642 : 
; 1643 : 	while (stub_packet)

  00042	83 7d f4 00	 cmp	 DWORD PTR _stub_packet$[ebp], 0
  00046	74 5b		 je	 SHORT $LN3@resend_pac

; 1644 : 	{
; 1645 : 
; 1646 : 		if (
; 1647 : 			//(packet->packet->player_id == player_id) && // not sure about this one yet.
; 1648 : 			(stub_packet->send_type == send_type) &&
; 1649 : 			(stub_packet->packet->frame_id == frame_id) &&

  00048	8b 45 f4	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  0004b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004d	3b 4d 14	 cmp	 ecx, DWORD PTR _send_type$[ebp]
  00050	75 46		 jne	 SHORT $LN4@resend_pac
  00052	8b 45 f4	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  00055	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00058	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0005b	3b 55 0c	 cmp	 edx, DWORD PTR _frame_id$[ebp]
  0005e	75 38		 jne	 SHORT $LN4@resend_pac
  00060	8b 45 f4	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  00063	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00066	0f bf 51 0e	 movsx	 edx, WORD PTR [ecx+14]
  0006a	3b 55 10	 cmp	 edx, DWORD PTR _packet_id$[ebp]
  0006d	75 29		 jne	 SHORT $LN4@resend_pac

; 1650 : 			(stub_packet->packet->packet_id == packet_id))
; 1651 : 		{
; 1652 : 
; 1653 : 			packet_size = sizeof (packet_header_type) + stub_packet->packet->data_size;

  0006f	8b 45 f4	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  00072	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00075	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  00079	83 c2 18	 add	 edx, 24			; 00000018H
  0007c	89 55 fc	 mov	 DWORD PTR _packet_size$[ebp], edx

; 1654 : 
; 1655 : 			direct_play_send_data (player_id, (LPVOID) stub_packet->packet, packet_size);

  0007f	8b 45 fc	 mov	 eax, DWORD PTR _packet_size$[ebp]
  00082	50		 push	 eax
  00083	8b 4d f4	 mov	 ecx, DWORD PTR _stub_packet$[ebp]
  00086	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00089	52		 push	 edx
  0008a	8b 45 08	 mov	 eax, DWORD PTR _player_id$[ebp]
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 ?direct_play_send_data@@YGHKPAXH@Z ; direct_play_send_data

; 1656 : 
; 1657 : 			return stub_packet;

  00093	8b 45 f4	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  00096	eb 6a		 jmp	 SHORT $LN1@resend_pac
$LN4@resend_pac:

; 1658 : 		}
; 1659 : 
; 1660 : 		stub_packet = stub_packet->next;

  00098	8b 45 f4	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  0009b	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0009e	89 4d f4	 mov	 DWORD PTR _stub_packet$[ebp], ecx

; 1661 : 	}

  000a1	eb 9f		 jmp	 SHORT $LN2@resend_pac
$LN3@resend_pac:

; 1662 : 
; 1663 : 	debug_log ("COMMS: No packet to resend, REJECTING player %d", player_id);

  000a3	8b 45 08	 mov	 eax, DWORD PTR _player_id$[ebp]
  000a6	50		 push	 eax
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@LKHHHLKE@COMMS?3?5No?5packet?5to?5resend?0?5REJ@
  000ac	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000b1	83 c4 08	 add	 esp, 8

; 1664 : 
; 1665 : 	if (get_comms_model () == COMMS_MODEL_SERVER)

  000b4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  000bb	75 13		 jne	 SHORT $LN5@resend_pac

; 1666 : 	{
; 1667 : 
; 1668 : 		// never received as client is waiting for other packets....
; 1669 : 
; 1670 : 		send_packet (player_id, PACKET_TYPE_SERVER_REJECTED, NULL, 0, SEND_TYPE_PERSONAL);

  000bd	6a 00		 push	 0
  000bf	6a 00		 push	 0
  000c1	6a 00		 push	 0
  000c3	6a 0d		 push	 13			; 0000000dH
  000c5	8b 45 08	 mov	 eax, DWORD PTR _player_id$[ebp]
  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 ?send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z ; send_packet

; 1671 : 	}
; 1672 : 	else

  000ce	eb 30		 jmp	 SHORT $LN6@resend_pac
$LN5@resend_pac:

; 1673 : 	{
; 1674 : 
; 1675 : 		if (get_gunship_entity ())

  000d0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  000d7	74 27		 je	 SHORT $LN6@resend_pac

; 1676 : 		{
; 1677 : 
; 1678 : 			index_number = get_local_entity_index (get_gunship_entity ());

  000d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000de	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  000e4	c1 f8 04	 sar	 eax, 4
  000e7	89 45 f8	 mov	 DWORD PTR _index_number$[ebp], eax

; 1679 : 
; 1680 : 			send_packet (get_server_id (), PACKET_TYPE_END_GAME, (unsigned char *) &index_number, 4, SEND_TYPE_PERSONAL);

  000ea	6a 00		 push	 0
  000ec	6a 04		 push	 4
  000ee	8d 45 f8	 lea	 eax, DWORD PTR _index_number$[ebp]
  000f1	50		 push	 eax
  000f2	6a 0e		 push	 14			; 0000000eH
  000f4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?system_server_id@@3KA ; system_server_id
  000fa	51		 push	 ecx
  000fb	e8 00 00 00 00	 call	 ?send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z ; send_packet
$LN6@resend_pac:

; 1681 : 
; 1682 : 			// should this call start_game_exit () ?
; 1683 : 		}
; 1684 : 	}
; 1685 : 
; 1686 : 	#if DEBUG_MODULE >= 2
; 1687 : 	{
; 1688 : 
; 1689 : 		char
; 1690 : 			buffer [30],
; 1691 : 			buffer2 [1024];
; 1692 : 
; 1693 : 		strcpy (buffer2, "->");
; 1694 : 
; 1695 : 		stub_packet = resend_packet_list;
; 1696 : 
; 1697 : 		while (stub_packet)
; 1698 : 		{
; 1699 : 
; 1700 : 			sprintf (buffer, "(%d:%d:%d)", stub_packet->packet->player_id, stub_packet->packet->frame_id, stub_packet->packet->packet_id);
; 1701 : 
; 1702 : 			if ((strlen (buffer2) + strlen (buffer)) > 1020)
; 1703 : 			{
; 1704 : 
; 1705 : 				strcat (buffer2, "...");
; 1706 : 
; 1707 : 				break;
; 1708 : 			}
; 1709 : 
; 1710 : 			strcat (buffer2, buffer);
; 1711 : 
; 1712 : 			stub_packet = stub_packet->next;
; 1713 : 		}
; 1714 : 
; 1715 : 		debug_log ("COMMS: RESEND LIST");
; 1716 : 
; 1717 : 		debug_log (buffer2);
; 1718 : 	}
; 1719 : 
; 1720 : 	#endif
; 1721 : 
; 1722 : 	return NULL;

  00100	33 c0		 xor	 eax, eax
$LN1@resend_pac:

; 1723 : }

  00102	5f		 pop	 edi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c2 10 00	 ret	 16			; 00000010H
?resend_packet@@YGPAUSTUB_PACKET_TYPE@@KHHW4SEND_TYPES@@@Z ENDP ; resend_packet
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comms.c
;	COMDAT ?get_packet_destination@@YGKXZ
_TEXT	SEGMENT
tv64 = -72						; size = 4
_id$ = -4						; size = 4
?get_packet_destination@@YGKXZ PROC			; get_packet_destination, COMDAT

; 1362 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1363 : 
; 1364 : 	DPID
; 1365 : 		id;
; 1366 : 
; 1367 : 	switch (get_comms_model ())

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A ; system_comms_model
  0000e	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  00011	83 7d b8 00	 cmp	 DWORD PTR tv64[ebp], 0
  00015	74 08		 je	 SHORT $LN4@get_packet
  00017	83 7d b8 01	 cmp	 DWORD PTR tv64[ebp], 1
  0001b	74 0b		 je	 SHORT $LN5@get_packet
  0001d	eb 11		 jmp	 SHORT $LN2@get_packet
$LN4@get_packet:

; 1368 : 	{
; 1369 : 
; 1370 : 		case COMMS_MODEL_SERVER:
; 1371 : 		{
; 1372 : 			// Jabberwock 050303 Remove DP groups
; 1373 : 			//id = direct_play_get_group_id ();
; 1374 : 			id = DPID_ALLPLAYERS;

  0001f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _id$[ebp], 0

; 1375 : 
; 1376 : 			break;

  00026	eb 08		 jmp	 SHORT $LN2@get_packet
$LN5@get_packet:

; 1377 : 		}
; 1378 : 		case COMMS_MODEL_CLIENT:
; 1379 : 		{
; 1380 : 
; 1381 : 			id = get_server_id ();

  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?system_server_id@@3KA ; system_server_id
  0002d	89 45 fc	 mov	 DWORD PTR _id$[ebp], eax
$LN2@get_packet:

; 1382 : 
; 1383 : 			break;
; 1384 : 		}
; 1385 : 	}
; 1386 : 
; 1387 : 	return (id);

  00030	8b 45 fc	 mov	 eax, DWORD PTR _id$[ebp]

; 1388 : }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
?get_packet_destination@@YGKXZ ENDP			; get_packet_destination
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comms.c
;	COMDAT ?process_packet_list@@YGHW4SEND_TYPES@@PAUCONNECTION_LIST_TYPE@@PAKPAPAEPAH@Z
_TEXT	SEGMENT
tv443 = -132						; size = 8
tv336 = -132						; size = 8
tv440 = -124						; size = 4
tv333 = -124						; size = 4
tv237 = -124						; size = 4
_this_packet$ = -56					; size = 4
_packet_list$ = -52					; size = 4
_packet$ = -48						; size = 4
_closest_packet$ = -44					; size = 4
_new_buffer$ = -40					; size = 4
_temp_char$ = -36					; size = 4
_data_ptr_offset$ = -32					; size = 4
_predicted_size$ = -28					; size = 4
_received_flag$ = -24					; size = 4
_closest_time$ = -20					; size = 4
_frame_ptr$ = -16					; size = 4
_frame_id$ = -12					; size = 4
_loop$ = -8						; size = 4
_type$ = -4						; size = 4
_send_type$ = 8						; size = 4
_connection$ = 12					; size = 4
_player_id$ = 16					; size = 4
_data$ = 20						; size = 4
_size$ = 24						; size = 4
?process_packet_list@@YGHW4SEND_TYPES@@PAUCONNECTION_LIST_TYPE@@PAKPAPAEPAH@Z PROC ; process_packet_list, COMDAT

; 1018 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1019 : 
; 1020 : 	packet_types
; 1021 : 		type;
; 1022 : 
; 1023 : 	int
; 1024 : 		loop,
; 1025 : 		frame_id,
; 1026 : 		*frame_ptr,
; 1027 : 		closest_time,
; 1028 : 		received_flag,
; 1029 : 		predicted_size,
; 1030 : 		data_ptr_offset;
; 1031 : 
; 1032 : 	unsigned char
; 1033 : 		*temp_char,
; 1034 : 		*new_buffer;
; 1035 : 
; 1036 : 	stub_packet_type
; 1037 : 		*closest_packet = NULL,

  0000c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _closest_packet$[ebp], 0

; 1038 : 		*packet,
; 1039 : 		**packet_list,
; 1040 : 		*this_packet;
; 1041 : 
; 1042 : 	if (send_type == SEND_TYPE_GROUP)

  00013	83 7d 08 01	 cmp	 DWORD PTR _send_type$[ebp], 1
  00017	75 2a		 jne	 SHORT $LN12@process_pa

; 1043 : 	{
; 1044 : 
; 1045 : 		frame_ptr = &connection->receive_group_frame_id;

  00019	8b 45 0c	 mov	 eax, DWORD PTR _connection$[ebp]
  0001c	83 c0 10	 add	 eax, 16			; 00000010H
  0001f	89 45 f0	 mov	 DWORD PTR _frame_ptr$[ebp], eax

; 1046 : 
; 1047 : 		packet_list = &received_group_packets;

  00022	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _packet_list$[ebp], OFFSET ?received_group_packets@@3PAUSTUB_PACKET_TYPE@@A ; received_group_packets

; 1048 : 
; 1049 : 		if ((get_comms_model () == COMMS_MODEL_CLIENT) && (*frame_ptr == 0))

  00029	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 1 ; system_comms_model
  00030	75 0f		 jne	 SHORT $LN14@process_pa
  00032	8b 45 f0	 mov	 eax, DWORD PTR _frame_ptr$[ebp]
  00035	83 38 00	 cmp	 DWORD PTR [eax], 0
  00038	75 07		 jne	 SHORT $LN14@process_pa

; 1050 : 		{
; 1051 : 
; 1052 : 			return PACKET_TYPE_INVALID;

  0003a	33 c0		 xor	 eax, eax
  0003c	e9 b3 04 00 00	 jmp	 $LN22@process_pa
$LN14@process_pa:

; 1053 : 		}
; 1054 : 	}
; 1055 : 	else

  00041	eb 10		 jmp	 SHORT $LN13@process_pa
$LN12@process_pa:

; 1056 : 	{
; 1057 : 
; 1058 : 		frame_ptr = &connection->receive_personal_frame_id;

  00043	8b 45 0c	 mov	 eax, DWORD PTR _connection$[ebp]
  00046	83 c0 14	 add	 eax, 20			; 00000014H
  00049	89 45 f0	 mov	 DWORD PTR _frame_ptr$[ebp], eax

; 1059 : 
; 1060 : 		packet_list = &received_personal_packets;

  0004c	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _packet_list$[ebp], OFFSET ?received_personal_packets@@3PAUSTUB_PACKET_TYPE@@A ; received_personal_packets
$LN13@process_pa:

; 1061 : 	}
; 1062 : 
; 1063 : 	#if DEBUG_MODULE >= 2
; 1064 : 
; 1065 : 	debug_log ("COMMS: Checking for %s packets for id %d, frame %d", send_type_names [send_type], connection->connection_id, *frame_ptr);
; 1066 : 
; 1067 : 	#endif
; 1068 : 
; 1069 : 	this_packet = get_stub_packet_for_frame (send_type, connection->connection_id, *frame_ptr, 1);

  00053	6a 01		 push	 1
  00055	8b 45 f0	 mov	 eax, DWORD PTR _frame_ptr$[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	51		 push	 ecx
  0005b	8b 55 0c	 mov	 edx, DWORD PTR _connection$[ebp]
  0005e	8b 02		 mov	 eax, DWORD PTR [edx]
  00060	50		 push	 eax
  00061	8b 4d 08	 mov	 ecx, DWORD PTR _send_type$[ebp]
  00064	51		 push	 ecx
  00065	e8 00 00 00 00	 call	 ?get_stub_packet_for_frame@@YGPAUSTUB_PACKET_TYPE@@W4SEND_TYPES@@KHH@Z ; get_stub_packet_for_frame
  0006a	89 45 c8	 mov	 DWORD PTR _this_packet$[ebp], eax

; 1070 : 
; 1071 : 	//
; 1072 : 	// is it time to re-request the packet ? ie has then next packet arrived and N seconds gone by ?
; 1073 : 	// NB. only capable of re-requesting one packet at a time...
; 1074 : 	//
; 1075 : 
; 1076 : 	if (!this_packet)

  0006d	83 7d c8 00	 cmp	 DWORD PTR _this_packet$[ebp], 0
  00071	0f 85 d3 00 00
	00		 jne	 $LN15@process_pa

; 1077 : 	{
; 1078 : 
; 1079 : 		//
; 1080 : 		// Find the closest next packet to the missing one
; 1081 : 		//
; 1082 : 
; 1083 : 		packet = *packet_list;

  00077	8b 45 cc	 mov	 eax, DWORD PTR _packet_list$[ebp]
  0007a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007c	89 4d d0	 mov	 DWORD PTR _packet$[ebp], ecx
$LN2@process_pa:

; 1084 : 
; 1085 : 		while (packet)

  0007f	83 7d d0 00	 cmp	 DWORD PTR _packet$[ebp], 0
  00083	74 55		 je	 SHORT $LN3@process_pa

; 1086 : 		{
; 1087 : 
; 1088 : 			if ((packet->send_type == send_type) &&
; 1089 : 				(packet->packet->frame_id > *frame_ptr) &&

  00085	8b 45 d0	 mov	 eax, DWORD PTR _packet$[ebp]
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	3b 4d 08	 cmp	 ecx, DWORD PTR _send_type$[ebp]
  0008d	75 40		 jne	 SHORT $LN17@process_pa
  0008f	8b 45 d0	 mov	 eax, DWORD PTR _packet$[ebp]
  00092	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00095	8b 55 f0	 mov	 edx, DWORD PTR _frame_ptr$[ebp]
  00098	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0009b	3b 02		 cmp	 eax, DWORD PTR [edx]
  0009d	7e 30		 jle	 SHORT $LN17@process_pa
  0009f	8b 45 d0	 mov	 eax, DWORD PTR _packet$[ebp]
  000a2	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000a5	8b 55 0c	 mov	 edx, DWORD PTR _connection$[ebp]
  000a8	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000ab	3b 02		 cmp	 eax, DWORD PTR [edx]
  000ad	75 20		 jne	 SHORT $LN17@process_pa

; 1090 : 				(packet->packet->player_id == connection->connection_id))
; 1091 : 			{
; 1092 : 
; 1093 : 				if ((!closest_packet) || (packet->packet->frame_id < closest_packet->packet->frame_id))

  000af	83 7d d4 00	 cmp	 DWORD PTR _closest_packet$[ebp], 0
  000b3	74 14		 je	 SHORT $LN18@process_pa
  000b5	8b 45 d0	 mov	 eax, DWORD PTR _packet$[ebp]
  000b8	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000bb	8b 55 d4	 mov	 edx, DWORD PTR _closest_packet$[ebp]
  000be	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000c1	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  000c4	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  000c7	7d 06		 jge	 SHORT $LN17@process_pa
$LN18@process_pa:

; 1094 : 				{
; 1095 : 
; 1096 : 					closest_packet = packet;

  000c9	8b 45 d0	 mov	 eax, DWORD PTR _packet$[ebp]
  000cc	89 45 d4	 mov	 DWORD PTR _closest_packet$[ebp], eax
$LN17@process_pa:

; 1097 : 				}
; 1098 : 			}
; 1099 : 
; 1100 : 			packet = packet->next;

  000cf	8b 45 d0	 mov	 eax, DWORD PTR _packet$[ebp]
  000d2	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000d5	89 4d d0	 mov	 DWORD PTR _packet$[ebp], ecx

; 1101 : 		}

  000d8	eb a5		 jmp	 SHORT $LN2@process_pa
$LN3@process_pa:

; 1102 : 
; 1103 : 		//
; 1104 : 		//
; 1105 : 		//
; 1106 : 
; 1107 : 		if (closest_packet)

  000da	83 7d d4 00	 cmp	 DWORD PTR _closest_packet$[ebp], 0
  000de	74 63		 je	 SHORT $LN20@process_pa

; 1108 : 		{
; 1109 : 
; 1110 : 			if ((get_system_time () - closest_packet->received_time) > (command_line_comms_packet_resend_timer * TIME_1_SECOND))

  000e0	e8 00 00 00 00	 call	 ?get_system_time@@YGIXZ	; get_system_time
  000e5	8b 4d d4	 mov	 ecx, DWORD PTR _closest_packet$[ebp]
  000e8	2b 41 10	 sub	 eax, DWORD PTR [ecx+16]
  000eb	89 45 84	 mov	 DWORD PTR tv333[ebp], eax
  000ee	f2 0f 2a 45 84	 cvtsi2sd xmm0, DWORD PTR tv333[ebp]
  000f3	8b 55 84	 mov	 edx, DWORD PTR tv333[ebp]
  000f6	c1 ea 1f	 shr	 edx, 31			; 0000001fH
  000f9	f2 0f 58 04 d5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
  00102	f2 0f 11 85 7c
	ff ff ff	 movsd	 QWORD PTR tv336[ebp], xmm0
  0010a	f2 0f 5a 85 7c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv336[ebp]
  00112	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?command_line_comms_packet_resend_timer@@3MA
  0011a	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@447a0000
  00122	0f 2f c1	 comiss	 xmm0, xmm1
  00125	76 1c		 jbe	 SHORT $LN20@process_pa

; 1111 : 			{
; 1112 : 
; 1113 : 				#if DEBUG_MODULE >= 1
; 1114 : 
; 1115 : 				debug_log ("COMMS: WAITING FOR %s FRAME %d, closest packet (%d %d) arrived %f seconds ago (None have arrived)",
; 1116 : 								send_type_names [send_type],
; 1117 : 								*frame_ptr,
; 1118 : 								closest_packet->packet->frame_id,
; 1119 : 								closest_packet->packet->packet_id,
; 1120 : 								(float) (get_system_time () - closest_packet->received_time) / TIME_1_SECOND);
; 1121 : 
; 1122 : 				#endif
; 1123 : 
; 1124 : 				request_resend_packet (connection, *frame_ptr, 1, closest_packet->received_time, send_type);

  00127	8b 45 08	 mov	 eax, DWORD PTR _send_type$[ebp]
  0012a	50		 push	 eax
  0012b	8b 4d d4	 mov	 ecx, DWORD PTR _closest_packet$[ebp]
  0012e	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00131	52		 push	 edx
  00132	6a 01		 push	 1
  00134	8b 45 f0	 mov	 eax, DWORD PTR _frame_ptr$[ebp]
  00137	8b 08		 mov	 ecx, DWORD PTR [eax]
  00139	51		 push	 ecx
  0013a	8b 55 0c	 mov	 edx, DWORD PTR _connection$[ebp]
  0013d	52		 push	 edx
  0013e	e8 00 00 00 00	 call	 ?request_resend_packet@@YGXPAUCONNECTION_LIST_TYPE@@HHHW4SEND_TYPES@@@Z ; request_resend_packet
$LN20@process_pa:

; 1125 : 			}
; 1126 : 		}
; 1127 : 
; 1128 : 		return PACKET_TYPE_INVALID;

  00143	33 c0		 xor	 eax, eax
  00145	e9 aa 03 00 00	 jmp	 $LN22@process_pa
$LN15@process_pa:

; 1129 : 	}
; 1130 : 
; 1131 : 	#if DEBUG_MODULE >= 2
; 1132 : 
; 1133 : 	if (send_type == SEND_TYPE_GROUP)
; 1134 : 	{
; 1135 : 
; 1136 : 		debug_log ("COMMS: Process GROUP packet list");
; 1137 : 	}
; 1138 : 	else
; 1139 : 	{
; 1140 : 
; 1141 : 		debug_log ("COMMS: Process PERSONAL packet list");
; 1142 : 	}
; 1143 : 
; 1144 : 	#endif
; 1145 : 
; 1146 : 	*player_id = this_packet->packet->player_id;

  0014a	8b 45 c8	 mov	 eax, DWORD PTR _this_packet$[ebp]
  0014d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00150	8b 55 10	 mov	 edx, DWORD PTR _player_id$[ebp]
  00153	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00156	89 02		 mov	 DWORD PTR [edx], eax

; 1147 : 
; 1148 : 	frame_id = this_packet->packet->frame_id;

  00158	8b 45 c8	 mov	 eax, DWORD PTR _this_packet$[ebp]
  0015b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0015e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00161	89 55 f4	 mov	 DWORD PTR _frame_id$[ebp], edx

; 1149 : 
; 1150 : 	type = this_packet->packet->type;

  00164	8b 45 c8	 mov	 eax, DWORD PTR _this_packet$[ebp]
  00167	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0016a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0016c	89 55 fc	 mov	 DWORD PTR _type$[ebp], edx

; 1151 : 
; 1152 : 	// do we have all packets for this frame
; 1153 : 
; 1154 : 	received_flag = count_packets_for_frame (*packet_list, *player_id, frame_id);

  0016f	8b 45 f4	 mov	 eax, DWORD PTR _frame_id$[ebp]
  00172	50		 push	 eax
  00173	8b 4d 10	 mov	 ecx, DWORD PTR _player_id$[ebp]
  00176	8b 11		 mov	 edx, DWORD PTR [ecx]
  00178	52		 push	 edx
  00179	8b 45 cc	 mov	 eax, DWORD PTR _packet_list$[ebp]
  0017c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0017e	51		 push	 ecx
  0017f	e8 00 00 00 00	 call	 ?count_packets_for_frame@@YGHPAUSTUB_PACKET_TYPE@@HH@Z ; count_packets_for_frame
  00184	89 45 e8	 mov	 DWORD PTR _received_flag$[ebp], eax

; 1155 : 
; 1156 : 	connection->number_of_packets = this_packet->packet->number_of_packets;

  00187	8b 45 c8	 mov	 eax, DWORD PTR _this_packet$[ebp]
  0018a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0018d	0f bf 51 0c	 movsx	 edx, WORD PTR [ecx+12]
  00191	8b 45 0c	 mov	 eax, DWORD PTR _connection$[ebp]
  00194	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 1157 : 
; 1158 : 	if (received_flag == this_packet->packet->number_of_packets)

  00197	8b 45 c8	 mov	 eax, DWORD PTR _this_packet$[ebp]
  0019a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0019d	0f bf 51 0c	 movsx	 edx, WORD PTR [ecx+12]
  001a1	39 55 e8	 cmp	 DWORD PTR _received_flag$[ebp], edx
  001a4	0f 85 29 02 00
	00		 jne	 $LN21@process_pa

; 1159 : 	{
; 1160 : 
; 1161 : 		#if DEBUG_MODULE >= 2
; 1162 : 
; 1163 : 		debug_log ("COMMS: received all %s packets for frame %d (total = %d)", send_type_names [send_type], frame_id, received_flag);
; 1164 : 
; 1165 : 		#endif
; 1166 : 
; 1167 : 		connection->packet_rerequested = 0;

  001aa	8b 45 0c	 mov	 eax, DWORD PTR _connection$[ebp]
  001ad	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1168 : 
; 1169 : 		connection->size = 0;

  001b4	8b 45 0c	 mov	 eax, DWORD PTR _connection$[ebp]
  001b7	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 1170 : 
; 1171 : 		data_ptr_offset = 0;

  001be	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _data_ptr_offset$[ebp], 0

; 1172 : 
; 1173 : 		for (loop = 1; loop <= connection->number_of_packets; loop ++)

  001c5	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 1
  001cc	eb 09		 jmp	 SHORT $LN6@process_pa
$LN4@process_pa:
  001ce	8b 45 f8	 mov	 eax, DWORD PTR _loop$[ebp]
  001d1	83 c0 01	 add	 eax, 1
  001d4	89 45 f8	 mov	 DWORD PTR _loop$[ebp], eax
$LN6@process_pa:
  001d7	8b 45 0c	 mov	 eax, DWORD PTR _connection$[ebp]
  001da	8b 4d f8	 mov	 ecx, DWORD PTR _loop$[ebp]
  001dd	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  001e0	0f 8f bd 01 00
	00		 jg	 $LN5@process_pa

; 1174 : 		{
; 1175 : 
; 1176 : 			this_packet = get_stub_packet_for_frame (send_type, connection->connection_id, frame_id, loop);

  001e6	8b 45 f8	 mov	 eax, DWORD PTR _loop$[ebp]
  001e9	50		 push	 eax
  001ea	8b 4d f4	 mov	 ecx, DWORD PTR _frame_id$[ebp]
  001ed	51		 push	 ecx
  001ee	8b 55 0c	 mov	 edx, DWORD PTR _connection$[ebp]
  001f1	8b 02		 mov	 eax, DWORD PTR [edx]
  001f3	50		 push	 eax
  001f4	8b 4d 08	 mov	 ecx, DWORD PTR _send_type$[ebp]
  001f7	51		 push	 ecx
  001f8	e8 00 00 00 00	 call	 ?get_stub_packet_for_frame@@YGPAUSTUB_PACKET_TYPE@@W4SEND_TYPES@@KHH@Z ; get_stub_packet_for_frame
  001fd	89 45 c8	 mov	 DWORD PTR _this_packet$[ebp], eax

; 1177 : 
; 1178 : 			//
; 1179 : 			// MUST have all packets by this point. Assert should NEVER fail
; 1180 : 			//
; 1181 : 
; 1182 : 			debug_assert (this_packet);

  00200	83 7d c8 00	 cmp	 DWORD PTR _this_packet$[ebp], 0
  00204	75 22		 jne	 SHORT $LN23@process_pa
  00206	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??process_packet_list@@YGHW4SEND_TYPES@@PAUCONNECTION_LIST_TYPE@@PAKPAPAEPAH@Z@4JA
  0020b	05 a4 00 00 00	 add	 eax, 164		; 000000a4H
  00210	50		 push	 eax
  00211	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@BBIMMIBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00216	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DJJBABNE@this_packet@
  0021b	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PODNONFH@ASSERT?5?$CFs?5?$CI?$CFs?3?$CFd?$CJ@
  00220	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00225	83 c4 10	 add	 esp, 16			; 00000010H
$LN23@process_pa:

; 1183 : 
; 1184 : 			connection->size += this_packet->packet->data_size;

  00228	8b 45 c8	 mov	 eax, DWORD PTR _this_packet$[ebp]
  0022b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0022e	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  00232	8b 45 0c	 mov	 eax, DWORD PTR _connection$[ebp]
  00235	03 50 20	 add	 edx, DWORD PTR [eax+32]
  00238	8b 4d 0c	 mov	 ecx, DWORD PTR _connection$[ebp]
  0023b	89 51 20	 mov	 DWORD PTR [ecx+32], edx

; 1185 : 
; 1186 : 			predicted_size = ((this_packet->packet->packet_id - 1) * command_line_comms_packet_data_size) + this_packet->packet->data_size;

  0023e	8b 45 c8	 mov	 eax, DWORD PTR _this_packet$[ebp]
  00241	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00244	0f bf 51 0e	 movsx	 edx, WORD PTR [ecx+14]
  00248	83 ea 01	 sub	 edx, 1
  0024b	0f af 15 00 00
	00 00		 imul	 edx, DWORD PTR ?command_line_comms_packet_data_size@@3HA ; command_line_comms_packet_data_size
  00252	8b 45 c8	 mov	 eax, DWORD PTR _this_packet$[ebp]
  00255	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00258	0f bf 41 10	 movsx	 eax, WORD PTR [ecx+16]
  0025c	03 d0		 add	 edx, eax
  0025e	89 55 e4	 mov	 DWORD PTR _predicted_size$[ebp], edx

; 1187 : 
; 1188 : 			#if DEBUG_MODULE >= 3
; 1189 : 
; 1190 : 			debug_log ("COMMS: predicted data size = %d, buffer = %d", predicted_size, connection->connection_receive_buffer_size);
; 1191 : 
; 1192 : 			#endif
; 1193 : 
; 1194 : 			#if COMMS_STATS
; 1195 : 
; 1196 : 			if (predicted_size > max_processed_size)

  00261	f3 0f 2a 45 e4	 cvtsi2ss xmm0, DWORD PTR _predicted_size$[ebp]
  00266	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?max_processed_size@@3MA
  0026d	76 0d		 jbe	 SHORT $LN24@process_pa

; 1197 : 			{
; 1198 : 
; 1199 : 				max_processed_size = predicted_size;

  0026f	f3 0f 2a 45 e4	 cvtsi2ss xmm0, DWORD PTR _predicted_size$[ebp]
  00274	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?max_processed_size@@3MA, xmm0
$LN24@process_pa:

; 1200 : 			}
; 1201 : 
; 1202 : 			#endif
; 1203 : 
; 1204 : 			//
; 1205 : 			// receive buffer not big enough so malloc some more.
; 1206 : 			//
; 1207 : 
; 1208 : 			if (predicted_size >= connection->connection_receive_buffer_size)

  0027c	8b 45 0c	 mov	 eax, DWORD PTR _connection$[ebp]
  0027f	8b 4d e4	 mov	 ecx, DWORD PTR _predicted_size$[ebp]
  00282	3b 48 1c	 cmp	 ecx, DWORD PTR [eax+28]
  00285	7c 71		 jl	 SHORT $LN25@process_pa

; 1209 : 			{
; 1210 : 
; 1211 : 				new_buffer = (unsigned char *) malloc_heap_mem (connection->connection_receive_buffer_size * 2);

  00287	8b 45 0c	 mov	 eax, DWORD PTR _connection$[ebp]
  0028a	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0028d	d1 e1		 shl	 ecx, 1
  0028f	51		 push	 ecx
  00290	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  00295	89 45 d8	 mov	 DWORD PTR _new_buffer$[ebp], eax

; 1212 : 
; 1213 : 				ASSERT (connection->connection_receive_buffer);

  00298	8b 45 0c	 mov	 eax, DWORD PTR _connection$[ebp]
  0029b	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  0029f	75 1a		 jne	 SHORT $LN26@process_pa
  002a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??process_packet_list@@YGHW4SEND_TYPES@@PAUCONNECTION_LIST_TYPE@@PAKPAPAEPAH@Z@4JA
  002a6	05 c3 00 00 00	 add	 eax, 195		; 000000c3H
  002ab	50		 push	 eax
  002ac	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@BBIMMIBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  002b1	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@JDALEAHI@connection?9?$DOconnection_receive_@
  002b6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN26@process_pa:

; 1214 : 
; 1215 : 				memcpy (new_buffer, connection->connection_receive_buffer, connection->connection_receive_buffer_size);

  002bb	8b 45 0c	 mov	 eax, DWORD PTR _connection$[ebp]
  002be	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  002c1	51		 push	 ecx
  002c2	8b 55 0c	 mov	 edx, DWORD PTR _connection$[ebp]
  002c5	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  002c8	50		 push	 eax
  002c9	8b 4d d8	 mov	 ecx, DWORD PTR _new_buffer$[ebp]
  002cc	51		 push	 ecx
  002cd	e8 00 00 00 00	 call	 _memcpy
  002d2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1216 : 
; 1217 : 				free_mem (connection->connection_receive_buffer);

  002d5	8b 45 0c	 mov	 eax, DWORD PTR _connection$[ebp]
  002d8	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  002db	51		 push	 ecx
  002dc	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem

; 1218 : 
; 1219 : 				connection->connection_receive_buffer = new_buffer;

  002e1	8b 45 0c	 mov	 eax, DWORD PTR _connection$[ebp]
  002e4	8b 4d d8	 mov	 ecx, DWORD PTR _new_buffer$[ebp]
  002e7	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 1220 : 
; 1221 : 				connection->connection_receive_buffer_size *= 2;

  002ea	8b 45 0c	 mov	 eax, DWORD PTR _connection$[ebp]
  002ed	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  002f0	d1 e1		 shl	 ecx, 1
  002f2	8b 55 0c	 mov	 edx, DWORD PTR _connection$[ebp]
  002f5	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx
$LN25@process_pa:

; 1222 : 
; 1223 : 				#if DEBUG_MODULE
; 1224 : 
; 1225 : 				debug_log ("COMMS:     Connection receive buffer too small, mallocing %d", connection->connection_receive_buffer_size);
; 1226 : 
; 1227 : 				#endif
; 1228 : 			}
; 1229 : 
; 1230 : 			temp_char = (unsigned char *) this_packet->packet;

  002f8	8b 45 c8	 mov	 eax, DWORD PTR _this_packet$[ebp]
  002fb	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002fe	89 4d dc	 mov	 DWORD PTR _temp_char$[ebp], ecx

; 1231 : 
; 1232 : 			memcpy (&connection->connection_receive_buffer [data_ptr_offset], &temp_char [sizeof (packet_header_type)], this_packet->packet->data_size);

  00301	8b 45 c8	 mov	 eax, DWORD PTR _this_packet$[ebp]
  00304	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00307	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  0030b	52		 push	 edx
  0030c	b8 01 00 00 00	 mov	 eax, 1
  00311	6b c8 18	 imul	 ecx, eax, 24
  00314	03 4d dc	 add	 ecx, DWORD PTR _temp_char$[ebp]
  00317	51		 push	 ecx
  00318	8b 55 0c	 mov	 edx, DWORD PTR _connection$[ebp]
  0031b	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0031e	03 45 e0	 add	 eax, DWORD PTR _data_ptr_offset$[ebp]
  00321	50		 push	 eax
  00322	e8 00 00 00 00	 call	 _memcpy
  00327	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1233 : 
; 1234 : 			data_ptr_offset += this_packet->packet->data_size;

  0032a	8b 45 c8	 mov	 eax, DWORD PTR _this_packet$[ebp]
  0032d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00330	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  00334	03 55 e0	 add	 edx, DWORD PTR _data_ptr_offset$[ebp]
  00337	89 55 e0	 mov	 DWORD PTR _data_ptr_offset$[ebp], edx

; 1235 : 
; 1236 : 			#if DEBUG_MODULE >= 3
; 1237 : 
; 1238 : 			debug_log ("COMMS:     Processing %s packet frame_id = %d, packet_id %d, size %d, player %d", send_type_names [this_packet->send_type], this_packet->packet->frame_id, this_packet->packet->packet_id, this_packet->packet->data_size, this_packet->packet->player_id);
; 1239 : 
; 1240 : 			#endif
; 1241 : 
; 1242 : 			remove_stub_packet_from_receive_list (send_type, this_packet);

  0033a	83 7d 08 01	 cmp	 DWORD PTR _send_type$[ebp], 1
  0033e	75 28		 jne	 SHORT $LN34@process_pa
  00340	8b 45 c8	 mov	 eax, DWORD PTR _this_packet$[ebp]
  00343	50		 push	 eax
  00344	68 00 00 00 00	 push	 OFFSET ?received_group_packets@@3PAUSTUB_PACKET_TYPE@@A ; received_group_packets
  00349	e8 00 00 00 00	 call	 ?remove_stub_packet_from_list@@YGXPAPAUSTUB_PACKET_TYPE@@PAU1@@Z ; remove_stub_packet_from_list
  0034e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?group_packet_list_counter@@3HA ; group_packet_list_counter
  00354	89 4d 84	 mov	 DWORD PTR tv237[ebp], ecx
  00357	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?group_packet_list_counter@@3HA ; group_packet_list_counter
  0035d	83 ea 01	 sub	 edx, 1
  00360	89 15 00 00 00
	00		 mov	 DWORD PTR ?group_packet_list_counter@@3HA, edx ; group_packet_list_counter
  00366	eb 26		 jmp	 SHORT $LN35@process_pa
$LN34@process_pa:
  00368	8b 45 c8	 mov	 eax, DWORD PTR _this_packet$[ebp]
  0036b	50		 push	 eax
  0036c	68 00 00 00 00	 push	 OFFSET ?received_personal_packets@@3PAUSTUB_PACKET_TYPE@@A ; received_personal_packets
  00371	e8 00 00 00 00	 call	 ?remove_stub_packet_from_list@@YGXPAPAUSTUB_PACKET_TYPE@@PAU1@@Z ; remove_stub_packet_from_list
  00376	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?personal_packet_list_counter@@3HA ; personal_packet_list_counter
  0037c	89 4d 84	 mov	 DWORD PTR tv237[ebp], ecx
  0037f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?personal_packet_list_counter@@3HA ; personal_packet_list_counter
  00385	83 ea 01	 sub	 edx, 1
  00388	89 15 00 00 00
	00		 mov	 DWORD PTR ?personal_packet_list_counter@@3HA, edx ; personal_packet_list_counter
$LN35@process_pa:

; 1243 : 
; 1244 : 			free_stub_packet (this_packet);

  0038e	8b 45 c8	 mov	 eax, DWORD PTR _this_packet$[ebp]
  00391	50		 push	 eax
  00392	e8 00 00 00 00	 call	 ?free_stub_packet@@YGXPAUSTUB_PACKET_TYPE@@@Z ; free_stub_packet

; 1245 : 
; 1246 : 			this_packet = NULL;

  00397	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _this_packet$[ebp], 0

; 1247 : 		}

  0039e	e9 2b fe ff ff	 jmp	 $LN4@process_pa
$LN5@process_pa:

; 1248 : 
; 1249 : 		#if DEBUG_MODULE
; 1250 : 
; 1251 : 		debug_log ("COMMS:   Processing %s packets frame_id = %d, (total %d packets) size %d, player %d",
; 1252 : 						send_type_names [send_type],
; 1253 : 						frame_id,
; 1254 : 						connection->number_of_packets,
; 1255 : 						predicted_size,
; 1256 : 						*player_id);
; 1257 : 
; 1258 : 		#endif
; 1259 : 
; 1260 : 		*data = connection->connection_receive_buffer;

  003a3	8b 45 14	 mov	 eax, DWORD PTR _data$[ebp]
  003a6	8b 4d 0c	 mov	 ecx, DWORD PTR _connection$[ebp]
  003a9	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  003ac	89 10		 mov	 DWORD PTR [eax], edx

; 1261 : 
; 1262 : 		*size = connection->size;

  003ae	8b 45 18	 mov	 eax, DWORD PTR _size$[ebp]
  003b1	8b 4d 0c	 mov	 ecx, DWORD PTR _connection$[ebp]
  003b4	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  003b7	89 10		 mov	 DWORD PTR [eax], edx

; 1263 : 
; 1264 : 		#if DEBUG_MODULE
; 1265 : 
; 1266 : 		connection->av_packet_size_received = (((connection->av_packet_size_received * connection->num_packets_received) + *size) / ++ connection->num_packets_received);
; 1267 : 
; 1268 : 		if (*size > connection->max_packet_size_received)
; 1269 : 		{
; 1270 : 
; 1271 : 			connection->max_packet_size_received = *size;
; 1272 : 		}
; 1273 : 
; 1274 : 		#endif
; 1275 : 
; 1276 : 		(*frame_ptr) ++;

  003b9	8b 45 f0	 mov	 eax, DWORD PTR _frame_ptr$[ebp]
  003bc	8b 08		 mov	 ecx, DWORD PTR [eax]
  003be	83 c1 01	 add	 ecx, 1
  003c1	8b 55 f0	 mov	 edx, DWORD PTR _frame_ptr$[ebp]
  003c4	89 0a		 mov	 DWORD PTR [edx], ecx

; 1277 : 
; 1278 : 		return type;

  003c6	8b 45 fc	 mov	 eax, DWORD PTR _type$[ebp]
  003c9	e9 26 01 00 00	 jmp	 $LN22@process_pa

; 1279 : 	}
; 1280 : 	else

  003ce	e9 21 01 00 00	 jmp	 $LN22@process_pa
$LN21@process_pa:

; 1281 : 	{
; 1282 : 
; 1283 : 		// some of the packets have arrived for this frame, is it time to re-request the others ?
; 1284 : 
; 1285 : 		#if DEBUG_MODULE >= 2
; 1286 : 
; 1287 : 		debug_log ("COMMS: only received %d %s packets for frame %d out of %d", received_flag, send_type_names [this_packet->send_type], this_packet->packet->frame_id, this_packet->packet->number_of_packets);
; 1288 : 
; 1289 : 		#endif
; 1290 : 
; 1291 : 		//
; 1292 : 		// Find the closest packet in this frame
; 1293 : 		//
; 1294 : 
; 1295 : 		packet = *packet_list;

  003d3	8b 45 cc	 mov	 eax, DWORD PTR _packet_list$[ebp]
  003d6	8b 08		 mov	 ecx, DWORD PTR [eax]
  003d8	89 4d d0	 mov	 DWORD PTR _packet$[ebp], ecx

; 1296 : 
; 1297 : 		closest_time = INT_MAX;

  003db	c7 45 ec ff ff
	ff 7f		 mov	 DWORD PTR _closest_time$[ebp], 2147483647 ; 7fffffffH
$LN7@process_pa:

; 1298 : 
; 1299 : 		while (packet)

  003e2	83 7d d0 00	 cmp	 DWORD PTR _packet$[ebp], 0
  003e6	74 5f		 je	 SHORT $LN8@process_pa

; 1300 : 		{
; 1301 : 
; 1302 : 			if ((packet->send_type == send_type) &&
; 1303 : 				(packet->packet->frame_id == *frame_ptr) &&

  003e8	8b 45 d0	 mov	 eax, DWORD PTR _packet$[ebp]
  003eb	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ed	3b 4d 08	 cmp	 ecx, DWORD PTR _send_type$[ebp]
  003f0	75 4a		 jne	 SHORT $LN28@process_pa
  003f2	8b 45 d0	 mov	 eax, DWORD PTR _packet$[ebp]
  003f5	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003f8	8b 55 f0	 mov	 edx, DWORD PTR _frame_ptr$[ebp]
  003fb	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  003fe	3b 02		 cmp	 eax, DWORD PTR [edx]
  00400	75 3a		 jne	 SHORT $LN28@process_pa
  00402	8b 45 d0	 mov	 eax, DWORD PTR _packet$[ebp]
  00405	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00408	8b 55 0c	 mov	 edx, DWORD PTR _connection$[ebp]
  0040b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0040e	3b 02		 cmp	 eax, DWORD PTR [edx]
  00410	75 2a		 jne	 SHORT $LN28@process_pa

; 1304 : 				(packet->packet->player_id == connection->connection_id))
; 1305 : 			{
; 1306 : 
; 1307 : 				if ((!closest_packet) || ((get_system_time () - closest_packet->received_time) < (unsigned int)closest_time))

  00412	83 7d d4 00	 cmp	 DWORD PTR _closest_packet$[ebp], 0
  00416	74 10		 je	 SHORT $LN29@process_pa
  00418	e8 00 00 00 00	 call	 ?get_system_time@@YGIXZ	; get_system_time
  0041d	8b 4d d4	 mov	 ecx, DWORD PTR _closest_packet$[ebp]
  00420	2b 41 10	 sub	 eax, DWORD PTR [ecx+16]
  00423	3b 45 ec	 cmp	 eax, DWORD PTR _closest_time$[ebp]
  00426	73 14		 jae	 SHORT $LN28@process_pa
$LN29@process_pa:

; 1308 : 				{
; 1309 : 
; 1310 : 					closest_packet = packet;

  00428	8b 45 d0	 mov	 eax, DWORD PTR _packet$[ebp]
  0042b	89 45 d4	 mov	 DWORD PTR _closest_packet$[ebp], eax

; 1311 : 
; 1312 : 					closest_time = get_system_time () - closest_packet->received_time;

  0042e	e8 00 00 00 00	 call	 ?get_system_time@@YGIXZ	; get_system_time
  00433	8b 4d d4	 mov	 ecx, DWORD PTR _closest_packet$[ebp]
  00436	2b 41 10	 sub	 eax, DWORD PTR [ecx+16]
  00439	89 45 ec	 mov	 DWORD PTR _closest_time$[ebp], eax
$LN28@process_pa:

; 1313 : 				}
; 1314 : 			}
; 1315 : 
; 1316 : 			packet = packet->next;

  0043c	8b 45 d0	 mov	 eax, DWORD PTR _packet$[ebp]
  0043f	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00442	89 4d d0	 mov	 DWORD PTR _packet$[ebp], ecx

; 1317 : 		}

  00445	eb 9b		 jmp	 SHORT $LN7@process_pa
$LN8@process_pa:

; 1318 : 
; 1319 : 		//
; 1320 : 		//
; 1321 : 		//
; 1322 : 
; 1323 : 		if (closest_packet)

  00447	83 7d d4 00	 cmp	 DWORD PTR _closest_packet$[ebp], 0
  0044b	0f 84 a1 00 00
	00		 je	 $LN10@process_pa

; 1324 : 		{
; 1325 : 
; 1326 : 			if ((get_system_time () - closest_packet->received_time) > (command_line_comms_packet_resend_timer * TIME_1_SECOND))

  00451	e8 00 00 00 00	 call	 ?get_system_time@@YGIXZ	; get_system_time
  00456	8b 4d d4	 mov	 ecx, DWORD PTR _closest_packet$[ebp]
  00459	2b 41 10	 sub	 eax, DWORD PTR [ecx+16]
  0045c	89 45 84	 mov	 DWORD PTR tv440[ebp], eax
  0045f	f2 0f 2a 45 84	 cvtsi2sd xmm0, DWORD PTR tv440[ebp]
  00464	8b 55 84	 mov	 edx, DWORD PTR tv440[ebp]
  00467	c1 ea 1f	 shr	 edx, 31			; 0000001fH
  0046a	f2 0f 58 04 d5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
  00473	f2 0f 11 85 7c
	ff ff ff	 movsd	 QWORD PTR tv443[ebp], xmm0
  0047b	f2 0f 5a 85 7c
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv443[ebp]
  00483	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?command_line_comms_packet_resend_timer@@3MA
  0048b	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@447a0000
  00493	0f 2f c1	 comiss	 xmm0, xmm1
  00496	76 5a		 jbe	 SHORT $LN10@process_pa

; 1327 : 			{
; 1328 : 
; 1329 : 				for (loop = 1; loop <= connection->number_of_packets; loop ++)

  00498	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 1
  0049f	eb 09		 jmp	 SHORT $LN11@process_pa
$LN9@process_pa:
  004a1	8b 45 f8	 mov	 eax, DWORD PTR _loop$[ebp]
  004a4	83 c0 01	 add	 eax, 1
  004a7	89 45 f8	 mov	 DWORD PTR _loop$[ebp], eax
$LN11@process_pa:
  004aa	8b 45 0c	 mov	 eax, DWORD PTR _connection$[ebp]
  004ad	8b 4d f8	 mov	 ecx, DWORD PTR _loop$[ebp]
  004b0	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  004b3	7f 3d		 jg	 SHORT $LN10@process_pa

; 1330 : 				{
; 1331 : 
; 1332 : 					if (!(get_stub_packet_for_frame (send_type, connection->connection_id, *frame_ptr, loop)))

  004b5	8b 45 f8	 mov	 eax, DWORD PTR _loop$[ebp]
  004b8	50		 push	 eax
  004b9	8b 4d f0	 mov	 ecx, DWORD PTR _frame_ptr$[ebp]
  004bc	8b 11		 mov	 edx, DWORD PTR [ecx]
  004be	52		 push	 edx
  004bf	8b 45 0c	 mov	 eax, DWORD PTR _connection$[ebp]
  004c2	8b 08		 mov	 ecx, DWORD PTR [eax]
  004c4	51		 push	 ecx
  004c5	8b 55 08	 mov	 edx, DWORD PTR _send_type$[ebp]
  004c8	52		 push	 edx
  004c9	e8 00 00 00 00	 call	 ?get_stub_packet_for_frame@@YGPAUSTUB_PACKET_TYPE@@W4SEND_TYPES@@KHH@Z ; get_stub_packet_for_frame
  004ce	85 c0		 test	 eax, eax
  004d0	75 1e		 jne	 SHORT $LN32@process_pa

; 1333 : 					{
; 1334 : 
; 1335 : 						#if DEBUG_MODULE
; 1336 : 
; 1337 : 						debug_log ("COMMS: WAITING FOR %s FRAME %d packet %d, closest packet (%d %d) arrived %f seconds ago (Some have arrived)",
; 1338 : 										send_type_names [send_type],
; 1339 : 										*frame_ptr,
; 1340 : 										loop,
; 1341 : 										closest_packet->packet->frame_id,
; 1342 : 										closest_packet->packet->packet_id,
; 1343 : 										(float) (get_system_time () - closest_packet->received_time) / TIME_1_SECOND);
; 1344 : 
; 1345 : 						#endif
; 1346 : 
; 1347 : 						request_resend_packet (connection, *frame_ptr, loop, closest_packet->received_time, send_type);

  004d2	8b 45 08	 mov	 eax, DWORD PTR _send_type$[ebp]
  004d5	50		 push	 eax
  004d6	8b 4d d4	 mov	 ecx, DWORD PTR _closest_packet$[ebp]
  004d9	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  004dc	52		 push	 edx
  004dd	8b 45 f8	 mov	 eax, DWORD PTR _loop$[ebp]
  004e0	50		 push	 eax
  004e1	8b 4d f0	 mov	 ecx, DWORD PTR _frame_ptr$[ebp]
  004e4	8b 11		 mov	 edx, DWORD PTR [ecx]
  004e6	52		 push	 edx
  004e7	8b 45 0c	 mov	 eax, DWORD PTR _connection$[ebp]
  004ea	50		 push	 eax
  004eb	e8 00 00 00 00	 call	 ?request_resend_packet@@YGXPAUCONNECTION_LIST_TYPE@@HHHW4SEND_TYPES@@@Z ; request_resend_packet
$LN32@process_pa:

; 1348 : 					}
; 1349 : 				}

  004f0	eb af		 jmp	 SHORT $LN9@process_pa
$LN10@process_pa:

; 1350 : 			}
; 1351 : 		}
; 1352 : 
; 1353 : 		return PACKET_TYPE_INVALID;

  004f2	33 c0		 xor	 eax, eax
$LN22@process_pa:

; 1354 : 	}
; 1355 : }

  004f4	5f		 pop	 edi
  004f5	5e		 pop	 esi
  004f6	5b		 pop	 ebx
  004f7	8b e5		 mov	 esp, ebp
  004f9	5d		 pop	 ebp
  004fa	c2 14 00	 ret	 20			; 00000014H
?process_packet_list@@YGHW4SEND_TYPES@@PAUCONNECTION_LIST_TYPE@@PAKPAPAEPAH@Z ENDP ; process_packet_list
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comms.c
;	COMDAT ?receive_packets@@YGXXZ
_TEXT	SEGMENT
tv189 = -92						; size = 4
tv94 = -92						; size = 4
_temp_packet$1 = -24					; size = 4
_stub_packet$ = -20					; size = 4
_rerequest_packet$ = -16				; size = 4
_connection$ = -12					; size = 4
_send_type$ = -8					; size = 4
_packet_size$ = -4					; size = 4
?receive_packets@@YGXXZ PROC				; receive_packets, COMDAT

; 712  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 713  : 
; 714  :   	int
; 715  : 		packet_size;
; 716  : 
; 717  : 	send_types
; 718  : 		send_type;
; 719  : 
; 720  : 	connection_list_type
; 721  : 		*connection;
; 722  : 
; 723  : 	stub_packet_type
; 724  : 		*rerequest_packet,
; 725  : 		*stub_packet;
; 726  : 
; 727  : 	//
; 728  : 	// Receive all packets present
; 729  : 	//
; 730  : 
; 731  : 	send_type = SEND_TYPE_GROUP;

  00009	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _send_type$[ebp], 1

; 732  : 
; 733  : 	connection = NULL;

  00010	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _connection$[ebp], 0
$LN2@receive_pa:

; 734  : 
; 735  : 	while (TRUE)

  00017	b8 01 00 00 00	 mov	 eax, 1
  0001c	85 c0		 test	 eax, eax
  0001e	0f 84 5b 03 00
	00		 je	 $LN3@receive_pa

; 736  : 	{
; 737  : 
; 738  : 		//
; 739  : 		// malloc_heap_mem new packet if required
; 740  : 		//
; 741  : 
; 742  : 		packet_size = sizeof (packet_header_type) + (sizeof (unsigned char) * command_line_comms_packet_data_size);

  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_line_comms_packet_data_size@@3HA ; command_line_comms_packet_data_size
  00029	83 c0 18	 add	 eax, 24			; 00000018H
  0002c	89 45 fc	 mov	 DWORD PTR _packet_size$[ebp], eax

; 743  : 
; 744  : 		if (!new_receive_packet)

  0002f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?new_receive_packet@@3PAUPACKET_HEADER_TYPE@@A, 0
  00036	75 18		 jne	 SHORT $LN6@receive_pa

; 745  : 		{
; 746  : 
; 747  : 			new_receive_packet_data = (unsigned char *) malloc_heap_mem (packet_size);

  00038	8b 45 fc	 mov	 eax, DWORD PTR _packet_size$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  00041	a3 00 00 00 00	 mov	 DWORD PTR ?new_receive_packet_data@@3PAEA, eax

; 748  : 
; 749  : 			new_receive_packet = (packet_header_type *) new_receive_packet_data;

  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?new_receive_packet_data@@3PAEA
  0004b	a3 00 00 00 00	 mov	 DWORD PTR ?new_receive_packet@@3PAUPACKET_HEADER_TYPE@@A, eax
$LN6@receive_pa:

; 750  : 		}
; 751  : 
; 752  : 		memset (new_receive_packet_data, 0xFF, packet_size);

  00050	8b 45 fc	 mov	 eax, DWORD PTR _packet_size$[ebp]
  00053	50		 push	 eax
  00054	68 ff 00 00 00	 push	 255			; 000000ffH
  00059	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?new_receive_packet_data@@3PAEA
  0005f	51		 push	 ecx
  00060	e8 00 00 00 00	 call	 _memset
  00065	83 c4 0c	 add	 esp, 12			; 0000000cH

; 753  : 
; 754  : 		//
; 755  : 		// Receive data into new packet
; 756  : 		//
; 757  : 
; 758  : 		Sleep (0);

  00068	6a 00		 push	 0
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 759  : 
; 760  : 		if (!direct_play_receive_data ((LPVOID) new_receive_packet_data, packet_size))

  00070	8b 45 fc	 mov	 eax, DWORD PTR _packet_size$[ebp]
  00073	50		 push	 eax
  00074	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?new_receive_packet_data@@3PAEA
  0007a	51		 push	 ecx
  0007b	e8 00 00 00 00	 call	 ?direct_play_receive_data@@YGHPAXH@Z ; direct_play_receive_data
  00080	85 c0		 test	 eax, eax
  00082	75 05		 jne	 SHORT $LN7@receive_pa

; 761  : 		{
; 762  : 
; 763  : 			return;

  00084	e9 f6 02 00 00	 jmp	 $LN1@receive_pa
$LN7@receive_pa:

; 764  : 		}
; 765  : 
; 766  : 		/////////////////////////////////////////////////////////////////
; 767  : 		// progress indicator
; 768  : 		if (get_gunship_screen_progress_message () == GUNSHIPS_SCREEN_CONNECTING_TEXT)

  00089	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_screen_progress_message@@3HA, 0 ; gunship_screen_progress_message
  00090	75 05		 jne	 SHORT $LN8@receive_pa

; 769  : 		{
; 770  : 
; 771  : 			update_gunships_screen_progress_indicator ();

  00092	e8 00 00 00 00	 call	 ?update_gunships_screen_progress_indicator@@YGXXZ ; update_gunships_screen_progress_indicator
$LN8@receive_pa:

; 772  : 		}
; 773  : 		/////////////////////////////////////////////////////////////////
; 774  : 
; 775  : 		Sleep (0);

  00097	6a 00		 push	 0
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 776  : 
; 777  : 		//
; 778  : 		// is it from a known connection
; 779  : 		//
; 780  : 
; 781  : 		if (!(connection = get_connection_list_item (new_receive_packet->player_id)))

  0009f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?new_receive_packet@@3PAUPACKET_HEADER_TYPE@@A
  000a4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 ?get_connection_list_item@@YGPAUCONNECTION_LIST_TYPE@@K@Z ; get_connection_list_item
  000ad	89 45 f4	 mov	 DWORD PTR _connection$[ebp], eax
  000b0	83 7d f4 00	 cmp	 DWORD PTR _connection$[ebp], 0
  000b4	75 3e		 jne	 SHORT $LN13@receive_pa

; 782  : 		{
; 783  : 
; 784  : 			if (get_comms_model () == COMMS_MODEL_SERVER)

  000b6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  000bd	75 13		 jne	 SHORT $LN10@receive_pa

; 785  : 			{
; 786  : 
; 787  : 				#if DEBUG_MODULE >= 1
; 788  : 
; 789  : 				debug_log ("COMMS: received packet from unknown connection : registering");
; 790  : 
; 791  : 				#endif
; 792  : 
; 793  : 				connection = register_connection (new_receive_packet->player_id);

  000bf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?new_receive_packet@@3PAUPACKET_HEADER_TYPE@@A
  000c4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c7	51		 push	 ecx
  000c8	e8 00 00 00 00	 call	 ?register_connection@@YGPAUCONNECTION_LIST_TYPE@@K@Z ; register_connection
  000cd	89 45 f4	 mov	 DWORD PTR _connection$[ebp], eax

; 794  : 			}
; 795  : 			else

  000d0	eb 22		 jmp	 SHORT $LN13@receive_pa
$LN10@receive_pa:

; 796  : 			{
; 797  : 
; 798  : 				//
; 799  : 				// clients can only accept certain packets from unknown connections.
; 800  : 				//
; 801  : 
; 802  : 				if (new_receive_packet->type == PACKET_TYPE_SESSION_INFO)

  000d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?new_receive_packet@@3PAUPACKET_HEADER_TYPE@@A
  000d7	83 38 03	 cmp	 DWORD PTR [eax], 3
  000da	75 13		 jne	 SHORT $LN12@receive_pa

; 803  : 				{
; 804  : 
; 805  : 					#if DEBUG_MODULE >= 1
; 806  : 
; 807  : 					debug_log ("COMMS: received packet from unknown connection : registering server");
; 808  : 
; 809  : 					#endif
; 810  : 
; 811  : 					connection = register_connection (new_receive_packet->player_id);

  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?new_receive_packet@@3PAUPACKET_HEADER_TYPE@@A
  000e1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e4	51		 push	 ecx
  000e5	e8 00 00 00 00	 call	 ?register_connection@@YGPAUCONNECTION_LIST_TYPE@@K@Z ; register_connection
  000ea	89 45 f4	 mov	 DWORD PTR _connection$[ebp], eax

; 812  : 				}
; 813  : 				else

  000ed	eb 05		 jmp	 SHORT $LN13@receive_pa
$LN12@receive_pa:

; 814  : 				{
; 815  : 
; 816  : 					#if DEBUG_MODULE >= 1
; 817  : 
; 818  : 					debug_log ("COMMS: received packet from unknown connection : ignoring");
; 819  : 
; 820  : 					#endif
; 821  : 
; 822  : 					return;

  000ef	e9 8b 02 00 00	 jmp	 $LN1@receive_pa
$LN13@receive_pa:

; 823  : 				}
; 824  : 			}
; 825  : 		}
; 826  : 
; 827  : 		send_type = get_packet_send_type (new_receive_packet);

  000f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?new_receive_packet@@3PAUPACKET_HEADER_TYPE@@A
  000f9	83 38 13	 cmp	 DWORD PTR [eax], 19	; 00000013H
  000fc	7e 09		 jle	 SHORT $LN21@receive_pa
  000fe	c7 45 a4 01 00
	00 00		 mov	 DWORD PTR tv94[ebp], 1
  00105	eb 07		 jmp	 SHORT $LN22@receive_pa
$LN21@receive_pa:
  00107	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv94[ebp], 0
$LN22@receive_pa:
  0010e	8b 4d a4	 mov	 ecx, DWORD PTR tv94[ebp]
  00111	89 4d f8	 mov	 DWORD PTR _send_type$[ebp], ecx

; 828  : 
; 829  : 		#if DEBUG_MODULE >= 1
; 830  : 
; 831  : 		debug_log ("COMMS: received %s packet for frame %d, packet_id =%d, type = %d, size %d, player_id = %d", send_type_names [send_type], new_receive_packet->frame_id, new_receive_packet->packet_id, new_receive_packet->type, new_receive_packet->data_size, new_receive_packet->player_id);
; 832  : 
; 833  : 		#endif
; 834  : 
; 835  : 		//
; 836  : 		// do checksum check
; 837  : 		//
; 838  : 
; 839  : 		{
; 840  : 
; 841  : 			packet_header_type
; 842  : 				*temp_packet;
; 843  : 
; 844  : 			temp_packet = (packet_header_type *) new_receive_packet_data;

  00114	a1 00 00 00 00	 mov	 eax, DWORD PTR ?new_receive_packet_data@@3PAEA
  00119	89 45 e8	 mov	 DWORD PTR _temp_packet$1[ebp], eax

; 845  : 
; 846  : 			if (temp_packet)

  0011c	83 7d e8 00	 cmp	 DWORD PTR _temp_packet$1[ebp], 0
  00120	0f 84 84 00 00
	00		 je	 $LN15@receive_pa

; 847  : 			{
; 848  : 
; 849  : 				if ((temp_packet->check_sum) != get_comms_checksum ((unsigned char *) &new_receive_packet_data [sizeof (packet_header_type)], (temp_packet->data_size)))

  00126	8b 45 e8	 mov	 eax, DWORD PTR _temp_packet$1[ebp]
  00129	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  0012d	51		 push	 ecx
  0012e	ba 01 00 00 00	 mov	 edx, 1
  00133	6b c2 18	 imul	 eax, edx, 24
  00136	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?new_receive_packet_data@@3PAEA
  0013c	50		 push	 eax
  0013d	e8 00 00 00 00	 call	 ?get_comms_checksum@@YGHPAEH@Z ; get_comms_checksum
  00142	8b 4d e8	 mov	 ecx, DWORD PTR _temp_packet$1[ebp]
  00145	39 41 14	 cmp	 DWORD PTR [ecx+20], eax
  00148	74 60		 je	 SHORT $LN15@receive_pa

; 850  : 				{
; 851  : /*
; 852  : 					char
; 853  : 						filename [32];
; 854  : 
; 855  : 					int
; 856  : 						count;
; 857  : 
; 858  : 					FILE
; 859  : 						*fp;
; 860  : 
; 861  : 					count = 0;
; 862  : 
; 863  : 					sprintf (filename, "bad%d.dat", count);
; 864  : 
; 865  : 					while (file_exist (filename))
; 866  : 					{
; 867  : 						count ++;
; 868  : 
; 869  : 						sprintf (filename, "bad%d.dat", count);
; 870  : 					}
; 871  : 
; 872  : 					fp = fopen (filename, "wb");
; 873  : 
; 874  : 					fwrite (temp_packet, temp_packet->data_size + sizeof (packet_header_type), 1, fp);
; 875  : 
; 876  : 					fclose (fp);
; 877  : */
; 878  : 					debug_log ("COMMS:    data check_sum failed receiver %d, calculated %d, datasize %d",

  0014a	8b 45 e8	 mov	 eax, DWORD PTR _temp_packet$1[ebp]
  0014d	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  00151	51		 push	 ecx
  00152	8b 55 e8	 mov	 edx, DWORD PTR _temp_packet$1[ebp]
  00155	0f bf 42 10	 movsx	 eax, WORD PTR [edx+16]
  00159	50		 push	 eax
  0015a	b9 01 00 00 00	 mov	 ecx, 1
  0015f	6b d1 18	 imul	 edx, ecx, 24
  00162	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?new_receive_packet_data@@3PAEA
  00168	52		 push	 edx
  00169	e8 00 00 00 00	 call	 ?get_comms_checksum@@YGHPAEH@Z ; get_comms_checksum
  0016e	50		 push	 eax
  0016f	8b 45 e8	 mov	 eax, DWORD PTR _temp_packet$1[ebp]
  00172	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00175	51		 push	 ecx
  00176	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@LGDGBCEP@COMMS?3?5?5?5?5data?5check_sum?5failed@
  0017b	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00180	83 c4 10	 add	 esp, 16			; 00000010H

; 879  : 									temp_packet->check_sum,
; 880  : 									get_comms_checksum ((unsigned char *) &new_receive_packet_data [sizeof (packet_header_type)], temp_packet->data_size),
; 881  : 									temp_packet->data_size);
; 882  : 
; 883  : 					request_resend_packet (connection, temp_packet->frame_id, temp_packet->packet_id, get_system_time (), send_type);

  00183	8b 45 f8	 mov	 eax, DWORD PTR _send_type$[ebp]
  00186	50		 push	 eax
  00187	e8 00 00 00 00	 call	 ?get_system_time@@YGIXZ	; get_system_time
  0018c	50		 push	 eax
  0018d	8b 4d e8	 mov	 ecx, DWORD PTR _temp_packet$1[ebp]
  00190	0f bf 51 0e	 movsx	 edx, WORD PTR [ecx+14]
  00194	52		 push	 edx
  00195	8b 45 e8	 mov	 eax, DWORD PTR _temp_packet$1[ebp]
  00198	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0019b	51		 push	 ecx
  0019c	8b 55 f4	 mov	 edx, DWORD PTR _connection$[ebp]
  0019f	52		 push	 edx
  001a0	e8 00 00 00 00	 call	 ?request_resend_packet@@YGXPAUCONNECTION_LIST_TYPE@@HHHW4SEND_TYPES@@@Z ; request_resend_packet

; 884  : 
; 885  : 					return;

  001a5	e9 d5 01 00 00	 jmp	 $LN1@receive_pa
$LN15@receive_pa:

; 886  : 				}
; 887  : 			}
; 888  : 		}
; 889  : 
; 890  : 		//
; 891  : 		// malloc new stub packet
; 892  : 		//
; 893  : 
; 894  : 		stub_packet = (stub_packet_type *) malloc_fast_mem (sizeof (stub_packet_type));

  001aa	6a 20		 push	 32			; 00000020H
  001ac	e8 00 00 00 00	 call	 ?malloc_fast_memory@@YGPAXI@Z ; malloc_fast_memory
  001b1	89 45 ec	 mov	 DWORD PTR _stub_packet$[ebp], eax

; 895  : 
; 896  : 		memset (stub_packet, 0, sizeof (stub_packet_type));

  001b4	6a 20		 push	 32			; 00000020H
  001b6	6a 00		 push	 0
  001b8	8b 45 ec	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  001bb	50		 push	 eax
  001bc	e8 00 00 00 00	 call	 _memset
  001c1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 897  : 
; 898  : 		stub_packet->packet = (packet_header_type *) new_receive_packet_data;

  001c4	8b 45 ec	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  001c7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?new_receive_packet_data@@3PAEA
  001cd	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 899  : 
; 900  : 		stub_packet->received_time = get_system_time ();

  001d0	e8 00 00 00 00	 call	 ?get_system_time@@YGIXZ	; get_system_time
  001d5	8b 4d ec	 mov	 ecx, DWORD PTR _stub_packet$[ebp]
  001d8	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 901  : 
; 902  : 		stub_packet->send_type = send_type;

  001db	8b 45 ec	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  001de	8b 4d f8	 mov	 ecx, DWORD PTR _send_type$[ebp]
  001e1	89 08		 mov	 DWORD PTR [eax], ecx

; 903  : 
; 904  : 		//
; 905  : 		// add to appropriate list if not already received.
; 906  : 		//
; 907  : 
; 908  : 		if (!get_stub_packet_for_frame (send_type, stub_packet->packet->player_id, stub_packet->packet->frame_id, stub_packet->packet->packet_id))

  001e3	8b 45 ec	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  001e6	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001e9	0f bf 51 0e	 movsx	 edx, WORD PTR [ecx+14]
  001ed	52		 push	 edx
  001ee	8b 45 ec	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  001f1	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001f4	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  001f7	52		 push	 edx
  001f8	8b 45 ec	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  001fb	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001fe	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00201	52		 push	 edx
  00202	8b 45 f8	 mov	 eax, DWORD PTR _send_type$[ebp]
  00205	50		 push	 eax
  00206	e8 00 00 00 00	 call	 ?get_stub_packet_for_frame@@YGPAUSTUB_PACKET_TYPE@@W4SEND_TYPES@@KHH@Z ; get_stub_packet_for_frame
  0020b	85 c0		 test	 eax, eax
  0020d	75 54		 jne	 SHORT $LN16@receive_pa

; 909  : 		{
; 910  : 
; 911  : 			add_stub_packet_to_receive_list (send_type, stub_packet);

  0020f	83 7d f8 01	 cmp	 DWORD PTR _send_type$[ebp], 1
  00213	75 28		 jne	 SHORT $LN23@receive_pa
  00215	8b 45 ec	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  00218	50		 push	 eax
  00219	68 00 00 00 00	 push	 OFFSET ?received_group_packets@@3PAUSTUB_PACKET_TYPE@@A ; received_group_packets
  0021e	e8 00 00 00 00	 call	 ?add_stub_packet_to_list@@YGXPAPAUSTUB_PACKET_TYPE@@PAU1@@Z ; add_stub_packet_to_list
  00223	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?group_packet_list_counter@@3HA ; group_packet_list_counter
  00229	89 4d a4	 mov	 DWORD PTR tv189[ebp], ecx
  0022c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?group_packet_list_counter@@3HA ; group_packet_list_counter
  00232	83 c2 01	 add	 edx, 1
  00235	89 15 00 00 00
	00		 mov	 DWORD PTR ?group_packet_list_counter@@3HA, edx ; group_packet_list_counter
  0023b	eb 26		 jmp	 SHORT $LN24@receive_pa
$LN23@receive_pa:
  0023d	8b 45 ec	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  00240	50		 push	 eax
  00241	68 00 00 00 00	 push	 OFFSET ?received_personal_packets@@3PAUSTUB_PACKET_TYPE@@A ; received_personal_packets
  00246	e8 00 00 00 00	 call	 ?add_stub_packet_to_list@@YGXPAPAUSTUB_PACKET_TYPE@@PAU1@@Z ; add_stub_packet_to_list
  0024b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?personal_packet_list_counter@@3HA ; personal_packet_list_counter
  00251	89 4d a4	 mov	 DWORD PTR tv189[ebp], ecx
  00254	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?personal_packet_list_counter@@3HA ; personal_packet_list_counter
  0025a	83 c2 01	 add	 edx, 1
  0025d	89 15 00 00 00
	00		 mov	 DWORD PTR ?personal_packet_list_counter@@3HA, edx ; personal_packet_list_counter
$LN24@receive_pa:
$LN16@receive_pa:

; 912  : 		}
; 913  : 		else
; 914  : 		{
; 915  : 
; 916  : 			#if DEBUG_MODULE >= 2
; 917  : 
; 918  : 			debug_log ("COMMS: already received %s packet for frame %d, packet_id =%d, type = %d, size %d, player_id = %d", send_type_names [send_type], new_receive_packet->frame_id, new_receive_packet->packet_id, new_receive_packet->type, new_receive_packet->data_size, new_receive_packet->player_id);
; 919  : 
; 920  : 			#endif
; 921  : 		}
; 922  : 
; 923  : 		//
; 924  : 		// check if packet is a rerequested one
; 925  : 		//
; 926  : 
; 927  : 		rerequest_packet = rerequest_packet_list;

  00263	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rerequest_packet_list@@3PAUSTUB_PACKET_TYPE@@A ; rerequest_packet_list
  00268	89 45 f0	 mov	 DWORD PTR _rerequest_packet$[ebp], eax
$LN4@receive_pa:

; 928  : 
; 929  : 		while (rerequest_packet)

  0026b	83 7d f0 00	 cmp	 DWORD PTR _rerequest_packet$[ebp], 0
  0026f	74 5c		 je	 SHORT $LN5@receive_pa

; 930  : 		{
; 931  : 
; 932  : 			if ((rerequest_packet->send_type == send_type) &&
; 933  : 				(rerequest_packet->packet_id == new_receive_packet->packet_id) &&

  00271	8b 45 f0	 mov	 eax, DWORD PTR _rerequest_packet$[ebp]
  00274	8b 08		 mov	 ecx, DWORD PTR [eax]
  00276	3b 4d f8	 cmp	 ecx, DWORD PTR _send_type$[ebp]
  00279	75 47		 jne	 SHORT $LN18@receive_pa
  0027b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?new_receive_packet@@3PAUPACKET_HEADER_TYPE@@A
  00280	0f bf 48 0e	 movsx	 ecx, WORD PTR [eax+14]
  00284	8b 55 f0	 mov	 edx, DWORD PTR _rerequest_packet$[ebp]
  00287	39 4a 04	 cmp	 DWORD PTR [edx+4], ecx
  0028a	75 36		 jne	 SHORT $LN18@receive_pa
  0028c	8b 45 f0	 mov	 eax, DWORD PTR _rerequest_packet$[ebp]
  0028f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?new_receive_packet@@3PAUPACKET_HEADER_TYPE@@A
  00295	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00298	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0029b	75 25		 jne	 SHORT $LN18@receive_pa

; 934  : 				(rerequest_packet->frame_id == new_receive_packet->frame_id))
; 935  : 			{
; 936  : /*
; 937  : 				FILE
; 938  : 					*fp;
; 939  : 
; 940  : 				char
; 941  : 					filename [32];
; 942  : 
; 943  : 				int
; 944  : 					count;
; 945  : 
; 946  : 				count = 0;
; 947  : 
; 948  : 				sprintf (filename, "good%d.dat", count);
; 949  : 
; 950  : 				while (file_exist (filename))
; 951  : 				{
; 952  : 					count ++;
; 953  : 
; 954  : 					sprintf (filename, "good%d.dat", count);
; 955  : 				}
; 956  : 
; 957  : 				fp = fopen (filename, "wb");
; 958  : 
; 959  : 				fwrite (new_receive_packet, new_receive_packet->data_size + sizeof (packet_header_type), 1, fp);
; 960  : 
; 961  : 				fclose (fp);
; 962  : */
; 963  : 				#if DEBUG_MODULE >= 2
; 964  : 
; 965  : 				debug_log ("COMMS: removing rerequest for %s packet frame %d, packet %d from list and setting time to %d",
; 966  : 								send_type_names [rerequest_packet->send_type],
; 967  : 								new_receive_packet->frame_id,
; 968  : 								new_receive_packet->packet_id,
; 969  : 								rerequest_packet->received_time);
; 970  : 
; 971  : 				#endif
; 972  : 
; 973  : 				stub_packet->received_time = rerequest_packet->received_time;

  0029d	8b 45 ec	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  002a0	8b 4d f0	 mov	 ecx, DWORD PTR _rerequest_packet$[ebp]
  002a3	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  002a6	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 974  : 
; 975  : 				remove_stub_packet_from_list (&rerequest_packet_list, rerequest_packet);

  002a9	8b 45 f0	 mov	 eax, DWORD PTR _rerequest_packet$[ebp]
  002ac	50		 push	 eax
  002ad	68 00 00 00 00	 push	 OFFSET ?rerequest_packet_list@@3PAUSTUB_PACKET_TYPE@@A ; rerequest_packet_list
  002b2	e8 00 00 00 00	 call	 ?remove_stub_packet_from_list@@YGXPAPAUSTUB_PACKET_TYPE@@PAU1@@Z ; remove_stub_packet_from_list

; 976  : 
; 977  : 				free_mem (rerequest_packet);

  002b7	8b 45 f0	 mov	 eax, DWORD PTR _rerequest_packet$[ebp]
  002ba	50		 push	 eax
  002bb	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem

; 978  : 
; 979  : 				break;

  002c0	eb 0b		 jmp	 SHORT $LN5@receive_pa
$LN18@receive_pa:

; 980  : 			}
; 981  : 
; 982  : 			rerequest_packet = rerequest_packet->next;

  002c2	8b 45 f0	 mov	 eax, DWORD PTR _rerequest_packet$[ebp]
  002c5	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  002c8	89 4d f0	 mov	 DWORD PTR _rerequest_packet$[ebp], ecx

; 983  : 		}

  002cb	eb 9e		 jmp	 SHORT $LN4@receive_pa
$LN5@receive_pa:

; 984  : 
; 985  : 		//
; 986  : 		//
; 987  : 		//
; 988  : 
; 989  : 		connection->interpolation_time = get_system_time ();

  002cd	e8 00 00 00 00	 call	 ?get_system_time@@YGIXZ	; get_system_time
  002d2	8b 4d f4	 mov	 ecx, DWORD PTR _connection$[ebp]
  002d5	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 990  : 
; 991  : 		connection->connection_validation_time = get_system_time ();

  002d8	e8 00 00 00 00	 call	 ?get_system_time@@YGIXZ	; get_system_time
  002dd	8b 4d f4	 mov	 ecx, DWORD PTR _connection$[ebp]
  002e0	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 992  : 
; 993  : 		#if COMMS_STATS
; 994  : 
; 995  : 		av_packet_size_received = (((av_packet_size_received * num_packets_received) + new_receive_packet->data_size) / ++ num_packets_received);

  002e3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?num_packets_received@@3HA
  002e8	83 c0 01	 add	 eax, 1
  002eb	a3 00 00 00 00	 mov	 DWORD PTR ?num_packets_received@@3HA, eax
  002f0	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?num_packets_received@@3HA
  002f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?new_receive_packet@@3PAUPACKET_HEADER_TYPE@@A
  002fe	0f bf 51 10	 movsx	 edx, WORD PTR [ecx+16]
  00302	f3 0f 2a ca	 cvtsi2ss xmm1, edx
  00306	f3 0f 2a 15 00
	00 00 00	 cvtsi2ss xmm2, DWORD PTR ?num_packets_received@@3HA
  0030e	f3 0f 59 15 00
	00 00 00	 mulss	 xmm2, DWORD PTR ?av_packet_size_received@@3MA
  00316	f3 0f 58 d1	 addss	 xmm2, xmm1
  0031a	f3 0f 5e d0	 divss	 xmm2, xmm0
  0031e	f3 0f 11 15 00
	00 00 00	 movss	 DWORD PTR ?av_packet_size_received@@3MA, xmm2

; 996  : 
; 997  : 		if (new_receive_packet->data_size > max_packet_size_received)

  00326	a1 00 00 00 00	 mov	 eax, DWORD PTR ?new_receive_packet@@3PAUPACKET_HEADER_TYPE@@A
  0032b	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  0032f	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00333	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?max_packet_size_received@@3MA
  0033a	76 15		 jbe	 SHORT $LN19@receive_pa

; 998  : 		{
; 999  : 
; 1000 : 			max_packet_size_received = new_receive_packet->data_size;

  0033c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?new_receive_packet@@3PAUPACKET_HEADER_TYPE@@A
  00341	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  00345	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00349	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?max_packet_size_received@@3MA, xmm0
$LN19@receive_pa:

; 1001 : 		}
; 1002 : 
; 1003 : 		instant_packet_size_received = new_receive_packet->data_size;

  00351	a1 00 00 00 00	 mov	 eax, DWORD PTR ?new_receive_packet@@3PAUPACKET_HEADER_TYPE@@A
  00356	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  0035a	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0035e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?instant_packet_size_received@@3MA, xmm0

; 1004 : 
; 1005 : 		#endif
; 1006 : 
; 1007 : 		new_receive_packet_data = NULL;

  00366	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?new_receive_packet_data@@3PAEA, 0

; 1008 : 
; 1009 : 		new_receive_packet = NULL;

  00370	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?new_receive_packet@@3PAUPACKET_HEADER_TYPE@@A, 0

; 1010 : 	}

  0037a	e9 98 fc ff ff	 jmp	 $LN2@receive_pa
$LN3@receive_pa:
$LN1@receive_pa:

; 1011 : }

  0037f	5f		 pop	 edi
  00380	5e		 pop	 esi
  00381	5b		 pop	 ebx
  00382	8b e5		 mov	 esp, ebp
  00384	5d		 pop	 ebp
  00385	c3		 ret	 0
?receive_packets@@YGXXZ ENDP				; receive_packets
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comms.c
;	COMDAT ?send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z
_TEXT	SEGMENT
$T1 = -108						; size = 4
$T2 = -104						; size = 4
_connection$ = -36					; size = 4
_stub_packet$ = -32					; size = 4
_number_of_packets$ = -28				; size = 4
_packet_counter$ = -24					; size = 4
_packet_size$ = -20					; size = 4
_send_size$ = -16					; size = 4
_frame_id$ = -12					; size = 4
_comms_timeout$ = -8					; size = 4
_hr$ = -4						; size = 4
_player_id$ = 8						; size = 4
_type$ = 12						; size = 4
_data$ = 16						; size = 4
_size$ = 20						; size = 4
_send_type$ = 24					; size = 4
?send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z PROC ; send_packet, COMDAT

; 487  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 488  : 
; 489  : 	HRESULT
; 490  : 		hr;
; 491  : 
; 492  : 	float
; 493  : 		comms_timeout;
; 494  : 
; 495  : 	int
; 496  : 		frame_id,
; 497  : 		send_size,
; 498  : 		packet_size,
; 499  : 		packet_counter,
; 500  : 		number_of_packets;
; 501  : 
; 502  : 	stub_packet_type
; 503  : 		*stub_packet;
; 504  : 
; 505  : 	connection_list_type
; 506  : 		*connection;
; 507  : 
; 508  : 	static packet_header_type
; 509  : 		*new_packet = NULL;
; 510  : 
; 511  : 	static unsigned char
; 512  : 		*new_packet_data = NULL;
; 513  : 
; 514  : 	packet_counter = 1;

  00009	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _packet_counter$[ebp], 1

; 515  : 
; 516  : 	connection = get_connection_list_item (player_id);

  00010	8b 45 08	 mov	 eax, DWORD PTR _player_id$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?get_connection_list_item@@YGPAUCONNECTION_LIST_TYPE@@K@Z ; get_connection_list_item
  00019	89 45 dc	 mov	 DWORD PTR _connection$[ebp], eax

; 517  : 
; 518  : 	if (send_type == SEND_TYPE_GROUP)

  0001c	83 7d 18 01	 cmp	 DWORD PTR _send_type$[ebp], 1
  00020	75 17		 jne	 SHORT $LN7@send_packe

; 519  : 	{
; 520  : 
; 521  : 		frame_id = send_group_frame_id;

  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ?send_group_frame_id@@3HA ; send_group_frame_id
  00027	89 45 f4	 mov	 DWORD PTR _frame_id$[ebp], eax

; 522  : 
; 523  : 		send_group_frame_id ++;

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?send_group_frame_id@@3HA ; send_group_frame_id
  0002f	83 c0 01	 add	 eax, 1
  00032	a3 00 00 00 00	 mov	 DWORD PTR ?send_group_frame_id@@3HA, eax ; send_group_frame_id

; 524  : 
; 525  : 		#if DEBUG_MODULE >= 1
; 526  : 
; 527  : 		debug_log ("COMMS: Sending group Data (type %d) (frame %d) size = %d, player id = %d", type, frame_id, size, player_id);
; 528  : 
; 529  : 		#endif
; 530  : 	}
; 531  : 	else

  00037	eb 27		 jmp	 SHORT $LN10@send_packe
$LN7@send_packe:

; 532  : 	{
; 533  : 
; 534  : 		if (connection)

  00039	83 7d dc 00	 cmp	 DWORD PTR _connection$[ebp], 0
  0003d	74 1a		 je	 SHORT $LN9@send_packe

; 535  : 		{
; 536  : 
; 537  : 			frame_id = connection->send_personal_frame_id;

  0003f	8b 45 dc	 mov	 eax, DWORD PTR _connection$[ebp]
  00042	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00045	89 4d f4	 mov	 DWORD PTR _frame_id$[ebp], ecx

; 538  : 
; 539  : 			connection->send_personal_frame_id ++;

  00048	8b 45 dc	 mov	 eax, DWORD PTR _connection$[ebp]
  0004b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0004e	83 c1 01	 add	 ecx, 1
  00051	8b 55 dc	 mov	 edx, DWORD PTR _connection$[ebp]
  00054	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 540  : 
; 541  : 			#if DEBUG_MODULE >= 1
; 542  : 
; 543  : 			debug_log ("COMMS: Sending Personal Data (type %d) (frame %d) size = %d, player id = %d", type, frame_id, size, player_id);
; 544  : 
; 545  : 			#endif
; 546  : 		}
; 547  : 		else

  00057	eb 07		 jmp	 SHORT $LN10@send_packe
$LN9@send_packe:

; 548  : 		{
; 549  : 
; 550  : 			frame_id = 0;

  00059	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _frame_id$[ebp], 0
$LN10@send_packe:

; 551  : 
; 552  : 			#if DEBUG_MODULE >= 1
; 553  : 
; 554  : 			debug_log ("COMMS: Sending Personal Data (type %d) (frame %d no connection!) size = %d, player id = %d", type, frame_id, size, player_id);
; 555  : 
; 556  : 			#endif
; 557  : 		}
; 558  : 	}
; 559  : 
; 560  : 	#if COMMS_STATS
; 561  : 
; 562  : 	av_packet_size_sent = (((av_packet_size_sent * num_packets_sent) + size) / ++ num_packets_sent);

  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?num_packets_sent@@3HA
  00065	83 c0 01	 add	 eax, 1
  00068	a3 00 00 00 00	 mov	 DWORD PTR ?num_packets_sent@@3HA, eax
  0006d	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?num_packets_sent@@3HA
  00075	f3 0f 2a 4d 14	 cvtsi2ss xmm1, DWORD PTR _size$[ebp]
  0007a	f3 0f 2a 15 00
	00 00 00	 cvtsi2ss xmm2, DWORD PTR ?num_packets_sent@@3HA
  00082	f3 0f 59 15 00
	00 00 00	 mulss	 xmm2, DWORD PTR ?av_packet_size_sent@@3MA
  0008a	f3 0f 58 d1	 addss	 xmm2, xmm1
  0008e	f3 0f 5e d0	 divss	 xmm2, xmm0
  00092	f3 0f 11 15 00
	00 00 00	 movss	 DWORD PTR ?av_packet_size_sent@@3MA, xmm2

; 563  : 
; 564  : 	if (size > max_packet_size_sent)

  0009a	f3 0f 2a 45 14	 cvtsi2ss xmm0, DWORD PTR _size$[ebp]
  0009f	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?max_packet_size_sent@@3MA
  000a6	76 0d		 jbe	 SHORT $LN11@send_packe

; 565  : 	{
; 566  : 
; 567  : 		max_packet_size_sent = size;

  000a8	f3 0f 2a 45 14	 cvtsi2ss xmm0, DWORD PTR _size$[ebp]
  000ad	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?max_packet_size_sent@@3MA, xmm0
$LN11@send_packe:

; 568  : 	}
; 569  : 
; 570  : 	instant_packet_size_sent = size;

  000b5	f3 0f 2a 45 14	 cvtsi2ss xmm0, DWORD PTR _size$[ebp]
  000ba	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?instant_packet_size_sent@@3MA, xmm0

; 571  : 
; 572  : 	#endif
; 573  : 
; 574  : 	number_of_packets = max ((size - 1) / command_line_comms_packet_data_size, 0) + 1;

  000c2	c7 45 98 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  000c9	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  000cc	83 e8 01	 sub	 eax, 1
  000cf	99		 cdq
  000d0	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?command_line_comms_packet_data_size@@3HA ; command_line_comms_packet_data_size
  000d6	89 45 94	 mov	 DWORD PTR $T1[ebp], eax
  000d9	8d 45 98	 lea	 eax, DWORD PTR $T2[ebp]
  000dc	50		 push	 eax
  000dd	8d 4d 94	 lea	 ecx, DWORD PTR $T1[ebp]
  000e0	51		 push	 ecx
  000e1	e8 00 00 00 00	 call	 ??$max@H@std@@YGABHABH0@Z ; std::max<int>
  000e6	8b 10		 mov	 edx, DWORD PTR [eax]
  000e8	83 c2 01	 add	 edx, 1
  000eb	89 55 e4	 mov	 DWORD PTR _number_of_packets$[ebp], edx
$LN4@send_packe:

; 575  : 
; 576  : 	do
; 577  : 	{
; 578  : 
; 579  : 		send_size = min (size, command_line_comms_packet_data_size);

  000ee	68 00 00 00 00	 push	 OFFSET ?command_line_comms_packet_data_size@@3HA ; command_line_comms_packet_data_size
  000f3	8d 45 14	 lea	 eax, DWORD PTR _size$[ebp]
  000f6	50		 push	 eax
  000f7	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  000fc	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fe	89 4d f0	 mov	 DWORD PTR _send_size$[ebp], ecx

; 580  : 
; 581  : 		//
; 582  : 		// For variable sized packets, just tell direct play the true size of the packet
; 583  : 		//
; 584  : 		packet_size = sizeof (packet_header_type) + (sizeof (unsigned char) * send_size);

  00101	8b 45 f0	 mov	 eax, DWORD PTR _send_size$[ebp]
  00104	83 c0 18	 add	 eax, 24			; 00000018H
  00107	89 45 ec	 mov	 DWORD PTR _packet_size$[ebp], eax

; 585  : 
; 586  : 		//
; 587  : 		// For old style fixed length packets, tell direct play the size of the whole packet ( not just the data )
; 588  : 		//
; 589  : //		packet_size = sizeof (packet_header_type) + (sizeof (unsigned char) * command_line_comms_packet_data_size);
; 590  : 
; 591  : 		new_packet_data = (unsigned char *) malloc_heap_mem (packet_size);

  0010a	8b 45 ec	 mov	 eax, DWORD PTR _packet_size$[ebp]
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  00113	a3 00 00 00 00	 mov	 DWORD PTR ?new_packet_data@?1??send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z@4PAEA, eax

; 592  : 
; 593  : 		memset (new_packet_data, 0, packet_size);

  00118	8b 45 ec	 mov	 eax, DWORD PTR _packet_size$[ebp]
  0011b	50		 push	 eax
  0011c	6a 00		 push	 0
  0011e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?new_packet_data@?1??send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z@4PAEA
  00124	51		 push	 ecx
  00125	e8 00 00 00 00	 call	 _memset
  0012a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 594  : 
; 595  : 		debug_assert (new_packet_data);

  0012d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?new_packet_data@?1??send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z@4PAEA, 0
  00134	75 20		 jne	 SHORT $LN12@send_packe
  00136	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z@4JA
  0013b	83 c0 6c	 add	 eax, 108		; 0000006cH
  0013e	50		 push	 eax
  0013f	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@BBIMMIBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00144	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DGFCJMGN@new_packet_data@
  00149	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PODNONFH@ASSERT?5?$CFs?5?$CI?$CFs?3?$CFd?$CJ@
  0014e	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00153	83 c4 10	 add	 esp, 16			; 00000010H
$LN12@send_packe:

; 596  : 
; 597  : 		new_packet = (packet_header_type *) new_packet_data;

  00156	a1 00 00 00 00	 mov	 eax, DWORD PTR ?new_packet_data@?1??send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z@4PAEA
  0015b	a3 00 00 00 00	 mov	 DWORD PTR ?new_packet@?1??send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z@4PAUPACKET_HEADER_TYPE@@A, eax

; 598  : 
; 599  : 		new_packet->type = type;

  00160	a1 00 00 00 00	 mov	 eax, DWORD PTR ?new_packet@?1??send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z@4PAUPACKET_HEADER_TYPE@@A
  00165	8b 4d 0c	 mov	 ecx, DWORD PTR _type$[ebp]
  00168	89 08		 mov	 DWORD PTR [eax], ecx

; 600  : 
; 601  : 		new_packet->number_of_packets = number_of_packets;

  0016a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?new_packet@?1??send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z@4PAUPACKET_HEADER_TYPE@@A
  0016f	66 8b 4d e4	 mov	 cx, WORD PTR _number_of_packets$[ebp]
  00173	66 89 48 0c	 mov	 WORD PTR [eax+12], cx

; 602  : 
; 603  : 		new_packet->frame_id = frame_id;

  00177	a1 00 00 00 00	 mov	 eax, DWORD PTR ?new_packet@?1??send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z@4PAUPACKET_HEADER_TYPE@@A
  0017c	8b 4d f4	 mov	 ecx, DWORD PTR _frame_id$[ebp]
  0017f	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 604  : 
; 605  : 		new_packet->player_id = direct_play_get_player_id ();

  00182	e8 00 00 00 00	 call	 ?direct_play_get_player_id@@YGHXZ ; direct_play_get_player_id
  00187	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?new_packet@?1??send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z@4PAUPACKET_HEADER_TYPE@@A
  0018d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 606  : 
; 607  : 		new_packet->packet_id = packet_counter;

  00190	a1 00 00 00 00	 mov	 eax, DWORD PTR ?new_packet@?1??send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z@4PAUPACKET_HEADER_TYPE@@A
  00195	66 8b 4d e8	 mov	 cx, WORD PTR _packet_counter$[ebp]
  00199	66 89 48 0e	 mov	 WORD PTR [eax+14], cx

; 608  : 
; 609  : 		new_packet->data_size = send_size;

  0019d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?new_packet@?1??send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z@4PAUPACKET_HEADER_TYPE@@A
  001a2	66 8b 4d f0	 mov	 cx, WORD PTR _send_size$[ebp]
  001a6	66 89 48 10	 mov	 WORD PTR [eax+16], cx

; 610  : 
; 611  : 		new_packet->check_sum = get_comms_checksum (data, send_size);

  001aa	8b 45 f0	 mov	 eax, DWORD PTR _send_size$[ebp]
  001ad	50		 push	 eax
  001ae	8b 4d 10	 mov	 ecx, DWORD PTR _data$[ebp]
  001b1	51		 push	 ecx
  001b2	e8 00 00 00 00	 call	 ?get_comms_checksum@@YGHPAEH@Z ; get_comms_checksum
  001b7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?new_packet@?1??send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z@4PAUPACKET_HEADER_TYPE@@A
  001bd	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 612  : 
; 613  : 		memcpy (&new_packet_data [sizeof (packet_header_type)], data, send_size);

  001c0	8b 45 f0	 mov	 eax, DWORD PTR _send_size$[ebp]
  001c3	50		 push	 eax
  001c4	8b 4d 10	 mov	 ecx, DWORD PTR _data$[ebp]
  001c7	51		 push	 ecx
  001c8	ba 01 00 00 00	 mov	 edx, 1
  001cd	6b c2 18	 imul	 eax, edx, 24
  001d0	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?new_packet_data@?1??send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z@4PAEA
  001d6	50		 push	 eax
  001d7	e8 00 00 00 00	 call	 _memcpy
  001dc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 614  : 
; 615  : 		#if COMMS_DEBUG_BAD_CONNECTION
; 616  : 
; 617  : 		if (!(rand16 () % COMMS_DEBUG_BAD_CONNECTION))
; 618  : 		{
; 619  : 
; 620  : 			debug_log ("COMMS BAD CONNECTION : NOT SENDING FRAME %d, PACKET %d", new_packet->frame_id, new_packet->packet_id);
; 621  : 		}
; 622  : 		else
; 623  : 		{
; 624  : 
; 625  : 			#endif
; 626  : 
; 627  : 			comms_timeout = command_line_comms_timeout;

  001df	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?command_line_comms_timeout@@3HA ; command_line_comms_timeout
  001e7	f3 0f 11 45 f8	 movss	 DWORD PTR _comms_timeout$[ebp], xmm0

; 628  : 
; 629  : 			hr = direct_play_send_data (player_id, (LPVOID) new_packet_data, packet_size);

  001ec	8b 45 ec	 mov	 eax, DWORD PTR _packet_size$[ebp]
  001ef	50		 push	 eax
  001f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?new_packet_data@?1??send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z@4PAEA
  001f6	51		 push	 ecx
  001f7	8b 55 08	 mov	 edx, DWORD PTR _player_id$[ebp]
  001fa	52		 push	 edx
  001fb	e8 00 00 00 00	 call	 ?direct_play_send_data@@YGHKPAXH@Z ; direct_play_send_data
  00200	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$LN5@send_packe:

; 630  : 
; 631  : 			while ((hr == DPERR_BUSY) || (hr == DPERR_GENERIC))

  00203	81 7d fc 0e 01
	77 88		 cmp	 DWORD PTR _hr$[ebp], -2005466866 ; 8877010eH
  0020a	74 09		 je	 SHORT $LN13@send_packe
  0020c	81 7d fc 05 40
	00 80		 cmp	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
  00213	75 43		 jne	 SHORT $LN6@send_packe
$LN13@send_packe:

; 632  : 			{
; 633  : 
; 634  : 				//
; 635  : 				//
; 636  : 				//
; 637  : 
; 638  : 				comms_timeout -= get_delta_time ();

  00215	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _comms_timeout$[ebp]
  0021a	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00222	f3 0f 11 45 f8	 movss	 DWORD PTR _comms_timeout$[ebp], xmm0

; 639  : 
; 640  : 				if (comms_timeout <= 0.0)

  00227	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _comms_timeout$[ebp]
  0022c	0f 57 c9	 xorps	 xmm1, xmm1
  0022f	66 0f 2f c8	 comisd	 xmm1, xmm0
  00233	72 02		 jb	 SHORT $LN14@send_packe

; 641  : 				{
; 642  : 
; 643  : 					break;

  00235	eb 21		 jmp	 SHORT $LN6@send_packe
$LN14@send_packe:

; 644  : 				}
; 645  : 
; 646  : 				Sleep (10);

  00237	6a 0a		 push	 10			; 0000000aH
  00239	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 647  : 
; 648  : 				hr = direct_play_send_data (player_id, (LPVOID) new_packet_data, packet_size);

  0023f	8b 45 ec	 mov	 eax, DWORD PTR _packet_size$[ebp]
  00242	50		 push	 eax
  00243	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?new_packet_data@?1??send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z@4PAEA
  00249	51		 push	 ecx
  0024a	8b 55 08	 mov	 edx, DWORD PTR _player_id$[ebp]
  0024d	52		 push	 edx
  0024e	e8 00 00 00 00	 call	 ?direct_play_send_data@@YGHKPAXH@Z ; direct_play_send_data
  00253	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 649  : 			}

  00256	eb ab		 jmp	 SHORT $LN5@send_packe
$LN6@send_packe:

; 650  : 
; 651  : 			if ( hr != DP_OK )

  00258	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0025c	74 1a		 je	 SHORT $LN16@send_packe

; 652  : 			{
; 653  : 
; 654  : 				//
; 655  : 				// We got a different error - boot out of the game!!!!
; 656  : 				//
; 657  : 
; 658  : 				if (get_comms_model () != COMMS_MODEL_SERVER)

  0025e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  00265	74 11		 je	 SHORT $LN16@send_packe

; 659  : 				{
; 660  : 
; 661  : 					//setup_campaign_over_screen (get_local_force_entity (get_global_gunship_side ()), CAMPAIGN_RESULT_SERVER_REJECTED);
; 662  : 
; 663  : 					// Jabberwock 040518 Even more telling error message
; 664  : 					debug_fatal ( "DirectPlay error: %d",  hr );

  00267	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
  0026a	50		 push	 eax
  0026b	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@CHNNFJBB@DirectPlay?5error?3?5?$CFd@
  00270	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00275	83 c4 08	 add	 esp, 8
$LN16@send_packe:

; 665  : 					//start_game_exit (GAME_EXIT_KICKOUT, FALSE);
; 666  : 				}
; 667  : 			}
; 668  : 
; 669  : 			Sleep (0);

  00278	6a 00		 push	 0
  0027a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 670  : 
; 671  : 			#if COMMS_DEBUG_BAD_CONNECTION
; 672  : 		}
; 673  : 
; 674  : 		#endif
; 675  : 
; 676  : 		#if DEBUG_MODULE >= 2
; 677  : 
; 678  : 		debug_log ("COMMS:      packet %d of %d, size %d", packet_counter, new_packet->number_of_packets, send_size);
; 679  : 
; 680  : 		#endif
; 681  : 
; 682  : 		size -= send_size;

  00280	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  00283	2b 45 f0	 sub	 eax, DWORD PTR _send_size$[ebp]
  00286	89 45 14	 mov	 DWORD PTR _size$[ebp], eax

; 683  : 
; 684  : 		data += send_size;

  00289	8b 45 10	 mov	 eax, DWORD PTR _data$[ebp]
  0028c	03 45 f0	 add	 eax, DWORD PTR _send_size$[ebp]
  0028f	89 45 10	 mov	 DWORD PTR _data$[ebp], eax

; 685  : 
; 686  : 		packet_counter ++;

  00292	8b 45 e8	 mov	 eax, DWORD PTR _packet_counter$[ebp]
  00295	83 c0 01	 add	 eax, 1
  00298	89 45 e8	 mov	 DWORD PTR _packet_counter$[ebp], eax

; 687  : 
; 688  : 		//
; 689  : 		// store packet ready for re-request
; 690  : 		//
; 691  : 
; 692  : 		stub_packet = (stub_packet_type *) malloc_fast_mem (sizeof (stub_packet_type));

  0029b	6a 20		 push	 32			; 00000020H
  0029d	e8 00 00 00 00	 call	 ?malloc_fast_memory@@YGPAXI@Z ; malloc_fast_memory
  002a2	89 45 e0	 mov	 DWORD PTR _stub_packet$[ebp], eax

; 693  : 
; 694  : 		memset (stub_packet, 0, sizeof (stub_packet_type));

  002a5	6a 20		 push	 32			; 00000020H
  002a7	6a 00		 push	 0
  002a9	8b 45 e0	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  002ac	50		 push	 eax
  002ad	e8 00 00 00 00	 call	 _memset
  002b2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 695  : 
; 696  : 		debug_assert (stub_packet);

  002b5	83 7d e0 00	 cmp	 DWORD PTR _stub_packet$[ebp], 0
  002b9	75 22		 jne	 SHORT $LN17@send_packe
  002bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z@4JA
  002c0	05 d1 00 00 00	 add	 eax, 209		; 000000d1H
  002c5	50		 push	 eax
  002c6	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@BBIMMIBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  002cb	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GPMMIJAD@stub_packet@
  002d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PODNONFH@ASSERT?5?$CFs?5?$CI?$CFs?3?$CFd?$CJ@
  002d5	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  002da	83 c4 10	 add	 esp, 16			; 00000010H
$LN17@send_packe:

; 697  : 
; 698  : 		stub_packet->packet = new_packet;

  002dd	8b 45 e0	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  002e0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?new_packet@?1??send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z@4PAUPACKET_HEADER_TYPE@@A
  002e6	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 699  : 
; 700  : 		stub_packet->send_type = send_type;

  002e9	8b 45 e0	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  002ec	8b 4d 18	 mov	 ecx, DWORD PTR _send_type$[ebp]
  002ef	89 08		 mov	 DWORD PTR [eax], ecx

; 701  : 
; 702  : 		add_stub_packet_to_resend_list (stub_packet);

  002f1	8b 45 e0	 mov	 eax, DWORD PTR _stub_packet$[ebp]
  002f4	50		 push	 eax
  002f5	68 00 00 00 00	 push	 OFFSET ?resend_packet_list@@3PAUSTUB_PACKET_TYPE@@A ; resend_packet_list
  002fa	e8 00 00 00 00	 call	 ?add_stub_packet_to_list@@YGXPAPAUSTUB_PACKET_TYPE@@PAU1@@Z ; add_stub_packet_to_list
  002ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?resend_packet_list_counter@@3HA ; resend_packet_list_counter
  00305	83 c1 01	 add	 ecx, 1
  00308	89 0d 00 00 00
	00		 mov	 DWORD PTR ?resend_packet_list_counter@@3HA, ecx ; resend_packet_list_counter

; 703  : 	}
; 704  : 	while (size);

  0030e	83 7d 14 00	 cmp	 DWORD PTR _size$[ebp], 0
  00312	0f 85 d6 fd ff
	ff		 jne	 $LN4@send_packe

; 705  : }

  00318	5f		 pop	 edi
  00319	5e		 pop	 esi
  0031a	5b		 pop	 ebx
  0031b	8b e5		 mov	 esp, ebp
  0031d	5d		 pop	 ebp
  0031e	c2 14 00	 ret	 20			; 00000014H
?send_packet@@YGXKW4PACKET_TYPES@@PAEHW4SEND_TYPES@@@Z ENDP ; send_packet
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comms.c
;	COMDAT ?deinitialise_comms@@YGXXZ
_TEXT	SEGMENT
?deinitialise_comms@@YGXXZ PROC				; deinitialise_comms, COMDAT

; 431  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 432  : 
; 433  : 	#if COMMS_STATS
; 434  : 
; 435  : 	debug_log ("********************************************************************");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@FNJBANLP@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
  0000e	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00013	83 c4 04	 add	 esp, 4

; 436  : 
; 437  : 	debug_log ("COMMS STATS:");

  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0N@JJIHLFND@COMMS?5STATS?3@
  0001b	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00020	83 c4 04	 add	 esp, 4

; 438  : 
; 439  : 	debug_log ("packets size							= %d", command_line_comms_packet_data_size);

  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_line_comms_packet_data_size@@3HA ; command_line_comms_packet_data_size
  00028	50		 push	 eax
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@INHCIDEP@packets?5size?7?7?7?7?7?7?7?$DN?5?$CFd@
  0002e	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00033	83 c4 08	 add	 esp, 8

; 440  : 	debug_log ("packets sent							= %d", num_packets_sent);

  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?num_packets_sent@@3HA
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NOAIOGID@packets?5sent?7?7?7?7?7?7?7?$DN?5?$CFd@
  00041	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00046	83 c4 08	 add	 esp, 8

; 441  : 	debug_log ("packets send size (av)				= %.02f", av_packet_size_sent);

  00049	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?av_packet_size_sent@@3MA
  00051	83 ec 08	 sub	 esp, 8
  00054	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@FEAJPCAG@packets?5send?5size?5?$CIav?$CJ?7?7?7?7?$DN?5?$CF?40@
  0005e	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH

; 442  : 	debug_log ("packets send size (max)				= %.02f", max_packet_size_sent);

  00066	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?max_packet_size_sent@@3MA
  0006e	83 ec 08	 sub	 esp, 8
  00071	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@BJFLEPCB@packets?5send?5size?5?$CImax?$CJ?7?7?7?7?$DN?5?$CF?4@
  0007b	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00080	83 c4 0c	 add	 esp, 12			; 0000000cH

; 443  : 
; 444  : 	debug_log ("packets received						= %d", num_packets_received);

  00083	a1 00 00 00 00	 mov	 eax, DWORD PTR ?num_packets_received@@3HA
  00088	50		 push	 eax
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@DFAEHFKA@packets?5received?7?7?7?7?7?7?$DN?5?$CFd@
  0008e	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00093	83 c4 08	 add	 esp, 8

; 445  : 	debug_log ("packets received size (av)			= %.02f", av_packet_size_received);

  00096	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?av_packet_size_received@@3MA
  0009e	83 ec 08	 sub	 esp, 8
  000a1	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000a6	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DKDDMDMA@packets?5received?5size?5?$CIav?$CJ?7?7?7?$DN?5@
  000ab	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000b0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 446  : 	debug_log ("packets received size (max)		= %.02f", max_packet_size_received);

  000b3	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?max_packet_size_received@@3MA
  000bb	83 ec 08	 sub	 esp, 8
  000be	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@PIPAGLNL@packets?5received?5size?5?$CImax?$CJ?7?7?$DN?5@
  000c8	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 447  : 
; 448  : 	debug_log ("processed size (max)					= %.02f", max_processed_size);

  000d0	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?max_processed_size@@3MA
  000d8	83 ec 08	 sub	 esp, 8
  000db	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@KEIDDLMH@processed?5size?5?$CImax?$CJ?7?7?7?7?7?$DN?5?$CF?402@
  000e5	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000ea	83 c4 0c	 add	 esp, 12			; 0000000cH

; 449  : 
; 450  : 	debug_log ("re-request counter					= %d", rerequest_packet_counter);

  000ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rerequest_packet_counter@@3HA
  000f2	50		 push	 eax
  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@EJDABGM@re?9request?5counter?7?7?7?7?7?$DN?5?$CFd@
  000f8	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000fd	83 c4 08	 add	 esp, 8

; 451  : 	debug_log ("resend packet counter				= %d", resend_packet_counter);

  00100	a1 00 00 00 00	 mov	 eax, DWORD PTR ?resend_packet_counter@@3HA
  00105	50		 push	 eax
  00106	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@KGFLFFAF@resend?5packet?5counter?7?7?7?7?$DN?5?$CFd@
  0010b	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00110	83 c4 08	 add	 esp, 8

; 452  : 
; 453  : 	debug_log ("group packet list counter			= %d", group_packet_list_counter);

  00113	a1 00 00 00 00	 mov	 eax, DWORD PTR ?group_packet_list_counter@@3HA ; group_packet_list_counter
  00118	50		 push	 eax
  00119	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@KAIKFIAB@group?5packet?5list?5counter?7?7?7?$DN?5?$CF@
  0011e	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00123	83 c4 08	 add	 esp, 8

; 454  : 	debug_log ("personal packet list counter		= %d", personal_packet_list_counter);

  00126	a1 00 00 00 00	 mov	 eax, DWORD PTR ?personal_packet_list_counter@@3HA ; personal_packet_list_counter
  0012b	50		 push	 eax
  0012c	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@KMEJHMGB@personal?5packet?5list?5counter?7?7?$DN@
  00131	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00136	83 c4 08	 add	 esp, 8

; 455  : 	debug_log ("resend packet list counter			= %d", resend_packet_list_counter);

  00139	a1 00 00 00 00	 mov	 eax, DWORD PTR ?resend_packet_list_counter@@3HA ; resend_packet_list_counter
  0013e	50		 push	 eax
  0013f	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@BNDLLAK@resend?5packet?5list?5counter?7?7?7?$DN?5@
  00144	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00149	83 c4 08	 add	 esp, 8

; 456  : 
; 457  : 	debug_log ("packet resend timer					= %.02f", command_line_comms_packet_resend_timer);

  0014c	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?command_line_comms_packet_resend_timer@@3MA
  00154	83 ec 08	 sub	 esp, 8
  00157	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0015c	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@JMGMNIFK@packet?5resend?5timer?7?7?7?7?7?$DN?5?$CF?402f@
  00161	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00166	83 c4 0c	 add	 esp, 12			; 0000000cH

; 458  : 
; 459  : 	debug_log ("Network frame time					= %.02f", network_frame_time);

  00169	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?network_frame_time@@3MA
  00171	83 ec 08	 sub	 esp, 8
  00174	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00179	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@PFNPKGAL@Network?5frame?5time?7?7?7?7?7?$DN?5?$CF?402f@
  0017e	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00183	83 c4 0c	 add	 esp, 12			; 0000000cH

; 460  : 	debug_log ("Network frame rate					= %.02f", network_frame_rate);

  00186	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?network_frame_rate@@3MA
  0018e	83 ec 08	 sub	 esp, 8
  00191	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00196	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@BDOIAGGM@Network?5frame?5rate?7?7?7?7?7?$DN?5?$CF?402f@
  0019b	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  001a0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 461  : 
; 462  : 	debug_log ("Group packet list size				= %d", received_group_list_size);

  001a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?received_group_list_size@@3HA
  001a8	50		 push	 eax
  001a9	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@MEMIHMEA@Group?5packet?5list?5size?7?7?7?7?$DN?5?$CFd@
  001ae	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  001b3	83 c4 08	 add	 esp, 8

; 463  : 	debug_log ("Personal packet list size			= %d", received_personal_list_size);

  001b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?received_personal_list_size@@3HA
  001bb	50		 push	 eax
  001bc	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@CLOIJCFH@Personal?5packet?5list?5size?7?7?7?$DN?5?$CF@
  001c1	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  001c6	83 c4 08	 add	 esp, 8

; 464  : 	debug_log ("Resend packet list size				= %d", resend_list_size);

  001c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?resend_list_size@@3HA
  001ce	50		 push	 eax
  001cf	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@IBNJPKCL@Resend?5packet?5list?5size?7?7?7?7?$DN?5?$CFd@
  001d4	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  001d9	83 c4 08	 add	 esp, 8

; 465  : 	debug_log ("Data Record size						= %d", command_line_comms_data_record_size);

  001dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_line_comms_data_record_size@@3HA ; command_line_comms_data_record_size
  001e1	50		 push	 eax
  001e2	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@OMGCFHAC@Data?5Record?5size?7?7?7?7?7?7?$DN?5?$CFd@
  001e7	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  001ec	83 c4 08	 add	 esp, 8

; 466  : 	debug_log ("Connection size						= %d", total_connection_size);

  001ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?total_connection_size@@3HA
  001f4	50		 push	 eax
  001f5	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@ILCCAICJ@Connection?5size?7?7?7?7?7?7?$DN?5?$CFd@
  001fa	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  001ff	83 c4 08	 add	 esp, 8

; 467  : 	debug_log ("Total Data size						= %d", total_data_size);

  00202	a1 00 00 00 00	 mov	 eax, DWORD PTR ?total_data_size@@3HA
  00207	50		 push	 eax
  00208	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DMBHALKJ@Total?5Data?5size?7?7?7?7?7?7?$DN?5?$CFd@
  0020d	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00212	83 c4 08	 add	 esp, 8

; 468  : 
; 469  : 	debug_log ("********************************************************************");

  00215	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@FNJBANLP@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
  0021a	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0021f	83 c4 04	 add	 esp, 4

; 470  : 
; 471  : 	#endif
; 472  : 
; 473  : 	reset_comms_data ();

  00222	e8 00 00 00 00	 call	 ?reset_comms_data@@YGXXZ ; reset_comms_data

; 474  : 
; 475  : 	if (new_receive_packet_data)

  00227	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?new_receive_packet_data@@3PAEA, 0
  0022e	74 0b		 je	 SHORT $LN2@deinitiali

; 476  : 	{
; 477  : 
; 478  : 		free_mem (new_receive_packet_data);

  00230	a1 00 00 00 00	 mov	 eax, DWORD PTR ?new_receive_packet_data@@3PAEA
  00235	50		 push	 eax
  00236	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem
$LN2@deinitiali:

; 479  : 	}
; 480  : }

  0023b	5f		 pop	 edi
  0023c	5e		 pop	 esi
  0023d	5b		 pop	 ebx
  0023e	8b e5		 mov	 esp, ebp
  00240	5d		 pop	 ebp
  00241	c3		 ret	 0
?deinitialise_comms@@YGXXZ ENDP				; deinitialise_comms
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comms.c
;	COMDAT ?initialise_comms_debug@@YGXXZ
_TEXT	SEGMENT
?initialise_comms_debug@@YGXXZ PROC			; initialise_comms_debug, COMDAT

; 360  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 361  : 
; 362  : 	#if DEBUG_MODULE
; 363  : 
; 364  : 	debug_log ("COMMS : initialise comms debug to level %d", DEBUG_MODULE);
; 365  : 
; 366  : 	#endif
; 367  : 
; 368  : 	#if COMMS_STATS
; 369  : 
; 370  : 	debug_watch ("packets size								= %d", MT_INT, &command_line_comms_packet_data_size);

  00009	68 00 00 00 00	 push	 OFFSET ?command_line_comms_packet_data_size@@3HA ; command_line_comms_packet_data_size
  0000e	6a 01		 push	 1
  00010	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KGGCIBGM@packets?5size?7?7?7?7?7?7?7?7?$DN?5?$CFd@
  00015	e8 00 00 00 00	 call	 ?debug_watch@@YGXPBDW4mt_type@@PAX@Z ; debug_watch

; 371  : 	debug_watch ("packets sent							= %d", MT_INT, &num_packets_sent);

  0001a	68 00 00 00 00	 push	 OFFSET ?num_packets_sent@@3HA
  0001f	6a 01		 push	 1
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NOAIOGID@packets?5sent?7?7?7?7?7?7?7?$DN?5?$CFd@
  00026	e8 00 00 00 00	 call	 ?debug_watch@@YGXPBDW4mt_type@@PAX@Z ; debug_watch

; 372  : 	debug_watch ("packets send size (instant)			= %.02f", MT_FLOAT, &instant_packet_size_sent);

  0002b	68 00 00 00 00	 push	 OFFSET ?instant_packet_size_sent@@3MA ; instant_packet_size_sent
  00030	6a 02		 push	 2
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@BAPAEELK@packets?5send?5size?5?$CIinstant?$CJ?7?7?7?$DN@
  00037	e8 00 00 00 00	 call	 ?debug_watch@@YGXPBDW4mt_type@@PAX@Z ; debug_watch

; 373  : 	debug_colour_watch ((debug_colours) COLOUR_RED, "packets send size (av)				= %.02f", MT_FLOAT, &av_packet_size_sent);

  0003c	68 00 00 00 00	 push	 OFFSET ?av_packet_size_sent@@3MA ; av_packet_size_sent
  00041	6a 02		 push	 2
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@FEAJPCAG@packets?5send?5size?5?$CIav?$CJ?7?7?7?7?$DN?5?$CF?40@
  00048	6a 04		 push	 4
  0004a	e8 00 00 00 00	 call	 ?debug_colour_watch@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX@Z ; debug_colour_watch

; 374  : 	debug_watch ("packets send size (max)				= %.02f", MT_FLOAT, &max_packet_size_sent);

  0004f	68 00 00 00 00	 push	 OFFSET ?max_packet_size_sent@@3MA ; max_packet_size_sent
  00054	6a 02		 push	 2
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@BJFLEPCB@packets?5send?5size?5?$CImax?$CJ?7?7?7?7?$DN?5?$CF?4@
  0005b	e8 00 00 00 00	 call	 ?debug_watch@@YGXPBDW4mt_type@@PAX@Z ; debug_watch

; 375  : 
; 376  : 	debug_watch ("packets received						= %d", MT_INT, &num_packets_received);

  00060	68 00 00 00 00	 push	 OFFSET ?num_packets_received@@3HA
  00065	6a 01		 push	 1
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@DFAEHFKA@packets?5received?7?7?7?7?7?7?$DN?5?$CFd@
  0006c	e8 00 00 00 00	 call	 ?debug_watch@@YGXPBDW4mt_type@@PAX@Z ; debug_watch

; 377  : 	debug_watch ("packets received size (instant) 		= %.02f", MT_FLOAT, &instant_packet_size_received);

  00071	68 00 00 00 00	 push	 OFFSET ?instant_packet_size_received@@3MA ; instant_packet_size_received
  00076	6a 02		 push	 2
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@LOHHIMMO@packets?5received?5size?5?$CIinstant?$CJ@
  0007d	e8 00 00 00 00	 call	 ?debug_watch@@YGXPBDW4mt_type@@PAX@Z ; debug_watch

; 378  : 	debug_colour_watch ((debug_colours) COLOUR_RED, "packets received size (av)			= %.02f", MT_FLOAT, &av_packet_size_received);

  00082	68 00 00 00 00	 push	 OFFSET ?av_packet_size_received@@3MA ; av_packet_size_received
  00087	6a 02		 push	 2
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DKDDMDMA@packets?5received?5size?5?$CIav?$CJ?7?7?7?$DN?5@
  0008e	6a 04		 push	 4
  00090	e8 00 00 00 00	 call	 ?debug_colour_watch@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX@Z ; debug_colour_watch

; 379  : 	debug_watch ("packets received size (max)			= %.02f", MT_FLOAT, &max_packet_size_received);

  00095	68 00 00 00 00	 push	 OFFSET ?max_packet_size_received@@3MA ; max_packet_size_received
  0009a	6a 02		 push	 2
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@JAKODKFC@packets?5received?5size?5?$CImax?$CJ?7?7?7?$DN@
  000a1	e8 00 00 00 00	 call	 ?debug_watch@@YGXPBDW4mt_type@@PAX@Z ; debug_watch

; 380  : 
; 381  : 	debug_watch ("packets record count	 				= %d", MT_INT, &packet_record_data_count);

  000a6	68 00 00 00 00	 push	 OFFSET ?packet_record_data_count@@3HA ; packet_record_data_count
  000ab	6a 01		 push	 1
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@IJDMGNAG@packets?5record?5count?7?5?7?7?7?7?$DN?5?$CFd@
  000b2	e8 00 00 00 00	 call	 ?debug_watch@@YGXPBDW4mt_type@@PAX@Z ; debug_watch

; 382  : 
; 383  : 	#endif
; 384  : 
; 385  : 	#if COMMS_STATS
; 386  : 
; 387  : 	debug_colour_watch ((debug_colours) COLOUR_RED, "processed size (max)					= %.02f", MT_FLOAT, &max_processed_size);

  000b7	68 00 00 00 00	 push	 OFFSET ?max_processed_size@@3MA ; max_processed_size
  000bc	6a 02		 push	 2
  000be	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@KEIDDLMH@processed?5size?5?$CImax?$CJ?7?7?7?7?7?$DN?5?$CF?402@
  000c3	6a 04		 push	 4
  000c5	e8 00 00 00 00	 call	 ?debug_colour_watch@@YGXW4DEBUG_COLOURS@@PBDW4mt_type@@PAX@Z ; debug_colour_watch

; 388  : 
; 389  : 	debug_watch ("re-request counter						= %d", MT_INT, &rerequest_packet_counter);

  000ca	68 00 00 00 00	 push	 OFFSET ?rerequest_packet_counter@@3HA
  000cf	6a 01		 push	 1
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@EIMBBJM@re?9request?5counter?7?7?7?7?7?7?$DN?5?$CFd@
  000d6	e8 00 00 00 00	 call	 ?debug_watch@@YGXPBDW4mt_type@@PAX@Z ; debug_watch

; 390  : 	debug_watch ("resend packet counter				= %d", MT_INT, &resend_packet_counter);

  000db	68 00 00 00 00	 push	 OFFSET ?resend_packet_counter@@3HA
  000e0	6a 01		 push	 1
  000e2	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@KGFLFFAF@resend?5packet?5counter?7?7?7?7?$DN?5?$CFd@
  000e7	e8 00 00 00 00	 call	 ?debug_watch@@YGXPBDW4mt_type@@PAX@Z ; debug_watch

; 391  : 
; 392  : 	debug_watch ("group packet list counter				= %d", MT_INT, &group_packet_list_counter);

  000ec	68 00 00 00 00	 push	 OFFSET ?group_packet_list_counter@@3HA ; group_packet_list_counter
  000f1	6a 01		 push	 1
  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@DHCLBFCA@group?5packet?5list?5counter?7?7?7?7?$DN?5@
  000f8	e8 00 00 00 00	 call	 ?debug_watch@@YGXPBDW4mt_type@@PAX@Z ; debug_watch

; 393  : 	debug_watch ("personal packet list counter			= %d", MT_INT, &personal_packet_list_counter);

  000fd	68 00 00 00 00	 push	 OFFSET ?personal_packet_list_counter@@3HA ; personal_packet_list_counter
  00102	6a 01		 push	 1
  00104	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@HKJFLHFM@personal?5packet?5list?5counter?7?7?7@
  00109	e8 00 00 00 00	 call	 ?debug_watch@@YGXPBDW4mt_type@@PAX@Z ; debug_watch

; 394  : 	debug_watch ("resend packet list counter			= %d", MT_INT, &resend_packet_list_counter);

  0010e	68 00 00 00 00	 push	 OFFSET ?resend_packet_list_counter@@3HA ; resend_packet_list_counter
  00113	6a 01		 push	 1
  00115	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@BNDLLAK@resend?5packet?5list?5counter?7?7?7?$DN?5@
  0011a	e8 00 00 00 00	 call	 ?debug_watch@@YGXPBDW4mt_type@@PAX@Z ; debug_watch

; 395  : 
; 396  : 	debug_watch ("packet resend timer					= %.02f", MT_FLOAT, &command_line_comms_packet_resend_timer);

  0011f	68 00 00 00 00	 push	 OFFSET ?command_line_comms_packet_resend_timer@@3MA ; command_line_comms_packet_resend_timer
  00124	6a 02		 push	 2
  00126	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@JMGMNIFK@packet?5resend?5timer?7?7?7?7?7?$DN?5?$CF?402f@
  0012b	e8 00 00 00 00	 call	 ?debug_watch@@YGXPBDW4mt_type@@PAX@Z ; debug_watch

; 397  : 	debug_watch ("packet resend timer					= %.02f", MT_FLOAT, &command_line_comms_resend_timeout);

  00130	68 00 00 00 00	 push	 OFFSET ?command_line_comms_resend_timeout@@3MA ; command_line_comms_resend_timeout
  00135	6a 02		 push	 2
  00137	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@JMGMNIFK@packet?5resend?5timer?7?7?7?7?7?$DN?5?$CF?402f@
  0013c	e8 00 00 00 00	 call	 ?debug_watch@@YGXPBDW4mt_type@@PAX@Z ; debug_watch

; 398  : 
; 399  : 	debug_watch ("Max Network frame time				= %d", MT_INT, &command_line_max_game_update_rate);

  00141	68 00 00 00 00	 push	 OFFSET ?command_line_max_game_update_rate@@3HA ; command_line_max_game_update_rate
  00146	6a 01		 push	 1
  00148	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@LBMKBECH@Max?5Network?5frame?5time?7?7?7?7?$DN?5?$CFd@
  0014d	e8 00 00 00 00	 call	 ?debug_watch@@YGXPBDW4mt_type@@PAX@Z ; debug_watch

; 400  : 	debug_watch ("Network frame time					= %.02f", MT_FLOAT, &network_frame_time);

  00152	68 00 00 00 00	 push	 OFFSET ?network_frame_time@@3MA ; network_frame_time
  00157	6a 02		 push	 2
  00159	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@PFNPKGAL@Network?5frame?5time?7?7?7?7?7?$DN?5?$CF?402f@
  0015e	e8 00 00 00 00	 call	 ?debug_watch@@YGXPBDW4mt_type@@PAX@Z ; debug_watch

; 401  : 	debug_watch ("Network frame rate					= %.02f", MT_FLOAT, &network_frame_rate);

  00163	68 00 00 00 00	 push	 OFFSET ?network_frame_rate@@3MA ; network_frame_rate
  00168	6a 02		 push	 2
  0016a	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@BDOIAGGM@Network?5frame?5rate?7?7?7?7?7?$DN?5?$CF?402f@
  0016f	e8 00 00 00 00	 call	 ?debug_watch@@YGXPBDW4mt_type@@PAX@Z ; debug_watch

; 402  : 
; 403  : 	debug_watch ("Group packet list size					= %d", MT_INT, &received_group_list_size);

  00174	68 00 00 00 00	 push	 OFFSET ?received_group_list_size@@3HA
  00179	6a 01		 push	 1
  0017b	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@DGJECGAC@Group?5packet?5list?5size?7?7?7?7?7?$DN?5?$CFd@
  00180	e8 00 00 00 00	 call	 ?debug_watch@@YGXPBDW4mt_type@@PAX@Z ; debug_watch

; 404  : 	debug_watch ("Personal packet list size				= %d", MT_INT, &received_personal_list_size);

  00185	68 00 00 00 00	 push	 OFFSET ?received_personal_list_size@@3HA
  0018a	6a 01		 push	 1
  0018c	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@LFKIIDCL@Personal?5packet?5list?5size?7?7?7?7?$DN?5@
  00191	e8 00 00 00 00	 call	 ?debug_watch@@YGXPBDW4mt_type@@PAX@Z ; debug_watch

; 405  : 	debug_watch ("Resend packet list size				= %d", MT_INT, &resend_list_size);

  00196	68 00 00 00 00	 push	 OFFSET ?resend_list_size@@3HA
  0019b	6a 01		 push	 1
  0019d	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@IBNJPKCL@Resend?5packet?5list?5size?7?7?7?7?$DN?5?$CFd@
  001a2	e8 00 00 00 00	 call	 ?debug_watch@@YGXPBDW4mt_type@@PAX@Z ; debug_watch

; 406  : 	debug_watch ("Rerequest packet list size			= %d", MT_INT, &rerequest_list_size);

  001a7	68 00 00 00 00	 push	 OFFSET ?rerequest_list_size@@3HA
  001ac	6a 01		 push	 1
  001ae	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@DACCJLGD@Rerequest?5packet?5list?5size?7?7?7?$DN?5@
  001b3	e8 00 00 00 00	 call	 ?debug_watch@@YGXPBDW4mt_type@@PAX@Z ; debug_watch

; 407  : 	debug_watch ("Data Record size						= %d", MT_INT, &command_line_comms_data_record_size);

  001b8	68 00 00 00 00	 push	 OFFSET ?command_line_comms_data_record_size@@3HA ; command_line_comms_data_record_size
  001bd	6a 01		 push	 1
  001bf	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@OMGCFHAC@Data?5Record?5size?7?7?7?7?7?7?$DN?5?$CFd@
  001c4	e8 00 00 00 00	 call	 ?debug_watch@@YGXPBDW4mt_type@@PAX@Z ; debug_watch

; 408  : 	debug_watch ("Connection size						= %d", MT_INT, &total_connection_size);

  001c9	68 00 00 00 00	 push	 OFFSET ?total_connection_size@@3HA
  001ce	6a 01		 push	 1
  001d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@ILCCAICJ@Connection?5size?7?7?7?7?7?7?$DN?5?$CFd@
  001d5	e8 00 00 00 00	 call	 ?debug_watch@@YGXPBDW4mt_type@@PAX@Z ; debug_watch

; 409  : 	debug_watch ("Total Data size							= %d", MT_INT, &total_data_size);

  001da	68 00 00 00 00	 push	 OFFSET ?total_data_size@@3HA
  001df	6a 01		 push	 1
  001e1	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@OPLKKDKJ@Total?5Data?5size?7?7?7?7?7?7?7?$DN?5?$CFd@
  001e6	e8 00 00 00 00	 call	 ?debug_watch@@YGXPBDW4mt_type@@PAX@Z ; debug_watch

; 410  : 
; 411  : 	#endif
; 412  : 
; 413  : 	#if COMMS_STATS
; 414  : 
; 415  : 	num_packets_received = 0;

  001eb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?num_packets_received@@3HA, 0

; 416  : 	num_packets_sent = 0;

  001f5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?num_packets_sent@@3HA, 0

; 417  : 	av_packet_size_sent = 0;

  001ff	0f 57 c0	 xorps	 xmm0, xmm0
  00202	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?av_packet_size_sent@@3MA, xmm0

; 418  : 	av_packet_size_received = 0;

  0020a	0f 57 c0	 xorps	 xmm0, xmm0
  0020d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?av_packet_size_received@@3MA, xmm0

; 419  : 	max_packet_size_sent = 0;

  00215	0f 57 c0	 xorps	 xmm0, xmm0
  00218	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?max_packet_size_sent@@3MA, xmm0

; 420  : 	max_packet_size_received = 0;

  00220	0f 57 c0	 xorps	 xmm0, xmm0
  00223	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?max_packet_size_received@@3MA, xmm0

; 421  : 	max_processed_size = 0;

  0022b	0f 57 c0	 xorps	 xmm0, xmm0
  0022e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?max_processed_size@@3MA, xmm0

; 422  : 
; 423  : 	#endif
; 424  : }

  00236	5f		 pop	 edi
  00237	5e		 pop	 esi
  00238	5b		 pop	 ebx
  00239	8b e5		 mov	 esp, ebp
  0023b	5d		 pop	 ebp
  0023c	c3		 ret	 0
?initialise_comms_debug@@YGXXZ ENDP			; initialise_comms_debug
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comms.c
;	COMDAT ?reset_comms_data@@YGXXZ
_TEXT	SEGMENT
_packet$ = -4						; size = 4
?reset_comms_data@@YGXXZ PROC				; reset_comms_data, COMDAT

; 273  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 274  : 
; 275  : 	stub_packet_type
; 276  : 		*packet;
; 277  : 
; 278  : 	#if DEBUG_MODULE >= 1
; 279  : 
; 280  : 	debug_log ("COMMS : reset comms data");
; 281  : 
; 282  : 	#endif
; 283  : 
; 284  : 	comms_weapon_lag_timing = FALSE;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?comms_weapon_lag_timing@@3HA, 0 ; comms_weapon_lag_timing

; 285  : 
; 286  : 	comms_weapon_lag_time = 0.0;

  00013	0f 57 c0	 xorps	 xmm0, xmm0
  00016	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?comms_weapon_lag_time@@3MA, xmm0

; 287  : 
; 288  : 	set_group_frame_id (0);

  0001e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?send_group_frame_id@@3HA, 0 ; send_group_frame_id
$LN2@reset_comm:

; 289  : 
; 290  : 	//
; 291  : 	// Free all group packets
; 292  : 	//
; 293  : 
; 294  : 	while (received_group_packets)

  00028	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?received_group_packets@@3PAUSTUB_PACKET_TYPE@@A, 0 ; received_group_packets
  0002f	74 28		 je	 SHORT $LN3@reset_comm

; 295  : 	{
; 296  : 
; 297  : 		packet = received_group_packets;

  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?received_group_packets@@3PAUSTUB_PACKET_TYPE@@A ; received_group_packets
  00036	89 45 fc	 mov	 DWORD PTR _packet$[ebp], eax

; 298  : 
; 299  : 		received_group_packets = received_group_packets->next;

  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?received_group_packets@@3PAUSTUB_PACKET_TYPE@@A ; received_group_packets
  0003e	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00041	89 0d 00 00 00
	00		 mov	 DWORD PTR ?received_group_packets@@3PAUSTUB_PACKET_TYPE@@A, ecx ; received_group_packets

; 300  : 
; 301  : 		free_stub_packet (packet);

  00047	8b 45 fc	 mov	 eax, DWORD PTR _packet$[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?free_stub_packet@@YGXPAUSTUB_PACKET_TYPE@@@Z ; free_stub_packet

; 302  : 
; 303  : 		packet = NULL;

  00050	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _packet$[ebp], 0

; 304  : 	}

  00057	eb cf		 jmp	 SHORT $LN2@reset_comm
$LN3@reset_comm:

; 305  : 
; 306  : 	//
; 307  : 	// Free all personal packets
; 308  : 	//
; 309  : 
; 310  : 	while (received_personal_packets)

  00059	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?received_personal_packets@@3PAUSTUB_PACKET_TYPE@@A, 0 ; received_personal_packets
  00060	74 28		 je	 SHORT $LN5@reset_comm

; 311  : 	{
; 312  : 
; 313  : 		packet = received_personal_packets;

  00062	a1 00 00 00 00	 mov	 eax, DWORD PTR ?received_personal_packets@@3PAUSTUB_PACKET_TYPE@@A ; received_personal_packets
  00067	89 45 fc	 mov	 DWORD PTR _packet$[ebp], eax

; 314  : 
; 315  : 		received_personal_packets = received_personal_packets->next;

  0006a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?received_personal_packets@@3PAUSTUB_PACKET_TYPE@@A ; received_personal_packets
  0006f	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00072	89 0d 00 00 00
	00		 mov	 DWORD PTR ?received_personal_packets@@3PAUSTUB_PACKET_TYPE@@A, ecx ; received_personal_packets

; 316  : 
; 317  : 		free_stub_packet (packet);

  00078	8b 45 fc	 mov	 eax, DWORD PTR _packet$[ebp]
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?free_stub_packet@@YGXPAUSTUB_PACKET_TYPE@@@Z ; free_stub_packet

; 318  : 
; 319  : 		packet = NULL;

  00081	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _packet$[ebp], 0

; 320  : 	}

  00088	eb cf		 jmp	 SHORT $LN3@reset_comm
$LN5@reset_comm:

; 321  : 
; 322  : 	//
; 323  : 	// Free all resend packets
; 324  : 	//
; 325  : 
; 326  : 	while (resend_packet_list)

  0008a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?resend_packet_list@@3PAUSTUB_PACKET_TYPE@@A, 0 ; resend_packet_list
  00091	74 28		 je	 SHORT $LN7@reset_comm

; 327  : 	{
; 328  : 
; 329  : 		packet = resend_packet_list;

  00093	a1 00 00 00 00	 mov	 eax, DWORD PTR ?resend_packet_list@@3PAUSTUB_PACKET_TYPE@@A ; resend_packet_list
  00098	89 45 fc	 mov	 DWORD PTR _packet$[ebp], eax

; 330  : 
; 331  : 		resend_packet_list = resend_packet_list->next;

  0009b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?resend_packet_list@@3PAUSTUB_PACKET_TYPE@@A ; resend_packet_list
  000a0	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000a3	89 0d 00 00 00
	00		 mov	 DWORD PTR ?resend_packet_list@@3PAUSTUB_PACKET_TYPE@@A, ecx ; resend_packet_list

; 332  : 
; 333  : 		free_stub_packet (packet);

  000a9	8b 45 fc	 mov	 eax, DWORD PTR _packet$[ebp]
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 ?free_stub_packet@@YGXPAUSTUB_PACKET_TYPE@@@Z ; free_stub_packet

; 334  : 
; 335  : 		packet = NULL;

  000b2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _packet$[ebp], 0

; 336  : 	}

  000b9	eb cf		 jmp	 SHORT $LN5@reset_comm
$LN7@reset_comm:

; 337  : 
; 338  : 	received_group_packets = NULL;

  000bb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?received_group_packets@@3PAUSTUB_PACKET_TYPE@@A, 0 ; received_group_packets

; 339  : 
; 340  : 	received_personal_packets = NULL;

  000c5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?received_personal_packets@@3PAUSTUB_PACKET_TYPE@@A, 0 ; received_personal_packets

; 341  : 
; 342  : 	resend_packet_list = NULL;

  000cf	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?resend_packet_list@@3PAUSTUB_PACKET_TYPE@@A, 0 ; resend_packet_list

; 343  : 
; 344  : 	rerequest_packet_counter = 0;

  000d9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?rerequest_packet_counter@@3HA, 0

; 345  : 
; 346  : 	resend_packet_counter = 0;

  000e3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?resend_packet_counter@@3HA, 0

; 347  : 
; 348  : 	resend_packet_list_counter = 0;

  000ed	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?resend_packet_list_counter@@3HA, 0 ; resend_packet_list_counter

; 349  : 
; 350  : 	group_packet_list_counter = 0;

  000f7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?group_packet_list_counter@@3HA, 0 ; group_packet_list_counter

; 351  : 
; 352  : 	personal_packet_list_counter = 0;

  00101	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?personal_packet_list_counter@@3HA, 0 ; personal_packet_list_counter

; 353  : }

  0010b	5f		 pop	 edi
  0010c	5e		 pop	 esi
  0010d	5b		 pop	 ebx
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c3		 ret	 0
?reset_comms_data@@YGXXZ ENDP				; reset_comms_data
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comms.c
;	COMDAT ?initialise_comms@@YGXXZ
_TEXT	SEGMENT
?initialise_comms@@YGXXZ PROC				; initialise_comms, COMDAT

; 242  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 243  : 
; 244  : 	#if DEBUG_MODULE >= 1
; 245  : 
; 246  : 	debug_log ("COMMS : Initialise comms");
; 247  : 
; 248  : 	#endif
; 249  : 
; 250  : 	direct_play_set_comms_mode (DIRECT_PLAY_COMMS_MODE_NONE);

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?direct_play_comms_mode@@3W4DIRECT_PLAY_COMMS_MODE_TYPES@@A, 0 ; direct_play_comms_mode

; 251  : 
; 252  : 	set_comms_data_flow (COMMS_DATA_FLOW_TX);

  00013	6a 00		 push	 0
  00015	e8 00 00 00 00	 call	 ?set_comms_data_flow@@YGXW4COMMS_DATA_FLOW_TYPES@@@Z ; set_comms_data_flow

; 253  : 
; 254  : 	set_comms_model (COMMS_MODEL_SERVER);

  0001a	6a 00		 push	 0
  0001c	e8 00 00 00 00	 call	 ?set_comms_model@@YGXW4COMMS_MODEL_TYPES@@@Z ; set_comms_model

; 255  : 
; 256  : 	reset_comms_data ();

  00021	e8 00 00 00 00	 call	 ?reset_comms_data@@YGXXZ ; reset_comms_data

; 257  : 
; 258  : 	comms_clear_data_record ();

  00026	e8 00 00 00 00	 call	 ?comms_clear_data_record@@YGXXZ ; comms_clear_data_record

; 259  : 
; 260  : 	if (command_line_comms_guaranteed_send)

  0002b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_comms_guaranteed_send@@3HA, 0 ; command_line_comms_guaranteed_send
  00032	74 10		 je	 SHORT $LN2@initialise

; 261  : 	{
; 262  : 
; 263  : 		// big number to stop my resend system kicking in
; 264  : 		command_line_comms_packet_resend_timer = 1000;

  00034	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@447a0000
  0003c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?command_line_comms_packet_resend_timer@@3MA, xmm0
$LN2@initialise:

; 265  : 	}
; 266  : }

  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
?initialise_comms@@YGXXZ ENDP				; initialise_comms
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comms.c
;	COMDAT ?set_comms_model@@YGXW4COMMS_MODEL_TYPES@@@Z
_TEXT	SEGMENT
_model$ = 8						; size = 4
?set_comms_model@@YGXW4COMMS_MODEL_TYPES@@@Z PROC	; set_comms_model, COMDAT

; 230  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 231  : 
; 232  : 	system_comms_model = model;

  00009	8b 45 08	 mov	 eax, DWORD PTR _model$[ebp]
  0000c	a3 00 00 00 00	 mov	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, eax ; system_comms_model

; 233  : 
; 234  : 	comms_model_string = comms_model_names [model];

  00011	8b 45 08	 mov	 eax, DWORD PTR _model$[ebp]
  00014	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?comms_model_names@@3PAPBDA[eax*4]
  0001b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?comms_model_string@@3PBDB, ecx ; comms_model_string

; 235  : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?set_comms_model@@YGXW4COMMS_MODEL_TYPES@@@Z ENDP	; set_comms_model
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\comms\comms.c
;	COMDAT ?set_comms_data_flow@@YGXW4COMMS_DATA_FLOW_TYPES@@@Z
_TEXT	SEGMENT
_data_flow$ = 8						; size = 4
?set_comms_data_flow@@YGXW4COMMS_DATA_FLOW_TYPES@@@Z PROC ; set_comms_data_flow, COMDAT

; 220  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 221  : 
; 222  : 	system_comms_data_flow = data_flow;

  00009	8b 45 08	 mov	 eax, DWORD PTR _data_flow$[ebp]
  0000c	a3 00 00 00 00	 mov	 DWORD PTR ?system_comms_data_flow@@3W4COMMS_DATA_FLOW_TYPES@@A, eax ; system_comms_data_flow

; 223  : }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?set_comms_data_flow@@YGXW4COMMS_DATA_FLOW_TYPES@@@Z ENDP ; set_comms_data_flow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
