; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\sound\dsound3d.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?dsound_get_3d_buffer@@YGPAUIDirectSound3DBuffer@@PAUIDirectSoundBuffer@@@Z ; dsound_get_3d_buffer
PUBLIC	?dsound_is_3d_buffer@@YGHPAUIDirectSoundBuffer@@@Z ; dsound_is_3d_buffer
PUBLIC	?dsound_set_listener_3d_position@@YGHPAUVEC3D@@@Z ; dsound_set_listener_3d_position
PUBLIC	?dsound_get_listener_3d_position@@YGHPAUVEC3D@@@Z ; dsound_get_listener_3d_position
PUBLIC	?dsound_set_listener_3d_velocity@@YGHPAUVEC3D@@@Z ; dsound_set_listener_3d_velocity
PUBLIC	?dsound_get_listener_3d_velocity@@YGHPAUVEC3D@@@Z ; dsound_get_listener_3d_velocity
PUBLIC	?dsound_set_listener_3d_orientation@@YGHPAUVEC3D@@0@Z ; dsound_set_listener_3d_orientation
PUBLIC	?dsound_get_listener_3d_orientation@@YGHPAUVEC3D@@0@Z ; dsound_get_listener_3d_orientation
PUBLIC	?dsound_set_listener_doppler_factor@@YGHM@Z	; dsound_set_listener_doppler_factor
PUBLIC	?dsound_get_listener_doppler_factor@@YGHPAM@Z	; dsound_get_listener_doppler_factor
PUBLIC	?dsound_set_listener_rolloff_factor@@YGHM@Z	; dsound_set_listener_rolloff_factor
PUBLIC	?dsound_get_listener_rolloff_factor@@YGHPAM@Z	; dsound_get_listener_rolloff_factor
PUBLIC	?dsound_set_buffer_3d_position@@YGHPAUIDirectSound3DBuffer@@PAUVEC3D@@@Z ; dsound_set_buffer_3d_position
PUBLIC	?dsound_get_buffer_3d_position@@YGHPAUIDirectSound3DBuffer@@PAUVEC3D@@@Z ; dsound_get_buffer_3d_position
PUBLIC	?dsound_set_buffer_3d_velocity@@YGHPAUIDirectSound3DBuffer@@PAUVEC3D@@@Z ; dsound_set_buffer_3d_velocity
PUBLIC	?dsound_get_buffer_3d_velocity@@YGHPAUIDirectSound3DBuffer@@PAUVEC3D@@@Z ; dsound_get_buffer_3d_velocity
PUBLIC	?dsound_set_buffer_3d_maximum_distance@@YGHPAUIDirectSound3DBuffer@@M@Z ; dsound_set_buffer_3d_maximum_distance
PUBLIC	?dsound_get_buffer_3d_maximum_distance@@YGHPAUIDirectSound3DBuffer@@PAM@Z ; dsound_get_buffer_3d_maximum_distance
PUBLIC	?dsound_set_buffer_3d_minimum_distance@@YGHPAUIDirectSound3DBuffer@@M@Z ; dsound_set_buffer_3d_minimum_distance
PUBLIC	?dsound_get_buffer_3d_minimum_distance@@YGHPAUIDirectSound3DBuffer@@PAM@Z ; dsound_get_buffer_3d_minimum_distance
PUBLIC	?dsound_commit_3d_settings@@YGHXZ		; dsound_commit_3d_settings
PUBLIC	??_C@_0CL@MCJLKAFI@Unable?5to?5get?5caps?5of?5the?5sound@ ; `string'
PUBLIC	??_C@_0DB@PHJICOCG@Unable?5to?5set?5position?5of?53d?5li@ ; `string'
PUBLIC	??_C@_0DB@CFHLKJNF@Unable?5to?5get?5position?5of?53d?5li@ ; `string'
PUBLIC	??_C@_0DB@KFBHAICK@Unable?5to?5set?5velocity?5of?53d?5li@ ; `string'
PUBLIC	??_C@_0DB@HHPEIPNJ@Unable?5to?5get?5velocity?5of?53d?5li@ ; `string'
PUBLIC	??_C@_0DE@FGFLFKHL@Unable?5to?5set?5orientation?5of?53d@ ; `string'
PUBLIC	??_C@_0DE@KMBICKGO@Unable?5to?5get?5orientation?5of?53d@ ; `string'
PUBLIC	??_C@_0DH@BKJFCEDF@Unable?5to?5set?5doppler?5factor?5of@ ; `string'
PUBLIC	??_C@_0DH@MAJCCMII@Unable?5to?5get?5doppler?5factor?5of@ ; `string'
PUBLIC	??_C@_0DH@DGDMACJH@Unable?5to?5set?5rolloff?5factor?5of@ ; `string'
PUBLIC	??_C@_0DH@OMDLAKCK@Unable?5to?5get?5rolloff?5factor?5of@ ; `string'
PUBLIC	??_C@_0CI@IMOLOKEF@Unable?5to?5set?5position?5of?53d?5bu@ ; `string'
PUBLIC	??_C@_0CI@NIEFKGH@Unable?5to?5get?5position?5of?53d?5bu@ ; `string'
PUBLIC	??_C@_0CI@DJAKHAIN@Unable?5to?5set?5velocity?5of?53d?5bu@ ; `string'
PUBLIC	??_C@_0CI@LIGFMAKP@Unable?5to?5get?5velocity?5of?53d?5bu@ ; `string'
PUBLIC	??_C@_0CM@FEKPIHOA@Unable?5to?5set?5max?5distance?5of?53@ ; `string'
PUBLIC	??_C@_0CM@ODBANKJL@Unable?5to?5get?5max?5distance?5of?53@ ; `string'
PUBLIC	??_C@_0CM@OEJAJNNM@Unable?5to?5set?5min?5distance?5of?53@ ; `string'
PUBLIC	??_C@_0CM@FDCPMAKH@Unable?5to?5get?5min?5distance?5of?53@ ; `string'
PUBLIC	??_C@_0DE@OJPHCBLI@Unable?5to?5commit?5settings?5of?53d@ ; `string'
EXTRN	_memset:PROC
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?get_dsound_error_message@@YGPBDJ@Z:PROC	; get_dsound_error_message
EXTRN	?d3dsound_listener@@3PAUIDirectSound3DListener@@A:DWORD ; d3dsound_listener
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_0DE@OJPHCBLI@Unable?5to?5commit?5settings?5of?53d@
CONST	SEGMENT
??_C@_0DE@OJPHCBLI@Unable?5to?5commit?5settings?5of?53d@ DB 'Unable to co'
	DB	'mmit settings of 3d listener object: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@FDCPMAKH@Unable?5to?5get?5min?5distance?5of?53@
CONST	SEGMENT
??_C@_0CM@FDCPMAKH@Unable?5to?5get?5min?5distance?5of?53@ DB 'Unable to g'
	DB	'et min distance of 3d buffer: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@OEJAJNNM@Unable?5to?5set?5min?5distance?5of?53@
CONST	SEGMENT
??_C@_0CM@OEJAJNNM@Unable?5to?5set?5min?5distance?5of?53@ DB 'Unable to s'
	DB	'et min distance of 3d buffer: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@ODBANKJL@Unable?5to?5get?5max?5distance?5of?53@
CONST	SEGMENT
??_C@_0CM@ODBANKJL@Unable?5to?5get?5max?5distance?5of?53@ DB 'Unable to g'
	DB	'et max distance of 3d buffer: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@FEKPIHOA@Unable?5to?5set?5max?5distance?5of?53@
CONST	SEGMENT
??_C@_0CM@FEKPIHOA@Unable?5to?5set?5max?5distance?5of?53@ DB 'Unable to s'
	DB	'et max distance of 3d buffer: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@LIGFMAKP@Unable?5to?5get?5velocity?5of?53d?5bu@
CONST	SEGMENT
??_C@_0CI@LIGFMAKP@Unable?5to?5get?5velocity?5of?53d?5bu@ DB 'Unable to g'
	DB	'et velocity of 3d buffer: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@DJAKHAIN@Unable?5to?5set?5velocity?5of?53d?5bu@
CONST	SEGMENT
??_C@_0CI@DJAKHAIN@Unable?5to?5set?5velocity?5of?53d?5bu@ DB 'Unable to s'
	DB	'et velocity of 3d buffer: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@NIEFKGH@Unable?5to?5get?5position?5of?53d?5bu@
CONST	SEGMENT
??_C@_0CI@NIEFKGH@Unable?5to?5get?5position?5of?53d?5bu@ DB 'Unable to ge'
	DB	't position of 3d buffer: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@IMOLOKEF@Unable?5to?5set?5position?5of?53d?5bu@
CONST	SEGMENT
??_C@_0CI@IMOLOKEF@Unable?5to?5set?5position?5of?53d?5bu@ DB 'Unable to s'
	DB	'et position of 3d buffer: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@OMDLAKCK@Unable?5to?5get?5rolloff?5factor?5of@
CONST	SEGMENT
??_C@_0DH@OMDLAKCK@Unable?5to?5get?5rolloff?5factor?5of@ DB 'Unable to ge'
	DB	't rolloff factor of 3d listener object: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@DGDMACJH@Unable?5to?5set?5rolloff?5factor?5of@
CONST	SEGMENT
??_C@_0DH@DGDMACJH@Unable?5to?5set?5rolloff?5factor?5of@ DB 'Unable to se'
	DB	't rolloff factor of 3d listener object: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@MAJCCMII@Unable?5to?5get?5doppler?5factor?5of@
CONST	SEGMENT
??_C@_0DH@MAJCCMII@Unable?5to?5get?5doppler?5factor?5of@ DB 'Unable to ge'
	DB	't doppler factor of 3d listener object: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@BKJFCEDF@Unable?5to?5set?5doppler?5factor?5of@
CONST	SEGMENT
??_C@_0DH@BKJFCEDF@Unable?5to?5set?5doppler?5factor?5of@ DB 'Unable to se'
	DB	't doppler factor of 3d listener object: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@KMBICKGO@Unable?5to?5get?5orientation?5of?53d@
CONST	SEGMENT
??_C@_0DE@KMBICKGO@Unable?5to?5get?5orientation?5of?53d@ DB 'Unable to ge'
	DB	't orientation of 3d listener object: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@FGFLFKHL@Unable?5to?5set?5orientation?5of?53d@
CONST	SEGMENT
??_C@_0DE@FGFLFKHL@Unable?5to?5set?5orientation?5of?53d@ DB 'Unable to se'
	DB	't orientation of 3d listener object: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@HHPEIPNJ@Unable?5to?5get?5velocity?5of?53d?5li@
CONST	SEGMENT
??_C@_0DB@HHPEIPNJ@Unable?5to?5get?5velocity?5of?53d?5li@ DB 'Unable to g'
	DB	'et velocity of 3d listener object: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@KFBHAICK@Unable?5to?5set?5velocity?5of?53d?5li@
CONST	SEGMENT
??_C@_0DB@KFBHAICK@Unable?5to?5set?5velocity?5of?53d?5li@ DB 'Unable to s'
	DB	'et velocity of 3d listener object: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@CFHLKJNF@Unable?5to?5get?5position?5of?53d?5li@
CONST	SEGMENT
??_C@_0DB@CFHLKJNF@Unable?5to?5get?5position?5of?53d?5li@ DB 'Unable to g'
	DB	'et position of 3d listener object: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@PHJICOCG@Unable?5to?5set?5position?5of?53d?5li@
CONST	SEGMENT
??_C@_0DB@PHJICOCG@Unable?5to?5set?5position?5of?53d?5li@ DB 'Unable to s'
	DB	'et position of 3d listener object: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@MCJLKAFI@Unable?5to?5get?5caps?5of?5the?5sound@
CONST	SEGMENT
??_C@_0CL@MCJLKAFI@Unable?5to?5get?5caps?5of?5the?5sound@ DB 'Unable to g'
	DB	'et caps of the sound buffer: %s', 00H	; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dsound3d.c
;	COMDAT ?dsound_commit_3d_settings@@YGHXZ
_TEXT	SEGMENT
_dsrval$ = -4						; size = 4
?dsound_commit_3d_settings@@YGHXZ PROC			; dsound_commit_3d_settings, COMDAT

; 652  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 653  : 
; 654  : 	HRESULT
; 655  : 		dsrval;
; 656  : 
; 657  : 	dsrval = IDirectSound3DListener_CommitDeferredSettings ( d3dsound_listener );

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?d3dsound_listener@@3PAUIDirectSound3DListener@@A ; d3dsound_listener
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?d3dsound_listener@@3PAUIDirectSound3DListener@@A ; d3dsound_listener
  00016	52		 push	 edx
  00017	8b 41 44	 mov	 eax, DWORD PTR [ecx+68]
  0001a	ff d0		 call	 eax
  0001c	89 45 fc	 mov	 DWORD PTR _dsrval$[ebp], eax

; 658  : 
; 659  : 	if ( dsrval != DS_OK )

  0001f	83 7d fc 00	 cmp	 DWORD PTR _dsrval$[ebp], 0
  00023	74 1d		 je	 SHORT $LN2@dsound_com

; 660  : 	{
; 661  : 
; 662  : 		debug_log ( "Unable to commit settings of 3d listener object: %s", get_dsound_error_message ( dsrval ) );

  00025	8b 45 fc	 mov	 eax, DWORD PTR _dsrval$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?get_dsound_error_message@@YGPBDJ@Z ; get_dsound_error_message
  0002e	50		 push	 eax
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OJPHCBLI@Unable?5to?5commit?5settings?5of?53d@
  00034	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00039	83 c4 08	 add	 esp, 8

; 663  : 
; 664  : 		return ( FALSE );

  0003c	33 c0		 xor	 eax, eax
  0003e	eb 07		 jmp	 SHORT $LN1@dsound_com

; 665  : 	}
; 666  : 	else

  00040	eb 05		 jmp	 SHORT $LN1@dsound_com
$LN2@dsound_com:

; 667  : 	{
; 668  : 
; 669  : 		return ( TRUE );

  00042	b8 01 00 00 00	 mov	 eax, 1
$LN1@dsound_com:

; 670  : 	}
; 671  : }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
?dsound_commit_3d_settings@@YGHXZ ENDP			; dsound_commit_3d_settings
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dsound3d.c
;	COMDAT ?dsound_get_buffer_3d_minimum_distance@@YGHPAUIDirectSound3DBuffer@@PAM@Z
_TEXT	SEGMENT
_dsrval$ = -4						; size = 4
_buffer$ = 8						; size = 4
_distance$ = 12						; size = 4
?dsound_get_buffer_3d_minimum_distance@@YGHPAUIDirectSound3DBuffer@@PAM@Z PROC ; dsound_get_buffer_3d_minimum_distance, COMDAT

; 626  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 627  : 
; 628  : 	HRESULT
; 629  : 		dsrval;
; 630  : 
; 631  : 	dsrval = IDirectSound3DBuffer_GetMinDistance ( buffer, distance );

  00009	8b 45 0c	 mov	 eax, DWORD PTR _distance$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00010	8b 11		 mov	 edx, DWORD PTR [ecx]
  00012	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00015	50		 push	 eax
  00016	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
  00019	ff d1		 call	 ecx
  0001b	89 45 fc	 mov	 DWORD PTR _dsrval$[ebp], eax

; 632  : 
; 633  : 	if ( dsrval != DS_OK )

  0001e	83 7d fc 00	 cmp	 DWORD PTR _dsrval$[ebp], 0
  00022	74 1d		 je	 SHORT $LN2@dsound_get

; 634  : 	{
; 635  : 
; 636  : 		debug_log ( "Unable to get min distance of 3d buffer: %s", get_dsound_error_message ( dsrval ) );

  00024	8b 45 fc	 mov	 eax, DWORD PTR _dsrval$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?get_dsound_error_message@@YGPBDJ@Z ; get_dsound_error_message
  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@FDCPMAKH@Unable?5to?5get?5min?5distance?5of?53@
  00033	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00038	83 c4 08	 add	 esp, 8

; 637  : 
; 638  : 		return ( FALSE );

  0003b	33 c0		 xor	 eax, eax
  0003d	eb 07		 jmp	 SHORT $LN1@dsound_get

; 639  : 	}
; 640  : 	else

  0003f	eb 05		 jmp	 SHORT $LN1@dsound_get
$LN2@dsound_get:

; 641  : 	{
; 642  : 
; 643  : 		return ( TRUE );

  00041	b8 01 00 00 00	 mov	 eax, 1
$LN1@dsound_get:

; 644  : 	}
; 645  : }

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
?dsound_get_buffer_3d_minimum_distance@@YGHPAUIDirectSound3DBuffer@@PAM@Z ENDP ; dsound_get_buffer_3d_minimum_distance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dsound3d.c
;	COMDAT ?dsound_set_buffer_3d_minimum_distance@@YGHPAUIDirectSound3DBuffer@@M@Z
_TEXT	SEGMENT
_dsrval$ = -4						; size = 4
_buffer$ = 8						; size = 4
_distance$ = 12						; size = 4
?dsound_set_buffer_3d_minimum_distance@@YGHPAUIDirectSound3DBuffer@@M@Z PROC ; dsound_set_buffer_3d_minimum_distance, COMDAT

; 600  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 601  : 
; 602  : 	HRESULT
; 603  : 		dsrval;
; 604  : 
; 605  : 	dsrval = IDirectSound3DBuffer_SetMinDistance ( buffer, distance, DS3D_DEFERRED );

  00009	6a 01		 push	 1
  0000b	51		 push	 ecx
  0000c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _distance$[ebp]
  00011	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00016	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	8b 55 08	 mov	 edx, DWORD PTR _buffer$[ebp]
  0001e	52		 push	 edx
  0001f	8b 41 44	 mov	 eax, DWORD PTR [ecx+68]
  00022	ff d0		 call	 eax
  00024	89 45 fc	 mov	 DWORD PTR _dsrval$[ebp], eax

; 606  : 
; 607  : 	if ( dsrval != DS_OK )

  00027	83 7d fc 00	 cmp	 DWORD PTR _dsrval$[ebp], 0
  0002b	74 1d		 je	 SHORT $LN2@dsound_set

; 608  : 	{
; 609  : 
; 610  : 		debug_log ( "Unable to set min distance of 3d buffer: %s", get_dsound_error_message ( dsrval ) );

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _dsrval$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?get_dsound_error_message@@YGPBDJ@Z ; get_dsound_error_message
  00036	50		 push	 eax
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@OEJAJNNM@Unable?5to?5set?5min?5distance?5of?53@
  0003c	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00041	83 c4 08	 add	 esp, 8

; 611  : 
; 612  : 		return ( FALSE );

  00044	33 c0		 xor	 eax, eax
  00046	eb 07		 jmp	 SHORT $LN3@dsound_set

; 613  : 	}
; 614  : 	else

  00048	eb 05		 jmp	 SHORT $LN3@dsound_set
$LN2@dsound_set:

; 615  : 	{
; 616  : 
; 617  : 		return ( TRUE );

  0004a	b8 01 00 00 00	 mov	 eax, 1
$LN3@dsound_set:

; 618  : 	}
; 619  : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 08 00	 ret	 8
?dsound_set_buffer_3d_minimum_distance@@YGHPAUIDirectSound3DBuffer@@M@Z ENDP ; dsound_set_buffer_3d_minimum_distance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dsound3d.c
;	COMDAT ?dsound_get_buffer_3d_maximum_distance@@YGHPAUIDirectSound3DBuffer@@PAM@Z
_TEXT	SEGMENT
_dsrval$ = -4						; size = 4
_buffer$ = 8						; size = 4
_distance$ = 12						; size = 4
?dsound_get_buffer_3d_maximum_distance@@YGHPAUIDirectSound3DBuffer@@PAM@Z PROC ; dsound_get_buffer_3d_maximum_distance, COMDAT

; 574  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 575  : 
; 576  : 	HRESULT
; 577  : 		dsrval;
; 578  : 
; 579  : 	dsrval = IDirectSound3DBuffer_GetMaxDistance ( buffer, distance );

  00009	8b 45 0c	 mov	 eax, DWORD PTR _distance$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00010	8b 11		 mov	 edx, DWORD PTR [ecx]
  00012	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00015	50		 push	 eax
  00016	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
  00019	ff d1		 call	 ecx
  0001b	89 45 fc	 mov	 DWORD PTR _dsrval$[ebp], eax

; 580  : 
; 581  : 	if ( dsrval != DS_OK )

  0001e	83 7d fc 00	 cmp	 DWORD PTR _dsrval$[ebp], 0
  00022	74 1d		 je	 SHORT $LN2@dsound_get

; 582  : 	{
; 583  : 
; 584  : 		debug_log ( "Unable to get max distance of 3d buffer: %s", get_dsound_error_message ( dsrval ) );

  00024	8b 45 fc	 mov	 eax, DWORD PTR _dsrval$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?get_dsound_error_message@@YGPBDJ@Z ; get_dsound_error_message
  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@ODBANKJL@Unable?5to?5get?5max?5distance?5of?53@
  00033	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00038	83 c4 08	 add	 esp, 8

; 585  : 
; 586  : 		return ( FALSE );

  0003b	33 c0		 xor	 eax, eax
  0003d	eb 07		 jmp	 SHORT $LN1@dsound_get

; 587  : 	}
; 588  : 	else

  0003f	eb 05		 jmp	 SHORT $LN1@dsound_get
$LN2@dsound_get:

; 589  : 	{
; 590  : 
; 591  : 		return ( TRUE );

  00041	b8 01 00 00 00	 mov	 eax, 1
$LN1@dsound_get:

; 592  : 	}
; 593  : }

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
?dsound_get_buffer_3d_maximum_distance@@YGHPAUIDirectSound3DBuffer@@PAM@Z ENDP ; dsound_get_buffer_3d_maximum_distance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dsound3d.c
;	COMDAT ?dsound_set_buffer_3d_maximum_distance@@YGHPAUIDirectSound3DBuffer@@M@Z
_TEXT	SEGMENT
_dsrval$ = -4						; size = 4
_buffer$ = 8						; size = 4
_distance$ = 12						; size = 4
?dsound_set_buffer_3d_maximum_distance@@YGHPAUIDirectSound3DBuffer@@M@Z PROC ; dsound_set_buffer_3d_maximum_distance, COMDAT

; 548  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 549  : 
; 550  : 	HRESULT
; 551  : 		dsrval;
; 552  : 
; 553  : 	dsrval = IDirectSound3DBuffer_SetMaxDistance ( buffer, distance, DS3D_DEFERRED );

  00009	6a 01		 push	 1
  0000b	51		 push	 ecx
  0000c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _distance$[ebp]
  00011	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00016	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	8b 55 08	 mov	 edx, DWORD PTR _buffer$[ebp]
  0001e	52		 push	 edx
  0001f	8b 41 40	 mov	 eax, DWORD PTR [ecx+64]
  00022	ff d0		 call	 eax
  00024	89 45 fc	 mov	 DWORD PTR _dsrval$[ebp], eax

; 554  : 
; 555  : 	if ( dsrval != DS_OK )

  00027	83 7d fc 00	 cmp	 DWORD PTR _dsrval$[ebp], 0
  0002b	74 1d		 je	 SHORT $LN2@dsound_set

; 556  : 	{
; 557  : 
; 558  : 		debug_log ( "Unable to set max distance of 3d buffer: %s", get_dsound_error_message ( dsrval ) );

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _dsrval$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?get_dsound_error_message@@YGPBDJ@Z ; get_dsound_error_message
  00036	50		 push	 eax
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@FEKPIHOA@Unable?5to?5set?5max?5distance?5of?53@
  0003c	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00041	83 c4 08	 add	 esp, 8

; 559  : 
; 560  : 		return ( FALSE );

  00044	33 c0		 xor	 eax, eax
  00046	eb 07		 jmp	 SHORT $LN3@dsound_set

; 561  : 	}
; 562  : 	else

  00048	eb 05		 jmp	 SHORT $LN3@dsound_set
$LN2@dsound_set:

; 563  : 	{
; 564  : 
; 565  : 		return ( TRUE );

  0004a	b8 01 00 00 00	 mov	 eax, 1
$LN3@dsound_set:

; 566  : 	}
; 567  : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 08 00	 ret	 8
?dsound_set_buffer_3d_maximum_distance@@YGHPAUIDirectSound3DBuffer@@M@Z ENDP ; dsound_set_buffer_3d_maximum_distance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dsound3d.c
;	COMDAT ?dsound_get_buffer_3d_velocity@@YGHPAUIDirectSound3DBuffer@@PAUVEC3D@@@Z
_TEXT	SEGMENT
_vector$ = -16						; size = 12
_dsrval$ = -4						; size = 4
_buffer$ = 8						; size = 4
_velocity$ = 12						; size = 4
?dsound_get_buffer_3d_velocity@@YGHPAUIDirectSound3DBuffer@@PAUVEC3D@@@Z PROC ; dsound_get_buffer_3d_velocity, COMDAT

; 515  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 516  : 
; 517  : 	HRESULT
; 518  : 		dsrval;
; 519  : 
; 520  : 	D3DVECTOR
; 521  : 		vector;
; 522  : 
; 523  : 	dsrval = IDirectSound3DBuffer_GetVelocity ( buffer, &vector );

  00009	8d 45 f0	 lea	 eax, DWORD PTR _vector$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00010	8b 11		 mov	 edx, DWORD PTR [ecx]
  00012	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00015	50		 push	 eax
  00016	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  00019	ff d1		 call	 ecx
  0001b	89 45 fc	 mov	 DWORD PTR _dsrval$[ebp], eax

; 524  : 
; 525  : 	if ( dsrval != DS_OK )

  0001e	83 7d fc 00	 cmp	 DWORD PTR _dsrval$[ebp], 0
  00022	74 1d		 je	 SHORT $LN2@dsound_get

; 526  : 	{
; 527  : 
; 528  : 		debug_log ( "Unable to get velocity of 3d buffer: %s", get_dsound_error_message ( dsrval ) );

  00024	8b 45 fc	 mov	 eax, DWORD PTR _dsrval$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?get_dsound_error_message@@YGPBDJ@Z ; get_dsound_error_message
  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@LIGFMAKP@Unable?5to?5get?5velocity?5of?53d?5bu@
  00033	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00038	83 c4 08	 add	 esp, 8

; 529  : 
; 530  : 		return ( FALSE );

  0003b	33 c0		 xor	 eax, eax
  0003d	eb 2d		 jmp	 SHORT $LN3@dsound_get

; 531  : 	}
; 532  : 	else

  0003f	eb 2b		 jmp	 SHORT $LN3@dsound_get
$LN2@dsound_get:

; 533  : 	{
; 534  : 	
; 535  : 		velocity->x = vector.x;

  00041	8b 45 0c	 mov	 eax, DWORD PTR _velocity$[ebp]
  00044	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _vector$[ebp]
  00049	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 536  : 		velocity->y = vector.y;

  0004d	8b 45 0c	 mov	 eax, DWORD PTR _velocity$[ebp]
  00050	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _vector$[ebp+4]
  00055	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 537  : 		velocity->z = vector.z;

  0005a	8b 45 0c	 mov	 eax, DWORD PTR _velocity$[ebp]
  0005d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _vector$[ebp+8]
  00062	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 538  : 
; 539  : 		return ( TRUE );

  00067	b8 01 00 00 00	 mov	 eax, 1
$LN3@dsound_get:

; 540  : 	}
; 541  : }

  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 08 00	 ret	 8
?dsound_get_buffer_3d_velocity@@YGHPAUIDirectSound3DBuffer@@PAUVEC3D@@@Z ENDP ; dsound_get_buffer_3d_velocity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dsound3d.c
;	COMDAT ?dsound_set_buffer_3d_velocity@@YGHPAUIDirectSound3DBuffer@@PAUVEC3D@@@Z
_TEXT	SEGMENT
_dsrval$ = -4						; size = 4
_buffer$ = 8						; size = 4
_velocity$ = 12						; size = 4
?dsound_set_buffer_3d_velocity@@YGHPAUIDirectSound3DBuffer@@PAUVEC3D@@@Z PROC ; dsound_set_buffer_3d_velocity, COMDAT

; 489  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 490  : 
; 491  : 	HRESULT
; 492  : 		dsrval;
; 493  : 
; 494  : 	dsrval = IDirectSound3DBuffer_SetVelocity ( buffer, velocity->x, velocity->y, velocity->z, DS3D_DEFERRED );

  00009	6a 01		 push	 1
  0000b	8b 45 0c	 mov	 eax, DWORD PTR _velocity$[ebp]
  0000e	51		 push	 ecx
  0000f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00014	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _velocity$[ebp]
  0001c	51		 push	 ecx
  0001d	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00022	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00027	8b 55 0c	 mov	 edx, DWORD PTR _velocity$[ebp]
  0002a	51		 push	 ecx
  0002b	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0002f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00034	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]
  00039	8b 55 08	 mov	 edx, DWORD PTR _buffer$[ebp]
  0003c	52		 push	 edx
  0003d	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  00040	ff d0		 call	 eax
  00042	89 45 fc	 mov	 DWORD PTR _dsrval$[ebp], eax

; 495  : 
; 496  : 	if ( dsrval != DS_OK )

  00045	83 7d fc 00	 cmp	 DWORD PTR _dsrval$[ebp], 0
  00049	74 1d		 je	 SHORT $LN2@dsound_set

; 497  : 	{
; 498  : 
; 499  : 		debug_log ( "Unable to set velocity of 3d buffer: %s", get_dsound_error_message ( dsrval ) );

  0004b	8b 45 fc	 mov	 eax, DWORD PTR _dsrval$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?get_dsound_error_message@@YGPBDJ@Z ; get_dsound_error_message
  00054	50		 push	 eax
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@DJAKHAIN@Unable?5to?5set?5velocity?5of?53d?5bu@
  0005a	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0005f	83 c4 08	 add	 esp, 8

; 500  : 
; 501  : 		return ( FALSE );

  00062	33 c0		 xor	 eax, eax
  00064	eb 07		 jmp	 SHORT $LN3@dsound_set

; 502  : 	}
; 503  : 	else

  00066	eb 05		 jmp	 SHORT $LN3@dsound_set
$LN2@dsound_set:

; 504  : 	{
; 505  : 
; 506  : 		return ( TRUE );

  00068	b8 01 00 00 00	 mov	 eax, 1
$LN3@dsound_set:

; 507  : 	}
; 508  : }

  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 08 00	 ret	 8
?dsound_set_buffer_3d_velocity@@YGHPAUIDirectSound3DBuffer@@PAUVEC3D@@@Z ENDP ; dsound_set_buffer_3d_velocity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dsound3d.c
;	COMDAT ?dsound_get_buffer_3d_position@@YGHPAUIDirectSound3DBuffer@@PAUVEC3D@@@Z
_TEXT	SEGMENT
_vector$ = -16						; size = 12
_dsrval$ = -4						; size = 4
_buffer$ = 8						; size = 4
_position$ = 12						; size = 4
?dsound_get_buffer_3d_position@@YGHPAUIDirectSound3DBuffer@@PAUVEC3D@@@Z PROC ; dsound_get_buffer_3d_position, COMDAT

; 456  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 457  : 
; 458  : 	HRESULT
; 459  : 		dsrval;
; 460  : 
; 461  : 	D3DVECTOR
; 462  : 		vector;
; 463  : 
; 464  : 	dsrval = IDirectSound3DBuffer_GetPosition ( buffer, &vector );

  00009	8d 45 f0	 lea	 eax, DWORD PTR _vector$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00010	8b 11		 mov	 edx, DWORD PTR [ecx]
  00012	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00015	50		 push	 eax
  00016	8b 4a 28	 mov	 ecx, DWORD PTR [edx+40]
  00019	ff d1		 call	 ecx
  0001b	89 45 fc	 mov	 DWORD PTR _dsrval$[ebp], eax

; 465  : 
; 466  : 	if ( dsrval != DS_OK )

  0001e	83 7d fc 00	 cmp	 DWORD PTR _dsrval$[ebp], 0
  00022	74 1d		 je	 SHORT $LN2@dsound_get

; 467  : 	{
; 468  : 
; 469  : 		debug_log ( "Unable to get position of 3d buffer: %s", get_dsound_error_message ( dsrval ) );

  00024	8b 45 fc	 mov	 eax, DWORD PTR _dsrval$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?get_dsound_error_message@@YGPBDJ@Z ; get_dsound_error_message
  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@NIEFKGH@Unable?5to?5get?5position?5of?53d?5bu@
  00033	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00038	83 c4 08	 add	 esp, 8

; 470  : 
; 471  : 		return ( FALSE );

  0003b	33 c0		 xor	 eax, eax
  0003d	eb 2d		 jmp	 SHORT $LN3@dsound_get

; 472  : 	}
; 473  : 	else

  0003f	eb 2b		 jmp	 SHORT $LN3@dsound_get
$LN2@dsound_get:

; 474  : 	{
; 475  : 
; 476  : 		position->x = vector.x;

  00041	8b 45 0c	 mov	 eax, DWORD PTR _position$[ebp]
  00044	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _vector$[ebp]
  00049	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 477  : 		position->y = vector.y;

  0004d	8b 45 0c	 mov	 eax, DWORD PTR _position$[ebp]
  00050	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _vector$[ebp+4]
  00055	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 478  : 		position->z = vector.z;

  0005a	8b 45 0c	 mov	 eax, DWORD PTR _position$[ebp]
  0005d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _vector$[ebp+8]
  00062	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 479  : 
; 480  : 		return ( TRUE );

  00067	b8 01 00 00 00	 mov	 eax, 1
$LN3@dsound_get:

; 481  : 	}
; 482  : }

  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 08 00	 ret	 8
?dsound_get_buffer_3d_position@@YGHPAUIDirectSound3DBuffer@@PAUVEC3D@@@Z ENDP ; dsound_get_buffer_3d_position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dsound3d.c
;	COMDAT ?dsound_set_buffer_3d_position@@YGHPAUIDirectSound3DBuffer@@PAUVEC3D@@@Z
_TEXT	SEGMENT
_dsrval$ = -4						; size = 4
_buffer$ = 8						; size = 4
_position$ = 12						; size = 4
?dsound_set_buffer_3d_position@@YGHPAUIDirectSound3DBuffer@@PAUVEC3D@@@Z PROC ; dsound_set_buffer_3d_position, COMDAT

; 430  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 431  : 
; 432  : 	HRESULT
; 433  : 		dsrval;
; 434  : 
; 435  : 	dsrval = IDirectSound3DBuffer_SetPosition ( buffer, position->x, position->y, position->z, DS3D_DEFERRED );

  00009	6a 01		 push	 1
  0000b	8b 45 0c	 mov	 eax, DWORD PTR _position$[ebp]
  0000e	51		 push	 ecx
  0000f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00014	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _position$[ebp]
  0001c	51		 push	 ecx
  0001d	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00022	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00027	8b 55 0c	 mov	 edx, DWORD PTR _position$[ebp]
  0002a	51		 push	 ecx
  0002b	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0002f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00034	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]
  00039	8b 55 08	 mov	 edx, DWORD PTR _buffer$[ebp]
  0003c	52		 push	 edx
  0003d	8b 41 4c	 mov	 eax, DWORD PTR [ecx+76]
  00040	ff d0		 call	 eax
  00042	89 45 fc	 mov	 DWORD PTR _dsrval$[ebp], eax

; 436  : 
; 437  : 	if ( dsrval != DS_OK )

  00045	83 7d fc 00	 cmp	 DWORD PTR _dsrval$[ebp], 0
  00049	74 1d		 je	 SHORT $LN2@dsound_set

; 438  : 	{
; 439  : 
; 440  : 		debug_log ( "Unable to set position of 3d buffer: %s", get_dsound_error_message ( dsrval ) );

  0004b	8b 45 fc	 mov	 eax, DWORD PTR _dsrval$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?get_dsound_error_message@@YGPBDJ@Z ; get_dsound_error_message
  00054	50		 push	 eax
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@IMOLOKEF@Unable?5to?5set?5position?5of?53d?5bu@
  0005a	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0005f	83 c4 08	 add	 esp, 8

; 441  : 
; 442  : 		return ( FALSE );

  00062	33 c0		 xor	 eax, eax
  00064	eb 07		 jmp	 SHORT $LN3@dsound_set

; 443  : 	}
; 444  : 	else

  00066	eb 05		 jmp	 SHORT $LN3@dsound_set
$LN2@dsound_set:

; 445  : 	{
; 446  : 
; 447  : 		return ( TRUE );

  00068	b8 01 00 00 00	 mov	 eax, 1
$LN3@dsound_set:

; 448  : 	}
; 449  : }

  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 08 00	 ret	 8
?dsound_set_buffer_3d_position@@YGHPAUIDirectSound3DBuffer@@PAUVEC3D@@@Z ENDP ; dsound_set_buffer_3d_position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dsound3d.c
;	COMDAT ?dsound_get_listener_rolloff_factor@@YGHPAM@Z
_TEXT	SEGMENT
_dsrval$ = -4						; size = 4
_factor$ = 8						; size = 4
?dsound_get_listener_rolloff_factor@@YGHPAM@Z PROC	; dsound_get_listener_rolloff_factor, COMDAT

; 404  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 405  : 
; 406  : 	HRESULT
; 407  : 		dsrval;
; 408  : 
; 409  : 	dsrval = IDirectSound3DListener_GetRolloffFactor ( d3dsound_listener, factor );

  00009	8b 45 08	 mov	 eax, DWORD PTR _factor$[ebp]
  0000c	50		 push	 eax
  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?d3dsound_listener@@3PAUIDirectSound3DListener@@A ; d3dsound_listener
  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?d3dsound_listener@@3PAUIDirectSound3DListener@@A ; d3dsound_listener
  0001a	50		 push	 eax
  0001b	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
  0001e	ff d1		 call	 ecx
  00020	89 45 fc	 mov	 DWORD PTR _dsrval$[ebp], eax

; 410  : 
; 411  : 	if ( dsrval != DS_OK )

  00023	83 7d fc 00	 cmp	 DWORD PTR _dsrval$[ebp], 0
  00027	74 1d		 je	 SHORT $LN2@dsound_get

; 412  : 	{
; 413  : 
; 414  : 		debug_log ( "Unable to get rolloff factor of 3d listener object: %s", get_dsound_error_message ( dsrval ) );

  00029	8b 45 fc	 mov	 eax, DWORD PTR _dsrval$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?get_dsound_error_message@@YGPBDJ@Z ; get_dsound_error_message
  00032	50		 push	 eax
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@OMDLAKCK@Unable?5to?5get?5rolloff?5factor?5of@
  00038	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0003d	83 c4 08	 add	 esp, 8

; 415  : 
; 416  : 		return ( FALSE );

  00040	33 c0		 xor	 eax, eax
  00042	eb 07		 jmp	 SHORT $LN1@dsound_get

; 417  : 	}
; 418  : 	else

  00044	eb 05		 jmp	 SHORT $LN1@dsound_get
$LN2@dsound_get:

; 419  : 	{
; 420  : 
; 421  : 		return ( TRUE );

  00046	b8 01 00 00 00	 mov	 eax, 1
$LN1@dsound_get:

; 422  : 	}
; 423  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?dsound_get_listener_rolloff_factor@@YGHPAM@Z ENDP	; dsound_get_listener_rolloff_factor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dsound3d.c
;	COMDAT ?dsound_set_listener_rolloff_factor@@YGHM@Z
_TEXT	SEGMENT
_dsrval$ = -4						; size = 4
_factor$ = 8						; size = 4
?dsound_set_listener_rolloff_factor@@YGHM@Z PROC	; dsound_set_listener_rolloff_factor, COMDAT

; 378  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 379  : 
; 380  : 	HRESULT
; 381  : 		dsrval;
; 382  : 
; 383  : 	dsrval = IDirectSound3DListener_SetRolloffFactor ( d3dsound_listener, factor, DS3D_DEFERRED );

  00009	6a 01		 push	 1
  0000b	51		 push	 ecx
  0000c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _factor$[ebp]
  00011	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ?d3dsound_listener@@3PAUIDirectSound3DListener@@A ; d3dsound_listener
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?d3dsound_listener@@3PAUIDirectSound3DListener@@A ; d3dsound_listener
  00023	52		 push	 edx
  00024	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  00027	ff d0		 call	 eax
  00029	89 45 fc	 mov	 DWORD PTR _dsrval$[ebp], eax

; 384  : 
; 385  : 	if ( dsrval != DS_OK )

  0002c	83 7d fc 00	 cmp	 DWORD PTR _dsrval$[ebp], 0
  00030	74 1d		 je	 SHORT $LN2@dsound_set

; 386  : 	{
; 387  : 
; 388  : 		debug_log ( "Unable to set rolloff factor of 3d listener object: %s", get_dsound_error_message ( dsrval ) );

  00032	8b 45 fc	 mov	 eax, DWORD PTR _dsrval$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?get_dsound_error_message@@YGPBDJ@Z ; get_dsound_error_message
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@DGDMACJH@Unable?5to?5set?5rolloff?5factor?5of@
  00041	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00046	83 c4 08	 add	 esp, 8

; 389  : 
; 390  : 		return ( FALSE );

  00049	33 c0		 xor	 eax, eax
  0004b	eb 07		 jmp	 SHORT $LN3@dsound_set

; 391  : 	}
; 392  : 	else

  0004d	eb 05		 jmp	 SHORT $LN3@dsound_set
$LN2@dsound_set:

; 393  : 	{
; 394  : 
; 395  : 		return ( TRUE );

  0004f	b8 01 00 00 00	 mov	 eax, 1
$LN3@dsound_set:

; 396  : 	}
; 397  : }

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?dsound_set_listener_rolloff_factor@@YGHM@Z ENDP	; dsound_set_listener_rolloff_factor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dsound3d.c
;	COMDAT ?dsound_get_listener_doppler_factor@@YGHPAM@Z
_TEXT	SEGMENT
_dsrval$ = -4						; size = 4
_factor$ = 8						; size = 4
?dsound_get_listener_doppler_factor@@YGHPAM@Z PROC	; dsound_get_listener_doppler_factor, COMDAT

; 352  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 353  : 
; 354  : 	HRESULT
; 355  : 		dsrval;
; 356  : 
; 357  : 	dsrval = IDirectSound3DListener_GetDopplerFactor ( d3dsound_listener, factor );

  00009	8b 45 08	 mov	 eax, DWORD PTR _factor$[ebp]
  0000c	50		 push	 eax
  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?d3dsound_listener@@3PAUIDirectSound3DListener@@A ; d3dsound_listener
  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?d3dsound_listener@@3PAUIDirectSound3DListener@@A ; d3dsound_listener
  0001a	50		 push	 eax
  0001b	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  0001e	ff d1		 call	 ecx
  00020	89 45 fc	 mov	 DWORD PTR _dsrval$[ebp], eax

; 358  : 
; 359  : 	if ( dsrval != DS_OK )

  00023	83 7d fc 00	 cmp	 DWORD PTR _dsrval$[ebp], 0
  00027	74 1d		 je	 SHORT $LN2@dsound_get

; 360  : 	{
; 361  : 
; 362  : 		debug_log ( "Unable to get doppler factor of 3d listener object: %s", get_dsound_error_message ( dsrval ) );

  00029	8b 45 fc	 mov	 eax, DWORD PTR _dsrval$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?get_dsound_error_message@@YGPBDJ@Z ; get_dsound_error_message
  00032	50		 push	 eax
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@MAJCCMII@Unable?5to?5get?5doppler?5factor?5of@
  00038	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0003d	83 c4 08	 add	 esp, 8

; 363  : 
; 364  : 		return ( FALSE );

  00040	33 c0		 xor	 eax, eax
  00042	eb 07		 jmp	 SHORT $LN1@dsound_get

; 365  : 	}
; 366  : 	else

  00044	eb 05		 jmp	 SHORT $LN1@dsound_get
$LN2@dsound_get:

; 367  : 	{
; 368  : 
; 369  : 		return ( TRUE );

  00046	b8 01 00 00 00	 mov	 eax, 1
$LN1@dsound_get:

; 370  : 	}
; 371  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?dsound_get_listener_doppler_factor@@YGHPAM@Z ENDP	; dsound_get_listener_doppler_factor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dsound3d.c
;	COMDAT ?dsound_set_listener_doppler_factor@@YGHM@Z
_TEXT	SEGMENT
_dsrval$ = -4						; size = 4
_factor$ = 8						; size = 4
?dsound_set_listener_doppler_factor@@YGHM@Z PROC	; dsound_set_listener_doppler_factor, COMDAT

; 326  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 327  : 
; 328  : 	HRESULT
; 329  : 		dsrval;
; 330  : 
; 331  : 	dsrval = IDirectSound3DListener_SetDopplerFactor ( d3dsound_listener, factor, DS3D_DEFERRED );

  00009	6a 01		 push	 1
  0000b	51		 push	 ecx
  0000c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _factor$[ebp]
  00011	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ?d3dsound_listener@@3PAUIDirectSound3DListener@@A ; d3dsound_listener
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?d3dsound_listener@@3PAUIDirectSound3DListener@@A ; d3dsound_listener
  00023	52		 push	 edx
  00024	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00027	ff d0		 call	 eax
  00029	89 45 fc	 mov	 DWORD PTR _dsrval$[ebp], eax

; 332  : 
; 333  : 	if ( dsrval != DS_OK )

  0002c	83 7d fc 00	 cmp	 DWORD PTR _dsrval$[ebp], 0
  00030	74 1d		 je	 SHORT $LN2@dsound_set

; 334  : 	{
; 335  : 
; 336  : 		debug_log ( "Unable to set doppler factor of 3d listener object: %s", get_dsound_error_message ( dsrval ) );

  00032	8b 45 fc	 mov	 eax, DWORD PTR _dsrval$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?get_dsound_error_message@@YGPBDJ@Z ; get_dsound_error_message
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@BKJFCEDF@Unable?5to?5set?5doppler?5factor?5of@
  00041	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00046	83 c4 08	 add	 esp, 8

; 337  : 
; 338  : 		return ( FALSE );

  00049	33 c0		 xor	 eax, eax
  0004b	eb 07		 jmp	 SHORT $LN3@dsound_set

; 339  : 	}
; 340  : 	else

  0004d	eb 05		 jmp	 SHORT $LN3@dsound_set
$LN2@dsound_set:

; 341  : 	{
; 342  : 
; 343  : 		return ( TRUE );

  0004f	b8 01 00 00 00	 mov	 eax, 1
$LN3@dsound_set:

; 344  : 	}
; 345  : }

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?dsound_set_listener_doppler_factor@@YGHM@Z ENDP	; dsound_set_listener_doppler_factor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dsound3d.c
;	COMDAT ?dsound_get_listener_3d_orientation@@YGHPAUVEC3D@@0@Z
_TEXT	SEGMENT
_top_vector$ = -28					; size = 12
_front_vector$ = -16					; size = 12
_dsrval$ = -4						; size = 4
_top$ = 8						; size = 4
_front$ = 12						; size = 4
?dsound_get_listener_3d_orientation@@YGHPAUVEC3D@@0@Z PROC ; dsound_get_listener_3d_orientation, COMDAT

; 288  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 289  : 
; 290  : 	HRESULT
; 291  : 		dsrval;
; 292  : 
; 293  : 	D3DVECTOR
; 294  : 		front_vector,
; 295  : 		top_vector;
; 296  : 
; 297  : 	dsrval = IDirectSound3DListener_GetOrientation ( d3dsound_listener, &front_vector, &top_vector );

  00009	8d 45 e4	 lea	 eax, DWORD PTR _top_vector$[ebp]
  0000c	50		 push	 eax
  0000d	8d 4d f0	 lea	 ecx, DWORD PTR _front_vector$[ebp]
  00010	51		 push	 ecx
  00011	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?d3dsound_listener@@3PAUIDirectSound3DListener@@A ; d3dsound_listener
  00017	8b 02		 mov	 eax, DWORD PTR [edx]
  00019	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?d3dsound_listener@@3PAUIDirectSound3DListener@@A ; d3dsound_listener
  0001f	51		 push	 ecx
  00020	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00023	ff d2		 call	 edx
  00025	89 45 fc	 mov	 DWORD PTR _dsrval$[ebp], eax

; 298  : 
; 299  : 	if ( dsrval != DS_OK )

  00028	83 7d fc 00	 cmp	 DWORD PTR _dsrval$[ebp], 0
  0002c	74 1d		 je	 SHORT $LN2@dsound_get

; 300  : 	{
; 301  : 
; 302  : 		debug_log ( "Unable to get orientation of 3d listener object: %s", get_dsound_error_message ( dsrval ) );

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _dsrval$[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ?get_dsound_error_message@@YGPBDJ@Z ; get_dsound_error_message
  00037	50		 push	 eax
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@KMBICKGO@Unable?5to?5get?5orientation?5of?53d@
  0003d	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00042	83 c4 08	 add	 esp, 8

; 303  : 
; 304  : 		return ( FALSE );

  00045	33 c0		 xor	 eax, eax
  00047	eb 53		 jmp	 SHORT $LN3@dsound_get

; 305  : 	}
; 306  : 	else

  00049	eb 51		 jmp	 SHORT $LN3@dsound_get
$LN2@dsound_get:

; 307  : 	{
; 308  : 
; 309  : 		top->x = top_vector.x;

  0004b	8b 45 08	 mov	 eax, DWORD PTR _top$[ebp]
  0004e	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _top_vector$[ebp]
  00053	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 310  : 		top->y = top_vector.y;

  00057	8b 45 08	 mov	 eax, DWORD PTR _top$[ebp]
  0005a	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _top_vector$[ebp+4]
  0005f	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 311  : 		top->z = top_vector.z;

  00064	8b 45 08	 mov	 eax, DWORD PTR _top$[ebp]
  00067	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _top_vector$[ebp+8]
  0006c	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 312  : 
; 313  : 		front->x = front_vector.x;

  00071	8b 45 0c	 mov	 eax, DWORD PTR _front$[ebp]
  00074	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _front_vector$[ebp]
  00079	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 314  : 		front->y = front_vector.y;

  0007d	8b 45 0c	 mov	 eax, DWORD PTR _front$[ebp]
  00080	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _front_vector$[ebp+4]
  00085	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 315  : 		front->z = front_vector.z;

  0008a	8b 45 0c	 mov	 eax, DWORD PTR _front$[ebp]
  0008d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _front_vector$[ebp+8]
  00092	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 316  : 
; 317  : 		return ( TRUE );

  00097	b8 01 00 00 00	 mov	 eax, 1
$LN3@dsound_get:

; 318  : 	}
; 319  : }

  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c2 08 00	 ret	 8
?dsound_get_listener_3d_orientation@@YGHPAUVEC3D@@0@Z ENDP ; dsound_get_listener_3d_orientation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dsound3d.c
;	COMDAT ?dsound_set_listener_3d_orientation@@YGHPAUVEC3D@@0@Z
_TEXT	SEGMENT
_dsrval$ = -4						; size = 4
_top$ = 8						; size = 4
_front$ = 12						; size = 4
?dsound_set_listener_3d_orientation@@YGHPAUVEC3D@@0@Z PROC ; dsound_set_listener_3d_orientation, COMDAT

; 260  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 261  : 
; 262  : 	HRESULT
; 263  : 		dsrval;
; 264  : 
; 265  : 	dsrval = IDirectSound3DListener_SetOrientation ( d3dsound_listener,

  00009	6a 01		 push	 1
  0000b	8b 45 08	 mov	 eax, DWORD PTR _top$[ebp]
  0000e	51		 push	 ecx
  0000f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00014	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _top$[ebp]
  0001c	51		 push	 ecx
  0001d	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00022	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00027	8b 55 08	 mov	 edx, DWORD PTR _top$[ebp]
  0002a	51		 push	 ecx
  0002b	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0002f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00034	8b 45 0c	 mov	 eax, DWORD PTR _front$[ebp]
  00037	51		 push	 ecx
  00038	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	8b 4d 0c	 mov	 ecx, DWORD PTR _front$[ebp]
  00045	51		 push	 ecx
  00046	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0004b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00050	8b 55 0c	 mov	 edx, DWORD PTR _front$[ebp]
  00053	51		 push	 ecx
  00054	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00058	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?d3dsound_listener@@3PAUIDirectSound3DListener@@A ; d3dsound_listener
  00062	8b 08		 mov	 ecx, DWORD PTR [eax]
  00064	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?d3dsound_listener@@3PAUIDirectSound3DListener@@A ; d3dsound_listener
  0006a	52		 push	 edx
  0006b	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  0006e	ff d0		 call	 eax
  00070	89 45 fc	 mov	 DWORD PTR _dsrval$[ebp], eax

; 266  : 																		front->x, front->y, front->z,
; 267  : 																		top->x, top->y, top->z, DS3D_DEFERRED );
; 268  : 
; 269  : 	if ( dsrval != DS_OK )

  00073	83 7d fc 00	 cmp	 DWORD PTR _dsrval$[ebp], 0
  00077	74 1d		 je	 SHORT $LN2@dsound_set

; 270  : 	{
; 271  : 
; 272  : 		debug_log ( "Unable to set orientation of 3d listener object: %s", get_dsound_error_message ( dsrval ) );

  00079	8b 45 fc	 mov	 eax, DWORD PTR _dsrval$[ebp]
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ?get_dsound_error_message@@YGPBDJ@Z ; get_dsound_error_message
  00082	50		 push	 eax
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@FGFLFKHL@Unable?5to?5set?5orientation?5of?53d@
  00088	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0008d	83 c4 08	 add	 esp, 8

; 273  : 
; 274  : 		return ( FALSE );

  00090	33 c0		 xor	 eax, eax
  00092	eb 07		 jmp	 SHORT $LN3@dsound_set

; 275  : 	}
; 276  : 	else

  00094	eb 05		 jmp	 SHORT $LN3@dsound_set
$LN2@dsound_set:

; 277  : 	{
; 278  : 
; 279  : 		return ( TRUE );

  00096	b8 01 00 00 00	 mov	 eax, 1
$LN3@dsound_set:

; 280  : 	}
; 281  : }

  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 08 00	 ret	 8
?dsound_set_listener_3d_orientation@@YGHPAUVEC3D@@0@Z ENDP ; dsound_set_listener_3d_orientation
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dsound3d.c
;	COMDAT ?dsound_get_listener_3d_velocity@@YGHPAUVEC3D@@@Z
_TEXT	SEGMENT
_vector$ = -16						; size = 12
_dsrval$ = -4						; size = 4
_velocity$ = 8						; size = 4
?dsound_get_listener_3d_velocity@@YGHPAUVEC3D@@@Z PROC	; dsound_get_listener_3d_velocity, COMDAT

; 227  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 228  : 
; 229  : 	HRESULT
; 230  : 		dsrval;
; 231  : 
; 232  : 	D3DVECTOR
; 233  : 		vector;
; 234  : 
; 235  : 	dsrval = IDirectSound3DListener_GetVelocity ( d3dsound_listener, &vector );

  00009	8d 45 f0	 lea	 eax, DWORD PTR _vector$[ebp]
  0000c	50		 push	 eax
  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?d3dsound_listener@@3PAUIDirectSound3DListener@@A ; d3dsound_listener
  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?d3dsound_listener@@3PAUIDirectSound3DListener@@A ; d3dsound_listener
  0001a	50		 push	 eax
  0001b	8b 4a 24	 mov	 ecx, DWORD PTR [edx+36]
  0001e	ff d1		 call	 ecx
  00020	89 45 fc	 mov	 DWORD PTR _dsrval$[ebp], eax

; 236  : 
; 237  : 	if ( dsrval != DS_OK )

  00023	83 7d fc 00	 cmp	 DWORD PTR _dsrval$[ebp], 0
  00027	74 1d		 je	 SHORT $LN2@dsound_get

; 238  : 	{
; 239  : 
; 240  : 		debug_log ( "Unable to get velocity of 3d listener object: %s", get_dsound_error_message ( dsrval ) );

  00029	8b 45 fc	 mov	 eax, DWORD PTR _dsrval$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?get_dsound_error_message@@YGPBDJ@Z ; get_dsound_error_message
  00032	50		 push	 eax
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@HHPEIPNJ@Unable?5to?5get?5velocity?5of?53d?5li@
  00038	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0003d	83 c4 08	 add	 esp, 8

; 241  : 
; 242  : 		return ( FALSE );

  00040	33 c0		 xor	 eax, eax
  00042	eb 2d		 jmp	 SHORT $LN3@dsound_get

; 243  : 	}
; 244  : 	else

  00044	eb 2b		 jmp	 SHORT $LN3@dsound_get
$LN2@dsound_get:

; 245  : 	{
; 246  : 	
; 247  : 		velocity->x = vector.x;

  00046	8b 45 08	 mov	 eax, DWORD PTR _velocity$[ebp]
  00049	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _vector$[ebp]
  0004e	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 248  : 		velocity->y = vector.y;

  00052	8b 45 08	 mov	 eax, DWORD PTR _velocity$[ebp]
  00055	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _vector$[ebp+4]
  0005a	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 249  : 		velocity->z = vector.z;

  0005f	8b 45 08	 mov	 eax, DWORD PTR _velocity$[ebp]
  00062	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _vector$[ebp+8]
  00067	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 250  : 
; 251  : 		return ( TRUE );

  0006c	b8 01 00 00 00	 mov	 eax, 1
$LN3@dsound_get:

; 252  : 	}
; 253  : }

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
?dsound_get_listener_3d_velocity@@YGHPAUVEC3D@@@Z ENDP	; dsound_get_listener_3d_velocity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dsound3d.c
;	COMDAT ?dsound_set_listener_3d_velocity@@YGHPAUVEC3D@@@Z
_TEXT	SEGMENT
_dsrval$ = -4						; size = 4
_velocity$ = 8						; size = 4
?dsound_set_listener_3d_velocity@@YGHPAUVEC3D@@@Z PROC	; dsound_set_listener_3d_velocity, COMDAT

; 201  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 202  : 
; 203  : 	HRESULT
; 204  : 		dsrval;
; 205  : 
; 206  : 	dsrval = IDirectSound3DListener_SetVelocity ( d3dsound_listener, velocity->x, velocity->y, velocity->z, DS3D_DEFERRED );

  00009	6a 01		 push	 1
  0000b	8b 45 08	 mov	 eax, DWORD PTR _velocity$[ebp]
  0000e	51		 push	 ecx
  0000f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00014	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _velocity$[ebp]
  0001c	51		 push	 ecx
  0001d	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00022	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00027	8b 55 08	 mov	 edx, DWORD PTR _velocity$[ebp]
  0002a	51		 push	 ecx
  0002b	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0002f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ?d3dsound_listener@@3PAUIDirectSound3DListener@@A ; d3dsound_listener
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?d3dsound_listener@@3PAUIDirectSound3DListener@@A ; d3dsound_listener
  00041	52		 push	 edx
  00042	8b 41 40	 mov	 eax, DWORD PTR [ecx+64]
  00045	ff d0		 call	 eax
  00047	89 45 fc	 mov	 DWORD PTR _dsrval$[ebp], eax

; 207  : 
; 208  : 	if ( dsrval != DS_OK )

  0004a	83 7d fc 00	 cmp	 DWORD PTR _dsrval$[ebp], 0
  0004e	74 1d		 je	 SHORT $LN2@dsound_set

; 209  : 	{
; 210  : 
; 211  : 		debug_log ( "Unable to set velocity of 3d listener object: %s", get_dsound_error_message ( dsrval ) );

  00050	8b 45 fc	 mov	 eax, DWORD PTR _dsrval$[ebp]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ?get_dsound_error_message@@YGPBDJ@Z ; get_dsound_error_message
  00059	50		 push	 eax
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@KFBHAICK@Unable?5to?5set?5velocity?5of?53d?5li@
  0005f	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00064	83 c4 08	 add	 esp, 8

; 212  : 
; 213  : 		return ( FALSE );

  00067	33 c0		 xor	 eax, eax
  00069	eb 07		 jmp	 SHORT $LN3@dsound_set

; 214  : 	}
; 215  : 	else

  0006b	eb 05		 jmp	 SHORT $LN3@dsound_set
$LN2@dsound_set:

; 216  : 	{
; 217  : 
; 218  : 		return ( TRUE );

  0006d	b8 01 00 00 00	 mov	 eax, 1
$LN3@dsound_set:

; 219  : 	}
; 220  : }

  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 04 00	 ret	 4
?dsound_set_listener_3d_velocity@@YGHPAUVEC3D@@@Z ENDP	; dsound_set_listener_3d_velocity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dsound3d.c
;	COMDAT ?dsound_get_listener_3d_position@@YGHPAUVEC3D@@@Z
_TEXT	SEGMENT
_vector$ = -16						; size = 12
_dsrval$ = -4						; size = 4
_position$ = 8						; size = 4
?dsound_get_listener_3d_position@@YGHPAUVEC3D@@@Z PROC	; dsound_get_listener_3d_position, COMDAT

; 168  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 169  : 
; 170  : 	HRESULT
; 171  : 		dsrval;
; 172  : 
; 173  : 	D3DVECTOR
; 174  : 		vector;
; 175  : 
; 176  : 	dsrval = IDirectSound3DListener_GetPosition ( d3dsound_listener, &vector );

  00009	8d 45 f0	 lea	 eax, DWORD PTR _vector$[ebp]
  0000c	50		 push	 eax
  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?d3dsound_listener@@3PAUIDirectSound3DListener@@A ; d3dsound_listener
  00013	8b 11		 mov	 edx, DWORD PTR [ecx]
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?d3dsound_listener@@3PAUIDirectSound3DListener@@A ; d3dsound_listener
  0001a	50		 push	 eax
  0001b	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
  0001e	ff d1		 call	 ecx
  00020	89 45 fc	 mov	 DWORD PTR _dsrval$[ebp], eax

; 177  : 
; 178  : 	if ( dsrval != DS_OK )

  00023	83 7d fc 00	 cmp	 DWORD PTR _dsrval$[ebp], 0
  00027	74 1d		 je	 SHORT $LN2@dsound_get

; 179  : 	{
; 180  : 
; 181  : 		debug_log ( "Unable to get position of 3d listener object: %s", get_dsound_error_message ( dsrval ) );

  00029	8b 45 fc	 mov	 eax, DWORD PTR _dsrval$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?get_dsound_error_message@@YGPBDJ@Z ; get_dsound_error_message
  00032	50		 push	 eax
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@CFHLKJNF@Unable?5to?5get?5position?5of?53d?5li@
  00038	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0003d	83 c4 08	 add	 esp, 8

; 182  : 
; 183  : 		return ( FALSE );

  00040	33 c0		 xor	 eax, eax
  00042	eb 2d		 jmp	 SHORT $LN3@dsound_get

; 184  : 	}
; 185  : 	else

  00044	eb 2b		 jmp	 SHORT $LN3@dsound_get
$LN2@dsound_get:

; 186  : 	{
; 187  : 
; 188  : 		position->x = vector.x;

  00046	8b 45 08	 mov	 eax, DWORD PTR _position$[ebp]
  00049	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _vector$[ebp]
  0004e	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 189  : 		position->y = vector.y;

  00052	8b 45 08	 mov	 eax, DWORD PTR _position$[ebp]
  00055	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _vector$[ebp+4]
  0005a	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 190  : 		position->z = vector.z;

  0005f	8b 45 08	 mov	 eax, DWORD PTR _position$[ebp]
  00062	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _vector$[ebp+8]
  00067	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 191  : 
; 192  : 		return ( TRUE );

  0006c	b8 01 00 00 00	 mov	 eax, 1
$LN3@dsound_get:

; 193  : 	}
; 194  : }

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
?dsound_get_listener_3d_position@@YGHPAUVEC3D@@@Z ENDP	; dsound_get_listener_3d_position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dsound3d.c
;	COMDAT ?dsound_set_listener_3d_position@@YGHPAUVEC3D@@@Z
_TEXT	SEGMENT
_dsrval$ = -4						; size = 4
_position$ = 8						; size = 4
?dsound_set_listener_3d_position@@YGHPAUVEC3D@@@Z PROC	; dsound_set_listener_3d_position, COMDAT

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 143  : 
; 144  : 	HRESULT
; 145  : 		dsrval;
; 146  : 
; 147  : 	dsrval = IDirectSound3DListener_SetPosition ( d3dsound_listener, position->x, position->y, position->z, DS3D_DEFERRED );

  00009	6a 01		 push	 1
  0000b	8b 45 08	 mov	 eax, DWORD PTR _position$[ebp]
  0000e	51		 push	 ecx
  0000f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00014	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _position$[ebp]
  0001c	51		 push	 ecx
  0001d	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00022	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00027	8b 55 08	 mov	 edx, DWORD PTR _position$[ebp]
  0002a	51		 push	 ecx
  0002b	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0002f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ?d3dsound_listener@@3PAUIDirectSound3DListener@@A ; d3dsound_listener
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?d3dsound_listener@@3PAUIDirectSound3DListener@@A ; d3dsound_listener
  00041	52		 push	 edx
  00042	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
  00045	ff d0		 call	 eax
  00047	89 45 fc	 mov	 DWORD PTR _dsrval$[ebp], eax

; 148  : 
; 149  : 	if ( dsrval != DS_OK )

  0004a	83 7d fc 00	 cmp	 DWORD PTR _dsrval$[ebp], 0
  0004e	74 1d		 je	 SHORT $LN2@dsound_set

; 150  : 	{
; 151  : 
; 152  : 		debug_log ( "Unable to set position of 3d listener object: %s", get_dsound_error_message ( dsrval ) );

  00050	8b 45 fc	 mov	 eax, DWORD PTR _dsrval$[ebp]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ?get_dsound_error_message@@YGPBDJ@Z ; get_dsound_error_message
  00059	50		 push	 eax
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@PHJICOCG@Unable?5to?5set?5position?5of?53d?5li@
  0005f	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00064	83 c4 08	 add	 esp, 8

; 153  : 
; 154  : 		return ( FALSE );

  00067	33 c0		 xor	 eax, eax
  00069	eb 07		 jmp	 SHORT $LN3@dsound_set

; 155  : 	}
; 156  : 	else

  0006b	eb 05		 jmp	 SHORT $LN3@dsound_set
$LN2@dsound_set:

; 157  : 	{
; 158  : 
; 159  : 		return ( TRUE );

  0006d	b8 01 00 00 00	 mov	 eax, 1
$LN3@dsound_set:

; 160  : 	}
; 161  : }

  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 04 00	 ret	 4
?dsound_set_listener_3d_position@@YGHPAUVEC3D@@@Z ENDP	; dsound_set_listener_3d_position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dsound3d.c
;	COMDAT ?dsound_is_3d_buffer@@YGHPAUIDirectSoundBuffer@@@Z
_TEXT	SEGMENT
_dsrval$ = -24						; size = 4
_caps$ = -20						; size = 20
_buffer$ = 8						; size = 4
?dsound_is_3d_buffer@@YGHPAUIDirectSoundBuffer@@@Z PROC	; dsound_is_3d_buffer, COMDAT

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 106  : 
; 107  : 	DSBCAPS
; 108  : 		caps;
; 109  : 
; 110  : 	HRESULT
; 111  : 		dsrval;
; 112  : 
; 113  : 	memset ( &caps, 0, sizeof ( caps ) );

  00009	6a 14		 push	 20			; 00000014H
  0000b	6a 00		 push	 0
  0000d	8d 45 ec	 lea	 eax, DWORD PTR _caps$[ebp]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 _memset
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH

; 114  : 
; 115  : 	caps.dwSize = sizeof ( caps );

  00019	c7 45 ec 14 00
	00 00		 mov	 DWORD PTR _caps$[ebp], 20 ; 00000014H

; 116  : 
; 117  : 	dsrval = IDirectSoundBuffer_GetCaps ( buffer, &caps );

  00020	8d 45 ec	 lea	 eax, DWORD PTR _caps$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00027	8b 11		 mov	 edx, DWORD PTR [ecx]
  00029	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  0002c	50		 push	 eax
  0002d	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00030	ff d1		 call	 ecx
  00032	89 45 e8	 mov	 DWORD PTR _dsrval$[ebp], eax

; 118  : 
; 119  : 	if ( dsrval != DS_OK )

  00035	83 7d e8 00	 cmp	 DWORD PTR _dsrval$[ebp], 0
  00039	74 17		 je	 SHORT $LN2@dsound_is_

; 120  : 	{
; 121  : 
; 122  : 		debug_log ( "Unable to get caps of the sound buffer: %s", get_dsound_error_message ( dsrval ) );

  0003b	8b 45 e8	 mov	 eax, DWORD PTR _dsrval$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?get_dsound_error_message@@YGPBDJ@Z ; get_dsound_error_message
  00044	50		 push	 eax
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@MCJLKAFI@Unable?5to?5get?5caps?5of?5the?5sound@
  0004a	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0004f	83 c4 08	 add	 esp, 8
$LN2@dsound_is_:

; 123  : 	}
; 124  : 
; 125  : 	if ( caps.dwFlags & DSBCAPS_CTRL3D )

  00052	8b 45 f0	 mov	 eax, DWORD PTR _caps$[ebp+4]
  00055	83 e0 10	 and	 eax, 16			; 00000010H
  00058	74 09		 je	 SHORT $LN3@dsound_is_

; 126  : 	{
; 127  : 
; 128  : 		return ( TRUE );

  0005a	b8 01 00 00 00	 mov	 eax, 1
  0005f	eb 04		 jmp	 SHORT $LN1@dsound_is_

; 129  : 	}
; 130  : 	else

  00061	eb 02		 jmp	 SHORT $LN1@dsound_is_
$LN3@dsound_is_:

; 131  : 	{
; 132  : 
; 133  : 		return ( FALSE );

  00063	33 c0		 xor	 eax, eax
$LN1@dsound_is_:

; 134  : 	}
; 135  : }

  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
?dsound_is_3d_buffer@@YGHPAUIDirectSoundBuffer@@@Z ENDP	; dsound_is_3d_buffer
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\sound\dsound3d.c
;	COMDAT ?dsound_get_3d_buffer@@YGPAUIDirectSound3DBuffer@@PAUIDirectSoundBuffer@@@Z
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
?dsound_get_3d_buffer@@YGPAUIDirectSound3DBuffer@@PAUIDirectSoundBuffer@@@Z PROC ; dsound_get_3d_buffer, COMDAT

; 76   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 77   : /*
; 78   : 	LPDIRECTSOUND3DBUFFER
; 79   : 		buffer3d;
; 80   : 
; 81   : 	HRESULT
; 82   : 		dsrval;
; 83   : 
; 84   : 	dsrval = IDirectSoundBuffer_QueryInterface ( buffer, &IID_IDirectSound3DBuffer, &buffer3d );
; 85   : 
; 86   : 	if ( dsrval != DS_OK )
; 87   : 	{
; 88   : 
; 89   : 		debug_log ( "Unable to get the 3dbuffer interface: %s", get_dsound_error_message ( dsrval ) );
; 90   : 
; 91   : 		return ( NULL );
; 92   : 	}
; 93   : 
; 94   : 	return ( buffer3d );
; 95   : 	*/
; 96   : 
; 97   : 	return ( NULL );

  00009	33 c0		 xor	 eax, eax

; 98   : }

  0000b	5f		 pop	 edi
  0000c	5e		 pop	 esi
  0000d	5b		 pop	 ebx
  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?dsound_get_3d_buffer@@YGPAUIDirectSound3DBuffer@@PAUIDirectSoundBuffer@@@Z ENDP ; dsound_get_3d_buffer
_TEXT	ENDS
END
