; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\system\en_types\en_suply.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?supply_heat_bitmap@@3PAEA			; supply_heat_bitmap
PUBLIC	?supply_heat_map@@3PAEA				; supply_heat_map
_BSS	SEGMENT
?supply_heat_bitmap@@3PAEA DD 01H DUP (?)		; supply_heat_bitmap
?supply_heat_map@@3PAEA DD 01H DUP (?)			; supply_heat_map
_BSS	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	?get_local_entity_rearming_sleep_time@@YGMPAUENTITY@@@Z ; get_local_entity_rearming_sleep_time
PUBLIC	?get_local_entity_refueling_sleep_time@@YGMPAUENTITY@@@Z ; get_local_entity_refueling_sleep_time
PUBLIC	?build_supply_heat_map@@YGXXZ			; build_supply_heat_map
PUBLIC	??$min@H@std@@YGABHABH0@Z			; std::min<int>
PUBLIC	??$max@H@std@@YGABHABH0@Z			; std::max<int>
PUBLIC	?output_supply_heat_map@@YGXXZ			; output_supply_heat_map
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??get_local_entity_rearming_sleep_time@@YGMPAUENTITY@@@Z@4JA ; `get_local_entity_rearming_sleep_time'::`1'::__LINE__Var
PUBLIC	??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	?__LINE__Var@?0??get_local_entity_refueling_sleep_time@@YGMPAUENTITY@@@Z@4JA ; `get_local_entity_refueling_sleep_time'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??build_supply_heat_map@@YGXXZ@4JA ; `build_supply_heat_map'::`1'::__LINE__Var
PUBLIC	??_C@_02IGFKOFAO@sm@				; `string'
PUBLIC	??_C@_06COJLDCKF@?$CFd?4psd@			; `string'
PUBLIC	??_C@_01GBGANLPD@0@				; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	__real@3fa47ae147ae147b
PUBLIC	__real@3fa999999999999a
PUBLIC	__real@4014000000000000
PUBLIC	__real@406fe00000000000
PUBLIC	__real@437f0000
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	_abs:PROC
EXTRN	_memset:PROC
EXTRN	_strcat:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?malloc_heap_memory@@YGPAXI@Z:PROC		; malloc_heap_memory
EXTRN	?write_psd_rgb_file@@YGXPBDHHHPBE@Z:PROC	; write_psd_rgb_file
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?world_map@@3UWORLD_MAP_DATA@@A:BYTE		; world_map
EXTRN	?overload_invalid_list_type_message@@3PBDB:DWORD ; overload_invalid_list_type_message
EXTRN	?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_first_child
EXTRN	?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_parent
EXTRN	?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_child_succ
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?entity_sector_map@@3PAPAUENTITY@@A:DWORD	; entity_sector_map
EXTRN	?null_sector_entity_map_pointer_message@@3PBDB:DWORD ; null_sector_entity_map_pointer_message
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?count@?1??output_supply_heat_map@@YGXXZ@4HA DD 01H DUP (?) ; `output_supply_heat_map'::`2'::count
_BSS	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@3fa999999999999a
CONST	SEGMENT
__real@3fa999999999999a DQ 03fa999999999999ar	; 0.05
CONST	ENDS
;	COMDAT __real@3fa47ae147ae147b
CONST	SEGMENT
__real@3fa47ae147ae147b DQ 03fa47ae147ae147br	; 0.04
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0@
CONST	SEGMENT
??_C@_01GBGANLPD@0@ DB '0', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06COJLDCKF@?$CFd?4psd@
CONST	SEGMENT
??_C@_06COJLDCKF@?$CFd?4psd@ DB '%d.psd', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02IGFKOFAO@sm@
CONST	SEGMENT
??_C@_02IGFKOFAO@sm@ DB 'sm', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
?limit@?1??output_supply_heat_map@@YGXXZ@4HA DD 0aH	; `output_supply_heat_map'::`2'::limit
?numzeros@?1??output_supply_heat_map@@YGXXZ@4HA DD 04H	; `output_supply_heat_map'::`2'::numzeros
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??build_supply_heat_map@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??build_supply_heat_map@@YGXXZ@4JA DD 097H ; `build_supply_heat_map'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_local_entity_refueling_sleep_time@@YGMPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_local_entity_refueling_sleep_time@@YGMPAUENTITY@@@Z@4JA DD 07bH ; `get_local_entity_refueling_sleep_time'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\system\en_types\en_su'
	DB	'ply.c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_local_entity_rearming_sleep_time@@YGMPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_local_entity_rearming_sleep_time@@YGMPAUENTITY@@@Z@4JA DD 060H ; `get_local_entity_rearming_sleep_time'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_types\en_suply.c
;	COMDAT ?output_supply_heat_map@@YGXXZ
_TEXT	SEGMENT
_z$ = -28						; size = 4
_temp_string$ = -24					; size = 7
_filename$ = -16					; size = 13
?output_supply_heat_map@@YGXXZ PROC			; output_supply_heat_map, COMDAT

; 338  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 339  : 	static int
; 340  : 		limit = 10,
; 341  : 		numzeros = 4,
; 342  : 		count = 0;
; 343  : 
; 344  : 	char
; 345  : 		filename[13],
; 346  : 		temp_string[7];
; 347  : 	
; 348  : 	int
; 349  : 		z;
; 350  : 
; 351  : 	// initialise filename & output map
; 352  : 
; 353  : 	sprintf (filename, "sm");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_02IGFKOFAO@sm@
  0000e	8d 45 f0	 lea	 eax, DWORD PTR _filename$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 _sprintf
  00017	83 c4 08	 add	 esp, 8

; 354  : 
; 355  : 	sprintf (temp_string, "%d.psd", count);

  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?count@?1??output_supply_heat_map@@YGXXZ@4HA
  0001f	50		 push	 eax
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_06COJLDCKF@?$CFd?4psd@
  00025	8d 4d e8	 lea	 ecx, DWORD PTR _temp_string$[ebp]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 _sprintf
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 356  : 	
; 357  : 	if (count >= limit)

  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?count@?1??output_supply_heat_map@@YGXXZ@4HA
  00036	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?limit@?1??output_supply_heat_map@@YGXXZ@4HA
  0003c	7c 19		 jl	 SHORT $LN5@output_sup

; 358  : 	{
; 359  : 		limit *= 10;

  0003e	6b 05 00 00 00
	00 0a		 imul	 eax, DWORD PTR ?limit@?1??output_supply_heat_map@@YGXXZ@4HA, 10
  00045	a3 00 00 00 00	 mov	 DWORD PTR ?limit@?1??output_supply_heat_map@@YGXXZ@4HA, eax

; 360  : 		
; 361  : 		numzeros--;

  0004a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?numzeros@?1??output_supply_heat_map@@YGXXZ@4HA
  0004f	83 e8 01	 sub	 eax, 1
  00052	a3 00 00 00 00	 mov	 DWORD PTR ?numzeros@?1??output_supply_heat_map@@YGXXZ@4HA, eax
$LN5@output_sup:

; 362  : 	}
; 363  : 
; 364  : 	for (z = 0; z < numzeros; z++)

  00057	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _z$[ebp], 0
  0005e	eb 09		 jmp	 SHORT $LN4@output_sup
$LN2@output_sup:
  00060	8b 45 e4	 mov	 eax, DWORD PTR _z$[ebp]
  00063	83 c0 01	 add	 eax, 1
  00066	89 45 e4	 mov	 DWORD PTR _z$[ebp], eax
$LN4@output_sup:
  00069	8b 45 e4	 mov	 eax, DWORD PTR _z$[ebp]
  0006c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?numzeros@?1??output_supply_heat_map@@YGXXZ@4HA
  00072	7d 13		 jge	 SHORT $LN3@output_sup

; 365  : 	{
; 366  : 		strcat (filename, "0");

  00074	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0@
  00079	8d 45 f0	 lea	 eax, DWORD PTR _filename$[ebp]
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 _strcat
  00082	83 c4 08	 add	 esp, 8

; 367  : 	}

  00085	eb d9		 jmp	 SHORT $LN2@output_sup
$LN3@output_sup:

; 368  : 
; 369  : 	strcat (filename, temp_string);

  00087	8d 45 e8	 lea	 eax, DWORD PTR _temp_string$[ebp]
  0008a	50		 push	 eax
  0008b	8d 4d f0	 lea	 ecx, DWORD PTR _filename$[ebp]
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 _strcat
  00094	83 c4 08	 add	 esp, 8

; 370  : 
; 371  : 
; 372  : 	if (supply_heat_bitmap == NULL)

  00097	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?supply_heat_bitmap@@3PAEA, 0 ; supply_heat_bitmap
  0009e	75 05		 jne	 SHORT $LN6@output_sup

; 373  : 	{
; 374  : 		build_supply_heat_map ();

  000a0	e8 00 00 00 00	 call	 ?build_supply_heat_map@@YGXXZ ; build_supply_heat_map
$LN6@output_sup:

; 375  : 	}
; 376  : 				
; 377  : 	write_psd_rgb_file (filename, NUM_MAP_X_SECTORS, NUM_MAP_Z_SECTORS, NUM_MAP_X_SECTORS * 3, supply_heat_bitmap);

  000a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?supply_heat_bitmap@@3PAEA ; supply_heat_bitmap
  000aa	50		 push	 eax
  000ab	6b 0d 08 00 00
	00 03		 imul	 ecx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8, 3
  000b2	51		 push	 ecx
  000b3	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  000b9	52		 push	 edx
  000ba	a1 08 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  000bf	50		 push	 eax
  000c0	8d 4d f0	 lea	 ecx, DWORD PTR _filename$[ebp]
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ?write_psd_rgb_file@@YGXPBDHHHPBE@Z ; write_psd_rgb_file

; 378  : 
; 379  : 	#if DEBUG_MODULE
; 380  : 
; 381  : 		debug_log ("EN_SUPLY: generating supply heat map psd no. %d", count);
; 382  : 
; 383  : 	#endif
; 384  : 
; 385  : 	count++;

  000c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?count@?1??output_supply_heat_map@@YGXXZ@4HA
  000ce	83 c0 01	 add	 eax, 1
  000d1	a3 00 00 00 00	 mov	 DWORD PTR ?count@?1??output_supply_heat_map@@YGXXZ@4HA, eax

; 386  : 
; 387  : }

  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
?output_supply_heat_map@@YGXXZ ENDP			; output_supply_heat_map
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@H@std@@YGABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@H@std@@YGABHABH0@Z PROC				; std::max<int>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	7d 61		 jge	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00015	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001f	7c 02		 jl	 SHORT $LN7@max
  00021	eb 4a		 jmp	 SHORT $LN2@max
$LN7@max:
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002d	6a 00		 push	 0
  0002f	68 0e 15 00 00	 push	 5390			; 0000150eH
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00039	6a 02		 push	 2
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 01		 jne	 SHORT $LN12@max
  00049	cc		 int	 3
$LN12@max:
  0004a	6a 00		 push	 0
  0004c	68 0e 15 00 00	 push	 5390			; 0000150eH
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00066	83 c4 14	 add	 esp, 20			; 00000014H
  00069	33 c0		 xor	 eax, eax
  0006b	75 b6		 jne	 SHORT $LN7@max
$LN2@max:
  0006d	33 c0		 xor	 eax, eax
  0006f	75 a4		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00071	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00074	eb 03		 jmp	 SHORT $LN11@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  00076	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN11@max:

; 5395 : 	}

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
??$max@H@std@@YGABHABH0@Z ENDP				; std::max<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@H@std@@YGABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@H@std@@YGABHABH0@Z PROC				; std::min<int>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	7d 61		 jge	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00015	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001f	7c 02		 jl	 SHORT $LN7@min
  00021	eb 4a		 jmp	 SHORT $LN2@min
$LN7@min:
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002d	6a 00		 push	 0
  0002f	68 36 15 00 00	 push	 5430			; 00001536H
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00039	6a 02		 push	 2
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 01		 jne	 SHORT $LN12@min
  00049	cc		 int	 3
$LN12@min:
  0004a	6a 00		 push	 0
  0004c	68 36 15 00 00	 push	 5430			; 00001536H
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00066	83 c4 14	 add	 esp, 20			; 00000014H
  00069	33 c0		 xor	 eax, eax
  0006b	75 b6		 jne	 SHORT $LN7@min
$LN2@min:
  0006d	33 c0		 xor	 eax, eax
  0006f	75 a4		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00071	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00074	eb 03		 jmp	 SHORT $LN11@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  00076	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN11@min:

; 5435 : 	}

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
??$min@H@std@@YGABHABH0@Z ENDP				; std::min<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_types\en_suply.c
;	COMDAT ?build_supply_heat_map@@YGXXZ
_TEXT	SEGMENT
tv412 = -116						; size = 4
tv428 = -112						; size = 4
tv405 = -108						; size = 4
tv274 = -104						; size = 4
tv266 = -100						; size = 4
tv303 = -96						; size = 4
tv254 = -96						; size = 4
tv234 = -96						; size = 4
tv213 = -96						; size = 4
tv194 = -96						; size = 4
tv175 = -96						; size = 4
tv145 = -96						; size = 4
tv295 = -92						; size = 4
tv246 = -92						; size = 4
tv226 = -92						; size = 4
tv206 = -92						; size = 4
tv187 = -92						; size = 4
tv168 = -92						; size = 4
tv157 = -92						; size = 4
tv137 = -92						; size = 4
tv130 = -92						; size = 4
_supplies$ = -24					; size = 4
_sector$ = -20						; size = 4
_group$ = -16						; size = 4
_en$ = -12						; size = 4
_z$ = -8						; size = 4
_x$ = -4						; size = 4
?build_supply_heat_map@@YGXXZ PROC			; build_supply_heat_map, COMDAT

; 151  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 152  : 
; 153  : 	int
; 154  : 		x,
; 155  : 		z;
; 156  : 
; 157  : 	entity
; 158  : 		*en,
; 159  : 		*group,
; 160  : 		*sector;
; 161  : 
; 162  : 	float
; 163  : 		supplies;
; 164  : 
; 165  : 	if (!supply_heat_map)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?supply_heat_map@@3PAEA, 0 ; supply_heat_map
  00010	75 31		 jne	 SHORT $LN10@build_supp

; 166  : 	{
; 167  : 		supply_heat_bitmap = (unsigned char *) malloc_heap_mem (sizeof (unsigned char) * (NUM_MAP_X_SECTORS * NUM_MAP_Z_SECTORS * 3));

  00012	a1 08 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00017	0f af 05 0c 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  0001e	6b c8 03	 imul	 ecx, eax, 3
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  00027	a3 00 00 00 00	 mov	 DWORD PTR ?supply_heat_bitmap@@3PAEA, eax ; supply_heat_bitmap

; 168  : 
; 169  : 		supply_heat_map = (unsigned char *) malloc_heap_mem (sizeof (unsigned char) * (NUM_MAP_X_SECTORS * NUM_MAP_Z_SECTORS));

  0002c	a1 08 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00031	0f af 05 0c 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ?malloc_heap_memory@@YGPAXI@Z ; malloc_heap_memory
  0003e	a3 00 00 00 00	 mov	 DWORD PTR ?supply_heat_map@@3PAEA, eax ; supply_heat_map
$LN10@build_supp:

; 170  : 	}
; 171  : 
; 172  : 	#if DEBUG_MODULE
; 173  : 
; 174  : 		debug_log ("EN_SUPLY: building supply heat map");
; 175  : 
; 176  : 	#endif
; 177  : 
; 178  : 	memset (supply_heat_map, 0, sizeof (unsigned char) * (NUM_MAP_X_SECTORS * NUM_MAP_Z_SECTORS));

  00043	a1 08 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00048	0f af 05 0c 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  0004f	50		 push	 eax
  00050	6a 00		 push	 0
  00052	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?supply_heat_map@@3PAEA ; supply_heat_map
  00058	51		 push	 ecx
  00059	e8 00 00 00 00	 call	 _memset
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 179  : 
; 180  : 	memset (supply_heat_bitmap, 0, sizeof (unsigned char) * (NUM_MAP_X_SECTORS * NUM_MAP_Z_SECTORS * 3));

  00061	a1 08 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00066	0f af 05 0c 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  0006d	6b c8 03	 imul	 ecx, eax, 3
  00070	51		 push	 ecx
  00071	6a 00		 push	 0
  00073	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?supply_heat_bitmap@@3PAEA ; supply_heat_bitmap
  00079	52		 push	 edx
  0007a	e8 00 00 00 00	 call	 _memset
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 181  : 	
; 182  : 	// draw cargo
; 183  : 
; 184  :    for (x = 0; x < NUM_MAP_X_SECTORS; x ++)

  00082	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  00089	eb 09		 jmp	 SHORT $LN4@build_supp
$LN2@build_supp:
  0008b	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0008e	83 c0 01	 add	 eax, 1
  00091	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax
$LN4@build_supp:
  00094	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  00097	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  0009d	0f 8d 16 05 00
	00		 jge	 $LN3@build_supp

; 185  :    {
; 186  : 
; 187  :       for (z = 0; z < NUM_MAP_Z_SECTORS; z ++)

  000a3	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _z$[ebp], 0
  000aa	eb 09		 jmp	 SHORT $LN7@build_supp
$LN5@build_supp:
  000ac	8b 45 f8	 mov	 eax, DWORD PTR _z$[ebp]
  000af	83 c0 01	 add	 eax, 1
  000b2	89 45 f8	 mov	 DWORD PTR _z$[ebp], eax
$LN7@build_supp:
  000b5	8b 45 f8	 mov	 eax, DWORD PTR _z$[ebp]
  000b8	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+12
  000be	0f 8d f0 04 00
	00		 jge	 $LN6@build_supp

; 188  :       {
; 189  : 
; 190  : 			sector = get_local_raw_sector_entity (x, z);

  000c4	8b 45 f8	 mov	 eax, DWORD PTR _z$[ebp]
  000c7	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  000ce	03 45 fc	 add	 eax, DWORD PTR _x$[ebp]
  000d1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  000d7	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  000db	74 1a		 je	 SHORT $LN17@build_supp
  000dd	8b 55 f8	 mov	 edx, DWORD PTR _z$[ebp]
  000e0	0f af 15 08 00
	00 00		 imul	 edx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  000e7	03 55 fc	 add	 edx, DWORD PTR _x$[ebp]
  000ea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?entity_sector_map@@3PAPAUENTITY@@A ; entity_sector_map
  000ef	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  000f2	89 4d a4	 mov	 DWORD PTR tv130[ebp], ecx
  000f5	eb 21		 jmp	 SHORT $LN18@build_supp
$LN17@build_supp:
  000f7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??build_supply_heat_map@@YGXXZ@4JA
  000fd	83 c2 27	 add	 edx, 39			; 00000027H
  00100	52		 push	 edx
  00101	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_sector_entity_map_pointer_message@@3PBDB ; null_sector_entity_map_pointer_message
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00111	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN18@build_supp:
  00118	8b 4d a4	 mov	 ecx, DWORD PTR tv130[ebp]
  0011b	89 4d ec	 mov	 DWORD PTR _sector$[ebp], ecx

; 191  : 
; 192  : 			en = get_local_entity_first_child (sector, LIST_TYPE_SECTOR);

  0011e	83 7d ec 00	 cmp	 DWORD PTR _sector$[ebp], 0
  00122	74 0a		 je	 SHORT $LN19@build_supp
  00124	8b 45 ec	 mov	 eax, DWORD PTR _sector$[ebp]
  00127	8b 08		 mov	 ecx, DWORD PTR [eax]
  00129	89 4d a4	 mov	 DWORD PTR tv137[ebp], ecx
  0012c	eb 21		 jmp	 SHORT $LN20@build_supp
$LN19@build_supp:
  0012e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??build_supply_heat_map@@YGXXZ@4JA
  00134	83 c2 29	 add	 edx, 41			; 00000029H
  00137	52		 push	 edx
  00138	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0013d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00142	50		 push	 eax
  00143	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00148	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$LN20@build_supp:
  0014f	b9 01 00 00 00	 mov	 ecx, 1
  00154	85 c9		 test	 ecx, ecx
  00156	74 09		 je	 SHORT $LN21@build_supp
  00158	c7 45 a0 21 00
	00 00		 mov	 DWORD PTR tv145[ebp], 33 ; 00000021H
  0015f	eb 21		 jmp	 SHORT $LN22@build_supp
$LN21@build_supp:
  00161	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??build_supply_heat_map@@YGXXZ@4JA
  00167	83 c2 29	 add	 edx, 41			; 00000029H
  0016a	52		 push	 edx
  0016b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00170	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00175	50		 push	 eax
  00176	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0017b	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv145[ebp], 0
$LN22@build_supp:
  00182	6a 21		 push	 33			; 00000021H
  00184	8b 4d ec	 mov	 ecx, DWORD PTR _sector$[ebp]
  00187	51		 push	 ecx
  00188	69 55 a4 b4 00
	00 00		 imul	 edx, DWORD PTR tv137[ebp], 180
  0018f	8b 45 a0	 mov	 eax, DWORD PTR tv145[ebp]
  00192	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00199	ff d1		 call	 ecx
  0019b	89 45 f4	 mov	 DWORD PTR _en$[ebp], eax
$LN8@build_supp:

; 193  : 
; 194  : 			while (en)

  0019e	83 7d f4 00	 cmp	 DWORD PTR _en$[ebp], 0
  001a2	0f 84 07 04 00
	00		 je	 $LN9@build_supp

; 195  : 			{
; 196  : 
; 197  : 				if (get_local_entity_type (en) == ENTITY_TYPE_CARGO)

  001a8	83 7d f4 00	 cmp	 DWORD PTR _en$[ebp], 0
  001ac	74 0a		 je	 SHORT $LN23@build_supp
  001ae	8b 45 f4	 mov	 eax, DWORD PTR _en$[ebp]
  001b1	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b3	89 4d a4	 mov	 DWORD PTR tv157[ebp], ecx
  001b6	eb 1d		 jmp	 SHORT $LN24@build_supp
$LN23@build_supp:
  001b8	68 c5 00 00 00	 push	 197			; 000000c5H
  001bd	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  001c2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001c8	52		 push	 edx
  001c9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001ce	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv157[ebp], 0
$LN24@build_supp:
  001d5	83 7d a4 04	 cmp	 DWORD PTR tv157[ebp], 4
  001d9	75 18		 jne	 SHORT $LN11@build_supp

; 198  : 				{
; 199  : 					set_supply_heat_map_cargo_spot (en, x, z, 1);

  001db	6a 01		 push	 1
  001dd	8b 45 f8	 mov	 eax, DWORD PTR _z$[ebp]
  001e0	50		 push	 eax
  001e1	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  001e4	51		 push	 ecx
  001e5	8b 55 f4	 mov	 edx, DWORD PTR _en$[ebp]
  001e8	52		 push	 edx
  001e9	e8 00 00 00 00	 call	 ?set_supply_heat_map_cargo_spot@@YGXPAUENTITY@@HHH@Z ; set_supply_heat_map_cargo_spot
  001ee	e9 37 03 00 00	 jmp	 $LN15@build_supp
$LN11@build_supp:

; 200  : 				}
; 201  : 
; 202  : 				else if (get_local_entity_int_value (en, INT_TYPE_ALIVE))

  001f3	83 7d f4 00	 cmp	 DWORD PTR _en$[ebp], 0
  001f7	74 0a		 je	 SHORT $LN25@build_supp
  001f9	8b 45 f4	 mov	 eax, DWORD PTR _en$[ebp]
  001fc	8b 08		 mov	 ecx, DWORD PTR [eax]
  001fe	89 4d a4	 mov	 DWORD PTR tv168[ebp], ecx
  00201	eb 1d		 jmp	 SHORT $LN26@build_supp
$LN25@build_supp:
  00203	68 ca 00 00 00	 push	 202			; 000000caH
  00208	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0020d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00213	52		 push	 edx
  00214	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00219	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv168[ebp], 0
$LN26@build_supp:
  00220	b8 01 00 00 00	 mov	 eax, 1
  00225	85 c0		 test	 eax, eax
  00227	74 09		 je	 SHORT $LN27@build_supp
  00229	c7 45 a0 07 00
	00 00		 mov	 DWORD PTR tv175[ebp], 7
  00230	eb 1d		 jmp	 SHORT $LN28@build_supp
$LN27@build_supp:
  00232	68 ca 00 00 00	 push	 202			; 000000caH
  00237	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0023c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00242	51		 push	 ecx
  00243	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00248	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv175[ebp], 0
$LN28@build_supp:
  0024f	6a 07		 push	 7
  00251	8b 55 f4	 mov	 edx, DWORD PTR _en$[ebp]
  00254	52		 push	 edx
  00255	69 45 a4 5c 04
	00 00		 imul	 eax, DWORD PTR tv168[ebp], 1116
  0025c	8b 4d a0	 mov	 ecx, DWORD PTR tv175[ebp]
  0025f	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00266	ff d2		 call	 edx
  00268	85 c0		 test	 eax, eax
  0026a	0f 84 ba 02 00
	00		 je	 $LN15@build_supp

; 203  : 				{
; 204  : 					if (get_local_entity_int_value (en, INT_TYPE_IDENTIFY_VEHICLE))

  00270	83 7d f4 00	 cmp	 DWORD PTR _en$[ebp], 0
  00274	74 0a		 je	 SHORT $LN29@build_supp
  00276	8b 45 f4	 mov	 eax, DWORD PTR _en$[ebp]
  00279	8b 08		 mov	 ecx, DWORD PTR [eax]
  0027b	89 4d a4	 mov	 DWORD PTR tv187[ebp], ecx
  0027e	eb 1d		 jmp	 SHORT $LN30@build_supp
$LN29@build_supp:
  00280	68 cc 00 00 00	 push	 204			; 000000ccH
  00285	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0028a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00290	52		 push	 edx
  00291	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00296	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv187[ebp], 0
$LN30@build_supp:
  0029d	b8 01 00 00 00	 mov	 eax, 1
  002a2	85 c0		 test	 eax, eax
  002a4	74 09		 je	 SHORT $LN31@build_supp
  002a6	c7 45 a0 60 00
	00 00		 mov	 DWORD PTR tv194[ebp], 96 ; 00000060H
  002ad	eb 1d		 jmp	 SHORT $LN32@build_supp
$LN31@build_supp:
  002af	68 cc 00 00 00	 push	 204			; 000000ccH
  002b4	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  002b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  002bf	51		 push	 ecx
  002c0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002c5	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv194[ebp], 0
$LN32@build_supp:
  002cc	6a 60		 push	 96			; 00000060H
  002ce	8b 55 f4	 mov	 edx, DWORD PTR _en$[ebp]
  002d1	52		 push	 edx
  002d2	69 45 a4 5c 04
	00 00		 imul	 eax, DWORD PTR tv187[ebp], 1116
  002d9	8b 4d a0	 mov	 ecx, DWORD PTR tv194[ebp]
  002dc	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  002e3	ff d2		 call	 edx
  002e5	85 c0		 test	 eax, eax
  002e7	0f 84 3d 02 00
	00		 je	 $LN15@build_supp

; 205  : 					{
; 206  : 						if (get_local_entity_int_value (en, INT_TYPE_GROUP_LEADER))

  002ed	83 7d f4 00	 cmp	 DWORD PTR _en$[ebp], 0
  002f1	74 0a		 je	 SHORT $LN33@build_supp
  002f3	8b 45 f4	 mov	 eax, DWORD PTR _en$[ebp]
  002f6	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f8	89 4d a4	 mov	 DWORD PTR tv206[ebp], ecx
  002fb	eb 1d		 jmp	 SHORT $LN34@build_supp
$LN33@build_supp:
  002fd	68 ce 00 00 00	 push	 206			; 000000ceH
  00302	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00307	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0030d	52		 push	 edx
  0030e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00313	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv206[ebp], 0
$LN34@build_supp:
  0031a	b8 01 00 00 00	 mov	 eax, 1
  0031f	85 c0		 test	 eax, eax
  00321	74 09		 je	 SHORT $LN35@build_supp
  00323	c7 45 a0 48 00
	00 00		 mov	 DWORD PTR tv213[ebp], 72 ; 00000048H
  0032a	eb 1d		 jmp	 SHORT $LN36@build_supp
$LN35@build_supp:
  0032c	68 ce 00 00 00	 push	 206			; 000000ceH
  00331	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00336	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0033c	51		 push	 ecx
  0033d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00342	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv213[ebp], 0
$LN36@build_supp:
  00349	6a 48		 push	 72			; 00000048H
  0034b	8b 55 f4	 mov	 edx, DWORD PTR _en$[ebp]
  0034e	52		 push	 edx
  0034f	69 45 a4 5c 04
	00 00		 imul	 eax, DWORD PTR tv206[ebp], 1116
  00356	8b 4d a0	 mov	 ecx, DWORD PTR tv213[ebp]
  00359	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00360	ff d2		 call	 edx
  00362	85 c0		 test	 eax, eax
  00364	0f 84 c0 01 00
	00		 je	 $LN15@build_supp

; 207  : 						{
; 208  : 	
; 209  : 							group = get_local_entity_parent (en, LIST_TYPE_MEMBER);

  0036a	83 7d f4 00	 cmp	 DWORD PTR _en$[ebp], 0
  0036e	74 0a		 je	 SHORT $LN37@build_supp
  00370	8b 45 f4	 mov	 eax, DWORD PTR _en$[ebp]
  00373	8b 08		 mov	 ecx, DWORD PTR [eax]
  00375	89 4d a4	 mov	 DWORD PTR tv226[ebp], ecx
  00378	eb 21		 jmp	 SHORT $LN38@build_supp
$LN37@build_supp:
  0037a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??build_supply_heat_map@@YGXXZ@4JA
  00380	83 c2 3a	 add	 edx, 58			; 0000003aH
  00383	52		 push	 edx
  00384	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00389	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0038e	50		 push	 eax
  0038f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00394	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv226[ebp], 0
$LN38@build_supp:
  0039b	b9 01 00 00 00	 mov	 ecx, 1
  003a0	85 c9		 test	 ecx, ecx
  003a2	74 09		 je	 SHORT $LN39@build_supp
  003a4	c7 45 a0 19 00
	00 00		 mov	 DWORD PTR tv234[ebp], 25 ; 00000019H
  003ab	eb 21		 jmp	 SHORT $LN40@build_supp
$LN39@build_supp:
  003ad	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??build_supply_heat_map@@YGXXZ@4JA
  003b3	83 c2 3a	 add	 edx, 58			; 0000003aH
  003b6	52		 push	 edx
  003b7	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  003bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  003c1	50		 push	 eax
  003c2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003c7	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv234[ebp], 0
$LN40@build_supp:
  003ce	6a 19		 push	 25			; 00000019H
  003d0	8b 4d f4	 mov	 ecx, DWORD PTR _en$[ebp]
  003d3	51		 push	 ecx
  003d4	69 55 a4 b4 00
	00 00		 imul	 edx, DWORD PTR tv226[ebp], 180
  003db	8b 45 a0	 mov	 eax, DWORD PTR tv234[ebp]
  003de	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  003e5	ff d1		 call	 ecx
  003e7	89 45 f0	 mov	 DWORD PTR _group$[ebp], eax

; 210  : 	
; 211  : 							// get combined value of supplies - (each in range 0-100) into range 0-127
; 212  : 
; 213  : 							supplies = (get_local_entity_float_value (group, FLOAT_TYPE_FUEL_SUPPLY_LEVEL) +

  003ea	83 7d f0 00	 cmp	 DWORD PTR _group$[ebp], 0
  003ee	74 0a		 je	 SHORT $LN41@build_supp
  003f0	8b 45 f0	 mov	 eax, DWORD PTR _group$[ebp]
  003f3	8b 08		 mov	 ecx, DWORD PTR [eax]
  003f5	89 4d a4	 mov	 DWORD PTR tv246[ebp], ecx
  003f8	eb 21		 jmp	 SHORT $LN42@build_supp
$LN41@build_supp:
  003fa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??build_supply_heat_map@@YGXXZ@4JA
  00400	83 c2 3e	 add	 edx, 62			; 0000003eH
  00403	52		 push	 edx
  00404	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00409	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0040e	50		 push	 eax
  0040f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00414	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv246[ebp], 0
$LN42@build_supp:
  0041b	b9 01 00 00 00	 mov	 ecx, 1
  00420	85 c9		 test	 ecx, ecx
  00422	74 09		 je	 SHORT $LN43@build_supp
  00424	c7 45 a0 30 00
	00 00		 mov	 DWORD PTR tv254[ebp], 48 ; 00000030H
  0042b	eb 21		 jmp	 SHORT $LN44@build_supp
$LN43@build_supp:
  0042d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??build_supply_heat_map@@YGXXZ@4JA
  00433	83 c2 3e	 add	 edx, 62			; 0000003eH
  00436	52		 push	 edx
  00437	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0043c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00441	50		 push	 eax
  00442	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00447	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv254[ebp], 0
$LN44@build_supp:
  0044e	83 7d f0 00	 cmp	 DWORD PTR _group$[ebp], 0
  00452	74 0a		 je	 SHORT $LN45@build_supp
  00454	8b 4d f0	 mov	 ecx, DWORD PTR _group$[ebp]
  00457	8b 11		 mov	 edx, DWORD PTR [ecx]
  00459	89 55 9c	 mov	 DWORD PTR tv266[ebp], edx
  0045c	eb 21		 jmp	 SHORT $LN46@build_supp
$LN45@build_supp:
  0045e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??build_supply_heat_map@@YGXXZ@4JA
  00463	83 c0 3f	 add	 eax, 63			; 0000003fH
  00466	50		 push	 eax
  00467	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0046c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00472	51		 push	 ecx
  00473	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00478	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv266[ebp], 0
$LN46@build_supp:
  0047f	ba 01 00 00 00	 mov	 edx, 1
  00484	85 d2		 test	 edx, edx
  00486	74 09		 je	 SHORT $LN47@build_supp
  00488	c7 45 98 08 00
	00 00		 mov	 DWORD PTR tv274[ebp], 8
  0048f	eb 21		 jmp	 SHORT $LN48@build_supp
$LN47@build_supp:
  00491	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??build_supply_heat_map@@YGXXZ@4JA
  00496	83 c0 3f	 add	 eax, 63			; 0000003fH
  00499	50		 push	 eax
  0049a	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0049f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  004a5	51		 push	 ecx
  004a6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004ab	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv274[ebp], 0
$LN48@build_supp:
  004b2	6a 30		 push	 48			; 00000030H
  004b4	8b 55 f0	 mov	 edx, DWORD PTR _group$[ebp]
  004b7	52		 push	 edx
  004b8	69 45 a4 bc 02
	00 00		 imul	 eax, DWORD PTR tv246[ebp], 700
  004bf	8b 4d a0	 mov	 ecx, DWORD PTR tv254[ebp]
  004c2	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[eax+ecx*4]
  004c9	ff d2		 call	 edx
  004cb	d9 5d 94	 fstp	 DWORD PTR tv405[ebp]
  004ce	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR tv405[ebp]
  004d3	6a 08		 push	 8
  004d5	8b 45 f0	 mov	 eax, DWORD PTR _group$[ebp]
  004d8	50		 push	 eax
  004d9	69 4d 9c bc 02
	00 00		 imul	 ecx, DWORD PTR tv266[ebp], 700
  004e0	8b 55 98	 mov	 edx, DWORD PTR tv274[ebp]
  004e3	8b 84 91 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[ecx+edx*4]
  004ea	f3 0f 11 45 90	 movss	 DWORD PTR tv428[ebp], xmm0
  004ef	ff d0		 call	 eax
  004f1	d9 5d 8c	 fstp	 DWORD PTR tv412[ebp]
  004f4	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR tv428[ebp]
  004f9	f3 0f 58 45 8c	 addss	 xmm0, DWORD PTR tv412[ebp]
  004fe	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00502	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fa999999999999a
  0050a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0050e	f3 0f 11 45 e8	 movss	 DWORD PTR _supplies$[ebp], xmm0

; 214  : 											get_local_entity_float_value (group, FLOAT_TYPE_AMMO_SUPPLY_LEVEL)) *
; 215  : 											0.05;
; 216  : 							
; 217  : 							set_supply_heat_map_cargo_spot (en, x, z, (int) supplies);

  00513	f3 0f 2c 45 e8	 cvttss2si eax, DWORD PTR _supplies$[ebp]
  00518	50		 push	 eax
  00519	8b 4d f8	 mov	 ecx, DWORD PTR _z$[ebp]
  0051c	51		 push	 ecx
  0051d	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  00520	52		 push	 edx
  00521	8b 45 f4	 mov	 eax, DWORD PTR _en$[ebp]
  00524	50		 push	 eax
  00525	e8 00 00 00 00	 call	 ?set_supply_heat_map_cargo_spot@@YGXPAUENTITY@@HHH@Z ; set_supply_heat_map_cargo_spot
$LN15@build_supp:

; 218  : 						}
; 219  : 					}
; 220  : 				}
; 221  : 
; 222  : 				en = get_local_entity_child_succ (en, LIST_TYPE_SECTOR);

  0052a	83 7d f4 00	 cmp	 DWORD PTR _en$[ebp], 0
  0052e	74 0a		 je	 SHORT $LN49@build_supp
  00530	8b 45 f4	 mov	 eax, DWORD PTR _en$[ebp]
  00533	8b 08		 mov	 ecx, DWORD PTR [eax]
  00535	89 4d a4	 mov	 DWORD PTR tv295[ebp], ecx
  00538	eb 21		 jmp	 SHORT $LN50@build_supp
$LN49@build_supp:
  0053a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??build_supply_heat_map@@YGXXZ@4JA
  00540	83 c2 47	 add	 edx, 71			; 00000047H
  00543	52		 push	 edx
  00544	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00549	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0054e	50		 push	 eax
  0054f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00554	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv295[ebp], 0
$LN50@build_supp:
  0055b	b9 01 00 00 00	 mov	 ecx, 1
  00560	85 c9		 test	 ecx, ecx
  00562	74 09		 je	 SHORT $LN51@build_supp
  00564	c7 45 a0 21 00
	00 00		 mov	 DWORD PTR tv303[ebp], 33 ; 00000021H
  0056b	eb 21		 jmp	 SHORT $LN52@build_supp
$LN51@build_supp:
  0056d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??build_supply_heat_map@@YGXXZ@4JA
  00573	83 c2 47	 add	 edx, 71			; 00000047H
  00576	52		 push	 edx
  00577	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0057c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00581	50		 push	 eax
  00582	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00587	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv303[ebp], 0
$LN52@build_supp:
  0058e	6a 21		 push	 33			; 00000021H
  00590	8b 4d f4	 mov	 ecx, DWORD PTR _en$[ebp]
  00593	51		 push	 ecx
  00594	69 55 a4 b4 00
	00 00		 imul	 edx, DWORD PTR tv295[ebp], 180
  0059b	8b 45 a0	 mov	 eax, DWORD PTR tv303[ebp]
  0059e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  005a5	ff d1		 call	 ecx
  005a7	89 45 f4	 mov	 DWORD PTR _en$[ebp], eax

; 223  : 			}

  005aa	e9 ef fb ff ff	 jmp	 $LN8@build_supp
$LN9@build_supp:

; 224  : 		}

  005af	e9 f8 fa ff ff	 jmp	 $LN5@build_supp
$LN6@build_supp:

; 225  : 	}

  005b4	e9 d2 fa ff ff	 jmp	 $LN2@build_supp
$LN3@build_supp:

; 226  : 
; 227  : 	// draw frontline groups
; 228  : }

  005b9	5f		 pop	 edi
  005ba	5e		 pop	 esi
  005bb	5b		 pop	 ebx
  005bc	8b e5		 mov	 esp, ebp
  005be	5d		 pop	 ebp
  005bf	c3		 ret	 0
?build_supply_heat_map@@YGXXZ ENDP			; build_supply_heat_map
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_types\en_suply.c
;	COMDAT ?set_supply_heat_map_cargo_spot@@YGXPAUENTITY@@HHH@Z
_TEXT	SEGMENT
tv247 = -140						; size = 8
tv237 = -140						; size = 8
tv208 = -140						; size = 8
tv179 = -140						; size = 8
tv248 = -132						; size = 8
tv238 = -132						; size = 8
tv223 = -132						; size = 4
tv209 = -132						; size = 8
tv194 = -132						; size = 4
tv180 = -132						; size = 8
tv216 = -128						; size = 4
tv187 = -128						; size = 4
$T1 = -124						; size = 4
$T2 = -120						; size = 4
$T3 = -116						; size = 4
$T4 = -112						; size = 4
$T5 = -108						; size = 4
$T6 = -104						; size = 4
$T7 = -100						; size = 4
_scale$ = -32						; size = 4
_str$ = -28						; size = 4
_offset$ = -24						; size = 4
_z_a$ = -20						; size = 4
_x_a$ = -16						; size = 4
_z_loop$ = -12						; size = 4
_x_loop$ = -8						; size = 4
_col$ = -4						; size = 4
_en$ = 8						; size = 4
_x$ = 12						; size = 4
_z$ = 16						; size = 4
_value$ = 20						; size = 4
?set_supply_heat_map_cargo_spot@@YGXPAUENTITY@@HHH@Z PROC ; set_supply_heat_map_cargo_spot, COMDAT

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 236  : 
; 237  : 	rgb_colour
; 238  : 		col;
; 239  : 
; 240  : 	int
; 241  : 		x_loop,
; 242  : 		z_loop,
; 243  : 		x_a,
; 244  : 		z_a,
; 245  : 		offset,
; 246  : 		str;
; 247  : 
; 248  : 	float
; 249  : 		scale;
; 250  : 	
; 251  : 	offset = supply_heat_map[x + (NUM_MAP_X_SECTORS * z)];

  0000c	a1 08 00 00 00	 mov	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00011	0f af 45 10	 imul	 eax, DWORD PTR _z$[ebp]
  00015	03 45 0c	 add	 eax, DWORD PTR _x$[ebp]
  00018	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?supply_heat_map@@3PAEA ; supply_heat_map
  0001e	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  00022	89 55 e8	 mov	 DWORD PTR _offset$[ebp], edx

; 252  : 
; 253  : 	if (offset > 128)

  00025	81 7d e8 80 00
	00 00		 cmp	 DWORD PTR _offset$[ebp], 128 ; 00000080H
  0002c	7e 09		 jle	 SHORT $LN8@set_supply

; 254  : 	{
; 255  : 		offset = 3;

  0002e	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR _offset$[ebp], 3
  00035	eb 25		 jmp	 SHORT $LN13@set_supply
$LN8@set_supply:

; 256  : 	}
; 257  : 	else if (offset > 64)

  00037	83 7d e8 40	 cmp	 DWORD PTR _offset$[ebp], 64 ; 00000040H
  0003b	7e 09		 jle	 SHORT $LN10@set_supply

; 258  : 	{
; 259  : 		offset = 2;

  0003d	c7 45 e8 02 00
	00 00		 mov	 DWORD PTR _offset$[ebp], 2
  00044	eb 16		 jmp	 SHORT $LN13@set_supply
$LN10@set_supply:

; 260  : 	}
; 261  : 	else if (offset > 32)

  00046	83 7d e8 20	 cmp	 DWORD PTR _offset$[ebp], 32 ; 00000020H
  0004a	7e 09		 jle	 SHORT $LN12@set_supply

; 262  : 	{
; 263  : 		offset = 1;

  0004c	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _offset$[ebp], 1

; 264  : 	}
; 265  : 	else

  00053	eb 07		 jmp	 SHORT $LN13@set_supply
$LN12@set_supply:

; 266  : 	{
; 267  : 		offset = 0;

  00055	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _offset$[ebp], 0
$LN13@set_supply:

; 268  : 	}
; 269  : 	
; 270  : 	offset = min (offset, 3);

  0005c	c7 45 9c 03 00
	00 00		 mov	 DWORD PTR $T7[ebp], 3
  00063	8d 45 9c	 lea	 eax, DWORD PTR $T7[ebp]
  00066	50		 push	 eax
  00067	8d 4d e8	 lea	 ecx, DWORD PTR _offset$[ebp]
  0006a	51		 push	 ecx
  0006b	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  00070	8b 10		 mov	 edx, DWORD PTR [eax]
  00072	89 55 e8	 mov	 DWORD PTR _offset$[ebp], edx

; 271  : 
; 272  : 	if (offset)

  00075	83 7d e8 00	 cmp	 DWORD PTR _offset$[ebp], 0
  00079	74 18		 je	 SHORT $LN14@set_supply

; 273  : 	{
; 274  : 		scale = 255 / (offset * 2);

  0007b	8b 4d e8	 mov	 ecx, DWORD PTR _offset$[ebp]
  0007e	d1 e1		 shl	 ecx, 1
  00080	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00085	99		 cdq
  00086	f7 f9		 idiv	 ecx
  00088	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0008c	f3 0f 11 45 e0	 movss	 DWORD PTR _scale$[ebp], xmm0

; 275  : 	}
; 276  : 	else

  00091	eb 0f		 jmp	 SHORT $LN15@set_supply
$LN14@set_supply:

; 277  : 	{
; 278  : 		scale = 0;

  00093	0f 57 c0	 xorps	 xmm0, xmm0
  00096	f3 0f 11 45 e0	 movss	 DWORD PTR _scale$[ebp], xmm0

; 279  : 		
; 280  : 		offset = 0;

  0009b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _offset$[ebp], 0
$LN15@set_supply:

; 281  : 	}
; 282  : 	
; 283  : 	for (z_loop = max (z - offset, 0); z_loop < min (z + offset + 1, NUM_MAP_Z_SECTORS); z_loop ++)

  000a2	c7 45 98 00 00
	00 00		 mov	 DWORD PTR $T6[ebp], 0
  000a9	8b 45 10	 mov	 eax, DWORD PTR _z$[ebp]
  000ac	2b 45 e8	 sub	 eax, DWORD PTR _offset$[ebp]
  000af	89 45 94	 mov	 DWORD PTR $T5[ebp], eax
  000b2	8d 4d 98	 lea	 ecx, DWORD PTR $T6[ebp]
  000b5	51		 push	 ecx
  000b6	8d 55 94	 lea	 edx, DWORD PTR $T5[ebp]
  000b9	52		 push	 edx
  000ba	e8 00 00 00 00	 call	 ??$max@H@std@@YGABHABH0@Z ; std::max<int>
  000bf	8b 00		 mov	 eax, DWORD PTR [eax]
  000c1	89 45 f4	 mov	 DWORD PTR _z_loop$[ebp], eax
  000c4	eb 09		 jmp	 SHORT $LN4@set_supply
$LN2@set_supply:
  000c6	8b 45 f4	 mov	 eax, DWORD PTR _z_loop$[ebp]
  000c9	83 c0 01	 add	 eax, 1
  000cc	89 45 f4	 mov	 DWORD PTR _z_loop$[ebp], eax
$LN4@set_supply:
  000cf	8b 45 e8	 mov	 eax, DWORD PTR _offset$[ebp]
  000d2	8b 4d 10	 mov	 ecx, DWORD PTR _z$[ebp]
  000d5	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  000d9	89 55 90	 mov	 DWORD PTR $T4[ebp], edx
  000dc	68 0c 00 00 00	 push	 OFFSET ?world_map@@3UWORLD_MAP_DATA@@A+12
  000e1	8d 45 90	 lea	 eax, DWORD PTR $T4[ebp]
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  000ea	8b 4d f4	 mov	 ecx, DWORD PTR _z_loop$[ebp]
  000ed	3b 08		 cmp	 ecx, DWORD PTR [eax]
  000ef	0f 8d 42 04 00
	00		 jge	 $LN3@set_supply

; 284  : 	{
; 285  : 		z_a = abs (z_loop - (z));

  000f5	8b 45 f4	 mov	 eax, DWORD PTR _z_loop$[ebp]
  000f8	2b 45 10	 sub	 eax, DWORD PTR _z$[ebp]
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 _abs
  00101	83 c4 04	 add	 esp, 4
  00104	89 45 ec	 mov	 DWORD PTR _z_a$[ebp], eax

; 286  : 
; 287  : 		for (x_loop = max (x - offset, 0); x_loop < min (x + offset + 1, NUM_MAP_X_SECTORS); x_loop ++)

  00107	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0
  0010e	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00111	2b 45 e8	 sub	 eax, DWORD PTR _offset$[ebp]
  00114	89 45 88	 mov	 DWORD PTR $T2[ebp], eax
  00117	8d 4d 8c	 lea	 ecx, DWORD PTR $T3[ebp]
  0011a	51		 push	 ecx
  0011b	8d 55 88	 lea	 edx, DWORD PTR $T2[ebp]
  0011e	52		 push	 edx
  0011f	e8 00 00 00 00	 call	 ??$max@H@std@@YGABHABH0@Z ; std::max<int>
  00124	8b 00		 mov	 eax, DWORD PTR [eax]
  00126	89 45 f8	 mov	 DWORD PTR _x_loop$[ebp], eax
  00129	eb 09		 jmp	 SHORT $LN7@set_supply
$LN5@set_supply:
  0012b	8b 45 f8	 mov	 eax, DWORD PTR _x_loop$[ebp]
  0012e	83 c0 01	 add	 eax, 1
  00131	89 45 f8	 mov	 DWORD PTR _x_loop$[ebp], eax
$LN7@set_supply:
  00134	8b 45 e8	 mov	 eax, DWORD PTR _offset$[ebp]
  00137	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0013a	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  0013e	89 55 84	 mov	 DWORD PTR $T1[ebp], edx
  00141	68 08 00 00 00	 push	 OFFSET ?world_map@@3UWORLD_MAP_DATA@@A+8
  00146	8d 45 84	 lea	 eax, DWORD PTR $T1[ebp]
  00149	50		 push	 eax
  0014a	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  0014f	8b 4d f8	 mov	 ecx, DWORD PTR _x_loop$[ebp]
  00152	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00154	0f 8d d8 03 00
	00		 jge	 $LN6@set_supply

; 288  : 		{
; 289  : 
; 290  : 			col.r = supply_heat_bitmap [(z_loop * NUM_MAP_X_SECTORS * 3) + (x_loop * 3)];

  0015a	8b 45 f4	 mov	 eax, DWORD PTR _z_loop$[ebp]
  0015d	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00164	6b c8 03	 imul	 ecx, eax, 3
  00167	6b 55 f8 03	 imul	 edx, DWORD PTR _x_loop$[ebp], 3
  0016b	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?supply_heat_bitmap@@3PAEA ; supply_heat_bitmap
  00171	8a 04 0a	 mov	 al, BYTE PTR [edx+ecx]
  00174	88 45 fe	 mov	 BYTE PTR _col$[ebp+2], al

; 291  : 			col.g = supply_heat_bitmap [(z_loop * NUM_MAP_X_SECTORS * 3) + (x_loop * 3) + 1];

  00177	8b 45 f4	 mov	 eax, DWORD PTR _z_loop$[ebp]
  0017a	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00181	6b c8 03	 imul	 ecx, eax, 3
  00184	6b 55 f8 03	 imul	 edx, DWORD PTR _x_loop$[ebp], 3
  00188	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?supply_heat_bitmap@@3PAEA ; supply_heat_bitmap
  0018e	8a 44 0a 01	 mov	 al, BYTE PTR [edx+ecx+1]
  00192	88 45 fd	 mov	 BYTE PTR _col$[ebp+1], al

; 292  : 			col.b = supply_heat_bitmap [(z_loop * NUM_MAP_X_SECTORS * 3) + (x_loop * 3) + 2];

  00195	8b 45 f4	 mov	 eax, DWORD PTR _z_loop$[ebp]
  00198	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  0019f	6b c8 03	 imul	 ecx, eax, 3
  001a2	6b 55 f8 03	 imul	 edx, DWORD PTR _x_loop$[ebp], 3
  001a6	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?supply_heat_bitmap@@3PAEA ; supply_heat_bitmap
  001ac	8a 44 0a 02	 mov	 al, BYTE PTR [edx+ecx+2]
  001b0	88 45 fc	 mov	 BYTE PTR _col$[ebp], al

; 293  : 
; 294  : 			x_a = abs (x_loop - (x));

  001b3	8b 45 f8	 mov	 eax, DWORD PTR _x_loop$[ebp]
  001b6	2b 45 0c	 sub	 eax, DWORD PTR _x$[ebp]
  001b9	50		 push	 eax
  001ba	e8 00 00 00 00	 call	 _abs
  001bf	83 c4 04	 add	 esp, 4
  001c2	89 45 f0	 mov	 DWORD PTR _x_a$[ebp], eax

; 295  : 
; 296  : 			str = 255 - (scale * (x_a + z_a));

  001c5	8b 45 f0	 mov	 eax, DWORD PTR _x_a$[ebp]
  001c8	03 45 ec	 add	 eax, DWORD PTR _z_a$[ebp]
  001cb	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  001cf	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  001d4	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@437f0000
  001dc	f3 0f 5c c8	 subss	 xmm1, xmm0
  001e0	f3 0f 2c c9	 cvttss2si ecx, xmm1
  001e4	89 4d e4	 mov	 DWORD PTR _str$[ebp], ecx

; 297  : 
; 298  : 			if (str > supply_heat_map[(z_loop * NUM_MAP_X_SECTORS) + x_loop])

  001e7	8b 45 f4	 mov	 eax, DWORD PTR _z_loop$[ebp]
  001ea	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  001f1	03 45 f8	 add	 eax, DWORD PTR _x_loop$[ebp]
  001f4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?supply_heat_map@@3PAEA ; supply_heat_map
  001fa	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  001fe	39 55 e4	 cmp	 DWORD PTR _str$[ebp], edx
  00201	7e 77		 jle	 SHORT $LN16@set_supply

; 299  : 			{
; 300  : 				supply_heat_map[(z_loop * NUM_MAP_X_SECTORS) + x_loop] = bound (str, 0.0, 255.0);

  00203	f2 0f 2a 45 e4	 cvtsi2sd xmm0, DWORD PTR _str$[ebp]
  00208	0f 57 c9	 xorps	 xmm1, xmm1
  0020b	66 0f 2f c8	 comisd	 xmm1, xmm0
  0020f	76 0d		 jbe	 SHORT $LN27@set_supply
  00211	0f 57 c0	 xorps	 xmm0, xmm0
  00214	f2 0f 11 85 7c
	ff ff ff	 movsd	 QWORD PTR tv180[ebp], xmm0
  0021c	eb 3e		 jmp	 SHORT $LN28@set_supply
$LN27@set_supply:
  0021e	f2 0f 2a 45 e4	 cvtsi2sd xmm0, DWORD PTR _str$[ebp]
  00223	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@406fe00000000000
  0022b	76 12		 jbe	 SHORT $LN25@set_supply
  0022d	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@406fe00000000000
  00235	f2 0f 11 85 74
	ff ff ff	 movsd	 QWORD PTR tv179[ebp], xmm0
  0023d	eb 0d		 jmp	 SHORT $LN26@set_supply
$LN25@set_supply:
  0023f	f2 0f 2a 45 e4	 cvtsi2sd xmm0, DWORD PTR _str$[ebp]
  00244	f2 0f 11 85 74
	ff ff ff	 movsd	 QWORD PTR tv179[ebp], xmm0
$LN26@set_supply:
  0024c	f2 0f 10 85 74
	ff ff ff	 movsd	 xmm0, QWORD PTR tv179[ebp]
  00254	f2 0f 11 85 7c
	ff ff ff	 movsd	 QWORD PTR tv180[ebp], xmm0
$LN28@set_supply:
  0025c	f2 0f 2c 85 7c
	ff ff ff	 cvttsd2si eax, QWORD PTR tv180[ebp]
  00264	8b 4d f4	 mov	 ecx, DWORD PTR _z_loop$[ebp]
  00267	0f af 0d 08 00
	00 00		 imul	 ecx, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  0026e	03 4d f8	 add	 ecx, DWORD PTR _x_loop$[ebp]
  00271	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?supply_heat_map@@3PAEA ; supply_heat_map
  00277	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
$LN16@set_supply:

; 301  : 			}
; 302  : 			
; 303  : 			if (get_local_entity_int_value (en, INT_TYPE_SIDE) == ENTITY_SIDE_BLUE_FORCE)

  0027a	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0027e	74 0a		 je	 SHORT $LN29@set_supply
  00280	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00283	8b 08		 mov	 ecx, DWORD PTR [eax]
  00285	89 4d 80	 mov	 DWORD PTR tv187[ebp], ecx
  00288	eb 1d		 jmp	 SHORT $LN30@set_supply
$LN29@set_supply:
  0028a	68 2f 01 00 00	 push	 303			; 0000012fH
  0028f	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00294	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0029a	52		 push	 edx
  0029b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002a0	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv187[ebp], 0
$LN30@set_supply:
  002a7	b8 01 00 00 00	 mov	 eax, 1
  002ac	85 c0		 test	 eax, eax
  002ae	74 0c		 je	 SHORT $LN31@set_supply
  002b0	c7 85 7c ff ff
	ff bb 00 00 00	 mov	 DWORD PTR tv194[ebp], 187 ; 000000bbH
  002ba	eb 20		 jmp	 SHORT $LN32@set_supply
$LN31@set_supply:
  002bc	68 2f 01 00 00	 push	 303			; 0000012fH
  002c1	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  002c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  002cc	51		 push	 ecx
  002cd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002d2	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv194[ebp], 0
$LN32@set_supply:
  002dc	68 bb 00 00 00	 push	 187			; 000000bbH
  002e1	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  002e4	52		 push	 edx
  002e5	69 45 80 5c 04
	00 00		 imul	 eax, DWORD PTR tv187[ebp], 1116
  002ec	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR tv194[ebp]
  002f2	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  002f9	ff d2		 call	 edx
  002fb	83 f8 01	 cmp	 eax, 1
  002fe	75 72		 jne	 SHORT $LN17@set_supply

; 304  : 			{
; 305  : 				if (str > col.b)

  00300	0f b6 45 fc	 movzx	 eax, BYTE PTR _col$[ebp]
  00304	39 45 e4	 cmp	 DWORD PTR _str$[ebp], eax
  00307	7e 64		 jle	 SHORT $LN19@set_supply

; 306  : 				{
; 307  : 					col.b = bound ((str), 0.0, 255.0);

  00309	f2 0f 2a 45 e4	 cvtsi2sd xmm0, DWORD PTR _str$[ebp]
  0030e	0f 57 c9	 xorps	 xmm1, xmm1
  00311	66 0f 2f c8	 comisd	 xmm1, xmm0
  00315	76 0d		 jbe	 SHORT $LN35@set_supply
  00317	0f 57 c0	 xorps	 xmm0, xmm0
  0031a	f2 0f 11 85 7c
	ff ff ff	 movsd	 QWORD PTR tv209[ebp], xmm0
  00322	eb 3e		 jmp	 SHORT $LN36@set_supply
$LN35@set_supply:
  00324	f2 0f 2a 45 e4	 cvtsi2sd xmm0, DWORD PTR _str$[ebp]
  00329	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@406fe00000000000
  00331	76 12		 jbe	 SHORT $LN33@set_supply
  00333	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@406fe00000000000
  0033b	f2 0f 11 85 74
	ff ff ff	 movsd	 QWORD PTR tv208[ebp], xmm0
  00343	eb 0d		 jmp	 SHORT $LN34@set_supply
$LN33@set_supply:
  00345	f2 0f 2a 45 e4	 cvtsi2sd xmm0, DWORD PTR _str$[ebp]
  0034a	f2 0f 11 85 74
	ff ff ff	 movsd	 QWORD PTR tv208[ebp], xmm0
$LN34@set_supply:
  00352	f2 0f 10 85 74
	ff ff ff	 movsd	 xmm0, QWORD PTR tv208[ebp]
  0035a	f2 0f 11 85 7c
	ff ff ff	 movsd	 QWORD PTR tv209[ebp], xmm0
$LN36@set_supply:
  00362	f2 0f 2c 85 7c
	ff ff ff	 cvttsd2si eax, QWORD PTR tv209[ebp]
  0036a	88 45 fc	 mov	 BYTE PTR _col$[ebp], al
$LN19@set_supply:

; 308  : 				}
; 309  : 			}

  0036d	e9 62 01 00 00	 jmp	 $LN23@set_supply
$LN17@set_supply:

; 310  : 			else if (get_local_entity_int_value (en, INT_TYPE_SIDE) == ENTITY_SIDE_RED_FORCE)

  00372	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00376	74 0a		 je	 SHORT $LN37@set_supply
  00378	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0037b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0037d	89 4d 80	 mov	 DWORD PTR tv216[ebp], ecx
  00380	eb 1d		 jmp	 SHORT $LN38@set_supply
$LN37@set_supply:
  00382	68 36 01 00 00	 push	 310			; 00000136H
  00387	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0038c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00392	52		 push	 edx
  00393	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00398	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv216[ebp], 0
$LN38@set_supply:
  0039f	b8 01 00 00 00	 mov	 eax, 1
  003a4	85 c0		 test	 eax, eax
  003a6	74 0c		 je	 SHORT $LN39@set_supply
  003a8	c7 85 7c ff ff
	ff bb 00 00 00	 mov	 DWORD PTR tv223[ebp], 187 ; 000000bbH
  003b2	eb 20		 jmp	 SHORT $LN40@set_supply
$LN39@set_supply:
  003b4	68 36 01 00 00	 push	 310			; 00000136H
  003b9	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  003be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  003c4	51		 push	 ecx
  003c5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003ca	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv223[ebp], 0
$LN40@set_supply:
  003d4	68 bb 00 00 00	 push	 187			; 000000bbH
  003d9	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  003dc	52		 push	 edx
  003dd	69 45 80 5c 04
	00 00		 imul	 eax, DWORD PTR tv216[ebp], 1116
  003e4	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR tv223[ebp]
  003ea	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  003f1	ff d2		 call	 edx
  003f3	83 f8 02	 cmp	 eax, 2
  003f6	75 6f		 jne	 SHORT $LN20@set_supply

; 311  : 			{
; 312  : 				if (str > col.r)

  003f8	0f b6 45 fe	 movzx	 eax, BYTE PTR _col$[ebp+2]
  003fc	39 45 e4	 cmp	 DWORD PTR _str$[ebp], eax
  003ff	7e 64		 jle	 SHORT $LN22@set_supply

; 313  : 				{
; 314  : 					col.r = bound ((str), 0.0, 255.0);

  00401	f2 0f 2a 45 e4	 cvtsi2sd xmm0, DWORD PTR _str$[ebp]
  00406	0f 57 c9	 xorps	 xmm1, xmm1
  00409	66 0f 2f c8	 comisd	 xmm1, xmm0
  0040d	76 0d		 jbe	 SHORT $LN43@set_supply
  0040f	0f 57 c0	 xorps	 xmm0, xmm0
  00412	f2 0f 11 85 7c
	ff ff ff	 movsd	 QWORD PTR tv238[ebp], xmm0
  0041a	eb 3e		 jmp	 SHORT $LN44@set_supply
$LN43@set_supply:
  0041c	f2 0f 2a 45 e4	 cvtsi2sd xmm0, DWORD PTR _str$[ebp]
  00421	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@406fe00000000000
  00429	76 12		 jbe	 SHORT $LN41@set_supply
  0042b	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@406fe00000000000
  00433	f2 0f 11 85 74
	ff ff ff	 movsd	 QWORD PTR tv237[ebp], xmm0
  0043b	eb 0d		 jmp	 SHORT $LN42@set_supply
$LN41@set_supply:
  0043d	f2 0f 2a 45 e4	 cvtsi2sd xmm0, DWORD PTR _str$[ebp]
  00442	f2 0f 11 85 74
	ff ff ff	 movsd	 QWORD PTR tv237[ebp], xmm0
$LN42@set_supply:
  0044a	f2 0f 10 85 74
	ff ff ff	 movsd	 xmm0, QWORD PTR tv237[ebp]
  00452	f2 0f 11 85 7c
	ff ff ff	 movsd	 QWORD PTR tv238[ebp], xmm0
$LN44@set_supply:
  0045a	f2 0f 2c 85 7c
	ff ff ff	 cvttsd2si eax, QWORD PTR tv238[ebp]
  00462	88 45 fe	 mov	 BYTE PTR _col$[ebp+2], al
$LN22@set_supply:

; 315  : 				}
; 316  : 			}
; 317  : 			else

  00465	eb 6d		 jmp	 SHORT $LN23@set_supply
$LN20@set_supply:

; 318  : 			{
; 319  : 				if (str > col.g)

  00467	0f b6 45 fd	 movzx	 eax, BYTE PTR _col$[ebp+1]
  0046b	39 45 e4	 cmp	 DWORD PTR _str$[ebp], eax
  0046e	7e 64		 jle	 SHORT $LN23@set_supply

; 320  : 				{
; 321  : 					col.g = bound ((str), 0.0, 255.0);

  00470	f2 0f 2a 45 e4	 cvtsi2sd xmm0, DWORD PTR _str$[ebp]
  00475	0f 57 c9	 xorps	 xmm1, xmm1
  00478	66 0f 2f c8	 comisd	 xmm1, xmm0
  0047c	76 0d		 jbe	 SHORT $LN47@set_supply
  0047e	0f 57 c0	 xorps	 xmm0, xmm0
  00481	f2 0f 11 85 7c
	ff ff ff	 movsd	 QWORD PTR tv248[ebp], xmm0
  00489	eb 3e		 jmp	 SHORT $LN48@set_supply
$LN47@set_supply:
  0048b	f2 0f 2a 45 e4	 cvtsi2sd xmm0, DWORD PTR _str$[ebp]
  00490	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@406fe00000000000
  00498	76 12		 jbe	 SHORT $LN45@set_supply
  0049a	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@406fe00000000000
  004a2	f2 0f 11 85 74
	ff ff ff	 movsd	 QWORD PTR tv247[ebp], xmm0
  004aa	eb 0d		 jmp	 SHORT $LN46@set_supply
$LN45@set_supply:
  004ac	f2 0f 2a 45 e4	 cvtsi2sd xmm0, DWORD PTR _str$[ebp]
  004b1	f2 0f 11 85 74
	ff ff ff	 movsd	 QWORD PTR tv247[ebp], xmm0
$LN46@set_supply:
  004b9	f2 0f 10 85 74
	ff ff ff	 movsd	 xmm0, QWORD PTR tv247[ebp]
  004c1	f2 0f 11 85 7c
	ff ff ff	 movsd	 QWORD PTR tv248[ebp], xmm0
$LN48@set_supply:
  004c9	f2 0f 2c 85 7c
	ff ff ff	 cvttsd2si eax, QWORD PTR tv248[ebp]
  004d1	88 45 fd	 mov	 BYTE PTR _col$[ebp+1], al
$LN23@set_supply:

; 322  : 				}
; 323  : 			}
; 324  : 
; 325  : 			supply_heat_bitmap [(z_loop * NUM_MAP_X_SECTORS * 3) + (x_loop * 3)] = col.r;

  004d4	8b 45 f4	 mov	 eax, DWORD PTR _z_loop$[ebp]
  004d7	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  004de	6b c8 03	 imul	 ecx, eax, 3
  004e1	6b 55 f8 03	 imul	 edx, DWORD PTR _x_loop$[ebp], 3
  004e5	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?supply_heat_bitmap@@3PAEA ; supply_heat_bitmap
  004eb	8a 45 fe	 mov	 al, BYTE PTR _col$[ebp+2]
  004ee	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 326  : 			supply_heat_bitmap [(z_loop * NUM_MAP_X_SECTORS * 3) + (x_loop * 3) + 1] = col.g;

  004f1	8b 45 f4	 mov	 eax, DWORD PTR _z_loop$[ebp]
  004f4	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  004fb	6b c8 03	 imul	 ecx, eax, 3
  004fe	6b 55 f8 03	 imul	 edx, DWORD PTR _x_loop$[ebp], 3
  00502	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?supply_heat_bitmap@@3PAEA ; supply_heat_bitmap
  00508	8a 45 fd	 mov	 al, BYTE PTR _col$[ebp+1]
  0050b	88 44 0a 01	 mov	 BYTE PTR [edx+ecx+1], al

; 327  : 			supply_heat_bitmap [(z_loop * NUM_MAP_X_SECTORS * 3) + (x_loop * 3) + 2] = col.b;

  0050f	8b 45 f4	 mov	 eax, DWORD PTR _z_loop$[ebp]
  00512	0f af 05 08 00
	00 00		 imul	 eax, DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A+8
  00519	6b c8 03	 imul	 ecx, eax, 3
  0051c	6b 55 f8 03	 imul	 edx, DWORD PTR _x_loop$[ebp], 3
  00520	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?supply_heat_bitmap@@3PAEA ; supply_heat_bitmap
  00526	8a 45 fc	 mov	 al, BYTE PTR _col$[ebp]
  00529	88 44 0a 02	 mov	 BYTE PTR [edx+ecx+2], al

; 328  : 
; 329  : 		}

  0052d	e9 f9 fb ff ff	 jmp	 $LN5@set_supply
$LN6@set_supply:

; 330  : 	}

  00532	e9 8f fb ff ff	 jmp	 $LN2@set_supply
$LN3@set_supply:

; 331  : }

  00537	5f		 pop	 edi
  00538	5e		 pop	 esi
  00539	5b		 pop	 ebx
  0053a	8b e5		 mov	 esp, ebp
  0053c	5d		 pop	 ebp
  0053d	c2 10 00	 ret	 16			; 00000010H
?set_supply_heat_map_cargo_spot@@YGXPAUENTITY@@HHH@Z ENDP ; set_supply_heat_map_cargo_spot
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_types\en_suply.c
;	COMDAT ?get_local_entity_refueling_sleep_time@@YGMPAUENTITY@@@Z
_TEXT	SEGMENT
tv170 = -84						; size = 8
tv130 = -76						; size = 4
tv78 = -76						; size = 4
tv90 = -72						; size = 4
tv70 = -72						; size = 4
_sleep_time$ = -4					; size = 4
_group$ = 8						; size = 4
?get_local_entity_refueling_sleep_time@@YGMPAUENTITY@@@Z PROC ; get_local_entity_refueling_sleep_time, COMDAT

; 123  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 124  : 
; 125  : 	float
; 126  : 		sleep_time;
; 127  : 
; 128  : 	// using rearming time for the moment...
; 129  : 	sleep_time = get_local_entity_float_value (group, FLOAT_TYPE_REARMING_TIME);

  00009	83 7d 08 00	 cmp	 DWORD PTR _group$[ebp], 0
  0000d	74 0a		 je	 SHORT $LN3@get_local_
  0000f	8b 45 08	 mov	 eax, DWORD PTR _group$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	89 4d b8	 mov	 DWORD PTR tv70[ebp], ecx
  00017	eb 21		 jmp	 SHORT $LN4@get_local_
$LN3@get_local_:
  00019	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_local_entity_refueling_sleep_time@@YGMPAUENTITY@@@Z@4JA
  0001f	83 c2 06	 add	 edx, 6
  00022	52		 push	 edx
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00033	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@get_local_:
  0003a	b9 01 00 00 00	 mov	 ecx, 1
  0003f	85 c9		 test	 ecx, ecx
  00041	74 09		 je	 SHORT $LN5@get_local_
  00043	c7 45 b4 6d 00
	00 00		 mov	 DWORD PTR tv78[ebp], 109 ; 0000006dH
  0004a	eb 21		 jmp	 SHORT $LN6@get_local_
$LN5@get_local_:
  0004c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_local_entity_refueling_sleep_time@@YGMPAUENTITY@@@Z@4JA
  00052	83 c2 06	 add	 edx, 6
  00055	52		 push	 edx
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00066	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN6@get_local_:
  0006d	6a 6d		 push	 109			; 0000006dH
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _group$[ebp]
  00072	51		 push	 ecx
  00073	69 55 b8 bc 02
	00 00		 imul	 edx, DWORD PTR tv70[ebp], 700
  0007a	8b 45 b4	 mov	 eax, DWORD PTR tv78[ebp]
  0007d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00084	ff d1		 call	 ecx
  00086	d9 5d fc	 fstp	 DWORD PTR _sleep_time$[ebp]

; 130  : 
; 131  : 	sleep_time *= -(((MAX_REFUELING_TIME_SCALING_FACTOR - 1.0) / 100.0) * get_local_entity_float_value (group, FLOAT_TYPE_FUEL_SUPPLY_LEVEL)) + MAX_REARMING_TIME_SCALING_FACTOR;

  00089	83 7d 08 00	 cmp	 DWORD PTR _group$[ebp], 0
  0008d	74 0a		 je	 SHORT $LN7@get_local_
  0008f	8b 45 08	 mov	 eax, DWORD PTR _group$[ebp]
  00092	8b 08		 mov	 ecx, DWORD PTR [eax]
  00094	89 4d b8	 mov	 DWORD PTR tv90[ebp], ecx
  00097	eb 21		 jmp	 SHORT $LN8@get_local_
$LN7@get_local_:
  00099	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_local_entity_refueling_sleep_time@@YGMPAUENTITY@@@Z@4JA
  0009f	83 c2 08	 add	 edx, 8
  000a2	52		 push	 edx
  000a3	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b3	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN8@get_local_:
  000ba	b9 01 00 00 00	 mov	 ecx, 1
  000bf	85 c9		 test	 ecx, ecx
  000c1	74 09		 je	 SHORT $LN9@get_local_
  000c3	c7 45 b4 30 00
	00 00		 mov	 DWORD PTR tv130[ebp], 48 ; 00000030H
  000ca	eb 21		 jmp	 SHORT $LN10@get_local_
$LN9@get_local_:
  000cc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_local_entity_refueling_sleep_time@@YGMPAUENTITY@@@Z@4JA
  000d2	83 c2 08	 add	 edx, 8
  000d5	52		 push	 edx
  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000e6	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN10@get_local_:
  000ed	6a 30		 push	 48			; 00000030H
  000ef	8b 4d 08	 mov	 ecx, DWORD PTR _group$[ebp]
  000f2	51		 push	 ecx
  000f3	69 55 b8 bc 02
	00 00		 imul	 edx, DWORD PTR tv90[ebp], 700
  000fa	8b 45 b4	 mov	 eax, DWORD PTR tv130[ebp]
  000fd	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00104	ff d1		 call	 ecx
  00106	dd 5d ac	 fstp	 QWORD PTR tv170[ebp]
  00109	f2 0f 10 45 ac	 movsd	 xmm0, QWORD PTR tv170[ebp]
  0010e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00116	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  0011d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4014000000000000
  00125	f3 0f 5a 4d fc	 cvtss2sd xmm1, DWORD PTR _sleep_time$[ebp]
  0012a	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  0012e	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00132	f3 0f 11 45 fc	 movss	 DWORD PTR _sleep_time$[ebp], xmm0

; 132  : 
; 133  : 	#if DEBUG_MODULE || DEBUG_SUPPLY
; 134  : 
; 135  : 	debug_log ("EN_SUPLY: SUPPLY_INFO: group %s refueling sleep time = %f (normal_time = %f, supply level = %f)",
; 136  : 					get_local_entity_string (group, STRING_TYPE_FULL_NAME),
; 137  : 					sleep_time,
; 138  : 					get_local_entity_float_value (group, FLOAT_TYPE_REARMING_TIME),
; 139  : 					get_local_entity_float_value (group, FLOAT_TYPE_FUEL_SUPPLY_LEVEL));
; 140  : 
; 141  : 	#endif
; 142  : 
; 143  : 	return sleep_time;

  00137	d9 45 fc	 fld	 DWORD PTR _sleep_time$[ebp]

; 144  : }

  0013a	5f		 pop	 edi
  0013b	5e		 pop	 esi
  0013c	5b		 pop	 ebx
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c2 04 00	 ret	 4
?get_local_entity_refueling_sleep_time@@YGMPAUENTITY@@@Z ENDP ; get_local_entity_refueling_sleep_time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\system\en_types\en_suply.c
;	COMDAT ?get_local_entity_rearming_sleep_time@@YGMPAUENTITY@@@Z
_TEXT	SEGMENT
tv170 = -84						; size = 8
tv130 = -76						; size = 4
tv78 = -76						; size = 4
tv90 = -72						; size = 4
tv70 = -72						; size = 4
_sleep_time$ = -4					; size = 4
_group$ = 8						; size = 4
?get_local_entity_rearming_sleep_time@@YGMPAUENTITY@@@Z PROC ; get_local_entity_rearming_sleep_time, COMDAT

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 97   : 
; 98   : 	float
; 99   : 		sleep_time;
; 100  : 
; 101  : 	sleep_time = get_local_entity_float_value (group, FLOAT_TYPE_REARMING_TIME);

  00009	83 7d 08 00	 cmp	 DWORD PTR _group$[ebp], 0
  0000d	74 0a		 je	 SHORT $LN3@get_local_
  0000f	8b 45 08	 mov	 eax, DWORD PTR _group$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	89 4d b8	 mov	 DWORD PTR tv70[ebp], ecx
  00017	eb 21		 jmp	 SHORT $LN4@get_local_
$LN3@get_local_:
  00019	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_local_entity_rearming_sleep_time@@YGMPAUENTITY@@@Z@4JA
  0001f	83 c2 05	 add	 edx, 5
  00022	52		 push	 edx
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00033	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@get_local_:
  0003a	b9 01 00 00 00	 mov	 ecx, 1
  0003f	85 c9		 test	 ecx, ecx
  00041	74 09		 je	 SHORT $LN5@get_local_
  00043	c7 45 b4 6d 00
	00 00		 mov	 DWORD PTR tv78[ebp], 109 ; 0000006dH
  0004a	eb 21		 jmp	 SHORT $LN6@get_local_
$LN5@get_local_:
  0004c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_local_entity_rearming_sleep_time@@YGMPAUENTITY@@@Z@4JA
  00052	83 c2 05	 add	 edx, 5
  00055	52		 push	 edx
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00066	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN6@get_local_:
  0006d	6a 6d		 push	 109			; 0000006dH
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _group$[ebp]
  00072	51		 push	 ecx
  00073	69 55 b8 bc 02
	00 00		 imul	 edx, DWORD PTR tv70[ebp], 700
  0007a	8b 45 b4	 mov	 eax, DWORD PTR tv78[ebp]
  0007d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00084	ff d1		 call	 ecx
  00086	d9 5d fc	 fstp	 DWORD PTR _sleep_time$[ebp]

; 102  : 
; 103  : 	sleep_time *= -(((MAX_REARMING_TIME_SCALING_FACTOR - 1.0) / 100.0) * get_local_entity_float_value (group, FLOAT_TYPE_AMMO_SUPPLY_LEVEL)) + MAX_REARMING_TIME_SCALING_FACTOR;

  00089	83 7d 08 00	 cmp	 DWORD PTR _group$[ebp], 0
  0008d	74 0a		 je	 SHORT $LN7@get_local_
  0008f	8b 45 08	 mov	 eax, DWORD PTR _group$[ebp]
  00092	8b 08		 mov	 ecx, DWORD PTR [eax]
  00094	89 4d b8	 mov	 DWORD PTR tv90[ebp], ecx
  00097	eb 21		 jmp	 SHORT $LN8@get_local_
$LN7@get_local_:
  00099	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_local_entity_rearming_sleep_time@@YGMPAUENTITY@@@Z@4JA
  0009f	83 c2 07	 add	 edx, 7
  000a2	52		 push	 edx
  000a3	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b3	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN8@get_local_:
  000ba	b9 01 00 00 00	 mov	 ecx, 1
  000bf	85 c9		 test	 ecx, ecx
  000c1	74 09		 je	 SHORT $LN9@get_local_
  000c3	c7 45 b4 08 00
	00 00		 mov	 DWORD PTR tv130[ebp], 8
  000ca	eb 21		 jmp	 SHORT $LN10@get_local_
$LN9@get_local_:
  000cc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_local_entity_rearming_sleep_time@@YGMPAUENTITY@@@Z@4JA
  000d2	83 c2 07	 add	 edx, 7
  000d5	52		 push	 edx
  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LJAIMOBL@c?3?2users?2nhv90?2projects?2eech?2ap@
  000db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000e6	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN10@get_local_:
  000ed	6a 08		 push	 8
  000ef	8b 4d 08	 mov	 ecx, DWORD PTR _group$[ebp]
  000f2	51		 push	 ecx
  000f3	69 55 b8 bc 02
	00 00		 imul	 edx, DWORD PTR tv90[ebp], 700
  000fa	8b 45 b4	 mov	 eax, DWORD PTR tv130[ebp]
  000fd	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00104	ff d1		 call	 ecx
  00106	dd 5d ac	 fstp	 QWORD PTR tv170[ebp]
  00109	f2 0f 10 45 ac	 movsd	 xmm0, QWORD PTR tv170[ebp]
  0010e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fa47ae147ae147b
  00116	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  0011d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4014000000000000
  00125	f3 0f 5a 4d fc	 cvtss2sd xmm1, DWORD PTR _sleep_time$[ebp]
  0012a	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  0012e	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00132	f3 0f 11 45 fc	 movss	 DWORD PTR _sleep_time$[ebp], xmm0

; 104  : 
; 105  : 	#if DEBUG_MODULE || DEBUG_SUPPLY
; 106  : 
; 107  : 	debug_log ("EN_SUPLY: SUPPLY_INFO: group %s rearming sleep time = %f (normal_time = %f, supply level = %f)",
; 108  : 					get_local_entity_string (group, STRING_TYPE_FULL_NAME),
; 109  : 					sleep_time,
; 110  : 					get_local_entity_float_value (group, FLOAT_TYPE_REARMING_TIME),
; 111  : 					get_local_entity_float_value (group, FLOAT_TYPE_AMMO_SUPPLY_LEVEL));
; 112  : 
; 113  : 	#endif
; 114  : 
; 115  : 	return sleep_time;

  00137	d9 45 fc	 fld	 DWORD PTR _sleep_time$[ebp]

; 116  : }

  0013a	5f		 pop	 edi
  0013b	5e		 pop	 esi
  0013c	5b		 pop	 ebx
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c2 04 00	 ret	 4
?get_local_entity_rearming_sleep_time@@YGMPAUENTITY@@@Z ENDP ; get_local_entity_rearming_sleep_time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
