; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\maths\reciptab.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?one_over_table@@3PAMA				; one_over_table
PUBLIC	?two_over_table@@3PAMA				; two_over_table
PUBLIC	?four_over_table@@3PAMA				; four_over_table
PUBLIC	?eight_over_table@@3PAMA			; eight_over_table
PUBLIC	?sixteen_over_table@@3PAMA			; sixteen_over_table
_BSS	SEGMENT
?one_over_table@@3PAMA DD 01H DUP (?)			; one_over_table
?two_over_table@@3PAMA DD 01H DUP (?)			; two_over_table
?four_over_table@@3PAMA DD 01H DUP (?)			; four_over_table
?eight_over_table@@3PAMA DD 01H DUP (?)			; eight_over_table
?sixteen_over_table@@3PAMA DD 01H DUP (?)		; sixteen_over_table
_BSS	ENDS
PUBLIC	?initialise_reciprocal_tables@@YGXXZ		; initialise_reciprocal_tables
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4010000000000000
PUBLIC	__real@4020000000000000
PUBLIC	__real@4030000000000000
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	__fltused:DWORD
;	COMDAT __real@4030000000000000
CONST	SEGMENT
__real@4030000000000000 DQ 04030000000000000r	; 16
CONST	ENDS
;	COMDAT __real@4020000000000000
CONST	SEGMENT
__real@4020000000000000 DQ 04020000000000000r	; 8
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\reciptab.c
;	COMDAT ?initialise_reciprocal_tables@@YGXXZ
_TEXT	SEGMENT
_loop$ = -4						; size = 4
?initialise_reciprocal_tables@@YGXXZ PROC		; initialise_reciprocal_tables, COMDAT

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 86   : 
; 87   : 	int
; 88   : 		loop;
; 89   : 
; 90   : 	one_over_table = ( float * ) safe_malloc ( sizeof ( float ) * ONE_OVER_MAX );

  00009	68 00 00 01 00	 push	 65536			; 00010000H
  0000e	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00013	a3 00 00 00 00	 mov	 DWORD PTR ?one_over_table@@3PAMA, eax ; one_over_table

; 91   : 	two_over_table = ( float * ) safe_malloc ( sizeof ( float ) * TWO_OVER_MAX );

  00018	68 00 10 00 00	 push	 4096			; 00001000H
  0001d	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00022	a3 00 00 00 00	 mov	 DWORD PTR ?two_over_table@@3PAMA, eax ; two_over_table

; 92   : 	four_over_table = ( float * ) safe_malloc ( sizeof ( float ) * FOUR_OVER_MAX );

  00027	68 00 10 00 00	 push	 4096			; 00001000H
  0002c	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00031	a3 00 00 00 00	 mov	 DWORD PTR ?four_over_table@@3PAMA, eax ; four_over_table

; 93   : 	eight_over_table = ( float * ) safe_malloc ( sizeof ( float ) * EIGHT_OVER_MAX );

  00036	68 00 10 00 00	 push	 4096			; 00001000H
  0003b	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00040	a3 00 00 00 00	 mov	 DWORD PTR ?eight_over_table@@3PAMA, eax ; eight_over_table

; 94   : 	sixteen_over_table = ( float * ) safe_malloc ( sizeof ( float ) * SIXTEEN_OVER_MAX );

  00045	68 00 10 00 00	 push	 4096			; 00001000H
  0004a	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0004f	a3 00 00 00 00	 mov	 DWORD PTR ?sixteen_over_table@@3PAMA, eax ; sixteen_over_table

; 95   : 
; 96   : 	for ( loop = 1; loop < ONE_OVER_MAX; loop++ )

  00054	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 1
  0005b	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  0005d	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00060	83 c0 01	 add	 eax, 1
  00063	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@initialise:
  00066	81 7d fc 00 40
	00 00		 cmp	 DWORD PTR _loop$[ebp], 16384 ; 00004000H
  0006d	7d 29		 jge	 SHORT $LN3@initialise

; 97   : 	{
; 98   : 
; 99   : 		one_over_table[loop] = ( 1.0 / ( ( float ) loop ) );

  0006f	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _loop$[ebp]
  00074	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00078	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00080	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00084	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00088	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  0008b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?one_over_table@@3PAMA ; one_over_table
  00091	f3 0f 11 04 81	 movss	 DWORD PTR [ecx+eax*4], xmm0

; 100  : 	}

  00096	eb c5		 jmp	 SHORT $LN2@initialise
$LN3@initialise:

; 101  : 
; 102  : 	for ( loop = 1; loop < TWO_OVER_MAX; loop++ )

  00098	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 1
  0009f	eb 09		 jmp	 SHORT $LN7@initialise
$LN5@initialise:
  000a1	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  000a4	83 c0 01	 add	 eax, 1
  000a7	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN7@initialise:
  000aa	81 7d fc 00 04
	00 00		 cmp	 DWORD PTR _loop$[ebp], 1024 ; 00000400H
  000b1	7d 29		 jge	 SHORT $LN6@initialise

; 103  : 	{
; 104  : 
; 105  : 		two_over_table[loop] = ( 2.0 / ( ( float ) loop ) );

  000b3	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _loop$[ebp]
  000b8	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000bc	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4000000000000000
  000c4	f2 0f 5e c8	 divsd	 xmm1, xmm0
  000c8	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  000cc	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  000cf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?two_over_table@@3PAMA ; two_over_table
  000d5	f3 0f 11 04 81	 movss	 DWORD PTR [ecx+eax*4], xmm0

; 106  : 	}

  000da	eb c5		 jmp	 SHORT $LN5@initialise
$LN6@initialise:

; 107  : 
; 108  : 	for ( loop = 1; loop < FOUR_OVER_MAX; loop++ )

  000dc	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 1
  000e3	eb 09		 jmp	 SHORT $LN10@initialise
$LN8@initialise:
  000e5	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  000e8	83 c0 01	 add	 eax, 1
  000eb	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN10@initialise:
  000ee	81 7d fc 00 04
	00 00		 cmp	 DWORD PTR _loop$[ebp], 1024 ; 00000400H
  000f5	7d 29		 jge	 SHORT $LN9@initialise

; 109  : 	{
; 110  : 
; 111  : 		four_over_table[loop] = ( 4.0 / ( ( float ) loop ) );

  000f7	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _loop$[ebp]
  000fc	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00100	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4010000000000000
  00108	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0010c	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00110	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00113	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?four_over_table@@3PAMA ; four_over_table
  00119	f3 0f 11 04 81	 movss	 DWORD PTR [ecx+eax*4], xmm0

; 112  : 	}

  0011e	eb c5		 jmp	 SHORT $LN8@initialise
$LN9@initialise:

; 113  : 
; 114  : 	for ( loop = 1; loop < EIGHT_OVER_MAX; loop++ )

  00120	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 1
  00127	eb 09		 jmp	 SHORT $LN13@initialise
$LN11@initialise:
  00129	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  0012c	83 c0 01	 add	 eax, 1
  0012f	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN13@initialise:
  00132	81 7d fc 00 04
	00 00		 cmp	 DWORD PTR _loop$[ebp], 1024 ; 00000400H
  00139	7d 29		 jge	 SHORT $LN12@initialise

; 115  : 	{
; 116  : 
; 117  : 		eight_over_table[loop] = ( 8.0 / ( ( float ) loop ) );

  0013b	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _loop$[ebp]
  00140	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00144	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4020000000000000
  0014c	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00150	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00154	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00157	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?eight_over_table@@3PAMA ; eight_over_table
  0015d	f3 0f 11 04 81	 movss	 DWORD PTR [ecx+eax*4], xmm0

; 118  : 	}

  00162	eb c5		 jmp	 SHORT $LN11@initialise
$LN12@initialise:

; 119  : 
; 120  : 	for ( loop = 1; loop < SIXTEEN_OVER_MAX; loop++ )

  00164	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 1
  0016b	eb 09		 jmp	 SHORT $LN16@initialise
$LN14@initialise:
  0016d	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00170	83 c0 01	 add	 eax, 1
  00173	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN16@initialise:
  00176	81 7d fc 00 04
	00 00		 cmp	 DWORD PTR _loop$[ebp], 1024 ; 00000400H
  0017d	7d 29		 jge	 SHORT $LN15@initialise

; 121  : 	{
; 122  : 
; 123  : 		sixteen_over_table[loop] = ( 16.0 / ( ( float ) loop ) );

  0017f	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _loop$[ebp]
  00184	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00188	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4030000000000000
  00190	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00194	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00198	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  0019b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?sixteen_over_table@@3PAMA ; sixteen_over_table
  001a1	f3 0f 11 04 81	 movss	 DWORD PTR [ecx+eax*4], xmm0

; 124  : 	}

  001a6	eb c5		 jmp	 SHORT $LN14@initialise
$LN15@initialise:

; 125  : }

  001a8	5f		 pop	 edi
  001a9	5e		 pop	 esi
  001aa	5b		 pop	 ebx
  001ab	8b e5		 mov	 esp, ebp
  001ad	5d		 pop	 ebp
  001ae	c3		 ret	 0
?initialise_reciprocal_tables@@YGXXZ ENDP		; initialise_reciprocal_tables
_TEXT	ENDS
END
