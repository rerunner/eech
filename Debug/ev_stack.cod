; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\system\ev_stack.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?event_stack_head@@3PAUEVENT_STACK@@A		; event_stack_head
PUBLIC	?event_stack_tail@@3PAUEVENT_STACK@@A		; event_stack_tail
_BSS	SEGMENT
?event_stack_head@@3PAUEVENT_STACK@@A DD 01H DUP (?)	; event_stack_head
?event_stack_tail@@3PAUEVENT_STACK@@A DD 01H DUP (?)	; event_stack_tail
_BSS	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	?initialise_event_stack@@YGXXZ			; initialise_event_stack
PUBLIC	?deinitialise_event_stack@@YGXXZ		; deinitialise_event_stack
PUBLIC	?push_event@@YGXP6GXXZPBD@Z			; push_event
PUBLIC	?push_event_overlay@@YGXP6GXXZPBD@Z		; push_event_overlay
PUBLIC	?push_event_overlay_with_stack_item@@YGXP6GXXZPBDPAUEVENT_STACK@@@Z ; push_event_overlay_with_stack_item
PUBLIC	?push_event_stop@@YGXXZ				; push_event_stop
PUBLIC	?pop_event@@YGXP6GXXZ@Z				; pop_event
PUBLIC	?pop_event_delete@@YGXP6GXXZH@Z			; pop_event_delete
PUBLIC	?pop_to_event_stop@@YGXXZ			; pop_to_event_stop
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??pop_event_delete@@YGXP6GXXZH@Z@4JA ; `pop_event_delete'::`1'::__LINE__Var
PUBLIC	??_C@_0DH@KFBIKDPD@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_05GFHEIIDD@event@				; `string'
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	_strlen:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?clear_events@@YGXXZ:PROC			; clear_events
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_free@@YGXPAX@Z:PROC			; safe_free
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?event_id@@3HA DD 01H DUP (?)				; event_id
_BSS	ENDS
;	COMDAT ??_C@_05GFHEIIDD@event@
CONST	SEGMENT
??_C@_05GFHEIIDD@event@ DB 'event', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@KFBIKDPD@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DH@KFBIKDPD@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\system\ev_stack.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??pop_event_delete@@YGXP6GXXZH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??pop_event_delete@@YGXP6GXXZH@Z@4JA DD 0203H ; `pop_event_delete'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\ev_stack.c
;	COMDAT ?pop_to_event_stop@@YGXXZ
_TEXT	SEGMENT
_popped_event$ = -4					; size = 4
?pop_to_event_stop@@YGXXZ PROC				; pop_to_event_stop, COMDAT

; 641  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 642  : 
; 643  : 	event_stack
; 644  : 		*popped_event;
; 645  : 
; 646  : 	// pop down to 'stop' and then one more
; 647  : 
; 648  : 	if (event_stack_head)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A, 0 ; event_stack_head
  00010	74 51		 je	 SHORT $LN1@pop_to_eve
$LN2@pop_to_eve:

; 649  : 	{
; 650  : 
; 651  : 		#if DEBUG_MODULE
; 652  : 
; 653  : 		debug_log ("EV_STACK: -------------------------------------------------------------------------------");
; 654  : 
; 655  : 		debug_log ("EV_STACK: popping to event stop ");
; 656  : 
; 657  : 		#endif
; 658  : 
; 659  :   		while ((event_stack_head) && (event_stack_head->function))

  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A, 0 ; event_stack_head
  00019	74 41		 je	 SHORT $LN3@pop_to_eve
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A ; event_stack_head
  00020	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00024	74 36		 je	 SHORT $LN3@pop_to_eve

; 660  : 		{
; 661  : 
; 662  : 			popped_event = event_stack_head;

  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A ; event_stack_head
  0002b	89 45 fc	 mov	 DWORD PTR _popped_event$[ebp], eax

; 663  : 
; 664  : 			event_stack_head = event_stack_head->prev;

  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A ; event_stack_head
  00033	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00036	89 0d 00 00 00
	00		 mov	 DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A, ecx ; event_stack_head

; 665  : 
; 666  : 			#if DEBUG_MODULE
; 667  : 
; 668  : 			if (popped_event->name)
; 669  : 			{
; 670  : 
; 671  : 				debug_log ("EV_STACK:     popping %s %d, function %d, overlay %d, to event stop ", popped_event->name, popped_event, popped_event->function, popped_event->overlay);
; 672  : 			}
; 673  : 			else
; 674  : 			{
; 675  : 
; 676  : 				debug_log ("EV_STACK:     popping %d, function %d, overlay %d, to event stop ", popped_event, popped_event->function, popped_event->overlay);
; 677  : 			}
; 678  : 
; 679  : 			#endif
; 680  : 
; 681  : 			if (popped_event->name)

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _popped_event$[ebp]
  0003f	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00043	74 0c		 je	 SHORT $LN5@pop_to_eve

; 682  : 			{
; 683  : 
; 684  : 				safe_free (popped_event->name);

  00045	8b 45 fc	 mov	 eax, DWORD PTR _popped_event$[ebp]
  00048	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free
$LN5@pop_to_eve:

; 685  : 			}
; 686  : 
; 687  : 			safe_free (popped_event);

  00051	8b 45 fc	 mov	 eax, DWORD PTR _popped_event$[ebp]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 688  : 		}

  0005a	eb b6		 jmp	 SHORT $LN2@pop_to_eve
$LN3@pop_to_eve:

; 689  : 
; 690  : 		pop_event (NULL);

  0005c	6a 00		 push	 0
  0005e	e8 00 00 00 00	 call	 ?pop_event@@YGXP6GXXZ@Z	; pop_event
$LN1@pop_to_eve:

; 691  : 	}
; 692  : 
; 693  : 	#if DEBUG_MODULE
; 694  : 
; 695  : 	debug_log ("EV_STACK: -------------------------------------------------------------------------------");
; 696  : 
; 697  : 	display_event_stack ();
; 698  : 
; 699  : 	#endif
; 700  : }

  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
?pop_to_event_stop@@YGXXZ ENDP				; pop_to_event_stop
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\ev_stack.c
;	COMDAT ?pop_event_delete@@YGXP6GXXZH@Z
_TEXT	SEGMENT
_popped_event$ = -8					; size = 4
_event$ = -4						; size = 4
_function$ = 8						; size = 4
_delete_stack_item$ = 12				; size = 4
?pop_event_delete@@YGXP6GXXZH@Z PROC			; pop_event_delete, COMDAT

; 515  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 516  : 
; 517  : 	event_stack
; 518  : 		*event,
; 519  : 		*popped_event;
; 520  : 
; 521  : 	// store event to pop and unlink it and destroy it.
; 522  : 
; 523  : 	#if DEBUG_MODULE
; 524  : 
; 525  : 	debug_log ("EV_STACK: -------------------------------------------------------------------------------");
; 526  : 	debug_log ("EV_STACK: pop event");
; 527  : 
; 528  : 	#endif
; 529  : 
; 530  : 	if (event_stack_head)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A, 0 ; event_stack_head
  00010	0f 84 d9 00 00
	00		 je	 $LN1@pop_event_

; 531  : 	{
; 532  : 
; 533  : 		popped_event = event_stack_head;

  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A ; event_stack_head
  0001b	89 45 f8	 mov	 DWORD PTR _popped_event$[ebp], eax

; 534  : 
; 535  : 		//
; 536  : 		// Check if function is the correct one...
; 537  : 		//
; 538  : 
; 539  : 		if (function)

  0001e	83 7d 08 00	 cmp	 DWORD PTR _function$[ebp], 0
  00022	74 10		 je	 SHORT $LN7@pop_event_

; 540  : 		{
; 541  : 
; 542  : 			if (function != popped_event->function)

  00024	8b 45 f8	 mov	 eax, DWORD PTR _popped_event$[ebp]
  00027	8b 4d 08	 mov	 ecx, DWORD PTR _function$[ebp]
  0002a	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0002d	74 05		 je	 SHORT $LN7@pop_event_

; 543  : 			{
; 544  : 
; 545  : 				#if DEBUG_MODULE
; 546  : 
; 547  : 				if (popped_event->name)
; 548  : 				{
; 549  : 
; 550  : 					debug_log ("EV_STACK: Not popping. Unmaintained event table %s id %d function %d is top of stack", popped_event->name, popped_event->event_id, popped_event->function);
; 551  : 				}
; 552  : 				else
; 553  : 				{
; 554  : 
; 555  : 					debug_log ("EV_STACK: Not popping. Unmaintained event table id %d function %d is top of stack", popped_event->event_id, popped_event->function);
; 556  : 				}
; 557  : 
; 558  : 				debug_log ("EV_STACK: -------------------------------------------------------------------------------");
; 559  : 
; 560  : 				#endif
; 561  : 
; 562  : 				return;

  0002f	e9 bb 00 00 00	 jmp	 $LN1@pop_event_
$LN7@pop_event_:

; 563  : 			}
; 564  : 		}
; 565  : 
; 566  : 		//
; 567  : 		//
; 568  : 		//
; 569  : 
; 570  : 		event_stack_head = event_stack_head->prev;

  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A ; event_stack_head
  00039	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0003c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A, ecx ; event_stack_head

; 571  : 
; 572  : 		if (event_stack_head)

  00042	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A, 0 ; event_stack_head
  00049	74 76		 je	 SHORT $LN9@pop_event_

; 573  : 		{
; 574  : 
; 575  : 			event_stack_head->next = NULL;

  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A ; event_stack_head
  00050	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 576  : 
; 577  :   			// overlay with this event table
; 578  : 
; 579  : 			clear_events ();

  00057	e8 00 00 00 00	 call	 ?clear_events@@YGXXZ	; clear_events

; 580  : 
; 581  : 			// find the next non-overlay event
; 582  : 
; 583  : 			event = event_stack_head;

  0005c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A ; event_stack_head
  00061	89 45 fc	 mov	 DWORD PTR _event$[ebp], eax
$LN2@pop_event_:

; 584  : 
; 585  : 			while ((event) && (event->overlay))

  00064	83 7d fc 00	 cmp	 DWORD PTR _event$[ebp], 0
  00068	74 15		 je	 SHORT $LN3@pop_event_
  0006a	8b 45 fc	 mov	 eax, DWORD PTR _event$[ebp]
  0006d	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00070	85 c9		 test	 ecx, ecx
  00072	74 0b		 je	 SHORT $LN3@pop_event_

; 586  : 			{
; 587  : 
; 588  : 				event = event->prev;

  00074	8b 45 fc	 mov	 eax, DWORD PTR _event$[ebp]
  00077	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0007a	89 4d fc	 mov	 DWORD PTR _event$[ebp], ecx

; 589  : 			}

  0007d	eb e5		 jmp	 SHORT $LN2@pop_event_
$LN3@pop_event_:

; 590  : 
; 591  : 			ASSERT (event);

  0007f	83 7d fc 00	 cmp	 DWORD PTR _event$[ebp], 0
  00083	75 18		 jne	 SHORT $LN4@pop_event_
  00085	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??pop_event_delete@@YGXP6GXXZH@Z@4JA
  0008a	83 c0 4c	 add	 eax, 76			; 0000004cH
  0008d	50		 push	 eax
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@KFBIKDPD@c?3?2users?2nhv90?2projects?2eech?2mo@
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_05GFHEIIDD@event@
  00098	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@pop_event_:

; 592  : 
; 593  : 			// execute all events from non-overlay up (so as to overlay properly)
; 594  : 
; 595  : 			while (event)

  0009d	83 7d fc 00	 cmp	 DWORD PTR _event$[ebp], 0
  000a1	74 1c		 je	 SHORT $LN5@pop_event_

; 596  : 			{
; 597  : 
; 598  : 				if (event->function)

  000a3	8b 45 fc	 mov	 eax, DWORD PTR _event$[ebp]
  000a6	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  000aa	74 08		 je	 SHORT $LN12@pop_event_

; 599  : 				{
; 600  : 
; 601  : 					event->function ();

  000ac	8b 45 fc	 mov	 eax, DWORD PTR _event$[ebp]
  000af	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b2	ff d1		 call	 ecx
$LN12@pop_event_:

; 602  : 				}
; 603  : 
; 604  : 				event = event->next;

  000b4	8b 45 fc	 mov	 eax, DWORD PTR _event$[ebp]
  000b7	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000ba	89 4d fc	 mov	 DWORD PTR _event$[ebp], ecx

; 605  : 			}

  000bd	eb de		 jmp	 SHORT $LN4@pop_event_
$LN5@pop_event_:

; 606  : 		}
; 607  : 		else

  000bf	eb 0a		 jmp	 SHORT $LN10@pop_event_
$LN9@pop_event_:

; 608  : 		{
; 609  : 
; 610  : 			// empty stack
; 611  : 
; 612  : 			event_stack_tail = NULL;

  000c1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?event_stack_tail@@3PAUEVENT_STACK@@A, 0 ; event_stack_tail
$LN10@pop_event_:

; 613  : 		}
; 614  : 
; 615  : 		#if DEBUG_MODULE
; 616  : 
; 617  : 		debug_log ("EV_STACK: popping event table %s %d, function %d, overlay %d", popped_event->name, popped_event, popped_event->function, popped_event->overlay);
; 618  : 
; 619  : 		debug_log ("EV_STACK: -------------------------------------------------------------------------------");
; 620  : 
; 621  : 		display_event_stack ();
; 622  : 
; 623  : 		#endif
; 624  : 
; 625  : 		if (popped_event->name)

  000cb	8b 45 f8	 mov	 eax, DWORD PTR _popped_event$[ebp]
  000ce	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  000d2	74 0c		 je	 SHORT $LN13@pop_event_

; 626  : 		{
; 627  : 
; 628  : 			safe_free (popped_event->name);

  000d4	8b 45 f8	 mov	 eax, DWORD PTR _popped_event$[ebp]
  000d7	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000da	51		 push	 ecx
  000db	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free
$LN13@pop_event_:

; 629  : 		}
; 630  : 
; 631  : 		if (delete_stack_item)

  000e0	83 7d 0c 00	 cmp	 DWORD PTR _delete_stack_item$[ebp], 0
  000e4	74 09		 je	 SHORT $LN1@pop_event_

; 632  : 			safe_free (popped_event);

  000e6	8b 45 f8	 mov	 eax, DWORD PTR _popped_event$[ebp]
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free
$LN1@pop_event_:

; 633  : 	}
; 634  : }

  000ef	5f		 pop	 edi
  000f0	5e		 pop	 esi
  000f1	5b		 pop	 ebx
  000f2	8b e5		 mov	 esp, ebp
  000f4	5d		 pop	 ebp
  000f5	c2 08 00	 ret	 8
?pop_event_delete@@YGXP6GXXZH@Z ENDP			; pop_event_delete
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\ev_stack.c
;	COMDAT ?pop_event@@YGXP6GXXZ@Z
_TEXT	SEGMENT
_function$ = 8						; size = 4
?pop_event@@YGXP6GXXZ@Z PROC				; pop_event, COMDAT

; 510  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 511  : 	pop_event_delete(function, TRUE);

  00009	6a 01		 push	 1
  0000b	8b 45 08	 mov	 eax, DWORD PTR _function$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?pop_event_delete@@YGXP6GXXZH@Z ; pop_event_delete

; 512  : }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?pop_event@@YGXP6GXXZ@Z ENDP				; pop_event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\ev_stack.c
;	COMDAT ?push_event_stop@@YGXXZ
_TEXT	SEGMENT
_new_stack_item$ = -4					; size = 4
?push_event_stop@@YGXXZ PROC				; push_event_stop, COMDAT

; 443  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 444  : 
; 445  : 	event_stack
; 446  : 		*new_stack_item;
; 447  : 
; 448  : 	// malloc new event
; 449  : 
; 450  : 	new_stack_item = (event_stack *) safe_malloc (sizeof (event_stack));

  00009	6a 18		 push	 24			; 00000018H
  0000b	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00010	89 45 fc	 mov	 DWORD PTR _new_stack_item$[ebp], eax

; 451  : 
; 452  : 	#if DEBUG_MODULE
; 453  : 
; 454  : 	debug_log ("EV_STACK: -------------------------------------------------------------------------------");
; 455  : 
; 456  : 	debug_log ("EV_STACK: creating new event stop %d", new_stack_item);
; 457  : 
; 458  : 	debug_log ("EV_STACK: -------------------------------------------------------------------------------");
; 459  : 
; 460  : 	#endif
; 461  : 
; 462  : 	new_stack_item->function = NULL;

  00013	8b 45 fc	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  00016	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 463  : 
; 464  : 	new_stack_item->event_id = event_id ++;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  00020	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ?event_id@@3HA
  00027	66 89 48 02	 mov	 WORD PTR [eax+2], cx
  0002b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?event_id@@3HA
  00031	83 c2 01	 add	 edx, 1
  00034	89 15 00 00 00
	00		 mov	 DWORD PTR ?event_id@@3HA, edx

; 465  : 
; 466  : 	new_stack_item->name = NULL;

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  0003d	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 467  : 
; 468  : 	// overlay with this event table
; 469  : 
; 470  : 	clear_events ();

  00044	e8 00 00 00 00	 call	 ?clear_events@@YGXXZ	; clear_events

; 471  : 
; 472  : 	// first event on stack
; 473  : 
; 474  : 	if (!event_stack_head)

  00049	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A, 0 ; event_stack_head
  00050	75 26		 jne	 SHORT $LN2@push_event

; 475  : 	{
; 476  : 
; 477  : 		event_stack_head = new_stack_item;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  00055	a3 00 00 00 00	 mov	 DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A, eax ; event_stack_head

; 478  : 
; 479  : 		event_stack_tail = new_stack_item;

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  0005d	a3 00 00 00 00	 mov	 DWORD PTR ?event_stack_tail@@3PAUEVENT_STACK@@A, eax ; event_stack_tail

; 480  : 
; 481  : 		new_stack_item->prev = NULL;

  00062	8b 45 fc	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  00065	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 482  : 
; 483  : 		new_stack_item->next = NULL;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  0006f	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 484  : 
; 485  : 		return;

  00076	eb 29		 jmp	 SHORT $LN1@push_event
$LN2@push_event:

; 486  : 	}
; 487  : 
; 488  : 	// add event to head of stack
; 489  : 
; 490  : 	new_stack_item->prev = event_stack_head;

  00078	8b 45 fc	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  0007b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A ; event_stack_head
  00081	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 491  : 
; 492  : 	event_stack_head->next = new_stack_item;

  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A ; event_stack_head
  00089	8b 4d fc	 mov	 ecx, DWORD PTR _new_stack_item$[ebp]
  0008c	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 493  : 
; 494  : 	event_stack_head = new_stack_item;

  0008f	8b 45 fc	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  00092	a3 00 00 00 00	 mov	 DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A, eax ; event_stack_head

; 495  : 
; 496  : 	new_stack_item->next = NULL;

  00097	8b 45 fc	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  0009a	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
$LN1@push_event:

; 497  : 
; 498  : 	#if DEBUG_MODULE
; 499  : 
; 500  : 	display_event_stack ();
; 501  : 
; 502  : 	#endif
; 503  : }

  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
?push_event_stop@@YGXXZ ENDP				; push_event_stop
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\ev_stack.c
;	COMDAT ?push_event_overlay_with_stack_item@@YGXP6GXXZPBDPAUEVENT_STACK@@@Z
_TEXT	SEGMENT
_stack_search$ = -4					; size = 4
_this_function$ = 8					; size = 4
_name$ = 12						; size = 4
_new_stack_item$ = 16					; size = 4
?push_event_overlay_with_stack_item@@YGXP6GXXZPBDPAUEVENT_STACK@@@Z PROC ; push_event_overlay_with_stack_item, COMDAT

; 308  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 309  : 
; 310  : 	event_stack
; 311  : 		*stack_search;
; 312  : 
; 313  : 	// check if already on stack
; 314  : 
; 315  : 	stack_search = event_stack_head;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A ; event_stack_head
  0000e	89 45 fc	 mov	 DWORD PTR _stack_search$[ebp], eax
$LN2@push_event:

; 316  : 
; 317  : 	#if DEBUG_MODULE
; 318  : 
; 319  : 	debug_log ("EV_STACK: -------------------------------------------------------------------------------");
; 320  : 	debug_log ("EV_STACK: push event overlay");
; 321  : 
; 322  : 	if (stack_search->name)
; 323  : 	{
; 324  : 
; 325  : 		debug_log ("EV_STACK: creating new event table for %s function %d", name, this_function);
; 326  : 	}
; 327  : 	else
; 328  : 	{
; 329  : 
; 330  : 		debug_log ("EV_STACK: creating new event table for function %d", this_function);
; 331  : 	}
; 332  : 
; 333  : 	#endif
; 334  : 
; 335  : 	while (stack_search)

  00011	83 7d fc 00	 cmp	 DWORD PTR _stack_search$[ebp], 0
  00015	74 40		 je	 SHORT $LN3@push_event

; 336  : 	{
; 337  : 
; 338  : 		// event found on stack
; 339  : 
; 340  : 		if (stack_search->function == this_function)

  00017	8b 45 fc	 mov	 eax, DWORD PTR _stack_search$[ebp]
  0001a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001d	3b 4d 08	 cmp	 ecx, DWORD PTR _this_function$[ebp]
  00020	75 2a		 jne	 SHORT $LN6@push_event

; 341  : 		{
; 342  : 
; 343  : 			#if DEBUG_MODULE
; 344  : 
; 345  : 			debug_log ("EV_STACK:     found event table for %s %d, id %d, function %d, overlay %d", stack_search->name, stack_search, stack_search->event_id, stack_search->function, stack_search->overlay);
; 346  : 
; 347  : 			#endif
; 348  : 
; 349  : 			// pop all down to this function
; 350  : 
; 351  : 			stack_search = event_stack_head;

  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A ; event_stack_head
  00027	89 45 fc	 mov	 DWORD PTR _stack_search$[ebp], eax
$LN4@push_event:

; 352  : 
; 353  : 			while (stack_search->function != this_function)

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _stack_search$[ebp]
  0002d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00030	3b 4d 08	 cmp	 ecx, DWORD PTR _this_function$[ebp]
  00033	74 12		 je	 SHORT $LN5@push_event

; 354  : 			{
; 355  : 
; 356  : 				#if DEBUG_MODULE
; 357  : 
; 358  : 				debug_log ("EV_STACK:       popping down to it");
; 359  : 
; 360  : 				#endif
; 361  : 
; 362  : 				pop_event (NULL);

  00035	6a 00		 push	 0
  00037	e8 00 00 00 00	 call	 ?pop_event@@YGXP6GXXZ@Z	; pop_event

; 363  : 
; 364  : 				stack_search = stack_search->prev;

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _stack_search$[ebp]
  0003f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00042	89 4d fc	 mov	 DWORD PTR _stack_search$[ebp], ecx

; 365  : 			}

  00045	eb e3		 jmp	 SHORT $LN4@push_event
$LN5@push_event:

; 366  : 
; 367  : 			#if DEBUG_MODULE
; 368  : 
; 369  : 			debug_log ("EV_STACK: -------------------------------------------------------------------------------");
; 370  : 
; 371  : 			#endif
; 372  : 
; 373  : 			return;

  00047	e9 da 00 00 00	 jmp	 $LN1@push_event
$LN6@push_event:

; 374  : 		}
; 375  : 
; 376  : 		stack_search = stack_search->prev;

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _stack_search$[ebp]
  0004f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00052	89 4d fc	 mov	 DWORD PTR _stack_search$[ebp], ecx

; 377  : 	}

  00055	eb ba		 jmp	 SHORT $LN2@push_event
$LN3@push_event:

; 378  : 
; 379  : 	#if DEBUG_MODULE
; 380  : 
; 381  : 	debug_log ("EV_STACK: -------------------------------------------------------------------------------");
; 382  : 
; 383  : 	#endif
; 384  : 
; 385  : 	new_stack_item->overlay = TRUE;

  00057	b8 01 00 00 00	 mov	 eax, 1
  0005c	8b 4d 10	 mov	 ecx, DWORD PTR _new_stack_item$[ebp]
  0005f	66 89 01	 mov	 WORD PTR [ecx], ax

; 386  : 
; 387  : 	new_stack_item->function = this_function;

  00062	8b 45 10	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  00065	8b 4d 08	 mov	 ecx, DWORD PTR _this_function$[ebp]
  00068	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 388  : 
; 389  : 	new_stack_item->event_id = event_id ++;

  0006b	8b 45 10	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  0006e	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ?event_id@@3HA
  00075	66 89 48 02	 mov	 WORD PTR [eax+2], cx
  00079	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?event_id@@3HA
  0007f	83 c2 01	 add	 edx, 1
  00082	89 15 00 00 00
	00		 mov	 DWORD PTR ?event_id@@3HA, edx

; 390  : 
; 391  : 	new_stack_item->name = NULL;

  00088	8b 45 10	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  0008b	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 392  : 
; 393  : 	if (name)

  00092	83 7d 0c 00	 cmp	 DWORD PTR _name$[ebp], 0
  00096	74 33		 je	 SHORT $LN7@push_event

; 394  : 	{
; 395  : 
; 396  : 		new_stack_item->name = (char *) safe_malloc (sizeof (char) * (strlen (name) + 1));

  00098	8b 45 0c	 mov	 eax, DWORD PTR _name$[ebp]
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 _strlen
  000a1	83 c4 04	 add	 esp, 4
  000a4	83 c0 01	 add	 eax, 1
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  000ad	8b 4d 10	 mov	 ecx, DWORD PTR _new_stack_item$[ebp]
  000b0	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 397  : 
; 398  : 		sprintf (new_stack_item->name, "%s", name);

  000b3	8b 45 0c	 mov	 eax, DWORD PTR _name$[ebp]
  000b6	50		 push	 eax
  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000bc	8b 4d 10	 mov	 ecx, DWORD PTR _new_stack_item$[ebp]
  000bf	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000c2	52		 push	 edx
  000c3	e8 00 00 00 00	 call	 _sprintf
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@push_event:

; 399  : 	}
; 400  : 
; 401  : 	// overlay with this event table
; 402  : 
; 403  : 	this_function ();

  000cb	ff 55 08	 call	 DWORD PTR _this_function$[ebp]

; 404  : 
; 405  : 	// first event on stack
; 406  : 
; 407  : 	if (!event_stack_head)

  000ce	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A, 0 ; event_stack_head
  000d5	75 26		 jne	 SHORT $LN8@push_event

; 408  : 	{
; 409  : 
; 410  : 		event_stack_head = new_stack_item;

  000d7	8b 45 10	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  000da	a3 00 00 00 00	 mov	 DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A, eax ; event_stack_head

; 411  : 
; 412  : 		event_stack_tail = new_stack_item;

  000df	8b 45 10	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  000e2	a3 00 00 00 00	 mov	 DWORD PTR ?event_stack_tail@@3PAUEVENT_STACK@@A, eax ; event_stack_tail

; 413  : 
; 414  : 		new_stack_item->prev = NULL;

  000e7	8b 45 10	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  000ea	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 415  : 
; 416  : 		new_stack_item->next = NULL;

  000f1	8b 45 10	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  000f4	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 417  : 
; 418  : 		return;

  000fb	eb 29		 jmp	 SHORT $LN1@push_event
$LN8@push_event:

; 419  : 	}
; 420  : 
; 421  : 	// add event to head of stack
; 422  : 
; 423  : 	new_stack_item->prev = event_stack_head;

  000fd	8b 45 10	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  00100	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A ; event_stack_head
  00106	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 424  : 
; 425  : 	event_stack_head->next = new_stack_item;

  00109	a1 00 00 00 00	 mov	 eax, DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A ; event_stack_head
  0010e	8b 4d 10	 mov	 ecx, DWORD PTR _new_stack_item$[ebp]
  00111	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 426  : 
; 427  : 	event_stack_head = new_stack_item;

  00114	8b 45 10	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  00117	a3 00 00 00 00	 mov	 DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A, eax ; event_stack_head

; 428  : 
; 429  : 	new_stack_item->next = NULL;

  0011c	8b 45 10	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  0011f	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
$LN1@push_event:

; 430  : 
; 431  : 	#if DEBUG_MODULE
; 432  : 
; 433  : 	display_event_stack ();
; 434  : 
; 435  : 	#endif
; 436  : }

  00126	5f		 pop	 edi
  00127	5e		 pop	 esi
  00128	5b		 pop	 ebx
  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	c2 0c 00	 ret	 12			; 0000000cH
?push_event_overlay_with_stack_item@@YGXP6GXXZPBDPAUEVENT_STACK@@@Z ENDP ; push_event_overlay_with_stack_item
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\ev_stack.c
;	COMDAT ?push_event_overlay@@YGXP6GXXZPBD@Z
_TEXT	SEGMENT
_stack_item$ = -4					; size = 4
_this_function$ = 8					; size = 4
_name$ = 12						; size = 4
?push_event_overlay@@YGXP6GXXZPBD@Z PROC		; push_event_overlay, COMDAT

; 299  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 300  : 	// malloc new event
; 301  : 
; 302  : 	event_stack* stack_item = (event_stack *) safe_malloc (sizeof (event_stack));

  00009	6a 18		 push	 24			; 00000018H
  0000b	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00010	89 45 fc	 mov	 DWORD PTR _stack_item$[ebp], eax

; 303  : 
; 304  : 	push_event_overlay_with_stack_item(this_function, name, stack_item);

  00013	8b 45 fc	 mov	 eax, DWORD PTR _stack_item$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _name$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 08	 mov	 edx, DWORD PTR _this_function$[ebp]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ?push_event_overlay_with_stack_item@@YGXP6GXXZPBDPAUEVENT_STACK@@@Z ; push_event_overlay_with_stack_item

; 305  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8
?push_event_overlay@@YGXP6GXXZPBD@Z ENDP		; push_event_overlay
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\ev_stack.c
;	COMDAT ?push_event@@YGXP6GXXZPBD@Z
_TEXT	SEGMENT
_new_stack_item$ = -8					; size = 4
_stack_search$ = -4					; size = 4
_this_function$ = 8					; size = 4
_name$ = 12						; size = 4
?push_event@@YGXP6GXXZPBD@Z PROC			; push_event, COMDAT

; 140  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 141  : 
; 142  : 	event_stack
; 143  : 		*stack_search,
; 144  : 		*new_stack_item;
; 145  : 
; 146  : 	// check if already on stack
; 147  : 
; 148  : 	#if DEBUG_MODULE
; 149  : 
; 150  : 	debug_log ("EV_STACK: -------------------------------------------------------------------------------");
; 151  : 	debug_log ("EV_STACK: push event");
; 152  : 
; 153  : 	if (name)
; 154  : 	{
; 155  : 
; 156  : 		debug_log ("EV_STACK: creating new event table for %s function %d", name, this_function);
; 157  : 	}
; 158  : 	else
; 159  : 	{
; 160  : 
; 161  : 		debug_log ("EV_STACK: creating new event table for function %d", this_function);
; 162  : 	}
; 163  : 
; 164  : 	#endif
; 165  : 
; 166  : 	stack_search = event_stack_head;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A ; event_stack_head
  0000e	89 45 fc	 mov	 DWORD PTR _stack_search$[ebp], eax
$LN2@push_event:

; 167  : 
; 168  : 	while (stack_search)

  00011	83 7d fc 00	 cmp	 DWORD PTR _stack_search$[ebp], 0
  00015	74 55		 je	 SHORT $LN3@push_event

; 169  : 	{
; 170  : 
; 171  : 		// event found on stack
; 172  : 
; 173  : 		if (stack_search->function == this_function)

  00017	8b 45 fc	 mov	 eax, DWORD PTR _stack_search$[ebp]
  0001a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001d	3b 4d 08	 cmp	 ecx, DWORD PTR _this_function$[ebp]
  00020	75 3f		 jne	 SHORT $LN6@push_event

; 174  : 		{
; 175  : 
; 176  : 			// pop all down to this function
; 177  : 
; 178  : 			#if DEBUG_MODULE
; 179  : 
; 180  : 			if (stack_search->name)
; 181  : 			{
; 182  : 
; 183  : 				debug_log ("EV_STACK:     found event table for %s %d, id %d, function %d, overlay %d", stack_search->name, stack_search, stack_search->event_id, stack_search->function, stack_search->overlay);
; 184  : 			}
; 185  : 			else
; 186  : 			{
; 187  : 
; 188  : 				debug_log ("EV_STACK:     found event table for %d, id %d, function %d, overlay %d", stack_search, stack_search->event_id, stack_search->function, stack_search->overlay);
; 189  : 			}
; 190  : 
; 191  : 			#endif
; 192  : 
; 193  : 			stack_search = event_stack_head;

  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A ; event_stack_head
  00027	89 45 fc	 mov	 DWORD PTR _stack_search$[ebp], eax
$LN4@push_event:

; 194  : 
; 195  : 			while (stack_search->function != this_function)

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _stack_search$[ebp]
  0002d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00030	3b 4d 08	 cmp	 ecx, DWORD PTR _this_function$[ebp]
  00033	74 27		 je	 SHORT $LN5@push_event

; 196  : 			{
; 197  : 
; 198  : 				if (!stack_search->overlay)

  00035	8b 45 fc	 mov	 eax, DWORD PTR _stack_search$[ebp]
  00038	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0003b	85 c9		 test	 ecx, ecx
  0003d	75 12		 jne	 SHORT $LN7@push_event

; 199  : 				{
; 200  : 
; 201  : 					#if DEBUG_MODULE
; 202  : 
; 203  : 					debug_log ("EV_STACK:       popping down to it");
; 204  : 
; 205  : 					#endif
; 206  : 
; 207  : 					// JB 030311 From Frank_Murphy
; 208  : 					stack_search = stack_search->prev; // needed because stack_search can be freed in pop_event()

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _stack_search$[ebp]
  00042	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00045	89 4d fc	 mov	 DWORD PTR _stack_search$[ebp], ecx

; 209  : 
; 210  : 					pop_event (NULL);

  00048	6a 00		 push	 0
  0004a	e8 00 00 00 00	 call	 ?pop_event@@YGXP6GXXZ@Z	; pop_event

; 211  : 				}
; 212  : 				else // JB 030311 else statement from Frank_Murphy

  0004f	eb 09		 jmp	 SHORT $LN8@push_event
$LN7@push_event:

; 213  : 					stack_search = stack_search->prev;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _stack_search$[ebp]
  00054	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00057	89 4d fc	 mov	 DWORD PTR _stack_search$[ebp], ecx
$LN8@push_event:

; 214  : 			}

  0005a	eb ce		 jmp	 SHORT $LN4@push_event
$LN5@push_event:

; 215  : 
; 216  : 			#if DEBUG_MODULE
; 217  : 
; 218  : 			debug_log ("EV_STACK: -------------------------------------------------------------------------------");
; 219  : 
; 220  : 			#endif
; 221  : 
; 222  : 			return;

  0005c	e9 e6 00 00 00	 jmp	 $LN1@push_event
$LN6@push_event:

; 223  : 		}
; 224  : 
; 225  : 		stack_search = stack_search->prev;

  00061	8b 45 fc	 mov	 eax, DWORD PTR _stack_search$[ebp]
  00064	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00067	89 4d fc	 mov	 DWORD PTR _stack_search$[ebp], ecx

; 226  : 	}

  0006a	eb a5		 jmp	 SHORT $LN2@push_event
$LN3@push_event:

; 227  : 
; 228  : 	#if DEBUG_MODULE
; 229  : 
; 230  : 	debug_log ("EV_STACK: -------------------------------------------------------------------------------");
; 231  : 
; 232  : 	#endif
; 233  : 
; 234  : 	// malloc new event
; 235  : 
; 236  : 	new_stack_item = (event_stack *) safe_malloc (sizeof (event_stack));

  0006c	6a 18		 push	 24			; 00000018H
  0006e	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00073	89 45 f8	 mov	 DWORD PTR _new_stack_item$[ebp], eax

; 237  : 
; 238  : 	new_stack_item->overlay = FALSE;

  00076	33 c0		 xor	 eax, eax
  00078	8b 4d f8	 mov	 ecx, DWORD PTR _new_stack_item$[ebp]
  0007b	66 89 01	 mov	 WORD PTR [ecx], ax

; 239  : 
; 240  : 	new_stack_item->function = this_function;

  0007e	8b 45 f8	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  00081	8b 4d 08	 mov	 ecx, DWORD PTR _this_function$[ebp]
  00084	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 241  : 
; 242  : 	new_stack_item->event_id = event_id ++;

  00087	8b 45 f8	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  0008a	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ?event_id@@3HA
  00091	66 89 48 02	 mov	 WORD PTR [eax+2], cx
  00095	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?event_id@@3HA
  0009b	83 c2 01	 add	 edx, 1
  0009e	89 15 00 00 00
	00		 mov	 DWORD PTR ?event_id@@3HA, edx

; 243  : 
; 244  : 	new_stack_item->name = NULL;

  000a4	8b 45 f8	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  000a7	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 245  : 
; 246  : 	if (name)

  000ae	83 7d 0c 00	 cmp	 DWORD PTR _name$[ebp], 0
  000b2	74 33		 je	 SHORT $LN9@push_event

; 247  : 	{
; 248  : 
; 249  : 		new_stack_item->name = (char *) safe_malloc (sizeof (char) * (strlen (name) + 1));

  000b4	8b 45 0c	 mov	 eax, DWORD PTR _name$[ebp]
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 _strlen
  000bd	83 c4 04	 add	 esp, 4
  000c0	83 c0 01	 add	 eax, 1
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  000c9	8b 4d f8	 mov	 ecx, DWORD PTR _new_stack_item$[ebp]
  000cc	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 250  : 
; 251  : 		sprintf (new_stack_item->name, "%s", name);

  000cf	8b 45 0c	 mov	 eax, DWORD PTR _name$[ebp]
  000d2	50		 push	 eax
  000d3	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000d8	8b 4d f8	 mov	 ecx, DWORD PTR _new_stack_item$[ebp]
  000db	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000de	52		 push	 edx
  000df	e8 00 00 00 00	 call	 _sprintf
  000e4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@push_event:

; 252  : 	}
; 253  : 
; 254  : 	// overlay with this event table
; 255  : 
; 256  : 	clear_events ();

  000e7	e8 00 00 00 00	 call	 ?clear_events@@YGXXZ	; clear_events

; 257  : 
; 258  : 	this_function ();

  000ec	ff 55 08	 call	 DWORD PTR _this_function$[ebp]

; 259  : 
; 260  : 	// first event on stack
; 261  : 
; 262  : 	if (!event_stack_head)

  000ef	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A, 0 ; event_stack_head
  000f6	75 26		 jne	 SHORT $LN10@push_event

; 263  : 	{
; 264  : 
; 265  : 		event_stack_head = new_stack_item;

  000f8	8b 45 f8	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  000fb	a3 00 00 00 00	 mov	 DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A, eax ; event_stack_head

; 266  : 
; 267  : 		event_stack_tail = new_stack_item;

  00100	8b 45 f8	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  00103	a3 00 00 00 00	 mov	 DWORD PTR ?event_stack_tail@@3PAUEVENT_STACK@@A, eax ; event_stack_tail

; 268  : 
; 269  : 		new_stack_item->prev = NULL;

  00108	8b 45 f8	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  0010b	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 270  : 
; 271  : 		new_stack_item->next = NULL;

  00112	8b 45 f8	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  00115	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 272  : 
; 273  : 		return;

  0011c	eb 29		 jmp	 SHORT $LN1@push_event
$LN10@push_event:

; 274  : 	}
; 275  : 
; 276  : 	// add event to head of stack
; 277  : 
; 278  : 	new_stack_item->prev = event_stack_head;

  0011e	8b 45 f8	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  00121	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A ; event_stack_head
  00127	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 279  : 
; 280  : 	event_stack_head->next = new_stack_item;

  0012a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A ; event_stack_head
  0012f	8b 4d f8	 mov	 ecx, DWORD PTR _new_stack_item$[ebp]
  00132	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 281  : 
; 282  : 	event_stack_head = new_stack_item;

  00135	8b 45 f8	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  00138	a3 00 00 00 00	 mov	 DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A, eax ; event_stack_head

; 283  : 
; 284  : 	new_stack_item->next = NULL;

  0013d	8b 45 f8	 mov	 eax, DWORD PTR _new_stack_item$[ebp]
  00140	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
$LN1@push_event:

; 285  : 
; 286  : 	#if DEBUG_MODULE
; 287  : 
; 288  : 	display_event_stack ();
; 289  : 
; 290  : 	#endif
; 291  : }

  00147	5f		 pop	 edi
  00148	5e		 pop	 esi
  00149	5b		 pop	 ebx
  0014a	8b e5		 mov	 esp, ebp
  0014c	5d		 pop	 ebp
  0014d	c2 08 00	 ret	 8
?push_event@@YGXP6GXXZPBD@Z ENDP			; push_event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\ev_stack.c
;	COMDAT ?deinitialise_event_stack@@YGXXZ
_TEXT	SEGMENT
_this_event$ = -4					; size = 4
?deinitialise_event_stack@@YGXXZ PROC			; deinitialise_event_stack, COMDAT

; 115  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 116  : 
; 117  : 	event_stack
; 118  : 		*this_event;
; 119  : 
; 120  : 	this_event = event_stack_head;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A ; event_stack_head
  0000e	89 45 fc	 mov	 DWORD PTR _this_event$[ebp], eax
$LN2@deinitiali:

; 121  : 
; 122  : 	while (this_event)

  00011	83 7d fc 00	 cmp	 DWORD PTR _this_event$[ebp], 0
  00015	74 20		 je	 SHORT $LN1@deinitiali

; 123  : 	{
; 124  : 
; 125  : 		this_event = event_stack_head->next;

  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A ; event_stack_head
  0001c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0001f	89 4d fc	 mov	 DWORD PTR _this_event$[ebp], ecx

; 126  : 
; 127  : 		safe_free (event_stack_head);

  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A ; event_stack_head
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 128  : 
; 129  : 		event_stack_head = this_event;

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this_event$[ebp]
  00030	a3 00 00 00 00	 mov	 DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A, eax ; event_stack_head

; 130  : 	}

  00035	eb da		 jmp	 SHORT $LN2@deinitiali
$LN1@deinitiali:

; 131  : }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?deinitialise_event_stack@@YGXXZ ENDP			; deinitialise_event_stack
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\ev_stack.c
;	COMDAT ?initialise_event_stack@@YGXXZ
_TEXT	SEGMENT
?initialise_event_stack@@YGXXZ PROC			; initialise_event_stack, COMDAT

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 102  : 
; 103  : 	event_id = 0;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?event_id@@3HA, 0

; 104  : 
; 105  : 	event_stack_head = NULL;

  00013	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?event_stack_head@@3PAUEVENT_STACK@@A, 0 ; event_stack_head

; 106  : 
; 107  : 	event_stack_tail = NULL;

  0001d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?event_stack_tail@@3PAUEVENT_STACK@@A, 0 ; event_stack_tail

; 108  : }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?initialise_event_stack@@YGXXZ ENDP			; initialise_event_stack
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
