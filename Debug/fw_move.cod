; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_move.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_asinf
PUBLIC	_atan2f
PUBLIC	_cosf
PUBLIC	_fabsf
PUBLIC	_sinf
PUBLIC	_sqrtf
PUBLIC	?asin@@YGMM@Z					; asin
PUBLIC	?atan2@@YGMMM@Z					; atan2
PUBLIC	?cos@@YGMM@Z					; cos
PUBLIC	?fabs@@YGMM@Z					; fabs
PUBLIC	?sin@@YGMM@Z					; sin
PUBLIC	?sqrt@@YGMM@Z					; sqrt
PUBLIC	?fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z ; fixed_wing_movement_get_waypoint_position
PUBLIC	?basic_fixed_wing_movement@@YGXPAUENTITY@@@Z	; basic_fixed_wing_movement
PUBLIC	?basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z ; basic_fixed_wing_death_movement
PUBLIC	?fixed_wing_impact_movement@@YGXPAUENTITY@@@Z	; fixed_wing_impact_movement
PUBLIC	?fixed_wing_collision_avoidance@@YGXPAUENTITY@@PAUVEC3D@@@Z ; fixed_wing_collision_avoidance
PUBLIC	?fixed_wing_attain_waypoint@@YGXPAUENTITY@@PAUVEC3D@@1@Z ; fixed_wing_attain_waypoint
PUBLIC	?fixed_wing_aim_correction@@YGXPAUENTITY@@PAUVEC3D@@1@Z ; fixed_wing_aim_correction
PUBLIC	?fixed_wing_follow_waypoint@@YGXPAUENTITY@@PAUVEC3D@@1@Z ; fixed_wing_follow_waypoint
PUBLIC	?fixed_wing_pursue_guide@@YGXPAUENTITY@@PAUVEC3D@@1@Z ; fixed_wing_pursue_guide
PUBLIC	?fixed_wing_navigator@@YGXPAUENTITY@@PAUVEC3D@@1@Z ; fixed_wing_navigator
PUBLIC	?fixed_wing_calc_attitude@@YGXPAUENTITY@@PAUVEC3D@@1@Z ; fixed_wing_calc_attitude
PUBLIC	?fixed_wing_bound_vector_scale@@YGXPAUVEC3D@@MM@Z ; fixed_wing_bound_vector_scale
PUBLIC	?fixed_wing_accum@@YGMPAUENTITY@@PAUVEC3D@@1@Z	; fixed_wing_accum
PUBLIC	?fixed_wing_set_velocity@@YGXPAUENTITY@@PAUVEC3D@@1@Z ; fixed_wing_set_velocity
PUBLIC	?fixed_wing_land_jet@@YGXPAUENTITY@@PAUVEC3D@@@Z ; fixed_wing_land_jet
PUBLIC	?fixed_wing_flight@@YGXPAUENTITY@@PAUVEC3D@@@Z	; fixed_wing_flight
PUBLIC	?fixed_wing_taxi@@YGXPAUENTITY@@PAUVEC3D@@11M@Z	; fixed_wing_taxi
PUBLIC	?fixed_wing_crash_movement@@YGXPAUENTITY@@@Z	; fixed_wing_crash_movement
PUBLIC	?draw_aircraft_turn_radius@@YGXPAUENTITY@@@Z	; draw_aircraft_turn_radius
PUBLIC	?draw_debug_circle_line@@YGXPAUVEC3D@@M@Z	; draw_debug_circle_line
PUBLIC	?clear_fixed_wing_velocity@@YGXPAUENTITY@@@Z	; clear_fixed_wing_velocity
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	?draw_debug_takeoff_landing_routes@@YGXPAUENTITY@@@Z ; draw_debug_takeoff_landing_routes
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??fixed_wing_collision_avoidance@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA ; `fixed_wing_collision_avoidance'::`1'::__LINE__Var
PUBLIC	??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_05MGJOOGAJ@group@				; `string'
PUBLIC	?__LINE__Var@?0??fixed_wing_aim_correction@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA ; `fixed_wing_aim_correction'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??fixed_wing_follow_waypoint@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA ; `fixed_wing_follow_waypoint'::`1'::__LINE__Var
PUBLIC	??_C@_05HLIEEKJG@guide@				; `string'
PUBLIC	?__LINE__Var@?0??fixed_wing_pursue_guide@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA ; `fixed_wing_pursue_guide'::`1'::__LINE__Var
PUBLIC	??_C@_06DFLPLEOP@leader@			; `string'
PUBLIC	?__LINE__Var@?0??fixed_wing_set_velocity@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA ; `fixed_wing_set_velocity'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??fixed_wing_accum@@YGMPAUENTITY@@PAUVEC3D@@1@Z@4JA ; `fixed_wing_accum'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??fixed_wing_calc_attitude@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA ; `fixed_wing_calc_attitude'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??fixed_wing_land_jet@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA ; `fixed_wing_land_jet'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??fixed_wing_flight@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA ; `fixed_wing_flight'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??fixed_wing_taxi@@YGXPAUENTITY@@PAUVEC3D@@11M@Z@4JA ; `fixed_wing_taxi'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA ; `fixed_wing_movement_get_waypoint_position'::`1'::__LINE__Var
PUBLIC	??_C@_02LFNMGJAP@en@				; `string'
PUBLIC	??_C@_06NGJLJNEL@wp_pos@			; `string'
PUBLIC	??_C@_03PCBNCGFH@pos@				; `string'
PUBLIC	??_C@_02HODPCBMO@wp@				; `string'
PUBLIC	??_C@_0N@LDLPOAOD@group_leader@			; `string'
PUBLIC	??_C@_0CC@BJNBCHGF@formation_index?5?$DM?5formation_cou@ ; `string'
PUBLIC	??_C@_0CJ@LGIIPGBA@leader_formation_index?5?$DM?5format@ ; `string'
PUBLIC	??_C@_0M@CKFOJOAF@task_leader@			; `string'
PUBLIC	?__LINE__Var@?0??basic_fixed_wing_movement@@YGXPAUENTITY@@@Z@4JA ; `basic_fixed_wing_movement'::`1'::__LINE__Var
PUBLIC	??_C@_0CN@COJIMO@FW_MOVE?3?5Entity?5?$CFs?5?$CI?$CFd?$CJ?5has?5no?5@ ; `string'
PUBLIC	?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA ; `basic_fixed_wing_death_movement'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??fixed_wing_crash_movement@@YGXPAUENTITY@@@Z@4JA ; `fixed_wing_crash_movement'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??fixed_wing_impact_movement@@YGXPAUENTITY@@@Z@4JA ; `fixed_wing_impact_movement'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??clear_fixed_wing_velocity@@YGXPAUENTITY@@@Z@4JA ; `clear_fixed_wing_velocity'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??draw_debug_takeoff_landing_routes@@YGXPAUENTITY@@@Z@4JA ; `draw_debug_takeoff_landing_routes'::`1'::__LINE__Var
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3c8efa35
PUBLIC	__real@3d8efa35
PUBLIC	__real@3e860a92
PUBLIC	__real@3ef24d151eb851ec
PUBLIC	__real@3f00002000400080
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3f800000
PUBLIC	__real@3f847ae147ae147b
PUBLIC	__real@3fd3333333333333
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe0c15236000000
PUBLIC	__real@3fe6666666666666
PUBLIC	__real@3fe921fb60000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff8000000000000
PUBLIC	__real@3ff921fb60000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4002d97c88000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@4010000000000000
PUBLIC	__real@4028000000000000
PUBLIC	__real@40400000
PUBLIC	__real@4044000000000000
PUBLIC	__real@40490fdb
PUBLIC	__real@4059000000000000
PUBLIC	__real@408f400000000000
PUBLIC	__real@40c90fdb
PUBLIC	__real@411cf5c3
PUBLIC	__real@bfe0c15236000000
PUBLIC	__real@bfe921fb60000000
PUBLIC	__real@c008000000000000
PUBLIC	__real@c0490fdb
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	_memcpy:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_asin:PROC
EXTRN	_atan2:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_sin:PROC
EXTRN	_sqrt:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z:PROC	; normalise_any_3d_vector
EXTRN	?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z:PROC	; get_3d_vector_magnitude
EXTRN	?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z:PROC ; normalise_3d_vector_given_magnitude
EXTRN	?get_3d_vector_dot_product@@YGMPBUVEC3D@@0@Z:PROC ; get_3d_vector_dot_product
EXTRN	?get_heading_and_pitch_from_3d_unit_vector@@YGXPBUVEC3D@@PAM1@Z:PROC ; get_heading_and_pitch_from_3d_unit_vector
EXTRN	?get_3d_transformation_matrix@@YGXQAY02MMMM@Z:PROC ; get_3d_transformation_matrix
EXTRN	?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z:PROC ; multiply_matrix3x3_vec3d
EXTRN	?multiply_transpose_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z:PROC ; multiply_transpose_matrix3x3_vec3d
EXTRN	?get_matrix3x3_from_unit_vec3d@@YGXQAY02MPBUVEC3D@@@Z:PROC ; get_matrix3x3_from_unit_vec3d
EXTRN	?get_3d_transformation_matrix_from_face_normal_and_heading@@YGXQAY02MPBUVEC3D@@M@Z:PROC ; get_3d_transformation_matrix_from_face_normal_and_heading
EXTRN	?get_2d_range@@YGMPBUVEC3D@@0@Z:PROC		; get_2d_range
EXTRN	?get_object_3d_bounding_box@@YGPAUOBJECT_3D_BOUNDS@@H@Z:PROC ; get_object_3d_bounding_box
EXTRN	?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z:PROC ; get_3d_terrain_point_data
EXTRN	?get_3d_terrain_point_data_normal@@YGPAUVEC3D@@PAUTERRAIN_3D_POINT_DATA@@@Z:PROC ; get_3d_terrain_point_data_normal
EXTRN	?get_3d_terrain_point_data_elevation@@YGMPAUTERRAIN_3D_POINT_DATA@@@Z:PROC ; get_3d_terrain_point_data_elevation
EXTRN	?get_3d_terrain_point_data_type@@YGHPAUTERRAIN_3D_POINT_DATA@@@Z:PROC ; get_3d_terrain_point_data_type
EXTRN	?get_formation@@YGPAUFORMATION_TYPE@@W4FORMATION_TYPES@@@Z:PROC ; get_formation
EXTRN	?bound_position_to_map_area@@YGHPAUVEC3D@@@Z:PROC ; bound_position_to_map_area
EXTRN	?bound_position_to_map_volume@@YGHPAUVEC3D@@@Z:PROC ; bound_position_to_map_volume
EXTRN	?create_vectored_debug_3d_object@@YGPAUDEBUG_3D_OBJECT@@PAUVEC3D@@0HMM@Z:PROC ; create_vectored_debug_3d_object
EXTRN	?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z:PROC ; create_debug_3d_line
EXTRN	?mobile_terrain_adjust_waypoint_height@@YGMPAUENTITY@@PAUVEC3D@@M@Z:PROC ; mobile_terrain_adjust_waypoint_height
EXTRN	?create_client_server_object_hit_ground_explosion_effect@@YGXPAUENTITY@@H@Z:PROC ; create_client_server_object_hit_ground_explosion_effect
EXTRN	?clear_smoke_list_generator_lifetime@@YGHPAUENTITY@@H@Z:PROC ; clear_smoke_list_generator_lifetime
EXTRN	?kill_client_server_entity_sound_type@@YGXPAUENTITY@@H@Z:PROC ; kill_client_server_entity_sound_type
EXTRN	?create_client_server_sound_effect_entity@@YGPAUENTITY@@PAU1@W4ENTITY_SIDES@@HW4SOUND_CHANNEL_TYPES@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@MMHHHPAH@Z:PROC ; create_client_server_sound_effect_entity
EXTRN	?get_local_entity_landing_entity@@YGPAUENTITY@@PAU1@H@Z:PROC ; get_local_entity_landing_entity
EXTRN	?get_local_landing_entity_route@@YGPAUENTITY@@PAU1@H@Z:PROC ; get_local_landing_entity_route
EXTRN	?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z:PROC ; get_local_entity_current_waypoint
EXTRN	?get_local_entity_formation_position_offset@@YGXPAUENTITY@@0PAUVEC3D@@@Z:PROC ; get_local_entity_formation_position_offset
EXTRN	?get_terrain_type_class@@YG?AW4TERRAIN_CLASSES@@H@Z:PROC ; get_terrain_type_class
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?system_one_over_delta_time@@3MA:DWORD		; system_one_over_delta_time
EXTRN	?sys_col_yellow@@3UREAL_COLOUR@@A:DWORD		; sys_col_yellow
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?system_comms_model@@3W4COMMS_MODEL_TYPES@@A:DWORD ; system_comms_model
EXTRN	?overload_invalid_list_type_message@@3PBDB:DWORD ; overload_invalid_list_type_message
EXTRN	?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_first_child
EXTRN	?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_parent
EXTRN	?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_child_succ
EXTRN	?fn_kill_client_server_entity@@3PAY01P6GXPAUENTITY@@@ZA:BYTE ; fn_kill_client_server_entity
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_set_local_entity_float_value@@3PAY0KP@P6GXPAUENTITY@@W4FLOAT_TYPES@@M@ZA:BYTE ; fn_set_local_entity_float_value
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_set_local_entity_int_value@@3PAY0BBH@P6GXPAUENTITY@@W4INT_TYPES@@H@ZA:BYTE ; fn_set_local_entity_int_value
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?overload_invalid_ptr_type_message@@3PBDB:DWORD	; overload_invalid_ptr_type_message
EXTRN	?fn_get_local_entity_ptr_value@@3PAY0BE@P6GPAXPAUENTITY@@W4PTR_TYPES@@@ZA:BYTE ; fn_get_local_entity_ptr_value
EXTRN	?overload_invalid_string_type_message@@3PBDB:DWORD ; overload_invalid_string_type_message
EXTRN	?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA:BYTE ; fn_get_local_entity_string
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_set_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA:BYTE ; fn_set_local_entity_vec3d
EXTRN	?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA:BYTE ; fn_get_local_entity_vec3d
EXTRN	?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA:BYTE ; fn_get_local_entity_vec3d_ptr
EXTRN	?entities@@3PAUENTITY@@A:DWORD			; entities
EXTRN	?aircraft_database@@3PAUAIRCRAFT_DATA@@A:BYTE	; aircraft_database
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c0490fdb
CONST	SEGMENT
__real@c0490fdb DD 0c0490fdbr			; -3.14159
CONST	ENDS
;	COMDAT __real@c008000000000000
CONST	SEGMENT
__real@c008000000000000 DQ 0c008000000000000r	; -3
CONST	ENDS
;	COMDAT __real@bfe921fb60000000
CONST	SEGMENT
__real@bfe921fb60000000 DQ 0bfe921fb60000000r	; -0.785398
CONST	ENDS
;	COMDAT __real@bfe0c15236000000
CONST	SEGMENT
__real@bfe0c15236000000 DQ 0bfe0c15236000000r	; -0.523599
CONST	ENDS
;	COMDAT __real@411cf5c3
CONST	SEGMENT
__real@411cf5c3 DD 0411cf5c3r			; 9.81
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@4044000000000000
CONST	SEGMENT
__real@4044000000000000 DQ 04044000000000000r	; 40
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@4028000000000000
CONST	SEGMENT
__real@4028000000000000 DQ 04028000000000000r	; 12
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4002d97c88000000
CONST	SEGMENT
__real@4002d97c88000000 DQ 04002d97c88000000r	; 2.35619
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff921fb60000000
CONST	SEGMENT
__real@3ff921fb60000000 DQ 03ff921fb60000000r	; 1.5708
CONST	ENDS
;	COMDAT __real@3ff8000000000000
CONST	SEGMENT
__real@3ff8000000000000 DQ 03ff8000000000000r	; 1.5
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe921fb60000000
CONST	SEGMENT
__real@3fe921fb60000000 DQ 03fe921fb60000000r	; 0.785398
CONST	ENDS
;	COMDAT __real@3fe6666666666666
CONST	SEGMENT
__real@3fe6666666666666 DQ 03fe6666666666666r	; 0.7
CONST	ENDS
;	COMDAT __real@3fe0c15236000000
CONST	SEGMENT
__real@3fe0c15236000000 DQ 03fe0c15236000000r	; 0.523599
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd3333333333333
CONST	SEGMENT
__real@3fd3333333333333 DQ 03fd3333333333333r	; 0.3
CONST	ENDS
;	COMDAT __real@3f847ae147ae147b
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3f00002000400080
CONST	SEGMENT
__real@3f00002000400080 DQ 03f00002000400080r	; 3.05185e-05
CONST	ENDS
;	COMDAT __real@3ef24d151eb851ec
CONST	SEGMENT
__real@3ef24d151eb851ec DQ 03ef24d151eb851ecr	; 1.74533e-05
CONST	ENDS
;	COMDAT __real@3e860a92
CONST	SEGMENT
__real@3e860a92 DD 03e860a92r			; 0.261799
CONST	ENDS
;	COMDAT __real@3d8efa35
CONST	SEGMENT
__real@3d8efa35 DD 03d8efa35r			; 0.0698132
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_debug_takeoff_landing_routes@@YGXPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_debug_takeoff_landing_routes@@YGXPAUENTITY@@@Z@4JA DD 0a83H ; `draw_debug_takeoff_landing_routes'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??clear_fixed_wing_velocity@@YGXPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??clear_fixed_wing_velocity@@YGXPAUENTITY@@@Z@4JA DD 0a1cH ; `clear_fixed_wing_velocity'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??fixed_wing_impact_movement@@YGXPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??fixed_wing_impact_movement@@YGXPAUENTITY@@@Z@4JA DD 09f7H ; `fixed_wing_impact_movement'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??fixed_wing_crash_movement@@YGXPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??fixed_wing_crash_movement@@YGXPAUENTITY@@@Z@4JA DD 0954H ; `fixed_wing_crash_movement'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA DD 07d6H ; `basic_fixed_wing_death_movement'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CN@COJIMO@FW_MOVE?3?5Entity?5?$CFs?5?$CI?$CFd?$CJ?5has?5no?5@
CONST	SEGMENT
??_C@_0CN@COJIMO@FW_MOVE?3?5Entity?5?$CFs?5?$CI?$CFd?$CJ?5has?5no?5@ DB 'F'
	DB	'W_MOVE: Entity %s (%d) has no current guide', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??basic_fixed_wing_movement@@YGXPAUENTITY@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??basic_fixed_wing_movement@@YGXPAUENTITY@@@Z@4JA DD 0604H ; `basic_fixed_wing_movement'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0M@CKFOJOAF@task_leader@
CONST	SEGMENT
??_C@_0M@CKFOJOAF@task_leader@ DB 'task_leader', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@LGIIPGBA@leader_formation_index?5?$DM?5format@
CONST	SEGMENT
??_C@_0CJ@LGIIPGBA@leader_formation_index?5?$DM?5format@ DB 'leader_forma'
	DB	'tion_index < formation_count', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BJNBCHGF@formation_index?5?$DM?5formation_cou@
CONST	SEGMENT
??_C@_0CC@BJNBCHGF@formation_index?5?$DM?5formation_cou@ DB 'formation_in'
	DB	'dex < formation_count', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LDLPOAOD@group_leader@
CONST	SEGMENT
??_C@_0N@LDLPOAOD@group_leader@ DB 'group_leader', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02HODPCBMO@wp@
CONST	SEGMENT
??_C@_02HODPCBMO@wp@ DB 'wp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PCBNCGFH@pos@
CONST	SEGMENT
??_C@_03PCBNCGFH@pos@ DB 'pos', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06NGJLJNEL@wp_pos@
CONST	SEGMENT
??_C@_06NGJLJNEL@wp_pos@ DB 'wp_pos', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02LFNMGJAP@en@
CONST	SEGMENT
??_C@_02LFNMGJAP@en@ DB 'en', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA DD 045fH ; `fixed_wing_movement_get_waypoint_position'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??fixed_wing_taxi@@YGXPAUENTITY@@PAUVEC3D@@11M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??fixed_wing_taxi@@YGXPAUENTITY@@PAUVEC3D@@11M@Z@4JA DD 03dbH ; `fixed_wing_taxi'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??fixed_wing_flight@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??fixed_wing_flight@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA DD 03a2H ; `fixed_wing_flight'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??fixed_wing_land_jet@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??fixed_wing_land_jet@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA DD 0325H ; `fixed_wing_land_jet'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??fixed_wing_calc_attitude@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??fixed_wing_calc_attitude@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA DD 02caH ; `fixed_wing_calc_attitude'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??fixed_wing_accum@@YGMPAUENTITY@@PAUVEC3D@@1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??fixed_wing_accum@@YGMPAUENTITY@@PAUVEC3D@@1@Z@4JA DD 0285H ; `fixed_wing_accum'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??fixed_wing_set_velocity@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??fixed_wing_set_velocity@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA DD 0247H ; `fixed_wing_set_velocity'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06DFLPLEOP@leader@
CONST	SEGMENT
??_C@_06DFLPLEOP@leader@ DB 'leader', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??fixed_wing_pursue_guide@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??fixed_wing_pursue_guide@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA DD 01c5H ; `fixed_wing_pursue_guide'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05HLIEEKJG@guide@
CONST	SEGMENT
??_C@_05HLIEEKJG@guide@ DB 'guide', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??fixed_wing_follow_waypoint@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??fixed_wing_follow_waypoint@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA DD 0189H ; `fixed_wing_follow_waypoint'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??fixed_wing_aim_correction@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??fixed_wing_aim_correction@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA DD 0147H ; `fixed_wing_aim_correction'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05MGJOOGAJ@group@
CONST	SEGMENT
??_C@_05MGJOOGAJ@group@ DB 'group', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwi'
	DB	'ng\fw_move.c', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??fixed_wing_collision_avoidance@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??fixed_wing_collision_avoidance@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA DD 08fH ; `fixed_wing_collision_avoidance'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_move.c
;	COMDAT ?draw_debug_takeoff_landing_routes@@YGXPAUENTITY@@@Z
_TEXT	SEGMENT
tv254 = -116						; size = 4
tv218 = -116						; size = 4
tv194 = -116						; size = 4
tv158 = -116						; size = 4
tv131 = -116						; size = 4
tv79 = -116						; size = 4
tv246 = -112						; size = 4
tv210 = -112						; size = 4
tv186 = -112						; size = 4
tv150 = -112						; size = 4
tv91 = -112						; size = 4
tv71 = -112						; size = 4
_raw$ = -44						; size = 4
_offset$ = -40						; size = 12
_wp_pos$ = -28						; size = 12
_wp$ = -16						; size = 4
_keysite$ = -12						; size = 4
_group$ = -8						; size = 4
_landing$ = -4						; size = 4
_en$ = 8						; size = 4
?draw_debug_takeoff_landing_routes@@YGXPAUENTITY@@@Z PROC ; draw_debug_takeoff_landing_routes, COMDAT

; 2691 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2692 : 
; 2693 : 	entity
; 2694 : 		*landing,
; 2695 : 		*group,
; 2696 : 		*keysite,
; 2697 : 		*wp;
; 2698 : 
; 2699 : 	vec3d
; 2700 : 		wp_pos,
; 2701 : 		offset;
; 2702 : 
; 2703 : 	fixed_wing
; 2704 : 		*raw;
; 2705 : 
; 2706 : 	raw = (fixed_wing *) get_local_entity_data (en);

  00009	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	89 4d d4	 mov	 DWORD PTR _raw$[ebp], ecx

; 2707 : 
; 2708 : 	group = get_local_entity_parent (en, LIST_TYPE_MEMBER);

  00012	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00016	74 0a		 je	 SHORT $LN7@draw_debug
  00018	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	89 4d 90	 mov	 DWORD PTR tv71[ebp], ecx
  00020	eb 21		 jmp	 SHORT $LN8@draw_debug
$LN7@draw_debug:
  00022	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_debug_takeoff_landing_routes@@YGXPAUENTITY@@@Z@4JA
  00028	83 c2 11	 add	 edx, 17			; 00000011H
  0002b	52		 push	 edx
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0003c	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$LN8@draw_debug:
  00043	b9 01 00 00 00	 mov	 ecx, 1
  00048	85 c9		 test	 ecx, ecx
  0004a	74 09		 je	 SHORT $LN9@draw_debug
  0004c	c7 45 8c 19 00
	00 00		 mov	 DWORD PTR tv79[ebp], 25	; 00000019H
  00053	eb 21		 jmp	 SHORT $LN10@draw_debug
$LN9@draw_debug:
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_debug_takeoff_landing_routes@@YGXPAUENTITY@@@Z@4JA
  0005b	83 c2 11	 add	 edx, 17			; 00000011H
  0005e	52		 push	 edx
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006f	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$LN10@draw_debug:
  00076	6a 19		 push	 25			; 00000019H
  00078	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0007b	51		 push	 ecx
  0007c	69 55 90 b4 00
	00 00		 imul	 edx, DWORD PTR tv71[ebp], 180
  00083	8b 45 8c	 mov	 eax, DWORD PTR tv79[ebp]
  00086	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0008d	ff d1		 call	 ecx
  0008f	89 45 f8	 mov	 DWORD PTR _group$[ebp], eax

; 2709 : 
; 2710 : 	keysite = get_local_entity_parent (group, LIST_TYPE_KEYSITE_GROUP);

  00092	83 7d f8 00	 cmp	 DWORD PTR _group$[ebp], 0
  00096	74 0a		 je	 SHORT $LN11@draw_debug
  00098	8b 45 f8	 mov	 eax, DWORD PTR _group$[ebp]
  0009b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009d	89 4d 90	 mov	 DWORD PTR tv91[ebp], ecx
  000a0	eb 21		 jmp	 SHORT $LN12@draw_debug
$LN11@draw_debug:
  000a2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_debug_takeoff_landing_routes@@YGXPAUENTITY@@@Z@4JA
  000a8	83 c2 13	 add	 edx, 19			; 00000013H
  000ab	52		 push	 edx
  000ac	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  000b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000bc	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv91[ebp], 0
$LN12@draw_debug:
  000c3	b9 01 00 00 00	 mov	 ecx, 1
  000c8	85 c9		 test	 ecx, ecx
  000ca	74 09		 je	 SHORT $LN13@draw_debug
  000cc	c7 45 8c 16 00
	00 00		 mov	 DWORD PTR tv131[ebp], 22 ; 00000016H
  000d3	eb 21		 jmp	 SHORT $LN14@draw_debug
$LN13@draw_debug:
  000d5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_debug_takeoff_landing_routes@@YGXPAUENTITY@@@Z@4JA
  000db	83 c2 13	 add	 edx, 19			; 00000013H
  000de	52		 push	 edx
  000df	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ef	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv131[ebp], 0
$LN14@draw_debug:
  000f6	6a 16		 push	 22			; 00000016H
  000f8	8b 4d f8	 mov	 ecx, DWORD PTR _group$[ebp]
  000fb	51		 push	 ecx
  000fc	69 55 90 b4 00
	00 00		 imul	 edx, DWORD PTR tv91[ebp], 180
  00103	8b 45 8c	 mov	 eax, DWORD PTR tv131[ebp]
  00106	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0010d	ff d1		 call	 ecx
  0010f	89 45 f4	 mov	 DWORD PTR _keysite$[ebp], eax

; 2711 : 
; 2712 : 	landing = get_local_entity_landing_entity (keysite, ENTITY_SUB_TYPE_LANDING_FIXED_WING);

  00112	6a 00		 push	 0
  00114	8b 45 f4	 mov	 eax, DWORD PTR _keysite$[ebp]
  00117	50		 push	 eax
  00118	e8 00 00 00 00	 call	 ?get_local_entity_landing_entity@@YGPAUENTITY@@PAU1@H@Z ; get_local_entity_landing_entity
  0011d	89 45 fc	 mov	 DWORD PTR _landing$[ebp], eax

; 2713 : 
; 2714 : 	wp = get_local_landing_entity_route (landing, ENTITY_SUB_TYPE_TASK_TAKEOFF);

  00120	6a 16		 push	 22			; 00000016H
  00122	8b 45 fc	 mov	 eax, DWORD PTR _landing$[ebp]
  00125	50		 push	 eax
  00126	e8 00 00 00 00	 call	 ?get_local_landing_entity_route@@YGPAUENTITY@@PAU1@H@Z ; get_local_landing_entity_route
  0012b	89 45 f0	 mov	 DWORD PTR _wp$[ebp], eax
$LN2@draw_debug:

; 2715 : 
; 2716 : 	while (wp)

  0012e	83 7d f0 00	 cmp	 DWORD PTR _wp$[ebp], 0
  00132	0f 84 76 01 00
	00		 je	 $LN3@draw_debug

; 2717 : 	{
; 2718 : 
; 2719 : 		get_local_entity_vec3d (wp, VEC3D_TYPE_POSITION, &wp_pos);

  00138	83 7d f0 00	 cmp	 DWORD PTR _wp$[ebp], 0
  0013c	74 0a		 je	 SHORT $LN15@draw_debug
  0013e	8b 45 f0	 mov	 eax, DWORD PTR _wp$[ebp]
  00141	8b 08		 mov	 ecx, DWORD PTR [eax]
  00143	89 4d 90	 mov	 DWORD PTR tv150[ebp], ecx
  00146	eb 21		 jmp	 SHORT $LN16@draw_debug
$LN15@draw_debug:
  00148	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_debug_takeoff_landing_routes@@YGXPAUENTITY@@@Z@4JA
  0014e	83 c2 1c	 add	 edx, 28			; 0000001cH
  00151	52		 push	 edx
  00152	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00157	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0015c	50		 push	 eax
  0015d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00162	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv150[ebp], 0
$LN16@draw_debug:
  00169	b9 01 00 00 00	 mov	 ecx, 1
  0016e	85 c9		 test	 ecx, ecx
  00170	74 09		 je	 SHORT $LN17@draw_debug
  00172	c7 45 8c 08 00
	00 00		 mov	 DWORD PTR tv158[ebp], 8
  00179	eb 21		 jmp	 SHORT $LN18@draw_debug
$LN17@draw_debug:
  0017b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_debug_takeoff_landing_routes@@YGXPAUENTITY@@@Z@4JA
  00181	83 c2 1c	 add	 edx, 28			; 0000001cH
  00184	52		 push	 edx
  00185	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0018a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0018f	50		 push	 eax
  00190	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00195	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv158[ebp], 0
$LN18@draw_debug:
  0019c	8d 4d e4	 lea	 ecx, DWORD PTR _wp_pos$[ebp]
  0019f	51		 push	 ecx
  001a0	6a 08		 push	 8
  001a2	8b 55 f0	 mov	 edx, DWORD PTR _wp$[ebp]
  001a5	52		 push	 edx
  001a6	6b 45 90 60	 imul	 eax, DWORD PTR tv150[ebp], 96
  001aa	8b 4d 8c	 mov	 ecx, DWORD PTR tv158[ebp]
  001ad	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  001b4	ff d2		 call	 edx

; 2720 : 
; 2721 : 		get_local_entity_formation_position_offset (en, wp, &offset);

  001b6	8d 45 d8	 lea	 eax, DWORD PTR _offset$[ebp]
  001b9	50		 push	 eax
  001ba	8b 4d f0	 mov	 ecx, DWORD PTR _wp$[ebp]
  001bd	51		 push	 ecx
  001be	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  001c1	52		 push	 edx
  001c2	e8 00 00 00 00	 call	 ?get_local_entity_formation_position_offset@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_local_entity_formation_position_offset

; 2722 : 
; 2723 : 		wp_pos.x += offset.x;

  001c7	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _wp_pos$[ebp]
  001cc	f3 0f 58 45 d8	 addss	 xmm0, DWORD PTR _offset$[ebp]
  001d1	f3 0f 11 45 e4	 movss	 DWORD PTR _wp_pos$[ebp], xmm0

; 2724 : 		wp_pos.y += offset.y;

  001d6	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _wp_pos$[ebp+4]
  001db	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _offset$[ebp+4]
  001e0	f3 0f 11 45 e8	 movss	 DWORD PTR _wp_pos$[ebp+4], xmm0

; 2725 : 		wp_pos.z += offset.z;

  001e5	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _wp_pos$[ebp+8]
  001ea	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _offset$[ebp+8]
  001ef	f3 0f 11 45 ec	 movss	 DWORD PTR _wp_pos$[ebp+8], xmm0

; 2726 : 
; 2727 : 		create_vectored_debug_3d_object (&wp_pos, (vec3d *) raw->ac.mob.attitude [1], OBJECT_3D_RED_ARROW, 0, 2.0);

  001f4	51		 push	 ecx
  001f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  001fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00202	51		 push	 ecx
  00203	0f 57 c0	 xorps	 xmm0, xmm0
  00206	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020b	68 65 0a 00 00	 push	 2661			; 00000a65H
  00210	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00215	c1 e0 00	 shl	 eax, 0
  00218	8b 4d d4	 mov	 ecx, DWORD PTR _raw$[ebp]
  0021b	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  0021f	52		 push	 edx
  00220	8d 45 e4	 lea	 eax, DWORD PTR _wp_pos$[ebp]
  00223	50		 push	 eax
  00224	e8 00 00 00 00	 call	 ?create_vectored_debug_3d_object@@YGPAUDEBUG_3D_OBJECT@@PAUVEC3D@@0HMM@Z ; create_vectored_debug_3d_object

; 2728 : 
; 2729 : 		wp = get_local_entity_child_succ (wp, LIST_TYPE_WAYPOINT);

  00229	83 7d f0 00	 cmp	 DWORD PTR _wp$[ebp], 0
  0022d	74 0a		 je	 SHORT $LN19@draw_debug
  0022f	8b 45 f0	 mov	 eax, DWORD PTR _wp$[ebp]
  00232	8b 08		 mov	 ecx, DWORD PTR [eax]
  00234	89 4d 90	 mov	 DWORD PTR tv186[ebp], ecx
  00237	eb 21		 jmp	 SHORT $LN20@draw_debug
$LN19@draw_debug:
  00239	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_debug_takeoff_landing_routes@@YGXPAUENTITY@@@Z@4JA
  0023f	83 c2 26	 add	 edx, 38			; 00000026H
  00242	52		 push	 edx
  00243	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00248	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0024d	50		 push	 eax
  0024e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00253	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv186[ebp], 0
$LN20@draw_debug:
  0025a	b9 01 00 00 00	 mov	 ecx, 1
  0025f	85 c9		 test	 ecx, ecx
  00261	74 09		 je	 SHORT $LN21@draw_debug
  00263	c7 45 8c 2c 00
	00 00		 mov	 DWORD PTR tv194[ebp], 44 ; 0000002cH
  0026a	eb 21		 jmp	 SHORT $LN22@draw_debug
$LN21@draw_debug:
  0026c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_debug_takeoff_landing_routes@@YGXPAUENTITY@@@Z@4JA
  00272	83 c2 26	 add	 edx, 38			; 00000026H
  00275	52		 push	 edx
  00276	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0027b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00280	50		 push	 eax
  00281	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00286	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv194[ebp], 0
$LN22@draw_debug:
  0028d	6a 2c		 push	 44			; 0000002cH
  0028f	8b 4d f0	 mov	 ecx, DWORD PTR _wp$[ebp]
  00292	51		 push	 ecx
  00293	69 55 90 b4 00
	00 00		 imul	 edx, DWORD PTR tv186[ebp], 180
  0029a	8b 45 8c	 mov	 eax, DWORD PTR tv194[ebp]
  0029d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  002a4	ff d1		 call	 ecx
  002a6	89 45 f0	 mov	 DWORD PTR _wp$[ebp], eax

; 2730 : 	}

  002a9	e9 80 fe ff ff	 jmp	 $LN2@draw_debug
$LN3@draw_debug:

; 2731 : 
; 2732 : 	wp = get_local_landing_entity_route (landing, ENTITY_SUB_TYPE_TASK_LANDING);

  002ae	6a 0d		 push	 13			; 0000000dH
  002b0	8b 45 fc	 mov	 eax, DWORD PTR _landing$[ebp]
  002b3	50		 push	 eax
  002b4	e8 00 00 00 00	 call	 ?get_local_landing_entity_route@@YGPAUENTITY@@PAU1@H@Z ; get_local_landing_entity_route
  002b9	89 45 f0	 mov	 DWORD PTR _wp$[ebp], eax
$LN4@draw_debug:

; 2733 : 
; 2734 : 	while (wp)

  002bc	83 7d f0 00	 cmp	 DWORD PTR _wp$[ebp], 0
  002c0	0f 84 76 01 00
	00		 je	 $LN5@draw_debug

; 2735 : 	{
; 2736 : 
; 2737 : 		get_local_entity_vec3d (wp, VEC3D_TYPE_POSITION, &wp_pos);

  002c6	83 7d f0 00	 cmp	 DWORD PTR _wp$[ebp], 0
  002ca	74 0a		 je	 SHORT $LN23@draw_debug
  002cc	8b 45 f0	 mov	 eax, DWORD PTR _wp$[ebp]
  002cf	8b 08		 mov	 ecx, DWORD PTR [eax]
  002d1	89 4d 90	 mov	 DWORD PTR tv210[ebp], ecx
  002d4	eb 21		 jmp	 SHORT $LN24@draw_debug
$LN23@draw_debug:
  002d6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_debug_takeoff_landing_routes@@YGXPAUENTITY@@@Z@4JA
  002dc	83 c2 2e	 add	 edx, 46			; 0000002eH
  002df	52		 push	 edx
  002e0	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  002e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002ea	50		 push	 eax
  002eb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002f0	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv210[ebp], 0
$LN24@draw_debug:
  002f7	b9 01 00 00 00	 mov	 ecx, 1
  002fc	85 c9		 test	 ecx, ecx
  002fe	74 09		 je	 SHORT $LN25@draw_debug
  00300	c7 45 8c 08 00
	00 00		 mov	 DWORD PTR tv218[ebp], 8
  00307	eb 21		 jmp	 SHORT $LN26@draw_debug
$LN25@draw_debug:
  00309	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_debug_takeoff_landing_routes@@YGXPAUENTITY@@@Z@4JA
  0030f	83 c2 2e	 add	 edx, 46			; 0000002eH
  00312	52		 push	 edx
  00313	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00318	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0031d	50		 push	 eax
  0031e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00323	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv218[ebp], 0
$LN26@draw_debug:
  0032a	8d 4d e4	 lea	 ecx, DWORD PTR _wp_pos$[ebp]
  0032d	51		 push	 ecx
  0032e	6a 08		 push	 8
  00330	8b 55 f0	 mov	 edx, DWORD PTR _wp$[ebp]
  00333	52		 push	 edx
  00334	6b 45 90 60	 imul	 eax, DWORD PTR tv210[ebp], 96
  00338	8b 4d 8c	 mov	 ecx, DWORD PTR tv218[ebp]
  0033b	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  00342	ff d2		 call	 edx

; 2738 : 
; 2739 : 		get_local_entity_formation_position_offset (en, wp, &offset);

  00344	8d 45 d8	 lea	 eax, DWORD PTR _offset$[ebp]
  00347	50		 push	 eax
  00348	8b 4d f0	 mov	 ecx, DWORD PTR _wp$[ebp]
  0034b	51		 push	 ecx
  0034c	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0034f	52		 push	 edx
  00350	e8 00 00 00 00	 call	 ?get_local_entity_formation_position_offset@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_local_entity_formation_position_offset

; 2740 : 
; 2741 : 		wp_pos.x += offset.x;

  00355	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _wp_pos$[ebp]
  0035a	f3 0f 58 45 d8	 addss	 xmm0, DWORD PTR _offset$[ebp]
  0035f	f3 0f 11 45 e4	 movss	 DWORD PTR _wp_pos$[ebp], xmm0

; 2742 : 		wp_pos.y += offset.y;

  00364	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _wp_pos$[ebp+4]
  00369	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _offset$[ebp+4]
  0036e	f3 0f 11 45 e8	 movss	 DWORD PTR _wp_pos$[ebp+4], xmm0

; 2743 : 		wp_pos.z += offset.z;

  00373	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _wp_pos$[ebp+8]
  00378	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _offset$[ebp+8]
  0037d	f3 0f 11 45 ec	 movss	 DWORD PTR _wp_pos$[ebp+8], xmm0

; 2744 : 
; 2745 : 		create_vectored_debug_3d_object (&wp_pos, (vec3d *) raw->ac.mob.attitude [1], OBJECT_3D_RED_ARROW, 0, 2.0);

  00382	51		 push	 ecx
  00383	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0038b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00390	51		 push	 ecx
  00391	0f 57 c0	 xorps	 xmm0, xmm0
  00394	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00399	68 65 0a 00 00	 push	 2661			; 00000a65H
  0039e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003a3	c1 e0 00	 shl	 eax, 0
  003a6	8b 4d d4	 mov	 ecx, DWORD PTR _raw$[ebp]
  003a9	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  003ad	52		 push	 edx
  003ae	8d 45 e4	 lea	 eax, DWORD PTR _wp_pos$[ebp]
  003b1	50		 push	 eax
  003b2	e8 00 00 00 00	 call	 ?create_vectored_debug_3d_object@@YGPAUDEBUG_3D_OBJECT@@PAUVEC3D@@0HMM@Z ; create_vectored_debug_3d_object

; 2746 : 
; 2747 : 		wp = get_local_entity_child_succ (wp, LIST_TYPE_WAYPOINT);

  003b7	83 7d f0 00	 cmp	 DWORD PTR _wp$[ebp], 0
  003bb	74 0a		 je	 SHORT $LN27@draw_debug
  003bd	8b 45 f0	 mov	 eax, DWORD PTR _wp$[ebp]
  003c0	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c2	89 4d 90	 mov	 DWORD PTR tv246[ebp], ecx
  003c5	eb 21		 jmp	 SHORT $LN28@draw_debug
$LN27@draw_debug:
  003c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_debug_takeoff_landing_routes@@YGXPAUENTITY@@@Z@4JA
  003cd	83 c2 38	 add	 edx, 56			; 00000038H
  003d0	52		 push	 edx
  003d1	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  003d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003db	50		 push	 eax
  003dc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003e1	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv246[ebp], 0
$LN28@draw_debug:
  003e8	b9 01 00 00 00	 mov	 ecx, 1
  003ed	85 c9		 test	 ecx, ecx
  003ef	74 09		 je	 SHORT $LN29@draw_debug
  003f1	c7 45 8c 2c 00
	00 00		 mov	 DWORD PTR tv254[ebp], 44 ; 0000002cH
  003f8	eb 21		 jmp	 SHORT $LN30@draw_debug
$LN29@draw_debug:
  003fa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_debug_takeoff_landing_routes@@YGXPAUENTITY@@@Z@4JA
  00400	83 c2 38	 add	 edx, 56			; 00000038H
  00403	52		 push	 edx
  00404	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00409	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0040e	50		 push	 eax
  0040f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00414	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv254[ebp], 0
$LN30@draw_debug:
  0041b	6a 2c		 push	 44			; 0000002cH
  0041d	8b 4d f0	 mov	 ecx, DWORD PTR _wp$[ebp]
  00420	51		 push	 ecx
  00421	69 55 90 b4 00
	00 00		 imul	 edx, DWORD PTR tv246[ebp], 180
  00428	8b 45 8c	 mov	 eax, DWORD PTR tv254[ebp]
  0042b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00432	ff d1		 call	 ecx
  00434	89 45 f0	 mov	 DWORD PTR _wp$[ebp], eax

; 2748 : 	}

  00437	e9 80 fe ff ff	 jmp	 $LN4@draw_debug
$LN5@draw_debug:

; 2749 : }

  0043c	5f		 pop	 edi
  0043d	5e		 pop	 esi
  0043e	5b		 pop	 ebx
  0043f	8b e5		 mov	 esp, ebp
  00441	5d		 pop	 ebp
  00442	c2 04 00	 ret	 4
?draw_debug_takeoff_landing_routes@@YGXPAUENTITY@@@Z ENDP ; draw_debug_takeoff_landing_routes
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_move.c
;	COMDAT ?fixed_wing_movement_avoid_enemy_fire@@YGXPAUENTITY@@PAUVEC3D@@@Z
_TEXT	SEGMENT
_en$ = 8						; size = 4
_wp_pos$ = 12						; size = 4
?fixed_wing_movement_avoid_enemy_fire@@YGXPAUENTITY@@PAUVEC3D@@@Z PROC ; fixed_wing_movement_avoid_enemy_fire, COMDAT

; 1421 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1422 : #if 0
; 1423 : 	entity
; 1424 : 		*guide,
; 1425 : 		*persuer,
; 1426 : 		*aggressor;
; 1427 : 
; 1428 : 	float
; 1429 : 		d,
; 1430 : 		velocity,
; 1431 : 		guide_distance,
; 1432 : 		aggressor_distance,
; 1433 : 		evasion_distance;
; 1434 : 
; 1435 : 	vec3d
; 1436 : 		*xv,
; 1437 : 		*yv,
; 1438 : 		*pos,
; 1439 : 		*aggressor_pos;
; 1440 : 
; 1441 : 	ASSERT (en);
; 1442 : 
; 1443 : 	ASSERT (wp_pos);
; 1444 : 
; 1445 : 	if (!get_local_entity_int_value (en, INT_TYPE_AIRBORNE_AIRCRAFT))
; 1446 : 	{
; 1447 : 		return;
; 1448 : 	}
; 1449 : 
; 1450 : 	debug_filtered_log ("I am here!");
; 1451 : 
; 1452 : 
; 1453 : 	guide = get_local_entity_parent (en, LIST_TYPE_FOLLOWER);
; 1454 : 
; 1455 : 	ASSERT (guide);
; 1456 : 
; 1457 : 	if (!get_local_entity_int_value (guide, INT_TYPE_EVADE_FIRE))
; 1458 : 	{
; 1459 : 		return;
; 1460 : 	}
; 1461 : 
; 1462 : 	//
; 1463 : 	// see if something is shooting at the aircraft
; 1464 : 	//
; 1465 : 
; 1466 : 	persuer = get_local_entity_first_child (en, LIST_TYPE_TARGET);
; 1467 : 
; 1468 : 	while (persuer)
; 1469 : 	{
; 1470 : 		if (get_local_entity_type (persuer) == ENTITY_TYPE_WEAPON)
; 1471 : 		{
; 1472 : 			break;
; 1473 : 		}
; 1474 : 
; 1475 : 		persuer = get_local_entity_child_succ (persuer, LIST_TYPE_TARGET);
; 1476 : 	}
; 1477 : 
; 1478 : 	if (!persuer)
; 1479 : 	{
; 1480 : 		return;
; 1481 : 	}
; 1482 : 
; 1483 : 	aggressor = get_local_entity_parent (persuer, LIST_TYPE_LAUNCHED_WEAPON);
; 1484 : 
; 1485 : 	if (!aggressor)
; 1486 : 	{
; 1487 : 		return;
; 1488 : 	}
; 1489 : 
; 1490 : 	//
; 1491 : 	// find distances
; 1492 : 	//
; 1493 : 
; 1494 : 	pos = get_local_entity_vec3d_ptr (en, VEC3D_TYPE_POSITION);
; 1495 : 
; 1496 : 	aggressor_pos = get_local_entity_vec3d_ptr (aggressor, VEC3D_TYPE_POSITION);
; 1497 : 
; 1498 : 	aggressor_distance = get_3d_range (pos, aggressor_pos);
; 1499 : 
; 1500 : 	velocity = get_local_entity_float_value (en, FLOAT_TYPE_VELOCITY);
; 1501 : 
; 1502 : 	ASSERT (velocity > 0.0);
; 1503 : 
; 1504 : 	guide_distance = get_local_entity_float_value (en, FLOAT_TYPE_DISTANCE);
; 1505 : 
; 1506 : 	d = frac (aggressor_distance / velocity) * 2.0 * PI;
; 1507 : 
; 1508 : 	//
; 1509 : 	// find evasion distance = (sin (d) * guide_distance * C) / velocity;
; 1510 : 	//
; 1511 : 	// if we make the maximum deflection, C, equal to half the aircraft's velocity, the divide cancels...
; 1512 : 	//
; 1513 : 
; 1514 : 	evasion_distance = (sin (d) * guide_distance * 0.5);
; 1515 : 
; 1516 : 	xv = get_local_entity_vec3d_ptr (en, VEC3D_TYPE_XV);
; 1517 : 
; 1518 : 	wp_pos->x += (xv->x * evasion_distance);
; 1519 : 	wp_pos->z += (xv->z * evasion_distance);
; 1520 : 
; 1521 : 	//
; 1522 : 	// vertical (barrel roll)
; 1523 : 	//
; 1524 : 
; 1525 : 	evasion_distance = (cos (d) * guide_distance * 0.5);
; 1526 : 
; 1527 : 	yv = get_local_entity_vec3d_ptr (en, VEC3D_TYPE_YV);
; 1528 : 
; 1529 : 	wp_pos->y += (yv->y * evasion_distance);
; 1530 : #endif
; 1531 : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?fixed_wing_movement_avoid_enemy_fire@@YGXPAUENTITY@@PAUVEC3D@@@Z ENDP ; fixed_wing_movement_avoid_enemy_fire
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_move.c
;	COMDAT ?clear_fixed_wing_velocity@@YGXPAUENTITY@@@Z
_TEXT	SEGMENT
tv130 = -84						; size = 4
tv78 = -84						; size = 4
tv90 = -80						; size = 4
tv70 = -80						; size = 4
_velocity$ = -12					; size = 12
_en$ = 8						; size = 4
?clear_fixed_wing_velocity@@YGXPAUENTITY@@@Z PROC	; clear_fixed_wing_velocity, COMDAT

; 2588 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2589 : 	vec3d
; 2590 : 		velocity;
; 2591 : 
; 2592 : 	velocity.x = 0.0;

  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	f3 0f 11 45 f4	 movss	 DWORD PTR _velocity$[ebp], xmm0

; 2593 : 	velocity.y = 0.0;

  00011	0f 57 c0	 xorps	 xmm0, xmm0
  00014	f3 0f 11 45 f8	 movss	 DWORD PTR _velocity$[ebp+4], xmm0

; 2594 : 	velocity.z = 0.0;

  00019	0f 57 c0	 xorps	 xmm0, xmm0
  0001c	f3 0f 11 45 fc	 movss	 DWORD PTR _velocity$[ebp+8], xmm0

; 2595 : 
; 2596 : 	set_local_entity_vec3d (en, VEC3D_TYPE_MOTION_VECTOR, &velocity);

  00021	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00025	74 0a		 je	 SHORT $LN3@clear_fixe
  00027	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0002a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002c	89 4d b0	 mov	 DWORD PTR tv70[ebp], ecx
  0002f	eb 21		 jmp	 SHORT $LN4@clear_fixe
$LN3@clear_fixe:
  00031	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??clear_fixed_wing_velocity@@YGXPAUENTITY@@@Z@4JA
  00037	83 c2 08	 add	 edx, 8
  0003a	52		 push	 edx
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0004b	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@clear_fixe:
  00052	b9 01 00 00 00	 mov	 ecx, 1
  00057	85 c9		 test	 ecx, ecx
  00059	74 09		 je	 SHORT $LN5@clear_fixe
  0005b	c7 45 ac 06 00
	00 00		 mov	 DWORD PTR tv78[ebp], 6
  00062	eb 21		 jmp	 SHORT $LN6@clear_fixe
$LN5@clear_fixe:
  00064	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??clear_fixed_wing_velocity@@YGXPAUENTITY@@@Z@4JA
  0006a	83 c2 08	 add	 edx, 8
  0006d	52		 push	 edx
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00073	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0007e	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN6@clear_fixe:
  00085	8d 4d f4	 lea	 ecx, DWORD PTR _velocity$[ebp]
  00088	51		 push	 ecx
  00089	6a 06		 push	 6
  0008b	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0008e	52		 push	 edx
  0008f	6b 45 b0 60	 imul	 eax, DWORD PTR tv70[ebp], 96
  00093	8b 4d ac	 mov	 ecx, DWORD PTR tv78[ebp]
  00096	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_set_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  0009d	ff d2		 call	 edx

; 2597 : 
; 2598 : 	set_local_entity_float_value (en, FLOAT_TYPE_VELOCITY, 0.0);

  0009f	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  000a3	74 0a		 je	 SHORT $LN7@clear_fixe
  000a5	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000a8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000aa	89 4d b0	 mov	 DWORD PTR tv90[ebp], ecx
  000ad	eb 21		 jmp	 SHORT $LN8@clear_fixe
$LN7@clear_fixe:
  000af	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??clear_fixed_wing_velocity@@YGXPAUENTITY@@@Z@4JA
  000b5	83 c2 0a	 add	 edx, 10			; 0000000aH
  000b8	52		 push	 edx
  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  000be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000c9	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN8@clear_fixe:
  000d0	b9 01 00 00 00	 mov	 ecx, 1
  000d5	85 c9		 test	 ecx, ecx
  000d7	74 09		 je	 SHORT $LN9@clear_fixe
  000d9	c7 45 ac 93 00
	00 00		 mov	 DWORD PTR tv130[ebp], 147 ; 00000093H
  000e0	eb 21		 jmp	 SHORT $LN10@clear_fixe
$LN9@clear_fixe:
  000e2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??clear_fixed_wing_velocity@@YGXPAUENTITY@@@Z@4JA
  000e8	83 c2 0a	 add	 edx, 10			; 0000000aH
  000eb	52		 push	 edx
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  000f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  000f6	50		 push	 eax
  000f7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000fc	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN10@clear_fixe:
  00103	51		 push	 ecx
  00104	0f 57 c0	 xorps	 xmm0, xmm0
  00107	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010c	68 93 00 00 00	 push	 147			; 00000093H
  00111	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00114	51		 push	 ecx
  00115	69 55 b0 bc 02
	00 00		 imul	 edx, DWORD PTR tv90[ebp], 700
  0011c	8b 45 ac	 mov	 eax, DWORD PTR tv130[ebp]
  0011f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_local_entity_float_value@@3PAY0KP@P6GXPAUENTITY@@W4FLOAT_TYPES@@M@ZA[edx+eax*4]
  00126	ff d1		 call	 ecx

; 2599 : }

  00128	5f		 pop	 edi
  00129	5e		 pop	 esi
  0012a	5b		 pop	 ebx
  0012b	8b e5		 mov	 esp, ebp
  0012d	5d		 pop	 ebp
  0012e	c2 04 00	 ret	 4
?clear_fixed_wing_velocity@@YGXPAUENTITY@@@Z ENDP	; clear_fixed_wing_velocity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_move.c
;	COMDAT ?draw_debug_circle_line@@YGXPAUVEC3D@@M@Z
_TEXT	SEGMENT
tv147 = -100						; size = 4
tv137 = -100						; size = 4
_inc$ = -32						; size = 4
_loop$ = -28						; size = 4
_new_pos$ = -24						; size = 12
_old_pos$ = -12						; size = 12
_centre$ = 8						; size = 4
_radius$ = 12						; size = 4
?draw_debug_circle_line@@YGXPAUVEC3D@@M@Z PROC		; draw_debug_circle_line, COMDAT

; 2657 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2658 : 
; 2659 : 	vec3d
; 2660 : 		old_pos,
; 2661 : 		new_pos;
; 2662 : 
; 2663 : 	int
; 2664 : 		loop,
; 2665 : 		inc;
; 2666 : 
; 2667 : 	inc = 10;

  00009	c7 45 e0 0a 00
	00 00		 mov	 DWORD PTR _inc$[ebp], 10 ; 0000000aH

; 2668 : 
; 2669 : 	old_pos = *centre;

  00010	8b 45 08	 mov	 eax, DWORD PTR _centre$[ebp]
  00013	8b 08		 mov	 ecx, DWORD PTR [eax]
  00015	89 4d f4	 mov	 DWORD PTR _old_pos$[ebp], ecx
  00018	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001b	89 55 f8	 mov	 DWORD PTR _old_pos$[ebp+4], edx
  0001e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00021	89 45 fc	 mov	 DWORD PTR _old_pos$[ebp+8], eax

; 2670 : 
; 2671 : 	old_pos.z += radius;

  00024	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _old_pos$[ebp+8]
  00029	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _radius$[ebp]
  0002e	f3 0f 11 45 fc	 movss	 DWORD PTR _old_pos$[ebp+8], xmm0

; 2672 : 
; 2673 : 	for (loop = 0; loop < 360; loop += inc)

  00033	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  0003a	eb 09		 jmp	 SHORT $LN4@draw_debug
$LN2@draw_debug:
  0003c	8b 45 e4	 mov	 eax, DWORD PTR _loop$[ebp]
  0003f	03 45 e0	 add	 eax, DWORD PTR _inc$[ebp]
  00042	89 45 e4	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@draw_debug:
  00045	81 7d e4 68 01
	00 00		 cmp	 DWORD PTR _loop$[ebp], 360 ; 00000168H
  0004c	0f 8d a3 00 00
	00		 jge	 $LN3@draw_debug

; 2674 : 	{
; 2675 : 
; 2676 : 		new_pos.x = centre->x + (radius * sin (rad (loop)));

  00052	f3 0f 2a 45 e4	 cvtsi2ss xmm0, DWORD PTR _loop$[ebp]
  00057	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  0005f	51		 push	 ecx
  00060	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00065	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  0006a	d9 5d 9c	 fstp	 DWORD PTR tv137[ebp]
  0006d	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR tv137[ebp]
  00072	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _radius$[ebp]
  00077	8b 45 08	 mov	 eax, DWORD PTR _centre$[ebp]
  0007a	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  0007e	f3 0f 11 45 e8	 movss	 DWORD PTR _new_pos$[ebp], xmm0

; 2677 : 		new_pos.y = centre->y;

  00083	8b 45 08	 mov	 eax, DWORD PTR _centre$[ebp]
  00086	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0008b	f3 0f 11 45 ec	 movss	 DWORD PTR _new_pos$[ebp+4], xmm0

; 2678 : 		new_pos.z = centre->z + (radius * cos (rad (loop)));

  00090	f3 0f 2a 45 e4	 cvtsi2ss xmm0, DWORD PTR _loop$[ebp]
  00095	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  0009d	51		 push	 ecx
  0009e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a3	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  000a8	d9 5d 9c	 fstp	 DWORD PTR tv147[ebp]
  000ab	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR tv147[ebp]
  000b0	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _radius$[ebp]
  000b5	8b 45 08	 mov	 eax, DWORD PTR _centre$[ebp]
  000b8	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  000bd	f3 0f 11 45 f0	 movss	 DWORD PTR _new_pos$[ebp+8], xmm0

; 2679 : 
; 2680 : 		create_debug_3d_line (&old_pos, &new_pos, sys_col_yellow, 0);

  000c2	51		 push	 ecx
  000c3	0f 57 c0	 xorps	 xmm0, xmm0
  000c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_yellow@@3UREAL_COLOUR@@A ; sys_col_yellow
  000d0	50		 push	 eax
  000d1	8d 4d e8	 lea	 ecx, DWORD PTR _new_pos$[ebp]
  000d4	51		 push	 ecx
  000d5	8d 55 f4	 lea	 edx, DWORD PTR _old_pos$[ebp]
  000d8	52		 push	 edx
  000d9	e8 00 00 00 00	 call	 ?create_debug_3d_line@@YGPAUDEBUG_3D_LINE@@PAUVEC3D@@0UREAL_COLOUR@@M@Z ; create_debug_3d_line

; 2681 : 
; 2682 : 		old_pos = new_pos;

  000de	8b 45 e8	 mov	 eax, DWORD PTR _new_pos$[ebp]
  000e1	89 45 f4	 mov	 DWORD PTR _old_pos$[ebp], eax
  000e4	8b 4d ec	 mov	 ecx, DWORD PTR _new_pos$[ebp+4]
  000e7	89 4d f8	 mov	 DWORD PTR _old_pos$[ebp+4], ecx
  000ea	8b 55 f0	 mov	 edx, DWORD PTR _new_pos$[ebp+8]
  000ed	89 55 fc	 mov	 DWORD PTR _old_pos$[ebp+8], edx

; 2683 : 	}

  000f0	e9 47 ff ff ff	 jmp	 $LN2@draw_debug
$LN3@draw_debug:

; 2684 : }

  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 08 00	 ret	 8
?draw_debug_circle_line@@YGXPAUVEC3D@@M@Z ENDP		; draw_debug_circle_line
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_move.c
;	COMDAT ?draw_aircraft_turn_radius@@YGXPAUENTITY@@@Z
_TEXT	SEGMENT
_en$ = 8						; size = 4
?draw_aircraft_turn_radius@@YGXPAUENTITY@@@Z PROC	; draw_aircraft_turn_radius, COMDAT

; 2606 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2607 : #if 0
; 2608 : 	float
; 2609 : 		heading,
; 2610 : 		max_turn_radius,
; 2611 : 		wp_radius;
; 2612 : 
; 2613 : 	vec3d
; 2614 : 		test_point,
; 2615 : 		*wp_pos;
; 2616 : 
; 2617 : 	aircraft
; 2618 : 		*raw;
; 2619 : 
; 2620 : 	raw = get_local_entity_data (en);
; 2621 : 
; 2622 : 	heading = get_heading_from_attitude_matrix (raw->mob.attitude);
; 2623 : 
; 2624 : 	wp_pos = get_local_entity_vec3d_ptr (raw->waypoint_root.first_child, VEC3D_TYPE_POSITION);
; 2625 : 
; 2626 : 	create_vectored_debug_3d_object (wp_pos, (vec3d *) raw->mob.attitude [1], OBJECT_3D_RED_ARROW, 0, 2.0);
; 2627 : 
; 2628 : 	max_turn_radius = (raw->mob.velocity * raw->mob.velocity) / aircraft_database [raw->mob.sub_type].g_max;
; 2629 : 
; 2630 : 	wp_radius = get_local_entity_float_value (raw->waypoint_root.first_child, FLOAT_TYPE_RADIUS);
; 2631 : 
; 2632 : 	// draw RHS
; 2633 : 
; 2634 : 	test_point = raw->mob.position;
; 2635 : 
; 2636 : 	test_point.x += (max_turn_radius + wp_radius) * cos (heading);
; 2637 : 	test_point.z -= (max_turn_radius + wp_radius) * sin (heading);
; 2638 : 
; 2639 : 	draw_debug_circle_line (&test_point, max_turn_radius);
; 2640 : 
; 2641 : 	// draw LHS
; 2642 : 
; 2643 : 	test_point = raw->mob.position;
; 2644 : 
; 2645 : 	test_point.x -= (max_turn_radius + wp_radius) * cos (heading);
; 2646 : 	test_point.z += (max_turn_radius + wp_radius) * sin (heading);
; 2647 : 
; 2648 : 	draw_debug_circle_line (&test_point, max_turn_radius);
; 2649 : #endif
; 2650 : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?draw_aircraft_turn_radius@@YGXPAUENTITY@@@Z ENDP	; draw_aircraft_turn_radius
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_move.c
;	COMDAT ?fixed_wing_crash_movement@@YGXPAUENTITY@@@Z
_TEXT	SEGMENT
tv516 = -180						; size = 4
tv410 = -176						; size = 4
tv379 = -176						; size = 4
tv355 = -176						; size = 4
tv323 = -176						; size = 4
tv296 = -176						; size = 4
tv179 = -176						; size = 4
tv131 = -176						; size = 4
tv79 = -176						; size = 4
tv642 = -172						; size = 4
tv619 = -172						; size = 4
tv402 = -172						; size = 4
tv371 = -172						; size = 4
tv356 = -172						; size = 4
tv324 = -172						; size = 4
tv288 = -172						; size = 4
tv171 = -172						; size = 4
tv91 = -172						; size = 4
tv71 = -172						; size = 4
_m$ = -104						; size = 36
_face_normal$ = -68					; size = 4
_new_pos$ = -64						; size = 12
_velocity$ = -52					; size = 4
_pos$ = -48						; size = 4
_terrain_elevation$ = -44				; size = 4
_horizontal_speed$ = -40				; size = 4
_speed$ = -36						; size = 4
_delta_roll$ = -32					; size = 4
_delta_pitch$ = -28					; size = 4
_max_angle$ = -24					; size = 4
_required_angle$ = -20					; size = 4
_roll$ = -16						; size = 4
_pitch$ = -12						; size = 4
_heading$ = -8						; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
?fixed_wing_crash_movement@@YGXPAUENTITY@@@Z PROC	; fixed_wing_crash_movement, COMDAT

; 2388 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2389 : 
; 2390 : 	fixed_wing
; 2391 : 		*raw;
; 2392 : 
; 2393 : 	float
; 2394 : 		heading,
; 2395 : 		pitch,
; 2396 : 		roll,
; 2397 : 		required_angle,
; 2398 : 		max_angle,
; 2399 : 		delta_pitch,
; 2400 : 		delta_roll,
; 2401 : 		speed,
; 2402 : 		horizontal_speed,
; 2403 : 		terrain_elevation;
; 2404 : 
; 2405 : 	vec3d
; 2406 : 		*pos,
; 2407 : 		*velocity,
; 2408 : 		new_pos,
; 2409 : 		*face_normal;
; 2410 : 
; 2411 : 	matrix3x3
; 2412 : 		m;
; 2413 : 
; 2414 : 	raw = (fixed_wing *) get_local_entity_data (en);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00012	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 2415 : 
; 2416 : 	pos = get_local_entity_vec3d_ptr (en, VEC3D_TYPE_POSITION);

  00015	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00019	74 0d		 je	 SHORT $LN11@fixed_wing
  0001b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0001e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00020	89 8d 54 ff ff
	ff		 mov	 DWORD PTR tv71[ebp], ecx
  00026	eb 24		 jmp	 SHORT $LN12@fixed_wing
$LN11@fixed_wing:
  00028	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_crash_movement@@YGXPAUENTITY@@@Z@4JA
  0002e	83 c2 1c	 add	 edx, 28			; 0000001cH
  00031	52		 push	 edx
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00037	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00042	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv71[ebp], 0
$LN12@fixed_wing:
  0004c	b9 01 00 00 00	 mov	 ecx, 1
  00051	85 c9		 test	 ecx, ecx
  00053	74 0c		 je	 SHORT $LN13@fixed_wing
  00055	c7 85 50 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv79[ebp], 8
  0005f	eb 24		 jmp	 SHORT $LN14@fixed_wing
$LN13@fixed_wing:
  00061	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_crash_movement@@YGXPAUENTITY@@@Z@4JA
  00067	83 c2 1c	 add	 edx, 28			; 0000001cH
  0006a	52		 push	 edx
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00070	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0007b	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv79[ebp], 0
$LN14@fixed_wing:
  00085	6a 08		 push	 8
  00087	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0008a	51		 push	 ecx
  0008b	6b 95 54 ff ff
	ff 60		 imul	 edx, DWORD PTR tv71[ebp], 96
  00092	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR tv79[ebp]
  00098	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0009f	ff d1		 call	 ecx
  000a1	89 45 d0	 mov	 DWORD PTR _pos$[ebp], eax

; 2417 : 
; 2418 : 	velocity = get_local_entity_vec3d_ptr (en, VEC3D_TYPE_MOTION_VECTOR);

  000a4	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  000a8	74 0d		 je	 SHORT $LN15@fixed_wing
  000aa	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  000af	89 8d 54 ff ff
	ff		 mov	 DWORD PTR tv91[ebp], ecx
  000b5	eb 24		 jmp	 SHORT $LN16@fixed_wing
$LN15@fixed_wing:
  000b7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_crash_movement@@YGXPAUENTITY@@@Z@4JA
  000bd	83 c2 1e	 add	 edx, 30			; 0000001eH
  000c0	52		 push	 edx
  000c1	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  000c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000d1	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv91[ebp], 0
$LN16@fixed_wing:
  000db	b9 01 00 00 00	 mov	 ecx, 1
  000e0	85 c9		 test	 ecx, ecx
  000e2	74 0c		 je	 SHORT $LN17@fixed_wing
  000e4	c7 85 50 ff ff
	ff 06 00 00 00	 mov	 DWORD PTR tv131[ebp], 6
  000ee	eb 24		 jmp	 SHORT $LN18@fixed_wing
$LN17@fixed_wing:
  000f0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_crash_movement@@YGXPAUENTITY@@@Z@4JA
  000f6	83 c2 1e	 add	 edx, 30			; 0000001eH
  000f9	52		 push	 edx
  000fa	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0010a	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv131[ebp], 0
$LN18@fixed_wing:
  00114	6a 06		 push	 6
  00116	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00119	51		 push	 ecx
  0011a	6b 95 54 ff ff
	ff 60		 imul	 edx, DWORD PTR tv91[ebp], 96
  00121	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR tv131[ebp]
  00127	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0012e	ff d1		 call	 ecx
  00130	89 45 cc	 mov	 DWORD PTR _velocity$[ebp], eax

; 2419 : 
; 2420 : 	speed = get_3d_vector_magnitude (velocity);

  00133	8b 45 cc	 mov	 eax, DWORD PTR _velocity$[ebp]
  00136	50		 push	 eax
  00137	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  0013c	d9 5d dc	 fstp	 DWORD PTR _speed$[ebp]

; 2421 : 
; 2422 : 	//
; 2423 : 	// work out new position
; 2424 : 	//
; 2425 : 
; 2426 : 	new_pos.x = pos->x + (velocity->x * get_entity_movement_delta_time());

  0013f	8b 45 cc	 mov	 eax, DWORD PTR _velocity$[ebp]
  00142	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00146	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0014e	8b 4d d0	 mov	 ecx, DWORD PTR _pos$[ebp]
  00151	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  00155	f3 0f 11 45 c0	 movss	 DWORD PTR _new_pos$[ebp], xmm0

; 2427 : 	new_pos.z = pos->z + (velocity->z * get_entity_movement_delta_time());

  0015a	8b 45 cc	 mov	 eax, DWORD PTR _velocity$[ebp]
  0015d	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00162	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0016a	8b 4d d0	 mov	 ecx, DWORD PTR _pos$[ebp]
  0016d	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  00172	f3 0f 11 45 c8	 movss	 DWORD PTR _new_pos$[ebp+8], xmm0

; 2428 : 
; 2429 : 	bound_position_to_map_area (&new_pos);

  00177	8d 45 c0	 lea	 eax, DWORD PTR _new_pos$[ebp]
  0017a	50		 push	 eax
  0017b	e8 00 00 00 00	 call	 ?bound_position_to_map_area@@YGHPAUVEC3D@@@Z ; bound_position_to_map_area

; 2430 : 
; 2431 : 	get_3d_terrain_point_data (new_pos.x, new_pos.z, &raw->ac.terrain_info);

  00180	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00183	05 54 01 00 00	 add	 eax, 340		; 00000154H
  00188	50		 push	 eax
  00189	51		 push	 ecx
  0018a	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _new_pos$[ebp+8]
  0018f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00194	51		 push	 ecx
  00195	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _new_pos$[ebp]
  0019a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019f	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  001a4	dd d8		 fstp	 ST(0)

; 2432 : 
; 2433 : 	terrain_elevation = get_3d_terrain_point_data_elevation (&raw->ac.terrain_info);

  001a6	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  001a9	05 54 01 00 00	 add	 eax, 340		; 00000154H
  001ae	50		 push	 eax
  001af	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data_elevation@@YGMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data_elevation
  001b4	d9 5d d4	 fstp	 DWORD PTR _terrain_elevation$[ebp]

; 2434 : 
; 2435 : 	if (get_terrain_type_class (get_3d_terrain_point_data_type (&raw->ac.terrain_info)) == TERRAIN_CLASS_FOREST)

  001b7	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  001ba	05 54 01 00 00	 add	 eax, 340		; 00000154H
  001bf	50		 push	 eax
  001c0	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data_type@@YGHPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data_type
  001c5	50		 push	 eax
  001c6	e8 00 00 00 00	 call	 ?get_terrain_type_class@@YG?AW4TERRAIN_CLASSES@@H@Z ; get_terrain_type_class
  001cb	83 f8 02	 cmp	 eax, 2
  001ce	75 12		 jne	 SHORT $LN2@fixed_wing

; 2436 : 	{
; 2437 : 		//
; 2438 : 		// use last frame's altitude to stop aircraft from magically pinging to the top of the forest
; 2439 : 		//
; 2440 : 
; 2441 : 		new_pos.y = pos->y;

  001d0	8b 45 d0	 mov	 eax, DWORD PTR _pos$[ebp]
  001d3	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  001d8	f3 0f 11 45 c4	 movss	 DWORD PTR _new_pos$[ebp+4], xmm0

; 2442 : 	}
; 2443 : 	else

  001dd	e9 a7 00 00 00	 jmp	 $LN3@fixed_wing
$LN2@fixed_wing:

; 2444 : 	{
; 2445 : 		new_pos.y = terrain_elevation + get_local_entity_float_value (en, FLOAT_TYPE_CENTRE_OF_GRAVITY_TO_GROUND_DISTANCE);

  001e2	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  001e6	74 0d		 je	 SHORT $LN19@fixed_wing
  001e8	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  001eb	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ed	89 8d 54 ff ff
	ff		 mov	 DWORD PTR tv171[ebp], ecx
  001f3	eb 24		 jmp	 SHORT $LN20@fixed_wing
$LN19@fixed_wing:
  001f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_crash_movement@@YGXPAUENTITY@@@Z@4JA
  001fb	83 c2 39	 add	 edx, 57			; 00000039H
  001fe	52		 push	 edx
  001ff	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00204	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00209	50		 push	 eax
  0020a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0020f	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv171[ebp], 0
$LN20@fixed_wing:
  00219	b9 01 00 00 00	 mov	 ecx, 1
  0021e	85 c9		 test	 ecx, ecx
  00220	74 0c		 je	 SHORT $LN21@fixed_wing
  00222	c7 85 50 ff ff
	ff 12 00 00 00	 mov	 DWORD PTR tv179[ebp], 18 ; 00000012H
  0022c	eb 24		 jmp	 SHORT $LN22@fixed_wing
$LN21@fixed_wing:
  0022e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_crash_movement@@YGXPAUENTITY@@@Z@4JA
  00234	83 c2 39	 add	 edx, 57			; 00000039H
  00237	52		 push	 edx
  00238	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0023d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00242	50		 push	 eax
  00243	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00248	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv179[ebp], 0
$LN22@fixed_wing:
  00252	6a 12		 push	 18			; 00000012H
  00254	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00257	51		 push	 ecx
  00258	69 95 54 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv171[ebp], 700
  00262	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR tv179[ebp]
  00268	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  0026f	ff d1		 call	 ecx
  00271	d9 9d 4c ff ff
	ff		 fstp	 DWORD PTR tv516[ebp]
  00277	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR tv516[ebp]
  0027f	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _terrain_elevation$[ebp]
  00284	f3 0f 11 45 c4	 movss	 DWORD PTR _new_pos$[ebp+4], xmm0
$LN3@fixed_wing:

; 2446 : 	}
; 2447 : 
; 2448 : 	//
; 2449 : 	// update attitude
; 2450 : 	//
; 2451 : 
; 2452 : 	heading = get_heading_from_attitude_matrix (raw->ac.mob.attitude);

  00289	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0028e	d1 e0		 shl	 eax, 1
  00290	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00293	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  00297	b8 04 00 00 00	 mov	 eax, 4
  0029c	d1 e0		 shl	 eax, 1
  0029e	51		 push	 ecx
  0029f	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  002a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a9	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  002ae	d1 e1		 shl	 ecx, 1
  002b0	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  002b3	8d 44 0a 10	 lea	 eax, DWORD PTR [edx+ecx+16]
  002b7	b9 04 00 00 00	 mov	 ecx, 4
  002bc	6b d1 00	 imul	 edx, ecx, 0
  002bf	51		 push	 ecx
  002c0	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  002c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ca	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  002cf	d9 5d f8	 fstp	 DWORD PTR _heading$[ebp]

; 2453 : 
; 2454 : 	pitch = get_pitch_from_attitude_matrix (raw->ac.mob.attitude);

  002d2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002d7	d1 e0		 shl	 eax, 1
  002d9	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  002dc	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  002e0	b8 04 00 00 00	 mov	 eax, 4
  002e5	c1 e0 00	 shl	 eax, 0
  002e8	51		 push	 ecx
  002e9	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  002ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f3	e8 00 00 00 00	 call	 ?asin@@YGMM@Z		; asin
  002f8	d9 5d f4	 fstp	 DWORD PTR _pitch$[ebp]

; 2455 : 
; 2456 : 	roll = get_roll_from_attitude_matrix (raw->ac.mob.attitude);

  002fb	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00300	c1 e0 00	 shl	 eax, 0
  00303	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00306	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  0030a	b8 04 00 00 00	 mov	 eax, 4
  0030f	c1 e0 00	 shl	 eax, 0
  00312	51		 push	 ecx
  00313	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00318	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0031d	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00322	6b d1 00	 imul	 edx, ecx, 0
  00325	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00328	8d 4c 10 10	 lea	 ecx, DWORD PTR [eax+edx+16]
  0032c	ba 04 00 00 00	 mov	 edx, 4
  00331	c1 e2 00	 shl	 edx, 0
  00334	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00339	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00340	51		 push	 ecx
  00341	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00346	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  0034b	d9 5d f0	 fstp	 DWORD PTR _roll$[ebp]

; 2457 : 
; 2458 : 	face_normal = get_3d_terrain_point_data_normal (&raw->ac.terrain_info);

  0034e	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00351	05 54 01 00 00	 add	 eax, 340		; 00000154H
  00356	50		 push	 eax
  00357	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data_normal@@YGPAUVEC3D@@PAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data_normal
  0035c	89 45 bc	 mov	 DWORD PTR _face_normal$[ebp], eax

; 2459 : 
; 2460 : 	get_3d_transformation_matrix_from_face_normal_and_heading (m, face_normal, heading);

  0035f	51		 push	 ecx
  00360	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _heading$[ebp]
  00365	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036a	8b 45 bc	 mov	 eax, DWORD PTR _face_normal$[ebp]
  0036d	50		 push	 eax
  0036e	8d 4d 98	 lea	 ecx, DWORD PTR _m$[ebp]
  00371	51		 push	 ecx
  00372	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix_from_face_normal_and_heading@@YGXQAY02MPBUVEC3D@@M@Z ; get_3d_transformation_matrix_from_face_normal_and_heading

; 2461 : 
; 2462 : 	//
; 2463 : 	// update velocity
; 2464 : 	//
; 2465 : 
; 2466 : 	horizontal_speed = sqrt ((velocity->x * velocity->x) + (velocity->z * velocity->z));

  00377	8b 45 cc	 mov	 eax, DWORD PTR _velocity$[ebp]
  0037a	8b 4d cc	 mov	 ecx, DWORD PTR _velocity$[ebp]
  0037d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00381	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  00385	8b 55 cc	 mov	 edx, DWORD PTR _velocity$[ebp]
  00388	8b 45 cc	 mov	 eax, DWORD PTR _velocity$[ebp]
  0038b	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [edx+8]
  00390	f3 0f 59 48 08	 mulss	 xmm1, DWORD PTR [eax+8]
  00395	f3 0f 58 c1	 addss	 xmm0, xmm1
  00399	51		 push	 ecx
  0039a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039f	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  003a4	d9 5d d8	 fstp	 DWORD PTR _horizontal_speed$[ebp]

; 2467 : 
; 2468 : 	if (speed > 0.0)

  003a7	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _speed$[ebp]
  003ac	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  003b4	76 64		 jbe	 SHORT $LN4@fixed_wing

; 2469 : 	{
; 2470 : 		normalise_3d_vector_given_magnitude (velocity, speed);

  003b6	51		 push	 ecx
  003b7	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _speed$[ebp]
  003bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c1	8b 45 cc	 mov	 eax, DWORD PTR _velocity$[ebp]
  003c4	50		 push	 eax
  003c5	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 2471 : 
; 2472 : 		horizontal_speed -= (horizontal_speed * get_entity_movement_delta_time());

  003ca	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _horizontal_speed$[ebp]
  003cf	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  003d7	f3 0f 10 4d d8	 movss	 xmm1, DWORD PTR _horizontal_speed$[ebp]
  003dc	f3 0f 5c c8	 subss	 xmm1, xmm0
  003e0	f3 0f 11 4d d8	 movss	 DWORD PTR _horizontal_speed$[ebp], xmm1

; 2473 : 
; 2474 : 		velocity->x *= horizontal_speed;

  003e5	8b 45 cc	 mov	 eax, DWORD PTR _velocity$[ebp]
  003e8	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  003ec	f3 0f 59 45 d8	 mulss	 xmm0, DWORD PTR _horizontal_speed$[ebp]
  003f1	8b 4d cc	 mov	 ecx, DWORD PTR _velocity$[ebp]
  003f4	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 2475 : 		velocity->y = 0.0;

  003f8	8b 45 cc	 mov	 eax, DWORD PTR _velocity$[ebp]
  003fb	0f 57 c0	 xorps	 xmm0, xmm0
  003fe	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 2476 : 		velocity->z *= horizontal_speed;

  00403	8b 45 cc	 mov	 eax, DWORD PTR _velocity$[ebp]
  00406	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0040b	f3 0f 59 45 d8	 mulss	 xmm0, DWORD PTR _horizontal_speed$[ebp]
  00410	8b 4d cc	 mov	 ecx, DWORD PTR _velocity$[ebp]
  00413	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 2477 : 	}
; 2478 : 	else

  00418	eb 20		 jmp	 SHORT $LN5@fixed_wing
$LN4@fixed_wing:

; 2479 : 	{
; 2480 : 		velocity->x = 0.0;

  0041a	8b 45 cc	 mov	 eax, DWORD PTR _velocity$[ebp]
  0041d	0f 57 c0	 xorps	 xmm0, xmm0
  00420	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 2481 : 		velocity->y = 0.0;

  00424	8b 45 cc	 mov	 eax, DWORD PTR _velocity$[ebp]
  00427	0f 57 c0	 xorps	 xmm0, xmm0
  0042a	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 2482 : 		velocity->z = 0.0;

  0042f	8b 45 cc	 mov	 eax, DWORD PTR _velocity$[ebp]
  00432	0f 57 c0	 xorps	 xmm0, xmm0
  00435	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0
$LN5@fixed_wing:

; 2483 : 	}
; 2484 : 
; 2485 : 	if (face_normal->y < 0.3)

  0043a	8b 45 bc	 mov	 eax, DWORD PTR _face_normal$[ebp]
  0043d	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  00442	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fd3333333333333
  0044a	66 0f 2f c8	 comisd	 xmm1, xmm0
  0044e	76 4d		 jbe	 SHORT $LN6@fixed_wing

; 2486 : 	{
; 2487 : 		velocity->x += (G * face_normal->x * get_entity_movement_delta_time());

  00450	8b 45 bc	 mov	 eax, DWORD PTR _face_normal$[ebp]
  00453	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@411cf5c3
  0045b	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  0045f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00467	8b 4d cc	 mov	 ecx, DWORD PTR _velocity$[ebp]
  0046a	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  0046e	8b 55 cc	 mov	 edx, DWORD PTR _velocity$[ebp]
  00471	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 2488 : 		velocity->z += (G * face_normal->z * get_entity_movement_delta_time());

  00475	8b 45 bc	 mov	 eax, DWORD PTR _face_normal$[ebp]
  00478	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@411cf5c3
  00480	f3 0f 59 40 08	 mulss	 xmm0, DWORD PTR [eax+8]
  00485	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0048d	8b 4d cc	 mov	 ecx, DWORD PTR _velocity$[ebp]
  00490	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  00495	8b 55 cc	 mov	 edx, DWORD PTR _velocity$[ebp]
  00498	f3 0f 11 42 08	 movss	 DWORD PTR [edx+8], xmm0
$LN6@fixed_wing:

; 2489 : 	}
; 2490 : 
; 2491 : 	speed = get_3d_vector_magnitude (velocity);

  0049d	8b 45 cc	 mov	 eax, DWORD PTR _velocity$[ebp]
  004a0	50		 push	 eax
  004a1	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  004a6	d9 5d dc	 fstp	 DWORD PTR _speed$[ebp]

; 2492 : 
; 2493 : 	if (speed < 1.0)

  004a9	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _speed$[ebp]
  004ae	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  004b6	66 0f 2f c8	 comisd	 xmm1, xmm0
  004ba	76 0e		 jbe	 SHORT $LN7@fixed_wing

; 2494 : 	{
; 2495 : 		clear_fixed_wing_velocity (en);

  004bc	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  004bf	50		 push	 eax
  004c0	e8 00 00 00 00	 call	 ?clear_fixed_wing_velocity@@YGXPAUENTITY@@@Z ; clear_fixed_wing_velocity

; 2496 : 	}
; 2497 : 	else

  004c5	e9 9d 00 00 00	 jmp	 $LN8@fixed_wing
$LN7@fixed_wing:

; 2498 : 	{
; 2499 : 		set_local_entity_float_value (en, FLOAT_TYPE_VELOCITY, speed);

  004ca	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  004ce	74 0d		 je	 SHORT $LN23@fixed_wing
  004d0	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  004d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  004d5	89 8d 54 ff ff
	ff		 mov	 DWORD PTR tv288[ebp], ecx
  004db	eb 24		 jmp	 SHORT $LN24@fixed_wing
$LN23@fixed_wing:
  004dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_crash_movement@@YGXPAUENTITY@@@Z@4JA
  004e3	83 c2 6f	 add	 edx, 111		; 0000006fH
  004e6	52		 push	 edx
  004e7	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  004ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  004f1	50		 push	 eax
  004f2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004f7	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv288[ebp], 0
$LN24@fixed_wing:
  00501	b9 01 00 00 00	 mov	 ecx, 1
  00506	85 c9		 test	 ecx, ecx
  00508	74 0c		 je	 SHORT $LN25@fixed_wing
  0050a	c7 85 50 ff ff
	ff 93 00 00 00	 mov	 DWORD PTR tv296[ebp], 147 ; 00000093H
  00514	eb 24		 jmp	 SHORT $LN26@fixed_wing
$LN25@fixed_wing:
  00516	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_crash_movement@@YGXPAUENTITY@@@Z@4JA
  0051c	83 c2 6f	 add	 edx, 111		; 0000006fH
  0051f	52		 push	 edx
  00520	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00525	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0052a	50		 push	 eax
  0052b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00530	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv296[ebp], 0
$LN26@fixed_wing:
  0053a	51		 push	 ecx
  0053b	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _speed$[ebp]
  00540	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00545	68 93 00 00 00	 push	 147			; 00000093H
  0054a	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0054d	51		 push	 ecx
  0054e	69 95 54 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv288[ebp], 700
  00558	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR tv296[ebp]
  0055e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_local_entity_float_value@@3PAY0KP@P6GXPAUENTITY@@W4FLOAT_TYPES@@M@ZA[edx+eax*4]
  00565	ff d1		 call	 ecx
$LN8@fixed_wing:

; 2500 : 	}
; 2501 : 
; 2502 : 	//
; 2503 : 	// pitch
; 2504 : 	//
; 2505 : 
; 2506 : 	required_angle = get_pitch_from_attitude_matrix (m) + aircraft_database [raw->ac.mob.sub_type].destroyed_pitch_offset;

  00567	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0056c	d1 e0		 shl	 eax, 1
  0056e	8d 4c 05 98	 lea	 ecx, DWORD PTR _m$[ebp+eax]
  00572	ba 04 00 00 00	 mov	 edx, 4
  00577	c1 e2 00	 shl	 edx, 0
  0057a	51		 push	 ecx
  0057b	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00580	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00585	e8 00 00 00 00	 call	 ?asin@@YGMM@Z		; asin
  0058a	d9 9d 54 ff ff
	ff		 fstp	 DWORD PTR tv619[ebp]
  00590	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR tv619[ebp]
  00598	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0059b	69 08 f4 00 00
	00		 imul	 ecx, DWORD PTR [eax], 244
  005a1	f3 0f 58 81 7c
	00 00 00	 addss	 xmm0, DWORD PTR ?aircraft_database@@3PAUAIRCRAFT_DATA@@A[ecx+124]
  005a9	f3 0f 11 45 ec	 movss	 DWORD PTR _required_angle$[ebp], xmm0

; 2507 : 
; 2508 : 	max_angle = PI * get_entity_movement_delta_time ();

  005ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40490fdb
  005b6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  005be	f3 0f 11 45 e8	 movss	 DWORD PTR _max_angle$[ebp], xmm0

; 2509 : 
; 2510 : 	delta_pitch = bound (required_angle - pitch, -max_angle, max_angle);

  005c3	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _required_angle$[ebp]
  005c8	f3 0f 5c 45 f4	 subss	 xmm0, DWORD PTR _pitch$[ebp]
  005cd	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _max_angle$[ebp]
  005d2	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  005d9	0f 2f c8	 comiss	 xmm1, xmm0
  005dc	76 16		 jbe	 SHORT $LN29@fixed_wing
  005de	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _max_angle$[ebp]
  005e3	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  005ea	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR tv324[ebp], xmm0
  005f2	eb 41		 jmp	 SHORT $LN30@fixed_wing
$LN29@fixed_wing:
  005f4	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _required_angle$[ebp]
  005f9	f3 0f 5c 45 f4	 subss	 xmm0, DWORD PTR _pitch$[ebp]
  005fe	0f 2f 45 e8	 comiss	 xmm0, DWORD PTR _max_angle$[ebp]
  00602	76 0f		 jbe	 SHORT $LN27@fixed_wing
  00604	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _max_angle$[ebp]
  00609	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR tv323[ebp], xmm0
  00611	eb 12		 jmp	 SHORT $LN28@fixed_wing
$LN27@fixed_wing:
  00613	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _required_angle$[ebp]
  00618	f3 0f 5c 45 f4	 subss	 xmm0, DWORD PTR _pitch$[ebp]
  0061d	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR tv323[ebp], xmm0
$LN28@fixed_wing:
  00625	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR tv323[ebp]
  0062d	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR tv324[ebp], xmm0
$LN30@fixed_wing:
  00635	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR tv324[ebp]
  0063d	f3 0f 11 45 e4	 movss	 DWORD PTR _delta_pitch$[ebp], xmm0

; 2511 : 
; 2512 : 	pitch += delta_pitch;

  00642	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  00647	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _delta_pitch$[ebp]
  0064c	f3 0f 11 45 f4	 movss	 DWORD PTR _pitch$[ebp], xmm0

; 2513 : 
; 2514 : 	//
; 2515 : 	// roll
; 2516 : 	//
; 2517 : 
; 2518 : 	required_angle = get_roll_from_attitude_matrix (m) + aircraft_database [raw->ac.mob.sub_type].destroyed_bank_offset;

  00651	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00656	c1 e0 00	 shl	 eax, 0
  00659	8d 4c 05 98	 lea	 ecx, DWORD PTR _m$[ebp+eax]
  0065d	ba 04 00 00 00	 mov	 edx, 4
  00662	c1 e2 00	 shl	 edx, 0
  00665	51		 push	 ecx
  00666	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  0066b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00670	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00675	6b c8 00	 imul	 ecx, eax, 0
  00678	8d 54 0d 98	 lea	 edx, DWORD PTR _m$[ebp+ecx]
  0067c	b8 04 00 00 00	 mov	 eax, 4
  00681	c1 e0 00	 shl	 eax, 0
  00684	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00689	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00690	51		 push	 ecx
  00691	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00696	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  0069b	d9 9d 54 ff ff
	ff		 fstp	 DWORD PTR tv642[ebp]
  006a1	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR tv642[ebp]
  006a9	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  006ac	69 11 f4 00 00
	00		 imul	 edx, DWORD PTR [ecx], 244
  006b2	f3 0f 58 82 78
	00 00 00	 addss	 xmm0, DWORD PTR ?aircraft_database@@3PAUAIRCRAFT_DATA@@A[edx+120]
  006ba	f3 0f 11 45 ec	 movss	 DWORD PTR _required_angle$[ebp], xmm0

; 2519 : 
; 2520 : 	max_angle = PI * 0.75 * get_entity_movement_delta_time ();

  006bf	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?system_delta_time@@3MA
  006c7	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4002d97c88000000
  006cf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006d3	f3 0f 11 45 e8	 movss	 DWORD PTR _max_angle$[ebp], xmm0

; 2521 : 
; 2522 : 	delta_roll = bound (required_angle - roll, -max_angle, max_angle);

  006d8	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _required_angle$[ebp]
  006dd	f3 0f 5c 45 f0	 subss	 xmm0, DWORD PTR _roll$[ebp]
  006e2	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _max_angle$[ebp]
  006e7	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  006ee	0f 2f c8	 comiss	 xmm1, xmm0
  006f1	76 16		 jbe	 SHORT $LN33@fixed_wing
  006f3	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _max_angle$[ebp]
  006f8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  006ff	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR tv356[ebp], xmm0
  00707	eb 41		 jmp	 SHORT $LN34@fixed_wing
$LN33@fixed_wing:
  00709	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _required_angle$[ebp]
  0070e	f3 0f 5c 45 f0	 subss	 xmm0, DWORD PTR _roll$[ebp]
  00713	0f 2f 45 e8	 comiss	 xmm0, DWORD PTR _max_angle$[ebp]
  00717	76 0f		 jbe	 SHORT $LN31@fixed_wing
  00719	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _max_angle$[ebp]
  0071e	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR tv355[ebp], xmm0
  00726	eb 12		 jmp	 SHORT $LN32@fixed_wing
$LN31@fixed_wing:
  00728	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _required_angle$[ebp]
  0072d	f3 0f 5c 45 f0	 subss	 xmm0, DWORD PTR _roll$[ebp]
  00732	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR tv355[ebp], xmm0
$LN32@fixed_wing:
  0073a	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR tv355[ebp]
  00742	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR tv356[ebp], xmm0
$LN34@fixed_wing:
  0074a	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR tv356[ebp]
  00752	f3 0f 11 45 e0	 movss	 DWORD PTR _delta_roll$[ebp], xmm0

; 2523 : 
; 2524 : 	roll += delta_roll;

  00757	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  0075c	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _delta_roll$[ebp]
  00761	f3 0f 11 45 f0	 movss	 DWORD PTR _roll$[ebp], xmm0

; 2525 : 
; 2526 : 	//
; 2527 : 
; 2528 : 	get_3d_transformation_matrix (raw->ac.mob.attitude, heading, pitch, roll);

  00766	51		 push	 ecx
  00767	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  0076c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00771	51		 push	 ecx
  00772	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  00777	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077c	51		 push	 ecx
  0077d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _heading$[ebp]
  00782	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00787	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0078a	83 c0 10	 add	 eax, 16			; 00000010H
  0078d	50		 push	 eax
  0078e	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 2529 : 
; 2530 : 	//
; 2531 : 	// set new position
; 2532 : 	//
; 2533 : 
; 2534 : 	set_local_entity_vec3d (en, VEC3D_TYPE_POSITION, &new_pos);

  00793	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00797	74 0d		 je	 SHORT $LN35@fixed_wing
  00799	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0079c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0079e	89 8d 54 ff ff
	ff		 mov	 DWORD PTR tv371[ebp], ecx
  007a4	eb 27		 jmp	 SHORT $LN36@fixed_wing
$LN35@fixed_wing:
  007a6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_crash_movement@@YGXPAUENTITY@@@Z@4JA
  007ac	81 c2 92 00 00
	00		 add	 edx, 146		; 00000092H
  007b2	52		 push	 edx
  007b3	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  007b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  007bd	50		 push	 eax
  007be	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  007c3	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv371[ebp], 0
$LN36@fixed_wing:
  007cd	b9 01 00 00 00	 mov	 ecx, 1
  007d2	85 c9		 test	 ecx, ecx
  007d4	74 0c		 je	 SHORT $LN37@fixed_wing
  007d6	c7 85 50 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv379[ebp], 8
  007e0	eb 27		 jmp	 SHORT $LN38@fixed_wing
$LN37@fixed_wing:
  007e2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_crash_movement@@YGXPAUENTITY@@@Z@4JA
  007e8	81 c2 92 00 00
	00		 add	 edx, 146		; 00000092H
  007ee	52		 push	 edx
  007ef	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  007f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  007f9	50		 push	 eax
  007fa	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  007ff	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv379[ebp], 0
$LN38@fixed_wing:
  00809	8d 4d c0	 lea	 ecx, DWORD PTR _new_pos$[ebp]
  0080c	51		 push	 ecx
  0080d	6a 08		 push	 8
  0080f	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00812	52		 push	 edx
  00813	6b 85 54 ff ff
	ff 60		 imul	 eax, DWORD PTR tv371[ebp], 96
  0081a	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv379[ebp]
  00820	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_set_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  00827	ff d2		 call	 edx

; 2535 : 
; 2536 : 	//
; 2537 : 	// if aircraft has come to a stop, remove from update list
; 2538 : 	//
; 2539 : 
; 2540 : 	if ((speed == 0.0) && (delta_pitch <= 0.01) && (delta_roll <= 0.01) && (!raw->ac.mob.alive))

  00829	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _speed$[ebp]
  0082e	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00836	9f		 lahf
  00837	f6 c4 44	 test	 ah, 68			; 00000044H
  0083a	0f 8a d7 00 00
	00		 jp	 $LN9@fixed_wing
  00840	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _delta_pitch$[ebp]
  00845	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3f847ae147ae147b
  0084d	66 0f 2f c8	 comisd	 xmm1, xmm0
  00851	0f 82 c0 00 00
	00		 jb	 $LN9@fixed_wing
  00857	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _delta_roll$[ebp]
  0085c	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3f847ae147ae147b
  00864	66 0f 2f c8	 comisd	 xmm1, xmm0
  00868	0f 82 a9 00 00
	00		 jb	 $LN9@fixed_wing
  0086e	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00871	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  00874	83 e1 01	 and	 ecx, 1
  00877	0f 85 9a 00 00
	00		 jne	 $LN9@fixed_wing

; 2541 : 	{
; 2542 : 		set_local_entity_int_value (en, INT_TYPE_OPERATIONAL_STATE, OPERATIONAL_STATE_DEAD);

  0087d	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00881	74 0d		 je	 SHORT $LN39@fixed_wing
  00883	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00886	8b 08		 mov	 ecx, DWORD PTR [eax]
  00888	89 8d 54 ff ff
	ff		 mov	 DWORD PTR tv402[ebp], ecx
  0088e	eb 27		 jmp	 SHORT $LN40@fixed_wing
$LN39@fixed_wing:
  00890	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_crash_movement@@YGXPAUENTITY@@@Z@4JA
  00896	81 c2 9a 00 00
	00		 add	 edx, 154		; 0000009aH
  0089c	52		 push	 edx
  0089d	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  008a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  008a7	50		 push	 eax
  008a8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008ad	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv402[ebp], 0
$LN40@fixed_wing:
  008b7	b9 01 00 00 00	 mov	 ecx, 1
  008bc	85 c9		 test	 ecx, ecx
  008be	74 0c		 je	 SHORT $LN41@fixed_wing
  008c0	c7 85 50 ff ff
	ff 97 00 00 00	 mov	 DWORD PTR tv410[ebp], 151 ; 00000097H
  008ca	eb 27		 jmp	 SHORT $LN42@fixed_wing
$LN41@fixed_wing:
  008cc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_crash_movement@@YGXPAUENTITY@@@Z@4JA
  008d2	81 c2 9a 00 00
	00		 add	 edx, 154		; 0000009aH
  008d8	52		 push	 edx
  008d9	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  008de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  008e3	50		 push	 eax
  008e4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008e9	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv410[ebp], 0
$LN42@fixed_wing:
  008f3	6a 02		 push	 2
  008f5	68 97 00 00 00	 push	 151			; 00000097H
  008fa	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  008fd	51		 push	 ecx
  008fe	69 95 54 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv402[ebp], 1116
  00908	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR tv410[ebp]
  0090e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_local_entity_int_value@@3PAY0BBH@P6GXPAUENTITY@@W4INT_TYPES@@H@ZA[edx+eax*4]
  00915	ff d1		 call	 ecx
$LN9@fixed_wing:

; 2543 : 	}
; 2544 : }

  00917	5f		 pop	 edi
  00918	5e		 pop	 esi
  00919	5b		 pop	 ebx
  0091a	8b e5		 mov	 esp, ebp
  0091c	5d		 pop	 ebp
  0091d	c2 04 00	 ret	 4
?fixed_wing_crash_movement@@YGXPAUENTITY@@@Z ENDP	; fixed_wing_crash_movement
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_move.c
;	COMDAT ?fixed_wing_taxi@@YGXPAUENTITY@@PAUVEC3D@@11M@Z
_TEXT	SEGMENT
tv239 = -168						; size = 8
tv587 = -164						; size = 4
tv468 = -164						; size = 4
tv373 = -160						; size = 4
tv240 = -160						; size = 8
tv183 = -160						; size = 4
tv158 = -160						; size = 4
tv136 = -160						; size = 4
tv79 = -160						; size = 4
tv365 = -156						; size = 4
tv175 = -156						; size = 4
tv150 = -156						; size = 4
tv128 = -156						; size = 4
tv71 = -156						; size = 4
$T1 = -152						; size = 4
$T2 = -148						; size = 4
$T3 = -144						; size = 4
$T4 = -140						; size = 4
$T5 = -136						; size = 4
$T6 = -132						; size = 4
_desired_velocity$ = -64				; size = 4
_new_pitch$ = -60					; size = 4
_new_heading$ = -56					; size = 4
_desired_heading$ = -52					; size = 4
_current_pitch$ = -48					; size = 4
_current_heading$ = -44					; size = 4
_delta_heading$ = -40					; size = 4
_wp_vel$ = -36						; size = 4
_wp_vec$ = -32						; size = 12
_wp_pos$ = -20						; size = 12
_raw$ = -8						; size = 4
_guide$ = -4						; size = 4
_en$ = 8						; size = 4
_current_pos$ = 12					; size = 4
_dist$ = 16						; size = 4
_new_pos$ = 20						; size = 4
_ter_elev$ = 24						; size = 4
?fixed_wing_taxi@@YGXPAUENTITY@@PAUVEC3D@@11M@Z PROC	; fixed_wing_taxi, COMDAT

; 987  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 988  : 	entity
; 989  : 		*guide;
; 990  : 
; 991  : 	fixed_wing
; 992  : 		*raw;
; 993  : 
; 994  : 	vec3d
; 995  : 		wp_pos,
; 996  : 		wp_vec;
; 997  : 
; 998  : 	float
; 999  : 		wp_vel,
; 1000 : 		delta_heading,
; 1001 : 		current_heading,
; 1002 : 		current_pitch,
; 1003 : 		desired_heading,
; 1004 : 		new_heading,
; 1005 : 		new_pitch,
; 1006 : 		desired_velocity;
; 1007 : 
; 1008 : 
; 1009 : 	raw = (fixed_wing *) get_local_entity_data (en);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00012	89 4d f8	 mov	 DWORD PTR _raw$[ebp], ecx

; 1010 : 
; 1011 : 	//
; 1012 : 	// aircraft on the ground
; 1013 : 	//
; 1014 : 
; 1015 : 	//
; 1016 : 	// GET WAYPOINT VELOCITY
; 1017 : 	//
; 1018 : 
; 1019 : 	guide = get_local_entity_parent (en, LIST_TYPE_FOLLOWER);

  00015	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00019	74 0d		 je	 SHORT $LN9@fixed_wing
  0001b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0001e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00020	89 8d 64 ff ff
	ff		 mov	 DWORD PTR tv71[ebp], ecx
  00026	eb 24		 jmp	 SHORT $LN10@fixed_wing
$LN9@fixed_wing:
  00028	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_taxi@@YGXPAUENTITY@@PAUVEC3D@@11M@Z@4JA
  0002e	83 c2 20	 add	 edx, 32			; 00000020H
  00031	52		 push	 edx
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00037	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00042	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv71[ebp], 0
$LN10@fixed_wing:
  0004c	b9 01 00 00 00	 mov	 ecx, 1
  00051	85 c9		 test	 ecx, ecx
  00053	74 0c		 je	 SHORT $LN11@fixed_wing
  00055	c7 85 60 ff ff
	ff 0d 00 00 00	 mov	 DWORD PTR tv79[ebp], 13	; 0000000dH
  0005f	eb 24		 jmp	 SHORT $LN12@fixed_wing
$LN11@fixed_wing:
  00061	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_taxi@@YGXPAUENTITY@@PAUVEC3D@@11M@Z@4JA
  00067	83 c2 20	 add	 edx, 32			; 00000020H
  0006a	52		 push	 edx
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00070	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0007b	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv79[ebp], 0
$LN12@fixed_wing:
  00085	6a 0d		 push	 13			; 0000000dH
  00087	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0008a	51		 push	 ecx
  0008b	69 95 64 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv71[ebp], 180
  00095	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv79[ebp]
  0009b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  000a2	ff d1		 call	 ecx
  000a4	89 45 fc	 mov	 DWORD PTR _guide$[ebp], eax

; 1020 : 
; 1021 : 	ASSERT (guide);

  000a7	83 7d fc 00	 cmp	 DWORD PTR _guide$[ebp], 0
  000ab	75 18		 jne	 SHORT $LN2@fixed_wing
  000ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??fixed_wing_taxi@@YGXPAUENTITY@@PAUVEC3D@@11M@Z@4JA
  000b2	83 c0 22	 add	 eax, 34			; 00000022H
  000b5	50		 push	 eax
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_05HLIEEKJG@guide@
  000c0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@fixed_wing:

; 1022 : 
; 1023 : 	wp_vel = get_local_entity_float_value (guide, FLOAT_TYPE_VELOCITY);

  000c5	83 7d fc 00	 cmp	 DWORD PTR _guide$[ebp], 0
  000c9	74 0d		 je	 SHORT $LN13@fixed_wing
  000cb	8b 45 fc	 mov	 eax, DWORD PTR _guide$[ebp]
  000ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d0	89 8d 64 ff ff
	ff		 mov	 DWORD PTR tv128[ebp], ecx
  000d6	eb 24		 jmp	 SHORT $LN14@fixed_wing
$LN13@fixed_wing:
  000d8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_taxi@@YGXPAUENTITY@@PAUVEC3D@@11M@Z@4JA
  000de	83 c2 24	 add	 edx, 36			; 00000024H
  000e1	52		 push	 edx
  000e2	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000ec	50		 push	 eax
  000ed	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000f2	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv128[ebp], 0
$LN14@fixed_wing:
  000fc	b9 01 00 00 00	 mov	 ecx, 1
  00101	85 c9		 test	 ecx, ecx
  00103	74 0c		 je	 SHORT $LN15@fixed_wing
  00105	c7 85 60 ff ff
	ff 93 00 00 00	 mov	 DWORD PTR tv136[ebp], 147 ; 00000093H
  0010f	eb 24		 jmp	 SHORT $LN16@fixed_wing
$LN15@fixed_wing:
  00111	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_taxi@@YGXPAUENTITY@@PAUVEC3D@@11M@Z@4JA
  00117	83 c2 24	 add	 edx, 36			; 00000024H
  0011a	52		 push	 edx
  0011b	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00120	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00125	50		 push	 eax
  00126	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0012b	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv136[ebp], 0
$LN16@fixed_wing:
  00135	68 93 00 00 00	 push	 147			; 00000093H
  0013a	8b 4d fc	 mov	 ecx, DWORD PTR _guide$[ebp]
  0013d	51		 push	 ecx
  0013e	69 95 64 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv128[ebp], 700
  00148	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv136[ebp]
  0014e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00155	ff d1		 call	 ecx
  00157	d9 5d dc	 fstp	 DWORD PTR _wp_vel$[ebp]

; 1024 : 
; 1025 : 	if (wp_vel == 0.0)

  0015a	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _wp_vel$[ebp]
  0015f	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00167	9f		 lahf
  00168	f6 c4 44	 test	 ah, 68			; 00000044H
  0016b	0f 8a 92 00 00
	00		 jp	 $LN3@fixed_wing

; 1026 : 	{
; 1027 : 		wp_vel = get_local_entity_float_value (en, FLOAT_TYPE_CRUISE_VELOCITY);

  00171	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00175	74 0d		 je	 SHORT $LN17@fixed_wing
  00177	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0017a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0017c	89 8d 64 ff ff
	ff		 mov	 DWORD PTR tv150[ebp], ecx
  00182	eb 24		 jmp	 SHORT $LN18@fixed_wing
$LN17@fixed_wing:
  00184	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_taxi@@YGXPAUENTITY@@PAUVEC3D@@11M@Z@4JA
  0018a	83 c2 28	 add	 edx, 40			; 00000028H
  0018d	52		 push	 edx
  0018e	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00193	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0019e	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], 0
$LN18@fixed_wing:
  001a8	b9 01 00 00 00	 mov	 ecx, 1
  001ad	85 c9		 test	 ecx, ecx
  001af	74 0c		 je	 SHORT $LN19@fixed_wing
  001b1	c7 85 60 ff ff
	ff 19 00 00 00	 mov	 DWORD PTR tv158[ebp], 25 ; 00000019H
  001bb	eb 24		 jmp	 SHORT $LN20@fixed_wing
$LN19@fixed_wing:
  001bd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_taxi@@YGXPAUENTITY@@PAUVEC3D@@11M@Z@4JA
  001c3	83 c2 28	 add	 edx, 40			; 00000028H
  001c6	52		 push	 edx
  001c7	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  001cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  001d1	50		 push	 eax
  001d2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001d7	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv158[ebp], 0
$LN20@fixed_wing:
  001e1	6a 19		 push	 25			; 00000019H
  001e3	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  001e6	51		 push	 ecx
  001e7	69 95 64 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv150[ebp], 700
  001f1	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv158[ebp]
  001f7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  001fe	ff d1		 call	 ecx
  00200	d9 5d dc	 fstp	 DWORD PTR _wp_vel$[ebp]
$LN3@fixed_wing:

; 1028 : 	}
; 1029 : 
; 1030 : 	//
; 1031 : 	// GET VECTOR TO WAYPOINT
; 1032 : 	//
; 1033 : 
; 1034 : 	fixed_wing_movement_get_waypoint_position (en, &wp_pos);

  00203	8d 45 ec	 lea	 eax, DWORD PTR _wp_pos$[ebp]
  00206	50		 push	 eax
  00207	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0020a	51		 push	 ecx
  0020b	e8 00 00 00 00	 call	 ?fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z ; fixed_wing_movement_get_waypoint_position

; 1035 : 
; 1036 : 	wp_vec.x = wp_pos.x - current_pos->x;

  00210	8b 45 0c	 mov	 eax, DWORD PTR _current_pos$[ebp]
  00213	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _wp_pos$[ebp]
  00218	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  0021c	f3 0f 11 45 e0	 movss	 DWORD PTR _wp_vec$[ebp], xmm0

; 1037 : 	wp_vec.y = wp_pos.y - (current_pos->y - get_local_entity_float_value (en, FLOAT_TYPE_CENTRE_OF_GRAVITY_TO_GROUND_DISTANCE));

  00221	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00225	74 0d		 je	 SHORT $LN21@fixed_wing
  00227	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0022a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0022c	89 8d 64 ff ff
	ff		 mov	 DWORD PTR tv175[ebp], ecx
  00232	eb 24		 jmp	 SHORT $LN22@fixed_wing
$LN21@fixed_wing:
  00234	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_taxi@@YGXPAUENTITY@@PAUVEC3D@@11M@Z@4JA
  0023a	83 c2 32	 add	 edx, 50			; 00000032H
  0023d	52		 push	 edx
  0023e	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00243	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00248	50		 push	 eax
  00249	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0024e	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv175[ebp], 0
$LN22@fixed_wing:
  00258	b9 01 00 00 00	 mov	 ecx, 1
  0025d	85 c9		 test	 ecx, ecx
  0025f	74 0c		 je	 SHORT $LN23@fixed_wing
  00261	c7 85 60 ff ff
	ff 12 00 00 00	 mov	 DWORD PTR tv183[ebp], 18 ; 00000012H
  0026b	eb 24		 jmp	 SHORT $LN24@fixed_wing
$LN23@fixed_wing:
  0026d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_taxi@@YGXPAUENTITY@@PAUVEC3D@@11M@Z@4JA
  00273	83 c2 32	 add	 edx, 50			; 00000032H
  00276	52		 push	 edx
  00277	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0027c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00281	50		 push	 eax
  00282	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00287	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv183[ebp], 0
$LN24@fixed_wing:
  00291	6a 12		 push	 18			; 00000012H
  00293	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00296	51		 push	 ecx
  00297	69 95 64 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv175[ebp], 700
  002a1	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv183[ebp]
  002a7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  002ae	ff d1		 call	 ecx
  002b0	d9 9d 5c ff ff
	ff		 fstp	 DWORD PTR tv468[ebp]
  002b6	8b 55 0c	 mov	 edx, DWORD PTR _current_pos$[ebp]
  002b9	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  002be	f3 0f 5c 85 5c
	ff ff ff	 subss	 xmm0, DWORD PTR tv468[ebp]
  002c6	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _wp_pos$[ebp+4]
  002cb	f3 0f 5c c8	 subss	 xmm1, xmm0
  002cf	f3 0f 11 4d e4	 movss	 DWORD PTR _wp_vec$[ebp+4], xmm1

; 1038 : 	wp_vec.z = wp_pos.z - current_pos->z;

  002d4	8b 45 0c	 mov	 eax, DWORD PTR _current_pos$[ebp]
  002d7	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _wp_pos$[ebp+8]
  002dc	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  002e1	f3 0f 11 45 e8	 movss	 DWORD PTR _wp_vec$[ebp+8], xmm0

; 1039 : 
; 1040 : 	desired_velocity = wp_vel;

  002e6	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _wp_vel$[ebp]
  002eb	f3 0f 11 45 c0	 movss	 DWORD PTR _desired_velocity$[ebp], xmm0

; 1041 : 
; 1042 : 	raw->ac.mob.velocity += min ((desired_velocity - raw->ac.mob.velocity), GROUND_ACCELERATION) * get_entity_movement_delta_time ();

  002f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  002f8	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR $T6[ebp], xmm0
  00300	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00303	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _desired_velocity$[ebp]
  00308	f3 0f 5c 40 40	 subss	 xmm0, DWORD PTR [eax+64]
  0030d	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR $T5[ebp], xmm0
  00315	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  0031b	51		 push	 ecx
  0031c	8d 95 78 ff ff
	ff		 lea	 edx, DWORD PTR $T5[ebp]
  00322	52		 push	 edx
  00323	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00328	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0032c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00334	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00337	f3 0f 58 40 40	 addss	 xmm0, DWORD PTR [eax+64]
  0033c	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  0033f	f3 0f 11 41 40	 movss	 DWORD PTR [ecx+64], xmm0

; 1043 : 
; 1044 : 	// heading
; 1045 : 
; 1046 : 		current_heading = get_heading_from_attitude_matrix (raw->ac.mob.attitude);

  00344	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00349	d1 e0		 shl	 eax, 1
  0034b	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  0034e	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  00352	b8 04 00 00 00	 mov	 eax, 4
  00357	d1 e0		 shl	 eax, 1
  00359	51		 push	 ecx
  0035a	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  0035f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00364	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00369	d1 e1		 shl	 ecx, 1
  0036b	8b 55 f8	 mov	 edx, DWORD PTR _raw$[ebp]
  0036e	8d 44 0a 10	 lea	 eax, DWORD PTR [edx+ecx+16]
  00372	b9 04 00 00 00	 mov	 ecx, 4
  00377	6b d1 00	 imul	 edx, ecx, 0
  0037a	51		 push	 ecx
  0037b	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00380	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00385	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  0038a	d9 5d d4	 fstp	 DWORD PTR _current_heading$[ebp]

; 1047 : 
; 1048 : 		desired_heading = atan2 (wp_vec.x, wp_vec.z);

  0038d	51		 push	 ecx
  0038e	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _wp_vec$[ebp+8]
  00393	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00398	51		 push	 ecx
  00399	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _wp_vec$[ebp]
  0039e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a3	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  003a8	d9 5d cc	 fstp	 DWORD PTR _desired_heading$[ebp]

; 1049 : 
; 1050 : 		delta_heading = desired_heading - current_heading;

  003ab	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _desired_heading$[ebp]
  003b0	f3 0f 5c 45 d4	 subss	 xmm0, DWORD PTR _current_heading$[ebp]
  003b5	f3 0f 11 45 d8	 movss	 DWORD PTR _delta_heading$[ebp], xmm0

; 1051 : 
; 1052 : 		if (delta_heading <= -PI)

  003ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0490fdb
  003c2	0f 2f 45 d8	 comiss	 xmm0, DWORD PTR _delta_heading$[ebp]
  003c6	72 12		 jb	 SHORT $LN4@fixed_wing

; 1053 : 		{
; 1054 : 
; 1055 : 			delta_heading += PI2;

  003c8	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _delta_heading$[ebp]
  003cd	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40c90fdb
  003d5	f3 0f 11 45 d8	 movss	 DWORD PTR _delta_heading$[ebp], xmm0
$LN4@fixed_wing:

; 1056 : 		}
; 1057 : 
; 1058 : 		if (delta_heading >= PI)

  003da	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _delta_heading$[ebp]
  003df	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@40490fdb
  003e6	72 12		 jb	 SHORT $LN5@fixed_wing

; 1059 : 		{
; 1060 : 
; 1061 : 			delta_heading -= PI2;

  003e8	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _delta_heading$[ebp]
  003ed	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40c90fdb
  003f5	f3 0f 11 45 d8	 movss	 DWORD PTR _delta_heading$[ebp], xmm0
$LN5@fixed_wing:

; 1062 : 		}
; 1063 : 
; 1064 : 		// calculate new attitude
; 1065 : 
; 1066 : 		delta_heading = bound (delta_heading, rad (-30.0), rad (30.0));// taxiing turn rate

  003fa	f3 0f 5a 45 d8	 cvtss2sd xmm0, DWORD PTR _delta_heading$[ebp]
  003ff	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bfe0c15236000000
  00407	66 0f 2f c8	 comisd	 xmm1, xmm0
  0040b	76 12		 jbe	 SHORT $LN27@fixed_wing
  0040d	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bfe0c15236000000
  00415	f2 0f 11 85 60
	ff ff ff	 movsd	 QWORD PTR tv240[ebp], xmm0
  0041d	eb 3e		 jmp	 SHORT $LN28@fixed_wing
$LN27@fixed_wing:
  0041f	f3 0f 5a 45 d8	 cvtss2sd xmm0, DWORD PTR _delta_heading$[ebp]
  00424	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fe0c15236000000
  0042c	76 12		 jbe	 SHORT $LN25@fixed_wing
  0042e	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fe0c15236000000
  00436	f2 0f 11 85 58
	ff ff ff	 movsd	 QWORD PTR tv239[ebp], xmm0
  0043e	eb 0d		 jmp	 SHORT $LN26@fixed_wing
$LN25@fixed_wing:
  00440	f3 0f 5a 45 d8	 cvtss2sd xmm0, DWORD PTR _delta_heading$[ebp]
  00445	f2 0f 11 85 58
	ff ff ff	 movsd	 QWORD PTR tv239[ebp], xmm0
$LN26@fixed_wing:
  0044d	f2 0f 10 85 58
	ff ff ff	 movsd	 xmm0, QWORD PTR tv239[ebp]
  00455	f2 0f 11 85 60
	ff ff ff	 movsd	 QWORD PTR tv240[ebp], xmm0
$LN28@fixed_wing:
  0045d	f2 0f 5a 85 60
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv240[ebp]
  00465	f3 0f 11 45 d8	 movss	 DWORD PTR _delta_heading$[ebp], xmm0

; 1067 : 
; 1068 : 		new_heading = current_heading + (delta_heading * get_entity_movement_delta_time ());

  0046a	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _delta_heading$[ebp]
  0046f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00477	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _current_heading$[ebp]
  0047c	f3 0f 11 45 c8	 movss	 DWORD PTR _new_heading$[ebp], xmm0

; 1069 : 
; 1070 : 		#if DEBUG_MODULE
; 1071 : 
; 1072 : 		debug_log ("current heading %f, desired heading %f, delta_heading %f",
; 1073 : 					current_heading, desired_heading, delta_heading);
; 1074 : 
; 1075 : 		#endif
; 1076 : 
; 1077 : 	current_pitch = get_pitch_from_attitude_matrix (raw->ac.mob.attitude);

  00481	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00486	d1 e0		 shl	 eax, 1
  00488	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  0048b	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  0048f	b8 04 00 00 00	 mov	 eax, 4
  00494	c1 e0 00	 shl	 eax, 0
  00497	51		 push	 ecx
  00498	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  0049d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a2	e8 00 00 00 00	 call	 ?asin@@YGMM@Z		; asin
  004a7	d9 5d d0	 fstp	 DWORD PTR _current_pitch$[ebp]

; 1078 : 
; 1079 : 	if (current_pitch > aircraft_database [raw->ac.mob.sub_type].fuselage_angle)

  004aa	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  004ad	69 08 f4 00 00
	00		 imul	 ecx, DWORD PTR [eax], 244
  004b3	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _current_pitch$[ebp]
  004b8	0f 2f 81 80 00
	00 00		 comiss	 xmm0, DWORD PTR ?aircraft_database@@3PAUAIRCRAFT_DATA@@A[ecx+128]
  004bf	76 2a		 jbe	 SHORT $LN6@fixed_wing

; 1080 : 	{
; 1081 : 		new_pitch = current_pitch + ((aircraft_database [raw->ac.mob.sub_type].fuselage_angle - current_pitch) * get_entity_movement_delta_time ());

  004c1	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  004c4	69 08 f4 00 00
	00		 imul	 ecx, DWORD PTR [eax], 244
  004ca	f3 0f 10 81 80
	00 00 00	 movss	 xmm0, DWORD PTR ?aircraft_database@@3PAUAIRCRAFT_DATA@@A[ecx+128]
  004d2	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _current_pitch$[ebp]
  004d7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  004df	f3 0f 58 45 d0	 addss	 xmm0, DWORD PTR _current_pitch$[ebp]
  004e4	f3 0f 11 45 c4	 movss	 DWORD PTR _new_pitch$[ebp], xmm0

; 1082 : 	}
; 1083 : 	else

  004e9	eb 16		 jmp	 SHORT $LN7@fixed_wing
$LN6@fixed_wing:

; 1084 : 	{
; 1085 : 		new_pitch = aircraft_database [raw->ac.mob.sub_type].fuselage_angle;

  004eb	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  004ee	69 08 f4 00 00
	00		 imul	 ecx, DWORD PTR [eax], 244
  004f4	f3 0f 10 81 80
	00 00 00	 movss	 xmm0, DWORD PTR ?aircraft_database@@3PAUAIRCRAFT_DATA@@A[ecx+128]
  004fc	f3 0f 11 45 c4	 movss	 DWORD PTR _new_pitch$[ebp], xmm0
$LN7@fixed_wing:

; 1086 : 	}
; 1087 : 
; 1088 : 	get_3d_transformation_matrix (raw->ac.mob.attitude, new_heading, new_pitch, 0.0);

  00501	51		 push	 ecx
  00502	0f 57 c0	 xorps	 xmm0, xmm0
  00505	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0050a	51		 push	 ecx
  0050b	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _new_pitch$[ebp]
  00510	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00515	51		 push	 ecx
  00516	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _new_heading$[ebp]
  0051b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00520	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00523	83 c0 10	 add	 eax, 16			; 00000010H
  00526	50		 push	 eax
  00527	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 1089 : 
; 1090 : 	dist->x = min (raw->ac.mob.velocity * raw->ac.mob.zv.x * get_entity_movement_delta_time (), fabs (wp_vec.x));

  0052c	51		 push	 ecx
  0052d	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _wp_vec$[ebp]
  00532	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00537	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  0053c	d9 9d 74 ff ff
	ff		 fstp	 DWORD PTR $T4[ebp]
  00542	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00545	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  00548	f3 0f 10 40 40	 movss	 xmm0, DWORD PTR [eax+64]
  0054d	f3 0f 59 41 28	 mulss	 xmm0, DWORD PTR [ecx+40]
  00552	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0055a	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR $T3[ebp], xmm0
  00562	8d 95 74 ff ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  00568	52		 push	 edx
  00569	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0056f	50		 push	 eax
  00570	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00575	8b 4d 10	 mov	 ecx, DWORD PTR _dist$[ebp]
  00578	8b 10		 mov	 edx, DWORD PTR [eax]
  0057a	89 11		 mov	 DWORD PTR [ecx], edx

; 1091 : 	dist->y = 0.0;

  0057c	8b 45 10	 mov	 eax, DWORD PTR _dist$[ebp]
  0057f	0f 57 c0	 xorps	 xmm0, xmm0
  00582	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 1092 : 	dist->z = min (raw->ac.mob.velocity * raw->ac.mob.zv.z * get_entity_movement_delta_time (), fabs (wp_vec.z));

  00587	51		 push	 ecx
  00588	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _wp_vec$[ebp+8]
  0058d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00592	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00597	d9 9d 6c ff ff
	ff		 fstp	 DWORD PTR $T2[ebp]
  0059d	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  005a0	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  005a3	f3 0f 10 40 40	 movss	 xmm0, DWORD PTR [eax+64]
  005a8	f3 0f 59 41 30	 mulss	 xmm0, DWORD PTR [ecx+48]
  005ad	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  005b5	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR $T1[ebp], xmm0
  005bd	8d 95 6c ff ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  005c3	52		 push	 edx
  005c4	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  005ca	50		 push	 eax
  005cb	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  005d0	8b 4d 10	 mov	 ecx, DWORD PTR _dist$[ebp]
  005d3	8b 10		 mov	 edx, DWORD PTR [eax]
  005d5	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 1093 : 
; 1094 : 	#if DEBUG_MODULE
; 1095 : 
; 1096 : 	debug_log ("current heading %d, desired heading %d, delta_heading %f, dist %f, %f, %f, sqr_range %f, vel %f",
; 1097 : 						current_heading, desired_heading, delta_heading, dist->x, dist->y, dist->z, sqr_range, raw->ac.mob.velocity);
; 1098 : 
; 1099 : 	#endif
; 1100 : 
; 1101 : 	new_pos->x = current_pos->x + dist->x;

  005d8	8b 45 0c	 mov	 eax, DWORD PTR _current_pos$[ebp]
  005db	8b 4d 10	 mov	 ecx, DWORD PTR _dist$[ebp]
  005de	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  005e2	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  005e6	8b 55 14	 mov	 edx, DWORD PTR _new_pos$[ebp]
  005e9	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 1102 : 	new_pos->y = current_pos->y + dist->y;

  005ed	8b 45 0c	 mov	 eax, DWORD PTR _current_pos$[ebp]
  005f0	8b 4d 10	 mov	 ecx, DWORD PTR _dist$[ebp]
  005f3	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  005f8	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  005fd	8b 55 14	 mov	 edx, DWORD PTR _new_pos$[ebp]
  00600	f3 0f 11 42 04	 movss	 DWORD PTR [edx+4], xmm0

; 1103 : 	new_pos->z = current_pos->z + dist->z;

  00605	8b 45 0c	 mov	 eax, DWORD PTR _current_pos$[ebp]
  00608	8b 4d 10	 mov	 ecx, DWORD PTR _dist$[ebp]
  0060b	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00610	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  00615	8b 55 14	 mov	 edx, DWORD PTR _new_pos$[ebp]
  00618	f3 0f 11 42 08	 movss	 DWORD PTR [edx+8], xmm0

; 1104 : 
; 1105 : 	bound_position_to_map_volume (new_pos);

  0061d	8b 45 14	 mov	 eax, DWORD PTR _new_pos$[ebp]
  00620	50		 push	 eax
  00621	e8 00 00 00 00	 call	 ?bound_position_to_map_volume@@YGHPAUVEC3D@@@Z ; bound_position_to_map_volume

; 1106 : 
; 1107 : 	new_pos->y = ter_elev + get_local_entity_float_value (en, FLOAT_TYPE_CENTRE_OF_GRAVITY_TO_GROUND_DISTANCE);

  00626	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0062a	74 0d		 je	 SHORT $LN29@fixed_wing
  0062c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0062f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00631	89 8d 64 ff ff
	ff		 mov	 DWORD PTR tv365[ebp], ecx
  00637	eb 24		 jmp	 SHORT $LN30@fixed_wing
$LN29@fixed_wing:
  00639	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_taxi@@YGXPAUENTITY@@PAUVEC3D@@11M@Z@4JA
  0063f	83 c2 78	 add	 edx, 120		; 00000078H
  00642	52		 push	 edx
  00643	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00648	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0064d	50		 push	 eax
  0064e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00653	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv365[ebp], 0
$LN30@fixed_wing:
  0065d	b9 01 00 00 00	 mov	 ecx, 1
  00662	85 c9		 test	 ecx, ecx
  00664	74 0c		 je	 SHORT $LN31@fixed_wing
  00666	c7 85 60 ff ff
	ff 12 00 00 00	 mov	 DWORD PTR tv373[ebp], 18 ; 00000012H
  00670	eb 24		 jmp	 SHORT $LN32@fixed_wing
$LN31@fixed_wing:
  00672	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_taxi@@YGXPAUENTITY@@PAUVEC3D@@11M@Z@4JA
  00678	83 c2 78	 add	 edx, 120		; 00000078H
  0067b	52		 push	 edx
  0067c	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00681	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00686	50		 push	 eax
  00687	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0068c	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv373[ebp], 0
$LN32@fixed_wing:
  00696	6a 12		 push	 18			; 00000012H
  00698	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0069b	51		 push	 ecx
  0069c	69 95 64 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv365[ebp], 700
  006a6	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv373[ebp]
  006ac	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  006b3	ff d1		 call	 ecx
  006b5	d9 9d 5c ff ff
	ff		 fstp	 DWORD PTR tv587[ebp]
  006bb	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR tv587[ebp]
  006c3	f3 0f 58 45 18	 addss	 xmm0, DWORD PTR _ter_elev$[ebp]
  006c8	8b 55 14	 mov	 edx, DWORD PTR _new_pos$[ebp]
  006cb	f3 0f 11 42 04	 movss	 DWORD PTR [edx+4], xmm0

; 1108 : 
; 1109 : 	raw->ac.mob.motion_vector.x = raw->ac.mob.velocity * raw->ac.mob.zv.x;

  006d0	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  006d3	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  006d6	f3 0f 10 40 40	 movss	 xmm0, DWORD PTR [eax+64]
  006db	f3 0f 59 41 28	 mulss	 xmm0, DWORD PTR [ecx+40]
  006e0	8b 55 f8	 mov	 edx, DWORD PTR _raw$[ebp]
  006e3	f3 0f 11 42 34	 movss	 DWORD PTR [edx+52], xmm0

; 1110 : 	raw->ac.mob.motion_vector.y = 0.0;

  006e8	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  006eb	0f 57 c0	 xorps	 xmm0, xmm0
  006ee	f3 0f 11 40 38	 movss	 DWORD PTR [eax+56], xmm0

; 1111 : 	raw->ac.mob.motion_vector.z = raw->ac.mob.velocity * raw->ac.mob.zv.z;

  006f3	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  006f6	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  006f9	f3 0f 10 40 40	 movss	 xmm0, DWORD PTR [eax+64]
  006fe	f3 0f 59 41 30	 mulss	 xmm0, DWORD PTR [ecx+48]
  00703	8b 55 f8	 mov	 edx, DWORD PTR _raw$[ebp]
  00706	f3 0f 11 42 3c	 movss	 DWORD PTR [edx+60], xmm0

; 1112 : }

  0070b	5f		 pop	 edi
  0070c	5e		 pop	 esi
  0070d	5b		 pop	 ebx
  0070e	8b e5		 mov	 esp, ebp
  00710	5d		 pop	 ebp
  00711	c2 14 00	 ret	 20			; 00000014H
?fixed_wing_taxi@@YGXPAUENTITY@@PAUVEC3D@@11M@Z ENDP	; fixed_wing_taxi
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_move.c
;	COMDAT ?fixed_wing_flight@@YGXPAUENTITY@@PAUVEC3D@@@Z
_TEXT	SEGMENT
tv137 = -112						; size = 4
tv79 = -112						; size = 4
tv129 = -108						; size = 4
tv71 = -108						; size = 4
_curr_wp$ = -40						; size = 4
_vel$ = -36						; size = 12
_acc$ = -24						; size = 12
_current_pos$ = -12					; size = 4
_raw$ = -8						; size = 4
_wp$ = -4						; size = 4
_en$ = 8						; size = 4
_new_pos$ = 12						; size = 4
?fixed_wing_flight@@YGXPAUENTITY@@PAUVEC3D@@@Z PROC	; fixed_wing_flight, COMDAT

; 930  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 931  : 	entity
; 932  : 		*wp;
; 933  : 
; 934  : 	fixed_wing
; 935  : 		*raw;
; 936  : 
; 937  : 	vec3d
; 938  : 		*current_pos,
; 939  : 		acc,
; 940  : 		vel;
; 941  : 
; 942  : 	int
; 943  : 		curr_wp;
; 944  : 
; 945  : 	raw = (fixed_wing *) get_local_entity_data(en);

  00009	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	89 4d f8	 mov	 DWORD PTR _raw$[ebp], ecx

; 946  : 
; 947  : 	current_pos = get_local_entity_vec3d_ptr (en, VEC3D_TYPE_POSITION);

  00012	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00016	74 0a		 je	 SHORT $LN5@fixed_wing
  00018	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	89 4d 94	 mov	 DWORD PTR tv71[ebp], ecx
  00020	eb 21		 jmp	 SHORT $LN6@fixed_wing
$LN5@fixed_wing:
  00022	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_flight@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00028	83 c2 11	 add	 edx, 17			; 00000011H
  0002b	52		 push	 edx
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0003c	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$LN6@fixed_wing:
  00043	b9 01 00 00 00	 mov	 ecx, 1
  00048	85 c9		 test	 ecx, ecx
  0004a	74 09		 je	 SHORT $LN7@fixed_wing
  0004c	c7 45 90 08 00
	00 00		 mov	 DWORD PTR tv79[ebp], 8
  00053	eb 21		 jmp	 SHORT $LN8@fixed_wing
$LN7@fixed_wing:
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_flight@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  0005b	83 c2 11	 add	 edx, 17			; 00000011H
  0005e	52		 push	 edx
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006f	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$LN8@fixed_wing:
  00076	6a 08		 push	 8
  00078	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0007b	51		 push	 ecx
  0007c	6b 55 94 60	 imul	 edx, DWORD PTR tv71[ebp], 96
  00080	8b 45 90	 mov	 eax, DWORD PTR tv79[ebp]
  00083	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0008a	ff d1		 call	 ecx
  0008c	89 45 f4	 mov	 DWORD PTR _current_pos$[ebp], eax

; 948  : 
; 949  : 	vel = raw->ac.mob.motion_vector;

  0008f	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00092	83 c0 34	 add	 eax, 52			; 00000034H
  00095	8b 08		 mov	 ecx, DWORD PTR [eax]
  00097	89 4d dc	 mov	 DWORD PTR _vel$[ebp], ecx
  0009a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0009d	89 55 e0	 mov	 DWORD PTR _vel$[ebp+4], edx
  000a0	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000a3	89 45 e4	 mov	 DWORD PTR _vel$[ebp+8], eax

; 950  : 
; 951  : 	//ASSERT (!check_zero_3d_vector (&vel));
; 952  : 
; 953  : 	wp = get_local_entity_current_waypoint (en);

  000a6	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 ?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_current_waypoint
  000af	89 45 fc	 mov	 DWORD PTR _wp$[ebp], eax

; 954  : 
; 955  : 	curr_wp = get_local_entity_int_value (wp, INT_TYPE_ENTITY_SUB_TYPE);

  000b2	83 7d fc 00	 cmp	 DWORD PTR _wp$[ebp], 0
  000b6	74 0a		 je	 SHORT $LN9@fixed_wing
  000b8	8b 45 fc	 mov	 eax, DWORD PTR _wp$[ebp]
  000bb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bd	89 4d 94	 mov	 DWORD PTR tv129[ebp], ecx
  000c0	eb 21		 jmp	 SHORT $LN10@fixed_wing
$LN9@fixed_wing:
  000c2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_flight@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  000c8	83 c2 19	 add	 edx, 25			; 00000019H
  000cb	52		 push	 edx
  000cc	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000dc	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv129[ebp], 0
$LN10@fixed_wing:
  000e3	b9 01 00 00 00	 mov	 ecx, 1
  000e8	85 c9		 test	 ecx, ecx
  000ea	74 09		 je	 SHORT $LN11@fixed_wing
  000ec	c7 45 90 34 00
	00 00		 mov	 DWORD PTR tv137[ebp], 52 ; 00000034H
  000f3	eb 21		 jmp	 SHORT $LN12@fixed_wing
$LN11@fixed_wing:
  000f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_flight@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  000fb	83 c2 19	 add	 edx, 25			; 00000019H
  000fe	52		 push	 edx
  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00104	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00109	50		 push	 eax
  0010a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0010f	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$LN12@fixed_wing:
  00116	6a 34		 push	 52			; 00000034H
  00118	8b 4d fc	 mov	 ecx, DWORD PTR _wp$[ebp]
  0011b	51		 push	 ecx
  0011c	69 55 94 5c 04
	00 00		 imul	 edx, DWORD PTR tv129[ebp], 1116
  00123	8b 45 90	 mov	 eax, DWORD PTR tv137[ebp]
  00126	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  0012d	ff d1		 call	 ecx
  0012f	89 45 d8	 mov	 DWORD PTR _curr_wp$[ebp], eax

; 956  : 
; 957  : 	if (curr_wp != ENTITY_SUB_TYPE_WAYPOINT_TOUCH_DOWN)

  00132	83 7d d8 1d	 cmp	 DWORD PTR _curr_wp$[ebp], 29 ; 0000001dH
  00136	0f 84 8a 00 00
	00		 je	 $LN2@fixed_wing

; 958  : 	{
; 959  : 		// get acceleration vector
; 960  : 		fixed_wing_navigator(en, &acc, &vel);

  0013c	8d 45 dc	 lea	 eax, DWORD PTR _vel$[ebp]
  0013f	50		 push	 eax
  00140	8d 4d e8	 lea	 ecx, DWORD PTR _acc$[ebp]
  00143	51		 push	 ecx
  00144	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00147	52		 push	 edx
  00148	e8 00 00 00 00	 call	 ?fixed_wing_navigator@@YGXPAUENTITY@@PAUVEC3D@@1@Z ; fixed_wing_navigator

; 961  : 
; 962  : 		// set new velocity
; 963  : 		fixed_wing_set_velocity (en, &acc, &vel);

  0014d	8d 45 dc	 lea	 eax, DWORD PTR _vel$[ebp]
  00150	50		 push	 eax
  00151	8d 4d e8	 lea	 ecx, DWORD PTR _acc$[ebp]
  00154	51		 push	 ecx
  00155	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00158	52		 push	 edx
  00159	e8 00 00 00 00	 call	 ?fixed_wing_set_velocity@@YGXPAUENTITY@@PAUVEC3D@@1@Z ; fixed_wing_set_velocity

; 964  : 
; 965  : 		//ASSERT (!check_zero_3d_vector (&vel));
; 966  : 
; 967  : 		// set new position
; 968  : 		new_pos->x = current_pos->x + vel.x * get_entity_movement_delta_time();

  0015e	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _vel$[ebp]
  00163	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0016b	8b 45 f4	 mov	 eax, DWORD PTR _current_pos$[ebp]
  0016e	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  00172	8b 4d 0c	 mov	 ecx, DWORD PTR _new_pos$[ebp]
  00175	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 969  : 		new_pos->y = current_pos->y + vel.y * get_entity_movement_delta_time();

  00179	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _vel$[ebp+4]
  0017e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00186	8b 45 f4	 mov	 eax, DWORD PTR _current_pos$[ebp]
  00189	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  0018e	8b 4d 0c	 mov	 ecx, DWORD PTR _new_pos$[ebp]
  00191	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 970  : 		new_pos->z = current_pos->z + vel.z * get_entity_movement_delta_time();

  00196	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _vel$[ebp+8]
  0019b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  001a3	8b 45 f4	 mov	 eax, DWORD PTR _current_pos$[ebp]
  001a6	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  001ab	8b 4d 0c	 mov	 ecx, DWORD PTR _new_pos$[ebp]
  001ae	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 971  : 
; 972  : 		// calculate attiude
; 973  : 		fixed_wing_calc_attitude (en, &acc, &vel);

  001b3	8d 45 dc	 lea	 eax, DWORD PTR _vel$[ebp]
  001b6	50		 push	 eax
  001b7	8d 4d e8	 lea	 ecx, DWORD PTR _acc$[ebp]
  001ba	51		 push	 ecx
  001bb	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  001be	52		 push	 edx
  001bf	e8 00 00 00 00	 call	 ?fixed_wing_calc_attitude@@YGXPAUENTITY@@PAUVEC3D@@1@Z ; fixed_wing_calc_attitude

; 974  : 	}
; 975  : 	else

  001c4	eb 0d		 jmp	 SHORT $LN3@fixed_wing
$LN2@fixed_wing:

; 976  : 	{
; 977  : 		fixed_wing_land_jet (en, new_pos);

  001c6	8b 45 0c	 mov	 eax, DWORD PTR _new_pos$[ebp]
  001c9	50		 push	 eax
  001ca	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  001cd	51		 push	 ecx
  001ce	e8 00 00 00 00	 call	 ?fixed_wing_land_jet@@YGXPAUENTITY@@PAUVEC3D@@@Z ; fixed_wing_land_jet
$LN3@fixed_wing:

; 978  : 	}
; 979  : 
; 980  : }

  001d3	5f		 pop	 edi
  001d4	5e		 pop	 esi
  001d5	5b		 pop	 ebx
  001d6	8b e5		 mov	 esp, ebp
  001d8	5d		 pop	 ebp
  001d9	c2 08 00	 ret	 8
?fixed_wing_flight@@YGXPAUENTITY@@PAUVEC3D@@@Z ENDP	; fixed_wing_flight
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_move.c
;	COMDAT ?fixed_wing_land_jet@@YGXPAUENTITY@@PAUVEC3D@@@Z
_TEXT	SEGMENT
tv179 = -156						; size = 4
tv158 = -156						; size = 4
tv133 = -156						; size = 4
tv81 = -156						; size = 4
tv171 = -152						; size = 4
tv150 = -152						; size = 4
tv93 = -152						; size = 4
tv73 = -152						; size = 4
_delta_roll$ = -84					; size = 4
_delta_pitch$ = -80					; size = 4
_delta_heading$ = -76					; size = 4
_desired_pitch$ = -72					; size = 4
_desired_heading$ = -68					; size = 4
_roll$ = -64						; size = 4
_pitch$ = -60						; size = 4
_heading$ = -56						; size = 4
_delta_vel$ = -52					; size = 4
_wp_vel$ = -48						; size = 4
_range$ = -44						; size = 4
_factor$ = -40						; size = 4
_curr_pos$ = -36					; size = 4
_wp_pos$ = -32						; size = 12
_wp_vec$ = -20						; size = 12
_raw$ = -8						; size = 4
_guide$ = -4						; size = 4
_en$ = 8						; size = 4
_new_pos$ = 12						; size = 4
?fixed_wing_land_jet@@YGXPAUENTITY@@PAUVEC3D@@@Z PROC	; fixed_wing_land_jet, COMDAT

; 805  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 9c 00 00
	00		 sub	 esp, 156		; 0000009cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 806  : 	entity
; 807  : 		*guide;
; 808  : 
; 809  : 	fixed_wing
; 810  : 		*raw;
; 811  : 
; 812  : 	vec3d
; 813  : 		wp_vec,
; 814  : 		wp_pos,
; 815  : 		*curr_pos;
; 816  : 
; 817  : 	float
; 818  : 		factor,
; 819  : 		range,
; 820  : 		wp_vel,
; 821  : 		delta_vel,
; 822  : 		heading,
; 823  : 		pitch,
; 824  : 		roll,
; 825  : 		desired_heading,
; 826  : 		desired_pitch,
; 827  : 		delta_heading,
; 828  : 		delta_pitch,
; 829  : 		delta_roll;
; 830  : 
; 831  : 	raw = (fixed_wing *) get_local_entity_data (en);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00012	89 4d f8	 mov	 DWORD PTR _raw$[ebp], ecx

; 832  : 
; 833  : 	fixed_wing_movement_get_waypoint_position (en, &wp_pos);

  00015	8d 45 e0	 lea	 eax, DWORD PTR _wp_pos$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ?fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z ; fixed_wing_movement_get_waypoint_position

; 834  : 
; 835  : 	curr_pos = get_local_entity_vec3d_ptr (en, VEC3D_TYPE_POSITION);

  00022	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00026	74 0d		 je	 SHORT $LN9@fixed_wing
  00028	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0002b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002d	89 8d 68 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  00033	eb 24		 jmp	 SHORT $LN10@fixed_wing
$LN9@fixed_wing:
  00035	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_land_jet@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  0003b	83 c2 1e	 add	 edx, 30			; 0000001eH
  0003e	52		 push	 edx
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00044	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0004f	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv73[ebp], 0
$LN10@fixed_wing:
  00059	b9 01 00 00 00	 mov	 ecx, 1
  0005e	85 c9		 test	 ecx, ecx
  00060	74 0c		 je	 SHORT $LN11@fixed_wing
  00062	c7 85 64 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv81[ebp], 8
  0006c	eb 24		 jmp	 SHORT $LN12@fixed_wing
$LN11@fixed_wing:
  0006e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_land_jet@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00074	83 c2 1e	 add	 edx, 30			; 0000001eH
  00077	52		 push	 edx
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0007d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00088	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv81[ebp], 0
$LN12@fixed_wing:
  00092	6a 08		 push	 8
  00094	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00097	51		 push	 ecx
  00098	6b 95 68 ff ff
	ff 60		 imul	 edx, DWORD PTR tv73[ebp], 96
  0009f	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR tv81[ebp]
  000a5	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000ac	ff d1		 call	 ecx
  000ae	89 45 dc	 mov	 DWORD PTR _curr_pos$[ebp], eax

; 836  : 
; 837  : 	guide = get_local_entity_parent (en, LIST_TYPE_FOLLOWER);

  000b1	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  000b5	74 0d		 je	 SHORT $LN13@fixed_wing
  000b7	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000ba	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bc	89 8d 68 ff ff
	ff		 mov	 DWORD PTR tv93[ebp], ecx
  000c2	eb 24		 jmp	 SHORT $LN14@fixed_wing
$LN13@fixed_wing:
  000c4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_land_jet@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  000ca	83 c2 20	 add	 edx, 32			; 00000020H
  000cd	52		 push	 edx
  000ce	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000de	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv93[ebp], 0
$LN14@fixed_wing:
  000e8	b9 01 00 00 00	 mov	 ecx, 1
  000ed	85 c9		 test	 ecx, ecx
  000ef	74 0c		 je	 SHORT $LN15@fixed_wing
  000f1	c7 85 64 ff ff
	ff 0d 00 00 00	 mov	 DWORD PTR tv133[ebp], 13 ; 0000000dH
  000fb	eb 24		 jmp	 SHORT $LN16@fixed_wing
$LN15@fixed_wing:
  000fd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_land_jet@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00103	83 c2 20	 add	 edx, 32			; 00000020H
  00106	52		 push	 edx
  00107	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0010c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00111	50		 push	 eax
  00112	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00117	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv133[ebp], 0
$LN16@fixed_wing:
  00121	6a 0d		 push	 13			; 0000000dH
  00123	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00126	51		 push	 ecx
  00127	69 95 68 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv93[ebp], 180
  00131	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR tv133[ebp]
  00137	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0013e	ff d1		 call	 ecx
  00140	89 45 fc	 mov	 DWORD PTR _guide$[ebp], eax

; 838  : 
; 839  : 	ASSERT (guide);

  00143	83 7d fc 00	 cmp	 DWORD PTR _guide$[ebp], 0
  00147	75 18		 jne	 SHORT $LN2@fixed_wing
  00149	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??fixed_wing_land_jet@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  0014e	83 c0 22	 add	 eax, 34			; 00000022H
  00151	50		 push	 eax
  00152	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00157	68 00 00 00 00	 push	 OFFSET ??_C@_05HLIEEKJG@guide@
  0015c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@fixed_wing:

; 840  : 
; 841  : 	wp_vel = get_local_entity_float_value (guide, FLOAT_TYPE_VELOCITY);

  00161	83 7d fc 00	 cmp	 DWORD PTR _guide$[ebp], 0
  00165	74 0d		 je	 SHORT $LN17@fixed_wing
  00167	8b 45 fc	 mov	 eax, DWORD PTR _guide$[ebp]
  0016a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016c	89 8d 68 ff ff
	ff		 mov	 DWORD PTR tv150[ebp], ecx
  00172	eb 24		 jmp	 SHORT $LN18@fixed_wing
$LN17@fixed_wing:
  00174	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_land_jet@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  0017a	83 c2 24	 add	 edx, 36			; 00000024H
  0017d	52		 push	 edx
  0017e	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00183	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00188	50		 push	 eax
  00189	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0018e	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], 0
$LN18@fixed_wing:
  00198	b9 01 00 00 00	 mov	 ecx, 1
  0019d	85 c9		 test	 ecx, ecx
  0019f	74 0c		 je	 SHORT $LN19@fixed_wing
  001a1	c7 85 64 ff ff
	ff 93 00 00 00	 mov	 DWORD PTR tv158[ebp], 147 ; 00000093H
  001ab	eb 24		 jmp	 SHORT $LN20@fixed_wing
$LN19@fixed_wing:
  001ad	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_land_jet@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  001b3	83 c2 24	 add	 edx, 36			; 00000024H
  001b6	52		 push	 edx
  001b7	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  001bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  001c1	50		 push	 eax
  001c2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c7	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv158[ebp], 0
$LN20@fixed_wing:
  001d1	68 93 00 00 00	 push	 147			; 00000093H
  001d6	8b 4d fc	 mov	 ecx, DWORD PTR _guide$[ebp]
  001d9	51		 push	 ecx
  001da	69 95 68 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv150[ebp], 700
  001e4	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR tv158[ebp]
  001ea	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  001f1	ff d1		 call	 ecx
  001f3	d9 5d d0	 fstp	 DWORD PTR _wp_vel$[ebp]

; 842  : 
; 843  : 	if(wp_vel == 0)

  001f6	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _wp_vel$[ebp]
  001fb	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00202	9f		 lahf
  00203	f6 c4 44	 test	 ah, 68			; 00000044H
  00206	0f 8a 92 00 00
	00		 jp	 $LN3@fixed_wing

; 844  : 	{
; 845  : 		wp_vel = get_local_entity_float_value(en, FLOAT_TYPE_CRUISE_VELOCITY);

  0020c	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00210	74 0d		 je	 SHORT $LN21@fixed_wing
  00212	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00215	8b 08		 mov	 ecx, DWORD PTR [eax]
  00217	89 8d 68 ff ff
	ff		 mov	 DWORD PTR tv171[ebp], ecx
  0021d	eb 24		 jmp	 SHORT $LN22@fixed_wing
$LN21@fixed_wing:
  0021f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_land_jet@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00225	83 c2 28	 add	 edx, 40			; 00000028H
  00228	52		 push	 edx
  00229	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0022e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00233	50		 push	 eax
  00234	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00239	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv171[ebp], 0
$LN22@fixed_wing:
  00243	b9 01 00 00 00	 mov	 ecx, 1
  00248	85 c9		 test	 ecx, ecx
  0024a	74 0c		 je	 SHORT $LN23@fixed_wing
  0024c	c7 85 64 ff ff
	ff 19 00 00 00	 mov	 DWORD PTR tv179[ebp], 25 ; 00000019H
  00256	eb 24		 jmp	 SHORT $LN24@fixed_wing
$LN23@fixed_wing:
  00258	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_land_jet@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  0025e	83 c2 28	 add	 edx, 40			; 00000028H
  00261	52		 push	 edx
  00262	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00267	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0026c	50		 push	 eax
  0026d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00272	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv179[ebp], 0
$LN24@fixed_wing:
  0027c	6a 19		 push	 25			; 00000019H
  0027e	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00281	51		 push	 ecx
  00282	69 95 68 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv171[ebp], 700
  0028c	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR tv179[ebp]
  00292	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00299	ff d1		 call	 ecx
  0029b	d9 5d d0	 fstp	 DWORD PTR _wp_vel$[ebp]
$LN3@fixed_wing:

; 846  : 	}
; 847  : 
; 848  : 	desired_pitch = 0.0;

  0029e	0f 57 c0	 xorps	 xmm0, xmm0
  002a1	f3 0f 11 45 b8	 movss	 DWORD PTR _desired_pitch$[ebp], xmm0

; 849  : 
; 850  : 	// get waypoint vector - no lookahead
; 851  : 	wp_vec.x = wp_pos.x - curr_pos->x;

  002a6	8b 45 dc	 mov	 eax, DWORD PTR _curr_pos$[ebp]
  002a9	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _wp_pos$[ebp]
  002ae	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  002b2	f3 0f 11 45 ec	 movss	 DWORD PTR _wp_vec$[ebp], xmm0

; 852  : 	wp_vec.y = wp_pos.y - curr_pos->y;

  002b7	8b 45 dc	 mov	 eax, DWORD PTR _curr_pos$[ebp]
  002ba	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _wp_pos$[ebp+4]
  002bf	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  002c4	f3 0f 11 45 f0	 movss	 DWORD PTR _wp_vec$[ebp+4], xmm0

; 853  : 	wp_vec.z = wp_pos.z - curr_pos->z;

  002c9	8b 45 dc	 mov	 eax, DWORD PTR _curr_pos$[ebp]
  002cc	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _wp_pos$[ebp+8]
  002d1	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  002d6	f3 0f 11 45 f4	 movss	 DWORD PTR _wp_vec$[ebp+8], xmm0

; 854  : 
; 855  : 	range = get_3d_vector_magnitude (&wp_vec);

  002db	8d 45 ec	 lea	 eax, DWORD PTR _wp_vec$[ebp]
  002de	50		 push	 eax
  002df	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  002e4	d9 5d d4	 fstp	 DWORD PTR _range$[ebp]

; 856  : 
; 857  : 	// scale to correct length - that of waypoint velocity
; 858  : 	normalise_any_3d_vector (&wp_vec);

  002e7	8d 45 ec	 lea	 eax, DWORD PTR _wp_vec$[ebp]
  002ea	50		 push	 eax
  002eb	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  002f0	dd d8		 fstp	 ST(0)

; 859  : 
; 860  : 	//attitude
; 861  : 	heading = get_heading_from_attitude_matrix (raw->ac.mob.attitude);

  002f2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002f7	d1 e0		 shl	 eax, 1
  002f9	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  002fc	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  00300	b8 04 00 00 00	 mov	 eax, 4
  00305	d1 e0		 shl	 eax, 1
  00307	51		 push	 ecx
  00308	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  0030d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00312	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00317	d1 e1		 shl	 ecx, 1
  00319	8b 55 f8	 mov	 edx, DWORD PTR _raw$[ebp]
  0031c	8d 44 0a 10	 lea	 eax, DWORD PTR [edx+ecx+16]
  00320	b9 04 00 00 00	 mov	 ecx, 4
  00325	6b d1 00	 imul	 edx, ecx, 0
  00328	51		 push	 ecx
  00329	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  0032e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00333	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  00338	d9 5d c8	 fstp	 DWORD PTR _heading$[ebp]

; 862  : 
; 863  : 	pitch = get_pitch_from_attitude_matrix (raw->ac.mob.attitude);

  0033b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00340	d1 e0		 shl	 eax, 1
  00342	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  00345	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  00349	b8 04 00 00 00	 mov	 eax, 4
  0034e	c1 e0 00	 shl	 eax, 0
  00351	51		 push	 ecx
  00352	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00357	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035c	e8 00 00 00 00	 call	 ?asin@@YGMM@Z		; asin
  00361	d9 5d c4	 fstp	 DWORD PTR _pitch$[ebp]

; 864  : 
; 865  : 	roll = get_roll_from_attitude_matrix (raw->ac.mob.attitude);

  00364	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00369	c1 e0 00	 shl	 eax, 0
  0036c	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  0036f	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  00373	b8 04 00 00 00	 mov	 eax, 4
  00378	c1 e0 00	 shl	 eax, 0
  0037b	51		 push	 ecx
  0037c	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00381	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00386	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0038b	6b d1 00	 imul	 edx, ecx, 0
  0038e	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00391	8d 4c 10 10	 lea	 ecx, DWORD PTR [eax+edx+16]
  00395	ba 04 00 00 00	 mov	 edx, 4
  0039a	c1 e2 00	 shl	 edx, 0
  0039d	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  003a2	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  003a9	51		 push	 ecx
  003aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003af	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  003b4	d9 5d c0	 fstp	 DWORD PTR _roll$[ebp]

; 866  : 
; 867  : 	//heading
; 868  : 	desired_heading = atan2 (wp_vec.x, wp_vec.z);

  003b7	51		 push	 ecx
  003b8	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _wp_vec$[ebp+8]
  003bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c2	51		 push	 ecx
  003c3	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _wp_vec$[ebp]
  003c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003cd	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  003d2	d9 5d bc	 fstp	 DWORD PTR _desired_heading$[ebp]

; 869  : 
; 870  : 	//pitch
; 871  : 	if (range < 100.0)

  003d5	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  003da	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4059000000000000
  003e2	66 0f 2f c8	 comisd	 xmm1, xmm0
  003e6	76 0f		 jbe	 SHORT $LN4@fixed_wing

; 872  : 	{
; 873  : 		desired_pitch = AIRCRAFT_MAX_LANDING_FLARE_ANGLE;

  003e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d8efa35
  003f0	f3 0f 11 45 b8	 movss	 DWORD PTR _desired_pitch$[ebp], xmm0
  003f5	eb 5c		 jmp	 SHORT $LN7@fixed_wing
$LN4@fixed_wing:

; 874  : 	}
; 875  : 	else if (range < 1000.0)

  003f7	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  003fc	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  00404	66 0f 2f c8	 comisd	 xmm1, xmm0
  00408	76 36		 jbe	 SHORT $LN6@fixed_wing

; 876  : 	{
; 877  : 		factor = (1000.0 - range) * 0.001;

  0040a	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  0040f	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  00417	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0041b	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3f50624dd2f1a9fc
  00423	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00427	f3 0f 11 45 d8	 movss	 DWORD PTR _factor$[ebp], xmm0

; 878  : 
; 879  : 		desired_pitch = AIRCRAFT_MAX_FLARE_ANGLE * factor;

  0042c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e860a92
  00434	f3 0f 59 45 d8	 mulss	 xmm0, DWORD PTR _factor$[ebp]
  00439	f3 0f 11 45 b8	 movss	 DWORD PTR _desired_pitch$[ebp], xmm0

; 880  : 	}
; 881  : 	else

  0043e	eb 13		 jmp	 SHORT $LN7@fixed_wing
$LN6@fixed_wing:

; 882  : 	{
; 883  : 		desired_pitch = asin (wp_vec.y);

  00440	51		 push	 ecx
  00441	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _wp_vec$[ebp+4]
  00446	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044b	e8 00 00 00 00	 call	 ?asin@@YGMM@Z		; asin
  00450	d9 5d b8	 fstp	 DWORD PTR _desired_pitch$[ebp]
$LN7@fixed_wing:

; 884  : 	}
; 885  : 
; 886  : 	delta_heading = (desired_heading - heading) * get_entity_movement_delta_time ();

  00453	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _desired_heading$[ebp]
  00458	f3 0f 5c 45 c8	 subss	 xmm0, DWORD PTR _heading$[ebp]
  0045d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00465	f3 0f 11 45 b4	 movss	 DWORD PTR _delta_heading$[ebp], xmm0

; 887  : 
; 888  : 	delta_pitch = (desired_pitch - pitch) * get_entity_movement_delta_time ();

  0046a	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _desired_pitch$[ebp]
  0046f	f3 0f 5c 45 c4	 subss	 xmm0, DWORD PTR _pitch$[ebp]
  00474	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0047c	f3 0f 11 45 b0	 movss	 DWORD PTR _delta_pitch$[ebp], xmm0

; 889  : 
; 890  : 	delta_roll = -roll * get_entity_movement_delta_time ();

  00481	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00486	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0048d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00495	f3 0f 11 45 ac	 movss	 DWORD PTR _delta_roll$[ebp], xmm0

; 891  : 
; 892  : 	heading += delta_heading;

  0049a	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _heading$[ebp]
  0049f	f3 0f 58 45 b4	 addss	 xmm0, DWORD PTR _delta_heading$[ebp]
  004a4	f3 0f 11 45 c8	 movss	 DWORD PTR _heading$[ebp], xmm0

; 893  : 
; 894  : 	pitch += delta_pitch;

  004a9	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  004ae	f3 0f 58 45 b0	 addss	 xmm0, DWORD PTR _delta_pitch$[ebp]
  004b3	f3 0f 11 45 c4	 movss	 DWORD PTR _pitch$[ebp], xmm0

; 895  : 
; 896  : 	roll += delta_roll;

  004b8	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  004bd	f3 0f 58 45 ac	 addss	 xmm0, DWORD PTR _delta_roll$[ebp]
  004c2	f3 0f 11 45 c0	 movss	 DWORD PTR _roll$[ebp], xmm0

; 897  : 
; 898  : 	get_3d_transformation_matrix (raw->ac.mob.attitude, heading, pitch, roll);

  004c7	51		 push	 ecx
  004c8	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _roll$[ebp]
  004cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d2	51		 push	 ecx
  004d3	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  004d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004dd	51		 push	 ecx
  004de	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _heading$[ebp]
  004e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e8	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  004eb	83 c0 10	 add	 eax, 16			; 00000010H
  004ee	50		 push	 eax
  004ef	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 899  : 
; 900  : 
; 901  : 	//velocity
; 902  : 	delta_vel = (wp_vel - raw->ac.mob.velocity);

  004f4	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  004f7	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _wp_vel$[ebp]
  004fc	f3 0f 5c 40 40	 subss	 xmm0, DWORD PTR [eax+64]
  00501	f3 0f 11 45 cc	 movss	 DWORD PTR _delta_vel$[ebp], xmm0

; 903  : 
; 904  : #if 0
; 905  : 	//make braking less immediate
; 906  : 	if (fabs (delta_vel) > 10.0)
; 907  : 	{
; 908  : 		delta_vel = sign (delta_vel) * 5.0;
; 909  : 	}
; 910  : #endif
; 911  : 
; 912  : 	raw->ac.mob.velocity += delta_vel;

  00506	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00509	f3 0f 10 40 40	 movss	 xmm0, DWORD PTR [eax+64]
  0050e	f3 0f 58 45 cc	 addss	 xmm0, DWORD PTR _delta_vel$[ebp]
  00513	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  00516	f3 0f 11 41 40	 movss	 DWORD PTR [ecx+64], xmm0

; 913  : 
; 914  : 	//position
; 915  : 	wp_vec.x *= raw->ac.mob.velocity;

  0051b	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  0051e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _wp_vec$[ebp]
  00523	f3 0f 59 40 40	 mulss	 xmm0, DWORD PTR [eax+64]
  00528	f3 0f 11 45 ec	 movss	 DWORD PTR _wp_vec$[ebp], xmm0

; 916  : 	wp_vec.y *= raw->ac.mob.velocity;

  0052d	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00530	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _wp_vec$[ebp+4]
  00535	f3 0f 59 40 40	 mulss	 xmm0, DWORD PTR [eax+64]
  0053a	f3 0f 11 45 f0	 movss	 DWORD PTR _wp_vec$[ebp+4], xmm0

; 917  : 	wp_vec.z *= raw->ac.mob.velocity;

  0053f	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00542	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _wp_vec$[ebp+8]
  00547	f3 0f 59 40 40	 mulss	 xmm0, DWORD PTR [eax+64]
  0054c	f3 0f 11 45 f4	 movss	 DWORD PTR _wp_vec$[ebp+8], xmm0

; 918  : 
; 919  : 	new_pos->x = curr_pos->x + wp_vec.x * get_entity_movement_delta_time ();

  00551	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _wp_vec$[ebp]
  00556	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0055e	8b 45 dc	 mov	 eax, DWORD PTR _curr_pos$[ebp]
  00561	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  00565	8b 4d 0c	 mov	 ecx, DWORD PTR _new_pos$[ebp]
  00568	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 920  : 	new_pos->y = curr_pos->y + wp_vec.y * get_entity_movement_delta_time ();

  0056c	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _wp_vec$[ebp+4]
  00571	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00579	8b 45 dc	 mov	 eax, DWORD PTR _curr_pos$[ebp]
  0057c	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  00581	8b 4d 0c	 mov	 ecx, DWORD PTR _new_pos$[ebp]
  00584	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 921  : 	new_pos->z = curr_pos->z + wp_vec.z * get_entity_movement_delta_time ();

  00589	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _wp_vec$[ebp+8]
  0058e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00596	8b 45 dc	 mov	 eax, DWORD PTR _curr_pos$[ebp]
  00599	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  0059e	8b 4d 0c	 mov	 ecx, DWORD PTR _new_pos$[ebp]
  005a1	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 922  : 
; 923  : }

  005a6	5f		 pop	 edi
  005a7	5e		 pop	 esi
  005a8	5b		 pop	 ebx
  005a9	8b e5		 mov	 esp, ebp
  005ab	5d		 pop	 ebp
  005ac	c2 08 00	 ret	 8
?fixed_wing_land_jet@@YGXPAUENTITY@@PAUVEC3D@@@Z ENDP	; fixed_wing_land_jet
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_move.c
;	COMDAT ?fixed_wing_set_velocity@@YGXPAUENTITY@@PAUVEC3D@@1@Z
_TEXT	SEGMENT
tv82 = -96						; size = 4
tv74 = -92						; size = 4
_max_speed$ = -24					; size = 4
_min_speed$ = -20					; size = 4
_curr_speed$ = -16					; size = 4
_acc_avail$ = -12					; size = 4
_d$ = -8						; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
_acc$ = 12						; size = 4
_velocity$ = 16						; size = 4
?fixed_wing_set_velocity@@YGXPAUENTITY@@PAUVEC3D@@1@Z PROC ; fixed_wing_set_velocity, COMDAT

; 583  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 584  : 	fixed_wing
; 585  : 		*raw;
; 586  : 
; 587  : 	float
; 588  : 		d,
; 589  : 		acc_avail,
; 590  : 		curr_speed,
; 591  : 		min_speed,
; 592  : 		max_speed;
; 593  : 
; 594  : 	raw = (fixed_wing *) get_local_entity_data (en);

  00009	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 595  : 
; 596  : 	curr_speed = raw->ac.mob.velocity;

  00012	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00015	f3 0f 10 40 40	 movss	 xmm0, DWORD PTR [eax+64]
  0001a	f3 0f 11 45 f0	 movss	 DWORD PTR _curr_speed$[ebp], xmm0

; 597  : 
; 598  : 	min_speed = max_speed = get_local_entity_float_value(en, FLOAT_TYPE_CRUISE_VELOCITY);

  0001f	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00023	74 0a		 je	 SHORT $LN4@fixed_wing
  00025	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	89 4d a4	 mov	 DWORD PTR tv74[ebp], ecx
  0002d	eb 21		 jmp	 SHORT $LN5@fixed_wing
$LN4@fixed_wing:
  0002f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_set_velocity@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  00035	83 c2 0f	 add	 edx, 15			; 0000000fH
  00038	52		 push	 edx
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00049	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN5@fixed_wing:
  00050	b9 01 00 00 00	 mov	 ecx, 1
  00055	85 c9		 test	 ecx, ecx
  00057	74 09		 je	 SHORT $LN6@fixed_wing
  00059	c7 45 a0 19 00
	00 00		 mov	 DWORD PTR tv82[ebp], 25	; 00000019H
  00060	eb 21		 jmp	 SHORT $LN7@fixed_wing
$LN6@fixed_wing:
  00062	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_set_velocity@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  00068	83 c2 0f	 add	 edx, 15			; 0000000fH
  0006b	52		 push	 edx
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00071	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0007c	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
$LN7@fixed_wing:
  00083	6a 19		 push	 25			; 00000019H
  00085	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00088	51		 push	 ecx
  00089	69 55 a4 bc 02
	00 00		 imul	 edx, DWORD PTR tv74[ebp], 700
  00090	8b 45 a0	 mov	 eax, DWORD PTR tv82[ebp]
  00093	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  0009a	ff d1		 call	 ecx
  0009c	d9 5d e8	 fstp	 DWORD PTR _max_speed$[ebp]
  0009f	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _max_speed$[ebp]
  000a4	f3 0f 11 45 ec	 movss	 DWORD PTR _min_speed$[ebp], xmm0

; 599  : 
; 600  : 	// arbitrary values - seem to work tho'. p'haps should be in a dbase somewhere?
; 601  : 	min_speed *= 0.7;

  000a9	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _min_speed$[ebp]
  000ae	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe6666666666666
  000b6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ba	f3 0f 11 45 ec	 movss	 DWORD PTR _min_speed$[ebp], xmm0

; 602  : 
; 603  : 	max_speed *= 2.0;

  000bf	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _max_speed$[ebp]
  000c4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  000cc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000d0	f3 0f 11 45 e8	 movss	 DWORD PTR _max_speed$[ebp], xmm0

; 604  : 
; 605  : 	// debug - possibly unneccesary control?
; 606  : 	acc_avail = 1.0;

  000d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000dd	f3 0f 11 45 f4	 movss	 DWORD PTR _acc_avail$[ebp], xmm0

; 607  : 	// debug
; 608  : 
; 609  : 	d = get_3d_vector_magnitude (acc);

  000e2	8b 45 0c	 mov	 eax, DWORD PTR _acc$[ebp]
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  000eb	d9 5d f8	 fstp	 DWORD PTR _d$[ebp]

; 610  : 
; 611  : 	// limit acceleration
; 612  : 	if (d > aircraft_database[raw->ac.mob.sub_type].g_max)

  000ee	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  000f1	69 08 f4 00 00
	00		 imul	 ecx, DWORD PTR [eax], 244
  000f7	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _d$[ebp]
  000fc	0f 2f 81 a8 00
	00 00		 comiss	 xmm0, DWORD PTR ?aircraft_database@@3PAUAIRCRAFT_DATA@@A[ecx+168]
  00103	76 75		 jbe	 SHORT $LN2@fixed_wing

; 613  : 	{
; 614  : 
; 615  : 		//used to get inverse attitude matrix, multiply acc vec by it, normalise, scale by g_max & rotate back
; 616  : 		//inverse multiply totally unneccesary?
; 617  : 
; 618  : 		normalise_3d_vector_given_magnitude (acc, d);

  00105	51		 push	 ecx
  00106	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _d$[ebp]
  0010b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00110	8b 45 0c	 mov	 eax, DWORD PTR _acc$[ebp]
  00113	50		 push	 eax
  00114	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 619  : 
; 620  : 		// perform limiting
; 621  : 		acc->x *= aircraft_database[raw->ac.mob.sub_type].g_max;

  00119	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0011c	69 08 f4 00 00
	00		 imul	 ecx, DWORD PTR [eax], 244
  00122	8b 55 0c	 mov	 edx, DWORD PTR _acc$[ebp]
  00125	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00129	f3 0f 59 81 a8
	00 00 00	 mulss	 xmm0, DWORD PTR ?aircraft_database@@3PAUAIRCRAFT_DATA@@A[ecx+168]
  00131	8b 45 0c	 mov	 eax, DWORD PTR _acc$[ebp]
  00134	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 622  : 		acc->y *= aircraft_database[raw->ac.mob.sub_type].g_max;

  00138	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0013b	69 08 f4 00 00
	00		 imul	 ecx, DWORD PTR [eax], 244
  00141	8b 55 0c	 mov	 edx, DWORD PTR _acc$[ebp]
  00144	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  00149	f3 0f 59 81 a8
	00 00 00	 mulss	 xmm0, DWORD PTR ?aircraft_database@@3PAUAIRCRAFT_DATA@@A[ecx+168]
  00151	8b 45 0c	 mov	 eax, DWORD PTR _acc$[ebp]
  00154	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 623  : 		acc->z *= aircraft_database[raw->ac.mob.sub_type].g_max;

  00159	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0015c	69 08 f4 00 00
	00		 imul	 ecx, DWORD PTR [eax], 244
  00162	8b 55 0c	 mov	 edx, DWORD PTR _acc$[ebp]
  00165	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  0016a	f3 0f 59 81 a8
	00 00 00	 mulss	 xmm0, DWORD PTR ?aircraft_database@@3PAUAIRCRAFT_DATA@@A[ecx+168]
  00172	8b 45 0c	 mov	 eax, DWORD PTR _acc$[ebp]
  00175	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0
$LN2@fixed_wing:

; 624  : 	}
; 625  : 
; 626  : 	velocity->x += acc->x * acc_avail * get_entity_movement_delta_time ();

  0017a	8b 45 0c	 mov	 eax, DWORD PTR _acc$[ebp]
  0017d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00181	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _acc_avail$[ebp]
  00186	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0018e	8b 4d 10	 mov	 ecx, DWORD PTR _velocity$[ebp]
  00191	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  00195	8b 55 10	 mov	 edx, DWORD PTR _velocity$[ebp]
  00198	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 627  : 	velocity->y += acc->y * acc_avail * get_entity_movement_delta_time ();

  0019c	8b 45 0c	 mov	 eax, DWORD PTR _acc$[ebp]
  0019f	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  001a4	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _acc_avail$[ebp]
  001a9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  001b1	8b 4d 10	 mov	 ecx, DWORD PTR _velocity$[ebp]
  001b4	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  001b9	8b 55 10	 mov	 edx, DWORD PTR _velocity$[ebp]
  001bc	f3 0f 11 42 04	 movss	 DWORD PTR [edx+4], xmm0

; 628  : 	velocity->z += acc->z * acc_avail * get_entity_movement_delta_time ();

  001c1	8b 45 0c	 mov	 eax, DWORD PTR _acc$[ebp]
  001c4	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  001c9	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _acc_avail$[ebp]
  001ce	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  001d6	8b 4d 10	 mov	 ecx, DWORD PTR _velocity$[ebp]
  001d9	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  001de	8b 55 10	 mov	 edx, DWORD PTR _velocity$[ebp]
  001e1	f3 0f 11 42 08	 movss	 DWORD PTR [edx+8], xmm0

; 629  : 
; 630  : 	//ASSERT (!check_zero_3d_vector (velocity));
; 631  : 
; 632  : 	fixed_wing_bound_vector_scale (velocity, min_speed, max_speed);

  001e6	51		 push	 ecx
  001e7	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _max_speed$[ebp]
  001ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f1	51		 push	 ecx
  001f2	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _min_speed$[ebp]
  001f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fc	8b 45 10	 mov	 eax, DWORD PTR _velocity$[ebp]
  001ff	50		 push	 eax
  00200	e8 00 00 00 00	 call	 ?fixed_wing_bound_vector_scale@@YGXPAUVEC3D@@MM@Z ; fixed_wing_bound_vector_scale

; 633  : 
; 634  : 	//ASSERT (!check_zero_3d_vector (velocity));
; 635  : 
; 636  : 	raw->ac.mob.velocity = get_3d_vector_magnitude (velocity);

  00205	8b 45 10	 mov	 eax, DWORD PTR _velocity$[ebp]
  00208	50		 push	 eax
  00209	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  0020e	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00211	d9 59 40	 fstp	 DWORD PTR [ecx+64]

; 637  : }

  00214	5f		 pop	 edi
  00215	5e		 pop	 esi
  00216	5b		 pop	 ebx
  00217	8b e5		 mov	 esp, ebp
  00219	5d		 pop	 ebp
  0021a	c2 0c 00	 ret	 12			; 0000000cH
?fixed_wing_set_velocity@@YGXPAUENTITY@@PAUVEC3D@@1@Z ENDP ; fixed_wing_set_velocity
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_move.c
;	COMDAT ?fixed_wing_accum@@YGMPAUENTITY@@PAUVEC3D@@1@Z
_TEXT	SEGMENT
tv158 = -96						; size = 8
tv78 = -88						; size = 4
tv163 = -84						; size = 4
tv93 = -84						; size = 4
tv70 = -84						; size = 4
_max_acc$ = -16						; size = 4
_new_mag$ = -12						; size = 4
_vm$ = -8						; size = 4
_acc_avail$ = -4					; size = 4
_en$ = 8						; size = 4
_accumulator$ = 12					; size = 4
_new_acc$ = 16						; size = 4
?fixed_wing_accum@@YGMPAUENTITY@@PAUVEC3D@@1@Z PROC	; fixed_wing_accum, COMDAT

; 645  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 646  : 
; 647  : 	float
; 648  : 		acc_avail,
; 649  : 		vm,
; 650  : 		new_mag,
; 651  : 		max_acc;
; 652  : 
; 653  : 
; 654  : 	max_acc = get_local_entity_float_value (en, FLOAT_TYPE_CRUISE_VELOCITY) * 2.0;

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	74 0a		 je	 SHORT $LN3@fixed_wing
  0000f	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	89 4d ac	 mov	 DWORD PTR tv70[ebp], ecx
  00017	eb 21		 jmp	 SHORT $LN4@fixed_wing
$LN3@fixed_wing:
  00019	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_accum@@YGMPAUENTITY@@PAUVEC3D@@1@Z@4JA
  0001f	83 c2 09	 add	 edx, 9
  00022	52		 push	 edx
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00033	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@fixed_wing:
  0003a	b9 01 00 00 00	 mov	 ecx, 1
  0003f	85 c9		 test	 ecx, ecx
  00041	74 09		 je	 SHORT $LN5@fixed_wing
  00043	c7 45 a8 19 00
	00 00		 mov	 DWORD PTR tv78[ebp], 25	; 00000019H
  0004a	eb 21		 jmp	 SHORT $LN6@fixed_wing
$LN5@fixed_wing:
  0004c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_accum@@YGMPAUENTITY@@PAUVEC3D@@1@Z@4JA
  00052	83 c2 09	 add	 edx, 9
  00055	52		 push	 edx
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00066	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN6@fixed_wing:
  0006d	6a 19		 push	 25			; 00000019H
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00072	51		 push	 ecx
  00073	69 55 ac bc 02
	00 00		 imul	 edx, DWORD PTR tv70[ebp], 700
  0007a	8b 45 a8	 mov	 eax, DWORD PTR tv78[ebp]
  0007d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00084	ff d1		 call	 ecx
  00086	dd 5d a0	 fstp	 QWORD PTR tv158[ebp]
  00089	f2 0f 10 45 a0	 movsd	 xmm0, QWORD PTR tv158[ebp]
  0008e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  00096	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0009a	f3 0f 11 45 f0	 movss	 DWORD PTR _max_acc$[ebp], xmm0

; 655  : 
; 656  :   	acc_avail = max_acc - get_3d_vector_magnitude(accumulator);

  0009f	8b 45 0c	 mov	 eax, DWORD PTR _accumulator$[ebp]
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  000a8	d9 5d ac	 fstp	 DWORD PTR tv163[ebp]
  000ab	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _max_acc$[ebp]
  000b0	f3 0f 5c 45 ac	 subss	 xmm0, DWORD PTR tv163[ebp]
  000b5	f3 0f 11 45 fc	 movss	 DWORD PTR _acc_avail$[ebp], xmm0

; 657  : 
; 658  : 	vm = get_3d_vector_magnitude(new_acc);

  000ba	8b 45 10	 mov	 eax, DWORD PTR _new_acc$[ebp]
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  000c3	d9 5d f8	 fstp	 DWORD PTR _vm$[ebp]

; 659  : 
; 660  :   	new_mag = vm < acc_avail ? vm : acc_avail;

  000c6	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _acc_avail$[ebp]
  000cb	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _vm$[ebp]
  000cf	76 0c		 jbe	 SHORT $LN7@fixed_wing
  000d1	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _vm$[ebp]
  000d6	f3 0f 11 45 ac	 movss	 DWORD PTR tv93[ebp], xmm0
  000db	eb 0a		 jmp	 SHORT $LN8@fixed_wing
$LN7@fixed_wing:
  000dd	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _acc_avail$[ebp]
  000e2	f3 0f 11 45 ac	 movss	 DWORD PTR tv93[ebp], xmm0
$LN8@fixed_wing:
  000e7	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR tv93[ebp]
  000ec	f3 0f 11 45 f4	 movss	 DWORD PTR _new_mag$[ebp], xmm0

; 661  : 
; 662  : 	// scale newacc by new_mag
; 663  : 	normalise_any_3d_vector(new_acc);

  000f1	8b 45 10	 mov	 eax, DWORD PTR _new_acc$[ebp]
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  000fa	dd d8		 fstp	 ST(0)

; 664  : 
; 665  :   	accumulator->x += new_acc->x * new_mag;

  000fc	8b 45 10	 mov	 eax, DWORD PTR _new_acc$[ebp]
  000ff	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00103	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _new_mag$[ebp]
  00108	8b 4d 0c	 mov	 ecx, DWORD PTR _accumulator$[ebp]
  0010b	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  0010f	8b 55 0c	 mov	 edx, DWORD PTR _accumulator$[ebp]
  00112	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 666  :   	accumulator->y += new_acc->y * new_mag;

  00116	8b 45 10	 mov	 eax, DWORD PTR _new_acc$[ebp]
  00119	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0011e	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _new_mag$[ebp]
  00123	8b 4d 0c	 mov	 ecx, DWORD PTR _accumulator$[ebp]
  00126	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  0012b	8b 55 0c	 mov	 edx, DWORD PTR _accumulator$[ebp]
  0012e	f3 0f 11 42 04	 movss	 DWORD PTR [edx+4], xmm0

; 667  :   	accumulator->z += new_acc->z * new_mag;

  00133	8b 45 10	 mov	 eax, DWORD PTR _new_acc$[ebp]
  00136	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0013b	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _new_mag$[ebp]
  00140	8b 4d 0c	 mov	 ecx, DWORD PTR _accumulator$[ebp]
  00143	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  00148	8b 55 0c	 mov	 edx, DWORD PTR _accumulator$[ebp]
  0014b	f3 0f 11 42 08	 movss	 DWORD PTR [edx+8], xmm0

; 668  : 
; 669  :   	return new_mag;

  00150	d9 45 f4	 fld	 DWORD PTR _new_mag$[ebp]

; 670  : }

  00153	5f		 pop	 edi
  00154	5e		 pop	 esi
  00155	5b		 pop	 ebx
  00156	8b e5		 mov	 esp, ebp
  00158	5d		 pop	 ebp
  00159	c2 0c 00	 ret	 12			; 0000000cH
?fixed_wing_accum@@YGMPAUENTITY@@PAUVEC3D@@1@Z ENDP	; fixed_wing_accum
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_move.c
;	COMDAT ?fixed_wing_bound_vector_scale@@YGXPAUVEC3D@@MM@Z
_TEXT	SEGMENT
_distance$ = -4						; size = 4
_vector$ = 8						; size = 4
_min$ = 12						; size = 4
_max$ = 16						; size = 4
?fixed_wing_bound_vector_scale@@YGXPAUVEC3D@@MM@Z PROC	; fixed_wing_bound_vector_scale, COMDAT

; 554  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 555  : 	float
; 556  : 		distance;
; 557  : 
; 558  : 	distance = get_3d_vector_magnitude (vector);

  00009	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  00012	d9 5d fc	 fstp	 DWORD PTR _distance$[ebp]

; 559  : 
; 560  : 	if (distance > max)

  00015	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _distance$[ebp]
  0001a	0f 2f 45 10	 comiss	 xmm0, DWORD PTR _max$[ebp]
  0001e	76 53		 jbe	 SHORT $LN2@fixed_wing

; 561  : 	{
; 562  : 		normalise_3d_vector_given_magnitude (vector, distance);

  00020	51		 push	 ecx
  00021	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _distance$[ebp]
  00026	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002b	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 563  : 
; 564  : 		vector->x *= max;

  00034	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00037	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0003b	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _max$[ebp]
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00043	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 565  : 		vector->y *= max;

  00047	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0004a	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0004f	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _max$[ebp]
  00054	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00057	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 566  : 		vector->z *= max;

  0005c	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0005f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00064	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _max$[ebp]
  00069	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  0006c	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
  00071	eb 5c		 jmp	 SHORT $LN4@fixed_wing
$LN2@fixed_wing:

; 567  : 	}
; 568  : 	else if (distance < min)

  00073	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _min$[ebp]
  00078	0f 2f 45 fc	 comiss	 xmm0, DWORD PTR _distance$[ebp]
  0007c	76 51		 jbe	 SHORT $LN4@fixed_wing

; 569  : 	{
; 570  : 		normalise_3d_vector_given_magnitude (vector, distance);

  0007e	51		 push	 ecx
  0007f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _distance$[ebp]
  00084	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00089	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 571  : 
; 572  : 		vector->x *= min;

  00092	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00095	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00099	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _min$[ebp]
  0009e	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  000a1	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 573  : 		vector->y *= min;

  000a5	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000a8	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000ad	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _min$[ebp]
  000b2	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  000b5	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 574  : 		vector->z *= min;

  000ba	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000bd	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000c2	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _min$[ebp]
  000c7	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  000ca	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
$LN4@fixed_wing:

; 575  : 	}
; 576  : }

  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi
  000d1	5b		 pop	 ebx
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c2 0c 00	 ret	 12			; 0000000cH
?fixed_wing_bound_vector_scale@@YGXPAUVEC3D@@MM@Z ENDP	; fixed_wing_bound_vector_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_move.c
;	COMDAT ?fixed_wing_calc_attitude@@YGXPAUENTITY@@PAUVEC3D@@1@Z
_TEXT	SEGMENT
tv197 = -116						; size = 4
tv161 = -116						; size = 4
tv284 = -112						; size = 4
tv277 = -112						; size = 4
tv198 = -112						; size = 4
tv153 = -112						; size = 4
_factor$ = -44						; size = 4
_max_roll$ = -40					; size = 4
_roll$ = -36						; size = 4
_change_in_heading$ = -32				; size = 4
_heading$ = -28						; size = 4
_old_heading$ = -24					; size = 4
_pitch$ = -20						; size = 4
_norm_mv$ = -16						; size = 12
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
_acc$ = 12						; size = 4
_vel$ = 16						; size = 4
?fixed_wing_calc_attitude@@YGXPAUENTITY@@PAUVEC3D@@1@Z PROC ; fixed_wing_calc_attitude, COMDAT

; 714  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 74	 sub	 esp, 116		; 00000074H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 715  : 	fixed_wing
; 716  : 		*raw;
; 717  : 
; 718  : 	vec3d
; 719  : 		norm_mv;
; 720  : 
; 721  : 	float
; 722  : 		pitch,
; 723  : 		old_heading,
; 724  : 		heading,
; 725  : 		change_in_heading,
; 726  : 		roll,
; 727  : 		max_roll,
; 728  : 		factor;
; 729  : 
; 730  : 	raw = (fixed_wing *) get_local_entity_data (en);

  00009	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 731  : 
; 732  : 	old_heading = get_heading_from_attitude_matrix (raw->ac.mob.attitude);

  00012	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00017	d1 e0		 shl	 eax, 1
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  0001c	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  00020	b8 04 00 00 00	 mov	 eax, 4
  00025	d1 e0		 shl	 eax, 1
  00027	51		 push	 ecx
  00028	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  0002d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00032	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00037	d1 e1		 shl	 ecx, 1
  00039	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  0003c	8d 44 0a 10	 lea	 eax, DWORD PTR [edx+ecx+16]
  00040	b9 04 00 00 00	 mov	 ecx, 4
  00045	6b d1 00	 imul	 edx, ecx, 0
  00048	51		 push	 ecx
  00049	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  0004e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00053	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  00058	d9 5d e8	 fstp	 DWORD PTR _old_heading$[ebp]

; 733  : 
; 734  : 	roll = get_roll_from_attitude_matrix (raw->ac.mob.attitude);

  0005b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00060	c1 e0 00	 shl	 eax, 0
  00063	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00066	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  0006a	b8 04 00 00 00	 mov	 eax, 4
  0006f	c1 e0 00	 shl	 eax, 0
  00072	51		 push	 ecx
  00073	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00078	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007d	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00082	6b d1 00	 imul	 edx, ecx, 0
  00085	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00088	8d 4c 10 10	 lea	 ecx, DWORD PTR [eax+edx+16]
  0008c	ba 04 00 00 00	 mov	 edx, 4
  00091	c1 e2 00	 shl	 edx, 0
  00094	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00099	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000a0	51		 push	 ecx
  000a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a6	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  000ab	d9 5d dc	 fstp	 DWORD PTR _roll$[ebp]

; 735  : 
; 736  : 	norm_mv = raw->ac.mob.motion_vector;

  000ae	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  000b1	83 c0 34	 add	 eax, 52			; 00000034H
  000b4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b6	89 4d f0	 mov	 DWORD PTR _norm_mv$[ebp], ecx
  000b9	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000bc	89 55 f4	 mov	 DWORD PTR _norm_mv$[ebp+4], edx
  000bf	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000c2	89 45 f8	 mov	 DWORD PTR _norm_mv$[ebp+8], eax

; 737  : 
; 738  : 	normalise_any_3d_vector (&norm_mv);

  000c5	8d 45 f0	 lea	 eax, DWORD PTR _norm_mv$[ebp]
  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  000ce	dd d8		 fstp	 ST(0)

; 739  : 
; 740  : 	heading = atan2 (norm_mv.x, norm_mv.z);

  000d0	51		 push	 ecx
  000d1	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _norm_mv$[ebp+8]
  000d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000db	51		 push	 ecx
  000dc	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _norm_mv$[ebp]
  000e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e6	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  000eb	d9 5d e4	 fstp	 DWORD PTR _heading$[ebp]

; 741  : 
; 742  : 	pitch = asin (norm_mv.y);

  000ee	51		 push	 ecx
  000ef	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _norm_mv$[ebp+4]
  000f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f9	e8 00 00 00 00	 call	 ?asin@@YGMM@Z		; asin
  000fe	d9 5d ec	 fstp	 DWORD PTR _pitch$[ebp]

; 743  : 
; 744  : 	//cih not best value to use, as inversion infers 180deg roll. need change in local x.
; 745  : 
; 746  : 	change_in_heading = heading - old_heading;

  00101	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _heading$[ebp]
  00106	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _old_heading$[ebp]
  0010b	f3 0f 11 45 e0	 movss	 DWORD PTR _change_in_heading$[ebp], xmm0

; 747  : 
; 748  : 	//wrap cih to get correct change in roll
; 749  : 	if (change_in_heading > PI)

  00110	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _change_in_heading$[ebp]
  00115	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@40490fdb
  0011c	76 14		 jbe	 SHORT $LN2@fixed_wing

; 750  : 	{
; 751  : 		change_in_heading -= PI2;

  0011e	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _change_in_heading$[ebp]
  00123	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40c90fdb
  0012b	f3 0f 11 45 e0	 movss	 DWORD PTR _change_in_heading$[ebp], xmm0
  00130	eb 20		 jmp	 SHORT $LN4@fixed_wing
$LN2@fixed_wing:

; 752  : 	}
; 753  : 	else if (change_in_heading < (-PI))

  00132	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0490fdb
  0013a	0f 2f 45 e0	 comiss	 xmm0, DWORD PTR _change_in_heading$[ebp]
  0013e	76 12		 jbe	 SHORT $LN4@fixed_wing

; 754  : 	{
; 755  : 		change_in_heading += PI2;

  00140	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _change_in_heading$[ebp]
  00145	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40c90fdb
  0014d	f3 0f 11 45 e0	 movss	 DWORD PTR _change_in_heading$[ebp], xmm0
$LN4@fixed_wing:

; 756  : 	}
; 757  : 
; 758  : 
; 759  : 	max_roll = get_local_entity_float_value (en, FLOAT_TYPE_MAX_ROLL);

  00152	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00156	74 0a		 je	 SHORT $LN13@fixed_wing
  00158	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0015b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015d	89 4d 90	 mov	 DWORD PTR tv153[ebp], ecx
  00160	eb 21		 jmp	 SHORT $LN14@fixed_wing
$LN13@fixed_wing:
  00162	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_calc_attitude@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  00168	83 c2 2d	 add	 edx, 45			; 0000002dH
  0016b	52		 push	 edx
  0016c	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00171	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00176	50		 push	 eax
  00177	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0017c	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv153[ebp], 0
$LN14@fixed_wing:
  00183	b9 01 00 00 00	 mov	 ecx, 1
  00188	85 c9		 test	 ecx, ecx
  0018a	74 09		 je	 SHORT $LN15@fixed_wing
  0018c	c7 45 8c 4e 00
	00 00		 mov	 DWORD PTR tv161[ebp], 78 ; 0000004eH
  00193	eb 21		 jmp	 SHORT $LN16@fixed_wing
$LN15@fixed_wing:
  00195	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_calc_attitude@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  0019b	83 c2 2d	 add	 edx, 45			; 0000002dH
  0019e	52		 push	 edx
  0019f	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  001a4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  001a9	50		 push	 eax
  001aa	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001af	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR tv161[ebp], 0
$LN16@fixed_wing:
  001b6	6a 4e		 push	 78			; 0000004eH
  001b8	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  001bb	51		 push	 ecx
  001bc	69 55 90 bc 02
	00 00		 imul	 edx, DWORD PTR tv153[ebp], 700
  001c3	8b 45 8c	 mov	 eax, DWORD PTR tv161[ebp]
  001c6	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  001cd	ff d1		 call	 ecx
  001cf	d9 5d d8	 fstp	 DWORD PTR _max_roll$[ebp]

; 760  : 
; 761  : 	factor = max_roll * 0.01;

  001d2	f3 0f 5a 45 d8	 cvtss2sd xmm0, DWORD PTR _max_roll$[ebp]
  001d7	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  001df	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001e3	f3 0f 11 45 d4	 movss	 DWORD PTR _factor$[ebp], xmm0

; 762  : 
; 763  : 	if (fabs (change_in_heading) >= factor)

  001e8	51		 push	 ecx
  001e9	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _change_in_heading$[ebp]
  001ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f3	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  001f8	d9 5d 90	 fstp	 DWORD PTR tv277[ebp]
  001fb	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR tv277[ebp]
  00200	0f 2f 45 d4	 comiss	 xmm0, DWORD PTR _factor$[ebp]
  00204	72 11		 jb	 SHORT $LN5@fixed_wing

; 764  : 	{
; 765  : 		roll += change_in_heading;

  00206	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _roll$[ebp]
  0020b	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _change_in_heading$[ebp]
  00210	f3 0f 11 45 dc	 movss	 DWORD PTR _roll$[ebp], xmm0

; 766  : 
; 767  : 	}
; 768  : 	else

  00215	eb 73		 jmp	 SHORT $LN6@fixed_wing
$LN5@fixed_wing:

; 769  : 	{
; 770  : 		factor = (factor - fabs (change_in_heading)) / factor;

  00217	51		 push	 ecx
  00218	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _change_in_heading$[ebp]
  0021d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00222	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00227	d9 5d 90	 fstp	 DWORD PTR tv284[ebp]
  0022a	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _factor$[ebp]
  0022f	f3 0f 5c 45 90	 subss	 xmm0, DWORD PTR tv284[ebp]
  00234	f3 0f 5e 45 d4	 divss	 xmm0, DWORD PTR _factor$[ebp]
  00239	f3 0f 11 45 d4	 movss	 DWORD PTR _factor$[ebp], xmm0

; 771  : 
; 772  : 		roll -= (roll * factor * get_entity_movement_delta_time ());

  0023e	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00243	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _factor$[ebp]
  00248	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00250	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _roll$[ebp]
  00255	f3 0f 5c c8	 subss	 xmm1, xmm0
  00259	f3 0f 11 4d dc	 movss	 DWORD PTR _roll$[ebp], xmm1

; 773  : 
; 774  : 		roll += (change_in_heading * (1.0 - factor));

  0025e	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _change_in_heading$[ebp]
  00263	f3 0f 5a 4d d4	 cvtss2sd xmm1, DWORD PTR _factor$[ebp]
  00268	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@3ff0000000000000
  00270	f2 0f 5c d1	 subsd	 xmm2, xmm1
  00274	f2 0f 59 c2	 mulsd	 xmm0, xmm2
  00278	f3 0f 5a 4d dc	 cvtss2sd xmm1, DWORD PTR _roll$[ebp]
  0027d	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00281	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00285	f3 0f 11 45 dc	 movss	 DWORD PTR _roll$[ebp], xmm0
$LN6@fixed_wing:

; 775  : 
; 776  : 	}
; 777  : 
; 778  : 	//wrap roll
; 779  : 	if (max_roll >= PI)

  0028a	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _max_roll$[ebp]
  0028f	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@40490fdb
  00296	72 44		 jb	 SHORT $LN7@fixed_wing

; 780  : 	{
; 781  : 		if (roll > PI)

  00298	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _roll$[ebp]
  0029d	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@40490fdb
  002a4	76 14		 jbe	 SHORT $LN9@fixed_wing

; 782  : 		{
; 783  : 			roll -= PI2;

  002a6	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _roll$[ebp]
  002ab	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40c90fdb
  002b3	f3 0f 11 45 dc	 movss	 DWORD PTR _roll$[ebp], xmm0
  002b8	eb 20		 jmp	 SHORT $LN11@fixed_wing
$LN9@fixed_wing:

; 784  : 		}
; 785  : 		else if (roll < (-PI))

  002ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0490fdb
  002c2	0f 2f 45 dc	 comiss	 xmm0, DWORD PTR _roll$[ebp]
  002c6	76 12		 jbe	 SHORT $LN11@fixed_wing

; 786  : 		{
; 787  : 			roll += PI2;

  002c8	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _roll$[ebp]
  002cd	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40c90fdb
  002d5	f3 0f 11 45 dc	 movss	 DWORD PTR _roll$[ebp], xmm0
$LN11@fixed_wing:

; 788  : 		}
; 789  : 	}
; 790  : 	else

  002da	eb 5a		 jmp	 SHORT $LN8@fixed_wing
$LN7@fixed_wing:

; 791  : 	{
; 792  : 
; 793  : 		roll = bound (roll, -max_roll, max_roll);

  002dc	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _max_roll$[ebp]
  002e1	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  002e8	0f 2f 45 dc	 comiss	 xmm0, DWORD PTR _roll$[ebp]
  002ec	76 13		 jbe	 SHORT $LN19@fixed_wing
  002ee	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _max_roll$[ebp]
  002f3	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  002fa	f3 0f 11 45 90	 movss	 DWORD PTR tv198[ebp], xmm0
  002ff	eb 2b		 jmp	 SHORT $LN20@fixed_wing
$LN19@fixed_wing:
  00301	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00306	0f 2f 45 d8	 comiss	 xmm0, DWORD PTR _max_roll$[ebp]
  0030a	76 0c		 jbe	 SHORT $LN17@fixed_wing
  0030c	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _max_roll$[ebp]
  00311	f3 0f 11 45 8c	 movss	 DWORD PTR tv197[ebp], xmm0
  00316	eb 0a		 jmp	 SHORT $LN18@fixed_wing
$LN17@fixed_wing:
  00318	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _roll$[ebp]
  0031d	f3 0f 11 45 8c	 movss	 DWORD PTR tv197[ebp], xmm0
$LN18@fixed_wing:
  00322	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR tv197[ebp]
  00327	f3 0f 11 45 90	 movss	 DWORD PTR tv198[ebp], xmm0
$LN20@fixed_wing:
  0032c	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR tv198[ebp]
  00331	f3 0f 11 45 dc	 movss	 DWORD PTR _roll$[ebp], xmm0
$LN8@fixed_wing:

; 794  : 	}
; 795  : 
; 796  : 	get_3d_transformation_matrix (raw->ac.mob.attitude, heading, pitch, roll);

  00336	51		 push	 ecx
  00337	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _roll$[ebp]
  0033c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00341	51		 push	 ecx
  00342	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  00347	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034c	51		 push	 ecx
  0034d	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _heading$[ebp]
  00352	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00357	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0035a	83 c0 10	 add	 eax, 16			; 00000010H
  0035d	50		 push	 eax
  0035e	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 797  : 
; 798  : }

  00363	5f		 pop	 edi
  00364	5e		 pop	 esi
  00365	5b		 pop	 ebx
  00366	8b e5		 mov	 esp, ebp
  00368	5d		 pop	 ebp
  00369	c2 0c 00	 ret	 12			; 0000000cH
?fixed_wing_calc_attitude@@YGXPAUENTITY@@PAUVEC3D@@1@Z ENDP ; fixed_wing_calc_attitude
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_move.c
;	COMDAT ?fixed_wing_navigator@@YGXPAUENTITY@@PAUVEC3D@@1@Z
_TEXT	SEGMENT
tv79 = -84						; size = 4
tv72 = -80						; size = 4
_acc_req$ = -12						; size = 12
_en$ = 8						; size = 4
_acc$ = 12						; size = 4
_vel$ = 16						; size = 4
?fixed_wing_navigator@@YGXPAUENTITY@@PAUVEC3D@@1@Z PROC	; fixed_wing_navigator, COMDAT

; 677  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 678  : 	vec3d
; 679  : 		acc_req;
; 680  : 
; 681  : 	acc_req.x = acc_req.y = acc_req.z = 0.0;

  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	f3 0f 11 45 fc	 movss	 DWORD PTR _acc_req$[ebp+8], xmm0
  00011	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _acc_req$[ebp+8]
  00016	f3 0f 11 45 f8	 movss	 DWORD PTR _acc_req$[ebp+4], xmm0
  0001b	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _acc_req$[ebp+4]
  00020	f3 0f 11 45 f4	 movss	 DWORD PTR _acc_req$[ebp], xmm0

; 682  : 
; 683  : 	acc->x = acc->y = acc->z = 0.0;

  00025	8b 45 0c	 mov	 eax, DWORD PTR _acc$[ebp]
  00028	0f 57 c0	 xorps	 xmm0, xmm0
  0002b	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _acc$[ebp]
  00033	0f 57 c0	 xorps	 xmm0, xmm0
  00036	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
  0003b	8b 55 0c	 mov	 edx, DWORD PTR _acc$[ebp]
  0003e	0f 57 c0	 xorps	 xmm0, xmm0
  00041	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 684  : 
; 685  : 	if( !get_local_entity_int_value (en, INT_TYPE_TASK_LEADER) )

  00045	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00049	74 0a		 je	 SHORT $LN5@fixed_wing
  0004b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	89 4d b0	 mov	 DWORD PTR tv72[ebp], ecx
  00053	eb 1d		 jmp	 SHORT $LN6@fixed_wing
$LN5@fixed_wing:
  00055	68 ad 02 00 00	 push	 685			; 000002adH
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00065	52		 push	 edx
  00066	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006b	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$LN6@fixed_wing:
  00072	b8 01 00 00 00	 mov	 eax, 1
  00077	85 c0		 test	 eax, eax
  00079	74 09		 je	 SHORT $LN7@fixed_wing
  0007b	c7 45 ac dd 00
	00 00		 mov	 DWORD PTR tv79[ebp], 221 ; 000000ddH
  00082	eb 1d		 jmp	 SHORT $LN8@fixed_wing
$LN7@fixed_wing:
  00084	68 ad 02 00 00	 push	 685			; 000002adH
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0008e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0009a	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$LN8@fixed_wing:
  000a1	68 dd 00 00 00	 push	 221			; 000000ddH
  000a6	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  000a9	52		 push	 edx
  000aa	69 45 b0 5c 04
	00 00		 imul	 eax, DWORD PTR tv72[ebp], 1116
  000b1	8b 4d ac	 mov	 ecx, DWORD PTR tv79[ebp]
  000b4	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  000bb	ff d2		 call	 edx
  000bd	85 c0		 test	 eax, eax
  000bf	75 46		 jne	 SHORT $LN2@fixed_wing

; 686  : 	{
; 687  : 		fixed_wing_collision_avoidance (en, &acc_req);

  000c1	8d 45 f4	 lea	 eax, DWORD PTR _acc_req$[ebp]
  000c4	50		 push	 eax
  000c5	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000c8	51		 push	 ecx
  000c9	e8 00 00 00 00	 call	 ?fixed_wing_collision_avoidance@@YGXPAUENTITY@@PAUVEC3D@@@Z ; fixed_wing_collision_avoidance

; 688  : 
; 689  : 		fixed_wing_accum(en, acc, &acc_req);

  000ce	8d 45 f4	 lea	 eax, DWORD PTR _acc_req$[ebp]
  000d1	50		 push	 eax
  000d2	8b 4d 0c	 mov	 ecx, DWORD PTR _acc$[ebp]
  000d5	51		 push	 ecx
  000d6	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  000d9	52		 push	 edx
  000da	e8 00 00 00 00	 call	 ?fixed_wing_accum@@YGMPAUENTITY@@PAUVEC3D@@1@Z ; fixed_wing_accum
  000df	dd d8		 fstp	 ST(0)

; 690  : 
; 691  : 		fixed_wing_pursue_guide (en, vel, &acc_req);

  000e1	8d 45 f4	 lea	 eax, DWORD PTR _acc_req$[ebp]
  000e4	50		 push	 eax
  000e5	8b 4d 10	 mov	 ecx, DWORD PTR _vel$[ebp]
  000e8	51		 push	 ecx
  000e9	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  000ec	52		 push	 edx
  000ed	e8 00 00 00 00	 call	 ?fixed_wing_pursue_guide@@YGXPAUENTITY@@PAUVEC3D@@1@Z ; fixed_wing_pursue_guide

; 692  : 
; 693  : 		fixed_wing_accum(en, acc, &acc_req);

  000f2	8d 45 f4	 lea	 eax, DWORD PTR _acc_req$[ebp]
  000f5	50		 push	 eax
  000f6	8b 4d 0c	 mov	 ecx, DWORD PTR _acc$[ebp]
  000f9	51		 push	 ecx
  000fa	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  000fd	52		 push	 edx
  000fe	e8 00 00 00 00	 call	 ?fixed_wing_accum@@YGMPAUENTITY@@PAUVEC3D@@1@Z ; fixed_wing_accum
  00103	dd d8		 fstp	 ST(0)

; 694  : 
; 695  : 	}
; 696  : 	else

  00105	eb 44		 jmp	 SHORT $LN3@fixed_wing
$LN2@fixed_wing:

; 697  : 	{
; 698  : 		fixed_wing_collision_avoidance (en, &acc_req);

  00107	8d 45 f4	 lea	 eax, DWORD PTR _acc_req$[ebp]
  0010a	50		 push	 eax
  0010b	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0010e	51		 push	 ecx
  0010f	e8 00 00 00 00	 call	 ?fixed_wing_collision_avoidance@@YGXPAUENTITY@@PAUVEC3D@@@Z ; fixed_wing_collision_avoidance

; 699  : 
; 700  : 		fixed_wing_accum(en, acc, &acc_req);

  00114	8d 45 f4	 lea	 eax, DWORD PTR _acc_req$[ebp]
  00117	50		 push	 eax
  00118	8b 4d 0c	 mov	 ecx, DWORD PTR _acc$[ebp]
  0011b	51		 push	 ecx
  0011c	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0011f	52		 push	 edx
  00120	e8 00 00 00 00	 call	 ?fixed_wing_accum@@YGMPAUENTITY@@PAUVEC3D@@1@Z ; fixed_wing_accum
  00125	dd d8		 fstp	 ST(0)

; 701  : 
; 702  : 		fixed_wing_follow_waypoint (en, vel, acc);

  00127	8b 45 0c	 mov	 eax, DWORD PTR _acc$[ebp]
  0012a	50		 push	 eax
  0012b	8b 4d 10	 mov	 ecx, DWORD PTR _vel$[ebp]
  0012e	51		 push	 ecx
  0012f	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00132	52		 push	 edx
  00133	e8 00 00 00 00	 call	 ?fixed_wing_follow_waypoint@@YGXPAUENTITY@@PAUVEC3D@@1@Z ; fixed_wing_follow_waypoint

; 703  : 
; 704  : 		fixed_wing_accum(en, acc, &acc_req);

  00138	8d 45 f4	 lea	 eax, DWORD PTR _acc_req$[ebp]
  0013b	50		 push	 eax
  0013c	8b 4d 0c	 mov	 ecx, DWORD PTR _acc$[ebp]
  0013f	51		 push	 ecx
  00140	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00143	52		 push	 edx
  00144	e8 00 00 00 00	 call	 ?fixed_wing_accum@@YGMPAUENTITY@@PAUVEC3D@@1@Z ; fixed_wing_accum
  00149	dd d8		 fstp	 ST(0)
$LN3@fixed_wing:

; 705  : 	}
; 706  : 
; 707  : }

  0014b	5f		 pop	 edi
  0014c	5e		 pop	 esi
  0014d	5b		 pop	 ebx
  0014e	8b e5		 mov	 esp, ebp
  00150	5d		 pop	 ebp
  00151	c2 0c 00	 ret	 12			; 0000000cH
?fixed_wing_navigator@@YGXPAUENTITY@@PAUVEC3D@@1@Z ENDP	; fixed_wing_navigator
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_move.c
;	COMDAT ?fixed_wing_pursue_guide@@YGXPAUENTITY@@PAUVEC3D@@1@Z
_TEXT	SEGMENT
tv425 = -164						; size = 8
tv279 = -156						; size = 4
tv228 = -156						; size = 4
tv205 = -156						; size = 4
tv183 = -156						; size = 4
tv162 = -156						; size = 4
tv136 = -156						; size = 4
tv79 = -156						; size = 4
tv280 = -152						; size = 4
tv220 = -152						; size = 4
tv197 = -152						; size = 4
tv175 = -152						; size = 4
tv154 = -152						; size = 4
tv128 = -152						; size = 4
tv71 = -152						; size = 4
_curr_speed$ = -84					; size = 4
_ramped_speed$ = -80					; size = 4
_sd_shift$ = -76					; size = 4
_max_speed$ = -72					; size = 4
_wp_speed$ = -68					; size = 4
_distance$ = -64					; size = 4
_slowdown_distance$ = -60				; size = 4
_vel_shift$ = -56					; size = 12
_wp_vec$ = -44						; size = 12
_wp_pos$ = -32						; size = 12
_curr_pos$ = -20					; size = 4
_raw$ = -16						; size = 4
_leader_raw$ = -12					; size = 4
_leader$ = -8						; size = 4
_guide$ = -4						; size = 4
_en$ = 8						; size = 4
_vel$ = 12						; size = 4
_des_acc$ = 16						; size = 4
?fixed_wing_pursue_guide@@YGXPAUENTITY@@PAUVEC3D@@1@Z PROC ; fixed_wing_pursue_guide, COMDAT

; 453  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 454  : 	entity
; 455  : 		*guide,
; 456  : 		*leader;
; 457  : 
; 458  : 	fixed_wing
; 459  : 		*leader_raw,
; 460  : 		*raw;
; 461  : 
; 462  : 	vec3d
; 463  : 		*curr_pos,
; 464  : 		wp_pos,
; 465  : 		wp_vec,
; 466  : 		vel_shift;
; 467  : 
; 468  : 	float
; 469  : 		slowdown_distance,
; 470  : 		distance,
; 471  : 		wp_speed,
; 472  : 		max_speed,
; 473  : 		sd_shift,
; 474  : 		ramped_speed,
; 475  : 		curr_speed;
; 476  : 
; 477  : 	raw = (fixed_wing *) get_local_entity_data (en);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00012	89 4d f0	 mov	 DWORD PTR _raw$[ebp], ecx

; 478  : 
; 479  : 	guide = get_local_entity_parent (en, LIST_TYPE_FOLLOWER);

  00015	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00019	74 0d		 je	 SHORT $LN8@fixed_wing
  0001b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0001e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00020	89 8d 68 ff ff
	ff		 mov	 DWORD PTR tv71[ebp], ecx
  00026	eb 24		 jmp	 SHORT $LN9@fixed_wing
$LN8@fixed_wing:
  00028	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_pursue_guide@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  0002e	83 c2 1a	 add	 edx, 26			; 0000001aH
  00031	52		 push	 edx
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00037	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00042	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv71[ebp], 0
$LN9@fixed_wing:
  0004c	b9 01 00 00 00	 mov	 ecx, 1
  00051	85 c9		 test	 ecx, ecx
  00053	74 0c		 je	 SHORT $LN10@fixed_wing
  00055	c7 85 64 ff ff
	ff 0d 00 00 00	 mov	 DWORD PTR tv79[ebp], 13	; 0000000dH
  0005f	eb 24		 jmp	 SHORT $LN11@fixed_wing
$LN10@fixed_wing:
  00061	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_pursue_guide@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  00067	83 c2 1a	 add	 edx, 26			; 0000001aH
  0006a	52		 push	 edx
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00070	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0007b	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv79[ebp], 0
$LN11@fixed_wing:
  00085	6a 0d		 push	 13			; 0000000dH
  00087	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0008a	51		 push	 ecx
  0008b	69 95 68 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv71[ebp], 180
  00095	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR tv79[ebp]
  0009b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  000a2	ff d1		 call	 ecx
  000a4	89 45 fc	 mov	 DWORD PTR _guide$[ebp], eax

; 480  : 
; 481  : 	ASSERT (guide);

  000a7	83 7d fc 00	 cmp	 DWORD PTR _guide$[ebp], 0
  000ab	75 18		 jne	 SHORT $LN2@fixed_wing
  000ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??fixed_wing_pursue_guide@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  000b2	83 c0 1c	 add	 eax, 28			; 0000001cH
  000b5	50		 push	 eax
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_05HLIEEKJG@guide@
  000c0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@fixed_wing:

; 482  : 
; 483  : 	leader = (entity *) get_local_entity_ptr_value(guide, PTR_TYPE_TASK_LEADER);

  000c5	83 7d fc 00	 cmp	 DWORD PTR _guide$[ebp], 0
  000c9	74 0d		 je	 SHORT $LN12@fixed_wing
  000cb	8b 45 fc	 mov	 eax, DWORD PTR _guide$[ebp]
  000ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d0	89 8d 68 ff ff
	ff		 mov	 DWORD PTR tv128[ebp], ecx
  000d6	eb 24		 jmp	 SHORT $LN13@fixed_wing
$LN12@fixed_wing:
  000d8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_pursue_guide@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  000de	83 c2 1e	 add	 edx, 30			; 0000001eH
  000e1	52		 push	 edx
  000e2	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000ec	50		 push	 eax
  000ed	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000f2	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv128[ebp], 0
$LN13@fixed_wing:
  000fc	b9 01 00 00 00	 mov	 ecx, 1
  00101	85 c9		 test	 ecx, ecx
  00103	74 0c		 je	 SHORT $LN14@fixed_wing
  00105	c7 85 64 ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR tv136[ebp], 15 ; 0000000fH
  0010f	eb 24		 jmp	 SHORT $LN15@fixed_wing
$LN14@fixed_wing:
  00111	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_pursue_guide@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  00117	83 c2 1e	 add	 edx, 30			; 0000001eH
  0011a	52		 push	 edx
  0011b	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00120	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_ptr_type_message@@3PBDB ; overload_invalid_ptr_type_message
  00125	50		 push	 eax
  00126	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0012b	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv136[ebp], 0
$LN15@fixed_wing:
  00135	6a 0f		 push	 15			; 0000000fH
  00137	8b 4d fc	 mov	 ecx, DWORD PTR _guide$[ebp]
  0013a	51		 push	 ecx
  0013b	6b 95 68 ff ff
	ff 50		 imul	 edx, DWORD PTR tv128[ebp], 80
  00142	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR tv136[ebp]
  00148	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_ptr_value@@3PAY0BE@P6GPAXPAUENTITY@@W4PTR_TYPES@@@ZA[edx+eax*4]
  0014f	ff d1		 call	 ecx
  00151	89 45 f8	 mov	 DWORD PTR _leader$[ebp], eax

; 484  : 
; 485  : 	ASSERT (leader);

  00154	83 7d f8 00	 cmp	 DWORD PTR _leader$[ebp], 0
  00158	75 18		 jne	 SHORT $LN3@fixed_wing
  0015a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??fixed_wing_pursue_guide@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  0015f	83 c0 20	 add	 eax, 32			; 00000020H
  00162	50		 push	 eax
  00163	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00168	68 00 00 00 00	 push	 OFFSET ??_C@_06DFLPLEOP@leader@
  0016d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@fixed_wing:

; 486  : 
; 487  : 	leader_raw = (fixed_wing *) get_local_entity_data(leader);

  00172	8b 45 f8	 mov	 eax, DWORD PTR _leader$[ebp]
  00175	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00178	89 4d f4	 mov	 DWORD PTR _leader_raw$[ebp], ecx

; 488  : 
; 489  : 	wp_speed = get_local_entity_float_value (guide, FLOAT_TYPE_VELOCITY);

  0017b	83 7d fc 00	 cmp	 DWORD PTR _guide$[ebp], 0
  0017f	74 0d		 je	 SHORT $LN16@fixed_wing
  00181	8b 45 fc	 mov	 eax, DWORD PTR _guide$[ebp]
  00184	8b 08		 mov	 ecx, DWORD PTR [eax]
  00186	89 8d 68 ff ff
	ff		 mov	 DWORD PTR tv154[ebp], ecx
  0018c	eb 24		 jmp	 SHORT $LN17@fixed_wing
$LN16@fixed_wing:
  0018e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_pursue_guide@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  00194	83 c2 24	 add	 edx, 36			; 00000024H
  00197	52		 push	 edx
  00198	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0019d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001a2	50		 push	 eax
  001a3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001a8	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv154[ebp], 0
$LN17@fixed_wing:
  001b2	b9 01 00 00 00	 mov	 ecx, 1
  001b7	85 c9		 test	 ecx, ecx
  001b9	74 0c		 je	 SHORT $LN18@fixed_wing
  001bb	c7 85 64 ff ff
	ff 93 00 00 00	 mov	 DWORD PTR tv162[ebp], 147 ; 00000093H
  001c5	eb 24		 jmp	 SHORT $LN19@fixed_wing
$LN18@fixed_wing:
  001c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_pursue_guide@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  001cd	83 c2 24	 add	 edx, 36			; 00000024H
  001d0	52		 push	 edx
  001d1	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  001d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  001db	50		 push	 eax
  001dc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001e1	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv162[ebp], 0
$LN19@fixed_wing:
  001eb	68 93 00 00 00	 push	 147			; 00000093H
  001f0	8b 4d fc	 mov	 ecx, DWORD PTR _guide$[ebp]
  001f3	51		 push	 ecx
  001f4	69 95 68 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv154[ebp], 700
  001fe	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR tv162[ebp]
  00204	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  0020b	ff d1		 call	 ecx
  0020d	d9 5d bc	 fstp	 DWORD PTR _wp_speed$[ebp]

; 490  : 
; 491  : 	if(wp_speed == 0)

  00210	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _wp_speed$[ebp]
  00215	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  0021c	9f		 lahf
  0021d	f6 c4 44	 test	 ah, 68			; 00000044H
  00220	0f 8a 92 00 00
	00		 jp	 $LN4@fixed_wing

; 492  : 	{
; 493  : 		wp_speed = get_local_entity_float_value(en, FLOAT_TYPE_CRUISE_VELOCITY);

  00226	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0022a	74 0d		 je	 SHORT $LN20@fixed_wing
  0022c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0022f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00231	89 8d 68 ff ff
	ff		 mov	 DWORD PTR tv175[ebp], ecx
  00237	eb 24		 jmp	 SHORT $LN21@fixed_wing
$LN20@fixed_wing:
  00239	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_pursue_guide@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  0023f	83 c2 28	 add	 edx, 40			; 00000028H
  00242	52		 push	 edx
  00243	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00248	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0024d	50		 push	 eax
  0024e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00253	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv175[ebp], 0
$LN21@fixed_wing:
  0025d	b9 01 00 00 00	 mov	 ecx, 1
  00262	85 c9		 test	 ecx, ecx
  00264	74 0c		 je	 SHORT $LN22@fixed_wing
  00266	c7 85 64 ff ff
	ff 19 00 00 00	 mov	 DWORD PTR tv183[ebp], 25 ; 00000019H
  00270	eb 24		 jmp	 SHORT $LN23@fixed_wing
$LN22@fixed_wing:
  00272	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_pursue_guide@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  00278	83 c2 28	 add	 edx, 40			; 00000028H
  0027b	52		 push	 edx
  0027c	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00281	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00286	50		 push	 eax
  00287	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0028c	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv183[ebp], 0
$LN23@fixed_wing:
  00296	6a 19		 push	 25			; 00000019H
  00298	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0029b	51		 push	 ecx
  0029c	69 95 68 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv175[ebp], 700
  002a6	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR tv183[ebp]
  002ac	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  002b3	ff d1		 call	 ecx
  002b5	d9 5d bc	 fstp	 DWORD PTR _wp_speed$[ebp]
$LN4@fixed_wing:

; 494  : 	}
; 495  : 
; 496  : 	fixed_wing_movement_get_waypoint_position (en, &wp_pos);

  002b8	8d 45 e0	 lea	 eax, DWORD PTR _wp_pos$[ebp]
  002bb	50		 push	 eax
  002bc	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  002bf	51		 push	 ecx
  002c0	e8 00 00 00 00	 call	 ?fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z ; fixed_wing_movement_get_waypoint_position

; 497  : 
; 498  : 	curr_pos = get_local_entity_vec3d_ptr (en, VEC3D_TYPE_POSITION);

  002c5	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  002c9	74 0d		 je	 SHORT $LN24@fixed_wing
  002cb	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  002ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  002d0	89 8d 68 ff ff
	ff		 mov	 DWORD PTR tv197[ebp], ecx
  002d6	eb 24		 jmp	 SHORT $LN25@fixed_wing
$LN24@fixed_wing:
  002d8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_pursue_guide@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  002de	83 c2 2d	 add	 edx, 45			; 0000002dH
  002e1	52		 push	 edx
  002e2	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  002e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002ec	50		 push	 eax
  002ed	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002f2	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv197[ebp], 0
$LN25@fixed_wing:
  002fc	b9 01 00 00 00	 mov	 ecx, 1
  00301	85 c9		 test	 ecx, ecx
  00303	74 0c		 je	 SHORT $LN26@fixed_wing
  00305	c7 85 64 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv205[ebp], 8
  0030f	eb 24		 jmp	 SHORT $LN27@fixed_wing
$LN26@fixed_wing:
  00311	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_pursue_guide@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  00317	83 c2 2d	 add	 edx, 45			; 0000002dH
  0031a	52		 push	 edx
  0031b	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00320	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00325	50		 push	 eax
  00326	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0032b	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv205[ebp], 0
$LN27@fixed_wing:
  00335	6a 08		 push	 8
  00337	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0033a	51		 push	 ecx
  0033b	6b 95 68 ff ff
	ff 60		 imul	 edx, DWORD PTR tv197[ebp], 96
  00342	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR tv205[ebp]
  00348	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0034f	ff d1		 call	 ecx
  00351	89 45 ec	 mov	 DWORD PTR _curr_pos$[ebp], eax

; 499  : 
; 500  : 	curr_speed = raw->ac.mob.velocity;

  00354	8b 45 f0	 mov	 eax, DWORD PTR _raw$[ebp]
  00357	f3 0f 10 40 40	 movss	 xmm0, DWORD PTR [eax+64]
  0035c	f3 0f 11 45 ac	 movss	 DWORD PTR _curr_speed$[ebp], xmm0

; 501  : 
; 502  : 	max_speed = get_local_entity_float_value (en, FLOAT_TYPE_CRUISE_VELOCITY) * 2.0;

  00361	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00365	74 0d		 je	 SHORT $LN28@fixed_wing
  00367	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0036a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0036c	89 8d 68 ff ff
	ff		 mov	 DWORD PTR tv220[ebp], ecx
  00372	eb 24		 jmp	 SHORT $LN29@fixed_wing
$LN28@fixed_wing:
  00374	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_pursue_guide@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  0037a	83 c2 31	 add	 edx, 49			; 00000031H
  0037d	52		 push	 edx
  0037e	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00383	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00388	50		 push	 eax
  00389	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0038e	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv220[ebp], 0
$LN29@fixed_wing:
  00398	b9 01 00 00 00	 mov	 ecx, 1
  0039d	85 c9		 test	 ecx, ecx
  0039f	74 0c		 je	 SHORT $LN30@fixed_wing
  003a1	c7 85 64 ff ff
	ff 19 00 00 00	 mov	 DWORD PTR tv228[ebp], 25 ; 00000019H
  003ab	eb 24		 jmp	 SHORT $LN31@fixed_wing
$LN30@fixed_wing:
  003ad	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_pursue_guide@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  003b3	83 c2 31	 add	 edx, 49			; 00000031H
  003b6	52		 push	 edx
  003b7	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  003bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  003c1	50		 push	 eax
  003c2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003c7	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv228[ebp], 0
$LN31@fixed_wing:
  003d1	6a 19		 push	 25			; 00000019H
  003d3	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  003d6	51		 push	 ecx
  003d7	69 95 68 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv220[ebp], 700
  003e1	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR tv228[ebp]
  003e7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  003ee	ff d1		 call	 ecx
  003f0	dd 9d 5c ff ff
	ff		 fstp	 QWORD PTR tv425[ebp]
  003f6	f2 0f 10 85 5c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv425[ebp]
  003fe	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  00406	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0040a	f3 0f 11 45 b8	 movss	 DWORD PTR _max_speed$[ebp], xmm0

; 503  : 
; 504  : 	slowdown_distance = max_speed * 1.5;

  0040f	f3 0f 5a 45 b8	 cvtss2sd xmm0, DWORD PTR _max_speed$[ebp]
  00414	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff8000000000000
  0041c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00420	f3 0f 11 45 c4	 movss	 DWORD PTR _slowdown_distance$[ebp], xmm0

; 505  : 
; 506  : 	// shift slowdown radius forwards so point of velocity equilibrium is coincident with formation position required
; 507  : 
; 508  : 	sd_shift = (wp_speed * 1.5);

  00425	f3 0f 5a 45 bc	 cvtss2sd xmm0, DWORD PTR _wp_speed$[ebp]
  0042a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff8000000000000
  00432	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00436	f3 0f 11 45 b4	 movss	 DWORD PTR _sd_shift$[ebp], xmm0

; 509  : 
; 510  : 	vel_shift = leader_raw->ac.mob.motion_vector;

  0043b	8b 45 f4	 mov	 eax, DWORD PTR _leader_raw$[ebp]
  0043e	83 c0 34	 add	 eax, 52			; 00000034H
  00441	8b 08		 mov	 ecx, DWORD PTR [eax]
  00443	89 4d c8	 mov	 DWORD PTR _vel_shift$[ebp], ecx
  00446	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00449	89 55 cc	 mov	 DWORD PTR _vel_shift$[ebp+4], edx
  0044c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0044f	89 45 d0	 mov	 DWORD PTR _vel_shift$[ebp+8], eax

; 511  : 
; 512  : 	normalise_any_3d_vector (&vel_shift);

  00452	8d 45 c8	 lea	 eax, DWORD PTR _vel_shift$[ebp]
  00455	50		 push	 eax
  00456	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  0045b	dd d8		 fstp	 ST(0)

; 513  : 
; 514  : 	// get vector to the offset waypoint
; 515  : 	wp_vec.x = (wp_pos.x + vel_shift.x * sd_shift) - (curr_pos->x + vel->x * get_entity_movement_delta_time ());

  0045d	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _vel_shift$[ebp]
  00462	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _sd_shift$[ebp]
  00467	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _wp_pos$[ebp]
  0046c	8b 45 0c	 mov	 eax, DWORD PTR _vel$[ebp]
  0046f	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00473	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR ?system_delta_time@@3MA
  0047b	8b 4d ec	 mov	 ecx, DWORD PTR _curr_pos$[ebp]
  0047e	f3 0f 58 09	 addss	 xmm1, DWORD PTR [ecx]
  00482	f3 0f 5c c1	 subss	 xmm0, xmm1
  00486	f3 0f 11 45 d4	 movss	 DWORD PTR _wp_vec$[ebp], xmm0

; 516  : 	wp_vec.y = (wp_pos.y + vel_shift.y * sd_shift) - (curr_pos->y + vel->y * get_entity_movement_delta_time ());

  0048b	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _vel_shift$[ebp+4]
  00490	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _sd_shift$[ebp]
  00495	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _wp_pos$[ebp+4]
  0049a	8b 45 0c	 mov	 eax, DWORD PTR _vel$[ebp]
  0049d	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  004a2	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR ?system_delta_time@@3MA
  004aa	8b 4d ec	 mov	 ecx, DWORD PTR _curr_pos$[ebp]
  004ad	f3 0f 58 49 04	 addss	 xmm1, DWORD PTR [ecx+4]
  004b2	f3 0f 5c c1	 subss	 xmm0, xmm1
  004b6	f3 0f 11 45 d8	 movss	 DWORD PTR _wp_vec$[ebp+4], xmm0

; 517  : 	wp_vec.z = (wp_pos.z + vel_shift.z * sd_shift) - (curr_pos->z + vel->z * get_entity_movement_delta_time ());

  004bb	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _vel_shift$[ebp+8]
  004c0	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _sd_shift$[ebp]
  004c5	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _wp_pos$[ebp+8]
  004ca	8b 45 0c	 mov	 eax, DWORD PTR _vel$[ebp]
  004cd	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  004d2	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR ?system_delta_time@@3MA
  004da	8b 4d ec	 mov	 ecx, DWORD PTR _curr_pos$[ebp]
  004dd	f3 0f 58 49 08	 addss	 xmm1, DWORD PTR [ecx+8]
  004e2	f3 0f 5c c1	 subss	 xmm0, xmm1
  004e6	f3 0f 11 45 dc	 movss	 DWORD PTR _wp_vec$[ebp+8], xmm0

; 518  : 
; 519  : 	distance = get_3d_vector_magnitude (&wp_vec);

  004eb	8d 45 d4	 lea	 eax, DWORD PTR _wp_vec$[ebp]
  004ee	50		 push	 eax
  004ef	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  004f4	d9 5d c0	 fstp	 DWORD PTR _distance$[ebp]

; 520  : 
; 521  : 	if (distance > 0.0)

  004f7	f3 0f 5a 45 c0	 cvtss2sd xmm0, DWORD PTR _distance$[ebp]
  004fc	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00504	0f 86 11 01 00
	00		 jbe	 $LN5@fixed_wing

; 522  : 	{
; 523  : 		// ramp the speed linearly to zero from slowdown distance to formation point
; 524  : 		ramped_speed = max_speed * (distance / slowdown_distance);

  0050a	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _distance$[ebp]
  0050f	f3 0f 5e 45 c4	 divss	 xmm0, DWORD PTR _slowdown_distance$[ebp]
  00514	f3 0f 59 45 b8	 mulss	 xmm0, DWORD PTR _max_speed$[ebp]
  00519	f3 0f 11 45 b0	 movss	 DWORD PTR _ramped_speed$[ebp], xmm0

; 525  : 
; 526  : 		ramped_speed = bound (ramped_speed, -max_speed, max_speed);

  0051e	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _max_speed$[ebp]
  00523	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0052a	0f 2f 45 b0	 comiss	 xmm0, DWORD PTR _ramped_speed$[ebp]
  0052e	76 16		 jbe	 SHORT $LN34@fixed_wing
  00530	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _max_speed$[ebp]
  00535	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0053c	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR tv280[ebp], xmm0
  00544	eb 37		 jmp	 SHORT $LN35@fixed_wing
$LN34@fixed_wing:
  00546	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _ramped_speed$[ebp]
  0054b	0f 2f 45 b8	 comiss	 xmm0, DWORD PTR _max_speed$[ebp]
  0054f	76 0f		 jbe	 SHORT $LN32@fixed_wing
  00551	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _max_speed$[ebp]
  00556	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR tv279[ebp], xmm0
  0055e	eb 0d		 jmp	 SHORT $LN33@fixed_wing
$LN32@fixed_wing:
  00560	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _ramped_speed$[ebp]
  00565	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR tv279[ebp], xmm0
$LN33@fixed_wing:
  0056d	f3 0f 10 85 64
	ff ff ff	 movss	 xmm0, DWORD PTR tv279[ebp]
  00575	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR tv280[ebp], xmm0
$LN35@fixed_wing:
  0057d	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR tv280[ebp]
  00585	f3 0f 11 45 b0	 movss	 DWORD PTR _ramped_speed$[ebp], xmm0

; 527  : 
; 528  : 		normalise_3d_vector_given_magnitude (&wp_vec, distance);

  0058a	51		 push	 ecx
  0058b	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _distance$[ebp]
  00590	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00595	8d 45 d4	 lea	 eax, DWORD PTR _wp_vec$[ebp]
  00598	50		 push	 eax
  00599	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 529  : 
; 530  : 		fixed_wing_aim_correction (en, &wp_vec, vel);

  0059e	8b 45 0c	 mov	 eax, DWORD PTR _vel$[ebp]
  005a1	50		 push	 eax
  005a2	8d 4d d4	 lea	 ecx, DWORD PTR _wp_vec$[ebp]
  005a5	51		 push	 ecx
  005a6	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  005a9	52		 push	 edx
  005aa	e8 00 00 00 00	 call	 ?fixed_wing_aim_correction@@YGXPAUENTITY@@PAUVEC3D@@1@Z ; fixed_wing_aim_correction

; 531  : 
; 532  : 		wp_vec.x *= ramped_speed;

  005af	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _wp_vec$[ebp]
  005b4	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _ramped_speed$[ebp]
  005b9	f3 0f 11 45 d4	 movss	 DWORD PTR _wp_vec$[ebp], xmm0

; 533  : 		wp_vec.y *= ramped_speed;

  005be	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _wp_vec$[ebp+4]
  005c3	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _ramped_speed$[ebp]
  005c8	f3 0f 11 45 d8	 movss	 DWORD PTR _wp_vec$[ebp+4], xmm0

; 534  : 		wp_vec.z *= ramped_speed;

  005cd	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _wp_vec$[ebp+8]
  005d2	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _ramped_speed$[ebp]
  005d7	f3 0f 11 45 dc	 movss	 DWORD PTR _wp_vec$[ebp+8], xmm0

; 535  : 
; 536  : 		// calculate desired change in velocity
; 537  : 		des_acc->x = wp_vec.x - vel->x;

  005dc	8b 45 0c	 mov	 eax, DWORD PTR _vel$[ebp]
  005df	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _wp_vec$[ebp]
  005e4	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  005e8	8b 4d 10	 mov	 ecx, DWORD PTR _des_acc$[ebp]
  005eb	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 538  : 		des_acc->y = wp_vec.y - vel->y;

  005ef	8b 45 0c	 mov	 eax, DWORD PTR _vel$[ebp]
  005f2	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _wp_vec$[ebp+4]
  005f7	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  005fc	8b 4d 10	 mov	 ecx, DWORD PTR _des_acc$[ebp]
  005ff	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 539  : 		des_acc->z = wp_vec.z - vel->z;

  00604	8b 45 0c	 mov	 eax, DWORD PTR _vel$[ebp]
  00607	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _wp_vec$[ebp+8]
  0060c	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00611	8b 4d 10	 mov	 ecx, DWORD PTR _des_acc$[ebp]
  00614	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 540  : 	}
; 541  : 	else

  00619	eb 43		 jmp	 SHORT $LN6@fixed_wing
$LN5@fixed_wing:

; 542  : 	{
; 543  : 		des_acc->x = -vel->x;

  0061b	8b 45 0c	 mov	 eax, DWORD PTR _vel$[ebp]
  0061e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00622	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00629	8b 4d 10	 mov	 ecx, DWORD PTR _des_acc$[ebp]
  0062c	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 544  : 		des_acc->y = -vel->y;

  00630	8b 45 0c	 mov	 eax, DWORD PTR _vel$[ebp]
  00633	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00638	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0063f	8b 4d 10	 mov	 ecx, DWORD PTR _des_acc$[ebp]
  00642	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 545  : 		des_acc->z = -vel->z;

  00647	8b 45 0c	 mov	 eax, DWORD PTR _vel$[ebp]
  0064a	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0064f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00656	8b 4d 10	 mov	 ecx, DWORD PTR _des_acc$[ebp]
  00659	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
$LN6@fixed_wing:

; 546  : 	}
; 547  : }

  0065e	5f		 pop	 edi
  0065f	5e		 pop	 esi
  00660	5b		 pop	 ebx
  00661	8b e5		 mov	 esp, ebp
  00663	5d		 pop	 ebp
  00664	c2 0c 00	 ret	 12			; 0000000cH
?fixed_wing_pursue_guide@@YGXPAUENTITY@@PAUVEC3D@@1@Z ENDP ; fixed_wing_pursue_guide
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_move.c
;	COMDAT ?fixed_wing_follow_waypoint@@YGXPAUENTITY@@PAUVEC3D@@1@Z
_TEXT	SEGMENT
tv179 = -112						; size = 4
tv158 = -112						; size = 4
tv133 = -112						; size = 4
tv81 = -112						; size = 4
tv171 = -108						; size = 4
tv150 = -108						; size = 4
tv93 = -108						; size = 4
tv73 = -108						; size = 4
_wp_vel$ = -40						; size = 4
_wp_vec$ = -36						; size = 12
_wp_pos$ = -24						; size = 12
_curr_pos$ = -12					; size = 4
_guide$ = -8						; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
_vel$ = 12						; size = 4
_des_acc$ = 16						; size = 4
?fixed_wing_follow_waypoint@@YGXPAUENTITY@@PAUVEC3D@@1@Z PROC ; fixed_wing_follow_waypoint, COMDAT

; 393  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 394  : 	fixed_wing
; 395  : 		*raw;
; 396  : 
; 397  : 	entity
; 398  : 		*guide;
; 399  : 
; 400  : 	vec3d
; 401  : 		*curr_pos,
; 402  : 		wp_pos,
; 403  : 		wp_vec;
; 404  : 
; 405  : 	float
; 406  : 		wp_vel;
; 407  : 
; 408  : 	raw = (fixed_wing *) get_local_entity_data (en);

  00009	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 409  : 
; 410  : 	fixed_wing_movement_get_waypoint_position (en, &wp_pos);

  00012	8d 45 e8	 lea	 eax, DWORD PTR _wp_pos$[ebp]
  00015	50		 push	 eax
  00016	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ?fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z ; fixed_wing_movement_get_waypoint_position

; 411  : 
; 412  : 	curr_pos = get_local_entity_vec3d_ptr (en, VEC3D_TYPE_POSITION);

  0001f	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00023	74 0a		 je	 SHORT $LN5@fixed_wing
  00025	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	89 4d 94	 mov	 DWORD PTR tv73[ebp], ecx
  0002d	eb 21		 jmp	 SHORT $LN6@fixed_wing
$LN5@fixed_wing:
  0002f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_follow_waypoint@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  00035	83 c2 13	 add	 edx, 19			; 00000013H
  00038	52		 push	 edx
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00049	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN6@fixed_wing:
  00050	b9 01 00 00 00	 mov	 ecx, 1
  00055	85 c9		 test	 ecx, ecx
  00057	74 09		 je	 SHORT $LN7@fixed_wing
  00059	c7 45 90 08 00
	00 00		 mov	 DWORD PTR tv81[ebp], 8
  00060	eb 21		 jmp	 SHORT $LN8@fixed_wing
$LN7@fixed_wing:
  00062	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_follow_waypoint@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  00068	83 c2 13	 add	 edx, 19			; 00000013H
  0006b	52		 push	 edx
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00071	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0007c	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN8@fixed_wing:
  00083	6a 08		 push	 8
  00085	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00088	51		 push	 ecx
  00089	6b 55 94 60	 imul	 edx, DWORD PTR tv73[ebp], 96
  0008d	8b 45 90	 mov	 eax, DWORD PTR tv81[ebp]
  00090	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00097	ff d1		 call	 ecx
  00099	89 45 f4	 mov	 DWORD PTR _curr_pos$[ebp], eax

; 413  : 
; 414  : 	guide = get_local_entity_parent (en, LIST_TYPE_FOLLOWER);

  0009c	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  000a0	74 0a		 je	 SHORT $LN9@fixed_wing
  000a2	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000a5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a7	89 4d 94	 mov	 DWORD PTR tv93[ebp], ecx
  000aa	eb 21		 jmp	 SHORT $LN10@fixed_wing
$LN9@fixed_wing:
  000ac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_follow_waypoint@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  000b2	83 c2 15	 add	 edx, 21			; 00000015H
  000b5	52		 push	 edx
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  000bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000c6	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv93[ebp], 0
$LN10@fixed_wing:
  000cd	b9 01 00 00 00	 mov	 ecx, 1
  000d2	85 c9		 test	 ecx, ecx
  000d4	74 09		 je	 SHORT $LN11@fixed_wing
  000d6	c7 45 90 0d 00
	00 00		 mov	 DWORD PTR tv133[ebp], 13 ; 0000000dH
  000dd	eb 21		 jmp	 SHORT $LN12@fixed_wing
$LN11@fixed_wing:
  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_follow_waypoint@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  000e5	83 c2 15	 add	 edx, 21			; 00000015H
  000e8	52		 push	 edx
  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000f9	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv133[ebp], 0
$LN12@fixed_wing:
  00100	6a 0d		 push	 13			; 0000000dH
  00102	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00105	51		 push	 ecx
  00106	69 55 94 b4 00
	00 00		 imul	 edx, DWORD PTR tv93[ebp], 180
  0010d	8b 45 90	 mov	 eax, DWORD PTR tv133[ebp]
  00110	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00117	ff d1		 call	 ecx
  00119	89 45 f8	 mov	 DWORD PTR _guide$[ebp], eax

; 415  : 
; 416  : 	ASSERT (guide);

  0011c	83 7d f8 00	 cmp	 DWORD PTR _guide$[ebp], 0
  00120	75 18		 jne	 SHORT $LN2@fixed_wing
  00122	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??fixed_wing_follow_waypoint@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  00127	83 c0 17	 add	 eax, 23			; 00000017H
  0012a	50		 push	 eax
  0012b	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00130	68 00 00 00 00	 push	 OFFSET ??_C@_05HLIEEKJG@guide@
  00135	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@fixed_wing:

; 417  : 
; 418  : 	wp_vel = get_local_entity_float_value (guide, FLOAT_TYPE_VELOCITY);

  0013a	83 7d f8 00	 cmp	 DWORD PTR _guide$[ebp], 0
  0013e	74 0a		 je	 SHORT $LN13@fixed_wing
  00140	8b 45 f8	 mov	 eax, DWORD PTR _guide$[ebp]
  00143	8b 08		 mov	 ecx, DWORD PTR [eax]
  00145	89 4d 94	 mov	 DWORD PTR tv150[ebp], ecx
  00148	eb 21		 jmp	 SHORT $LN14@fixed_wing
$LN13@fixed_wing:
  0014a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_follow_waypoint@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  00150	83 c2 19	 add	 edx, 25			; 00000019H
  00153	52		 push	 edx
  00154	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00159	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0015e	50		 push	 eax
  0015f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00164	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv150[ebp], 0
$LN14@fixed_wing:
  0016b	b9 01 00 00 00	 mov	 ecx, 1
  00170	85 c9		 test	 ecx, ecx
  00172	74 09		 je	 SHORT $LN15@fixed_wing
  00174	c7 45 90 93 00
	00 00		 mov	 DWORD PTR tv158[ebp], 147 ; 00000093H
  0017b	eb 21		 jmp	 SHORT $LN16@fixed_wing
$LN15@fixed_wing:
  0017d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_follow_waypoint@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  00183	83 c2 19	 add	 edx, 25			; 00000019H
  00186	52		 push	 edx
  00187	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0018c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00191	50		 push	 eax
  00192	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00197	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv158[ebp], 0
$LN16@fixed_wing:
  0019e	68 93 00 00 00	 push	 147			; 00000093H
  001a3	8b 4d f8	 mov	 ecx, DWORD PTR _guide$[ebp]
  001a6	51		 push	 ecx
  001a7	69 55 94 bc 02
	00 00		 imul	 edx, DWORD PTR tv150[ebp], 700
  001ae	8b 45 90	 mov	 eax, DWORD PTR tv158[ebp]
  001b1	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  001b8	ff d1		 call	 ecx
  001ba	d9 5d d8	 fstp	 DWORD PTR _wp_vel$[ebp]

; 419  : 
; 420  : 	if(wp_vel == 0)

  001bd	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _wp_vel$[ebp]
  001c2	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  001c9	9f		 lahf
  001ca	f6 c4 44	 test	 ah, 68			; 00000044H
  001cd	0f 8a 80 00 00
	00		 jp	 $LN3@fixed_wing

; 421  : 	{
; 422  : 		wp_vel = get_local_entity_float_value(en, FLOAT_TYPE_CRUISE_VELOCITY);

  001d3	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  001d7	74 0a		 je	 SHORT $LN17@fixed_wing
  001d9	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  001dc	8b 08		 mov	 ecx, DWORD PTR [eax]
  001de	89 4d 94	 mov	 DWORD PTR tv171[ebp], ecx
  001e1	eb 21		 jmp	 SHORT $LN18@fixed_wing
$LN17@fixed_wing:
  001e3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_follow_waypoint@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  001e9	83 c2 1d	 add	 edx, 29			; 0000001dH
  001ec	52		 push	 edx
  001ed	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  001f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001f7	50		 push	 eax
  001f8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001fd	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv171[ebp], 0
$LN18@fixed_wing:
  00204	b9 01 00 00 00	 mov	 ecx, 1
  00209	85 c9		 test	 ecx, ecx
  0020b	74 09		 je	 SHORT $LN19@fixed_wing
  0020d	c7 45 90 19 00
	00 00		 mov	 DWORD PTR tv179[ebp], 25 ; 00000019H
  00214	eb 21		 jmp	 SHORT $LN20@fixed_wing
$LN19@fixed_wing:
  00216	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_follow_waypoint@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  0021c	83 c2 1d	 add	 edx, 29			; 0000001dH
  0021f	52		 push	 edx
  00220	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00225	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0022a	50		 push	 eax
  0022b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00230	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv179[ebp], 0
$LN20@fixed_wing:
  00237	6a 19		 push	 25			; 00000019H
  00239	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0023c	51		 push	 ecx
  0023d	69 55 94 bc 02
	00 00		 imul	 edx, DWORD PTR tv171[ebp], 700
  00244	8b 45 90	 mov	 eax, DWORD PTR tv179[ebp]
  00247	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  0024e	ff d1		 call	 ecx
  00250	d9 5d d8	 fstp	 DWORD PTR _wp_vel$[ebp]
$LN3@fixed_wing:

; 423  : 	}
; 424  : 
; 425  : 	// get waypoint vector - no lookahead
; 426  : 	wp_vec.x = wp_pos.x - curr_pos->x;

  00253	8b 45 f4	 mov	 eax, DWORD PTR _curr_pos$[ebp]
  00256	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _wp_pos$[ebp]
  0025b	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  0025f	f3 0f 11 45 dc	 movss	 DWORD PTR _wp_vec$[ebp], xmm0

; 427  : 	wp_vec.y = wp_pos.y - curr_pos->y;

  00264	8b 45 f4	 mov	 eax, DWORD PTR _curr_pos$[ebp]
  00267	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _wp_pos$[ebp+4]
  0026c	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  00271	f3 0f 11 45 e0	 movss	 DWORD PTR _wp_vec$[ebp+4], xmm0

; 428  : 	wp_vec.z = wp_pos.z - curr_pos->z;

  00276	8b 45 f4	 mov	 eax, DWORD PTR _curr_pos$[ebp]
  00279	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _wp_pos$[ebp+8]
  0027e	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00283	f3 0f 11 45 e4	 movss	 DWORD PTR _wp_vec$[ebp+8], xmm0

; 429  : 
; 430  : 	fixed_wing_attain_waypoint (en, &wp_vec, vel);

  00288	8b 45 0c	 mov	 eax, DWORD PTR _vel$[ebp]
  0028b	50		 push	 eax
  0028c	8d 4d dc	 lea	 ecx, DWORD PTR _wp_vec$[ebp]
  0028f	51		 push	 ecx
  00290	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00293	52		 push	 edx
  00294	e8 00 00 00 00	 call	 ?fixed_wing_attain_waypoint@@YGXPAUENTITY@@PAUVEC3D@@1@Z ; fixed_wing_attain_waypoint

; 431  : 
; 432  : 	// scale to correct length - that of waypoint velocity
; 433  : 	normalise_any_3d_vector (&wp_vec);

  00299	8d 45 dc	 lea	 eax, DWORD PTR _wp_vec$[ebp]
  0029c	50		 push	 eax
  0029d	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  002a2	dd d8		 fstp	 ST(0)

; 434  : 
; 435  : 	fixed_wing_aim_correction (en, &wp_vec, vel);

  002a4	8b 45 0c	 mov	 eax, DWORD PTR _vel$[ebp]
  002a7	50		 push	 eax
  002a8	8d 4d dc	 lea	 ecx, DWORD PTR _wp_vec$[ebp]
  002ab	51		 push	 ecx
  002ac	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  002af	52		 push	 edx
  002b0	e8 00 00 00 00	 call	 ?fixed_wing_aim_correction@@YGXPAUENTITY@@PAUVEC3D@@1@Z ; fixed_wing_aim_correction

; 436  : 
; 437  : 	wp_vec.x *= wp_vel;

  002b5	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _wp_vec$[ebp]
  002ba	f3 0f 59 45 d8	 mulss	 xmm0, DWORD PTR _wp_vel$[ebp]
  002bf	f3 0f 11 45 dc	 movss	 DWORD PTR _wp_vec$[ebp], xmm0

; 438  : 	wp_vec.y *= wp_vel;

  002c4	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _wp_vec$[ebp+4]
  002c9	f3 0f 59 45 d8	 mulss	 xmm0, DWORD PTR _wp_vel$[ebp]
  002ce	f3 0f 11 45 e0	 movss	 DWORD PTR _wp_vec$[ebp+4], xmm0

; 439  : 	wp_vec.z *= wp_vel;

  002d3	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _wp_vec$[ebp+8]
  002d8	f3 0f 59 45 d8	 mulss	 xmm0, DWORD PTR _wp_vel$[ebp]
  002dd	f3 0f 11 45 e4	 movss	 DWORD PTR _wp_vec$[ebp+8], xmm0

; 440  : 
; 441  : 	// calculate desired change in velocity
; 442  : 	des_acc->x = wp_vec.x - vel->x;

  002e2	8b 45 0c	 mov	 eax, DWORD PTR _vel$[ebp]
  002e5	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _wp_vec$[ebp]
  002ea	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  002ee	8b 4d 10	 mov	 ecx, DWORD PTR _des_acc$[ebp]
  002f1	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 443  : 	des_acc->y = wp_vec.y - vel->y;

  002f5	8b 45 0c	 mov	 eax, DWORD PTR _vel$[ebp]
  002f8	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _wp_vec$[ebp+4]
  002fd	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  00302	8b 4d 10	 mov	 ecx, DWORD PTR _des_acc$[ebp]
  00305	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 444  : 	des_acc->z = wp_vec.z - vel->z;

  0030a	8b 45 0c	 mov	 eax, DWORD PTR _vel$[ebp]
  0030d	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _wp_vec$[ebp+8]
  00312	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00317	8b 4d 10	 mov	 ecx, DWORD PTR _des_acc$[ebp]
  0031a	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 445  : 
; 446  : }

  0031f	5f		 pop	 edi
  00320	5e		 pop	 esi
  00321	5b		 pop	 ebx
  00322	8b e5		 mov	 esp, ebp
  00324	5d		 pop	 ebp
  00325	c2 0c 00	 ret	 12			; 0000000cH
?fixed_wing_follow_waypoint@@YGXPAUENTITY@@PAUVEC3D@@1@Z ENDP ; fixed_wing_follow_waypoint
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_move.c
;	COMDAT ?fixed_wing_aim_correction@@YGXPAUENTITY@@PAUVEC3D@@1@Z
_TEXT	SEGMENT
tv207 = -92						; size = 4
tv185 = -92						; size = 4
tv215 = -88						; size = 4
tv169 = -88						; size = 8
tv160 = -88						; size = 8
tv135 = -88						; size = 4
tv179 = -84						; size = 4
tv95 = -84						; size = 4
_dir_vec$ = -16						; size = 12
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
_wp_vec$ = 12						; size = 4
_vel$ = 16						; size = 4
?fixed_wing_aim_correction@@YGXPAUENTITY@@PAUVEC3D@@1@Z PROC ; fixed_wing_aim_correction, COMDAT

; 327  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 328  : 	fixed_wing
; 329  : 		*raw;
; 330  : 
; 331  : 	vec3d
; 332  : 		dir_vec;
; 333  : 
; 334  : 	raw = (fixed_wing *) get_local_entity_data (en);

  00009	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 335  : 
; 336  : 	if (!check_zero_3d_vector (vel))

  00012	8b 45 10	 mov	 eax, DWORD PTR _vel$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  0001b	dd 5d a8	 fstp	 QWORD PTR tv160[ebp]
  0001e	f2 0f 10 45 a8	 movsd	 xmm0, QWORD PTR tv160[ebp]
  00023	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0002b	9f		 lahf
  0002c	f6 c4 44	 test	 ah, 68			; 00000044H
  0002f	0f 8b 4b 01 00
	00		 jnp	 $LN3@fixed_wing

; 337  : 	{
; 338  : 		if ((get_3d_vector_dot_product (wp_vec, vel) < 0.0))

  00035	8b 45 10	 mov	 eax, DWORD PTR _vel$[ebp]
  00038	50		 push	 eax
  00039	8b 4d 0c	 mov	 ecx, DWORD PTR _wp_vec$[ebp]
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 ?get_3d_vector_dot_product@@YGMPBUVEC3D@@0@Z ; get_3d_vector_dot_product
  00042	dd 5d a8	 fstp	 QWORD PTR tv169[ebp]
  00045	0f 57 c0	 xorps	 xmm0, xmm0
  00048	66 0f 2f 45 a8	 comisd	 xmm0, QWORD PTR tv169[ebp]
  0004d	0f 86 2d 01 00
	00		 jbe	 $LN3@fixed_wing

; 339  : 		{
; 340  : 			multiply_transpose_matrix3x3_vec3d (&dir_vec, raw->ac.mob.attitude, wp_vec);

  00053	8b 45 0c	 mov	 eax, DWORD PTR _wp_vec$[ebp]
  00056	50		 push	 eax
  00057	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  0005a	83 c1 10	 add	 ecx, 16			; 00000010H
  0005d	51		 push	 ecx
  0005e	8d 55 f0	 lea	 edx, DWORD PTR _dir_vec$[ebp]
  00061	52		 push	 edx
  00062	e8 00 00 00 00	 call	 ?multiply_transpose_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_transpose_matrix3x3_vec3d

; 341  : 
; 342  : 	//		dir_vec.y = fabs (dir_vec.z * get_local_entity_float_value(en, FLOAT_TYPE_MAX_VERTICAL_TURN_ALLOWANCE));
; 343  : 
; 344  : 			if (fabs (dir_vec.y) > fabs(dir_vec.z))

  00067	51		 push	 ecx
  00068	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _dir_vec$[ebp+4]
  0006d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00072	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00077	d9 5d ac	 fstp	 DWORD PTR tv179[ebp]
  0007a	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR tv179[ebp]
  0007f	51		 push	 ecx
  00080	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _dir_vec$[ebp+8]
  00085	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  0008a	f3 0f 11 45 a8	 movss	 DWORD PTR tv215[ebp], xmm0
  0008f	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00094	d9 5d a4	 fstp	 DWORD PTR tv185[ebp]
  00097	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR tv215[ebp]
  0009c	0f 2f 45 a4	 comiss	 xmm0, DWORD PTR tv185[ebp]
  000a0	76 15		 jbe	 SHORT $LN4@fixed_wing

; 345  : 			{
; 346  : 				dir_vec.y = fabs (dir_vec.y);

  000a2	51		 push	 ecx
  000a3	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _dir_vec$[ebp+4]
  000a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ad	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  000b2	d9 5d f4	 fstp	 DWORD PTR _dir_vec$[ebp+4]

; 347  : 			}
; 348  : 			else

  000b5	eb 13		 jmp	 SHORT $LN5@fixed_wing
$LN4@fixed_wing:

; 349  : 			{
; 350  : 				dir_vec.y =fabs (dir_vec.z);

  000b7	51		 push	 ecx
  000b8	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _dir_vec$[ebp+8]
  000bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c2	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  000c7	d9 5d f4	 fstp	 DWORD PTR _dir_vec$[ebp+4]
$LN5@fixed_wing:

; 351  : 			}
; 352  : 
; 353  : 			dir_vec.y *= get_local_entity_float_value(en, FLOAT_TYPE_MAX_VERTICAL_TURN_ALLOWANCE);

  000ca	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  000ce	74 0a		 je	 SHORT $LN7@fixed_wing
  000d0	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d5	89 4d ac	 mov	 DWORD PTR tv95[ebp], ecx
  000d8	eb 21		 jmp	 SHORT $LN8@fixed_wing
$LN7@fixed_wing:
  000da	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_aim_correction@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  000e0	83 c2 1a	 add	 edx, 26			; 0000001aH
  000e3	52		 push	 edx
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000ee	50		 push	 eax
  000ef	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000f4	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv95[ebp], 0
$LN8@fixed_wing:
  000fb	b9 01 00 00 00	 mov	 ecx, 1
  00100	85 c9		 test	 ecx, ecx
  00102	74 09		 je	 SHORT $LN9@fixed_wing
  00104	c7 45 a8 4f 00
	00 00		 mov	 DWORD PTR tv135[ebp], 79 ; 0000004fH
  0010b	eb 21		 jmp	 SHORT $LN10@fixed_wing
$LN9@fixed_wing:
  0010d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_aim_correction@@YGXPAUENTITY@@PAUVEC3D@@1@Z@4JA
  00113	83 c2 1a	 add	 edx, 26			; 0000001aH
  00116	52		 push	 edx
  00117	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0011c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00121	50		 push	 eax
  00122	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00127	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv135[ebp], 0
$LN10@fixed_wing:
  0012e	6a 4f		 push	 79			; 0000004fH
  00130	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00133	51		 push	 ecx
  00134	69 55 ac bc 02
	00 00		 imul	 edx, DWORD PTR tv95[ebp], 700
  0013b	8b 45 a8	 mov	 eax, DWORD PTR tv135[ebp]
  0013e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00145	ff d1		 call	 ecx
  00147	d9 5d a4	 fstp	 DWORD PTR tv207[ebp]
  0014a	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR tv207[ebp]
  0014f	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _dir_vec$[ebp+4]
  00154	f3 0f 11 45 f4	 movss	 DWORD PTR _dir_vec$[ebp+4], xmm0

; 354  : 
; 355  : 			dir_vec.z = 0.0;

  00159	0f 57 c0	 xorps	 xmm0, xmm0
  0015c	f3 0f 11 45 f8	 movss	 DWORD PTR _dir_vec$[ebp+8], xmm0

; 356  : 
; 357  : 			normalise_any_3d_vector (&dir_vec);

  00161	8d 45 f0	 lea	 eax, DWORD PTR _dir_vec$[ebp]
  00164	50		 push	 eax
  00165	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  0016a	dd d8		 fstp	 ST(0)

; 358  : 
; 359  : 			multiply_matrix3x3_vec3d (wp_vec, raw->ac.mob.attitude, &dir_vec);

  0016c	8d 45 f0	 lea	 eax, DWORD PTR _dir_vec$[ebp]
  0016f	50		 push	 eax
  00170	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00173	83 c1 10	 add	 ecx, 16			; 00000010H
  00176	51		 push	 ecx
  00177	8b 55 0c	 mov	 edx, DWORD PTR _wp_vec$[ebp]
  0017a	52		 push	 edx
  0017b	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d
$LN3@fixed_wing:

; 360  : 
; 361  : 	//old methods
; 362  : 	/*
; 363  : 			//max_roll or equivalent should be in ac_dbase
; 364  : 			max_roll = aircraft_database[raw->ac.mob.sub_type].max_turn_rate;
; 365  : 
; 366  : 			if (max_roll >= (rad (90.0)))
; 367  : 			{
; 368  : 				//this is wrong if the plane is inverted - will it ever be the case
; 369  : 				aim_vec.x = raw->ac.mob.yv.x;
; 370  : 				aim_vec.y = raw->ac.mob.yv.y;
; 371  : 				aim_vec.z = raw->ac.mob.yv.z;
; 372  : 			}
; 373  : 			else
; 374  : 			{
; 375  : 				//cheap horizontal vector to aim for - potentially problematic?
; 376  : 				*aim_vec = raw->ac.mob.xv;
; 377  : 
; 378  : 				aim_vec->y = 0.0;
; 379  : 
; 380  : 				normalise_any_3d_vector (aim_vec);
; 381  : 			}
; 382  : 	*/
; 383  : 		}
; 384  : 	}
; 385  : 
; 386  : }

  00180	5f		 pop	 edi
  00181	5e		 pop	 esi
  00182	5b		 pop	 ebx
  00183	8b e5		 mov	 esp, ebp
  00185	5d		 pop	 ebp
  00186	c2 0c 00	 ret	 12			; 0000000cH
?fixed_wing_aim_correction@@YGXPAUENTITY@@PAUVEC3D@@1@Z ENDP ; fixed_wing_aim_correction
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_move.c
;	COMDAT ?fixed_wing_attain_waypoint@@YGXPAUENTITY@@PAUVEC3D@@1@Z
_TEXT	SEGMENT
_max_turn_radius$ = -12					; size = 4
_distance_to_wp$ = -8					; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
_wp_vec$ = 12						; size = 4
_vel$ = 16						; size = 4
?fixed_wing_attain_waypoint@@YGXPAUENTITY@@PAUVEC3D@@1@Z PROC ; fixed_wing_attain_waypoint, COMDAT

; 288  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 289  : 	fixed_wing
; 290  : 		*raw;
; 291  : 
; 292  : 	float
; 293  : 		distance_to_wp,
; 294  : 		max_turn_radius;
; 295  : 
; 296  : 	raw = (fixed_wing *) get_local_entity_data (en);

  00009	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 297  : 
; 298  : 	distance_to_wp = get_3d_vector_magnitude (wp_vec);

  00012	8b 45 0c	 mov	 eax, DWORD PTR _wp_vec$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  0001b	d9 5d f8	 fstp	 DWORD PTR _distance_to_wp$[ebp]

; 299  : 
; 300  : 	max_turn_radius = (raw->ac.mob.velocity * raw->ac.mob.velocity) / aircraft_database [raw->ac.mob.sub_type].g_max;

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00024	f3 0f 10 40 40	 movss	 xmm0, DWORD PTR [eax+64]
  00029	f3 0f 59 41 40	 mulss	 xmm0, DWORD PTR [ecx+64]
  0002e	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00031	69 02 f4 00 00
	00		 imul	 eax, DWORD PTR [edx], 244
  00037	f3 0f 5e 80 a8
	00 00 00	 divss	 xmm0, DWORD PTR ?aircraft_database@@3PAUAIRCRAFT_DATA@@A[eax+168]
  0003f	f3 0f 11 45 f4	 movss	 DWORD PTR _max_turn_radius$[ebp], xmm0

; 301  : 
; 302  : 	//test to see if waypoint is attainable
; 303  : 	if (distance_to_wp < max_turn_radius)

  00044	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _max_turn_radius$[ebp]
  00049	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _distance_to_wp$[ebp]
  0004d	76 16		 jbe	 SHORT $LN2@fixed_wing

; 304  : 	{
; 305  : 
; 306  : 		//continue along current motion vector until waypoint can be reached
; 307  : 		*wp_vec = *vel;

  0004f	8b 45 10	 mov	 eax, DWORD PTR _vel$[ebp]
  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _wp_vec$[ebp]
  00055	8b 10		 mov	 edx, DWORD PTR [eax]
  00057	89 11		 mov	 DWORD PTR [ecx], edx
  00059	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0005c	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0005f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00062	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN2@fixed_wing:

; 308  : 
; 309  : 		#if DEBUG_MODULE
; 310  : 
; 311  : 		if (en == get_external_view_entity ())
; 312  : 		{
; 313  : 			debug_filtered_log ("UTAW: %s %d", entity_sub_type_aircraft_names[raw->ac.mob.sub_type], get_local_entity_index(en));
; 314  : 		}
; 315  : 
; 316  : 		#endif
; 317  : 
; 318  : 	}
; 319  : 
; 320  : }

  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 0c 00	 ret	 12			; 0000000cH
?fixed_wing_attain_waypoint@@YGXPAUENTITY@@PAUVEC3D@@1@Z ENDP ; fixed_wing_attain_waypoint
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_move.c
;	COMDAT ?fixed_wing_collision_avoidance@@YGXPAUENTITY@@PAUVEC3D@@@Z
_TEXT	SEGMENT
tv591 = -228						; size = 8
tv376 = -220						; size = 4
tv355 = -220						; size = 4
tv231 = -220						; size = 4
tv208 = -220						; size = 4
tv183 = -220						; size = 4
tv150 = -220						; size = 4
tv130 = -220						; size = 4
tv77 = -220						; size = 4
tv368 = -216						; size = 4
tv347 = -216						; size = 4
tv223 = -216						; size = 4
tv200 = -216						; size = 4
tv175 = -216						; size = 4
tv142 = -216						; size = 4
tv90 = -216						; size = 4
tv70 = -216						; size = 4
_wp_distance$ = -148					; size = 4
_max_speed$ = -144					; size = 4
_avoid_distance$ = -140					; size = 4
_jet_to_jet_2d_distance$ = -136				; size = 4
_shortest_distance$ = -132				; size = 4
_test_distance$ = -128					; size = 4
_wp_vec$ = -124						; size = 12
_wp_pos$ = -112						; size = 12
_local_jet_to_jet$ = -100				; size = 12
_nearest_jet_to_jet$ = -88				; size = 12
_jet_to_jet$ = -76					; size = 12
_jet_pos$ = -64						; size = 4
_curr_pos$ = -60					; size = 4
_wp_attitude$ = -56					; size = 36
_jet_raw$ = -20						; size = 4
_raw$ = -16						; size = 4
_nearest$ = -12						; size = 4
_member$ = -8						; size = 4
_group$ = -4						; size = 4
_en$ = 8						; size = 4
_des_acc$ = 12						; size = 4
?fixed_wing_collision_avoidance@@YGXPAUENTITY@@PAUVEC3D@@@Z PROC ; fixed_wing_collision_avoidance, COMDAT

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 144  : 	entity
; 145  : 		*group,
; 146  : 		*member,
; 147  : 		*nearest;
; 148  : 
; 149  : 	fixed_wing
; 150  : 		*raw,
; 151  : 		*jet_raw;
; 152  : 
; 153  : 	matrix3x3
; 154  : 		wp_attitude;
; 155  : 
; 156  : 	vec3d
; 157  : 		*curr_pos,
; 158  : 		*jet_pos,
; 159  : 		jet_to_jet,
; 160  : 		nearest_jet_to_jet,
; 161  : 		local_jet_to_jet,
; 162  : 		wp_pos,
; 163  : 		wp_vec;
; 164  : 
; 165  : 	float
; 166  : 		test_distance,
; 167  : 		shortest_distance,
; 168  : 		jet_to_jet_2d_distance,
; 169  : 		avoid_distance,
; 170  : 		max_speed,
; 171  : 		wp_distance;
; 172  : 
; 173  : 	nearest = NULL;

  0000c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _nearest$[ebp], 0

; 174  : 
; 175  : 	raw = (fixed_wing *) get_local_entity_data (en);

  00013	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00016	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00019	89 4d f0	 mov	 DWORD PTR _raw$[ebp], ecx

; 176  : 
; 177  : 	// if entity is not the leader, test for potential collision
; 178  : 	if (!get_local_entity_int_value(en, INT_TYPE_GROUP_LEADER))

  0001c	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00020	74 0d		 je	 SHORT $LN13@fixed_wing
  00022	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	89 8d 28 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], ecx
  0002d	eb 20		 jmp	 SHORT $LN14@fixed_wing
$LN13@fixed_wing:
  0002f	68 b2 00 00 00	 push	 178			; 000000b2H
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00039	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0003f	52		 push	 edx
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00045	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN14@fixed_wing:
  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	85 c0		 test	 eax, eax
  00056	74 0c		 je	 SHORT $LN15@fixed_wing
  00058	c7 85 24 ff ff
	ff 48 00 00 00	 mov	 DWORD PTR tv77[ebp], 72	; 00000048H
  00062	eb 20		 jmp	 SHORT $LN16@fixed_wing
$LN15@fixed_wing:
  00064	68 b2 00 00 00	 push	 178			; 000000b2H
  00069	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0007a	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv77[ebp], 0
$LN16@fixed_wing:
  00084	6a 48		 push	 72			; 00000048H
  00086	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00089	52		 push	 edx
  0008a	69 85 28 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv70[ebp], 1116
  00094	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv77[ebp]
  0009a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  000a1	ff d2		 call	 edx
  000a3	85 c0		 test	 eax, eax
  000a5	0f 85 98 05 00
	00		 jne	 $LN3@fixed_wing

; 179  : 	{
; 180  : 
; 181  : 		curr_pos = get_local_entity_vec3d_ptr (en, VEC3D_TYPE_POSITION);

  000ab	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  000af	74 0d		 je	 SHORT $LN17@fixed_wing
  000b1	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000b4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b6	89 8d 28 ff ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
  000bc	eb 24		 jmp	 SHORT $LN18@fixed_wing
$LN17@fixed_wing:
  000be	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_collision_avoidance@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  000c4	83 c2 26	 add	 edx, 38			; 00000026H
  000c7	52		 push	 edx
  000c8	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  000cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000d2	50		 push	 eax
  000d3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000d8	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv90[ebp], 0
$LN18@fixed_wing:
  000e2	b9 01 00 00 00	 mov	 ecx, 1
  000e7	85 c9		 test	 ecx, ecx
  000e9	74 0c		 je	 SHORT $LN19@fixed_wing
  000eb	c7 85 24 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv130[ebp], 8
  000f5	eb 24		 jmp	 SHORT $LN20@fixed_wing
$LN19@fixed_wing:
  000f7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_collision_avoidance@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  000fd	83 c2 26	 add	 edx, 38			; 00000026H
  00100	52		 push	 edx
  00101	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00111	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv130[ebp], 0
$LN20@fixed_wing:
  0011b	6a 08		 push	 8
  0011d	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00120	51		 push	 ecx
  00121	6b 95 28 ff ff
	ff 60		 imul	 edx, DWORD PTR tv90[ebp], 96
  00128	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv130[ebp]
  0012e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00135	ff d1		 call	 ecx
  00137	89 45 c4	 mov	 DWORD PTR _curr_pos$[ebp], eax

; 182  : 
; 183  : 		shortest_distance = get_local_entity_float_value (en, FLOAT_TYPE_VELOCITY);

  0013a	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0013e	74 0d		 je	 SHORT $LN21@fixed_wing
  00140	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00143	8b 08		 mov	 ecx, DWORD PTR [eax]
  00145	89 8d 28 ff ff
	ff		 mov	 DWORD PTR tv142[ebp], ecx
  0014b	eb 24		 jmp	 SHORT $LN22@fixed_wing
$LN21@fixed_wing:
  0014d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_collision_avoidance@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00153	83 c2 28	 add	 edx, 40			; 00000028H
  00156	52		 push	 edx
  00157	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0015c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00161	50		 push	 eax
  00162	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00167	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv142[ebp], 0
$LN22@fixed_wing:
  00171	b9 01 00 00 00	 mov	 ecx, 1
  00176	85 c9		 test	 ecx, ecx
  00178	74 0c		 je	 SHORT $LN23@fixed_wing
  0017a	c7 85 24 ff ff
	ff 93 00 00 00	 mov	 DWORD PTR tv150[ebp], 147 ; 00000093H
  00184	eb 24		 jmp	 SHORT $LN24@fixed_wing
$LN23@fixed_wing:
  00186	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_collision_avoidance@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  0018c	83 c2 28	 add	 edx, 40			; 00000028H
  0018f	52		 push	 edx
  00190	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00195	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001a0	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], 0
$LN24@fixed_wing:
  001aa	68 93 00 00 00	 push	 147			; 00000093H
  001af	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  001b2	51		 push	 ecx
  001b3	69 95 28 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv142[ebp], 700
  001bd	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv150[ebp]
  001c3	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  001ca	ff d1		 call	 ecx
  001cc	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR _shortest_distance$[ebp]

; 184  : 
; 185  : 		fixed_wing_movement_get_waypoint_position (en, &wp_pos);

  001d2	8d 45 90	 lea	 eax, DWORD PTR _wp_pos$[ebp]
  001d5	50		 push	 eax
  001d6	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  001d9	51		 push	 ecx
  001da	e8 00 00 00 00	 call	 ?fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z ; fixed_wing_movement_get_waypoint_position

; 186  : 
; 187  : 		wp_vec.x = wp_pos.x - curr_pos->x;

  001df	8b 45 c4	 mov	 eax, DWORD PTR _curr_pos$[ebp]
  001e2	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _wp_pos$[ebp]
  001e7	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  001eb	f3 0f 11 45 84	 movss	 DWORD PTR _wp_vec$[ebp], xmm0

; 188  : 		wp_vec.y = wp_pos.y - curr_pos->y;

  001f0	8b 45 c4	 mov	 eax, DWORD PTR _curr_pos$[ebp]
  001f3	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _wp_pos$[ebp+4]
  001f8	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  001fd	f3 0f 11 45 88	 movss	 DWORD PTR _wp_vec$[ebp+4], xmm0

; 189  : 		wp_vec.z = wp_pos.z - curr_pos->z;

  00202	8b 45 c4	 mov	 eax, DWORD PTR _curr_pos$[ebp]
  00205	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _wp_pos$[ebp+8]
  0020a	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  0020f	f3 0f 11 45 8c	 movss	 DWORD PTR _wp_vec$[ebp+8], xmm0

; 190  : 
; 191  : 		wp_distance = get_3d_vector_magnitude (&wp_vec);

  00214	8d 45 84	 lea	 eax, DWORD PTR _wp_vec$[ebp]
  00217	50		 push	 eax
  00218	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  0021d	d9 9d 6c ff ff
	ff		 fstp	 DWORD PTR _wp_distance$[ebp]

; 192  : 
; 193  : 		normalise_any_3d_vector (&wp_vec);

  00223	8d 45 84	 lea	 eax, DWORD PTR _wp_vec$[ebp]
  00226	50		 push	 eax
  00227	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  0022c	dd d8		 fstp	 ST(0)

; 194  : 
; 195  : 		get_matrix3x3_from_unit_vec3d (wp_attitude, &wp_vec);

  0022e	8d 45 84	 lea	 eax, DWORD PTR _wp_vec$[ebp]
  00231	50		 push	 eax
  00232	8d 4d c8	 lea	 ecx, DWORD PTR _wp_attitude$[ebp]
  00235	51		 push	 ecx
  00236	e8 00 00 00 00	 call	 ?get_matrix3x3_from_unit_vec3d@@YGXQAY02MPBUVEC3D@@@Z ; get_matrix3x3_from_unit_vec3d

; 196  : 
; 197  : 		group = get_local_entity_parent (en, LIST_TYPE_MEMBER);

  0023b	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0023f	74 0d		 je	 SHORT $LN25@fixed_wing
  00241	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00244	8b 08		 mov	 ecx, DWORD PTR [eax]
  00246	89 8d 28 ff ff
	ff		 mov	 DWORD PTR tv175[ebp], ecx
  0024c	eb 24		 jmp	 SHORT $LN26@fixed_wing
$LN25@fixed_wing:
  0024e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_collision_avoidance@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00254	83 c2 36	 add	 edx, 54			; 00000036H
  00257	52		 push	 edx
  00258	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0025d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00262	50		 push	 eax
  00263	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00268	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv175[ebp], 0
$LN26@fixed_wing:
  00272	b9 01 00 00 00	 mov	 ecx, 1
  00277	85 c9		 test	 ecx, ecx
  00279	74 0c		 je	 SHORT $LN27@fixed_wing
  0027b	c7 85 24 ff ff
	ff 19 00 00 00	 mov	 DWORD PTR tv183[ebp], 25 ; 00000019H
  00285	eb 24		 jmp	 SHORT $LN28@fixed_wing
$LN27@fixed_wing:
  00287	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_collision_avoidance@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  0028d	83 c2 36	 add	 edx, 54			; 00000036H
  00290	52		 push	 edx
  00291	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00296	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0029b	50		 push	 eax
  0029c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002a1	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv183[ebp], 0
$LN28@fixed_wing:
  002ab	6a 19		 push	 25			; 00000019H
  002ad	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  002b0	51		 push	 ecx
  002b1	69 95 28 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv175[ebp], 180
  002bb	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv183[ebp]
  002c1	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  002c8	ff d1		 call	 ecx
  002ca	89 45 fc	 mov	 DWORD PTR _group$[ebp], eax

; 198  : 
; 199  : 		ASSERT (group);

  002cd	83 7d fc 00	 cmp	 DWORD PTR _group$[ebp], 0
  002d1	75 18		 jne	 SHORT $LN5@fixed_wing
  002d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??fixed_wing_collision_avoidance@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  002d8	83 c0 38	 add	 eax, 56			; 00000038H
  002db	50		 push	 eax
  002dc	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  002e1	68 00 00 00 00	 push	 OFFSET ??_C@_05MGJOOGAJ@group@
  002e6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@fixed_wing:

; 200  : 
; 201  : 		member = get_local_entity_first_child (group, LIST_TYPE_MEMBER);

  002eb	83 7d fc 00	 cmp	 DWORD PTR _group$[ebp], 0
  002ef	74 0d		 je	 SHORT $LN29@fixed_wing
  002f1	8b 45 fc	 mov	 eax, DWORD PTR _group$[ebp]
  002f4	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f6	89 8d 28 ff ff
	ff		 mov	 DWORD PTR tv200[ebp], ecx
  002fc	eb 24		 jmp	 SHORT $LN30@fixed_wing
$LN29@fixed_wing:
  002fe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_collision_avoidance@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00304	83 c2 3a	 add	 edx, 58			; 0000003aH
  00307	52		 push	 edx
  00308	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0030d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00312	50		 push	 eax
  00313	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00318	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv200[ebp], 0
$LN30@fixed_wing:
  00322	b9 01 00 00 00	 mov	 ecx, 1
  00327	85 c9		 test	 ecx, ecx
  00329	74 0c		 je	 SHORT $LN31@fixed_wing
  0032b	c7 85 24 ff ff
	ff 19 00 00 00	 mov	 DWORD PTR tv208[ebp], 25 ; 00000019H
  00335	eb 24		 jmp	 SHORT $LN32@fixed_wing
$LN31@fixed_wing:
  00337	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_collision_avoidance@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  0033d	83 c2 3a	 add	 edx, 58			; 0000003aH
  00340	52		 push	 edx
  00341	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00346	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0034b	50		 push	 eax
  0034c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00351	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv208[ebp], 0
$LN32@fixed_wing:
  0035b	6a 19		 push	 25			; 00000019H
  0035d	8b 4d fc	 mov	 ecx, DWORD PTR _group$[ebp]
  00360	51		 push	 ecx
  00361	69 95 28 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv200[ebp], 180
  0036b	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv208[ebp]
  00371	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00378	ff d1		 call	 ecx
  0037a	89 45 f8	 mov	 DWORD PTR _member$[ebp], eax
$LN2@fixed_wing:

; 202  : 
; 203  : 		// find nearest jet to ours that is in the way of our objective
; 204  : 		while (member)

  0037d	83 7d f8 00	 cmp	 DWORD PTR _member$[ebp], 0
  00381	0f 84 bc 02 00
	00		 je	 $LN3@fixed_wing

; 205  : 		{
; 206  : 			if (member != en)

  00387	8b 45 f8	 mov	 eax, DWORD PTR _member$[ebp]
  0038a	3b 45 08	 cmp	 eax, DWORD PTR _en$[ebp]
  0038d	0f 84 19 02 00
	00		 je	 $LN9@fixed_wing

; 207  : 			{
; 208  : 				jet_raw = (fixed_wing *) get_local_entity_data (member);

  00393	8b 45 f8	 mov	 eax, DWORD PTR _member$[ebp]
  00396	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00399	89 4d ec	 mov	 DWORD PTR _jet_raw$[ebp], ecx

; 209  : 
; 210  : 				jet_pos = get_local_entity_vec3d_ptr (member, VEC3D_TYPE_POSITION);

  0039c	83 7d f8 00	 cmp	 DWORD PTR _member$[ebp], 0
  003a0	74 0d		 je	 SHORT $LN33@fixed_wing
  003a2	8b 45 f8	 mov	 eax, DWORD PTR _member$[ebp]
  003a5	8b 08		 mov	 ecx, DWORD PTR [eax]
  003a7	89 8d 28 ff ff
	ff		 mov	 DWORD PTR tv223[ebp], ecx
  003ad	eb 24		 jmp	 SHORT $LN34@fixed_wing
$LN33@fixed_wing:
  003af	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_collision_avoidance@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  003b5	83 c2 43	 add	 edx, 67			; 00000043H
  003b8	52		 push	 edx
  003b9	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  003be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003c3	50		 push	 eax
  003c4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003c9	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv223[ebp], 0
$LN34@fixed_wing:
  003d3	b9 01 00 00 00	 mov	 ecx, 1
  003d8	85 c9		 test	 ecx, ecx
  003da	74 0c		 je	 SHORT $LN35@fixed_wing
  003dc	c7 85 24 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv231[ebp], 8
  003e6	eb 24		 jmp	 SHORT $LN36@fixed_wing
$LN35@fixed_wing:
  003e8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_collision_avoidance@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  003ee	83 c2 43	 add	 edx, 67			; 00000043H
  003f1	52		 push	 edx
  003f2	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  003f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  003fc	50		 push	 eax
  003fd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00402	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv231[ebp], 0
$LN36@fixed_wing:
  0040c	6a 08		 push	 8
  0040e	8b 4d f8	 mov	 ecx, DWORD PTR _member$[ebp]
  00411	51		 push	 ecx
  00412	6b 95 28 ff ff
	ff 60		 imul	 edx, DWORD PTR tv223[ebp], 96
  00419	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv231[ebp]
  0041f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00426	ff d1		 call	 ecx
  00428	89 45 c0	 mov	 DWORD PTR _jet_pos$[ebp], eax

; 211  : 
; 212  : 				jet_to_jet.x = (jet_pos->x + jet_raw->ac.mob.motion_vector.x * get_entity_movement_delta_time()) - (curr_pos->x + raw->ac.mob.motion_vector.x * get_entity_movement_delta_time());

  0042b	8b 45 ec	 mov	 eax, DWORD PTR _jet_raw$[ebp]
  0042e	f3 0f 10 40 34	 movss	 xmm0, DWORD PTR [eax+52]
  00433	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0043b	8b 4d c0	 mov	 ecx, DWORD PTR _jet_pos$[ebp]
  0043e	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  00442	8b 55 f0	 mov	 edx, DWORD PTR _raw$[ebp]
  00445	f3 0f 10 4a 34	 movss	 xmm1, DWORD PTR [edx+52]
  0044a	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR ?system_delta_time@@3MA
  00452	8b 45 c4	 mov	 eax, DWORD PTR _curr_pos$[ebp]
  00455	f3 0f 58 08	 addss	 xmm1, DWORD PTR [eax]
  00459	f3 0f 5c c1	 subss	 xmm0, xmm1
  0045d	f3 0f 11 45 b4	 movss	 DWORD PTR _jet_to_jet$[ebp], xmm0

; 213  : 				jet_to_jet.y = (jet_pos->y + jet_raw->ac.mob.motion_vector.y * get_entity_movement_delta_time()) - (curr_pos->y + raw->ac.mob.motion_vector.y * get_entity_movement_delta_time());

  00462	8b 45 ec	 mov	 eax, DWORD PTR _jet_raw$[ebp]
  00465	f3 0f 10 40 38	 movss	 xmm0, DWORD PTR [eax+56]
  0046a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00472	8b 4d c0	 mov	 ecx, DWORD PTR _jet_pos$[ebp]
  00475	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  0047a	8b 55 f0	 mov	 edx, DWORD PTR _raw$[ebp]
  0047d	f3 0f 10 4a 38	 movss	 xmm1, DWORD PTR [edx+56]
  00482	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR ?system_delta_time@@3MA
  0048a	8b 45 c4	 mov	 eax, DWORD PTR _curr_pos$[ebp]
  0048d	f3 0f 58 48 04	 addss	 xmm1, DWORD PTR [eax+4]
  00492	f3 0f 5c c1	 subss	 xmm0, xmm1
  00496	f3 0f 11 45 b8	 movss	 DWORD PTR _jet_to_jet$[ebp+4], xmm0

; 214  : 				jet_to_jet.z = (jet_pos->z + jet_raw->ac.mob.motion_vector.z * get_entity_movement_delta_time()) - (curr_pos->z + raw->ac.mob.motion_vector.z * get_entity_movement_delta_time());

  0049b	8b 45 ec	 mov	 eax, DWORD PTR _jet_raw$[ebp]
  0049e	f3 0f 10 40 3c	 movss	 xmm0, DWORD PTR [eax+60]
  004a3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  004ab	8b 4d c0	 mov	 ecx, DWORD PTR _jet_pos$[ebp]
  004ae	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  004b3	8b 55 f0	 mov	 edx, DWORD PTR _raw$[ebp]
  004b6	f3 0f 10 4a 3c	 movss	 xmm1, DWORD PTR [edx+60]
  004bb	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR ?system_delta_time@@3MA
  004c3	8b 45 c4	 mov	 eax, DWORD PTR _curr_pos$[ebp]
  004c6	f3 0f 58 48 08	 addss	 xmm1, DWORD PTR [eax+8]
  004cb	f3 0f 5c c1	 subss	 xmm0, xmm1
  004cf	f3 0f 11 45 bc	 movss	 DWORD PTR _jet_to_jet$[ebp+8], xmm0

; 215  : 
; 216  : 				multiply_transpose_matrix3x3_vec3d(&local_jet_to_jet, wp_attitude, &jet_to_jet);

  004d4	8d 45 b4	 lea	 eax, DWORD PTR _jet_to_jet$[ebp]
  004d7	50		 push	 eax
  004d8	8d 4d c8	 lea	 ecx, DWORD PTR _wp_attitude$[ebp]
  004db	51		 push	 ecx
  004dc	8d 55 9c	 lea	 edx, DWORD PTR _local_jet_to_jet$[ebp]
  004df	52		 push	 edx
  004e0	e8 00 00 00 00	 call	 ?multiply_transpose_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_transpose_matrix3x3_vec3d

; 217  : 
; 218  : 				test_distance = get_3d_vector_magnitude (&jet_to_jet);

  004e5	8d 45 b4	 lea	 eax, DWORD PTR _jet_to_jet$[ebp]
  004e8	50		 push	 eax
  004e9	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  004ee	d9 5d 80	 fstp	 DWORD PTR _test_distance$[ebp]

; 219  : 
; 220  : 				//is the jet between us and our waypoint?
; 221  : 				if ( (local_jet_to_jet.z > 0.0) && (test_distance < wp_distance) )

  004f1	f3 0f 5a 45 a4	 cvtss2sd xmm0, DWORD PTR _local_jet_to_jet$[ebp+8]
  004f6	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  004fe	0f 86 a8 00 00
	00		 jbe	 $LN9@fixed_wing
  00504	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _wp_distance$[ebp]
  0050c	0f 2f 45 80	 comiss	 xmm0, DWORD PTR _test_distance$[ebp]
  00510	0f 86 96 00 00
	00		 jbe	 $LN9@fixed_wing

; 222  : 				{
; 223  : 
; 224  : 					// get 2d distance & collision avoidance radius
; 225  : 					jet_to_jet_2d_distance = (local_jet_to_jet.x * local_jet_to_jet.x + local_jet_to_jet.y * local_jet_to_jet.y);

  00516	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _local_jet_to_jet$[ebp]
  0051b	f3 0f 59 45 9c	 mulss	 xmm0, DWORD PTR _local_jet_to_jet$[ebp]
  00520	f3 0f 10 4d a0	 movss	 xmm1, DWORD PTR _local_jet_to_jet$[ebp+4]
  00525	f3 0f 59 4d a0	 mulss	 xmm1, DWORD PTR _local_jet_to_jet$[ebp+4]
  0052a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0052e	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _jet_to_jet_2d_distance$[ebp], xmm0

; 226  : 
; 227  : 					avoid_distance = aircraft_database[raw->ac.mob.sub_type].avoidance_radius +

  00536	8b 45 f0	 mov	 eax, DWORD PTR _raw$[ebp]
  00539	69 08 f4 00 00
	00		 imul	 ecx, DWORD PTR [eax], 244
  0053f	8b 55 ec	 mov	 edx, DWORD PTR _jet_raw$[ebp]
  00542	69 02 f4 00 00
	00		 imul	 eax, DWORD PTR [edx], 244
  00548	f3 0f 10 81 a4
	00 00 00	 movss	 xmm0, DWORD PTR ?aircraft_database@@3PAUAIRCRAFT_DATA@@A[ecx+164]
  00550	f3 0f 58 80 a4
	00 00 00	 addss	 xmm0, DWORD PTR ?aircraft_database@@3PAUAIRCRAFT_DATA@@A[eax+164]
  00558	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _avoid_distance$[ebp], xmm0

; 228  : 											aircraft_database[jet_raw->ac.mob.sub_type].avoidance_radius;
; 229  : 
; 230  : 					//does the jet get in our way?
; 231  : 					if (jet_to_jet_2d_distance < (avoid_distance * avoid_distance))

  00560	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _avoid_distance$[ebp]
  00568	f3 0f 59 85 74
	ff ff ff	 mulss	 xmm0, DWORD PTR _avoid_distance$[ebp]
  00570	0f 2f 85 78 ff
	ff ff		 comiss	 xmm0, DWORD PTR _jet_to_jet_2d_distance$[ebp]
  00577	76 33		 jbe	 SHORT $LN9@fixed_wing

; 232  : 					{
; 233  : 						//is it the nearest jet in our way?
; 234  : 						if (test_distance < shortest_distance)

  00579	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _shortest_distance$[ebp]
  00581	0f 2f 45 80	 comiss	 xmm0, DWORD PTR _test_distance$[ebp]
  00585	76 25		 jbe	 SHORT $LN9@fixed_wing

; 235  : 						{
; 236  : 							nearest = member;

  00587	8b 45 f8	 mov	 eax, DWORD PTR _member$[ebp]
  0058a	89 45 f4	 mov	 DWORD PTR _nearest$[ebp], eax

; 237  : 
; 238  : 							nearest_jet_to_jet = local_jet_to_jet;

  0058d	8b 45 9c	 mov	 eax, DWORD PTR _local_jet_to_jet$[ebp]
  00590	89 45 a8	 mov	 DWORD PTR _nearest_jet_to_jet$[ebp], eax
  00593	8b 4d a0	 mov	 ecx, DWORD PTR _local_jet_to_jet$[ebp+4]
  00596	89 4d ac	 mov	 DWORD PTR _nearest_jet_to_jet$[ebp+4], ecx
  00599	8b 55 a4	 mov	 edx, DWORD PTR _local_jet_to_jet$[ebp+8]
  0059c	89 55 b0	 mov	 DWORD PTR _nearest_jet_to_jet$[ebp+8], edx

; 239  : 
; 240  : 							shortest_distance = test_distance;

  0059f	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _test_distance$[ebp]
  005a4	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _shortest_distance$[ebp], xmm0
$LN9@fixed_wing:

; 241  : 						}
; 242  : 					}
; 243  : 				}
; 244  : 			}
; 245  : 
; 246  : 			member = get_local_entity_child_succ (member, LIST_TYPE_MEMBER);

  005ac	83 7d f8 00	 cmp	 DWORD PTR _member$[ebp], 0
  005b0	74 0d		 je	 SHORT $LN37@fixed_wing
  005b2	8b 45 f8	 mov	 eax, DWORD PTR _member$[ebp]
  005b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  005b7	89 8d 28 ff ff
	ff		 mov	 DWORD PTR tv347[ebp], ecx
  005bd	eb 24		 jmp	 SHORT $LN38@fixed_wing
$LN37@fixed_wing:
  005bf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_collision_avoidance@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  005c5	83 c2 67	 add	 edx, 103		; 00000067H
  005c8	52		 push	 edx
  005c9	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  005ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  005d3	50		 push	 eax
  005d4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005d9	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv347[ebp], 0
$LN38@fixed_wing:
  005e3	b9 01 00 00 00	 mov	 ecx, 1
  005e8	85 c9		 test	 ecx, ecx
  005ea	74 0c		 je	 SHORT $LN39@fixed_wing
  005ec	c7 85 24 ff ff
	ff 19 00 00 00	 mov	 DWORD PTR tv355[ebp], 25 ; 00000019H
  005f6	eb 24		 jmp	 SHORT $LN40@fixed_wing
$LN39@fixed_wing:
  005f8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_collision_avoidance@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  005fe	83 c2 67	 add	 edx, 103		; 00000067H
  00601	52		 push	 edx
  00602	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00607	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0060c	50		 push	 eax
  0060d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00612	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv355[ebp], 0
$LN40@fixed_wing:
  0061c	6a 19		 push	 25			; 00000019H
  0061e	8b 4d f8	 mov	 ecx, DWORD PTR _member$[ebp]
  00621	51		 push	 ecx
  00622	69 95 28 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv347[ebp], 180
  0062c	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv355[ebp]
  00632	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00639	ff d1		 call	 ecx
  0063b	89 45 f8	 mov	 DWORD PTR _member$[ebp], eax

; 247  : 		}

  0063e	e9 3a fd ff ff	 jmp	 $LN2@fixed_wing
$LN3@fixed_wing:

; 248  : 
; 249  : 	}
; 250  : 
; 251  : 	// if a jet is in the way, modify our direction
; 252  : 
; 253  : 	if (nearest != NULL)

  00643	83 7d f4 00	 cmp	 DWORD PTR _nearest$[ebp], 0
  00647	0f 84 3f 01 00
	00		 je	 $LN10@fixed_wing

; 254  : 	{
; 255  : 		max_speed = get_local_entity_float_value (en, FLOAT_TYPE_CRUISE_VELOCITY) * 2.0;

  0064d	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00651	74 0d		 je	 SHORT $LN41@fixed_wing
  00653	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00656	8b 08		 mov	 ecx, DWORD PTR [eax]
  00658	89 8d 28 ff ff
	ff		 mov	 DWORD PTR tv368[ebp], ecx
  0065e	eb 24		 jmp	 SHORT $LN42@fixed_wing
$LN41@fixed_wing:
  00660	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_collision_avoidance@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00666	83 c2 70	 add	 edx, 112		; 00000070H
  00669	52		 push	 edx
  0066a	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0066f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00674	50		 push	 eax
  00675	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0067a	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv368[ebp], 0
$LN42@fixed_wing:
  00684	b9 01 00 00 00	 mov	 ecx, 1
  00689	85 c9		 test	 ecx, ecx
  0068b	74 0c		 je	 SHORT $LN43@fixed_wing
  0068d	c7 85 24 ff ff
	ff 19 00 00 00	 mov	 DWORD PTR tv376[ebp], 25 ; 00000019H
  00697	eb 24		 jmp	 SHORT $LN44@fixed_wing
$LN43@fixed_wing:
  00699	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_collision_avoidance@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  0069f	83 c2 70	 add	 edx, 112		; 00000070H
  006a2	52		 push	 edx
  006a3	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  006a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  006ad	50		 push	 eax
  006ae	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006b3	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv376[ebp], 0
$LN44@fixed_wing:
  006bd	6a 19		 push	 25			; 00000019H
  006bf	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  006c2	51		 push	 ecx
  006c3	69 95 28 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv368[ebp], 700
  006cd	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv376[ebp]
  006d3	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  006da	ff d1		 call	 ecx
  006dc	dd 9d 1c ff ff
	ff		 fstp	 QWORD PTR tv591[ebp]
  006e2	f2 0f 10 85 1c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv591[ebp]
  006ea	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  006f2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  006f6	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _max_speed$[ebp], xmm0

; 256  : 
; 257  : 		//get local acc. request
; 258  : 		nearest_jet_to_jet.x = -nearest_jet_to_jet.x;

  006fe	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _nearest_jet_to_jet$[ebp]
  00703	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0070a	f3 0f 11 45 a8	 movss	 DWORD PTR _nearest_jet_to_jet$[ebp], xmm0

; 259  : 		nearest_jet_to_jet.y = -nearest_jet_to_jet.y;

  0070f	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _nearest_jet_to_jet$[ebp+4]
  00714	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0071b	f3 0f 11 45 ac	 movss	 DWORD PTR _nearest_jet_to_jet$[ebp+4], xmm0

; 260  : 		nearest_jet_to_jet.z = 0.0;

  00720	0f 57 c0	 xorps	 xmm0, xmm0
  00723	f3 0f 11 45 b0	 movss	 DWORD PTR _nearest_jet_to_jet$[ebp+8], xmm0

; 261  : 
; 262  : 		normalise_any_3d_vector (&nearest_jet_to_jet);

  00728	8d 45 a8	 lea	 eax, DWORD PTR _nearest_jet_to_jet$[ebp]
  0072b	50		 push	 eax
  0072c	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  00731	dd d8		 fstp	 ST(0)

; 263  : 
; 264  : 		//rotate back into world coord sys
; 265  : 
; 266  : 		multiply_matrix3x3_vec3d(des_acc, wp_attitude, &nearest_jet_to_jet);

  00733	8d 45 a8	 lea	 eax, DWORD PTR _nearest_jet_to_jet$[ebp]
  00736	50		 push	 eax
  00737	8d 4d c8	 lea	 ecx, DWORD PTR _wp_attitude$[ebp]
  0073a	51		 push	 ecx
  0073b	8b 55 0c	 mov	 edx, DWORD PTR _des_acc$[ebp]
  0073e	52		 push	 edx
  0073f	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 267  : 
; 268  : 		des_acc->x *= max_speed;

  00744	8b 45 0c	 mov	 eax, DWORD PTR _des_acc$[ebp]
  00747	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0074b	f3 0f 59 85 70
	ff ff ff	 mulss	 xmm0, DWORD PTR _max_speed$[ebp]
  00753	8b 4d 0c	 mov	 ecx, DWORD PTR _des_acc$[ebp]
  00756	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 269  : 		des_acc->y *= max_speed;

  0075a	8b 45 0c	 mov	 eax, DWORD PTR _des_acc$[ebp]
  0075d	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00762	f3 0f 59 85 70
	ff ff ff	 mulss	 xmm0, DWORD PTR _max_speed$[ebp]
  0076a	8b 4d 0c	 mov	 ecx, DWORD PTR _des_acc$[ebp]
  0076d	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 270  : 		des_acc->z *= max_speed;

  00772	8b 45 0c	 mov	 eax, DWORD PTR _des_acc$[ebp]
  00775	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0077a	f3 0f 59 85 70
	ff ff ff	 mulss	 xmm0, DWORD PTR _max_speed$[ebp]
  00782	8b 4d 0c	 mov	 ecx, DWORD PTR _des_acc$[ebp]
  00785	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 271  : 
; 272  : 	}
; 273  : 
; 274  : 	// otherwise no jet is in the way
; 275  : 	else

  0078a	eb 20		 jmp	 SHORT $LN11@fixed_wing
$LN10@fixed_wing:

; 276  : 	{
; 277  : 		// set desired acceleration to nothing
; 278  : 		des_acc->z = des_acc->y = des_acc->x = 0.0;

  0078c	8b 45 0c	 mov	 eax, DWORD PTR _des_acc$[ebp]
  0078f	0f 57 c0	 xorps	 xmm0, xmm0
  00792	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00796	8b 4d 0c	 mov	 ecx, DWORD PTR _des_acc$[ebp]
  00799	0f 57 c0	 xorps	 xmm0, xmm0
  0079c	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
  007a1	8b 55 0c	 mov	 edx, DWORD PTR _des_acc$[ebp]
  007a4	0f 57 c0	 xorps	 xmm0, xmm0
  007a7	f3 0f 11 42 08	 movss	 DWORD PTR [edx+8], xmm0
$LN11@fixed_wing:

; 279  : 	}
; 280  : 
; 281  : }

  007ac	5f		 pop	 edi
  007ad	5e		 pop	 esi
  007ae	5b		 pop	 ebx
  007af	8b e5		 mov	 esp, ebp
  007b1	5d		 pop	 ebp
  007b2	c2 08 00	 ret	 8
?fixed_wing_collision_avoidance@@YGXPAUENTITY@@PAUVEC3D@@@Z ENDP ; fixed_wing_collision_avoidance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_move.c
;	COMDAT ?fixed_wing_impact_movement@@YGXPAUENTITY@@@Z
_TEXT	SEGMENT
tv93 = -88						; size = 4
tv85 = -84						; size = 4
_seed$ = -16						; size = 4
_velocity$ = -12					; size = 4
_speed$ = -8						; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
?fixed_wing_impact_movement@@YGXPAUENTITY@@@Z PROC	; fixed_wing_impact_movement, COMDAT

; 2551 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2552 : 
; 2553 : 	fixed_wing
; 2554 : 		*raw;
; 2555 : 
; 2556 : 	float
; 2557 : 		speed;
; 2558 : 
; 2559 : 	vec3d
; 2560 : 		*velocity;
; 2561 : 
; 2562 : 	int
; 2563 : 		seed;
; 2564 : 
; 2565 : 	raw = (fixed_wing *) get_local_entity_data (en);

  00009	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 2566 : 
; 2567 : 	seed = get_client_server_entity_random_number_seed(en);

  00012	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00015	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  0001b	c1 f8 04	 sar	 eax, 4
  0001e	89 45 f0	 mov	 DWORD PTR _seed$[ebp], eax

; 2568 : 
; 2569 : 	speed = 4.0 + (3.0 * frand1x (&seed));

  00021	69 45 f0 6d 4e
	c6 41		 imul	 eax, DWORD PTR _seed$[ebp], 1103515245
  00028	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  0002d	89 45 f0	 mov	 DWORD PTR _seed$[ebp], eax
  00030	8b 4d f0	 mov	 ecx, DWORD PTR _seed$[ebp]
  00033	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00036	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  0003c	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00040	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00048	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4008000000000000
  00050	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4010000000000000
  00058	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0005c	f3 0f 11 45 f8	 movss	 DWORD PTR _speed$[ebp], xmm0

; 2570 : 
; 2571 : 	if (seed & 1)

  00061	8b 45 f0	 mov	 eax, DWORD PTR _seed$[ebp]
  00064	83 e0 01	 and	 eax, 1
  00067	74 11		 je	 SHORT $LN2@fixed_wing

; 2572 : 	{
; 2573 : 		speed = -speed;

  00069	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _speed$[ebp]
  0006e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00075	f3 0f 11 45 f8	 movss	 DWORD PTR _speed$[ebp], xmm0
$LN2@fixed_wing:

; 2574 : 	}
; 2575 : 
; 2576 : 	velocity = get_local_entity_vec3d_ptr (en, VEC3D_TYPE_MOTION_VECTOR);

  0007a	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0007e	74 0a		 je	 SHORT $LN4@fixed_wing
  00080	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00083	8b 08		 mov	 ecx, DWORD PTR [eax]
  00085	89 4d ac	 mov	 DWORD PTR tv85[ebp], ecx
  00088	eb 21		 jmp	 SHORT $LN5@fixed_wing
$LN4@fixed_wing:
  0008a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_impact_movement@@YGXPAUENTITY@@@Z@4JA
  00090	83 c2 19	 add	 edx, 25			; 00000019H
  00093	52		 push	 edx
  00094	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00099	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a4	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv85[ebp], 0
$LN5@fixed_wing:
  000ab	b9 01 00 00 00	 mov	 ecx, 1
  000b0	85 c9		 test	 ecx, ecx
  000b2	74 09		 je	 SHORT $LN6@fixed_wing
  000b4	c7 45 a8 06 00
	00 00		 mov	 DWORD PTR tv93[ebp], 6
  000bb	eb 21		 jmp	 SHORT $LN7@fixed_wing
$LN6@fixed_wing:
  000bd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_impact_movement@@YGXPAUENTITY@@@Z@4JA
  000c3	83 c2 19	 add	 edx, 25			; 00000019H
  000c6	52		 push	 edx
  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  000cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000d1	50		 push	 eax
  000d2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000d7	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv93[ebp], 0
$LN7@fixed_wing:
  000de	6a 06		 push	 6
  000e0	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000e3	51		 push	 ecx
  000e4	6b 55 ac 60	 imul	 edx, DWORD PTR tv85[ebp], 96
  000e8	8b 45 a8	 mov	 eax, DWORD PTR tv93[ebp]
  000eb	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000f2	ff d1		 call	 ecx
  000f4	89 45 f4	 mov	 DWORD PTR _velocity$[ebp], eax

; 2577 : 
; 2578 : 	velocity->x += (speed * raw->ac.mob.xv.x);

  000f7	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  000fa	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _speed$[ebp]
  000ff	f3 0f 59 40 10	 mulss	 xmm0, DWORD PTR [eax+16]
  00104	8b 4d f4	 mov	 ecx, DWORD PTR _velocity$[ebp]
  00107	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  0010b	8b 55 f4	 mov	 edx, DWORD PTR _velocity$[ebp]
  0010e	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 2579 : 
; 2580 : 	velocity->z += (speed * raw->ac.mob.xv.z);

  00112	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00115	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _speed$[ebp]
  0011a	f3 0f 59 40 18	 mulss	 xmm0, DWORD PTR [eax+24]
  0011f	8b 4d f4	 mov	 ecx, DWORD PTR _velocity$[ebp]
  00122	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  00127	8b 55 f4	 mov	 edx, DWORD PTR _velocity$[ebp]
  0012a	f3 0f 11 42 08	 movss	 DWORD PTR [edx+8], xmm0

; 2581 : }

  0012f	5f		 pop	 edi
  00130	5e		 pop	 esi
  00131	5b		 pop	 ebx
  00132	8b e5		 mov	 esp, ebp
  00134	5d		 pop	 ebp
  00135	c2 04 00	 ret	 4
?fixed_wing_impact_movement@@YGXPAUENTITY@@@Z ENDP	; fixed_wing_impact_movement
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_move.c
;	COMDAT ?basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z
_TEXT	SEGMENT
tv1068 = -212						; size = 8
tv1003 = -212						; size = 8
tv714 = -212						; size = 8
tv694 = -212						; size = 8
tv1096 = -208						; size = 4
tv1029 = -208						; size = 4
tv926 = -208						; size = 4
tv838 = -208						; size = 4
tv1189 = -204						; size = 8
tv1187 = -204						; size = 8
tv740 = -204						; size = 4
tv715 = -204						; size = 8
tv695 = -204						; size = 8
tv608 = -204						; size = 4
tv588 = -204						; size = 4
tv511 = -204						; size = 4
tv488 = -204						; size = 4
tv463 = -204						; size = 4
tv441 = -204						; size = 4
tv402 = -204						; size = 4
tv357 = -204						; size = 4
tv322 = -204						; size = 4
tv299 = -204						; size = 4
tv269 = -204						; size = 4
tv192 = -204						; size = 4
tv169 = -204						; size = 4
tv133 = -204						; size = 4
tv79 = -204						; size = 4
tv732 = -200						; size = 4
tv600 = -200						; size = 4
tv580 = -200						; size = 4
tv503 = -200						; size = 4
tv480 = -200						; size = 4
tv455 = -200						; size = 4
tv433 = -200						; size = 4
tv394 = -200						; size = 4
tv386 = -200						; size = 4
tv349 = -200						; size = 4
tv335 = -200						; size = 4
tv315 = -200						; size = 4
tv291 = -200						; size = 4
tv261 = -200						; size = 4
tv205 = -200						; size = 4
tv185 = -200						; size = 4
tv161 = -200						; size = 4
tv93 = -200						; size = 4
tv71 = -200						; size = 4
_dp$1 = -132						; size = 4
_dh$2 = -128						; size = 4
_required_pitch$3 = -124				; size = 4
_required_heading$4 = -120				; size = 4
_roll$5 = -116						; size = 4
_pitch$6 = -112						; size = 4
_heading$7 = -108					; size = 4
_sound_sample_index$8 = -104				; size = 4
_d$9 = -100						; size = 12
_bounding_box$10 = -88					; size = 4
_d$11 = -84						; size = 12
_bounding_box$12 = -72					; size = 4
_temp_pos$13 = -68					; size = 12
_terrain_class$ = -56					; size = 4
_new_pos$ = -52						; size = 12
_direction_vector$ = -40				; size = 12
_velocity$ = -28					; size = 4
_pos$ = -24						; size = 4
_old_terrain_elevation$ = -20				; size = 4
_terrain_elevation$ = -16				; size = 4
_altitude$ = -12					; size = 4
_speed$ = -8						; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
?basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z PROC	; basic_fixed_wing_death_movement, COMDAT

; 2006 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2007 : 
; 2008 : 	fixed_wing
; 2009 : 		*raw;
; 2010 : 
; 2011 : 	float
; 2012 : 		speed,
; 2013 : 		altitude,
; 2014 : 		terrain_elevation,
; 2015 : 		old_terrain_elevation;
; 2016 : 
; 2017 : 	vec3d
; 2018 : 		*pos,
; 2019 : 		*velocity,
; 2020 : 		direction_vector,
; 2021 : 		new_pos;
; 2022 : 
; 2023 : 	terrain_classes
; 2024 : 		terrain_class;
; 2025 : 
; 2026 : 	raw = (fixed_wing *) get_local_entity_data (en);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00012	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 2027 : 
; 2028 : 	//
; 2029 : 	// get current position, speed, and velocity
; 2030 : 	//
; 2031 : 
; 2032 : 	velocity = get_local_entity_vec3d_ptr (en, VEC3D_TYPE_MOTION_VECTOR);

  00015	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00019	74 0d		 je	 SHORT $LN28@basic_fixe
  0001b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0001e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00020	89 8d 38 ff ff
	ff		 mov	 DWORD PTR tv71[ebp], ecx
  00026	eb 24		 jmp	 SHORT $LN29@basic_fixe
$LN28@basic_fixe:
  00028	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  0002e	83 c2 1a	 add	 edx, 26			; 0000001aH
  00031	52		 push	 edx
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00037	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00042	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv71[ebp], 0
$LN29@basic_fixe:
  0004c	b9 01 00 00 00	 mov	 ecx, 1
  00051	85 c9		 test	 ecx, ecx
  00053	74 0c		 je	 SHORT $LN30@basic_fixe
  00055	c7 85 34 ff ff
	ff 06 00 00 00	 mov	 DWORD PTR tv79[ebp], 6
  0005f	eb 24		 jmp	 SHORT $LN31@basic_fixe
$LN30@basic_fixe:
  00061	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  00067	83 c2 1a	 add	 edx, 26			; 0000001aH
  0006a	52		 push	 edx
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00070	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0007b	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv79[ebp], 0
$LN31@basic_fixe:
  00085	6a 06		 push	 6
  00087	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0008a	51		 push	 ecx
  0008b	6b 95 38 ff ff
	ff 60		 imul	 edx, DWORD PTR tv71[ebp], 96
  00092	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv79[ebp]
  00098	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0009f	ff d1		 call	 ecx
  000a1	89 45 e4	 mov	 DWORD PTR _velocity$[ebp], eax

; 2033 : 
; 2034 : 	speed = get_3d_vector_magnitude (velocity);

  000a4	8b 45 e4	 mov	 eax, DWORD PTR _velocity$[ebp]
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  000ad	d9 5d f8	 fstp	 DWORD PTR _speed$[ebp]

; 2035 : 
; 2036 : 	pos = get_local_entity_vec3d_ptr (en, VEC3D_TYPE_POSITION);

  000b0	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  000b4	74 0d		 je	 SHORT $LN32@basic_fixe
  000b6	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000b9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bb	89 8d 38 ff ff
	ff		 mov	 DWORD PTR tv93[ebp], ecx
  000c1	eb 24		 jmp	 SHORT $LN33@basic_fixe
$LN32@basic_fixe:
  000c3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  000c9	83 c2 1e	 add	 edx, 30			; 0000001eH
  000cc	52		 push	 edx
  000cd	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000dd	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv93[ebp], 0
$LN33@basic_fixe:
  000e7	b9 01 00 00 00	 mov	 ecx, 1
  000ec	85 c9		 test	 ecx, ecx
  000ee	74 0c		 je	 SHORT $LN34@basic_fixe
  000f0	c7 85 34 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv133[ebp], 8
  000fa	eb 24		 jmp	 SHORT $LN35@basic_fixe
$LN34@basic_fixe:
  000fc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  00102	83 c2 1e	 add	 edx, 30			; 0000001eH
  00105	52		 push	 edx
  00106	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0010b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00110	50		 push	 eax
  00111	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00116	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv133[ebp], 0
$LN35@basic_fixe:
  00120	6a 08		 push	 8
  00122	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00125	51		 push	 ecx
  00126	6b 95 38 ff ff
	ff 60		 imul	 edx, DWORD PTR tv93[ebp], 96
  0012d	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv133[ebp]
  00133	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0013a	ff d1		 call	 ecx
  0013c	89 45 e8	 mov	 DWORD PTR _pos$[ebp], eax

; 2037 : 
; 2038 : 	//
; 2039 : 	// check terrain elevation is valid
; 2040 : 	//
; 2041 : 
; 2042 : 	if (raw->ac.terrain_info.terrain_face == NULL)

  0013f	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00142	83 b8 64 01 00
	00 00		 cmp	 DWORD PTR [eax+356], 0
  00149	75 2b		 jne	 SHORT $LN4@basic_fixe

; 2043 : 	{
; 2044 : 		get_3d_terrain_point_data (pos->x, pos->z, &raw->ac.terrain_info);

  0014b	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0014e	05 54 01 00 00	 add	 eax, 340		; 00000154H
  00153	50		 push	 eax
  00154	8b 4d e8	 mov	 ecx, DWORD PTR _pos$[ebp]
  00157	51		 push	 ecx
  00158	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0015d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00162	8b 55 e8	 mov	 edx, DWORD PTR _pos$[ebp]
  00165	51		 push	 ecx
  00166	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0016a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016f	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  00174	dd d8		 fstp	 ST(0)
$LN4@basic_fixe:

; 2045 : 	}
; 2046 : 
; 2047 : 	//
; 2048 : 	// ground test
; 2049 : 	//
; 2050 : 
; 2051 : 	old_terrain_elevation = get_3d_terrain_point_data_elevation (&raw->ac.terrain_info);

  00176	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00179	05 54 01 00 00	 add	 eax, 340		; 00000154H
  0017e	50		 push	 eax
  0017f	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data_elevation@@YGMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data_elevation
  00184	d9 5d ec	 fstp	 DWORD PTR _old_terrain_elevation$[ebp]

; 2052 : 
; 2053 : 	altitude = pos->y - (old_terrain_elevation + get_local_entity_float_value (en, FLOAT_TYPE_CENTRE_OF_GRAVITY_TO_GROUND_DISTANCE));

  00187	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0018b	74 0d		 je	 SHORT $LN36@basic_fixe
  0018d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00190	8b 08		 mov	 ecx, DWORD PTR [eax]
  00192	89 8d 38 ff ff
	ff		 mov	 DWORD PTR tv161[ebp], ecx
  00198	eb 24		 jmp	 SHORT $LN37@basic_fixe
$LN36@basic_fixe:
  0019a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  001a0	83 c2 2f	 add	 edx, 47			; 0000002fH
  001a3	52		 push	 edx
  001a4	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  001a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001ae	50		 push	 eax
  001af	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001b4	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv161[ebp], 0
$LN37@basic_fixe:
  001be	b9 01 00 00 00	 mov	 ecx, 1
  001c3	85 c9		 test	 ecx, ecx
  001c5	74 0c		 je	 SHORT $LN38@basic_fixe
  001c7	c7 85 34 ff ff
	ff 12 00 00 00	 mov	 DWORD PTR tv169[ebp], 18 ; 00000012H
  001d1	eb 24		 jmp	 SHORT $LN39@basic_fixe
$LN38@basic_fixe:
  001d3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  001d9	83 c2 2f	 add	 edx, 47			; 0000002fH
  001dc	52		 push	 edx
  001dd	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  001e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  001e7	50		 push	 eax
  001e8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001ed	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv169[ebp], 0
$LN39@basic_fixe:
  001f7	6a 12		 push	 18			; 00000012H
  001f9	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  001fc	51		 push	 ecx
  001fd	69 95 38 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv161[ebp], 700
  00207	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv169[ebp]
  0020d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00214	ff d1		 call	 ecx
  00216	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR tv838[ebp]
  0021c	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR tv838[ebp]
  00224	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _old_terrain_elevation$[ebp]
  00229	8b 55 e8	 mov	 edx, DWORD PTR _pos$[ebp]
  0022c	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  00231	f3 0f 5c c8	 subss	 xmm1, xmm0
  00235	f3 0f 11 4d f4	 movss	 DWORD PTR _altitude$[ebp], xmm1

; 2054 : 
; 2055 : 	if (altitude <= 0.0)

  0023a	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _altitude$[ebp]
  0023f	0f 57 c9	 xorps	 xmm1, xmm1
  00242	66 0f 2f c8	 comisd	 xmm1, xmm0
  00246	0f 82 5c 01 00
	00		 jb	 $LN9@basic_fixe

; 2056 : 	{
; 2057 : 		if (get_comms_model() == COMMS_MODEL_SERVER)

  0024c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  00253	0f 85 f4 00 00
	00		 jne	 $LN6@basic_fixe

; 2058 : 		{
; 2059 : 			//
; 2060 : 			// ensure that the aircraft is actually dead
; 2061 : 			//
; 2062 : 
; 2063 : 			if (get_local_entity_int_value (en, INT_TYPE_ALIVE))

  00259	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0025d	74 0d		 je	 SHORT $LN40@basic_fixe
  0025f	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00262	8b 08		 mov	 ecx, DWORD PTR [eax]
  00264	89 8d 38 ff ff
	ff		 mov	 DWORD PTR tv185[ebp], ecx
  0026a	eb 20		 jmp	 SHORT $LN41@basic_fixe
$LN40@basic_fixe:
  0026c	68 0f 08 00 00	 push	 2063			; 0000080fH
  00271	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00276	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0027c	52		 push	 edx
  0027d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00282	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv185[ebp], 0
$LN41@basic_fixe:
  0028c	b8 01 00 00 00	 mov	 eax, 1
  00291	85 c0		 test	 eax, eax
  00293	74 0c		 je	 SHORT $LN42@basic_fixe
  00295	c7 85 34 ff ff
	ff 07 00 00 00	 mov	 DWORD PTR tv192[ebp], 7
  0029f	eb 20		 jmp	 SHORT $LN43@basic_fixe
$LN42@basic_fixe:
  002a1	68 0f 08 00 00	 push	 2063			; 0000080fH
  002a6	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  002ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  002b1	51		 push	 ecx
  002b2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002b7	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv192[ebp], 0
$LN43@basic_fixe:
  002c1	6a 07		 push	 7
  002c3	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  002c6	52		 push	 edx
  002c7	69 85 38 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv185[ebp], 1116
  002d1	8b 8d 34 ff ff
	ff		 mov	 ecx, DWORD PTR tv192[ebp]
  002d7	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  002de	ff d2		 call	 edx
  002e0	85 c0		 test	 eax, eax
  002e2	74 53		 je	 SHORT $LN7@basic_fixe

; 2064 : 			{
; 2065 : 				kill_client_server_entity (en);

  002e4	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  002e8	74 0d		 je	 SHORT $LN44@basic_fixe
  002ea	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  002ed	8b 08		 mov	 ecx, DWORD PTR [eax]
  002ef	89 8d 38 ff ff
	ff		 mov	 DWORD PTR tv205[ebp], ecx
  002f5	eb 24		 jmp	 SHORT $LN45@basic_fixe
$LN44@basic_fixe:
  002f7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  002fd	83 c2 3b	 add	 edx, 59			; 0000003bH
  00300	52		 push	 edx
  00301	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00306	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0030b	50		 push	 eax
  0030c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00311	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv205[ebp], 0
$LN45@basic_fixe:
  0031b	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0031e	51		 push	 ecx
  0031f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A ; system_comms_model
  00325	c1 e2 02	 shl	 edx, 2
  00328	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR tv205[ebp]
  0032e	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_kill_client_server_entity@@3PAY01P6GXPAUENTITY@@@ZA[edx+eax*8]
  00335	ff d1		 call	 ecx
$LN7@basic_fixe:

; 2066 : 			}
; 2067 : 
; 2068 : 			//
; 2069 : 			// stop any engine noise
; 2070 : 			//
; 2071 : 
; 2072 : 			kill_client_server_entity_sound_type (en, ENTITY_SUB_TYPE_EFFECT_SOUND_ENGINE_LOOPING2);

  00337	6a 16		 push	 22			; 00000016H
  00339	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0033c	50		 push	 eax
  0033d	e8 00 00 00 00	 call	 ?kill_client_server_entity_sound_type@@YGXPAUENTITY@@H@Z ; kill_client_server_entity_sound_type

; 2073 : 
; 2074 : 			kill_client_server_entity_sound_type (en, ENTITY_SUB_TYPE_EFFECT_SOUND_ENGINE_LOOPING1);

  00342	6a 15		 push	 21			; 00000015H
  00344	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00347	50		 push	 eax
  00348	e8 00 00 00 00	 call	 ?kill_client_server_entity_sound_type@@YGXPAUENTITY@@H@Z ; kill_client_server_entity_sound_type
$LN6@basic_fixe:

; 2075 : 		}
; 2076 : 
; 2077 : 		//
; 2078 : 		// stop any black smoke TRAILS generating ( marked as type VEHICLE_DAMAGE )
; 2079 : 		//
; 2080 : 
; 2081 : 		if (speed < FIXED_WING_DAMAGE_TRAIL_CUT_OFF_SPEED)

  0034d	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _speed$[ebp]
  00352	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4044000000000000
  0035a	66 0f 2f c8	 comisd	 xmm1, xmm0
  0035e	76 21		 jbe	 SHORT $LN8@basic_fixe

; 2082 : 		{
; 2083 : 			clear_smoke_list_generator_lifetime (en, ENTITY_SUB_TYPE_EFFECT_SMOKE_LIST_LIGHT_DAMAGE);

  00360	6a 05		 push	 5
  00362	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00365	50		 push	 eax
  00366	e8 00 00 00 00	 call	 ?clear_smoke_list_generator_lifetime@@YGHPAUENTITY@@H@Z ; clear_smoke_list_generator_lifetime

; 2084 : 			clear_smoke_list_generator_lifetime (en, ENTITY_SUB_TYPE_EFFECT_SMOKE_LIST_MEDIUM_DAMAGE);

  0036b	6a 06		 push	 6
  0036d	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00370	50		 push	 eax
  00371	e8 00 00 00 00	 call	 ?clear_smoke_list_generator_lifetime@@YGHPAUENTITY@@H@Z ; clear_smoke_list_generator_lifetime

; 2085 : 			clear_smoke_list_generator_lifetime (en, ENTITY_SUB_TYPE_EFFECT_SMOKE_LIST_HEAVY_DAMAGE);

  00376	6a 08		 push	 8
  00378	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0037b	50		 push	 eax
  0037c	e8 00 00 00 00	 call	 ?clear_smoke_list_generator_lifetime@@YGHPAUENTITY@@H@Z ; clear_smoke_list_generator_lifetime
$LN8@basic_fixe:

; 2086 : 		}
; 2087 : 
; 2088 : 		//
; 2089 : 		// if aircraft is already on the ground, but not on water, call different movement function
; 2090 : 		//
; 2091 : 
; 2092 : 		if (get_terrain_type_class (get_3d_terrain_point_data_type (&raw->ac.terrain_info)) == TERRAIN_CLASS_LAND)

  00381	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00384	05 54 01 00 00	 add	 eax, 340		; 00000154H
  00389	50		 push	 eax
  0038a	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data_type@@YGHPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data_type
  0038f	50		 push	 eax
  00390	e8 00 00 00 00	 call	 ?get_terrain_type_class@@YG?AW4TERRAIN_CLASSES@@H@Z ; get_terrain_type_class
  00395	83 f8 03	 cmp	 eax, 3
  00398	75 0e		 jne	 SHORT $LN9@basic_fixe

; 2093 : 		{
; 2094 : 			fixed_wing_crash_movement (en);

  0039a	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0039d	50		 push	 eax
  0039e	e8 00 00 00 00	 call	 ?fixed_wing_crash_movement@@YGXPAUENTITY@@@Z ; fixed_wing_crash_movement

; 2095 : 
; 2096 : 			return;

  003a3	e9 2b 0e 00 00	 jmp	 $LN1@basic_fixe
$LN9@basic_fixe:

; 2097 : 		}
; 2098 : 	}
; 2099 : 
; 2100 : 	new_pos.x = pos->x + (velocity->x * get_entity_movement_delta_time());

  003a8	8b 45 e4	 mov	 eax, DWORD PTR _velocity$[ebp]
  003ab	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  003af	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  003b7	8b 4d e8	 mov	 ecx, DWORD PTR _pos$[ebp]
  003ba	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  003be	f3 0f 11 45 cc	 movss	 DWORD PTR _new_pos$[ebp], xmm0

; 2101 : 	new_pos.y = pos->y + (velocity->y * get_entity_movement_delta_time());

  003c3	8b 45 e4	 mov	 eax, DWORD PTR _velocity$[ebp]
  003c6	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  003cb	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  003d3	8b 4d e8	 mov	 ecx, DWORD PTR _pos$[ebp]
  003d6	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  003db	f3 0f 11 45 d0	 movss	 DWORD PTR _new_pos$[ebp+4], xmm0

; 2102 : 	new_pos.z = pos->z + (velocity->z * get_entity_movement_delta_time());

  003e0	8b 45 e4	 mov	 eax, DWORD PTR _velocity$[ebp]
  003e3	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  003e8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  003f0	8b 4d e8	 mov	 ecx, DWORD PTR _pos$[ebp]
  003f3	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  003f8	f3 0f 11 45 d4	 movss	 DWORD PTR _new_pos$[ebp+8], xmm0

; 2103 : 
; 2104 : 	bound_position_to_map_volume (&new_pos);

  003fd	8d 45 cc	 lea	 eax, DWORD PTR _new_pos$[ebp]
  00400	50		 push	 eax
  00401	e8 00 00 00 00	 call	 ?bound_position_to_map_volume@@YGHPAUVEC3D@@@Z ; bound_position_to_map_volume

; 2105 : 
; 2106 : 	get_3d_terrain_point_data (new_pos.x, new_pos.z, &raw->ac.terrain_info);

  00406	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00409	05 54 01 00 00	 add	 eax, 340		; 00000154H
  0040e	50		 push	 eax
  0040f	51		 push	 ecx
  00410	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _new_pos$[ebp+8]
  00415	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0041a	51		 push	 ecx
  0041b	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _new_pos$[ebp]
  00420	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00425	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data@@YGMMMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data
  0042a	dd d8		 fstp	 ST(0)

; 2107 : 
; 2108 : 	//
; 2109 : 	// update velocity
; 2110 : 	//
; 2111 : 
; 2112 : 	velocity->y -= (G * get_entity_movement_delta_time());		// ignore lift for simplicity

  0042c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@411cf5c3
  00434	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  0043c	8b 45 e4	 mov	 eax, DWORD PTR _velocity$[ebp]
  0043f	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  00444	f3 0f 5c c8	 subss	 xmm1, xmm0
  00448	8b 4d e4	 mov	 ecx, DWORD PTR _velocity$[ebp]
  0044b	f3 0f 11 49 04	 movss	 DWORD PTR [ecx+4], xmm1

; 2113 : 
; 2114 : 	speed = get_3d_vector_magnitude (velocity);

  00450	8b 45 e4	 mov	 eax, DWORD PTR _velocity$[ebp]
  00453	50		 push	 eax
  00454	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  00459	d9 5d f8	 fstp	 DWORD PTR _speed$[ebp]

; 2115 : 
; 2116 : 	set_local_entity_float_value (en, FLOAT_TYPE_VELOCITY, speed);

  0045c	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00460	74 0d		 je	 SHORT $LN46@basic_fixe
  00462	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00465	8b 08		 mov	 ecx, DWORD PTR [eax]
  00467	89 8d 38 ff ff
	ff		 mov	 DWORD PTR tv261[ebp], ecx
  0046d	eb 24		 jmp	 SHORT $LN47@basic_fixe
$LN46@basic_fixe:
  0046f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  00475	83 c2 6e	 add	 edx, 110		; 0000006eH
  00478	52		 push	 edx
  00479	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0047e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00483	50		 push	 eax
  00484	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00489	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv261[ebp], 0
$LN47@basic_fixe:
  00493	b9 01 00 00 00	 mov	 ecx, 1
  00498	85 c9		 test	 ecx, ecx
  0049a	74 0c		 je	 SHORT $LN48@basic_fixe
  0049c	c7 85 34 ff ff
	ff 93 00 00 00	 mov	 DWORD PTR tv269[ebp], 147 ; 00000093H
  004a6	eb 24		 jmp	 SHORT $LN49@basic_fixe
$LN48@basic_fixe:
  004a8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  004ae	83 c2 6e	 add	 edx, 110		; 0000006eH
  004b1	52		 push	 edx
  004b2	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  004b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  004bc	50		 push	 eax
  004bd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004c2	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv269[ebp], 0
$LN49@basic_fixe:
  004cc	51		 push	 ecx
  004cd	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _speed$[ebp]
  004d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d7	68 93 00 00 00	 push	 147			; 00000093H
  004dc	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  004df	51		 push	 ecx
  004e0	69 95 38 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv261[ebp], 700
  004ea	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv269[ebp]
  004f0	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_local_entity_float_value@@3PAY0KP@P6GXPAUENTITY@@W4FLOAT_TYPES@@M@ZA[edx+eax*4]
  004f7	ff d1		 call	 ecx

; 2117 : 
; 2118 : 	//
; 2119 : 	// check if aircraft has hit the floor
; 2120 : 	//
; 2121 : 
; 2122 : 	terrain_elevation = get_3d_terrain_point_data_elevation (&raw->ac.terrain_info);

  004f9	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  004fc	05 54 01 00 00	 add	 eax, 340		; 00000154H
  00501	50		 push	 eax
  00502	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data_elevation@@YGMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data_elevation
  00507	d9 5d f0	 fstp	 DWORD PTR _terrain_elevation$[ebp]

; 2123 : 
; 2124 : 	terrain_class = get_terrain_type_class (get_3d_terrain_point_data_type (&raw->ac.terrain_info));

  0050a	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0050d	05 54 01 00 00	 add	 eax, 340		; 00000154H
  00512	50		 push	 eax
  00513	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data_type@@YGHPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data_type
  00518	50		 push	 eax
  00519	e8 00 00 00 00	 call	 ?get_terrain_type_class@@YG?AW4TERRAIN_CLASSES@@H@Z ; get_terrain_type_class
  0051e	89 45 c8	 mov	 DWORD PTR _terrain_class$[ebp], eax

; 2125 : 
; 2126 : 	altitude = new_pos.y - (terrain_elevation + get_local_entity_float_value (en, FLOAT_TYPE_CENTRE_OF_GRAVITY_TO_GROUND_DISTANCE));

  00521	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00525	74 0d		 je	 SHORT $LN50@basic_fixe
  00527	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0052a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0052c	89 8d 38 ff ff
	ff		 mov	 DWORD PTR tv291[ebp], ecx
  00532	eb 24		 jmp	 SHORT $LN51@basic_fixe
$LN50@basic_fixe:
  00534	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  0053a	83 c2 78	 add	 edx, 120		; 00000078H
  0053d	52		 push	 edx
  0053e	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00543	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00548	50		 push	 eax
  00549	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0054e	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv291[ebp], 0
$LN51@basic_fixe:
  00558	b9 01 00 00 00	 mov	 ecx, 1
  0055d	85 c9		 test	 ecx, ecx
  0055f	74 0c		 je	 SHORT $LN52@basic_fixe
  00561	c7 85 34 ff ff
	ff 12 00 00 00	 mov	 DWORD PTR tv299[ebp], 18 ; 00000012H
  0056b	eb 24		 jmp	 SHORT $LN53@basic_fixe
$LN52@basic_fixe:
  0056d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  00573	83 c2 78	 add	 edx, 120		; 00000078H
  00576	52		 push	 edx
  00577	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0057c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00581	50		 push	 eax
  00582	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00587	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv299[ebp], 0
$LN53@basic_fixe:
  00591	6a 12		 push	 18			; 00000012H
  00593	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00596	51		 push	 ecx
  00597	69 95 38 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv291[ebp], 700
  005a1	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv299[ebp]
  005a7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  005ae	ff d1		 call	 ecx
  005b0	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR tv926[ebp]
  005b6	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR tv926[ebp]
  005be	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _terrain_elevation$[ebp]
  005c3	f3 0f 10 4d d0	 movss	 xmm1, DWORD PTR _new_pos$[ebp+4]
  005c8	f3 0f 5c c8	 subss	 xmm1, xmm0
  005cc	f3 0f 11 4d f4	 movss	 DWORD PTR _altitude$[ebp], xmm1

; 2127 : 
; 2128 : 	if (altitude <= 0.0)

  005d1	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _altitude$[ebp]
  005d6	0f 57 c9	 xorps	 xmm1, xmm1
  005d9	66 0f 2f c8	 comisd	 xmm1, xmm0
  005dd	0f 82 83 08 00
	00		 jb	 $LN23@basic_fixe

; 2129 : 	{
; 2130 : 		if (get_comms_model() == COMMS_MODEL_SERVER)

  005e3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  005ea	0f 85 bf 01 00
	00		 jne	 $LN13@basic_fixe

; 2131 : 		{
; 2132 : 			//
; 2133 : 			// ensure that the aircraft is actually dead
; 2134 : 			//
; 2135 : 
; 2136 : 			if (get_local_entity_int_value (en, INT_TYPE_ALIVE))

  005f0	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  005f4	74 0d		 je	 SHORT $LN54@basic_fixe
  005f6	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  005f9	8b 08		 mov	 ecx, DWORD PTR [eax]
  005fb	89 8d 38 ff ff
	ff		 mov	 DWORD PTR tv315[ebp], ecx
  00601	eb 20		 jmp	 SHORT $LN55@basic_fixe
$LN54@basic_fixe:
  00603	68 58 08 00 00	 push	 2136			; 00000858H
  00608	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0060d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00613	52		 push	 edx
  00614	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00619	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv315[ebp], 0
$LN55@basic_fixe:
  00623	b8 01 00 00 00	 mov	 eax, 1
  00628	85 c0		 test	 eax, eax
  0062a	74 0c		 je	 SHORT $LN56@basic_fixe
  0062c	c7 85 34 ff ff
	ff 07 00 00 00	 mov	 DWORD PTR tv322[ebp], 7
  00636	eb 20		 jmp	 SHORT $LN57@basic_fixe
$LN56@basic_fixe:
  00638	68 58 08 00 00	 push	 2136			; 00000858H
  0063d	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00642	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00648	51		 push	 ecx
  00649	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0064e	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv322[ebp], 0
$LN57@basic_fixe:
  00658	6a 07		 push	 7
  0065a	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0065d	52		 push	 edx
  0065e	69 85 38 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv315[ebp], 1116
  00668	8b 8d 34 ff ff
	ff		 mov	 ecx, DWORD PTR tv322[ebp]
  0066e	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00675	ff d2		 call	 edx
  00677	85 c0		 test	 eax, eax
  00679	74 56		 je	 SHORT $LN12@basic_fixe

; 2137 : 			{
; 2138 : 				kill_client_server_entity (en);

  0067b	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0067f	74 0d		 je	 SHORT $LN58@basic_fixe
  00681	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00684	8b 08		 mov	 ecx, DWORD PTR [eax]
  00686	89 8d 38 ff ff
	ff		 mov	 DWORD PTR tv335[ebp], ecx
  0068c	eb 27		 jmp	 SHORT $LN59@basic_fixe
$LN58@basic_fixe:
  0068e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  00694	81 c2 84 00 00
	00		 add	 edx, 132		; 00000084H
  0069a	52		 push	 edx
  0069b	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  006a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  006a5	50		 push	 eax
  006a6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006ab	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv335[ebp], 0
$LN59@basic_fixe:
  006b5	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  006b8	51		 push	 ecx
  006b9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A ; system_comms_model
  006bf	c1 e2 02	 shl	 edx, 2
  006c2	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR tv335[ebp]
  006c8	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_kill_client_server_entity@@3PAY01P6GXPAUENTITY@@@ZA[edx+eax*8]
  006cf	ff d1		 call	 ecx
$LN12@basic_fixe:

; 2139 : 			}
; 2140 : 
; 2141 : 			if (pos->y > old_terrain_elevation)

  006d1	8b 45 e8	 mov	 eax, DWORD PTR _pos$[ebp]
  006d4	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  006d9	0f 2f 45 ec	 comiss	 xmm0, DWORD PTR _old_terrain_elevation$[ebp]
  006dd	0f 86 cc 00 00
	00		 jbe	 $LN13@basic_fixe

; 2142 : 			{
; 2143 : 				//
; 2144 : 				// aircraft has hit the terrain this frame - create a "splash"
; 2145 : 				//
; 2146 : 
; 2147 : 				vec3d
; 2148 : 					temp_pos;
; 2149 : 
; 2150 : 				temp_pos.x = new_pos.x;

  006e3	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _new_pos$[ebp]
  006e8	f3 0f 11 45 bc	 movss	 DWORD PTR _temp_pos$13[ebp], xmm0

; 2151 : 				temp_pos.y = terrain_elevation;

  006ed	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _terrain_elevation$[ebp]
  006f2	f3 0f 11 45 c0	 movss	 DWORD PTR _temp_pos$13[ebp+4], xmm0

; 2152 : 				temp_pos.z = new_pos.z;

  006f7	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _new_pos$[ebp+8]
  006fc	f3 0f 11 45 c4	 movss	 DWORD PTR _temp_pos$13[ebp+8], xmm0

; 2153 : 
; 2154 : 				set_local_entity_vec3d (en, VEC3D_TYPE_POSITION, &temp_pos);

  00701	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00705	74 0d		 je	 SHORT $LN60@basic_fixe
  00707	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0070a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0070c	89 8d 38 ff ff
	ff		 mov	 DWORD PTR tv349[ebp], ecx
  00712	eb 27		 jmp	 SHORT $LN61@basic_fixe
$LN60@basic_fixe:
  00714	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  0071a	81 c2 94 00 00
	00		 add	 edx, 148		; 00000094H
  00720	52		 push	 edx
  00721	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00726	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0072b	50		 push	 eax
  0072c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00731	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv349[ebp], 0
$LN61@basic_fixe:
  0073b	b9 01 00 00 00	 mov	 ecx, 1
  00740	85 c9		 test	 ecx, ecx
  00742	74 0c		 je	 SHORT $LN62@basic_fixe
  00744	c7 85 34 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv357[ebp], 8
  0074e	eb 27		 jmp	 SHORT $LN63@basic_fixe
$LN62@basic_fixe:
  00750	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  00756	81 c2 94 00 00
	00		 add	 edx, 148		; 00000094H
  0075c	52		 push	 edx
  0075d	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00762	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00767	50		 push	 eax
  00768	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0076d	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv357[ebp], 0
$LN63@basic_fixe:
  00777	8d 4d bc	 lea	 ecx, DWORD PTR _temp_pos$13[ebp]
  0077a	51		 push	 ecx
  0077b	6a 08		 push	 8
  0077d	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00780	52		 push	 edx
  00781	6b 85 38 ff ff
	ff 60		 imul	 eax, DWORD PTR tv349[ebp], 96
  00788	8b 8d 34 ff ff
	ff		 mov	 ecx, DWORD PTR tv357[ebp]
  0078e	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_set_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  00795	ff d2		 call	 edx

; 2155 : 
; 2156 : 				create_client_server_object_hit_ground_explosion_effect (en, get_3d_terrain_point_data_type (&raw->ac.terrain_info));

  00797	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0079a	05 54 01 00 00	 add	 eax, 340		; 00000154H
  0079f	50		 push	 eax
  007a0	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data_type@@YGHPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data_type
  007a5	50		 push	 eax
  007a6	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  007a9	51		 push	 ecx
  007aa	e8 00 00 00 00	 call	 ?create_client_server_object_hit_ground_explosion_effect@@YGXPAUENTITY@@H@Z ; create_client_server_object_hit_ground_explosion_effect
$LN13@basic_fixe:

; 2157 : 			}
; 2158 : 		}
; 2159 : 
; 2160 : 		if (terrain_class == TERRAIN_CLASS_WATER)

  007af	83 7d c8 01	 cmp	 DWORD PTR _terrain_class$[ebp], 1
  007b3	0f 85 c0 03 00
	00		 jne	 $LN14@basic_fixe

; 2161 : 		{
; 2162 : 			//////////////////////////////////////////
; 2163 : 			//
; 2164 : 			// AIRCRAFT IS BELOW GROUND AND IN WATER
; 2165 : 			//
; 2166 : 			//////////////////////////////////////////
; 2167 : 
; 2168 : 			//
; 2169 : 			// stop any black smoke TRAILS generating ( marked as type VEHICLE_DAMAGE )
; 2170 : 			//
; 2171 : 
; 2172 : 			clear_smoke_list_generator_lifetime (en, ENTITY_SUB_TYPE_EFFECT_SMOKE_LIST_LIGHT_DAMAGE);

  007b9	6a 05		 push	 5
  007bb	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  007be	50		 push	 eax
  007bf	e8 00 00 00 00	 call	 ?clear_smoke_list_generator_lifetime@@YGHPAUENTITY@@H@Z ; clear_smoke_list_generator_lifetime

; 2173 : 			clear_smoke_list_generator_lifetime (en, ENTITY_SUB_TYPE_EFFECT_SMOKE_LIST_MEDIUM_DAMAGE);

  007c4	6a 06		 push	 6
  007c6	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  007c9	50		 push	 eax
  007ca	e8 00 00 00 00	 call	 ?clear_smoke_list_generator_lifetime@@YGHPAUENTITY@@H@Z ; clear_smoke_list_generator_lifetime

; 2174 : 			clear_smoke_list_generator_lifetime (en, ENTITY_SUB_TYPE_EFFECT_SMOKE_LIST_HEAVY_DAMAGE);

  007cf	6a 08		 push	 8
  007d1	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  007d4	50		 push	 eax
  007d5	e8 00 00 00 00	 call	 ?clear_smoke_list_generator_lifetime@@YGHPAUENTITY@@H@Z ; clear_smoke_list_generator_lifetime

; 2175 : 
; 2176 : 			//
; 2177 : 			// also if it lands in water kill any fires that may be burning
; 2178 : 			//
; 2179 : 
; 2180 : 			clear_smoke_list_generator_lifetime (en, ENTITY_SUB_TYPE_EFFECT_SMOKE_LIST_FIRE);

  007da	6a 04		 push	 4
  007dc	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  007df	50		 push	 eax
  007e0	e8 00 00 00 00	 call	 ?clear_smoke_list_generator_lifetime@@YGHPAUENTITY@@H@Z ; clear_smoke_list_generator_lifetime

; 2181 : 			clear_smoke_list_generator_lifetime (en, ENTITY_SUB_TYPE_EFFECT_SMOKE_LIST_EXPLOSION_TRAIL);

  007e5	6a 03		 push	 3
  007e7	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  007ea	50		 push	 eax
  007eb	e8 00 00 00 00	 call	 ?clear_smoke_list_generator_lifetime@@YGHPAUENTITY@@H@Z ; clear_smoke_list_generator_lifetime

; 2182 : 
; 2183 : 			//
; 2184 : 			// no lateral movement below ground
; 2185 : 			//
; 2186 : 
; 2187 : 			new_pos.x = pos->x;

  007f0	8b 45 e8	 mov	 eax, DWORD PTR _pos$[ebp]
  007f3	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  007f7	f3 0f 11 45 cc	 movss	 DWORD PTR _new_pos$[ebp], xmm0

; 2188 : 			new_pos.z = pos->z;

  007fc	8b 45 e8	 mov	 eax, DWORD PTR _pos$[ebp]
  007ff	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00804	f3 0f 11 45 d4	 movss	 DWORD PTR _new_pos$[ebp+8], xmm0

; 2189 : 
; 2190 : 			switch (get_3d_terrain_point_data_type (&raw->ac.terrain_info))

  00809	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0080c	05 54 01 00 00	 add	 eax, 340		; 00000154H
  00811	50		 push	 eax
  00812	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data_type@@YGHPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data_type
  00817	89 85 38 ff ff
	ff		 mov	 DWORD PTR tv386[ebp], eax
  0081d	83 bd 38 ff ff
	ff 07		 cmp	 DWORD PTR tv386[ebp], 7
  00824	74 05		 je	 SHORT $LN16@basic_fixe
  00826	e9 cc 01 00 00	 jmp	 $LN18@basic_fixe
$LN16@basic_fixe:

; 2191 : 			{
; 2192 : 				case TERRAIN_TYPE_SEA:
; 2193 : 				{
; 2194 : 					//
; 2195 : 					// aircraft has landed in the sea
; 2196 : 					//
; 2197 : 
; 2198 : 					struct OBJECT_3D_BOUNDS
; 2199 : 						*bounding_box;
; 2200 : 
; 2201 : 					vec3d
; 2202 : 						d;
; 2203 : 
; 2204 : 					bounding_box = get_object_3d_bounding_box (get_local_entity_int_value (en, INT_TYPE_OBJECT_3D_SHAPE));

  0082b	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0082f	74 0d		 je	 SHORT $LN64@basic_fixe
  00831	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00834	8b 08		 mov	 ecx, DWORD PTR [eax]
  00836	89 8d 38 ff ff
	ff		 mov	 DWORD PTR tv394[ebp], ecx
  0083c	eb 27		 jmp	 SHORT $LN65@basic_fixe
$LN64@basic_fixe:
  0083e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  00844	81 c2 c6 00 00
	00		 add	 edx, 198		; 000000c6H
  0084a	52		 push	 edx
  0084b	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00850	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00855	50		 push	 eax
  00856	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0085b	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv394[ebp], 0
$LN65@basic_fixe:
  00865	b9 01 00 00 00	 mov	 ecx, 1
  0086a	85 c9		 test	 ecx, ecx
  0086c	74 0c		 je	 SHORT $LN66@basic_fixe
  0086e	c7 85 34 ff ff
	ff 92 00 00 00	 mov	 DWORD PTR tv402[ebp], 146 ; 00000092H
  00878	eb 27		 jmp	 SHORT $LN67@basic_fixe
$LN66@basic_fixe:
  0087a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  00880	81 c2 c6 00 00
	00		 add	 edx, 198		; 000000c6H
  00886	52		 push	 edx
  00887	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0088c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00891	50		 push	 eax
  00892	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00897	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv402[ebp], 0
$LN67@basic_fixe:
  008a1	68 92 00 00 00	 push	 146			; 00000092H
  008a6	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  008a9	51		 push	 ecx
  008aa	69 95 38 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv394[ebp], 1116
  008b4	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv402[ebp]
  008ba	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  008c1	ff d1		 call	 ecx
  008c3	50		 push	 eax
  008c4	e8 00 00 00 00	 call	 ?get_object_3d_bounding_box@@YGPAUOBJECT_3D_BOUNDS@@H@Z ; get_object_3d_bounding_box
  008c9	89 45 b8	 mov	 DWORD PTR _bounding_box$12[ebp], eax

; 2205 : 
; 2206 : 					d.x = bounding_box->xmax - bounding_box->xmin;

  008cc	8b 45 b8	 mov	 eax, DWORD PTR _bounding_box$12[ebp]
  008cf	8b 4d b8	 mov	 ecx, DWORD PTR _bounding_box$12[ebp]
  008d2	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  008d7	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  008db	f3 0f 11 45 ac	 movss	 DWORD PTR _d$11[ebp], xmm0

; 2207 : 					d.y = bounding_box->ymax - bounding_box->ymin;

  008e0	8b 45 b8	 mov	 eax, DWORD PTR _bounding_box$12[ebp]
  008e3	8b 4d b8	 mov	 ecx, DWORD PTR _bounding_box$12[ebp]
  008e6	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  008eb	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  008f0	f3 0f 11 45 b0	 movss	 DWORD PTR _d$11[ebp+4], xmm0

; 2208 : 					d.z = bounding_box->zmax - bounding_box->zmin;

  008f5	8b 45 b8	 mov	 eax, DWORD PTR _bounding_box$12[ebp]
  008f8	8b 4d b8	 mov	 ecx, DWORD PTR _bounding_box$12[ebp]
  008fb	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00900	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  00905	f3 0f 11 45 b4	 movss	 DWORD PTR _d$11[ebp+8], xmm0

; 2209 : 
; 2210 : 					if (altitude < -(get_3d_vector_magnitude (&d) * 0.5))

  0090a	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _altitude$[ebp]
  0090f	8d 45 ac	 lea	 eax, DWORD PTR _d$11[ebp]
  00912	50		 push	 eax
  00913	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv1187[ebp], xmm0
  0091b	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  00920	dd 9d 2c ff ff
	ff		 fstp	 QWORD PTR tv1003[ebp]
  00926	f2 0f 10 85 2c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1003[ebp]
  0092e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00936	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  0093d	f2 0f 10 8d 34
	ff ff ff	 movsd	 xmm1, QWORD PTR tv1187[ebp]
  00945	66 0f 2f c1	 comisd	 xmm0, xmm1
  00949	0f 86 a3 00 00
	00		 jbe	 $LN17@basic_fixe

; 2211 : 					{
; 2212 : 						//
; 2213 : 						// aircraft is no longer visible
; 2214 : 						//
; 2215 : 
; 2216 : 						clear_fixed_wing_velocity (en);

  0094f	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00952	50		 push	 eax
  00953	e8 00 00 00 00	 call	 ?clear_fixed_wing_velocity@@YGXPAUENTITY@@@Z ; clear_fixed_wing_velocity

; 2217 : 
; 2218 : 	//					delete_local_entity_from_parents_child_list (en, LIST_TYPE_VIEW);
; 2219 : 
; 2220 : 						set_local_entity_int_value (en, INT_TYPE_OPERATIONAL_STATE, OPERATIONAL_STATE_DEAD);

  00958	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0095c	74 0d		 je	 SHORT $LN68@basic_fixe
  0095e	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00961	8b 08		 mov	 ecx, DWORD PTR [eax]
  00963	89 8d 38 ff ff
	ff		 mov	 DWORD PTR tv433[ebp], ecx
  00969	eb 27		 jmp	 SHORT $LN69@basic_fixe
$LN68@basic_fixe:
  0096b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  00971	81 c2 d6 00 00
	00		 add	 edx, 214		; 000000d6H
  00977	52		 push	 edx
  00978	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0097d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00982	50		 push	 eax
  00983	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00988	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv433[ebp], 0
$LN69@basic_fixe:
  00992	b9 01 00 00 00	 mov	 ecx, 1
  00997	85 c9		 test	 ecx, ecx
  00999	74 0c		 je	 SHORT $LN70@basic_fixe
  0099b	c7 85 34 ff ff
	ff 97 00 00 00	 mov	 DWORD PTR tv441[ebp], 151 ; 00000097H
  009a5	eb 27		 jmp	 SHORT $LN71@basic_fixe
$LN70@basic_fixe:
  009a7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  009ad	81 c2 d6 00 00
	00		 add	 edx, 214		; 000000d6H
  009b3	52		 push	 edx
  009b4	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  009b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  009be	50		 push	 eax
  009bf	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009c4	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv441[ebp], 0
$LN71@basic_fixe:
  009ce	6a 02		 push	 2
  009d0	68 97 00 00 00	 push	 151			; 00000097H
  009d5	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  009d8	51		 push	 ecx
  009d9	69 95 38 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv433[ebp], 1116
  009e3	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv441[ebp]
  009e9	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_local_entity_int_value@@3PAY0BBH@P6GXPAUENTITY@@W4INT_TYPES@@H@ZA[edx+eax*4]
  009f0	ff d1		 call	 ecx
$LN17@basic_fixe:

; 2221 : 					}
; 2222 : 
; 2223 : 					break;

  009f2	e9 7d 01 00 00	 jmp	 $LN2@basic_fixe
$LN18@basic_fixe:

; 2224 : 				}
; 2225 : 				default:
; 2226 : 				{
; 2227 : 					//
; 2228 : 					// aircraft has landed in a river / lake
; 2229 : 					//
; 2230 : 
; 2231 : 					if (altitude < -RIVER_DEPTH)

  009f7	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _altitude$[ebp]
  009fc	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c008000000000000
  00a04	66 0f 2f c8	 comisd	 xmm1, xmm0
  00a08	0f 86 66 01 00
	00		 jbe	 $LN19@basic_fixe

; 2232 : 					{
; 2233 : 						new_pos.y = terrain_elevation + get_local_entity_float_value (en, FLOAT_TYPE_CENTRE_OF_GRAVITY_TO_GROUND_DISTANCE);

  00a0e	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00a12	74 0d		 je	 SHORT $LN72@basic_fixe
  00a14	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00a17	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a19	89 8d 38 ff ff
	ff		 mov	 DWORD PTR tv455[ebp], ecx
  00a1f	eb 27		 jmp	 SHORT $LN73@basic_fixe
$LN72@basic_fixe:
  00a21	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  00a27	81 c2 e3 00 00
	00		 add	 edx, 227		; 000000e3H
  00a2d	52		 push	 edx
  00a2e	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a33	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00a38	50		 push	 eax
  00a39	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a3e	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv455[ebp], 0
$LN73@basic_fixe:
  00a48	b9 01 00 00 00	 mov	 ecx, 1
  00a4d	85 c9		 test	 ecx, ecx
  00a4f	74 0c		 je	 SHORT $LN74@basic_fixe
  00a51	c7 85 34 ff ff
	ff 12 00 00 00	 mov	 DWORD PTR tv463[ebp], 18 ; 00000012H
  00a5b	eb 27		 jmp	 SHORT $LN75@basic_fixe
$LN74@basic_fixe:
  00a5d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  00a63	81 c2 e3 00 00
	00		 add	 edx, 227		; 000000e3H
  00a69	52		 push	 edx
  00a6a	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a6f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00a74	50		 push	 eax
  00a75	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a7a	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv463[ebp], 0
$LN75@basic_fixe:
  00a84	6a 12		 push	 18			; 00000012H
  00a86	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00a89	51		 push	 ecx
  00a8a	69 95 38 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv455[ebp], 700
  00a94	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv463[ebp]
  00a9a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00aa1	ff d1		 call	 ecx
  00aa3	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR tv1029[ebp]
  00aa9	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR tv1029[ebp]
  00ab1	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _terrain_elevation$[ebp]
  00ab6	f3 0f 11 45 d0	 movss	 DWORD PTR _new_pos$[ebp+4], xmm0

; 2234 : 
; 2235 : 						new_pos.y -= RIVER_DEPTH;

  00abb	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _new_pos$[ebp+4]
  00ac0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4008000000000000
  00ac8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00acc	f3 0f 11 45 d0	 movss	 DWORD PTR _new_pos$[ebp+4], xmm0

; 2236 : 
; 2237 : 						clear_fixed_wing_velocity (en);

  00ad1	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00ad4	50		 push	 eax
  00ad5	e8 00 00 00 00	 call	 ?clear_fixed_wing_velocity@@YGXPAUENTITY@@@Z ; clear_fixed_wing_velocity

; 2238 : 
; 2239 : 						set_local_entity_int_value (en, INT_TYPE_OPERATIONAL_STATE, OPERATIONAL_STATE_DEAD);

  00ada	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00ade	74 0d		 je	 SHORT $LN76@basic_fixe
  00ae0	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00ae3	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ae5	89 8d 38 ff ff
	ff		 mov	 DWORD PTR tv480[ebp], ecx
  00aeb	eb 27		 jmp	 SHORT $LN77@basic_fixe
$LN76@basic_fixe:
  00aed	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  00af3	81 c2 e9 00 00
	00		 add	 edx, 233		; 000000e9H
  00af9	52		 push	 edx
  00afa	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00aff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00b04	50		 push	 eax
  00b05	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b0a	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv480[ebp], 0
$LN77@basic_fixe:
  00b14	b9 01 00 00 00	 mov	 ecx, 1
  00b19	85 c9		 test	 ecx, ecx
  00b1b	74 0c		 je	 SHORT $LN78@basic_fixe
  00b1d	c7 85 34 ff ff
	ff 97 00 00 00	 mov	 DWORD PTR tv488[ebp], 151 ; 00000097H
  00b27	eb 27		 jmp	 SHORT $LN79@basic_fixe
$LN78@basic_fixe:
  00b29	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  00b2f	81 c2 e9 00 00
	00		 add	 edx, 233		; 000000e9H
  00b35	52		 push	 edx
  00b36	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b3b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00b40	50		 push	 eax
  00b41	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b46	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv488[ebp], 0
$LN79@basic_fixe:
  00b50	6a 02		 push	 2
  00b52	68 97 00 00 00	 push	 151			; 00000097H
  00b57	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00b5a	51		 push	 ecx
  00b5b	69 95 38 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv480[ebp], 1116
  00b65	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv488[ebp]
  00b6b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_local_entity_int_value@@3PAY0BBH@P6GXPAUENTITY@@W4INT_TYPES@@H@ZA[edx+eax*4]
  00b72	ff d1		 call	 ecx
$LN19@basic_fixe:
$LN2@basic_fixe:

; 2240 : 					}
; 2241 : 				}
; 2242 : 			}
; 2243 : 		}
; 2244 : 		else if (terrain_class == TERRAIN_CLASS_FOREST)

  00b74	e9 ed 02 00 00	 jmp	 $LN23@basic_fixe
$LN14@basic_fixe:
  00b79	83 7d c8 02	 cmp	 DWORD PTR _terrain_class$[ebp], 2
  00b7d	0f 85 ed 01 00
	00		 jne	 $LN20@basic_fixe

; 2245 : 		{
; 2246 : 			//////////////////////////////////////////
; 2247 : 			//
; 2248 : 			// AIRCRAFT HAS HIT FOREST
; 2249 : 			//
; 2250 : 			//////////////////////////////////////////
; 2251 : 
; 2252 : 			//
; 2253 : 			// keep moving until the aircraft is obscured
; 2254 : 			//
; 2255 : 
; 2256 : 			{
; 2257 : 				struct OBJECT_3D_BOUNDS
; 2258 : 					*bounding_box;
; 2259 : 
; 2260 : 				vec3d
; 2261 : 					d;
; 2262 : 
; 2263 : 				bounding_box = get_object_3d_bounding_box (get_local_entity_int_value (en, INT_TYPE_OBJECT_3D_SHAPE));

  00b83	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00b87	74 0d		 je	 SHORT $LN80@basic_fixe
  00b89	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00b8c	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b8e	89 8d 38 ff ff
	ff		 mov	 DWORD PTR tv503[ebp], ecx
  00b94	eb 27		 jmp	 SHORT $LN81@basic_fixe
$LN80@basic_fixe:
  00b96	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  00b9c	81 c2 01 01 00
	00		 add	 edx, 257		; 00000101H
  00ba2	52		 push	 edx
  00ba3	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ba8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00bad	50		 push	 eax
  00bae	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00bb3	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv503[ebp], 0
$LN81@basic_fixe:
  00bbd	b9 01 00 00 00	 mov	 ecx, 1
  00bc2	85 c9		 test	 ecx, ecx
  00bc4	74 0c		 je	 SHORT $LN82@basic_fixe
  00bc6	c7 85 34 ff ff
	ff 92 00 00 00	 mov	 DWORD PTR tv511[ebp], 146 ; 00000092H
  00bd0	eb 27		 jmp	 SHORT $LN83@basic_fixe
$LN82@basic_fixe:
  00bd2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  00bd8	81 c2 01 01 00
	00		 add	 edx, 257		; 00000101H
  00bde	52		 push	 edx
  00bdf	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00be4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00be9	50		 push	 eax
  00bea	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00bef	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv511[ebp], 0
$LN83@basic_fixe:
  00bf9	68 92 00 00 00	 push	 146			; 00000092H
  00bfe	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00c01	51		 push	 ecx
  00c02	69 95 38 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv503[ebp], 1116
  00c0c	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv511[ebp]
  00c12	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00c19	ff d1		 call	 ecx
  00c1b	50		 push	 eax
  00c1c	e8 00 00 00 00	 call	 ?get_object_3d_bounding_box@@YGPAUOBJECT_3D_BOUNDS@@H@Z ; get_object_3d_bounding_box
  00c21	89 45 a8	 mov	 DWORD PTR _bounding_box$10[ebp], eax

; 2264 : 
; 2265 : 				d.x = bounding_box->xmax - bounding_box->xmin;

  00c24	8b 45 a8	 mov	 eax, DWORD PTR _bounding_box$10[ebp]
  00c27	8b 4d a8	 mov	 ecx, DWORD PTR _bounding_box$10[ebp]
  00c2a	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00c2f	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00c33	f3 0f 11 45 9c	 movss	 DWORD PTR _d$9[ebp], xmm0

; 2266 : 				d.y = bounding_box->ymax - bounding_box->ymin;

  00c38	8b 45 a8	 mov	 eax, DWORD PTR _bounding_box$10[ebp]
  00c3b	8b 4d a8	 mov	 ecx, DWORD PTR _bounding_box$10[ebp]
  00c3e	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00c43	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00c48	f3 0f 11 45 a0	 movss	 DWORD PTR _d$9[ebp+4], xmm0

; 2267 : 				d.z = bounding_box->zmax - bounding_box->zmin;

  00c4d	8b 45 a8	 mov	 eax, DWORD PTR _bounding_box$10[ebp]
  00c50	8b 4d a8	 mov	 ecx, DWORD PTR _bounding_box$10[ebp]
  00c53	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00c58	f3 0f 5c 41 10	 subss	 xmm0, DWORD PTR [ecx+16]
  00c5d	f3 0f 11 45 a4	 movss	 DWORD PTR _d$9[ebp+8], xmm0

; 2268 : 
; 2269 : 				if (altitude < -(get_3d_vector_magnitude (&d) * 0.5))

  00c62	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _altitude$[ebp]
  00c67	8d 45 9c	 lea	 eax, DWORD PTR _d$9[ebp]
  00c6a	50		 push	 eax
  00c6b	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv1189[ebp], xmm0
  00c73	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  00c78	dd 9d 2c ff ff
	ff		 fstp	 QWORD PTR tv1068[ebp]
  00c7e	f2 0f 10 85 2c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1068[ebp]
  00c86	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00c8e	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00c95	f2 0f 10 8d 34
	ff ff ff	 movsd	 xmm1, QWORD PTR tv1189[ebp]
  00c9d	66 0f 2f c1	 comisd	 xmm0, xmm1
  00ca1	0f 86 c4 00 00
	00		 jbe	 $LN22@basic_fixe

; 2270 : 				{
; 2271 : 					//
; 2272 : 					// stop any black smoke TRAILS generating ( marked as type VEHICLE_DAMAGE )
; 2273 : 					//
; 2274 : 
; 2275 : 					clear_smoke_list_generator_lifetime (en, ENTITY_SUB_TYPE_EFFECT_SMOKE_LIST_LIGHT_DAMAGE);

  00ca7	6a 05		 push	 5
  00ca9	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00cac	50		 push	 eax
  00cad	e8 00 00 00 00	 call	 ?clear_smoke_list_generator_lifetime@@YGHPAUENTITY@@H@Z ; clear_smoke_list_generator_lifetime

; 2276 : 					clear_smoke_list_generator_lifetime (en, ENTITY_SUB_TYPE_EFFECT_SMOKE_LIST_MEDIUM_DAMAGE);

  00cb2	6a 06		 push	 6
  00cb4	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00cb7	50		 push	 eax
  00cb8	e8 00 00 00 00	 call	 ?clear_smoke_list_generator_lifetime@@YGHPAUENTITY@@H@Z ; clear_smoke_list_generator_lifetime

; 2277 : 					clear_smoke_list_generator_lifetime (en, ENTITY_SUB_TYPE_EFFECT_SMOKE_LIST_HEAVY_DAMAGE);

  00cbd	6a 08		 push	 8
  00cbf	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00cc2	50		 push	 eax
  00cc3	e8 00 00 00 00	 call	 ?clear_smoke_list_generator_lifetime@@YGHPAUENTITY@@H@Z ; clear_smoke_list_generator_lifetime

; 2278 : 
; 2279 : 					//
; 2280 : 					// aircraft is no longer visible
; 2281 : 					//
; 2282 : 
; 2283 : 					clear_fixed_wing_velocity (en);

  00cc8	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00ccb	50		 push	 eax
  00ccc	e8 00 00 00 00	 call	 ?clear_fixed_wing_velocity@@YGXPAUENTITY@@@Z ; clear_fixed_wing_velocity

; 2284 : 
; 2285 : //					delete_local_entity_from_parents_child_list (en, LIST_TYPE_VIEW);
; 2286 : 
; 2287 : 					set_local_entity_int_value (en, INT_TYPE_OPERATIONAL_STATE, OPERATIONAL_STATE_DEAD);

  00cd1	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00cd5	74 0d		 je	 SHORT $LN84@basic_fixe
  00cd7	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00cda	8b 08		 mov	 ecx, DWORD PTR [eax]
  00cdc	89 8d 38 ff ff
	ff		 mov	 DWORD PTR tv580[ebp], ecx
  00ce2	eb 27		 jmp	 SHORT $LN85@basic_fixe
$LN84@basic_fixe:
  00ce4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  00cea	81 c2 19 01 00
	00		 add	 edx, 281		; 00000119H
  00cf0	52		 push	 edx
  00cf1	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00cf6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00cfb	50		 push	 eax
  00cfc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d01	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv580[ebp], 0
$LN85@basic_fixe:
  00d0b	b9 01 00 00 00	 mov	 ecx, 1
  00d10	85 c9		 test	 ecx, ecx
  00d12	74 0c		 je	 SHORT $LN86@basic_fixe
  00d14	c7 85 34 ff ff
	ff 97 00 00 00	 mov	 DWORD PTR tv588[ebp], 151 ; 00000097H
  00d1e	eb 27		 jmp	 SHORT $LN87@basic_fixe
$LN86@basic_fixe:
  00d20	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  00d26	81 c2 19 01 00
	00		 add	 edx, 281		; 00000119H
  00d2c	52		 push	 edx
  00d2d	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d32	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00d37	50		 push	 eax
  00d38	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d3d	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv588[ebp], 0
$LN87@basic_fixe:
  00d47	6a 02		 push	 2
  00d49	68 97 00 00 00	 push	 151			; 00000097H
  00d4e	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00d51	51		 push	 ecx
  00d52	69 95 38 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv580[ebp], 1116
  00d5c	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv588[ebp]
  00d62	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_local_entity_int_value@@3PAY0BBH@P6GXPAUENTITY@@W4INT_TYPES@@H@ZA[edx+eax*4]
  00d69	ff d1		 call	 ecx
$LN22@basic_fixe:

; 2288 : 				}
; 2289 : 			}
; 2290 : 		}
; 2291 : 		else

  00d6b	e9 f6 00 00 00	 jmp	 $LN23@basic_fixe
$LN20@basic_fixe:

; 2292 : 		{
; 2293 : 			//////////////////////////////////////////
; 2294 : 			//
; 2295 : 			// AIRCRAFT HAS HIT SOLID GROUND
; 2296 : 			//
; 2297 : 			//////////////////////////////////////////
; 2298 : 
; 2299 : 			new_pos.y = terrain_elevation + get_local_entity_float_value (en, FLOAT_TYPE_CENTRE_OF_GRAVITY_TO_GROUND_DISTANCE);

  00d70	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00d74	74 0d		 je	 SHORT $LN88@basic_fixe
  00d76	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00d79	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d7b	89 8d 38 ff ff
	ff		 mov	 DWORD PTR tv600[ebp], ecx
  00d81	eb 27		 jmp	 SHORT $LN89@basic_fixe
$LN88@basic_fixe:
  00d83	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  00d89	81 c2 25 01 00
	00		 add	 edx, 293		; 00000125H
  00d8f	52		 push	 edx
  00d90	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d95	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00d9a	50		 push	 eax
  00d9b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00da0	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv600[ebp], 0
$LN89@basic_fixe:
  00daa	b9 01 00 00 00	 mov	 ecx, 1
  00daf	85 c9		 test	 ecx, ecx
  00db1	74 0c		 je	 SHORT $LN90@basic_fixe
  00db3	c7 85 34 ff ff
	ff 12 00 00 00	 mov	 DWORD PTR tv608[ebp], 18 ; 00000012H
  00dbd	eb 27		 jmp	 SHORT $LN91@basic_fixe
$LN90@basic_fixe:
  00dbf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  00dc5	81 c2 25 01 00
	00		 add	 edx, 293		; 00000125H
  00dcb	52		 push	 edx
  00dcc	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00dd1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00dd6	50		 push	 eax
  00dd7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ddc	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv608[ebp], 0
$LN91@basic_fixe:
  00de6	6a 12		 push	 18			; 00000012H
  00de8	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00deb	51		 push	 ecx
  00dec	69 95 38 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv600[ebp], 700
  00df6	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv608[ebp]
  00dfc	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00e03	ff d1		 call	 ecx
  00e05	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR tv1096[ebp]
  00e0b	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR tv1096[ebp]
  00e13	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _terrain_elevation$[ebp]
  00e18	f3 0f 11 45 d0	 movss	 DWORD PTR _new_pos$[ebp+4], xmm0

; 2300 : 
; 2301 : 			//
; 2302 : 			// crash sound effect
; 2303 : 			//
; 2304 : 
; 2305 : 			if (get_comms_model () == COMMS_MODEL_SERVER)

  00e1d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?system_comms_model@@3W4COMMS_MODEL_TYPES@@A, 0 ; system_comms_model
  00e24	75 40		 jne	 SHORT $LN23@basic_fixe

; 2306 : 			{
; 2307 : 				sound_sample_indices
; 2308 : 					sound_sample_index;
; 2309 : 
; 2310 : 				sound_sample_index = SOUND_SAMPLE_INDEX_AIRCRAFT_CRASH;

  00e26	c7 45 98 51 00
	00 00		 mov	 DWORD PTR _sound_sample_index$8[ebp], 81 ; 00000051H

; 2311 : 
; 2312 : 				create_client_server_sound_effect_entity

  00e2d	8d 45 98	 lea	 eax, DWORD PTR _sound_sample_index$8[ebp]
  00e30	50		 push	 eax
  00e31	6a 01		 push	 1
  00e33	6a 00		 push	 0
  00e35	6a 01		 push	 1
  00e37	51		 push	 ecx
  00e38	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00e40	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e45	51		 push	 ecx
  00e46	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00e4e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e53	6a 00		 push	 0
  00e55	6a 00		 push	 0
  00e57	6a 00		 push	 0
  00e59	6a 1a		 push	 26			; 0000001aH
  00e5b	6a 00		 push	 0
  00e5d	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00e60	51		 push	 ecx
  00e61	e8 00 00 00 00	 call	 ?create_client_server_sound_effect_entity@@YGPAUENTITY@@PAU1@W4ENTITY_SIDES@@HW4SOUND_CHANNEL_TYPES@@W4SOUND_LOCALITY_TYPES@@PAUVEC3D@@MMHHHPAH@Z ; create_client_server_sound_effect_entity
$LN23@basic_fixe:

; 2313 : 				(
; 2314 : 					en,
; 2315 : 					ENTITY_SIDE_NEUTRAL,
; 2316 : 					ENTITY_SUB_TYPE_EFFECT_SOUND_MISC,
; 2317 : 					SOUND_CHANNEL_SOUND_EFFECT,
; 2318 : 					SOUND_LOCALITY_ALL,
; 2319 : 					NULL,												// position
; 2320 : 					1.0,												// amplification
; 2321 : 					1.0,												// Werewolf pitch
; 2322 : 					TRUE,												// valid sound effect
; 2323 : 					FALSE,											// looping
; 2324 : 					1,													// sample count
; 2325 : 					&sound_sample_index							// sample index list
; 2326 : 				);
; 2327 : 			}
; 2328 : 		}
; 2329 : 	}
; 2330 : 
; 2331 : 	//
; 2332 : 	// update attitude
; 2333 : 	//
; 2334 : 
; 2335 : 	if ((velocity->x != 0.0) || (velocity->z != 0.0))

  00e66	8b 45 e4	 mov	 eax, DWORD PTR _velocity$[ebp]
  00e69	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00e6d	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00e75	9f		 lahf
  00e76	f6 c4 44	 test	 ah, 68			; 00000044H
  00e79	7a 1a		 jp	 SHORT $LN25@basic_fixe
  00e7b	8b 45 e4	 mov	 eax, DWORD PTR _velocity$[ebp]
  00e7e	f3 0f 5a 40 08	 cvtss2sd xmm0, DWORD PTR [eax+8]
  00e83	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00e8b	9f		 lahf
  00e8c	f6 c4 44	 test	 ah, 68			; 00000044H
  00e8f	0f 8b a8 02 00
	00		 jnp	 $LN24@basic_fixe
$LN25@basic_fixe:

; 2336 : 	{
; 2337 : 		float
; 2338 : 			heading,
; 2339 : 			pitch,
; 2340 : 			roll,
; 2341 : 			required_heading,
; 2342 : 			required_pitch,
; 2343 : 			dh,
; 2344 : 			dp;
; 2345 : 
; 2346 : 		heading = get_heading_from_attitude_matrix (raw->ac.mob.attitude);

  00e95	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00e9a	d1 e0		 shl	 eax, 1
  00e9c	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00e9f	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  00ea3	b8 04 00 00 00	 mov	 eax, 4
  00ea8	d1 e0		 shl	 eax, 1
  00eaa	51		 push	 ecx
  00eab	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00eb0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eb5	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00eba	d1 e1		 shl	 ecx, 1
  00ebc	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00ebf	8d 44 0a 10	 lea	 eax, DWORD PTR [edx+ecx+16]
  00ec3	b9 04 00 00 00	 mov	 ecx, 4
  00ec8	6b d1 00	 imul	 edx, ecx, 0
  00ecb	51		 push	 ecx
  00ecc	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00ed1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ed6	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  00edb	d9 5d 94	 fstp	 DWORD PTR _heading$7[ebp]

; 2347 : 		pitch = get_pitch_from_attitude_matrix (raw->ac.mob.attitude);

  00ede	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00ee3	d1 e0		 shl	 eax, 1
  00ee5	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00ee8	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  00eec	b8 04 00 00 00	 mov	 eax, 4
  00ef1	c1 e0 00	 shl	 eax, 0
  00ef4	51		 push	 ecx
  00ef5	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00efa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eff	e8 00 00 00 00	 call	 ?asin@@YGMM@Z		; asin
  00f04	d9 5d 90	 fstp	 DWORD PTR _pitch$6[ebp]

; 2348 : 		roll = get_roll_from_attitude_matrix (raw->ac.mob.attitude);

  00f07	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00f0c	c1 e0 00	 shl	 eax, 0
  00f0f	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00f12	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  00f16	b8 04 00 00 00	 mov	 eax, 4
  00f1b	c1 e0 00	 shl	 eax, 0
  00f1e	51		 push	 ecx
  00f1f	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00f24	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f29	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00f2e	6b d1 00	 imul	 edx, ecx, 0
  00f31	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00f34	8d 4c 10 10	 lea	 ecx, DWORD PTR [eax+edx+16]
  00f38	ba 04 00 00 00	 mov	 edx, 4
  00f3d	c1 e2 00	 shl	 edx, 0
  00f40	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00f45	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00f4c	51		 push	 ecx
  00f4d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f52	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  00f57	d9 5d 8c	 fstp	 DWORD PTR _roll$5[ebp]

; 2349 : 
; 2350 : 		memcpy (&direction_vector, velocity, sizeof (vec3d));

  00f5a	6a 0c		 push	 12			; 0000000cH
  00f5c	8b 45 e4	 mov	 eax, DWORD PTR _velocity$[ebp]
  00f5f	50		 push	 eax
  00f60	8d 4d d8	 lea	 ecx, DWORD PTR _direction_vector$[ebp]
  00f63	51		 push	 ecx
  00f64	e8 00 00 00 00	 call	 _memcpy
  00f69	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2351 : 
; 2352 : 		normalise_3d_vector_given_magnitude (&direction_vector, speed);

  00f6c	51		 push	 ecx
  00f6d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _speed$[ebp]
  00f72	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f77	8d 45 d8	 lea	 eax, DWORD PTR _direction_vector$[ebp]
  00f7a	50		 push	 eax
  00f7b	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 2353 : 
; 2354 : 		get_heading_and_pitch_from_3d_unit_vector (&direction_vector, &required_heading, &required_pitch);

  00f80	8d 45 84	 lea	 eax, DWORD PTR _required_pitch$3[ebp]
  00f83	50		 push	 eax
  00f84	8d 4d 88	 lea	 ecx, DWORD PTR _required_heading$4[ebp]
  00f87	51		 push	 ecx
  00f88	8d 55 d8	 lea	 edx, DWORD PTR _direction_vector$[ebp]
  00f8b	52		 push	 edx
  00f8c	e8 00 00 00 00	 call	 ?get_heading_and_pitch_from_3d_unit_vector@@YGXPBUVEC3D@@PAM1@Z ; get_heading_and_pitch_from_3d_unit_vector

; 2355 : 
; 2356 : 		dh = bound (required_heading - heading, -(PI * 0.25), (PI *0.25));

  00f91	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _required_heading$4[ebp]
  00f96	f3 0f 5c 45 94	 subss	 xmm0, DWORD PTR _heading$7[ebp]
  00f9b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00f9f	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bfe921fb60000000
  00fa7	66 0f 2f c8	 comisd	 xmm1, xmm0
  00fab	76 12		 jbe	 SHORT $LN94@basic_fixe
  00fad	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bfe921fb60000000
  00fb5	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv695[ebp], xmm0
  00fbd	eb 50		 jmp	 SHORT $LN95@basic_fixe
$LN94@basic_fixe:
  00fbf	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _required_heading$4[ebp]
  00fc4	f3 0f 5c 45 94	 subss	 xmm0, DWORD PTR _heading$7[ebp]
  00fc9	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00fcd	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fe921fb60000000
  00fd5	76 12		 jbe	 SHORT $LN92@basic_fixe
  00fd7	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fe921fb60000000
  00fdf	f2 0f 11 85 2c
	ff ff ff	 movsd	 QWORD PTR tv694[ebp], xmm0
  00fe7	eb 16		 jmp	 SHORT $LN93@basic_fixe
$LN92@basic_fixe:
  00fe9	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _required_heading$4[ebp]
  00fee	f3 0f 5c 45 94	 subss	 xmm0, DWORD PTR _heading$7[ebp]
  00ff3	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00ff7	f2 0f 11 85 2c
	ff ff ff	 movsd	 QWORD PTR tv694[ebp], xmm0
$LN93@basic_fixe:
  00fff	f2 0f 10 85 2c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv694[ebp]
  01007	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv695[ebp], xmm0
$LN95@basic_fixe:
  0100f	f2 0f 5a 85 34
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv695[ebp]
  01017	f3 0f 11 45 80	 movss	 DWORD PTR _dh$2[ebp], xmm0

; 2357 : 
; 2358 : 		heading += (dh * get_entity_movement_delta_time());

  0101c	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _dh$2[ebp]
  01021	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  01029	f3 0f 58 45 94	 addss	 xmm0, DWORD PTR _heading$7[ebp]
  0102e	f3 0f 11 45 94	 movss	 DWORD PTR _heading$7[ebp], xmm0

; 2359 : 
; 2360 : 		if (altitude > 12.0)

  01033	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _altitude$[ebp]
  01038	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4028000000000000
  01040	0f 86 ca 00 00
	00		 jbe	 $LN26@basic_fixe

; 2361 : 		{
; 2362 : 			//
; 2363 : 			// stop planes rolling on the floor
; 2364 : 			//
; 2365 : 
; 2366 : 			roll += (PI * 0.5 * get_entity_movement_delta_time());

  01046	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?system_delta_time@@3MA
  0104e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff921fb60000000
  01056	f3 0f 5a 4d 8c	 cvtss2sd xmm1, DWORD PTR _roll$5[ebp]
  0105b	f2 0f 58 c8	 addsd	 xmm1, xmm0
  0105f	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  01063	f3 0f 11 45 8c	 movss	 DWORD PTR _roll$5[ebp], xmm0

; 2367 : 
; 2368 : 			dp = bound (required_pitch - pitch, -(PI * 0.25), (PI *0.25));

  01068	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _required_pitch$3[ebp]
  0106d	f3 0f 5c 45 90	 subss	 xmm0, DWORD PTR _pitch$6[ebp]
  01072	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01076	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bfe921fb60000000
  0107e	66 0f 2f c8	 comisd	 xmm1, xmm0
  01082	76 12		 jbe	 SHORT $LN98@basic_fixe
  01084	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bfe921fb60000000
  0108c	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv715[ebp], xmm0
  01094	eb 50		 jmp	 SHORT $LN99@basic_fixe
$LN98@basic_fixe:
  01096	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _required_pitch$3[ebp]
  0109b	f3 0f 5c 45 90	 subss	 xmm0, DWORD PTR _pitch$6[ebp]
  010a0	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  010a4	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fe921fb60000000
  010ac	76 12		 jbe	 SHORT $LN96@basic_fixe
  010ae	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fe921fb60000000
  010b6	f2 0f 11 85 2c
	ff ff ff	 movsd	 QWORD PTR tv714[ebp], xmm0
  010be	eb 16		 jmp	 SHORT $LN97@basic_fixe
$LN96@basic_fixe:
  010c0	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _required_pitch$3[ebp]
  010c5	f3 0f 5c 45 90	 subss	 xmm0, DWORD PTR _pitch$6[ebp]
  010ca	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  010ce	f2 0f 11 85 2c
	ff ff ff	 movsd	 QWORD PTR tv714[ebp], xmm0
$LN97@basic_fixe:
  010d6	f2 0f 10 85 2c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv714[ebp]
  010de	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR tv715[ebp], xmm0
$LN99@basic_fixe:
  010e6	f2 0f 5a 85 34
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv715[ebp]
  010ee	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _dp$1[ebp], xmm0

; 2369 : 
; 2370 : 			pitch += (dp * get_entity_movement_delta_time());

  010f6	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _dp$1[ebp]
  010fe	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  01106	f3 0f 58 45 90	 addss	 xmm0, DWORD PTR _pitch$6[ebp]
  0110b	f3 0f 11 45 90	 movss	 DWORD PTR _pitch$6[ebp], xmm0
$LN26@basic_fixe:

; 2371 : 		}
; 2372 : 
; 2373 : 		get_3d_transformation_matrix (raw->ac.mob.attitude, heading, pitch, roll);

  01110	51		 push	 ecx
  01111	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _roll$5[ebp]
  01116	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0111b	51		 push	 ecx
  0111c	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _pitch$6[ebp]
  01121	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01126	51		 push	 ecx
  01127	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _heading$7[ebp]
  0112c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01131	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  01134	83 c0 10	 add	 eax, 16			; 00000010H
  01137	50		 push	 eax
  01138	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix
$LN24@basic_fixe:

; 2374 : 	}
; 2375 : 
; 2376 : 	//
; 2377 : 	// set new position
; 2378 : 	//
; 2379 : 
; 2380 : 	set_local_entity_vec3d (en, VEC3D_TYPE_POSITION, &new_pos);

  0113d	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  01141	74 0d		 je	 SHORT $LN100@basic_fixe
  01143	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  01146	8b 08		 mov	 ecx, DWORD PTR [eax]
  01148	89 8d 38 ff ff
	ff		 mov	 DWORD PTR tv732[ebp], ecx
  0114e	eb 27		 jmp	 SHORT $LN101@basic_fixe
$LN100@basic_fixe:
  01150	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  01156	81 c2 76 01 00
	00		 add	 edx, 374		; 00000176H
  0115c	52		 push	 edx
  0115d	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  01162	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01167	50		 push	 eax
  01168	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0116d	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv732[ebp], 0
$LN101@basic_fixe:
  01177	b9 01 00 00 00	 mov	 ecx, 1
  0117c	85 c9		 test	 ecx, ecx
  0117e	74 0c		 je	 SHORT $LN102@basic_fixe
  01180	c7 85 34 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv740[ebp], 8
  0118a	eb 27		 jmp	 SHORT $LN103@basic_fixe
$LN102@basic_fixe:
  0118c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z@4JA
  01192	81 c2 76 01 00
	00		 add	 edx, 374		; 00000176H
  01198	52		 push	 edx
  01199	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0119e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  011a3	50		 push	 eax
  011a4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  011a9	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv740[ebp], 0
$LN103@basic_fixe:
  011b3	8d 4d cc	 lea	 ecx, DWORD PTR _new_pos$[ebp]
  011b6	51		 push	 ecx
  011b7	6a 08		 push	 8
  011b9	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  011bc	52		 push	 edx
  011bd	6b 85 38 ff ff
	ff 60		 imul	 eax, DWORD PTR tv732[ebp], 96
  011c4	8b 8d 34 ff ff
	ff		 mov	 ecx, DWORD PTR tv740[ebp]
  011ca	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_set_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  011d1	ff d2		 call	 edx
$LN1@basic_fixe:

; 2381 : }

  011d3	5f		 pop	 edi
  011d4	5e		 pop	 esi
  011d5	5b		 pop	 ebx
  011d6	8b e5		 mov	 esp, ebp
  011d8	5d		 pop	 ebp
  011d9	c2 04 00	 ret	 4
?basic_fixed_wing_death_movement@@YGXPAUENTITY@@@Z ENDP	; basic_fixed_wing_death_movement
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_move.c
;	COMDAT ?basic_fixed_wing_movement@@YGXPAUENTITY@@@Z
_TEXT	SEGMENT
tv583 = -140						; size = 8
tv563 = -140						; size = 8
tv548 = -140						; size = 8
tv400 = -136						; size = 4
tv380 = -136						; size = 4
tv252 = -136						; size = 4
tv226 = -136						; size = 4
tv204 = -136						; size = 4
tv180 = -136						; size = 4
tv77 = -136						; size = 4
tv577 = -132						; size = 4
tv557 = -132						; size = 4
tv542 = -132						; size = 4
tv392 = -132						; size = 4
tv372 = -132						; size = 4
tv245 = -132						; size = 4
tv218 = -132						; size = 4
tv196 = -132						; size = 4
tv172 = -132						; size = 4
tv70 = -132						; size = 4
_current_pos$ = -64					; size = 4
_new_pos$ = -60						; size = 12
_wp_pos$ = -48						; size = 12
_dist$ = -36						; size = 12
_terrain_elevation$ = -24				; size = 4
_old_pitch$ = -20					; size = 4
_old_heading$ = -16					; size = 4
_old_roll$ = -12					; size = 4
_guide$ = -8						; size = 4
_raw$ = -4						; size = 4
_en$ = 8						; size = 4
?basic_fixed_wing_movement@@YGXPAUENTITY@@@Z PROC	; basic_fixed_wing_movement, COMDAT

; 1540 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1541 : 	fixed_wing
; 1542 : 		*raw;
; 1543 : 
; 1544 : 	entity
; 1545 : 		*guide;
; 1546 : 
; 1547 : 	float
; 1548 : 		old_roll,
; 1549 : 		old_heading,
; 1550 : 		old_pitch,
; 1551 : 		terrain_elevation;
; 1552 : 
; 1553 : 	vec3d
; 1554 : 		dist,
; 1555 : 		wp_pos,
; 1556 : 		new_pos,
; 1557 : 		*current_pos;
; 1558 : 
; 1559 : 	raw = (fixed_wing *) get_local_entity_data (en);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00012	89 4d fc	 mov	 DWORD PTR _raw$[ebp], ecx

; 1560 : 
; 1561 : 	// abort if mobile is not moving (i.e. landed, or dead)
; 1562 : 	//
; 1563 : 
; 1564 : 	if (!get_local_entity_int_value (en, INT_TYPE_MOBILE_MOVING))

  00015	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00019	74 0d		 je	 SHORT $LN15@basic_fixe
  0001b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0001e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00020	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv70[ebp], ecx
  00026	eb 20		 jmp	 SHORT $LN16@basic_fixe
$LN15@basic_fixe:
  00028	68 1c 06 00 00	 push	 1564			; 0000061cH
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00032	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00038	52		 push	 edx
  00039	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0003e	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN16@basic_fixe:
  00048	b8 01 00 00 00	 mov	 eax, 1
  0004d	85 c0		 test	 eax, eax
  0004f	74 0c		 je	 SHORT $LN17@basic_fixe
  00051	c7 85 78 ff ff
	ff 8e 00 00 00	 mov	 DWORD PTR tv77[ebp], 142 ; 0000008eH
  0005b	eb 20		 jmp	 SHORT $LN18@basic_fixe
$LN17@basic_fixe:
  0005d	68 1c 06 00 00	 push	 1564			; 0000061cH
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00067	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0006d	51		 push	 ecx
  0006e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00073	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv77[ebp], 0
$LN18@basic_fixe:
  0007d	68 8e 00 00 00	 push	 142			; 0000008eH
  00082	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00085	52		 push	 edx
  00086	69 85 7c ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv70[ebp], 1116
  00090	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv77[ebp]
  00096	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0009d	ff d2		 call	 edx
  0009f	85 c0		 test	 eax, eax
  000a1	75 05		 jne	 SHORT $LN2@basic_fixe

; 1565 : 	{
; 1566 : 
; 1567 : 		return;

  000a3	e9 eb 06 00 00	 jmp	 $LN1@basic_fixe
$LN2@basic_fixe:

; 1568 : 	}
; 1569 : 
; 1570 : 	if (raw->ac.mob.tacview_logging)

  000a8	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  000ab	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  000ae	c1 e9 05	 shr	 ecx, 5
  000b1	83 e1 01	 and	 ecx, 1
  000b4	0f 84 c5 00 00
	00		 je	 $LN3@basic_fixe

; 1571 : 	{
; 1572 : 		old_roll = get_roll_from_attitude_matrix(raw->ac.mob.attitude);

  000ba	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000bf	c1 e0 00	 shl	 eax, 0
  000c2	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  000c5	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  000c9	b8 04 00 00 00	 mov	 eax, 4
  000ce	c1 e0 00	 shl	 eax, 0
  000d1	51		 push	 ecx
  000d2	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  000d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000dc	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000e1	6b d1 00	 imul	 edx, ecx, 0
  000e4	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  000e7	8d 4c 10 10	 lea	 ecx, DWORD PTR [eax+edx+16]
  000eb	ba 04 00 00 00	 mov	 edx, 4
  000f0	c1 e2 00	 shl	 edx, 0
  000f3	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  000f8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000ff	51		 push	 ecx
  00100	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00105	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  0010a	d9 5d f4	 fstp	 DWORD PTR _old_roll$[ebp]

; 1573 : 		old_pitch = get_pitch_from_attitude_matrix(raw->ac.mob.attitude);

  0010d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00112	d1 e0		 shl	 eax, 1
  00114	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00117	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  0011b	b8 04 00 00 00	 mov	 eax, 4
  00120	c1 e0 00	 shl	 eax, 0
  00123	51		 push	 ecx
  00124	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00129	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012e	e8 00 00 00 00	 call	 ?asin@@YGMM@Z		; asin
  00133	d9 5d ec	 fstp	 DWORD PTR _old_pitch$[ebp]

; 1574 : 		old_heading = get_heading_from_attitude_matrix(raw->ac.mob.attitude);

  00136	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0013b	d1 e0		 shl	 eax, 1
  0013d	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00140	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  00144	b8 04 00 00 00	 mov	 eax, 4
  00149	d1 e0		 shl	 eax, 1
  0014b	51		 push	 ecx
  0014c	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00151	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00156	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0015b	d1 e1		 shl	 ecx, 1
  0015d	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00160	8d 44 0a 10	 lea	 eax, DWORD PTR [edx+ecx+16]
  00164	b9 04 00 00 00	 mov	 ecx, 4
  00169	6b d1 00	 imul	 edx, ecx, 0
  0016c	51		 push	 ecx
  0016d	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00172	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00177	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  0017c	d9 5d f0	 fstp	 DWORD PTR _old_heading$[ebp]
$LN3@basic_fixe:

; 1575 : 	}
; 1576 : 
; 1577 : 	//
; 1578 : 	// abort if the mobile has no current guide (in which case it should never get past the first check ??)
; 1579 : 	//
; 1580 : 
; 1581 : 	guide = get_local_entity_parent (en, LIST_TYPE_FOLLOWER);

  0017f	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00183	74 0d		 je	 SHORT $LN19@basic_fixe
  00185	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00188	8b 08		 mov	 ecx, DWORD PTR [eax]
  0018a	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv172[ebp], ecx
  00190	eb 24		 jmp	 SHORT $LN20@basic_fixe
$LN19@basic_fixe:
  00192	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_movement@@YGXPAUENTITY@@@Z@4JA
  00198	83 c2 29	 add	 edx, 41			; 00000029H
  0019b	52		 push	 edx
  0019c	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  001a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001a6	50		 push	 eax
  001a7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001ac	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv172[ebp], 0
$LN20@basic_fixe:
  001b6	b9 01 00 00 00	 mov	 ecx, 1
  001bb	85 c9		 test	 ecx, ecx
  001bd	74 0c		 je	 SHORT $LN21@basic_fixe
  001bf	c7 85 78 ff ff
	ff 0d 00 00 00	 mov	 DWORD PTR tv180[ebp], 13 ; 0000000dH
  001c9	eb 24		 jmp	 SHORT $LN22@basic_fixe
$LN21@basic_fixe:
  001cb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_movement@@YGXPAUENTITY@@@Z@4JA
  001d1	83 c2 29	 add	 edx, 41			; 00000029H
  001d4	52		 push	 edx
  001d5	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  001da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  001df	50		 push	 eax
  001e0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001e5	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv180[ebp], 0
$LN22@basic_fixe:
  001ef	6a 0d		 push	 13			; 0000000dH
  001f1	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  001f4	51		 push	 ecx
  001f5	69 95 7c ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv172[ebp], 180
  001ff	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv180[ebp]
  00205	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0020c	ff d1		 call	 ecx
  0020e	89 45 f8	 mov	 DWORD PTR _guide$[ebp], eax

; 1582 : 
; 1583 : 	if (!guide)

  00211	83 7d f8 00	 cmp	 DWORD PTR _guide$[ebp], 0
  00215	0f 85 ac 00 00
	00		 jne	 $LN4@basic_fixe

; 1584 : 	{
; 1585 : 		#if DEBUG
; 1586 : 
; 1587 : 		debug_fatal ("FW_MOVE: Entity %s (%d) has no current guide", get_local_entity_string (en, STRING_TYPE_FULL_NAME), get_local_entity_index (en));

  0021b	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0021f	74 0d		 je	 SHORT $LN23@basic_fixe
  00221	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00224	8b 08		 mov	 ecx, DWORD PTR [eax]
  00226	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv196[ebp], ecx
  0022c	eb 24		 jmp	 SHORT $LN24@basic_fixe
$LN23@basic_fixe:
  0022e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_movement@@YGXPAUENTITY@@@Z@4JA
  00234	83 c2 2f	 add	 edx, 47			; 0000002fH
  00237	52		 push	 edx
  00238	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0023d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00242	50		 push	 eax
  00243	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00248	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv196[ebp], 0
$LN24@basic_fixe:
  00252	b9 01 00 00 00	 mov	 ecx, 1
  00257	85 c9		 test	 ecx, ecx
  00259	74 0c		 je	 SHORT $LN25@basic_fixe
  0025b	c7 85 78 ff ff
	ff 03 00 00 00	 mov	 DWORD PTR tv204[ebp], 3
  00265	eb 24		 jmp	 SHORT $LN26@basic_fixe
$LN25@basic_fixe:
  00267	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_movement@@YGXPAUENTITY@@@Z@4JA
  0026d	83 c2 2f	 add	 edx, 47			; 0000002fH
  00270	52		 push	 edx
  00271	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00276	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  0027b	50		 push	 eax
  0027c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00281	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv204[ebp], 0
$LN26@basic_fixe:
  0028b	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0028e	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  00294	c1 f9 04	 sar	 ecx, 4
  00297	51		 push	 ecx
  00298	6a 03		 push	 3
  0029a	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0029d	52		 push	 edx
  0029e	6b 85 7c ff ff
	ff 34		 imul	 eax, DWORD PTR tv196[ebp], 52
  002a5	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv204[ebp]
  002ab	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[eax+ecx*4]
  002b2	ff d2		 call	 edx
  002b4	50		 push	 eax
  002b5	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@COJIMO@FW_MOVE?3?5Entity?5?$CFs?5?$CI?$CFd?$CJ?5has?5no?5@
  002ba	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  002bf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1588 : 
; 1589 : 		#endif
; 1590 : 
; 1591 : 		return;

  002c2	e9 cc 04 00 00	 jmp	 $LN1@basic_fixe
$LN4@basic_fixe:

; 1592 : 	}
; 1593 : 
; 1594 : 	//
; 1595 : 	// GET CURRENT POSITION
; 1596 : 	//
; 1597 : 
; 1598 : 	current_pos = get_local_entity_vec3d_ptr (en, VEC3D_TYPE_POSITION);

  002c7	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  002cb	74 0d		 je	 SHORT $LN27@basic_fixe
  002cd	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  002d0	8b 08		 mov	 ecx, DWORD PTR [eax]
  002d2	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv218[ebp], ecx
  002d8	eb 24		 jmp	 SHORT $LN28@basic_fixe
$LN27@basic_fixe:
  002da	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_movement@@YGXPAUENTITY@@@Z@4JA
  002e0	83 c2 3a	 add	 edx, 58			; 0000003aH
  002e3	52		 push	 edx
  002e4	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  002e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002ee	50		 push	 eax
  002ef	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002f4	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv218[ebp], 0
$LN28@basic_fixe:
  002fe	b9 01 00 00 00	 mov	 ecx, 1
  00303	85 c9		 test	 ecx, ecx
  00305	74 0c		 je	 SHORT $LN29@basic_fixe
  00307	c7 85 78 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv226[ebp], 8
  00311	eb 24		 jmp	 SHORT $LN30@basic_fixe
$LN29@basic_fixe:
  00313	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_movement@@YGXPAUENTITY@@@Z@4JA
  00319	83 c2 3a	 add	 edx, 58			; 0000003aH
  0031c	52		 push	 edx
  0031d	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00322	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00327	50		 push	 eax
  00328	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0032d	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv226[ebp], 0
$LN30@basic_fixe:
  00337	6a 08		 push	 8
  00339	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0033c	51		 push	 ecx
  0033d	6b 95 7c ff ff
	ff 60		 imul	 edx, DWORD PTR tv218[ebp], 96
  00344	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv226[ebp]
  0034a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00351	ff d1		 call	 ecx
  00353	89 45 c0	 mov	 DWORD PTR _current_pos$[ebp], eax

; 1599 : 
; 1600 : 	terrain_elevation = get_3d_terrain_point_data_elevation (&raw->ac.terrain_info);

  00356	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00359	05 54 01 00 00	 add	 eax, 340		; 00000154H
  0035e	50		 push	 eax
  0035f	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data_elevation@@YGMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data_elevation
  00364	d9 5d e8	 fstp	 DWORD PTR _terrain_elevation$[ebp]

; 1601 : 
; 1602 : 	//
; 1603 : 	// GET WAYPOINT POSITION
; 1604 : 	//
; 1605 : 
; 1606 : 	fixed_wing_movement_get_waypoint_position (en, &wp_pos);

  00367	8d 45 d0	 lea	 eax, DWORD PTR _wp_pos$[ebp]
  0036a	50		 push	 eax
  0036b	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0036e	51		 push	 ecx
  0036f	e8 00 00 00 00	 call	 ?fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z ; fixed_wing_movement_get_waypoint_position

; 1607 : 
; 1608 : 	//
; 1609 : 	// avoid incoming fire
; 1610 : 	//
; 1611 : 
; 1612 : 	fixed_wing_movement_avoid_enemy_fire (en, &wp_pos);

  00374	8d 45 d0	 lea	 eax, DWORD PTR _wp_pos$[ebp]
  00377	50		 push	 eax
  00378	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0037b	51		 push	 ecx
  0037c	e8 00 00 00 00	 call	 ?fixed_wing_movement_avoid_enemy_fire@@YGXPAUENTITY@@PAUVEC3D@@@Z ; fixed_wing_movement_avoid_enemy_fire

; 1613 : 
; 1614 : 	// taxi or fly depending upon airborne state
; 1615 : 
; 1616 : 	if (!get_local_entity_int_value (en, INT_TYPE_AIRBORNE_AIRCRAFT))

  00381	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00385	74 0d		 je	 SHORT $LN31@basic_fixe
  00387	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0038a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0038c	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv245[ebp], ecx
  00392	eb 20		 jmp	 SHORT $LN32@basic_fixe
$LN31@basic_fixe:
  00394	68 50 06 00 00	 push	 1616			; 00000650H
  00399	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0039e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003a4	52		 push	 edx
  003a5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003aa	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv245[ebp], 0
$LN32@basic_fixe:
  003b4	b8 01 00 00 00	 mov	 eax, 1
  003b9	85 c0		 test	 eax, eax
  003bb	74 0c		 je	 SHORT $LN33@basic_fixe
  003bd	c7 85 78 ff ff
	ff 04 00 00 00	 mov	 DWORD PTR tv252[ebp], 4
  003c7	eb 20		 jmp	 SHORT $LN34@basic_fixe
$LN33@basic_fixe:
  003c9	68 50 06 00 00	 push	 1616			; 00000650H
  003ce	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  003d3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  003d9	51		 push	 ecx
  003da	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003df	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv252[ebp], 0
$LN34@basic_fixe:
  003e9	6a 04		 push	 4
  003eb	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  003ee	52		 push	 edx
  003ef	69 85 7c ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv245[ebp], 1116
  003f9	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv252[ebp]
  003ff	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00406	ff d2		 call	 edx
  00408	85 c0		 test	 eax, eax
  0040a	75 22		 jne	 SHORT $LN5@basic_fixe

; 1617 : 	{
; 1618 : 		fixed_wing_taxi (en, current_pos, &dist, &new_pos, terrain_elevation);

  0040c	51		 push	 ecx
  0040d	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _terrain_elevation$[ebp]
  00412	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00417	8d 45 c4	 lea	 eax, DWORD PTR _new_pos$[ebp]
  0041a	50		 push	 eax
  0041b	8d 4d dc	 lea	 ecx, DWORD PTR _dist$[ebp]
  0041e	51		 push	 ecx
  0041f	8b 55 c0	 mov	 edx, DWORD PTR _current_pos$[ebp]
  00422	52		 push	 edx
  00423	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00426	50		 push	 eax
  00427	e8 00 00 00 00	 call	 ?fixed_wing_taxi@@YGXPAUENTITY@@PAUVEC3D@@11M@Z ; fixed_wing_taxi

; 1619 : 	}
; 1620 : 	else

  0042c	eb 63		 jmp	 SHORT $LN6@basic_fixe
$LN5@basic_fixe:

; 1621 : 	{
; 1622 : 		fixed_wing_flight (en, &new_pos);

  0042e	8d 45 c4	 lea	 eax, DWORD PTR _new_pos$[ebp]
  00431	50		 push	 eax
  00432	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00435	51		 push	 ecx
  00436	e8 00 00 00 00	 call	 ?fixed_wing_flight@@YGXPAUENTITY@@PAUVEC3D@@@Z ; fixed_wing_flight

; 1623 : 
; 1624 : 		//
; 1625 : 		// do motion vector calculation BEFORE bound, otherwise it may be zeroed
; 1626 : 		//
; 1627 : 
; 1628 : 		raw->ac.mob.motion_vector.x = (new_pos.x - current_pos->x) * get_one_over_delta_time ();

  0043b	8b 45 c0	 mov	 eax, DWORD PTR _current_pos$[ebp]
  0043e	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _new_pos$[ebp]
  00443	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00447	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_one_over_delta_time@@3MA
  0044f	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00452	f3 0f 11 41 34	 movss	 DWORD PTR [ecx+52], xmm0

; 1629 : 		raw->ac.mob.motion_vector.y = (new_pos.y - current_pos->y) * get_one_over_delta_time ();

  00457	8b 45 c0	 mov	 eax, DWORD PTR _current_pos$[ebp]
  0045a	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _new_pos$[ebp+4]
  0045f	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  00464	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_one_over_delta_time@@3MA
  0046c	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  0046f	f3 0f 11 41 38	 movss	 DWORD PTR [ecx+56], xmm0

; 1630 : 		raw->ac.mob.motion_vector.z = (new_pos.z - current_pos->z) * get_one_over_delta_time ();

  00474	8b 45 c0	 mov	 eax, DWORD PTR _current_pos$[ebp]
  00477	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _new_pos$[ebp+8]
  0047c	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00481	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_one_over_delta_time@@3MA
  00489	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  0048c	f3 0f 11 41 3c	 movss	 DWORD PTR [ecx+60], xmm0
$LN6@basic_fixe:

; 1631 : 
; 1632 : 		//ASSERT (!check_zero_3d_vector (&raw->ac.mob.motion_vector));
; 1633 : 	}
; 1634 : 
; 1635 : 	bound_position_to_map_volume (&new_pos);

  00491	8d 45 c4	 lea	 eax, DWORD PTR _new_pos$[ebp]
  00494	50		 push	 eax
  00495	e8 00 00 00 00	 call	 ?bound_position_to_map_volume@@YGHPAUVEC3D@@@Z ; bound_position_to_map_volume

; 1636 : 
; 1637 : 	if (raw->ac.operational_state == OPERATIONAL_STATE_NAVIGATING)

  0049a	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  0049d	8b 88 2c 01 00
	00		 mov	 ecx, DWORD PTR [eax+300]
  004a3	c1 e9 05	 shr	 ecx, 5
  004a6	83 e1 1f	 and	 ecx, 31			; 0000001fH
  004a9	83 f9 07	 cmp	 ecx, 7
  004ac	75 30		 jne	 SHORT $LN7@basic_fixe

; 1638 : 	{
; 1639 : 		if (new_pos.y < (terrain_elevation + 100.0))

  004ae	f3 0f 5a 45 c8	 cvtss2sd xmm0, DWORD PTR _new_pos$[ebp+4]
  004b3	f3 0f 5a 4d e8	 cvtss2sd xmm1, DWORD PTR _terrain_elevation$[ebp]
  004b8	f2 0f 58 0d 00
	00 00 00	 addsd	 xmm1, QWORD PTR __real@4059000000000000
  004c0	66 0f 2f c8	 comisd	 xmm1, xmm0
  004c4	76 16		 jbe	 SHORT $LN9@basic_fixe

; 1640 : 		{
; 1641 : 			new_pos.y = terrain_elevation + 100.0;

  004c6	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _terrain_elevation$[ebp]
  004cb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4059000000000000
  004d3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004d7	f3 0f 11 45 c8	 movss	 DWORD PTR _new_pos$[ebp+4], xmm0
$LN9@basic_fixe:

; 1642 : 		}
; 1643 : 	}
; 1644 : 	else

  004dc	eb 15		 jmp	 SHORT $LN10@basic_fixe
$LN7@basic_fixe:

; 1645 : 	{
; 1646 : 		if (new_pos.y < terrain_elevation)

  004de	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _terrain_elevation$[ebp]
  004e3	0f 2f 45 c8	 comiss	 xmm0, DWORD PTR _new_pos$[ebp+4]
  004e7	76 0a		 jbe	 SHORT $LN10@basic_fixe

; 1647 : 		{
; 1648 : 			new_pos.y = terrain_elevation;

  004e9	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _terrain_elevation$[ebp]
  004ee	f3 0f 11 45 c8	 movss	 DWORD PTR _new_pos$[ebp+4], xmm0
$LN10@basic_fixe:

; 1649 : 		}
; 1650 : 	}
; 1651 : 
; 1652 : 	if (raw->ac.mob.tacview_logging)

  004f3	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  004f6	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  004f9	c1 e9 05	 shr	 ecx, 5
  004fc	83 e1 01	 and	 ecx, 1
  004ff	0f 84 fe 01 00
	00		 je	 $LN12@basic_fixe

; 1653 : 	{
; 1654 : 		if (fabs(get_roll_from_attitude_matrix(raw->ac.mob.attitude) - old_roll) > rad(0.001)
; 1655 : 			|| fabs(get_pitch_from_attitude_matrix(raw->ac.mob.attitude) - old_pitch) > rad(0.001)
; 1656 : 			|| fabs(get_heading_from_attitude_matrix(raw->ac.mob.attitude) - old_heading) > rad(0.001))

  00505	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0050a	c1 e0 00	 shl	 eax, 0
  0050d	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00510	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  00514	b8 04 00 00 00	 mov	 eax, 4
  00519	c1 e0 00	 shl	 eax, 0
  0051c	51		 push	 ecx
  0051d	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00522	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00527	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0052c	6b d1 00	 imul	 edx, ecx, 0
  0052f	8b 45 fc	 mov	 eax, DWORD PTR _raw$[ebp]
  00532	8d 4c 10 10	 lea	 ecx, DWORD PTR [eax+edx+16]
  00536	ba 04 00 00 00	 mov	 edx, 4
  0053b	c1 e2 00	 shl	 edx, 0
  0053e	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00543	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0054a	51		 push	 ecx
  0054b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00550	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  00555	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR tv542[ebp]
  0055b	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv542[ebp]
  00563	f3 0f 5c 45 f4	 subss	 xmm0, DWORD PTR _old_roll$[ebp]
  00568	51		 push	 ecx
  00569	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0056e	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00573	dd 9d 74 ff ff
	ff		 fstp	 QWORD PTR tv548[ebp]
  00579	f2 0f 10 85 74
	ff ff ff	 movsd	 xmm0, QWORD PTR tv548[ebp]
  00581	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ef24d151eb851ec
  00589	0f 87 e0 00 00
	00		 ja	 $LN13@basic_fixe
  0058f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00594	d1 e0		 shl	 eax, 1
  00596	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  00599	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  0059d	b8 04 00 00 00	 mov	 eax, 4
  005a2	c1 e0 00	 shl	 eax, 0
  005a5	51		 push	 ecx
  005a6	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  005ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b0	e8 00 00 00 00	 call	 ?asin@@YGMM@Z		; asin
  005b5	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR tv557[ebp]
  005bb	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv557[ebp]
  005c3	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _old_pitch$[ebp]
  005c8	51		 push	 ecx
  005c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ce	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  005d3	dd 9d 74 ff ff
	ff		 fstp	 QWORD PTR tv563[ebp]
  005d9	f2 0f 10 85 74
	ff ff ff	 movsd	 xmm0, QWORD PTR tv563[ebp]
  005e1	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ef24d151eb851ec
  005e9	0f 87 80 00 00
	00		 ja	 $LN13@basic_fixe
  005ef	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005f4	d1 e0		 shl	 eax, 1
  005f6	8b 4d fc	 mov	 ecx, DWORD PTR _raw$[ebp]
  005f9	8d 54 01 10	 lea	 edx, DWORD PTR [ecx+eax+16]
  005fd	b8 04 00 00 00	 mov	 eax, 4
  00602	d1 e0		 shl	 eax, 1
  00604	51		 push	 ecx
  00605	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  0060a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0060f	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00614	d1 e1		 shl	 ecx, 1
  00616	8b 55 fc	 mov	 edx, DWORD PTR _raw$[ebp]
  00619	8d 44 0a 10	 lea	 eax, DWORD PTR [edx+ecx+16]
  0061d	b9 04 00 00 00	 mov	 ecx, 4
  00622	6b d1 00	 imul	 edx, ecx, 0
  00625	51		 push	 ecx
  00626	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  0062b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00630	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  00635	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR tv577[ebp]
  0063b	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR tv577[ebp]
  00643	f3 0f 5c 45 f0	 subss	 xmm0, DWORD PTR _old_heading$[ebp]
  00648	51		 push	 ecx
  00649	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0064e	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00653	dd 9d 74 ff ff
	ff		 fstp	 QWORD PTR tv583[ebp]
  00659	f2 0f 10 85 74
	ff ff ff	 movsd	 xmm0, QWORD PTR tv583[ebp]
  00661	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ef24d151eb851ec
  00669	0f 86 94 00 00
	00		 jbe	 $LN12@basic_fixe
$LN13@basic_fixe:

; 1657 : 		{
; 1658 : 			set_local_entity_int_value(en, INT_TYPE_ROTATED, TRUE);

  0066f	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00673	74 0d		 je	 SHORT $LN35@basic_fixe
  00675	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00678	8b 08		 mov	 ecx, DWORD PTR [eax]
  0067a	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv372[ebp], ecx
  00680	eb 24		 jmp	 SHORT $LN36@basic_fixe
$LN35@basic_fixe:
  00682	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_movement@@YGXPAUENTITY@@@Z@4JA
  00688	83 c2 76	 add	 edx, 118		; 00000076H
  0068b	52		 push	 edx
  0068c	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00691	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00696	50		 push	 eax
  00697	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0069c	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv372[ebp], 0
$LN36@basic_fixe:
  006a6	b9 01 00 00 00	 mov	 ecx, 1
  006ab	85 c9		 test	 ecx, ecx
  006ad	74 0c		 je	 SHORT $LN37@basic_fixe
  006af	c7 85 78 ff ff
	ff b1 00 00 00	 mov	 DWORD PTR tv380[ebp], 177 ; 000000b1H
  006b9	eb 24		 jmp	 SHORT $LN38@basic_fixe
$LN37@basic_fixe:
  006bb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_movement@@YGXPAUENTITY@@@Z@4JA
  006c1	83 c2 76	 add	 edx, 118		; 00000076H
  006c4	52		 push	 edx
  006c5	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  006ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  006cf	50		 push	 eax
  006d0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006d5	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv380[ebp], 0
$LN38@basic_fixe:
  006df	6a 01		 push	 1
  006e1	68 b1 00 00 00	 push	 177			; 000000b1H
  006e6	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  006e9	51		 push	 ecx
  006ea	69 95 7c ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv372[ebp], 1116
  006f4	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv380[ebp]
  006fa	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_local_entity_int_value@@3PAY0BBH@P6GXPAUENTITY@@W4INT_TYPES@@H@ZA[edx+eax*4]
  00701	ff d1		 call	 ecx
$LN12@basic_fixe:

; 1659 : 		}
; 1660 : 	}
; 1661 : 
; 1662 : 	set_local_entity_vec3d (en, VEC3D_TYPE_POSITION, &new_pos);

  00703	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00707	74 0d		 je	 SHORT $LN39@basic_fixe
  00709	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0070c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0070e	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv392[ebp], ecx
  00714	eb 24		 jmp	 SHORT $LN40@basic_fixe
$LN39@basic_fixe:
  00716	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_movement@@YGXPAUENTITY@@@Z@4JA
  0071c	83 c2 7a	 add	 edx, 122		; 0000007aH
  0071f	52		 push	 edx
  00720	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00725	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0072a	50		 push	 eax
  0072b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00730	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv392[ebp], 0
$LN40@basic_fixe:
  0073a	b9 01 00 00 00	 mov	 ecx, 1
  0073f	85 c9		 test	 ecx, ecx
  00741	74 0c		 je	 SHORT $LN41@basic_fixe
  00743	c7 85 78 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv400[ebp], 8
  0074d	eb 24		 jmp	 SHORT $LN42@basic_fixe
$LN41@basic_fixe:
  0074f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??basic_fixed_wing_movement@@YGXPAUENTITY@@@Z@4JA
  00755	83 c2 7a	 add	 edx, 122		; 0000007aH
  00758	52		 push	 edx
  00759	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0075e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00763	50		 push	 eax
  00764	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00769	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv400[ebp], 0
$LN42@basic_fixe:
  00773	8d 4d c4	 lea	 ecx, DWORD PTR _new_pos$[ebp]
  00776	51		 push	 ecx
  00777	6a 08		 push	 8
  00779	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0077c	52		 push	 edx
  0077d	6b 85 7c ff ff
	ff 60		 imul	 eax, DWORD PTR tv392[ebp], 96
  00784	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv400[ebp]
  0078a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_set_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  00791	ff d2		 call	 edx
$LN1@basic_fixe:

; 1663 : }

  00793	5f		 pop	 edi
  00794	5e		 pop	 esi
  00795	5b		 pop	 ebx
  00796	8b e5		 mov	 esp, ebp
  00798	5d		 pop	 ebp
  00799	c2 04 00	 ret	 4
?basic_fixed_wing_movement@@YGXPAUENTITY@@@Z ENDP	; basic_fixed_wing_movement
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\mobile\aircraft\fixwing\fw_move.c
;	COMDAT ?fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z
_TEXT	SEGMENT
tv1479 = -216						; size = 4
tv1462 = -216						; size = 4
tv1191 = -216						; size = 4
tv1290 = -212						; size = 8
tv977 = -212						; size = 4
tv952 = -212						; size = 4
tv929 = -212						; size = 4
tv830 = -212						; size = 4
tv810 = -212						; size = 4
tv780 = -212						; size = 4
tv760 = -212						; size = 4
tv736 = -212						; size = 4
tv711 = -212						; size = 4
tv575 = -212						; size = 4
tv555 = -212						; size = 4
tv531 = -212						; size = 4
tv506 = -212						; size = 4
tv485 = -212						; size = 4
tv462 = -212						; size = 4
tv437 = -212						; size = 4
tv416 = -212						; size = 4
tv396 = -212						; size = 4
tv371 = -212						; size = 4
tv349 = -212						; size = 4
tv329 = -212						; size = 4
tv308 = -212						; size = 4
tv278 = -212						; size = 4
tv257 = -212						; size = 4
tv234 = -212						; size = 4
tv214 = -212						; size = 4
tv193 = -212						; size = 4
tv170 = -212						; size = 4
tv145 = -212						; size = 4
tv88 = -212						; size = 4
tv969 = -208						; size = 4
tv944 = -208						; size = 4
tv921 = -208						; size = 4
tv822 = -208						; size = 4
tv802 = -208						; size = 4
tv772 = -208						; size = 4
tv752 = -208						; size = 4
tv728 = -208						; size = 4
tv703 = -208						; size = 4
tv567 = -208						; size = 4
tv547 = -208						; size = 4
tv523 = -208						; size = 4
tv498 = -208						; size = 4
tv478 = -208						; size = 4
tv454 = -208						; size = 4
tv429 = -208						; size = 4
tv408 = -208						; size = 4
tv388 = -208						; size = 4
tv363 = -208						; size = 4
tv341 = -208						; size = 4
tv321 = -208						; size = 4
tv301 = -208						; size = 4
tv270 = -208						; size = 4
tv250 = -208						; size = 4
tv226 = -208						; size = 4
tv206 = -208						; size = 4
tv186 = -208						; size = 4
tv162 = -208						; size = 4
tv137 = -208						; size = 4
tv80 = -208						; size = 4
$T1 = -204						; size = 4
$T2 = -200						; size = 4
_leader_formation_index$3 = -132			; size = 4
_formation_index$4 = -128				; size = 4
_formation_count$5 = -124				; size = 4
_type$6 = -120						; size = 4
_formation$7 = -116					; size = 4
_leader_pos$8 = -112					; size = 4
_xv$9 = -108						; size = 4
_task_leader$10 = -104					; size = 4
_leader_formation_index$11 = -100			; size = 4
_formation_index$12 = -96				; size = 4
_formation_count$13 = -92				; size = 4
_type$14 = -88						; size = 4
_formation$15 = -84					; size = 4
_group_leader$16 = -80					; size = 4
_xv$17 = -76						; size = 12
_zv$18 = -64						; size = 12
_raw$19 = -52						; size = 4
_sector$20 = -48					; size = 4
_offset$21 = -44					; size = 12
_terrain_follow$ = -32					; size = 4
_pos$ = -28						; size = 4
_terrain_elevation$ = -24				; size = 4
_min_height$ = -20					; size = 4
_distance$ = -16					; size = 4
_guide$ = -12						; size = 4
_group$ = -8						; size = 4
_wp$ = -4						; size = 4
_en$ = 8						; size = 4
_wp_pos$ = 12						; size = 4
?fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z PROC ; fixed_wing_movement_get_waypoint_position, COMDAT

; 1119 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1120 : 	entity
; 1121 : 		*wp,
; 1122 : 		*group,
; 1123 : 		*guide;
; 1124 : 
; 1125 : 	float
; 1126 : 		distance,
; 1127 : 		min_height,
; 1128 : 		terrain_elevation;
; 1129 : 
; 1130 : 	vec3d
; 1131 : 		*pos;
; 1132 : 
; 1133 : 	guide_terrain_follow_modes
; 1134 : 		terrain_follow;
; 1135 : 
; 1136 : /*
; 1137 : 	if (get_external_view_entity () == en)
; 1138 : 	{
; 1139 : 
; 1140 : 		draw_debug_takeoff_landing_routes ();
; 1141 : 	}
; 1142 : 	*/
; 1143 : 
; 1144 : 	ASSERT (en);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@fixed_wing
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00017	83 c0 19	 add	 eax, 25			; 00000019H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@fixed_wing:

; 1145 : 
; 1146 : 	ASSERT (wp_pos);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _wp_pos$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN3@fixed_wing
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00035	83 c0 1b	 add	 eax, 27			; 0000001bH
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_06NGJLJNEL@wp_pos@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@fixed_wing:

; 1147 : 
; 1148 : 	group = get_local_entity_parent (en, LIST_TYPE_MEMBER);

  00048	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0004c	74 0d		 je	 SHORT $LN27@fixed_wing
  0004e	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00051	8b 08		 mov	 ecx, DWORD PTR [eax]
  00053	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv80[ebp], ecx
  00059	eb 24		 jmp	 SHORT $LN28@fixed_wing
$LN27@fixed_wing:
  0005b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00061	83 c2 1d	 add	 edx, 29			; 0000001dH
  00064	52		 push	 edx
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00075	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv80[ebp], 0
$LN28@fixed_wing:
  0007f	b9 01 00 00 00	 mov	 ecx, 1
  00084	85 c9		 test	 ecx, ecx
  00086	74 0c		 je	 SHORT $LN29@fixed_wing
  00088	c7 85 2c ff ff
	ff 19 00 00 00	 mov	 DWORD PTR tv88[ebp], 25	; 00000019H
  00092	eb 24		 jmp	 SHORT $LN30@fixed_wing
$LN29@fixed_wing:
  00094	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  0009a	83 c2 1d	 add	 edx, 29			; 0000001dH
  0009d	52		 push	 edx
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ae	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv88[ebp], 0
$LN30@fixed_wing:
  000b8	6a 19		 push	 25			; 00000019H
  000ba	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  000bd	51		 push	 ecx
  000be	69 95 30 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv80[ebp], 180
  000c8	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv88[ebp]
  000ce	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  000d5	ff d1		 call	 ecx
  000d7	89 45 f8	 mov	 DWORD PTR _group$[ebp], eax

; 1149 : 
; 1150 : 	ASSERT (group);

  000da	83 7d f8 00	 cmp	 DWORD PTR _group$[ebp], 0
  000de	75 18		 jne	 SHORT $LN4@fixed_wing
  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  000e5	83 c0 1f	 add	 eax, 31			; 0000001fH
  000e8	50		 push	 eax
  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_05MGJOOGAJ@group@
  000f3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@fixed_wing:

; 1151 : 
; 1152 : 	guide = get_local_entity_parent (en, LIST_TYPE_FOLLOWER);

  000f8	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  000fc	74 0d		 je	 SHORT $LN31@fixed_wing
  000fe	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00101	8b 08		 mov	 ecx, DWORD PTR [eax]
  00103	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv137[ebp], ecx
  00109	eb 24		 jmp	 SHORT $LN32@fixed_wing
$LN31@fixed_wing:
  0010b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00111	83 c2 21	 add	 edx, 33			; 00000021H
  00114	52		 push	 edx
  00115	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0011a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0011f	50		 push	 eax
  00120	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00125	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv137[ebp], 0
$LN32@fixed_wing:
  0012f	b9 01 00 00 00	 mov	 ecx, 1
  00134	85 c9		 test	 ecx, ecx
  00136	74 0c		 je	 SHORT $LN33@fixed_wing
  00138	c7 85 2c ff ff
	ff 0d 00 00 00	 mov	 DWORD PTR tv145[ebp], 13 ; 0000000dH
  00142	eb 24		 jmp	 SHORT $LN34@fixed_wing
$LN33@fixed_wing:
  00144	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  0014a	83 c2 21	 add	 edx, 33			; 00000021H
  0014d	52		 push	 edx
  0014e	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00153	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00158	50		 push	 eax
  00159	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0015e	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv145[ebp], 0
$LN34@fixed_wing:
  00168	6a 0d		 push	 13			; 0000000dH
  0016a	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0016d	51		 push	 ecx
  0016e	69 95 30 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv137[ebp], 180
  00178	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv145[ebp]
  0017e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00185	ff d1		 call	 ecx
  00187	89 45 f4	 mov	 DWORD PTR _guide$[ebp], eax

; 1153 : 
; 1154 : 	ASSERT (guide);

  0018a	83 7d f4 00	 cmp	 DWORD PTR _guide$[ebp], 0
  0018e	75 18		 jne	 SHORT $LN5@fixed_wing
  00190	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00195	83 c0 23	 add	 eax, 35			; 00000023H
  00198	50		 push	 eax
  00199	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0019e	68 00 00 00 00	 push	 OFFSET ??_C@_05HLIEEKJG@guide@
  001a3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@fixed_wing:

; 1155 : 
; 1156 : 	pos = get_local_entity_vec3d_ptr (en, VEC3D_TYPE_POSITION);

  001a8	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  001ac	74 0d		 je	 SHORT $LN35@fixed_wing
  001ae	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  001b1	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b3	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv162[ebp], ecx
  001b9	eb 24		 jmp	 SHORT $LN36@fixed_wing
$LN35@fixed_wing:
  001bb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  001c1	83 c2 25	 add	 edx, 37			; 00000025H
  001c4	52		 push	 edx
  001c5	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001cf	50		 push	 eax
  001d0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001d5	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv162[ebp], 0
$LN36@fixed_wing:
  001df	b9 01 00 00 00	 mov	 ecx, 1
  001e4	85 c9		 test	 ecx, ecx
  001e6	74 0c		 je	 SHORT $LN37@fixed_wing
  001e8	c7 85 2c ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv170[ebp], 8
  001f2	eb 24		 jmp	 SHORT $LN38@fixed_wing
$LN37@fixed_wing:
  001f4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  001fa	83 c2 25	 add	 edx, 37			; 00000025H
  001fd	52		 push	 edx
  001fe	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00203	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00208	50		 push	 eax
  00209	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0020e	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv170[ebp], 0
$LN38@fixed_wing:
  00218	6a 08		 push	 8
  0021a	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0021d	51		 push	 ecx
  0021e	6b 95 30 ff ff
	ff 60		 imul	 edx, DWORD PTR tv162[ebp], 96
  00225	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv170[ebp]
  0022b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00232	ff d1		 call	 ecx
  00234	89 45 e4	 mov	 DWORD PTR _pos$[ebp], eax

; 1157 : 
; 1158 : 	ASSERT (pos);

  00237	83 7d e4 00	 cmp	 DWORD PTR _pos$[ebp], 0
  0023b	75 18		 jne	 SHORT $LN6@fixed_wing
  0023d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00242	83 c0 27	 add	 eax, 39			; 00000027H
  00245	50		 push	 eax
  00246	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0024b	68 00 00 00 00	 push	 OFFSET ??_C@_03PCBNCGFH@pos@
  00250	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@fixed_wing:

; 1159 : 
; 1160 : 	if (!get_local_entity_int_value (guide, INT_TYPE_FOLLOW_FORMATION))

  00255	83 7d f4 00	 cmp	 DWORD PTR _guide$[ebp], 0
  00259	74 0d		 je	 SHORT $LN39@fixed_wing
  0025b	8b 45 f4	 mov	 eax, DWORD PTR _guide$[ebp]
  0025e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00260	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv186[ebp], ecx
  00266	eb 20		 jmp	 SHORT $LN40@fixed_wing
$LN39@fixed_wing:
  00268	68 88 04 00 00	 push	 1160			; 00000488H
  0026d	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00272	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00278	52		 push	 edx
  00279	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0027e	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv186[ebp], 0
$LN40@fixed_wing:
  00288	b8 01 00 00 00	 mov	 eax, 1
  0028d	85 c0		 test	 eax, eax
  0028f	74 0c		 je	 SHORT $LN41@fixed_wing
  00291	c7 85 2c ff ff
	ff 39 00 00 00	 mov	 DWORD PTR tv193[ebp], 57 ; 00000039H
  0029b	eb 20		 jmp	 SHORT $LN42@fixed_wing
$LN41@fixed_wing:
  0029d	68 88 04 00 00	 push	 1160			; 00000488H
  002a2	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  002a7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  002ad	51		 push	 ecx
  002ae	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002b3	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv193[ebp], 0
$LN42@fixed_wing:
  002bd	6a 39		 push	 57			; 00000039H
  002bf	8b 55 f4	 mov	 edx, DWORD PTR _guide$[ebp]
  002c2	52		 push	 edx
  002c3	69 85 30 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv186[ebp], 1116
  002cd	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv193[ebp]
  002d3	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  002da	ff d2		 call	 edx
  002dc	85 c0		 test	 eax, eax
  002de	0f 85 95 00 00
	00		 jne	 $LN7@fixed_wing

; 1161 : 	{
; 1162 : 		//
; 1163 : 		// Head directly for the guide position
; 1164 : 		//
; 1165 : 
; 1166 : 		get_local_entity_vec3d (guide, VEC3D_TYPE_GUIDE_POSITION, wp_pos);

  002e4	83 7d f4 00	 cmp	 DWORD PTR _guide$[ebp], 0
  002e8	74 0d		 je	 SHORT $LN43@fixed_wing
  002ea	8b 45 f4	 mov	 eax, DWORD PTR _guide$[ebp]
  002ed	8b 08		 mov	 ecx, DWORD PTR [eax]
  002ef	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv206[ebp], ecx
  002f5	eb 24		 jmp	 SHORT $LN44@fixed_wing
$LN43@fixed_wing:
  002f7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  002fd	83 c2 2f	 add	 edx, 47			; 0000002fH
  00300	52		 push	 edx
  00301	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00306	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0030b	50		 push	 eax
  0030c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00311	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv206[ebp], 0
$LN44@fixed_wing:
  0031b	b9 01 00 00 00	 mov	 ecx, 1
  00320	85 c9		 test	 ecx, ecx
  00322	74 0c		 je	 SHORT $LN45@fixed_wing
  00324	c7 85 2c ff ff
	ff 04 00 00 00	 mov	 DWORD PTR tv214[ebp], 4
  0032e	eb 24		 jmp	 SHORT $LN46@fixed_wing
$LN45@fixed_wing:
  00330	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00336	83 c2 2f	 add	 edx, 47			; 0000002fH
  00339	52		 push	 edx
  0033a	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0033f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00344	50		 push	 eax
  00345	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0034a	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv214[ebp], 0
$LN46@fixed_wing:
  00354	8b 4d 0c	 mov	 ecx, DWORD PTR _wp_pos$[ebp]
  00357	51		 push	 ecx
  00358	6a 04		 push	 4
  0035a	8b 55 f4	 mov	 edx, DWORD PTR _guide$[ebp]
  0035d	52		 push	 edx
  0035e	6b 85 30 ff ff
	ff 60		 imul	 eax, DWORD PTR tv206[ebp], 96
  00365	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv214[ebp]
  0036b	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  00372	ff d2		 call	 edx

; 1167 : 	}
; 1168 : 	else

  00374	e9 35 13 00 00	 jmp	 $LN8@fixed_wing
$LN7@fixed_wing:

; 1169 : 	{
; 1170 : 		//
; 1171 : 		// Fly in formation
; 1172 : 		//
; 1173 : 
; 1174 : 		wp = get_local_entity_parent (guide, LIST_TYPE_CURRENT_WAYPOINT);

  00379	83 7d f4 00	 cmp	 DWORD PTR _guide$[ebp], 0
  0037d	74 0d		 je	 SHORT $LN47@fixed_wing
  0037f	8b 45 f4	 mov	 eax, DWORD PTR _guide$[ebp]
  00382	8b 08		 mov	 ecx, DWORD PTR [eax]
  00384	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv226[ebp], ecx
  0038a	eb 24		 jmp	 SHORT $LN48@fixed_wing
$LN47@fixed_wing:
  0038c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00392	83 c2 37	 add	 edx, 55			; 00000037H
  00395	52		 push	 edx
  00396	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0039b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003a0	50		 push	 eax
  003a1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003a6	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv226[ebp], 0
$LN48@fixed_wing:
  003b0	b9 01 00 00 00	 mov	 ecx, 1
  003b5	85 c9		 test	 ecx, ecx
  003b7	74 0c		 je	 SHORT $LN49@fixed_wing
  003b9	c7 85 2c ff ff
	ff 09 00 00 00	 mov	 DWORD PTR tv234[ebp], 9
  003c3	eb 24		 jmp	 SHORT $LN50@fixed_wing
$LN49@fixed_wing:
  003c5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  003cb	83 c2 37	 add	 edx, 55			; 00000037H
  003ce	52		 push	 edx
  003cf	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  003d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  003d9	50		 push	 eax
  003da	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003df	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv234[ebp], 0
$LN50@fixed_wing:
  003e9	6a 09		 push	 9
  003eb	8b 4d f4	 mov	 ecx, DWORD PTR _guide$[ebp]
  003ee	51		 push	 ecx
  003ef	69 95 30 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv226[ebp], 180
  003f9	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv234[ebp]
  003ff	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00406	ff d1		 call	 ecx
  00408	89 45 fc	 mov	 DWORD PTR _wp$[ebp], eax

; 1175 : 
; 1176 : 		ASSERT (wp);

  0040b	83 7d fc 00	 cmp	 DWORD PTR _wp$[ebp], 0
  0040f	75 18		 jne	 SHORT $LN9@fixed_wing
  00411	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00416	83 c0 39	 add	 eax, 57			; 00000039H
  00419	50		 push	 eax
  0041a	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0041f	68 00 00 00 00	 push	 OFFSET ??_C@_02HODPCBMO@wp@
  00424	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@fixed_wing:

; 1177 : 
; 1178 : 		//
; 1179 : 		// Should aircraft follow leader, or follow guide in set waypoint formation?
; 1180 : 		//
; 1181 : 
; 1182 : 		if (get_local_entity_int_value (wp, INT_TYPE_MOBILE_FOLLOW_WAYPOINT_OFFSET))

  00429	83 7d fc 00	 cmp	 DWORD PTR _wp$[ebp], 0
  0042d	74 0d		 je	 SHORT $LN51@fixed_wing
  0042f	8b 45 fc	 mov	 eax, DWORD PTR _wp$[ebp]
  00432	8b 08		 mov	 ecx, DWORD PTR [eax]
  00434	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv250[ebp], ecx
  0043a	eb 20		 jmp	 SHORT $LN52@fixed_wing
$LN51@fixed_wing:
  0043c	68 9e 04 00 00	 push	 1182			; 0000049eH
  00441	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00446	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0044c	52		 push	 edx
  0044d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00452	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv250[ebp], 0
$LN52@fixed_wing:
  0045c	b8 01 00 00 00	 mov	 eax, 1
  00461	85 c0		 test	 eax, eax
  00463	74 0c		 je	 SHORT $LN53@fixed_wing
  00465	c7 85 2c ff ff
	ff 8d 00 00 00	 mov	 DWORD PTR tv257[ebp], 141 ; 0000008dH
  0046f	eb 20		 jmp	 SHORT $LN54@fixed_wing
$LN53@fixed_wing:
  00471	68 9e 04 00 00	 push	 1182			; 0000049eH
  00476	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0047b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00481	51		 push	 ecx
  00482	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00487	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv257[ebp], 0
$LN54@fixed_wing:
  00491	68 8d 00 00 00	 push	 141			; 0000008dH
  00496	8b 55 fc	 mov	 edx, DWORD PTR _wp$[ebp]
  00499	52		 push	 edx
  0049a	69 85 30 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv250[ebp], 1116
  004a4	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv257[ebp]
  004aa	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  004b1	ff d2		 call	 edx
  004b3	85 c0		 test	 eax, eax
  004b5	0f 84 e3 00 00
	00		 je	 $LN10@fixed_wing

; 1183 : 		{
; 1184 : 			vec3d
; 1185 : 				offset;
; 1186 : 
; 1187 : 			get_local_entity_vec3d (guide, VEC3D_TYPE_GUIDE_POSITION, wp_pos);

  004bb	83 7d f4 00	 cmp	 DWORD PTR _guide$[ebp], 0
  004bf	74 0d		 je	 SHORT $LN55@fixed_wing
  004c1	8b 45 f4	 mov	 eax, DWORD PTR _guide$[ebp]
  004c4	8b 08		 mov	 ecx, DWORD PTR [eax]
  004c6	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv270[ebp], ecx
  004cc	eb 24		 jmp	 SHORT $LN56@fixed_wing
$LN55@fixed_wing:
  004ce	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  004d4	83 c2 44	 add	 edx, 68			; 00000044H
  004d7	52		 push	 edx
  004d8	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  004dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  004e2	50		 push	 eax
  004e3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004e8	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv270[ebp], 0
$LN56@fixed_wing:
  004f2	b9 01 00 00 00	 mov	 ecx, 1
  004f7	85 c9		 test	 ecx, ecx
  004f9	74 0c		 je	 SHORT $LN57@fixed_wing
  004fb	c7 85 2c ff ff
	ff 04 00 00 00	 mov	 DWORD PTR tv278[ebp], 4
  00505	eb 24		 jmp	 SHORT $LN58@fixed_wing
$LN57@fixed_wing:
  00507	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  0050d	83 c2 44	 add	 edx, 68			; 00000044H
  00510	52		 push	 edx
  00511	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00516	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0051b	50		 push	 eax
  0051c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00521	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv278[ebp], 0
$LN58@fixed_wing:
  0052b	8b 4d 0c	 mov	 ecx, DWORD PTR _wp_pos$[ebp]
  0052e	51		 push	 ecx
  0052f	6a 04		 push	 4
  00531	8b 55 f4	 mov	 edx, DWORD PTR _guide$[ebp]
  00534	52		 push	 edx
  00535	6b 85 30 ff ff
	ff 60		 imul	 eax, DWORD PTR tv270[ebp], 96
  0053c	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv278[ebp]
  00542	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  00549	ff d2		 call	 edx

; 1188 : 
; 1189 : 			get_local_entity_formation_position_offset (en, wp, &offset);

  0054b	8d 45 d4	 lea	 eax, DWORD PTR _offset$21[ebp]
  0054e	50		 push	 eax
  0054f	8b 4d fc	 mov	 ecx, DWORD PTR _wp$[ebp]
  00552	51		 push	 ecx
  00553	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00556	52		 push	 edx
  00557	e8 00 00 00 00	 call	 ?get_local_entity_formation_position_offset@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_local_entity_formation_position_offset

; 1190 : 
; 1191 : 			wp_pos->x += offset.x;

  0055c	8b 45 0c	 mov	 eax, DWORD PTR _wp_pos$[ebp]
  0055f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00563	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _offset$21[ebp]
  00568	8b 4d 0c	 mov	 ecx, DWORD PTR _wp_pos$[ebp]
  0056b	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 1192 : 			wp_pos->y += offset.y;

  0056f	8b 45 0c	 mov	 eax, DWORD PTR _wp_pos$[ebp]
  00572	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00577	f3 0f 58 45 d8	 addss	 xmm0, DWORD PTR _offset$21[ebp+4]
  0057c	8b 4d 0c	 mov	 ecx, DWORD PTR _wp_pos$[ebp]
  0057f	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 1193 : 			wp_pos->z += offset.z;

  00584	8b 45 0c	 mov	 eax, DWORD PTR _wp_pos$[ebp]
  00587	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0058c	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _offset$21[ebp+8]
  00591	8b 4d 0c	 mov	 ecx, DWORD PTR _wp_pos$[ebp]
  00594	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 1194 : 		}
; 1195 : 		else

  00599	e9 5d 10 00 00	 jmp	 $LN13@fixed_wing
$LN10@fixed_wing:

; 1196 : 		{
; 1197 : 			//
; 1198 : 			// Task leader follows guide,.... other members follow task leader
; 1199 : 			//
; 1200 : 
; 1201 : 			if (get_local_entity_int_value (en, INT_TYPE_TASK_LEADER))

  0059e	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  005a2	74 0d		 je	 SHORT $LN59@fixed_wing
  005a4	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  005a7	8b 08		 mov	 ecx, DWORD PTR [eax]
  005a9	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv301[ebp], ecx
  005af	eb 20		 jmp	 SHORT $LN60@fixed_wing
$LN59@fixed_wing:
  005b1	68 b1 04 00 00	 push	 1201			; 000004b1H
  005b6	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  005bb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  005c1	52		 push	 edx
  005c2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005c7	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv301[ebp], 0
$LN60@fixed_wing:
  005d1	b8 01 00 00 00	 mov	 eax, 1
  005d6	85 c0		 test	 eax, eax
  005d8	74 0c		 je	 SHORT $LN61@fixed_wing
  005da	c7 85 2c ff ff
	ff dd 00 00 00	 mov	 DWORD PTR tv308[ebp], 221 ; 000000ddH
  005e4	eb 20		 jmp	 SHORT $LN62@fixed_wing
$LN61@fixed_wing:
  005e6	68 b1 04 00 00	 push	 1201			; 000004b1H
  005eb	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  005f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  005f6	51		 push	 ecx
  005f7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005fc	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv308[ebp], 0
$LN62@fixed_wing:
  00606	68 dd 00 00 00	 push	 221			; 000000ddH
  0060b	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0060e	52		 push	 edx
  0060f	69 85 30 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv301[ebp], 1116
  00619	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv308[ebp]
  0061f	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00626	ff d2		 call	 edx
  00628	85 c0		 test	 eax, eax
  0062a	0f 84 b6 09 00
	00		 je	 $LN12@fixed_wing

; 1202 : 			{
; 1203 : 				get_local_entity_vec3d (guide, VEC3D_TYPE_GUIDE_POSITION, wp_pos);

  00630	83 7d f4 00	 cmp	 DWORD PTR _guide$[ebp], 0
  00634	74 0d		 je	 SHORT $LN63@fixed_wing
  00636	8b 45 f4	 mov	 eax, DWORD PTR _guide$[ebp]
  00639	8b 08		 mov	 ecx, DWORD PTR [eax]
  0063b	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv321[ebp], ecx
  00641	eb 24		 jmp	 SHORT $LN64@fixed_wing
$LN63@fixed_wing:
  00643	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00649	83 c2 54	 add	 edx, 84			; 00000054H
  0064c	52		 push	 edx
  0064d	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00652	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00657	50		 push	 eax
  00658	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0065d	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv321[ebp], 0
$LN64@fixed_wing:
  00667	b9 01 00 00 00	 mov	 ecx, 1
  0066c	85 c9		 test	 ecx, ecx
  0066e	74 0c		 je	 SHORT $LN65@fixed_wing
  00670	c7 85 2c ff ff
	ff 04 00 00 00	 mov	 DWORD PTR tv329[ebp], 4
  0067a	eb 24		 jmp	 SHORT $LN66@fixed_wing
$LN65@fixed_wing:
  0067c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00682	83 c2 54	 add	 edx, 84			; 00000054H
  00685	52		 push	 edx
  00686	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0068b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00690	50		 push	 eax
  00691	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00696	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv329[ebp], 0
$LN66@fixed_wing:
  006a0	8b 4d 0c	 mov	 ecx, DWORD PTR _wp_pos$[ebp]
  006a3	51		 push	 ecx
  006a4	6a 04		 push	 4
  006a6	8b 55 f4	 mov	 edx, DWORD PTR _guide$[ebp]
  006a9	52		 push	 edx
  006aa	6b 85 30 ff ff
	ff 60		 imul	 eax, DWORD PTR tv321[ebp], 96
  006b1	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv329[ebp]
  006b7	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  006be	ff d2		 call	 edx

; 1204 : 
; 1205 : 				//
; 1206 : 				// terrain check
; 1207 : 				//
; 1208 : 
; 1209 : 				terrain_follow = (guide_terrain_follow_modes) get_local_entity_int_value (guide, INT_TYPE_TERRAIN_FOLLOW_MODE);

  006c0	83 7d f4 00	 cmp	 DWORD PTR _guide$[ebp], 0
  006c4	74 0d		 je	 SHORT $LN67@fixed_wing
  006c6	8b 45 f4	 mov	 eax, DWORD PTR _guide$[ebp]
  006c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  006cb	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv341[ebp], ecx
  006d1	eb 24		 jmp	 SHORT $LN68@fixed_wing
$LN67@fixed_wing:
  006d3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  006d9	83 c2 5a	 add	 edx, 90			; 0000005aH
  006dc	52		 push	 edx
  006dd	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  006e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  006e7	50		 push	 eax
  006e8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006ed	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv341[ebp], 0
$LN68@fixed_wing:
  006f7	b9 01 00 00 00	 mov	 ecx, 1
  006fc	85 c9		 test	 ecx, ecx
  006fe	74 0c		 je	 SHORT $LN69@fixed_wing
  00700	c7 85 2c ff ff
	ff e8 00 00 00	 mov	 DWORD PTR tv349[ebp], 232 ; 000000e8H
  0070a	eb 24		 jmp	 SHORT $LN70@fixed_wing
$LN69@fixed_wing:
  0070c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00712	83 c2 5a	 add	 edx, 90			; 0000005aH
  00715	52		 push	 edx
  00716	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0071b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00720	50		 push	 eax
  00721	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00726	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv349[ebp], 0
$LN70@fixed_wing:
  00730	68 e8 00 00 00	 push	 232			; 000000e8H
  00735	8b 4d f4	 mov	 ecx, DWORD PTR _guide$[ebp]
  00738	51		 push	 ecx
  00739	69 95 30 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv341[ebp], 1116
  00743	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv349[ebp]
  00749	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00750	ff d1		 call	 ecx
  00752	89 45 e0	 mov	 DWORD PTR _terrain_follow$[ebp], eax

; 1210 : 
; 1211 : 				if (terrain_follow != GUIDE_TERRAIN_FOLLOW_NONE)

  00755	83 7d e0 00	 cmp	 DWORD PTR _terrain_follow$[ebp], 0
  00759	0f 84 6d 03 00
	00		 je	 $LN14@fixed_wing

; 1212 : 				{
; 1213 : 					entity
; 1214 : 						*sector;
; 1215 : 
; 1216 : 					fixed_wing
; 1217 : 						*raw;
; 1218 : 
; 1219 : 					raw = (fixed_wing *) get_local_entity_data (en);

  0075f	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00762	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00765	89 4d cc	 mov	 DWORD PTR _raw$19[ebp], ecx

; 1220 : 
; 1221 : 					sector = get_local_entity_parent (en, LIST_TYPE_SECTOR);

  00768	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0076c	74 0d		 je	 SHORT $LN71@fixed_wing
  0076e	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00771	8b 08		 mov	 ecx, DWORD PTR [eax]
  00773	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv363[ebp], ecx
  00779	eb 24		 jmp	 SHORT $LN72@fixed_wing
$LN71@fixed_wing:
  0077b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00781	83 c2 66	 add	 edx, 102		; 00000066H
  00784	52		 push	 edx
  00785	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0078a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0078f	50		 push	 eax
  00790	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00795	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv363[ebp], 0
$LN72@fixed_wing:
  0079f	b9 01 00 00 00	 mov	 ecx, 1
  007a4	85 c9		 test	 ecx, ecx
  007a6	74 0c		 je	 SHORT $LN73@fixed_wing
  007a8	c7 85 2c ff ff
	ff 21 00 00 00	 mov	 DWORD PTR tv371[ebp], 33 ; 00000021H
  007b2	eb 24		 jmp	 SHORT $LN74@fixed_wing
$LN73@fixed_wing:
  007b4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  007ba	83 c2 66	 add	 edx, 102		; 00000066H
  007bd	52		 push	 edx
  007be	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  007c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  007c8	50		 push	 eax
  007c9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  007ce	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv371[ebp], 0
$LN74@fixed_wing:
  007d8	6a 21		 push	 33			; 00000021H
  007da	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  007dd	51		 push	 ecx
  007de	69 95 30 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv363[ebp], 180
  007e8	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv371[ebp]
  007ee	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  007f5	ff d1		 call	 ecx
  007f7	89 45 d0	 mov	 DWORD PTR _sector$20[ebp], eax

; 1222 : 
; 1223 : 					terrain_elevation = get_3d_terrain_point_data_elevation (&raw->ac.terrain_info);

  007fa	8b 45 cc	 mov	 eax, DWORD PTR _raw$19[ebp]
  007fd	05 54 01 00 00	 add	 eax, 340		; 00000154H
  00802	50		 push	 eax
  00803	e8 00 00 00 00	 call	 ?get_3d_terrain_point_data_elevation@@YGMPAUTERRAIN_3D_POINT_DATA@@@Z ; get_3d_terrain_point_data_elevation
  00808	d9 5d e8	 fstp	 DWORD PTR _terrain_elevation$[ebp]

; 1224 : 
; 1225 : 					if (terrain_follow == GUIDE_TERRAIN_FOLLOW_ATTACK_ALTITUDE)

  0080b	83 7d e0 02	 cmp	 DWORD PTR _terrain_follow$[ebp], 2
  0080f	0f 85 97 00 00
	00		 jne	 $LN15@fixed_wing

; 1226 : 					{
; 1227 : 						min_height = get_local_entity_float_value (en, FLOAT_TYPE_ATTACK_ALTITUDE);

  00815	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00819	74 0d		 je	 SHORT $LN75@fixed_wing
  0081b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0081e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00820	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv388[ebp], ecx
  00826	eb 24		 jmp	 SHORT $LN76@fixed_wing
$LN75@fixed_wing:
  00828	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  0082e	83 c2 6c	 add	 edx, 108		; 0000006cH
  00831	52		 push	 edx
  00832	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00837	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0083c	50		 push	 eax
  0083d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00842	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv388[ebp], 0
$LN76@fixed_wing:
  0084c	b9 01 00 00 00	 mov	 ecx, 1
  00851	85 c9		 test	 ecx, ecx
  00853	74 0c		 je	 SHORT $LN77@fixed_wing
  00855	c7 85 2c ff ff
	ff 0e 00 00 00	 mov	 DWORD PTR tv396[ebp], 14 ; 0000000eH
  0085f	eb 24		 jmp	 SHORT $LN78@fixed_wing
$LN77@fixed_wing:
  00861	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00867	83 c2 6c	 add	 edx, 108		; 0000006cH
  0086a	52		 push	 edx
  0086b	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00870	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00875	50		 push	 eax
  00876	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0087b	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv396[ebp], 0
$LN78@fixed_wing:
  00885	6a 0e		 push	 14			; 0000000eH
  00887	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0088a	51		 push	 ecx
  0088b	69 95 30 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv388[ebp], 700
  00895	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv396[ebp]
  0089b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  008a2	ff d1		 call	 ecx
  008a4	d9 5d ec	 fstp	 DWORD PTR _min_height$[ebp]

; 1228 : 					}
; 1229 : 					else

  008a7	e9 92 00 00 00	 jmp	 $LN16@fixed_wing
$LN15@fixed_wing:

; 1230 : 					{
; 1231 : 						min_height = get_local_entity_float_value (en, FLOAT_TYPE_CRUISE_ALTITUDE);

  008ac	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  008b0	74 0d		 je	 SHORT $LN79@fixed_wing
  008b2	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  008b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  008b7	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv408[ebp], ecx
  008bd	eb 24		 jmp	 SHORT $LN80@fixed_wing
$LN79@fixed_wing:
  008bf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  008c5	83 c2 70	 add	 edx, 112		; 00000070H
  008c8	52		 push	 edx
  008c9	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  008ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  008d3	50		 push	 eax
  008d4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008d9	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv408[ebp], 0
$LN80@fixed_wing:
  008e3	b9 01 00 00 00	 mov	 ecx, 1
  008e8	85 c9		 test	 ecx, ecx
  008ea	74 0c		 je	 SHORT $LN81@fixed_wing
  008ec	c7 85 2c ff ff
	ff 18 00 00 00	 mov	 DWORD PTR tv416[ebp], 24 ; 00000018H
  008f6	eb 24		 jmp	 SHORT $LN82@fixed_wing
$LN81@fixed_wing:
  008f8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  008fe	83 c2 70	 add	 edx, 112		; 00000070H
  00901	52		 push	 edx
  00902	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00907	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0090c	50		 push	 eax
  0090d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00912	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv416[ebp], 0
$LN82@fixed_wing:
  0091c	6a 18		 push	 24			; 00000018H
  0091e	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00921	51		 push	 ecx
  00922	69 95 30 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv408[ebp], 700
  0092c	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv416[ebp]
  00932	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00939	ff d1		 call	 ecx
  0093b	d9 5d ec	 fstp	 DWORD PTR _min_height$[ebp]
$LN16@fixed_wing:

; 1232 : 					}
; 1233 : 
; 1234 : 					min_height = max (min_height, get_local_entity_float_value (sector, FLOAT_TYPE_TALLEST_STRUCTURE_HEIGHT) - terrain_elevation);

  0093e	83 7d d0 00	 cmp	 DWORD PTR _sector$20[ebp], 0
  00942	74 0d		 je	 SHORT $LN83@fixed_wing
  00944	8b 45 d0	 mov	 eax, DWORD PTR _sector$20[ebp]
  00947	8b 08		 mov	 ecx, DWORD PTR [eax]
  00949	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv429[ebp], ecx
  0094f	eb 24		 jmp	 SHORT $LN84@fixed_wing
$LN83@fixed_wing:
  00951	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00957	83 c2 73	 add	 edx, 115		; 00000073H
  0095a	52		 push	 edx
  0095b	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00960	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00965	50		 push	 eax
  00966	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0096b	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv429[ebp], 0
$LN84@fixed_wing:
  00975	b9 01 00 00 00	 mov	 ecx, 1
  0097a	85 c9		 test	 ecx, ecx
  0097c	74 0c		 je	 SHORT $LN85@fixed_wing
  0097e	c7 85 2c ff ff
	ff 82 00 00 00	 mov	 DWORD PTR tv437[ebp], 130 ; 00000082H
  00988	eb 24		 jmp	 SHORT $LN86@fixed_wing
$LN85@fixed_wing:
  0098a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00990	83 c2 73	 add	 edx, 115		; 00000073H
  00993	52		 push	 edx
  00994	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00999	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0099e	50		 push	 eax
  0099f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009a4	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv437[ebp], 0
$LN86@fixed_wing:
  009ae	68 82 00 00 00	 push	 130			; 00000082H
  009b3	8b 4d d0	 mov	 ecx, DWORD PTR _sector$20[ebp]
  009b6	51		 push	 ecx
  009b7	69 95 30 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv429[ebp], 700
  009c1	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv437[ebp]
  009c7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  009ce	ff d1		 call	 ecx
  009d0	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR tv1191[ebp]
  009d6	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR tv1191[ebp]
  009de	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _terrain_elevation$[ebp]
  009e3	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR $T2[ebp], xmm0
  009eb	8d 95 38 ff ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  009f1	52		 push	 edx
  009f2	8d 45 ec	 lea	 eax, DWORD PTR _min_height$[ebp]
  009f5	50		 push	 eax
  009f6	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  009fb	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  009ff	f3 0f 11 45 ec	 movss	 DWORD PTR _min_height$[ebp], xmm0

; 1235 : 
; 1236 : 					min_height = max (get_local_entity_float_value (wp, FLOAT_TYPE_ALTITUDE), min_height);

  00a04	83 7d fc 00	 cmp	 DWORD PTR _wp$[ebp], 0
  00a08	74 0d		 je	 SHORT $LN87@fixed_wing
  00a0a	8b 45 fc	 mov	 eax, DWORD PTR _wp$[ebp]
  00a0d	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a0f	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv454[ebp], ecx
  00a15	eb 24		 jmp	 SHORT $LN88@fixed_wing
$LN87@fixed_wing:
  00a17	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00a1d	83 c2 75	 add	 edx, 117		; 00000075H
  00a20	52		 push	 edx
  00a21	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a26	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00a2b	50		 push	 eax
  00a2c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a31	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv454[ebp], 0
$LN88@fixed_wing:
  00a3b	b9 01 00 00 00	 mov	 ecx, 1
  00a40	85 c9		 test	 ecx, ecx
  00a42	74 0c		 je	 SHORT $LN89@fixed_wing
  00a44	c7 85 2c ff ff
	ff 06 00 00 00	 mov	 DWORD PTR tv462[ebp], 6
  00a4e	eb 24		 jmp	 SHORT $LN90@fixed_wing
$LN89@fixed_wing:
  00a50	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00a56	83 c2 75	 add	 edx, 117		; 00000075H
  00a59	52		 push	 edx
  00a5a	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a5f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00a64	50		 push	 eax
  00a65	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a6a	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv462[ebp], 0
$LN90@fixed_wing:
  00a74	6a 06		 push	 6
  00a76	8b 4d fc	 mov	 ecx, DWORD PTR _wp$[ebp]
  00a79	51		 push	 ecx
  00a7a	69 95 30 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv454[ebp], 700
  00a84	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv462[ebp]
  00a8a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00a91	ff d1		 call	 ecx
  00a93	d9 9d 34 ff ff
	ff		 fstp	 DWORD PTR $T1[ebp]
  00a99	8d 55 ec	 lea	 edx, DWORD PTR _min_height$[ebp]
  00a9c	52		 push	 edx
  00a9d	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00aa3	50		 push	 eax
  00aa4	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00aa9	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00aad	f3 0f 11 45 ec	 movss	 DWORD PTR _min_height$[ebp], xmm0

; 1237 : 
; 1238 : 					mobile_terrain_adjust_waypoint_height (en, wp_pos, min_height);

  00ab2	51		 push	 ecx
  00ab3	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _min_height$[ebp]
  00ab8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00abd	8b 45 0c	 mov	 eax, DWORD PTR _wp_pos$[ebp]
  00ac0	50		 push	 eax
  00ac1	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00ac4	51		 push	 ecx
  00ac5	e8 00 00 00 00	 call	 ?mobile_terrain_adjust_waypoint_height@@YGMPAUENTITY@@PAUVEC3D@@M@Z ; mobile_terrain_adjust_waypoint_height
  00aca	dd d8		 fstp	 ST(0)
$LN14@fixed_wing:

; 1239 : 				}
; 1240 : 
; 1241 : 				if (!get_local_entity_int_value (en, INT_TYPE_GROUP_LEADER))

  00acc	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00ad0	74 0d		 je	 SHORT $LN91@fixed_wing
  00ad2	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00ad5	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ad7	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv478[ebp], ecx
  00add	eb 20		 jmp	 SHORT $LN92@fixed_wing
$LN91@fixed_wing:
  00adf	68 d9 04 00 00	 push	 1241			; 000004d9H
  00ae4	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ae9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00aef	52		 push	 edx
  00af0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00af5	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv478[ebp], 0
$LN92@fixed_wing:
  00aff	b8 01 00 00 00	 mov	 eax, 1
  00b04	85 c0		 test	 eax, eax
  00b06	74 0c		 je	 SHORT $LN93@fixed_wing
  00b08	c7 85 2c ff ff
	ff 48 00 00 00	 mov	 DWORD PTR tv485[ebp], 72 ; 00000048H
  00b12	eb 20		 jmp	 SHORT $LN94@fixed_wing
$LN93@fixed_wing:
  00b14	68 d9 04 00 00	 push	 1241			; 000004d9H
  00b19	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b1e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00b24	51		 push	 ecx
  00b25	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b2a	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv485[ebp], 0
$LN94@fixed_wing:
  00b34	6a 48		 push	 72			; 00000048H
  00b36	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00b39	52		 push	 edx
  00b3a	69 85 30 ff ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv478[ebp], 1116
  00b44	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv485[ebp]
  00b4a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00b51	ff d2		 call	 edx
  00b53	85 c0		 test	 eax, eax
  00b55	0f 85 86 04 00
	00		 jne	 $LN17@fixed_wing

; 1242 : 				{
; 1243 : 					//
; 1244 : 					// Need to offset Task leader, so that it doesn't overlap with any other task leaders in the group
; 1245 : 					//
; 1246 : 
; 1247 : 					vec3d
; 1248 : 						zv,
; 1249 : 						xv;
; 1250 : 
; 1251 : 					entity
; 1252 : 						*group_leader;
; 1253 : 
; 1254 : 					formation_type
; 1255 : 						*formation;
; 1256 : 
; 1257 : 					int
; 1258 : 						type,
; 1259 : 						formation_count,
; 1260 : 						formation_index,
; 1261 : 						leader_formation_index;
; 1262 : 
; 1263 : 					//
; 1264 : 					// find flight leader
; 1265 : 					//
; 1266 : 
; 1267 : 					group_leader = (entity *) get_local_entity_ptr_value (group, PTR_TYPE_GROUP_LEADER);

  00b5b	83 7d f8 00	 cmp	 DWORD PTR _group$[ebp], 0
  00b5f	74 0d		 je	 SHORT $LN95@fixed_wing
  00b61	8b 45 f8	 mov	 eax, DWORD PTR _group$[ebp]
  00b64	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b66	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv498[ebp], ecx
  00b6c	eb 27		 jmp	 SHORT $LN96@fixed_wing
$LN95@fixed_wing:
  00b6e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00b74	81 c2 94 00 00
	00		 add	 edx, 148		; 00000094H
  00b7a	52		 push	 edx
  00b7b	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b80	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00b85	50		 push	 eax
  00b86	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b8b	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv498[ebp], 0
$LN96@fixed_wing:
  00b95	b9 01 00 00 00	 mov	 ecx, 1
  00b9a	85 c9		 test	 ecx, ecx
  00b9c	74 0c		 je	 SHORT $LN97@fixed_wing
  00b9e	c7 85 2c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv506[ebp], 1
  00ba8	eb 27		 jmp	 SHORT $LN98@fixed_wing
$LN97@fixed_wing:
  00baa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00bb0	81 c2 94 00 00
	00		 add	 edx, 148		; 00000094H
  00bb6	52		 push	 edx
  00bb7	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00bbc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_ptr_type_message@@3PBDB ; overload_invalid_ptr_type_message
  00bc1	50		 push	 eax
  00bc2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00bc7	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv506[ebp], 0
$LN98@fixed_wing:
  00bd1	6a 01		 push	 1
  00bd3	8b 4d f8	 mov	 ecx, DWORD PTR _group$[ebp]
  00bd6	51		 push	 ecx
  00bd7	6b 95 30 ff ff
	ff 50		 imul	 edx, DWORD PTR tv498[ebp], 80
  00bde	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv506[ebp]
  00be4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_ptr_value@@3PAY0BE@P6GPAXPAUENTITY@@W4PTR_TYPES@@@ZA[edx+eax*4]
  00beb	ff d1		 call	 ecx
  00bed	89 45 b0	 mov	 DWORD PTR _group_leader$16[ebp], eax

; 1268 : 
; 1269 : 					ASSERT (group_leader);

  00bf0	83 7d b0 00	 cmp	 DWORD PTR _group_leader$16[ebp], 0
  00bf4	75 1a		 jne	 SHORT $LN18@fixed_wing
  00bf6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00bfb	05 96 00 00 00	 add	 eax, 150		; 00000096H
  00c00	50		 push	 eax
  00c01	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c06	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LDLPOAOD@group_leader@
  00c0b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN18@fixed_wing:

; 1270 : 
; 1271 : 					//
; 1272 : 					// get formation
; 1273 : 					//
; 1274 : 
; 1275 : 					type = get_local_entity_int_value (group, INT_TYPE_GROUP_FORMATION);

  00c10	83 7d f8 00	 cmp	 DWORD PTR _group$[ebp], 0
  00c14	74 0d		 je	 SHORT $LN99@fixed_wing
  00c16	8b 45 f8	 mov	 eax, DWORD PTR _group$[ebp]
  00c19	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c1b	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv523[ebp], ecx
  00c21	eb 27		 jmp	 SHORT $LN100@fixed_wing
$LN99@fixed_wing:
  00c23	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00c29	81 c2 9c 00 00
	00		 add	 edx, 156		; 0000009cH
  00c2f	52		 push	 edx
  00c30	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c35	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00c3a	50		 push	 eax
  00c3b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c40	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv523[ebp], 0
$LN100@fixed_wing:
  00c4a	b9 01 00 00 00	 mov	 ecx, 1
  00c4f	85 c9		 test	 ecx, ecx
  00c51	74 0c		 je	 SHORT $LN101@fixed_wing
  00c53	c7 85 2c ff ff
	ff 47 00 00 00	 mov	 DWORD PTR tv531[ebp], 71 ; 00000047H
  00c5d	eb 27		 jmp	 SHORT $LN102@fixed_wing
$LN101@fixed_wing:
  00c5f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00c65	81 c2 9c 00 00
	00		 add	 edx, 156		; 0000009cH
  00c6b	52		 push	 edx
  00c6c	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c71	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00c76	50		 push	 eax
  00c77	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c7c	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv531[ebp], 0
$LN102@fixed_wing:
  00c86	6a 47		 push	 71			; 00000047H
  00c88	8b 4d f8	 mov	 ecx, DWORD PTR _group$[ebp]
  00c8b	51		 push	 ecx
  00c8c	69 95 30 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv523[ebp], 1116
  00c96	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv531[ebp]
  00c9c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00ca3	ff d1		 call	 ecx
  00ca5	89 45 a8	 mov	 DWORD PTR _type$14[ebp], eax

; 1276 : 
; 1277 : 					formation = get_formation ((formation_types) type);

  00ca8	8b 45 a8	 mov	 eax, DWORD PTR _type$14[ebp]
  00cab	50		 push	 eax
  00cac	e8 00 00 00 00	 call	 ?get_formation@@YGPAUFORMATION_TYPE@@W4FORMATION_TYPES@@@Z ; get_formation
  00cb1	89 45 ac	 mov	 DWORD PTR _formation$15[ebp], eax

; 1278 : 
; 1279 : 					formation_count = formation->number_in_formation;

  00cb4	8b 45 ac	 mov	 eax, DWORD PTR _formation$15[ebp]
  00cb7	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  00cbb	89 4d a4	 mov	 DWORD PTR _formation_count$13[ebp], ecx

; 1280 : 
; 1281 : 					formation_index = get_local_entity_int_value (en, INT_TYPE_GROUP_MEMBER_NUMBER);

  00cbe	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00cc2	74 0d		 je	 SHORT $LN103@fixed_wing
  00cc4	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00cc7	8b 08		 mov	 ecx, DWORD PTR [eax]
  00cc9	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv547[ebp], ecx
  00ccf	eb 27		 jmp	 SHORT $LN104@fixed_wing
$LN103@fixed_wing:
  00cd1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00cd7	81 c2 a2 00 00
	00		 add	 edx, 162		; 000000a2H
  00cdd	52		 push	 edx
  00cde	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ce3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00ce8	50		 push	 eax
  00ce9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00cee	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv547[ebp], 0
$LN104@fixed_wing:
  00cf8	b9 01 00 00 00	 mov	 ecx, 1
  00cfd	85 c9		 test	 ecx, ecx
  00cff	74 0c		 je	 SHORT $LN105@fixed_wing
  00d01	c7 85 2c ff ff
	ff 4b 00 00 00	 mov	 DWORD PTR tv555[ebp], 75 ; 0000004bH
  00d0b	eb 27		 jmp	 SHORT $LN106@fixed_wing
$LN105@fixed_wing:
  00d0d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00d13	81 c2 a2 00 00
	00		 add	 edx, 162		; 000000a2H
  00d19	52		 push	 edx
  00d1a	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d1f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00d24	50		 push	 eax
  00d25	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d2a	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv555[ebp], 0
$LN106@fixed_wing:
  00d34	6a 4b		 push	 75			; 0000004bH
  00d36	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00d39	51		 push	 ecx
  00d3a	69 95 30 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv547[ebp], 1116
  00d44	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv555[ebp]
  00d4a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00d51	ff d1		 call	 ecx
  00d53	89 45 a0	 mov	 DWORD PTR _formation_index$12[ebp], eax

; 1282 : 
; 1283 : 					leader_formation_index = get_local_entity_int_value (group_leader, INT_TYPE_GROUP_MEMBER_NUMBER);

  00d56	83 7d b0 00	 cmp	 DWORD PTR _group_leader$16[ebp], 0
  00d5a	74 0d		 je	 SHORT $LN107@fixed_wing
  00d5c	8b 45 b0	 mov	 eax, DWORD PTR _group_leader$16[ebp]
  00d5f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d61	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv567[ebp], ecx
  00d67	eb 27		 jmp	 SHORT $LN108@fixed_wing
$LN107@fixed_wing:
  00d69	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00d6f	81 c2 a4 00 00
	00		 add	 edx, 164		; 000000a4H
  00d75	52		 push	 edx
  00d76	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d7b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00d80	50		 push	 eax
  00d81	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d86	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv567[ebp], 0
$LN108@fixed_wing:
  00d90	b9 01 00 00 00	 mov	 ecx, 1
  00d95	85 c9		 test	 ecx, ecx
  00d97	74 0c		 je	 SHORT $LN109@fixed_wing
  00d99	c7 85 2c ff ff
	ff 4b 00 00 00	 mov	 DWORD PTR tv575[ebp], 75 ; 0000004bH
  00da3	eb 27		 jmp	 SHORT $LN110@fixed_wing
$LN109@fixed_wing:
  00da5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00dab	81 c2 a4 00 00
	00		 add	 edx, 164		; 000000a4H
  00db1	52		 push	 edx
  00db2	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00db7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00dbc	50		 push	 eax
  00dbd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00dc2	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv575[ebp], 0
$LN110@fixed_wing:
  00dcc	6a 4b		 push	 75			; 0000004bH
  00dce	8b 4d b0	 mov	 ecx, DWORD PTR _group_leader$16[ebp]
  00dd1	51		 push	 ecx
  00dd2	69 95 30 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv567[ebp], 1116
  00ddc	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv575[ebp]
  00de2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00de9	ff d1		 call	 ecx
  00deb	89 45 9c	 mov	 DWORD PTR _leader_formation_index$11[ebp], eax

; 1284 : 
; 1285 : 					ASSERT (formation_index < formation_count);

  00dee	8b 45 a0	 mov	 eax, DWORD PTR _formation_index$12[ebp]
  00df1	3b 45 a4	 cmp	 eax, DWORD PTR _formation_count$13[ebp]
  00df4	7c 1a		 jl	 SHORT $LN19@fixed_wing
  00df6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00dfb	05 a6 00 00 00	 add	 eax, 166		; 000000a6H
  00e00	50		 push	 eax
  00e01	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e06	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@BJNBCHGF@formation_index?5?$DM?5formation_cou@
  00e0b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN19@fixed_wing:

; 1286 : 					ASSERT (leader_formation_index < formation_count);

  00e10	8b 45 9c	 mov	 eax, DWORD PTR _leader_formation_index$11[ebp]
  00e13	3b 45 a4	 cmp	 eax, DWORD PTR _formation_count$13[ebp]
  00e16	7c 1a		 jl	 SHORT $LN20@fixed_wing
  00e18	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00e1d	05 a7 00 00 00	 add	 eax, 167		; 000000a7H
  00e22	50		 push	 eax
  00e23	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e28	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@LGIIPGBA@leader_formation_index?5?$DM?5format@
  00e2d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN20@fixed_wing:

; 1287 : 
; 1288 : 					//
; 1289 : 					// calculate position
; 1290 : 					//
; 1291 : 
; 1292 : 					zv.x = wp_pos->x - pos->x;

  00e32	8b 45 0c	 mov	 eax, DWORD PTR _wp_pos$[ebp]
  00e35	8b 4d e4	 mov	 ecx, DWORD PTR _pos$[ebp]
  00e38	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00e3c	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00e40	f3 0f 11 45 c0	 movss	 DWORD PTR _zv$18[ebp], xmm0

; 1293 : 					zv.y = 0.0;

  00e45	0f 57 c0	 xorps	 xmm0, xmm0
  00e48	f3 0f 11 45 c4	 movss	 DWORD PTR _zv$18[ebp+4], xmm0

; 1294 : 					zv.z = wp_pos->z - pos->z;

  00e4d	8b 45 0c	 mov	 eax, DWORD PTR _wp_pos$[ebp]
  00e50	8b 4d e4	 mov	 ecx, DWORD PTR _pos$[ebp]
  00e53	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00e58	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00e5d	f3 0f 11 45 c8	 movss	 DWORD PTR _zv$18[ebp+8], xmm0

; 1295 : 
; 1296 : 					if (normalise_any_3d_vector (&zv) == 0.0)

  00e62	8d 45 c0	 lea	 eax, DWORD PTR _zv$18[ebp]
  00e65	50		 push	 eax
  00e66	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  00e6b	dd 9d 2c ff ff
	ff		 fstp	 QWORD PTR tv1290[ebp]
  00e71	f2 0f 10 85 2c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1290[ebp]
  00e79	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00e81	9f		 lahf
  00e82	f6 c4 44	 test	 ah, 68			; 00000044H
  00e85	7a 1f		 jp	 SHORT $LN21@fixed_wing

; 1297 : 					{
; 1298 : 						xv.x = 0.0;

  00e87	0f 57 c0	 xorps	 xmm0, xmm0
  00e8a	f3 0f 11 45 b4	 movss	 DWORD PTR _xv$17[ebp], xmm0

; 1299 : 						xv.y = 0.0;

  00e8f	0f 57 c0	 xorps	 xmm0, xmm0
  00e92	f3 0f 11 45 b8	 movss	 DWORD PTR _xv$17[ebp+4], xmm0

; 1300 : 						xv.z = 1.0;

  00e97	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00e9f	f3 0f 11 45 bc	 movss	 DWORD PTR _xv$17[ebp+8], xmm0

; 1301 : 					}
; 1302 : 					else

  00ea4	eb 23		 jmp	 SHORT $LN22@fixed_wing
$LN21@fixed_wing:

; 1303 : 					{
; 1304 : 						xv.x = zv.z;

  00ea6	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _zv$18[ebp+8]
  00eab	f3 0f 11 45 b4	 movss	 DWORD PTR _xv$17[ebp], xmm0

; 1305 : 						xv.y = 0.0;

  00eb0	0f 57 c0	 xorps	 xmm0, xmm0
  00eb3	f3 0f 11 45 b8	 movss	 DWORD PTR _xv$17[ebp+4], xmm0

; 1306 : 						xv.z = -zv.x;

  00eb8	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _zv$18[ebp]
  00ebd	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00ec4	f3 0f 11 45 bc	 movss	 DWORD PTR _xv$17[ebp+8], xmm0
$LN22@fixed_wing:

; 1307 : 					}
; 1308 : 
; 1309 : 					//
; 1310 : 					// take waypoint position and SUBTRACT leaders formation position
; 1311 : 					//
; 1312 : 
; 1313 : 					wp_pos->x -= ((xv.x * formation->sites [leader_formation_index].x) - (xv.z * formation->sites [leader_formation_index].z));

  00ec9	6b 45 9c 0c	 imul	 eax, DWORD PTR _leader_formation_index$11[ebp], 12
  00ecd	8b 4d ac	 mov	 ecx, DWORD PTR _formation$15[ebp]
  00ed0	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00ed3	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _xv$17[ebp]
  00ed8	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  00edd	6b 45 9c 0c	 imul	 eax, DWORD PTR _leader_formation_index$11[ebp], 12
  00ee1	8b 4d ac	 mov	 ecx, DWORD PTR _formation$15[ebp]
  00ee4	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00ee7	f3 0f 10 4d bc	 movss	 xmm1, DWORD PTR _xv$17[ebp+8]
  00eec	f3 0f 59 4c 02
	08		 mulss	 xmm1, DWORD PTR [edx+eax+8]
  00ef2	f3 0f 5c c1	 subss	 xmm0, xmm1
  00ef6	8b 45 0c	 mov	 eax, DWORD PTR _wp_pos$[ebp]
  00ef9	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00efd	f3 0f 5c c8	 subss	 xmm1, xmm0
  00f01	8b 4d 0c	 mov	 ecx, DWORD PTR _wp_pos$[ebp]
  00f04	f3 0f 11 09	 movss	 DWORD PTR [ecx], xmm1

; 1314 : 					wp_pos->z -= ((xv.x * formation->sites [leader_formation_index].z) + (xv.z * formation->sites [leader_formation_index].x));

  00f08	6b 45 9c 0c	 imul	 eax, DWORD PTR _leader_formation_index$11[ebp], 12
  00f0c	8b 4d ac	 mov	 ecx, DWORD PTR _formation$15[ebp]
  00f0f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00f12	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _xv$17[ebp]
  00f17	f3 0f 59 44 02
	08		 mulss	 xmm0, DWORD PTR [edx+eax+8]
  00f1d	6b 45 9c 0c	 imul	 eax, DWORD PTR _leader_formation_index$11[ebp], 12
  00f21	8b 4d ac	 mov	 ecx, DWORD PTR _formation$15[ebp]
  00f24	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00f27	f3 0f 10 4d bc	 movss	 xmm1, DWORD PTR _xv$17[ebp+8]
  00f2c	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  00f31	f3 0f 58 c1	 addss	 xmm0, xmm1
  00f35	8b 45 0c	 mov	 eax, DWORD PTR _wp_pos$[ebp]
  00f38	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  00f3d	f3 0f 5c c8	 subss	 xmm1, xmm0
  00f41	8b 4d 0c	 mov	 ecx, DWORD PTR _wp_pos$[ebp]
  00f44	f3 0f 11 49 08	 movss	 DWORD PTR [ecx+8], xmm1

; 1315 : 
; 1316 : 					//
; 1317 : 					// then ADD members formation position
; 1318 : 					//
; 1319 : 
; 1320 : 					wp_pos->x += ((xv.x * formation->sites [formation_index].x) - (xv.z * formation->sites [formation_index].z));

  00f49	6b 45 a0 0c	 imul	 eax, DWORD PTR _formation_index$12[ebp], 12
  00f4d	8b 4d ac	 mov	 ecx, DWORD PTR _formation$15[ebp]
  00f50	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00f53	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _xv$17[ebp]
  00f58	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  00f5d	6b 45 a0 0c	 imul	 eax, DWORD PTR _formation_index$12[ebp], 12
  00f61	8b 4d ac	 mov	 ecx, DWORD PTR _formation$15[ebp]
  00f64	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00f67	f3 0f 10 4d bc	 movss	 xmm1, DWORD PTR _xv$17[ebp+8]
  00f6c	f3 0f 59 4c 02
	08		 mulss	 xmm1, DWORD PTR [edx+eax+8]
  00f72	f3 0f 5c c1	 subss	 xmm0, xmm1
  00f76	8b 45 0c	 mov	 eax, DWORD PTR _wp_pos$[ebp]
  00f79	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  00f7d	8b 4d 0c	 mov	 ecx, DWORD PTR _wp_pos$[ebp]
  00f80	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 1321 : 					wp_pos->y += formation->sites [formation_index].y;

  00f84	6b 45 a0 0c	 imul	 eax, DWORD PTR _formation_index$12[ebp], 12
  00f88	8b 4d ac	 mov	 ecx, DWORD PTR _formation$15[ebp]
  00f8b	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00f8e	8b 4d 0c	 mov	 ecx, DWORD PTR _wp_pos$[ebp]
  00f91	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00f96	f3 0f 58 44 02
	04		 addss	 xmm0, DWORD PTR [edx+eax+4]
  00f9c	8b 55 0c	 mov	 edx, DWORD PTR _wp_pos$[ebp]
  00f9f	f3 0f 11 42 04	 movss	 DWORD PTR [edx+4], xmm0

; 1322 : 					wp_pos->z += ((xv.x * formation->sites [formation_index].z) + (xv.z * formation->sites [formation_index].x));

  00fa4	6b 45 a0 0c	 imul	 eax, DWORD PTR _formation_index$12[ebp], 12
  00fa8	8b 4d ac	 mov	 ecx, DWORD PTR _formation$15[ebp]
  00fab	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00fae	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _xv$17[ebp]
  00fb3	f3 0f 59 44 02
	08		 mulss	 xmm0, DWORD PTR [edx+eax+8]
  00fb9	6b 45 a0 0c	 imul	 eax, DWORD PTR _formation_index$12[ebp], 12
  00fbd	8b 4d ac	 mov	 ecx, DWORD PTR _formation$15[ebp]
  00fc0	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00fc3	f3 0f 10 4d bc	 movss	 xmm1, DWORD PTR _xv$17[ebp+8]
  00fc8	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  00fcd	f3 0f 58 c1	 addss	 xmm0, xmm1
  00fd1	8b 45 0c	 mov	 eax, DWORD PTR _wp_pos$[ebp]
  00fd4	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  00fd9	8b 4d 0c	 mov	 ecx, DWORD PTR _wp_pos$[ebp]
  00fdc	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
$LN17@fixed_wing:

; 1323 : 				}
; 1324 : 			}
; 1325 : 			else

  00fe1	e9 15 06 00 00	 jmp	 $LN13@fixed_wing
$LN12@fixed_wing:

; 1326 : 			{
; 1327 : 				//
; 1328 : 				// set wp pos to offset from flight leader
; 1329 : 				//
; 1330 : 
; 1331 : 				entity
; 1332 : 					*task_leader;
; 1333 : 
; 1334 : 				vec3d
; 1335 : 					*xv,
; 1336 : 					*leader_pos;
; 1337 : 
; 1338 : 				formation_type
; 1339 : 					*formation;
; 1340 : 
; 1341 : 				int
; 1342 : 					type,
; 1343 : 					formation_count,
; 1344 : 					formation_index,
; 1345 : 					leader_formation_index;
; 1346 : 
; 1347 : 				//
; 1348 : 				// find flight leader
; 1349 : 				//
; 1350 : 
; 1351 : 				task_leader = (entity *) get_local_entity_ptr_value (guide, PTR_TYPE_TASK_LEADER);

  00fe6	83 7d f4 00	 cmp	 DWORD PTR _guide$[ebp], 0
  00fea	74 0d		 je	 SHORT $LN111@fixed_wing
  00fec	8b 45 f4	 mov	 eax, DWORD PTR _guide$[ebp]
  00fef	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ff1	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv703[ebp], ecx
  00ff7	eb 27		 jmp	 SHORT $LN112@fixed_wing
$LN111@fixed_wing:
  00ff9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  00fff	81 c2 e8 00 00
	00		 add	 edx, 232		; 000000e8H
  01005	52		 push	 edx
  01006	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0100b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01010	50		 push	 eax
  01011	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01016	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv703[ebp], 0
$LN112@fixed_wing:
  01020	b9 01 00 00 00	 mov	 ecx, 1
  01025	85 c9		 test	 ecx, ecx
  01027	74 0c		 je	 SHORT $LN113@fixed_wing
  01029	c7 85 2c ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR tv711[ebp], 15 ; 0000000fH
  01033	eb 27		 jmp	 SHORT $LN114@fixed_wing
$LN113@fixed_wing:
  01035	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  0103b	81 c2 e8 00 00
	00		 add	 edx, 232		; 000000e8H
  01041	52		 push	 edx
  01042	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  01047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_ptr_type_message@@3PBDB ; overload_invalid_ptr_type_message
  0104c	50		 push	 eax
  0104d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01052	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv711[ebp], 0
$LN114@fixed_wing:
  0105c	6a 0f		 push	 15			; 0000000fH
  0105e	8b 4d f4	 mov	 ecx, DWORD PTR _guide$[ebp]
  01061	51		 push	 ecx
  01062	6b 95 30 ff ff
	ff 50		 imul	 edx, DWORD PTR tv703[ebp], 80
  01069	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv711[ebp]
  0106f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_ptr_value@@3PAY0BE@P6GPAXPAUENTITY@@W4PTR_TYPES@@@ZA[edx+eax*4]
  01076	ff d1		 call	 ecx
  01078	89 45 98	 mov	 DWORD PTR _task_leader$10[ebp], eax

; 1352 : 
; 1353 : 				ASSERT (task_leader);

  0107b	83 7d 98 00	 cmp	 DWORD PTR _task_leader$10[ebp], 0
  0107f	75 1a		 jne	 SHORT $LN23@fixed_wing
  01081	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  01086	05 ea 00 00 00	 add	 eax, 234		; 000000eaH
  0108b	50		 push	 eax
  0108c	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  01091	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CKFOJOAF@task_leader@
  01096	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN23@fixed_wing:

; 1354 : 
; 1355 : 				//
; 1356 : 				// get formation
; 1357 : 				//
; 1358 : 
; 1359 : 				type = get_local_entity_int_value (group, INT_TYPE_GROUP_FORMATION);

  0109b	83 7d f8 00	 cmp	 DWORD PTR _group$[ebp], 0
  0109f	74 0d		 je	 SHORT $LN115@fixed_wing
  010a1	8b 45 f8	 mov	 eax, DWORD PTR _group$[ebp]
  010a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  010a6	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv728[ebp], ecx
  010ac	eb 27		 jmp	 SHORT $LN116@fixed_wing
$LN115@fixed_wing:
  010ae	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  010b4	81 c2 f0 00 00
	00		 add	 edx, 240		; 000000f0H
  010ba	52		 push	 edx
  010bb	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  010c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  010c5	50		 push	 eax
  010c6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  010cb	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv728[ebp], 0
$LN116@fixed_wing:
  010d5	b9 01 00 00 00	 mov	 ecx, 1
  010da	85 c9		 test	 ecx, ecx
  010dc	74 0c		 je	 SHORT $LN117@fixed_wing
  010de	c7 85 2c ff ff
	ff 47 00 00 00	 mov	 DWORD PTR tv736[ebp], 71 ; 00000047H
  010e8	eb 27		 jmp	 SHORT $LN118@fixed_wing
$LN117@fixed_wing:
  010ea	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  010f0	81 c2 f0 00 00
	00		 add	 edx, 240		; 000000f0H
  010f6	52		 push	 edx
  010f7	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  010fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01101	50		 push	 eax
  01102	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01107	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv736[ebp], 0
$LN118@fixed_wing:
  01111	6a 47		 push	 71			; 00000047H
  01113	8b 4d f8	 mov	 ecx, DWORD PTR _group$[ebp]
  01116	51		 push	 ecx
  01117	69 95 30 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv728[ebp], 1116
  01121	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv736[ebp]
  01127	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  0112e	ff d1		 call	 ecx
  01130	89 45 88	 mov	 DWORD PTR _type$6[ebp], eax

; 1360 : 
; 1361 : 				formation = get_formation ((formation_types) type);

  01133	8b 45 88	 mov	 eax, DWORD PTR _type$6[ebp]
  01136	50		 push	 eax
  01137	e8 00 00 00 00	 call	 ?get_formation@@YGPAUFORMATION_TYPE@@W4FORMATION_TYPES@@@Z ; get_formation
  0113c	89 45 8c	 mov	 DWORD PTR _formation$7[ebp], eax

; 1362 : 
; 1363 : 				formation_count = formation->number_in_formation;

  0113f	8b 45 8c	 mov	 eax, DWORD PTR _formation$7[ebp]
  01142	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  01146	89 4d 84	 mov	 DWORD PTR _formation_count$5[ebp], ecx

; 1364 : 
; 1365 : 				formation_index = get_local_entity_int_value (en, INT_TYPE_GROUP_MEMBER_NUMBER);

  01149	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0114d	74 0d		 je	 SHORT $LN119@fixed_wing
  0114f	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  01152	8b 08		 mov	 ecx, DWORD PTR [eax]
  01154	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv752[ebp], ecx
  0115a	eb 27		 jmp	 SHORT $LN120@fixed_wing
$LN119@fixed_wing:
  0115c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  01162	81 c2 f6 00 00
	00		 add	 edx, 246		; 000000f6H
  01168	52		 push	 edx
  01169	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0116e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01173	50		 push	 eax
  01174	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01179	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv752[ebp], 0
$LN120@fixed_wing:
  01183	b9 01 00 00 00	 mov	 ecx, 1
  01188	85 c9		 test	 ecx, ecx
  0118a	74 0c		 je	 SHORT $LN121@fixed_wing
  0118c	c7 85 2c ff ff
	ff 4b 00 00 00	 mov	 DWORD PTR tv760[ebp], 75 ; 0000004bH
  01196	eb 27		 jmp	 SHORT $LN122@fixed_wing
$LN121@fixed_wing:
  01198	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  0119e	81 c2 f6 00 00
	00		 add	 edx, 246		; 000000f6H
  011a4	52		 push	 edx
  011a5	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  011aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  011af	50		 push	 eax
  011b0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  011b5	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv760[ebp], 0
$LN122@fixed_wing:
  011bf	6a 4b		 push	 75			; 0000004bH
  011c1	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  011c4	51		 push	 ecx
  011c5	69 95 30 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv752[ebp], 1116
  011cf	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv760[ebp]
  011d5	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  011dc	ff d1		 call	 ecx
  011de	89 45 80	 mov	 DWORD PTR _formation_index$4[ebp], eax

; 1366 : 
; 1367 : 				leader_formation_index = get_local_entity_int_value (task_leader, INT_TYPE_GROUP_MEMBER_NUMBER);

  011e1	83 7d 98 00	 cmp	 DWORD PTR _task_leader$10[ebp], 0
  011e5	74 0d		 je	 SHORT $LN123@fixed_wing
  011e7	8b 45 98	 mov	 eax, DWORD PTR _task_leader$10[ebp]
  011ea	8b 08		 mov	 ecx, DWORD PTR [eax]
  011ec	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv772[ebp], ecx
  011f2	eb 27		 jmp	 SHORT $LN124@fixed_wing
$LN123@fixed_wing:
  011f4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  011fa	81 c2 f8 00 00
	00		 add	 edx, 248		; 000000f8H
  01200	52		 push	 edx
  01201	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  01206	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0120b	50		 push	 eax
  0120c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01211	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv772[ebp], 0
$LN124@fixed_wing:
  0121b	b9 01 00 00 00	 mov	 ecx, 1
  01220	85 c9		 test	 ecx, ecx
  01222	74 0c		 je	 SHORT $LN125@fixed_wing
  01224	c7 85 2c ff ff
	ff 4b 00 00 00	 mov	 DWORD PTR tv780[ebp], 75 ; 0000004bH
  0122e	eb 27		 jmp	 SHORT $LN126@fixed_wing
$LN125@fixed_wing:
  01230	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  01236	81 c2 f8 00 00
	00		 add	 edx, 248		; 000000f8H
  0123c	52		 push	 edx
  0123d	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  01242	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01247	50		 push	 eax
  01248	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0124d	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv780[ebp], 0
$LN126@fixed_wing:
  01257	6a 4b		 push	 75			; 0000004bH
  01259	8b 4d 98	 mov	 ecx, DWORD PTR _task_leader$10[ebp]
  0125c	51		 push	 ecx
  0125d	69 95 30 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv772[ebp], 1116
  01267	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv780[ebp]
  0126d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  01274	ff d1		 call	 ecx
  01276	89 85 7c ff ff
	ff		 mov	 DWORD PTR _leader_formation_index$3[ebp], eax

; 1368 : 
; 1369 : 				ASSERT (formation_index < formation_count);

  0127c	8b 45 80	 mov	 eax, DWORD PTR _formation_index$4[ebp]
  0127f	3b 45 84	 cmp	 eax, DWORD PTR _formation_count$5[ebp]
  01282	7c 1a		 jl	 SHORT $LN24@fixed_wing
  01284	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  01289	05 fa 00 00 00	 add	 eax, 250		; 000000faH
  0128e	50		 push	 eax
  0128f	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  01294	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@BJNBCHGF@formation_index?5?$DM?5formation_cou@
  01299	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN24@fixed_wing:

; 1370 : 				ASSERT (leader_formation_index < formation_count);

  0129e	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _leader_formation_index$3[ebp]
  012a4	3b 45 84	 cmp	 eax, DWORD PTR _formation_count$5[ebp]
  012a7	7c 1a		 jl	 SHORT $LN25@fixed_wing
  012a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  012ae	05 fb 00 00 00	 add	 eax, 251		; 000000fbH
  012b3	50		 push	 eax
  012b4	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  012b9	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@LGIIPGBA@leader_formation_index?5?$DM?5format@
  012be	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN25@fixed_wing:

; 1371 : 
; 1372 : 				//
; 1373 : 				// calculate position
; 1374 : 				//
; 1375 : 
; 1376 : 				leader_pos = get_local_entity_vec3d_ptr (task_leader, VEC3D_TYPE_POSITION);

  012c3	83 7d 98 00	 cmp	 DWORD PTR _task_leader$10[ebp], 0
  012c7	74 0d		 je	 SHORT $LN127@fixed_wing
  012c9	8b 45 98	 mov	 eax, DWORD PTR _task_leader$10[ebp]
  012cc	8b 08		 mov	 ecx, DWORD PTR [eax]
  012ce	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv802[ebp], ecx
  012d4	eb 27		 jmp	 SHORT $LN128@fixed_wing
$LN127@fixed_wing:
  012d6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  012dc	81 c2 01 01 00
	00		 add	 edx, 257		; 00000101H
  012e2	52		 push	 edx
  012e3	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  012e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  012ed	50		 push	 eax
  012ee	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  012f3	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv802[ebp], 0
$LN128@fixed_wing:
  012fd	b9 01 00 00 00	 mov	 ecx, 1
  01302	85 c9		 test	 ecx, ecx
  01304	74 0c		 je	 SHORT $LN129@fixed_wing
  01306	c7 85 2c ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv810[ebp], 8
  01310	eb 27		 jmp	 SHORT $LN130@fixed_wing
$LN129@fixed_wing:
  01312	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  01318	81 c2 01 01 00
	00		 add	 edx, 257		; 00000101H
  0131e	52		 push	 edx
  0131f	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  01324	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  01329	50		 push	 eax
  0132a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0132f	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv810[ebp], 0
$LN130@fixed_wing:
  01339	6a 08		 push	 8
  0133b	8b 4d 98	 mov	 ecx, DWORD PTR _task_leader$10[ebp]
  0133e	51		 push	 ecx
  0133f	6b 95 30 ff ff
	ff 60		 imul	 edx, DWORD PTR tv802[ebp], 96
  01346	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv810[ebp]
  0134c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  01353	ff d1		 call	 ecx
  01355	89 45 90	 mov	 DWORD PTR _leader_pos$8[ebp], eax

; 1377 : 
; 1378 : 				xv = get_local_entity_vec3d_ptr (task_leader, VEC3D_TYPE_XV);

  01358	83 7d 98 00	 cmp	 DWORD PTR _task_leader$10[ebp], 0
  0135c	74 0d		 je	 SHORT $LN131@fixed_wing
  0135e	8b 45 98	 mov	 eax, DWORD PTR _task_leader$10[ebp]
  01361	8b 08		 mov	 ecx, DWORD PTR [eax]
  01363	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv822[ebp], ecx
  01369	eb 27		 jmp	 SHORT $LN132@fixed_wing
$LN131@fixed_wing:
  0136b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  01371	81 c2 03 01 00
	00		 add	 edx, 259		; 00000103H
  01377	52		 push	 edx
  01378	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0137d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01382	50		 push	 eax
  01383	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01388	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv822[ebp], 0
$LN132@fixed_wing:
  01392	b9 01 00 00 00	 mov	 ecx, 1
  01397	85 c9		 test	 ecx, ecx
  01399	74 0c		 je	 SHORT $LN133@fixed_wing
  0139b	c7 85 2c ff ff
	ff 14 00 00 00	 mov	 DWORD PTR tv830[ebp], 20 ; 00000014H
  013a5	eb 27		 jmp	 SHORT $LN134@fixed_wing
$LN133@fixed_wing:
  013a7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  013ad	81 c2 03 01 00
	00		 add	 edx, 259		; 00000103H
  013b3	52		 push	 edx
  013b4	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  013b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  013be	50		 push	 eax
  013bf	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  013c4	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv830[ebp], 0
$LN134@fixed_wing:
  013ce	6a 14		 push	 20			; 00000014H
  013d0	8b 4d 98	 mov	 ecx, DWORD PTR _task_leader$10[ebp]
  013d3	51		 push	 ecx
  013d4	6b 95 30 ff ff
	ff 60		 imul	 edx, DWORD PTR tv822[ebp], 96
  013db	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv830[ebp]
  013e1	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  013e8	ff d1		 call	 ecx
  013ea	89 45 94	 mov	 DWORD PTR _xv$9[ebp], eax

; 1379 : 
; 1380 : 				//
; 1381 : 				// take leader position and SUBTRACT leaders formation position (coz leader is not necessarily formation pos 0)
; 1382 : 				//
; 1383 : 
; 1384 : 				wp_pos->x = leader_pos->x - ((xv->x * formation->sites [leader_formation_index].x) - (xv->z * formation->sites [leader_formation_index].z));

  013ed	6b 85 7c ff ff
	ff 0c		 imul	 eax, DWORD PTR _leader_formation_index$3[ebp], 12
  013f4	8b 4d 8c	 mov	 ecx, DWORD PTR _formation$7[ebp]
  013f7	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  013fa	8b 4d 94	 mov	 ecx, DWORD PTR _xv$9[ebp]
  013fd	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  01401	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  01406	6b 95 7c ff ff
	ff 0c		 imul	 edx, DWORD PTR _leader_formation_index$3[ebp], 12
  0140d	8b 45 8c	 mov	 eax, DWORD PTR _formation$7[ebp]
  01410	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01413	8b 45 94	 mov	 eax, DWORD PTR _xv$9[ebp]
  01416	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  0141b	f3 0f 59 4c 11
	08		 mulss	 xmm1, DWORD PTR [ecx+edx+8]
  01421	f3 0f 5c c1	 subss	 xmm0, xmm1
  01425	8b 4d 90	 mov	 ecx, DWORD PTR _leader_pos$8[ebp]
  01428	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  0142c	f3 0f 5c c8	 subss	 xmm1, xmm0
  01430	8b 55 0c	 mov	 edx, DWORD PTR _wp_pos$[ebp]
  01433	f3 0f 11 0a	 movss	 DWORD PTR [edx], xmm1

; 1385 : 				wp_pos->y = leader_pos->y - formation->sites [leader_formation_index].y;

  01437	6b 85 7c ff ff
	ff 0c		 imul	 eax, DWORD PTR _leader_formation_index$3[ebp], 12
  0143e	8b 4d 8c	 mov	 ecx, DWORD PTR _formation$7[ebp]
  01441	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  01444	8b 4d 90	 mov	 ecx, DWORD PTR _leader_pos$8[ebp]
  01447	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0144c	f3 0f 5c 44 02
	04		 subss	 xmm0, DWORD PTR [edx+eax+4]
  01452	8b 55 0c	 mov	 edx, DWORD PTR _wp_pos$[ebp]
  01455	f3 0f 11 42 04	 movss	 DWORD PTR [edx+4], xmm0

; 1386 : 				wp_pos->z = leader_pos->z - ((xv->x * formation->sites [leader_formation_index].z) + (xv->z * formation->sites [leader_formation_index].x));

  0145a	6b 85 7c ff ff
	ff 0c		 imul	 eax, DWORD PTR _leader_formation_index$3[ebp], 12
  01461	8b 4d 8c	 mov	 ecx, DWORD PTR _formation$7[ebp]
  01464	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  01467	8b 4d 94	 mov	 ecx, DWORD PTR _xv$9[ebp]
  0146a	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0146e	f3 0f 59 44 02
	08		 mulss	 xmm0, DWORD PTR [edx+eax+8]
  01474	6b 95 7c ff ff
	ff 0c		 imul	 edx, DWORD PTR _leader_formation_index$3[ebp], 12
  0147b	8b 45 8c	 mov	 eax, DWORD PTR _formation$7[ebp]
  0147e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01481	8b 45 94	 mov	 eax, DWORD PTR _xv$9[ebp]
  01484	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  01489	f3 0f 59 0c 11	 mulss	 xmm1, DWORD PTR [ecx+edx]
  0148e	f3 0f 58 c1	 addss	 xmm0, xmm1
  01492	8b 4d 90	 mov	 ecx, DWORD PTR _leader_pos$8[ebp]
  01495	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0149a	f3 0f 5c c8	 subss	 xmm1, xmm0
  0149e	8b 55 0c	 mov	 edx, DWORD PTR _wp_pos$[ebp]
  014a1	f3 0f 11 4a 08	 movss	 DWORD PTR [edx+8], xmm1

; 1387 : 
; 1388 : 				//
; 1389 : 				// then ADD members formation position
; 1390 : 				//
; 1391 : 
; 1392 : 				wp_pos->x += ((xv->x * formation->sites [formation_index].x) - (xv->z * formation->sites [formation_index].z));

  014a6	6b 45 80 0c	 imul	 eax, DWORD PTR _formation_index$4[ebp], 12
  014aa	8b 4d 8c	 mov	 ecx, DWORD PTR _formation$7[ebp]
  014ad	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  014b0	8b 4d 94	 mov	 ecx, DWORD PTR _xv$9[ebp]
  014b3	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  014b7	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  014bc	6b 55 80 0c	 imul	 edx, DWORD PTR _formation_index$4[ebp], 12
  014c0	8b 45 8c	 mov	 eax, DWORD PTR _formation$7[ebp]
  014c3	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  014c6	8b 45 94	 mov	 eax, DWORD PTR _xv$9[ebp]
  014c9	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  014ce	f3 0f 59 4c 11
	08		 mulss	 xmm1, DWORD PTR [ecx+edx+8]
  014d4	f3 0f 5c c1	 subss	 xmm0, xmm1
  014d8	8b 4d 0c	 mov	 ecx, DWORD PTR _wp_pos$[ebp]
  014db	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  014df	8b 55 0c	 mov	 edx, DWORD PTR _wp_pos$[ebp]
  014e2	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 1393 : 				wp_pos->y += formation->sites [formation_index].y;

  014e6	6b 45 80 0c	 imul	 eax, DWORD PTR _formation_index$4[ebp], 12
  014ea	8b 4d 8c	 mov	 ecx, DWORD PTR _formation$7[ebp]
  014ed	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  014f0	8b 4d 0c	 mov	 ecx, DWORD PTR _wp_pos$[ebp]
  014f3	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  014f8	f3 0f 58 44 02
	04		 addss	 xmm0, DWORD PTR [edx+eax+4]
  014fe	8b 55 0c	 mov	 edx, DWORD PTR _wp_pos$[ebp]
  01501	f3 0f 11 42 04	 movss	 DWORD PTR [edx+4], xmm0

; 1394 : 				wp_pos->z += ((xv->x * formation->sites [formation_index].z) + (xv->z * formation->sites [formation_index].x));

  01506	6b 45 80 0c	 imul	 eax, DWORD PTR _formation_index$4[ebp], 12
  0150a	8b 4d 8c	 mov	 ecx, DWORD PTR _formation$7[ebp]
  0150d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  01510	8b 4d 94	 mov	 ecx, DWORD PTR _xv$9[ebp]
  01513	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  01517	f3 0f 59 44 02
	08		 mulss	 xmm0, DWORD PTR [edx+eax+8]
  0151d	6b 55 80 0c	 imul	 edx, DWORD PTR _formation_index$4[ebp], 12
  01521	8b 45 8c	 mov	 eax, DWORD PTR _formation$7[ebp]
  01524	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01527	8b 45 94	 mov	 eax, DWORD PTR _xv$9[ebp]
  0152a	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  0152f	f3 0f 59 0c 11	 mulss	 xmm1, DWORD PTR [ecx+edx]
  01534	f3 0f 58 c1	 addss	 xmm0, xmm1
  01538	8b 4d 0c	 mov	 ecx, DWORD PTR _wp_pos$[ebp]
  0153b	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  01540	8b 55 0c	 mov	 edx, DWORD PTR _wp_pos$[ebp]
  01543	f3 0f 11 42 08	 movss	 DWORD PTR [edx+8], xmm0

; 1395 : 
; 1396 : 				wp_pos->y -= get_local_entity_float_value (task_leader, FLOAT_TYPE_CENTRE_OF_GRAVITY_TO_GROUND_DISTANCE);

  01548	83 7d 98 00	 cmp	 DWORD PTR _task_leader$10[ebp], 0
  0154c	74 0d		 je	 SHORT $LN135@fixed_wing
  0154e	8b 45 98	 mov	 eax, DWORD PTR _task_leader$10[ebp]
  01551	8b 08		 mov	 ecx, DWORD PTR [eax]
  01553	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv921[ebp], ecx
  01559	eb 27		 jmp	 SHORT $LN136@fixed_wing
$LN135@fixed_wing:
  0155b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  01561	81 c2 15 01 00
	00		 add	 edx, 277		; 00000115H
  01567	52		 push	 edx
  01568	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0156d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01572	50		 push	 eax
  01573	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01578	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv921[ebp], 0
$LN136@fixed_wing:
  01582	b9 01 00 00 00	 mov	 ecx, 1
  01587	85 c9		 test	 ecx, ecx
  01589	74 0c		 je	 SHORT $LN137@fixed_wing
  0158b	c7 85 2c ff ff
	ff 12 00 00 00	 mov	 DWORD PTR tv929[ebp], 18 ; 00000012H
  01595	eb 27		 jmp	 SHORT $LN138@fixed_wing
$LN137@fixed_wing:
  01597	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  0159d	81 c2 15 01 00
	00		 add	 edx, 277		; 00000115H
  015a3	52		 push	 edx
  015a4	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  015a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  015ae	50		 push	 eax
  015af	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  015b4	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv929[ebp], 0
$LN138@fixed_wing:
  015be	6a 12		 push	 18			; 00000012H
  015c0	8b 4d 98	 mov	 ecx, DWORD PTR _task_leader$10[ebp]
  015c3	51		 push	 ecx
  015c4	69 95 30 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv921[ebp], 700
  015ce	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv929[ebp]
  015d4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  015db	ff d1		 call	 ecx
  015dd	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR tv1462[ebp]
  015e3	8b 55 0c	 mov	 edx, DWORD PTR _wp_pos$[ebp]
  015e6	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  015eb	f3 0f 5c 85 28
	ff ff ff	 subss	 xmm0, DWORD PTR tv1462[ebp]
  015f3	8b 45 0c	 mov	 eax, DWORD PTR _wp_pos$[ebp]
  015f6	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
$LN13@fixed_wing:

; 1397 : 			}
; 1398 : 		}
; 1399 : 
; 1400 : 		//
; 1401 : 		// align waypoint altitude with the lowest point on the aircraft
; 1402 : 		//
; 1403 : 
; 1404 : 		wp_pos->y += get_local_entity_float_value (en, FLOAT_TYPE_CENTRE_OF_GRAVITY_TO_GROUND_DISTANCE);

  015fb	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  015ff	74 0d		 je	 SHORT $LN139@fixed_wing
  01601	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  01604	8b 08		 mov	 ecx, DWORD PTR [eax]
  01606	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv944[ebp], ecx
  0160c	eb 27		 jmp	 SHORT $LN140@fixed_wing
$LN139@fixed_wing:
  0160e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  01614	81 c2 1d 01 00
	00		 add	 edx, 285		; 0000011dH
  0161a	52		 push	 edx
  0161b	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  01620	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01625	50		 push	 eax
  01626	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0162b	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv944[ebp], 0
$LN140@fixed_wing:
  01635	b9 01 00 00 00	 mov	 ecx, 1
  0163a	85 c9		 test	 ecx, ecx
  0163c	74 0c		 je	 SHORT $LN141@fixed_wing
  0163e	c7 85 2c ff ff
	ff 12 00 00 00	 mov	 DWORD PTR tv952[ebp], 18 ; 00000012H
  01648	eb 27		 jmp	 SHORT $LN142@fixed_wing
$LN141@fixed_wing:
  0164a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  01650	81 c2 1d 01 00
	00		 add	 edx, 285		; 0000011dH
  01656	52		 push	 edx
  01657	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0165c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  01661	50		 push	 eax
  01662	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01667	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv952[ebp], 0
$LN142@fixed_wing:
  01671	6a 12		 push	 18			; 00000012H
  01673	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  01676	51		 push	 ecx
  01677	69 95 30 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv944[ebp], 700
  01681	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv952[ebp]
  01687	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  0168e	ff d1		 call	 ecx
  01690	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR tv1479[ebp]
  01696	8b 55 0c	 mov	 edx, DWORD PTR _wp_pos$[ebp]
  01699	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR tv1479[ebp]
  016a1	f3 0f 58 42 04	 addss	 xmm0, DWORD PTR [edx+4]
  016a6	8b 45 0c	 mov	 eax, DWORD PTR _wp_pos$[ebp]
  016a9	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
$LN8@fixed_wing:

; 1405 : 	}
; 1406 : 
; 1407 : 	//
; 1408 : 	// calculate distance of entity to desire position
; 1409 : 	//
; 1410 : 
; 1411 : 	distance = get_2d_range (pos, wp_pos);

  016ae	8b 45 0c	 mov	 eax, DWORD PTR _wp_pos$[ebp]
  016b1	50		 push	 eax
  016b2	8b 4d e4	 mov	 ecx, DWORD PTR _pos$[ebp]
  016b5	51		 push	 ecx
  016b6	e8 00 00 00 00	 call	 ?get_2d_range@@YGMPBUVEC3D@@0@Z ; get_2d_range
  016bb	d9 5d f0	 fstp	 DWORD PTR _distance$[ebp]

; 1412 : 
; 1413 : 	set_local_entity_float_value (en, FLOAT_TYPE_DISTANCE, distance);

  016be	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  016c2	74 0d		 je	 SHORT $LN143@fixed_wing
  016c4	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  016c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  016c9	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv969[ebp], ecx
  016cf	eb 27		 jmp	 SHORT $LN144@fixed_wing
$LN143@fixed_wing:
  016d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  016d7	81 c2 26 01 00
	00		 add	 edx, 294		; 00000126H
  016dd	52		 push	 edx
  016de	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  016e3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  016e8	50		 push	 eax
  016e9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  016ee	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv969[ebp], 0
$LN144@fixed_wing:
  016f8	b9 01 00 00 00	 mov	 ecx, 1
  016fd	85 c9		 test	 ecx, ecx
  016ff	74 0c		 je	 SHORT $LN145@fixed_wing
  01701	c7 85 2c ff ff
	ff 1f 00 00 00	 mov	 DWORD PTR tv977[ebp], 31 ; 0000001fH
  0170b	eb 27		 jmp	 SHORT $LN146@fixed_wing
$LN145@fixed_wing:
  0170d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z@4JA
  01713	81 c2 26 01 00
	00		 add	 edx, 294		; 00000126H
  01719	52		 push	 edx
  0171a	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@DGPKLDCM@c?3?2users?2nhv90?2projects?2eech?2ap@
  0171f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  01724	50		 push	 eax
  01725	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0172a	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv977[ebp], 0
$LN146@fixed_wing:
  01734	51		 push	 ecx
  01735	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _distance$[ebp]
  0173a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0173f	6a 1f		 push	 31			; 0000001fH
  01741	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  01744	51		 push	 ecx
  01745	69 95 30 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv969[ebp], 700
  0174f	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv977[ebp]
  01755	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_local_entity_float_value@@3PAY0KP@P6GXPAUENTITY@@W4FLOAT_TYPES@@M@ZA[edx+eax*4]
  0175c	ff d1		 call	 ecx

; 1414 : }

  0175e	5f		 pop	 edi
  0175f	5e		 pop	 esi
  01760	5b		 pop	 ebx
  01761	8b e5		 mov	 esp, ebp
  01763	5d		 pop	 ebp
  01764	c2 08 00	 ret	 8
?fixed_wing_movement_get_waypoint_position@@YGXPAUENTITY@@PAUVEC3D@@@Z ENDP ; fixed_wing_movement_get_waypoint_position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sqrt@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sqrt@@YGMM@Z PROC					; sqrt, COMDAT

; 294  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 295  : 	return (_CSTD sqrtf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sqrtf
  00019	83 c4 04	 add	 esp, 4

; 296  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sqrt@@YGMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sin@@YGMM@Z PROC					; sin, COMDAT

; 284  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 285  : 	return (_CSTD sinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sinf
  00019	83 c4 04	 add	 esp, 4

; 286  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sin@@YGMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fabs@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?fabs@@YGMM@Z PROC					; fabs, COMDAT

; 112  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 113  : 	return (_CSTD fabsf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _fabsf
  00019	83 c4 04	 add	 esp, 4

; 114  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?fabs@@YGMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?cos@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?cos@@YGMM@Z PROC					; cos, COMDAT

; 77   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 78   : 	return (_CSTD cosf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _cosf
  00019	83 c4 04	 add	 esp, 4

; 79   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?cos@@YGMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan2@@YGMMM@Z
_TEXT	SEGMENT
__Yx$ = 8						; size = 4
__Xx$ = 12						; size = 4
?atan2@@YGMMM@Z PROC					; atan2, COMDAT

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return (_CSTD atan2f(_Yx, _Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _atan2f
  00024	83 c4 08	 add	 esp, 8

; 58   : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?atan2@@YGMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?asin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?asin@@YGMM@Z PROC					; asin, COMDAT

; 36   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 37   : 	return (_CSTD asinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _asinf
  00019	83 c4 04	 add	 esp, 4

; 38   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?asin@@YGMM@Z ENDP					; asin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 760  :             return (float)sqrt(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sqrt
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 761  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 749  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 750  :             return (float)sin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 751  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 671  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 672  :             return (float)fabs(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _fabs
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 673  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 648  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 649  :             return (float)cos(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _cos
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 650  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv74 = -68						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 633  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 634  :             return (float)atan2(_Y, _X);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _atan2
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 635  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _asinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_asinf	PROC						; COMDAT

; 628  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 629  :             return (float)asin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _asin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 630  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_asinf	ENDP
_TEXT	ENDS
END
