; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\graphics\d3d.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?d3d_data@@3UDIRECT_3D_DATA@@A			; d3d_data
PUBLIC	?d3d@@3UDIRECT_3D_VECTORS@@A			; d3d
PUBLIC	?d3d_override_render_to_texture@@3HA		; d3d_override_render_to_texture
PUBLIC	?d3d_initialised@@3HA				; d3d_initialised
PUBLIC	?d3d_valid@@3HA					; d3d_valid
PUBLIC	?d3d_in_3d_scene@@3HA				; d3d_in_3d_scene
PUBLIC	?d3d_use_rgb_device@@3HA			; d3d_use_rgb_device
PUBLIC	?d3d_square_only_textures@@3HA			; d3d_square_only_textures
PUBLIC	?d3d_number_of_texture_loads@@3HA		; d3d_number_of_texture_loads
PUBLIC	?d3d_flat_only_alpha@@3HA			; d3d_flat_only_alpha
PUBLIC	?d3d_vertex_only_fog@@3HA			; d3d_vertex_only_fog
PUBLIC	?d3d_mipmap_textures@@3HA			; d3d_mipmap_textures
PUBLIC	?d3d_texture_system_memory@@3HA			; d3d_texture_system_memory
PUBLIC	?d3d_texture_video_memory@@3HA			; d3d_texture_video_memory
PUBLIC	?d3d_modulate@@3HA				; d3d_modulate
PUBLIC	?d3d_modulate_alpha@@3HA			; d3d_modulate_alpha
PUBLIC	?d3d_textured_lines@@3HA			; d3d_textured_lines
PUBLIC	?d3d_trilinear_filtering@@3HA			; d3d_trilinear_filtering
PUBLIC	?d3d_minimum_texture_width@@3HA			; d3d_minimum_texture_width
PUBLIC	?d3d_minimum_texture_height@@3HA		; d3d_minimum_texture_height
PUBLIC	?d3d_maximum_texture_width@@3HA			; d3d_maximum_texture_width
PUBLIC	?d3d_maximum_texture_height@@3HA		; d3d_maximum_texture_height
PUBLIC	?d3d_use_dx_pipeline@@3HA			; d3d_use_dx_pipeline
PUBLIC	?d3d_can_render_to_texture@@3HA			; d3d_can_render_to_texture
PUBLIC	?d3d_using_hardware_tnl@@3HA			; d3d_using_hardware_tnl
PUBLIC	?d3d_total_video_memory@@3HA			; d3d_total_video_memory
PUBLIC	?d3d_total_video_texture_memory@@3HA		; d3d_total_video_texture_memory
PUBLIC	?d3d_using_permedia2_chipset@@3HA		; d3d_using_permedia2_chipset
PUBLIC	?d3d_number_of_executions@@3HA			; d3d_number_of_executions
PUBLIC	?d3d_vertex_buffer_in_video_memory@@3HA		; d3d_vertex_buffer_in_video_memory
PUBLIC	?d3d_error_table@@3PAUdirect_3d_errors@@A	; d3d_error_table
PUBLIC	??_C@_06GGPLJKG@D3D_OK@				; `string'
PUBLIC	??_C@_0BH@MDNDAAEO@D3DERR_BADMAJORVERSION@	; `string'
PUBLIC	??_C@_0BH@HFAGAFDC@D3DERR_BADMINORVERSION@	; `string'
PUBLIC	??_C@_0BG@ODDFEDPK@D3DERR_INVALID_DEVICE@	; `string'
PUBLIC	??_C@_0BC@KKFHIJCP@D3DERR_INITFAILED@		; `string'
PUBLIC	??_C@_0BI@EOAANMDP@D3DERR_DEVICEAGGREGATED@	; `string'
PUBLIC	??_C@_0BN@FLDMEHKH@D3DERR_EXECUTE_CREATE_FAILED@ ; `string'
PUBLIC	??_C@_0BO@LGHMOFHO@D3DERR_EXECUTE_DESTROY_FAILED@ ; `string'
PUBLIC	??_C@_0BL@DMBHKLLG@D3DERR_EXECUTE_LOCK_FAILED@	; `string'
PUBLIC	??_C@_0BN@CJJOHPMI@D3DERR_EXECUTE_UNLOCK_FAILED@ ; `string'
PUBLIC	??_C@_0BG@EADNNNJB@D3DERR_EXECUTE_LOCKED@	; `string'
PUBLIC	??_C@_0BK@LKPIANLL@D3DERR_EXECUTE_NOT_LOCKED@	; `string'
PUBLIC	??_C@_0BG@JCAMDLH@D3DERR_EXECUTE_FAILED@	; `string'
PUBLIC	??_C@_0BO@BMLEGCIJ@D3DERR_EXECUTE_CLIPPED_FAILED@ ; `string'
PUBLIC	??_C@_0BK@GLBGKNEI@D3DERR_TEXTURE_NO_SUPPORT@	; `string'
PUBLIC	??_C@_0BN@KOAJFPFI@D3DERR_TEXTURE_CREATE_FAILED@ ; `string'
PUBLIC	??_C@_0BO@JLILDPOL@D3DERR_TEXTURE_DESTROY_FAILED@ ; `string'
PUBLIC	??_C@_0BL@FFOODCNH@D3DERR_TEXTURE_LOCK_FAILED@	; `string'
PUBLIC	??_C@_0BN@NMKLGHDH@D3DERR_TEXTURE_UNLOCK_FAILED@ ; `string'
PUBLIC	??_C@_0BL@IOKCCNDL@D3DERR_TEXTURE_LOAD_FAILED@	; `string'
PUBLIC	??_C@_0BL@BFDHGJEF@D3DERR_TEXTURE_SWAP_FAILED@	; `string'
PUBLIC	??_C@_0BG@OKFJGHJB@D3DERR_TEXTURE_LOCKED@	; `string'
PUBLIC	??_C@_0BK@EFKDJCCI@D3DERR_TEXTURE_NOT_LOCKED@	; `string'
PUBLIC	??_C@_0BO@LAPCIDO@D3DERR_TEXTURE_GETSURF_FAILED@ ; `string'
PUBLIC	??_C@_0BM@CJGICNIN@D3DERR_MATRIX_CREATE_FAILED@	; `string'
PUBLIC	??_C@_0BN@GNLFHIMC@D3DERR_MATRIX_DESTROY_FAILED@ ; `string'
PUBLIC	??_C@_0BN@DMPPDLIP@D3DERR_MATRIX_SETDATA_FAILED@ ; `string'
PUBLIC	??_C@_0BN@PCOBMBKD@D3DERR_MATRIX_GETDATA_FAILED@ ; `string'
PUBLIC	??_C@_0BO@DCNECMNP@D3DERR_SETVIEWPORTDATA_FAILED@ ; `string'
PUBLIC	??_C@_0BO@CDIKJFGJ@D3DERR_INVALIDCURRENTVIEWPORT@ ; `string'
PUBLIC	??_C@_0BM@BHBKHMAF@D3DERR_INVALIDPRIMITIVETYPE@	; `string'
PUBLIC	??_C@_0BJ@IPDJKALI@D3DERR_INVALIDVERTEXTYPE@	; `string'
PUBLIC	??_C@_0BH@FOKCPFKD@D3DERR_TEXTURE_BADSIZE@	; `string'
PUBLIC	??_C@_0BK@GHFAPHHM@D3DERR_INVALIDRAMPTEXTURE@	; `string'
PUBLIC	??_C@_0BO@EAEEHEME@D3DERR_MATERIAL_CREATE_FAILED@ ; `string'
PUBLIC	??_C@_0BP@GCNMKNKP@D3DERR_MATERIAL_DESTROY_FAILED@ ; `string'
PUBLIC	??_C@_0BP@DDJGOOOC@D3DERR_MATERIAL_SETDATA_FAILED@ ; `string'
PUBLIC	??_C@_0BP@PNIIBEMO@D3DERR_MATERIAL_GETDATA_FAILED@ ; `string'
PUBLIC	??_C@_0BG@NDHIPINM@D3DERR_INVALIDPALETTE@	; `string'
PUBLIC	??_C@_0CA@GNDHJEMJ@D3DERR_ZBUFF_NEEDS_SYSTEMMEMORY@ ; `string'
PUBLIC	??_C@_0BP@KALLEADK@D3DERR_ZBUFF_NEEDS_VIDEOMEMORY@ ; `string'
PUBLIC	??_C@_0BK@HAKLCOCO@D3DERR_SURFACENOTINVIDMEM@	; `string'
PUBLIC	??_C@_0BI@POLEELME@D3DERR_LIGHT_SET_FAILED@	; `string'
PUBLIC	??_C@_0BI@GLFNFJK@D3DERR_LIGHTHASVIEWPORT@	; `string'
PUBLIC	??_C@_0BO@BMBKCJNB@D3DERR_LIGHTNOTINTHISVIEWPORT@ ; `string'
PUBLIC	??_C@_0BG@EGAAIAPO@D3DERR_SCENE_IN_SCENE@	; `string'
PUBLIC	??_C@_0BK@FPAJMCGE@D3DERR_SCENE_NOT_IN_SCENE@	; `string'
PUBLIC	??_C@_0BK@HIPOGPOB@D3DERR_SCENE_BEGIN_FAILED@	; `string'
PUBLIC	??_C@_0BI@PAGCGJDG@D3DERR_SCENE_END_FAILED@	; `string'
PUBLIC	??_C@_0P@LNCHBLHP@D3DERR_INBEGIN@		; `string'
PUBLIC	??_C@_0BC@ICOADBGJ@D3DERR_NOTINBEGIN@		; `string'
PUBLIC	??_C@_0BD@DMMBGGIJ@D3DERR_NOVIEWPORTS@		; `string'
PUBLIC	??_C@_0BK@FEIHOJMK@D3DERR_VIEWPORTDATANOTSET@	; `string'
PUBLIC	??_C@_0BL@FDPMIOEJ@D3DERR_VIEWPORTHASNODEVICE@	; `string'
PUBLIC	??_C@_0BJ@JJGBBFEH@D3DERR_NOCURRENTVIEWPORT@	; `string'
PUBLIC	??_C@_0BL@MPPPGACI@D3DERR_INVALIDVERTEXFORMAT@	; `string'
PUBLIC	??_C@_0BI@IKBKGCAC@D3DERR_COLORKEYATTACHED@	; `string'
PUBLIC	??_C@_0BN@GLHOJIJ@D3DERR_VERTEXBUFFEROPTIMIZED@	; `string'
PUBLIC	??_C@_0BK@KOPJOFIM@D3DERR_VBUF_CREATE_FAILED@	; `string'
PUBLIC	??_C@_0BK@GEECGJAB@D3DERR_VERTEXBUFFERLOCKED@	; `string'
PUBLIC	??_C@_0BK@FFCPDOHF@D3DERR_ZBUFFER_NOTPRESENT@	; `string'
PUBLIC	??_C@_0CA@OJPGCALL@D3DERR_STENCILBUFFER_NOTPRESENT@ ; `string'
PUBLIC	??_C@_0BK@BPHFHCLE@D3DERR_WRONGTEXTUREFORMAT@	; `string'
PUBLIC	??_C@_0CB@CGHHLPPG@D3DERR_UNSUPPORTEDCOLOROPERATIO@ ; `string'
PUBLIC	??_C@_0BL@CDKLBBHI@D3DERR_UNSUPPORTEDCOLORARG@	; `string'
PUBLIC	??_C@_0CB@JPKBHPNI@D3DERR_UNSUPPORTEDALPHAOPERATIO@ ; `string'
PUBLIC	??_C@_0BL@BJOJBFEN@D3DERR_UNSUPPORTEDALPHAARG@	; `string'
PUBLIC	??_C@_0BJ@INFNOJNF@D3DERR_TOOMANYOPERATIONS@	; `string'
PUBLIC	??_C@_0CA@CFPOKCEH@D3DERR_CONFLICTINGTEXTUREFILTER@ ; `string'
PUBLIC	??_C@_0BO@MOJGBOAN@D3DERR_UNSUPPORTEDFACTORVALUE@ ; `string'
PUBLIC	??_C@_0BO@EMDMGLEF@D3DERR_CONFLICTINGRENDERSTATE@ ; `string'
PUBLIC	??_C@_0CA@FJBFGLDN@D3DERR_UNSUPPORTEDTEXTUREFILTER@ ; `string'
PUBLIC	??_C@_0BJ@OFKCGAOF@D3DERR_TOOMANYPRIMITIVES@	; `string'
PUBLIC	??_C@_0BF@ILKGKDDM@D3DERR_INVALIDMATRIX@	; `string'
PUBLIC	??_C@_0BH@CCKJFGJF@D3DERR_TOOMANYVERTICES@	; `string'
PUBLIC	??_C@_0CB@FNAABFGA@D3DERR_CONFLICTINGTEXTUREPALETT@ ; `string'
PUBLIC	??_C@_0BC@EHNKEPFO@D3D_UNKNOWN?5ERROR@		; `string'
_BSS	SEGMENT
?d3d_data@@3UDIRECT_3D_DATA@@A DB 014H DUP (?)		; d3d_data
?d3d@@3UDIRECT_3D_VECTORS@@A DB 0224a0H DUP (?)		; d3d
?d3d_override_render_to_texture@@3HA DD 01H DUP (?)	; d3d_override_render_to_texture
?d3d_initialised@@3HA DD 01H DUP (?)			; d3d_initialised
?d3d_valid@@3HA DD 01H DUP (?)				; d3d_valid
?d3d_in_3d_scene@@3HA DD 01H DUP (?)			; d3d_in_3d_scene
?d3d_use_rgb_device@@3HA DD 01H DUP (?)			; d3d_use_rgb_device
?d3d_square_only_textures@@3HA DD 01H DUP (?)		; d3d_square_only_textures
?d3d_number_of_texture_loads@@3HA DD 01H DUP (?)	; d3d_number_of_texture_loads
?d3d_flat_only_alpha@@3HA DD 01H DUP (?)		; d3d_flat_only_alpha
?d3d_vertex_only_fog@@3HA DD 01H DUP (?)		; d3d_vertex_only_fog
?d3d_mipmap_textures@@3HA DD 01H DUP (?)		; d3d_mipmap_textures
?d3d_texture_system_memory@@3HA DD 01H DUP (?)		; d3d_texture_system_memory
?d3d_texture_video_memory@@3HA DD 01H DUP (?)		; d3d_texture_video_memory
?d3d_modulate@@3HA DD 01H DUP (?)			; d3d_modulate
?d3d_modulate_alpha@@3HA DD 01H DUP (?)			; d3d_modulate_alpha
?d3d_textured_lines@@3HA DD 01H DUP (?)			; d3d_textured_lines
?d3d_trilinear_filtering@@3HA DD 01H DUP (?)		; d3d_trilinear_filtering
?d3d_minimum_texture_width@@3HA DD 01H DUP (?)		; d3d_minimum_texture_width
?d3d_minimum_texture_height@@3HA DD 01H DUP (?)		; d3d_minimum_texture_height
?d3d_maximum_texture_width@@3HA DD 01H DUP (?)		; d3d_maximum_texture_width
?d3d_maximum_texture_height@@3HA DD 01H DUP (?)		; d3d_maximum_texture_height
?d3d_use_dx_pipeline@@3HA DD 01H DUP (?)		; d3d_use_dx_pipeline
?d3d_using_hardware_tnl@@3HA DD 01H DUP (?)		; d3d_using_hardware_tnl
?d3d_total_video_memory@@3HA DD 01H DUP (?)		; d3d_total_video_memory
?d3d_total_video_texture_memory@@3HA DD 01H DUP (?)	; d3d_total_video_texture_memory
?d3d_using_permedia2_chipset@@3HA DD 01H DUP (?)	; d3d_using_permedia2_chipset
?d3d_number_of_executions@@3HA DD 01H DUP (?)		; d3d_number_of_executions
?d3d_vertex_buffer_in_video_memory@@3HA DD 01H DUP (?)	; d3d_vertex_buffer_in_video_memory
_BSS	ENDS
;	COMDAT ??_C@_0BC@EHNKEPFO@D3D_UNKNOWN?5ERROR@
CONST	SEGMENT
??_C@_0BC@EHNKEPFO@D3D_UNKNOWN?5ERROR@ DB 'D3D_UNKNOWN ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@FNAABFGA@D3DERR_CONFLICTINGTEXTUREPALETT@
CONST	SEGMENT
??_C@_0CB@FNAABFGA@D3DERR_CONFLICTINGTEXTUREPALETT@ DB 'D3DERR_CONFLICTIN'
	DB	'GTEXTUREPALETTE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CCKJFGJF@D3DERR_TOOMANYVERTICES@
CONST	SEGMENT
??_C@_0BH@CCKJFGJF@D3DERR_TOOMANYVERTICES@ DB 'D3DERR_TOOMANYVERTICES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@ILKGKDDM@D3DERR_INVALIDMATRIX@
CONST	SEGMENT
??_C@_0BF@ILKGKDDM@D3DERR_INVALIDMATRIX@ DB 'D3DERR_INVALIDMATRIX', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OFKCGAOF@D3DERR_TOOMANYPRIMITIVES@
CONST	SEGMENT
??_C@_0BJ@OFKCGAOF@D3DERR_TOOMANYPRIMITIVES@ DB 'D3DERR_TOOMANYPRIMITIVES'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FJBFGLDN@D3DERR_UNSUPPORTEDTEXTUREFILTER@
CONST	SEGMENT
??_C@_0CA@FJBFGLDN@D3DERR_UNSUPPORTEDTEXTUREFILTER@ DB 'D3DERR_UNSUPPORTE'
	DB	'DTEXTUREFILTER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EMDMGLEF@D3DERR_CONFLICTINGRENDERSTATE@
CONST	SEGMENT
??_C@_0BO@EMDMGLEF@D3DERR_CONFLICTINGRENDERSTATE@ DB 'D3DERR_CONFLICTINGR'
	DB	'ENDERSTATE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MOJGBOAN@D3DERR_UNSUPPORTEDFACTORVALUE@
CONST	SEGMENT
??_C@_0BO@MOJGBOAN@D3DERR_UNSUPPORTEDFACTORVALUE@ DB 'D3DERR_UNSUPPORTEDF'
	DB	'ACTORVALUE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CFPOKCEH@D3DERR_CONFLICTINGTEXTUREFILTER@
CONST	SEGMENT
??_C@_0CA@CFPOKCEH@D3DERR_CONFLICTINGTEXTUREFILTER@ DB 'D3DERR_CONFLICTIN'
	DB	'GTEXTUREFILTER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@INFNOJNF@D3DERR_TOOMANYOPERATIONS@
CONST	SEGMENT
??_C@_0BJ@INFNOJNF@D3DERR_TOOMANYOPERATIONS@ DB 'D3DERR_TOOMANYOPERATIONS'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BJOJBFEN@D3DERR_UNSUPPORTEDALPHAARG@
CONST	SEGMENT
??_C@_0BL@BJOJBFEN@D3DERR_UNSUPPORTEDALPHAARG@ DB 'D3DERR_UNSUPPORTEDALPH'
	DB	'AARG', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@JPKBHPNI@D3DERR_UNSUPPORTEDALPHAOPERATIO@
CONST	SEGMENT
??_C@_0CB@JPKBHPNI@D3DERR_UNSUPPORTEDALPHAOPERATIO@ DB 'D3DERR_UNSUPPORTE'
	DB	'DALPHAOPERATION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CDKLBBHI@D3DERR_UNSUPPORTEDCOLORARG@
CONST	SEGMENT
??_C@_0BL@CDKLBBHI@D3DERR_UNSUPPORTEDCOLORARG@ DB 'D3DERR_UNSUPPORTEDCOLO'
	DB	'RARG', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@CGHHLPPG@D3DERR_UNSUPPORTEDCOLOROPERATIO@
CONST	SEGMENT
??_C@_0CB@CGHHLPPG@D3DERR_UNSUPPORTEDCOLOROPERATIO@ DB 'D3DERR_UNSUPPORTE'
	DB	'DCOLOROPERATION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BPHFHCLE@D3DERR_WRONGTEXTUREFORMAT@
CONST	SEGMENT
??_C@_0BK@BPHFHCLE@D3DERR_WRONGTEXTUREFORMAT@ DB 'D3DERR_WRONGTEXTUREFORM'
	DB	'AT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@OJPGCALL@D3DERR_STENCILBUFFER_NOTPRESENT@
CONST	SEGMENT
??_C@_0CA@OJPGCALL@D3DERR_STENCILBUFFER_NOTPRESENT@ DB 'D3DERR_STENCILBUF'
	DB	'FER_NOTPRESENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FFCPDOHF@D3DERR_ZBUFFER_NOTPRESENT@
CONST	SEGMENT
??_C@_0BK@FFCPDOHF@D3DERR_ZBUFFER_NOTPRESENT@ DB 'D3DERR_ZBUFFER_NOTPRESE'
	DB	'NT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GEECGJAB@D3DERR_VERTEXBUFFERLOCKED@
CONST	SEGMENT
??_C@_0BK@GEECGJAB@D3DERR_VERTEXBUFFERLOCKED@ DB 'D3DERR_VERTEXBUFFERLOCK'
	DB	'ED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KOPJOFIM@D3DERR_VBUF_CREATE_FAILED@
CONST	SEGMENT
??_C@_0BK@KOPJOFIM@D3DERR_VBUF_CREATE_FAILED@ DB 'D3DERR_VBUF_CREATE_FAIL'
	DB	'ED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GLHOJIJ@D3DERR_VERTEXBUFFEROPTIMIZED@
CONST	SEGMENT
??_C@_0BN@GLHOJIJ@D3DERR_VERTEXBUFFEROPTIMIZED@ DB 'D3DERR_VERTEXBUFFEROP'
	DB	'TIMIZED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IKBKGCAC@D3DERR_COLORKEYATTACHED@
CONST	SEGMENT
??_C@_0BI@IKBKGCAC@D3DERR_COLORKEYATTACHED@ DB 'D3DERR_COLORKEYATTACHED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MPPPGACI@D3DERR_INVALIDVERTEXFORMAT@
CONST	SEGMENT
??_C@_0BL@MPPPGACI@D3DERR_INVALIDVERTEXFORMAT@ DB 'D3DERR_INVALIDVERTEXFO'
	DB	'RMAT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JJGBBFEH@D3DERR_NOCURRENTVIEWPORT@
CONST	SEGMENT
??_C@_0BJ@JJGBBFEH@D3DERR_NOCURRENTVIEWPORT@ DB 'D3DERR_NOCURRENTVIEWPORT'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FDPMIOEJ@D3DERR_VIEWPORTHASNODEVICE@
CONST	SEGMENT
??_C@_0BL@FDPMIOEJ@D3DERR_VIEWPORTHASNODEVICE@ DB 'D3DERR_VIEWPORTHASNODE'
	DB	'VICE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FEIHOJMK@D3DERR_VIEWPORTDATANOTSET@
CONST	SEGMENT
??_C@_0BK@FEIHOJMK@D3DERR_VIEWPORTDATANOTSET@ DB 'D3DERR_VIEWPORTDATANOTS'
	DB	'ET', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DMMBGGIJ@D3DERR_NOVIEWPORTS@
CONST	SEGMENT
??_C@_0BD@DMMBGGIJ@D3DERR_NOVIEWPORTS@ DB 'D3DERR_NOVIEWPORTS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ICOADBGJ@D3DERR_NOTINBEGIN@
CONST	SEGMENT
??_C@_0BC@ICOADBGJ@D3DERR_NOTINBEGIN@ DB 'D3DERR_NOTINBEGIN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LNCHBLHP@D3DERR_INBEGIN@
CONST	SEGMENT
??_C@_0P@LNCHBLHP@D3DERR_INBEGIN@ DB 'D3DERR_INBEGIN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PAGCGJDG@D3DERR_SCENE_END_FAILED@
CONST	SEGMENT
??_C@_0BI@PAGCGJDG@D3DERR_SCENE_END_FAILED@ DB 'D3DERR_SCENE_END_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HIPOGPOB@D3DERR_SCENE_BEGIN_FAILED@
CONST	SEGMENT
??_C@_0BK@HIPOGPOB@D3DERR_SCENE_BEGIN_FAILED@ DB 'D3DERR_SCENE_BEGIN_FAIL'
	DB	'ED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FPAJMCGE@D3DERR_SCENE_NOT_IN_SCENE@
CONST	SEGMENT
??_C@_0BK@FPAJMCGE@D3DERR_SCENE_NOT_IN_SCENE@ DB 'D3DERR_SCENE_NOT_IN_SCE'
	DB	'NE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EGAAIAPO@D3DERR_SCENE_IN_SCENE@
CONST	SEGMENT
??_C@_0BG@EGAAIAPO@D3DERR_SCENE_IN_SCENE@ DB 'D3DERR_SCENE_IN_SCENE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BMBKCJNB@D3DERR_LIGHTNOTINTHISVIEWPORT@
CONST	SEGMENT
??_C@_0BO@BMBKCJNB@D3DERR_LIGHTNOTINTHISVIEWPORT@ DB 'D3DERR_LIGHTNOTINTH'
	DB	'ISVIEWPORT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GLFNFJK@D3DERR_LIGHTHASVIEWPORT@
CONST	SEGMENT
??_C@_0BI@GLFNFJK@D3DERR_LIGHTHASVIEWPORT@ DB 'D3DERR_LIGHTHASVIEWPORT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@POLEELME@D3DERR_LIGHT_SET_FAILED@
CONST	SEGMENT
??_C@_0BI@POLEELME@D3DERR_LIGHT_SET_FAILED@ DB 'D3DERR_LIGHT_SET_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HAKLCOCO@D3DERR_SURFACENOTINVIDMEM@
CONST	SEGMENT
??_C@_0BK@HAKLCOCO@D3DERR_SURFACENOTINVIDMEM@ DB 'D3DERR_SURFACENOTINVIDM'
	DB	'EM', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KALLEADK@D3DERR_ZBUFF_NEEDS_VIDEOMEMORY@
CONST	SEGMENT
??_C@_0BP@KALLEADK@D3DERR_ZBUFF_NEEDS_VIDEOMEMORY@ DB 'D3DERR_ZBUFF_NEEDS'
	DB	'_VIDEOMEMORY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GNDHJEMJ@D3DERR_ZBUFF_NEEDS_SYSTEMMEMORY@
CONST	SEGMENT
??_C@_0CA@GNDHJEMJ@D3DERR_ZBUFF_NEEDS_SYSTEMMEMORY@ DB 'D3DERR_ZBUFF_NEED'
	DB	'S_SYSTEMMEMORY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NDHIPINM@D3DERR_INVALIDPALETTE@
CONST	SEGMENT
??_C@_0BG@NDHIPINM@D3DERR_INVALIDPALETTE@ DB 'D3DERR_INVALIDPALETTE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PNIIBEMO@D3DERR_MATERIAL_GETDATA_FAILED@
CONST	SEGMENT
??_C@_0BP@PNIIBEMO@D3DERR_MATERIAL_GETDATA_FAILED@ DB 'D3DERR_MATERIAL_GE'
	DB	'TDATA_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DDJGOOOC@D3DERR_MATERIAL_SETDATA_FAILED@
CONST	SEGMENT
??_C@_0BP@DDJGOOOC@D3DERR_MATERIAL_SETDATA_FAILED@ DB 'D3DERR_MATERIAL_SE'
	DB	'TDATA_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GCNMKNKP@D3DERR_MATERIAL_DESTROY_FAILED@
CONST	SEGMENT
??_C@_0BP@GCNMKNKP@D3DERR_MATERIAL_DESTROY_FAILED@ DB 'D3DERR_MATERIAL_DE'
	DB	'STROY_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EAEEHEME@D3DERR_MATERIAL_CREATE_FAILED@
CONST	SEGMENT
??_C@_0BO@EAEEHEME@D3DERR_MATERIAL_CREATE_FAILED@ DB 'D3DERR_MATERIAL_CRE'
	DB	'ATE_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GHFAPHHM@D3DERR_INVALIDRAMPTEXTURE@
CONST	SEGMENT
??_C@_0BK@GHFAPHHM@D3DERR_INVALIDRAMPTEXTURE@ DB 'D3DERR_INVALIDRAMPTEXTU'
	DB	'RE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FOKCPFKD@D3DERR_TEXTURE_BADSIZE@
CONST	SEGMENT
??_C@_0BH@FOKCPFKD@D3DERR_TEXTURE_BADSIZE@ DB 'D3DERR_TEXTURE_BADSIZE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IPDJKALI@D3DERR_INVALIDVERTEXTYPE@
CONST	SEGMENT
??_C@_0BJ@IPDJKALI@D3DERR_INVALIDVERTEXTYPE@ DB 'D3DERR_INVALIDVERTEXTYPE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BHBKHMAF@D3DERR_INVALIDPRIMITIVETYPE@
CONST	SEGMENT
??_C@_0BM@BHBKHMAF@D3DERR_INVALIDPRIMITIVETYPE@ DB 'D3DERR_INVALIDPRIMITI'
	DB	'VETYPE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CDIKJFGJ@D3DERR_INVALIDCURRENTVIEWPORT@
CONST	SEGMENT
??_C@_0BO@CDIKJFGJ@D3DERR_INVALIDCURRENTVIEWPORT@ DB 'D3DERR_INVALIDCURRE'
	DB	'NTVIEWPORT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DCNECMNP@D3DERR_SETVIEWPORTDATA_FAILED@
CONST	SEGMENT
??_C@_0BO@DCNECMNP@D3DERR_SETVIEWPORTDATA_FAILED@ DB 'D3DERR_SETVIEWPORTD'
	DB	'ATA_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PCOBMBKD@D3DERR_MATRIX_GETDATA_FAILED@
CONST	SEGMENT
??_C@_0BN@PCOBMBKD@D3DERR_MATRIX_GETDATA_FAILED@ DB 'D3DERR_MATRIX_GETDAT'
	DB	'A_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DMPPDLIP@D3DERR_MATRIX_SETDATA_FAILED@
CONST	SEGMENT
??_C@_0BN@DMPPDLIP@D3DERR_MATRIX_SETDATA_FAILED@ DB 'D3DERR_MATRIX_SETDAT'
	DB	'A_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GNLFHIMC@D3DERR_MATRIX_DESTROY_FAILED@
CONST	SEGMENT
??_C@_0BN@GNLFHIMC@D3DERR_MATRIX_DESTROY_FAILED@ DB 'D3DERR_MATRIX_DESTRO'
	DB	'Y_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@CJGICNIN@D3DERR_MATRIX_CREATE_FAILED@
CONST	SEGMENT
??_C@_0BM@CJGICNIN@D3DERR_MATRIX_CREATE_FAILED@ DB 'D3DERR_MATRIX_CREATE_'
	DB	'FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LAPCIDO@D3DERR_TEXTURE_GETSURF_FAILED@
CONST	SEGMENT
??_C@_0BO@LAPCIDO@D3DERR_TEXTURE_GETSURF_FAILED@ DB 'D3DERR_TEXTURE_GETSU'
	DB	'RF_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EFKDJCCI@D3DERR_TEXTURE_NOT_LOCKED@
CONST	SEGMENT
??_C@_0BK@EFKDJCCI@D3DERR_TEXTURE_NOT_LOCKED@ DB 'D3DERR_TEXTURE_NOT_LOCK'
	DB	'ED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OKFJGHJB@D3DERR_TEXTURE_LOCKED@
CONST	SEGMENT
??_C@_0BG@OKFJGHJB@D3DERR_TEXTURE_LOCKED@ DB 'D3DERR_TEXTURE_LOCKED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BFDHGJEF@D3DERR_TEXTURE_SWAP_FAILED@
CONST	SEGMENT
??_C@_0BL@BFDHGJEF@D3DERR_TEXTURE_SWAP_FAILED@ DB 'D3DERR_TEXTURE_SWAP_FA'
	DB	'ILED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IOKCCNDL@D3DERR_TEXTURE_LOAD_FAILED@
CONST	SEGMENT
??_C@_0BL@IOKCCNDL@D3DERR_TEXTURE_LOAD_FAILED@ DB 'D3DERR_TEXTURE_LOAD_FA'
	DB	'ILED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NMKLGHDH@D3DERR_TEXTURE_UNLOCK_FAILED@
CONST	SEGMENT
??_C@_0BN@NMKLGHDH@D3DERR_TEXTURE_UNLOCK_FAILED@ DB 'D3DERR_TEXTURE_UNLOC'
	DB	'K_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FFOODCNH@D3DERR_TEXTURE_LOCK_FAILED@
CONST	SEGMENT
??_C@_0BL@FFOODCNH@D3DERR_TEXTURE_LOCK_FAILED@ DB 'D3DERR_TEXTURE_LOCK_FA'
	DB	'ILED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JLILDPOL@D3DERR_TEXTURE_DESTROY_FAILED@
CONST	SEGMENT
??_C@_0BO@JLILDPOL@D3DERR_TEXTURE_DESTROY_FAILED@ DB 'D3DERR_TEXTURE_DEST'
	DB	'ROY_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KOAJFPFI@D3DERR_TEXTURE_CREATE_FAILED@
CONST	SEGMENT
??_C@_0BN@KOAJFPFI@D3DERR_TEXTURE_CREATE_FAILED@ DB 'D3DERR_TEXTURE_CREAT'
	DB	'E_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GLBGKNEI@D3DERR_TEXTURE_NO_SUPPORT@
CONST	SEGMENT
??_C@_0BK@GLBGKNEI@D3DERR_TEXTURE_NO_SUPPORT@ DB 'D3DERR_TEXTURE_NO_SUPPO'
	DB	'RT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BMLEGCIJ@D3DERR_EXECUTE_CLIPPED_FAILED@
CONST	SEGMENT
??_C@_0BO@BMLEGCIJ@D3DERR_EXECUTE_CLIPPED_FAILED@ DB 'D3DERR_EXECUTE_CLIP'
	DB	'PED_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JCAMDLH@D3DERR_EXECUTE_FAILED@
CONST	SEGMENT
??_C@_0BG@JCAMDLH@D3DERR_EXECUTE_FAILED@ DB 'D3DERR_EXECUTE_FAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LKPIANLL@D3DERR_EXECUTE_NOT_LOCKED@
CONST	SEGMENT
??_C@_0BK@LKPIANLL@D3DERR_EXECUTE_NOT_LOCKED@ DB 'D3DERR_EXECUTE_NOT_LOCK'
	DB	'ED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EADNNNJB@D3DERR_EXECUTE_LOCKED@
CONST	SEGMENT
??_C@_0BG@EADNNNJB@D3DERR_EXECUTE_LOCKED@ DB 'D3DERR_EXECUTE_LOCKED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CJJOHPMI@D3DERR_EXECUTE_UNLOCK_FAILED@
CONST	SEGMENT
??_C@_0BN@CJJOHPMI@D3DERR_EXECUTE_UNLOCK_FAILED@ DB 'D3DERR_EXECUTE_UNLOC'
	DB	'K_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DMBHKLLG@D3DERR_EXECUTE_LOCK_FAILED@
CONST	SEGMENT
??_C@_0BL@DMBHKLLG@D3DERR_EXECUTE_LOCK_FAILED@ DB 'D3DERR_EXECUTE_LOCK_FA'
	DB	'ILED', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LGHMOFHO@D3DERR_EXECUTE_DESTROY_FAILED@
CONST	SEGMENT
??_C@_0BO@LGHMOFHO@D3DERR_EXECUTE_DESTROY_FAILED@ DB 'D3DERR_EXECUTE_DEST'
	DB	'ROY_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FLDMEHKH@D3DERR_EXECUTE_CREATE_FAILED@
CONST	SEGMENT
??_C@_0BN@FLDMEHKH@D3DERR_EXECUTE_CREATE_FAILED@ DB 'D3DERR_EXECUTE_CREAT'
	DB	'E_FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EOAANMDP@D3DERR_DEVICEAGGREGATED@
CONST	SEGMENT
??_C@_0BI@EOAANMDP@D3DERR_DEVICEAGGREGATED@ DB 'D3DERR_DEVICEAGGREGATED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KKFHIJCP@D3DERR_INITFAILED@
CONST	SEGMENT
??_C@_0BC@KKFHIJCP@D3DERR_INITFAILED@ DB 'D3DERR_INITFAILED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@ODDFEDPK@D3DERR_INVALID_DEVICE@
CONST	SEGMENT
??_C@_0BG@ODDFEDPK@D3DERR_INVALID_DEVICE@ DB 'D3DERR_INVALID_DEVICE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HFAGAFDC@D3DERR_BADMINORVERSION@
CONST	SEGMENT
??_C@_0BH@HFAGAFDC@D3DERR_BADMINORVERSION@ DB 'D3DERR_BADMINORVERSION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MDNDAAEO@D3DERR_BADMAJORVERSION@
CONST	SEGMENT
??_C@_0BH@MDNDAAEO@D3DERR_BADMAJORVERSION@ DB 'D3DERR_BADMAJORVERSION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06GGPLJKG@D3D_OK@
CONST	SEGMENT
??_C@_06GGPLJKG@D3D_OK@ DB 'D3D_OK', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
?d3d_can_render_to_texture@@3HA DD 01H			; d3d_can_render_to_texture
	ORG $+4
?d3d_error_table@@3PAUdirect_3d_errors@@A DD 00H	; d3d_error_table
	DD	FLAT:??_C@_06GGPLJKG@D3D_OK@
	DD	0887602bcH
	DD	FLAT:??_C@_0BH@MDNDAAEO@D3DERR_BADMAJORVERSION@
	DD	0887602bdH
	DD	FLAT:??_C@_0BH@HFAGAFDC@D3DERR_BADMINORVERSION@
	DD	0887602c1H
	DD	FLAT:??_C@_0BG@ODDFEDPK@D3DERR_INVALID_DEVICE@
	DD	0887602c2H
	DD	FLAT:??_C@_0BC@KKFHIJCP@D3DERR_INITFAILED@
	DD	0887602c3H
	DD	FLAT:??_C@_0BI@EOAANMDP@D3DERR_DEVICEAGGREGATED@
	DD	0887602c6H
	DD	FLAT:??_C@_0BN@FLDMEHKH@D3DERR_EXECUTE_CREATE_FAILED@
	DD	0887602c7H
	DD	FLAT:??_C@_0BO@LGHMOFHO@D3DERR_EXECUTE_DESTROY_FAILED@
	DD	0887602c8H
	DD	FLAT:??_C@_0BL@DMBHKLLG@D3DERR_EXECUTE_LOCK_FAILED@
	DD	0887602c9H
	DD	FLAT:??_C@_0BN@CJJOHPMI@D3DERR_EXECUTE_UNLOCK_FAILED@
	DD	0887602caH
	DD	FLAT:??_C@_0BG@EADNNNJB@D3DERR_EXECUTE_LOCKED@
	DD	0887602cbH
	DD	FLAT:??_C@_0BK@LKPIANLL@D3DERR_EXECUTE_NOT_LOCKED@
	DD	0887602ccH
	DD	FLAT:??_C@_0BG@JCAMDLH@D3DERR_EXECUTE_FAILED@
	DD	0887602cdH
	DD	FLAT:??_C@_0BO@BMLEGCIJ@D3DERR_EXECUTE_CLIPPED_FAILED@
	DD	0887602d0H
	DD	FLAT:??_C@_0BK@GLBGKNEI@D3DERR_TEXTURE_NO_SUPPORT@
	DD	0887602d1H
	DD	FLAT:??_C@_0BN@KOAJFPFI@D3DERR_TEXTURE_CREATE_FAILED@
	DD	0887602d2H
	DD	FLAT:??_C@_0BO@JLILDPOL@D3DERR_TEXTURE_DESTROY_FAILED@
	DD	0887602d3H
	DD	FLAT:??_C@_0BL@FFOODCNH@D3DERR_TEXTURE_LOCK_FAILED@
	DD	0887602d4H
	DD	FLAT:??_C@_0BN@NMKLGHDH@D3DERR_TEXTURE_UNLOCK_FAILED@
	DD	0887602d5H
	DD	FLAT:??_C@_0BL@IOKCCNDL@D3DERR_TEXTURE_LOAD_FAILED@
	DD	0887602d6H
	DD	FLAT:??_C@_0BL@BFDHGJEF@D3DERR_TEXTURE_SWAP_FAILED@
	DD	0887602d7H
	DD	FLAT:??_C@_0BG@OKFJGHJB@D3DERR_TEXTURE_LOCKED@
	DD	0887602d8H
	DD	FLAT:??_C@_0BK@EFKDJCCI@D3DERR_TEXTURE_NOT_LOCKED@
	DD	0887602d9H
	DD	FLAT:??_C@_0BO@LAPCIDO@D3DERR_TEXTURE_GETSURF_FAILED@
	DD	0887602daH
	DD	FLAT:??_C@_0BM@CJGICNIN@D3DERR_MATRIX_CREATE_FAILED@
	DD	0887602dbH
	DD	FLAT:??_C@_0BN@GNLFHIMC@D3DERR_MATRIX_DESTROY_FAILED@
	DD	0887602dcH
	DD	FLAT:??_C@_0BN@DMPPDLIP@D3DERR_MATRIX_SETDATA_FAILED@
	DD	0887602ddH
	DD	FLAT:??_C@_0BN@PCOBMBKD@D3DERR_MATRIX_GETDATA_FAILED@
	DD	0887602deH
	DD	FLAT:??_C@_0BO@DCNECMNP@D3DERR_SETVIEWPORTDATA_FAILED@
	DD	0887602dfH
	DD	FLAT:??_C@_0BO@CDIKJFGJ@D3DERR_INVALIDCURRENTVIEWPORT@
	DD	0887602e0H
	DD	FLAT:??_C@_0BM@BHBKHMAF@D3DERR_INVALIDPRIMITIVETYPE@
	DD	0887602e1H
	DD	FLAT:??_C@_0BJ@IPDJKALI@D3DERR_INVALIDVERTEXTYPE@
	DD	0887602e2H
	DD	FLAT:??_C@_0BH@FOKCPFKD@D3DERR_TEXTURE_BADSIZE@
	DD	0887602e3H
	DD	FLAT:??_C@_0BK@GHFAPHHM@D3DERR_INVALIDRAMPTEXTURE@
	DD	0887602e4H
	DD	FLAT:??_C@_0BO@EAEEHEME@D3DERR_MATERIAL_CREATE_FAILED@
	DD	0887602e5H
	DD	FLAT:??_C@_0BP@GCNMKNKP@D3DERR_MATERIAL_DESTROY_FAILED@
	DD	0887602e6H
	DD	FLAT:??_C@_0BP@DDJGOOOC@D3DERR_MATERIAL_SETDATA_FAILED@
	DD	0887602e7H
	DD	FLAT:??_C@_0BP@PNIIBEMO@D3DERR_MATERIAL_GETDATA_FAILED@
	DD	0887602e8H
	DD	FLAT:??_C@_0BG@NDHIPINM@D3DERR_INVALIDPALETTE@
	DD	0887602e9H
	DD	FLAT:??_C@_0CA@GNDHJEMJ@D3DERR_ZBUFF_NEEDS_SYSTEMMEMORY@
	DD	0887602eaH
	DD	FLAT:??_C@_0BP@KALLEADK@D3DERR_ZBUFF_NEEDS_VIDEOMEMORY@
	DD	0887602ebH
	DD	FLAT:??_C@_0BK@HAKLCOCO@D3DERR_SURFACENOTINVIDMEM@
	DD	0887602eeH
	DD	FLAT:??_C@_0BI@POLEELME@D3DERR_LIGHT_SET_FAILED@
	DD	0887602efH
	DD	FLAT:??_C@_0BI@GLFNFJK@D3DERR_LIGHTHASVIEWPORT@
	DD	0887602f0H
	DD	FLAT:??_C@_0BO@BMBKCJNB@D3DERR_LIGHTNOTINTHISVIEWPORT@
	DD	0887602f8H
	DD	FLAT:??_C@_0BG@EGAAIAPO@D3DERR_SCENE_IN_SCENE@
	DD	0887602f9H
	DD	FLAT:??_C@_0BK@FPAJMCGE@D3DERR_SCENE_NOT_IN_SCENE@
	DD	0887602faH
	DD	FLAT:??_C@_0BK@HIPOGPOB@D3DERR_SCENE_BEGIN_FAILED@
	DD	0887602fbH
	DD	FLAT:??_C@_0BI@PAGCGJDG@D3DERR_SCENE_END_FAILED@
	DD	088760302H
	DD	FLAT:??_C@_0P@LNCHBLHP@D3DERR_INBEGIN@
	DD	088760303H
	DD	FLAT:??_C@_0BC@ICOADBGJ@D3DERR_NOTINBEGIN@
	DD	088760304H
	DD	FLAT:??_C@_0BD@DMMBGGIJ@D3DERR_NOVIEWPORTS@
	DD	088760305H
	DD	FLAT:??_C@_0BK@FEIHOJMK@D3DERR_VIEWPORTDATANOTSET@
	DD	088760306H
	DD	FLAT:??_C@_0BL@FDPMIOEJ@D3DERR_VIEWPORTHASNODEVICE@
	DD	088760307H
	DD	FLAT:??_C@_0BJ@JJGBBFEH@D3DERR_NOCURRENTVIEWPORT@
	DD	088760800H
	DD	FLAT:??_C@_0BL@MPPPGACI@D3DERR_INVALIDVERTEXFORMAT@
	DD	088760802H
	DD	FLAT:??_C@_0BI@IKBKGCAC@D3DERR_COLORKEYATTACHED@
	DD	08876080cH
	DD	FLAT:??_C@_0BN@GLHOJIJ@D3DERR_VERTEXBUFFEROPTIMIZED@
	DD	08876080dH
	DD	FLAT:??_C@_0BK@KOPJOFIM@D3DERR_VBUF_CREATE_FAILED@
	DD	08876080eH
	DD	FLAT:??_C@_0BK@GEECGJAB@D3DERR_VERTEXBUFFERLOCKED@
	DD	088760816H
	DD	FLAT:??_C@_0BK@FFCPDOHF@D3DERR_ZBUFFER_NOTPRESENT@
	DD	088760817H
	DD	FLAT:??_C@_0CA@OJPGCALL@D3DERR_STENCILBUFFER_NOTPRESENT@
	DD	088760818H
	DD	FLAT:??_C@_0BK@BPHFHCLE@D3DERR_WRONGTEXTUREFORMAT@
	DD	088760819H
	DD	FLAT:??_C@_0CB@CGHHLPPG@D3DERR_UNSUPPORTEDCOLOROPERATIO@
	DD	08876081aH
	DD	FLAT:??_C@_0BL@CDKLBBHI@D3DERR_UNSUPPORTEDCOLORARG@
	DD	08876081bH
	DD	FLAT:??_C@_0CB@JPKBHPNI@D3DERR_UNSUPPORTEDALPHAOPERATIO@
	DD	08876081cH
	DD	FLAT:??_C@_0BL@BJOJBFEN@D3DERR_UNSUPPORTEDALPHAARG@
	DD	08876081dH
	DD	FLAT:??_C@_0BJ@INFNOJNF@D3DERR_TOOMANYOPERATIONS@
	DD	08876081eH
	DD	FLAT:??_C@_0CA@CFPOKCEH@D3DERR_CONFLICTINGTEXTUREFILTER@
	DD	08876081fH
	DD	FLAT:??_C@_0BO@MOJGBOAN@D3DERR_UNSUPPORTEDFACTORVALUE@
	DD	088760821H
	DD	FLAT:??_C@_0BO@EMDMGLEF@D3DERR_CONFLICTINGRENDERSTATE@
	DD	088760822H
	DD	FLAT:??_C@_0CA@FJBFGLDN@D3DERR_UNSUPPORTEDTEXTUREFILTER@
	DD	088760823H
	DD	FLAT:??_C@_0BJ@OFKCGAOF@D3DERR_TOOMANYPRIMITIVES@
	DD	088760824H
	DD	FLAT:??_C@_0BF@ILKGKDDM@D3DERR_INVALIDMATRIX@
	DD	088760825H
	DD	FLAT:??_C@_0BH@CCKJFGJF@D3DERR_TOOMANYVERTICES@
	DD	088760826H
	DD	FLAT:??_C@_0CB@FNAABFGA@D3DERR_CONFLICTINGTEXTUREPALETT@
	DD	0ffffffffH
	DD	FLAT:??_C@_0BC@EHNKEPFO@D3D_UNKNOWN?5ERROR@
_DATA	ENDS
PUBLIC	?initialise_direct_3d@@YGHXZ			; initialise_direct_3d
PUBLIC	?set_d3d_capabilities@@YGXPAU_D3DDeviceDesc7@@@Z ; set_d3d_capabilities
PUBLIC	?d3d_release_objects@@YGXXZ			; d3d_release_objects
PUBLIC	?d3d_restore_objects@@YGXH@Z			; d3d_restore_objects
PUBLIC	?create_d3d_vertex_buffers@@YGXXZ		; create_d3d_vertex_buffers
PUBLIC	?destroy_d3d_vertex_buffers@@YGXXZ		; destroy_d3d_vertex_buffers
PUBLIC	?recreate_d3d@@YGXXZ				; recreate_d3d
PUBLIC	?get_d3d_error_message@@YGPBDJ@Z		; get_d3d_error_message
PUBLIC	?d3d_begin_scene@@YGHXZ				; d3d_begin_scene
PUBLIC	?d3d_end_scene@@YGHXZ				; d3d_end_scene
PUBLIC	?d3d_render_target_recreated@@YGXXZ		; d3d_render_target_recreated
PUBLIC	?register_restore_vb_routine@@YGXP6GXXZ@Z	; register_restore_vb_routine
PUBLIC	?check_valid_direct_3d_device_exists@@YGHXZ	; check_valid_direct_3d_device_exists
PUBLIC	??$min@H@std@@YGABHABH0@Z			; std::min<int>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??initialise_direct_3d@@YGHXZ@4JA ; `initialise_direct_3d'::`1'::__LINE__Var
PUBLIC	??_C@_0DE@NDIAJLDF@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0CD@LKGNIMMJ@get_graphics_system_initialised@ ; `string'
PUBLIC	?__LINE__Var@?0??register_restore_vb_routine@@YGXP6GXXZ@Z@4JA ; `register_restore_vb_routine'::`1'::__LINE__Var
PUBLIC	??_C@_0BM@HDFEFGML@?$CBrestore_vb_friend_function@ ; `string'
PUBLIC	??_C@_0BJ@PHIOMJNL@Unable?5to?5create?5TnL?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0BF@KEJBIACI@Setting?5d3d?5hardware@	; `string'
PUBLIC	??_C@_0BP@OGFNALJO@Error?5creating?5d3d?5device2?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0CK@CDHJKEKF@Error?5getting?5d3d?5device?5capabi@ ; `string'
PUBLIC	??_C@_0CA@DMNIBGCO@Error?5setting?5render?5target?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0BF@MCCAOKLG@Set?5viewport?5success@	; `string'
PUBLIC	??_C@_0BD@KPJAEFKI@SETTING?5NON?5RENDER@	; `string'
PUBLIC	??_C@_0CC@FJEMJCHC@Unable?5to?5release?5d3d?5device7?3?5@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	__real@3f800000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	_memset:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?register_exit_function@@YGXP6GXXZ@Z:PROC	; register_exit_function
EXTRN	?register_post_activate_message_function@@YGHP6GXH@Z@Z:PROC ; register_post_activate_message_function
EXTRN	?set_fpu_rounding_mode_zero@@YGXXZ:PROC		; set_fpu_rounding_mode_zero
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?get_graphics_system_initialised@@YGHXZ:PROC	; get_graphics_system_initialised
EXTRN	?get_ddraw_error_message@@YGPBDJ@Z:PROC		; get_ddraw_error_message
EXTRN	?restore_graphics_screens@@YGXXZ:PROC		; restore_graphics_screens
EXTRN	?reset_primitives@@YGXXZ:PROC			; reset_primitives
EXTRN	?flush_triangle_primitives@@YGXXZ:PROC		; flush_triangle_primitives
EXTRN	?flush_line_primitives@@YGXXZ:PROC		; flush_line_primitives
EXTRN	?finalise_primitives@@YGXXZ:PROC		; finalise_primitives
EXTRN	?initialise_d3d_state@@YGXXZ:PROC		; initialise_d3d_state
EXTRN	?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z:PROC	; set_d3d_alpha_fog_zbuffer
EXTRN	?free_all_hardware_textures@@YGXXZ:PROC		; free_all_hardware_textures
EXTRN	?f3d_set_viewport@@YGHPAU_D3DVIEWPORT7@@@Z:PROC	; f3d_set_viewport
EXTRN	?f3d_vertex_create@@YGXPAU_D3DVERTEXBUFFERDESC@@PAPAUIDirect3DVertexBuffer7@@@Z:PROC ; f3d_vertex_create
EXTRN	?f3d_vertex_release@@YGXPAPAUIDirect3DVertexBuffer7@@@Z:PROC ; f3d_vertex_release
EXTRN	?f3d_scene_begin@@YGHXZ:PROC			; f3d_scene_begin
EXTRN	?f3d_scene_end@@YGHXZ:PROC			; f3d_scene_end
EXTRN	_IID_IDirect3DRGBDevice:BYTE
EXTRN	_IID_IDirect3DHALDevice:BYTE
EXTRN	_IID_IDirect3DTnLHalDevice:BYTE
EXTRN	?application_colour_table@@3PAUtagPALETTEENTRY@@A:BYTE ; application_colour_table
EXTRN	?application_video_width@@3HA:DWORD		; application_video_width
EXTRN	?application_video_height@@3HA:DWORD		; application_video_height
EXTRN	?ddraw@@3Udirect_draw_data@@A:BYTE		; ddraw
EXTRN	?current_display_device@@3PAUDD_DISPLAY_DEVICE@@A:DWORD ; current_display_device
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?restore_vb_friend_function@@3P6GXXZA DD 01H DUP (?)	; restore_vb_friend_function
?render_target_set@?1??initialise_direct_3d_driver@@YGHXZ@4HA DD 01H DUP (?) ; `initialise_direct_3d_driver'::`2'::render_target_set
_BSS	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FJEMJCHC@Unable?5to?5release?5d3d?5device7?3?5@
CONST	SEGMENT
??_C@_0CC@FJEMJCHC@Unable?5to?5release?5d3d?5device7?3?5@ DB 'Unable to r'
	DB	'elease d3d device7: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KPJAEFKI@SETTING?5NON?5RENDER@
CONST	SEGMENT
??_C@_0BD@KPJAEFKI@SETTING?5NON?5RENDER@ DB 'SETTING NON RENDER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MCCAOKLG@Set?5viewport?5success@
CONST	SEGMENT
??_C@_0BF@MCCAOKLG@Set?5viewport?5success@ DB 'Set viewport success', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DMNIBGCO@Error?5setting?5render?5target?3?5?$CFs@
CONST	SEGMENT
??_C@_0CA@DMNIBGCO@Error?5setting?5render?5target?3?5?$CFs@ DB 'Error set'
	DB	'ting render target: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@CDHJKEKF@Error?5getting?5d3d?5device?5capabi@
CONST	SEGMENT
??_C@_0CK@CDHJKEKF@Error?5getting?5d3d?5device?5capabi@ DB 'Error getting'
	DB	' d3d device capabilities: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OGFNALJO@Error?5creating?5d3d?5device2?3?5?$CFs@
CONST	SEGMENT
??_C@_0BP@OGFNALJO@Error?5creating?5d3d?5device2?3?5?$CFs@ DB 'Error crea'
	DB	'ting d3d device2: %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KEJBIACI@Setting?5d3d?5hardware@
CONST	SEGMENT
??_C@_0BF@KEJBIACI@Setting?5d3d?5hardware@ DB 'Setting d3d hardware', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PHIOMJNL@Unable?5to?5create?5TnL?3?5?$CFs@
CONST	SEGMENT
??_C@_0BJ@PHIOMJNL@Unable?5to?5create?5TnL?3?5?$CFs@ DB 'Unable to create'
	DB	' TnL: %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HDFEFGML@?$CBrestore_vb_friend_function@
CONST	SEGMENT
??_C@_0BM@HDFEFGML@?$CBrestore_vb_friend_function@ DB '!restore_vb_friend'
	DB	'_function', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??register_restore_vb_routine@@YGXP6GXXZ@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??register_restore_vb_routine@@YGXP6GXXZ@Z@4JA DD 011aH ; `register_restore_vb_routine'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CD@LKGNIMMJ@get_graphics_system_initialised@
CONST	SEGMENT
??_C@_0CD@LKGNIMMJ@get_graphics_system_initialised@ DB 'get_graphics_syst'
	DB	'em_initialised ()', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@NDIAJLDF@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DE@NDIAJLDF@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\graphics\d3d.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??initialise_direct_3d@@YGHXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??initialise_direct_3d@@YGHXZ@4JA DD 0eaH ; `initialise_direct_3d'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@H@std@@YGABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@H@std@@YGABHABH0@Z PROC				; std::min<int>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	7d 61		 jge	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00015	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001f	7c 02		 jl	 SHORT $LN7@min
  00021	eb 4a		 jmp	 SHORT $LN2@min
$LN7@min:
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002d	6a 00		 push	 0
  0002f	68 36 15 00 00	 push	 5430			; 00001536H
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00039	6a 02		 push	 2
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 01		 jne	 SHORT $LN12@min
  00049	cc		 int	 3
$LN12@min:
  0004a	6a 00		 push	 0
  0004c	68 36 15 00 00	 push	 5430			; 00001536H
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00066	83 c4 14	 add	 esp, 20			; 00000014H
  00069	33 c0		 xor	 eax, eax
  0006b	75 b6		 jne	 SHORT $LN7@min
$LN2@min:
  0006d	33 c0		 xor	 eax, eax
  0006f	75 a4		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00071	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00074	eb 03		 jmp	 SHORT $LN11@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  00076	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN11@min:

; 5435 : 	}

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
??$min@H@std@@YGABHABH0@Z ENDP				; std::min<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3d.c
;	COMDAT ?check_valid_direct_3d_device_exists@@YGHXZ
_TEXT	SEGMENT
?check_valid_direct_3d_device_exists@@YGHXZ PROC	; check_valid_direct_3d_device_exists, COMDAT

; 294  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 295  : 	/*
; 296  : 
; 297  : 	D3DFINDDEVICESEARCH
; 298  : 		device_search_capabilities;
; 299  : 
; 300  : 	D3DFINDDEVICERESULT
; 301  : 		device_search_result;
; 302  : 
; 303  : 	HRESULT
; 304  : 		ret;
; 305  : 
; 306  : 	//
; 307  : 	// We only match to hardware RGB drivers, with the following constraints:
; 308  : 	//
; 309  : 	//
; 310  : 	// Compulsory features necessary to run the game:
; 311  : 	//
; 312  : 	//		CULL NONE
; 313  : 	//
; 314  : 	//		ZCOMPARE ALWAYS & ZCOMPARE GREATEREQUAL
; 315  : 	//
; 316  : 	//		SRCBLEND SRCALPHA
; 317  : 	//		DESTBLEND INVSRCALPHA
; 318  : 	//
; 319  : 	//		ALPHA FLAT BLEND
; 320  : 	//		COLOUR FLAT RGB
; 321  : 	//		COLOUR GOURAUD RGB
; 322  : 	//
; 323  : 	//		TEXTURE ALPHA & TEXTURE PERSPECTIVE
; 324  : 	//
; 325  : 	//		TEXTURE BLEND MODULATE & TEXTURE BLEND MODULATE ALPHA
; 326  : 	//
; 327  : 	//
; 328  : 	// After finding the 3d device, we have to check for the following:
; 329  : 	//
; 330  : 	//		Fog is supported as either fog table, or fog vertex.
; 331  : 	//
; 332  : 
; 333  : 
; 334  : 	//
; 335  : 	// Set the size of the structures we are using.
; 336  : 	//
; 337  : 
; 338  : 	device_search_capabilities.dwSize = sizeof ( D3DFINDDEVICESEARCH );
; 339  : 
; 340  : 	device_search_result.dwSize = sizeof ( D3DFINDDEVICERESULT );
; 341  : 
; 342  : 	device_search_capabilities.dwFlags = (
; 343  : 														D3DFDS_COLORMODEL | D3DFDS_DSTBLENDCAPS | D3DFDS_HARDWARE |
; 344  : 														D3DFDS_LINES | D3DFDS_MISCCAPS | D3DFDS_SHADECAPS |
; 345  : 														D3DFDS_SRCBLENDCAPS | D3DFDS_TEXTUREBLENDCAPS | D3DFDS_TEXTURECAPS |
; 346  : 														D3DFDS_TRIANGLES | D3DFDS_ZCMPCAPS
; 347  : 														);
; 348  : 
; 349  : 	device_search_capabilities.bHardware = TRUE;
; 350  : 
; 351  : 	device_search_capabilities.dcmColorModel = D3DCOLOR_RGB;
; 352  : 
; 353  : 	device_search_capabilities.dpcPrimCaps.dwSize = sizeof ( D3DPRIMCAPS );
; 354  : 
; 355  : 	device_search_capabilities.dpcPrimCaps.dwMiscCaps = D3DPMISCCAPS_CULLNONE;
; 356  : 
; 357  : 
; 358  : 	device_search_capabilities.dpcPrimCaps.dwZCmpCaps = D3DPCMPCAPS_ALWAYS | D3DPCMPCAPS_GREATEREQUAL;
; 359  : 
; 360  : 	device_search_capabilities.dpcPrimCaps.dwSrcBlendCaps = D3DPBLENDCAPS_SRCALPHA;
; 361  : 
; 362  : 	device_search_capabilities.dpcPrimCaps.dwDestBlendCaps = D3DPBLENDCAPS_INVSRCALPHA;
; 363  : 
; 364  : 	device_search_capabilities.dpcPrimCaps.dwShadeCaps = D3DPSHADECAPS_ALPHAFLATBLEND |
; 365  : 																			D3DPSHADECAPS_COLORFLATRGB |
; 366  : 																			D3DPSHADECAPS_COLORGOURAUDRGB;
; 367  : 
; 368  : 	device_search_capabilities.dpcPrimCaps.dwTextureCaps = D3DPTEXTURECAPS_ALPHA | D3DPTEXTURECAPS_PERSPECTIVE;
; 369  : 
; 370  : 	device_search_capabilities.dpcPrimCaps.dwTextureBlendCaps = D3DPTBLENDCAPS_MODULATE | D3DPTBLENDCAPS_MODULATEALPHA;
; 371  : 
; 372  : //	ret = IDirect3D7_FindDevice ( d3d.d3d, &device_search_capabilities, &device_search_result );
; 373  : 
; 374  : 	if ( ret != D3D_OK )
; 375  : 	{
; 376  : 
; 377  : 		return ( FALSE );
; 378  : 	}
; 379  : 
; 380  : 	//
; 381  : 	// Now check the fogging capabilities ( we *must* be able to do some sort of fog )
; 382  : 	//
; 383  : 
; 384  : 	if ( device_search_result.ddHwDesc.dwFlags & D3DDD_TRICAPS )
; 385  : 	{
; 386  : 
; 387  : 		if ( ( device_search_result.ddHwDesc.dpcTriCaps.dwRasterCaps & D3DPRASTERCAPS_FOGTABLE ) ||
; 388  : 				( device_search_result.ddHwDesc.dpcTriCaps.dwRasterCaps & D3DPRASTERCAPS_FOGVERTEX ) )
; 389  : 		{
; 390  : 
; 391  : 			//
; 392  : 			// Matches the fog preconditions as well, so it is a valid rendering device
; 393  : 			//
; 394  : 
; 395  : 			return ( TRUE );
; 396  : 		}
; 397  : 		else
; 398  : 		{
; 399  : 
; 400  : 			return ( FALSE );
; 401  : 		}
; 402  : 	}
; 403  : 	else
; 404  : 	{
; 405  : 
; 406  : 		return ( FALSE );
; 407  : 	}
; 408  : 
; 409  : 	*/
; 410  : 
; 411  : 	return ( FALSE );

  00009	33 c0		 xor	 eax, eax

; 412  : }

  0000b	5f		 pop	 edi
  0000c	5e		 pop	 esi
  0000d	5b		 pop	 ebx
  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?check_valid_direct_3d_device_exists@@YGHXZ ENDP	; check_valid_direct_3d_device_exists
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3d.c
;	COMDAT ?initialise_direct_3d_driver@@YGHXZ
_TEXT	SEGMENT
_viewdata$1 = -264					; size = 24
_hardware_desc$ = -240					; size = 236
_ret$ = -4						; size = 4
?initialise_direct_3d_driver@@YGHXZ PROC		; initialise_direct_3d_driver, COMDAT

; 419  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 48 01 00
	00		 sub	 esp, 328		; 00000148H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 420  : 
; 421  : 	HRESULT
; 422  : 		ret;
; 423  : 
; 424  : 
; 425  : 	static int
; 426  : 		render_target_set = FALSE;
; 427  : 
; 428  : 	D3DDEVICEDESC7
; 429  : 		hardware_desc;
; 430  : 
; 431  : 	//
; 432  : 	// Query for a D3DDEVICE2 object
; 433  : 	//
; 434  : 
; 435  : 	if ( !d3d_use_rgb_device )

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_use_rgb_device@@3HA, 0 ; d3d_use_rgb_device
  00013	0f 85 cd 00 00
	00		 jne	 $LN2@initialise

; 436  : 	{
; 437  : 
; 438  : 		if ( d3d_use_dx_pipeline )

  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_use_dx_pipeline@@3HA, 0 ; d3d_use_dx_pipeline
  00020	0f 84 8e 00 00
	00		 je	 $LN4@initialise

; 439  : 		{
; 440  : 	
; 441  : #if USE_D3D_SOFTWARE_TNL
; 442  : 			ret = IDirect3D7_CreateDevice ( d3d_data.d3d, GUID_PREFIX IID_IDirect3DHALDevice, ddraw.lpRenderBuffer, &d3d_data.device );
; 443  : #else
; 444  : 			ret = IDirect3D7_CreateDevice ( d3d_data.d3d, GUID_PREFIX IID_IDirect3DTnLHalDevice, ddraw.lpRenderBuffer, &d3d_data.device );

  00026	68 04 00 00 00	 push	 OFFSET ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  0002b	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET _IID_IDirect3DTnLHalDevice
  00036	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A
  0003c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A
  00043	50		 push	 eax
  00044	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  00047	ff d1		 call	 ecx
  00049	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 445  : #endif
; 446  : 	
; 447  : 			if ( FAILED ( ret ) )

  0004c	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00050	7d 49		 jge	 SHORT $LN6@initialise

; 448  : 			{
; 449  : 	
; 450  : 				debug_log ( "Unable to create TnL: %s", get_ddraw_error_message ( ret ) );

  00052	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0005b	50		 push	 eax
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@PHIOMJNL@Unable?5to?5create?5TnL?3?5?$CFs@
  00061	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00066	83 c4 08	 add	 esp, 8

; 451  : 	
; 452  : 				d3d_using_hardware_tnl = FALSE;

  00069	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d_using_hardware_tnl@@3HA, 0 ; d3d_using_hardware_tnl

; 453  : 	
; 454  : 				ret = IDirect3D7_CreateDevice ( d3d_data.d3d, GUID_PREFIX IID_IDirect3DHALDevice, ddraw.lpRenderBuffer, &d3d_data.device );

  00073	68 04 00 00 00	 push	 OFFSET ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  00078	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  0007d	50		 push	 eax
  0007e	68 00 00 00 00	 push	 OFFSET _IID_IDirect3DHALDevice
  00083	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A
  00089	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A
  00090	50		 push	 eax
  00091	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  00094	ff d1		 call	 ecx
  00096	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 455  : 			}
; 456  : 			else

  00099	eb 17		 jmp	 SHORT $LN7@initialise
$LN6@initialise:

; 457  : 			{
; 458  : 
; 459  : 				debug_log ( "Setting d3d hardware" );

  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KEJBIACI@Setting?5d3d?5hardware@
  000a0	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  000a5	83 c4 04	 add	 esp, 4

; 460  : 	
; 461  : 				d3d_using_hardware_tnl = TRUE;

  000a8	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?d3d_using_hardware_tnl@@3HA, 1 ; d3d_using_hardware_tnl
$LN7@initialise:

; 462  : 			}
; 463  : 		}
; 464  : 		else

  000b2	eb 30		 jmp	 SHORT $LN5@initialise
$LN4@initialise:

; 465  : 		{
; 466  : 
; 467  : 			d3d_using_hardware_tnl = FALSE;

  000b4	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d_using_hardware_tnl@@3HA, 0 ; d3d_using_hardware_tnl

; 468  : 
; 469  : 			ret = IDirect3D7_CreateDevice ( d3d_data.d3d, GUID_PREFIX IID_IDirect3DHALDevice, ddraw.lpRenderBuffer, &d3d_data.device );

  000be	68 04 00 00 00	 push	 OFFSET ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  000c3	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  000c8	50		 push	 eax
  000c9	68 00 00 00 00	 push	 OFFSET _IID_IDirect3DHALDevice
  000ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A
  000d4	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A
  000db	50		 push	 eax
  000dc	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  000df	ff d1		 call	 ecx
  000e1	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax
$LN5@initialise:

; 470  : 		}
; 471  : 	}
; 472  : 	else

  000e4	eb 26		 jmp	 SHORT $LN3@initialise
$LN2@initialise:

; 473  : 	{
; 474  : 
; 475  : 		ret = IDirect3D7_CreateDevice ( d3d_data.d3d, GUID_PREFIX IID_IDirect3DRGBDevice, ddraw.lpRenderBuffer, &d3d_data.device );

  000e6	68 04 00 00 00	 push	 OFFSET ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  000eb	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  000f0	50		 push	 eax
  000f1	68 00 00 00 00	 push	 OFFSET _IID_IDirect3DRGBDevice
  000f6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A
  000fc	8b 11		 mov	 edx, DWORD PTR [ecx]
  000fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A
  00103	50		 push	 eax
  00104	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  00107	ff d1		 call	 ecx
  00109	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax
$LN3@initialise:

; 476  : 	}
; 477  : 
; 478  : 	if ( ret != DD_OK )

  0010c	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00110	74 17		 je	 SHORT $LN8@initialise

; 479  : 	{
; 480  : 
; 481  : 		debug_fatal ( "Error creating d3d device2: %s", get_ddraw_error_message ( ret ) );

  00112	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0011b	50		 push	 eax
  0011c	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OGFNALJO@Error?5creating?5d3d?5device2?3?5?$CFs@
  00121	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00126	83 c4 08	 add	 esp, 8
$LN8@initialise:

; 482  : 	}
; 483  : 
; 484  : 	//
; 485  : 	// Get the capabilities of the device ( specifically looking for the square textures stuff at the moment )
; 486  : 	//
; 487  : 
; 488  : 	memset ( &hardware_desc, 0, sizeof ( hardware_desc ) );

  00129	68 ec 00 00 00	 push	 236			; 000000ecH
  0012e	6a 00		 push	 0
  00130	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _hardware_desc$[ebp]
  00136	50		 push	 eax
  00137	e8 00 00 00 00	 call	 _memset
  0013c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 489  : 
; 490  : 	ret = IDirect3DDevice7_GetCaps ( d3d_data.device, &hardware_desc );

  0013f	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _hardware_desc$[ebp]
  00145	50		 push	 eax
  00146	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  0014c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0014e	a1 04 00 00 00	 mov	 eax, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  00153	50		 push	 eax
  00154	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00157	ff d1		 call	 ecx
  00159	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 491  : 
; 492  : 	if ( ret != DD_OK )

  0015c	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00160	74 17		 je	 SHORT $LN9@initialise

; 493  : 	{
; 494  : 
; 495  : 		debug_fatal ( "Error getting d3d device capabilities: %s", get_ddraw_error_message ( ret ) );

  00162	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00165	50		 push	 eax
  00166	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  0016b	50		 push	 eax
  0016c	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@CDHJKEKF@Error?5getting?5d3d?5device?5capabi@
  00171	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00176	83 c4 08	 add	 esp, 8
$LN9@initialise:

; 496  : 	}
; 497  : 
; 498  : 	//
; 499  : 	// Set the capabilities of the 3dvisual according to the capabilities of the card.
; 500  : 	//
; 501  : 
; 502  : 	set_d3d_capabilities ( &hardware_desc );

  00179	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _hardware_desc$[ebp]
  0017f	50		 push	 eax
  00180	e8 00 00 00 00	 call	 ?set_d3d_capabilities@@YGXPAU_D3DDeviceDesc7@@@Z ; set_d3d_capabilities

; 503  : 
; 504  : 	//
; 505  : 	// Set render target
; 506  : 	//
; 507  : 
; 508  : //	if ( !render_target_set )
; 509  : 	{
; 510  : 
; 511  : 		render_target_set = TRUE;

  00185	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?render_target_set@?1??initialise_direct_3d_driver@@YGHXZ@4HA, 1

; 512  : 
; 513  : 		ret = IDirect3DDevice7_SetRenderTarget ( d3d_data.device, ddraw.lpRenderBuffer, 0 );

  0018f	6a 00		 push	 0
  00191	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  00196	50		 push	 eax
  00197	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  0019d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0019f	a1 04 00 00 00	 mov	 eax, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  001a4	50		 push	 eax
  001a5	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
  001a8	ff d1		 call	 ecx
  001aa	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 514  : 
; 515  : 		if ( ret != DD_OK )

  001ad	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  001b1	74 17		 je	 SHORT $LN10@initialise

; 516  : 		{
; 517  : 
; 518  : 			debug_fatal ( "Error setting render target: %s", get_ddraw_error_message ( ret ) );

  001b3	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  001bc	50		 push	 eax
  001bd	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@DMNIBGCO@Error?5setting?5render?5target?3?5?$CFs@
  001c2	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  001c7	83 c4 08	 add	 esp, 8
$LN10@initialise:

; 519  : 		}
; 520  : 	}
; 521  : 
; 522  : 	{
; 523  : 
; 524  : 		//
; 525  : 		// Create & set the viewport for the device2 interface.
; 526  : 		//
; 527  : 
; 528  : 		D3DVIEWPORT7
; 529  : 			viewdata;
; 530  : 
; 531  : 		//
; 532  : 		// Set up the viewport values for initial values
; 533  : 		//
; 534  : 
; 535  : 		viewdata.dwX = 0;

  001ca	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _viewdata$1[ebp], 0

; 536  : 		viewdata.dwY = 0;

  001d4	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _viewdata$1[ebp+4], 0

; 537  : 
; 538  : 		viewdata.dwWidth = application_video_width;

  001de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_video_width@@3HA ; application_video_width
  001e3	89 85 00 ff ff
	ff		 mov	 DWORD PTR _viewdata$1[ebp+8], eax

; 539  : 		viewdata.dwHeight = application_video_height;

  001e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_video_height@@3HA ; application_video_height
  001ee	89 85 04 ff ff
	ff		 mov	 DWORD PTR _viewdata$1[ebp+12], eax

; 540  : 
; 541  : 		viewdata.dvMinZ = 0;

  001f4	0f 57 c0	 xorps	 xmm0, xmm0
  001f7	f3 0f 11 85 08
	ff ff ff	 movss	 DWORD PTR _viewdata$1[ebp+16], xmm0

; 542  : 		viewdata.dvMaxZ = 1;

  001ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00207	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _viewdata$1[ebp+20], xmm0

; 543  : 
; 544  : 		if ( !f3d_set_viewport ( &viewdata ) )

  0020f	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _viewdata$1[ebp]
  00215	50		 push	 eax
  00216	e8 00 00 00 00	 call	 ?f3d_set_viewport@@YGHPAU_D3DVIEWPORT7@@@Z ; f3d_set_viewport
  0021b	85 c0		 test	 eax, eax
  0021d	75 06		 jne	 SHORT $LN11@initialise

; 545  : 		{
; 546  : 			return ( FALSE );

  0021f	33 c0		 xor	 eax, eax
  00221	eb 2d		 jmp	 SHORT $LN1@initialise

; 547  : 		}
; 548  : 		else

  00223	eb 0d		 jmp	 SHORT $LN12@initialise
$LN11@initialise:

; 549  : 		{
; 550  : 
; 551  : 			debug_log ( "Set viewport success" );

  00225	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MCCAOKLG@Set?5viewport?5success@
  0022a	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0022f	83 c4 04	 add	 esp, 4
$LN12@initialise:

; 552  : 		}
; 553  : 	}
; 554  : 
; 555  : 	//
; 556  : 	// Initialise the d3d state system
; 557  : 	//
; 558  : 
; 559  : 	d3d_initialised = TRUE,

  00232	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?d3d_initialised@@3HA, 1 ; d3d_initialised
  0023c	e8 00 00 00 00	 call	 ?initialise_d3d_state@@YGXXZ ; initialise_d3d_state

; 560  : 
; 561  : 	initialise_d3d_state ();
; 562  : 
; 563  : 	//
; 564  : 	// Set the device to valid
; 565  : 	//
; 566  : 
; 567  : 	d3d_valid = TRUE;

  00241	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?d3d_valid@@3HA, 1 ; d3d_valid

; 568  : 
; 569  : 	return ( TRUE );

  0024b	b8 01 00 00 00	 mov	 eax, 1
$LN1@initialise:

; 570  : }

  00250	5f		 pop	 edi
  00251	5e		 pop	 esi
  00252	5b		 pop	 ebx
  00253	8b e5		 mov	 esp, ebp
  00255	5d		 pop	 ebp
  00256	c3		 ret	 0
?initialise_direct_3d_driver@@YGHXZ ENDP		; initialise_direct_3d_driver
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3d.c
;	COMDAT ?register_restore_vb_routine@@YGXP6GXXZ@Z
_TEXT	SEGMENT
_function$ = 8						; size = 4
?register_restore_vb_routine@@YGXP6GXXZ@Z PROC		; register_restore_vb_routine, COMDAT

; 282  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 283  : 
; 284  : 	ASSERT ( !restore_vb_friend_function );

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?restore_vb_friend_function@@3P6GXXZA, 0
  00010	74 18		 je	 SHORT $LN2@register_r
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??register_restore_vb_routine@@YGXP6GXXZ@Z@4JA
  00017	83 c0 02	 add	 eax, 2
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@NDIAJLDF@c?3?2users?2nhv90?2projects?2eech?2mo@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@HDFEFGML@?$CBrestore_vb_friend_function@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@register_r:

; 285  : 
; 286  : 	restore_vb_friend_function = function;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _function$[ebp]
  0002d	a3 00 00 00 00	 mov	 DWORD PTR ?restore_vb_friend_function@@3P6GXXZA, eax

; 287  : }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?register_restore_vb_routine@@YGXP6GXXZ@Z ENDP		; register_restore_vb_routine
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3d.c
;	COMDAT ?d3d_render_target_recreated@@YGXXZ
_TEXT	SEGMENT
_ret$ = -4						; size = 4
?d3d_render_target_recreated@@YGXXZ PROC		; d3d_render_target_recreated, COMDAT

; 1427 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1428 : 
; 1429 : 	HRESULT
; 1430 : 		ret;
; 1431 : 
; 1432 : 	ret = IDirect3DDevice7_SetRenderTarget ( d3d_data.device, ddraw.lpRenderBuffer, 0 );

  00009	6a 00		 push	 0
  0000b	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A+16
  00010	50		 push	 eax
  00011	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  00017	8b 11		 mov	 edx, DWORD PTR [ecx]
  00019	a1 04 00 00 00	 mov	 eax, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  0001e	50		 push	 eax
  0001f	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
  00022	ff d1		 call	 ecx
  00024	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 1433 : 
; 1434 : 	if ( ret != DD_OK )

  00027	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  0002b	74 17		 je	 SHORT $LN1@d3d_render

; 1435 : 	{
; 1436 : 
; 1437 : 		debug_fatal ( "Error setting render target: %s", get_ddraw_error_message ( ret ) );

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?get_ddraw_error_message@@YGPBDJ@Z ; get_ddraw_error_message
  00036	50		 push	 eax
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@DMNIBGCO@Error?5setting?5render?5target?3?5?$CFs@
  0003c	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00041	83 c4 08	 add	 esp, 8
$LN1@d3d_render:

; 1438 : 	}
; 1439 : }

  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
?d3d_render_target_recreated@@YGXXZ ENDP		; d3d_render_target_recreated
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3d.c
;	COMDAT ?d3d_end_scene@@YGHXZ
_TEXT	SEGMENT
?d3d_end_scene@@YGHXZ PROC				; d3d_end_scene, COMDAT

; 1392 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1393 : 	if ( d3d_data.device )

  00009	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4, 0
  00010	74 2f		 je	 SHORT $LN2@d3d_end_sc

; 1394 : 	{
; 1395 : 
; 1396 : 		flush_triangle_primitives ();

  00012	e8 00 00 00 00	 call	 ?flush_triangle_primitives@@YGXXZ ; flush_triangle_primitives

; 1397 : 
; 1398 : 		flush_line_primitives ();

  00017	e8 00 00 00 00	 call	 ?flush_line_primitives@@YGXXZ ; flush_line_primitives

; 1399 : 
; 1400 : 		finalise_primitives ();

  0001c	e8 00 00 00 00	 call	 ?finalise_primitives@@YGXXZ ; finalise_primitives

; 1401 : 
; 1402 : 		if ( !f3d_scene_end () )

  00021	e8 00 00 00 00	 call	 ?f3d_scene_end@@YGHXZ	; f3d_scene_end
  00026	85 c0		 test	 eax, eax
  00028	75 04		 jne	 SHORT $LN4@d3d_end_sc

; 1403 : 		{
; 1404 : 			return ( FALSE );

  0002a	33 c0		 xor	 eax, eax
  0002c	eb 15		 jmp	 SHORT $LN1@d3d_end_sc
$LN4@d3d_end_sc:

; 1405 : 		}
; 1406 : 
; 1407 : 		d3d_in_3d_scene = FALSE;

  0002e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d_in_3d_scene@@3HA, 0 ; d3d_in_3d_scene

; 1408 : 
; 1409 : #if ( REPORT_SCENE_BREAKS )
; 1410 : 		debug_log ( "END 3D SCENE" );
; 1411 : #endif
; 1412 : 	
; 1413 : 		return ( TRUE );

  00038	b8 01 00 00 00	 mov	 eax, 1
  0003d	eb 04		 jmp	 SHORT $LN1@d3d_end_sc

; 1414 : 	}
; 1415 : 	else

  0003f	eb 02		 jmp	 SHORT $LN1@d3d_end_sc
$LN2@d3d_end_sc:

; 1416 : 	{
; 1417 : 
; 1418 : 		return ( FALSE );

  00041	33 c0		 xor	 eax, eax
$LN1@d3d_end_sc:

; 1419 : 	}
; 1420 : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?d3d_end_scene@@YGHXZ ENDP				; d3d_end_scene
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3d.c
;	COMDAT ?d3d_begin_scene@@YGHXZ
_TEXT	SEGMENT
?d3d_begin_scene@@YGHXZ PROC				; d3d_begin_scene, COMDAT

; 1336 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1337 : 	d3d_number_of_executions = 0;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d_number_of_executions@@3HA, 0 ; d3d_number_of_executions

; 1338 : 
; 1339 : 	d3d_number_of_texture_loads = 0;

  00013	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d_number_of_texture_loads@@3HA, 0 ; d3d_number_of_texture_loads

; 1340 : 
; 1341 : 	if ( d3d_data.recreate_d3d )

  0001d	83 3d 10 00 00
	00 00		 cmp	 DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+16, 0
  00024	74 05		 je	 SHORT $LN2@d3d_begin_

; 1342 : 	{
; 1343 : 
; 1344 : 		recreate_d3d ();

  00026	e8 00 00 00 00	 call	 ?recreate_d3d@@YGXXZ	; recreate_d3d
$LN2@d3d_begin_:

; 1345 : 	}
; 1346 : 
; 1347 : 	if ( d3d_valid )

  0002b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_valid@@3HA, 0 ; d3d_valid
  00032	74 41		 je	 SHORT $LN3@d3d_begin_

; 1348 : 	{
; 1349 : 
; 1350 : 		if ( d3d_data.device )

  00034	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4, 0
  0003b	74 32		 je	 SHORT $LN5@d3d_begin_

; 1351 : 		{
; 1352 : 
; 1353 : 			reset_primitives ();

  0003d	e8 00 00 00 00	 call	 ?reset_primitives@@YGXXZ ; reset_primitives

; 1354 : 
; 1355 : 			if ( !f3d_scene_begin () )

  00042	e8 00 00 00 00	 call	 ?f3d_scene_begin@@YGHXZ	; f3d_scene_begin
  00047	85 c0		 test	 eax, eax
  00049	75 04		 jne	 SHORT $LN7@d3d_begin_

; 1356 : 			{
; 1357 : 				return ( FALSE );

  0004b	33 c0		 xor	 eax, eax
  0004d	eb 28		 jmp	 SHORT $LN1@d3d_begin_
$LN7@d3d_begin_:

; 1358 : 			}
; 1359 : 
; 1360 : 			set_d3d_alpha_fog_zbuffer ( FALSE, TRUE, TRUE, TRUE );

  0004f	6a 01		 push	 1
  00051	6a 01		 push	 1
  00053	6a 01		 push	 1
  00055	6a 00		 push	 0
  00057	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer

; 1361 : 
; 1362 : //			set_d3d_transparency_off ();
; 1363 : 
; 1364 : //			set_d3d_texture_batching ( FALSE );
; 1365 : 
; 1366 : 			d3d_in_3d_scene = TRUE;

  0005c	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?d3d_in_3d_scene@@3HA, 1 ; d3d_in_3d_scene

; 1367 : 
; 1368 : #if ( REPORT_SCENE_BREAKS )
; 1369 : 			debug_log ( "BEGIN 3D SCENE" );
; 1370 : #endif
; 1371 : 	
; 1372 : 			return ( TRUE );

  00066	b8 01 00 00 00	 mov	 eax, 1
  0006b	eb 0a		 jmp	 SHORT $LN1@d3d_begin_

; 1373 : 		}
; 1374 : 		else

  0006d	eb 04		 jmp	 SHORT $LN6@d3d_begin_
$LN5@d3d_begin_:

; 1375 : 		{
; 1376 : 	
; 1377 : 			return ( FALSE );

  0006f	33 c0		 xor	 eax, eax
  00071	eb 04		 jmp	 SHORT $LN1@d3d_begin_
$LN6@d3d_begin_:

; 1378 : 		}
; 1379 : 	}
; 1380 : 	else

  00073	eb 02		 jmp	 SHORT $LN1@d3d_begin_
$LN3@d3d_begin_:

; 1381 : 	{
; 1382 : 
; 1383 : 		return ( FALSE );

  00075	33 c0		 xor	 eax, eax
$LN1@d3d_begin_:

; 1384 : 	}
; 1385 : }

  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
?d3d_begin_scene@@YGHXZ ENDP				; d3d_begin_scene
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3d.c
;	COMDAT ?get_d3d_error_message@@YGPBDJ@Z
_TEXT	SEGMENT
_count$ = -4						; size = 4
_error$ = 8						; size = 4
?get_d3d_error_message@@YGPBDJ@Z PROC			; get_d3d_error_message, COMDAT

; 1544 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1545 : 
; 1546 : 	int
; 1547 : 		count;
; 1548 : 
; 1549 : 
; 1550 : 	count = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
$LN2@get_d3d_er:

; 1551 : 
; 1552 : 	while ( ( d3d_error_table[count].error != -1 ) && ( d3d_error_table[count].error != error ) )

  00010	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00013	83 3c c5 00 00
	00 00 ff	 cmp	 DWORD PTR ?d3d_error_table@@3PAUdirect_3d_errors@@A[eax*8], -1
  0001b	74 1a		 je	 SHORT $LN3@get_d3d_er
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00020	8b 0c c5 00 00
	00 00		 mov	 ecx, DWORD PTR ?d3d_error_table@@3PAUdirect_3d_errors@@A[eax*8]
  00027	3b 4d 08	 cmp	 ecx, DWORD PTR _error$[ebp]
  0002a	74 0b		 je	 SHORT $LN3@get_d3d_er

; 1553 : 	{
; 1554 : 
; 1555 : 		count ++;

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0002f	83 c0 01	 add	 eax, 1
  00032	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax

; 1556 : 	}

  00035	eb d9		 jmp	 SHORT $LN2@get_d3d_er
$LN3@get_d3d_er:

; 1557 : 
; 1558 : 	return ( d3d_error_table[count].error_string );

  00037	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0003a	8b 04 c5 04 00
	00 00		 mov	 eax, DWORD PTR ?d3d_error_table@@3PAUdirect_3d_errors@@A[eax*8+4]

; 1559 : }

  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?get_d3d_error_message@@YGPBDJ@Z ENDP			; get_d3d_error_message
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3d.c
;	COMDAT ?recreate_d3d@@YGXXZ
_TEXT	SEGMENT
?recreate_d3d@@YGXXZ PROC				; recreate_d3d, COMDAT

; 1257 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1258 : 
; 1259 : 	//
; 1260 : 	// Free all hardware textures up
; 1261 : 	//
; 1262 : 
; 1263 : 	free_all_hardware_textures ();

  00009	e8 00 00 00 00	 call	 ?free_all_hardware_textures@@YGXXZ ; free_all_hardware_textures

; 1264 : 
; 1265 : 	//
; 1266 : 	// Release all the d3d interfaces
; 1267 : 	//
; 1268 : 
; 1269 : 	d3d_release_objects ();

  0000e	e8 00 00 00 00	 call	 ?d3d_release_objects@@YGXXZ ; d3d_release_objects

; 1270 : 
; 1271 : 	//
; 1272 : 	// Re-create all the d3d interfaces
; 1273 : 	//
; 1274 : 
; 1275 : 	initialise_direct_3d_driver ();

  00013	e8 00 00 00 00	 call	 ?initialise_direct_3d_driver@@YGHXZ ; initialise_direct_3d_driver

; 1276 : 
; 1277 : 	//
; 1278 : 	// Create the vertex buffers
; 1279 : 	//
; 1280 : 
; 1281 : 	create_d3d_vertex_buffers ();

  00018	e8 00 00 00 00	 call	 ?create_d3d_vertex_buffers@@YGXXZ ; create_d3d_vertex_buffers

; 1282 : 
; 1283 : 	if ( restore_vb_friend_function )

  0001d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?restore_vb_friend_function@@3P6GXXZA, 0
  00024	74 06		 je	 SHORT $LN2@recreate_d

; 1284 : 	{
; 1285 : 
; 1286 : 		restore_vb_friend_function ();

  00026	ff 15 00 00 00
	00		 call	 DWORD PTR ?restore_vb_friend_function@@3P6GXXZA
$LN2@recreate_d:

; 1287 : 	}
; 1288 : 
; 1289 : 	d3d_data.recreate_d3d = FALSE;

  0002c	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+16, 0

; 1290 : 
; 1291 : 	//
; 1292 : 	// Set the FPU to zero rounding!
; 1293 : 	//
; 1294 : 
; 1295 : 	set_fpu_rounding_mode_zero ();

  00036	e8 00 00 00 00	 call	 ?set_fpu_rounding_mode_zero@@YGXXZ ; set_fpu_rounding_mode_zero

; 1296 : 
; 1297 : 	//
; 1298 : 	// Recreate the render to texture screens
; 1299 : 	//
; 1300 : 
; 1301 : 	restore_graphics_screens ();

  0003b	e8 00 00 00 00	 call	 ?restore_graphics_screens@@YGXXZ ; restore_graphics_screens

; 1302 : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?recreate_d3d@@YGXXZ ENDP				; recreate_d3d
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3d.c
;	COMDAT ?destroy_d3d_vertex_buffers@@YGXXZ
_TEXT	SEGMENT
_count$1 = -4						; size = 4
?destroy_d3d_vertex_buffers@@YGXXZ PROC			; destroy_d3d_vertex_buffers, COMDAT

; 577  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 578  : 
; 579  : 	if ( d3d_data.d3d )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A, 0
  00010	0f 84 85 01 00
	00		 je	 $LN1@destroy_d3

; 580  : 	{
; 581  : 
; 582  : 		int
; 583  : 			count;
; 584  : 
; 585  : 		for ( count = 0; count < MAXIMUM_TRIANGLE_BUFFERS; count++ )

  00016	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$1[ebp], 0
  0001d	eb 09		 jmp	 SHORT $LN4@destroy_d3
$LN2@destroy_d3:
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _count$1[ebp]
  00022	83 c0 01	 add	 eax, 1
  00025	89 45 fc	 mov	 DWORD PTR _count$1[ebp], eax
$LN4@destroy_d3:
  00028	83 7d fc 20	 cmp	 DWORD PTR _count$1[ebp], 32 ; 00000020H
  0002c	7d 7c		 jge	 SHORT $LN3@destroy_d3

; 586  : 		{
; 587  : 
; 588  : 			if ( d3d.triangle_buffers[count].buffer )

  0002e	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _count$1[ebp], 4128
  00035	83 b8 1c 00 00
	00 00		 cmp	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+28], 0
  0003c	74 67		 je	 SHORT $LN12@destroy_d3

; 589  : 			{
; 590  : 
; 591  : 				f3d_vertex_release ( &d3d.triangle_buffers[count].buffer );

  0003e	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _count$1[ebp], 4128
  00045	05 1c 00 00 00	 add	 eax, OFFSET ?d3d@@3UDIRECT_3D_VECTORS@@A+28
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?f3d_vertex_release@@YGXPAPAUIDirect3DVertexBuffer7@@@Z ; f3d_vertex_release

; 592  : 	
; 593  : 				d3d.triangle_buffers[count].vertices = NULL;

  00050	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _count$1[ebp], 4128
  00057	c7 80 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+24], 0

; 594  : 				d3d.triangle_buffers[count].texture.texture = 0;

  00061	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _count$1[ebp], 4128
  00068	c7 80 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+8], 0

; 595  : 				d3d.triangle_buffers[count].texture.texture_settings = 0;

  00072	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _count$1[ebp], 4128
  00079	c7 80 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+12], 0

; 596  : 				d3d.triangle_buffers[count].vertices_used = 0;

  00083	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _count$1[ebp], 4128
  0008a	c7 80 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+16], 0

; 597  : 				d3d.triangle_buffers[count].indices_index = 0;

  00094	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _count$1[ebp], 4128
  0009b	c7 80 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+20], 0
$LN12@destroy_d3:

; 598  : 			}
; 599  : 		}

  000a5	e9 75 ff ff ff	 jmp	 $LN2@destroy_d3
$LN3@destroy_d3:

; 600  : 
; 601  : 		for ( count = 0; count < MAXIMUM_LINE_BUFFERS; count++ )

  000aa	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$1[ebp], 0
  000b1	eb 09		 jmp	 SHORT $LN7@destroy_d3
$LN5@destroy_d3:
  000b3	8b 45 fc	 mov	 eax, DWORD PTR _count$1[ebp]
  000b6	83 c0 01	 add	 eax, 1
  000b9	89 45 fc	 mov	 DWORD PTR _count$1[ebp], eax
$LN7@destroy_d3:
  000bc	83 7d fc 02	 cmp	 DWORD PTR _count$1[ebp], 2
  000c0	7d 7c		 jge	 SHORT $LN6@destroy_d3

; 602  : 		{
; 603  : 
; 604  : 			if ( d3d.line_buffers[count].buffer )

  000c2	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _count$1[ebp], 4128
  000c9	83 b8 1c 04 02
	00 00		 cmp	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+132124], 0
  000d0	74 67		 je	 SHORT $LN13@destroy_d3

; 605  : 			{
; 606  : 				f3d_vertex_release ( &d3d.line_buffers[count].buffer );

  000d2	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _count$1[ebp], 4128
  000d9	05 1c 04 02 00	 add	 eax, OFFSET ?d3d@@3UDIRECT_3D_VECTORS@@A+132124
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 ?f3d_vertex_release@@YGXPAPAUIDirect3DVertexBuffer7@@@Z ; f3d_vertex_release

; 607  : 
; 608  : 				d3d.line_buffers[count].vertices = NULL;

  000e4	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _count$1[ebp], 4128
  000eb	c7 80 18 04 02
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+132120], 0

; 609  : 				d3d.line_buffers[count].texture.texture = 0;

  000f5	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _count$1[ebp], 4128
  000fc	c7 80 08 04 02
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+132104], 0

; 610  : 				d3d.line_buffers[count].texture.texture_settings = 0;

  00106	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _count$1[ebp], 4128
  0010d	c7 80 0c 04 02
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+132108], 0

; 611  : 				d3d.line_buffers[count].vertices_used = 0;

  00117	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _count$1[ebp], 4128
  0011e	c7 80 10 04 02
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+132112], 0

; 612  : 				d3d.line_buffers[count].indices_index = 0;

  00128	69 45 fc 20 10
	00 00		 imul	 eax, DWORD PTR _count$1[ebp], 4128
  0012f	c7 80 14 04 02
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+132116], 0
$LN13@destroy_d3:

; 613  : 			}
; 614  : 		}

  00139	e9 75 ff ff ff	 jmp	 $LN5@destroy_d3
$LN6@destroy_d3:

; 615  : 
; 616  : 		if ( d3d.point_vertex_buffer )

  0013e	83 3d 58 24 02
	00 00		 cmp	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140376, 0
  00145	74 0a		 je	 SHORT $LN14@destroy_d3

; 617  : 		{
; 618  : 			f3d_vertex_release ( &d3d.point_vertex_buffer );

  00147	68 58 24 02 00	 push	 OFFSET ?d3d@@3UDIRECT_3D_VECTORS@@A+140376
  0014c	e8 00 00 00 00	 call	 ?f3d_vertex_release@@YGXPAPAUIDirect3DVertexBuffer7@@@Z ; f3d_vertex_release
$LN14@destroy_d3:

; 619  : 		}
; 620  : 
; 621  : 		for ( count = 0; count < MAX_ALPHA_VERTEX_BUFFERS; count++ )

  00151	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$1[ebp], 0
  00158	eb 09		 jmp	 SHORT $LN10@destroy_d3
$LN8@destroy_d3:
  0015a	8b 45 fc	 mov	 eax, DWORD PTR _count$1[ebp]
  0015d	83 c0 01	 add	 eax, 1
  00160	89 45 fc	 mov	 DWORD PTR _count$1[ebp], eax
$LN10@destroy_d3:
  00163	83 7d fc 10	 cmp	 DWORD PTR _count$1[ebp], 16 ; 00000010H
  00167	7d 1f		 jge	 SHORT $LN9@destroy_d3

; 622  : 		{
; 623  : 
; 624  : 			if ( d3d.alpha_vertex_buffer[count] )

  00169	8b 45 fc	 mov	 eax, DWORD PTR _count$1[ebp]
  0016c	83 3c 85 60 24
	02 00 00	 cmp	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax*4+140384], 0
  00174	74 10		 je	 SHORT $LN15@destroy_d3

; 625  : 			{
; 626  : 				f3d_vertex_release ( &d3d.alpha_vertex_buffer[count] );

  00176	8b 45 fc	 mov	 eax, DWORD PTR _count$1[ebp]
  00179	8d 0c 85 60 24
	02 00		 lea	 ecx, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax*4+140384]
  00180	51		 push	 ecx
  00181	e8 00 00 00 00	 call	 ?f3d_vertex_release@@YGXPAPAUIDirect3DVertexBuffer7@@@Z ; f3d_vertex_release
$LN15@destroy_d3:

; 627  : 			}
; 628  : 		}

  00186	eb d2		 jmp	 SHORT $LN8@destroy_d3
$LN9@destroy_d3:

; 629  : 
; 630  : 		if ( d3d.hardware_untransformed_buffer )

  00188	83 3d 5c 24 02
	00 00		 cmp	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140380, 0
  0018f	74 0a		 je	 SHORT $LN1@destroy_d3

; 631  : 		{
; 632  : 
; 633  : 			f3d_vertex_release ( &d3d.hardware_untransformed_buffer );

  00191	68 5c 24 02 00	 push	 OFFSET ?d3d@@3UDIRECT_3D_VECTORS@@A+140380
  00196	e8 00 00 00 00	 call	 ?f3d_vertex_release@@YGXPAPAUIDirect3DVertexBuffer7@@@Z ; f3d_vertex_release
$LN1@destroy_d3:

; 634  : 		}
; 635  : 	}
; 636  : }

  0019b	5f		 pop	 edi
  0019c	5e		 pop	 esi
  0019d	5b		 pop	 ebx
  0019e	8b e5		 mov	 esp, ebp
  001a0	5d		 pop	 ebp
  001a1	c3		 ret	 0
?destroy_d3d_vertex_buffers@@YGXXZ ENDP			; destroy_d3d_vertex_buffers
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3d.c
;	COMDAT ?create_d3d_vertex_buffers@@YGXXZ
_TEXT	SEGMENT
_count$ = -20						; size = 4
_desc$ = -16						; size = 16
?create_d3d_vertex_buffers@@YGXXZ PROC			; create_d3d_vertex_buffers, COMDAT

; 643  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 644  : 
; 645  : 	D3DVERTEXBUFFERDESC
; 646  : 		desc;
; 647  : 
; 648  : 	int
; 649  : 		count;
; 650  : 
; 651  : 	memset ( &desc, 0, sizeof ( D3DVERTEXBUFFERDESC ) );

  00009	6a 10		 push	 16			; 00000010H
  0000b	6a 00		 push	 0
  0000d	8d 45 f0	 lea	 eax, DWORD PTR _desc$[ebp]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 _memset
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH

; 652  : 
; 653  : 	desc.dwSize = sizeof ( D3DVERTEXBUFFERDESC );

  00019	c7 45 f0 10 00
	00 00		 mov	 DWORD PTR _desc$[ebp], 16 ; 00000010H

; 654  : 
; 655  : 	desc.dwCaps = D3DVBCAPS_WRITEONLY | D3DVBCAPS_DONOTCLIP;

  00020	c7 45 f4 01 00
	01 00		 mov	 DWORD PTR _desc$[ebp+4], 65537 ; 00010001H

; 656  : 
; 657  : 	if ( !d3d_vertex_buffer_in_video_memory )
; 658  : 	{
; 659  : 
; 660  : //		desc.dwCaps |= D3DVBCAPS_SYSTEMMEMORY;
; 661  : 	}
; 662  : 
; 663  : 	desc.dwCaps |= D3DVBCAPS_SYSTEMMEMORY;

  00027	8b 45 f4	 mov	 eax, DWORD PTR _desc$[ebp+4]
  0002a	0d 00 08 00 00	 or	 eax, 2048		; 00000800H
  0002f	89 45 f4	 mov	 DWORD PTR _desc$[ebp+4], eax

; 664  : 
; 665  : 	desc.dwFVF = D3DFVF_TLVERTEX;

  00032	c7 45 f8 c4 01
	00 00		 mov	 DWORD PTR _desc$[ebp+8], 452 ; 000001c4H

; 666  : 
; 667  : 	desc.dwNumVertices = MAXIMUM_D3D_VERTICES_IN_VERTEX_BUFFER;

  00039	c7 45 fc 7a 01
	00 00		 mov	 DWORD PTR _desc$[ebp+12], 378 ; 0000017aH

; 668  : 
; 669  : 	for ( count = 0; count < MAXIMUM_TRIANGLE_BUFFERS; count++ )

  00040	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00047	eb 09		 jmp	 SHORT $LN4@create_d3d
$LN2@create_d3d:
  00049	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  0004c	83 c0 01	 add	 eax, 1
  0004f	89 45 ec	 mov	 DWORD PTR _count$[ebp], eax
$LN4@create_d3d:
  00052	83 7d ec 20	 cmp	 DWORD PTR _count$[ebp], 32 ; 00000020H
  00056	7d 5c		 jge	 SHORT $LN3@create_d3d

; 670  : 	{
; 671  : 		f3d_vertex_create ( &desc, &d3d.triangle_buffers[count].buffer );

  00058	69 45 ec 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  0005f	05 1c 00 00 00	 add	 eax, OFFSET ?d3d@@3UDIRECT_3D_VECTORS@@A+28
  00064	50		 push	 eax
  00065	8d 4d f0	 lea	 ecx, DWORD PTR _desc$[ebp]
  00068	51		 push	 ecx
  00069	e8 00 00 00 00	 call	 ?f3d_vertex_create@@YGXPAU_D3DVERTEXBUFFERDESC@@PAPAUIDirect3DVertexBuffer7@@@Z ; f3d_vertex_create

; 672  : 
; 673  : 		d3d.triangle_buffers[count].vertices = NULL;

  0006e	69 45 ec 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  00075	c7 80 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+24], 0

; 674  : 		d3d.triangle_buffers[count].texture.texture = 0;

  0007f	69 45 ec 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  00086	c7 80 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+8], 0

; 675  : 		d3d.triangle_buffers[count].vertices_used = 0;

  00090	69 45 ec 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  00097	c7 80 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+16], 0

; 676  : 		d3d.triangle_buffers[count].indices_index = 0;

  000a1	69 45 ec 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  000a8	c7 80 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+20], 0

; 677  : 	}

  000b2	eb 95		 jmp	 SHORT $LN2@create_d3d
$LN3@create_d3d:

; 678  : 
; 679  : 	for ( count = 0; count < MAXIMUM_LINE_BUFFERS; count++ )

  000b4	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  000bb	eb 09		 jmp	 SHORT $LN7@create_d3d
$LN5@create_d3d:
  000bd	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  000c0	83 c0 01	 add	 eax, 1
  000c3	89 45 ec	 mov	 DWORD PTR _count$[ebp], eax
$LN7@create_d3d:
  000c6	83 7d ec 02	 cmp	 DWORD PTR _count$[ebp], 2
  000ca	7d 5c		 jge	 SHORT $LN6@create_d3d

; 680  : 	{
; 681  : 		f3d_vertex_create ( &desc, &d3d.line_buffers[count].buffer );

  000cc	69 45 ec 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  000d3	05 1c 04 02 00	 add	 eax, OFFSET ?d3d@@3UDIRECT_3D_VECTORS@@A+132124
  000d8	50		 push	 eax
  000d9	8d 4d f0	 lea	 ecx, DWORD PTR _desc$[ebp]
  000dc	51		 push	 ecx
  000dd	e8 00 00 00 00	 call	 ?f3d_vertex_create@@YGXPAU_D3DVERTEXBUFFERDESC@@PAPAUIDirect3DVertexBuffer7@@@Z ; f3d_vertex_create

; 682  : 
; 683  : 		d3d.line_buffers[count].vertices = NULL;

  000e2	69 45 ec 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  000e9	c7 80 18 04 02
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+132120], 0

; 684  : 		d3d.line_buffers[count].texture.texture = 0;

  000f3	69 45 ec 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  000fa	c7 80 08 04 02
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+132104], 0

; 685  : 		d3d.line_buffers[count].vertices_used = 0;

  00104	69 45 ec 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  0010b	c7 80 10 04 02
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+132112], 0

; 686  : 		d3d.line_buffers[count].indices_index = 0;

  00115	69 45 ec 20 10
	00 00		 imul	 eax, DWORD PTR _count$[ebp], 4128
  0011c	c7 80 14 04 02
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax+132116], 0

; 687  : 	}

  00126	eb 95		 jmp	 SHORT $LN5@create_d3d
$LN6@create_d3d:

; 688  : 
; 689  : 	f3d_vertex_create ( &desc, &d3d.point_vertex_buffer );

  00128	68 58 24 02 00	 push	 OFFSET ?d3d@@3UDIRECT_3D_VECTORS@@A+140376
  0012d	8d 45 f0	 lea	 eax, DWORD PTR _desc$[ebp]
  00130	50		 push	 eax
  00131	e8 00 00 00 00	 call	 ?f3d_vertex_create@@YGXPAU_D3DVERTEXBUFFERDESC@@PAPAUIDirect3DVertexBuffer7@@@Z ; f3d_vertex_create

; 690  : 
; 691  : 	for ( count = 0; count < MAX_ALPHA_VERTEX_BUFFERS; count++ )

  00136	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  0013d	eb 09		 jmp	 SHORT $LN10@create_d3d
$LN8@create_d3d:
  0013f	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  00142	83 c0 01	 add	 eax, 1
  00145	89 45 ec	 mov	 DWORD PTR _count$[ebp], eax
$LN10@create_d3d:
  00148	83 7d ec 10	 cmp	 DWORD PTR _count$[ebp], 16 ; 00000010H
  0014c	7d 16		 jge	 SHORT $LN9@create_d3d

; 692  : 	{
; 693  : 		f3d_vertex_create ( &desc, &d3d.alpha_vertex_buffer[count] );

  0014e	8b 45 ec	 mov	 eax, DWORD PTR _count$[ebp]
  00151	8d 0c 85 60 24
	02 00		 lea	 ecx, DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A[eax*4+140384]
  00158	51		 push	 ecx
  00159	8d 55 f0	 lea	 edx, DWORD PTR _desc$[ebp]
  0015c	52		 push	 edx
  0015d	e8 00 00 00 00	 call	 ?f3d_vertex_create@@YGXPAU_D3DVERTEXBUFFERDESC@@PAPAUIDirect3DVertexBuffer7@@@Z ; f3d_vertex_create

; 694  : 	}

  00162	eb db		 jmp	 SHORT $LN8@create_d3d
$LN9@create_d3d:

; 695  : 
; 696  : 	memset ( &desc, 0, sizeof ( D3DVERTEXBUFFERDESC ) );

  00164	6a 10		 push	 16			; 00000010H
  00166	6a 00		 push	 0
  00168	8d 45 f0	 lea	 eax, DWORD PTR _desc$[ebp]
  0016b	50		 push	 eax
  0016c	e8 00 00 00 00	 call	 _memset
  00171	83 c4 0c	 add	 esp, 12			; 0000000cH

; 697  : 
; 698  : 	desc.dwSize = sizeof ( D3DVERTEXBUFFERDESC );

  00174	c7 45 f0 10 00
	00 00		 mov	 DWORD PTR _desc$[ebp], 16 ; 00000010H

; 699  : 
; 700  : #if USE_D3D_SOFTWARE_TNL
; 701  : 	desc.dwCaps = ( D3DVBCAPS_WRITEONLY | D3DVBCAPS_SYSTEMMEMORY );
; 702  : #else
; 703  : 	desc.dwCaps = D3DVBCAPS_WRITEONLY;

  0017b	c7 45 f4 00 00
	01 00		 mov	 DWORD PTR _desc$[ebp+4], 65536 ; 00010000H

; 704  : #endif
; 705  : 
; 706  : 	desc.dwNumVertices = 2048;

  00182	c7 45 fc 00 08
	00 00		 mov	 DWORD PTR _desc$[ebp+12], 2048 ; 00000800H

; 707  : 	desc.dwFVF = D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1;

  00189	c7 45 f8 12 01
	00 00		 mov	 DWORD PTR _desc$[ebp+8], 274 ; 00000112H

; 708  : 
; 709  : 	f3d_vertex_create ( &desc, &d3d.hardware_untransformed_buffer );

  00190	68 5c 24 02 00	 push	 OFFSET ?d3d@@3UDIRECT_3D_VECTORS@@A+140380
  00195	8d 45 f0	 lea	 eax, DWORD PTR _desc$[ebp]
  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 ?f3d_vertex_create@@YGXPAU_D3DVERTEXBUFFERDESC@@PAPAUIDirect3DVertexBuffer7@@@Z ; f3d_vertex_create

; 710  : 
; 711  : 	d3d.triangle_buffer = NULL;

  0019e	c7 05 40 24 02
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140352, 0

; 712  : 	d3d.line_buffer = NULL;

  001a8	c7 05 4c 24 02
	00 00 00 00 00	 mov	 DWORD PTR ?d3d@@3UDIRECT_3D_VECTORS@@A+140364, 0

; 713  : }

  001b2	5f		 pop	 edi
  001b3	5e		 pop	 esi
  001b4	5b		 pop	 ebx
  001b5	8b e5		 mov	 esp, ebp
  001b7	5d		 pop	 ebp
  001b8	c3		 ret	 0
?create_d3d_vertex_buffers@@YGXXZ ENDP			; create_d3d_vertex_buffers
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3d.c
;	COMDAT ?d3d_restore_objects@@YGXH@Z
_TEXT	SEGMENT
_activate$ = 8						; size = 4
?d3d_restore_objects@@YGXH@Z PROC			; d3d_restore_objects, COMDAT

; 1221 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1222 : 
; 1223 : 
; 1224 : 	if ( !activate )

  00009	83 7d 08 00	 cmp	 DWORD PTR _activate$[ebp], 0
  0000d	75 0c		 jne	 SHORT $LN2@d3d_restor

; 1225 : 	{
; 1226 : 
; 1227 : 		//
; 1228 : 		// Losing focus
; 1229 : 		//
; 1230 : 
; 1231 : 		d3d_valid = FALSE;

  0000f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d_valid@@3HA, 0 ; d3d_valid

; 1232 : 	}
; 1233 : 	else

  00019	eb 13		 jmp	 SHORT $LN1@d3d_restor
$LN2@d3d_restor:

; 1234 : 	{
; 1235 : 	
; 1236 : 		//
; 1237 : 		// Gaining focus
; 1238 : 		//
; 1239 : 
; 1240 : 		if ( d3d_initialised )

  0001b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_initialised@@3HA, 0 ; d3d_initialised
  00022	74 0a		 je	 SHORT $LN1@d3d_restor

; 1241 : 		{
; 1242 : 
; 1243 : 			//
; 1244 : 			// Flag the fact we need to recreate the d3d devices/textures
; 1245 : 			//
; 1246 : 
; 1247 : 			d3d_data.recreate_d3d = TRUE;

  00024	c7 05 10 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+16, 1
$LN1@d3d_restor:

; 1248 : 		}
; 1249 : 	}
; 1250 : }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?d3d_restore_objects@@YGXH@Z ENDP			; d3d_restore_objects
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3d.c
;	COMDAT ?d3d_release_objects@@YGXXZ
_TEXT	SEGMENT
_ddrval$ = -4						; size = 4
?d3d_release_objects@@YGXXZ PROC			; d3d_release_objects, COMDAT

; 1309 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1310 : 
; 1311 : 	HRESULT
; 1312 : 		ddrval;
; 1313 : 
; 1314 : 	destroy_d3d_vertex_buffers ();

  00009	e8 00 00 00 00	 call	 ?destroy_d3d_vertex_buffers@@YGXXZ ; destroy_d3d_vertex_buffers

; 1315 : 
; 1316 : 	if ( d3d_data.device )

  0000e	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4, 0
  00015	74 3d		 je	 SHORT $LN1@d3d_releas

; 1317 : 	{
; 1318 : 
; 1319 : 		ddrval = IDirect3DDevice7_Release ( d3d_data.device );

  00017	a1 04 00 00 00	 mov	 eax, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4
  00024	52		 push	 edx
  00025	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00028	ff d0		 call	 eax
  0002a	89 45 fc	 mov	 DWORD PTR _ddrval$[ebp], eax

; 1320 : 
; 1321 : 		if ( ddrval < DD_OK )

  0002d	83 7d fc 00	 cmp	 DWORD PTR _ddrval$[ebp], 0
  00031	7d 17		 jge	 SHORT $LN3@d3d_releas

; 1322 : 		{
; 1323 : 
; 1324 : 			debug_log ( "Unable to release d3d device7: %s", get_d3d_error_message ( ddrval ) );

  00033	8b 45 fc	 mov	 eax, DWORD PTR _ddrval$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ?get_d3d_error_message@@YGPBDJ@Z ; get_d3d_error_message
  0003c	50		 push	 eax
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@FJEMJCHC@Unable?5to?5release?5d3d?5device7?3?5@
  00042	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00047	83 c4 08	 add	 esp, 8
$LN3@d3d_releas:

; 1325 : 		}
; 1326 : 
; 1327 : 		d3d_data.device = NULL;

  0004a	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+4, 0
$LN1@d3d_releas:

; 1328 : 	}
; 1329 : }

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?d3d_release_objects@@YGXXZ ENDP			; d3d_release_objects
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3d.c
;	COMDAT ?set_d3d_capabilities@@YGXPAU_D3DDeviceDesc7@@@Z
_TEXT	SEGMENT
$T1 = -1276						; size = 4
$T2 = -1272						; size = 4
_did$3 = -1076						; size = 1072
_flag$4 = -4						; size = 4
_capabilities$ = 8					; size = 4
?set_d3d_capabilities@@YGXPAU_D3DDeviceDesc7@@@Z PROC	; set_d3d_capabilities, COMDAT

; 720  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 04 00
	00		 sub	 esp, 1276		; 000004fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 721  : 
; 722  : 	if ( capabilities->dwDevCaps & D3DDEVCAPS_TEXTURENONLOCALVIDMEM )	{ d3d_texture_system_memory = TRUE; }

  0000c	8b 45 08	 mov	 eax, DWORD PTR _capabilities$[ebp]
  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00011	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  00017	74 0c		 je	 SHORT $LN2@set_d3d_ca
  00019	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?d3d_texture_system_memory@@3HA, 1 ; d3d_texture_system_memory
  00023	eb 0a		 jmp	 SHORT $LN3@set_d3d_ca
$LN2@set_d3d_ca:

; 723  : 	else																					{ d3d_texture_system_memory = FALSE; }

  00025	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d_texture_system_memory@@3HA, 0 ; d3d_texture_system_memory
$LN3@set_d3d_ca:

; 724  : 
; 725  : 	if ( capabilities->dwDevCaps & D3DDEVCAPS_TEXTUREVIDEOMEMORY )	{ d3d_texture_video_memory = TRUE; }

  0002f	8b 45 08	 mov	 eax, DWORD PTR _capabilities$[ebp]
  00032	8b 08		 mov	 ecx, DWORD PTR [eax]
  00034	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  0003a	74 0c		 je	 SHORT $LN4@set_d3d_ca
  0003c	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?d3d_texture_video_memory@@3HA, 1 ; d3d_texture_video_memory
  00046	eb 0a		 jmp	 SHORT $LN5@set_d3d_ca
$LN4@set_d3d_ca:

; 726  : 	else																				{ d3d_texture_video_memory = FALSE; }

  00048	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d_texture_video_memory@@3HA, 0 ; d3d_texture_video_memory
$LN5@set_d3d_ca:

; 727  : 
; 728  : 	if ( capabilities->dwDevCaps & D3DDEVCAPS_TLVERTEXVIDEOMEMORY )	{ d3d_vertex_buffer_in_video_memory = TRUE; }

  00052	8b 45 08	 mov	 eax, DWORD PTR _capabilities$[ebp]
  00055	8b 08		 mov	 ecx, DWORD PTR [eax]
  00057	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  0005d	74 0c		 je	 SHORT $LN6@set_d3d_ca
  0005f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?d3d_vertex_buffer_in_video_memory@@3HA, 1 ; d3d_vertex_buffer_in_video_memory
  00069	eb 0a		 jmp	 SHORT $LN7@set_d3d_ca
$LN6@set_d3d_ca:

; 729  : 	else																					{ d3d_vertex_buffer_in_video_memory = FALSE; }

  0006b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d_vertex_buffer_in_video_memory@@3HA, 0 ; d3d_vertex_buffer_in_video_memory
$LN7@set_d3d_ca:

; 730  : 
; 731  : 	if ( capabilities->dwDevCaps & D3DDEVCAPS_SEPARATETEXTUREMEMORIES )	{ d3d_can_render_to_texture = FALSE; debug_log ( "SETTING NON RENDER" ); }

  00075	8b 45 08	 mov	 eax, DWORD PTR _capabilities$[ebp]
  00078	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007a	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  00080	74 19		 je	 SHORT $LN8@set_d3d_ca
  00082	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KPJAEFKI@SETTING?5NON?5RENDER@
  00091	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00096	83 c4 04	 add	 esp, 4
  00099	eb 0a		 jmp	 SHORT $LN9@set_d3d_ca
$LN8@set_d3d_ca:

; 732  : 	else																						{ d3d_can_render_to_texture = TRUE; }

  0009b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 1 ; d3d_can_render_to_texture
$LN9@set_d3d_ca:

; 733  : 
; 734  : 	if ( d3d_override_render_to_texture )

  000a5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_override_render_to_texture@@3HA, 0 ; d3d_override_render_to_texture
  000ac	74 0a		 je	 SHORT $LN10@set_d3d_ca

; 735  : 	{
; 736  : 
; 737  : 		d3d_can_render_to_texture = FALSE;

  000ae	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
$LN10@set_d3d_ca:

; 738  : 	}
; 739  : 
; 740  : 	if ( current_display_device )

  000b8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_display_device@@3PAUDD_DISPLAY_DEVICE@@A, 0 ; current_display_device
  000bf	74 15		 je	 SHORT $LN11@set_d3d_ca

; 741  : 	{
; 742  : 
; 743  : 		if ( current_display_device->is_nondisplay )

  000c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_display_device@@3PAUDD_DISPLAY_DEVICE@@A ; current_display_device
  000c6	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  000ca	74 0a		 je	 SHORT $LN11@set_d3d_ca

; 744  : 		{
; 745  : 
; 746  : 			d3d_can_render_to_texture = FALSE;

  000cc	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
$LN11@set_d3d_ca:

; 747  : 		}
; 748  : 	}
; 749  : 
; 750  : 	if ( capabilities->dwDevCaps & D3DDD_TRICAPS )

  000d6	8b 45 08	 mov	 eax, DWORD PTR _capabilities$[ebp]
  000d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000db	83 e1 40	 and	 ecx, 64			; 00000040H
  000de	0f 84 f4 00 00
	00		 je	 $LN13@set_d3d_ca

; 751  : 	{
; 752  : 
; 753  : 		//
; 754  : 		// Check the rasterisation capabilities of the device
; 755  : 		//
; 756  : 
; 757  : 		if ( capabilities->dpcTriCaps.dwRasterCaps & D3DPRASTERCAPS_FOGTABLE  )
; 758  : 		{
; 759  : 
; 760  : #if ( DEBUG_MODULE )
; 761  : 			debug_log ( "Fog table supported" );
; 762  : #endif
; 763  : 		}
; 764  : 
; 765  : 		if ( capabilities->dpcTriCaps.dwRasterCaps & D3DPRASTERCAPS_FOGVERTEX  )
; 766  : 		{
; 767  : 
; 768  : #if ( DEBUG_MODULE )
; 769  : 			debug_log ( "Fog vertex supported" );
; 770  : #endif
; 771  : 		}
; 772  : 
; 773  : 		if ( capabilities->dpcTriCaps.dwRasterCaps & D3DPRASTERCAPS_MIPMAPLODBIAS )
; 774  : 		{
; 775  : 
; 776  : #if ( DEBUG_MODULE )
; 777  : 			debug_log ( "MipMapLOD supported" );
; 778  : #endif
; 779  : 		}
; 780  : 
; 781  : 		if ( capabilities->dpcTriCaps.dwRasterCaps & D3DPRASTERCAPS_ZBIAS )
; 782  : 		{
; 783  : 
; 784  : #if ( DEBUG_MODULE )
; 785  : 			debug_log ( "ZBias supported" );
; 786  : #endif
; 787  : 		}
; 788  : 
; 789  : 		if ( capabilities->dpcTriCaps.dwRasterCaps & D3DPRASTERCAPS_ZTEST  )
; 790  : 		{
; 791  : 
; 792  : #if ( DEBUG_MODULE )
; 793  : 			debug_log ( "Z Testing supported" );
; 794  : #endif
; 795  : 		}
; 796  : 
; 797  : 		//
; 798  : 		// Ensure we have the Z test we need
; 799  : 		//
; 800  : 
; 801  : 		if ( capabilities->dpcTriCaps.dwZCmpCaps & D3DPCMPCAPS_GREATEREQUAL )
; 802  : 		{
; 803  : 
; 804  : #if ( DEBUG_MODULE )
; 805  : 			debug_log ( "Z compare greater equal supported" );
; 806  : #endif
; 807  : 		}
; 808  : 
; 809  : 		//
; 810  : 		// Check the source alpha blending capabilities
; 811  : 		//
; 812  : 
; 813  : 		if ( capabilities->dpcTriCaps.dwSrcBlendCaps & D3DPBLENDCAPS_ONE  )
; 814  : 		{
; 815  : 
; 816  : #if ( DEBUG_MODULE )
; 817  : 			debug_log ( "Src blend one supported" );
; 818  : #endif
; 819  : 		}
; 820  : 
; 821  : 		if ( capabilities->dpcTriCaps.dwSrcBlendCaps & D3DPBLENDCAPS_BOTHSRCALPHA )
; 822  : 		{
; 823  : 
; 824  : #if ( DEBUG_MODULE )
; 825  : 			debug_log ( "BOTHSRCBLEND supported" );
; 826  : #endif
; 827  : 		}
; 828  : 
; 829  : 		if ( capabilities->dpcTriCaps.dwSrcBlendCaps & D3DPBLENDCAPS_SRCALPHA  )
; 830  : 		{
; 831  : 
; 832  : #if ( DEBUG_MODULE )
; 833  : 			debug_log ( "Src blend alpha supported" );
; 834  : #endif
; 835  : 		}
; 836  : 
; 837  : 		if ( capabilities->dpcTriCaps.dwSrcBlendCaps & D3DPBLENDCAPS_INVSRCALPHA  )
; 838  : 		{
; 839  : 
; 840  : #if ( DEBUG_MODULE )
; 841  : 			debug_log ( "Src blend inv alpha supported" );
; 842  : #endif
; 843  : 		}
; 844  : 
; 845  : 		if ( capabilities->dpcTriCaps.dwSrcBlendCaps & D3DPBLENDCAPS_ZERO  )
; 846  : 		{
; 847  : 
; 848  : #if ( DEBUG_MODULE )
; 849  : 			debug_log ( "Src blend zero supported" );
; 850  : #endif
; 851  : 		}
; 852  : 
; 853  : 		//
; 854  : 		// Check the destination alpha blending capabilities
; 855  : 		//
; 856  : 
; 857  : 		if ( capabilities->dpcTriCaps.dwDestBlendCaps & D3DPBLENDCAPS_ONE  )
; 858  : 		{
; 859  : 
; 860  : #if ( DEBUG_MODULE )
; 861  : 			debug_log ( "Dest blend one supported" );
; 862  : #endif
; 863  : 		}
; 864  : 
; 865  : 		if ( capabilities->dpcTriCaps.dwDestBlendCaps & D3DPBLENDCAPS_SRCALPHA  )
; 866  : 		{
; 867  : 
; 868  : #if ( DEBUG_MODULE )
; 869  : 			debug_log ( "Dest blend alpha supported" );
; 870  : #endif
; 871  : 		}
; 872  : 
; 873  : 		if ( capabilities->dpcTriCaps.dwDestBlendCaps & D3DPBLENDCAPS_INVSRCALPHA  )
; 874  : 		{
; 875  : 
; 876  : #if ( DEBUG_MODULE )
; 877  : 			debug_log ( "Dest blend inv alpha supported" );
; 878  : #endif
; 879  : 		}
; 880  : 
; 881  : 		if ( capabilities->dpcTriCaps.dwDestBlendCaps & D3DPBLENDCAPS_ZERO  )
; 882  : 		{
; 883  : 
; 884  : #if ( DEBUG_MODULE )
; 885  : 			debug_log ( "Dest blend zero supported" );
; 886  : #endif
; 887  : 		}
; 888  : 
; 889  : 		//
; 890  : 		// Check the shading capabilities
; 891  : 		//
; 892  : 
; 893  : 		if ( capabilities->dpcTriCaps.dwShadeCaps & D3DPSHADECAPS_ALPHAFLATBLEND  )
; 894  : 		{
; 895  : 
; 896  : #if ( DEBUG_MODULE )
; 897  : 			debug_log ( "Alpha flat blend supported" );
; 898  : #endif
; 899  : 		}
; 900  : 
; 901  : 		if ( capabilities->dpcTriCaps.dwShadeCaps & D3DPSHADECAPS_ALPHAFLATSTIPPLED  )
; 902  : 		{
; 903  : 
; 904  : #if ( DEBUG_MODULE )
; 905  : 			debug_log ( "Alpha flat stippled supported" );
; 906  : #endif
; 907  : 		}
; 908  : 
; 909  : 		if ( capabilities->dpcTriCaps.dwShadeCaps & D3DPSHADECAPS_ALPHAGOURAUDBLEND  )

  000e4	8b 45 08	 mov	 eax, DWORD PTR _capabilities$[ebp]
  000e7	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  000ea	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  000f0	74 0c		 je	 SHORT $LN31@set_d3d_ca

; 910  : 		{
; 911  : 
; 912  : 			d3d_flat_only_alpha = FALSE;

  000f2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d_flat_only_alpha@@3HA, 0 ; d3d_flat_only_alpha

; 913  : 
; 914  : #if ( DEBUG_MODULE )
; 915  : 			debug_log ( "Alpha gouraud blend supported" );
; 916  : #endif
; 917  : 		}
; 918  : 		else

  000fc	eb 0a		 jmp	 SHORT $LN41@set_d3d_ca
$LN31@set_d3d_ca:

; 919  : 		{
; 920  : 
; 921  : 			d3d_flat_only_alpha = TRUE;

  000fe	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?d3d_flat_only_alpha@@3HA, 1 ; d3d_flat_only_alpha
$LN41@set_d3d_ca:

; 922  : 		}
; 923  : 
; 924  : 		if ( capabilities->dpcTriCaps.dwShadeCaps & D3DPSHADECAPS_ALPHAGOURAUDSTIPPLED  )
; 925  : 		{
; 926  : 
; 927  : #if ( DEBUG_MODULE )
; 928  : 			debug_log ( "Alpha gouraud stippled supported" );
; 929  : #endif
; 930  : 		}
; 931  : 
; 932  : 		if ( capabilities->dpcTriCaps.dwShadeCaps & D3DPSHADECAPS_COLORFLATRGB  )
; 933  : 		{
; 934  : 
; 935  : #if ( DEBUG_MODULE )
; 936  : 			debug_log ( "Colour flat rgb supported" );
; 937  : #endif
; 938  : 		}
; 939  : 		if ( capabilities->dpcTriCaps.dwShadeCaps & D3DPSHADECAPS_COLORGOURAUDRGB  )
; 940  : 		{
; 941  : 
; 942  : #if ( DEBUG_MODULE )
; 943  : 			debug_log ( "Colour gouraud rgb supported" );
; 944  : #endif
; 945  : 		}
; 946  : 		if ( capabilities->dpcTriCaps.dwShadeCaps & D3DPSHADECAPS_FOGFLAT  )
; 947  : 		{
; 948  : 
; 949  : #if ( DEBUG_MODULE )
; 950  : 			debug_log ( "Fog flat supported" );
; 951  : #endif
; 952  : 		}
; 953  : 		if ( capabilities->dpcTriCaps.dwShadeCaps & D3DPSHADECAPS_FOGGOURAUD  )
; 954  : 		{
; 955  : 
; 956  : #if ( DEBUG_MODULE )
; 957  : 			debug_log ( "Fog gouraud supported" );
; 958  : #endif
; 959  : 		}
; 960  : 		if ( capabilities->dpcTriCaps.dwShadeCaps & D3DPSHADECAPS_SPECULARFLATRGB  )
; 961  : 		{
; 962  : 
; 963  : #if ( DEBUG_MODULE )
; 964  : 			debug_log ( "Specular flat supported" );
; 965  : #endif
; 966  : 		}
; 967  : 		if ( capabilities->dpcTriCaps.dwShadeCaps & D3DPSHADECAPS_SPECULARGOURAUDRGB  )
; 968  : 		{
; 969  : 
; 970  : #if ( DEBUG_MODULE )
; 971  : 			debug_log ( "Specular gouraud supported" );
; 972  : #endif
; 973  : 		}
; 974  : 
; 975  : 		//
; 976  : 		// Make sure all the texture mapping modes we need are available
; 977  : 		//
; 978  : 
; 979  : 		if ( capabilities->dpcTriCaps.dwTextureCaps & D3DPTEXTURECAPS_ALPHA )
; 980  : 		{
; 981  : 
; 982  : #if ( DEBUG_MODULE )
; 983  : 			debug_log ( "Alpha textures allowed" );
; 984  : #endif
; 985  : 		}
; 986  : 
; 987  : 		if ( capabilities->dpcTriCaps.dwTextureCaps & D3DPTEXTURECAPS_PERSPECTIVE )
; 988  : 		{
; 989  : 
; 990  : #if ( DEBUG_MODULE )
; 991  : 			debug_log ( "Perspective Correction allowed" );
; 992  : #endif
; 993  : 		}
; 994  : 
; 995  : 		if ( capabilities->dpcTriCaps.dwTextureCaps & D3DPTEXTURECAPS_SQUAREONLY )

  00108	8b 45 08	 mov	 eax, DWORD PTR _capabilities$[ebp]
  0010b	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  0010e	83 e1 20	 and	 ecx, 32			; 00000020H
  00111	74 0c		 je	 SHORT $LN42@set_d3d_ca

; 996  : 		{
; 997  : 
; 998  : 			d3d_square_only_textures = TRUE;

  00113	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?d3d_square_only_textures@@3HA, 1 ; d3d_square_only_textures

; 999  : 		}
; 1000 : 		else

  0011d	eb 0a		 jmp	 SHORT $LN45@set_d3d_ca
$LN42@set_d3d_ca:

; 1001 : 		{
; 1002 : 
; 1003 : 			d3d_square_only_textures = FALSE;

  0011f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d_square_only_textures@@3HA, 0 ; d3d_square_only_textures
$LN45@set_d3d_ca:

; 1004 : 		}
; 1005 : 
; 1006 : 		//
; 1007 : 		// Check the texture filtering capabilities
; 1008 : 		//
; 1009 : 
; 1010 : 		if ( capabilities->dpcTriCaps.dwTextureFilterCaps & D3DPTFILTERCAPS_NEAREST  )
; 1011 : 		{
; 1012 : 
; 1013 : #if ( DEBUG_MODULE )
; 1014 : 			debug_log ( "Texture filter nearest supported" );
; 1015 : #endif
; 1016 : 		}
; 1017 : 
; 1018 : 		if ( capabilities->dpcTriCaps.dwTextureFilterCaps & D3DPTFILTERCAPS_LINEAR  )
; 1019 : 		{
; 1020 : 
; 1021 : #if ( DEBUG_MODULE )
; 1022 : 			debug_log ( "Texture filter linear supported" );
; 1023 : #endif
; 1024 : 		}
; 1025 : 
; 1026 : 
; 1027 : 		{
; 1028 : 
; 1029 : 			int
; 1030 : 				flag;
; 1031 : 
; 1032 : 			flag = FALSE;

  00129	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _flag$4[ebp], 0

; 1033 : 
; 1034 : 			if ( capabilities->dpcTriCaps.dwTextureFilterCaps & D3DPTFILTERCAPS_MIPNEAREST  )

  00130	8b 45 08	 mov	 eax, DWORD PTR _capabilities$[ebp]
  00133	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00136	83 e1 04	 and	 ecx, 4
  00139	74 07		 je	 SHORT $LN46@set_d3d_ca

; 1035 : 			{
; 1036 : 	
; 1037 : 				flag = TRUE;

  0013b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _flag$4[ebp], 1
$LN46@set_d3d_ca:

; 1038 : 	
; 1039 : #if ( DEBUG_MODULE )
; 1040 : 				debug_log ( "Texture filter mip-nearest supported" );
; 1041 : #endif
; 1042 : 			}
; 1043 : 	
; 1044 : 			if ( capabilities->dpcTriCaps.dwTextureFilterCaps & D3DPTFILTERCAPS_MIPLINEAR  )

  00142	8b 45 08	 mov	 eax, DWORD PTR _capabilities$[ebp]
  00145	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00148	83 e1 08	 and	 ecx, 8
  0014b	74 07		 je	 SHORT $LN47@set_d3d_ca

; 1045 : 			{
; 1046 : 	
; 1047 : 				flag = TRUE;

  0014d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _flag$4[ebp], 1
$LN47@set_d3d_ca:

; 1048 : 	
; 1049 : #if ( DEBUG_MODULE )
; 1050 : 				debug_log ( "Texture filter mip-linear supported" );
; 1051 : #endif
; 1052 : 			}
; 1053 : 	
; 1054 : 			if ( capabilities->dpcTriCaps.dwTextureFilterCaps & D3DPTFILTERCAPS_LINEARMIPNEAREST  )

  00154	8b 45 08	 mov	 eax, DWORD PTR _capabilities$[ebp]
  00157	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0015a	83 e1 10	 and	 ecx, 16			; 00000010H
  0015d	74 07		 je	 SHORT $LN48@set_d3d_ca

; 1055 : 			{
; 1056 : 	
; 1057 : 				flag = TRUE;

  0015f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _flag$4[ebp], 1
$LN48@set_d3d_ca:

; 1058 : 	
; 1059 : #if ( DEBUG_MODULE )
; 1060 : 				debug_log ( "Texture filter linear-mip-nearest supported" );
; 1061 : #endif
; 1062 : 			}
; 1063 : 	
; 1064 : 			if ( capabilities->dpcTriCaps.dwTextureFilterCaps & D3DPTFILTERCAPS_LINEARMIPLINEAR  )

  00166	8b 45 08	 mov	 eax, DWORD PTR _capabilities$[ebp]
  00169	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  0016c	83 e1 20	 and	 ecx, 32			; 00000020H
  0016f	74 13		 je	 SHORT $LN49@set_d3d_ca

; 1065 : 			{
; 1066 : 	
; 1067 : #if ( DEBUG_MODULE )
; 1068 : 				debug_log ( "Texture filter linear-mip-linear supported" );
; 1069 : #endif
; 1070 : 
; 1071 : 				flag = TRUE;

  00171	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _flag$4[ebp], 1

; 1072 : 	
; 1073 : 				d3d_trilinear_filtering = TRUE;

  00178	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?d3d_trilinear_filtering@@3HA, 1 ; d3d_trilinear_filtering

; 1074 : 			}
; 1075 : 			else

  00182	eb 0a		 jmp	 SHORT $LN50@set_d3d_ca
$LN49@set_d3d_ca:

; 1076 : 			{
; 1077 : 
; 1078 : 				d3d_trilinear_filtering = FALSE;

  00184	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d_trilinear_filtering@@3HA, 0 ; d3d_trilinear_filtering
$LN50@set_d3d_ca:

; 1079 : 			}
; 1080 : 
; 1081 : 			d3d_mipmap_textures = flag;

  0018e	8b 45 fc	 mov	 eax, DWORD PTR _flag$4[ebp]
  00191	a3 00 00 00 00	 mov	 DWORD PTR ?d3d_mipmap_textures@@3HA, eax ; d3d_mipmap_textures

; 1082 : 		}
; 1083 : 
; 1084 : 		//
; 1085 : 		// Check the texture blending capabilities
; 1086 : 		//
; 1087 : 
; 1088 : 		if ( capabilities->dpcTriCaps.dwTextureBlendCaps & D3DPTBLENDCAPS_MODULATE )

  00196	8b 45 08	 mov	 eax, DWORD PTR _capabilities$[ebp]
  00199	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
  0019c	83 e1 02	 and	 ecx, 2
  0019f	74 0c		 je	 SHORT $LN51@set_d3d_ca

; 1089 : 		{
; 1090 : 
; 1091 : 			//
; 1092 : 			// This capability *must* be supported
; 1093 : 			//
; 1094 : 
; 1095 : 			d3d_modulate = TRUE;

  001a1	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?d3d_modulate@@3HA, 1 ; d3d_modulate

; 1096 : 		}
; 1097 : 		else

  001ab	eb 0a		 jmp	 SHORT $LN52@set_d3d_ca
$LN51@set_d3d_ca:

; 1098 : 		{
; 1099 : 
; 1100 : 			d3d_modulate = FALSE;

  001ad	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d_modulate@@3HA, 0 ; d3d_modulate
$LN52@set_d3d_ca:

; 1101 : 		}
; 1102 : 
; 1103 : 		if ( capabilities->dpcTriCaps.dwTextureBlendCaps & D3DPTBLENDCAPS_MODULATEALPHA )

  001b7	8b 45 08	 mov	 eax, DWORD PTR _capabilities$[ebp]
  001ba	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
  001bd	83 e1 08	 and	 ecx, 8
  001c0	74 0c		 je	 SHORT $LN53@set_d3d_ca

; 1104 : 		{
; 1105 : 
; 1106 : 			//
; 1107 : 			// Rage Pro *doesn't* support modulate alpha - but we can still run anyway :)
; 1108 : 			//
; 1109 : 
; 1110 : 			d3d_modulate_alpha = TRUE;

  001c2	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?d3d_modulate_alpha@@3HA, 1 ; d3d_modulate_alpha

; 1111 : 		}
; 1112 : 		else

  001cc	eb 0a		 jmp	 SHORT $LN13@set_d3d_ca
$LN53@set_d3d_ca:

; 1113 : 		{
; 1114 : 
; 1115 : 			d3d_modulate_alpha = FALSE;

  001ce	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d_modulate_alpha@@3HA, 0 ; d3d_modulate_alpha
$LN13@set_d3d_ca:

; 1116 : 		}
; 1117 : 
; 1118 : 		//
; 1119 : 		// Check the texture wrapping capabilities
; 1120 : 		//
; 1121 : 
; 1122 : 		if ( capabilities->dpcTriCaps.dwTextureAddressCaps & D3DPTADDRESSCAPS_WRAP  )
; 1123 : 		{
; 1124 : 
; 1125 : #if ( DEBUG_MODULE )
; 1126 : 			debug_log ( "Texture wrapping supported" );
; 1127 : #endif
; 1128 : 		}
; 1129 : 	}
; 1130 : 
; 1131 : 	{
; 1132 : 
; 1133 : 		if ( capabilities->dpcLineCaps.dwTextureCaps )

  001d8	8b 45 08	 mov	 eax, DWORD PTR _capabilities$[ebp]
  001db	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  001df	74 0c		 je	 SHORT $LN56@set_d3d_ca

; 1134 : 		{
; 1135 : 
; 1136 : 			d3d_textured_lines = TRUE;

  001e1	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?d3d_textured_lines@@3HA, 1 ; d3d_textured_lines

; 1137 : 		}
; 1138 : 		else

  001eb	eb 0a		 jmp	 SHORT $LN57@set_d3d_ca
$LN56@set_d3d_ca:

; 1139 : 		{
; 1140 : 
; 1141 : 			d3d_textured_lines = FALSE;

  001ed	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d_textured_lines@@3HA, 0 ; d3d_textured_lines
$LN57@set_d3d_ca:

; 1142 : 		}
; 1143 : 	}
; 1144 : 
; 1145 : 	//
; 1146 : 	// Check texture map size capabilities
; 1147 : 	//
; 1148 : 
; 1149 : 	d3d_minimum_texture_width = capabilities->dwMinTextureWidth;

  001f7	8b 45 08	 mov	 eax, DWORD PTR _capabilities$[ebp]
  001fa	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  001fd	89 0d 00 00 00
	00		 mov	 DWORD PTR ?d3d_minimum_texture_width@@3HA, ecx ; d3d_minimum_texture_width

; 1150 : 	d3d_minimum_texture_height = capabilities->dwMinTextureHeight;

  00203	8b 45 08	 mov	 eax, DWORD PTR _capabilities$[ebp]
  00206	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  0020c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?d3d_minimum_texture_height@@3HA, ecx ; d3d_minimum_texture_height

; 1151 : 
; 1152 : 	d3d_maximum_texture_width = capabilities->dwMaxTextureWidth;

  00212	8b 45 08	 mov	 eax, DWORD PTR _capabilities$[ebp]
  00215	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0021b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?d3d_maximum_texture_width@@3HA, ecx ; d3d_maximum_texture_width

; 1153 : 	d3d_maximum_texture_height = capabilities->dwMaxTextureHeight;

  00221	8b 45 08	 mov	 eax, DWORD PTR _capabilities$[ebp]
  00224	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [eax+136]
  0022a	89 0d 00 00 00
	00		 mov	 DWORD PTR ?d3d_maximum_texture_height@@3HA, ecx ; d3d_maximum_texture_height

; 1154 : 
; 1155 : 	//
; 1156 : 	// If the card doesn't have 8Megs of memory, limit texture size to 256x256
; 1157 : 	//
; 1158 : 
; 1159 : 
; 1160 : 	if ( d3d_total_video_texture_memory < 8192*1024 )

  00230	81 3d 00 00 00
	00 00 00 80 00	 cmp	 DWORD PTR ?d3d_total_video_texture_memory@@3HA, 8388608 ; d3d_total_video_texture_memory, 00800000H
  0023a	7d 46		 jge	 SHORT $LN58@set_d3d_ca

; 1161 : 	{
; 1162 : 
; 1163 : 		d3d_maximum_texture_width = min ( d3d_maximum_texture_width, 256 );

  0023c	c7 85 08 fb ff
	ff 00 01 00 00	 mov	 DWORD PTR $T2[ebp], 256	; 00000100H
  00246	8d 85 08 fb ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  0024c	50		 push	 eax
  0024d	68 00 00 00 00	 push	 OFFSET ?d3d_maximum_texture_width@@3HA ; d3d_maximum_texture_width
  00252	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  00257	8b 08		 mov	 ecx, DWORD PTR [eax]
  00259	89 0d 00 00 00
	00		 mov	 DWORD PTR ?d3d_maximum_texture_width@@3HA, ecx ; d3d_maximum_texture_width

; 1164 : 		d3d_maximum_texture_height = min ( d3d_maximum_texture_height, 256 );

  0025f	c7 85 04 fb ff
	ff 00 01 00 00	 mov	 DWORD PTR $T1[ebp], 256	; 00000100H
  00269	8d 85 04 fb ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0026f	50		 push	 eax
  00270	68 00 00 00 00	 push	 OFFSET ?d3d_maximum_texture_height@@3HA ; d3d_maximum_texture_height
  00275	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  0027a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0027c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?d3d_maximum_texture_height@@3HA, ecx ; d3d_maximum_texture_height
$LN58@set_d3d_ca:

; 1165 : 	}
; 1166 : 
; 1167 : 	d3d_using_permedia2_chipset = FALSE;

  00282	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d_using_permedia2_chipset@@3HA, 0 ; d3d_using_permedia2_chipset

; 1168 : 
; 1169 : 	//
; 1170 : 	// Check for chipset specific stuff.
; 1171 : 	//
; 1172 : 
; 1173 : 	{
; 1174 : 
; 1175 : 		DDDEVICEIDENTIFIER2
; 1176 : 			did;
; 1177 : 
; 1178 : 		IDirectDraw7_GetDeviceIdentifier ( ddraw.ddraw, &did, 0 );

  0028c	6a 00		 push	 0
  0028e	8d 85 cc fb ff
	ff		 lea	 eax, DWORD PTR _did$3[ebp]
  00294	50		 push	 eax
  00295	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  0029b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0029d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ddraw@@3Udirect_draw_data@@A
  002a2	50		 push	 eax
  002a3	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  002a6	ff d1		 call	 ecx

; 1179 : 
; 1180 : 		if ( did.dwVendorId ==0x12d2 )

  002a8	81 7d d4 d2 12
	00 00		 cmp	 DWORD PTR _did$3[ebp+1032], 4818 ; 000012d2H
  002af	75 16		 jne	 SHORT $LN59@set_d3d_ca

; 1181 : 		{
; 1182 : 
; 1183 : 			if ( did.dwDeviceId == 0x18 || did.dwDeviceId == 0x19 )

  002b1	83 7d d8 18	 cmp	 DWORD PTR _did$3[ebp+1036], 24 ; 00000018H
  002b5	74 06		 je	 SHORT $LN61@set_d3d_ca
  002b7	83 7d d8 19	 cmp	 DWORD PTR _did$3[ebp+1036], 25 ; 00000019H
  002bb	75 0a		 jne	 SHORT $LN59@set_d3d_ca
$LN61@set_d3d_ca:

; 1184 : 			{
; 1185 : 
; 1186 : 				//
; 1187 : 				// Its a riva 128 - disable trilinear filtering!!!
; 1188 : 				//
; 1189 : 
; 1190 : 				d3d_trilinear_filtering = FALSE;

  002bd	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d_trilinear_filtering@@3HA, 0 ; d3d_trilinear_filtering
$LN59@set_d3d_ca:

; 1191 : 			}
; 1192 : 		}
; 1193 : 
; 1194 : 		if ( did.dwVendorId == 0x3d3d )

  002c7	81 7d d4 3d 3d
	00 00		 cmp	 DWORD PTR _did$3[ebp+1032], 15677 ; 00003d3dH
  002ce	75 16		 jne	 SHORT $LN62@set_d3d_ca

; 1195 : 		{
; 1196 : 
; 1197 : 			if ( ( did.dwDeviceId == 0x07 ) || ( did.dwDeviceId == 0x09 ) )

  002d0	83 7d d8 07	 cmp	 DWORD PTR _did$3[ebp+1036], 7
  002d4	74 06		 je	 SHORT $LN64@set_d3d_ca
  002d6	83 7d d8 09	 cmp	 DWORD PTR _did$3[ebp+1036], 9
  002da	75 0a		 jne	 SHORT $LN62@set_d3d_ca
$LN64@set_d3d_ca:

; 1198 : 			{
; 1199 : 
; 1200 : 				d3d_using_permedia2_chipset = TRUE;

  002dc	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?d3d_using_permedia2_chipset@@3HA, 1 ; d3d_using_permedia2_chipset
$LN62@set_d3d_ca:

; 1201 : 			}
; 1202 : 		}
; 1203 : 
; 1204 : 		if ( did.dwVendorId == 0x104c)

  002e6	81 7d d4 4c 10
	00 00		 cmp	 DWORD PTR _did$3[ebp+1032], 4172 ; 0000104cH
  002ed	75 13		 jne	 SHORT $LN1@set_d3d_ca

; 1205 : 		{
; 1206 : 
; 1207 : 			if ( did.dwDeviceId == 0x3d07 )

  002ef	81 7d d8 07 3d
	00 00		 cmp	 DWORD PTR _did$3[ebp+1036], 15623 ; 00003d07H
  002f6	75 0a		 jne	 SHORT $LN1@set_d3d_ca

; 1208 : 			{
; 1209 : 
; 1210 : 				d3d_using_permedia2_chipset = TRUE;

  002f8	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?d3d_using_permedia2_chipset@@3HA, 1 ; d3d_using_permedia2_chipset
$LN1@set_d3d_ca:

; 1211 : 			}
; 1212 : 		}
; 1213 : 	}
; 1214 : }

  00302	5f		 pop	 edi
  00303	5e		 pop	 esi
  00304	5b		 pop	 ebx
  00305	8b e5		 mov	 esp, ebp
  00307	5d		 pop	 ebp
  00308	c2 04 00	 ret	 4
?set_d3d_capabilities@@YGXPAU_D3DDeviceDesc7@@@Z ENDP	; set_d3d_capabilities
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\d3d.c
;	COMDAT ?initialise_direct_3d@@YGHXZ
_TEXT	SEGMENT
_count$ = -4						; size = 4
?initialise_direct_3d@@YGHXZ PROC			; initialise_direct_3d, COMDAT

; 234  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 235  : 
; 236  : 	int
; 237  : 		count;
; 238  : 
; 239  : 
; 240  : 	for ( count = 0; count < 256; count++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@initialise:
  0001b	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _count$[ebp], 256 ; 00000100H
  00022	7d 1a		 jge	 SHORT $LN3@initialise

; 241  : 	{
; 242  : 
; 243  : 		application_colour_table[count].peFlags |= D3DPAL_READONLY;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00027	0f b6 0c 85 03
	00 00 00	 movzx	 ecx, BYTE PTR ?application_colour_table@@3PAUtagPALETTEENTRY@@A[eax*4+3]
  0002f	83 c9 40	 or	 ecx, 64			; 00000040H
  00032	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  00035	88 0c 95 03 00
	00 00		 mov	 BYTE PTR ?application_colour_table@@3PAUtagPALETTEENTRY@@A[edx*4+3], cl

; 244  : 	}

  0003c	eb d4		 jmp	 SHORT $LN2@initialise
$LN3@initialise:

; 245  : 
; 246  : 	ASSERT ( get_graphics_system_initialised () );

  0003e	e8 00 00 00 00	 call	 ?get_graphics_system_initialised@@YGHXZ ; get_graphics_system_initialised
  00043	85 c0		 test	 eax, eax
  00045	75 18		 jne	 SHORT $LN5@initialise
  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_direct_3d@@YGHXZ@4JA
  0004c	83 c0 0c	 add	 eax, 12			; 0000000cH
  0004f	50		 push	 eax
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@NDIAJLDF@c?3?2users?2nhv90?2projects?2eech?2mo@
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LKGNIMMJ@get_graphics_system_initialised@
  0005a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@initialise:

; 247  : 
; 248  : 	register_exit_function ( d3d_release_objects );

  0005f	68 00 00 00 00	 push	 OFFSET ?d3d_release_objects@@YGXXZ ; d3d_release_objects
  00064	e8 00 00 00 00	 call	 ?register_exit_function@@YGXP6GXXZ@Z ; register_exit_function

; 249  : 
; 250  : 	//
; 251  : 	// Create the 3d device
; 252  : 	//
; 253  : 
; 254  : 	initialise_direct_3d_driver ();

  00069	e8 00 00 00 00	 call	 ?initialise_direct_3d_driver@@YGHXZ ; initialise_direct_3d_driver

; 255  : 
; 256  : 	//
; 257  : 	// Create the vertex buffers
; 258  : 	//
; 259  : 
; 260  : 	create_d3d_vertex_buffers ();

  0006e	e8 00 00 00 00	 call	 ?create_d3d_vertex_buffers@@YGXXZ ; create_d3d_vertex_buffers

; 261  : 
; 262  : 	//
; 263  : 	// Register the restore routine.
; 264  : 	//
; 265  : 
; 266  : 	register_post_activate_message_function ( d3d_restore_objects );

  00073	68 00 00 00 00	 push	 OFFSET ?d3d_restore_objects@@YGXH@Z ; d3d_restore_objects
  00078	e8 00 00 00 00	 call	 ?register_post_activate_message_function@@YGHP6GXH@Z@Z ; register_post_activate_message_function

; 267  : 
; 268  : 	//
; 269  : 	//
; 270  : 	//
; 271  : 
; 272  : 	d3d_data.recreate_d3d = FALSE;

  0007d	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?d3d_data@@3UDIRECT_3D_DATA@@A+16, 0

; 273  : 
; 274  : 	return ( TRUE );

  00087	b8 01 00 00 00	 mov	 eax, 1

; 275  : }

  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
?initialise_direct_3d@@YGHXZ ENDP			; initialise_direct_3d
_TEXT	ENDS
END
