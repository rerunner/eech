; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\3d\3dexplos.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?explosion_object_points_lookup_list@@3PAUEXPLOSION_OBJECT_POINTS_LOOKUP@@A ; explosion_object_points_lookup_list
_BSS	SEGMENT
?explosion_object_points_lookup_list@@3PAUEXPLOSION_OBJECT_POINTS_LOOKUP@@A DD 01H DUP (?) ; explosion_object_points_lookup_list
_BSS	ENDS
PUBLIC	_fabsf
PUBLIC	?fabs@@YGMM@Z					; fabs
PUBLIC	?asm_convert_float_to_int@@YGXMPAH@Z		; asm_convert_float_to_int
PUBLIC	?generate_lookup_outcode@@YGHHHHH@Z		; generate_lookup_outcode
PUBLIC	?draw_3d_explosion@@YGXPAUOBJECT_3D_EXPLOSION@@@Z ; draw_3d_explosion
PUBLIC	?apply_displacement_maps@@YGXPAUVEC3D@@PAUDISPLACEMENT_MAP@@M@Z ; apply_displacement_maps
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0BN@NAGKEOBN@Generated?5list?5for?5object?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?0??get_displacement_map_position@@YGXPAUVEC3D@@PAUDISPLACEMENT_MAP@@PAH@Z@4JA ; `get_displacement_map_position'::`1'::__LINE__Var
PUBLIC	??_C@_0DD@FBOIPIKF@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0CB@LPPACKDL@?$CI?5pitch?5?$DO?$DN?50?5?$CJ?5?$CG?$CG?5?$CI?5pitch?5?$DM?$DN?51?5@ ; `string'
PUBLIC	??_C@_0CF@JCFNDLIK@?$CI?5heading?5?$DO?$DN?50?5?$CJ?5?$CG?$CG?5?$CI?5heading?5?$DM@ ; `string'
PUBLIC	?__LINE__Var@?0??apply_displacement_maps@@YGXPAUVEC3D@@PAUDISPLACEMENT_MAP@@M@Z@4JA ; `apply_displacement_maps'::`1'::__LINE__Var
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@3f80101010101010
PUBLIC	__real@3fbc28f5c28f5c29
PUBLIC	__real@3fc90fdb
PUBLIC	__real@3fd3333333333333
PUBLIC	__real@3fe2e147ae147ae1
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@40490fdb
PUBLIC	__real@406fe00000000000
PUBLIC	__real@40c90fdb
PUBLIC	__real@40dfffc000000000
PUBLIC	__real@437f0000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	_memcpy:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_fabs:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?set_fpu_precision_mode_single@@YGXXZ:PROC	; set_fpu_precision_mode_single
EXTRN	?set_fpu_precision_mode_double@@YGXXZ:PROC	; set_fpu_precision_mode_double
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z:PROC	; normalise_any_3d_vector
EXTRN	?get_heading_and_pitch_from_3d_unit_vector@@YGXPBUVEC3D@@PAM1@Z:PROC ; get_heading_and_pitch_from_3d_unit_vector
EXTRN	?get_3d_transformation_matrix@@YGXQAY02MMMM@Z:PROC ; get_3d_transformation_matrix
EXTRN	?get_fog_distance_value@@YGMM@Z:PROC		; get_fog_distance_value
EXTRN	?set_d3d_fog_face_intensity@@YGXH@Z:PROC	; set_d3d_fog_face_intensity
EXTRN	?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; set_d3d_int_state
EXTRN	?set_deferred_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; set_deferred_d3d_int_state
EXTRN	?set_deferred_d3d_texture@@YGXHPAUSCREEN@@@Z:PROC ; set_deferred_d3d_texture
EXTRN	?set_deferred_d3d_texture_stage_state@@YGXHHH@Z:PROC ; set_deferred_d3d_texture_stage_state
EXTRN	?reset_deferred_state_changes@@YGXXZ:PROC	; reset_deferred_state_changes
EXTRN	?get_translucent_sorted_polygon_buffer@@YGPAUPOLYGON_BUFFER@@XZ:PROC ; get_translucent_sorted_polygon_buffer
EXTRN	?finalise_translucent_sorted_polygon_buffer@@YGHPAUPOLYGON_BUFFER@@@Z:PROC ; finalise_translucent_sorted_polygon_buffer
EXTRN	?remove_translucent_polygon_buffer@@YGXPAUPOLYGON_BUFFER@@@Z:PROC ; remove_translucent_polygon_buffer
EXTRN	?draw_polygon_buffer@@YGXPAUPOLYGON_BUFFER@@@Z:PROC ; draw_polygon_buffer
EXTRN	?reset_temporary_buffered_translucent_polygons@@YGXXZ:PROC ; reset_temporary_buffered_translucent_polygons
EXTRN	?get_number_of_temporary_translucent_polygons@@YGHXZ:PROC ; get_number_of_temporary_translucent_polygons
EXTRN	?draw_temporary_translucent_polygons@@YGXXZ:PROC ; draw_temporary_translucent_polygons
EXTRN	?get_object_approximation_number@@YGHHMPAH@Z:PROC ; get_object_approximation_number
EXTRN	?outcode_3d_object_surface_polygon@@YGHHHPAH@Z:PROC ; outcode_3d_object_surface_polygon
EXTRN	?wrender_clipped_3d_object_textured_polygon@@YGXPAUOBJECT_3D_FACE@@@Z:PROC ; wrender_clipped_3d_object_textured_polygon
EXTRN	?wrender_clipped_3d_object_gouraud_textured_polygon@@YGXPAUOBJECT_3D_FACE@@@Z:PROC ; wrender_clipped_3d_object_gouraud_textured_polygon
EXTRN	?wrender_clipped_3d_object_polygon@@YGXPAUOBJECT_3D_FACE@@@Z:PROC ; wrender_clipped_3d_object_polygon
EXTRN	?wrender_clipped_3d_object_gouraud_polygon@@YGXPAUOBJECT_3D_FACE@@@Z:PROC ; wrender_clipped_3d_object_gouraud_polygon
EXTRN	?wrender_clipped_3d_object_textured_lightmap_polygon@@YGXPAUOBJECT_3D_FACE@@@Z:PROC ; wrender_clipped_3d_object_textured_lightmap_polygon
EXTRN	?wrender_clipped_3d_object_gouraud_textured_lightmap_polygon@@YGXPAUOBJECT_3D_FACE@@@Z:PROC ; wrender_clipped_3d_object_gouraud_textured_lightmap_polygon
EXTRN	?wrender_unclipped_3d_object_textured_polygon@@YGXPAUOBJECT_3D_FACE@@@Z:PROC ; wrender_unclipped_3d_object_textured_polygon
EXTRN	?wrender_unclipped_3d_object_gouraud_textured_polygon@@YGXPAUOBJECT_3D_FACE@@@Z:PROC ; wrender_unclipped_3d_object_gouraud_textured_polygon
EXTRN	?wrender_unclipped_3d_object_gouraud_textured_nospecular_polygon@@YGXPAUOBJECT_3D_FACE@@@Z:PROC ; wrender_unclipped_3d_object_gouraud_textured_nospecular_polygon
EXTRN	?wrender_unclipped_3d_object_polygon@@YGXPAUOBJECT_3D_FACE@@@Z:PROC ; wrender_unclipped_3d_object_polygon
EXTRN	?wrender_unclipped_3d_object_gouraud_polygon@@YGXPAUOBJECT_3D_FACE@@@Z:PROC ; wrender_unclipped_3d_object_gouraud_polygon
EXTRN	?wrender_unclipped_3d_object_textured_lightmap_polygon@@YGXPAUOBJECT_3D_FACE@@@Z:PROC ; wrender_unclipped_3d_object_textured_lightmap_polygon
EXTRN	?wrender_unclipped_3d_object_gouraud_textured_lightmap_polygon@@YGXPAUOBJECT_3D_FACE@@@Z:PROC ; wrender_unclipped_3d_object_gouraud_textured_lightmap_polygon
EXTRN	?wrender_clipped_3d_object_textured_line@@YGXXZ:PROC ; wrender_clipped_3d_object_textured_line
EXTRN	?wrender_clipped_3d_object_plain_line@@YGXXZ:PROC ; wrender_clipped_3d_object_plain_line
EXTRN	?wrender_unclipped_3d_object_textured_line@@YGXXZ:PROC ; wrender_unclipped_3d_object_textured_line
EXTRN	?wrender_unclipped_3d_object_plain_line@@YGXXZ:PROC ; wrender_unclipped_3d_object_plain_line
EXTRN	?calculate_keyframe@@YGXHPAUOBJECT_3D_SUB_OBJECT_KEYFRAME@@0M@Z:PROC ; calculate_keyframe
EXTRN	?calculate_value_keyframe@@YGXHPAUOBJECT_3D_SUB_OBJECT_VALUE_KEYFRAME@@0M@Z:PROC ; calculate_value_keyframe
EXTRN	?get_scaled_object_3d_outcode@@YGHHPAUVEC3D@@0PAH@Z:PROC ; get_scaled_object_3d_outcode
EXTRN	?illuminate_object_point_normals@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@HPAULIGHT_3D_SOURCE@@H@Z:PROC ; illuminate_object_point_normals
EXTRN	?transform_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z:PROC ; transform_3d_object
EXTRN	?transform_unclipped_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z:PROC ; transform_unclipped_3d_object
EXTRN	?active_viewport@@3UVIEWPORT@@A:BYTE		; active_viewport
EXTRN	?clip_hither@@3MA:DWORD				; clip_hither
EXTRN	?system_textures@@3PAPAUSCREEN@@A:BYTE		; system_textures
EXTRN	?zbuffer_constant@@3NA:QWORD			; zbuffer_constant
EXTRN	?zbuffer_constant_elevated_bias@@3NA:QWORD	; zbuffer_constant_elevated_bias
EXTRN	?zbuffer_constant_normal_bias@@3NA:QWORD	; zbuffer_constant_normal_bias
EXTRN	?active_3d_environment@@3PAUENV_3D@@A:DWORD	; active_3d_environment
EXTRN	?visual_3d_vp@@3PAUVIEWPOINT@@A:DWORD		; visual_3d_vp
EXTRN	?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A:DWORD ; objects_3d_scene_database
EXTRN	?objects_3d_data@@3PAUOBJECT_3D@@A:DWORD	; objects_3d_data
EXTRN	?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A:DWORD ; texture_animations
EXTRN	?displacement_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A:DWORD ; displacement_animations
EXTRN	?displacement_maps@@3PAUDISPLACEMENT_MAP@@A:DWORD ; displacement_maps
EXTRN	?current_3d_lights@@3PAULIGHT_3D_SOURCE@@A:DWORD ; current_3d_lights
EXTRN	?light_3d_array@@3PAULIGHT_3D_SOURCE@@A:BYTE	; light_3d_array
EXTRN	?current_object_3d_luminosity_texture@@3PAUSCREEN@@A:DWORD ; current_object_3d_luminosity_texture
EXTRN	?current_object_3d_luminosity_texture_u_address@@3HA:DWORD ; current_object_3d_luminosity_texture_u_address
EXTRN	?current_object_3d_luminosity_texture_v_address@@3HA:DWORD ; current_object_3d_luminosity_texture_v_address
EXTRN	?current_object_3d_luminosity_texture_filter@@3HA:DWORD ; current_object_3d_luminosity_texture_filter
EXTRN	?current_object_3d_luminosity_texture_mipmap@@3HA:DWORD ; current_object_3d_luminosity_texture_mipmap
EXTRN	?current_object_3d_light_maps_enabled@@3HA:DWORD ; current_object_3d_light_maps_enabled
EXTRN	?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A:DWORD ; current_object_3d_surface
EXTRN	?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A:DWORD ; current_object_3d_point_list
EXTRN	?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A:DWORD ; current_object_3d_face_normal_list
EXTRN	?current_object_3d_texture@@3PAUSCREEN@@A:DWORD	; current_object_3d_texture
EXTRN	?current_object_3d_transformed_normals@@3PAUOBJECT_3D_TRANSFORMED_POINT_NORMAL@@A:DWORD ; current_object_3d_transformed_normals
EXTRN	?current_object_3d_texture_u_address@@3HA:DWORD	; current_object_3d_texture_u_address
EXTRN	?current_object_3d_texture_v_address@@3HA:DWORD	; current_object_3d_texture_v_address
EXTRN	?current_object_3d_texture_filter@@3HA:DWORD	; current_object_3d_texture_filter
EXTRN	?current_object_3d_texture_mipmap@@3HA:DWORD	; current_object_3d_texture_mipmap
EXTRN	?current_object_3d_specular@@3HA:DWORD		; current_object_3d_specular
EXTRN	?current_object_3d_outcode@@3HA:DWORD		; current_object_3d_outcode
EXTRN	?current_object_3d_dissolve_factor@@3MA:DWORD	; current_object_3d_dissolve_factor
EXTRN	?current_object_3d_dissolve_value@@3EA:BYTE	; current_object_3d_dissolve_value
EXTRN	?specular_rendering_enabled@@3HA:DWORD		; specular_rendering_enabled
EXTRN	?object_3d_approximation_level@@3HA:DWORD	; object_3d_approximation_level
EXTRN	?object_3d_points_current_base@@3HA:DWORD	; object_3d_points_current_base
EXTRN	?object_3d_object_current_base@@3HA:DWORD	; object_3d_object_current_base
EXTRN	?object_3d_light_3d_current_base@@3HA:DWORD	; object_3d_light_3d_current_base
EXTRN	?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A:DWORD ; current_object_3d_surface_point_texture_list
EXTRN	?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A:DWORD ; current_object_3d_surface_point_list
EXTRN	?current_object_3d_surface_point_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A:DWORD ; current_object_3d_surface_point_normal_list
EXTRN	?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A:DWORD ; current_object_3d_faces
EXTRN	?current_object_3d_object_base@@3PAUOBJECT_3D_INFO@@A:DWORD ; current_object_3d_object_base
EXTRN	?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A:BYTE ; object_3d_object_base
EXTRN	?object_3d_scale@@3UVEC3D@@A:BYTE		; object_3d_scale
EXTRN	?rotation_3d@@3PAY02MA:BYTE			; rotation_3d
EXTRN	?scaled_rotation@@3PAY02MA:BYTE			; scaled_rotation
EXTRN	?transformed_3d_normals@@3PAUOBJECT_3D_TRANSFORMED_POINT_NORMAL@@A:BYTE ; transformed_3d_normals
EXTRN	?transformed_3d_point_outcodes@@3PAEA:BYTE	; transformed_3d_point_outcodes
EXTRN	?transformed_3d_3d_points@@3PAUOBJECT_TRANSFORMED_3D_POINT@@A:BYTE ; transformed_3d_3d_points
EXTRN	?transformed_3d_2d_points@@3PAUOBJECT_TRANSFORMED_2D_POINT@@A:BYTE ; transformed_3d_2d_points
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?environment_x_origin@@3MA DD 01H DUP (?)		; environment_x_origin
?environment_y_origin@@3MA DD 01H DUP (?)		; environment_y_origin
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@40dfffc000000000
CONST	SEGMENT
__real@40dfffc000000000 DQ 040dfffc000000000r	; 32767
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe2e147ae147ae1
CONST	SEGMENT
__real@3fe2e147ae147ae1 DQ 03fe2e147ae147ae1r	; 0.59
CONST	ENDS
;	COMDAT __real@3fd3333333333333
CONST	SEGMENT
__real@3fd3333333333333 DQ 03fd3333333333333r	; 0.3
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3fbc28f5c28f5c29
CONST	SEGMENT
__real@3fbc28f5c28f5c29 DQ 03fbc28f5c28f5c29r	; 0.11
CONST	ENDS
;	COMDAT __real@3f80101010101010
CONST	SEGMENT
__real@3f80101010101010 DQ 03f80101010101010r	; 0.00784314
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??apply_displacement_maps@@YGXPAUVEC3D@@PAUDISPLACEMENT_MAP@@M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??apply_displacement_maps@@YGXPAUVEC3D@@PAUDISPLACEMENT_MAP@@M@Z@4JA DD 0728H ; `apply_displacement_maps'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CF@JCFNDLIK@?$CI?5heading?5?$DO?$DN?50?5?$CJ?5?$CG?$CG?5?$CI?5heading?5?$DM@
CONST	SEGMENT
??_C@_0CF@JCFNDLIK@?$CI?5heading?5?$DO?$DN?50?5?$CJ?5?$CG?$CG?5?$CI?5heading?5?$DM@ DB '('
	DB	' heading >= 0 ) && ( heading <= 1 )', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LPPACKDL@?$CI?5pitch?5?$DO?$DN?50?5?$CJ?5?$CG?$CG?5?$CI?5pitch?5?$DM?$DN?51?5@
CONST	SEGMENT
??_C@_0CB@LPPACKDL@?$CI?5pitch?5?$DO?$DN?50?5?$CJ?5?$CG?$CG?5?$CI?5pitch?5?$DM?$DN?51?5@ DB '('
	DB	' pitch >= 0 ) && ( pitch <= 1 )', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@FBOIPIKF@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DD@FBOIPIKF@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\3d\3dexplos.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_displacement_map_position@@YGXPAUVEC3D@@PAUDISPLACEMENT_MAP@@PAH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_displacement_map_position@@YGXPAUVEC3D@@PAUDISPLACEMENT_MAP@@PAH@Z@4JA DD 0701H ; `get_displacement_map_position'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BN@NAGKEOBN@Generated?5list?5for?5object?5?$CFd@
CONST	SEGMENT
??_C@_0BN@NAGKEOBN@Generated?5list?5for?5object?5?$CFd@ DB 'Generated lis'
	DB	't for object %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dexplos.c
;	COMDAT ?set_explosion_texture_animations@@YGXHM@Z
_TEXT	SEGMENT
_animation_frame$1 = -16				; size = 4
_number_of_frames$2 = -12				; size = 4
_texture_animation_index$3 = -8				; size = 4
_count$4 = -4						; size = 4
_scene$ = 8						; size = 4
_animation$ = 12					; size = 4
?set_explosion_texture_animations@@YGXHM@Z PROC		; set_explosion_texture_animations, COMDAT

; 1880 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1881 : 	if ( objects_3d_scene_database[scene].number_of_texture_animations )

  00009	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _scene$[ebp], 224
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  00016	83 7c 01 14 00	 cmp	 DWORD PTR [ecx+eax+20], 0
  0001b	0f 84 83 00 00
	00		 je	 $LN3@set_explos

; 1882 : 	{
; 1883 : 		int
; 1884 : 			count;
; 1885 : 
; 1886 : 		for ( count = 0; count < objects_3d_scene_database[scene].number_of_texture_animations; count++ )

  00021	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$4[ebp], 0
  00028	eb 09		 jmp	 SHORT $LN4@set_explos
$LN2@set_explos:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _count$4[ebp]
  0002d	83 c0 01	 add	 eax, 1
  00030	89 45 fc	 mov	 DWORD PTR _count$4[ebp], eax
$LN4@set_explos:
  00033	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _scene$[ebp], 224
  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  00040	8b 55 fc	 mov	 edx, DWORD PTR _count$4[ebp]
  00043	3b 54 01 14	 cmp	 edx, DWORD PTR [ecx+eax+20]
  00047	7d 5b		 jge	 SHORT $LN3@set_explos

; 1887 : 		{
; 1888 : 			int
; 1889 : 				texture_animation_index,
; 1890 : 				number_of_frames,
; 1891 : 				animation_frame;
; 1892 : 
; 1893 : 			texture_animation_index = objects_3d_scene_database[scene].texture_animations[count];

  00049	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _scene$[ebp], 224
  00050	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  00056	8b 54 01 48	 mov	 edx, DWORD PTR [ecx+eax+72]
  0005a	8b 45 fc	 mov	 eax, DWORD PTR _count$4[ebp]
  0005d	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  00060	89 4d f8	 mov	 DWORD PTR _texture_animation_index$3[ebp], ecx

; 1894 : 
; 1895 : 			number_of_frames = texture_animations[texture_animation_index].number_of_frames;

  00063	6b 45 f8 0c	 imul	 eax, DWORD PTR _texture_animation_index$3[ebp], 12
  00067	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  0006d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00070	89 55 f4	 mov	 DWORD PTR _number_of_frames$2[ebp], edx

; 1896 : 
; 1897 : 			asm_convert_float_to_int ( ( ( ( float ) ( number_of_frames - 1 ) ) * animation ), &animation_frame );

  00073	8d 45 f0	 lea	 eax, DWORD PTR _animation_frame$1[ebp]
  00076	50		 push	 eax
  00077	8b 4d f4	 mov	 ecx, DWORD PTR _number_of_frames$2[ebp]
  0007a	83 e9 01	 sub	 ecx, 1
  0007d	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00081	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _animation$[ebp]
  00086	51		 push	 ecx
  00087	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008c	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1898 : 
; 1899 : 			texture_animations[texture_animation_index].current_frame = animation_frame;

  00091	6b 45 f8 0c	 imul	 eax, DWORD PTR _texture_animation_index$3[ebp], 12
  00095	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  0009b	8b 55 f0	 mov	 edx, DWORD PTR _animation_frame$1[ebp]
  0009e	89 54 01 04	 mov	 DWORD PTR [ecx+eax+4], edx

; 1900 : 		}

  000a2	eb 86		 jmp	 SHORT $LN2@set_explos
$LN3@set_explos:

; 1901 : 	}
; 1902 : }

  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
  000a6	5b		 pop	 ebx
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c2 08 00	 ret	 8
?set_explosion_texture_animations@@YGXHM@Z ENDP		; set_explosion_texture_animations
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dexplos.c
;	COMDAT ?apply_displacement_maps@@YGXPAUVEC3D@@PAUDISPLACEMENT_MAP@@M@Z
_TEXT	SEGMENT
_normalised_pos$ = -36					; size = 12
_displacement_y$ = -24					; size = 4
_displacement_x$ = -20					; size = 4
_factor$ = -16						; size = 4
_length$ = -12						; size = 4
_pitch$ = -8						; size = 4
_heading$ = -4						; size = 4
_pos$ = 8						; size = 4
_displacement$ = 12					; size = 4
_amplitude$ = 16					; size = 4
?apply_displacement_maps@@YGXPAUVEC3D@@PAUDISPLACEMENT_MAP@@M@Z PROC ; apply_displacement_maps, COMDAT

; 1832 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1833 : 	float
; 1834 : 		heading,
; 1835 : 		pitch,
; 1836 : 		length,
; 1837 : 		factor;
; 1838 : 
; 1839 : 	int
; 1840 : 		displacement_x,
; 1841 : 		displacement_y;
; 1842 : 
; 1843 : 	vec3d
; 1844 : 		normalised_pos;
; 1845 : 
; 1846 : 	normalised_pos = *pos;

  00009	8b 45 08	 mov	 eax, DWORD PTR _pos$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	89 4d dc	 mov	 DWORD PTR _normalised_pos$[ebp], ecx
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	89 55 e0	 mov	 DWORD PTR _normalised_pos$[ebp+4], edx
  00017	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0001a	89 45 e4	 mov	 DWORD PTR _normalised_pos$[ebp+8], eax

; 1847 : 
; 1848 : 	length = normalise_any_3d_vector ( &normalised_pos );

  0001d	8d 45 dc	 lea	 eax, DWORD PTR _normalised_pos$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  00026	d9 5d f4	 fstp	 DWORD PTR _length$[ebp]

; 1849 : 
; 1850 : 	get_heading_and_pitch_from_3d_unit_vector ( &normalised_pos, &heading, &pitch );

  00029	8d 45 f8	 lea	 eax, DWORD PTR _pitch$[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d fc	 lea	 ecx, DWORD PTR _heading$[ebp]
  00030	51		 push	 ecx
  00031	8d 55 dc	 lea	 edx, DWORD PTR _normalised_pos$[ebp]
  00034	52		 push	 edx
  00035	e8 00 00 00 00	 call	 ?get_heading_and_pitch_from_3d_unit_vector@@YGXPBUVEC3D@@PAM1@Z ; get_heading_and_pitch_from_3d_unit_vector

; 1851 : 
; 1852 : 	heading += PI;

  0003a	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _heading$[ebp]
  0003f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40490fdb
  00047	f3 0f 11 45 fc	 movss	 DWORD PTR _heading$[ebp], xmm0

; 1853 : 	pitch += PI/2;

  0004c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  00051	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3fc90fdb
  00059	f3 0f 11 45 f8	 movss	 DWORD PTR _pitch$[ebp], xmm0

; 1854 : 
; 1855 : 	heading /= PI2;

  0005e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _heading$[ebp]
  00063	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40c90fdb
  0006b	f3 0f 11 45 fc	 movss	 DWORD PTR _heading$[ebp], xmm0

; 1856 : 	pitch /= PI;

  00070	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  00075	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40490fdb
  0007d	f3 0f 11 45 f8	 movss	 DWORD PTR _pitch$[ebp], xmm0

; 1857 : 
; 1858 : 	ASSERT ( ( pitch >= 0 ) && ( pitch <= 1 ) );

  00082	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  00087	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0008e	72 0e		 jb	 SHORT $LN3@apply_disp
  00090	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00098	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _pitch$[ebp]
  0009c	73 18		 jae	 SHORT $LN2@apply_disp
$LN3@apply_disp:
  0009e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??apply_displacement_maps@@YGXPAUVEC3D@@PAUDISPLACEMENT_MAP@@M@Z@4JA
  000a3	83 c0 1a	 add	 eax, 26			; 0000001aH
  000a6	50		 push	 eax
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@FBOIPIKF@c?3?2users?2nhv90?2projects?2eech?2mo@
  000ac	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@LPPACKDL@?$CI?5pitch?5?$DO?$DN?50?5?$CJ?5?$CG?$CG?5?$CI?5pitch?5?$DM?$DN?51?5@
  000b1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@apply_disp:

; 1859 : 	ASSERT ( ( heading >= 0 ) && ( heading <= 1 ) );

  000b6	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _heading$[ebp]
  000bb	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  000c2	72 0e		 jb	 SHORT $LN5@apply_disp
  000c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000cc	0f 2f 45 fc	 comiss	 xmm0, DWORD PTR _heading$[ebp]
  000d0	73 18		 jae	 SHORT $LN4@apply_disp
$LN5@apply_disp:
  000d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??apply_displacement_maps@@YGXPAUVEC3D@@PAUDISPLACEMENT_MAP@@M@Z@4JA
  000d7	83 c0 1b	 add	 eax, 27			; 0000001bH
  000da	50		 push	 eax
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@FBOIPIKF@c?3?2users?2nhv90?2projects?2eech?2mo@
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@JCFNDLIK@?$CI?5heading?5?$DO?$DN?50?5?$CJ?5?$CG?$CG?5?$CI?5heading?5?$DM@
  000e5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@apply_disp:

; 1860 : 
; 1861 : 	asm_convert_float_to_int ( ( heading * ( displacement->width - 1 ) ), &displacement_x );

  000ea	8d 45 ec	 lea	 eax, DWORD PTR _displacement_x$[ebp]
  000ed	50		 push	 eax
  000ee	8b 4d 0c	 mov	 ecx, DWORD PTR _displacement$[ebp]
  000f1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f3	83 ea 01	 sub	 edx, 1
  000f6	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  000fa	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _heading$[ebp]
  000ff	51		 push	 ecx
  00100	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00105	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1862 : 	asm_convert_float_to_int ( ( pitch * ( displacement->height - 1 ) ), &displacement_y );

  0010a	8d 45 e8	 lea	 eax, DWORD PTR _displacement_y$[ebp]
  0010d	50		 push	 eax
  0010e	8b 4d 0c	 mov	 ecx, DWORD PTR _displacement$[ebp]
  00111	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00114	83 ea 01	 sub	 edx, 1
  00117	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0011b	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _pitch$[ebp]
  00120	51		 push	 ecx
  00121	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00126	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1863 : 
; 1864 : 	factor = displacement->data[ ( ( displacement_y * displacement->width ) + displacement_x ) ];

  0012b	8b 45 0c	 mov	 eax, DWORD PTR _displacement$[ebp]
  0012e	8b 4d e8	 mov	 ecx, DWORD PTR _displacement_y$[ebp]
  00131	0f af 08	 imul	 ecx, DWORD PTR [eax]
  00134	03 4d ec	 add	 ecx, DWORD PTR _displacement_x$[ebp]
  00137	8b 55 0c	 mov	 edx, DWORD PTR _displacement$[ebp]
  0013a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0013d	0f b6 0c 08	 movzx	 ecx, BYTE PTR [eax+ecx]
  00141	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00145	f3 0f 11 45 f0	 movss	 DWORD PTR _factor$[ebp], xmm0

; 1865 : 
; 1866 : 	factor /= 255.0;

  0014a	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _factor$[ebp]
  0014f	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@406fe00000000000
  00157	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0015b	f3 0f 11 45 f0	 movss	 DWORD PTR _factor$[ebp], xmm0

; 1867 : 
; 1868 : 	factor *= amplitude * 2;

  00160	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _amplitude$[ebp]
  00165	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  0016d	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _factor$[ebp]
  00172	f3 0f 11 45 f0	 movss	 DWORD PTR _factor$[ebp], xmm0

; 1869 : 
; 1870 : 	pos->x += factor * length * normalised_pos.x;

  00177	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _factor$[ebp]
  0017c	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _length$[ebp]
  00181	f3 0f 59 45 dc	 mulss	 xmm0, DWORD PTR _normalised_pos$[ebp]
  00186	8b 45 08	 mov	 eax, DWORD PTR _pos$[ebp]
  00189	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  0018d	8b 4d 08	 mov	 ecx, DWORD PTR _pos$[ebp]
  00190	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 1871 : 	pos->y += factor * length * normalised_pos.y;

  00194	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _factor$[ebp]
  00199	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _length$[ebp]
  0019e	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _normalised_pos$[ebp+4]
  001a3	8b 45 08	 mov	 eax, DWORD PTR _pos$[ebp]
  001a6	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  001ab	8b 4d 08	 mov	 ecx, DWORD PTR _pos$[ebp]
  001ae	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 1872 : 	pos->z += factor * length * normalised_pos.z;

  001b3	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _factor$[ebp]
  001b8	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _length$[ebp]
  001bd	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _normalised_pos$[ebp+8]
  001c2	8b 45 08	 mov	 eax, DWORD PTR _pos$[ebp]
  001c5	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  001ca	8b 4d 08	 mov	 ecx, DWORD PTR _pos$[ebp]
  001cd	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 1873 : }

  001d2	5f		 pop	 edi
  001d3	5e		 pop	 esi
  001d4	5b		 pop	 ebx
  001d5	8b e5		 mov	 esp, ebp
  001d7	5d		 pop	 ebp
  001d8	c2 0c 00	 ret	 12			; 0000000cH
?apply_displacement_maps@@YGXPAUVEC3D@@PAUDISPLACEMENT_MAP@@M@Z ENDP ; apply_displacement_maps
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dexplos.c
;	COMDAT ?get_displacement_map_position@@YGXPAUVEC3D@@PAUDISPLACEMENT_MAP@@PAH@Z
_TEXT	SEGMENT
_normalised_pos$ = -32					; size = 12
_displacement_y$ = -20					; size = 4
_displacement_x$ = -16					; size = 4
_length$ = -12						; size = 4
_pitch$ = -8						; size = 4
_heading$ = -4						; size = 4
_pos$ = 8						; size = 4
_displacement$ = 12					; size = 4
_offset$ = 16						; size = 4
?get_displacement_map_position@@YGXPAUVEC3D@@PAUDISPLACEMENT_MAP@@PAH@Z PROC ; get_displacement_map_position, COMDAT

; 1793 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1794 : 	float
; 1795 : 		heading,
; 1796 : 		pitch,
; 1797 : 		length;
; 1798 : 
; 1799 : 	int
; 1800 : 		displacement_x,
; 1801 : 		displacement_y;
; 1802 : 
; 1803 : 	vec3d
; 1804 : 		normalised_pos;
; 1805 : 
; 1806 : 	normalised_pos = *pos;

  00009	8b 45 08	 mov	 eax, DWORD PTR _pos$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	89 4d e0	 mov	 DWORD PTR _normalised_pos$[ebp], ecx
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	89 55 e4	 mov	 DWORD PTR _normalised_pos$[ebp+4], edx
  00017	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0001a	89 45 e8	 mov	 DWORD PTR _normalised_pos$[ebp+8], eax

; 1807 : 
; 1808 : 	length = normalise_any_3d_vector ( &normalised_pos );

  0001d	8d 45 e0	 lea	 eax, DWORD PTR _normalised_pos$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  00026	d9 5d f4	 fstp	 DWORD PTR _length$[ebp]

; 1809 : 
; 1810 : 	get_heading_and_pitch_from_3d_unit_vector ( &normalised_pos, &heading, &pitch );

  00029	8d 45 f8	 lea	 eax, DWORD PTR _pitch$[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d fc	 lea	 ecx, DWORD PTR _heading$[ebp]
  00030	51		 push	 ecx
  00031	8d 55 e0	 lea	 edx, DWORD PTR _normalised_pos$[ebp]
  00034	52		 push	 edx
  00035	e8 00 00 00 00	 call	 ?get_heading_and_pitch_from_3d_unit_vector@@YGXPBUVEC3D@@PAM1@Z ; get_heading_and_pitch_from_3d_unit_vector

; 1811 : 
; 1812 : 	heading += PI;

  0003a	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _heading$[ebp]
  0003f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40490fdb
  00047	f3 0f 11 45 fc	 movss	 DWORD PTR _heading$[ebp], xmm0

; 1813 : 	pitch += PI/2;

  0004c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  00051	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3fc90fdb
  00059	f3 0f 11 45 f8	 movss	 DWORD PTR _pitch$[ebp], xmm0

; 1814 : 
; 1815 : 	heading /= PI2;

  0005e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _heading$[ebp]
  00063	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40c90fdb
  0006b	f3 0f 11 45 fc	 movss	 DWORD PTR _heading$[ebp], xmm0

; 1816 : 	pitch /= PI;

  00070	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  00075	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40490fdb
  0007d	f3 0f 11 45 f8	 movss	 DWORD PTR _pitch$[ebp], xmm0

; 1817 : 
; 1818 : 	ASSERT ( ( pitch >= 0 ) && ( pitch <= 1 ) );

  00082	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  00087	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0008e	72 0e		 jb	 SHORT $LN3@get_displa
  00090	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00098	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _pitch$[ebp]
  0009c	73 18		 jae	 SHORT $LN2@get_displa
$LN3@get_displa:
  0009e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_displacement_map_position@@YGXPAUVEC3D@@PAUDISPLACEMENT_MAP@@PAH@Z@4JA
  000a3	83 c0 19	 add	 eax, 25			; 00000019H
  000a6	50		 push	 eax
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@FBOIPIKF@c?3?2users?2nhv90?2projects?2eech?2mo@
  000ac	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@LPPACKDL@?$CI?5pitch?5?$DO?$DN?50?5?$CJ?5?$CG?$CG?5?$CI?5pitch?5?$DM?$DN?51?5@
  000b1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_displa:

; 1819 : 	ASSERT ( ( heading >= 0 ) && ( heading <= 1 ) );

  000b6	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _heading$[ebp]
  000bb	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  000c2	72 0e		 jb	 SHORT $LN5@get_displa
  000c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000cc	0f 2f 45 fc	 comiss	 xmm0, DWORD PTR _heading$[ebp]
  000d0	73 18		 jae	 SHORT $LN4@get_displa
$LN5@get_displa:
  000d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_displacement_map_position@@YGXPAUVEC3D@@PAUDISPLACEMENT_MAP@@PAH@Z@4JA
  000d7	83 c0 1a	 add	 eax, 26			; 0000001aH
  000da	50		 push	 eax
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@FBOIPIKF@c?3?2users?2nhv90?2projects?2eech?2mo@
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@JCFNDLIK@?$CI?5heading?5?$DO?$DN?50?5?$CJ?5?$CG?$CG?5?$CI?5heading?5?$DM@
  000e5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_displa:

; 1820 : 
; 1821 : 	asm_convert_float_to_int ( ( heading * ( displacement->width - 1 ) ), &displacement_x );

  000ea	8d 45 f0	 lea	 eax, DWORD PTR _displacement_x$[ebp]
  000ed	50		 push	 eax
  000ee	8b 4d 0c	 mov	 ecx, DWORD PTR _displacement$[ebp]
  000f1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f3	83 ea 01	 sub	 edx, 1
  000f6	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  000fa	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _heading$[ebp]
  000ff	51		 push	 ecx
  00100	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00105	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1822 : 	asm_convert_float_to_int ( ( pitch * ( displacement->height - 1 ) ), &displacement_y );

  0010a	8d 45 ec	 lea	 eax, DWORD PTR _displacement_y$[ebp]
  0010d	50		 push	 eax
  0010e	8b 4d 0c	 mov	 ecx, DWORD PTR _displacement$[ebp]
  00111	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00114	83 ea 01	 sub	 edx, 1
  00117	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0011b	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _pitch$[ebp]
  00120	51		 push	 ecx
  00121	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00126	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 1823 : 
; 1824 : 	*offset = ( ( displacement_y * displacement->width ) + displacement_x );

  0012b	8b 45 0c	 mov	 eax, DWORD PTR _displacement$[ebp]
  0012e	8b 4d ec	 mov	 ecx, DWORD PTR _displacement_y$[ebp]
  00131	0f af 08	 imul	 ecx, DWORD PTR [eax]
  00134	03 4d f0	 add	 ecx, DWORD PTR _displacement_x$[ebp]
  00137	8b 55 10	 mov	 edx, DWORD PTR _offset$[ebp]
  0013a	89 0a		 mov	 DWORD PTR [edx], ecx

; 1825 : }

  0013c	5f		 pop	 edi
  0013d	5e		 pop	 esi
  0013e	5b		 pop	 ebx
  0013f	8b e5		 mov	 esp, ebp
  00141	5d		 pop	 ebp
  00142	c2 0c 00	 ret	 12			; 0000000cH
?get_displacement_map_position@@YGXPAUVEC3D@@PAUDISPLACEMENT_MAP@@PAH@Z ENDP ; get_displacement_map_position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dexplos.c
;	COMDAT ?generate_explosion_object_texture_points@@YGPAUEXPLOSION_OBJECT_POINTS_LOOKUP@@HPAUDISPLACEMENT_MAP@@@Z
_TEXT	SEGMENT
$T1 = -120						; size = 4
$T2 = -116						; size = 4
$T3 = -112						; size = 4
$T4 = -108						; size = 4
$T5 = -104						; size = 4
$T6 = -100						; size = 4
_zmax$7 = -32						; size = 4
_ymax$8 = -28						; size = 4
_xmax$9 = -24						; size = 4
_point$10 = -20						; size = 12
_count$11 = -8						; size = 4
_list$ = -4						; size = 4
_object_number$ = 8					; size = 4
_displacement$ = 12					; size = 4
?generate_explosion_object_texture_points@@YGPAUEXPLOSION_OBJECT_POINTS_LOOKUP@@HPAUDISPLACEMENT_MAP@@@Z PROC ; generate_explosion_object_texture_points, COMDAT

; 1717 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1718 : 	explosion_object_points_lookup
; 1719 : 		*list;
; 1720 : 
; 1721 : 	list = explosion_object_points_lookup_list;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?explosion_object_points_lookup_list@@3PAUEXPLOSION_OBJECT_POINTS_LOOKUP@@A ; explosion_object_points_lookup_list
  0000e	89 45 fc	 mov	 DWORD PTR _list$[ebp], eax
$LN2@generate_e:

; 1722 : 
; 1723 : 	while ( list )

  00011	83 7d fc 00	 cmp	 DWORD PTR _list$[ebp], 0
  00015	74 1d		 je	 SHORT $LN3@generate_e

; 1724 : 	{
; 1725 : 		if ( list->object_number == object_number )

  00017	8b 45 fc	 mov	 eax, DWORD PTR _list$[ebp]
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	3b 4d 08	 cmp	 ecx, DWORD PTR _object_number$[ebp]
  0001f	75 08		 jne	 SHORT $LN7@generate_e

; 1726 : 		{
; 1727 : 			return ( list );

  00021	8b 45 fc	 mov	 eax, DWORD PTR _list$[ebp]
  00024	e9 6b 02 00 00	 jmp	 $LN1@generate_e
$LN7@generate_e:

; 1728 : 		}
; 1729 : 
; 1730 : 		list = list->succ;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _list$[ebp]
  0002c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002f	89 4d fc	 mov	 DWORD PTR _list$[ebp], ecx

; 1731 : 	}

  00032	eb dd		 jmp	 SHORT $LN2@generate_e
$LN3@generate_e:

; 1732 : 
; 1733 : 	//
; 1734 : 	// Not found the list - create one.
; 1735 : 	//
; 1736 : 
; 1737 : 	{
; 1738 : 		int
; 1739 : 			count;
; 1740 : 
; 1741 : 		vec3d
; 1742 : 			point;
; 1743 : 
; 1744 : 		float
; 1745 : 			xmax,
; 1746 : 			ymax,
; 1747 : 			zmax;
; 1748 : 
; 1749 : 		list = ( explosion_object_points_lookup * ) safe_malloc ( sizeof ( explosion_object_points_lookup ) );

  00034	6a 0c		 push	 12			; 0000000cH
  00036	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0003b	89 45 fc	 mov	 DWORD PTR _list$[ebp], eax

; 1750 : 
; 1751 : 		list->points = ( explosion_point_uv_lookup * ) safe_malloc ( objects_3d_data[object_number].number_of_points * sizeof ( explosion_point_uv_lookup ) );

  0003e	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00048	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  0004c	c1 e2 02	 shl	 edx, 2
  0004f	52		 push	 edx
  00050	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00055	8b 4d fc	 mov	 ecx, DWORD PTR _list$[ebp]
  00058	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1752 : 
; 1753 : 		xmax = max ( fabs ( objects_3d_data[object_number].bounding_box.xmin ), fabs ( objects_3d_data[object_number].bounding_box.xmax ) );

  0005b	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  0005f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00065	51		 push	 ecx
  00066	f3 0f 10 44 01
	14		 movss	 xmm0, DWORD PTR [ecx+eax+20]
  0006c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00071	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00076	d9 5d 9c	 fstp	 DWORD PTR $T6[ebp]
  00079	6b 55 08 68	 imul	 edx, DWORD PTR _object_number$[ebp], 104
  0007d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00082	51		 push	 ecx
  00083	f3 0f 10 44 10
	10		 movss	 xmm0, DWORD PTR [eax+edx+16]
  00089	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008e	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00093	d9 5d 98	 fstp	 DWORD PTR $T5[ebp]
  00096	8d 4d 9c	 lea	 ecx, DWORD PTR $T6[ebp]
  00099	51		 push	 ecx
  0009a	8d 55 98	 lea	 edx, DWORD PTR $T5[ebp]
  0009d	52		 push	 edx
  0009e	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  000a3	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000a7	f3 0f 11 45 e8	 movss	 DWORD PTR _xmax$9[ebp], xmm0

; 1754 : 		ymax = max ( fabs ( objects_3d_data[object_number].bounding_box.ymin ), fabs ( objects_3d_data[object_number].bounding_box.ymax ) );

  000ac	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  000b0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  000b6	51		 push	 ecx
  000b7	f3 0f 10 44 01
	1c		 movss	 xmm0, DWORD PTR [ecx+eax+28]
  000bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c2	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  000c7	d9 5d 94	 fstp	 DWORD PTR $T4[ebp]
  000ca	6b 55 08 68	 imul	 edx, DWORD PTR _object_number$[ebp], 104
  000ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  000d3	51		 push	 ecx
  000d4	f3 0f 10 44 10
	18		 movss	 xmm0, DWORD PTR [eax+edx+24]
  000da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000df	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  000e4	d9 5d 90	 fstp	 DWORD PTR $T3[ebp]
  000e7	8d 4d 94	 lea	 ecx, DWORD PTR $T4[ebp]
  000ea	51		 push	 ecx
  000eb	8d 55 90	 lea	 edx, DWORD PTR $T3[ebp]
  000ee	52		 push	 edx
  000ef	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  000f4	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000f8	f3 0f 11 45 e4	 movss	 DWORD PTR _ymax$8[ebp], xmm0

; 1755 : 		zmax = max ( fabs ( objects_3d_data[object_number].bounding_box.zmin ), fabs ( objects_3d_data[object_number].bounding_box.zmax ) );

  000fd	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00101	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00107	51		 push	 ecx
  00108	f3 0f 10 44 01
	24		 movss	 xmm0, DWORD PTR [ecx+eax+36]
  0010e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00113	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00118	d9 5d 8c	 fstp	 DWORD PTR $T2[ebp]
  0011b	6b 55 08 68	 imul	 edx, DWORD PTR _object_number$[ebp], 104
  0011f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00124	51		 push	 ecx
  00125	f3 0f 10 44 10
	20		 movss	 xmm0, DWORD PTR [eax+edx+32]
  0012b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00130	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00135	d9 5d 88	 fstp	 DWORD PTR $T1[ebp]
  00138	8d 4d 8c	 lea	 ecx, DWORD PTR $T2[ebp]
  0013b	51		 push	 ecx
  0013c	8d 55 88	 lea	 edx, DWORD PTR $T1[ebp]
  0013f	52		 push	 edx
  00140	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00145	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00149	f3 0f 11 45 e0	 movss	 DWORD PTR _zmax$7[ebp], xmm0

; 1756 : 
; 1757 : 		xmax /= 32767.0;

  0014e	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _xmax$9[ebp]
  00153	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40dfffc000000000
  0015b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0015f	f3 0f 11 45 e8	 movss	 DWORD PTR _xmax$9[ebp], xmm0

; 1758 : 		ymax /= 32767.0;

  00164	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _ymax$8[ebp]
  00169	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40dfffc000000000
  00171	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00175	f3 0f 11 45 e4	 movss	 DWORD PTR _ymax$8[ebp], xmm0

; 1759 : 		zmax /= 32767.0;

  0017a	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _zmax$7[ebp]
  0017f	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40dfffc000000000
  00187	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0018b	f3 0f 11 45 e0	 movss	 DWORD PTR _zmax$7[ebp], xmm0

; 1760 : 
; 1761 : 		for ( count = 0; count < objects_3d_data[object_number].number_of_points; count++ )

  00190	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$11[ebp], 0
  00197	eb 09		 jmp	 SHORT $LN6@generate_e
$LN4@generate_e:
  00199	8b 45 f8	 mov	 eax, DWORD PTR _count$11[ebp]
  0019c	83 c0 01	 add	 eax, 1
  0019f	89 45 f8	 mov	 DWORD PTR _count$11[ebp], eax
$LN6@generate_e:
  001a2	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  001a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  001ac	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  001b0	39 55 f8	 cmp	 DWORD PTR _count$11[ebp], edx
  001b3	0f 8d ab 00 00
	00		 jge	 $LN5@generate_e

; 1762 : 		{
; 1763 : 			point.x = objects_3d_data[object_number].points[count].x;

  001b9	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  001bd	6b 4d f8 06	 imul	 ecx, DWORD PTR _count$11[ebp], 6
  001c1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  001c7	8b 44 02 40	 mov	 eax, DWORD PTR [edx+eax+64]
  001cb	0f bf 0c 08	 movsx	 ecx, WORD PTR [eax+ecx]
  001cf	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  001d3	f3 0f 11 45 ec	 movss	 DWORD PTR _point$10[ebp], xmm0

; 1764 : 			point.y = objects_3d_data[object_number].points[count].y;

  001d8	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  001dc	6b 4d f8 06	 imul	 ecx, DWORD PTR _count$11[ebp], 6
  001e0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  001e6	8b 44 02 40	 mov	 eax, DWORD PTR [edx+eax+64]
  001ea	0f bf 4c 08 02	 movsx	 ecx, WORD PTR [eax+ecx+2]
  001ef	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  001f3	f3 0f 11 45 f0	 movss	 DWORD PTR _point$10[ebp+4], xmm0

; 1765 : 			point.z = objects_3d_data[object_number].points[count].z;

  001f8	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  001fc	6b 4d f8 06	 imul	 ecx, DWORD PTR _count$11[ebp], 6
  00200	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00206	8b 44 02 40	 mov	 eax, DWORD PTR [edx+eax+64]
  0020a	0f bf 4c 08 04	 movsx	 ecx, WORD PTR [eax+ecx+4]
  0020f	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00213	f3 0f 11 45 f4	 movss	 DWORD PTR _point$10[ebp+8], xmm0

; 1766 : 
; 1767 : 			point.x *= xmax;

  00218	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _point$10[ebp]
  0021d	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _xmax$9[ebp]
  00222	f3 0f 11 45 ec	 movss	 DWORD PTR _point$10[ebp], xmm0

; 1768 : 			point.y *= ymax;

  00227	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _point$10[ebp+4]
  0022c	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _ymax$8[ebp]
  00231	f3 0f 11 45 f0	 movss	 DWORD PTR _point$10[ebp+4], xmm0

; 1769 : 			point.z *= zmax;

  00236	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _point$10[ebp+8]
  0023b	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _zmax$7[ebp]
  00240	f3 0f 11 45 f4	 movss	 DWORD PTR _point$10[ebp+8], xmm0

; 1770 : 
; 1771 : 			get_displacement_map_position ( &point, //( vec3d * ) &objects_3d_data[object_number].points[count],

  00245	8b 45 fc	 mov	 eax, DWORD PTR _list$[ebp]
  00248	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0024b	8b 55 f8	 mov	 edx, DWORD PTR _count$11[ebp]
  0024e	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  00251	50		 push	 eax
  00252	8b 4d 0c	 mov	 ecx, DWORD PTR _displacement$[ebp]
  00255	51		 push	 ecx
  00256	8d 55 ec	 lea	 edx, DWORD PTR _point$10[ebp]
  00259	52		 push	 edx
  0025a	e8 00 00 00 00	 call	 ?get_displacement_map_position@@YGXPAUVEC3D@@PAUDISPLACEMENT_MAP@@PAH@Z ; get_displacement_map_position

; 1772 : 														displacement,
; 1773 : 														&list->points[count].offset );
; 1774 : 		}

  0025f	e9 35 ff ff ff	 jmp	 $LN4@generate_e
$LN5@generate_e:

; 1775 : 
; 1776 : 		list->object_number = object_number;

  00264	8b 45 fc	 mov	 eax, DWORD PTR _list$[ebp]
  00267	8b 4d 08	 mov	 ecx, DWORD PTR _object_number$[ebp]
  0026a	89 08		 mov	 DWORD PTR [eax], ecx

; 1777 : 
; 1778 : 		list->succ = explosion_object_points_lookup_list;

  0026c	8b 45 fc	 mov	 eax, DWORD PTR _list$[ebp]
  0026f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?explosion_object_points_lookup_list@@3PAUEXPLOSION_OBJECT_POINTS_LOOKUP@@A ; explosion_object_points_lookup_list
  00275	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1779 : 
; 1780 : 		explosion_object_points_lookup_list = list;

  00278	8b 45 fc	 mov	 eax, DWORD PTR _list$[ebp]
  0027b	a3 00 00 00 00	 mov	 DWORD PTR ?explosion_object_points_lookup_list@@3PAUEXPLOSION_OBJECT_POINTS_LOOKUP@@A, eax ; explosion_object_points_lookup_list

; 1781 : 
; 1782 : 		debug_log ( "Generated list for object %d", object_number );

  00280	8b 45 08	 mov	 eax, DWORD PTR _object_number$[ebp]
  00283	50		 push	 eax
  00284	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@NAGKEOBN@Generated?5list?5for?5object?5?$CFd@
  00289	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0028e	83 c4 08	 add	 esp, 8

; 1783 : 
; 1784 : 		return ( list );

  00291	8b 45 fc	 mov	 eax, DWORD PTR _list$[ebp]
$LN1@generate_e:

; 1785 : 	}
; 1786 : }

  00294	5f		 pop	 edi
  00295	5e		 pop	 esi
  00296	5b		 pop	 ebx
  00297	8b e5		 mov	 esp, ebp
  00299	5d		 pop	 ebp
  0029a	c2 08 00	 ret	 8
?generate_explosion_object_texture_points@@YGPAUEXPLOSION_OBJECT_POINTS_LOOKUP@@HPAUDISPLACEMENT_MAP@@@Z ENDP ; generate_explosion_object_texture_points
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dexplos.c
;	COMDAT ?draw_3d_explosion_unclipped_faces@@YGXHPAUVEC3D@@PAULIGHT_3D_SOURCE@@PAUOBJECT_3D_INFO@@@Z
_TEXT	SEGMENT
_frame$1 = -20						; size = 4
_frame$2 = -16						; size = 4
_surfaces_left$ = -12					; size = 4
_faces_left$ = -8					; size = 4
_number_of_surface_points$ = -4				; size = 4
_object_number$ = 8					; size = 4
_pos$ = 12						; size = 4
_lights$ = 16						; size = 4
_this_object_3d_info$ = 20				; size = 4
?draw_3d_explosion_unclipped_faces@@YGXHPAUVEC3D@@PAULIGHT_3D_SOURCE@@PAUOBJECT_3D_INFO@@@Z PROC ; draw_3d_explosion_unclipped_faces, COMDAT

; 1487 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1488 : 	int
; 1489 : 		number_of_surface_points,
; 1490 : 		faces_left,
; 1491 : 		surfaces_left;
; 1492 : 
; 1493 : 	surfaces_left = objects_3d_data[object_number].number_of_surfaces;

  00009	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00013	0f b7 54 01 06	 movzx	 edx, WORD PTR [ecx+eax+6]
  00018	89 55 f4	 mov	 DWORD PTR _surfaces_left$[ebp], edx

; 1494 : 
; 1495 : 	current_object_3d_faces = objects_3d_data[object_number].faces;

  0001b	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  0001f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00025	8b 54 01 44	 mov	 edx, DWORD PTR [ecx+eax+68]
  00029	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A, edx ; current_object_3d_faces

; 1496 : 	current_object_3d_surface = objects_3d_data[object_number].surfaces;

  0002f	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00039	8b 54 01 50	 mov	 edx, DWORD PTR [ecx+eax+80]
  0003d	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A, edx ; current_object_3d_surface

; 1497 : 	current_object_3d_point_list = objects_3d_data[object_number].object_faces_point_plain_list;

  00043	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00047	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0004d	8b 54 01 4c	 mov	 edx, DWORD PTR [ecx+eax+76]
  00051	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, edx ; current_object_3d_point_list

; 1498 : 	current_object_3d_face_normal_list = objects_3d_data[object_number].object_face_normal_references;

  00057	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  0005b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00061	8b 54 01 54	 mov	 edx, DWORD PTR [ecx+eax+84]
  00065	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, edx ; current_object_3d_face_normal_list

; 1499 : 	current_object_3d_transformed_normals = &transformed_3d_normals[object_3d_points_current_base];

  0006b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_3d_points_current_base@@3HA ; object_3d_points_current_base
  00070	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR ?transformed_3d_normals@@3PAUOBJECT_3D_TRANSFORMED_POINT_NORMAL@@A[eax*8]
  00077	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_transformed_normals@@3PAUOBJECT_3D_TRANSFORMED_POINT_NORMAL@@A, ecx ; current_object_3d_transformed_normals

; 1500 : 
; 1501 : 	current_object_3d_surface_point_list = objects_3d_data[object_number].surface_points;

  0007d	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00081	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00087	8b 54 01 5c	 mov	 edx, DWORD PTR [ecx+eax+92]
  0008b	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, edx ; current_object_3d_surface_point_list

; 1502 : 	current_object_3d_surface_point_texture_list = objects_3d_data[object_number].surface_texture_points;

  00091	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00095	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0009b	8b 54 01 58	 mov	 edx, DWORD PTR [ecx+eax+88]
  0009f	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A, edx ; current_object_3d_surface_point_texture_list

; 1503 : 	current_object_3d_surface_point_normal_list = objects_3d_data[object_number].surface_point_normals;

  000a5	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  000a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  000af	8b 54 01 60	 mov	 edx, DWORD PTR [ecx+eax+96]
  000b3	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface_point_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, edx ; current_object_3d_surface_point_normal_list

; 1504 : 
; 1505 : 	for ( surfaces_left = objects_3d_data[object_number].number_of_surfaces; surfaces_left > 0; surfaces_left-- )

  000b9	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  000bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  000c3	0f b7 54 01 06	 movzx	 edx, WORD PTR [ecx+eax+6]
  000c8	89 55 f4	 mov	 DWORD PTR _surfaces_left$[ebp], edx
  000cb	eb 09		 jmp	 SHORT $LN4@draw_3d_ex
$LN2@draw_3d_ex:
  000cd	8b 45 f4	 mov	 eax, DWORD PTR _surfaces_left$[ebp]
  000d0	83 e8 01	 sub	 eax, 1
  000d3	89 45 f4	 mov	 DWORD PTR _surfaces_left$[ebp], eax
$LN4@draw_3d_ex:
  000d6	83 7d f4 00	 cmp	 DWORD PTR _surfaces_left$[ebp], 0
  000da	0f 8e 03 07 00
	00		 jle	 $LN3@draw_3d_ex

; 1506 : 	{
; 1507 : 		number_of_surface_points = current_object_3d_surface->number_of_points;

  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  000e5	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  000e9	89 4d fc	 mov	 DWORD PTR _number_of_surface_points$[ebp], ecx

; 1508 : 		if ( number_of_surface_points == 0 )

  000ec	83 7d fc 00	 cmp	 DWORD PTR _number_of_surface_points$[ebp], 0
  000f0	75 07		 jne	 SHORT $LN23@draw_3d_ex

; 1509 : 		{
; 1510 : 			number_of_surface_points = 256;

  000f2	c7 45 fc 00 01
	00 00		 mov	 DWORD PTR _number_of_surface_points$[ebp], 256 ; 00000100H
$LN23@draw_3d_ex:

; 1511 : 		}
; 1512 : 
; 1513 : 		if ( current_object_3d_surface->detail )				{ zbuffer_constant = zbuffer_constant_elevated_bias; }

  000f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  000fe	66 8b 08	 mov	 cx, WORD PTR [eax]
  00101	66 d1 e9	 shr	 cx, 1
  00104	66 83 e1 01	 and	 cx, 1
  00108	0f b7 d1	 movzx	 edx, cx
  0010b	85 d2		 test	 edx, edx
  0010d	74 12		 je	 SHORT $LN24@draw_3d_ex
  0010f	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?zbuffer_constant_elevated_bias@@3NA
  00117	f2 0f 11 05 00
	00 00 00	 movsd	 QWORD PTR ?zbuffer_constant@@3NA, xmm0
  0011f	eb 10		 jmp	 SHORT $LN25@draw_3d_ex
$LN24@draw_3d_ex:

; 1514 : 		else																{ zbuffer_constant = zbuffer_constant_normal_bias; }

  00121	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?zbuffer_constant_normal_bias@@3NA
  00129	f2 0f 11 05 00
	00 00 00	 movsd	 QWORD PTR ?zbuffer_constant@@3NA, xmm0
$LN25@draw_3d_ex:

; 1515 : 
; 1516 : 		if ( current_object_3d_surface->specularity )		{ current_object_3d_specular = specular_rendering_enabled; }

  00131	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00136	0f b6 48 0b	 movzx	 ecx, BYTE PTR [eax+11]
  0013a	85 c9		 test	 ecx, ecx
  0013c	74 0c		 je	 SHORT $LN26@draw_3d_ex
  0013e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?specular_rendering_enabled@@3HA ; specular_rendering_enabled
  00143	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_specular@@3HA, eax ; current_object_3d_specular
  00148	eb 0a		 jmp	 SHORT $LN27@draw_3d_ex
$LN26@draw_3d_ex:

; 1517 : 		else																{ current_object_3d_specular = FALSE; }

  0014a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_specular@@3HA, 0 ; current_object_3d_specular
$LN27@draw_3d_ex:

; 1518 : 
; 1519 : 		reset_deferred_state_changes ();

  00154	e8 00 00 00 00	 call	 ?reset_deferred_state_changes@@YGXXZ ; reset_deferred_state_changes

; 1520 : 
; 1521 : 		set_deferred_d3d_int_state ( D3DRENDERSTATE_SPECULARENABLE, current_object_3d_specular );

  00159	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_specular@@3HA ; current_object_3d_specular
  0015e	50		 push	 eax
  0015f	6a 1d		 push	 29			; 0000001dH
  00161	e8 00 00 00 00	 call	 ?set_deferred_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_deferred_d3d_int_state

; 1522 : 
; 1523 : 		if ( current_object_3d_surface->textured )

  00166	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0016b	66 8b 08	 mov	 cx, WORD PTR [eax]
  0016e	66 c1 e9 03	 shr	 cx, 3
  00172	66 83 e1 01	 and	 cx, 1
  00176	0f b7 d1	 movzx	 edx, cx
  00179	85 d2		 test	 edx, edx
  0017b	0f 84 b7 04 00
	00		 je	 $LN28@draw_3d_ex

; 1524 : 		{
; 1525 : 			if ( current_object_3d_surface->texture_wrapped_u )	{ current_object_3d_texture_u_address = D3DTADDRESS_WRAP; }

  00181	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00186	66 8b 08	 mov	 cx, WORD PTR [eax]
  00189	66 c1 e9 0c	 shr	 cx, 12			; 0000000cH
  0018d	66 83 e1 01	 and	 cx, 1
  00191	0f b7 d1	 movzx	 edx, cx
  00194	85 d2		 test	 edx, edx
  00196	74 0c		 je	 SHORT $LN30@draw_3d_ex
  00198	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?current_object_3d_texture_u_address@@3HA, 1 ; current_object_3d_texture_u_address
  001a2	eb 0a		 jmp	 SHORT $LN31@draw_3d_ex
$LN30@draw_3d_ex:

; 1526 : 			else																	{ current_object_3d_texture_u_address = D3DTADDRESS_CLAMP; }

  001a4	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?current_object_3d_texture_u_address@@3HA, 3 ; current_object_3d_texture_u_address
$LN31@draw_3d_ex:

; 1527 : 
; 1528 : 			if ( current_object_3d_surface->texture_wrapped_v )	{ current_object_3d_texture_v_address = D3DTADDRESS_WRAP; }

  001ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  001b3	66 8b 08	 mov	 cx, WORD PTR [eax]
  001b6	66 c1 e9 0d	 shr	 cx, 13			; 0000000dH
  001ba	66 83 e1 01	 and	 cx, 1
  001be	0f b7 d1	 movzx	 edx, cx
  001c1	85 d2		 test	 edx, edx
  001c3	74 0c		 je	 SHORT $LN32@draw_3d_ex
  001c5	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?current_object_3d_texture_v_address@@3HA, 1 ; current_object_3d_texture_v_address
  001cf	eb 0a		 jmp	 SHORT $LN33@draw_3d_ex
$LN32@draw_3d_ex:

; 1529 : 			else																	{ current_object_3d_texture_v_address = D3DTADDRESS_CLAMP; }

  001d1	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?current_object_3d_texture_v_address@@3HA, 3 ; current_object_3d_texture_v_address
$LN33@draw_3d_ex:

; 1530 : 
; 1531 : 			if ( current_object_3d_surface->texture_filtered )		{ current_object_3d_texture_filter = D3DTFG_LINEAR; }

  001db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  001e0	66 8b 08	 mov	 cx, WORD PTR [eax]
  001e3	66 c1 e9 0a	 shr	 cx, 10			; 0000000aH
  001e7	66 83 e1 01	 and	 cx, 1
  001eb	0f b7 d1	 movzx	 edx, cx
  001ee	85 d2		 test	 edx, edx
  001f0	74 0c		 je	 SHORT $LN34@draw_3d_ex
  001f2	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?current_object_3d_texture_filter@@3HA, 2 ; current_object_3d_texture_filter
  001fc	eb 0a		 jmp	 SHORT $LN35@draw_3d_ex
$LN34@draw_3d_ex:

; 1532 : 			else																	{ current_object_3d_texture_filter = D3DTFG_POINT; }

  001fe	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?current_object_3d_texture_filter@@3HA, 1 ; current_object_3d_texture_filter
$LN35@draw_3d_ex:

; 1533 : 
; 1534 : 			if ( current_object_3d_surface->texture_mipmapped )	{ current_object_3d_texture_mipmap = D3DTFN_LINEAR; }

  00208	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0020d	66 8b 08	 mov	 cx, WORD PTR [eax]
  00210	66 c1 e9 0b	 shr	 cx, 11			; 0000000bH
  00214	66 83 e1 01	 and	 cx, 1
  00218	0f b7 d1	 movzx	 edx, cx
  0021b	85 d2		 test	 edx, edx
  0021d	74 0c		 je	 SHORT $LN36@draw_3d_ex
  0021f	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?current_object_3d_texture_mipmap@@3HA, 2 ; current_object_3d_texture_mipmap
  00229	eb 0a		 jmp	 SHORT $LN37@draw_3d_ex
$LN36@draw_3d_ex:

; 1535 : 			else																	{ current_object_3d_texture_mipmap = D3DTFN_POINT; }

  0022b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?current_object_3d_texture_mipmap@@3HA, 1 ; current_object_3d_texture_mipmap
$LN37@draw_3d_ex:

; 1536 : 
; 1537 : 			if ( current_object_3d_surface->texture_animation )

  00235	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0023a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0023d	66 c1 e9 09	 shr	 cx, 9
  00241	66 83 e1 01	 and	 cx, 1
  00245	0f b7 d1	 movzx	 edx, cx
  00248	85 d2		 test	 edx, edx
  0024a	74 42		 je	 SHORT $LN38@draw_3d_ex

; 1538 : 			{
; 1539 : 				int
; 1540 : 					frame;
; 1541 : 
; 1542 : 				frame = texture_animations[current_object_3d_surface->texture_index].current_frame;

  0024c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00251	0f b7 48 04	 movzx	 ecx, WORD PTR [eax+4]
  00255	6b d1 0c	 imul	 edx, ecx, 12
  00258	a1 00 00 00 00	 mov	 eax, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  0025d	8b 4c 10 04	 mov	 ecx, DWORD PTR [eax+edx+4]
  00261	89 4d f0	 mov	 DWORD PTR _frame$2[ebp], ecx

; 1543 : 				current_object_3d_texture = system_textures[ texture_animations[current_object_3d_surface->texture_index].texture_indices[frame] ];

  00264	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00269	0f b7 48 04	 movzx	 ecx, WORD PTR [eax+4]
  0026d	6b d1 0c	 imul	 edx, ecx, 12
  00270	a1 00 00 00 00	 mov	 eax, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  00275	8b 4c 10 08	 mov	 ecx, DWORD PTR [eax+edx+8]
  00279	8b 55 f0	 mov	 edx, DWORD PTR _frame$2[ebp]
  0027c	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  0027f	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  00286	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_texture@@3PAUSCREEN@@A, ecx ; current_object_3d_texture

; 1544 : 			}
; 1545 : 			else

  0028c	eb 16		 jmp	 SHORT $LN39@draw_3d_ex
$LN38@draw_3d_ex:

; 1546 : 			{
; 1547 : 				current_object_3d_texture = system_textures[current_object_3d_surface->texture_index];

  0028e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00293	0f b7 48 04	 movzx	 ecx, WORD PTR [eax+4]
  00297	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[ecx*4]
  0029e	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_texture@@3PAUSCREEN@@A, edx ; current_object_3d_texture
$LN39@draw_3d_ex:

; 1548 : 			}
; 1549 : 
; 1550 : 			set_deferred_d3d_texture ( 0, current_object_3d_texture );

  002a4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_texture@@3PAUSCREEN@@A ; current_object_3d_texture
  002a9	50		 push	 eax
  002aa	6a 00		 push	 0
  002ac	e8 00 00 00 00	 call	 ?set_deferred_d3d_texture@@YGXHPAUSCREEN@@@Z ; set_deferred_d3d_texture

; 1551 : 			set_deferred_d3d_texture_stage_state ( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );

  002b1	6a 04		 push	 4
  002b3	6a 01		 push	 1
  002b5	6a 00		 push	 0
  002b7	e8 00 00 00 00	 call	 ?set_deferred_d3d_texture_stage_state@@YGXHHH@Z ; set_deferred_d3d_texture_stage_state

; 1552 : 
; 1553 : 			set_deferred_d3d_texture_stage_state ( 0, D3DTSS_ADDRESSU, current_object_3d_texture_u_address );

  002bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_texture_u_address@@3HA ; current_object_3d_texture_u_address
  002c1	50		 push	 eax
  002c2	6a 0d		 push	 13			; 0000000dH
  002c4	6a 00		 push	 0
  002c6	e8 00 00 00 00	 call	 ?set_deferred_d3d_texture_stage_state@@YGXHHH@Z ; set_deferred_d3d_texture_stage_state

; 1554 : 			set_deferred_d3d_texture_stage_state ( 0, D3DTSS_ADDRESSV, current_object_3d_texture_v_address );

  002cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_texture_v_address@@3HA ; current_object_3d_texture_v_address
  002d0	50		 push	 eax
  002d1	6a 0e		 push	 14			; 0000000eH
  002d3	6a 00		 push	 0
  002d5	e8 00 00 00 00	 call	 ?set_deferred_d3d_texture_stage_state@@YGXHHH@Z ; set_deferred_d3d_texture_stage_state

; 1555 : 			set_deferred_d3d_texture_stage_state ( 0, D3DTSS_MAGFILTER, current_object_3d_texture_filter );

  002da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_texture_filter@@3HA ; current_object_3d_texture_filter
  002df	50		 push	 eax
  002e0	6a 10		 push	 16			; 00000010H
  002e2	6a 00		 push	 0
  002e4	e8 00 00 00 00	 call	 ?set_deferred_d3d_texture_stage_state@@YGXHHH@Z ; set_deferred_d3d_texture_stage_state

; 1556 : 			set_deferred_d3d_texture_stage_state ( 0, D3DTSS_MINFILTER, current_object_3d_texture_mipmap );

  002e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_texture_mipmap@@3HA ; current_object_3d_texture_mipmap
  002ee	50		 push	 eax
  002ef	6a 11		 push	 17			; 00000011H
  002f1	6a 00		 push	 0
  002f3	e8 00 00 00 00	 call	 ?set_deferred_d3d_texture_stage_state@@YGXHHH@Z ; set_deferred_d3d_texture_stage_state

; 1557 : 
; 1558 : 			if ( current_object_3d_surface->has_luminosity_texture )

  002f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  002fd	66 8b 08	 mov	 cx, WORD PTR [eax]
  00300	66 c1 e9 04	 shr	 cx, 4
  00304	66 83 e1 01	 and	 cx, 1
  00308	0f b7 d1	 movzx	 edx, cx
  0030b	85 d2		 test	 edx, edx
  0030d	0f 84 12 02 00
	00		 je	 $LN40@draw_3d_ex

; 1559 : 			{
; 1560 : 				if ( current_object_3d_surface->luminosity_texture_animation )

  00313	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00318	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  0031b	80 e1 01	 and	 cl, 1
  0031e	0f b6 d1	 movzx	 edx, cl
  00321	85 d2		 test	 edx, edx
  00323	74 42		 je	 SHORT $LN42@draw_3d_ex

; 1561 : 				{
; 1562 : 					int
; 1563 : 						frame;
; 1564 : 
; 1565 : 					frame = texture_animations[current_object_3d_surface->luminosity_texture_index].current_frame;

  00325	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0032a	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0032e	6b d1 0c	 imul	 edx, ecx, 12
  00331	a1 00 00 00 00	 mov	 eax, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  00336	8b 4c 10 04	 mov	 ecx, DWORD PTR [eax+edx+4]
  0033a	89 4d ec	 mov	 DWORD PTR _frame$1[ebp], ecx

; 1566 : 					current_object_3d_luminosity_texture = system_textures[ texture_animations[current_object_3d_surface->luminosity_texture_index].texture_indices[frame] ];

  0033d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00342	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00346	6b d1 0c	 imul	 edx, ecx, 12
  00349	a1 00 00 00 00	 mov	 eax, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  0034e	8b 4c 10 08	 mov	 ecx, DWORD PTR [eax+edx+8]
  00352	8b 55 ec	 mov	 edx, DWORD PTR _frame$1[ebp]
  00355	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00358	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  0035f	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_luminosity_texture@@3PAUSCREEN@@A, ecx ; current_object_3d_luminosity_texture

; 1567 : 				}
; 1568 : 				else

  00365	eb 16		 jmp	 SHORT $LN43@draw_3d_ex
$LN42@draw_3d_ex:

; 1569 : 				{
; 1570 : 					current_object_3d_luminosity_texture = system_textures[current_object_3d_surface->luminosity_texture_index];

  00367	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0036c	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00370	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[ecx*4]
  00377	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_luminosity_texture@@3PAUSCREEN@@A, edx ; current_object_3d_luminosity_texture
$LN43@draw_3d_ex:

; 1571 : 				}
; 1572 : 
; 1573 : 				if ( current_object_3d_surface->luminosity_texture_wrapped_u )	{ current_object_3d_luminosity_texture_u_address = D3DTADDRESS_WRAP; }

  0037d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00382	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00385	c0 e9 03	 shr	 cl, 3
  00388	80 e1 01	 and	 cl, 1
  0038b	0f b6 d1	 movzx	 edx, cl
  0038e	85 d2		 test	 edx, edx
  00390	74 0c		 je	 SHORT $LN44@draw_3d_ex
  00392	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?current_object_3d_luminosity_texture_u_address@@3HA, 1 ; current_object_3d_luminosity_texture_u_address
  0039c	eb 0a		 jmp	 SHORT $LN45@draw_3d_ex
$LN44@draw_3d_ex:

; 1574 : 				else																				{ current_object_3d_luminosity_texture_u_address = D3DTADDRESS_CLAMP; }

  0039e	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?current_object_3d_luminosity_texture_u_address@@3HA, 3 ; current_object_3d_luminosity_texture_u_address
$LN45@draw_3d_ex:

; 1575 : 
; 1576 : 				if ( current_object_3d_surface->luminosity_texture_wrapped_v )	{ current_object_3d_luminosity_texture_v_address = D3DTADDRESS_WRAP; }

  003a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  003ad	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  003b0	c0 e9 04	 shr	 cl, 4
  003b3	80 e1 01	 and	 cl, 1
  003b6	0f b6 d1	 movzx	 edx, cl
  003b9	85 d2		 test	 edx, edx
  003bb	74 0c		 je	 SHORT $LN46@draw_3d_ex
  003bd	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?current_object_3d_luminosity_texture_v_address@@3HA, 1 ; current_object_3d_luminosity_texture_v_address
  003c7	eb 0a		 jmp	 SHORT $LN47@draw_3d_ex
$LN46@draw_3d_ex:

; 1577 : 				else																				{ current_object_3d_luminosity_texture_v_address = D3DTADDRESS_CLAMP; }

  003c9	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?current_object_3d_luminosity_texture_v_address@@3HA, 3 ; current_object_3d_luminosity_texture_v_address
$LN47@draw_3d_ex:

; 1578 : 
; 1579 : 				if ( current_object_3d_surface->luminosity_texture_filtered )	{ current_object_3d_luminosity_texture_filter = D3DTFG_LINEAR; }

  003d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  003d8	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  003db	d0 e9		 shr	 cl, 1
  003dd	80 e1 01	 and	 cl, 1
  003e0	0f b6 d1	 movzx	 edx, cl
  003e3	85 d2		 test	 edx, edx
  003e5	74 0c		 je	 SHORT $LN48@draw_3d_ex
  003e7	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?current_object_3d_luminosity_texture_filter@@3HA, 2 ; current_object_3d_luminosity_texture_filter
  003f1	eb 0a		 jmp	 SHORT $LN49@draw_3d_ex
$LN48@draw_3d_ex:

; 1580 : 				else																				{ current_object_3d_luminosity_texture_filter = D3DTFG_POINT; }

  003f3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?current_object_3d_luminosity_texture_filter@@3HA, 1 ; current_object_3d_luminosity_texture_filter
$LN49@draw_3d_ex:

; 1581 : 
; 1582 : 				if ( current_object_3d_surface->luminosity_texture_mipmapped )	{ current_object_3d_luminosity_texture_mipmap = D3DTFN_LINEAR; }

  003fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00402	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00405	c0 e9 02	 shr	 cl, 2
  00408	80 e1 01	 and	 cl, 1
  0040b	0f b6 d1	 movzx	 edx, cl
  0040e	85 d2		 test	 edx, edx
  00410	74 0c		 je	 SHORT $LN50@draw_3d_ex
  00412	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?current_object_3d_luminosity_texture_mipmap@@3HA, 2 ; current_object_3d_luminosity_texture_mipmap
  0041c	eb 0a		 jmp	 SHORT $LN51@draw_3d_ex
$LN50@draw_3d_ex:

; 1583 : 				else																				{ current_object_3d_luminosity_texture_mipmap = D3DTFN_POINT; }

  0041e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?current_object_3d_luminosity_texture_mipmap@@3HA, 1 ; current_object_3d_luminosity_texture_mipmap
$LN51@draw_3d_ex:

; 1584 : 
; 1585 : 				if ( current_object_3d_surface->smoothed )

  00428	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0042d	66 8b 08	 mov	 cx, WORD PTR [eax]
  00430	66 c1 e9 02	 shr	 cx, 2
  00434	66 83 e1 01	 and	 cx, 1
  00438	0f b7 d1	 movzx	 edx, cx
  0043b	85 d2		 test	 edx, edx
  0043d	74 59		 je	 SHORT $LN52@draw_3d_ex

; 1586 : 				{
; 1587 : 					set_deferred_d3d_int_state ( D3DRENDERSTATE_SHADEMODE, D3DSHADE_GOURAUD );

  0043f	6a 02		 push	 2
  00441	6a 09		 push	 9
  00443	e8 00 00 00 00	 call	 ?set_deferred_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_deferred_d3d_int_state

; 1588 : 					for ( faces_left = current_object_3d_surface->number_of_faces; faces_left > 0; faces_left-- )

  00448	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0044d	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00451	89 4d f8	 mov	 DWORD PTR _faces_left$[ebp], ecx
  00454	eb 09		 jmp	 SHORT $LN7@draw_3d_ex
$LN5@draw_3d_ex:
  00456	8b 45 f8	 mov	 eax, DWORD PTR _faces_left$[ebp]
  00459	83 e8 01	 sub	 eax, 1
  0045c	89 45 f8	 mov	 DWORD PTR _faces_left$[ebp], eax
$LN7@draw_3d_ex:
  0045f	83 7d f8 00	 cmp	 DWORD PTR _faces_left$[ebp], 0
  00463	7e 2e		 jle	 SHORT $LN6@draw_3d_ex

; 1589 : 					{
; 1590 : 						wrender_unclipped_3d_object_gouraud_textured_lightmap_polygon ( current_object_3d_faces );

  00465	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  0046a	50		 push	 eax
  0046b	e8 00 00 00 00	 call	 ?wrender_unclipped_3d_object_gouraud_textured_lightmap_polygon@@YGXPAUOBJECT_3D_FACE@@@Z ; wrender_unclipped_3d_object_gouraud_textured_lightmap_polygon

; 1591 : 						current_object_3d_point_list += current_object_3d_faces->number_of_points;

  00470	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  00475	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00478	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  0047e	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, ecx ; current_object_3d_point_list

; 1592 : 						current_object_3d_faces++;

  00484	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  00489	83 c0 01	 add	 eax, 1
  0048c	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A, eax ; current_object_3d_faces

; 1593 : 					}

  00491	eb c3		 jmp	 SHORT $LN5@draw_3d_ex
$LN6@draw_3d_ex:

; 1594 : 				}
; 1595 : 				else

  00493	e9 88 00 00 00	 jmp	 $LN9@draw_3d_ex
$LN52@draw_3d_ex:

; 1596 : 				{
; 1597 : 					set_deferred_d3d_int_state ( D3DRENDERSTATE_SHADEMODE, D3DSHADE_FLAT );

  00498	6a 01		 push	 1
  0049a	6a 09		 push	 9
  0049c	e8 00 00 00 00	 call	 ?set_deferred_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_deferred_d3d_int_state

; 1598 : 					for ( faces_left = current_object_3d_surface->number_of_faces; faces_left > 0; faces_left-- )

  004a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  004a6	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  004aa	89 4d f8	 mov	 DWORD PTR _faces_left$[ebp], ecx
  004ad	eb 09		 jmp	 SHORT $LN10@draw_3d_ex
$LN8@draw_3d_ex:
  004af	8b 45 f8	 mov	 eax, DWORD PTR _faces_left$[ebp]
  004b2	83 e8 01	 sub	 eax, 1
  004b5	89 45 f8	 mov	 DWORD PTR _faces_left$[ebp], eax
$LN10@draw_3d_ex:
  004b8	83 7d f8 00	 cmp	 DWORD PTR _faces_left$[ebp], 0
  004bc	7e 62		 jle	 SHORT $LN9@draw_3d_ex

; 1599 : 					{
; 1600 : 						if ( current_object_3d_surface->polygons )

  004be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  004c3	66 8b 08	 mov	 cx, WORD PTR [eax]
  004c6	66 83 e1 01	 and	 cx, 1
  004ca	0f b7 d1	 movzx	 edx, cx
  004cd	85 d2		 test	 edx, edx
  004cf	74 3b		 je	 SHORT $LN54@draw_3d_ex

; 1601 : 						{
; 1602 : 							wrender_unclipped_3d_object_textured_lightmap_polygon ( current_object_3d_faces );

  004d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  004d6	50		 push	 eax
  004d7	e8 00 00 00 00	 call	 ?wrender_unclipped_3d_object_textured_lightmap_polygon@@YGXPAUOBJECT_3D_FACE@@@Z ; wrender_unclipped_3d_object_textured_lightmap_polygon

; 1603 : 							current_object_3d_face_normal_list++;

  004dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_face_normal_list
  004e1	83 c0 02	 add	 eax, 2
  004e4	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, eax ; current_object_3d_face_normal_list

; 1604 : 							current_object_3d_point_list += current_object_3d_faces->number_of_points;

  004e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  004ee	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  004f1	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  004f7	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, ecx ; current_object_3d_point_list

; 1605 : 							current_object_3d_faces++;

  004fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  00502	83 c0 01	 add	 eax, 1
  00505	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A, eax ; current_object_3d_faces

; 1606 : 						}
; 1607 : 						else

  0050a	eb 12		 jmp	 SHORT $LN55@draw_3d_ex
$LN54@draw_3d_ex:

; 1608 : 						{
; 1609 : 							wrender_unclipped_3d_object_textured_line ();

  0050c	e8 00 00 00 00	 call	 ?wrender_unclipped_3d_object_textured_line@@YGXXZ ; wrender_unclipped_3d_object_textured_line

; 1610 : 							current_object_3d_point_list += 2;

  00511	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  00516	83 c0 02	 add	 eax, 2
  00519	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, eax ; current_object_3d_point_list
$LN55@draw_3d_ex:

; 1611 : 						}
; 1612 : 					}

  0051e	eb 8f		 jmp	 SHORT $LN8@draw_3d_ex
$LN9@draw_3d_ex:

; 1613 : 				}
; 1614 : 			}
; 1615 : 			else

  00520	e9 0e 01 00 00	 jmp	 $LN15@draw_3d_ex
$LN40@draw_3d_ex:

; 1616 : 			{
; 1617 : 				if ( current_object_3d_surface->smoothed )

  00525	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0052a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0052d	66 c1 e9 02	 shr	 cx, 2
  00531	66 83 e1 01	 and	 cx, 1
  00535	0f b7 d1	 movzx	 edx, cx
  00538	85 d2		 test	 edx, edx
  0053a	74 6f		 je	 SHORT $LN56@draw_3d_ex

; 1618 : 				{
; 1619 : 					set_deferred_d3d_int_state ( D3DRENDERSTATE_SHADEMODE, D3DSHADE_GOURAUD );

  0053c	6a 02		 push	 2
  0053e	6a 09		 push	 9
  00540	e8 00 00 00 00	 call	 ?set_deferred_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_deferred_d3d_int_state

; 1620 : 					for ( faces_left = current_object_3d_surface->number_of_faces; faces_left > 0; faces_left-- )

  00545	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0054a	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  0054e	89 4d f8	 mov	 DWORD PTR _faces_left$[ebp], ecx
  00551	eb 09		 jmp	 SHORT $LN13@draw_3d_ex
$LN11@draw_3d_ex:
  00553	8b 45 f8	 mov	 eax, DWORD PTR _faces_left$[ebp]
  00556	83 e8 01	 sub	 eax, 1
  00559	89 45 f8	 mov	 DWORD PTR _faces_left$[ebp], eax
$LN13@draw_3d_ex:
  0055c	83 7d f8 00	 cmp	 DWORD PTR _faces_left$[ebp], 0
  00560	7e 44		 jle	 SHORT $LN12@draw_3d_ex

; 1621 : 					{
; 1622 : 						if ( current_object_3d_specular )

  00562	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_object_3d_specular@@3HA, 0 ; current_object_3d_specular
  00569	74 0d		 je	 SHORT $LN58@draw_3d_ex

; 1623 : 						{
; 1624 : 							wrender_unclipped_3d_object_gouraud_textured_polygon ( current_object_3d_faces );

  0056b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  00570	50		 push	 eax
  00571	e8 00 00 00 00	 call	 ?wrender_unclipped_3d_object_gouraud_textured_polygon@@YGXPAUOBJECT_3D_FACE@@@Z ; wrender_unclipped_3d_object_gouraud_textured_polygon

; 1625 : 						}
; 1626 : 						else

  00576	eb 0b		 jmp	 SHORT $LN59@draw_3d_ex
$LN58@draw_3d_ex:

; 1627 : 						{
; 1628 : 							wrender_unclipped_3d_object_gouraud_textured_nospecular_polygon ( current_object_3d_faces );

  00578	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  0057d	50		 push	 eax
  0057e	e8 00 00 00 00	 call	 ?wrender_unclipped_3d_object_gouraud_textured_nospecular_polygon@@YGXPAUOBJECT_3D_FACE@@@Z ; wrender_unclipped_3d_object_gouraud_textured_nospecular_polygon
$LN59@draw_3d_ex:

; 1629 : 						}
; 1630 : 
; 1631 : 						current_object_3d_point_list += current_object_3d_faces->number_of_points;

  00583	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  00588	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0058b	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  00591	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, ecx ; current_object_3d_point_list

; 1632 : 						current_object_3d_faces++;

  00597	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  0059c	83 c0 01	 add	 eax, 1
  0059f	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A, eax ; current_object_3d_faces

; 1633 : 					}

  005a4	eb ad		 jmp	 SHORT $LN11@draw_3d_ex
$LN12@draw_3d_ex:

; 1634 : 				}
; 1635 : 				else

  005a6	e9 88 00 00 00	 jmp	 $LN15@draw_3d_ex
$LN56@draw_3d_ex:

; 1636 : 				{
; 1637 : 					set_deferred_d3d_int_state ( D3DRENDERSTATE_SHADEMODE, D3DSHADE_FLAT );

  005ab	6a 01		 push	 1
  005ad	6a 09		 push	 9
  005af	e8 00 00 00 00	 call	 ?set_deferred_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_deferred_d3d_int_state

; 1638 : 					for ( faces_left = current_object_3d_surface->number_of_faces; faces_left > 0; faces_left-- )

  005b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  005b9	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  005bd	89 4d f8	 mov	 DWORD PTR _faces_left$[ebp], ecx
  005c0	eb 09		 jmp	 SHORT $LN16@draw_3d_ex
$LN14@draw_3d_ex:
  005c2	8b 45 f8	 mov	 eax, DWORD PTR _faces_left$[ebp]
  005c5	83 e8 01	 sub	 eax, 1
  005c8	89 45 f8	 mov	 DWORD PTR _faces_left$[ebp], eax
$LN16@draw_3d_ex:
  005cb	83 7d f8 00	 cmp	 DWORD PTR _faces_left$[ebp], 0
  005cf	7e 62		 jle	 SHORT $LN15@draw_3d_ex

; 1639 : 					{
; 1640 : 						if ( current_object_3d_surface->polygons )

  005d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  005d6	66 8b 08	 mov	 cx, WORD PTR [eax]
  005d9	66 83 e1 01	 and	 cx, 1
  005dd	0f b7 d1	 movzx	 edx, cx
  005e0	85 d2		 test	 edx, edx
  005e2	74 3b		 je	 SHORT $LN60@draw_3d_ex

; 1641 : 						{
; 1642 : 							wrender_unclipped_3d_object_textured_polygon ( current_object_3d_faces );

  005e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  005e9	50		 push	 eax
  005ea	e8 00 00 00 00	 call	 ?wrender_unclipped_3d_object_textured_polygon@@YGXPAUOBJECT_3D_FACE@@@Z ; wrender_unclipped_3d_object_textured_polygon

; 1643 : 							current_object_3d_face_normal_list++;

  005ef	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_face_normal_list
  005f4	83 c0 02	 add	 eax, 2
  005f7	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, eax ; current_object_3d_face_normal_list

; 1644 : 							current_object_3d_point_list += current_object_3d_faces->number_of_points;

  005fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  00601	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00604	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  0060a	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, ecx ; current_object_3d_point_list

; 1645 : 							current_object_3d_faces++;

  00610	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  00615	83 c0 01	 add	 eax, 1
  00618	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A, eax ; current_object_3d_faces

; 1646 : 						}
; 1647 : 						else

  0061d	eb 12		 jmp	 SHORT $LN61@draw_3d_ex
$LN60@draw_3d_ex:

; 1648 : 						{
; 1649 : 							wrender_unclipped_3d_object_textured_line ();

  0061f	e8 00 00 00 00	 call	 ?wrender_unclipped_3d_object_textured_line@@YGXXZ ; wrender_unclipped_3d_object_textured_line

; 1650 : 							current_object_3d_point_list += 2;

  00624	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  00629	83 c0 02	 add	 eax, 2
  0062c	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, eax ; current_object_3d_point_list
$LN61@draw_3d_ex:

; 1651 : 						}
; 1652 : 					}

  00631	eb 8f		 jmp	 SHORT $LN14@draw_3d_ex
$LN15@draw_3d_ex:

; 1653 : 				}
; 1654 : 			}
; 1655 : 		}
; 1656 : 		else

  00633	e9 0c 01 00 00	 jmp	 $LN21@draw_3d_ex
$LN28@draw_3d_ex:

; 1657 : 		{
; 1658 : 			set_deferred_d3d_texture_stage_state ( 0, D3DTSS_COLOROP, D3DTOP_DISABLE );

  00638	6a 01		 push	 1
  0063a	6a 01		 push	 1
  0063c	6a 00		 push	 0
  0063e	e8 00 00 00 00	 call	 ?set_deferred_d3d_texture_stage_state@@YGXHHH@Z ; set_deferred_d3d_texture_stage_state

; 1659 : 			set_deferred_d3d_texture ( 0, NULL );

  00643	6a 00		 push	 0
  00645	6a 00		 push	 0
  00647	e8 00 00 00 00	 call	 ?set_deferred_d3d_texture@@YGXHPAUSCREEN@@@Z ; set_deferred_d3d_texture

; 1660 : 			if ( current_object_3d_surface->smoothed )

  0064c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00651	66 8b 08	 mov	 cx, WORD PTR [eax]
  00654	66 c1 e9 02	 shr	 cx, 2
  00658	66 83 e1 01	 and	 cx, 1
  0065c	0f b7 d1	 movzx	 edx, cx
  0065f	85 d2		 test	 edx, edx
  00661	74 59		 je	 SHORT $LN62@draw_3d_ex

; 1661 : 			{
; 1662 : 				set_deferred_d3d_int_state ( D3DRENDERSTATE_SHADEMODE, D3DSHADE_GOURAUD );

  00663	6a 02		 push	 2
  00665	6a 09		 push	 9
  00667	e8 00 00 00 00	 call	 ?set_deferred_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_deferred_d3d_int_state

; 1663 : 				for ( faces_left = current_object_3d_surface->number_of_faces; faces_left > 0; faces_left-- )

  0066c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00671	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00675	89 4d f8	 mov	 DWORD PTR _faces_left$[ebp], ecx
  00678	eb 09		 jmp	 SHORT $LN19@draw_3d_ex
$LN17@draw_3d_ex:
  0067a	8b 45 f8	 mov	 eax, DWORD PTR _faces_left$[ebp]
  0067d	83 e8 01	 sub	 eax, 1
  00680	89 45 f8	 mov	 DWORD PTR _faces_left$[ebp], eax
$LN19@draw_3d_ex:
  00683	83 7d f8 00	 cmp	 DWORD PTR _faces_left$[ebp], 0
  00687	7e 2e		 jle	 SHORT $LN18@draw_3d_ex

; 1664 : 				{
; 1665 : 					wrender_unclipped_3d_object_gouraud_polygon ( current_object_3d_faces );

  00689	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  0068e	50		 push	 eax
  0068f	e8 00 00 00 00	 call	 ?wrender_unclipped_3d_object_gouraud_polygon@@YGXPAUOBJECT_3D_FACE@@@Z ; wrender_unclipped_3d_object_gouraud_polygon

; 1666 : 					current_object_3d_point_list += current_object_3d_faces->number_of_points;

  00694	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  00699	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0069c	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  006a2	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, ecx ; current_object_3d_point_list

; 1667 : 					current_object_3d_faces++;

  006a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  006ad	83 c0 01	 add	 eax, 1
  006b0	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A, eax ; current_object_3d_faces

; 1668 : 				}

  006b5	eb c3		 jmp	 SHORT $LN17@draw_3d_ex
$LN18@draw_3d_ex:

; 1669 : 			}
; 1670 : 			else

  006b7	e9 88 00 00 00	 jmp	 $LN21@draw_3d_ex
$LN62@draw_3d_ex:

; 1671 : 			{
; 1672 : 				set_deferred_d3d_int_state ( D3DRENDERSTATE_SHADEMODE, D3DSHADE_FLAT );

  006bc	6a 01		 push	 1
  006be	6a 09		 push	 9
  006c0	e8 00 00 00 00	 call	 ?set_deferred_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_deferred_d3d_int_state

; 1673 : 				for ( faces_left = current_object_3d_surface->number_of_faces; faces_left > 0; faces_left-- )

  006c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  006ca	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  006ce	89 4d f8	 mov	 DWORD PTR _faces_left$[ebp], ecx
  006d1	eb 09		 jmp	 SHORT $LN22@draw_3d_ex
$LN20@draw_3d_ex:
  006d3	8b 45 f8	 mov	 eax, DWORD PTR _faces_left$[ebp]
  006d6	83 e8 01	 sub	 eax, 1
  006d9	89 45 f8	 mov	 DWORD PTR _faces_left$[ebp], eax
$LN22@draw_3d_ex:
  006dc	83 7d f8 00	 cmp	 DWORD PTR _faces_left$[ebp], 0
  006e0	7e 62		 jle	 SHORT $LN21@draw_3d_ex

; 1674 : 				{
; 1675 : 					if ( current_object_3d_surface->polygons )

  006e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  006e7	66 8b 08	 mov	 cx, WORD PTR [eax]
  006ea	66 83 e1 01	 and	 cx, 1
  006ee	0f b7 d1	 movzx	 edx, cx
  006f1	85 d2		 test	 edx, edx
  006f3	74 3b		 je	 SHORT $LN64@draw_3d_ex

; 1676 : 					{
; 1677 : 						wrender_unclipped_3d_object_polygon ( current_object_3d_faces );

  006f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  006fa	50		 push	 eax
  006fb	e8 00 00 00 00	 call	 ?wrender_unclipped_3d_object_polygon@@YGXPAUOBJECT_3D_FACE@@@Z ; wrender_unclipped_3d_object_polygon

; 1678 : 						current_object_3d_face_normal_list++;

  00700	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_face_normal_list
  00705	83 c0 02	 add	 eax, 2
  00708	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, eax ; current_object_3d_face_normal_list

; 1679 : 						current_object_3d_point_list += current_object_3d_faces->number_of_points;

  0070d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  00712	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00715	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  0071b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, ecx ; current_object_3d_point_list

; 1680 : 						current_object_3d_faces++;

  00721	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  00726	83 c0 01	 add	 eax, 1
  00729	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A, eax ; current_object_3d_faces

; 1681 : 					}
; 1682 : 					else

  0072e	eb 12		 jmp	 SHORT $LN65@draw_3d_ex
$LN64@draw_3d_ex:

; 1683 : 					{
; 1684 : 						wrender_unclipped_3d_object_plain_line ();

  00730	e8 00 00 00 00	 call	 ?wrender_unclipped_3d_object_plain_line@@YGXXZ ; wrender_unclipped_3d_object_plain_line

; 1685 : 						current_object_3d_point_list += 2;

  00735	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  0073a	83 c0 02	 add	 eax, 2
  0073d	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, eax ; current_object_3d_point_list
$LN65@draw_3d_ex:

; 1686 : 					}
; 1687 : 				}

  00742	eb 8f		 jmp	 SHORT $LN20@draw_3d_ex
$LN21@draw_3d_ex:

; 1688 : 			}
; 1689 : 		}
; 1690 : 
; 1691 : 		current_object_3d_surface_point_list += number_of_surface_points;

  00744	8b 45 fc	 mov	 eax, DWORD PTR _number_of_surface_points$[ebp]
  00747	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  0074d	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00750	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, edx ; current_object_3d_surface_point_list

; 1692 : 
; 1693 : 		if ( current_object_3d_surface->smoothed )

  00756	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0075b	66 8b 08	 mov	 cx, WORD PTR [eax]
  0075e	66 c1 e9 02	 shr	 cx, 2
  00762	66 83 e1 01	 and	 cx, 1
  00766	0f b7 d1	 movzx	 edx, cx
  00769	85 d2		 test	 edx, edx
  0076b	74 12		 je	 SHORT $LN66@draw_3d_ex

; 1694 : 		{
; 1695 : 			current_object_3d_surface_point_normal_list += number_of_surface_points;

  0076d	8b 45 fc	 mov	 eax, DWORD PTR _number_of_surface_points$[ebp]
  00770	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_normal_list
  00776	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00779	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface_point_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, edx ; current_object_3d_surface_point_normal_list
$LN66@draw_3d_ex:

; 1696 : 		}
; 1697 : 
; 1698 : 		if ( current_object_3d_surface->textured )

  0077f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00784	66 8b 08	 mov	 cx, WORD PTR [eax]
  00787	66 c1 e9 03	 shr	 cx, 3
  0078b	66 83 e1 01	 and	 cx, 1
  0078f	0f b7 d1	 movzx	 edx, cx
  00792	85 d2		 test	 edx, edx
  00794	74 12		 je	 SHORT $LN67@draw_3d_ex

; 1699 : 		{
; 1700 : 			current_object_3d_surface_point_texture_list += number_of_surface_points;

  00796	8b 45 fc	 mov	 eax, DWORD PTR _number_of_surface_points$[ebp]
  00799	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A ; current_object_3d_surface_point_texture_list
  0079f	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  007a2	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A, edx ; current_object_3d_surface_point_texture_list
$LN67@draw_3d_ex:

; 1701 : 		}
; 1702 : 
; 1703 : 		if ( current_object_3d_surface->has_luminosity_texture )

  007a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  007ad	66 8b 08	 mov	 cx, WORD PTR [eax]
  007b0	66 c1 e9 04	 shr	 cx, 4
  007b4	66 83 e1 01	 and	 cx, 1
  007b8	0f b7 d1	 movzx	 edx, cx
  007bb	85 d2		 test	 edx, edx
  007bd	74 12		 je	 SHORT $LN68@draw_3d_ex

; 1704 : 		{
; 1705 : 			current_object_3d_surface_point_texture_list += number_of_surface_points;

  007bf	8b 45 fc	 mov	 eax, DWORD PTR _number_of_surface_points$[ebp]
  007c2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A ; current_object_3d_surface_point_texture_list
  007c8	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  007cb	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A, edx ; current_object_3d_surface_point_texture_list
$LN68@draw_3d_ex:

; 1706 : 		}
; 1707 : 
; 1708 : 		current_object_3d_surface++;

  007d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  007d6	83 c0 10	 add	 eax, 16			; 00000010H
  007d9	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A, eax ; current_object_3d_surface

; 1709 : 	}

  007de	e9 ea f8 ff ff	 jmp	 $LN2@draw_3d_ex
$LN3@draw_3d_ex:

; 1710 : }

  007e3	5f		 pop	 edi
  007e4	5e		 pop	 esi
  007e5	5b		 pop	 ebx
  007e6	8b e5		 mov	 esp, ebp
  007e8	5d		 pop	 ebp
  007e9	c2 10 00	 ret	 16			; 00000010H
?draw_3d_explosion_unclipped_faces@@YGXHPAUVEC3D@@PAULIGHT_3D_SOURCE@@PAUOBJECT_3D_INFO@@@Z ENDP ; draw_3d_explosion_unclipped_faces
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dexplos.c
;	COMDAT ?draw_3d_explosion_clipped_faces@@YGXHPAUVEC3D@@PAULIGHT_3D_SOURCE@@PAUOBJECT_3D_INFO@@@Z
_TEXT	SEGMENT
_frame$1 = -20						; size = 4
_frame$2 = -16						; size = 4
_surfaces_left$ = -12					; size = 4
_faces_left$ = -8					; size = 4
_number_of_surface_points$ = -4				; size = 4
_object_number$ = 8					; size = 4
_pos$ = 12						; size = 4
_lights$ = 16						; size = 4
_this_object_3d_info$ = 20				; size = 4
?draw_3d_explosion_clipped_faces@@YGXHPAUVEC3D@@PAULIGHT_3D_SOURCE@@PAUOBJECT_3D_INFO@@@Z PROC ; draw_3d_explosion_clipped_faces, COMDAT

; 1161 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1162 : 	int
; 1163 : 		number_of_surface_points,
; 1164 : 		faces_left,
; 1165 : 		surfaces_left;
; 1166 : 
; 1167 : 	surfaces_left = objects_3d_data[object_number].number_of_surfaces;

  00009	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00013	0f b7 54 01 06	 movzx	 edx, WORD PTR [ecx+eax+6]
  00018	89 55 f4	 mov	 DWORD PTR _surfaces_left$[ebp], edx

; 1168 : 
; 1169 : 	current_object_3d_faces = objects_3d_data[object_number].faces;

  0001b	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  0001f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00025	8b 54 01 44	 mov	 edx, DWORD PTR [ecx+eax+68]
  00029	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A, edx ; current_object_3d_faces

; 1170 : 	current_object_3d_surface = objects_3d_data[object_number].surfaces;

  0002f	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00039	8b 54 01 50	 mov	 edx, DWORD PTR [ecx+eax+80]
  0003d	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A, edx ; current_object_3d_surface

; 1171 : 	current_object_3d_point_list = objects_3d_data[object_number].object_faces_point_plain_list;

  00043	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00047	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0004d	8b 54 01 4c	 mov	 edx, DWORD PTR [ecx+eax+76]
  00051	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, edx ; current_object_3d_point_list

; 1172 : 	current_object_3d_face_normal_list = objects_3d_data[object_number].object_face_normal_references;

  00057	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  0005b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00061	8b 54 01 54	 mov	 edx, DWORD PTR [ecx+eax+84]
  00065	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, edx ; current_object_3d_face_normal_list

; 1173 : 	current_object_3d_transformed_normals = &transformed_3d_normals[object_3d_points_current_base];

  0006b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_3d_points_current_base@@3HA ; object_3d_points_current_base
  00070	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR ?transformed_3d_normals@@3PAUOBJECT_3D_TRANSFORMED_POINT_NORMAL@@A[eax*8]
  00077	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_transformed_normals@@3PAUOBJECT_3D_TRANSFORMED_POINT_NORMAL@@A, ecx ; current_object_3d_transformed_normals

; 1174 : 
; 1175 : 	current_object_3d_surface_point_list = objects_3d_data[object_number].surface_points;

  0007d	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00081	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  00087	8b 54 01 5c	 mov	 edx, DWORD PTR [ecx+eax+92]
  0008b	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, edx ; current_object_3d_surface_point_list

; 1176 : 	current_object_3d_surface_point_texture_list = objects_3d_data[object_number].surface_texture_points;

  00091	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  00095	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0009b	8b 54 01 58	 mov	 edx, DWORD PTR [ecx+eax+88]
  0009f	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A, edx ; current_object_3d_surface_point_texture_list

; 1177 : 	current_object_3d_surface_point_normal_list = objects_3d_data[object_number].surface_point_normals;

  000a5	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  000a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  000af	8b 54 01 60	 mov	 edx, DWORD PTR [ecx+eax+96]
  000b3	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface_point_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, edx ; current_object_3d_surface_point_normal_list

; 1178 : 
; 1179 : 	for ( surfaces_left = objects_3d_data[object_number].number_of_surfaces; surfaces_left > 0; surfaces_left-- )

  000b9	6b 45 08 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  000bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  000c3	0f b7 54 01 06	 movzx	 edx, WORD PTR [ecx+eax+6]
  000c8	89 55 f4	 mov	 DWORD PTR _surfaces_left$[ebp], edx
  000cb	eb 09		 jmp	 SHORT $LN4@draw_3d_ex
$LN2@draw_3d_ex:
  000cd	8b 45 f4	 mov	 eax, DWORD PTR _surfaces_left$[ebp]
  000d0	83 e8 01	 sub	 eax, 1
  000d3	89 45 f4	 mov	 DWORD PTR _surfaces_left$[ebp], eax
$LN4@draw_3d_ex:
  000d6	83 7d f4 00	 cmp	 DWORD PTR _surfaces_left$[ebp], 0
  000da	0f 8e da 08 00
	00		 jle	 $LN3@draw_3d_ex

; 1180 : 	{
; 1181 : 		number_of_surface_points = current_object_3d_surface->number_of_points;

  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  000e5	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  000e9	89 4d fc	 mov	 DWORD PTR _number_of_surface_points$[ebp], ecx

; 1182 : 
; 1183 : 		if ( number_of_surface_points == 0 )

  000ec	83 7d fc 00	 cmp	 DWORD PTR _number_of_surface_points$[ebp], 0
  000f0	75 07		 jne	 SHORT $LN23@draw_3d_ex

; 1184 : 		{
; 1185 : 			number_of_surface_points = 256;

  000f2	c7 45 fc 00 01
	00 00		 mov	 DWORD PTR _number_of_surface_points$[ebp], 256 ; 00000100H
$LN23@draw_3d_ex:

; 1186 : 		}
; 1187 : 
; 1188 : 		if ( current_object_3d_surface->detail )				{ zbuffer_constant = zbuffer_constant_elevated_bias; }

  000f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  000fe	66 8b 08	 mov	 cx, WORD PTR [eax]
  00101	66 d1 e9	 shr	 cx, 1
  00104	66 83 e1 01	 and	 cx, 1
  00108	0f b7 d1	 movzx	 edx, cx
  0010b	85 d2		 test	 edx, edx
  0010d	74 12		 je	 SHORT $LN24@draw_3d_ex
  0010f	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?zbuffer_constant_elevated_bias@@3NA
  00117	f2 0f 11 05 00
	00 00 00	 movsd	 QWORD PTR ?zbuffer_constant@@3NA, xmm0
  0011f	eb 10		 jmp	 SHORT $LN25@draw_3d_ex
$LN24@draw_3d_ex:

; 1189 : 		else																{ zbuffer_constant = zbuffer_constant_normal_bias; }

  00121	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?zbuffer_constant_normal_bias@@3NA
  00129	f2 0f 11 05 00
	00 00 00	 movsd	 QWORD PTR ?zbuffer_constant@@3NA, xmm0
$LN25@draw_3d_ex:

; 1190 : 
; 1191 : 		if ( current_object_3d_surface->specularity )		{ current_object_3d_specular = specular_rendering_enabled; }

  00131	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00136	0f b6 48 0b	 movzx	 ecx, BYTE PTR [eax+11]
  0013a	85 c9		 test	 ecx, ecx
  0013c	74 0c		 je	 SHORT $LN26@draw_3d_ex
  0013e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?specular_rendering_enabled@@3HA ; specular_rendering_enabled
  00143	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_specular@@3HA, eax ; current_object_3d_specular
  00148	eb 0a		 jmp	 SHORT $LN27@draw_3d_ex
$LN26@draw_3d_ex:

; 1192 : 		else																{ current_object_3d_specular = FALSE; }

  0014a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_specular@@3HA, 0 ; current_object_3d_specular
$LN27@draw_3d_ex:

; 1193 : 
; 1194 : 		//
; 1195 : 		// Do deferred state changes
; 1196 : 		//
; 1197 : 
; 1198 : 		reset_deferred_state_changes ();

  00154	e8 00 00 00 00	 call	 ?reset_deferred_state_changes@@YGXXZ ; reset_deferred_state_changes

; 1199 : 
; 1200 : 		set_deferred_d3d_int_state ( D3DRENDERSTATE_SPECULARENABLE, current_object_3d_specular );

  00159	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_specular@@3HA ; current_object_3d_specular
  0015e	50		 push	 eax
  0015f	6a 1d		 push	 29			; 0000001dH
  00161	e8 00 00 00 00	 call	 ?set_deferred_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_deferred_d3d_int_state

; 1201 : 
; 1202 : 		if ( current_object_3d_surface->textured )

  00166	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0016b	66 8b 08	 mov	 cx, WORD PTR [eax]
  0016e	66 c1 e9 03	 shr	 cx, 3
  00172	66 83 e1 01	 and	 cx, 1
  00176	0f b7 d1	 movzx	 edx, cx
  00179	85 d2		 test	 edx, edx
  0017b	0f 84 f2 05 00
	00		 je	 $LN28@draw_3d_ex

; 1203 : 		{
; 1204 : 			if ( current_object_3d_surface->texture_wrapped_u )	{ current_object_3d_texture_u_address = D3DTADDRESS_WRAP; }

  00181	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00186	66 8b 08	 mov	 cx, WORD PTR [eax]
  00189	66 c1 e9 0c	 shr	 cx, 12			; 0000000cH
  0018d	66 83 e1 01	 and	 cx, 1
  00191	0f b7 d1	 movzx	 edx, cx
  00194	85 d2		 test	 edx, edx
  00196	74 0c		 je	 SHORT $LN30@draw_3d_ex
  00198	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?current_object_3d_texture_u_address@@3HA, 1 ; current_object_3d_texture_u_address
  001a2	eb 0a		 jmp	 SHORT $LN31@draw_3d_ex
$LN30@draw_3d_ex:

; 1205 : 			else																	{ current_object_3d_texture_u_address = D3DTADDRESS_CLAMP; }

  001a4	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?current_object_3d_texture_u_address@@3HA, 3 ; current_object_3d_texture_u_address
$LN31@draw_3d_ex:

; 1206 : 
; 1207 : 			if ( current_object_3d_surface->texture_wrapped_v )	{ current_object_3d_texture_v_address = D3DTADDRESS_WRAP; }

  001ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  001b3	66 8b 08	 mov	 cx, WORD PTR [eax]
  001b6	66 c1 e9 0d	 shr	 cx, 13			; 0000000dH
  001ba	66 83 e1 01	 and	 cx, 1
  001be	0f b7 d1	 movzx	 edx, cx
  001c1	85 d2		 test	 edx, edx
  001c3	74 0c		 je	 SHORT $LN32@draw_3d_ex
  001c5	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?current_object_3d_texture_v_address@@3HA, 1 ; current_object_3d_texture_v_address
  001cf	eb 0a		 jmp	 SHORT $LN33@draw_3d_ex
$LN32@draw_3d_ex:

; 1208 : 			else																	{ current_object_3d_texture_v_address = D3DTADDRESS_CLAMP; }

  001d1	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?current_object_3d_texture_v_address@@3HA, 3 ; current_object_3d_texture_v_address
$LN33@draw_3d_ex:

; 1209 : 
; 1210 : 			if ( current_object_3d_surface->texture_filtered )		{ current_object_3d_texture_filter = D3DTFG_LINEAR; }

  001db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  001e0	66 8b 08	 mov	 cx, WORD PTR [eax]
  001e3	66 c1 e9 0a	 shr	 cx, 10			; 0000000aH
  001e7	66 83 e1 01	 and	 cx, 1
  001eb	0f b7 d1	 movzx	 edx, cx
  001ee	85 d2		 test	 edx, edx
  001f0	74 0c		 je	 SHORT $LN34@draw_3d_ex
  001f2	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?current_object_3d_texture_filter@@3HA, 2 ; current_object_3d_texture_filter
  001fc	eb 0a		 jmp	 SHORT $LN35@draw_3d_ex
$LN34@draw_3d_ex:

; 1211 : 			else																	{ current_object_3d_texture_filter = D3DTFG_POINT; }

  001fe	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?current_object_3d_texture_filter@@3HA, 1 ; current_object_3d_texture_filter
$LN35@draw_3d_ex:

; 1212 : 
; 1213 : 			if ( current_object_3d_surface->texture_mipmapped )	{ current_object_3d_texture_mipmap = D3DTFN_LINEAR; }

  00208	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0020d	66 8b 08	 mov	 cx, WORD PTR [eax]
  00210	66 c1 e9 0b	 shr	 cx, 11			; 0000000bH
  00214	66 83 e1 01	 and	 cx, 1
  00218	0f b7 d1	 movzx	 edx, cx
  0021b	85 d2		 test	 edx, edx
  0021d	74 0c		 je	 SHORT $LN36@draw_3d_ex
  0021f	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?current_object_3d_texture_mipmap@@3HA, 2 ; current_object_3d_texture_mipmap
  00229	eb 0a		 jmp	 SHORT $LN37@draw_3d_ex
$LN36@draw_3d_ex:

; 1214 : 			else																	{ current_object_3d_texture_mipmap = D3DTFN_POINT; }

  0022b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?current_object_3d_texture_mipmap@@3HA, 1 ; current_object_3d_texture_mipmap
$LN37@draw_3d_ex:

; 1215 : 
; 1216 : 			if ( current_object_3d_surface->texture_animation )

  00235	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0023a	66 8b 08	 mov	 cx, WORD PTR [eax]
  0023d	66 c1 e9 09	 shr	 cx, 9
  00241	66 83 e1 01	 and	 cx, 1
  00245	0f b7 d1	 movzx	 edx, cx
  00248	85 d2		 test	 edx, edx
  0024a	74 42		 je	 SHORT $LN38@draw_3d_ex

; 1217 : 			{
; 1218 : 				int
; 1219 : 					frame;
; 1220 : 
; 1221 : 				frame = texture_animations[current_object_3d_surface->texture_index].current_frame;

  0024c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00251	0f b7 48 04	 movzx	 ecx, WORD PTR [eax+4]
  00255	6b d1 0c	 imul	 edx, ecx, 12
  00258	a1 00 00 00 00	 mov	 eax, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  0025d	8b 4c 10 04	 mov	 ecx, DWORD PTR [eax+edx+4]
  00261	89 4d f0	 mov	 DWORD PTR _frame$2[ebp], ecx

; 1222 : 				current_object_3d_texture = system_textures[ texture_animations[current_object_3d_surface->texture_index].texture_indices[frame] ];

  00264	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00269	0f b7 48 04	 movzx	 ecx, WORD PTR [eax+4]
  0026d	6b d1 0c	 imul	 edx, ecx, 12
  00270	a1 00 00 00 00	 mov	 eax, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  00275	8b 4c 10 08	 mov	 ecx, DWORD PTR [eax+edx+8]
  00279	8b 55 f0	 mov	 edx, DWORD PTR _frame$2[ebp]
  0027c	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  0027f	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  00286	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_texture@@3PAUSCREEN@@A, ecx ; current_object_3d_texture

; 1223 : 			}
; 1224 : 			else

  0028c	eb 16		 jmp	 SHORT $LN39@draw_3d_ex
$LN38@draw_3d_ex:

; 1225 : 			{
; 1226 : 				current_object_3d_texture = system_textures[current_object_3d_surface->texture_index];

  0028e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00293	0f b7 48 04	 movzx	 ecx, WORD PTR [eax+4]
  00297	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[ecx*4]
  0029e	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_texture@@3PAUSCREEN@@A, edx ; current_object_3d_texture
$LN39@draw_3d_ex:

; 1227 : 			}
; 1228 : 
; 1229 : 			set_deferred_d3d_texture ( 0, current_object_3d_texture );

  002a4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_texture@@3PAUSCREEN@@A ; current_object_3d_texture
  002a9	50		 push	 eax
  002aa	6a 00		 push	 0
  002ac	e8 00 00 00 00	 call	 ?set_deferred_d3d_texture@@YGXHPAUSCREEN@@@Z ; set_deferred_d3d_texture

; 1230 : 			set_deferred_d3d_texture_stage_state ( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );

  002b1	6a 04		 push	 4
  002b3	6a 01		 push	 1
  002b5	6a 00		 push	 0
  002b7	e8 00 00 00 00	 call	 ?set_deferred_d3d_texture_stage_state@@YGXHHH@Z ; set_deferred_d3d_texture_stage_state

; 1231 : 			set_deferred_d3d_texture_stage_state ( 0, D3DTSS_ADDRESSU, current_object_3d_texture_u_address );

  002bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_texture_u_address@@3HA ; current_object_3d_texture_u_address
  002c1	50		 push	 eax
  002c2	6a 0d		 push	 13			; 0000000dH
  002c4	6a 00		 push	 0
  002c6	e8 00 00 00 00	 call	 ?set_deferred_d3d_texture_stage_state@@YGXHHH@Z ; set_deferred_d3d_texture_stage_state

; 1232 : 			set_deferred_d3d_texture_stage_state ( 0, D3DTSS_ADDRESSV, current_object_3d_texture_v_address );

  002cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_texture_v_address@@3HA ; current_object_3d_texture_v_address
  002d0	50		 push	 eax
  002d1	6a 0e		 push	 14			; 0000000eH
  002d3	6a 00		 push	 0
  002d5	e8 00 00 00 00	 call	 ?set_deferred_d3d_texture_stage_state@@YGXHHH@Z ; set_deferred_d3d_texture_stage_state

; 1233 : 			set_deferred_d3d_texture_stage_state ( 0, D3DTSS_MAGFILTER, current_object_3d_texture_filter );

  002da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_texture_filter@@3HA ; current_object_3d_texture_filter
  002df	50		 push	 eax
  002e0	6a 10		 push	 16			; 00000010H
  002e2	6a 00		 push	 0
  002e4	e8 00 00 00 00	 call	 ?set_deferred_d3d_texture_stage_state@@YGXHHH@Z ; set_deferred_d3d_texture_stage_state

; 1234 : 			set_deferred_d3d_texture_stage_state ( 0, D3DTSS_MINFILTER, current_object_3d_texture_mipmap );

  002e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_texture_mipmap@@3HA ; current_object_3d_texture_mipmap
  002ee	50		 push	 eax
  002ef	6a 11		 push	 17			; 00000011H
  002f1	6a 00		 push	 0
  002f3	e8 00 00 00 00	 call	 ?set_deferred_d3d_texture_stage_state@@YGXHHH@Z ; set_deferred_d3d_texture_stage_state

; 1235 : 
; 1236 : 			if ( current_object_3d_surface->has_luminosity_texture )

  002f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  002fd	66 8b 08	 mov	 cx, WORD PTR [eax]
  00300	66 c1 e9 04	 shr	 cx, 4
  00304	66 83 e1 01	 and	 cx, 1
  00308	0f b7 d1	 movzx	 edx, cx
  0030b	85 d2		 test	 edx, edx
  0030d	0f 84 ae 02 00
	00		 je	 $LN40@draw_3d_ex

; 1237 : 			{
; 1238 : 				if ( current_object_3d_surface->luminosity_texture_animation )

  00313	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00318	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  0031b	80 e1 01	 and	 cl, 1
  0031e	0f b6 d1	 movzx	 edx, cl
  00321	85 d2		 test	 edx, edx
  00323	74 42		 je	 SHORT $LN42@draw_3d_ex

; 1239 : 				{
; 1240 : 					int
; 1241 : 						frame;
; 1242 : 
; 1243 : 					frame = texture_animations[current_object_3d_surface->luminosity_texture_index].current_frame;

  00325	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0032a	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0032e	6b d1 0c	 imul	 edx, ecx, 12
  00331	a1 00 00 00 00	 mov	 eax, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  00336	8b 4c 10 04	 mov	 ecx, DWORD PTR [eax+edx+4]
  0033a	89 4d ec	 mov	 DWORD PTR _frame$1[ebp], ecx

; 1244 : 					current_object_3d_luminosity_texture = system_textures[ texture_animations[current_object_3d_surface->luminosity_texture_index].texture_indices[frame] ];

  0033d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00342	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00346	6b d1 0c	 imul	 edx, ecx, 12
  00349	a1 00 00 00 00	 mov	 eax, DWORD PTR ?texture_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; texture_animations
  0034e	8b 4c 10 08	 mov	 ecx, DWORD PTR [eax+edx+8]
  00352	8b 55 ec	 mov	 edx, DWORD PTR _frame$1[ebp]
  00355	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00358	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[eax*4]
  0035f	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_luminosity_texture@@3PAUSCREEN@@A, ecx ; current_object_3d_luminosity_texture

; 1245 : 				}
; 1246 : 				else

  00365	eb 16		 jmp	 SHORT $LN43@draw_3d_ex
$LN42@draw_3d_ex:

; 1247 : 				{
; 1248 : 					current_object_3d_luminosity_texture = system_textures[current_object_3d_surface->luminosity_texture_index];

  00367	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0036c	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00370	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?system_textures@@3PAPAUSCREEN@@A[ecx*4]
  00377	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_luminosity_texture@@3PAUSCREEN@@A, edx ; current_object_3d_luminosity_texture
$LN43@draw_3d_ex:

; 1249 : 				}
; 1250 : 
; 1251 : 				if ( current_object_3d_surface->luminosity_texture_wrapped_u )	{ current_object_3d_luminosity_texture_u_address = D3DTADDRESS_WRAP; }

  0037d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00382	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00385	c0 e9 03	 shr	 cl, 3
  00388	80 e1 01	 and	 cl, 1
  0038b	0f b6 d1	 movzx	 edx, cl
  0038e	85 d2		 test	 edx, edx
  00390	74 0c		 je	 SHORT $LN44@draw_3d_ex
  00392	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?current_object_3d_luminosity_texture_u_address@@3HA, 1 ; current_object_3d_luminosity_texture_u_address
  0039c	eb 0a		 jmp	 SHORT $LN45@draw_3d_ex
$LN44@draw_3d_ex:

; 1252 : 				else																				{ current_object_3d_luminosity_texture_u_address = D3DTADDRESS_CLAMP; }

  0039e	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?current_object_3d_luminosity_texture_u_address@@3HA, 3 ; current_object_3d_luminosity_texture_u_address
$LN45@draw_3d_ex:

; 1253 : 
; 1254 : 				if ( current_object_3d_surface->luminosity_texture_wrapped_v )	{ current_object_3d_luminosity_texture_v_address = D3DTADDRESS_WRAP; }

  003a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  003ad	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  003b0	c0 e9 04	 shr	 cl, 4
  003b3	80 e1 01	 and	 cl, 1
  003b6	0f b6 d1	 movzx	 edx, cl
  003b9	85 d2		 test	 edx, edx
  003bb	74 0c		 je	 SHORT $LN46@draw_3d_ex
  003bd	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?current_object_3d_luminosity_texture_v_address@@3HA, 1 ; current_object_3d_luminosity_texture_v_address
  003c7	eb 0a		 jmp	 SHORT $LN47@draw_3d_ex
$LN46@draw_3d_ex:

; 1255 : 				else																				{ current_object_3d_luminosity_texture_v_address = D3DTADDRESS_CLAMP; }

  003c9	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?current_object_3d_luminosity_texture_v_address@@3HA, 3 ; current_object_3d_luminosity_texture_v_address
$LN47@draw_3d_ex:

; 1256 : 
; 1257 : 				if ( current_object_3d_surface->luminosity_texture_filtered )	{ current_object_3d_luminosity_texture_filter = D3DTFG_LINEAR; }

  003d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  003d8	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  003db	d0 e9		 shr	 cl, 1
  003dd	80 e1 01	 and	 cl, 1
  003e0	0f b6 d1	 movzx	 edx, cl
  003e3	85 d2		 test	 edx, edx
  003e5	74 0c		 je	 SHORT $LN48@draw_3d_ex
  003e7	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?current_object_3d_luminosity_texture_filter@@3HA, 2 ; current_object_3d_luminosity_texture_filter
  003f1	eb 0a		 jmp	 SHORT $LN49@draw_3d_ex
$LN48@draw_3d_ex:

; 1258 : 				else																				{ current_object_3d_luminosity_texture_filter = D3DTFG_POINT; }

  003f3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?current_object_3d_luminosity_texture_filter@@3HA, 1 ; current_object_3d_luminosity_texture_filter
$LN49@draw_3d_ex:

; 1259 : 
; 1260 : 				if ( current_object_3d_surface->luminosity_texture_mipmapped )	{ current_object_3d_luminosity_texture_mipmap = D3DTFN_LINEAR; }

  003fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00402	8a 48 02	 mov	 cl, BYTE PTR [eax+2]
  00405	c0 e9 02	 shr	 cl, 2
  00408	80 e1 01	 and	 cl, 1
  0040b	0f b6 d1	 movzx	 edx, cl
  0040e	85 d2		 test	 edx, edx
  00410	74 0c		 je	 SHORT $LN50@draw_3d_ex
  00412	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?current_object_3d_luminosity_texture_mipmap@@3HA, 2 ; current_object_3d_luminosity_texture_mipmap
  0041c	eb 0a		 jmp	 SHORT $LN51@draw_3d_ex
$LN50@draw_3d_ex:

; 1261 : 				else																				{ current_object_3d_luminosity_texture_mipmap = D3DTFN_POINT; }

  0041e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?current_object_3d_luminosity_texture_mipmap@@3HA, 1 ; current_object_3d_luminosity_texture_mipmap
$LN51@draw_3d_ex:

; 1262 : 
; 1263 : 				if ( current_object_3d_surface->smoothed )

  00428	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0042d	66 8b 08	 mov	 cx, WORD PTR [eax]
  00430	66 c1 e9 02	 shr	 cx, 2
  00434	66 83 e1 01	 and	 cx, 1
  00438	0f b7 d1	 movzx	 edx, cx
  0043b	85 d2		 test	 edx, edx
  0043d	0f 84 8e 00 00
	00		 je	 $LN52@draw_3d_ex

; 1264 : 				{
; 1265 : 					set_deferred_d3d_int_state ( D3DRENDERSTATE_SHADEMODE, D3DSHADE_GOURAUD );

  00443	6a 02		 push	 2
  00445	6a 09		 push	 9
  00447	e8 00 00 00 00	 call	 ?set_deferred_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_deferred_d3d_int_state

; 1266 : 					for ( faces_left = current_object_3d_surface->number_of_faces; faces_left > 0; faces_left-- )

  0044c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00451	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00455	89 4d f8	 mov	 DWORD PTR _faces_left$[ebp], ecx
  00458	eb 09		 jmp	 SHORT $LN7@draw_3d_ex
$LN5@draw_3d_ex:
  0045a	8b 45 f8	 mov	 eax, DWORD PTR _faces_left$[ebp]
  0045d	83 e8 01	 sub	 eax, 1
  00460	89 45 f8	 mov	 DWORD PTR _faces_left$[ebp], eax
$LN7@draw_3d_ex:
  00463	83 7d f8 00	 cmp	 DWORD PTR _faces_left$[ebp], 0
  00467	7e 63		 jle	 SHORT $LN6@draw_3d_ex

; 1267 : 					{
; 1268 : 						if ( !outcode_3d_object_surface_polygon ( current_object_3d_faces->number_of_points, this_object_3d_info->points_base, &current_object_3d_outcode ) )

  00469	68 00 00 00 00	 push	 OFFSET ?current_object_3d_outcode@@3HA ; current_object_3d_outcode
  0046e	8b 45 14	 mov	 eax, DWORD PTR _this_object_3d_info$[ebp]
  00471	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00474	51		 push	 ecx
  00475	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  0047b	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0047e	50		 push	 eax
  0047f	e8 00 00 00 00	 call	 ?outcode_3d_object_surface_polygon@@YGHHHPAH@Z ; outcode_3d_object_surface_polygon
  00484	85 c0		 test	 eax, eax
  00486	75 21		 jne	 SHORT $LN56@draw_3d_ex

; 1269 : 						{
; 1270 : 							if ( current_object_3d_outcode == 0 )

  00488	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_object_3d_outcode@@3HA, 0 ; current_object_3d_outcode
  0048f	75 0d		 jne	 SHORT $LN55@draw_3d_ex

; 1271 : 							{
; 1272 : 								wrender_unclipped_3d_object_gouraud_textured_lightmap_polygon ( current_object_3d_faces );

  00491	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  00496	50		 push	 eax
  00497	e8 00 00 00 00	 call	 ?wrender_unclipped_3d_object_gouraud_textured_lightmap_polygon@@YGXPAUOBJECT_3D_FACE@@@Z ; wrender_unclipped_3d_object_gouraud_textured_lightmap_polygon

; 1273 : 							}
; 1274 : 							else

  0049c	eb 0b		 jmp	 SHORT $LN56@draw_3d_ex
$LN55@draw_3d_ex:

; 1275 : 							{
; 1276 : 								wrender_clipped_3d_object_gouraud_textured_lightmap_polygon ( current_object_3d_faces );

  0049e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  004a3	50		 push	 eax
  004a4	e8 00 00 00 00	 call	 ?wrender_clipped_3d_object_gouraud_textured_lightmap_polygon@@YGXPAUOBJECT_3D_FACE@@@Z ; wrender_clipped_3d_object_gouraud_textured_lightmap_polygon
$LN56@draw_3d_ex:

; 1277 : 							}
; 1278 : 						}
; 1279 : 						current_object_3d_point_list += current_object_3d_faces->number_of_points;

  004a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  004ae	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  004b1	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  004b7	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, ecx ; current_object_3d_point_list

; 1280 : 						current_object_3d_faces++;

  004bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  004c2	83 c0 01	 add	 eax, 1
  004c5	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A, eax ; current_object_3d_faces

; 1281 : 					}

  004ca	eb 8e		 jmp	 SHORT $LN5@draw_3d_ex
$LN6@draw_3d_ex:

; 1282 : 				}
; 1283 : 				else

  004cc	e9 eb 00 00 00	 jmp	 $LN9@draw_3d_ex
$LN52@draw_3d_ex:

; 1284 : 				{
; 1285 : 					set_deferred_d3d_int_state ( D3DRENDERSTATE_SHADEMODE, D3DSHADE_FLAT );

  004d1	6a 01		 push	 1
  004d3	6a 09		 push	 9
  004d5	e8 00 00 00 00	 call	 ?set_deferred_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_deferred_d3d_int_state

; 1286 : 					for ( faces_left = current_object_3d_surface->number_of_faces; faces_left > 0; faces_left-- )

  004da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  004df	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  004e3	89 4d f8	 mov	 DWORD PTR _faces_left$[ebp], ecx
  004e6	eb 09		 jmp	 SHORT $LN10@draw_3d_ex
$LN8@draw_3d_ex:
  004e8	8b 45 f8	 mov	 eax, DWORD PTR _faces_left$[ebp]
  004eb	83 e8 01	 sub	 eax, 1
  004ee	89 45 f8	 mov	 DWORD PTR _faces_left$[ebp], eax
$LN10@draw_3d_ex:
  004f1	83 7d f8 00	 cmp	 DWORD PTR _faces_left$[ebp], 0
  004f5	0f 8e c1 00 00
	00		 jle	 $LN9@draw_3d_ex

; 1287 : 					{
; 1288 : 						if ( current_object_3d_surface->polygons )

  004fb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00500	66 8b 08	 mov	 cx, WORD PTR [eax]
  00503	66 83 e1 01	 and	 cx, 1
  00507	0f b7 d1	 movzx	 edx, cx
  0050a	85 d2		 test	 edx, edx
  0050c	74 70		 je	 SHORT $LN57@draw_3d_ex

; 1289 : 						{
; 1290 : 							if ( !outcode_3d_object_surface_polygon ( current_object_3d_faces->number_of_points, this_object_3d_info->points_base, &current_object_3d_outcode ) )

  0050e	68 00 00 00 00	 push	 OFFSET ?current_object_3d_outcode@@3HA ; current_object_3d_outcode
  00513	8b 45 14	 mov	 eax, DWORD PTR _this_object_3d_info$[ebp]
  00516	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00519	51		 push	 ecx
  0051a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  00520	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00523	50		 push	 eax
  00524	e8 00 00 00 00	 call	 ?outcode_3d_object_surface_polygon@@YGHHHPAH@Z ; outcode_3d_object_surface_polygon
  00529	85 c0		 test	 eax, eax
  0052b	75 21		 jne	 SHORT $LN61@draw_3d_ex

; 1291 : 							{
; 1292 : 								if ( current_object_3d_outcode == 0 )

  0052d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_object_3d_outcode@@3HA, 0 ; current_object_3d_outcode
  00534	75 0d		 jne	 SHORT $LN60@draw_3d_ex

; 1293 : 								{
; 1294 : 									wrender_unclipped_3d_object_textured_lightmap_polygon ( current_object_3d_faces );

  00536	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  0053b	50		 push	 eax
  0053c	e8 00 00 00 00	 call	 ?wrender_unclipped_3d_object_textured_lightmap_polygon@@YGXPAUOBJECT_3D_FACE@@@Z ; wrender_unclipped_3d_object_textured_lightmap_polygon

; 1295 : 								}
; 1296 : 								else

  00541	eb 0b		 jmp	 SHORT $LN61@draw_3d_ex
$LN60@draw_3d_ex:

; 1297 : 								{
; 1298 : 									wrender_clipped_3d_object_textured_lightmap_polygon ( current_object_3d_faces );

  00543	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  00548	50		 push	 eax
  00549	e8 00 00 00 00	 call	 ?wrender_clipped_3d_object_textured_lightmap_polygon@@YGXPAUOBJECT_3D_FACE@@@Z ; wrender_clipped_3d_object_textured_lightmap_polygon
$LN61@draw_3d_ex:

; 1299 : 								}
; 1300 : 							}
; 1301 : 
; 1302 : 							current_object_3d_face_normal_list++;

  0054e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_face_normal_list
  00553	83 c0 02	 add	 eax, 2
  00556	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, eax ; current_object_3d_face_normal_list

; 1303 : 							current_object_3d_point_list += current_object_3d_faces->number_of_points;

  0055b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  00560	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00563	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  00569	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, ecx ; current_object_3d_point_list

; 1304 : 							current_object_3d_faces++;

  0056f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  00574	83 c0 01	 add	 eax, 1
  00577	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A, eax ; current_object_3d_faces

; 1305 : 						}
; 1306 : 						else

  0057c	eb 39		 jmp	 SHORT $LN58@draw_3d_ex
$LN57@draw_3d_ex:

; 1307 : 						{
; 1308 : 							if ( !outcode_3d_object_surface_polygon ( 2, this_object_3d_info->points_base, &current_object_3d_outcode ) )

  0057e	68 00 00 00 00	 push	 OFFSET ?current_object_3d_outcode@@3HA ; current_object_3d_outcode
  00583	8b 45 14	 mov	 eax, DWORD PTR _this_object_3d_info$[ebp]
  00586	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00589	51		 push	 ecx
  0058a	6a 02		 push	 2
  0058c	e8 00 00 00 00	 call	 ?outcode_3d_object_surface_polygon@@YGHHHPAH@Z ; outcode_3d_object_surface_polygon
  00591	85 c0		 test	 eax, eax
  00593	75 15		 jne	 SHORT $LN64@draw_3d_ex

; 1309 : 							{
; 1310 : 								if ( current_object_3d_outcode == 0 )

  00595	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_object_3d_outcode@@3HA, 0 ; current_object_3d_outcode
  0059c	75 07		 jne	 SHORT $LN63@draw_3d_ex

; 1311 : 								{
; 1312 : 									wrender_unclipped_3d_object_textured_line ();

  0059e	e8 00 00 00 00	 call	 ?wrender_unclipped_3d_object_textured_line@@YGXXZ ; wrender_unclipped_3d_object_textured_line

; 1313 : 								}
; 1314 : 								else

  005a3	eb 05		 jmp	 SHORT $LN64@draw_3d_ex
$LN63@draw_3d_ex:

; 1315 : 								{
; 1316 : 									wrender_clipped_3d_object_textured_line ();

  005a5	e8 00 00 00 00	 call	 ?wrender_clipped_3d_object_textured_line@@YGXXZ ; wrender_clipped_3d_object_textured_line
$LN64@draw_3d_ex:

; 1317 : 								}
; 1318 : 							}
; 1319 : 							current_object_3d_point_list += 2;

  005aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  005af	83 c0 02	 add	 eax, 2
  005b2	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, eax ; current_object_3d_point_list
$LN58@draw_3d_ex:

; 1320 : 						}
; 1321 : 					}

  005b7	e9 2c ff ff ff	 jmp	 $LN8@draw_3d_ex
$LN9@draw_3d_ex:

; 1322 : 				}
; 1323 : 			}
; 1324 : 			else

  005bc	e9 ad 01 00 00	 jmp	 $LN15@draw_3d_ex
$LN40@draw_3d_ex:

; 1325 : 			{
; 1326 : 				if ( current_object_3d_surface->smoothed )

  005c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  005c6	66 8b 08	 mov	 cx, WORD PTR [eax]
  005c9	66 c1 e9 02	 shr	 cx, 2
  005cd	66 83 e1 01	 and	 cx, 1
  005d1	0f b7 d1	 movzx	 edx, cx
  005d4	85 d2		 test	 edx, edx
  005d6	0f 84 a7 00 00
	00		 je	 $LN65@draw_3d_ex

; 1327 : 				{
; 1328 : 					set_deferred_d3d_int_state ( D3DRENDERSTATE_SHADEMODE, D3DSHADE_GOURAUD );

  005dc	6a 02		 push	 2
  005de	6a 09		 push	 9
  005e0	e8 00 00 00 00	 call	 ?set_deferred_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_deferred_d3d_int_state

; 1329 : 					for ( faces_left = current_object_3d_surface->number_of_faces; faces_left > 0; faces_left-- )

  005e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  005ea	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  005ee	89 4d f8	 mov	 DWORD PTR _faces_left$[ebp], ecx
  005f1	eb 09		 jmp	 SHORT $LN13@draw_3d_ex
$LN11@draw_3d_ex:
  005f3	8b 45 f8	 mov	 eax, DWORD PTR _faces_left$[ebp]
  005f6	83 e8 01	 sub	 eax, 1
  005f9	89 45 f8	 mov	 DWORD PTR _faces_left$[ebp], eax
$LN13@draw_3d_ex:
  005fc	83 7d f8 00	 cmp	 DWORD PTR _faces_left$[ebp], 0
  00600	7e 7c		 jle	 SHORT $LN12@draw_3d_ex

; 1330 : 					{
; 1331 : 						if ( !outcode_3d_object_surface_polygon ( current_object_3d_faces->number_of_points, this_object_3d_info->points_base, &current_object_3d_outcode ) )

  00602	68 00 00 00 00	 push	 OFFSET ?current_object_3d_outcode@@3HA ; current_object_3d_outcode
  00607	8b 45 14	 mov	 eax, DWORD PTR _this_object_3d_info$[ebp]
  0060a	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0060d	51		 push	 ecx
  0060e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  00614	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00617	50		 push	 eax
  00618	e8 00 00 00 00	 call	 ?outcode_3d_object_surface_polygon@@YGHHHPAH@Z ; outcode_3d_object_surface_polygon
  0061d	85 c0		 test	 eax, eax
  0061f	75 37		 jne	 SHORT $LN69@draw_3d_ex

; 1332 : 						{
; 1333 : 							if ( current_object_3d_outcode == 0 )

  00621	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_object_3d_outcode@@3HA, 0 ; current_object_3d_outcode
  00628	75 23		 jne	 SHORT $LN68@draw_3d_ex

; 1334 : 							{
; 1335 : 								if ( current_object_3d_specular )

  0062a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_object_3d_specular@@3HA, 0 ; current_object_3d_specular
  00631	74 0d		 je	 SHORT $LN70@draw_3d_ex

; 1336 : 								{
; 1337 : 									wrender_unclipped_3d_object_gouraud_textured_polygon ( current_object_3d_faces );

  00633	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  00638	50		 push	 eax
  00639	e8 00 00 00 00	 call	 ?wrender_unclipped_3d_object_gouraud_textured_polygon@@YGXPAUOBJECT_3D_FACE@@@Z ; wrender_unclipped_3d_object_gouraud_textured_polygon

; 1338 : 								}
; 1339 : 								else

  0063e	eb 0b		 jmp	 SHORT $LN71@draw_3d_ex
$LN70@draw_3d_ex:

; 1340 : 								{
; 1341 : 									wrender_unclipped_3d_object_gouraud_textured_nospecular_polygon ( current_object_3d_faces );

  00640	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  00645	50		 push	 eax
  00646	e8 00 00 00 00	 call	 ?wrender_unclipped_3d_object_gouraud_textured_nospecular_polygon@@YGXPAUOBJECT_3D_FACE@@@Z ; wrender_unclipped_3d_object_gouraud_textured_nospecular_polygon
$LN71@draw_3d_ex:

; 1342 : 								}
; 1343 : 							}
; 1344 : 							else

  0064b	eb 0b		 jmp	 SHORT $LN69@draw_3d_ex
$LN68@draw_3d_ex:

; 1345 : 							{
; 1346 : 								wrender_clipped_3d_object_gouraud_textured_polygon ( current_object_3d_faces );

  0064d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  00652	50		 push	 eax
  00653	e8 00 00 00 00	 call	 ?wrender_clipped_3d_object_gouraud_textured_polygon@@YGXPAUOBJECT_3D_FACE@@@Z ; wrender_clipped_3d_object_gouraud_textured_polygon
$LN69@draw_3d_ex:

; 1347 : 							}
; 1348 : 						}
; 1349 : 						current_object_3d_point_list += current_object_3d_faces->number_of_points;

  00658	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  0065d	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00660	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  00666	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, ecx ; current_object_3d_point_list

; 1350 : 						current_object_3d_faces++;

  0066c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  00671	83 c0 01	 add	 eax, 1
  00674	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A, eax ; current_object_3d_faces

; 1351 : 					}

  00679	e9 75 ff ff ff	 jmp	 $LN11@draw_3d_ex
$LN12@draw_3d_ex:

; 1352 : 				}
; 1353 : 				else

  0067e	e9 eb 00 00 00	 jmp	 $LN15@draw_3d_ex
$LN65@draw_3d_ex:

; 1354 : 				{
; 1355 : 					set_deferred_d3d_int_state ( D3DRENDERSTATE_SHADEMODE, D3DSHADE_FLAT );

  00683	6a 01		 push	 1
  00685	6a 09		 push	 9
  00687	e8 00 00 00 00	 call	 ?set_deferred_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_deferred_d3d_int_state

; 1356 : 					for ( faces_left = current_object_3d_surface->number_of_faces; faces_left > 0; faces_left-- )

  0068c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00691	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00695	89 4d f8	 mov	 DWORD PTR _faces_left$[ebp], ecx
  00698	eb 09		 jmp	 SHORT $LN16@draw_3d_ex
$LN14@draw_3d_ex:
  0069a	8b 45 f8	 mov	 eax, DWORD PTR _faces_left$[ebp]
  0069d	83 e8 01	 sub	 eax, 1
  006a0	89 45 f8	 mov	 DWORD PTR _faces_left$[ebp], eax
$LN16@draw_3d_ex:
  006a3	83 7d f8 00	 cmp	 DWORD PTR _faces_left$[ebp], 0
  006a7	0f 8e c1 00 00
	00		 jle	 $LN15@draw_3d_ex

; 1357 : 					{
; 1358 : 						if ( current_object_3d_surface->polygons )

  006ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  006b2	66 8b 08	 mov	 cx, WORD PTR [eax]
  006b5	66 83 e1 01	 and	 cx, 1
  006b9	0f b7 d1	 movzx	 edx, cx
  006bc	85 d2		 test	 edx, edx
  006be	74 70		 je	 SHORT $LN72@draw_3d_ex

; 1359 : 						{
; 1360 : 							if ( !outcode_3d_object_surface_polygon ( current_object_3d_faces->number_of_points, this_object_3d_info->points_base, &current_object_3d_outcode ) )

  006c0	68 00 00 00 00	 push	 OFFSET ?current_object_3d_outcode@@3HA ; current_object_3d_outcode
  006c5	8b 45 14	 mov	 eax, DWORD PTR _this_object_3d_info$[ebp]
  006c8	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  006cb	51		 push	 ecx
  006cc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  006d2	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  006d5	50		 push	 eax
  006d6	e8 00 00 00 00	 call	 ?outcode_3d_object_surface_polygon@@YGHHHPAH@Z ; outcode_3d_object_surface_polygon
  006db	85 c0		 test	 eax, eax
  006dd	75 21		 jne	 SHORT $LN76@draw_3d_ex

; 1361 : 							{
; 1362 : 								if ( current_object_3d_outcode == 0 )

  006df	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_object_3d_outcode@@3HA, 0 ; current_object_3d_outcode
  006e6	75 0d		 jne	 SHORT $LN75@draw_3d_ex

; 1363 : 								{
; 1364 : 									wrender_unclipped_3d_object_textured_polygon ( current_object_3d_faces );

  006e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  006ed	50		 push	 eax
  006ee	e8 00 00 00 00	 call	 ?wrender_unclipped_3d_object_textured_polygon@@YGXPAUOBJECT_3D_FACE@@@Z ; wrender_unclipped_3d_object_textured_polygon

; 1365 : 								}
; 1366 : 								else

  006f3	eb 0b		 jmp	 SHORT $LN76@draw_3d_ex
$LN75@draw_3d_ex:

; 1367 : 								{
; 1368 : 									wrender_clipped_3d_object_textured_polygon ( current_object_3d_faces );

  006f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  006fa	50		 push	 eax
  006fb	e8 00 00 00 00	 call	 ?wrender_clipped_3d_object_textured_polygon@@YGXPAUOBJECT_3D_FACE@@@Z ; wrender_clipped_3d_object_textured_polygon
$LN76@draw_3d_ex:

; 1369 : 								}
; 1370 : 							}
; 1371 : 							current_object_3d_face_normal_list++;

  00700	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_face_normal_list
  00705	83 c0 02	 add	 eax, 2
  00708	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, eax ; current_object_3d_face_normal_list

; 1372 : 							current_object_3d_point_list += current_object_3d_faces->number_of_points;

  0070d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  00712	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00715	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  0071b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, ecx ; current_object_3d_point_list

; 1373 : 							current_object_3d_faces++;

  00721	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  00726	83 c0 01	 add	 eax, 1
  00729	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A, eax ; current_object_3d_faces

; 1374 : 						}
; 1375 : 						else

  0072e	eb 39		 jmp	 SHORT $LN73@draw_3d_ex
$LN72@draw_3d_ex:

; 1376 : 						{
; 1377 : 							if ( !outcode_3d_object_surface_polygon ( 2, this_object_3d_info->points_base, &current_object_3d_outcode ) )

  00730	68 00 00 00 00	 push	 OFFSET ?current_object_3d_outcode@@3HA ; current_object_3d_outcode
  00735	8b 45 14	 mov	 eax, DWORD PTR _this_object_3d_info$[ebp]
  00738	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0073b	51		 push	 ecx
  0073c	6a 02		 push	 2
  0073e	e8 00 00 00 00	 call	 ?outcode_3d_object_surface_polygon@@YGHHHPAH@Z ; outcode_3d_object_surface_polygon
  00743	85 c0		 test	 eax, eax
  00745	75 15		 jne	 SHORT $LN79@draw_3d_ex

; 1378 : 							{
; 1379 : 								if ( current_object_3d_outcode == 0 )

  00747	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_object_3d_outcode@@3HA, 0 ; current_object_3d_outcode
  0074e	75 07		 jne	 SHORT $LN78@draw_3d_ex

; 1380 : 								{
; 1381 : 									wrender_unclipped_3d_object_textured_line ();

  00750	e8 00 00 00 00	 call	 ?wrender_unclipped_3d_object_textured_line@@YGXXZ ; wrender_unclipped_3d_object_textured_line

; 1382 : 								}
; 1383 : 								else

  00755	eb 05		 jmp	 SHORT $LN79@draw_3d_ex
$LN78@draw_3d_ex:

; 1384 : 								{
; 1385 : 									wrender_clipped_3d_object_textured_line ();

  00757	e8 00 00 00 00	 call	 ?wrender_clipped_3d_object_textured_line@@YGXXZ ; wrender_clipped_3d_object_textured_line
$LN79@draw_3d_ex:

; 1386 : 								}
; 1387 : 							}
; 1388 : 							current_object_3d_point_list += 2;

  0075c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  00761	83 c0 02	 add	 eax, 2
  00764	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, eax ; current_object_3d_point_list
$LN73@draw_3d_ex:

; 1389 : 						}
; 1390 : 					}

  00769	e9 2c ff ff ff	 jmp	 $LN14@draw_3d_ex
$LN15@draw_3d_ex:

; 1391 : 				}
; 1392 : 			}
; 1393 : 		}
; 1394 : 		else

  0076e	e9 a8 01 00 00	 jmp	 $LN21@draw_3d_ex
$LN28@draw_3d_ex:

; 1395 : 		{
; 1396 : 			set_deferred_d3d_texture_stage_state ( 0, D3DTSS_COLOROP, D3DTOP_DISABLE );

  00773	6a 01		 push	 1
  00775	6a 01		 push	 1
  00777	6a 00		 push	 0
  00779	e8 00 00 00 00	 call	 ?set_deferred_d3d_texture_stage_state@@YGXHHH@Z ; set_deferred_d3d_texture_stage_state

; 1397 : 			set_deferred_d3d_texture ( 0, NULL );

  0077e	6a 00		 push	 0
  00780	6a 00		 push	 0
  00782	e8 00 00 00 00	 call	 ?set_deferred_d3d_texture@@YGXHPAUSCREEN@@@Z ; set_deferred_d3d_texture

; 1398 : 			if ( current_object_3d_surface->smoothed )

  00787	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0078c	66 8b 08	 mov	 cx, WORD PTR [eax]
  0078f	66 c1 e9 02	 shr	 cx, 2
  00793	66 83 e1 01	 and	 cx, 1
  00797	0f b7 d1	 movzx	 edx, cx
  0079a	85 d2		 test	 edx, edx
  0079c	0f 84 8e 00 00
	00		 je	 $LN80@draw_3d_ex

; 1399 : 			{
; 1400 : 				set_deferred_d3d_int_state ( D3DRENDERSTATE_SHADEMODE, D3DSHADE_GOURAUD );

  007a2	6a 02		 push	 2
  007a4	6a 09		 push	 9
  007a6	e8 00 00 00 00	 call	 ?set_deferred_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_deferred_d3d_int_state

; 1401 : 				for ( faces_left = current_object_3d_surface->number_of_faces; faces_left > 0; faces_left-- )

  007ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  007b0	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  007b4	89 4d f8	 mov	 DWORD PTR _faces_left$[ebp], ecx
  007b7	eb 09		 jmp	 SHORT $LN19@draw_3d_ex
$LN17@draw_3d_ex:
  007b9	8b 45 f8	 mov	 eax, DWORD PTR _faces_left$[ebp]
  007bc	83 e8 01	 sub	 eax, 1
  007bf	89 45 f8	 mov	 DWORD PTR _faces_left$[ebp], eax
$LN19@draw_3d_ex:
  007c2	83 7d f8 00	 cmp	 DWORD PTR _faces_left$[ebp], 0
  007c6	7e 63		 jle	 SHORT $LN18@draw_3d_ex

; 1402 : 				{
; 1403 : 					if ( !outcode_3d_object_surface_polygon ( current_object_3d_faces->number_of_points, this_object_3d_info->points_base, &current_object_3d_outcode ) )

  007c8	68 00 00 00 00	 push	 OFFSET ?current_object_3d_outcode@@3HA ; current_object_3d_outcode
  007cd	8b 45 14	 mov	 eax, DWORD PTR _this_object_3d_info$[ebp]
  007d0	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  007d3	51		 push	 ecx
  007d4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  007da	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  007dd	50		 push	 eax
  007de	e8 00 00 00 00	 call	 ?outcode_3d_object_surface_polygon@@YGHHHPAH@Z ; outcode_3d_object_surface_polygon
  007e3	85 c0		 test	 eax, eax
  007e5	75 21		 jne	 SHORT $LN84@draw_3d_ex

; 1404 : 					{
; 1405 : 						if ( current_object_3d_outcode == 0 )

  007e7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_object_3d_outcode@@3HA, 0 ; current_object_3d_outcode
  007ee	75 0d		 jne	 SHORT $LN83@draw_3d_ex

; 1406 : 						{
; 1407 : 							wrender_unclipped_3d_object_gouraud_polygon ( current_object_3d_faces );

  007f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  007f5	50		 push	 eax
  007f6	e8 00 00 00 00	 call	 ?wrender_unclipped_3d_object_gouraud_polygon@@YGXPAUOBJECT_3D_FACE@@@Z ; wrender_unclipped_3d_object_gouraud_polygon

; 1408 : 						}
; 1409 : 						else

  007fb	eb 0b		 jmp	 SHORT $LN84@draw_3d_ex
$LN83@draw_3d_ex:

; 1410 : 						{
; 1411 : 							wrender_clipped_3d_object_gouraud_polygon ( current_object_3d_faces );

  007fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  00802	50		 push	 eax
  00803	e8 00 00 00 00	 call	 ?wrender_clipped_3d_object_gouraud_polygon@@YGXPAUOBJECT_3D_FACE@@@Z ; wrender_clipped_3d_object_gouraud_polygon
$LN84@draw_3d_ex:

; 1412 : 						}
; 1413 : 					}
; 1414 : 					current_object_3d_point_list += current_object_3d_faces->number_of_points;

  00808	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  0080d	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00810	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  00816	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, ecx ; current_object_3d_point_list

; 1415 : 					current_object_3d_faces++;

  0081c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  00821	83 c0 01	 add	 eax, 1
  00824	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A, eax ; current_object_3d_faces

; 1416 : 				}

  00829	eb 8e		 jmp	 SHORT $LN17@draw_3d_ex
$LN18@draw_3d_ex:

; 1417 : 			}
; 1418 : 			else

  0082b	e9 eb 00 00 00	 jmp	 $LN21@draw_3d_ex
$LN80@draw_3d_ex:

; 1419 : 			{
; 1420 : 				set_deferred_d3d_int_state ( D3DRENDERSTATE_SHADEMODE, D3DSHADE_FLAT );

  00830	6a 01		 push	 1
  00832	6a 09		 push	 9
  00834	e8 00 00 00 00	 call	 ?set_deferred_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_deferred_d3d_int_state

; 1421 : 				for ( faces_left = current_object_3d_surface->number_of_faces; faces_left > 0; faces_left-- )

  00839	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0083e	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00842	89 4d f8	 mov	 DWORD PTR _faces_left$[ebp], ecx
  00845	eb 09		 jmp	 SHORT $LN22@draw_3d_ex
$LN20@draw_3d_ex:
  00847	8b 45 f8	 mov	 eax, DWORD PTR _faces_left$[ebp]
  0084a	83 e8 01	 sub	 eax, 1
  0084d	89 45 f8	 mov	 DWORD PTR _faces_left$[ebp], eax
$LN22@draw_3d_ex:
  00850	83 7d f8 00	 cmp	 DWORD PTR _faces_left$[ebp], 0
  00854	0f 8e c1 00 00
	00		 jle	 $LN21@draw_3d_ex

; 1422 : 				{
; 1423 : 					if ( current_object_3d_surface->polygons )

  0085a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0085f	66 8b 08	 mov	 cx, WORD PTR [eax]
  00862	66 83 e1 01	 and	 cx, 1
  00866	0f b7 d1	 movzx	 edx, cx
  00869	85 d2		 test	 edx, edx
  0086b	74 70		 je	 SHORT $LN85@draw_3d_ex

; 1424 : 					{
; 1425 : 						if ( !outcode_3d_object_surface_polygon ( current_object_3d_faces->number_of_points, this_object_3d_info->points_base, &current_object_3d_outcode ) )

  0086d	68 00 00 00 00	 push	 OFFSET ?current_object_3d_outcode@@3HA ; current_object_3d_outcode
  00872	8b 45 14	 mov	 eax, DWORD PTR _this_object_3d_info$[ebp]
  00875	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00878	51		 push	 ecx
  00879	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  0087f	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00882	50		 push	 eax
  00883	e8 00 00 00 00	 call	 ?outcode_3d_object_surface_polygon@@YGHHHPAH@Z ; outcode_3d_object_surface_polygon
  00888	85 c0		 test	 eax, eax
  0088a	75 21		 jne	 SHORT $LN89@draw_3d_ex

; 1426 : 						{
; 1427 : 							if ( current_object_3d_outcode == 0 )

  0088c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_object_3d_outcode@@3HA, 0 ; current_object_3d_outcode
  00893	75 0d		 jne	 SHORT $LN88@draw_3d_ex

; 1428 : 							{
; 1429 : 								wrender_unclipped_3d_object_polygon ( current_object_3d_faces );

  00895	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  0089a	50		 push	 eax
  0089b	e8 00 00 00 00	 call	 ?wrender_unclipped_3d_object_polygon@@YGXPAUOBJECT_3D_FACE@@@Z ; wrender_unclipped_3d_object_polygon

; 1430 : 							}
; 1431 : 							else

  008a0	eb 0b		 jmp	 SHORT $LN89@draw_3d_ex
$LN88@draw_3d_ex:

; 1432 : 							{
; 1433 : 								wrender_clipped_3d_object_polygon ( current_object_3d_faces );

  008a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  008a7	50		 push	 eax
  008a8	e8 00 00 00 00	 call	 ?wrender_clipped_3d_object_polygon@@YGXPAUOBJECT_3D_FACE@@@Z ; wrender_clipped_3d_object_polygon
$LN89@draw_3d_ex:

; 1434 : 							}
; 1435 : 						}
; 1436 : 
; 1437 : 						current_object_3d_face_normal_list++;

  008ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_face_normal_list
  008b2	83 c0 02	 add	 eax, 2
  008b5	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_face_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, eax ; current_object_3d_face_normal_list

; 1438 : 						current_object_3d_point_list += current_object_3d_faces->number_of_points;

  008ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  008bf	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  008c2	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  008c8	89 0d 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, ecx ; current_object_3d_point_list

; 1439 : 						current_object_3d_faces++;

  008ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A ; current_object_3d_faces
  008d3	83 c0 01	 add	 eax, 1
  008d6	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_faces@@3PAUOBJECT_3D_FACE@@A, eax ; current_object_3d_faces

; 1440 : 					}
; 1441 : 					else

  008db	eb 39		 jmp	 SHORT $LN86@draw_3d_ex
$LN85@draw_3d_ex:

; 1442 : 					{
; 1443 : 
; 1444 : 						if ( !outcode_3d_object_surface_polygon ( 2, this_object_3d_info->points_base, &current_object_3d_outcode ) )

  008dd	68 00 00 00 00	 push	 OFFSET ?current_object_3d_outcode@@3HA ; current_object_3d_outcode
  008e2	8b 45 14	 mov	 eax, DWORD PTR _this_object_3d_info$[ebp]
  008e5	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  008e8	51		 push	 ecx
  008e9	6a 02		 push	 2
  008eb	e8 00 00 00 00	 call	 ?outcode_3d_object_surface_polygon@@YGHHHPAH@Z ; outcode_3d_object_surface_polygon
  008f0	85 c0		 test	 eax, eax
  008f2	75 15		 jne	 SHORT $LN92@draw_3d_ex

; 1445 : 						{
; 1446 : 							if ( current_object_3d_outcode == 0 )

  008f4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_object_3d_outcode@@3HA, 0 ; current_object_3d_outcode
  008fb	75 07		 jne	 SHORT $LN91@draw_3d_ex

; 1447 : 							{
; 1448 : 								wrender_unclipped_3d_object_plain_line ();

  008fd	e8 00 00 00 00	 call	 ?wrender_unclipped_3d_object_plain_line@@YGXXZ ; wrender_unclipped_3d_object_plain_line

; 1449 : 							}
; 1450 : 							else

  00902	eb 05		 jmp	 SHORT $LN92@draw_3d_ex
$LN91@draw_3d_ex:

; 1451 : 							{
; 1452 : 								wrender_clipped_3d_object_plain_line ();

  00904	e8 00 00 00 00	 call	 ?wrender_clipped_3d_object_plain_line@@YGXXZ ; wrender_clipped_3d_object_plain_line
$LN92@draw_3d_ex:

; 1453 : 							}
; 1454 : 						}
; 1455 : 						current_object_3d_point_list += 2;

  00909	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  0090e	83 c0 02	 add	 eax, 2
  00911	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A, eax ; current_object_3d_point_list
$LN86@draw_3d_ex:

; 1456 : 					}
; 1457 : 				}

  00916	e9 2c ff ff ff	 jmp	 $LN20@draw_3d_ex
$LN21@draw_3d_ex:

; 1458 : 			}
; 1459 : 		}
; 1460 : 
; 1461 : 		current_object_3d_surface_point_list += number_of_surface_points;

  0091b	8b 45 fc	 mov	 eax, DWORD PTR _number_of_surface_points$[ebp]
  0091e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  00924	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00927	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, edx ; current_object_3d_surface_point_list

; 1462 : 
; 1463 : 		if ( current_object_3d_surface->smoothed )

  0092d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00932	66 8b 08	 mov	 cx, WORD PTR [eax]
  00935	66 c1 e9 02	 shr	 cx, 2
  00939	66 83 e1 01	 and	 cx, 1
  0093d	0f b7 d1	 movzx	 edx, cx
  00940	85 d2		 test	 edx, edx
  00942	74 12		 je	 SHORT $LN93@draw_3d_ex

; 1464 : 		{
; 1465 : 			current_object_3d_surface_point_normal_list += number_of_surface_points;

  00944	8b 45 fc	 mov	 eax, DWORD PTR _number_of_surface_points$[ebp]
  00947	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_normal_list
  0094d	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00950	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface_point_normal_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A, edx ; current_object_3d_surface_point_normal_list
$LN93@draw_3d_ex:

; 1466 : 		}
; 1467 : 
; 1468 : 		if ( current_object_3d_surface->textured )

  00956	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  0095b	66 8b 08	 mov	 cx, WORD PTR [eax]
  0095e	66 c1 e9 03	 shr	 cx, 3
  00962	66 83 e1 01	 and	 cx, 1
  00966	0f b7 d1	 movzx	 edx, cx
  00969	85 d2		 test	 edx, edx
  0096b	74 12		 je	 SHORT $LN94@draw_3d_ex

; 1469 : 		{
; 1470 : 			current_object_3d_surface_point_texture_list += number_of_surface_points;

  0096d	8b 45 fc	 mov	 eax, DWORD PTR _number_of_surface_points$[ebp]
  00970	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A ; current_object_3d_surface_point_texture_list
  00976	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00979	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A, edx ; current_object_3d_surface_point_texture_list
$LN94@draw_3d_ex:

; 1471 : 		}
; 1472 : 
; 1473 : 		if ( current_object_3d_surface->has_luminosity_texture )

  0097f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  00984	66 8b 08	 mov	 cx, WORD PTR [eax]
  00987	66 c1 e9 04	 shr	 cx, 4
  0098b	66 83 e1 01	 and	 cx, 1
  0098f	0f b7 d1	 movzx	 edx, cx
  00992	85 d2		 test	 edx, edx
  00994	74 12		 je	 SHORT $LN95@draw_3d_ex

; 1474 : 		{
; 1475 : 			current_object_3d_surface_point_texture_list += number_of_surface_points;

  00996	8b 45 fc	 mov	 eax, DWORD PTR _number_of_surface_points$[ebp]
  00999	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A ; current_object_3d_surface_point_texture_list
  0099f	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  009a2	89 15 00 00 00
	00		 mov	 DWORD PTR ?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A, edx ; current_object_3d_surface_point_texture_list
$LN95@draw_3d_ex:

; 1476 : 		}
; 1477 : 
; 1478 : 		current_object_3d_surface++;

  009a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A ; current_object_3d_surface
  009ad	83 c0 10	 add	 eax, 16			; 00000010H
  009b0	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_surface@@3PAUFACE_SURFACE_DESCRIPTION@@A, eax ; current_object_3d_surface

; 1479 : 	}

  009b5	e9 13 f7 ff ff	 jmp	 $LN2@draw_3d_ex
$LN3@draw_3d_ex:

; 1480 : }

  009ba	5f		 pop	 edi
  009bb	5e		 pop	 esi
  009bc	5b		 pop	 ebx
  009bd	8b e5		 mov	 esp, ebp
  009bf	5d		 pop	 ebp
  009c0	c2 10 00	 ret	 16			; 00000010H
?draw_3d_explosion_clipped_faces@@YGXHPAUVEC3D@@PAULIGHT_3D_SOURCE@@PAUOBJECT_3D_INFO@@@Z ENDP ; draw_3d_explosion_clipped_faces
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dexplos.c
;	COMDAT ?transform_3d_explosion_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAUDISPLACEMENT_MAP@@PAUEXPLOSION_OBJECT_POINTS_LOOKUP@@M1@Z
_TEXT	SEGMENT
$T1 = -248						; size = 4
$T2 = -244						; size = 4
$T3 = -240						; size = 4
$T4 = -236						; size = 4
$T5 = -232						; size = 4
$T6 = -228						; size = 4
_j$7 = -160						; size = 4
_i$8 = -156						; size = 4
_q$9 = -152						; size = 4
_displacement_factor$10 = -148				; size = 4
_z$11 = -144						; size = 4
_y$12 = -140						; size = 4
_x$13 = -136						; size = 4
_pos$14 = -132						; size = 12
_iymin$ = -120						; size = 4
_iymax$ = -116						; size = 4
_ixmin$ = -112						; size = 4
_ixmax$ = -108						; size = 4
_z_factor$ = -104					; size = 4
_y_factor$ = -100					; size = 4
_x_factor$ = -96					; size = 4
_oymin$ = -92						; size = 4
_oymax$ = -88						; size = 4
_oxmin$ = -84						; size = 4
_oxmax$ = -80						; size = 4
_pos_z$ = -76						; size = 4
_pos_y$ = -72						; size = 4
_pos_x$ = -68						; size = 4
_zmax$ = -64						; size = 4
_ymax$ = -60						; size = 4
_xmax$ = -56						; size = 4
_temp_last_transformed_point_outcode$ = -49		; size = 1
_last_transformed_point_outcode$ = -48			; size = 4
_result_outcode$ = -44					; size = 4
_temp_last_transformed_point$ = -40			; size = 16
_last_transformed_point$ = -24				; size = 4
_result_2d_points$ = -20				; size = 4
_result_3d_points$ = -16				; size = 4
_points$ = -12						; size = 4
_number_of_points$ = -8					; size = 4
_count$ = -4						; size = 4
_object$ = 8						; size = 4
_pos$ = 12						; size = 4
_displacement$ = 16					; size = 4
_points_lookup$ = 20					; size = 4
_amplitude$ = 24					; size = 4
_camera_direction$ = 28					; size = 4
?transform_3d_explosion_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAUDISPLACEMENT_MAP@@PAUEXPLOSION_OBJECT_POINTS_LOOKUP@@M1@Z PROC ; transform_3d_explosion_object, COMDAT

; 933  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f8 00 00
	00		 sub	 esp, 248		; 000000f8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 934  : 
; 935  : 	int
; 936  : 		count,
; 937  : 		number_of_points;
; 938  : 
; 939  : 	object_short_3d_point
; 940  : 		*points;
; 941  : 
; 942  : 	object_transformed_3d_point
; 943  : 		*result_3d_points;
; 944  : 
; 945  : 	object_transformed_2d_point
; 946  : 		*result_2d_points,
; 947  : 		*last_transformed_point,
; 948  : 		temp_last_transformed_point;
; 949  : 
; 950  : 	unsigned char
; 951  : 		*result_outcode,
; 952  : 		*last_transformed_point_outcode,
; 953  : 		temp_last_transformed_point_outcode;
; 954  : 
; 955  : 	float
; 956  : 		xmax,
; 957  : 		ymax,
; 958  : 		zmax,
; 959  : 		pos_x,
; 960  : 		pos_y,
; 961  : 		pos_z,
; 962  : 		oxmax,
; 963  : 		oxmin,
; 964  : 		oymax,
; 965  : 		oymin,
; 966  : 		x_factor,
; 967  : 		y_factor,
; 968  : 		z_factor;
; 969  : 
; 970  : 	unsigned int
; 971  : 		ixmax,
; 972  : 		ixmin,
; 973  : 		iymax,
; 974  : 		iymin;
; 975  : 
; 976  : 	//
; 977  : 	// We only need the fpu to be in single precision mode
; 978  : 	//
; 979  : 
; 980  : 	set_fpu_precision_mode_single ();

  0000c	e8 00 00 00 00	 call	 ?set_fpu_precision_mode_single@@YGXXZ ; set_fpu_precision_mode_single

; 981  : 
; 982  : 	illuminate_object_point_normals ( object->point_normals, object->number_of_lighting_normals, current_3d_lights, 0 );

  00011	6a 00		 push	 0
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_3d_lights@@3PAULIGHT_3D_SOURCE@@A ; current_3d_lights
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  0001c	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  00020	52		 push	 edx
  00021	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00024	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ?illuminate_object_point_normals@@YGXPAUOBJECT_3D_HEADING_PITCH_NORMAL@@HPAULIGHT_3D_SOURCE@@H@Z ; illuminate_object_point_normals

; 983  : /*
; 984  : 	if ( camera_direction )
; 985  : 	{
; 986  : 
; 987  : 		calculate_object_normal_factors ( object->point_normals + object->culling_normals_offset,
; 988  : 														object->number_of_point_normals - object->culling_normals_offset,
; 989  : 														camera_direction, &object->bounding_box, object->culling_normals_offset );
; 990  : 	}
; 991  : */
; 992  : 	number_of_points = object->number_of_points;

  0002d	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00030	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00033	89 4d f8	 mov	 DWORD PTR _number_of_points$[ebp], ecx

; 993  : 
; 994  : 	points = object->points;

  00036	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00039	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  0003c	89 4d f4	 mov	 DWORD PTR _points$[ebp], ecx

; 995  : 
; 996  : 	result_3d_points = transformed_3d_3d_points;

  0003f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _result_3d_points$[ebp], OFFSET ?transformed_3d_3d_points@@3PAUOBJECT_TRANSFORMED_3D_POINT@@A ; transformed_3d_3d_points

; 997  : 
; 998  : 	result_2d_points = transformed_3d_2d_points;

  00046	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _result_2d_points$[ebp], OFFSET ?transformed_3d_2d_points@@3PAUOBJECT_TRANSFORMED_2D_POINT@@A ; transformed_3d_2d_points

; 999  : 
; 1000 : 	result_outcode = transformed_3d_point_outcodes;

  0004d	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _result_outcode$[ebp], OFFSET ?transformed_3d_point_outcodes@@3PAEA ; transformed_3d_point_outcodes

; 1001 : 
; 1002 : 	last_transformed_point = &temp_last_transformed_point;

  00054	8d 45 d8	 lea	 eax, DWORD PTR _temp_last_transformed_point$[ebp]
  00057	89 45 e8	 mov	 DWORD PTR _last_transformed_point$[ebp], eax

; 1003 : 
; 1004 : 	last_transformed_point_outcode = &temp_last_transformed_point_outcode;

  0005a	8d 45 cf	 lea	 eax, DWORD PTR _temp_last_transformed_point_outcode$[ebp]
  0005d	89 45 d0	 mov	 DWORD PTR _last_transformed_point_outcode$[ebp], eax

; 1005 : 
; 1006 : 	environment_x_origin = active_3d_environment->x_origin;

  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00065	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  0006a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?environment_x_origin@@3MA, xmm0

; 1007 : 	environment_y_origin = active_3d_environment->y_origin;

  00072	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00077	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  0007c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?environment_y_origin@@3MA, xmm0

; 1008 : 
; 1009 : 	pos_x = pos->x * active_3d_environment->screen_i_scale;

  00084	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  00087	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0008d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00091	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  00095	f3 0f 11 45 bc	 movss	 DWORD PTR _pos_x$[ebp], xmm0

; 1010 : 	pos_y = pos->y * active_3d_environment->screen_j_scale;

  0009a	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  0009d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  000a3	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000a8	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [ecx+4]
  000ad	f3 0f 11 45 b8	 movss	 DWORD PTR _pos_y$[ebp], xmm0

; 1011 : 	pos_z = pos->z;

  000b2	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp]
  000b5	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000ba	f3 0f 11 45 b4	 movss	 DWORD PTR _pos_z$[ebp], xmm0

; 1012 : 
; 1013 : 	xmax = max ( fabs ( object->bounding_box.xmin ), fabs ( object->bounding_box.xmax ) );

  000bf	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000c2	51		 push	 ecx
  000c3	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  000c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cd	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  000d2	d9 9d 1c ff ff
	ff		 fstp	 DWORD PTR $T6[ebp]
  000d8	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  000db	51		 push	 ecx
  000dc	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  000e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e6	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  000eb	d9 9d 18 ff ff
	ff		 fstp	 DWORD PTR $T5[ebp]
  000f1	8d 95 1c ff ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  000f7	52		 push	 edx
  000f8	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  000fe	50		 push	 eax
  000ff	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00104	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00108	f3 0f 11 45 c8	 movss	 DWORD PTR _xmax$[ebp], xmm0

; 1014 : 	ymax = max ( fabs ( object->bounding_box.ymin ), fabs ( object->bounding_box.ymax ) );

  0010d	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00110	51		 push	 ecx
  00111	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  00116	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011b	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00120	d9 9d 14 ff ff
	ff		 fstp	 DWORD PTR $T4[ebp]
  00126	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  00129	51		 push	 ecx
  0012a	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  0012f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00134	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00139	d9 9d 10 ff ff
	ff		 fstp	 DWORD PTR $T3[ebp]
  0013f	8d 95 14 ff ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  00145	52		 push	 edx
  00146	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0014c	50		 push	 eax
  0014d	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00152	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00156	f3 0f 11 45 c4	 movss	 DWORD PTR _ymax$[ebp], xmm0

; 1015 : 	zmax = max ( fabs ( object->bounding_box.zmin ), fabs ( object->bounding_box.zmax ) );

  0015b	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0015e	51		 push	 ecx
  0015f	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [eax+36]
  00164	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00169	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  0016e	d9 9d 0c ff ff
	ff		 fstp	 DWORD PTR $T2[ebp]
  00174	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  00177	51		 push	 ecx
  00178	f3 0f 10 41 20	 movss	 xmm0, DWORD PTR [ecx+32]
  0017d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00182	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00187	d9 9d 08 ff ff
	ff		 fstp	 DWORD PTR $T1[ebp]
  0018d	8d 95 0c ff ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  00193	52		 push	 edx
  00194	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  001a0	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001a4	f3 0f 11 45 c0	 movss	 DWORD PTR _zmax$[ebp], xmm0

; 1016 : 
; 1017 : 	scaled_rotation[0][0] = rotation_3d[0][0] * active_3d_environment->screen_i_scale;

  001a9	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001ae	6b c8 00	 imul	 ecx, eax, 0
  001b1	ba 04 00 00 00	 mov	 edx, 4
  001b6	6b c2 00	 imul	 eax, edx, 0
  001b9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  001bf	f3 0f 10 84 01
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax]
  001c8	f3 0f 59 02	 mulss	 xmm0, DWORD PTR [edx]
  001cc	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001d1	6b c8 00	 imul	 ecx, eax, 0
  001d4	ba 04 00 00 00	 mov	 edx, 4
  001d9	6b c2 00	 imul	 eax, edx, 0
  001dc	f3 0f 11 84 01
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+eax], xmm0

; 1018 : 	scaled_rotation[0][1] = rotation_3d[0][1] * active_3d_environment->screen_j_scale;

  001e5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001ea	6b c8 00	 imul	 ecx, eax, 0
  001ed	ba 04 00 00 00	 mov	 edx, 4
  001f2	c1 e2 00	 shl	 edx, 0
  001f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  001fa	f3 0f 10 84 11
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00203	f3 0f 59 40 04	 mulss	 xmm0, DWORD PTR [eax+4]
  00208	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0020d	6b d1 00	 imul	 edx, ecx, 0
  00210	b8 04 00 00 00	 mov	 eax, 4
  00215	c1 e0 00	 shl	 eax, 0
  00218	f3 0f 11 84 02
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+eax], xmm0

; 1019 : 	scaled_rotation[0][2] = rotation_3d[0][2];

  00221	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00226	6b c8 00	 imul	 ecx, eax, 0
  00229	ba 04 00 00 00	 mov	 edx, 4
  0022e	d1 e2		 shl	 edx, 1
  00230	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00235	6b c0 00	 imul	 eax, eax, 0
  00238	be 04 00 00 00	 mov	 esi, 4
  0023d	d1 e6		 shl	 esi, 1
  0023f	8b 8c 11 00 00
	00 00		 mov	 ecx, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00246	89 8c 30 00 00
	00 00		 mov	 DWORD PTR ?scaled_rotation@@3PAY02MA[eax+esi], ecx

; 1020 : 
; 1021 : 	scaled_rotation[1][0] = rotation_3d[1][0] * active_3d_environment->screen_i_scale;

  0024d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00252	c1 e0 00	 shl	 eax, 0
  00255	b9 04 00 00 00	 mov	 ecx, 4
  0025a	6b d1 00	 imul	 edx, ecx, 0
  0025d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00263	f3 0f 10 84 10
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  0026c	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  00270	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00275	c1 e2 00	 shl	 edx, 0
  00278	b8 04 00 00 00	 mov	 eax, 4
  0027d	6b c8 00	 imul	 ecx, eax, 0
  00280	f3 0f 11 84 0a
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+ecx], xmm0

; 1022 : 	scaled_rotation[1][1] = rotation_3d[1][1] * active_3d_environment->screen_j_scale;

  00289	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0028e	c1 e0 00	 shl	 eax, 0
  00291	b9 04 00 00 00	 mov	 ecx, 4
  00296	c1 e1 00	 shl	 ecx, 0
  00299	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0029f	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  002a8	f3 0f 59 42 04	 mulss	 xmm0, DWORD PTR [edx+4]
  002ad	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002b2	c1 e0 00	 shl	 eax, 0
  002b5	b9 04 00 00 00	 mov	 ecx, 4
  002ba	c1 e1 00	 shl	 ecx, 0
  002bd	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx], xmm0

; 1023 : 	scaled_rotation[1][2] = rotation_3d[1][2];

  002c6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002cb	c1 e0 00	 shl	 eax, 0
  002ce	b9 04 00 00 00	 mov	 ecx, 4
  002d3	d1 e1		 shl	 ecx, 1
  002d5	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  002da	c1 e2 00	 shl	 edx, 0
  002dd	be 04 00 00 00	 mov	 esi, 4
  002e2	d1 e6		 shl	 esi, 1
  002e4	8b 84 08 00 00
	00 00		 mov	 eax, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  002eb	89 84 32 00 00
	00 00		 mov	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+esi], eax

; 1024 : 
; 1025 : 	scaled_rotation[2][0] = rotation_3d[2][0] * active_3d_environment->screen_i_scale;

  002f2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002f7	d1 e0		 shl	 eax, 1
  002f9	b9 04 00 00 00	 mov	 ecx, 4
  002fe	6b d1 00	 imul	 edx, ecx, 0
  00301	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00307	f3 0f 10 84 10
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  00310	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  00314	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00319	d1 e2		 shl	 edx, 1
  0031b	b8 04 00 00 00	 mov	 eax, 4
  00320	6b c8 00	 imul	 ecx, eax, 0
  00323	f3 0f 11 84 0a
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+ecx], xmm0

; 1026 : 	scaled_rotation[2][1] = rotation_3d[2][1] * active_3d_environment->screen_j_scale;

  0032c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00331	d1 e0		 shl	 eax, 1
  00333	b9 04 00 00 00	 mov	 ecx, 4
  00338	c1 e1 00	 shl	 ecx, 0
  0033b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00341	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  0034a	f3 0f 59 42 04	 mulss	 xmm0, DWORD PTR [edx+4]
  0034f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00354	d1 e0		 shl	 eax, 1
  00356	b9 04 00 00 00	 mov	 ecx, 4
  0035b	c1 e1 00	 shl	 ecx, 0
  0035e	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx], xmm0

; 1027 : 	scaled_rotation[2][2] = rotation_3d[2][2];

  00367	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0036c	d1 e0		 shl	 eax, 1
  0036e	b9 04 00 00 00	 mov	 ecx, 4
  00373	d1 e1		 shl	 ecx, 1
  00375	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0037a	d1 e2		 shl	 edx, 1
  0037c	be 04 00 00 00	 mov	 esi, 4
  00381	d1 e6		 shl	 esi, 1
  00383	8b 84 08 00 00
	00 00		 mov	 eax, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  0038a	89 84 32 00 00
	00 00		 mov	 DWORD PTR ?scaled_rotation@@3PAY02MA[edx+esi], eax

; 1028 : 
; 1029 : 	x_factor = xmax / 32767.0;

  00391	f3 0f 5a 45 c8	 cvtss2sd xmm0, DWORD PTR _xmax$[ebp]
  00396	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40dfffc000000000
  0039e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003a2	f3 0f 11 45 a0	 movss	 DWORD PTR _x_factor$[ebp], xmm0

; 1030 : 	y_factor = ymax / 32767.0;

  003a7	f3 0f 5a 45 c4	 cvtss2sd xmm0, DWORD PTR _ymax$[ebp]
  003ac	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40dfffc000000000
  003b4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003b8	f3 0f 11 45 9c	 movss	 DWORD PTR _y_factor$[ebp], xmm0

; 1031 : 	z_factor = zmax / 32767.0;

  003bd	f3 0f 5a 45 c0	 cvtss2sd xmm0, DWORD PTR _zmax$[ebp]
  003c2	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40dfffc000000000
  003ca	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003ce	f3 0f 11 45 98	 movss	 DWORD PTR _z_factor$[ebp], xmm0

; 1032 : 
; 1033 : 	amplitude *= 2.0 / 255.0;

  003d3	f3 0f 5a 45 18	 cvtss2sd xmm0, DWORD PTR _amplitude$[ebp]
  003d8	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f80101010101010
  003e0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003e4	f3 0f 11 45 18	 movss	 DWORD PTR _amplitude$[ebp], xmm0

; 1034 : 
; 1035 : 	for ( count = 0; count < number_of_points; count++ )

  003e9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  003f0	eb 09		 jmp	 SHORT $LN4@transform_
$LN2@transform_:
  003f2	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  003f5	83 c0 01	 add	 eax, 1
  003f8	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@transform_:
  003fb	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  003fe	3b 45 f8	 cmp	 eax, DWORD PTR _number_of_points$[ebp]
  00401	0f 8d 19 04 00
	00		 jge	 $LN3@transform_

; 1036 : 	{
; 1037 : 		vec3d
; 1038 : 			pos;
; 1039 : 
; 1040 : 		float
; 1041 : 			x,
; 1042 : 			y,
; 1043 : 			z,
; 1044 : 			displacement_factor;
; 1045 : 
; 1046 : 		pos.x = points->x;

  00407	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  0040a	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0040d	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00411	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _pos$14[ebp], xmm0

; 1047 : 		pos.y = points->y;

  00419	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  0041c	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00420	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00424	f3 0f 11 45 80	 movss	 DWORD PTR _pos$14[ebp+4], xmm0

; 1048 : 		pos.z = points->z;

  00429	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  0042c	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  00430	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00434	f3 0f 11 45 84	 movss	 DWORD PTR _pos$14[ebp+8], xmm0

; 1049 : 
; 1050 : 		pos.x *= x_factor;

  00439	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _pos$14[ebp]
  00441	f3 0f 59 45 a0	 mulss	 xmm0, DWORD PTR _x_factor$[ebp]
  00446	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _pos$14[ebp], xmm0

; 1051 : 		pos.y *= y_factor;

  0044e	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _pos$14[ebp+4]
  00453	f3 0f 59 45 9c	 mulss	 xmm0, DWORD PTR _y_factor$[ebp]
  00458	f3 0f 11 45 80	 movss	 DWORD PTR _pos$14[ebp+4], xmm0

; 1052 : 		pos.z *= z_factor;

  0045d	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _pos$14[ebp+8]
  00462	f3 0f 59 45 98	 mulss	 xmm0, DWORD PTR _z_factor$[ebp]
  00467	f3 0f 11 45 84	 movss	 DWORD PTR _pos$14[ebp+8], xmm0

; 1053 : 
; 1054 : 		//
; 1055 : 		// Apply the displacement mapping
; 1056 : 		//
; 1057 : 
; 1058 : 		displacement_factor = displacement->data[points_lookup->points[count].offset];

  0046c	8b 45 14	 mov	 eax, DWORD PTR _points_lookup$[ebp]
  0046f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00472	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  00475	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00478	8b 4d 10	 mov	 ecx, DWORD PTR _displacement$[ebp]
  0047b	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0047e	0f b6 04 02	 movzx	 eax, BYTE PTR [edx+eax]
  00482	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00486	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _displacement_factor$10[ebp], xmm0

; 1059 : 
; 1060 : 		displacement_factor *= amplitude;

  0048e	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _displacement_factor$10[ebp]
  00496	f3 0f 59 45 18	 mulss	 xmm0, DWORD PTR _amplitude$[ebp]
  0049b	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _displacement_factor$10[ebp], xmm0

; 1061 : 
; 1062 : 		pos.x += displacement_factor * pos.x;

  004a3	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _displacement_factor$10[ebp]
  004ab	f3 0f 59 85 7c
	ff ff ff	 mulss	 xmm0, DWORD PTR _pos$14[ebp]
  004b3	f3 0f 58 85 7c
	ff ff ff	 addss	 xmm0, DWORD PTR _pos$14[ebp]
  004bb	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _pos$14[ebp], xmm0

; 1063 : 		pos.y += displacement_factor * pos.y;

  004c3	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _displacement_factor$10[ebp]
  004cb	f3 0f 59 45 80	 mulss	 xmm0, DWORD PTR _pos$14[ebp+4]
  004d0	f3 0f 58 45 80	 addss	 xmm0, DWORD PTR _pos$14[ebp+4]
  004d5	f3 0f 11 45 80	 movss	 DWORD PTR _pos$14[ebp+4], xmm0

; 1064 : 		pos.z += displacement_factor * pos.z;

  004da	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _displacement_factor$10[ebp]
  004e2	f3 0f 59 45 84	 mulss	 xmm0, DWORD PTR _pos$14[ebp+8]
  004e7	f3 0f 58 45 84	 addss	 xmm0, DWORD PTR _pos$14[ebp+8]
  004ec	f3 0f 11 45 84	 movss	 DWORD PTR _pos$14[ebp+8], xmm0

; 1065 : 
; 1066 : 		//
; 1067 : 		// Rotate the point
; 1068 : 		//
; 1069 : 
; 1070 : 		x = pos_x + pos.x * scaled_rotation[0][0] + pos.y * scaled_rotation[1][0] + pos.z * scaled_rotation[2][0];

  004f1	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004f6	6b c8 00	 imul	 ecx, eax, 0
  004f9	ba 04 00 00 00	 mov	 edx, 4
  004fe	6b c2 00	 imul	 eax, edx, 0
  00501	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _pos$14[ebp]
  00509	f3 0f 59 84 01
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+eax]
  00512	f3 0f 58 45 bc	 addss	 xmm0, DWORD PTR _pos_x$[ebp]
  00517	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0051c	c1 e1 00	 shl	 ecx, 0
  0051f	ba 04 00 00 00	 mov	 edx, 4
  00524	6b c2 00	 imul	 eax, edx, 0
  00527	f3 0f 10 4d 80	 movss	 xmm1, DWORD PTR _pos$14[ebp+4]
  0052c	f3 0f 59 8c 01
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+eax]
  00535	f3 0f 58 c1	 addss	 xmm0, xmm1
  00539	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0053e	d1 e1		 shl	 ecx, 1
  00540	ba 04 00 00 00	 mov	 edx, 4
  00545	6b c2 00	 imul	 eax, edx, 0
  00548	f3 0f 10 4d 84	 movss	 xmm1, DWORD PTR _pos$14[ebp+8]
  0054d	f3 0f 59 8c 01
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+eax]
  00556	f3 0f 58 c1	 addss	 xmm0, xmm1
  0055a	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _x$13[ebp], xmm0

; 1071 : 		y = pos_y + pos.x * scaled_rotation[0][1] + pos.y * scaled_rotation[1][1] + pos.z * scaled_rotation[2][1];

  00562	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00567	6b c8 00	 imul	 ecx, eax, 0
  0056a	ba 04 00 00 00	 mov	 edx, 4
  0056f	c1 e2 00	 shl	 edx, 0
  00572	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _pos$14[ebp]
  0057a	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+edx]
  00583	f3 0f 58 45 b8	 addss	 xmm0, DWORD PTR _pos_y$[ebp]
  00588	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0058d	c1 e0 00	 shl	 eax, 0
  00590	b9 04 00 00 00	 mov	 ecx, 4
  00595	c1 e1 00	 shl	 ecx, 0
  00598	f3 0f 10 4d 80	 movss	 xmm1, DWORD PTR _pos$14[ebp+4]
  0059d	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx]
  005a6	f3 0f 58 c1	 addss	 xmm0, xmm1
  005aa	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  005af	d1 e2		 shl	 edx, 1
  005b1	b8 04 00 00 00	 mov	 eax, 4
  005b6	c1 e0 00	 shl	 eax, 0
  005b9	f3 0f 10 4d 84	 movss	 xmm1, DWORD PTR _pos$14[ebp+8]
  005be	f3 0f 59 8c 02
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[edx+eax]
  005c7	f3 0f 58 c1	 addss	 xmm0, xmm1
  005cb	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _y$12[ebp], xmm0

; 1072 : 		z = pos_z + pos.x * scaled_rotation[0][2] + pos.y * scaled_rotation[1][2] + pos.z * scaled_rotation[2][2];

  005d3	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005d8	6b c8 00	 imul	 ecx, eax, 0
  005db	ba 04 00 00 00	 mov	 edx, 4
  005e0	d1 e2		 shl	 edx, 1
  005e2	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _pos$14[ebp]
  005ea	f3 0f 59 84 11
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?scaled_rotation@@3PAY02MA[ecx+edx]
  005f3	f3 0f 58 45 b4	 addss	 xmm0, DWORD PTR _pos_z$[ebp]
  005f8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005fd	c1 e0 00	 shl	 eax, 0
  00600	b9 04 00 00 00	 mov	 ecx, 4
  00605	d1 e1		 shl	 ecx, 1
  00607	f3 0f 10 4d 80	 movss	 xmm1, DWORD PTR _pos$14[ebp+4]
  0060c	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[eax+ecx]
  00615	f3 0f 58 c1	 addss	 xmm0, xmm1
  00619	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0061e	d1 e2		 shl	 edx, 1
  00620	b8 04 00 00 00	 mov	 eax, 4
  00625	d1 e0		 shl	 eax, 1
  00627	f3 0f 10 4d 84	 movss	 xmm1, DWORD PTR _pos$14[ebp+8]
  0062c	f3 0f 59 8c 02
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?scaled_rotation@@3PAY02MA[edx+eax]
  00635	f3 0f 58 c1	 addss	 xmm0, xmm1
  00639	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _z$11[ebp], xmm0

; 1073 : 
; 1074 : 		result_3d_points->x = x;

  00641	8b 45 f0	 mov	 eax, DWORD PTR _result_3d_points$[ebp]
  00644	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _x$13[ebp]
  0064c	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1075 : 		result_3d_points->y = y;

  00650	8b 45 f0	 mov	 eax, DWORD PTR _result_3d_points$[ebp]
  00653	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _y$12[ebp]
  0065b	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 1076 : 		result_2d_points->z = z;

  00660	8b 45 ec	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  00663	f3 0f 10 85 70
	ff ff ff	 movss	 xmm0, DWORD PTR _z$11[ebp]
  0066b	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 1077 : 
; 1078 : 		if ( *( ( int * ) &result_2d_points->z ) >= *( ( int * ) &clip_hither ) )

  00670	8b 45 ec	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  00673	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00676	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?clip_hither@@3MA
  0067c	0f 8c 6f 01 00
	00		 jl	 $LN5@transform_

; 1079 : 		{
; 1080 : 			float
; 1081 : 				q,
; 1082 : 				i,
; 1083 : 				j;
; 1084 : 
; 1085 : 			oxmax = active_viewport.x_max - last_transformed_point->i;

  00682	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  00685	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  0068d	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00691	f3 0f 11 45 b0	 movss	 DWORD PTR _oxmax$[ebp], xmm0

; 1086 : 			oxmin = last_transformed_point->i - active_viewport.x_min;

  00696	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  00699	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0069d	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  006a5	f3 0f 11 45 ac	 movss	 DWORD PTR _oxmin$[ebp], xmm0

; 1087 : 			oymax = active_viewport.y_max - last_transformed_point->j;

  006aa	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  006ad	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  006b5	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  006ba	f3 0f 11 45 a8	 movss	 DWORD PTR _oymax$[ebp], xmm0

; 1088 : 			oymin = last_transformed_point->j - active_viewport.y_min;

  006bf	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  006c2	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  006c7	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  006cf	f3 0f 11 45 a4	 movss	 DWORD PTR _oymin$[ebp], xmm0

; 1089 : 
; 1090 : 			ixmax = *( ( unsigned int * ) &oxmax );

  006d4	8b 45 b0	 mov	 eax, DWORD PTR _oxmax$[ebp]
  006d7	89 45 94	 mov	 DWORD PTR _ixmax$[ebp], eax

; 1091 : 			ixmin = *( ( unsigned int * ) &oxmin );

  006da	8b 45 ac	 mov	 eax, DWORD PTR _oxmin$[ebp]
  006dd	89 45 90	 mov	 DWORD PTR _ixmin$[ebp], eax

; 1092 : 			iymax = *( ( unsigned int * ) &oymax );

  006e0	8b 45 a8	 mov	 eax, DWORD PTR _oymax$[ebp]
  006e3	89 45 8c	 mov	 DWORD PTR _iymax$[ebp], eax

; 1093 : 			iymin = *( ( unsigned int * ) &oymin );

  006e6	8b 45 a4	 mov	 eax, DWORD PTR _oymin$[ebp]
  006e9	89 45 88	 mov	 DWORD PTR _iymin$[ebp], eax

; 1094 : 
; 1095 : 			q = 1.0 / result_2d_points->z;

  006ec	8b 45 ec	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  006ef	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  006f4	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  006fc	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00700	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00704	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _q$9[ebp], xmm0

; 1096 : 
; 1097 : 			ixmin >>= 31;

  0070c	8b 45 90	 mov	 eax, DWORD PTR _ixmin$[ebp]
  0070f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00712	89 45 90	 mov	 DWORD PTR _ixmin$[ebp], eax

; 1098 : 			iymin &= 0x80000000;

  00715	8b 45 88	 mov	 eax, DWORD PTR _iymin$[ebp]
  00718	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  0071d	89 45 88	 mov	 DWORD PTR _iymin$[ebp], eax

; 1099 : 			ixmax >>= 29;

  00720	8b 45 94	 mov	 eax, DWORD PTR _ixmax$[ebp]
  00723	c1 e8 1d	 shr	 eax, 29			; 0000001dH
  00726	89 45 94	 mov	 DWORD PTR _ixmax$[ebp], eax

; 1100 : 			iymax &= 0x80000000;

  00729	8b 45 8c	 mov	 eax, DWORD PTR _iymax$[ebp]
  0072c	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00731	89 45 8c	 mov	 DWORD PTR _iymax$[ebp], eax

; 1101 : 			iymin >>= 30;

  00734	8b 45 88	 mov	 eax, DWORD PTR _iymin$[ebp]
  00737	c1 e8 1e	 shr	 eax, 30			; 0000001eH
  0073a	89 45 88	 mov	 DWORD PTR _iymin$[ebp], eax

; 1102 : 			ixmin &= 0x00000001;

  0073d	8b 45 90	 mov	 eax, DWORD PTR _ixmin$[ebp]
  00740	83 e0 01	 and	 eax, 1
  00743	89 45 90	 mov	 DWORD PTR _ixmin$[ebp], eax

; 1103 : 			iymax >>= 28;

  00746	8b 45 8c	 mov	 eax, DWORD PTR _iymax$[ebp]
  00749	c1 e8 1c	 shr	 eax, 28			; 0000001cH
  0074c	89 45 8c	 mov	 DWORD PTR _iymax$[ebp], eax

; 1104 : 			ixmax &= 0x00000004;

  0074f	8b 45 94	 mov	 eax, DWORD PTR _ixmax$[ebp]
  00752	83 e0 04	 and	 eax, 4
  00755	89 45 94	 mov	 DWORD PTR _ixmax$[ebp], eax

; 1105 : 			ixmin |= iymin;

  00758	8b 45 90	 mov	 eax, DWORD PTR _ixmin$[ebp]
  0075b	0b 45 88	 or	 eax, DWORD PTR _iymin$[ebp]
  0075e	89 45 90	 mov	 DWORD PTR _ixmin$[ebp], eax

; 1106 : 			ixmax |= iymax;

  00761	8b 45 94	 mov	 eax, DWORD PTR _ixmax$[ebp]
  00764	0b 45 8c	 or	 eax, DWORD PTR _iymax$[ebp]
  00767	89 45 94	 mov	 DWORD PTR _ixmax$[ebp], eax

; 1107 : 			*last_transformed_point_outcode = ( ixmin | ixmax );

  0076a	8b 45 90	 mov	 eax, DWORD PTR _ixmin$[ebp]
  0076d	0b 45 94	 or	 eax, DWORD PTR _ixmax$[ebp]
  00770	8b 4d d0	 mov	 ecx, DWORD PTR _last_transformed_point_outcode$[ebp]
  00773	88 01		 mov	 BYTE PTR [ecx], al

; 1108 : 
; 1109 : //				start_float_divide ( result_2d_points->z, 1.0 );
; 1110 : 
; 1111 : //				*last_transformed_point_outcode = generate_lookup_outcode ( ixmin, iymin, ixmax, iymax );
; 1112 : 
; 1113 : 			last_transformed_point = result_2d_points;

  00775	8b 45 ec	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  00778	89 45 e8	 mov	 DWORD PTR _last_transformed_point$[ebp], eax

; 1114 : 
; 1115 : 			last_transformed_point_outcode = result_outcode;

  0077b	8b 45 d4	 mov	 eax, DWORD PTR _result_outcode$[ebp]
  0077e	89 45 d0	 mov	 DWORD PTR _last_transformed_point_outcode$[ebp], eax

; 1116 : 
; 1117 : //				q = end_float_divide ();
; 1118 : 
; 1119 : 			i = ( result_3d_points->x * q );

  00781	8b 45 f0	 mov	 eax, DWORD PTR _result_3d_points$[ebp]
  00784	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00788	f3 0f 59 85 68
	ff ff ff	 mulss	 xmm0, DWORD PTR _q$9[ebp]
  00790	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _i$8[ebp], xmm0

; 1120 : 			j = ( result_3d_points->y * q );

  00798	8b 45 f0	 mov	 eax, DWORD PTR _result_3d_points$[ebp]
  0079b	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  007a0	f3 0f 59 85 68
	ff ff ff	 mulss	 xmm0, DWORD PTR _q$9[ebp]
  007a8	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _j$7[ebp], xmm0

; 1121 : 
; 1122 : 			result_2d_points->q = q;

  007b0	8b 45 ec	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  007b3	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _q$9[ebp]
  007bb	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 1123 : 			result_2d_points->j = environment_y_origin - j;

  007c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?environment_y_origin@@3MA
  007c8	f3 0f 5c 85 60
	ff ff ff	 subss	 xmm0, DWORD PTR _j$7[ebp]
  007d0	8b 45 ec	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  007d3	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 1124 : 			result_2d_points->i = environment_x_origin + i;

  007d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?environment_x_origin@@3MA
  007e0	f3 0f 58 85 64
	ff ff ff	 addss	 xmm0, DWORD PTR _i$8[ebp]
  007e8	8b 45 ec	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  007eb	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1125 : 		}
; 1126 : 		else

  007ef	eb 06		 jmp	 SHORT $LN6@transform_
$LN5@transform_:

; 1127 : 		{
; 1128 : 			*result_outcode = CLIP_HITHER;

  007f1	8b 45 d4	 mov	 eax, DWORD PTR _result_outcode$[ebp]
  007f4	c6 00 20	 mov	 BYTE PTR [eax], 32	; 00000020H
$LN6@transform_:

; 1129 : 		}
; 1130 : 
; 1131 : 		result_3d_points++;

  007f7	8b 45 f0	 mov	 eax, DWORD PTR _result_3d_points$[ebp]
  007fa	83 c0 08	 add	 eax, 8
  007fd	89 45 f0	 mov	 DWORD PTR _result_3d_points$[ebp], eax

; 1132 : 		result_2d_points++;

  00800	8b 45 ec	 mov	 eax, DWORD PTR _result_2d_points$[ebp]
  00803	83 c0 10	 add	 eax, 16			; 00000010H
  00806	89 45 ec	 mov	 DWORD PTR _result_2d_points$[ebp], eax

; 1133 : 		result_outcode++;

  00809	8b 45 d4	 mov	 eax, DWORD PTR _result_outcode$[ebp]
  0080c	83 c0 01	 add	 eax, 1
  0080f	89 45 d4	 mov	 DWORD PTR _result_outcode$[ebp], eax

; 1134 : 		points++;

  00812	8b 45 f4	 mov	 eax, DWORD PTR _points$[ebp]
  00815	83 c0 06	 add	 eax, 6
  00818	89 45 f4	 mov	 DWORD PTR _points$[ebp], eax

; 1135 : 	}

  0081b	e9 d2 fb ff ff	 jmp	 $LN2@transform_
$LN3@transform_:

; 1136 : 
; 1137 : 	oxmax = active_viewport.x_max - last_transformed_point->i;

  00820	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  00823	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+8
  0082b	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  0082f	f3 0f 11 45 b0	 movss	 DWORD PTR _oxmax$[ebp], xmm0

; 1138 : 	oxmin = last_transformed_point->i - active_viewport.x_min;

  00834	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  00837	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0083b	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A
  00843	f3 0f 11 45 ac	 movss	 DWORD PTR _oxmin$[ebp], xmm0

; 1139 : 	oymax = active_viewport.y_max - last_transformed_point->j;

  00848	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  0084b	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+12
  00853	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  00858	f3 0f 11 45 a8	 movss	 DWORD PTR _oymax$[ebp], xmm0

; 1140 : 	oymin = last_transformed_point->j - active_viewport.y_min;

  0085d	8b 45 e8	 mov	 eax, DWORD PTR _last_transformed_point$[ebp]
  00860	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00865	f3 0f 5c 05 04
	00 00 00	 subss	 xmm0, DWORD PTR ?active_viewport@@3UVIEWPORT@@A+4
  0086d	f3 0f 11 45 a4	 movss	 DWORD PTR _oymin$[ebp], xmm0

; 1141 : 
; 1142 : 	ixmax = *( ( int * ) &oxmax );

  00872	8b 45 b0	 mov	 eax, DWORD PTR _oxmax$[ebp]
  00875	89 45 94	 mov	 DWORD PTR _ixmax$[ebp], eax

; 1143 : 	ixmin = *( ( int * ) &oxmin );

  00878	8b 45 ac	 mov	 eax, DWORD PTR _oxmin$[ebp]
  0087b	89 45 90	 mov	 DWORD PTR _ixmin$[ebp], eax

; 1144 : 	iymax = *( ( int * ) &oymax );

  0087e	8b 45 a8	 mov	 eax, DWORD PTR _oymax$[ebp]
  00881	89 45 8c	 mov	 DWORD PTR _iymax$[ebp], eax

; 1145 : 	iymin = *( ( int * ) &oymin );

  00884	8b 45 a4	 mov	 eax, DWORD PTR _oymin$[ebp]
  00887	89 45 88	 mov	 DWORD PTR _iymin$[ebp], eax

; 1146 : 
; 1147 : 	*last_transformed_point_outcode = generate_lookup_outcode ( ixmin, iymin, ixmax, iymax );

  0088a	8b 45 8c	 mov	 eax, DWORD PTR _iymax$[ebp]
  0088d	50		 push	 eax
  0088e	8b 4d 94	 mov	 ecx, DWORD PTR _ixmax$[ebp]
  00891	51		 push	 ecx
  00892	8b 55 88	 mov	 edx, DWORD PTR _iymin$[ebp]
  00895	52		 push	 edx
  00896	8b 45 90	 mov	 eax, DWORD PTR _ixmin$[ebp]
  00899	50		 push	 eax
  0089a	e8 00 00 00 00	 call	 ?generate_lookup_outcode@@YGHHHHH@Z ; generate_lookup_outcode
  0089f	8b 4d d0	 mov	 ecx, DWORD PTR _last_transformed_point_outcode$[ebp]
  008a2	88 01		 mov	 BYTE PTR [ecx], al

; 1148 : 
; 1149 : 	//
; 1150 : 	// Set back the fpu precision mode.
; 1151 : 	//
; 1152 : 
; 1153 : 	set_fpu_precision_mode_double ();

  008a4	e8 00 00 00 00	 call	 ?set_fpu_precision_mode_double@@YGXXZ ; set_fpu_precision_mode_double

; 1154 : }

  008a9	5f		 pop	 edi
  008aa	5e		 pop	 esi
  008ab	5b		 pop	 ebx
  008ac	8b e5		 mov	 esp, ebp
  008ae	5d		 pop	 ebp
  008af	c2 18 00	 ret	 24			; 00000018H
?transform_3d_explosion_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAUDISPLACEMENT_MAP@@PAUEXPLOSION_OBJECT_POINTS_LOOKUP@@M1@Z ENDP ; transform_3d_explosion_object
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dexplos.c
;	COMDAT ?draw_sub_explosion@@YGXPAUOBJECT_3D_DATABASE_ENTRY@@PAUVIEWPOINT@@PAUVEC3D@@PAUOBJECT_3D_EXPLOSION@@@Z
_TEXT	SEGMENT
_dissolve_value$1 = -396				; size = 4
_scale$2 = -392						; size = 12
_object_outcode$3 = -380				; size = 4
_lz$4 = -376						; size = 4
_ly$5 = -372						; size = 4
_lx$6 = -368						; size = 4
_z$7 = -364						; size = 4
_y$8 = -360						; size = 4
_x$9 = -356						; size = 4
_rel_pos$10 = -352					; size = 12
_factor$11 = -340					; size = 4
_dissolve_value$12 = -336				; size = 4
_keyframe$13 = -332					; size = 24
_keyframe$14 = -308					; size = 56
_scale$15 = -252					; size = 12
_old_current_object_3d_dissolve_factor$ = -240		; size = 4
_vp$ = -236						; size = 48
_light$ = -188						; size = 4
_light_ptr$ = -184					; size = 4
_prev_light$ = -180					; size = 4
_this_light$ = -176					; size = 4
_sub_pos$ = -172					; size = 12
_object_unit_pos$ = -160				; size = 12
_object_pos$ = -148					; size = 12
_temp_scale$ = -136					; size = 12
_scaled_relative_position$ = -124			; size = 12
_object_camera_direction$ = -112			; size = 12
_object_camera_position$ = -100				; size = 12
_temp_matrix$ = -88					; size = 36
_relative_attitude$ = -52				; size = 36
_object_number$ = -16					; size = 4
_object_3d_light_3d_initial_base$ = -12			; size = 4
_object_3d_object_initial_base$ = -8			; size = 4
_count$ = -4						; size = 4
_obj$ = 8						; size = 4
_parent_viewpoint$ = 12					; size = 4
_position$ = 16						; size = 4
_explosion$ = 20					; size = 4
?draw_sub_explosion@@YGXPAUOBJECT_3D_DATABASE_ENTRY@@PAUVIEWPOINT@@PAUVEC3D@@PAUOBJECT_3D_EXPLOSION@@@Z PROC ; draw_sub_explosion, COMDAT

; 475  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 01 00
	00		 sub	 esp, 460		; 000001ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 476  : 	int
; 477  : 		count,
; 478  : 		object_3d_object_initial_base,
; 479  : 		object_3d_light_3d_initial_base,
; 480  : 		object_number;
; 481  : 
; 482  : 	matrix3x3
; 483  : 		relative_attitude,
; 484  : 		temp_matrix;
; 485  : 
; 486  : 	vec3d
; 487  : 		object_camera_position,
; 488  : 		object_camera_direction,
; 489  : 		scaled_relative_position,
; 490  : 		temp_scale,
; 491  : 		object_pos,
; 492  : 		object_unit_pos,
; 493  : 		sub_pos;
; 494  : 
; 495  : 	light_3d_source
; 496  : 		*this_light,
; 497  : 		*prev_light,
; 498  : 		*light_ptr,
; 499  : 		*light;
; 500  : 
; 501  : 	viewpoint
; 502  : 		vp;
; 503  : 
; 504  : 	float
; 505  : 		old_current_object_3d_dissolve_factor;
; 506  : 
; 507  : 	//
; 508  : 	// Remember what temporary objects & lights we have used up to now
; 509  : 	//
; 510  : 
; 511  : 	object_3d_object_initial_base = object_3d_object_current_base;

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_3d_object_current_base@@3HA ; object_3d_object_current_base
  00011	89 45 f8	 mov	 DWORD PTR _object_3d_object_initial_base$[ebp], eax

; 512  : 
; 513  : 	object_3d_light_3d_initial_base = object_3d_light_3d_current_base,

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_3d_light_3d_current_base@@3HA ; object_3d_light_3d_current_base
  00019	89 45 f4	 mov	 DWORD PTR _object_3d_light_3d_initial_base$[ebp], eax
  0001c	6a 24		 push	 36			; 00000024H
  0001e	68 00 00 00 00	 push	 OFFSET ?rotation_3d@@3PAY02MA ; rotation_3d
  00023	8d 4d a8	 lea	 ecx, DWORD PTR _temp_matrix$[ebp]
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 _memcpy
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 514  : 
; 515  : 	//
; 516  : 	//	Store the rotation matrix, so when we go back to the parent, other sub objects can inherit the matrix safely
; 517  : 	//
; 518  : 
; 519  : 	memcpy ( temp_matrix, rotation_3d, sizeof ( matrix3x3 ) );
; 520  : 
; 521  : 	//
; 522  : 	// Store the scaling before we trash it
; 523  : 	//
; 524  : 
; 525  : 	memcpy ( &temp_scale, &object_3d_scale, sizeof ( vec3d ) );

  0002f	6a 0c		 push	 12			; 0000000cH
  00031	68 00 00 00 00	 push	 OFFSET ?object_3d_scale@@3UVEC3D@@A ; object_3d_scale
  00036	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _temp_scale$[ebp]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 _memcpy
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH

; 526  : 
; 527  : 	//
; 528  : 	// Alter the scaling according to this object's scale
; 529  : 	//
; 530  : 
; 531  : 	{
; 532  : 		vec3d
; 533  : 			scale;
; 534  : 
; 535  : 		if ( obj->number_of_keyframes )

  00045	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00048	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  0004c	85 c9		 test	 ecx, ecx
  0004e	74 59		 je	 SHORT $LN7@draw_sub_e

; 536  : 		{
; 537  : 			object_3d_sub_object_keyframe
; 538  : 				keyframe;
; 539  : 
; 540  : 			calculate_keyframe ( obj->number_of_keyframes, obj->keyframes, &keyframe, explosion->animation );

  00050	8b 45 14	 mov	 eax, DWORD PTR _explosion$[ebp]
  00053	51		 push	 ecx
  00054	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  00059	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005e	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _keyframe$14[ebp]
  00064	51		 push	 ecx
  00065	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  00068	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0006b	50		 push	 eax
  0006c	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0006f	0f b6 51 03	 movzx	 edx, BYTE PTR [ecx+3]
  00073	52		 push	 edx
  00074	e8 00 00 00 00	 call	 ?calculate_keyframe@@YGXHPAUOBJECT_3D_SUB_OBJECT_KEYFRAME@@0M@Z ; calculate_keyframe

; 541  : 
; 542  : 			scale.x = keyframe.scale_x;

  00079	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _keyframe$14[ebp+32]
  00081	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _scale$15[ebp], xmm0

; 543  : 			scale.y = keyframe.scale_y;

  00089	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _keyframe$14[ebp+36]
  00091	f3 0f 11 85 08
	ff ff ff	 movss	 DWORD PTR _scale$15[ebp+4], xmm0

; 544  : 			scale.z = keyframe.scale_z;

  00099	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _keyframe$14[ebp+40]
  000a1	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _scale$15[ebp+8], xmm0
$LN7@draw_sub_e:

; 545  : 		}
; 546  : 
; 547  : 		object_3d_scale.x *= scale.x;

  000a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A
  000b1	f3 0f 59 85 04
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$15[ebp]
  000b9	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?object_3d_scale@@3UVEC3D@@A, xmm0

; 548  : 		object_3d_scale.y *= scale.y;

  000c1	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+4
  000c9	f3 0f 59 85 08
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$15[ebp+4]
  000d1	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?object_3d_scale@@3UVEC3D@@A+4, xmm0

; 549  : 		object_3d_scale.z *= scale.z;

  000d9	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+8
  000e1	f3 0f 59 85 0c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$15[ebp+8]
  000e9	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?object_3d_scale@@3UVEC3D@@A+8, xmm0

; 550  : 	}
; 551  : 
; 552  : 	//
; 553  : 	// Get the positions & object number
; 554  : 	//
; 555  : 
; 556  : //	rel = &obj->relative_position;
; 557  : 
; 558  : 	object_number = obj->index;

  000f1	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  000f4	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000f7	89 4d f0	 mov	 DWORD PTR _object_number$[ebp], ecx

; 559  : 
; 560  : 	//
; 561  : 	// Set the object dissolve variables
; 562  : 	//
; 563  : 
; 564  : 
; 565  : 	//
; 566  : 	// Calculate the object's position relative to the viewer.
; 567  : 	//
; 568  : 	// NOTE:
; 569  : 	//		BECAUSE THIS USES THE ROTATION_3D MATRIX, IT TAKES INTO ACCOUNT THE PARENT'S SCALE
; 570  : 	//
; 571  : 
; 572  : 	sub_pos.x = ( ( obj->keyframes->x * rotation_3d[0][0] ) +

  000fa	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  000fd	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00100	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00105	6b c2 00	 imul	 eax, edx, 0
  00108	ba 04 00 00 00	 mov	 edx, 4
  0010d	6b d2 00	 imul	 edx, edx, 0
  00110	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00115	f3 0f 59 84 10
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  0011e	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00121	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00124	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00129	c1 e2 00	 shl	 edx, 0
  0012c	b8 04 00 00 00	 mov	 eax, 4
  00131	6b c0 00	 imul	 eax, eax, 0
  00134	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  00139	f3 0f 59 8c 02
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[edx+eax]
  00142	f3 0f 58 c1	 addss	 xmm0, xmm1
  00146	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00149	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0014c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00151	d1 e0		 shl	 eax, 1
  00153	b9 04 00 00 00	 mov	 ecx, 4
  00158	6b c9 00	 imul	 ecx, ecx, 0
  0015b	f3 0f 10 4a 10	 movss	 xmm1, DWORD PTR [edx+16]
  00160	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00169	f3 0f 58 c1	 addss	 xmm0, xmm1
  0016d	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _sub_pos$[ebp], xmm0

; 573  : 					  ( obj->keyframes->y * rotation_3d[1][0] ) +
; 574  : 					  ( obj->keyframes->z * rotation_3d[2][0] ) );
; 575  : 	sub_pos.y = ( ( obj->keyframes->x * rotation_3d[0][1] ) +

  00175	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00178	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0017b	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00180	6b c2 00	 imul	 eax, edx, 0
  00183	ba 04 00 00 00	 mov	 edx, 4
  00188	c1 e2 00	 shl	 edx, 0
  0018b	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00190	f3 0f 59 84 10
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  00199	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0019c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0019f	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  001a4	c1 e2 00	 shl	 edx, 0
  001a7	b8 04 00 00 00	 mov	 eax, 4
  001ac	c1 e0 00	 shl	 eax, 0
  001af	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  001b4	f3 0f 59 8c 02
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[edx+eax]
  001bd	f3 0f 58 c1	 addss	 xmm0, xmm1
  001c1	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  001c4	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  001c7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001cc	d1 e0		 shl	 eax, 1
  001ce	b9 04 00 00 00	 mov	 ecx, 4
  001d3	c1 e1 00	 shl	 ecx, 0
  001d6	f3 0f 10 4a 10	 movss	 xmm1, DWORD PTR [edx+16]
  001db	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  001e4	f3 0f 58 c1	 addss	 xmm0, xmm1
  001e8	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _sub_pos$[ebp+4], xmm0

; 576  : 					  ( obj->keyframes->y * rotation_3d[1][1] ) +
; 577  : 					  ( obj->keyframes->z * rotation_3d[2][1] ) );
; 578  : 	sub_pos.z = ( ( obj->keyframes->x * rotation_3d[0][2] ) +

  001f0	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  001f3	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001f6	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  001fb	6b c2 00	 imul	 eax, edx, 0
  001fe	ba 04 00 00 00	 mov	 edx, 4
  00203	d1 e2		 shl	 edx, 1
  00205	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0020a	f3 0f 59 84 10
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  00213	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00216	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00219	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0021e	c1 e2 00	 shl	 edx, 0
  00221	b8 04 00 00 00	 mov	 eax, 4
  00226	d1 e0		 shl	 eax, 1
  00228	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  0022d	f3 0f 59 8c 02
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[edx+eax]
  00236	f3 0f 58 c1	 addss	 xmm0, xmm1
  0023a	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0023d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00240	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00245	d1 e0		 shl	 eax, 1
  00247	b9 04 00 00 00	 mov	 ecx, 4
  0024c	d1 e1		 shl	 ecx, 1
  0024e	f3 0f 10 4a 10	 movss	 xmm1, DWORD PTR [edx+16]
  00253	f3 0f 59 8c 08
	00 00 00 00	 mulss	 xmm1, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  0025c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00260	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _sub_pos$[ebp+8], xmm0

; 579  : 					  ( obj->keyframes->y * rotation_3d[1][2] ) +
; 580  : 					  ( obj->keyframes->z * rotation_3d[2][2] ) );
; 581  : 
; 582  : 	sub_pos.x += position->x;

  00268	8b 45 10	 mov	 eax, DWORD PTR _position$[ebp]
  0026b	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _sub_pos$[ebp]
  00273	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  00277	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _sub_pos$[ebp], xmm0

; 583  : 	sub_pos.y += position->y;

  0027f	8b 45 10	 mov	 eax, DWORD PTR _position$[ebp]
  00282	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _sub_pos$[ebp+4]
  0028a	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  0028f	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _sub_pos$[ebp+4], xmm0

; 584  : 	sub_pos.z += position->z;

  00297	8b 45 10	 mov	 eax, DWORD PTR _position$[ebp]
  0029a	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _sub_pos$[ebp+8]
  002a2	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  002a7	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _sub_pos$[ebp+8], xmm0

; 585  : 
; 586  : 	//
; 587  : 	// Calculate the object's real world position
; 588  : 	//
; 589  : 
; 590  : 	scaled_relative_position.x = obj->keyframes->x * object_3d_scale.x;

  002af	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  002b2	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  002b5	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  002ba	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A
  002c2	f3 0f 11 45 84	 movss	 DWORD PTR _scaled_relative_position$[ebp], xmm0

; 591  : 	scaled_relative_position.y = obj->keyframes->y * object_3d_scale.y;

  002c7	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  002ca	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  002cd	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  002d2	f3 0f 59 05 04
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+4
  002da	f3 0f 11 45 88	 movss	 DWORD PTR _scaled_relative_position$[ebp+4], xmm0

; 592  : 	scaled_relative_position.z = obj->keyframes->z * object_3d_scale.z;

  002df	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  002e2	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  002e5	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  002ea	f3 0f 59 05 08
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+8
  002f2	f3 0f 11 45 8c	 movss	 DWORD PTR _scaled_relative_position$[ebp+8], xmm0

; 593  : 
; 594  : 	vp.x = (	( scaled_relative_position.x * parent_viewpoint->xv.x ) +

  002f7	8b 45 0c	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  002fa	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _scaled_relative_position$[ebp]
  002ff	f3 0f 59 40 0c	 mulss	 xmm0, DWORD PTR [eax+12]
  00304	8b 4d 0c	 mov	 ecx, DWORD PTR _parent_viewpoint$[ebp]
  00307	f3 0f 10 4d 88	 movss	 xmm1, DWORD PTR _scaled_relative_position$[ebp+4]
  0030c	f3 0f 59 49 18	 mulss	 xmm1, DWORD PTR [ecx+24]
  00311	f3 0f 58 c1	 addss	 xmm0, xmm1
  00315	8b 55 0c	 mov	 edx, DWORD PTR _parent_viewpoint$[ebp]
  00318	f3 0f 10 4d 8c	 movss	 xmm1, DWORD PTR _scaled_relative_position$[ebp+8]
  0031d	f3 0f 59 4a 24	 mulss	 xmm1, DWORD PTR [edx+36]
  00322	f3 0f 58 c1	 addss	 xmm0, xmm1
  00326	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _vp$[ebp], xmm0

; 595  : 				( scaled_relative_position.y * parent_viewpoint->yv.x ) +
; 596  : 				( scaled_relative_position.z * parent_viewpoint->zv.x ) );
; 597  : 
; 598  : 	vp.y = (	( scaled_relative_position.x * parent_viewpoint->xv.y ) +

  0032e	8b 45 0c	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  00331	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _scaled_relative_position$[ebp]
  00336	f3 0f 59 40 10	 mulss	 xmm0, DWORD PTR [eax+16]
  0033b	8b 4d 0c	 mov	 ecx, DWORD PTR _parent_viewpoint$[ebp]
  0033e	f3 0f 10 4d 88	 movss	 xmm1, DWORD PTR _scaled_relative_position$[ebp+4]
  00343	f3 0f 59 49 1c	 mulss	 xmm1, DWORD PTR [ecx+28]
  00348	f3 0f 58 c1	 addss	 xmm0, xmm1
  0034c	8b 55 0c	 mov	 edx, DWORD PTR _parent_viewpoint$[ebp]
  0034f	f3 0f 10 4d 8c	 movss	 xmm1, DWORD PTR _scaled_relative_position$[ebp+8]
  00354	f3 0f 59 4a 28	 mulss	 xmm1, DWORD PTR [edx+40]
  00359	f3 0f 58 c1	 addss	 xmm0, xmm1
  0035d	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _vp$[ebp+4], xmm0

; 599  : 				( scaled_relative_position.y * parent_viewpoint->yv.y ) +
; 600  : 				( scaled_relative_position.z * parent_viewpoint->zv.y ) );
; 601  : 
; 602  : 	vp.z = (	( scaled_relative_position.x * parent_viewpoint->xv.z ) +

  00365	8b 45 0c	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  00368	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _scaled_relative_position$[ebp]
  0036d	f3 0f 59 40 14	 mulss	 xmm0, DWORD PTR [eax+20]
  00372	8b 4d 0c	 mov	 ecx, DWORD PTR _parent_viewpoint$[ebp]
  00375	f3 0f 10 4d 88	 movss	 xmm1, DWORD PTR _scaled_relative_position$[ebp+4]
  0037a	f3 0f 59 49 20	 mulss	 xmm1, DWORD PTR [ecx+32]
  0037f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00383	8b 55 0c	 mov	 edx, DWORD PTR _parent_viewpoint$[ebp]
  00386	f3 0f 10 4d 8c	 movss	 xmm1, DWORD PTR _scaled_relative_position$[ebp+8]
  0038b	f3 0f 59 4a 2c	 mulss	 xmm1, DWORD PTR [edx+44]
  00390	f3 0f 58 c1	 addss	 xmm0, xmm1
  00394	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _vp$[ebp+8], xmm0

; 603  : 				( scaled_relative_position.y * parent_viewpoint->yv.z ) +
; 604  : 				( scaled_relative_position.z * parent_viewpoint->zv.z ) );
; 605  : 
; 606  : 	vp.x += parent_viewpoint->x;

  0039c	8b 45 0c	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  0039f	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _vp$[ebp]
  003a7	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  003ab	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _vp$[ebp], xmm0

; 607  : 	vp.y += parent_viewpoint->y;

  003b3	8b 45 0c	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  003b6	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _vp$[ebp+4]
  003be	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  003c3	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _vp$[ebp+4], xmm0

; 608  : 	vp.z += parent_viewpoint->z;

  003cb	8b 45 0c	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  003ce	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _vp$[ebp+8]
  003d6	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  003db	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _vp$[ebp+8], xmm0

; 609  : 
; 610  : 	//
; 611  : 	// Alter the object dissolve
; 612  : 	//
; 613  : 
; 614  : 	old_current_object_3d_dissolve_factor = current_object_3d_dissolve_factor;

  003e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?current_object_3d_dissolve_factor@@3MA
  003eb	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _old_current_object_3d_dissolve_factor$[ebp], xmm0

; 615  : 
; 616  : 	if ( obj->number_of_object_dissolve_keyframes )

  003f3	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  003f6	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  003fa	85 c9		 test	 ecx, ecx
  003fc	0f 84 90 00 00
	00		 je	 $LN8@draw_sub_e

; 617  : 	{
; 618  : 
; 619  : 		object_3d_sub_object_value_keyframe
; 620  : 			keyframe;
; 621  : 
; 622  : 		int
; 623  : 			dissolve_value;
; 624  : 
; 625  : 		float
; 626  : 			factor;
; 627  : 
; 628  : 		calculate_value_keyframe ( obj->number_of_object_dissolve_keyframes, obj->object_dissolve_keyframes, &keyframe, explosion->animation );

  00402	8b 45 14	 mov	 eax, DWORD PTR _explosion$[ebp]
  00405	51		 push	 ecx
  00406	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  0040b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00410	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR _keyframe$13[ebp]
  00416	51		 push	 ecx
  00417	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  0041a	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0041d	50		 push	 eax
  0041e	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00421	0f b6 51 04	 movzx	 edx, BYTE PTR [ecx+4]
  00425	52		 push	 edx
  00426	e8 00 00 00 00	 call	 ?calculate_value_keyframe@@YGXHPAUOBJECT_3D_SUB_OBJECT_VALUE_KEYFRAME@@0M@Z ; calculate_value_keyframe

; 629  : 
; 630  : 		factor = 1.0 - keyframe.value;

  0042b	f3 0f 5a 85 bc
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _keyframe$13[ebp+8]
  00433	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0043b	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0043f	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00443	f3 0f 11 85 ac
	fe ff ff	 movss	 DWORD PTR _factor$11[ebp], xmm0

; 631  : 
; 632  : 		current_object_3d_dissolve_factor *= factor;

  0044b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?current_object_3d_dissolve_factor@@3MA
  00453	f3 0f 59 85 ac
	fe ff ff	 mulss	 xmm0, DWORD PTR _factor$11[ebp]
  0045b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?current_object_3d_dissolve_factor@@3MA, xmm0

; 633  : 
; 634  : 		asm_convert_float_to_int ( ( current_object_3d_dissolve_factor * 255 ), &dissolve_value );

  00463	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _dissolve_value$12[ebp]
  00469	50		 push	 eax
  0046a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?current_object_3d_dissolve_factor@@3MA
  00472	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  0047a	51		 push	 ecx
  0047b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00480	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 635  : 
; 636  : 		current_object_3d_dissolve_value = dissolve_value;

  00485	8a 85 b0 fe ff
	ff		 mov	 al, BYTE PTR _dissolve_value$12[ebp]
  0048b	a2 00 00 00 00	 mov	 BYTE PTR ?current_object_3d_dissolve_value@@3EA, al ; current_object_3d_dissolve_value

; 637  : 	}
; 638  : 	else

  00490	eb 17		 jmp	 SHORT $LN9@draw_sub_e
$LN8@draw_sub_e:

; 639  : 	{
; 640  : 		current_object_3d_dissolve_value = 255;

  00492	c6 05 00 00 00
	00 ff		 mov	 BYTE PTR ?current_object_3d_dissolve_value@@3EA, 255 ; current_object_3d_dissolve_value, 000000ffH

; 641  : 		current_object_3d_dissolve_factor = 1.0;

  00499	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004a1	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?current_object_3d_dissolve_factor@@3MA, xmm0
$LN9@draw_sub_e:

; 642  : 	}
; 643  : 
; 644  : 	//
; 645  : 	// Compute the sub object's relative attitude matrix
; 646  : 	//
; 647  : 
; 648  : 	get_3d_transformation_matrix ( relative_attitude, obj->keyframes->heading, -obj->keyframes->pitch, -obj->keyframes->roll );

  004a9	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  004ac	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  004af	f3 0f 10 41 1c	 movss	 xmm0, DWORD PTR [ecx+28]
  004b4	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  004bb	51		 push	 ecx
  004bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c1	8b 55 08	 mov	 edx, DWORD PTR _obj$[ebp]
  004c4	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  004c7	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  004cc	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  004d3	51		 push	 ecx
  004d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d9	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  004dc	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  004df	51		 push	 ecx
  004e0	f3 0f 10 42 14	 movss	 xmm0, DWORD PTR [edx+20]
  004e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ea	8d 45 cc	 lea	 eax, DWORD PTR _relative_attitude$[ebp]
  004ed	50		 push	 eax
  004ee	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 649  : 
; 650  : 	//
; 651  : 	// Calculate the sub object's rotation matrix, to transform its 3d points relative to the parent object.
; 652  : 	//
; 653  : 
; 654  : 	vp.xv.x = ( ( relative_attitude[0][0] * parent_viewpoint->xv.x ) + ( relative_attitude[0][1] * parent_viewpoint->yv.x ) + ( relative_attitude[0][2] * parent_viewpoint->zv.x ) );

  004f3	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004f8	6b c8 00	 imul	 ecx, eax, 0
  004fb	8d 54 0d cc	 lea	 edx, DWORD PTR _relative_attitude$[ebp+ecx]
  004ff	b8 04 00 00 00	 mov	 eax, 4
  00504	6b c8 00	 imul	 ecx, eax, 0
  00507	8b 45 0c	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  0050a	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0050f	f3 0f 59 40 0c	 mulss	 xmm0, DWORD PTR [eax+12]
  00514	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00519	6b d1 00	 imul	 edx, ecx, 0
  0051c	8d 44 15 cc	 lea	 eax, DWORD PTR _relative_attitude$[ebp+edx]
  00520	b9 04 00 00 00	 mov	 ecx, 4
  00525	c1 e1 00	 shl	 ecx, 0
  00528	8b 55 0c	 mov	 edx, DWORD PTR _parent_viewpoint$[ebp]
  0052b	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [eax+ecx]
  00530	f3 0f 59 4a 18	 mulss	 xmm1, DWORD PTR [edx+24]
  00535	f3 0f 58 c1	 addss	 xmm0, xmm1
  00539	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0053e	6b c8 00	 imul	 ecx, eax, 0
  00541	8d 54 0d cc	 lea	 edx, DWORD PTR _relative_attitude$[ebp+ecx]
  00545	b8 04 00 00 00	 mov	 eax, 4
  0054a	d1 e0		 shl	 eax, 1
  0054c	8b 4d 0c	 mov	 ecx, DWORD PTR _parent_viewpoint$[ebp]
  0054f	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00554	f3 0f 59 49 24	 mulss	 xmm1, DWORD PTR [ecx+36]
  00559	f3 0f 58 c1	 addss	 xmm0, xmm1
  0055d	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _vp$[ebp+12], xmm0

; 655  : 	vp.xv.y = ( ( relative_attitude[0][0] * parent_viewpoint->xv.y ) + ( relative_attitude[0][1] * parent_viewpoint->yv.y ) + ( relative_attitude[0][2] * parent_viewpoint->zv.y ) );

  00565	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0056a	6b c8 00	 imul	 ecx, eax, 0
  0056d	8d 54 0d cc	 lea	 edx, DWORD PTR _relative_attitude$[ebp+ecx]
  00571	b8 04 00 00 00	 mov	 eax, 4
  00576	6b c8 00	 imul	 ecx, eax, 0
  00579	8b 45 0c	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  0057c	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00581	f3 0f 59 40 10	 mulss	 xmm0, DWORD PTR [eax+16]
  00586	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0058b	6b d1 00	 imul	 edx, ecx, 0
  0058e	8d 44 15 cc	 lea	 eax, DWORD PTR _relative_attitude$[ebp+edx]
  00592	b9 04 00 00 00	 mov	 ecx, 4
  00597	c1 e1 00	 shl	 ecx, 0
  0059a	8b 55 0c	 mov	 edx, DWORD PTR _parent_viewpoint$[ebp]
  0059d	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [eax+ecx]
  005a2	f3 0f 59 4a 1c	 mulss	 xmm1, DWORD PTR [edx+28]
  005a7	f3 0f 58 c1	 addss	 xmm0, xmm1
  005ab	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005b0	6b c8 00	 imul	 ecx, eax, 0
  005b3	8d 54 0d cc	 lea	 edx, DWORD PTR _relative_attitude$[ebp+ecx]
  005b7	b8 04 00 00 00	 mov	 eax, 4
  005bc	d1 e0		 shl	 eax, 1
  005be	8b 4d 0c	 mov	 ecx, DWORD PTR _parent_viewpoint$[ebp]
  005c1	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  005c6	f3 0f 59 49 28	 mulss	 xmm1, DWORD PTR [ecx+40]
  005cb	f3 0f 58 c1	 addss	 xmm0, xmm1
  005cf	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _vp$[ebp+16], xmm0

; 656  : 	vp.xv.z = ( ( relative_attitude[0][0] * parent_viewpoint->xv.z ) + ( relative_attitude[0][1] * parent_viewpoint->yv.z ) + ( relative_attitude[0][2] * parent_viewpoint->zv.z ) );

  005d7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005dc	6b c8 00	 imul	 ecx, eax, 0
  005df	8d 54 0d cc	 lea	 edx, DWORD PTR _relative_attitude$[ebp+ecx]
  005e3	b8 04 00 00 00	 mov	 eax, 4
  005e8	6b c8 00	 imul	 ecx, eax, 0
  005eb	8b 45 0c	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  005ee	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  005f3	f3 0f 59 40 14	 mulss	 xmm0, DWORD PTR [eax+20]
  005f8	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  005fd	6b d1 00	 imul	 edx, ecx, 0
  00600	8d 44 15 cc	 lea	 eax, DWORD PTR _relative_attitude$[ebp+edx]
  00604	b9 04 00 00 00	 mov	 ecx, 4
  00609	c1 e1 00	 shl	 ecx, 0
  0060c	8b 55 0c	 mov	 edx, DWORD PTR _parent_viewpoint$[ebp]
  0060f	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [eax+ecx]
  00614	f3 0f 59 4a 20	 mulss	 xmm1, DWORD PTR [edx+32]
  00619	f3 0f 58 c1	 addss	 xmm0, xmm1
  0061d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00622	6b c8 00	 imul	 ecx, eax, 0
  00625	8d 54 0d cc	 lea	 edx, DWORD PTR _relative_attitude$[ebp+ecx]
  00629	b8 04 00 00 00	 mov	 eax, 4
  0062e	d1 e0		 shl	 eax, 1
  00630	8b 4d 0c	 mov	 ecx, DWORD PTR _parent_viewpoint$[ebp]
  00633	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00638	f3 0f 59 49 2c	 mulss	 xmm1, DWORD PTR [ecx+44]
  0063d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00641	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _vp$[ebp+20], xmm0

; 657  : 
; 658  : 	vp.yv.x = ( ( relative_attitude[1][0] * parent_viewpoint->xv.x ) + ( relative_attitude[1][1] * parent_viewpoint->yv.x ) + ( relative_attitude[1][2] * parent_viewpoint->zv.x ) );

  00649	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0064e	c1 e0 00	 shl	 eax, 0
  00651	8d 4c 05 cc	 lea	 ecx, DWORD PTR _relative_attitude$[ebp+eax]
  00655	ba 04 00 00 00	 mov	 edx, 4
  0065a	6b c2 00	 imul	 eax, edx, 0
  0065d	8b 55 0c	 mov	 edx, DWORD PTR _parent_viewpoint$[ebp]
  00660	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00665	f3 0f 59 42 0c	 mulss	 xmm0, DWORD PTR [edx+12]
  0066a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0066f	c1 e0 00	 shl	 eax, 0
  00672	8d 4c 05 cc	 lea	 ecx, DWORD PTR _relative_attitude$[ebp+eax]
  00676	ba 04 00 00 00	 mov	 edx, 4
  0067b	c1 e2 00	 shl	 edx, 0
  0067e	8b 45 0c	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  00681	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  00686	f3 0f 59 48 18	 mulss	 xmm1, DWORD PTR [eax+24]
  0068b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0068f	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00694	c1 e1 00	 shl	 ecx, 0
  00697	8d 54 0d cc	 lea	 edx, DWORD PTR _relative_attitude$[ebp+ecx]
  0069b	b8 04 00 00 00	 mov	 eax, 4
  006a0	d1 e0		 shl	 eax, 1
  006a2	8b 4d 0c	 mov	 ecx, DWORD PTR _parent_viewpoint$[ebp]
  006a5	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  006aa	f3 0f 59 49 24	 mulss	 xmm1, DWORD PTR [ecx+36]
  006af	f3 0f 58 c1	 addss	 xmm0, xmm1
  006b3	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _vp$[ebp+24], xmm0

; 659  : 	vp.yv.y = ( ( relative_attitude[1][0] * parent_viewpoint->xv.y ) + ( relative_attitude[1][1] * parent_viewpoint->yv.y ) + ( relative_attitude[1][2] * parent_viewpoint->zv.y ) );

  006bb	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  006c0	c1 e0 00	 shl	 eax, 0
  006c3	8d 4c 05 cc	 lea	 ecx, DWORD PTR _relative_attitude$[ebp+eax]
  006c7	ba 04 00 00 00	 mov	 edx, 4
  006cc	6b c2 00	 imul	 eax, edx, 0
  006cf	8b 55 0c	 mov	 edx, DWORD PTR _parent_viewpoint$[ebp]
  006d2	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  006d7	f3 0f 59 42 10	 mulss	 xmm0, DWORD PTR [edx+16]
  006dc	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  006e1	c1 e0 00	 shl	 eax, 0
  006e4	8d 4c 05 cc	 lea	 ecx, DWORD PTR _relative_attitude$[ebp+eax]
  006e8	ba 04 00 00 00	 mov	 edx, 4
  006ed	c1 e2 00	 shl	 edx, 0
  006f0	8b 45 0c	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  006f3	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  006f8	f3 0f 59 48 1c	 mulss	 xmm1, DWORD PTR [eax+28]
  006fd	f3 0f 58 c1	 addss	 xmm0, xmm1
  00701	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00706	c1 e1 00	 shl	 ecx, 0
  00709	8d 54 0d cc	 lea	 edx, DWORD PTR _relative_attitude$[ebp+ecx]
  0070d	b8 04 00 00 00	 mov	 eax, 4
  00712	d1 e0		 shl	 eax, 1
  00714	8b 4d 0c	 mov	 ecx, DWORD PTR _parent_viewpoint$[ebp]
  00717	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  0071c	f3 0f 59 49 28	 mulss	 xmm1, DWORD PTR [ecx+40]
  00721	f3 0f 58 c1	 addss	 xmm0, xmm1
  00725	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _vp$[ebp+28], xmm0

; 660  : 	vp.yv.z = ( ( relative_attitude[1][0] * parent_viewpoint->xv.z ) + ( relative_attitude[1][1] * parent_viewpoint->yv.z ) + ( relative_attitude[1][2] * parent_viewpoint->zv.z ) );

  0072d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00732	c1 e0 00	 shl	 eax, 0
  00735	8d 4c 05 cc	 lea	 ecx, DWORD PTR _relative_attitude$[ebp+eax]
  00739	ba 04 00 00 00	 mov	 edx, 4
  0073e	6b c2 00	 imul	 eax, edx, 0
  00741	8b 55 0c	 mov	 edx, DWORD PTR _parent_viewpoint$[ebp]
  00744	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00749	f3 0f 59 42 14	 mulss	 xmm0, DWORD PTR [edx+20]
  0074e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00753	c1 e0 00	 shl	 eax, 0
  00756	8d 4c 05 cc	 lea	 ecx, DWORD PTR _relative_attitude$[ebp+eax]
  0075a	ba 04 00 00 00	 mov	 edx, 4
  0075f	c1 e2 00	 shl	 edx, 0
  00762	8b 45 0c	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  00765	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  0076a	f3 0f 59 48 20	 mulss	 xmm1, DWORD PTR [eax+32]
  0076f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00773	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00778	c1 e1 00	 shl	 ecx, 0
  0077b	8d 54 0d cc	 lea	 edx, DWORD PTR _relative_attitude$[ebp+ecx]
  0077f	b8 04 00 00 00	 mov	 eax, 4
  00784	d1 e0		 shl	 eax, 1
  00786	8b 4d 0c	 mov	 ecx, DWORD PTR _parent_viewpoint$[ebp]
  00789	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  0078e	f3 0f 59 49 2c	 mulss	 xmm1, DWORD PTR [ecx+44]
  00793	f3 0f 58 c1	 addss	 xmm0, xmm1
  00797	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _vp$[ebp+32], xmm0

; 661  : 
; 662  : 	vp.zv.x = ( ( relative_attitude[2][0] * parent_viewpoint->xv.x ) + ( relative_attitude[2][1] * parent_viewpoint->yv.x ) + ( relative_attitude[2][2] * parent_viewpoint->zv.x ) );

  0079f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  007a4	d1 e0		 shl	 eax, 1
  007a6	8d 4c 05 cc	 lea	 ecx, DWORD PTR _relative_attitude$[ebp+eax]
  007aa	ba 04 00 00 00	 mov	 edx, 4
  007af	6b c2 00	 imul	 eax, edx, 0
  007b2	8b 55 0c	 mov	 edx, DWORD PTR _parent_viewpoint$[ebp]
  007b5	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  007ba	f3 0f 59 42 0c	 mulss	 xmm0, DWORD PTR [edx+12]
  007bf	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  007c4	d1 e0		 shl	 eax, 1
  007c6	8d 4c 05 cc	 lea	 ecx, DWORD PTR _relative_attitude$[ebp+eax]
  007ca	ba 04 00 00 00	 mov	 edx, 4
  007cf	c1 e2 00	 shl	 edx, 0
  007d2	8b 45 0c	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  007d5	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  007da	f3 0f 59 48 18	 mulss	 xmm1, DWORD PTR [eax+24]
  007df	f3 0f 58 c1	 addss	 xmm0, xmm1
  007e3	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  007e8	d1 e1		 shl	 ecx, 1
  007ea	8d 54 0d cc	 lea	 edx, DWORD PTR _relative_attitude$[ebp+ecx]
  007ee	b8 04 00 00 00	 mov	 eax, 4
  007f3	d1 e0		 shl	 eax, 1
  007f5	8b 4d 0c	 mov	 ecx, DWORD PTR _parent_viewpoint$[ebp]
  007f8	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  007fd	f3 0f 59 49 24	 mulss	 xmm1, DWORD PTR [ecx+36]
  00802	f3 0f 58 c1	 addss	 xmm0, xmm1
  00806	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _vp$[ebp+36], xmm0

; 663  : 	vp.zv.y = ( ( relative_attitude[2][0] * parent_viewpoint->xv.y ) + ( relative_attitude[2][1] * parent_viewpoint->yv.y ) + ( relative_attitude[2][2] * parent_viewpoint->zv.y ) );

  0080e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00813	d1 e0		 shl	 eax, 1
  00815	8d 4c 05 cc	 lea	 ecx, DWORD PTR _relative_attitude$[ebp+eax]
  00819	ba 04 00 00 00	 mov	 edx, 4
  0081e	6b c2 00	 imul	 eax, edx, 0
  00821	8b 55 0c	 mov	 edx, DWORD PTR _parent_viewpoint$[ebp]
  00824	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00829	f3 0f 59 42 10	 mulss	 xmm0, DWORD PTR [edx+16]
  0082e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00833	d1 e0		 shl	 eax, 1
  00835	8d 4c 05 cc	 lea	 ecx, DWORD PTR _relative_attitude$[ebp+eax]
  00839	ba 04 00 00 00	 mov	 edx, 4
  0083e	c1 e2 00	 shl	 edx, 0
  00841	8b 45 0c	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  00844	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  00849	f3 0f 59 48 1c	 mulss	 xmm1, DWORD PTR [eax+28]
  0084e	f3 0f 58 c1	 addss	 xmm0, xmm1
  00852	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00857	d1 e1		 shl	 ecx, 1
  00859	8d 54 0d cc	 lea	 edx, DWORD PTR _relative_attitude$[ebp+ecx]
  0085d	b8 04 00 00 00	 mov	 eax, 4
  00862	d1 e0		 shl	 eax, 1
  00864	8b 4d 0c	 mov	 ecx, DWORD PTR _parent_viewpoint$[ebp]
  00867	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  0086c	f3 0f 59 49 28	 mulss	 xmm1, DWORD PTR [ecx+40]
  00871	f3 0f 58 c1	 addss	 xmm0, xmm1
  00875	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _vp$[ebp+40], xmm0

; 664  : 	vp.zv.z = ( ( relative_attitude[2][0] * parent_viewpoint->xv.z ) + ( relative_attitude[2][1] * parent_viewpoint->yv.z ) + ( relative_attitude[2][2] * parent_viewpoint->zv.z ) );

  0087d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00882	d1 e0		 shl	 eax, 1
  00884	8d 4c 05 cc	 lea	 ecx, DWORD PTR _relative_attitude$[ebp+eax]
  00888	ba 04 00 00 00	 mov	 edx, 4
  0088d	6b c2 00	 imul	 eax, edx, 0
  00890	8b 55 0c	 mov	 edx, DWORD PTR _parent_viewpoint$[ebp]
  00893	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00898	f3 0f 59 42 14	 mulss	 xmm0, DWORD PTR [edx+20]
  0089d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  008a2	d1 e0		 shl	 eax, 1
  008a4	8d 4c 05 cc	 lea	 ecx, DWORD PTR _relative_attitude$[ebp+eax]
  008a8	ba 04 00 00 00	 mov	 edx, 4
  008ad	c1 e2 00	 shl	 edx, 0
  008b0	8b 45 0c	 mov	 eax, DWORD PTR _parent_viewpoint$[ebp]
  008b3	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  008b8	f3 0f 59 48 20	 mulss	 xmm1, DWORD PTR [eax+32]
  008bd	f3 0f 58 c1	 addss	 xmm0, xmm1
  008c1	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  008c6	d1 e1		 shl	 ecx, 1
  008c8	8d 54 0d cc	 lea	 edx, DWORD PTR _relative_attitude$[ebp+ecx]
  008cc	b8 04 00 00 00	 mov	 eax, 4
  008d1	d1 e0		 shl	 eax, 1
  008d3	8b 4d 0c	 mov	 ecx, DWORD PTR _parent_viewpoint$[ebp]
  008d6	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  008db	f3 0f 59 49 2c	 mulss	 xmm1, DWORD PTR [ecx+44]
  008e0	f3 0f 58 c1	 addss	 xmm0, xmm1
  008e4	f3 0f 11 85 40
	ff ff ff	 movss	 DWORD PTR _vp$[ebp+44], xmm0

; 665  : 
; 666  : 	//
; 667  : 	// Calculate the main matrix to transform the points to the screen
; 668  : 	//
; 669  : 
; 670  : 	rotation_3d[0][0] = ( ( vp.xv.x * visual_3d_vp->xv.x ) + ( vp.xv.y * visual_3d_vp->xv.y ) + ( vp.xv.z * visual_3d_vp->xv.z ) );

  008ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  008f1	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _vp$[ebp+12]
  008f9	f3 0f 59 40 0c	 mulss	 xmm0, DWORD PTR [eax+12]
  008fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00904	f3 0f 10 8d 24
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+16]
  0090c	f3 0f 59 49 10	 mulss	 xmm1, DWORD PTR [ecx+16]
  00911	f3 0f 58 c1	 addss	 xmm0, xmm1
  00915	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0091b	f3 0f 10 8d 28
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+20]
  00923	f3 0f 59 4a 14	 mulss	 xmm1, DWORD PTR [edx+20]
  00928	f3 0f 58 c1	 addss	 xmm0, xmm1
  0092c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00931	6b c8 00	 imul	 ecx, eax, 0
  00934	ba 04 00 00 00	 mov	 edx, 4
  00939	6b c2 00	 imul	 eax, edx, 0
  0093c	f3 0f 11 84 01
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax], xmm0

; 671  : 	rotation_3d[0][1] = ( ( vp.xv.x * visual_3d_vp->yv.x ) + ( vp.xv.y * visual_3d_vp->yv.y ) + ( vp.xv.z * visual_3d_vp->yv.z ) );

  00945	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0094a	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _vp$[ebp+12]
  00952	f3 0f 59 40 18	 mulss	 xmm0, DWORD PTR [eax+24]
  00957	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0095d	f3 0f 10 8d 24
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+16]
  00965	f3 0f 59 49 1c	 mulss	 xmm1, DWORD PTR [ecx+28]
  0096a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0096e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00974	f3 0f 10 8d 28
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+20]
  0097c	f3 0f 59 4a 20	 mulss	 xmm1, DWORD PTR [edx+32]
  00981	f3 0f 58 c1	 addss	 xmm0, xmm1
  00985	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0098a	6b c8 00	 imul	 ecx, eax, 0
  0098d	ba 04 00 00 00	 mov	 edx, 4
  00992	c1 e2 00	 shl	 edx, 0
  00995	f3 0f 11 84 11
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx], xmm0

; 672  : 	rotation_3d[0][2] = ( ( vp.xv.x * visual_3d_vp->zv.x ) + ( vp.xv.y * visual_3d_vp->zv.y ) + ( vp.xv.z * visual_3d_vp->zv.z ) );

  0099e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  009a3	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _vp$[ebp+12]
  009ab	f3 0f 59 40 24	 mulss	 xmm0, DWORD PTR [eax+36]
  009b0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  009b6	f3 0f 10 8d 24
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+16]
  009be	f3 0f 59 49 28	 mulss	 xmm1, DWORD PTR [ecx+40]
  009c3	f3 0f 58 c1	 addss	 xmm0, xmm1
  009c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  009cd	f3 0f 10 8d 28
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+20]
  009d5	f3 0f 59 4a 2c	 mulss	 xmm1, DWORD PTR [edx+44]
  009da	f3 0f 58 c1	 addss	 xmm0, xmm1
  009de	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  009e3	6b c8 00	 imul	 ecx, eax, 0
  009e6	ba 04 00 00 00	 mov	 edx, 4
  009eb	d1 e2		 shl	 edx, 1
  009ed	f3 0f 11 84 11
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx], xmm0

; 673  : 
; 674  : 	rotation_3d[1][0] = ( ( vp.yv.x * visual_3d_vp->xv.x ) + ( vp.yv.y * visual_3d_vp->xv.y ) + ( vp.yv.z * visual_3d_vp->xv.z ) );

  009f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  009fb	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _vp$[ebp+24]
  00a03	f3 0f 59 40 0c	 mulss	 xmm0, DWORD PTR [eax+12]
  00a08	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00a0e	f3 0f 10 8d 30
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+28]
  00a16	f3 0f 59 49 10	 mulss	 xmm1, DWORD PTR [ecx+16]
  00a1b	f3 0f 58 c1	 addss	 xmm0, xmm1
  00a1f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00a25	f3 0f 10 8d 34
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+32]
  00a2d	f3 0f 59 4a 14	 mulss	 xmm1, DWORD PTR [edx+20]
  00a32	f3 0f 58 c1	 addss	 xmm0, xmm1
  00a36	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00a3b	c1 e0 00	 shl	 eax, 0
  00a3e	b9 04 00 00 00	 mov	 ecx, 4
  00a43	6b d1 00	 imul	 edx, ecx, 0
  00a46	f3 0f 11 84 10
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], xmm0

; 675  : 	rotation_3d[1][1] = ( ( vp.yv.x * visual_3d_vp->yv.x ) + ( vp.yv.y * visual_3d_vp->yv.y ) + ( vp.yv.z * visual_3d_vp->yv.z ) );

  00a4f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00a54	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _vp$[ebp+24]
  00a5c	f3 0f 59 40 18	 mulss	 xmm0, DWORD PTR [eax+24]
  00a61	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00a67	f3 0f 10 8d 30
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+28]
  00a6f	f3 0f 59 49 1c	 mulss	 xmm1, DWORD PTR [ecx+28]
  00a74	f3 0f 58 c1	 addss	 xmm0, xmm1
  00a78	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00a7e	f3 0f 10 8d 34
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+32]
  00a86	f3 0f 59 4a 20	 mulss	 xmm1, DWORD PTR [edx+32]
  00a8b	f3 0f 58 c1	 addss	 xmm0, xmm1
  00a8f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00a94	c1 e0 00	 shl	 eax, 0
  00a97	b9 04 00 00 00	 mov	 ecx, 4
  00a9c	c1 e1 00	 shl	 ecx, 0
  00a9f	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], xmm0

; 676  : 	rotation_3d[1][2] = ( ( vp.yv.x * visual_3d_vp->zv.x ) + ( vp.yv.y * visual_3d_vp->zv.y ) + ( vp.yv.z * visual_3d_vp->zv.z ) );

  00aa8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00aad	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _vp$[ebp+24]
  00ab5	f3 0f 59 40 24	 mulss	 xmm0, DWORD PTR [eax+36]
  00aba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00ac0	f3 0f 10 8d 30
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+28]
  00ac8	f3 0f 59 49 28	 mulss	 xmm1, DWORD PTR [ecx+40]
  00acd	f3 0f 58 c1	 addss	 xmm0, xmm1
  00ad1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00ad7	f3 0f 10 8d 34
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+32]
  00adf	f3 0f 59 4a 2c	 mulss	 xmm1, DWORD PTR [edx+44]
  00ae4	f3 0f 58 c1	 addss	 xmm0, xmm1
  00ae8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00aed	c1 e0 00	 shl	 eax, 0
  00af0	b9 04 00 00 00	 mov	 ecx, 4
  00af5	d1 e1		 shl	 ecx, 1
  00af7	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], xmm0

; 677  : 
; 678  : 	rotation_3d[2][0] = ( ( vp.zv.x * visual_3d_vp->xv.x ) + ( vp.zv.y * visual_3d_vp->xv.y ) + ( vp.zv.z * visual_3d_vp->xv.z ) );

  00b00	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00b05	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _vp$[ebp+36]
  00b0d	f3 0f 59 40 0c	 mulss	 xmm0, DWORD PTR [eax+12]
  00b12	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00b18	f3 0f 10 8d 3c
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+40]
  00b20	f3 0f 59 49 10	 mulss	 xmm1, DWORD PTR [ecx+16]
  00b25	f3 0f 58 c1	 addss	 xmm0, xmm1
  00b29	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00b2f	f3 0f 10 8d 40
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+44]
  00b37	f3 0f 59 4a 14	 mulss	 xmm1, DWORD PTR [edx+20]
  00b3c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00b40	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00b45	d1 e0		 shl	 eax, 1
  00b47	b9 04 00 00 00	 mov	 ecx, 4
  00b4c	6b d1 00	 imul	 edx, ecx, 0
  00b4f	f3 0f 11 84 10
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], xmm0

; 679  : 	rotation_3d[2][1] = ( ( vp.zv.x * visual_3d_vp->yv.x ) + ( vp.zv.y * visual_3d_vp->yv.y ) + ( vp.zv.z * visual_3d_vp->yv.z ) );

  00b58	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00b5d	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _vp$[ebp+36]
  00b65	f3 0f 59 40 18	 mulss	 xmm0, DWORD PTR [eax+24]
  00b6a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00b70	f3 0f 10 8d 3c
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+40]
  00b78	f3 0f 59 49 1c	 mulss	 xmm1, DWORD PTR [ecx+28]
  00b7d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00b81	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00b87	f3 0f 10 8d 40
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+44]
  00b8f	f3 0f 59 4a 20	 mulss	 xmm1, DWORD PTR [edx+32]
  00b94	f3 0f 58 c1	 addss	 xmm0, xmm1
  00b98	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00b9d	d1 e0		 shl	 eax, 1
  00b9f	b9 04 00 00 00	 mov	 ecx, 4
  00ba4	c1 e1 00	 shl	 ecx, 0
  00ba7	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], xmm0

; 680  : 	rotation_3d[2][2] = ( ( vp.zv.x * visual_3d_vp->zv.x ) + ( vp.zv.y * visual_3d_vp->zv.y ) + ( vp.zv.z * visual_3d_vp->zv.z ) );

  00bb0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00bb5	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _vp$[ebp+36]
  00bbd	f3 0f 59 40 24	 mulss	 xmm0, DWORD PTR [eax+36]
  00bc2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00bc8	f3 0f 10 8d 3c
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+40]
  00bd0	f3 0f 59 49 28	 mulss	 xmm1, DWORD PTR [ecx+40]
  00bd5	f3 0f 58 c1	 addss	 xmm0, xmm1
  00bd9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00bdf	f3 0f 10 8d 40
	ff ff ff	 movss	 xmm1, DWORD PTR _vp$[ebp+44]
  00be7	f3 0f 59 4a 2c	 mulss	 xmm1, DWORD PTR [edx+44]
  00bec	f3 0f 58 c1	 addss	 xmm0, xmm1
  00bf0	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00bf5	d1 e0		 shl	 eax, 1
  00bf7	b9 04 00 00 00	 mov	 ecx, 4
  00bfc	d1 e1		 shl	 ecx, 1
  00bfe	f3 0f 11 84 08
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx], xmm0

; 681  : 
; 682  : 	//
; 683  : 	// Scale the rotation matrix
; 684  : 	//
; 685  : 
; 686  : 	rotation_3d[0][0] *= object_3d_scale.x;

  00c07	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00c0c	6b c8 00	 imul	 ecx, eax, 0
  00c0f	ba 04 00 00 00	 mov	 edx, 4
  00c14	6b c2 00	 imul	 eax, edx, 0
  00c17	f3 0f 10 84 01
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax]
  00c20	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A
  00c28	b9 04 00 00 00	 mov	 ecx, 4
  00c2d	6b d1 00	 imul	 edx, ecx, 0
  00c30	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00c35	6b c8 00	 imul	 ecx, eax, 0
  00c38	f3 0f 11 84 11
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx], xmm0

; 687  : 	rotation_3d[1][0] *= object_3d_scale.y;

  00c41	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00c46	c1 e0 00	 shl	 eax, 0
  00c49	b9 04 00 00 00	 mov	 ecx, 4
  00c4e	6b d1 00	 imul	 edx, ecx, 0
  00c51	f3 0f 10 84 10
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  00c5a	f3 0f 59 05 04
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+4
  00c62	b8 04 00 00 00	 mov	 eax, 4
  00c67	6b c8 00	 imul	 ecx, eax, 0
  00c6a	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00c6f	c1 e2 00	 shl	 edx, 0
  00c72	f3 0f 11 84 0a
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[edx+ecx], xmm0

; 688  : 	rotation_3d[2][0] *= object_3d_scale.z;

  00c7b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00c80	d1 e0		 shl	 eax, 1
  00c82	b9 04 00 00 00	 mov	 ecx, 4
  00c87	6b d1 00	 imul	 edx, ecx, 0
  00c8a	f3 0f 10 84 10
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx]
  00c93	f3 0f 59 05 08
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+8
  00c9b	b8 04 00 00 00	 mov	 eax, 4
  00ca0	6b c8 00	 imul	 ecx, eax, 0
  00ca3	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00ca8	d1 e2		 shl	 edx, 1
  00caa	f3 0f 11 84 0a
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[edx+ecx], xmm0

; 689  : 
; 690  : 	rotation_3d[0][1] *= object_3d_scale.x;

  00cb3	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00cb8	6b c8 00	 imul	 ecx, eax, 0
  00cbb	ba 04 00 00 00	 mov	 edx, 4
  00cc0	c1 e2 00	 shl	 edx, 0
  00cc3	f3 0f 10 84 11
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00ccc	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A
  00cd4	b8 04 00 00 00	 mov	 eax, 4
  00cd9	c1 e0 00	 shl	 eax, 0
  00cdc	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00ce1	6b d1 00	 imul	 edx, ecx, 0
  00ce4	f3 0f 11 84 02
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[edx+eax], xmm0

; 691  : 	rotation_3d[1][1] *= object_3d_scale.y;

  00ced	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00cf2	c1 e0 00	 shl	 eax, 0
  00cf5	b9 04 00 00 00	 mov	 ecx, 4
  00cfa	c1 e1 00	 shl	 ecx, 0
  00cfd	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00d06	f3 0f 59 05 04
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+4
  00d0e	ba 04 00 00 00	 mov	 edx, 4
  00d13	c1 e2 00	 shl	 edx, 0
  00d16	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00d1b	c1 e0 00	 shl	 eax, 0
  00d1e	f3 0f 11 84 10
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], xmm0

; 692  : 	rotation_3d[2][1] *= object_3d_scale.z;

  00d27	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00d2c	d1 e0		 shl	 eax, 1
  00d2e	b9 04 00 00 00	 mov	 ecx, 4
  00d33	c1 e1 00	 shl	 ecx, 0
  00d36	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00d3f	f3 0f 59 05 08
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+8
  00d47	ba 04 00 00 00	 mov	 edx, 4
  00d4c	c1 e2 00	 shl	 edx, 0
  00d4f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00d54	d1 e0		 shl	 eax, 1
  00d56	f3 0f 11 84 10
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], xmm0

; 693  : 
; 694  : 	rotation_3d[0][2] *= object_3d_scale.x;

  00d5f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00d64	6b c8 00	 imul	 ecx, eax, 0
  00d67	ba 04 00 00 00	 mov	 edx, 4
  00d6c	d1 e2		 shl	 edx, 1
  00d6e	f3 0f 10 84 11
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx]
  00d77	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A
  00d7f	b8 04 00 00 00	 mov	 eax, 4
  00d84	d1 e0		 shl	 eax, 1
  00d86	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00d8b	6b d1 00	 imul	 edx, ecx, 0
  00d8e	f3 0f 11 84 02
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[edx+eax], xmm0

; 695  : 	rotation_3d[1][2] *= object_3d_scale.y;

  00d97	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00d9c	c1 e0 00	 shl	 eax, 0
  00d9f	b9 04 00 00 00	 mov	 ecx, 4
  00da4	d1 e1		 shl	 ecx, 1
  00da6	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00daf	f3 0f 59 05 04
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+4
  00db7	ba 04 00 00 00	 mov	 edx, 4
  00dbc	d1 e2		 shl	 edx, 1
  00dbe	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00dc3	c1 e0 00	 shl	 eax, 0
  00dc6	f3 0f 11 84 10
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], xmm0

; 696  : 	rotation_3d[2][2] *= object_3d_scale.z;

  00dcf	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00dd4	d1 e0		 shl	 eax, 1
  00dd6	b9 04 00 00 00	 mov	 ecx, 4
  00ddb	d1 e1		 shl	 ecx, 1
  00ddd	f3 0f 10 84 08
	00 00 00 00	 movss	 xmm0, DWORD PTR ?rotation_3d@@3PAY02MA[eax+ecx]
  00de6	f3 0f 59 05 08
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+8
  00dee	ba 04 00 00 00	 mov	 edx, 4
  00df3	d1 e2		 shl	 edx, 1
  00df5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00dfa	d1 e0		 shl	 eax, 1
  00dfc	f3 0f 11 84 10
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[eax+edx], xmm0

; 697  : 
; 698  : 	if ( object_number )

  00e05	83 7d f0 00	 cmp	 DWORD PTR _object_number$[ebp], 0
  00e09	0f 84 77 0a 00
	00		 je	 $LN18@draw_sub_e

; 699  : 	{
; 700  : 		//
; 701  : 		// Calculate the relative camera position in the object viewspace
; 702  : 		//
; 703  : 
; 704  : 		{
; 705  : 			vec3d
; 706  : 				rel_pos;
; 707  : 
; 708  : 			rel_pos.x = visual_3d_vp->x - vp.x;

  00e0f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00e14	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00e18	f3 0f 5c 85 14
	ff ff ff	 subss	 xmm0, DWORD PTR _vp$[ebp]
  00e20	f3 0f 11 85 a0
	fe ff ff	 movss	 DWORD PTR _rel_pos$10[ebp], xmm0

; 709  : 			rel_pos.y = visual_3d_vp->y - vp.y;

  00e28	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00e2d	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00e32	f3 0f 5c 85 18
	ff ff ff	 subss	 xmm0, DWORD PTR _vp$[ebp+4]
  00e3a	f3 0f 11 85 a4
	fe ff ff	 movss	 DWORD PTR _rel_pos$10[ebp+4], xmm0

; 710  : 			rel_pos.z = visual_3d_vp->z - vp.z;

  00e42	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00e47	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00e4c	f3 0f 5c 85 1c
	ff ff ff	 subss	 xmm0, DWORD PTR _vp$[ebp+8]
  00e54	f3 0f 11 85 a8
	fe ff ff	 movss	 DWORD PTR _rel_pos$10[ebp+8], xmm0

; 711  : 
; 712  : 			object_camera_position.x = ( rel_pos.x * vp.attitude[0][0] + rel_pos.y * vp.attitude[0][1] + rel_pos.z * vp.attitude[0][2] );

  00e5c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00e61	6b c8 00	 imul	 ecx, eax, 0
  00e64	8d 94 0d 20 ff
	ff ff		 lea	 edx, DWORD PTR _vp$[ebp+ecx+12]
  00e6b	b8 04 00 00 00	 mov	 eax, 4
  00e70	6b c8 00	 imul	 ecx, eax, 0
  00e73	f3 0f 10 85 a0
	fe ff ff	 movss	 xmm0, DWORD PTR _rel_pos$10[ebp]
  00e7b	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  00e80	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00e85	6b c2 00	 imul	 eax, edx, 0
  00e88	8d 8c 05 20 ff
	ff ff		 lea	 ecx, DWORD PTR _vp$[ebp+eax+12]
  00e8f	ba 04 00 00 00	 mov	 edx, 4
  00e94	c1 e2 00	 shl	 edx, 0
  00e97	f3 0f 10 8d a4
	fe ff ff	 movss	 xmm1, DWORD PTR _rel_pos$10[ebp+4]
  00e9f	f3 0f 59 0c 11	 mulss	 xmm1, DWORD PTR [ecx+edx]
  00ea4	f3 0f 58 c1	 addss	 xmm0, xmm1
  00ea8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00ead	6b c8 00	 imul	 ecx, eax, 0
  00eb0	8d 94 0d 20 ff
	ff ff		 lea	 edx, DWORD PTR _vp$[ebp+ecx+12]
  00eb7	b8 04 00 00 00	 mov	 eax, 4
  00ebc	d1 e0		 shl	 eax, 1
  00ebe	f3 0f 10 8d a8
	fe ff ff	 movss	 xmm1, DWORD PTR _rel_pos$10[ebp+8]
  00ec6	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  00ecb	f3 0f 58 c1	 addss	 xmm0, xmm1
  00ecf	f3 0f 11 45 9c	 movss	 DWORD PTR _object_camera_position$[ebp], xmm0

; 713  : 			object_camera_position.y = ( rel_pos.x * vp.attitude[1][0] + rel_pos.y * vp.attitude[1][1] + rel_pos.z * vp.attitude[1][2] );

  00ed4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00ed9	c1 e0 00	 shl	 eax, 0
  00edc	8d 8c 05 20 ff
	ff ff		 lea	 ecx, DWORD PTR _vp$[ebp+eax+12]
  00ee3	ba 04 00 00 00	 mov	 edx, 4
  00ee8	6b c2 00	 imul	 eax, edx, 0
  00eeb	f3 0f 10 85 a0
	fe ff ff	 movss	 xmm0, DWORD PTR _rel_pos$10[ebp]
  00ef3	f3 0f 59 04 01	 mulss	 xmm0, DWORD PTR [ecx+eax]
  00ef8	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00efd	c1 e1 00	 shl	 ecx, 0
  00f00	8d 94 0d 20 ff
	ff ff		 lea	 edx, DWORD PTR _vp$[ebp+ecx+12]
  00f07	b8 04 00 00 00	 mov	 eax, 4
  00f0c	c1 e0 00	 shl	 eax, 0
  00f0f	f3 0f 10 8d a4
	fe ff ff	 movss	 xmm1, DWORD PTR _rel_pos$10[ebp+4]
  00f17	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  00f1c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00f20	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00f25	c1 e1 00	 shl	 ecx, 0
  00f28	8d 94 0d 20 ff
	ff ff		 lea	 edx, DWORD PTR _vp$[ebp+ecx+12]
  00f2f	b8 04 00 00 00	 mov	 eax, 4
  00f34	d1 e0		 shl	 eax, 1
  00f36	f3 0f 10 8d a8
	fe ff ff	 movss	 xmm1, DWORD PTR _rel_pos$10[ebp+8]
  00f3e	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  00f43	f3 0f 58 c1	 addss	 xmm0, xmm1
  00f47	f3 0f 11 45 a0	 movss	 DWORD PTR _object_camera_position$[ebp+4], xmm0

; 714  : 			object_camera_position.z = ( rel_pos.x * vp.attitude[2][0] + rel_pos.y * vp.attitude[2][1] + rel_pos.z * vp.attitude[2][2] );

  00f4c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00f51	d1 e0		 shl	 eax, 1
  00f53	8d 8c 05 20 ff
	ff ff		 lea	 ecx, DWORD PTR _vp$[ebp+eax+12]
  00f5a	ba 04 00 00 00	 mov	 edx, 4
  00f5f	6b c2 00	 imul	 eax, edx, 0
  00f62	f3 0f 10 85 a0
	fe ff ff	 movss	 xmm0, DWORD PTR _rel_pos$10[ebp]
  00f6a	f3 0f 59 04 01	 mulss	 xmm0, DWORD PTR [ecx+eax]
  00f6f	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00f74	d1 e1		 shl	 ecx, 1
  00f76	8d 94 0d 20 ff
	ff ff		 lea	 edx, DWORD PTR _vp$[ebp+ecx+12]
  00f7d	b8 04 00 00 00	 mov	 eax, 4
  00f82	c1 e0 00	 shl	 eax, 0
  00f85	f3 0f 10 8d a4
	fe ff ff	 movss	 xmm1, DWORD PTR _rel_pos$10[ebp+4]
  00f8d	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  00f92	f3 0f 58 c1	 addss	 xmm0, xmm1
  00f96	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00f9b	d1 e1		 shl	 ecx, 1
  00f9d	8d 94 0d 20 ff
	ff ff		 lea	 edx, DWORD PTR _vp$[ebp+ecx+12]
  00fa4	b8 04 00 00 00	 mov	 eax, 4
  00fa9	d1 e0		 shl	 eax, 1
  00fab	f3 0f 10 8d a8
	fe ff ff	 movss	 xmm1, DWORD PTR _rel_pos$10[ebp+8]
  00fb3	f3 0f 59 0c 02	 mulss	 xmm1, DWORD PTR [edx+eax]
  00fb8	f3 0f 58 c1	 addss	 xmm0, xmm1
  00fbc	f3 0f 11 45 a4	 movss	 DWORD PTR _object_camera_position$[ebp+8], xmm0

; 715  : 
; 716  : 			object_camera_direction.x = ( visual_3d_vp->zv.x * vp.attitude[0][0] + visual_3d_vp->zv.y * vp.attitude[1][0] + visual_3d_vp->zv.z * vp.attitude[2][0] );

  00fc1	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00fc6	6b c8 00	 imul	 ecx, eax, 0
  00fc9	8d 94 0d 20 ff
	ff ff		 lea	 edx, DWORD PTR _vp$[ebp+ecx+12]
  00fd0	b8 04 00 00 00	 mov	 eax, 4
  00fd5	6b c8 00	 imul	 ecx, eax, 0
  00fd8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00fdd	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [eax+36]
  00fe2	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  00fe7	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00fec	c1 e1 00	 shl	 ecx, 0
  00fef	8d 94 0d 20 ff
	ff ff		 lea	 edx, DWORD PTR _vp$[ebp+ecx+12]
  00ff6	b8 04 00 00 00	 mov	 eax, 4
  00ffb	6b c8 00	 imul	 ecx, eax, 0
  00ffe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  01003	f3 0f 10 48 28	 movss	 xmm1, DWORD PTR [eax+40]
  01008	f3 0f 59 0c 0a	 mulss	 xmm1, DWORD PTR [edx+ecx]
  0100d	f3 0f 58 c1	 addss	 xmm0, xmm1
  01011	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01016	d1 e1		 shl	 ecx, 1
  01018	8d 94 0d 20 ff
	ff ff		 lea	 edx, DWORD PTR _vp$[ebp+ecx+12]
  0101f	b8 04 00 00 00	 mov	 eax, 4
  01024	6b c8 00	 imul	 ecx, eax, 0
  01027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0102c	f3 0f 10 48 2c	 movss	 xmm1, DWORD PTR [eax+44]
  01031	f3 0f 59 0c 0a	 mulss	 xmm1, DWORD PTR [edx+ecx]
  01036	f3 0f 58 c1	 addss	 xmm0, xmm1
  0103a	f3 0f 11 45 90	 movss	 DWORD PTR _object_camera_direction$[ebp], xmm0

; 717  : 			object_camera_direction.y = ( visual_3d_vp->zv.x * vp.attitude[0][1] + visual_3d_vp->zv.y * vp.attitude[1][1] + visual_3d_vp->zv.z * vp.attitude[2][1] );

  0103f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01044	6b c8 00	 imul	 ecx, eax, 0
  01047	8d 94 0d 20 ff
	ff ff		 lea	 edx, DWORD PTR _vp$[ebp+ecx+12]
  0104e	b8 04 00 00 00	 mov	 eax, 4
  01053	c1 e0 00	 shl	 eax, 0
  01056	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0105c	f3 0f 10 41 24	 movss	 xmm0, DWORD PTR [ecx+36]
  01061	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  01066	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0106b	c1 e2 00	 shl	 edx, 0
  0106e	8d 84 15 20 ff
	ff ff		 lea	 eax, DWORD PTR _vp$[ebp+edx+12]
  01075	b9 04 00 00 00	 mov	 ecx, 4
  0107a	c1 e1 00	 shl	 ecx, 0
  0107d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  01083	f3 0f 10 4a 28	 movss	 xmm1, DWORD PTR [edx+40]
  01088	f3 0f 59 0c 08	 mulss	 xmm1, DWORD PTR [eax+ecx]
  0108d	f3 0f 58 c1	 addss	 xmm0, xmm1
  01091	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01096	d1 e0		 shl	 eax, 1
  01098	8d 8c 05 20 ff
	ff ff		 lea	 ecx, DWORD PTR _vp$[ebp+eax+12]
  0109f	ba 04 00 00 00	 mov	 edx, 4
  010a4	c1 e2 00	 shl	 edx, 0
  010a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  010ac	f3 0f 10 48 2c	 movss	 xmm1, DWORD PTR [eax+44]
  010b1	f3 0f 59 0c 11	 mulss	 xmm1, DWORD PTR [ecx+edx]
  010b6	f3 0f 58 c1	 addss	 xmm0, xmm1
  010ba	f3 0f 11 45 94	 movss	 DWORD PTR _object_camera_direction$[ebp+4], xmm0

; 718  : 			object_camera_direction.z = ( visual_3d_vp->zv.x * vp.attitude[0][2] + visual_3d_vp->zv.y * vp.attitude[1][2] + visual_3d_vp->zv.z * vp.attitude[2][2] );

  010bf	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  010c4	6b c8 00	 imul	 ecx, eax, 0
  010c7	8d 94 0d 20 ff
	ff ff		 lea	 edx, DWORD PTR _vp$[ebp+ecx+12]
  010ce	b8 04 00 00 00	 mov	 eax, 4
  010d3	d1 e0		 shl	 eax, 1
  010d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  010db	f3 0f 10 41 24	 movss	 xmm0, DWORD PTR [ecx+36]
  010e0	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  010e5	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  010ea	c1 e2 00	 shl	 edx, 0
  010ed	8d 84 15 20 ff
	ff ff		 lea	 eax, DWORD PTR _vp$[ebp+edx+12]
  010f4	b9 04 00 00 00	 mov	 ecx, 4
  010f9	d1 e1		 shl	 ecx, 1
  010fb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  01101	f3 0f 10 4a 28	 movss	 xmm1, DWORD PTR [edx+40]
  01106	f3 0f 59 0c 08	 mulss	 xmm1, DWORD PTR [eax+ecx]
  0110b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0110f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01114	d1 e0		 shl	 eax, 1
  01116	8d 8c 05 20 ff
	ff ff		 lea	 ecx, DWORD PTR _vp$[ebp+eax+12]
  0111d	ba 04 00 00 00	 mov	 edx, 4
  01122	d1 e2		 shl	 edx, 1
  01124	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  01129	f3 0f 10 48 2c	 movss	 xmm1, DWORD PTR [eax+44]
  0112e	f3 0f 59 0c 11	 mulss	 xmm1, DWORD PTR [ecx+edx]
  01133	f3 0f 58 c1	 addss	 xmm0, xmm1
  01137	f3 0f 11 45 98	 movss	 DWORD PTR _object_camera_direction$[ebp+8], xmm0

; 719  : 		}
; 720  : 
; 721  : 		//
; 722  : 		// Calculate the vector from the object to the viewpoint, in the object's view system
; 723  : 		//
; 724  : 
; 725  : 		{
; 726  : 			float
; 727  : 				x,
; 728  : 				y,
; 729  : 				z;
; 730  : 
; 731  : 			x = ( ( visual_3d_vp->x - vp.x ) * vp.xv.x );

  0113c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  01141	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01145	f3 0f 5c 85 14
	ff ff ff	 subss	 xmm0, DWORD PTR _vp$[ebp]
  0114d	f3 0f 59 85 20
	ff ff ff	 mulss	 xmm0, DWORD PTR _vp$[ebp+12]
  01155	f3 0f 11 85 9c
	fe ff ff	 movss	 DWORD PTR _x$9[ebp], xmm0

; 732  : 			x += ( ( visual_3d_vp->y - vp.y ) *  vp.xv.y );

  0115d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  01162	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  01167	f3 0f 5c 85 18
	ff ff ff	 subss	 xmm0, DWORD PTR _vp$[ebp+4]
  0116f	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _vp$[ebp+16]
  01177	f3 0f 58 85 9c
	fe ff ff	 addss	 xmm0, DWORD PTR _x$9[ebp]
  0117f	f3 0f 11 85 9c
	fe ff ff	 movss	 DWORD PTR _x$9[ebp], xmm0

; 733  : 			x += ( ( visual_3d_vp->z - vp.z ) *  vp.xv.z );

  01187	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0118c	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01191	f3 0f 5c 85 1c
	ff ff ff	 subss	 xmm0, DWORD PTR _vp$[ebp+8]
  01199	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _vp$[ebp+20]
  011a1	f3 0f 58 85 9c
	fe ff ff	 addss	 xmm0, DWORD PTR _x$9[ebp]
  011a9	f3 0f 11 85 9c
	fe ff ff	 movss	 DWORD PTR _x$9[ebp], xmm0

; 734  : 
; 735  : 			y = ( ( visual_3d_vp->x - vp.x ) * vp.yv.x );

  011b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  011b6	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  011ba	f3 0f 5c 85 14
	ff ff ff	 subss	 xmm0, DWORD PTR _vp$[ebp]
  011c2	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _vp$[ebp+24]
  011ca	f3 0f 11 85 98
	fe ff ff	 movss	 DWORD PTR _y$8[ebp], xmm0

; 736  : 			y += ( ( visual_3d_vp->y - vp.y ) *  vp.yv.y );

  011d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  011d7	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  011dc	f3 0f 5c 85 18
	ff ff ff	 subss	 xmm0, DWORD PTR _vp$[ebp+4]
  011e4	f3 0f 59 85 30
	ff ff ff	 mulss	 xmm0, DWORD PTR _vp$[ebp+28]
  011ec	f3 0f 58 85 98
	fe ff ff	 addss	 xmm0, DWORD PTR _y$8[ebp]
  011f4	f3 0f 11 85 98
	fe ff ff	 movss	 DWORD PTR _y$8[ebp], xmm0

; 737  : 			y += ( ( visual_3d_vp->z - vp.z ) *  vp.yv.z );

  011fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  01201	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01206	f3 0f 5c 85 1c
	ff ff ff	 subss	 xmm0, DWORD PTR _vp$[ebp+8]
  0120e	f3 0f 59 85 34
	ff ff ff	 mulss	 xmm0, DWORD PTR _vp$[ebp+32]
  01216	f3 0f 58 85 98
	fe ff ff	 addss	 xmm0, DWORD PTR _y$8[ebp]
  0121e	f3 0f 11 85 98
	fe ff ff	 movss	 DWORD PTR _y$8[ebp], xmm0

; 738  : 
; 739  : 			z = ( ( visual_3d_vp->x - vp.x ) * vp.zv.x );

  01226	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0122b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0122f	f3 0f 5c 85 14
	ff ff ff	 subss	 xmm0, DWORD PTR _vp$[ebp]
  01237	f3 0f 59 85 38
	ff ff ff	 mulss	 xmm0, DWORD PTR _vp$[ebp+36]
  0123f	f3 0f 11 85 94
	fe ff ff	 movss	 DWORD PTR _z$7[ebp], xmm0

; 740  : 			z += ( ( visual_3d_vp->y - vp.y ) *  vp.zv.y );

  01247	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0124c	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  01251	f3 0f 5c 85 18
	ff ff ff	 subss	 xmm0, DWORD PTR _vp$[ebp+4]
  01259	f3 0f 59 85 3c
	ff ff ff	 mulss	 xmm0, DWORD PTR _vp$[ebp+40]
  01261	f3 0f 58 85 94
	fe ff ff	 addss	 xmm0, DWORD PTR _z$7[ebp]
  01269	f3 0f 11 85 94
	fe ff ff	 movss	 DWORD PTR _z$7[ebp], xmm0

; 741  : 			z += ( ( visual_3d_vp->z - vp.z ) *  vp.zv.z );

  01271	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  01276	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0127b	f3 0f 5c 85 1c
	ff ff ff	 subss	 xmm0, DWORD PTR _vp$[ebp+8]
  01283	f3 0f 59 85 40
	ff ff ff	 mulss	 xmm0, DWORD PTR _vp$[ebp+44]
  0128b	f3 0f 58 85 94
	fe ff ff	 addss	 xmm0, DWORD PTR _z$7[ebp]
  01293	f3 0f 11 85 94
	fe ff ff	 movss	 DWORD PTR _z$7[ebp], xmm0

; 742  : 
; 743  : 			object_pos.x = x;

  0129b	f3 0f 10 85 9c
	fe ff ff	 movss	 xmm0, DWORD PTR _x$9[ebp]
  012a3	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _object_pos$[ebp], xmm0

; 744  : 			object_pos.y = y;

  012ab	f3 0f 10 85 98
	fe ff ff	 movss	 xmm0, DWORD PTR _y$8[ebp]
  012b3	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _object_pos$[ebp+4], xmm0

; 745  : 			object_pos.z = z;

  012bb	f3 0f 10 85 94
	fe ff ff	 movss	 xmm0, DWORD PTR _z$7[ebp]
  012c3	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _object_pos$[ebp+8], xmm0

; 746  : 
; 747  : 			object_unit_pos.x = -object_pos.x;

  012cb	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _object_pos$[ebp]
  012d3	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  012da	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _object_unit_pos$[ebp], xmm0

; 748  : 			object_unit_pos.y = -object_pos.y;

  012e2	f3 0f 10 85 70
	ff ff ff	 movss	 xmm0, DWORD PTR _object_pos$[ebp+4]
  012ea	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  012f1	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _object_unit_pos$[ebp+4], xmm0

; 749  : 			object_unit_pos.z = -object_pos.z;

  012f9	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _object_pos$[ebp+8]
  01301	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01308	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _object_unit_pos$[ebp+8], xmm0

; 750  : 
; 751  : 			normalise_any_3d_vector ( &object_unit_pos );

  01310	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _object_unit_pos$[ebp]
  01316	50		 push	 eax
  01317	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  0131c	dd d8		 fstp	 ST(0)

; 752  : 		}
; 753  : 
; 754  : 		//
; 755  : 		// Rotate the light source vector to be relative to the object.
; 756  : 		//
; 757  : 
; 758  : 		light_ptr = current_3d_lights;

  0131e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_3d_lights@@3PAULIGHT_3D_SOURCE@@A ; current_3d_lights
  01323	89 85 48 ff ff
	ff		 mov	 DWORD PTR _light_ptr$[ebp], eax

; 759  : 
; 760  : 		prev_light = NULL;

  01329	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _prev_light$[ebp], 0

; 761  : 
; 762  : 		light = NULL;

  01333	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _light$[ebp], 0

; 763  : 
; 764  : 		if ( light_ptr )

  0133d	83 bd 48 ff ff
	ff 00		 cmp	 DWORD PTR _light_ptr$[ebp], 0
  01344	0f 84 80 03 00
	00		 je	 $LN3@draw_sub_e

; 765  : 		{
; 766  : 
; 767  : 			light = &light_3d_array[object_3d_light_3d_current_base];

  0134a	6b 05 00 00 00
	00 3c		 imul	 eax, DWORD PTR ?object_3d_light_3d_current_base@@3HA, 60 ; object_3d_light_3d_current_base
  01351	05 00 00 00 00	 add	 eax, OFFSET ?light_3d_array@@3PAULIGHT_3D_SOURCE@@A ; light_3d_array
  01356	89 85 44 ff ff
	ff		 mov	 DWORD PTR _light$[ebp], eax
$LN2@draw_sub_e:

; 768  : 
; 769  : 			while ( light_ptr )

  0135c	83 bd 48 ff ff
	ff 00		 cmp	 DWORD PTR _light_ptr$[ebp], 0
  01363	0f 84 61 03 00
	00		 je	 $LN3@draw_sub_e

; 770  : 			{
; 771  : 				float
; 772  : 					lx,
; 773  : 					ly,
; 774  : 					lz;
; 775  : 
; 776  : 				this_light = &light_3d_array[object_3d_light_3d_current_base];

  01369	6b 05 00 00 00
	00 3c		 imul	 eax, DWORD PTR ?object_3d_light_3d_current_base@@3HA, 60 ; object_3d_light_3d_current_base
  01370	05 00 00 00 00	 add	 eax, OFFSET ?light_3d_array@@3PAULIGHT_3D_SOURCE@@A ; light_3d_array
  01375	89 85 50 ff ff
	ff		 mov	 DWORD PTR _this_light$[ebp], eax

; 777  : 
; 778  : 				object_3d_light_3d_current_base++;

  0137b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_3d_light_3d_current_base@@3HA ; object_3d_light_3d_current_base
  01380	83 c0 01	 add	 eax, 1
  01383	a3 00 00 00 00	 mov	 DWORD PTR ?object_3d_light_3d_current_base@@3HA, eax ; object_3d_light_3d_current_base

; 779  : 
; 780  : 				if ( prev_light )

  01388	83 bd 4c ff ff
	ff 00		 cmp	 DWORD PTR _prev_light$[ebp], 0
  0138f	74 0f		 je	 SHORT $LN12@draw_sub_e

; 781  : 				{
; 782  : 					prev_light->succ = this_light;

  01391	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _prev_light$[ebp]
  01397	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _this_light$[ebp]
  0139d	89 48 38	 mov	 DWORD PTR [eax+56], ecx
$LN12@draw_sub_e:

; 783  : 				}
; 784  : 
; 785  : 				this_light->pred = prev_light;

  013a0	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$[ebp]
  013a6	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _prev_light$[ebp]
  013ac	89 48 34	 mov	 DWORD PTR [eax+52], ecx

; 786  : 				this_light->succ = NULL;

  013af	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$[ebp]
  013b5	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 787  : 
; 788  : 				this_light->colour.red = light_ptr->colour.red;

  013bc	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$[ebp]
  013c2	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _light_ptr$[ebp]
  013c8	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  013cb	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 789  : 				this_light->colour.green = light_ptr->colour.green;

  013ce	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$[ebp]
  013d4	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _light_ptr$[ebp]
  013da	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  013dd	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 790  : 				this_light->colour.blue = light_ptr->colour.blue;

  013e0	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$[ebp]
  013e6	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _light_ptr$[ebp]
  013ec	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  013ef	89 50 20	 mov	 DWORD PTR [eax+32], edx

; 791  : 				this_light->intensity = this_light->colour.red * 0.30 + this_light->colour.green * 0.59 + this_light->colour.blue * 0.11;

  013f2	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$[ebp]
  013f8	f3 0f 5a 40 18	 cvtss2sd xmm0, DWORD PTR [eax+24]
  013fd	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd3333333333333
  01405	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _this_light$[ebp]
  0140b	f3 0f 5a 49 1c	 cvtss2sd xmm1, DWORD PTR [ecx+28]
  01410	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe2e147ae147ae1
  01418	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0141c	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR _this_light$[ebp]
  01422	f3 0f 5a 4a 20	 cvtss2sd xmm1, DWORD PTR [edx+32]
  01427	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fbc28f5c28f5c29
  0142f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  01433	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01437	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$[ebp]
  0143d	f3 0f 11 40 28	 movss	 DWORD PTR [eax+40], xmm0

; 792  : 
; 793  : 				lx = ( light_ptr->lx * vp.attitude[0][0] );

  01442	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01447	6b c8 00	 imul	 ecx, eax, 0
  0144a	8d 94 0d 20 ff
	ff ff		 lea	 edx, DWORD PTR _vp$[ebp+ecx+12]
  01451	b8 04 00 00 00	 mov	 eax, 4
  01456	6b c8 00	 imul	 ecx, eax, 0
  01459	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _light_ptr$[ebp]
  0145f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01463	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  01468	f3 0f 11 85 90
	fe ff ff	 movss	 DWORD PTR _lx$6[ebp], xmm0

; 794  : 				lx += ( light_ptr->ly * vp.attitude[0][1] );

  01470	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01475	6b c8 00	 imul	 ecx, eax, 0
  01478	8d 94 0d 20 ff
	ff ff		 lea	 edx, DWORD PTR _vp$[ebp+ecx+12]
  0147f	b8 04 00 00 00	 mov	 eax, 4
  01484	c1 e0 00	 shl	 eax, 0
  01487	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _light_ptr$[ebp]
  0148d	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  01492	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  01497	f3 0f 58 85 90
	fe ff ff	 addss	 xmm0, DWORD PTR _lx$6[ebp]
  0149f	f3 0f 11 85 90
	fe ff ff	 movss	 DWORD PTR _lx$6[ebp], xmm0

; 795  : 				lx += ( light_ptr->lz * vp.attitude[0][2] );

  014a7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  014ac	6b c8 00	 imul	 ecx, eax, 0
  014af	8d 94 0d 20 ff
	ff ff		 lea	 edx, DWORD PTR _vp$[ebp+ecx+12]
  014b6	b8 04 00 00 00	 mov	 eax, 4
  014bb	d1 e0		 shl	 eax, 1
  014bd	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _light_ptr$[ebp]
  014c3	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  014c8	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  014cd	f3 0f 58 85 90
	fe ff ff	 addss	 xmm0, DWORD PTR _lx$6[ebp]
  014d5	f3 0f 11 85 90
	fe ff ff	 movss	 DWORD PTR _lx$6[ebp], xmm0

; 796  : 
; 797  : 				ly = ( light_ptr->lx * vp.attitude[1][0] );

  014dd	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  014e2	c1 e0 00	 shl	 eax, 0
  014e5	8d 8c 05 20 ff
	ff ff		 lea	 ecx, DWORD PTR _vp$[ebp+eax+12]
  014ec	ba 04 00 00 00	 mov	 edx, 4
  014f1	6b c2 00	 imul	 eax, edx, 0
  014f4	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR _light_ptr$[ebp]
  014fa	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  014fe	f3 0f 59 04 01	 mulss	 xmm0, DWORD PTR [ecx+eax]
  01503	f3 0f 11 85 8c
	fe ff ff	 movss	 DWORD PTR _ly$5[ebp], xmm0

; 798  : 				ly += ( light_ptr->ly * vp.attitude[1][1] );

  0150b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01510	c1 e0 00	 shl	 eax, 0
  01513	8d 8c 05 20 ff
	ff ff		 lea	 ecx, DWORD PTR _vp$[ebp+eax+12]
  0151a	ba 04 00 00 00	 mov	 edx, 4
  0151f	c1 e2 00	 shl	 edx, 0
  01522	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _light_ptr$[ebp]
  01528	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0152d	f3 0f 59 04 11	 mulss	 xmm0, DWORD PTR [ecx+edx]
  01532	f3 0f 58 85 8c
	fe ff ff	 addss	 xmm0, DWORD PTR _ly$5[ebp]
  0153a	f3 0f 11 85 8c
	fe ff ff	 movss	 DWORD PTR _ly$5[ebp], xmm0

; 799  : 				ly += ( light_ptr->lz * vp.attitude[1][2] );

  01542	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  01547	c1 e0 00	 shl	 eax, 0
  0154a	8d 8c 05 20 ff
	ff ff		 lea	 ecx, DWORD PTR _vp$[ebp+eax+12]
  01551	ba 04 00 00 00	 mov	 edx, 4
  01556	d1 e2		 shl	 edx, 1
  01558	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _light_ptr$[ebp]
  0155e	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01563	f3 0f 59 04 11	 mulss	 xmm0, DWORD PTR [ecx+edx]
  01568	f3 0f 58 85 8c
	fe ff ff	 addss	 xmm0, DWORD PTR _ly$5[ebp]
  01570	f3 0f 11 85 8c
	fe ff ff	 movss	 DWORD PTR _ly$5[ebp], xmm0

; 800  : 
; 801  : 				lz = ( light_ptr->lx * vp.attitude[2][0] );

  01578	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0157d	d1 e0		 shl	 eax, 1
  0157f	8d 8c 05 20 ff
	ff ff		 lea	 ecx, DWORD PTR _vp$[ebp+eax+12]
  01586	ba 04 00 00 00	 mov	 edx, 4
  0158b	6b c2 00	 imul	 eax, edx, 0
  0158e	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR _light_ptr$[ebp]
  01594	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  01598	f3 0f 59 04 01	 mulss	 xmm0, DWORD PTR [ecx+eax]
  0159d	f3 0f 11 85 88
	fe ff ff	 movss	 DWORD PTR _lz$4[ebp], xmm0

; 802  : 				lz += ( light_ptr->ly * vp.attitude[2][1] );

  015a5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  015aa	d1 e0		 shl	 eax, 1
  015ac	8d 8c 05 20 ff
	ff ff		 lea	 ecx, DWORD PTR _vp$[ebp+eax+12]
  015b3	ba 04 00 00 00	 mov	 edx, 4
  015b8	c1 e2 00	 shl	 edx, 0
  015bb	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _light_ptr$[ebp]
  015c1	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  015c6	f3 0f 59 04 11	 mulss	 xmm0, DWORD PTR [ecx+edx]
  015cb	f3 0f 58 85 88
	fe ff ff	 addss	 xmm0, DWORD PTR _lz$4[ebp]
  015d3	f3 0f 11 85 88
	fe ff ff	 movss	 DWORD PTR _lz$4[ebp], xmm0

; 803  : 				lz += ( light_ptr->lz * vp.attitude[2][2] );

  015db	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  015e0	d1 e0		 shl	 eax, 1
  015e2	8d 8c 05 20 ff
	ff ff		 lea	 ecx, DWORD PTR _vp$[ebp+eax+12]
  015e9	ba 04 00 00 00	 mov	 edx, 4
  015ee	d1 e2		 shl	 edx, 1
  015f0	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _light_ptr$[ebp]
  015f6	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  015fb	f3 0f 59 04 11	 mulss	 xmm0, DWORD PTR [ecx+edx]
  01600	f3 0f 58 85 88
	fe ff ff	 addss	 xmm0, DWORD PTR _lz$4[ebp]
  01608	f3 0f 11 85 88
	fe ff ff	 movss	 DWORD PTR _lz$4[ebp], xmm0

; 804  : 
; 805  : 				this_light->lx = lx;

  01610	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$[ebp]
  01616	f3 0f 10 85 90
	fe ff ff	 movss	 xmm0, DWORD PTR _lx$6[ebp]
  0161e	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 806  : 				this_light->ly = ly;

  01622	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$[ebp]
  01628	f3 0f 10 85 8c
	fe ff ff	 movss	 xmm0, DWORD PTR _ly$5[ebp]
  01630	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 807  : 				this_light->lz = lz;

  01635	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$[ebp]
  0163b	f3 0f 10 85 88
	fe ff ff	 movss	 xmm0, DWORD PTR _lz$4[ebp]
  01643	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 808  : 
; 809  : 				//
; 810  : 				// Generate a highlight vector
; 811  : 				//
; 812  : 
; 813  : 				this_light->highlight_vector.x = ( lx - object_unit_pos.x );

  01648	f3 0f 10 85 90
	fe ff ff	 movss	 xmm0, DWORD PTR _lx$6[ebp]
  01650	f3 0f 5c 85 60
	ff ff ff	 subss	 xmm0, DWORD PTR _object_unit_pos$[ebp]
  01658	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$[ebp]
  0165e	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 814  : 				this_light->highlight_vector.y = ( ly - object_unit_pos.y );

  01663	f3 0f 10 85 8c
	fe ff ff	 movss	 xmm0, DWORD PTR _ly$5[ebp]
  0166b	f3 0f 5c 85 64
	ff ff ff	 subss	 xmm0, DWORD PTR _object_unit_pos$[ebp+4]
  01673	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$[ebp]
  01679	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0

; 815  : 				this_light->highlight_vector.z = ( lz - object_unit_pos.z );

  0167e	f3 0f 10 85 88
	fe ff ff	 movss	 xmm0, DWORD PTR _lz$4[ebp]
  01686	f3 0f 5c 85 68
	ff ff ff	 subss	 xmm0, DWORD PTR _object_unit_pos$[ebp+8]
  0168e	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$[ebp]
  01694	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 816  : 
; 817  : 				normalise_any_3d_vector ( &this_light->highlight_vector );

  01699	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$[ebp]
  0169f	83 c0 0c	 add	 eax, 12			; 0000000cH
  016a2	50		 push	 eax
  016a3	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  016a8	dd d8		 fstp	 ST(0)

; 818  : 
; 819  : 				prev_light = this_light;

  016aa	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$[ebp]
  016b0	89 85 4c ff ff
	ff		 mov	 DWORD PTR _prev_light$[ebp], eax

; 820  : 
; 821  : 				light_ptr = light_ptr->succ;

  016b6	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _light_ptr$[ebp]
  016bc	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  016bf	89 8d 48 ff ff
	ff		 mov	 DWORD PTR _light_ptr$[ebp], ecx

; 822  : 			}

  016c5	e9 92 fc ff ff	 jmp	 $LN2@draw_sub_e
$LN3@draw_sub_e:

; 823  : 		}
; 824  : 
; 825  : 		object_3d_object_base[object_3d_object_current_base].lights = light;

  016ca	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  016d1	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR _light$[ebp]
  016d7	89 88 04 00 00
	00		 mov	 DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[eax+4], ecx

; 826  : 
; 827  : 		//
; 828  : 		//	Set up this objects' object info structure
; 829  : 		//
; 830  : 
; 831  : 		object_3d_object_base[object_3d_object_current_base].points_base = object_3d_points_current_base;

  016dd	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  016e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?object_3d_points_current_base@@3HA ; object_3d_points_current_base
  016ea	89 88 24 00 00
	00		 mov	 DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[eax+36], ecx

; 832  : 		object_3d_object_base[object_3d_object_current_base].camera_position = object_camera_position;

  016f0	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  016f7	05 08 00 00 00	 add	 eax, OFFSET ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A+8
  016fc	8b 4d 9c	 mov	 ecx, DWORD PTR _object_camera_position$[ebp]
  016ff	89 08		 mov	 DWORD PTR [eax], ecx
  01701	8b 55 a0	 mov	 edx, DWORD PTR _object_camera_position$[ebp+4]
  01704	89 50 04	 mov	 DWORD PTR [eax+4], edx
  01707	8b 4d a4	 mov	 ecx, DWORD PTR _object_camera_position$[ebp+8]
  0170a	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 833  : 		object_3d_object_base[object_3d_object_current_base].camera_direction = object_camera_direction;

  0170d	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  01714	05 14 00 00 00	 add	 eax, OFFSET ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A+20
  01719	8b 4d 90	 mov	 ecx, DWORD PTR _object_camera_direction$[ebp]
  0171c	89 08		 mov	 DWORD PTR [eax], ecx
  0171e	8b 55 94	 mov	 edx, DWORD PTR _object_camera_direction$[ebp+4]
  01721	89 50 04	 mov	 DWORD PTR [eax+4], edx
  01724	8b 4d 98	 mov	 ecx, DWORD PTR _object_camera_direction$[ebp+8]
  01727	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 834  : 		object_3d_object_base[object_3d_object_current_base].object_vp = &vp;

  0172a	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  01731	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _vp$[ebp]
  01737	89 88 28 00 00
	00		 mov	 DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[eax+40], ecx

; 835  : 		object_3d_object_base[object_3d_object_current_base].object_number = object_number;

  0173d	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  01744	8b 4d f0	 mov	 ecx, DWORD PTR _object_number$[ebp]
  01747	89 88 20 00 00
	00		 mov	 DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[eax+32], ecx

; 836  : 
; 837  : 		current_object_3d_object_base = &object_3d_object_base[object_3d_object_current_base];

  0174d	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  01754	05 00 00 00 00	 add	 eax, OFFSET ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A ; object_3d_object_base
  01759	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_object_base@@3PAUOBJECT_3D_INFO@@A, eax ; current_object_3d_object_base

; 838  : 
; 839  : 		if ( objects_3d_data[object_number].number_of_points )

  0175e	6b 45 f0 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  01762	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  01768	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  0176c	85 d2		 test	 edx, edx
  0176e	0f 84 12 01 00
	00		 je	 $LN18@draw_sub_e

; 840  : 		{
; 841  : 			int
; 842  : 				object_outcode;
; 843  : 
; 844  : 			vec3d
; 845  : 				scale;
; 846  : 
; 847  : 			//
; 848  : 			// Setup the objects scaling information
; 849  : 			//
; 850  : 
; 851  : 			scale.x = 2.0;

  01774	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0177c	f3 0f 11 85 78
	fe ff ff	 movss	 DWORD PTR _scale$2[ebp], xmm0

; 852  : 			scale.y = 2.0;

  01784	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0178c	f3 0f 11 85 7c
	fe ff ff	 movss	 DWORD PTR _scale$2[ebp+4], xmm0

; 853  : 			scale.z = 2.0;

  01794	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0179c	f3 0f 11 85 80
	fe ff ff	 movss	 DWORD PTR _scale$2[ebp+8], xmm0

; 854  : 
; 855  : 			if ( !get_scaled_object_3d_outcode ( object_number, &sub_pos, &scale, &object_outcode ) )

  017a4	8d 85 84 fe ff
	ff		 lea	 eax, DWORD PTR _object_outcode$3[ebp]
  017aa	50		 push	 eax
  017ab	8d 8d 78 fe ff
	ff		 lea	 ecx, DWORD PTR _scale$2[ebp]
  017b1	51		 push	 ecx
  017b2	8d 95 54 ff ff
	ff		 lea	 edx, DWORD PTR _sub_pos$[ebp]
  017b8	52		 push	 edx
  017b9	8b 45 f0	 mov	 eax, DWORD PTR _object_number$[ebp]
  017bc	50		 push	 eax
  017bd	e8 00 00 00 00	 call	 ?get_scaled_object_3d_outcode@@YGHHPAUVEC3D@@0PAH@Z ; get_scaled_object_3d_outcode
  017c2	85 c0		 test	 eax, eax
  017c4	0f 85 bc 00 00
	00		 jne	 $LN18@draw_sub_e

; 856  : //			if ( !get_object_3d_outcode ( object_number, &sub_pos, &object_outcode ) )
; 857  : 			{
; 858  : 				if ( object_outcode )

  017ca	83 bd 84 fe ff
	ff 00		 cmp	 DWORD PTR _object_outcode$3[ebp], 0
  017d1	74 31		 je	 SHORT $LN15@draw_sub_e

; 859  : 				{
; 860  : 					transform_3d_object ( &objects_3d_data[object_number], &sub_pos, object_3d_object_base[object_3d_object_current_base].lights, &object_camera_position, object_3d_points_current_base );

  017d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_3d_points_current_base@@3HA ; object_3d_points_current_base
  017d8	50		 push	 eax
  017d9	8d 4d 9c	 lea	 ecx, DWORD PTR _object_camera_position$[ebp]
  017dc	51		 push	 ecx
  017dd	6b 15 00 00 00
	00 2c		 imul	 edx, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  017e4	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[edx+4]
  017ea	50		 push	 eax
  017eb	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _sub_pos$[ebp]
  017f1	51		 push	 ecx
  017f2	6b 55 f0 68	 imul	 edx, DWORD PTR _object_number$[ebp], 104
  017f6	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  017fc	52		 push	 edx
  017fd	e8 00 00 00 00	 call	 ?transform_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z ; transform_3d_object

; 861  : 				}
; 862  : 				else

  01802	eb 2f		 jmp	 SHORT $LN16@draw_sub_e
$LN15@draw_sub_e:

; 863  : 				{
; 864  : 					transform_unclipped_3d_object ( &objects_3d_data[object_number], &sub_pos, object_3d_object_base[object_3d_object_current_base].lights, &object_camera_position, object_3d_points_current_base );

  01804	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_3d_points_current_base@@3HA ; object_3d_points_current_base
  01809	50		 push	 eax
  0180a	8d 4d 9c	 lea	 ecx, DWORD PTR _object_camera_position$[ebp]
  0180d	51		 push	 ecx
  0180e	6b 15 00 00 00
	00 2c		 imul	 edx, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  01815	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[edx+4]
  0181b	50		 push	 eax
  0181c	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _sub_pos$[ebp]
  01822	51		 push	 ecx
  01823	6b 55 f0 68	 imul	 edx, DWORD PTR _object_number$[ebp], 104
  01827	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0182d	52		 push	 edx
  0182e	e8 00 00 00 00	 call	 ?transform_unclipped_3d_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAULIGHT_3D_SOURCE@@1H@Z ; transform_unclipped_3d_object
$LN16@draw_sub_e:

; 865  : 				}
; 866  : 
; 867  : 				//
; 868  : 				// Render the faces now.
; 869  : 				//
; 870  : 
; 871  : 				if ( object_outcode )

  01833	83 bd 84 fe ff
	ff 00		 cmp	 DWORD PTR _object_outcode$3[ebp], 0
  0183a	74 26		 je	 SHORT $LN17@draw_sub_e

; 872  : 				{
; 873  : 					draw_3d_explosion_clipped_faces ( object_number, &sub_pos, object_3d_object_base[object_3d_object_current_base].lights, current_object_3d_object_base );

  0183c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_object_base@@3PAUOBJECT_3D_INFO@@A ; current_object_3d_object_base
  01841	50		 push	 eax
  01842	6b 0d 00 00 00
	00 2c		 imul	 ecx, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  01849	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[ecx+4]
  0184f	52		 push	 edx
  01850	8d 85 54 ff ff
	ff		 lea	 eax, DWORD PTR _sub_pos$[ebp]
  01856	50		 push	 eax
  01857	8b 4d f0	 mov	 ecx, DWORD PTR _object_number$[ebp]
  0185a	51		 push	 ecx
  0185b	e8 00 00 00 00	 call	 ?draw_3d_explosion_clipped_faces@@YGXHPAUVEC3D@@PAULIGHT_3D_SOURCE@@PAUOBJECT_3D_INFO@@@Z ; draw_3d_explosion_clipped_faces

; 874  : 				}
; 875  : 				else

  01860	eb 24		 jmp	 SHORT $LN18@draw_sub_e
$LN17@draw_sub_e:

; 876  : 				{
; 877  : 					draw_3d_explosion_unclipped_faces ( object_number, &sub_pos, object_3d_object_base[object_3d_object_current_base].lights, current_object_3d_object_base );

  01862	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_object_base@@3PAUOBJECT_3D_INFO@@A ; current_object_3d_object_base
  01867	50		 push	 eax
  01868	6b 0d 00 00 00
	00 2c		 imul	 ecx, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  0186f	8b 91 04 00 00
	00		 mov	 edx, DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[ecx+4]
  01875	52		 push	 edx
  01876	8d 85 54 ff ff
	ff		 lea	 eax, DWORD PTR _sub_pos$[ebp]
  0187c	50		 push	 eax
  0187d	8b 4d f0	 mov	 ecx, DWORD PTR _object_number$[ebp]
  01880	51		 push	 ecx
  01881	e8 00 00 00 00	 call	 ?draw_3d_explosion_unclipped_faces@@YGXHPAUVEC3D@@PAULIGHT_3D_SOURCE@@PAUOBJECT_3D_INFO@@@Z ; draw_3d_explosion_unclipped_faces
$LN18@draw_sub_e:

; 878  : 				}
; 879  : 			}
; 880  : 		}
; 881  : 	}
; 882  : 
; 883  : 	//
; 884  : 	// Recurse down any sub objects
; 885  : 	//
; 886  : 
; 887  : 	if ( obj->number_of_sub_objects )

  01886	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  01889	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  0188d	85 c9		 test	 ecx, ecx
  0188f	74 42		 je	 SHORT $LN5@draw_sub_e

; 888  : 	{
; 889  : 
; 890  : 		for ( count = ( obj->number_of_sub_objects -1 ); count >= 0; count-- )

  01891	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  01894	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  01898	83 e9 01	 sub	 ecx, 1
  0189b	89 4d fc	 mov	 DWORD PTR _count$[ebp], ecx
  0189e	eb 09		 jmp	 SHORT $LN6@draw_sub_e
$LN4@draw_sub_e:
  018a0	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  018a3	83 e8 01	 sub	 eax, 1
  018a6	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN6@draw_sub_e:
  018a9	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  018ad	7c 24		 jl	 SHORT $LN5@draw_sub_e

; 891  : 		{
; 892  : 			draw_sub_explosion ( &obj->sub_objects[count], &vp, &sub_pos, explosion );

  018af	8b 45 14	 mov	 eax, DWORD PTR _explosion$[ebp]
  018b2	50		 push	 eax
  018b3	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _sub_pos$[ebp]
  018b9	51		 push	 ecx
  018ba	8d 95 14 ff ff
	ff		 lea	 edx, DWORD PTR _vp$[ebp]
  018c0	52		 push	 edx
  018c1	6b 45 fc 38	 imul	 eax, DWORD PTR _count$[ebp], 56
  018c5	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  018c8	03 41 34	 add	 eax, DWORD PTR [ecx+52]
  018cb	50		 push	 eax
  018cc	e8 00 00 00 00	 call	 ?draw_sub_explosion@@YGXPAUOBJECT_3D_DATABASE_ENTRY@@PAUVIEWPOINT@@PAUVEC3D@@PAUOBJECT_3D_EXPLOSION@@@Z ; draw_sub_explosion

; 893  : 		}

  018d1	eb cd		 jmp	 SHORT $LN4@draw_sub_e
$LN5@draw_sub_e:

; 894  : 	}
; 895  : 
; 896  : 	//
; 897  : 	// Restore object dissolve
; 898  : 	//
; 899  : 
; 900  : 	{
; 901  : 		int
; 902  : 			dissolve_value;
; 903  : 
; 904  : 		current_object_3d_dissolve_factor = old_current_object_3d_dissolve_factor;

  018d3	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _old_current_object_3d_dissolve_factor$[ebp]
  018db	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?current_object_3d_dissolve_factor@@3MA, xmm0

; 905  : 
; 906  : 		asm_convert_float_to_int ( ( current_object_3d_dissolve_factor * 255 ), &dissolve_value );

  018e3	8d 85 74 fe ff
	ff		 lea	 eax, DWORD PTR _dissolve_value$1[ebp]
  018e9	50		 push	 eax
  018ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?current_object_3d_dissolve_factor@@3MA
  018f2	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  018fa	51		 push	 ecx
  018fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01900	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 907  : 
; 908  : 		current_object_3d_dissolve_value = dissolve_value;

  01905	8a 85 74 fe ff
	ff		 mov	 al, BYTE PTR _dissolve_value$1[ebp]
  0190b	a2 00 00 00 00	 mov	 BYTE PTR ?current_object_3d_dissolve_value@@3EA, al ; current_object_3d_dissolve_value

; 909  : 	}
; 910  : 
; 911  : 	//
; 912  : 	// Restore the object rotation matrix
; 913  : 	//
; 914  : 
; 915  : 	memcpy ( rotation_3d, temp_matrix, sizeof ( matrix3x3 ) );

  01910	6a 24		 push	 36			; 00000024H
  01912	8d 45 a8	 lea	 eax, DWORD PTR _temp_matrix$[ebp]
  01915	50		 push	 eax
  01916	68 00 00 00 00	 push	 OFFSET ?rotation_3d@@3PAY02MA ; rotation_3d
  0191b	e8 00 00 00 00	 call	 _memcpy
  01920	83 c4 0c	 add	 esp, 12			; 0000000cH

; 916  : 
; 917  : 	memcpy ( &object_3d_scale, &temp_scale, sizeof ( vec3d ) );

  01923	6a 0c		 push	 12			; 0000000cH
  01925	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _temp_scale$[ebp]
  0192b	50		 push	 eax
  0192c	68 00 00 00 00	 push	 OFFSET ?object_3d_scale@@3UVEC3D@@A ; object_3d_scale
  01931	e8 00 00 00 00	 call	 _memcpy
  01936	83 c4 0c	 add	 esp, 12			; 0000000cH

; 918  : 
; 919  : 	//
; 920  : 	// Release all the temporary lights & objects used.
; 921  : 	//
; 922  : 
; 923  : 	object_3d_object_current_base = object_3d_object_initial_base;

  01939	8b 45 f8	 mov	 eax, DWORD PTR _object_3d_object_initial_base$[ebp]
  0193c	a3 00 00 00 00	 mov	 DWORD PTR ?object_3d_object_current_base@@3HA, eax ; object_3d_object_current_base

; 924  : 
; 925  : 	object_3d_light_3d_current_base = object_3d_light_3d_initial_base;

  01941	8b 45 f4	 mov	 eax, DWORD PTR _object_3d_light_3d_initial_base$[ebp]
  01944	a3 00 00 00 00	 mov	 DWORD PTR ?object_3d_light_3d_current_base@@3HA, eax ; object_3d_light_3d_current_base

; 926  : }

  01949	5f		 pop	 edi
  0194a	5e		 pop	 esi
  0194b	5b		 pop	 ebx
  0194c	8b e5		 mov	 esp, ebp
  0194e	5d		 pop	 ebp
  0194f	c2 10 00	 ret	 16			; 00000010H
?draw_sub_explosion@@YGXPAUOBJECT_3D_DATABASE_ENTRY@@PAUVIEWPOINT@@PAUVEC3D@@PAUOBJECT_3D_EXPLOSION@@@Z ENDP ; draw_sub_explosion
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dexplos.c
;	COMDAT ?draw_3d_explosion@@YGXPAUOBJECT_3D_EXPLOSION@@@Z
_TEXT	SEGMENT
_count$1 = -276						; size = 4
_rel_pos$2 = -272					; size = 12
_dissolve_value$3 = -260				; size = 4
_keyframe$4 = -256					; size = 24
_ifog_intensity$5 = -232				; size = 4
_fog_intensity$6 = -228					; size = 4
_keyframe$7 = -224					; size = 56
_keyframe$8 = -168					; size = 24
_scale$9 = -144						; size = 12
_displacement_points_lookup$ = -132			; size = 4
_vp$ = -128						; size = 48
_scene$ = -80						; size = 4
_displacement$ = -76					; size = 4
_displacement_frame$ = -72				; size = 4
_number_of_frames$ = -68				; size = 4
_amplitude$ = -64					; size = 4
_translucent_sorted_buffer$ = -60			; size = 4
_object_unit_pos$ = -56					; size = 12
_object_pos$ = -44					; size = 12
_object_camera_direction$ = -32				; size = 12
_object_camera_position$ = -20				; size = 12
_object_relative_position$ = -8				; size = 4
_object_number$ = -4					; size = 4
_explosion$ = 8						; size = 4
?draw_3d_explosion@@YGXPAUOBJECT_3D_EXPLOSION@@@Z PROC	; draw_3d_explosion, COMDAT

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 136  : 	int
; 137  : 		object_number;
; 138  : 
; 139  : 	vec3d
; 140  : 		*object_relative_position;
; 141  : 
; 142  : 	vec3d
; 143  : 		object_camera_position,
; 144  : 		object_camera_direction,
; 145  : 		object_pos,
; 146  : 		object_unit_pos;
; 147  : 
; 148  : 	polygon_buffer
; 149  : 		*translucent_sorted_buffer;
; 150  : 
; 151  : 	float
; 152  : 		amplitude;
; 153  : 
; 154  : 	int
; 155  : 		number_of_frames,
; 156  : 		displacement_frame;
; 157  : 
; 158  : 	displacement_map
; 159  : 		*displacement;
; 160  : 
; 161  : 	object_3d_scene_database_entry
; 162  : 		*scene;
; 163  : 
; 164  : 	viewpoint
; 165  : 		vp;
; 166  : 
; 167  : 	explosion_object_points_lookup
; 168  : 		*displacement_points_lookup;
; 169  : 
; 170  : 	//
; 171  : 	// Set the scene pointer
; 172  : 	//
; 173  : 
; 174  : 	scene = &objects_3d_scene_database[explosion->object_index];

  0000c	8b 45 08	 mov	 eax, DWORD PTR _explosion$[ebp]
  0000f	69 48 20 e0 00
	00 00		 imul	 ecx, DWORD PTR [eax+32], 224
  00016	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  0001c	89 4d b0	 mov	 DWORD PTR _scene$[ebp], ecx

; 175  : 
; 176  : 	//
; 177  : 	// Set up the texture animations for this explosion
; 178  : 	//
; 179  : 
; 180  : 	set_explosion_texture_animations ( explosion->object_index, explosion->animation );

  0001f	8b 45 08	 mov	 eax, DWORD PTR _explosion$[ebp]
  00022	51		 push	 ecx
  00023	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  00028	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _explosion$[ebp]
  00030	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 ?set_explosion_texture_animations@@YGXHM@Z ; set_explosion_texture_animations

; 181  : 
; 182  : 	//
; 183  : 	// Set the main objects' scaling values
; 184  : 	//
; 185  : 
; 186  : 	object_3d_scale.x = explosion->scale;

  00039	8b 45 08	 mov	 eax, DWORD PTR _explosion$[ebp]
  0003c	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  00041	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?object_3d_scale@@3UVEC3D@@A, xmm0

; 187  : 	object_3d_scale.y = explosion->scale;

  00049	8b 45 08	 mov	 eax, DWORD PTR _explosion$[ebp]
  0004c	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  00051	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?object_3d_scale@@3UVEC3D@@A+4, xmm0

; 188  : 	object_3d_scale.z = explosion->scale;

  00059	8b 45 08	 mov	 eax, DWORD PTR _explosion$[ebp]
  0005c	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  00061	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?object_3d_scale@@3UVEC3D@@A+8, xmm0

; 189  : 
; 190  : 	{
; 191  : 		vec3d
; 192  : 			scale;
; 193  : 
; 194  : 		//
; 195  : 		// Get the amplitude keyframes
; 196  : 		//
; 197  : 
; 198  : 		if ( scene->number_of_displacement_amplitude_keyframes )

  00069	8b 45 b0	 mov	 eax, DWORD PTR _scene$[ebp]
  0006c	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  00070	74 37		 je	 SHORT $LN5@draw_3d_ex

; 199  : 		{
; 200  : 			object_3d_sub_object_value_keyframe
; 201  : 				keyframe;
; 202  : 
; 203  : 			calculate_value_keyframe ( scene->number_of_displacement_amplitude_keyframes, scene->displacement_amplitude_keyframes, &keyframe, explosion->animation );

  00072	8b 45 08	 mov	 eax, DWORD PTR _explosion$[ebp]
  00075	51		 push	 ecx
  00076	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _keyframe$8[ebp]
  00086	51		 push	 ecx
  00087	8b 55 b0	 mov	 edx, DWORD PTR _scene$[ebp]
  0008a	8b 42 70	 mov	 eax, DWORD PTR [edx+112]
  0008d	50		 push	 eax
  0008e	8b 4d b0	 mov	 ecx, DWORD PTR _scene$[ebp]
  00091	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00094	52		 push	 edx
  00095	e8 00 00 00 00	 call	 ?calculate_value_keyframe@@YGXHPAUOBJECT_3D_SUB_OBJECT_VALUE_KEYFRAME@@0M@Z ; calculate_value_keyframe

; 204  : 
; 205  : 			amplitude = keyframe.value;

  0009a	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _keyframe$8[ebp+8]
  000a2	f3 0f 11 45 c0	 movss	 DWORD PTR _amplitude$[ebp], xmm0

; 206  : 		}
; 207  : 		else

  000a7	eb 0d		 jmp	 SHORT $LN6@draw_3d_ex
$LN5@draw_3d_ex:

; 208  : 		{
; 209  : 			amplitude = 0.5;

  000a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000b1	f3 0f 11 45 c0	 movss	 DWORD PTR _amplitude$[ebp], xmm0
$LN6@draw_3d_ex:

; 210  : 		}
; 211  : 
; 212  : 		if ( scene->number_of_keyframes )

  000b6	8b 45 b0	 mov	 eax, DWORD PTR _scene$[ebp]
  000b9	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  000bd	74 58		 je	 SHORT $LN7@draw_3d_ex

; 213  : 		{
; 214  : 			object_3d_sub_object_keyframe
; 215  : 				keyframe;
; 216  : 
; 217  : 			calculate_keyframe ( scene->number_of_keyframes, scene->keyframes, &keyframe, explosion->animation );

  000bf	8b 45 08	 mov	 eax, DWORD PTR _explosion$[ebp]
  000c2	51		 push	 ecx
  000c3	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  000c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cd	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _keyframe$7[ebp]
  000d3	51		 push	 ecx
  000d4	8b 55 b0	 mov	 edx, DWORD PTR _scene$[ebp]
  000d7	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  000da	50		 push	 eax
  000db	8b 4d b0	 mov	 ecx, DWORD PTR _scene$[ebp]
  000de	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000e1	52		 push	 edx
  000e2	e8 00 00 00 00	 call	 ?calculate_keyframe@@YGXHPAUOBJECT_3D_SUB_OBJECT_KEYFRAME@@0M@Z ; calculate_keyframe

; 218  : 
; 219  : 			scale.x = keyframe.scale_x;

  000e7	f3 0f 10 85 40
	ff ff ff	 movss	 xmm0, DWORD PTR _keyframe$7[ebp+32]
  000ef	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _scale$9[ebp], xmm0

; 220  : 			scale.y = keyframe.scale_y;

  000f7	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR _keyframe$7[ebp+36]
  000ff	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _scale$9[ebp+4], xmm0

; 221  : 			scale.z = keyframe.scale_z;

  00107	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR _keyframe$7[ebp+40]
  0010f	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _scale$9[ebp+8], xmm0
$LN7@draw_3d_ex:

; 222  : 		}
; 223  : 
; 224  : 		object_3d_scale.x *= scale.x;

  00117	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A
  0011f	f3 0f 59 85 70
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$9[ebp]
  00127	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?object_3d_scale@@3UVEC3D@@A, xmm0

; 225  : 		object_3d_scale.y *= scale.y;

  0012f	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+4
  00137	f3 0f 59 85 74
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$9[ebp+4]
  0013f	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?object_3d_scale@@3UVEC3D@@A+4, xmm0

; 226  : 		object_3d_scale.z *= scale.z;

  00147	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+8
  0014f	f3 0f 59 85 78
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$9[ebp+8]
  00157	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?object_3d_scale@@3UVEC3D@@A+8, xmm0

; 227  : 
; 228  : 		number_of_frames = displacement_animations[DISPLACEMENT_ANIMATION_INDEX_BOMB_D].number_of_frames;

  0015f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00164	6b c8 00	 imul	 ecx, eax, 0
  00167	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?displacement_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; displacement_animations
  0016d	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00170	89 45 bc	 mov	 DWORD PTR _number_of_frames$[ebp], eax

; 229  : 
; 230  : 		asm_convert_float_to_int ( ( ( ( float ) ( number_of_frames - 1 ) ) * explosion->animation ), &displacement_frame );

  00173	8d 45 b8	 lea	 eax, DWORD PTR _displacement_frame$[ebp]
  00176	50		 push	 eax
  00177	8b 4d bc	 mov	 ecx, DWORD PTR _number_of_frames$[ebp]
  0017a	83 e9 01	 sub	 ecx, 1
  0017d	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00181	8b 55 08	 mov	 edx, DWORD PTR _explosion$[ebp]
  00184	f3 0f 59 42 1c	 mulss	 xmm0, DWORD PTR [edx+28]
  00189	51		 push	 ecx
  0018a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018f	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 231  : 
; 232  : 		displacement = &displacement_maps[ displacement_animations[DISPLACEMENT_ANIMATION_INDEX_BOMB_D].texture_indices[displacement_frame] ];

  00194	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00199	6b c8 00	 imul	 ecx, eax, 0
  0019c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?displacement_animations@@3PAUTEXTURE_ANIMATION_INFORMATION@@A ; displacement_animations
  001a2	8b 44 0a 08	 mov	 eax, DWORD PTR [edx+ecx+8]
  001a6	8b 4d b8	 mov	 ecx, DWORD PTR _displacement_frame$[ebp]
  001a9	6b 14 88 0c	 imul	 edx, DWORD PTR [eax+ecx*4], 12
  001ad	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?displacement_maps@@3PAUDISPLACEMENT_MAP@@A ; displacement_maps
  001b3	89 55 b4	 mov	 DWORD PTR _displacement$[ebp], edx

; 233  : 	}
; 234  : 
; 235  : 	//
; 236  : 	// Set up the object drawing global variables
; 237  : 	//
; 238  : 
; 239  : 	object_3d_points_current_base = 0;

  001b6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?object_3d_points_current_base@@3HA, 0 ; object_3d_points_current_base

; 240  : 
; 241  : 	object_3d_object_current_base = 0;

  001c0	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?object_3d_object_current_base@@3HA, 0 ; object_3d_object_current_base

; 242  : 
; 243  : 	object_3d_light_3d_current_base = 0;

  001ca	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?object_3d_light_3d_current_base@@3HA, 0 ; object_3d_light_3d_current_base

; 244  : 
; 245  : 	current_object_3d_light_maps_enabled = FALSE;

  001d4	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_light_maps_enabled@@3HA, 0 ; current_object_3d_light_maps_enabled

; 246  : 
; 247  : 	//
; 248  : 	// Get the object's position relative to the camera
; 249  : 	//
; 250  : 
; 251  : 	object_relative_position = &explosion->relative_position;

  001de	8b 45 08	 mov	 eax, DWORD PTR _explosion$[ebp]
  001e1	83 c0 0c	 add	 eax, 12			; 0000000cH
  001e4	89 45 f8	 mov	 DWORD PTR _object_relative_position$[ebp], eax

; 252  : 
; 253  : 	vp.position = explosion->position;

  001e7	8b 45 08	 mov	 eax, DWORD PTR _explosion$[ebp]
  001ea	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ec	89 4d 80	 mov	 DWORD PTR _vp$[ebp], ecx
  001ef	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001f2	89 55 84	 mov	 DWORD PTR _vp$[ebp+4], edx
  001f5	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  001f8	89 45 88	 mov	 DWORD PTR _vp$[ebp+8], eax

; 254  : 	vp.xv.x = 1;

  001fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00203	f3 0f 11 45 8c	 movss	 DWORD PTR _vp$[ebp+12], xmm0

; 255  : 	vp.xv.y = 0;

  00208	0f 57 c0	 xorps	 xmm0, xmm0
  0020b	f3 0f 11 45 90	 movss	 DWORD PTR _vp$[ebp+16], xmm0

; 256  : 	vp.xv.z = 0;

  00210	0f 57 c0	 xorps	 xmm0, xmm0
  00213	f3 0f 11 45 94	 movss	 DWORD PTR _vp$[ebp+20], xmm0

; 257  : 	vp.yv.x = 0;

  00218	0f 57 c0	 xorps	 xmm0, xmm0
  0021b	f3 0f 11 45 98	 movss	 DWORD PTR _vp$[ebp+24], xmm0

; 258  : 	vp.yv.y = 1;

  00220	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00228	f3 0f 11 45 9c	 movss	 DWORD PTR _vp$[ebp+28], xmm0

; 259  : 	vp.yv.z = 0;

  0022d	0f 57 c0	 xorps	 xmm0, xmm0
  00230	f3 0f 11 45 a0	 movss	 DWORD PTR _vp$[ebp+32], xmm0

; 260  : 	vp.zv.x = 0;

  00235	0f 57 c0	 xorps	 xmm0, xmm0
  00238	f3 0f 11 45 a4	 movss	 DWORD PTR _vp$[ebp+36], xmm0

; 261  : 	vp.zv.y = 0;

  0023d	0f 57 c0	 xorps	 xmm0, xmm0
  00240	f3 0f 11 45 a8	 movss	 DWORD PTR _vp$[ebp+40], xmm0

; 262  : 	vp.zv.z = 1;

  00245	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0024d	f3 0f 11 45 ac	 movss	 DWORD PTR _vp$[ebp+44], xmm0

; 263  : 
; 264  : 	{
; 265  : 		float
; 266  : 			fog_intensity;
; 267  : 
; 268  : 		int
; 269  : 			ifog_intensity;
; 270  : 
; 271  : 		fog_intensity = get_fog_distance_value ( object_relative_position->z );

  00252	8b 45 f8	 mov	 eax, DWORD PTR _object_relative_position$[ebp]
  00255	51		 push	 ecx
  00256	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0025b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00260	e8 00 00 00 00	 call	 ?get_fog_distance_value@@YGMM@Z ; get_fog_distance_value
  00265	d9 9d 1c ff ff
	ff		 fstp	 DWORD PTR _fog_intensity$6[ebp]

; 272  : 
; 273  : 		asm_convert_float_to_int ( fog_intensity, &ifog_intensity );

  0026b	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _ifog_intensity$5[ebp]
  00271	50		 push	 eax
  00272	51		 push	 ecx
  00273	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _fog_intensity$6[ebp]
  0027b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00280	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 274  : 
; 275  : 		set_d3d_fog_face_intensity ( ifog_intensity );

  00285	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _ifog_intensity$5[ebp]
  0028b	50		 push	 eax
  0028c	e8 00 00 00 00	 call	 ?set_d3d_fog_face_intensity@@YGXH@Z ; set_d3d_fog_face_intensity

; 276  : 	}
; 277  : 
; 278  : 
; 279  : 	//
; 280  : 	// Set the object dissolve variables
; 281  : 	//
; 282  : 
; 283  : 	if ( objects_3d_scene_database[explosion->object_index].number_of_object_dissolve_keyframes )

  00291	8b 45 08	 mov	 eax, DWORD PTR _explosion$[ebp]
  00294	69 48 20 e0 00
	00 00		 imul	 ecx, DWORD PTR [eax+32], 224
  0029b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  002a1	83 7c 0a 24 00	 cmp	 DWORD PTR [edx+ecx+36], 0
  002a6	0f 84 93 00 00
	00		 je	 $LN8@draw_3d_ex

; 284  : 	{
; 285  : 		object_3d_sub_object_value_keyframe
; 286  : 			keyframe;
; 287  : 
; 288  : 		int
; 289  : 			dissolve_value;
; 290  : 
; 291  : 		calculate_value_keyframe (

  002ac	8b 45 08	 mov	 eax, DWORD PTR _explosion$[ebp]
  002af	51		 push	 ecx
  002b0	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  002b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ba	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _keyframe$4[ebp]
  002c0	51		 push	 ecx
  002c1	8b 55 08	 mov	 edx, DWORD PTR _explosion$[ebp]
  002c4	69 42 20 e0 00
	00 00		 imul	 eax, DWORD PTR [edx+32], 224
  002cb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  002d1	8b 54 01 6c	 mov	 edx, DWORD PTR [ecx+eax+108]
  002d5	52		 push	 edx
  002d6	8b 45 08	 mov	 eax, DWORD PTR _explosion$[ebp]
  002d9	69 48 20 e0 00
	00 00		 imul	 ecx, DWORD PTR [eax+32], 224
  002e0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?objects_3d_scene_database@@3PAUOBJECT_3D_SCENE_DATABASE_ENTRY@@A ; objects_3d_scene_database
  002e6	8b 44 0a 24	 mov	 eax, DWORD PTR [edx+ecx+36]
  002ea	50		 push	 eax
  002eb	e8 00 00 00 00	 call	 ?calculate_value_keyframe@@YGXHPAUOBJECT_3D_SUB_OBJECT_VALUE_KEYFRAME@@0M@Z ; calculate_value_keyframe

; 292  : 											objects_3d_scene_database[explosion->object_index].number_of_object_dissolve_keyframes,
; 293  : 											objects_3d_scene_database[explosion->object_index].object_dissolve_keyframes,
; 294  : 											&keyframe,
; 295  : 											explosion->animation );
; 296  : 
; 297  : 		current_object_3d_dissolve_factor = 1.0 - keyframe.value;

  002f0	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _keyframe$4[ebp+8]
  002f8	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00300	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00304	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00308	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?current_object_3d_dissolve_factor@@3MA, xmm0

; 298  : 
; 299  : 		asm_convert_float_to_int ( ( current_object_3d_dissolve_factor * 255 ), &dissolve_value );

  00310	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _dissolve_value$3[ebp]
  00316	50		 push	 eax
  00317	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?current_object_3d_dissolve_factor@@3MA
  0031f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00327	51		 push	 ecx
  00328	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032d	e8 00 00 00 00	 call	 ?asm_convert_float_to_int@@YGXMPAH@Z ; asm_convert_float_to_int

; 300  : 
; 301  : 		current_object_3d_dissolve_value = dissolve_value;

  00332	8a 85 fc fe ff
	ff		 mov	 al, BYTE PTR _dissolve_value$3[ebp]
  00338	a2 00 00 00 00	 mov	 BYTE PTR ?current_object_3d_dissolve_value@@3EA, al ; current_object_3d_dissolve_value

; 302  : 	}
; 303  : 	else

  0033d	eb 17		 jmp	 SHORT $LN9@draw_3d_ex
$LN8@draw_3d_ex:

; 304  : 	{
; 305  : 		current_object_3d_dissolve_value = 255;

  0033f	c6 05 00 00 00
	00 ff		 mov	 BYTE PTR ?current_object_3d_dissolve_value@@3EA, 255 ; current_object_3d_dissolve_value, 000000ffH

; 306  : 		current_object_3d_dissolve_factor = 1.0;

  00346	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0034e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?current_object_3d_dissolve_factor@@3MA, xmm0
$LN9@draw_3d_ex:

; 307  : 	}
; 308  : 
; 309  : 	//
; 310  : 	// Calculate the object's rotation matrix, to transform its 3d points relative to the view.
; 311  : 	//
; 312  : 
; 313  : 	rotation_3d[0][0] = visual_3d_vp->xv.x * object_3d_scale.x;

  00356	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0035b	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00360	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A
  00368	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0036d	6b d1 00	 imul	 edx, ecx, 0
  00370	b8 04 00 00 00	 mov	 eax, 4
  00375	6b c8 00	 imul	 ecx, eax, 0
  00378	f3 0f 11 84 0a
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[edx+ecx], xmm0

; 314  : 	rotation_3d[0][1] = visual_3d_vp->yv.x * object_3d_scale.x;

  00381	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00386	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  0038b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A
  00393	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00398	6b d1 00	 imul	 edx, ecx, 0
  0039b	b8 04 00 00 00	 mov	 eax, 4
  003a0	c1 e0 00	 shl	 eax, 0
  003a3	f3 0f 11 84 02
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[edx+eax], xmm0

; 315  : 	rotation_3d[0][2] = visual_3d_vp->zv.x * object_3d_scale.x;

  003ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  003b1	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [eax+36]
  003b6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A
  003be	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  003c3	6b d1 00	 imul	 edx, ecx, 0
  003c6	b8 04 00 00 00	 mov	 eax, 4
  003cb	d1 e0		 shl	 eax, 1
  003cd	f3 0f 11 84 02
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[edx+eax], xmm0

; 316  : 
; 317  : 	rotation_3d[1][0] = visual_3d_vp->xv.y * object_3d_scale.y;

  003d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  003db	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  003e0	f3 0f 59 05 04
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+4
  003e8	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  003ed	c1 e1 00	 shl	 ecx, 0
  003f0	ba 04 00 00 00	 mov	 edx, 4
  003f5	6b c2 00	 imul	 eax, edx, 0
  003f8	f3 0f 11 84 01
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax], xmm0

; 318  : 	rotation_3d[1][1] = visual_3d_vp->yv.y * object_3d_scale.y;

  00401	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00406	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  0040b	f3 0f 59 05 04
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+4
  00413	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00418	c1 e1 00	 shl	 ecx, 0
  0041b	ba 04 00 00 00	 mov	 edx, 4
  00420	c1 e2 00	 shl	 edx, 0
  00423	f3 0f 11 84 11
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx], xmm0

; 319  : 	rotation_3d[1][2] = visual_3d_vp->zv.y * object_3d_scale.y;

  0042c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00431	f3 0f 10 40 28	 movss	 xmm0, DWORD PTR [eax+40]
  00436	f3 0f 59 05 04
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+4
  0043e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00443	c1 e1 00	 shl	 ecx, 0
  00446	ba 04 00 00 00	 mov	 edx, 4
  0044b	d1 e2		 shl	 edx, 1
  0044d	f3 0f 11 84 11
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx], xmm0

; 320  : 
; 321  : 	rotation_3d[2][0] = visual_3d_vp->xv.z * object_3d_scale.z;

  00456	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0045b	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00460	f3 0f 59 05 08
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+8
  00468	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0046d	d1 e1		 shl	 ecx, 1
  0046f	ba 04 00 00 00	 mov	 edx, 4
  00474	6b c2 00	 imul	 eax, edx, 0
  00477	f3 0f 11 84 01
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+eax], xmm0

; 322  : 	rotation_3d[2][1] = visual_3d_vp->yv.z * object_3d_scale.z;

  00480	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00485	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  0048a	f3 0f 59 05 08
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+8
  00492	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00497	d1 e1		 shl	 ecx, 1
  00499	ba 04 00 00 00	 mov	 edx, 4
  0049e	c1 e2 00	 shl	 edx, 0
  004a1	f3 0f 11 84 11
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx], xmm0

; 323  : 	rotation_3d[2][2] = visual_3d_vp->zv.z * object_3d_scale.z;

  004aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  004af	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  004b4	f3 0f 59 05 08
	00 00 00	 mulss	 xmm0, DWORD PTR ?object_3d_scale@@3UVEC3D@@A+8
  004bc	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  004c1	d1 e1		 shl	 ecx, 1
  004c3	ba 04 00 00 00	 mov	 edx, 4
  004c8	d1 e2		 shl	 edx, 1
  004ca	f3 0f 11 84 11
	00 00 00 00	 movss	 DWORD PTR ?rotation_3d@@3PAY02MA[ecx+edx], xmm0

; 324  : 
; 325  : 	//
; 326  : 	// Calculate the vector from the object to the viewpoint, in the object's view system
; 327  : 	//
; 328  : 
; 329  : 	{
; 330  : 		object_pos.x = ( visual_3d_vp->x - explosion->position.x );

  004d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  004d8	8b 4d 08	 mov	 ecx, DWORD PTR _explosion$[ebp]
  004db	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  004df	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  004e3	f3 0f 11 45 d4	 movss	 DWORD PTR _object_pos$[ebp], xmm0

; 331  : 		object_pos.y = ( visual_3d_vp->y - explosion->position.y );

  004e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  004ed	8b 4d 08	 mov	 ecx, DWORD PTR _explosion$[ebp]
  004f0	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  004f5	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  004fa	f3 0f 11 45 d8	 movss	 DWORD PTR _object_pos$[ebp+4], xmm0

; 332  : 		object_pos.z = ( visual_3d_vp->z - explosion->position.z );

  004ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00504	8b 4d 08	 mov	 ecx, DWORD PTR _explosion$[ebp]
  00507	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0050c	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00511	f3 0f 11 45 dc	 movss	 DWORD PTR _object_pos$[ebp+8], xmm0

; 333  : 
; 334  : 		object_unit_pos.x = -object_pos.x;

  00516	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _object_pos$[ebp]
  0051b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00522	f3 0f 11 45 c8	 movss	 DWORD PTR _object_unit_pos$[ebp], xmm0

; 335  : 		object_unit_pos.y = -object_pos.y;

  00527	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _object_pos$[ebp+4]
  0052c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00533	f3 0f 11 45 cc	 movss	 DWORD PTR _object_unit_pos$[ebp+4], xmm0

; 336  : 		object_unit_pos.z = -object_pos.z;

  00538	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _object_pos$[ebp+8]
  0053d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00544	f3 0f 11 45 d0	 movss	 DWORD PTR _object_unit_pos$[ebp+8], xmm0

; 337  : 
; 338  : 		normalise_any_3d_vector ( &object_unit_pos );

  00549	8d 45 c8	 lea	 eax, DWORD PTR _object_unit_pos$[ebp]
  0054c	50		 push	 eax
  0054d	e8 00 00 00 00	 call	 ?normalise_any_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_any_3d_vector
  00552	dd d8		 fstp	 ST(0)

; 339  : 	}
; 340  : 
; 341  : 	//
; 342  : 	// Get the raw object number
; 343  : 	//
; 344  : 
; 345  : 	object_number = get_object_approximation_number ( explosion->object_index, object_relative_position->z, &object_3d_approximation_level );

  00554	68 00 00 00 00	 push	 OFFSET ?object_3d_approximation_level@@3HA ; object_3d_approximation_level
  00559	8b 45 f8	 mov	 eax, DWORD PTR _object_relative_position$[ebp]
  0055c	51		 push	 ecx
  0055d	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00562	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00567	8b 4d 08	 mov	 ecx, DWORD PTR _explosion$[ebp]
  0056a	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0056d	52		 push	 edx
  0056e	e8 00 00 00 00	 call	 ?get_object_approximation_number@@YGHHMPAH@Z ; get_object_approximation_number
  00573	89 45 fc	 mov	 DWORD PTR _object_number$[ebp], eax

; 346  : 
; 347  : 	//
; 348  : 	// Generate the texture x, y lookups for the points in the object.
; 349  : 	//
; 350  : 
; 351  : 	displacement_points_lookup = generate_explosion_object_texture_points ( object_number, displacement );

  00576	8b 45 b4	 mov	 eax, DWORD PTR _displacement$[ebp]
  00579	50		 push	 eax
  0057a	8b 4d fc	 mov	 ecx, DWORD PTR _object_number$[ebp]
  0057d	51		 push	 ecx
  0057e	e8 00 00 00 00	 call	 ?generate_explosion_object_texture_points@@YGPAUEXPLOSION_OBJECT_POINTS_LOOKUP@@HPAUDISPLACEMENT_MAP@@@Z ; generate_explosion_object_texture_points
  00583	89 85 7c ff ff
	ff		 mov	 DWORD PTR _displacement_points_lookup$[ebp], eax

; 352  : 
; 353  : 	{
; 354  : 		vec3d
; 355  : 			rel_pos;
; 356  : 
; 357  : 		//
; 358  : 		// Calculate the relative camera position in the object viewspace
; 359  : 		//
; 360  : 
; 361  : 		rel_pos.x = visual_3d_vp->x - explosion->position.x;

  00589	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0058e	8b 4d 08	 mov	 ecx, DWORD PTR _explosion$[ebp]
  00591	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00595	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00599	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _rel_pos$2[ebp], xmm0

; 362  : 		rel_pos.y = visual_3d_vp->y - explosion->position.y;

  005a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  005a6	8b 4d 08	 mov	 ecx, DWORD PTR _explosion$[ebp]
  005a9	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  005ae	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  005b3	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _rel_pos$2[ebp+4], xmm0

; 363  : 		rel_pos.z = visual_3d_vp->z - explosion->position.z;

  005bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  005c0	8b 4d 08	 mov	 ecx, DWORD PTR _explosion$[ebp]
  005c3	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  005c8	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  005cd	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR _rel_pos$2[ebp+8], xmm0

; 364  : 
; 365  : 		object_camera_position.x = rel_pos.x;

  005d5	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _rel_pos$2[ebp]
  005dd	f3 0f 11 45 ec	 movss	 DWORD PTR _object_camera_position$[ebp], xmm0

; 366  : 		object_camera_position.y = rel_pos.y;

  005e2	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _rel_pos$2[ebp+4]
  005ea	f3 0f 11 45 f0	 movss	 DWORD PTR _object_camera_position$[ebp+4], xmm0

; 367  : 		object_camera_position.z = rel_pos.z;

  005ef	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR _rel_pos$2[ebp+8]
  005f7	f3 0f 11 45 f4	 movss	 DWORD PTR _object_camera_position$[ebp+8], xmm0

; 368  : 
; 369  : 		object_camera_direction.x = visual_3d_vp->zv.x;

  005fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00601	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [eax+36]
  00606	f3 0f 11 45 e0	 movss	 DWORD PTR _object_camera_direction$[ebp], xmm0

; 370  : 		object_camera_direction.y = visual_3d_vp->zv.y;

  0060b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00610	f3 0f 10 40 28	 movss	 xmm0, DWORD PTR [eax+40]
  00615	f3 0f 11 45 e4	 movss	 DWORD PTR _object_camera_direction$[ebp+4], xmm0

; 371  : 		object_camera_direction.z = visual_3d_vp->zv.z;

  0061a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0061f	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  00624	f3 0f 11 45 e8	 movss	 DWORD PTR _object_camera_direction$[ebp+8], xmm0

; 372  : 	}
; 373  : 
; 374  : 	//
; 375  : 	// Calculate the x, y offsets for lookup into the displacement maps
; 376  : 	//
; 377  : 
; 378  : 
; 379  : 
; 380  : 	//
; 381  : 	//	Set up this objects' object info structure
; 382  : 	//
; 383  : 
; 384  : 	object_3d_object_base[object_3d_object_current_base].lights = current_3d_lights;

  00629	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  00630	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_3d_lights@@3PAULIGHT_3D_SOURCE@@A ; current_3d_lights
  00636	89 88 04 00 00
	00		 mov	 DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[eax+4], ecx

; 385  : 	object_3d_object_base[object_3d_object_current_base].camera_position = object_camera_position;

  0063c	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  00643	05 08 00 00 00	 add	 eax, OFFSET ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A+8
  00648	8b 4d ec	 mov	 ecx, DWORD PTR _object_camera_position$[ebp]
  0064b	89 08		 mov	 DWORD PTR [eax], ecx
  0064d	8b 55 f0	 mov	 edx, DWORD PTR _object_camera_position$[ebp+4]
  00650	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00653	8b 4d f4	 mov	 ecx, DWORD PTR _object_camera_position$[ebp+8]
  00656	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 386  : 	object_3d_object_base[object_3d_object_current_base].camera_direction = object_camera_direction;

  00659	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  00660	05 14 00 00 00	 add	 eax, OFFSET ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A+20
  00665	8b 4d e0	 mov	 ecx, DWORD PTR _object_camera_direction$[ebp]
  00668	89 08		 mov	 DWORD PTR [eax], ecx
  0066a	8b 55 e4	 mov	 edx, DWORD PTR _object_camera_direction$[ebp+4]
  0066d	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00670	8b 4d e8	 mov	 ecx, DWORD PTR _object_camera_direction$[ebp+8]
  00673	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 387  : 	object_3d_object_base[object_3d_object_current_base].points_base = object_3d_points_current_base;

  00676	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  0067d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?object_3d_points_current_base@@3HA ; object_3d_points_current_base
  00683	89 88 24 00 00
	00		 mov	 DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[eax+36], ecx

; 388  : 	object_3d_object_base[object_3d_object_current_base].object_number = object_number;

  00689	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  00690	8b 4d fc	 mov	 ecx, DWORD PTR _object_number$[ebp]
  00693	89 88 20 00 00
	00		 mov	 DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[eax+32], ecx

; 389  : 	object_3d_object_base[object_3d_object_current_base].object_vp = NULL;	//&obj->vp;

  00699	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  006a0	c7 80 28 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A[eax+40], 0

; 390  : 
; 391  : 	current_object_3d_object_base = &object_3d_object_base[object_3d_object_current_base];

  006aa	6b 05 00 00 00
	00 2c		 imul	 eax, DWORD PTR ?object_3d_object_current_base@@3HA, 44 ; object_3d_object_current_base
  006b1	05 00 00 00 00	 add	 eax, OFFSET ?object_3d_object_base@@3PAUOBJECT_3D_INFO@@A ; object_3d_object_base
  006b6	a3 00 00 00 00	 mov	 DWORD PTR ?current_object_3d_object_base@@3PAUOBJECT_3D_INFO@@A, eax ; current_object_3d_object_base

; 392  : 
; 393  : 	//
; 394  : 	// Set up the face sorting variables
; 395  : 	//
; 396  : 
; 397  : 	translucent_sorted_buffer = get_translucent_sorted_polygon_buffer ();

  006bb	e8 00 00 00 00	 call	 ?get_translucent_sorted_polygon_buffer@@YGPAUPOLYGON_BUFFER@@XZ ; get_translucent_sorted_polygon_buffer
  006c0	89 45 c4	 mov	 DWORD PTR _translucent_sorted_buffer$[ebp], eax

; 398  : 
; 399  : 	//
; 400  : 	// Reset the temporary buffered faces
; 401  : 	//
; 402  : 
; 403  : 	reset_temporary_buffered_translucent_polygons ();

  006c3	e8 00 00 00 00	 call	 ?reset_temporary_buffered_translucent_polygons@@YGXXZ ; reset_temporary_buffered_translucent_polygons

; 404  : 
; 405  : 	//
; 406  : 	// Now start transforming etc
; 407  : 	//
; 408  : 
; 409  : 	current_object_3d_light_maps_enabled = TRUE;

  006c8	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?current_object_3d_light_maps_enabled@@3HA, 1 ; current_object_3d_light_maps_enabled

; 410  : 
; 411  : 	if ( objects_3d_data[object_number].number_of_points )

  006d2	6b 45 fc 68	 imul	 eax, DWORD PTR _object_number$[ebp], 104
  006d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  006dc	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  006e0	85 d2		 test	 edx, edx
  006e2	74 78		 je	 SHORT $LN10@draw_3d_ex

; 412  : 	{
; 413  : 		object_3d_scale.x = explosion->scale;

  006e4	8b 45 08	 mov	 eax, DWORD PTR _explosion$[ebp]
  006e7	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  006ec	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?object_3d_scale@@3UVEC3D@@A, xmm0

; 414  : 		object_3d_scale.y = explosion->scale;

  006f4	8b 45 08	 mov	 eax, DWORD PTR _explosion$[ebp]
  006f7	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  006fc	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?object_3d_scale@@3UVEC3D@@A+4, xmm0

; 415  : 		object_3d_scale.z = explosion->scale;

  00704	8b 45 08	 mov	 eax, DWORD PTR _explosion$[ebp]
  00707	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  0070c	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?object_3d_scale@@3UVEC3D@@A+8, xmm0

; 416  : 
; 417  : 		transform_3d_explosion_object ( &objects_3d_data[object_number],

  00714	8d 45 ec	 lea	 eax, DWORD PTR _object_camera_position$[ebp]
  00717	50		 push	 eax
  00718	51		 push	 ecx
  00719	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _amplitude$[ebp]
  0071e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00723	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _displacement_points_lookup$[ebp]
  00729	51		 push	 ecx
  0072a	8b 55 b4	 mov	 edx, DWORD PTR _displacement$[ebp]
  0072d	52		 push	 edx
  0072e	8b 45 f8	 mov	 eax, DWORD PTR _object_relative_position$[ebp]
  00731	50		 push	 eax
  00732	6b 4d fc 68	 imul	 ecx, DWORD PTR _object_number$[ebp], 104
  00736	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?objects_3d_data@@3PAUOBJECT_3D@@A ; objects_3d_data
  0073c	51		 push	 ecx
  0073d	e8 00 00 00 00	 call	 ?transform_3d_explosion_object@@YGXPAUOBJECT_3D@@PAUVEC3D@@PAUDISPLACEMENT_MAP@@PAUEXPLOSION_OBJECT_POINTS_LOOKUP@@M1@Z ; transform_3d_explosion_object

; 418  : 														object_relative_position,
; 419  : 														displacement,
; 420  : 														displacement_points_lookup,
; 421  : 														amplitude,
; 422  : 														&object_camera_position );
; 423  : 
; 424  : 		draw_3d_explosion_clipped_faces ( object_number, object_relative_position, current_3d_lights, current_object_3d_object_base );

  00742	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_object_base@@3PAUOBJECT_3D_INFO@@A ; current_object_3d_object_base
  00747	50		 push	 eax
  00748	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_3d_lights@@3PAULIGHT_3D_SOURCE@@A ; current_3d_lights
  0074e	51		 push	 ecx
  0074f	8b 55 f8	 mov	 edx, DWORD PTR _object_relative_position$[ebp]
  00752	52		 push	 edx
  00753	8b 45 fc	 mov	 eax, DWORD PTR _object_number$[ebp]
  00756	50		 push	 eax
  00757	e8 00 00 00 00	 call	 ?draw_3d_explosion_clipped_faces@@YGXHPAUVEC3D@@PAULIGHT_3D_SOURCE@@PAUOBJECT_3D_INFO@@@Z ; draw_3d_explosion_clipped_faces
$LN10@draw_3d_ex:

; 425  : 	}
; 426  : 
; 427  : 	//
; 428  : 	// Adjust the memory pointers for any sub objects
; 429  : 	//
; 430  : 
; 431  : 	if ( scene->number_of_sub_objects )

  0075c	8b 45 b0	 mov	 eax, DWORD PTR _scene$[ebp]
  0075f	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00766	74 50		 je	 SHORT $LN3@draw_3d_ex

; 432  : 	{
; 433  : 		int
; 434  : 			count;
; 435  : 
; 436  : 		for ( count = ( scene->number_of_sub_objects -1 ); count >= 0; count-- )

  00768	8b 45 b0	 mov	 eax, DWORD PTR _scene$[ebp]
  0076b	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00771	83 e9 01	 sub	 ecx, 1
  00774	89 8d ec fe ff
	ff		 mov	 DWORD PTR _count$1[ebp], ecx
  0077a	eb 0f		 jmp	 SHORT $LN4@draw_3d_ex
$LN2@draw_3d_ex:
  0077c	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _count$1[ebp]
  00782	83 e8 01	 sub	 eax, 1
  00785	89 85 ec fe ff
	ff		 mov	 DWORD PTR _count$1[ebp], eax
$LN4@draw_3d_ex:
  0078b	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _count$1[ebp], 0
  00792	7c 24		 jl	 SHORT $LN3@draw_3d_ex

; 437  : 		{
; 438  : 
; 439  : 			draw_sub_explosion ( &scene->sub_objects[count], &vp, object_relative_position, explosion );

  00794	8b 45 08	 mov	 eax, DWORD PTR _explosion$[ebp]
  00797	50		 push	 eax
  00798	8b 4d f8	 mov	 ecx, DWORD PTR _object_relative_position$[ebp]
  0079b	51		 push	 ecx
  0079c	8d 55 80	 lea	 edx, DWORD PTR _vp$[ebp]
  0079f	52		 push	 edx
  007a0	6b 85 ec fe ff
	ff 38		 imul	 eax, DWORD PTR _count$1[ebp], 56
  007a7	8b 4d b0	 mov	 ecx, DWORD PTR _scene$[ebp]
  007aa	03 81 d8 00 00
	00		 add	 eax, DWORD PTR [ecx+216]
  007b0	50		 push	 eax
  007b1	e8 00 00 00 00	 call	 ?draw_sub_explosion@@YGXPAUOBJECT_3D_DATABASE_ENTRY@@PAUVIEWPOINT@@PAUVEC3D@@PAUOBJECT_3D_EXPLOSION@@@Z ; draw_sub_explosion

; 440  : 		}

  007b6	eb c4		 jmp	 SHORT $LN2@draw_3d_ex
$LN3@draw_3d_ex:

; 441  : 	}
; 442  : 
; 443  : 	//
; 444  : 	// Now finish sorting the translucent polygons and render them now
; 445  : 	//
; 446  : 
; 447  : 	if ( finalise_translucent_sorted_polygon_buffer ( translucent_sorted_buffer ) )

  007b8	8b 45 c4	 mov	 eax, DWORD PTR _translucent_sorted_buffer$[ebp]
  007bb	50		 push	 eax
  007bc	e8 00 00 00 00	 call	 ?finalise_translucent_sorted_polygon_buffer@@YGHPAUPOLYGON_BUFFER@@@Z ; finalise_translucent_sorted_polygon_buffer
  007c1	85 c0		 test	 eax, eax
  007c3	74 12		 je	 SHORT $LN12@draw_3d_ex

; 448  : 	{
; 449  : 		draw_polygon_buffer ( translucent_sorted_buffer );

  007c5	8b 45 c4	 mov	 eax, DWORD PTR _translucent_sorted_buffer$[ebp]
  007c8	50		 push	 eax
  007c9	e8 00 00 00 00	 call	 ?draw_polygon_buffer@@YGXPAUPOLYGON_BUFFER@@@Z ; draw_polygon_buffer

; 450  : 
; 451  : 		remove_translucent_polygon_buffer ( translucent_sorted_buffer );

  007ce	8b 45 c4	 mov	 eax, DWORD PTR _translucent_sorted_buffer$[ebp]
  007d1	50		 push	 eax
  007d2	e8 00 00 00 00	 call	 ?remove_translucent_polygon_buffer@@YGXPAUPOLYGON_BUFFER@@@Z ; remove_translucent_polygon_buffer
$LN12@draw_3d_ex:

; 452  : 	}
; 453  : 
; 454  : 	//
; 455  : 	// If there are any temporary tranlucent polygons, draw them now
; 456  : 	//
; 457  : 
; 458  : 	if ( get_number_of_temporary_translucent_polygons () )

  007d7	e8 00 00 00 00	 call	 ?get_number_of_temporary_translucent_polygons@@YGHXZ ; get_number_of_temporary_translucent_polygons
  007dc	85 c0		 test	 eax, eax
  007de	74 0e		 je	 SHORT $LN13@draw_3d_ex

; 459  : 	{
; 460  : 		//
; 461  : 		// No need to set translucency on, its already on! but turn off specular
; 462  : 		//
; 463  : 
; 464  : 		set_d3d_int_state ( D3DRENDERSTATE_SPECULARENABLE, FALSE );

  007e0	6a 00		 push	 0
  007e2	6a 1d		 push	 29			; 0000001dH
  007e4	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 465  : 
; 466  : 		draw_temporary_translucent_polygons ();

  007e9	e8 00 00 00 00	 call	 ?draw_temporary_translucent_polygons@@YGXXZ ; draw_temporary_translucent_polygons
$LN13@draw_3d_ex:

; 467  : 	}
; 468  : }

  007ee	5f		 pop	 edi
  007ef	5e		 pop	 esi
  007f0	5b		 pop	 ebx
  007f1	8b e5		 mov	 esp, ebp
  007f3	5d		 pop	 ebp
  007f4	c2 04 00	 ret	 4
?draw_3d_explosion@@YGXPAUOBJECT_3D_EXPLOSION@@@Z ENDP	; draw_3d_explosion
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\graphics\viewport.h
;	COMDAT ?generate_lookup_outcode@@YGHHHHH@Z
_TEXT	SEGMENT
_xmin$ = 8						; size = 4
_ymin$ = 12						; size = 4
_xmax$ = 16						; size = 4
_ymax$ = 20						; size = 4
?generate_lookup_outcode@@YGHHHHH@Z PROC		; generate_lookup_outcode, COMDAT

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 200  : 
; 201  : 	__asm mov eax, xmin;

  00009	8b 45 08	 mov	 eax, DWORD PTR _xmin$[ebp]
  0000c	8b 5d 0c	 mov	 ebx, DWORD PTR _ymin$[ebp]
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR _xmax$[ebp]
  00012	8b 55 14	 mov	 edx, DWORD PTR _ymax$[ebp]
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	81 e3 00 00 00
	80		 and	 ebx, -2147483648	; 80000000H
  0001e	c1 e9 1d	 shr	 ecx, 29			; 0000001dH
  00021	81 e2 00 00 00
	80		 and	 edx, -2147483648	; 80000000H
  00027	c1 eb 1e	 shr	 ebx, 30			; 0000001eH
  0002a	83 e0 01	 and	 eax, 1
  0002d	c1 ea 1c	 shr	 edx, 28			; 0000001cH
  00030	83 e1 04	 and	 ecx, 4
  00033	0b c3		 or	 eax, ebx
  00035	0b ca		 or	 ecx, edx
  00037	0b c1		 or	 eax, ecx
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 10 00	 ret	 16			; 00000010H
?generate_lookup_outcode@@YGHHHHH@Z ENDP		; generate_lookup_outcode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\fpu.h
;	COMDAT ?asm_convert_float_to_int@@YGXMPAH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_integer$ = 12						; size = 4
?asm_convert_float_to_int@@YGXMPAH@Z PROC		; asm_convert_float_to_int, COMDAT

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 131  : 
; 132  : 	__asm
; 133  : 	{
; 134  : 
; 135  : 		fld value

  00009	d9 45 08	 fld	 DWORD PTR _value$[ebp]

; 136  : 		mov edx, integer

  0000c	8b 55 0c	 mov	 edx, DWORD PTR _integer$[ebp]

; 137  : 		fistp dword ptr [edx]

  0000f	db 1a		 fistp	 DWORD PTR [edx]

; 138  : 	}
; 139  : }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?asm_convert_float_to_int@@YGXMPAH@Z ENDP		; asm_convert_float_to_int
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fabs@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?fabs@@YGMM@Z PROC					; fabs, COMDAT

; 112  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 113  : 	return (_CSTD fabsf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _fabsf
  00019	83 c4 04	 add	 esp, 4

; 114  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?fabs@@YGMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 671  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 672  :             return (float)fabs(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _fabs
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 673  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
END
