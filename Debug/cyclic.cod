; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\gunships\dynamics\common\cyclic.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?mouse_sensitivity@@3MA				; mouse_sensitivity
_DATA	SEGMENT
?mouse_sensitivity@@3MA DD 041c80000r		; 25	; mouse_sensitivity
_DATA	ENDS
PUBLIC	_fabsf
PUBLIC	?fabs@@YGMM@Z					; fabs
PUBLIC	?cyclic_left@@YGXPAUEVENT@@@Z			; cyclic_left
PUBLIC	?cyclic_right@@YGXPAUEVENT@@@Z			; cyclic_right
PUBLIC	?cyclic_forward@@YGXPAUEVENT@@@Z		; cyclic_forward
PUBLIC	?cyclic_backward@@YGXPAUEVENT@@@Z		; cyclic_backward
PUBLIC	?cyclic_mouse_input@@YGXPAUEVENT@@@Z		; cyclic_mouse_input
PUBLIC	?update_cyclic_pressure_inputs@@YGXXZ		; update_cyclic_pressure_inputs
PUBLIC	?damage_primary_hydralics_only@@YGXXZ		; damage_primary_hydralics_only
PUBLIC	?damage_hydraulics@@YGXH@Z			; damage_hydraulics
PUBLIC	?get_hydraulic_pressure@@YGMXZ			; get_hydraulic_pressure
PUBLIC	?initialise_cyclic@@YGXXZ			; initialise_cyclic
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0BN@ONCBNIKB@CYCLIC?3?5code?5with?5delta?5time@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3f00002000400080
PUBLIC	__real@3f10000000000000
PUBLIC	__real@3f523456789abcdf
PUBLIC	__real@3f800000
PUBLIC	__real@3f8fdb97530eca86
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe4cccccccccccd
PUBLIC	__real@3fe8000000000000
PUBLIC	__real@3fe999999999999a
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4009000000000000
PUBLIC	__real@4014000000000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@4039000000000000
PUBLIC	__real@4042c00000000000
PUBLIC	__real@4049000000000000
PUBLIC	__real@4069000000000000
PUBLIC	__real@40d3880000000000
PUBLIC	__real@42480000
PUBLIC	__real@469c4000
PUBLIC	__real@c000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_fabs:PROC
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?get_joystick_axis@@YGHHH@Z:PROC		; get_joystick_axis
EXTRN	?set_current_flight_dynamics_auto_pilot@@YGXH@Z:PROC ; set_current_flight_dynamics_auto_pilot
EXTRN	?get_current_dynamics_options@@YGHW4DYNAMICS_OPTIONS_TYPES@@@Z:PROC ; get_current_dynamics_options
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?random_number_seed@@3HA:DWORD			; random_number_seed
EXTRN	?command_line_cyclic_joystick_index@@3HA:DWORD	; command_line_cyclic_joystick_index
EXTRN	?command_line_cyclic_joystick_x_axis@@3HA:DWORD	; command_line_cyclic_joystick_x_axis
EXTRN	?command_line_cyclic_joystick_y_axis@@3HA:DWORD	; command_line_cyclic_joystick_y_axis
EXTRN	?command_line_nonlinear_cyclic@@3HA:DWORD	; command_line_nonlinear_cyclic
EXTRN	?command_line_dynamics_cyclic_dead_zone@@3MA:DWORD ; command_line_dynamics_cyclic_dead_zone
EXTRN	?global_options@@3UGLOBAL_OPTIONS_DATA@@A:BYTE	; global_options
EXTRN	?trim_button_held@@3HA:DWORD			; trim_button_held
EXTRN	?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A:DWORD ; current_flight_dynamics
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?damaged_lock_x_pos@@3MA DD 01H DUP (?)			; damaged_lock_x_pos
?damaged_lock_y_pos@@3MA DD 01H DUP (?)			; damaged_lock_y_pos
?hydraulic_pressure@@3MA DD 01H DUP (?)			; hydraulic_pressure
?hydraulic_pressure_loss_rate@@3MA DD 01H DUP (?)	; hydraulic_pressure_loss_rate
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c000000000000000
CONST	SEGMENT
__real@c000000000000000 DQ 0c000000000000000r	; -2
CONST	ENDS
;	COMDAT __real@469c4000
CONST	SEGMENT
__real@469c4000 DD 0469c4000r			; 20000
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@40d3880000000000
CONST	SEGMENT
__real@40d3880000000000 DQ 040d3880000000000r	; 20000
CONST	ENDS
;	COMDAT __real@4069000000000000
CONST	SEGMENT
__real@4069000000000000 DQ 04069000000000000r	; 200
CONST	ENDS
;	COMDAT __real@4049000000000000
CONST	SEGMENT
__real@4049000000000000 DQ 04049000000000000r	; 50
CONST	ENDS
;	COMDAT __real@4042c00000000000
CONST	SEGMENT
__real@4042c00000000000 DQ 04042c00000000000r	; 37.5
CONST	ENDS
;	COMDAT __real@4039000000000000
CONST	SEGMENT
__real@4039000000000000 DQ 04039000000000000r	; 25
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@4009000000000000
CONST	SEGMENT
__real@4009000000000000 DQ 04009000000000000r	; 3.125
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe999999999999a
CONST	SEGMENT
__real@3fe999999999999a DQ 03fe999999999999ar	; 0.8
CONST	ENDS
;	COMDAT __real@3fe8000000000000
CONST	SEGMENT
__real@3fe8000000000000 DQ 03fe8000000000000r	; 0.75
CONST	ENDS
;	COMDAT __real@3fe4cccccccccccd
CONST	SEGMENT
__real@3fe4cccccccccccd DQ 03fe4cccccccccccdr	; 0.65
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3f8fdb97530eca86
CONST	SEGMENT
__real@3f8fdb97530eca86 DQ 03f8fdb97530eca86r	; 0.0155556
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f523456789abcdf
CONST	SEGMENT
__real@3f523456789abcdf DQ 03f523456789abcdfr	; 0.00111111
CONST	ENDS
;	COMDAT __real@3f10000000000000
CONST	SEGMENT
__real@3f10000000000000 DQ 03f10000000000000r	; 6.10352e-05
CONST	ENDS
;	COMDAT __real@3f00002000400080
CONST	SEGMENT
__real@3f00002000400080 DQ 03f00002000400080r	; 3.05185e-05
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@ONCBNIKB@CYCLIC?3?5code?5with?5delta?5time@
CONST	SEGMENT
??_C@_0BN@ONCBNIKB@CYCLIC?3?5code?5with?5delta?5time@ DB 'CYCLIC: code wi'
	DB	'th delta time', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\cyclic.c
;	COMDAT ?initialise_cyclic@@YGXXZ
_TEXT	SEGMENT
?initialise_cyclic@@YGXXZ PROC				; initialise_cyclic, COMDAT

; 714  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 715  : 	damage_hydraulics(FALSE);

  00009	6a 00		 push	 0
  0000b	e8 00 00 00 00	 call	 ?damage_hydraulics@@YGXH@Z ; damage_hydraulics

; 716  : }

  00010	5f		 pop	 edi
  00011	5e		 pop	 esi
  00012	5b		 pop	 ebx
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?initialise_cyclic@@YGXXZ ENDP				; initialise_cyclic
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\cyclic.c
;	COMDAT ?get_hydraulic_pressure@@YGMXZ
_TEXT	SEGMENT
?get_hydraulic_pressure@@YGMXZ PROC			; get_hydraulic_pressure, COMDAT

; 705  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 706  : 	return hydraulic_pressure;

  00009	d9 05 00 00 00
	00		 fld	 DWORD PTR ?hydraulic_pressure@@3MA

; 707  : }

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?get_hydraulic_pressure@@YGMXZ ENDP			; get_hydraulic_pressure
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\cyclic.c
;	COMDAT ?damage_hydraulics@@YGXH@Z
_TEXT	SEGMENT
_damaging$ = 8						; size = 4
?damage_hydraulics@@YGXH@Z PROC				; damage_hydraulics, COMDAT

; 679  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 680  : 	if (damaging)

  00009	83 7d 08 00	 cmp	 DWORD PTR _damaging$[ebp], 0
  0000d	0f 84 44 01 00
	00		 je	 $LN2@damage_hyd

; 681  : 	{
; 682  : 		hydraulic_pressure = 0.65 + (sfrand1() * 0.1);  // lose some hydraulics pressure immediately

  00013	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  0001d	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00022	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00027	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  0002d	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00030	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00036	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  0003c	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00040	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  00048	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00050	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe4cccccccccccd
  00058	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0005c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hydraulic_pressure@@3MA, xmm0

; 683  : 		// lock cyclic in a random position
; 684  : 		damaged_lock_x_pos = sfrand1() * 50.0;

  00064	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  0006e	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00073	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00078	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  0007e	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00081	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00087	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  0008d	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00091	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  00099	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4049000000000000
  000a1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000a5	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?damaged_lock_x_pos@@3MA, xmm0

; 685  : 		damaged_lock_y_pos = 25.0 + sfrand1() * 50.0;

  000ad	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  000b7	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  000bc	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  000c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  000c7	c1 f9 10	 sar	 ecx, 16			; 00000010H
  000ca	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  000d0	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  000d6	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  000da	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  000e2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4049000000000000
  000ea	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4039000000000000
  000f2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000f6	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?damaged_lock_y_pos@@3MA, xmm0

; 686  : 		hydraulic_pressure_loss_rate = hydraulic_pressure * frand1() * (MAX_HYDRAULICS_LOSS_RATE - MIN_HYDRAULICS_LOSS_RATE) + MIN_HYDRAULICS_LOSS_RATE;

  000fe	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  00108	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  0010d	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00112	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00118	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0011b	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00121	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00125	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  0012d	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?hydraulic_pressure@@3MA
  00135	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00139	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3f8fdb97530eca86
  00141	f2 0f 58 0d 00
	00 00 00	 addsd	 xmm1, QWORD PTR __real@3f523456789abcdf
  00149	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0014d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hydraulic_pressure_loss_rate@@3MA, xmm0

; 687  : 	}
; 688  : 	else

  00155	eb 1b		 jmp	 SHORT $LN3@damage_hyd
$LN2@damage_hyd:

; 689  : 	{
; 690  : 		hydraulic_pressure = 1.0;

  00157	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0015f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hydraulic_pressure@@3MA, xmm0

; 691  : 		hydraulic_pressure_loss_rate = 0.0;

  00167	0f 57 c0	 xorps	 xmm0, xmm0
  0016a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hydraulic_pressure_loss_rate@@3MA, xmm0
$LN3@damage_hyd:

; 692  : 	}
; 693  : }

  00172	5f		 pop	 edi
  00173	5e		 pop	 esi
  00174	5b		 pop	 ebx
  00175	8b e5		 mov	 esp, ebp
  00177	5d		 pop	 ebp
  00178	c2 04 00	 ret	 4
?damage_hydraulics@@YGXH@Z ENDP				; damage_hydraulics
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\cyclic.c
;	COMDAT ?damage_primary_hydralics_only@@YGXXZ
_TEXT	SEGMENT
?damage_primary_hydralics_only@@YGXXZ PROC		; damage_primary_hydralics_only, COMDAT

; 696  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 697  : 	hydraulic_pressure *= 0.75 + (sfrand1() * 0.1);  // lose some hydraulics pressure

  00009	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  00013	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00018	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  0001d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00023	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00026	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  0002c	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  00032	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00036	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  0003e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00046	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe8000000000000
  0004e	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?hydraulic_pressure@@3MA
  00056	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  0005a	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0005e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hydraulic_pressure@@3MA, xmm0

; 698  : }

  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
?damage_primary_hydralics_only@@YGXXZ ENDP		; damage_primary_hydralics_only
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\cyclic.c
;	COMDAT ?update_cyclic_pressure_inputs@@YGXXZ
_TEXT	SEGMENT
tv1268 = -128						; size = 4
tv1261 = -128						; size = 4
tv1176 = -128						; size = 8
tv1140 = -128						; size = 8
tv1069 = -128						; size = 8
tv999 = -128						; size = 8
tv903 = -128						; size = 4
tv875 = -128						; size = 4
tv422 = -128						; size = 4
tv394 = -128						; size = 4
tv1267 = -124						; size = 4
tv1260 = -124						; size = 4
tv1230 = -124						; size = 4
tv1199 = -124						; size = 4
tv904 = -124						; size = 4
tv876 = -124						; size = 4
tv423 = -124						; size = 4
tv395 = -124						; size = 4
tv91 = -124						; size = 4
$T1 = -120						; size = 4
$T2 = -116						; size = 4
$T3 = -112						; size = 4
$T4 = -108						; size = 4
$T5 = -104						; size = 4
$T6 = -100						; size = 4
$T7 = -96						; size = 4
$T8 = -92						; size = 4
_joystick_y_pos$9 = -24					; size = 4
_joystick_x_pos$10 = -20				; size = 4
_input$11 = -16						; size = 4
_joyval$12 = -12					; size = 4
_trim_y$ = -8						; size = 4
_trim_x$ = -4						; size = 4
?update_cyclic_pressure_inputs@@YGXXZ PROC		; update_cyclic_pressure_inputs, COMDAT

; 239  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 240  : 
; 241  : 	float
; 242  : 		trim_x,
; 243  : 		trim_y;
; 244  : 
; 245  : 	if (!current_flight_dynamics)

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A, 0 ; current_flight_dynamics
  00013	75 05		 jne	 SHORT $LN4@update_cyc

; 246  : 	{
; 247  : 
; 248  : 		return;

  00015	e9 c8 11 00 00	 jmp	 $LN1@update_cyc
$LN4@update_cyc:

; 249  : 	}
; 250  : 
; 251  : 	if (hydraulic_pressure_loss_rate && hydraulic_pressure > 0.0)

  0001a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hydraulic_pressure_loss_rate@@3MA
  00022	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00029	9f		 lahf
  0002a	f6 c4 44	 test	 ah, 68			; 00000044H
  0002d	7b 52		 jnp	 SHORT $LN6@update_cyc
  0002f	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?hydraulic_pressure@@3MA
  00037	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0003f	76 40		 jbe	 SHORT $LN6@update_cyc

; 252  : 	{
; 253  : 		hydraulic_pressure -= hydraulic_pressure_loss_rate * get_delta_time();

  00041	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?hydraulic_pressure_loss_rate@@3MA
  00049	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00051	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?hydraulic_pressure@@3MA
  00059	f3 0f 5c c8	 subss	 xmm1, xmm0
  0005d	f3 0f 11 0d 00
	00 00 00	 movss	 DWORD PTR ?hydraulic_pressure@@3MA, xmm1

; 254  : 
; 255  : 		if (hydraulic_pressure < 0.0)

  00065	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?hydraulic_pressure@@3MA
  0006d	0f 57 c9	 xorps	 xmm1, xmm1
  00070	66 0f 2f c8	 comisd	 xmm1, xmm0
  00074	76 0b		 jbe	 SHORT $LN6@update_cyc

; 256  : 			hydraulic_pressure = 0.0;

  00076	0f 57 c0	 xorps	 xmm0, xmm0
  00079	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?hydraulic_pressure@@3MA, xmm0
$LN6@update_cyc:

; 257  : 	}
; 258  : 
; 259  : 	trim_x = current_flight_dynamics->input_data.cyclic_x_trim.value;

  00081	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00086	f3 0f 10 80 28
	01 00 00	 movss	 xmm0, DWORD PTR [eax+296]
  0008e	f3 0f 11 45 fc	 movss	 DWORD PTR _trim_x$[ebp], xmm0

; 260  : 	trim_y = current_flight_dynamics->input_data.cyclic_y_trim.value;

  00093	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00098	f3 0f 10 80 40
	01 00 00	 movss	 xmm0, DWORD PTR [eax+320]
  000a0	f3 0f 11 45 f8	 movss	 DWORD PTR _trim_y$[ebp], xmm0

; 261  : 
; 262  : 	if (trim_button_held)

  000a5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?trim_button_held@@3HA, 0 ; trim_button_held
  000ac	74 33		 je	 SHORT $LN7@update_cyc

; 263  : 	{
; 264  : 		current_flight_dynamics->input_data.cyclic_x.value = current_flight_dynamics->input_data.cyclic_x_trim.value;

  000ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000b9	8b 91 28 01 00
	00		 mov	 edx, DWORD PTR [ecx+296]
  000bf	89 90 f8 00 00
	00		 mov	 DWORD PTR [eax+248], edx

; 265  : 		current_flight_dynamics->input_data.cyclic_y.value = current_flight_dynamics->input_data.cyclic_y_trim.value;

  000c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000d0	8b 91 40 01 00
	00		 mov	 edx, DWORD PTR [ecx+320]
  000d6	89 90 10 01 00
	00		 mov	 DWORD PTR [eax+272], edx

; 266  : 	}
; 267  : 	else

  000dc	e9 ab 0d 00 00	 jmp	 $LN2@update_cyc
$LN7@update_cyc:

; 268  : 		switch (get_global_cyclic_input ())

  000e1	a1 28 00 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+40
  000e6	89 45 84	 mov	 DWORD PTR tv91[ebp], eax
  000e9	83 7d 84 01	 cmp	 DWORD PTR tv91[ebp], 1
  000ed	74 15		 je	 SHORT $LN9@update_cyc
  000ef	83 7d 84 02	 cmp	 DWORD PTR tv91[ebp], 2
  000f3	0f 84 89 09 00
	00		 je	 $LN46@update_cyc
  000f9	83 7d 84 03	 cmp	 DWORD PTR tv91[ebp], 3
  000fd	74 05		 je	 SHORT $LN9@update_cyc
  000ff	e9 88 0d 00 00	 jmp	 $LN2@update_cyc
$LN9@update_cyc:

; 269  : 		{
; 270  : 
; 271  : 			case KEYBOARD_INPUT:
; 272  : 			case MOUSE_INPUT:
; 273  : 			{
; 274  : 
; 275  : 				if (current_flight_dynamics->input_data.cyclic_input_pressure & CYCLIC_PRESSURE_LEFT)

  00104	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00109	8b 88 a0 1b 00
	00		 mov	 ecx, DWORD PTR [eax+7072]
  0010f	83 e1 01	 and	 ecx, 1
  00112	0f 84 f2 00 00
	00		 je	 $LN10@update_cyc

; 276  : 				{
; 277  : 
; 278  : 					current_flight_dynamics->input_data.cyclic_horizontal_pressure.value = min (0.0f, current_flight_dynamics->input_data.cyclic_horizontal_pressure.value);

  00118	0f 57 c0	 xorps	 xmm0, xmm0
  0011b	f3 0f 11 45 a4	 movss	 DWORD PTR $T8[ebp], xmm0
  00120	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00125	05 70 01 00 00	 add	 eax, 368		; 00000170H
  0012a	50		 push	 eax
  0012b	8d 4d a4	 lea	 ecx, DWORD PTR $T8[ebp]
  0012e	51		 push	 ecx
  0012f	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00134	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0013a	8b 00		 mov	 eax, DWORD PTR [eax]
  0013c	89 82 70 01 00
	00		 mov	 DWORD PTR [edx+368], eax

; 279  : 
; 280  : 					current_flight_dynamics->input_data.cyclic_x.value = min ((current_flight_dynamics->input_data.cyclic_x.value) / 2.0f, current_flight_dynamics->input_data.cyclic_x.value);

  00142	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00147	f3 0f 10 80 f8
	00 00 00	 movss	 xmm0, DWORD PTR [eax+248]
  0014f	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00157	f3 0f 11 45 a0	 movss	 DWORD PTR $T7[ebp], xmm0
  0015c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00162	81 c1 f8 00 00
	00		 add	 ecx, 248		; 000000f8H
  00168	51		 push	 ecx
  00169	8d 55 a0	 lea	 edx, DWORD PTR $T7[ebp]
  0016c	52		 push	 edx
  0016d	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  00172	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00178	8b 10		 mov	 edx, DWORD PTR [eax]
  0017a	89 91 f8 00 00
	00		 mov	 DWORD PTR [ecx+248], edx

; 281  : 
; 282  : 					current_flight_dynamics->input_data.cyclic_horizontal_pressure.value -= MODEL_FRAME_RATE * get_model_delta_time ();

  00180	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00185	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  0018d	f3 0f 59 80 90
	00 00 00	 mulss	 xmm0, DWORD PTR [eax+144]
  00195	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0019b	f3 0f 10 89 70
	01 00 00	 movss	 xmm1, DWORD PTR [ecx+368]
  001a3	f3 0f 5c c8	 subss	 xmm1, xmm0
  001a7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  001ad	f3 0f 11 8a 70
	01 00 00	 movss	 DWORD PTR [edx+368], xmm1

; 283  : 
; 284  : 					if ((current_flight_dynamics->auto_hover == HOVER_HOLD_NORMAL) ||

  001b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  001ba	8b 88 28 25 00
	00		 mov	 ecx, DWORD PTR [eax+9512]
  001c0	c1 e9 07	 shr	 ecx, 7
  001c3	83 e1 07	 and	 ecx, 7
  001c6	83 f9 01	 cmp	 ecx, 1
  001c9	74 16		 je	 SHORT $LN13@update_cyc
  001cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  001d0	8b 88 28 25 00
	00		 mov	 ecx, DWORD PTR [eax+9512]
  001d6	c1 e9 07	 shr	 ecx, 7
  001d9	83 e1 07	 and	 ecx, 7
  001dc	83 f9 02	 cmp	 ecx, 2
  001df	75 24		 jne	 SHORT $LN12@update_cyc
$LN13@update_cyc:

; 285  : 						(current_flight_dynamics->auto_hover == HOVER_HOLD_STABLE))
; 286  : 					{
; 287  : 
; 288  : 						set_current_flight_dynamics_auto_hover (HOVER_HOLD_NONE);

  001e1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  001e6	8b 88 28 25 00
	00		 mov	 ecx, DWORD PTR [eax+9512]
  001ec	81 e1 7f fc ff
	ff		 and	 ecx, -897		; fffffc7fH
  001f2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  001f8	89 8a 28 25 00
	00		 mov	 DWORD PTR [edx+9512], ecx

; 289  : 						set_current_flight_dynamics_auto_pilot (FALSE);

  001fe	6a 00		 push	 0
  00200	e8 00 00 00 00	 call	 ?set_current_flight_dynamics_auto_pilot@@YGXH@Z ; set_current_flight_dynamics_auto_pilot
$LN12@update_cyc:

; 290  : 					}
; 291  : 				}

  00205	e9 94 01 00 00	 jmp	 $LN19@update_cyc
$LN10@update_cyc:

; 292  : 				else if (current_flight_dynamics->input_data.cyclic_input_pressure & CYCLIC_PRESSURE_RIGHT)

  0020a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0020f	8b 88 a0 1b 00
	00		 mov	 ecx, DWORD PTR [eax+7072]
  00215	83 e1 02	 and	 ecx, 2
  00218	0f 84 ee 00 00
	00		 je	 $LN14@update_cyc

; 293  : 				{
; 294  : 
; 295  : 					current_flight_dynamics->input_data.cyclic_horizontal_pressure.value = max (0.0f, current_flight_dynamics->input_data.cyclic_horizontal_pressure.value);

  0021e	0f 57 c0	 xorps	 xmm0, xmm0
  00221	f3 0f 11 45 9c	 movss	 DWORD PTR $T6[ebp], xmm0
  00226	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0022b	05 70 01 00 00	 add	 eax, 368		; 00000170H
  00230	50		 push	 eax
  00231	8d 4d 9c	 lea	 ecx, DWORD PTR $T6[ebp]
  00234	51		 push	 ecx
  00235	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0023a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00240	8b 00		 mov	 eax, DWORD PTR [eax]
  00242	89 82 70 01 00
	00		 mov	 DWORD PTR [edx+368], eax

; 296  : 
; 297  : 					current_flight_dynamics->input_data.cyclic_x.value = max ((current_flight_dynamics->input_data.cyclic_x.value) / 2.0f, current_flight_dynamics->input_data.cyclic_x.value);

  00248	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0024d	f3 0f 10 80 f8
	00 00 00	 movss	 xmm0, DWORD PTR [eax+248]
  00255	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0025d	f3 0f 11 45 98	 movss	 DWORD PTR $T5[ebp], xmm0
  00262	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00268	81 c1 f8 00 00
	00		 add	 ecx, 248		; 000000f8H
  0026e	51		 push	 ecx
  0026f	8d 55 98	 lea	 edx, DWORD PTR $T5[ebp]
  00272	52		 push	 edx
  00273	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00278	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0027e	8b 10		 mov	 edx, DWORD PTR [eax]
  00280	89 91 f8 00 00
	00		 mov	 DWORD PTR [ecx+248], edx

; 298  : 
; 299  : 					current_flight_dynamics->input_data.cyclic_horizontal_pressure.value += MODEL_FRAME_RATE * get_model_delta_time ();

  00286	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0028b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  00293	f3 0f 59 80 90
	00 00 00	 mulss	 xmm0, DWORD PTR [eax+144]
  0029b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  002a1	f3 0f 58 81 70
	01 00 00	 addss	 xmm0, DWORD PTR [ecx+368]
  002a9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  002af	f3 0f 11 82 70
	01 00 00	 movss	 DWORD PTR [edx+368], xmm0

; 300  : 
; 301  : 					if ((current_flight_dynamics->auto_hover == HOVER_HOLD_NORMAL) ||

  002b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  002bc	8b 88 28 25 00
	00		 mov	 ecx, DWORD PTR [eax+9512]
  002c2	c1 e9 07	 shr	 ecx, 7
  002c5	83 e1 07	 and	 ecx, 7
  002c8	83 f9 01	 cmp	 ecx, 1
  002cb	74 16		 je	 SHORT $LN17@update_cyc
  002cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  002d2	8b 88 28 25 00
	00		 mov	 ecx, DWORD PTR [eax+9512]
  002d8	c1 e9 07	 shr	 ecx, 7
  002db	83 e1 07	 and	 ecx, 7
  002de	83 f9 02	 cmp	 ecx, 2
  002e1	75 24		 jne	 SHORT $LN16@update_cyc
$LN17@update_cyc:

; 302  : 						(current_flight_dynamics->auto_hover == HOVER_HOLD_STABLE))
; 303  : 					{
; 304  : 
; 305  : 						set_current_flight_dynamics_auto_hover (HOVER_HOLD_NONE);

  002e3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  002e8	8b 88 28 25 00
	00		 mov	 ecx, DWORD PTR [eax+9512]
  002ee	81 e1 7f fc ff
	ff		 and	 ecx, -897		; fffffc7fH
  002f4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  002fa	89 8a 28 25 00
	00		 mov	 DWORD PTR [edx+9512], ecx

; 306  : 						set_current_flight_dynamics_auto_pilot (FALSE);

  00300	6a 00		 push	 0
  00302	e8 00 00 00 00	 call	 ?set_current_flight_dynamics_auto_pilot@@YGXH@Z ; set_current_flight_dynamics_auto_pilot
$LN16@update_cyc:

; 307  : 					}
; 308  : 				}
; 309  : 				else

  00307	e9 92 00 00 00	 jmp	 $LN19@update_cyc
$LN14@update_cyc:

; 310  : 				{
; 311  : 
; 312  : 					if (fabs (current_flight_dynamics->input_data.cyclic_horizontal_pressure.value) < 1.0)

  0030c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00311	51		 push	 ecx
  00312	f3 0f 10 80 70
	01 00 00	 movss	 xmm0, DWORD PTR [eax+368]
  0031a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0031f	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00324	dd 5d 80	 fstp	 QWORD PTR tv999[ebp]
  00327	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0032f	66 0f 2f 45 80	 comisd	 xmm0, QWORD PTR tv999[ebp]
  00334	76 12		 jbe	 SHORT $LN18@update_cyc

; 313  : 					{
; 314  : 
; 315  : 						current_flight_dynamics->input_data.cyclic_horizontal_pressure.value = 0.0;

  00336	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0033b	0f 57 c0	 xorps	 xmm0, xmm0
  0033e	f3 0f 11 80 70
	01 00 00	 movss	 DWORD PTR [eax+368], xmm0

; 316  : 					}
; 317  : 					else

  00346	eb 56		 jmp	 SHORT $LN19@update_cyc
$LN18@update_cyc:

; 318  : 					{
; 319  : 
; 320  : 						current_flight_dynamics->input_data.cyclic_horizontal_pressure.value -= ((MODEL_FRAME_RATE * get_model_delta_time ()) / 2.0) * (current_flight_dynamics->input_data.cyclic_horizontal_pressure.value);

  00348	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0034d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  00355	f3 0f 59 80 90
	00 00 00	 mulss	 xmm0, DWORD PTR [eax+144]
  0035d	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00361	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4000000000000000
  00369	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0036f	f3 0f 5a 89 70
	01 00 00	 cvtss2sd xmm1, DWORD PTR [ecx+368]
  00377	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0037b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00381	f3 0f 5a 8a 70
	01 00 00	 cvtss2sd xmm1, DWORD PTR [edx+368]
  00389	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0038d	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00391	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00396	f3 0f 11 80 70
	01 00 00	 movss	 DWORD PTR [eax+368], xmm0
$LN19@update_cyc:

; 321  : 					}
; 322  : 				}
; 323  : 
; 324  : 
; 325  : 
; 326  : 				if (current_flight_dynamics->input_data.cyclic_input_pressure & CYCLIC_PRESSURE_BACKWARD)

  0039e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  003a3	8b 88 a0 1b 00
	00		 mov	 ecx, DWORD PTR [eax+7072]
  003a9	83 e1 08	 and	 ecx, 8
  003ac	0f 84 f2 00 00
	00		 je	 $LN20@update_cyc

; 327  : 				{
; 328  : 
; 329  : 					current_flight_dynamics->input_data.cyclic_vertical_pressure.value = min (0.0f, current_flight_dynamics->input_data.cyclic_vertical_pressure.value);

  003b2	0f 57 c0	 xorps	 xmm0, xmm0
  003b5	f3 0f 11 45 94	 movss	 DWORD PTR $T4[ebp], xmm0
  003ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  003bf	05 58 01 00 00	 add	 eax, 344		; 00000158H
  003c4	50		 push	 eax
  003c5	8d 4d 94	 lea	 ecx, DWORD PTR $T4[ebp]
  003c8	51		 push	 ecx
  003c9	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  003ce	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  003d4	8b 00		 mov	 eax, DWORD PTR [eax]
  003d6	89 82 58 01 00
	00		 mov	 DWORD PTR [edx+344], eax

; 330  : 
; 331  : 					current_flight_dynamics->input_data.cyclic_y.value = min (current_flight_dynamics->input_data.cyclic_y.value / 2.0f, current_flight_dynamics->input_data.cyclic_y.value);

  003dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  003e1	f3 0f 10 80 10
	01 00 00	 movss	 xmm0, DWORD PTR [eax+272]
  003e9	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  003f1	f3 0f 11 45 90	 movss	 DWORD PTR $T3[ebp], xmm0
  003f6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  003fc	81 c1 10 01 00
	00		 add	 ecx, 272		; 00000110H
  00402	51		 push	 ecx
  00403	8d 55 90	 lea	 edx, DWORD PTR $T3[ebp]
  00406	52		 push	 edx
  00407	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  0040c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00412	8b 10		 mov	 edx, DWORD PTR [eax]
  00414	89 91 10 01 00
	00		 mov	 DWORD PTR [ecx+272], edx

; 332  : 
; 333  : 					current_flight_dynamics->input_data.cyclic_vertical_pressure.value -= MODEL_FRAME_RATE * get_model_delta_time ();

  0041a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0041f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  00427	f3 0f 59 80 90
	00 00 00	 mulss	 xmm0, DWORD PTR [eax+144]
  0042f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00435	f3 0f 10 89 58
	01 00 00	 movss	 xmm1, DWORD PTR [ecx+344]
  0043d	f3 0f 5c c8	 subss	 xmm1, xmm0
  00441	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00447	f3 0f 11 8a 58
	01 00 00	 movss	 DWORD PTR [edx+344], xmm1

; 334  : 
; 335  : 					if ((current_flight_dynamics->auto_hover == HOVER_HOLD_NORMAL) ||

  0044f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00454	8b 88 28 25 00
	00		 mov	 ecx, DWORD PTR [eax+9512]
  0045a	c1 e9 07	 shr	 ecx, 7
  0045d	83 e1 07	 and	 ecx, 7
  00460	83 f9 01	 cmp	 ecx, 1
  00463	74 16		 je	 SHORT $LN23@update_cyc
  00465	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0046a	8b 88 28 25 00
	00		 mov	 ecx, DWORD PTR [eax+9512]
  00470	c1 e9 07	 shr	 ecx, 7
  00473	83 e1 07	 and	 ecx, 7
  00476	83 f9 02	 cmp	 ecx, 2
  00479	75 24		 jne	 SHORT $LN22@update_cyc
$LN23@update_cyc:

; 336  : 						(current_flight_dynamics->auto_hover == HOVER_HOLD_STABLE))
; 337  : 					{
; 338  : 
; 339  : 						set_current_flight_dynamics_auto_hover (HOVER_HOLD_NONE);

  0047b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00480	8b 88 28 25 00
	00		 mov	 ecx, DWORD PTR [eax+9512]
  00486	81 e1 7f fc ff
	ff		 and	 ecx, -897		; fffffc7fH
  0048c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00492	89 8a 28 25 00
	00		 mov	 DWORD PTR [edx+9512], ecx

; 340  : 						set_current_flight_dynamics_auto_pilot (FALSE);

  00498	6a 00		 push	 0
  0049a	e8 00 00 00 00	 call	 ?set_current_flight_dynamics_auto_pilot@@YGXH@Z ; set_current_flight_dynamics_auto_pilot
$LN22@update_cyc:

; 341  : 					}
; 342  : 				}

  0049f	e9 94 01 00 00	 jmp	 $LN29@update_cyc
$LN20@update_cyc:

; 343  : 				else if (current_flight_dynamics->input_data.cyclic_input_pressure & CYCLIC_PRESSURE_FORWARD)

  004a4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  004a9	8b 88 a0 1b 00
	00		 mov	 ecx, DWORD PTR [eax+7072]
  004af	83 e1 04	 and	 ecx, 4
  004b2	0f 84 ee 00 00
	00		 je	 $LN24@update_cyc

; 344  : 				{
; 345  : 
; 346  : 					current_flight_dynamics->input_data.cyclic_vertical_pressure.value = max (0.0f, current_flight_dynamics->input_data.cyclic_vertical_pressure.value);

  004b8	0f 57 c0	 xorps	 xmm0, xmm0
  004bb	f3 0f 11 45 8c	 movss	 DWORD PTR $T2[ebp], xmm0
  004c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  004c5	05 58 01 00 00	 add	 eax, 344		; 00000158H
  004ca	50		 push	 eax
  004cb	8d 4d 8c	 lea	 ecx, DWORD PTR $T2[ebp]
  004ce	51		 push	 ecx
  004cf	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  004d4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  004da	8b 00		 mov	 eax, DWORD PTR [eax]
  004dc	89 82 58 01 00
	00		 mov	 DWORD PTR [edx+344], eax

; 347  : 
; 348  : 					current_flight_dynamics->input_data.cyclic_y.value = max (current_flight_dynamics->input_data.cyclic_y.value / 2.0f, current_flight_dynamics->input_data.cyclic_y.value);

  004e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  004e7	f3 0f 10 80 10
	01 00 00	 movss	 xmm0, DWORD PTR [eax+272]
  004ef	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  004f7	f3 0f 11 45 88	 movss	 DWORD PTR $T1[ebp], xmm0
  004fc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00502	81 c1 10 01 00
	00		 add	 ecx, 272		; 00000110H
  00508	51		 push	 ecx
  00509	8d 55 88	 lea	 edx, DWORD PTR $T1[ebp]
  0050c	52		 push	 edx
  0050d	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  00512	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00518	8b 10		 mov	 edx, DWORD PTR [eax]
  0051a	89 91 10 01 00
	00		 mov	 DWORD PTR [ecx+272], edx

; 349  : 
; 350  : 					current_flight_dynamics->input_data.cyclic_vertical_pressure.value += MODEL_FRAME_RATE * get_model_delta_time ();

  00520	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00525	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  0052d	f3 0f 59 80 90
	00 00 00	 mulss	 xmm0, DWORD PTR [eax+144]
  00535	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0053b	f3 0f 58 81 58
	01 00 00	 addss	 xmm0, DWORD PTR [ecx+344]
  00543	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00549	f3 0f 11 82 58
	01 00 00	 movss	 DWORD PTR [edx+344], xmm0

; 351  : 
; 352  : 					if ((current_flight_dynamics->auto_hover == HOVER_HOLD_NORMAL) ||

  00551	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00556	8b 88 28 25 00
	00		 mov	 ecx, DWORD PTR [eax+9512]
  0055c	c1 e9 07	 shr	 ecx, 7
  0055f	83 e1 07	 and	 ecx, 7
  00562	83 f9 01	 cmp	 ecx, 1
  00565	74 16		 je	 SHORT $LN27@update_cyc
  00567	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0056c	8b 88 28 25 00
	00		 mov	 ecx, DWORD PTR [eax+9512]
  00572	c1 e9 07	 shr	 ecx, 7
  00575	83 e1 07	 and	 ecx, 7
  00578	83 f9 02	 cmp	 ecx, 2
  0057b	75 24		 jne	 SHORT $LN26@update_cyc
$LN27@update_cyc:

; 353  : 						(current_flight_dynamics->auto_hover == HOVER_HOLD_STABLE))
; 354  : 					{
; 355  : 
; 356  : 						set_current_flight_dynamics_auto_hover (HOVER_HOLD_NONE);

  0057d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00582	8b 88 28 25 00
	00		 mov	 ecx, DWORD PTR [eax+9512]
  00588	81 e1 7f fc ff
	ff		 and	 ecx, -897		; fffffc7fH
  0058e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00594	89 8a 28 25 00
	00		 mov	 DWORD PTR [edx+9512], ecx

; 357  : 						set_current_flight_dynamics_auto_pilot (FALSE);

  0059a	6a 00		 push	 0
  0059c	e8 00 00 00 00	 call	 ?set_current_flight_dynamics_auto_pilot@@YGXH@Z ; set_current_flight_dynamics_auto_pilot
$LN26@update_cyc:

; 358  : 					}
; 359  : 				}
; 360  : 				else

  005a1	e9 92 00 00 00	 jmp	 $LN29@update_cyc
$LN24@update_cyc:

; 361  : 				{
; 362  : 
; 363  : 					if (fabs (current_flight_dynamics->input_data.cyclic_vertical_pressure.value) < 1.0)

  005a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  005ab	51		 push	 ecx
  005ac	f3 0f 10 80 58
	01 00 00	 movss	 xmm0, DWORD PTR [eax+344]
  005b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b9	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  005be	dd 5d 80	 fstp	 QWORD PTR tv1069[ebp]
  005c1	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  005c9	66 0f 2f 45 80	 comisd	 xmm0, QWORD PTR tv1069[ebp]
  005ce	76 12		 jbe	 SHORT $LN28@update_cyc

; 364  : 					{
; 365  : 
; 366  : 						current_flight_dynamics->input_data.cyclic_vertical_pressure.value = 0.0;

  005d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  005d5	0f 57 c0	 xorps	 xmm0, xmm0
  005d8	f3 0f 11 80 58
	01 00 00	 movss	 DWORD PTR [eax+344], xmm0

; 367  : 					}
; 368  : 					else

  005e0	eb 56		 jmp	 SHORT $LN29@update_cyc
$LN28@update_cyc:

; 369  : 					{
; 370  : 
; 371  : 						current_flight_dynamics->input_data.cyclic_vertical_pressure.value -= ((MODEL_FRAME_RATE * get_model_delta_time ()) / 2.0) * (current_flight_dynamics->input_data.cyclic_vertical_pressure.value);

  005e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  005e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  005ef	f3 0f 59 80 90
	00 00 00	 mulss	 xmm0, DWORD PTR [eax+144]
  005f7	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  005fb	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4000000000000000
  00603	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00609	f3 0f 5a 89 58
	01 00 00	 cvtss2sd xmm1, DWORD PTR [ecx+344]
  00611	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00615	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0061b	f3 0f 5a 8a 58
	01 00 00	 cvtss2sd xmm1, DWORD PTR [edx+344]
  00623	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00627	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0062b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00630	f3 0f 11 80 58
	01 00 00	 movss	 DWORD PTR [eax+344], xmm0
$LN29@update_cyc:

; 372  : 					}
; 373  : 				}
; 374  : 
; 375  : 				// limit pressure inputs
; 376  : 
; 377  : 				current_flight_dynamics->input_data.cyclic_horizontal_pressure.value = bound (

  00638	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0063d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00643	f3 0f 10 80 78
	01 00 00	 movss	 xmm0, DWORD PTR [eax+376]
  0064b	0f 2f 81 70 01
	00 00		 comiss	 xmm0, DWORD PTR [ecx+368]
  00652	76 15		 jbe	 SHORT $LN78@update_cyc
  00654	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0065a	f3 0f 10 82 78
	01 00 00	 movss	 xmm0, DWORD PTR [edx+376]
  00662	f3 0f 11 45 84	 movss	 DWORD PTR tv395[ebp], xmm0
  00667	eb 4d		 jmp	 SHORT $LN79@update_cyc
$LN78@update_cyc:
  00669	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0066e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00674	f3 0f 10 80 70
	01 00 00	 movss	 xmm0, DWORD PTR [eax+368]
  0067c	0f 2f 81 7c 01
	00 00		 comiss	 xmm0, DWORD PTR [ecx+380]
  00683	76 15		 jbe	 SHORT $LN76@update_cyc
  00685	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0068b	f3 0f 10 82 7c
	01 00 00	 movss	 xmm0, DWORD PTR [edx+380]
  00693	f3 0f 11 45 80	 movss	 DWORD PTR tv394[ebp], xmm0
  00698	eb 12		 jmp	 SHORT $LN77@update_cyc
$LN76@update_cyc:
  0069a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0069f	f3 0f 10 80 70
	01 00 00	 movss	 xmm0, DWORD PTR [eax+368]
  006a7	f3 0f 11 45 80	 movss	 DWORD PTR tv394[ebp], xmm0
$LN77@update_cyc:
  006ac	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR tv394[ebp]
  006b1	f3 0f 11 45 84	 movss	 DWORD PTR tv395[ebp], xmm0
$LN79@update_cyc:
  006b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  006bc	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR tv395[ebp]
  006c1	f3 0f 11 81 70
	01 00 00	 movss	 DWORD PTR [ecx+368], xmm0

; 378  : 																					current_flight_dynamics->input_data.cyclic_horizontal_pressure.value,
; 379  : 																					current_flight_dynamics->input_data.cyclic_horizontal_pressure.min,
; 380  : 																					current_flight_dynamics->input_data.cyclic_horizontal_pressure.max
; 381  : 																					);
; 382  : 
; 383  : 				current_flight_dynamics->input_data.cyclic_vertical_pressure.value = bound (current_flight_dynamics->input_data.cyclic_vertical_pressure.value,

  006c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  006ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  006d4	f3 0f 10 80 60
	01 00 00	 movss	 xmm0, DWORD PTR [eax+352]
  006dc	0f 2f 81 58 01
	00 00		 comiss	 xmm0, DWORD PTR [ecx+344]
  006e3	76 15		 jbe	 SHORT $LN82@update_cyc
  006e5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  006eb	f3 0f 10 82 60
	01 00 00	 movss	 xmm0, DWORD PTR [edx+352]
  006f3	f3 0f 11 45 84	 movss	 DWORD PTR tv423[ebp], xmm0
  006f8	eb 4d		 jmp	 SHORT $LN83@update_cyc
$LN82@update_cyc:
  006fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  006ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00705	f3 0f 10 80 58
	01 00 00	 movss	 xmm0, DWORD PTR [eax+344]
  0070d	0f 2f 81 64 01
	00 00		 comiss	 xmm0, DWORD PTR [ecx+356]
  00714	76 15		 jbe	 SHORT $LN80@update_cyc
  00716	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0071c	f3 0f 10 82 64
	01 00 00	 movss	 xmm0, DWORD PTR [edx+356]
  00724	f3 0f 11 45 80	 movss	 DWORD PTR tv422[ebp], xmm0
  00729	eb 12		 jmp	 SHORT $LN81@update_cyc
$LN80@update_cyc:
  0072b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00730	f3 0f 10 80 58
	01 00 00	 movss	 xmm0, DWORD PTR [eax+344]
  00738	f3 0f 11 45 80	 movss	 DWORD PTR tv422[ebp], xmm0
$LN81@update_cyc:
  0073d	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR tv422[ebp]
  00742	f3 0f 11 45 84	 movss	 DWORD PTR tv423[ebp], xmm0
$LN83@update_cyc:
  00747	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0074d	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR tv423[ebp]
  00752	f3 0f 11 81 58
	01 00 00	 movss	 DWORD PTR [ecx+344], xmm0

; 384  : 																					current_flight_dynamics->input_data.cyclic_vertical_pressure.min,
; 385  : 																					current_flight_dynamics->input_data.cyclic_vertical_pressure.max
; 386  : 																					);
; 387  : 
; 388  : 				// recalculate cyclic position
; 389  : 
; 390  : 				if (current_flight_dynamics->input_data.cyclic_horizontal_pressure.value)

  0075a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0075f	f3 0f 10 80 70
	01 00 00	 movss	 xmm0, DWORD PTR [eax+368]
  00767	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  0076e	9f		 lahf
  0076f	f6 c4 44	 test	 ah, 68			; 00000044H
  00772	7b 43		 jnp	 SHORT $LN30@update_cyc

; 391  : 				{
; 392  : 
; 393  : 					current_flight_dynamics->input_data.cyclic_x.value += (MODEL_FRAME_RATE * get_model_delta_time ()) * current_flight_dynamics->input_data.cyclic_horizontal_pressure.value;

  00774	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00779	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  00781	f3 0f 59 80 90
	00 00 00	 mulss	 xmm0, DWORD PTR [eax+144]
  00789	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0078f	f3 0f 59 81 70
	01 00 00	 mulss	 xmm0, DWORD PTR [ecx+368]
  00797	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0079d	f3 0f 58 82 f8
	00 00 00	 addss	 xmm0, DWORD PTR [edx+248]
  007a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  007aa	f3 0f 11 80 f8
	00 00 00	 movss	 DWORD PTR [eax+248], xmm0

; 394  : 					//current_flight_dynamics->input_data.cyclic_x.value += (MODEL_FRAME_RATE * get_model_delta_time ()) * (current_flight_dynamics->input_data.cyclic_horizontal_pressure.value);// + current_flight_dynamics->input_data.cyclic_x_trim.value);
; 395  : 				}
; 396  : 				else

  007b2	e9 2e 01 00 00	 jmp	 $LN37@update_cyc
$LN30@update_cyc:

; 397  : 				{
; 398  : 
; 399  : 					// restore x
; 400  : 					//Werewolf: Removed old debug code, removed redundant multiplications
; 401  : 
; 402  : 					if (get_global_cyclic_input () == KEYBOARD_INPUT)

  007b7	83 3d 28 00 00
	00 01		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+40, 1
  007be	0f 85 c7 00 00
	00		 jne	 $LN32@update_cyc

; 403  : 					{
; 404  : 						if (get_current_dynamics_options (DYNAMICS_OPTIONS_KEYBOARD_ASSISTANCE))

  007c4	6a 05		 push	 5
  007c6	e8 00 00 00 00	 call	 ?get_current_dynamics_options@@YGHW4DYNAMICS_OPTIONS_TYPES@@@Z ; get_current_dynamics_options
  007cb	85 c0		 test	 eax, eax
  007cd	74 5e		 je	 SHORT $LN34@update_cyc

; 405  : 						{
; 406  : 							current_flight_dynamics->input_data.cyclic_x.value += ((1.0 / 16.0) * MODEL_FRAME_RATE * get_model_delta_time ()) * (current_flight_dynamics->input_data.cyclic_x_trim.value - current_flight_dynamics->input_data.cyclic_x.value);

  007cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  007d4	f3 0f 5a 80 90
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+144]
  007dc	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4009000000000000
  007e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  007ea	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  007f0	f3 0f 10 89 28
	01 00 00	 movss	 xmm1, DWORD PTR [ecx+296]
  007f8	f3 0f 5c 8a f8
	00 00 00	 subss	 xmm1, DWORD PTR [edx+248]
  00800	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00804	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00808	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0080d	f3 0f 5a 88 f8
	00 00 00	 cvtss2sd xmm1, DWORD PTR [eax+248]
  00815	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00819	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0081d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00823	f3 0f 11 81 f8
	00 00 00	 movss	 DWORD PTR [ecx+248], xmm0

; 407  : 						}
; 408  : 						else

  0082b	eb 5c		 jmp	 SHORT $LN35@update_cyc
$LN34@update_cyc:

; 409  : 						{
; 410  : 							current_flight_dynamics->input_data.cyclic_x.value += ((3.0 / 4.0) * MODEL_FRAME_RATE * get_model_delta_time ()) * (current_flight_dynamics->input_data.cyclic_x_trim.value - current_flight_dynamics->input_data.cyclic_x.value);

  0082d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00832	f3 0f 5a 80 90
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+144]
  0083a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4042c00000000000
  00842	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00848	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0084e	f3 0f 10 89 28
	01 00 00	 movss	 xmm1, DWORD PTR [ecx+296]
  00856	f3 0f 5c 8a f8
	00 00 00	 subss	 xmm1, DWORD PTR [edx+248]
  0085e	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  00862	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00866	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0086b	f3 0f 5a 88 f8
	00 00 00	 cvtss2sd xmm1, DWORD PTR [eax+248]
  00873	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00877	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0087b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00881	f3 0f 11 81 f8
	00 00 00	 movss	 DWORD PTR [ecx+248], xmm0
$LN35@update_cyc:

; 411  : 						}

  00889	eb 5a		 jmp	 SHORT $LN37@update_cyc
$LN32@update_cyc:

; 412  : 					}
; 413  : 					else if (get_global_cyclic_input () == MOUSE_INPUT)

  0088b	83 3d 28 00 00
	00 03		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+40, 3
  00892	75 51		 jne	 SHORT $LN37@update_cyc

; 414  : 					{
; 415  : 						if (fabs (current_flight_dynamics->input_data.cyclic_x.value) < 5.0)

  00894	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00899	51		 push	 ecx
  0089a	f3 0f 10 80 f8
	00 00 00	 movss	 xmm0, DWORD PTR [eax+248]
  008a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a7	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  008ac	dd 5d 80	 fstp	 QWORD PTR tv1140[ebp]
  008af	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4014000000000000
  008b7	66 0f 2f 45 80	 comisd	 xmm0, QWORD PTR tv1140[ebp]
  008bc	76 27		 jbe	 SHORT $LN37@update_cyc

; 416  : 						{
; 417  : 							current_flight_dynamics->input_data.cyclic_x.value *= 0.8;

  008be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  008c3	f3 0f 5a 80 f8
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+248]
  008cb	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe999999999999a
  008d3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  008d7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  008dd	f3 0f 11 81 f8
	00 00 00	 movss	 DWORD PTR [ecx+248], xmm0
$LN37@update_cyc:

; 418  : 						}
; 419  : 					}
; 420  : 				}
; 421  : 
; 422  : 				if (current_flight_dynamics->input_data.cyclic_vertical_pressure.value)

  008e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  008ea	f3 0f 10 80 58
	01 00 00	 movss	 xmm0, DWORD PTR [eax+344]
  008f2	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  008f9	9f		 lahf
  008fa	f6 c4 44	 test	 ah, 68			; 00000044H
  008fd	7b 43		 jnp	 SHORT $LN38@update_cyc

; 423  : 				{
; 424  : 					//current_flight_dynamics->input_data.cyclic_y.value += (MODEL_FRAME_RATE * get_model_delta_time ()) * (current_flight_dynamics->input_data.cyclic_vertical_pressure.value + current_flight_dynamics->input_data.cyclic_y_trim.value);
; 425  : 					current_flight_dynamics->input_data.cyclic_y.value += (MODEL_FRAME_RATE * get_model_delta_time ()) * (current_flight_dynamics->input_data.cyclic_vertical_pressure.value);// + current_flight_dynamics->input_data.cyclic_y_trim.value);

  008ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00904	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  0090c	f3 0f 59 80 90
	00 00 00	 mulss	 xmm0, DWORD PTR [eax+144]
  00914	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0091a	f3 0f 59 81 58
	01 00 00	 mulss	 xmm0, DWORD PTR [ecx+344]
  00922	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00928	f3 0f 58 82 10
	01 00 00	 addss	 xmm0, DWORD PTR [edx+272]
  00930	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00935	f3 0f 11 80 10
	01 00 00	 movss	 DWORD PTR [eax+272], xmm0

; 426  : 				}
; 427  : 				else

  0093d	e9 3b 01 00 00	 jmp	 $LN45@update_cyc
$LN38@update_cyc:

; 428  : 				{
; 429  : 
; 430  : 					// restore y
; 431  : 
; 432  : 					if (get_global_cyclic_input () == KEYBOARD_INPUT)

  00942	83 3d 28 00 00
	00 01		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+40, 1
  00949	0f 85 c7 00 00
	00		 jne	 $LN40@update_cyc

; 433  : 					{
; 434  : 						if (get_current_dynamics_options (DYNAMICS_OPTIONS_KEYBOARD_ASSISTANCE))

  0094f	6a 05		 push	 5
  00951	e8 00 00 00 00	 call	 ?get_current_dynamics_options@@YGHW4DYNAMICS_OPTIONS_TYPES@@@Z ; get_current_dynamics_options
  00956	85 c0		 test	 eax, eax
  00958	74 5e		 je	 SHORT $LN42@update_cyc

; 435  : 						{
; 436  : 							current_flight_dynamics->input_data.cyclic_y.value += ((1.0 / 16.0) * MODEL_FRAME_RATE * get_model_delta_time ()) * (current_flight_dynamics->input_data.cyclic_y_trim.value - current_flight_dynamics->input_data.cyclic_y.value);

  0095a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0095f	f3 0f 5a 80 90
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+144]
  00967	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4009000000000000
  0096f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00975	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0097b	f3 0f 10 89 40
	01 00 00	 movss	 xmm1, DWORD PTR [ecx+320]
  00983	f3 0f 5c 8a 10
	01 00 00	 subss	 xmm1, DWORD PTR [edx+272]
  0098b	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0098f	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00993	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00998	f3 0f 5a 88 10
	01 00 00	 cvtss2sd xmm1, DWORD PTR [eax+272]
  009a0	f2 0f 58 c8	 addsd	 xmm1, xmm0
  009a4	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  009a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  009ae	f3 0f 11 81 10
	01 00 00	 movss	 DWORD PTR [ecx+272], xmm0

; 437  : 						}
; 438  : 						else

  009b6	eb 5c		 jmp	 SHORT $LN43@update_cyc
$LN42@update_cyc:

; 439  : 						{
; 440  : 							current_flight_dynamics->input_data.cyclic_y.value += ((3.0 / 4.0) * MODEL_FRAME_RATE * get_model_delta_time ()) * (current_flight_dynamics->input_data.cyclic_y_trim.value - current_flight_dynamics->input_data.cyclic_y.value);

  009b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  009bd	f3 0f 5a 80 90
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+144]
  009c5	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4042c00000000000
  009cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  009d3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  009d9	f3 0f 10 89 40
	01 00 00	 movss	 xmm1, DWORD PTR [ecx+320]
  009e1	f3 0f 5c 8a 10
	01 00 00	 subss	 xmm1, DWORD PTR [edx+272]
  009e9	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  009ed	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  009f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  009f6	f3 0f 5a 88 10
	01 00 00	 cvtss2sd xmm1, DWORD PTR [eax+272]
  009fe	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00a02	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00a06	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00a0c	f3 0f 11 81 10
	01 00 00	 movss	 DWORD PTR [ecx+272], xmm0
$LN43@update_cyc:

; 441  : 						}

  00a14	eb 67		 jmp	 SHORT $LN45@update_cyc
$LN40@update_cyc:

; 442  : 					}
; 443  : 					else if (get_global_cyclic_input () == MOUSE_INPUT)

  00a16	83 3d 28 00 00
	00 03		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+40, 3
  00a1d	75 5e		 jne	 SHORT $LN45@update_cyc

; 444  : 					{
; 445  : 						if (fabs (current_flight_dynamics->input_data.cyclic_y.value) < 5.0)

  00a1f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00a24	51		 push	 ecx
  00a25	f3 0f 10 80 10
	01 00 00	 movss	 xmm0, DWORD PTR [eax+272]
  00a2d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a32	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00a37	dd 5d 80	 fstp	 QWORD PTR tv1176[ebp]
  00a3a	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4014000000000000
  00a42	66 0f 2f 45 80	 comisd	 xmm0, QWORD PTR tv1176[ebp]
  00a47	76 34		 jbe	 SHORT $LN45@update_cyc

; 446  : 						{
; 447  : 							debug_fatal ("CYCLIC: code with delta time");

  00a49	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ONCBNIKB@CYCLIC?3?5code?5with?5delta?5time@
  00a4e	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00a53	83 c4 04	 add	 esp, 4

; 448  : 							current_flight_dynamics->input_data.cyclic_y.value *= 0.8;

  00a56	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00a5b	f3 0f 5a 80 10
	01 00 00	 cvtss2sd xmm0, DWORD PTR [eax+272]
  00a63	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe999999999999a
  00a6b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a6f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00a75	f3 0f 11 81 10
	01 00 00	 movss	 DWORD PTR [ecx+272], xmm0
$LN45@update_cyc:

; 449  : 						}
; 450  : 					}
; 451  : 				}
; 452  : 
; 453  : 				break;

  00a7d	e9 0a 04 00 00	 jmp	 $LN2@update_cyc
$LN46@update_cyc:

; 454  : 			}
; 455  : 
; 456  : 			case JOYSTICK_INPUT:
; 457  : 			{
; 458  : 
; 459  : 				int
; 460  : 					joyval;
; 461  : 
; 462  : 				float
; 463  : 					input;
; 464  : 
; 465  : 				// 030418 loke
; 466  : 				// implemented multiple joystick device selection
; 467  : 
; 468  : 				// x
; 469  : 
; 470  : 				if (command_line_cyclic_joystick_index == -1)

  00a82	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?command_line_cyclic_joystick_index@@3HA, -1 ; command_line_cyclic_joystick_index
  00a89	75 18		 jne	 SHORT $LN47@update_cyc

; 471  : 				{
; 472  : 					joyval = get_joystick_axis (current_flight_dynamics->input_data.cyclic_joystick_device_index, JOYSTICK_DEFAULT_AXIS_ROLL);

  00a8b	6a 00		 push	 0
  00a8d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00a92	8b 88 84 01 00
	00		 mov	 ecx, DWORD PTR [eax+388]
  00a98	51		 push	 ecx
  00a99	e8 00 00 00 00	 call	 ?get_joystick_axis@@YGHHH@Z ; get_joystick_axis
  00a9e	89 45 f4	 mov	 DWORD PTR _joyval$12[ebp], eax

; 473  : 				}
; 474  : 				else

  00aa1	eb 15		 jmp	 SHORT $LN48@update_cyc
$LN47@update_cyc:

; 475  : 				{
; 476  : 					joyval = get_joystick_axis (command_line_cyclic_joystick_index, command_line_cyclic_joystick_x_axis);

  00aa3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_line_cyclic_joystick_x_axis@@3HA ; command_line_cyclic_joystick_x_axis
  00aa8	50		 push	 eax
  00aa9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?command_line_cyclic_joystick_index@@3HA ; command_line_cyclic_joystick_index
  00aaf	51		 push	 ecx
  00ab0	e8 00 00 00 00	 call	 ?get_joystick_axis@@YGHHH@Z ; get_joystick_axis
  00ab5	89 45 f4	 mov	 DWORD PTR _joyval$12[ebp], eax
$LN48@update_cyc:

; 477  : 				}
; 478  : 
; 479  : 				if (command_line_nonlinear_cyclic)

  00ab8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_nonlinear_cyclic@@3HA, 0 ; command_line_nonlinear_cyclic
  00abf	74 7a		 je	 SHORT $LN49@update_cyc

; 480  : 				{
; 481  : 					// in non-linear mode it uses a curve described by f(x) = x*x + x
; 482  : 					// gives a not so sensitive control around centre
; 483  : 					input = (2.0 * (float) joyval ) / ((float) JOYSTICK_AXIS_MAXIMUM - (float) JOYSTICK_AXIS_MINIMUM);

  00ac1	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _joyval$12[ebp]
  00ac6	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00aca	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  00ad2	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40d3880000000000
  00ada	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ade	f3 0f 11 45 f0	 movss	 DWORD PTR _input$11[ebp], xmm0

; 484  : 					if (input >= 0)

  00ae3	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _input$11[ebp]
  00ae8	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00aef	72 11		 jb	 SHORT $LN51@update_cyc

; 485  : 						input *= input;

  00af1	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _input$11[ebp]
  00af6	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _input$11[ebp]
  00afb	f3 0f 11 45 f0	 movss	 DWORD PTR _input$11[ebp], xmm0

; 486  : 					else

  00b00	eb 16		 jmp	 SHORT $LN52@update_cyc
$LN51@update_cyc:

; 487  : 						input *= -input;

  00b02	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _input$11[ebp]
  00b07	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00b0e	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _input$11[ebp]
  00b13	f3 0f 11 45 f0	 movss	 DWORD PTR _input$11[ebp], xmm0
$LN52@update_cyc:

; 488  : 					input += input;

  00b18	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _input$11[ebp]
  00b1d	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _input$11[ebp]
  00b22	f3 0f 11 45 f0	 movss	 DWORD PTR _input$11[ebp], xmm0

; 489  : 					input *= 50;

  00b27	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _input$11[ebp]
  00b2c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42480000
  00b34	f3 0f 11 45 f0	 movss	 DWORD PTR _input$11[ebp], xmm0

; 490  : 				}
; 491  : 				else

  00b39	eb 22		 jmp	 SHORT $LN50@update_cyc
$LN49@update_cyc:

; 492  : 					input = (float) (200.0 * (float) joyval ) / ((float) JOYSTICK_AXIS_MAXIMUM - (float) JOYSTICK_AXIS_MINIMUM);

  00b3b	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _joyval$12[ebp]
  00b40	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00b44	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4069000000000000
  00b4c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b50	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@469c4000
  00b58	f3 0f 11 45 f0	 movss	 DWORD PTR _input$11[ebp], xmm0
$LN50@update_cyc:

; 493  : 
; 494  : 				if (fabs (input) < command_line_dynamics_cyclic_dead_zone)

  00b5d	51		 push	 ecx
  00b5e	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _input$11[ebp]
  00b63	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b68	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00b6d	d9 5d 84	 fstp	 DWORD PTR tv1199[ebp]
  00b70	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?command_line_dynamics_cyclic_dead_zone@@3MA
  00b78	0f 2f 45 84	 comiss	 xmm0, DWORD PTR tv1199[ebp]
  00b7c	76 08		 jbe	 SHORT $LN53@update_cyc

; 495  : 				{
; 496  : 
; 497  : 					input = 0.0;

  00b7e	0f 57 c0	 xorps	 xmm0, xmm0
  00b81	f3 0f 11 45 f0	 movss	 DWORD PTR _input$11[ebp], xmm0
$LN53@update_cyc:

; 498  : 				}
; 499  : 
; 500  : 				current_flight_dynamics->input_data.cyclic_x.value = input;

  00b86	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00b8b	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _input$11[ebp]
  00b90	f3 0f 11 80 f8
	00 00 00	 movss	 DWORD PTR [eax+248], xmm0

; 501  :         
; 502  :         //ataribaby 1/1/2009 allow trim with ALT HOLD
; 503  : 				if (current_flight_dynamics->auto_hover == HOVER_HOLD_NONE || current_flight_dynamics->auto_hover == HOVER_HOLD_ALTITUDE_LOCK)

  00b98	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00b9d	8b 88 28 25 00
	00		 mov	 ecx, DWORD PTR [eax+9512]
  00ba3	c1 e9 07	 shr	 ecx, 7
  00ba6	83 e1 07	 and	 ecx, 7
  00ba9	74 16		 je	 SHORT $LN55@update_cyc
  00bab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00bb0	8b 88 28 25 00
	00		 mov	 ecx, DWORD PTR [eax+9512]
  00bb6	c1 e9 07	 shr	 ecx, 7
  00bb9	83 e1 07	 and	 ecx, 7
  00bbc	83 f9 03	 cmp	 ecx, 3
  00bbf	75 29		 jne	 SHORT $LN54@update_cyc
$LN55@update_cyc:

; 504  : 					current_flight_dynamics->input_data.cyclic_x.value += current_flight_dynamics->input_data.cyclic_x_trim.value;

  00bc1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00bc6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00bcc	f3 0f 10 80 f8
	00 00 00	 movss	 xmm0, DWORD PTR [eax+248]
  00bd4	f3 0f 58 81 28
	01 00 00	 addss	 xmm0, DWORD PTR [ecx+296]
  00bdc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00be2	f3 0f 11 82 f8
	00 00 00	 movss	 DWORD PTR [edx+248], xmm0
$LN54@update_cyc:

; 505  : 
; 506  : 				// y
; 507  : 
; 508  : 				if (command_line_cyclic_joystick_index == -1)

  00bea	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?command_line_cyclic_joystick_index@@3HA, -1 ; command_line_cyclic_joystick_index
  00bf1	75 18		 jne	 SHORT $LN56@update_cyc

; 509  : 				{
; 510  : 					joyval = get_joystick_axis (current_flight_dynamics->input_data.cyclic_joystick_device_index, JOYSTICK_DEFAULT_AXIS_PITCH);

  00bf3	6a 01		 push	 1
  00bf5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00bfa	8b 88 84 01 00
	00		 mov	 ecx, DWORD PTR [eax+388]
  00c00	51		 push	 ecx
  00c01	e8 00 00 00 00	 call	 ?get_joystick_axis@@YGHHH@Z ; get_joystick_axis
  00c06	89 45 f4	 mov	 DWORD PTR _joyval$12[ebp], eax

; 511  : 				}
; 512  : 				else

  00c09	eb 15		 jmp	 SHORT $LN57@update_cyc
$LN56@update_cyc:

; 513  : 				{
; 514  : 					joyval = get_joystick_axis (command_line_cyclic_joystick_index, command_line_cyclic_joystick_y_axis);

  00c0b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_line_cyclic_joystick_y_axis@@3HA ; command_line_cyclic_joystick_y_axis
  00c10	50		 push	 eax
  00c11	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?command_line_cyclic_joystick_index@@3HA ; command_line_cyclic_joystick_index
  00c17	51		 push	 ecx
  00c18	e8 00 00 00 00	 call	 ?get_joystick_axis@@YGHHH@Z ; get_joystick_axis
  00c1d	89 45 f4	 mov	 DWORD PTR _joyval$12[ebp], eax
$LN57@update_cyc:

; 515  : 				}
; 516  : 
; 517  : 				if (command_line_nonlinear_cyclic)

  00c20	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_nonlinear_cyclic@@3HA, 0 ; command_line_nonlinear_cyclic
  00c27	74 7e		 je	 SHORT $LN58@update_cyc

; 518  : 				{
; 519  : 					// in non-linear mode it uses a curve described by f(x) = x*x + x
; 520  : 					// gives a not so sensitive control around centre
; 521  : 					input = -2.0 * ((float) joyval ) / ((float) JOYSTICK_AXIS_MAXIMUM - (float) JOYSTICK_AXIS_MINIMUM);

  00c29	f3 0f 2a 45 f4	 cvtsi2ss xmm0, DWORD PTR _joyval$12[ebp]
  00c2e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00c32	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@c000000000000000
  00c3a	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@40d3880000000000
  00c42	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c46	f3 0f 11 45 f0	 movss	 DWORD PTR _input$11[ebp], xmm0

; 522  : 					if (input >= 0)

  00c4b	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _input$11[ebp]
  00c50	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00c57	72 11		 jb	 SHORT $LN60@update_cyc

; 523  : 						input *= input;

  00c59	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _input$11[ebp]
  00c5e	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _input$11[ebp]
  00c63	f3 0f 11 45 f0	 movss	 DWORD PTR _input$11[ebp], xmm0

; 524  : 					else

  00c68	eb 16		 jmp	 SHORT $LN61@update_cyc
$LN60@update_cyc:

; 525  : 						input *= -input;

  00c6a	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _input$11[ebp]
  00c6f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00c76	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _input$11[ebp]
  00c7b	f3 0f 11 45 f0	 movss	 DWORD PTR _input$11[ebp], xmm0
$LN61@update_cyc:

; 526  : 					input += input;

  00c80	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _input$11[ebp]
  00c85	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _input$11[ebp]
  00c8a	f3 0f 11 45 f0	 movss	 DWORD PTR _input$11[ebp], xmm0

; 527  : 					input *= 50.0;

  00c8f	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _input$11[ebp]
  00c94	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4049000000000000
  00c9c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ca0	f3 0f 11 45 f0	 movss	 DWORD PTR _input$11[ebp], xmm0

; 528  : 				}
; 529  : 				else

  00ca5	eb 25		 jmp	 SHORT $LN59@update_cyc
$LN58@update_cyc:

; 530  : 					input = -(float) (200.0 * joyval) / (JOYSTICK_AXIS_MAXIMUM - JOYSTICK_AXIS_MINIMUM);

  00ca7	f2 0f 2a 45 f4	 cvtsi2sd xmm0, DWORD PTR _joyval$12[ebp]
  00cac	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4069000000000000
  00cb4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00cb8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00cbf	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@469c4000
  00cc7	f3 0f 11 45 f0	 movss	 DWORD PTR _input$11[ebp], xmm0
$LN59@update_cyc:

; 531  : 
; 532  : 				if (fabs (input) < command_line_dynamics_cyclic_dead_zone)

  00ccc	51		 push	 ecx
  00ccd	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _input$11[ebp]
  00cd2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cd7	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00cdc	d9 5d 84	 fstp	 DWORD PTR tv1230[ebp]
  00cdf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?command_line_dynamics_cyclic_dead_zone@@3MA
  00ce7	0f 2f 45 84	 comiss	 xmm0, DWORD PTR tv1230[ebp]
  00ceb	76 08		 jbe	 SHORT $LN62@update_cyc

; 533  : 				{
; 534  : 
; 535  : 					input = 0.0;

  00ced	0f 57 c0	 xorps	 xmm0, xmm0
  00cf0	f3 0f 11 45 f0	 movss	 DWORD PTR _input$11[ebp], xmm0
$LN62@update_cyc:

; 536  : 				}
; 537  : 
; 538  : 				current_flight_dynamics->input_data.cyclic_y.value = input;

  00cf5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00cfa	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _input$11[ebp]
  00cff	f3 0f 11 80 10
	01 00 00	 movss	 DWORD PTR [eax+272], xmm0

; 539  :         
; 540  :         //ataribaby 1/1/2009 allow trim with ALT HOLD 
; 541  : 				if (current_flight_dynamics->auto_hover == HOVER_HOLD_NONE || current_flight_dynamics->auto_hover == HOVER_HOLD_ALTITUDE_LOCK)

  00d07	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00d0c	8b 88 28 25 00
	00		 mov	 ecx, DWORD PTR [eax+9512]
  00d12	c1 e9 07	 shr	 ecx, 7
  00d15	83 e1 07	 and	 ecx, 7
  00d18	74 16		 je	 SHORT $LN64@update_cyc
  00d1a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00d1f	8b 88 28 25 00
	00		 mov	 ecx, DWORD PTR [eax+9512]
  00d25	c1 e9 07	 shr	 ecx, 7
  00d28	83 e1 07	 and	 ecx, 7
  00d2b	83 f9 03	 cmp	 ecx, 3
  00d2e	75 29		 jne	 SHORT $LN63@update_cyc
$LN64@update_cyc:

; 542  : 					current_flight_dynamics->input_data.cyclic_y.value += current_flight_dynamics->input_data.cyclic_y_trim.value;

  00d30	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00d35	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00d3b	f3 0f 10 80 10
	01 00 00	 movss	 xmm0, DWORD PTR [eax+272]
  00d43	f3 0f 58 81 40
	01 00 00	 addss	 xmm0, DWORD PTR [ecx+320]
  00d4b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00d51	f3 0f 11 82 10
	01 00 00	 movss	 DWORD PTR [edx+272], xmm0
$LN63@update_cyc:

; 543  : 
; 544  : 				/*
; 545  : 				debug_log ("CYCLIC: x %f, y %f", ((float) fabs (200.0 * get_joystick_axis(current_flight_dynamics->input_data.cyclic_joystick_device_index, JOYSTICK_DEFAULT_AXIS_ROLL) / (JOYSTICK_AXIS_MAXIMUM - JOYSTICK_AXIS_MINIMUM)),
; 546  : 					((float) fabs (200.0 * get_joystick_axis(current_flight_dynamics->input_data.cyclic_joystick_device_index, JOYSTICK_DEFAULT_AXIS_PITCH)) / (JOYSTICK_AXIS_MAXIMUM - JOYSTICK_AXIS_MINIMUM)));
; 547  : 				*/
; 548  : 
; 549  : 				{
; 550  : 					// 030418 loke
; 551  : 					// implemented multiple joystick device selection
; 552  : 
; 553  : 					int
; 554  : 						joystick_x_pos,
; 555  : 						joystick_y_pos;
; 556  : 
; 557  : 					if (command_line_cyclic_joystick_index == -1)

  00d59	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?command_line_cyclic_joystick_index@@3HA, -1 ; command_line_cyclic_joystick_index
  00d60	75 2e		 jne	 SHORT $LN65@update_cyc

; 558  : 					{
; 559  : 						joystick_x_pos = get_joystick_axis (current_flight_dynamics->input_data.cyclic_joystick_device_index, JOYSTICK_DEFAULT_AXIS_ROLL);

  00d62	6a 00		 push	 0
  00d64	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00d69	8b 88 84 01 00
	00		 mov	 ecx, DWORD PTR [eax+388]
  00d6f	51		 push	 ecx
  00d70	e8 00 00 00 00	 call	 ?get_joystick_axis@@YGHHH@Z ; get_joystick_axis
  00d75	89 45 ec	 mov	 DWORD PTR _joystick_x_pos$10[ebp], eax

; 560  : 						joystick_y_pos = get_joystick_axis (current_flight_dynamics->input_data.cyclic_joystick_device_index, JOYSTICK_DEFAULT_AXIS_PITCH);

  00d78	6a 01		 push	 1
  00d7a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00d7f	8b 88 84 01 00
	00		 mov	 ecx, DWORD PTR [eax+388]
  00d85	51		 push	 ecx
  00d86	e8 00 00 00 00	 call	 ?get_joystick_axis@@YGHHH@Z ; get_joystick_axis
  00d8b	89 45 e8	 mov	 DWORD PTR _joystick_y_pos$9[ebp], eax

; 561  : 					}
; 562  : 					else

  00d8e	eb 2a		 jmp	 SHORT $LN66@update_cyc
$LN65@update_cyc:

; 563  : 					{
; 564  : 						joystick_x_pos = get_joystick_axis (command_line_cyclic_joystick_index, command_line_cyclic_joystick_x_axis);

  00d90	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_line_cyclic_joystick_x_axis@@3HA ; command_line_cyclic_joystick_x_axis
  00d95	50		 push	 eax
  00d96	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?command_line_cyclic_joystick_index@@3HA ; command_line_cyclic_joystick_index
  00d9c	51		 push	 ecx
  00d9d	e8 00 00 00 00	 call	 ?get_joystick_axis@@YGHHH@Z ; get_joystick_axis
  00da2	89 45 ec	 mov	 DWORD PTR _joystick_x_pos$10[ebp], eax

; 565  : 						joystick_y_pos = get_joystick_axis (command_line_cyclic_joystick_index, command_line_cyclic_joystick_y_axis);

  00da5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?command_line_cyclic_joystick_y_axis@@3HA ; command_line_cyclic_joystick_y_axis
  00daa	50		 push	 eax
  00dab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?command_line_cyclic_joystick_index@@3HA ; command_line_cyclic_joystick_index
  00db1	51		 push	 ecx
  00db2	e8 00 00 00 00	 call	 ?get_joystick_axis@@YGHHH@Z ; get_joystick_axis
  00db7	89 45 e8	 mov	 DWORD PTR _joystick_y_pos$9[ebp], eax
$LN66@update_cyc:

; 566  : 					}
; 567  : 
; 568  : 					if (((float) fabs (200.0 * joystick_x_pos) / (JOYSTICK_AXIS_MAXIMUM - JOYSTICK_AXIS_MINIMUM) > 10.0) ||

  00dba	f2 0f 2a 45 ec	 cvtsi2sd xmm0, DWORD PTR _joystick_x_pos$10[ebp]
  00dbf	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4069000000000000
  00dc7	83 ec 08	 sub	 esp, 8
  00dca	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00dcf	e8 00 00 00 00	 call	 _fabs
  00dd4	83 c4 08	 add	 esp, 8
  00dd7	d9 5d 84	 fstp	 DWORD PTR tv1260[ebp]
  00dda	d9 45 84	 fld	 DWORD PTR tv1260[ebp]
  00ddd	d9 5d 80	 fstp	 DWORD PTR tv1261[ebp]
  00de0	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR tv1261[ebp]
  00de5	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@469c4000
  00ded	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00df1	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4024000000000000
  00df9	77 41		 ja	 SHORT $LN68@update_cyc
  00dfb	f2 0f 2a 45 e8	 cvtsi2sd xmm0, DWORD PTR _joystick_y_pos$9[ebp]
  00e00	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4069000000000000
  00e08	83 ec 08	 sub	 esp, 8
  00e0b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00e10	e8 00 00 00 00	 call	 _fabs
  00e15	83 c4 08	 add	 esp, 8
  00e18	d9 5d 84	 fstp	 DWORD PTR tv1267[ebp]
  00e1b	d9 45 84	 fld	 DWORD PTR tv1267[ebp]
  00e1e	d9 5d 80	 fstp	 DWORD PTR tv1268[ebp]
  00e21	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR tv1268[ebp]
  00e26	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@469c4000
  00e2e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00e32	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4024000000000000
  00e3a	76 50		 jbe	 SHORT $LN69@update_cyc
$LN68@update_cyc:

; 569  : 						((float) fabs (200.0 * joystick_y_pos) / (JOYSTICK_AXIS_MAXIMUM - JOYSTICK_AXIS_MINIMUM) > 10.0))
; 570  : 					{
; 571  : 
; 572  : 						if ((current_flight_dynamics->auto_hover == HOVER_HOLD_NORMAL) ||

  00e3c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00e41	8b 88 28 25 00
	00		 mov	 ecx, DWORD PTR [eax+9512]
  00e47	c1 e9 07	 shr	 ecx, 7
  00e4a	83 e1 07	 and	 ecx, 7
  00e4d	83 f9 01	 cmp	 ecx, 1
  00e50	74 16		 je	 SHORT $LN70@update_cyc
  00e52	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00e57	8b 88 28 25 00
	00		 mov	 ecx, DWORD PTR [eax+9512]
  00e5d	c1 e9 07	 shr	 ecx, 7
  00e60	83 e1 07	 and	 ecx, 7
  00e63	83 f9 02	 cmp	 ecx, 2
  00e66	75 24		 jne	 SHORT $LN69@update_cyc
$LN70@update_cyc:

; 573  : 							(current_flight_dynamics->auto_hover == HOVER_HOLD_STABLE))
; 574  : 						{
; 575  : 
; 576  : 							set_current_flight_dynamics_auto_hover (HOVER_HOLD_NONE);

  00e68	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00e6d	8b 88 28 25 00
	00		 mov	 ecx, DWORD PTR [eax+9512]
  00e73	81 e1 7f fc ff
	ff		 and	 ecx, -897		; fffffc7fH
  00e79	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00e7f	89 8a 28 25 00
	00		 mov	 DWORD PTR [edx+9512], ecx

; 577  : 							set_current_flight_dynamics_auto_pilot (FALSE);

  00e85	6a 00		 push	 0
  00e87	e8 00 00 00 00	 call	 ?set_current_flight_dynamics_auto_pilot@@YGXH@Z ; set_current_flight_dynamics_auto_pilot
$LN69@update_cyc:
$LN2@update_cyc:

; 578  : 						}
; 579  : 					}
; 580  : 				}
; 581  : 
; 582  : 				break;
; 583  : 			}
; 584  : 		}
; 585  : 
; 586  : 	//
; 587  : 	// DEBUG - to get the coolie hat working
; 588  : 	//
; 589  : 	#if 0
; 590  : 	{
; 591  : 
; 592  : 		joystick_hat_position
; 593  : 			coolie_position;
; 594  : 
; 595  : 		coolie_position = get_joystick_hat( &joystick_devices [current_flight_dynamics->input_data.cyclic_joystick_device_index], 0 );
; 596  : 
; 597  : 		switch( coolie_position ) {
; 598  : 		case HAT_CENTERED:
; 599  : 			debug_log ("CYCLIC: coolie centered");
; 600  : 			break;
; 601  : 		case HAT_UP:
; 602  : 			debug_log ("CYCLIC: coolie up");
; 603  : 			break;
; 604  : 		case HAT_LEFT:
; 605  : 			debug_log ("CYCLIC: coolie left");
; 606  : 			break;
; 607  : 		case HAT_DOWN:
; 608  : 			debug_log ("CYCLIC: coolie down");
; 609  : 			break;
; 610  : 		case HAT_RIGHT:
; 611  : 			debug_log ("CYCLIC: coolie right");
; 612  : 			break;
; 613  : 		case HAT_LEFTUP:
; 614  : 			debug_log ("CYCLIC: coolie left+up");
; 615  : 			break;
; 616  : 		case HAT_LEFTDOWN:
; 617  : 			debug_log ("CYCLIC: coolie left+down");
; 618  : 			break;
; 619  : 		case HAT_RIGHTUP:
; 620  : 			debug_log ("CYCLIC: coolie right+up");
; 621  : 			break;
; 622  : 		case HAT_RIGHTDOWN:
; 623  : 			debug_log ("CYCLIC: coolie right+down");
; 624  : 			break;
; 625  : 		default:
; 626  : 			debug_log ("CYCLIC: coolie is on fire");
; 627  : 		}
; 628  : 	}
; 629  : 	#endif
; 630  : 
; 631  : 	//
; 632  : 	// Damaged hydraulics
; 633  : 	//
; 634  : 
; 635  : 	if (current_flight_dynamics->input_data.cyclic_x.damaged)

  00e8c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00e91	0f b7 88 08 01
	00 00		 movzx	 ecx, WORD PTR [eax+264]
  00e98	85 c9		 test	 ecx, ecx
  00e9a	74 66		 je	 SHORT $LN71@update_cyc

; 636  : 	{
; 637  : 		current_flight_dynamics->input_data.cyclic_x.value *= hydraulic_pressure;

  00e9c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00ea1	f3 0f 10 80 f8
	00 00 00	 movss	 xmm0, DWORD PTR [eax+248]
  00ea9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?hydraulic_pressure@@3MA
  00eb1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00eb7	f3 0f 11 81 f8
	00 00 00	 movss	 DWORD PTR [ecx+248], xmm0

; 638  : 		current_flight_dynamics->input_data.cyclic_x.value += damaged_lock_x_pos * (1.0 - hydraulic_pressure);

  00ebf	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?damaged_lock_x_pos@@3MA
  00ec7	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?hydraulic_pressure@@3MA
  00ecf	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@3ff0000000000000
  00ed7	f2 0f 5c d1	 subsd	 xmm2, xmm1
  00edb	f2 0f 59 c2	 mulsd	 xmm0, xmm2
  00edf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00ee4	f3 0f 5a 88 f8
	00 00 00	 cvtss2sd xmm1, DWORD PTR [eax+248]
  00eec	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00ef0	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00ef4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00efa	f3 0f 11 81 f8
	00 00 00	 movss	 DWORD PTR [ecx+248], xmm0
$LN71@update_cyc:

; 639  : 	}
; 640  : 
; 641  : 	if (current_flight_dynamics->input_data.cyclic_y.damaged)

  00f02	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00f07	0f b7 88 20 01
	00 00		 movzx	 ecx, WORD PTR [eax+288]
  00f0e	85 c9		 test	 ecx, ecx
  00f10	74 66		 je	 SHORT $LN72@update_cyc

; 642  : 	{
; 643  : 		current_flight_dynamics->input_data.cyclic_y.value *= hydraulic_pressure;

  00f12	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00f17	f3 0f 10 80 10
	01 00 00	 movss	 xmm0, DWORD PTR [eax+272]
  00f1f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?hydraulic_pressure@@3MA
  00f27	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00f2d	f3 0f 11 81 10
	01 00 00	 movss	 DWORD PTR [ecx+272], xmm0

; 644  : 		current_flight_dynamics->input_data.cyclic_y.value += damaged_lock_y_pos * (1.0 - hydraulic_pressure);

  00f35	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?damaged_lock_y_pos@@3MA
  00f3d	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?hydraulic_pressure@@3MA
  00f45	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@3ff0000000000000
  00f4d	f2 0f 5c d1	 subsd	 xmm2, xmm1
  00f51	f2 0f 59 c2	 mulsd	 xmm0, xmm2
  00f55	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00f5a	f3 0f 5a 88 10
	01 00 00	 cvtss2sd xmm1, DWORD PTR [eax+272]
  00f62	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00f66	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00f6a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00f70	f3 0f 11 81 10
	01 00 00	 movss	 DWORD PTR [ecx+272], xmm0
$LN72@update_cyc:

; 645  : 	}
; 646  : 
; 647  : 	//
; 648  : 	// Damaged Stabaliser
; 649  : 	//
; 650  : 
; 651  : 	if (current_flight_dynamics->input_data.cyclic_x_trim.damaged)

  00f78	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00f7d	0f b7 88 38 01
	00 00		 movzx	 ecx, WORD PTR [eax+312]
  00f84	85 c9		 test	 ecx, ecx
  00f86	0f 84 90 00 00
	00		 je	 $LN73@update_cyc

; 652  : 		current_flight_dynamics->input_data.cyclic_x_trim.value += (MODEL_FRAME_RATE * get_model_delta_time ()) * (0.5 * sfrand1 () * current_flight_dynamics->input_data.cyclic_x_trim.value);

  00f8c	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  00f96	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00f9b	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00fa0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00fa6	f3 0f 5a 81 28
	01 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+296]
  00fae	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00fb4	c1 fa 10	 sar	 edx, 16			; 00000010H
  00fb7	81 e2 ff 7f 00
	00		 and	 edx, 32767		; 00007fffH
  00fbd	81 ea 00 40 00
	00		 sub	 edx, 16384		; 00004000H
  00fc3	f2 0f 2a ca	 cvtsi2sd xmm1, edx
  00fc7	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3f10000000000000
  00fcf	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00fd7	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00fdb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00fe0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  00fe8	f3 0f 59 80 90
	00 00 00	 mulss	 xmm0, DWORD PTR [eax+144]
  00ff0	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00ff4	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00ff8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00ffe	f3 0f 5a 89 28
	01 00 00	 cvtss2sd xmm1, DWORD PTR [ecx+296]
  01006	f2 0f 58 c8	 addsd	 xmm1, xmm0
  0100a	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0100e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01014	f3 0f 11 82 28
	01 00 00	 movss	 DWORD PTR [edx+296], xmm0
$LN73@update_cyc:

; 653  : 
; 654  : 	if (current_flight_dynamics->input_data.cyclic_y_trim.damaged)

  0101c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01021	0f b7 88 50 01
	00 00		 movzx	 ecx, WORD PTR [eax+336]
  01028	85 c9		 test	 ecx, ecx
  0102a	0f 84 90 00 00
	00		 je	 $LN74@update_cyc

; 655  : 		current_flight_dynamics->input_data.cyclic_y_trim.value += (MODEL_FRAME_RATE * get_model_delta_time ()) * (0.5 * sfrand1 () * current_flight_dynamics->input_data.cyclic_y_trim.value);

  01030	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  0103a	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  0103f	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  01044	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0104a	f3 0f 5a 81 40
	01 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+320]
  01052	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  01058	c1 fa 10	 sar	 edx, 16			; 00000010H
  0105b	81 e2 ff 7f 00
	00		 and	 edx, 32767		; 00007fffH
  01061	81 ea 00 40 00
	00		 sub	 edx, 16384		; 00004000H
  01067	f2 0f 2a ca	 cvtsi2sd xmm1, edx
  0106b	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3f10000000000000
  01073	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  0107b	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  0107f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01084	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  0108c	f3 0f 59 80 90
	00 00 00	 mulss	 xmm0, DWORD PTR [eax+144]
  01094	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01098	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0109c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  010a2	f3 0f 5a 89 40
	01 00 00	 cvtss2sd xmm1, DWORD PTR [ecx+320]
  010aa	f2 0f 58 c8	 addsd	 xmm1, xmm0
  010ae	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  010b2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  010b8	f3 0f 11 82 40
	01 00 00	 movss	 DWORD PTR [edx+320], xmm0
$LN74@update_cyc:

; 656  : 
; 657  : 	// limit cyclic position
; 658  : 
; 659  : 	current_flight_dynamics->input_data.cyclic_x.value = bound (

  010c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  010c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  010cb	f3 0f 10 80 00
	01 00 00	 movss	 xmm0, DWORD PTR [eax+256]
  010d3	0f 2f 81 f8 00
	00 00		 comiss	 xmm0, DWORD PTR [ecx+248]
  010da	76 15		 jbe	 SHORT $LN86@update_cyc
  010dc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  010e2	f3 0f 10 82 00
	01 00 00	 movss	 xmm0, DWORD PTR [edx+256]
  010ea	f3 0f 11 45 84	 movss	 DWORD PTR tv876[ebp], xmm0
  010ef	eb 4d		 jmp	 SHORT $LN87@update_cyc
$LN86@update_cyc:
  010f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  010f6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  010fc	f3 0f 10 80 f8
	00 00 00	 movss	 xmm0, DWORD PTR [eax+248]
  01104	0f 2f 81 04 01
	00 00		 comiss	 xmm0, DWORD PTR [ecx+260]
  0110b	76 15		 jbe	 SHORT $LN84@update_cyc
  0110d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01113	f3 0f 10 82 04
	01 00 00	 movss	 xmm0, DWORD PTR [edx+260]
  0111b	f3 0f 11 45 80	 movss	 DWORD PTR tv875[ebp], xmm0
  01120	eb 12		 jmp	 SHORT $LN85@update_cyc
$LN84@update_cyc:
  01122	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01127	f3 0f 10 80 f8
	00 00 00	 movss	 xmm0, DWORD PTR [eax+248]
  0112f	f3 0f 11 45 80	 movss	 DWORD PTR tv875[ebp], xmm0
$LN85@update_cyc:
  01134	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR tv875[ebp]
  01139	f3 0f 11 45 84	 movss	 DWORD PTR tv876[ebp], xmm0
$LN87@update_cyc:
  0113e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01144	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR tv876[ebp]
  01149	f3 0f 11 81 f8
	00 00 00	 movss	 DWORD PTR [ecx+248], xmm0

; 660  : 												//current_flight_dynamics->input_data.cyclic_x.value + current_flight_dynamics->input_data.cyclic_x_trim.value,
; 661  : 												current_flight_dynamics->input_data.cyclic_x.value,
; 662  : 												current_flight_dynamics->input_data.cyclic_x.min,
; 663  : 												current_flight_dynamics->input_data.cyclic_x.max
; 664  : 												);
; 665  : 
; 666  : 	current_flight_dynamics->input_data.cyclic_y.value = bound (

  01151	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01156	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0115c	f3 0f 10 80 18
	01 00 00	 movss	 xmm0, DWORD PTR [eax+280]
  01164	0f 2f 81 10 01
	00 00		 comiss	 xmm0, DWORD PTR [ecx+272]
  0116b	76 15		 jbe	 SHORT $LN90@update_cyc
  0116d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01173	f3 0f 10 82 18
	01 00 00	 movss	 xmm0, DWORD PTR [edx+280]
  0117b	f3 0f 11 45 84	 movss	 DWORD PTR tv904[ebp], xmm0
  01180	eb 4d		 jmp	 SHORT $LN91@update_cyc
$LN90@update_cyc:
  01182	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  01187	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0118d	f3 0f 10 80 10
	01 00 00	 movss	 xmm0, DWORD PTR [eax+272]
  01195	0f 2f 81 1c 01
	00 00		 comiss	 xmm0, DWORD PTR [ecx+284]
  0119c	76 15		 jbe	 SHORT $LN88@update_cyc
  0119e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  011a4	f3 0f 10 82 1c
	01 00 00	 movss	 xmm0, DWORD PTR [edx+284]
  011ac	f3 0f 11 45 80	 movss	 DWORD PTR tv903[ebp], xmm0
  011b1	eb 12		 jmp	 SHORT $LN89@update_cyc
$LN88@update_cyc:
  011b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  011b8	f3 0f 10 80 10
	01 00 00	 movss	 xmm0, DWORD PTR [eax+272]
  011c0	f3 0f 11 45 80	 movss	 DWORD PTR tv903[ebp], xmm0
$LN89@update_cyc:
  011c5	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR tv903[ebp]
  011ca	f3 0f 11 45 84	 movss	 DWORD PTR tv904[ebp], xmm0
$LN91@update_cyc:
  011cf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  011d5	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR tv904[ebp]
  011da	f3 0f 11 81 10
	01 00 00	 movss	 DWORD PTR [ecx+272], xmm0
$LN1@update_cyc:

; 667  : 												//current_flight_dynamics->input_data.cyclic_y.value + current_flight_dynamics->input_data.cyclic_y_trim.value,
; 668  : 												current_flight_dynamics->input_data.cyclic_y.value,
; 669  : 												current_flight_dynamics->input_data.cyclic_y.min,
; 670  : 												current_flight_dynamics->input_data.cyclic_y.max
; 671  : 												);
; 672  : }

  011e2	5f		 pop	 edi
  011e3	5e		 pop	 esi
  011e4	5b		 pop	 ebx
  011e5	8b e5		 mov	 esp, ebp
  011e7	5d		 pop	 ebp
  011e8	c3		 ret	 0
?update_cyclic_pressure_inputs@@YGXXZ ENDP		; update_cyclic_pressure_inputs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\cyclic.c
;	COMDAT ?cyclic_mouse_input@@YGXPAUEVENT@@@Z
_TEXT	SEGMENT
$T1 = -80						; size = 4
$T2 = -76						; size = 4
$T3 = -72						; size = 4
$T4 = -68						; size = 4
_ev$ = 8						; size = 4
?cyclic_mouse_input@@YGXPAUEVENT@@@Z PROC		; cyclic_mouse_input, COMDAT

; 191  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 192  : 
; 193  : #if 1
; 194  : 
; 195  : 	// make mouse act on pressures
; 196  : 
; 197  : 	if (ev->dx > 0.0)

  00009	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0000c	0f bf 48 0c	 movsx	 ecx, WORD PTR [eax+12]
  00010	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00014	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0001c	76 2c		 jbe	 SHORT $LN2@cyclic_mou

; 198  : 	{
; 199  : 
; 200  : 		current_flight_dynamics->input_data.cyclic_horizontal_pressure.value = max (0.0f, current_flight_dynamics->input_data.cyclic_horizontal_pressure.value);

  0001e	0f 57 c0	 xorps	 xmm0, xmm0
  00021	f3 0f 11 45 bc	 movss	 DWORD PTR $T4[ebp], xmm0
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0002b	05 70 01 00 00	 add	 eax, 368		; 00000170H
  00030	50		 push	 eax
  00031	8d 4d bc	 lea	 ecx, DWORD PTR $T4[ebp]
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0003a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00040	8b 00		 mov	 eax, DWORD PTR [eax]
  00042	89 82 70 01 00
	00		 mov	 DWORD PTR [edx+368], eax
  00048	eb 3e		 jmp	 SHORT $LN4@cyclic_mou
$LN2@cyclic_mou:

; 201  : 	}
; 202  : 	else if (ev->dx < 0.0)

  0004a	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0004d	0f bf 48 0c	 movsx	 ecx, WORD PTR [eax+12]
  00051	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00055	0f 57 c9	 xorps	 xmm1, xmm1
  00058	66 0f 2f c8	 comisd	 xmm1, xmm0
  0005c	76 2a		 jbe	 SHORT $LN4@cyclic_mou

; 203  : 	{
; 204  : 
; 205  : 		current_flight_dynamics->input_data.cyclic_horizontal_pressure.value = min (0.0f, current_flight_dynamics->input_data.cyclic_horizontal_pressure.value);

  0005e	0f 57 c0	 xorps	 xmm0, xmm0
  00061	f3 0f 11 45 b8	 movss	 DWORD PTR $T3[ebp], xmm0
  00066	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0006b	05 70 01 00 00	 add	 eax, 368		; 00000170H
  00070	50		 push	 eax
  00071	8d 4d b8	 lea	 ecx, DWORD PTR $T3[ebp]
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  0007a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00080	8b 00		 mov	 eax, DWORD PTR [eax]
  00082	89 82 70 01 00
	00		 mov	 DWORD PTR [edx+368], eax
$LN4@cyclic_mou:

; 206  : 	}
; 207  : 
; 208  : 	if (ev->dy > 0.0)

  00088	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0008b	0f bf 48 0e	 movsx	 ecx, WORD PTR [eax+14]
  0008f	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00093	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0009b	76 2c		 jbe	 SHORT $LN5@cyclic_mou

; 209  : 	{
; 210  : 
; 211  : 		current_flight_dynamics->input_data.cyclic_vertical_pressure.value = max (0.0f, current_flight_dynamics->input_data.cyclic_vertical_pressure.value);

  0009d	0f 57 c0	 xorps	 xmm0, xmm0
  000a0	f3 0f 11 45 b4	 movss	 DWORD PTR $T2[ebp], xmm0
  000a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000aa	05 58 01 00 00	 add	 eax, 344		; 00000158H
  000af	50		 push	 eax
  000b0	8d 4d b4	 lea	 ecx, DWORD PTR $T2[ebp]
  000b3	51		 push	 ecx
  000b4	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  000b9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000bf	8b 00		 mov	 eax, DWORD PTR [eax]
  000c1	89 82 58 01 00
	00		 mov	 DWORD PTR [edx+344], eax
  000c7	eb 3e		 jmp	 SHORT $LN7@cyclic_mou
$LN5@cyclic_mou:

; 212  : 	}
; 213  : 	else if (ev->dy < 0.0)

  000c9	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  000cc	0f bf 48 0e	 movsx	 ecx, WORD PTR [eax+14]
  000d0	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  000d4	0f 57 c9	 xorps	 xmm1, xmm1
  000d7	66 0f 2f c8	 comisd	 xmm1, xmm0
  000db	76 2a		 jbe	 SHORT $LN7@cyclic_mou

; 214  : 	{
; 215  : 
; 216  : 		current_flight_dynamics->input_data.cyclic_vertical_pressure.value = min (0.0f, current_flight_dynamics->input_data.cyclic_vertical_pressure.value);

  000dd	0f 57 c0	 xorps	 xmm0, xmm0
  000e0	f3 0f 11 45 b0	 movss	 DWORD PTR $T1[ebp], xmm0
  000e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000ea	05 58 01 00 00	 add	 eax, 344		; 00000158H
  000ef	50		 push	 eax
  000f0	8d 4d b0	 lea	 ecx, DWORD PTR $T1[ebp]
  000f3	51		 push	 ecx
  000f4	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  000f9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000ff	8b 00		 mov	 eax, DWORD PTR [eax]
  00101	89 82 58 01 00
	00		 mov	 DWORD PTR [edx+344], eax
$LN7@cyclic_mou:

; 217  : 	}
; 218  : 
; 219  : 	current_flight_dynamics->input_data.cyclic_horizontal_pressure.value += (float) (ev->dx) * (mouse_sensitivity / 50.0);

  00107	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0010a	0f bf 48 0c	 movsx	 ecx, WORD PTR [eax+12]
  0010e	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00112	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00116	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mouse_sensitivity@@3MA
  0011e	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@4049000000000000
  00126	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0012a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00130	f3 0f 5a 8a 70
	01 00 00	 cvtss2sd xmm1, DWORD PTR [edx+368]
  00138	f2 0f 58 c8	 addsd	 xmm1, xmm0
  0013c	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00140	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00145	f3 0f 11 80 70
	01 00 00	 movss	 DWORD PTR [eax+368], xmm0

; 220  : 
; 221  : 	current_flight_dynamics->input_data.cyclic_vertical_pressure.value -= (float) (ev->dy) * (mouse_sensitivity / 50.0);

  0014d	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00150	0f bf 48 0e	 movsx	 ecx, WORD PTR [eax+14]
  00154	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00158	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0015c	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mouse_sensitivity@@3MA
  00164	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@4049000000000000
  0016c	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00170	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00176	f3 0f 5a 8a 58
	01 00 00	 cvtss2sd xmm1, DWORD PTR [edx+344]
  0017e	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00182	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00186	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0018b	f3 0f 11 80 58
	01 00 00	 movss	 DWORD PTR [eax+344], xmm0

; 222  : 
; 223  : #else
; 224  : 
; 225  : 	// make mouse act on cyclic values
; 226  : 
; 227  : 	current_flight_dynamics->input_data.cyclic_x.value += (float) (ev->dx) * mouse_sensitivity / 50.0;
; 228  : 
; 229  : 	current_flight_dynamics->input_data.cyclic_y.value -= (float) (ev->dy) * mouse_sensitivity / 50.0;
; 230  : 
; 231  : #endif
; 232  : }

  00193	5f		 pop	 edi
  00194	5e		 pop	 esi
  00195	5b		 pop	 ebx
  00196	8b e5		 mov	 esp, ebp
  00198	5d		 pop	 ebp
  00199	c2 04 00	 ret	 4
?cyclic_mouse_input@@YGXPAUEVENT@@@Z ENDP		; cyclic_mouse_input
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\cyclic.c
;	COMDAT ?cyclic_backward@@YGXPAUEVENT@@@Z
_TEXT	SEGMENT
_ev$ = 8						; size = 4
?cyclic_backward@@YGXPAUEVENT@@@Z PROC			; cyclic_backward, COMDAT

; 166  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 167  : 
; 168  : 	if (!current_flight_dynamics)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A, 0 ; current_flight_dynamics
  00010	75 02		 jne	 SHORT $LN2@cyclic_bac

; 169  : 	{
; 170  : 
; 171  : 		return;

  00012	eb 42		 jmp	 SHORT $LN1@cyclic_bac
$LN2@cyclic_bac:

; 172  : 	}
; 173  : 
; 174  : 	if (ev->state == KEY_STATE_DOWN)

  00014	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00017	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  0001b	83 f9 02	 cmp	 ecx, 2
  0001e	75 1c		 jne	 SHORT $LN3@cyclic_bac

; 175  : 	{
; 176  : 
; 177  : 		current_flight_dynamics->input_data.cyclic_input_pressure |= CYCLIC_PRESSURE_BACKWARD;

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00025	8b 88 a0 1b 00
	00		 mov	 ecx, DWORD PTR [eax+7072]
  0002b	83 c9 08	 or	 ecx, 8
  0002e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00034	89 8a a0 1b 00
	00		 mov	 DWORD PTR [edx+7072], ecx

; 178  : 	}
; 179  : 	else

  0003a	eb 1a		 jmp	 SHORT $LN1@cyclic_bac
$LN3@cyclic_bac:

; 180  : 	{
; 181  : 
; 182  : 		current_flight_dynamics->input_data.cyclic_input_pressure ^= CYCLIC_PRESSURE_BACKWARD;

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00041	8b 88 a0 1b 00
	00		 mov	 ecx, DWORD PTR [eax+7072]
  00047	83 f1 08	 xor	 ecx, 8
  0004a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00050	89 8a a0 1b 00
	00		 mov	 DWORD PTR [edx+7072], ecx
$LN1@cyclic_bac:

; 183  : 	}
; 184  : }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
?cyclic_backward@@YGXPAUEVENT@@@Z ENDP			; cyclic_backward
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\cyclic.c
;	COMDAT ?cyclic_forward@@YGXPAUEVENT@@@Z
_TEXT	SEGMENT
_ev$ = 8						; size = 4
?cyclic_forward@@YGXPAUEVENT@@@Z PROC			; cyclic_forward, COMDAT

; 141  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 142  : 
; 143  : 	if (!current_flight_dynamics)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A, 0 ; current_flight_dynamics
  00010	75 02		 jne	 SHORT $LN2@cyclic_for

; 144  : 	{
; 145  : 
; 146  : 		return;

  00012	eb 42		 jmp	 SHORT $LN1@cyclic_for
$LN2@cyclic_for:

; 147  : 	}
; 148  : 
; 149  : 	if (ev->state == KEY_STATE_DOWN)

  00014	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00017	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  0001b	83 f9 02	 cmp	 ecx, 2
  0001e	75 1c		 jne	 SHORT $LN3@cyclic_for

; 150  : 	{
; 151  : 
; 152  : 		current_flight_dynamics->input_data.cyclic_input_pressure |= CYCLIC_PRESSURE_FORWARD;

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00025	8b 88 a0 1b 00
	00		 mov	 ecx, DWORD PTR [eax+7072]
  0002b	83 c9 04	 or	 ecx, 4
  0002e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00034	89 8a a0 1b 00
	00		 mov	 DWORD PTR [edx+7072], ecx

; 153  : 	}
; 154  : 	else

  0003a	eb 1a		 jmp	 SHORT $LN1@cyclic_for
$LN3@cyclic_for:

; 155  : 	{
; 156  : 
; 157  : 		current_flight_dynamics->input_data.cyclic_input_pressure ^= CYCLIC_PRESSURE_FORWARD;

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00041	8b 88 a0 1b 00
	00		 mov	 ecx, DWORD PTR [eax+7072]
  00047	83 f1 04	 xor	 ecx, 4
  0004a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00050	89 8a a0 1b 00
	00		 mov	 DWORD PTR [edx+7072], ecx
$LN1@cyclic_for:

; 158  : 	}
; 159  : }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
?cyclic_forward@@YGXPAUEVENT@@@Z ENDP			; cyclic_forward
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\cyclic.c
;	COMDAT ?cyclic_right@@YGXPAUEVENT@@@Z
_TEXT	SEGMENT
_ev$ = 8						; size = 4
?cyclic_right@@YGXPAUEVENT@@@Z PROC			; cyclic_right, COMDAT

; 116  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 117  : 
; 118  : 	if (!current_flight_dynamics)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A, 0 ; current_flight_dynamics
  00010	75 02		 jne	 SHORT $LN2@cyclic_rig

; 119  : 	{
; 120  : 
; 121  : 		return;

  00012	eb 42		 jmp	 SHORT $LN1@cyclic_rig
$LN2@cyclic_rig:

; 122  : 	}
; 123  : 
; 124  : 	if (ev->state == KEY_STATE_DOWN)

  00014	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00017	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  0001b	83 f9 02	 cmp	 ecx, 2
  0001e	75 1c		 jne	 SHORT $LN3@cyclic_rig

; 125  : 	{
; 126  : 
; 127  : 		current_flight_dynamics->input_data.cyclic_input_pressure |= CYCLIC_PRESSURE_RIGHT;

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00025	8b 88 a0 1b 00
	00		 mov	 ecx, DWORD PTR [eax+7072]
  0002b	83 c9 02	 or	 ecx, 2
  0002e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00034	89 8a a0 1b 00
	00		 mov	 DWORD PTR [edx+7072], ecx

; 128  : 	}
; 129  : 	else

  0003a	eb 1a		 jmp	 SHORT $LN1@cyclic_rig
$LN3@cyclic_rig:

; 130  : 	{
; 131  : 
; 132  : 		current_flight_dynamics->input_data.cyclic_input_pressure ^= CYCLIC_PRESSURE_RIGHT;

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00041	8b 88 a0 1b 00
	00		 mov	 ecx, DWORD PTR [eax+7072]
  00047	83 f1 02	 xor	 ecx, 2
  0004a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00050	89 8a a0 1b 00
	00		 mov	 DWORD PTR [edx+7072], ecx
$LN1@cyclic_rig:

; 133  : 	}
; 134  : }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
?cyclic_right@@YGXPAUEVENT@@@Z ENDP			; cyclic_right
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\dynamics\common\cyclic.c
;	COMDAT ?cyclic_left@@YGXPAUEVENT@@@Z
_TEXT	SEGMENT
_ev$ = 8						; size = 4
?cyclic_left@@YGXPAUEVENT@@@Z PROC			; cyclic_left, COMDAT

; 91   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 92   : 
; 93   : 	if (!current_flight_dynamics)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A, 0 ; current_flight_dynamics
  00010	75 02		 jne	 SHORT $LN2@cyclic_lef

; 94   : 	{
; 95   : 
; 96   : 		return;

  00012	eb 42		 jmp	 SHORT $LN1@cyclic_lef
$LN2@cyclic_lef:

; 97   : 	}
; 98   : 
; 99   : 	if (ev->state == KEY_STATE_DOWN)

  00014	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  00017	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  0001b	83 f9 02	 cmp	 ecx, 2
  0001e	75 1c		 jne	 SHORT $LN3@cyclic_lef

; 100  : 	{
; 101  : 
; 102  : 		current_flight_dynamics->input_data.cyclic_input_pressure |= CYCLIC_PRESSURE_LEFT;

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00025	8b 88 a0 1b 00
	00		 mov	 ecx, DWORD PTR [eax+7072]
  0002b	83 c9 01	 or	 ecx, 1
  0002e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00034	89 8a a0 1b 00
	00		 mov	 DWORD PTR [edx+7072], ecx

; 103  : 	}
; 104  : 	else

  0003a	eb 1a		 jmp	 SHORT $LN1@cyclic_lef
$LN3@cyclic_lef:

; 105  : 	{
; 106  : 
; 107  : 		current_flight_dynamics->input_data.cyclic_input_pressure ^= CYCLIC_PRESSURE_LEFT;

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00041	8b 88 a0 1b 00
	00		 mov	 ecx, DWORD PTR [eax+7072]
  00047	83 f1 01	 xor	 ecx, 1
  0004a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00050	89 8a a0 1b 00
	00		 mov	 DWORD PTR [edx+7072], ecx
$LN1@cyclic_lef:

; 108  : 	}
; 109  : }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
?cyclic_left@@YGXPAUEVENT@@@Z ENDP			; cyclic_left
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fabs@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?fabs@@YGMM@Z PROC					; fabs, COMDAT

; 112  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 113  : 	return (_CSTD fabsf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _fabsf
  00019	83 c4 04	 add	 esp, 4

; 114  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?fabs@@YGMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 671  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 672  :             return (float)fabs(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _fabs
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 673  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
END
