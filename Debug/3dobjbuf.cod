; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\3d\3dobjbuf.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?middle_scene_slot_height@@3MA			; middle_scene_slot_height
PUBLIC	?number_of_objects_in_3d_scene@@3HA		; number_of_objects_in_3d_scene
PUBLIC	?final_number_of_objects_in_3d_scene@@3HA	; final_number_of_objects_in_3d_scene
PUBLIC	?number_of_sprites_in_3d_scene@@3HA		; number_of_sprites_in_3d_scene
PUBLIC	?final_number_of_sprites_in_3d_scene@@3HA	; final_number_of_sprites_in_3d_scene
PUBLIC	?high_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; high_zbuffered_scene_slot_sorted_list
PUBLIC	?high_nonzbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; high_nonzbuffered_scene_slot_sorted_list
PUBLIC	?middle_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; middle_scene_slot_sorted_list
PUBLIC	?low_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; low_zbuffered_scene_slot_sorted_list
PUBLIC	?low_nonzbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; low_nonzbuffered_scene_slot_sorted_list
PUBLIC	?current_scene_slot_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; current_scene_slot_list
PUBLIC	?fog@@3HA					; fog
PUBLIC	?exclusive_3d_instance@@3PAUOBJECT_3D_INSTANCE@@A ; exclusive_3d_instance
_BSS	SEGMENT
?middle_scene_slot_height@@3MA DD 01H DUP (?)		; middle_scene_slot_height
?number_of_objects_in_3d_scene@@3HA DD 01H DUP (?)	; number_of_objects_in_3d_scene
?final_number_of_objects_in_3d_scene@@3HA DD 01H DUP (?) ; final_number_of_objects_in_3d_scene
?number_of_sprites_in_3d_scene@@3HA DD 01H DUP (?)	; number_of_sprites_in_3d_scene
?final_number_of_sprites_in_3d_scene@@3HA DD 01H DUP (?) ; final_number_of_sprites_in_3d_scene
?high_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A DD 01H DUP (?) ; high_zbuffered_scene_slot_sorted_list
?high_nonzbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A DD 01H DUP (?) ; high_nonzbuffered_scene_slot_sorted_list
?middle_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A DD 01H DUP (?) ; middle_scene_slot_sorted_list
?low_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A DD 01H DUP (?) ; low_zbuffered_scene_slot_sorted_list
?low_nonzbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A DD 01H DUP (?) ; low_nonzbuffered_scene_slot_sorted_list
?current_scene_slot_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A DD 01H DUP (?) ; current_scene_slot_list
?fog@@3HA DD	01H DUP (?)				; fog
?exclusive_3d_instance@@3PAUOBJECT_3D_INSTANCE@@A DD 01H DUP (?) ; exclusive_3d_instance
_BSS	ENDS
PUBLIC	?set_middle_scene_slot_height@@YGXM@Z		; set_middle_scene_slot_height
PUBLIC	?get_3d_scene_slot@@YGPAUSCENE_SLOT_DRAWING_LIST@@XZ ; get_3d_scene_slot
PUBLIC	?insert_object_shadow_into_3d_scene@@YGXPAUOBJECT_3D_INSTANCE@@@Z ; insert_object_shadow_into_3d_scene
PUBLIC	?insert_high_zbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_high_zbuffered_scene_slot_into_3d_scene
PUBLIC	?insert_high_nonzbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_high_nonzbuffered_scene_slot_into_3d_scene
PUBLIC	?insert_middle_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_middle_scene_slot_into_3d_scene
PUBLIC	?insert_low_zbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_low_zbuffered_scene_slot_into_3d_scene
PUBLIC	?insert_low_nonzbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_low_nonzbuffered_scene_slot_into_3d_scene
PUBLIC	?insert_zbiased_relative_object_into_3d_scene@@YGXW4OBJECT_3D_DRAWING_TYPES@@PAUVEC3D@@PAXM@Z ; insert_zbiased_relative_object_into_3d_scene
PUBLIC	?insert_zbiased_object_into_3d_scene@@YGXW4OBJECT_3D_DRAWING_TYPES@@PAXM@Z ; insert_zbiased_object_into_3d_scene
PUBLIC	?insert_zbiased_coloured_object_into_3d_scene@@YGXW4OBJECT_3D_DRAWING_TYPES@@PAXUREAL_COLOUR@@M@Z ; insert_zbiased_coloured_object_into_3d_scene
PUBLIC	?insert_transparent_buffer_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_transparent_buffer_into_3d_scene
PUBLIC	?draw_3d_scene@@YGXXZ				; draw_3d_scene
PUBLIC	?clear_3d_scene_objects@@YGXXZ			; clear_3d_scene_objects
PUBLIC	?set_3d_exclusive_instance@@YGXPAUOBJECT_3D_INSTANCE@@@Z ; set_3d_exclusive_instance
PUBLIC	?draw_normal_scene_objects@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; draw_normal_scene_objects
PUBLIC	?draw_transparent_scene_objects@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; draw_transparent_scene_objects
PUBLIC	??_C@_0CA@NJJGKNHB@Exceeded?5object?5count?5for?5scene@ ; `string'
PUBLIC	??_C@_0DM@JJJALLCE@Unknown?5object?5type?5in?5insert_o@ ; `string'
PUBLIC	??_C@_0CH@FFJJCAGN@Unknown?5object?5type?5in?5draw_3d_@ ; `string'
PUBLIC	__real@3f51319b
PUBLIC	__real@3f800000
PUBLIC	__real@3f847ae147ae147b
PUBLIC	__real@3f8604da
PUBLIC	__real@45000000
PUBLIC	__real@461c4000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?get_delta_time_average@@YGMXZ:PROC		; get_delta_time_average
EXTRN	?get_4d_projection_matrix@@YGXQAY03MMMMM@Z:PROC	; get_4d_projection_matrix
EXTRN	?flush_triangle_primitives@@YGXXZ:PROC		; flush_triangle_primitives
EXTRN	?flush_line_primitives@@YGXXZ:PROC		; flush_line_primitives
EXTRN	?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z:PROC	; set_d3d_alpha_fog_zbuffer
EXTRN	?set_d3d_in_order_rendering@@YGXH@Z:PROC	; set_d3d_in_order_rendering
EXTRN	?set_d3d_material_default@@YGXXZ:PROC		; set_d3d_material_default
EXTRN	?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; set_d3d_int_state
EXTRN	?draw_polygon_buffer@@YGXPAUPOLYGON_BUFFER@@@Z:PROC ; draw_polygon_buffer
EXTRN	?f3d_set_light@@YGXIPAU_D3DLIGHT7@@@Z:PROC	; f3d_set_light
EXTRN	?f3d_light_enable@@YGXII@Z:PROC			; f3d_light_enable
EXTRN	?f3d_set_transform@@YGXIPAU_D3DMATRIX@@@Z:PROC	; f3d_set_transform
EXTRN	?f3d_set_viewport@@YGHPAU_D3DVIEWPORT7@@@Z:PROC	; f3d_set_viewport
EXTRN	?draw_3d_explosion@@YGXPAUOBJECT_3D_EXPLOSION@@@Z:PROC ; draw_3d_explosion
EXTRN	?draw_3d_polyline@@YGXPAUOBJECT_3D_POLYLINE@@@Z:PROC ; draw_3d_polyline
EXTRN	?draw_3d_smoke_trail@@YGXPAUOBJECT_3D_SMOKE_TRAIL@@@Z:PROC ; draw_3d_smoke_trail
EXTRN	?draw_3d_sprite@@YGXPAUOBJECT_3D_SPRITE@@@Z:PROC ; draw_3d_sprite
EXTRN	?copy_and_recolour_current_3d_lights@@YGXUREAL_COLOUR@@@Z:PROC ; copy_and_recolour_current_3d_lights
EXTRN	?restore_uncoloured_current_3d_lights@@YGXXZ:PROC ; restore_uncoloured_current_3d_lights
EXTRN	?draw_hardware_3d_object@@YGXPAUOBJECT_3D_INSTANCE@@H@Z:PROC ; draw_hardware_3d_object
EXTRN	?draw_hardware_zbuffered_3d_object@@YGXPAUOBJECT_3D_INSTANCE@@HH@Z:PROC ; draw_hardware_zbuffered_3d_object
EXTRN	?draw_3d_hardware_translucent_object@@YGXPAUTRANSLUCENT_OBJECT_SURFACE@@@Z:PROC ; draw_3d_hardware_translucent_object
EXTRN	?draw_3d_hardware_zbuffered_translucent_object@@YGXPAUTRANSLUCENT_OBJECT_SURFACE@@@Z:PROC ; draw_3d_hardware_zbuffered_translucent_object
EXTRN	?draw_wbuffered_3d_object@@YGXPAUOBJECT_3D_INSTANCE@@HH@Z:PROC ; draw_wbuffered_3d_object
EXTRN	?draw_3d_translucent_object@@YGXPAUTRANSLUCENT_OBJECT_SURFACE@@@Z:PROC ; draw_3d_translucent_object
EXTRN	?draw_zbuffered_3d_object@@YGXPAUOBJECT_3D_INSTANCE@@HH@Z:PROC ; draw_zbuffered_3d_object
EXTRN	?set_object_3d_instance_relative_position@@YGXPAUOBJECT_3D_INSTANCE@@@Z:PROC ; set_object_3d_instance_relative_position
EXTRN	?get_position_3d_relative_position@@YGXPAUVEC3D@@0@Z:PROC ; get_position_3d_relative_position
EXTRN	?get_object_3d_instance_visibility@@YG?AW4OBJECT_3D_VISIBILITY@@PAUOBJECT_3D_INSTANCE@@@Z:PROC ; get_object_3d_instance_visibility
EXTRN	?get_scene_3d_instance_visibility@@YG?AW4OBJECT_3D_VISIBILITY@@HPAUVEC3D@@@Z:PROC ; get_scene_3d_instance_visibility
EXTRN	?get_3d_shadows_translucent@@YGHXZ:PROC		; get_3d_shadows_translucent
EXTRN	?draw_3d_object_shadow@@YGXPAUOBJECT_3D_INSTANCE@@@Z:PROC ; draw_3d_object_shadow
EXTRN	?get_object_3d_instance_shadow_visibility@@YG?AW4OBJECT_3D_VISIBILITY@@PAUOBJECT_3D_INSTANCE@@@Z:PROC ; get_object_3d_instance_shadow_visibility
EXTRN	?draw_3d_cloud_sector@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z:PROC ; draw_3d_cloud_sector
EXTRN	?draw_3d_terrain_tree_object@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z:PROC ; draw_3d_terrain_tree_object
EXTRN	?draw_3d_terrain_cloud_puff_object@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z:PROC ; draw_3d_terrain_cloud_puff_object
EXTRN	?draw_3d_terrain_3d_clipped_sector@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z:PROC ; draw_3d_terrain_3d_clipped_sector
EXTRN	?draw_3d_terrain_2d_clipped_sector@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z:PROC ; draw_3d_terrain_2d_clipped_sector
EXTRN	?draw_3d_terrain_unclipped_sector@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z:PROC ; draw_3d_terrain_unclipped_sector
EXTRN	?draw_3d_terrain_3d_clipped_bw_sector@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z:PROC ; draw_3d_terrain_3d_clipped_bw_sector
EXTRN	?draw_3d_terrain_2d_clipped_bw_sector@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z:PROC ; draw_3d_terrain_2d_clipped_bw_sector
EXTRN	?draw_3d_terrain_unclipped_bw_sector@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z:PROC ; draw_3d_terrain_unclipped_bw_sector
EXTRN	__dtoui3:PROC
EXTRN	__ftoui3:PROC
EXTRN	?d3d_using_hardware_tnl@@3HA:DWORD		; d3d_using_hardware_tnl
EXTRN	?clip_hither@@3MA:DWORD				; clip_hither
EXTRN	?active_3d_environment@@3PAUENV_3D@@A:DWORD	; active_3d_environment
EXTRN	?visual_3d_vp@@3PAUVIEWPOINT@@A:DWORD		; visual_3d_vp
EXTRN	?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A:BYTE	; ambient_3d_light
EXTRN	?current_3d_lights@@3PAULIGHT_3D_SOURCE@@A:DWORD ; current_3d_lights
EXTRN	?shadows_enabled@@3HA:DWORD			; shadows_enabled
EXTRN	?object_3d_transparent_surface_index@@3HA:DWORD	; object_3d_transparent_surface_index
EXTRN	?command_line_trees_fog@@3HA:DWORD		; command_line_trees_fog
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A DD 01H DUP (?) ; last_high_zbuffered_scene_slot_insert_point
?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A DD 01H DUP (?) ; last_high_nonzbuffered_scene_slot_insert_point
?last_middle_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A DD 01H DUP (?) ; last_middle_scene_slot_insert_point
?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A DD 01H DUP (?) ; last_low_zbuffered_scene_slot_insert_point
?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A DD 01H DUP (?) ; last_low_nonzbuffered_scene_slot_insert_point
?scene_slot_order_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A DB 04c000H DUP (?) ; scene_slot_order_list
?scene_slot_order_index@@3HA DD 01H DUP (?)		; scene_slot_order_index
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@45000000
CONST	SEGMENT
__real@45000000 DD 045000000r			; 2048
CONST	ENDS
;	COMDAT __real@3f8604da
CONST	SEGMENT
__real@3f8604da DD 03f8604dar			; 1.04702
CONST	ENDS
;	COMDAT __real@3f847ae147ae147b
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f51319b
CONST	SEGMENT
__real@3f51319b DD 03f51319br			; 0.817163
CONST	ENDS
;	COMDAT ??_C@_0CH@FFJJCAGN@Unknown?5object?5type?5in?5draw_3d_@
CONST	SEGMENT
??_C@_0CH@FFJJCAGN@Unknown?5object?5type?5in?5draw_3d_@ DB 'Unknown objec'
	DB	't type in draw_3d_objects', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@JJJALLCE@Unknown?5object?5type?5in?5insert_o@
CONST	SEGMENT
??_C@_0DM@JJJALLCE@Unknown?5object?5type?5in?5insert_o@ DB 'Unknown objec'
	DB	't type in insert_object_3d_instance_into_scene', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NJJGKNHB@Exceeded?5object?5count?5for?5scene@
CONST	SEGMENT
??_C@_0CA@NJJGKNHB@Exceeded?5object?5count?5for?5scene@ DB 'Exceeded obje'
	DB	'ct count for scene', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjbuf.c
;	COMDAT ?set_up_tnl_hardware@@YGXXZ
_TEXT	SEGMENT
_viewdata$1 = -292					; size = 24
_view_height_angle$2 = -268				; size = 4
_view_width_angle$3 = -264				; size = 4
_far_plane$4 = -260					; size = 4
_near_plane$5 = -256					; size = 4
_rel$6 = -252						; size = 12
_count$7 = -240						; size = 4
_this_light$8 = -236					; size = 4
_light$9 = -232						; size = 104
_d3d_matrix$ = -128					; size = 64
_m$ = -64						; size = 64
?set_up_tnl_hardware@@YGXXZ PROC			; set_up_tnl_hardware, COMDAT

; 2350 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 64 01 00
	00		 sub	 esp, 356		; 00000164H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2351 : 	matrix4x4
; 2352 : 		m;
; 2353 : 
; 2354 : 	D3DMATRIX
; 2355 : 		d3d_matrix;
; 2356 : 
; 2357 : 	//
; 2358 : 	// Set lights
; 2359 : 	//
; 2360 : 
; 2361 : 	flush_triangle_primitives ();

  0000c	e8 00 00 00 00	 call	 ?flush_triangle_primitives@@YGXXZ ; flush_triangle_primitives

; 2362 : 
; 2363 : 	flush_line_primitives ();

  00011	e8 00 00 00 00	 call	 ?flush_line_primitives@@YGXXZ ; flush_line_primitives

; 2364 : 
; 2365 : 	if ( current_3d_lights )

  00016	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_3d_lights@@3PAULIGHT_3D_SOURCE@@A, 0 ; current_3d_lights
  0001d	0f 84 c8 01 00
	00		 je	 $LN5@set_up_tnl

; 2366 : 	{
; 2367 : 
; 2368 : 		D3DLIGHT7
; 2369 : 			light;
; 2370 : 
; 2371 : 		light_3d_source
; 2372 : 			*this_light;
; 2373 : 
; 2374 : 		int
; 2375 : 			count;
; 2376 : 
; 2377 : 		this_light = current_3d_lights;

  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_3d_lights@@3PAULIGHT_3D_SOURCE@@A ; current_3d_lights
  00028	89 85 14 ff ff
	ff		 mov	 DWORD PTR _this_light$8[ebp], eax

; 2378 : 
; 2379 : 		count = 0;

  0002e	c7 85 10 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _count$7[ebp], 0
$LN2@set_up_tnl:

; 2380 : 
; 2381 : 		while ( this_light )

  00038	83 bd 14 ff ff
	ff 00		 cmp	 DWORD PTR _this_light$8[ebp], 0
  0003f	0f 84 7c 01 00
	00		 je	 $LN3@set_up_tnl

; 2382 : 		{
; 2383 : 	
; 2384 : 			memset ( &light, 0, sizeof ( light ) );

  00045	6a 68		 push	 104			; 00000068H
  00047	6a 00		 push	 0
  00049	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _light$9[ebp]
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 _memset
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2385 : 	
; 2386 : 			light.dltType = D3DLIGHT_DIRECTIONAL;

  00058	c7 85 18 ff ff
	ff 03 00 00 00	 mov	 DWORD PTR _light$9[ebp], 3

; 2387 : 	
; 2388 : 			light.dcvDiffuse.r = this_light->colour.red;

  00062	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$8[ebp]
  00068	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  0006d	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _light$9[ebp+4], xmm0

; 2389 : 			light.dcvDiffuse.g = this_light->colour.green;

  00075	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$8[ebp]
  0007b	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  00080	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _light$9[ebp+8], xmm0

; 2390 : 			light.dcvDiffuse.b = this_light->colour.blue;

  00088	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$8[ebp]
  0008e	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  00093	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _light$9[ebp+12], xmm0

; 2391 : 
; 2392 : 			if ( count == 0 )

  0009b	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _count$7[ebp], 0
  000a2	75 32		 jne	 SHORT $LN8@set_up_tnl

; 2393 : 			{
; 2394 : 	
; 2395 : 				light.dcvAmbient.r = ambient_3d_light.colour.red;

  000a4	f3 0f 10 05 18
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+24
  000ac	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _light$9[ebp+36], xmm0

; 2396 : 				light.dcvAmbient.g = ambient_3d_light.colour.green;

  000b4	f3 0f 10 05 1c
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+28
  000bc	f3 0f 11 85 40
	ff ff ff	 movss	 DWORD PTR _light$9[ebp+40], xmm0

; 2397 : 				light.dcvAmbient.b = ambient_3d_light.colour.blue;

  000c4	f3 0f 10 05 20
	00 00 00	 movss	 xmm0, DWORD PTR ?ambient_3d_light@@3ULIGHT_3D_SOURCE@@A+32
  000cc	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR _light$9[ebp+44], xmm0

; 2398 : 			}
; 2399 : 			else

  000d4	eb 21		 jmp	 SHORT $LN9@set_up_tnl
$LN8@set_up_tnl:

; 2400 : 			{
; 2401 : 	
; 2402 : 				light.dcvAmbient.r = 0;

  000d6	0f 57 c0	 xorps	 xmm0, xmm0
  000d9	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _light$9[ebp+36], xmm0

; 2403 : 				light.dcvAmbient.g = 0;

  000e1	0f 57 c0	 xorps	 xmm0, xmm0
  000e4	f3 0f 11 85 40
	ff ff ff	 movss	 DWORD PTR _light$9[ebp+40], xmm0

; 2404 : 				light.dcvAmbient.b = 0;

  000ec	0f 57 c0	 xorps	 xmm0, xmm0
  000ef	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR _light$9[ebp+44], xmm0
$LN9@set_up_tnl:

; 2405 : 			}
; 2406 : 	
; 2407 : 			light.dcvSpecular.r = this_light->colour.red;

  000f7	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$8[ebp]
  000fd	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  00102	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _light$9[ebp+20], xmm0

; 2408 : 			light.dcvSpecular.g = this_light->colour.green;

  0010a	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$8[ebp]
  00110	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  00115	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _light$9[ebp+24], xmm0

; 2409 : 			light.dcvSpecular.b = this_light->colour.blue;

  0011d	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$8[ebp]
  00123	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  00128	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _light$9[ebp+28], xmm0

; 2410 : 	
; 2411 : 			light.dvDirection.x = -this_light->light_direction.x;

  00130	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$8[ebp]
  00136	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0013a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00141	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _light$9[ebp+64], xmm0

; 2412 : 			light.dvDirection.y = -this_light->light_direction.y;

  00149	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$8[ebp]
  0014f	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00154	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0015b	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _light$9[ebp+68], xmm0

; 2413 : 			light.dvDirection.z = -this_light->light_direction.z;

  00163	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$8[ebp]
  00169	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0016e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00175	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _light$9[ebp+72], xmm0

; 2414 : 
; 2415 : 			f3d_set_light(count, &light);

  0017d	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _light$9[ebp]
  00183	50		 push	 eax
  00184	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _count$7[ebp]
  0018a	51		 push	 ecx
  0018b	e8 00 00 00 00	 call	 ?f3d_set_light@@YGXIPAU_D3DLIGHT7@@@Z ; f3d_set_light

; 2416 : 
; 2417 : 			f3d_light_enable(count, TRUE);

  00190	6a 01		 push	 1
  00192	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _count$7[ebp]
  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 ?f3d_light_enable@@YGXII@Z ; f3d_light_enable

; 2418 : 	
; 2419 : 			this_light = this_light->succ;

  0019e	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _this_light$8[ebp]
  001a4	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  001a7	89 8d 14 ff ff
	ff		 mov	 DWORD PTR _this_light$8[ebp], ecx

; 2420 : 
; 2421 : 			count++;

  001ad	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _count$7[ebp]
  001b3	83 c0 01	 add	 eax, 1
  001b6	89 85 10 ff ff
	ff		 mov	 DWORD PTR _count$7[ebp], eax

; 2422 : 		}

  001bc	e9 77 fe ff ff	 jmp	 $LN2@set_up_tnl
$LN3@set_up_tnl:

; 2423 : 
; 2424 : 		for ( ; count < 4; count++ )

  001c1	eb 0f		 jmp	 SHORT $LN6@set_up_tnl
$LN4@set_up_tnl:
  001c3	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _count$7[ebp]
  001c9	83 c0 01	 add	 eax, 1
  001cc	89 85 10 ff ff
	ff		 mov	 DWORD PTR _count$7[ebp], eax
$LN6@set_up_tnl:
  001d2	83 bd 10 ff ff
	ff 04		 cmp	 DWORD PTR _count$7[ebp], 4
  001d9	7d 10		 jge	 SHORT $LN5@set_up_tnl

; 2425 : 		{
; 2426 : 			f3d_light_enable(count, FALSE);

  001db	6a 00		 push	 0
  001dd	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _count$7[ebp]
  001e3	50		 push	 eax
  001e4	e8 00 00 00 00	 call	 ?f3d_light_enable@@YGXII@Z ; f3d_light_enable

; 2427 : 		}

  001e9	eb d8		 jmp	 SHORT $LN4@set_up_tnl
$LN5@set_up_tnl:

; 2428 : 	}
; 2429 : 
; 2430 : 	//
; 2431 : 	// Set view ( viewer's ) transformation matrix
; 2432 : 	//
; 2433 : 
; 2434 : 	{
; 2435 : 
; 2436 : 		vec3d
; 2437 : 			rel;
; 2438 : 
; 2439 : 		rel.x = visual_3d_vp->attitude[0][0] * visual_3d_vp->x + visual_3d_vp->attitude[0][1] * visual_3d_vp->y + visual_3d_vp->attitude[0][2] * visual_3d_vp->z;

  001eb	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001f0	6b c8 00	 imul	 ecx, eax, 0
  001f3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  001f9	8d 44 0a 0c	 lea	 eax, DWORD PTR [edx+ecx+12]
  001fd	b9 04 00 00 00	 mov	 ecx, 4
  00202	6b d1 00	 imul	 edx, ecx, 0
  00205	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0020b	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00210	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  00214	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00219	6b c2 00	 imul	 eax, edx, 0
  0021c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00222	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  00226	b8 04 00 00 00	 mov	 eax, 4
  0022b	c1 e0 00	 shl	 eax, 0
  0022e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00234	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00239	f3 0f 59 49 04	 mulss	 xmm1, DWORD PTR [ecx+4]
  0023e	f3 0f 58 c1	 addss	 xmm0, xmm1
  00242	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00247	6b c2 00	 imul	 eax, edx, 0
  0024a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00250	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  00254	b8 04 00 00 00	 mov	 eax, 4
  00259	d1 e0		 shl	 eax, 1
  0025b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00261	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00266	f3 0f 59 49 08	 mulss	 xmm1, DWORD PTR [ecx+8]
  0026b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0026f	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _rel$6[ebp], xmm0

; 2440 : 		rel.y = visual_3d_vp->attitude[1][0] * visual_3d_vp->x + visual_3d_vp->attitude[1][1] * visual_3d_vp->y + visual_3d_vp->attitude[1][2] * visual_3d_vp->z;

  00277	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0027c	c1 e0 00	 shl	 eax, 0
  0027f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00285	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  00289	b8 04 00 00 00	 mov	 eax, 4
  0028e	6b c8 00	 imul	 ecx, eax, 0
  00291	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00296	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0029b	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  0029f	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  002a4	c1 e1 00	 shl	 ecx, 0
  002a7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  002ad	8d 44 0a 0c	 lea	 eax, DWORD PTR [edx+ecx+12]
  002b1	b9 04 00 00 00	 mov	 ecx, 4
  002b6	c1 e1 00	 shl	 ecx, 0
  002b9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  002bf	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [eax+ecx]
  002c4	f3 0f 59 4a 04	 mulss	 xmm1, DWORD PTR [edx+4]
  002c9	f3 0f 58 c1	 addss	 xmm0, xmm1
  002cd	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002d2	c1 e0 00	 shl	 eax, 0
  002d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  002db	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  002df	b8 04 00 00 00	 mov	 eax, 4
  002e4	d1 e0		 shl	 eax, 1
  002e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  002ec	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  002f1	f3 0f 59 49 08	 mulss	 xmm1, DWORD PTR [ecx+8]
  002f6	f3 0f 58 c1	 addss	 xmm0, xmm1
  002fa	f3 0f 11 85 08
	ff ff ff	 movss	 DWORD PTR _rel$6[ebp+4], xmm0

; 2441 : 		rel.z = visual_3d_vp->attitude[2][0] * visual_3d_vp->x + visual_3d_vp->attitude[2][1] * visual_3d_vp->y + visual_3d_vp->attitude[2][2] * visual_3d_vp->z;

  00302	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00307	d1 e0		 shl	 eax, 1
  00309	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0030f	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  00313	b8 04 00 00 00	 mov	 eax, 4
  00318	6b c8 00	 imul	 ecx, eax, 0
  0031b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00320	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00325	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  00329	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0032e	d1 e1		 shl	 ecx, 1
  00330	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00336	8d 44 0a 0c	 lea	 eax, DWORD PTR [edx+ecx+12]
  0033a	b9 04 00 00 00	 mov	 ecx, 4
  0033f	c1 e1 00	 shl	 ecx, 0
  00342	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00348	f3 0f 10 0c 08	 movss	 xmm1, DWORD PTR [eax+ecx]
  0034d	f3 0f 59 4a 04	 mulss	 xmm1, DWORD PTR [edx+4]
  00352	f3 0f 58 c1	 addss	 xmm0, xmm1
  00356	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0035b	d1 e0		 shl	 eax, 1
  0035d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00363	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  00367	b8 04 00 00 00	 mov	 eax, 4
  0036c	d1 e0		 shl	 eax, 1
  0036e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00374	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00379	f3 0f 59 49 08	 mulss	 xmm1, DWORD PTR [ecx+8]
  0037e	f3 0f 58 c1	 addss	 xmm0, xmm1
  00382	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _rel$6[ebp+8], xmm0

; 2442 : 	
; 2443 : 		m[0][0] = visual_3d_vp->attitude[0][0];

  0038a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0038f	6b c8 00	 imul	 ecx, eax, 0
  00392	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00398	8d 44 0a 0c	 lea	 eax, DWORD PTR [edx+ecx+12]
  0039c	b9 04 00 00 00	 mov	 ecx, 4
  003a1	6b d1 00	 imul	 edx, ecx, 0
  003a4	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  003a9	6b c9 00	 imul	 ecx, ecx, 0
  003ac	8d 4c 0d c0	 lea	 ecx, DWORD PTR _m$[ebp+ecx]
  003b0	be 04 00 00 00	 mov	 esi, 4
  003b5	6b f6 00	 imul	 esi, esi, 0
  003b8	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  003bb	89 14 31	 mov	 DWORD PTR [ecx+esi], edx

; 2444 : 		m[0][1] = visual_3d_vp->attitude[1][0];

  003be	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003c3	c1 e0 00	 shl	 eax, 0
  003c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  003cc	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  003d0	b8 04 00 00 00	 mov	 eax, 4
  003d5	6b c8 00	 imul	 ecx, eax, 0
  003d8	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  003dd	6b c0 00	 imul	 eax, eax, 0
  003e0	8d 44 05 c0	 lea	 eax, DWORD PTR _m$[ebp+eax]
  003e4	be 04 00 00 00	 mov	 esi, 4
  003e9	c1 e6 00	 shl	 esi, 0
  003ec	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  003ef	89 0c 30	 mov	 DWORD PTR [eax+esi], ecx

; 2445 : 		m[0][2] = visual_3d_vp->attitude[2][0];

  003f2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003f7	d1 e0		 shl	 eax, 1
  003f9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  003ff	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  00403	b8 04 00 00 00	 mov	 eax, 4
  00408	6b c8 00	 imul	 ecx, eax, 0
  0040b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00410	6b c0 00	 imul	 eax, eax, 0
  00413	8d 44 05 c0	 lea	 eax, DWORD PTR _m$[ebp+eax]
  00417	be 04 00 00 00	 mov	 esi, 4
  0041c	d1 e6		 shl	 esi, 1
  0041e	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  00421	89 0c 30	 mov	 DWORD PTR [eax+esi], ecx

; 2446 : 		m[1][0] = visual_3d_vp->attitude[0][1];

  00424	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00429	6b c8 00	 imul	 ecx, eax, 0
  0042c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00432	8d 44 0a 0c	 lea	 eax, DWORD PTR [edx+ecx+12]
  00436	b9 04 00 00 00	 mov	 ecx, 4
  0043b	c1 e1 00	 shl	 ecx, 0
  0043e	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00443	c1 e2 00	 shl	 edx, 0
  00446	8d 54 15 c0	 lea	 edx, DWORD PTR _m$[ebp+edx]
  0044a	be 04 00 00 00	 mov	 esi, 4
  0044f	6b f6 00	 imul	 esi, esi, 0
  00452	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  00455	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 2447 : 		m[1][1] = visual_3d_vp->attitude[1][1];

  00458	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0045d	c1 e0 00	 shl	 eax, 0
  00460	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00466	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  0046a	b8 04 00 00 00	 mov	 eax, 4
  0046f	c1 e0 00	 shl	 eax, 0
  00472	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00477	c1 e1 00	 shl	 ecx, 0
  0047a	8d 4c 0d c0	 lea	 ecx, DWORD PTR _m$[ebp+ecx]
  0047e	be 04 00 00 00	 mov	 esi, 4
  00483	c1 e6 00	 shl	 esi, 0
  00486	8b 14 02	 mov	 edx, DWORD PTR [edx+eax]
  00489	89 14 31	 mov	 DWORD PTR [ecx+esi], edx

; 2448 : 		m[1][2] = visual_3d_vp->attitude[2][1];

  0048c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00491	d1 e0		 shl	 eax, 1
  00493	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00499	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  0049d	b8 04 00 00 00	 mov	 eax, 4
  004a2	c1 e0 00	 shl	 eax, 0
  004a5	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  004aa	c1 e1 00	 shl	 ecx, 0
  004ad	8d 4c 0d c0	 lea	 ecx, DWORD PTR _m$[ebp+ecx]
  004b1	be 04 00 00 00	 mov	 esi, 4
  004b6	d1 e6		 shl	 esi, 1
  004b8	8b 14 02	 mov	 edx, DWORD PTR [edx+eax]
  004bb	89 14 31	 mov	 DWORD PTR [ecx+esi], edx

; 2449 : 		m[2][0] = visual_3d_vp->attitude[0][2];

  004be	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004c3	6b c8 00	 imul	 ecx, eax, 0
  004c6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  004cc	8d 44 0a 0c	 lea	 eax, DWORD PTR [edx+ecx+12]
  004d0	b9 04 00 00 00	 mov	 ecx, 4
  004d5	d1 e1		 shl	 ecx, 1
  004d7	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  004dc	d1 e2		 shl	 edx, 1
  004de	8d 54 15 c0	 lea	 edx, DWORD PTR _m$[ebp+edx]
  004e2	be 04 00 00 00	 mov	 esi, 4
  004e7	6b f6 00	 imul	 esi, esi, 0
  004ea	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  004ed	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 2450 : 		m[2][1] = visual_3d_vp->attitude[1][2];

  004f0	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004f5	c1 e0 00	 shl	 eax, 0
  004f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  004fe	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  00502	b8 04 00 00 00	 mov	 eax, 4
  00507	d1 e0		 shl	 eax, 1
  00509	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0050e	d1 e1		 shl	 ecx, 1
  00510	8d 4c 0d c0	 lea	 ecx, DWORD PTR _m$[ebp+ecx]
  00514	be 04 00 00 00	 mov	 esi, 4
  00519	c1 e6 00	 shl	 esi, 0
  0051c	8b 14 02	 mov	 edx, DWORD PTR [edx+eax]
  0051f	89 14 31	 mov	 DWORD PTR [ecx+esi], edx

; 2451 : 		m[2][2] = visual_3d_vp->attitude[2][2];

  00522	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00527	d1 e0		 shl	 eax, 1
  00529	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0052f	8d 54 01 0c	 lea	 edx, DWORD PTR [ecx+eax+12]
  00533	b8 04 00 00 00	 mov	 eax, 4
  00538	d1 e0		 shl	 eax, 1
  0053a	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0053f	d1 e1		 shl	 ecx, 1
  00541	8d 4c 0d c0	 lea	 ecx, DWORD PTR _m$[ebp+ecx]
  00545	be 04 00 00 00	 mov	 esi, 4
  0054a	d1 e6		 shl	 esi, 1
  0054c	8b 14 02	 mov	 edx, DWORD PTR [edx+eax]
  0054f	89 14 31	 mov	 DWORD PTR [ecx+esi], edx

; 2452 : 		m[0][3] = 0;

  00552	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00557	6b c8 00	 imul	 ecx, eax, 0
  0055a	8d 54 0d c0	 lea	 edx, DWORD PTR _m$[ebp+ecx]
  0055e	b8 04 00 00 00	 mov	 eax, 4
  00563	6b c8 03	 imul	 ecx, eax, 3
  00566	0f 57 c0	 xorps	 xmm0, xmm0
  00569	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 2453 : 		m[1][3] = 0;

  0056e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00573	c1 e0 00	 shl	 eax, 0
  00576	8d 4c 05 c0	 lea	 ecx, DWORD PTR _m$[ebp+eax]
  0057a	ba 04 00 00 00	 mov	 edx, 4
  0057f	6b c2 03	 imul	 eax, edx, 3
  00582	0f 57 c0	 xorps	 xmm0, xmm0
  00585	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 2454 : 		m[2][3] = 0;

  0058a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0058f	d1 e0		 shl	 eax, 1
  00591	8d 4c 05 c0	 lea	 ecx, DWORD PTR _m$[ebp+eax]
  00595	ba 04 00 00 00	 mov	 edx, 4
  0059a	6b c2 03	 imul	 eax, edx, 3
  0059d	0f 57 c0	 xorps	 xmm0, xmm0
  005a0	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 2455 : 
; 2456 : //		if ( use_zbuffer_view )
; 2457 : 		{
; 2458 : 
; 2459 : 			m[3][0] = 0;

  005a5	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  005aa	6b c8 03	 imul	 ecx, eax, 3
  005ad	8d 54 0d c0	 lea	 edx, DWORD PTR _m$[ebp+ecx]
  005b1	b8 04 00 00 00	 mov	 eax, 4
  005b6	6b c8 00	 imul	 ecx, eax, 0
  005b9	0f 57 c0	 xorps	 xmm0, xmm0
  005bc	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 2460 : 			m[3][1] = 0;

  005c1	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  005c6	6b c8 03	 imul	 ecx, eax, 3
  005c9	8d 54 0d c0	 lea	 edx, DWORD PTR _m$[ebp+ecx]
  005cd	b8 04 00 00 00	 mov	 eax, 4
  005d2	c1 e0 00	 shl	 eax, 0
  005d5	0f 57 c0	 xorps	 xmm0, xmm0
  005d8	f3 0f 11 04 02	 movss	 DWORD PTR [edx+eax], xmm0

; 2461 : 			m[3][2] = 0;

  005dd	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  005e2	6b c8 03	 imul	 ecx, eax, 3
  005e5	8d 54 0d c0	 lea	 edx, DWORD PTR _m$[ebp+ecx]
  005e9	b8 04 00 00 00	 mov	 eax, 4
  005ee	d1 e0		 shl	 eax, 1
  005f0	0f 57 c0	 xorps	 xmm0, xmm0
  005f3	f3 0f 11 04 02	 movss	 DWORD PTR [edx+eax], xmm0

; 2462 : 		}
; 2463 : /*		else
; 2464 : 		{
; 2465 : 	
; 2466 : 			m[3][0] = -rel.x;
; 2467 : 			m[3][1] = -rel.y;
; 2468 : 			m[3][2] = -rel.z;
; 2469 : 		}*/
; 2470 : 		m[3][3] = 1;

  005f8	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  005fd	6b c8 03	 imul	 ecx, eax, 3
  00600	8d 54 0d c0	 lea	 edx, DWORD PTR _m$[ebp+ecx]
  00604	b8 04 00 00 00	 mov	 eax, 4
  00609	6b c8 03	 imul	 ecx, eax, 3
  0060c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00614	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 2471 : 
; 2472 : 		memcpy ( &d3d_matrix, m, sizeof ( D3DMATRIX ) );

  00619	6a 40		 push	 64			; 00000040H
  0061b	8d 45 c0	 lea	 eax, DWORD PTR _m$[ebp]
  0061e	50		 push	 eax
  0061f	8d 4d 80	 lea	 ecx, DWORD PTR _d3d_matrix$[ebp]
  00622	51		 push	 ecx
  00623	e8 00 00 00 00	 call	 _memcpy
  00628	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2473 : 	
; 2474 : 		f3d_set_transform ( D3DTRANSFORMSTATE_VIEW, &d3d_matrix );

  0062b	8d 45 80	 lea	 eax, DWORD PTR _d3d_matrix$[ebp]
  0062e	50		 push	 eax
  0062f	6a 02		 push	 2
  00631	e8 00 00 00 00	 call	 ?f3d_set_transform@@YGXIPAU_D3DMATRIX@@@Z ; f3d_set_transform

; 2475 : 	}
; 2476 : 
; 2477 : 	//
; 2478 : 	// Set projection ( perspective ) matrix
; 2479 : 	//
; 2480 : 
; 2481 : 	{
; 2482 : 
; 2483 : 		float
; 2484 : 			near_plane,
; 2485 : 			far_plane,
; 2486 : 			view_width_angle,
; 2487 : 			view_height_angle;
; 2488 : 
; 2489 : 		near_plane = 1.0;

  00636	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0063e	f3 0f 11 85 00
	ff ff ff	 movss	 DWORD PTR _near_plane$5[ebp], xmm0

; 2490 : 		far_plane = 10000.0;

  00646	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c4000
  0064e	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR _far_plane$4[ebp], xmm0

; 2491 : 
; 2492 : 		view_width_angle = rad ( 59.99 );

  00656	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8604da
  0065e	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR _view_width_angle$3[ebp], xmm0

; 2493 : 		view_height_angle = rad ( 46.82 );

  00666	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f51319b
  0066e	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _view_height_angle$2[ebp], xmm0

; 2494 : 
; 2495 : 		if ( active_3d_environment )

  00676	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A, 0 ; active_3d_environment
  0067d	74 48		 je	 SHORT $LN10@set_up_tnl

; 2496 : 		{
; 2497 : 
; 2498 : 			near_plane = active_3d_environment->hither_distance;

  0067f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00684	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  00689	f3 0f 11 85 00
	ff ff ff	 movss	 DWORD PTR _near_plane$5[ebp], xmm0

; 2499 : 			far_plane = active_3d_environment->yonder_distance;

  00691	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00696	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  0069b	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR _far_plane$4[ebp], xmm0

; 2500 : 
; 2501 : 			view_width_angle = active_3d_environment->width_view_angle;

  006a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  006a8	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  006ad	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR _view_width_angle$3[ebp], xmm0

; 2502 : 			view_height_angle = active_3d_environment->height_view_angle;

  006b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  006ba	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  006bf	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _view_height_angle$2[ebp], xmm0
$LN10@set_up_tnl:

; 2503 : 		}
; 2504 : 
; 2505 : 		get_4d_projection_matrix ( m, near_plane, far_plane, view_width_angle, view_height_angle );

  006c7	51		 push	 ecx
  006c8	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _view_height_angle$2[ebp]
  006d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d5	51		 push	 ecx
  006d6	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR _view_width_angle$3[ebp]
  006de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006e3	51		 push	 ecx
  006e4	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR _far_plane$4[ebp]
  006ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f1	51		 push	 ecx
  006f2	f3 0f 10 85 00
	ff ff ff	 movss	 xmm0, DWORD PTR _near_plane$5[ebp]
  006fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ff	8d 45 c0	 lea	 eax, DWORD PTR _m$[ebp]
  00702	50		 push	 eax
  00703	e8 00 00 00 00	 call	 ?get_4d_projection_matrix@@YGXQAY03MMMMM@Z ; get_4d_projection_matrix

; 2506 : 	
; 2507 : 		memcpy ( &d3d_matrix, m, sizeof ( D3DMATRIX ) );

  00708	6a 40		 push	 64			; 00000040H
  0070a	8d 45 c0	 lea	 eax, DWORD PTR _m$[ebp]
  0070d	50		 push	 eax
  0070e	8d 4d 80	 lea	 ecx, DWORD PTR _d3d_matrix$[ebp]
  00711	51		 push	 ecx
  00712	e8 00 00 00 00	 call	 _memcpy
  00717	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2508 : 	
; 2509 : 		f3d_set_transform ( D3DTRANSFORMSTATE_PROJECTION, &d3d_matrix );

  0071a	8d 45 80	 lea	 eax, DWORD PTR _d3d_matrix$[ebp]
  0071d	50		 push	 eax
  0071e	6a 03		 push	 3
  00720	e8 00 00 00 00	 call	 ?f3d_set_transform@@YGXIPAU_D3DMATRIX@@@Z ; f3d_set_transform

; 2510 : 	}
; 2511 : 
; 2512 : 	//
; 2513 : 	// Set default material
; 2514 : 	//
; 2515 : 
; 2516 : 	set_d3d_material_default ();

  00725	e8 00 00 00 00	 call	 ?set_d3d_material_default@@YGXXZ ; set_d3d_material_default

; 2517 : 
; 2518 : 	//
; 2519 : 	// Setup the Z buffering properly
; 2520 : 	//
; 2521 : 
; 2522 : 	if ( active_3d_environment )

  0072a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A, 0 ; active_3d_environment
  00731	0f 84 a9 00 00
	00		 je	 $LN11@set_up_tnl

; 2523 : 	{
; 2524 : 
; 2525 : 		//
; 2526 : 		// Create & set the viewport for the device2 interface.
; 2527 : 		//
; 2528 : 
; 2529 : 		D3DVIEWPORT7
; 2530 : 			viewdata;
; 2531 : 
; 2532 : 		//
; 2533 : 		// Set up the viewport values for initial values
; 2534 : 		//
; 2535 : 
; 2536 : 		viewdata.dwX = active_3d_environment->clip_xmin;

  00737	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0073c	f3 0f 10 40 30	 movss	 xmm0, DWORD PTR [eax+48]
  00741	e8 00 00 00 00	 call	 __ftoui3
  00746	89 85 dc fe ff
	ff		 mov	 DWORD PTR _viewdata$1[ebp], eax

; 2537 : 		viewdata.dwY = active_3d_environment->clip_ymin;

  0074c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00751	f3 0f 10 40 34	 movss	 xmm0, DWORD PTR [eax+52]
  00756	e8 00 00 00 00	 call	 __ftoui3
  0075b	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _viewdata$1[ebp+4], eax

; 2538 : 
; 2539 : 		viewdata.dwWidth = active_3d_environment->clip_xmax - active_3d_environment->clip_xmin + 0.01;

  00761	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00766	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0076c	f3 0f 10 40 38	 movss	 xmm0, DWORD PTR [eax+56]
  00771	f3 0f 5c 41 30	 subss	 xmm0, DWORD PTR [ecx+48]
  00776	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0077a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  00782	e8 00 00 00 00	 call	 __dtoui3
  00787	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _viewdata$1[ebp+8], eax

; 2540 : 		viewdata.dwHeight = active_3d_environment->clip_ymax - active_3d_environment->clip_ymin + 0.01;

  0078d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00792	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00798	f3 0f 10 40 3c	 movss	 xmm0, DWORD PTR [eax+60]
  0079d	f3 0f 5c 41 34	 subss	 xmm0, DWORD PTR [ecx+52]
  007a2	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  007a6	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  007ae	e8 00 00 00 00	 call	 __dtoui3
  007b3	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _viewdata$1[ebp+12], eax

; 2541 : 		
; 2542 : 		viewdata.dvMinZ = 0.0;	//active_3d_environment->zbuffer_z_maximum_value;

  007b9	0f 57 c0	 xorps	 xmm0, xmm0
  007bc	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _viewdata$1[ebp+16], xmm0

; 2543 : 		viewdata.dvMaxZ = 1.0;	//active_3d_environment->zbuffer_z_minimum_value;

  007c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  007cc	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _viewdata$1[ebp+20], xmm0

; 2544 : 
; 2545 : 		f3d_set_viewport ( &viewdata );

  007d4	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _viewdata$1[ebp]
  007da	50		 push	 eax
  007db	e8 00 00 00 00	 call	 ?f3d_set_viewport@@YGHPAU_D3DVIEWPORT7@@@Z ; f3d_set_viewport
$LN11@set_up_tnl:

; 2546 : 	}
; 2547 : }

  007e0	5f		 pop	 edi
  007e1	5e		 pop	 esi
  007e2	5b		 pop	 ebx
  007e3	8b e5		 mov	 esp, ebp
  007e5	5d		 pop	 ebp
  007e6	c3		 ret	 0
?set_up_tnl_hardware@@YGXXZ ENDP			; set_up_tnl_hardware
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjbuf.c
;	COMDAT ?draw_transparent_scene_objects@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z
_TEXT	SEGMENT
tv219 = -72						; size = 4
tv148 = -68						; size = 4
tv66 = -68						; size = 4
_object_order$ = 8					; size = 4
?draw_transparent_scene_objects@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z PROC ; draw_transparent_scene_objects, COMDAT

; 2076 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@draw_trans:

; 2077 : 
; 2078 : 	while ( object_order )

  00009	83 7d 08 00	 cmp	 DWORD PTR _object_order$[ebp], 0
  0000d	0f 84 dc 02 00
	00		 je	 $LN3@draw_trans

; 2079 : 	{
; 2080 : 
; 2081 : 		switch ( object_order->type )

  00013	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  00016	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00019	89 4d bc	 mov	 DWORD PTR tv66[ebp], ecx
  0001c	8b 55 bc	 mov	 edx, DWORD PTR tv66[ebp]
  0001f	83 ea 04	 sub	 edx, 4
  00022	89 55 bc	 mov	 DWORD PTR tv66[ebp], edx
  00025	83 7d bc 12	 cmp	 DWORD PTR tv66[ebp], 18	; 00000012H
  00029	0f 87 a5 02 00
	00		 ja	 $LN22@draw_trans
  0002f	8b 45 bc	 mov	 eax, DWORD PTR tv66[ebp]
  00032	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN26@draw_trans[eax]
  00039	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN27@draw_trans[ecx*4]
$LN6@draw_trans:

; 2082 : 		{
; 2083 : 
; 2084 : 			case	OBJECT_3D_DRAW_TYPE_SPRITE:
; 2085 : 			{
; 2086 : 
; 2087 : 				set_d3d_int_state ( D3DRENDERSTATE_CLIPPING, FALSE );

  00040	6a 00		 push	 0
  00042	68 88 00 00 00	 push	 136			; 00000088H
  00047	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2088 : 				set_d3d_int_state ( D3DRENDERSTATE_LIGHTING, FALSE );

  0004c	6a 00		 push	 0
  0004e	68 89 00 00 00	 push	 137			; 00000089H
  00053	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2089 : 
; 2090 : 				draw_3d_sprite ( &object_order->sprite );

  00058	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  0005b	83 c0 10	 add	 eax, 16			; 00000010H
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ?draw_3d_sprite@@YGXPAUOBJECT_3D_SPRITE@@@Z ; draw_3d_sprite

; 2091 : 
; 2092 : 				break;

  00064	e9 78 02 00 00	 jmp	 $LN4@draw_trans
$LN7@draw_trans:

; 2093 : 			}
; 2094 : 
; 2095 : 			case	OBJECT_3D_DRAW_TYPE_EXPLOSION:
; 2096 : 			{
; 2097 : 
; 2098 : 				set_d3d_int_state ( D3DRENDERSTATE_CLIPPING, FALSE );

  00069	6a 00		 push	 0
  0006b	68 88 00 00 00	 push	 136			; 00000088H
  00070	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2099 : 				set_d3d_int_state ( D3DRENDERSTATE_LIGHTING, FALSE );

  00075	6a 00		 push	 0
  00077	68 89 00 00 00	 push	 137			; 00000089H
  0007c	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2100 : 
; 2101 : 				set_d3d_int_state ( D3DRENDERSTATE_CULLMODE, D3DCULL_NONE );

  00081	6a 01		 push	 1
  00083	6a 16		 push	 22			; 00000016H
  00085	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2102 : 
; 2103 : 				draw_3d_explosion ( &object_order->explosion );

  0008a	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  0008d	83 c0 10	 add	 eax, 16			; 00000010H
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ?draw_3d_explosion@@YGXPAUOBJECT_3D_EXPLOSION@@@Z ; draw_3d_explosion

; 2104 : 
; 2105 : 				break;

  00096	e9 46 02 00 00	 jmp	 $LN4@draw_trans
$LN8@draw_trans:

; 2106 : 			}
; 2107 : 
; 2108 : 			case OBJECT_3D_DRAW_TYPE_SMOKE_TRAIL:
; 2109 : 			{
; 2110 : 
; 2111 : 				set_d3d_int_state ( D3DRENDERSTATE_CLIPPING, FALSE );

  0009b	6a 00		 push	 0
  0009d	68 88 00 00 00	 push	 136			; 00000088H
  000a2	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2112 : 				set_d3d_int_state ( D3DRENDERSTATE_LIGHTING, FALSE );

  000a7	6a 00		 push	 0
  000a9	68 89 00 00 00	 push	 137			; 00000089H
  000ae	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2113 : 
; 2114 : 				set_d3d_int_state ( D3DRENDERSTATE_CULLMODE, D3DCULL_NONE );

  000b3	6a 01		 push	 1
  000b5	6a 16		 push	 22			; 00000016H
  000b7	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2115 : 
; 2116 : 				draw_3d_smoke_trail ( &object_order->smoke_trail );

  000bc	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  000bf	83 c0 10	 add	 eax, 16			; 00000010H
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 ?draw_3d_smoke_trail@@YGXPAUOBJECT_3D_SMOKE_TRAIL@@@Z ; draw_3d_smoke_trail

; 2117 : 
; 2118 : 				break;

  000c8	e9 14 02 00 00	 jmp	 $LN4@draw_trans
$LN9@draw_trans:

; 2119 : 			}
; 2120 : 
; 2121 : 			case OBJECT_3D_DRAW_TYPE_TRANSLUCENT_POLYGON_BUFFER:
; 2122 : 			{
; 2123 : 
; 2124 : 				set_d3d_int_state ( D3DRENDERSTATE_CLIPPING, FALSE );

  000cd	6a 00		 push	 0
  000cf	68 88 00 00 00	 push	 136			; 00000088H
  000d4	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2125 : 				set_d3d_int_state ( D3DRENDERSTATE_LIGHTING, FALSE );

  000d9	6a 00		 push	 0
  000db	68 89 00 00 00	 push	 137			; 00000089H
  000e0	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2126 : 
; 2127 : 				set_d3d_int_state ( D3DRENDERSTATE_CULLMODE, D3DCULL_CCW );

  000e5	6a 03		 push	 3
  000e7	6a 16		 push	 22			; 00000016H
  000e9	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2128 : 
; 2129 : 				draw_polygon_buffer ( object_order->translucent_buffer );

  000ee	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  000f1	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000f4	51		 push	 ecx
  000f5	e8 00 00 00 00	 call	 ?draw_polygon_buffer@@YGXPAUPOLYGON_BUFFER@@@Z ; draw_polygon_buffer

; 2130 : 
; 2131 : 				break;

  000fa	e9 e2 01 00 00	 jmp	 $LN4@draw_trans
$LN10@draw_trans:

; 2132 : 			}
; 2133 : 
; 2134 : 			case OBJECT_3D_DRAW_TYPE_OBJECT_SHADOW:
; 2135 : 			{
; 2136 : 
; 2137 : 				set_d3d_int_state ( D3DRENDERSTATE_CLIPPING, FALSE );

  000ff	6a 00		 push	 0
  00101	68 88 00 00 00	 push	 136			; 00000088H
  00106	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2138 : 				set_d3d_int_state ( D3DRENDERSTATE_LIGHTING, FALSE );

  0010b	6a 00		 push	 0
  0010d	68 89 00 00 00	 push	 137			; 00000089H
  00112	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2139 : 
; 2140 : 				set_d3d_int_state ( D3DRENDERSTATE_CULLMODE, D3DCULL_CCW );

  00117	6a 03		 push	 3
  00119	6a 16		 push	 22			; 00000016H
  0011b	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2141 : 
; 2142 : 				draw_3d_object_shadow ( object_order->object );

  00120	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  00123	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00126	51		 push	 ecx
  00127	e8 00 00 00 00	 call	 ?draw_3d_object_shadow@@YGXPAUOBJECT_3D_INSTANCE@@@Z ; draw_3d_object_shadow

; 2143 : 
; 2144 : 				break;

  0012c	e9 b0 01 00 00	 jmp	 $LN4@draw_trans
$LN11@draw_trans:

; 2145 : 			}
; 2146 : 
; 2147 : 			case	OBJECT_3D_DRAW_TYPE_TERRAIN_3D_TREE_OBJECT:
; 2148 : 			{
; 2149 : 
; 2150 : 				set_d3d_int_state ( D3DRENDERSTATE_CLIPPING, FALSE );

  00131	6a 00		 push	 0
  00133	68 88 00 00 00	 push	 136			; 00000088H
  00138	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2151 : 				set_d3d_int_state ( D3DRENDERSTATE_LIGHTING, FALSE );

  0013d	6a 00		 push	 0
  0013f	68 89 00 00 00	 push	 137			; 00000089H
  00144	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2152 : 
; 2153 : 				set_d3d_int_state ( D3DRENDERSTATE_CULLMODE, D3DCULL_CCW );

  00149	6a 03		 push	 3
  0014b	6a 16		 push	 22			; 00000016H
  0014d	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2154 : 
; 2155 : 			
; 2156 : 				if ( command_line_trees_fog == 1 || command_line_trees_fog == 2 && (1 / get_delta_time_average() >= (20 + 10 * !fog)) ) // trees fog thealx 130501

  00152	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?command_line_trees_fog@@3HA, 1 ; command_line_trees_fog
  00159	74 47		 je	 SHORT $LN14@draw_trans
  0015b	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?command_line_trees_fog@@3HA, 2 ; command_line_trees_fog
  00162	75 6d		 jne	 SHORT $LN12@draw_trans
  00164	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?fog@@3HA, 0	; fog
  0016b	75 09		 jne	 SHORT $LN24@draw_trans
  0016d	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv148[ebp], 1
  00174	eb 07		 jmp	 SHORT $LN25@draw_trans
$LN24@draw_trans:
  00176	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv148[ebp], 0
$LN25@draw_trans:
  0017d	e8 00 00 00 00	 call	 ?get_delta_time_average@@YGMXZ ; get_delta_time_average
  00182	d9 5d b8	 fstp	 DWORD PTR tv219[ebp]
  00185	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0018d	f3 0f 5e 45 b8	 divss	 xmm0, DWORD PTR tv219[ebp]
  00192	6b 45 bc 0a	 imul	 eax, DWORD PTR tv148[ebp], 10
  00196	83 c0 14	 add	 eax, 20			; 00000014H
  00199	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  0019d	0f 2f c1	 comiss	 xmm0, xmm1
  001a0	72 2f		 jb	 SHORT $LN12@draw_trans
$LN14@draw_trans:

; 2157 : 				{
; 2158 : 					fog = TRUE;

  001a2	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?fog@@3HA, 1	; fog

; 2159 : 					set_d3d_alpha_fog_zbuffer ( TRUE, TRUE, TRUE, FALSE );

  001ac	6a 00		 push	 0
  001ae	6a 01		 push	 1
  001b0	6a 01		 push	 1
  001b2	6a 01		 push	 1
  001b4	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer

; 2160 : 					draw_3d_terrain_tree_object ( object_order ); 

  001b9	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  001bc	50		 push	 eax
  001bd	e8 00 00 00 00	 call	 ?draw_3d_terrain_tree_object@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; draw_3d_terrain_tree_object

; 2161 : 					set_d3d_alpha_fog_zbuffer ( TRUE, FALSE, TRUE, FALSE );

  001c2	6a 00		 push	 0
  001c4	6a 01		 push	 1
  001c6	6a 00		 push	 0
  001c8	6a 01		 push	 1
  001ca	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer

; 2162 : 				}
; 2163 : 				else

  001cf	eb 13		 jmp	 SHORT $LN13@draw_trans
$LN12@draw_trans:

; 2164 : 				{
; 2165 : 					draw_3d_terrain_tree_object ( object_order ); 

  001d1	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  001d4	50		 push	 eax
  001d5	e8 00 00 00 00	 call	 ?draw_3d_terrain_tree_object@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; draw_3d_terrain_tree_object

; 2166 : 					fog = FALSE;

  001da	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fog@@3HA, 0	; fog
$LN13@draw_trans:

; 2167 : 				}
; 2168 : 
; 2169 : 				break;

  001e4	e9 f8 00 00 00	 jmp	 $LN4@draw_trans
$LN15@draw_trans:

; 2170 : 			}
; 2171 : 
; 2172 : 			// Casm 20MAY12 Cloud puffs
; 2173 : 			case	OBJECT_3D_DRAW_TYPE_TERRAIN_3D_CLOUD_PUFF_OBJECT:
; 2174 : 			{
; 2175 : 
; 2176 : 				set_d3d_int_state ( D3DRENDERSTATE_CLIPPING, FALSE );

  001e9	6a 00		 push	 0
  001eb	68 88 00 00 00	 push	 136			; 00000088H
  001f0	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2177 : 				set_d3d_int_state ( D3DRENDERSTATE_LIGHTING, FALSE );

  001f5	6a 00		 push	 0
  001f7	68 89 00 00 00	 push	 137			; 00000089H
  001fc	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2178 : 
; 2179 : 				set_d3d_int_state ( D3DRENDERSTATE_CULLMODE, D3DCULL_CCW );

  00201	6a 03		 push	 3
  00203	6a 16		 push	 22			; 00000016H
  00205	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2180 : 
; 2181 : 				draw_3d_terrain_cloud_puff_object ( object_order );

  0020a	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  0020d	50		 push	 eax
  0020e	e8 00 00 00 00	 call	 ?draw_3d_terrain_cloud_puff_object@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; draw_3d_terrain_cloud_puff_object

; 2182 : 
; 2183 : 				break;

  00213	e9 c9 00 00 00	 jmp	 $LN4@draw_trans
$LN16@draw_trans:

; 2184 : 			}
; 2185 : 
; 2186 : 			case OBJECT_3D_DRAW_TYPE_TRANSLUCENT_OBJECT:
; 2187 : 			{
; 2188 : 
; 2189 : 				set_d3d_int_state ( D3DRENDERSTATE_CULLMODE, D3DCULL_CCW );

  00218	6a 03		 push	 3
  0021a	6a 16		 push	 22			; 00000016H
  0021c	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2190 : 
; 2191 : 				if ( d3d_using_hardware_tnl )

  00221	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_using_hardware_tnl@@3HA, 0 ; d3d_using_hardware_tnl
  00228	74 26		 je	 SHORT $LN17@draw_trans

; 2192 : 				{
; 2193 : 
; 2194 : 					set_d3d_int_state ( D3DRENDERSTATE_CLIPPING, TRUE );

  0022a	6a 01		 push	 1
  0022c	68 88 00 00 00	 push	 136			; 00000088H
  00231	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2195 : 					set_d3d_int_state ( D3DRENDERSTATE_LIGHTING, TRUE );

  00236	6a 01		 push	 1
  00238	68 89 00 00 00	 push	 137			; 00000089H
  0023d	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2196 : 
; 2197 : 					draw_3d_hardware_translucent_object ( object_order->translucent_surfaces );

  00242	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  00245	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00248	51		 push	 ecx
  00249	e8 00 00 00 00	 call	 ?draw_3d_hardware_translucent_object@@YGXPAUTRANSLUCENT_OBJECT_SURFACE@@@Z ; draw_3d_hardware_translucent_object

; 2198 : 				}
; 2199 : 				else

  0024e	eb 24		 jmp	 SHORT $LN18@draw_trans
$LN17@draw_trans:

; 2200 : 				{
; 2201 : 
; 2202 : 					set_d3d_int_state ( D3DRENDERSTATE_CLIPPING, FALSE );

  00250	6a 00		 push	 0
  00252	68 88 00 00 00	 push	 136			; 00000088H
  00257	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2203 : 					set_d3d_int_state ( D3DRENDERSTATE_LIGHTING, FALSE );

  0025c	6a 00		 push	 0
  0025e	68 89 00 00 00	 push	 137			; 00000089H
  00263	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2204 : 
; 2205 : 						draw_3d_translucent_object ( object_order->translucent_surfaces );

  00268	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  0026b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0026e	51		 push	 ecx
  0026f	e8 00 00 00 00	 call	 ?draw_3d_translucent_object@@YGXPAUTRANSLUCENT_OBJECT_SURFACE@@@Z ; draw_3d_translucent_object
$LN18@draw_trans:

; 2206 : 				}
; 2207 : 
; 2208 : 				break;

  00274	eb 6b		 jmp	 SHORT $LN4@draw_trans
$LN19@draw_trans:

; 2209 : 			}
; 2210 : 
; 2211 : 			case OBJECT_3D_DRAW_TYPE_ZBUFFERED_TRANSLUCENT_OBJECT:
; 2212 : 			{
; 2213 : 
; 2214 : 				set_d3d_int_state ( D3DRENDERSTATE_CULLMODE, D3DCULL_CCW );

  00276	6a 03		 push	 3
  00278	6a 16		 push	 22			; 00000016H
  0027a	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2215 : 
; 2216 : 				if ( d3d_using_hardware_tnl )

  0027f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_using_hardware_tnl@@3HA, 0 ; d3d_using_hardware_tnl
  00286	74 26		 je	 SHORT $LN20@draw_trans

; 2217 : 				{
; 2218 : 
; 2219 : 					set_d3d_int_state ( D3DRENDERSTATE_CLIPPING, TRUE );

  00288	6a 01		 push	 1
  0028a	68 88 00 00 00	 push	 136			; 00000088H
  0028f	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2220 : 					set_d3d_int_state ( D3DRENDERSTATE_LIGHTING, TRUE );

  00294	6a 01		 push	 1
  00296	68 89 00 00 00	 push	 137			; 00000089H
  0029b	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2221 : 
; 2222 : 					draw_3d_hardware_zbuffered_translucent_object ( object_order->translucent_surfaces );

  002a0	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  002a3	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  002a6	51		 push	 ecx
  002a7	e8 00 00 00 00	 call	 ?draw_3d_hardware_zbuffered_translucent_object@@YGXPAUTRANSLUCENT_OBJECT_SURFACE@@@Z ; draw_3d_hardware_zbuffered_translucent_object

; 2223 : 				}
; 2224 : 				else

  002ac	eb 24		 jmp	 SHORT $LN21@draw_trans
$LN20@draw_trans:

; 2225 : 				{
; 2226 : 
; 2227 : 					set_d3d_int_state ( D3DRENDERSTATE_CLIPPING, FALSE );

  002ae	6a 00		 push	 0
  002b0	68 88 00 00 00	 push	 136			; 00000088H
  002b5	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2228 : 					set_d3d_int_state ( D3DRENDERSTATE_LIGHTING, FALSE );

  002ba	6a 00		 push	 0
  002bc	68 89 00 00 00	 push	 137			; 00000089H
  002c1	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2229 : 
; 2230 : 					draw_3d_translucent_object ( object_order->translucent_surfaces );

  002c6	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  002c9	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  002cc	51		 push	 ecx
  002cd	e8 00 00 00 00	 call	 ?draw_3d_translucent_object@@YGXPAUTRANSLUCENT_OBJECT_SURFACE@@@Z ; draw_3d_translucent_object
$LN21@draw_trans:

; 2231 : 				}
; 2232 : 
; 2233 : 				break;

  002d2	eb 0d		 jmp	 SHORT $LN4@draw_trans
$LN22@draw_trans:

; 2234 : 			}
; 2235 : 
; 2236 : 			default:
; 2237 : 			{
; 2238 : 
; 2239 : 				debug_fatal ( "Unknown object type in draw_3d_objects" );

  002d4	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@FFJJCAGN@Unknown?5object?5type?5in?5draw_3d_@
  002d9	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  002de	83 c4 04	 add	 esp, 4
$LN4@draw_trans:

; 2240 : 
; 2241 : 				break;
; 2242 : 			}
; 2243 : 		}
; 2244 : 
; 2245 : 		object_order = object_order->succ;

  002e1	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  002e4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002e7	89 4d 08	 mov	 DWORD PTR _object_order$[ebp], ecx

; 2246 : 	}

  002ea	e9 1a fd ff ff	 jmp	 $LN2@draw_trans
$LN3@draw_trans:

; 2247 : }

  002ef	5f		 pop	 edi
  002f0	5e		 pop	 esi
  002f1	5b		 pop	 ebx
  002f2	8b e5		 mov	 esp, ebp
  002f4	5d		 pop	 ebp
  002f5	c2 04 00	 ret	 4
$LN27@draw_trans:
  002f8	00 00 00 00	 DD	 $LN10@draw_trans
  002fc	00 00 00 00	 DD	 $LN9@draw_trans
  00300	00 00 00 00	 DD	 $LN11@draw_trans
  00304	00 00 00 00	 DD	 $LN15@draw_trans
  00308	00 00 00 00	 DD	 $LN6@draw_trans
  0030c	00 00 00 00	 DD	 $LN8@draw_trans
  00310	00 00 00 00	 DD	 $LN7@draw_trans
  00314	00 00 00 00	 DD	 $LN16@draw_trans
  00318	00 00 00 00	 DD	 $LN19@draw_trans
  0031c	00 00 00 00	 DD	 $LN22@draw_trans
$LN26@draw_trans:
  00320	00		 DB	 0
  00321	01		 DB	 1
  00322	09		 DB	 9
  00323	09		 DB	 9
  00324	09		 DB	 9
  00325	09		 DB	 9
  00326	09		 DB	 9
  00327	09		 DB	 9
  00328	09		 DB	 9
  00329	02		 DB	 2
  0032a	03		 DB	 3
  0032b	09		 DB	 9
  0032c	04		 DB	 4
  0032d	05		 DB	 5
  0032e	09		 DB	 9
  0032f	06		 DB	 6
  00330	09		 DB	 9
  00331	07		 DB	 7
  00332	08		 DB	 8
?draw_transparent_scene_objects@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ENDP ; draw_transparent_scene_objects
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjbuf.c
;	COMDAT ?draw_normal_scene_objects@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z
_TEXT	SEGMENT
tv69 = -68						; size = 4
_object_order$ = 8					; size = 4
?draw_normal_scene_objects@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z PROC ; draw_normal_scene_objects, COMDAT

; 1830 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1831 : 
; 1832 : 	set_d3d_int_state ( D3DRENDERSTATE_CULLMODE, D3DCULL_CCW );

  00009	6a 03		 push	 3
  0000b	6a 16		 push	 22			; 00000016H
  0000d	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 1833 : 
; 1834 : 	if ( d3d_using_hardware_tnl )

  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_using_hardware_tnl@@3HA, 0 ; d3d_using_hardware_tnl
  00019	74 05		 je	 SHORT $LN2@draw_norma

; 1835 : 	{
; 1836 : 
; 1837 : 		set_up_tnl_hardware ();

  0001b	e8 00 00 00 00	 call	 ?set_up_tnl_hardware@@YGXXZ ; set_up_tnl_hardware
$LN2@draw_norma:

; 1838 : 	}
; 1839 : 
; 1840 : 	while ( object_order )

  00020	83 7d 08 00	 cmp	 DWORD PTR _object_order$[ebp], 0
  00024	0f 84 0d 03 00
	00		 je	 $LN3@draw_norma

; 1841 : 	{
; 1842 : 
; 1843 : 		switch ( object_order->type )

  0002a	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  0002d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00030	89 4d bc	 mov	 DWORD PTR tv69[ebp], ecx
  00033	8b 55 bc	 mov	 edx, DWORD PTR tv69[ebp]
  00036	83 ea 01	 sub	 edx, 1
  00039	89 55 bc	 mov	 DWORD PTR tv69[ebp], edx
  0003c	83 7d bc 11	 cmp	 DWORD PTR tv69[ebp], 17	; 00000011H
  00040	0f 87 d6 02 00
	00		 ja	 $LN32@draw_norma
  00046	8b 45 bc	 mov	 eax, DWORD PTR tv69[ebp]
  00049	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN34@draw_norma[eax*4]
$LN7@draw_norma:

; 1844 : 		{
; 1845 : 
; 1846 : 			case	OBJECT_3D_DRAW_TYPE_OBJECT:
; 1847 : 			{
; 1848 : 
; 1849 : 				if ( d3d_using_hardware_tnl )

  00050	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_using_hardware_tnl@@3HA, 0 ; d3d_using_hardware_tnl
  00057	74 28		 je	 SHORT $LN8@draw_norma

; 1850 : 				{
; 1851 : 	
; 1852 : 					set_d3d_int_state ( D3DRENDERSTATE_CLIPPING, TRUE );

  00059	6a 01		 push	 1
  0005b	68 88 00 00 00	 push	 136			; 00000088H
  00060	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 1853 : 					set_d3d_int_state ( D3DRENDERSTATE_LIGHTING, TRUE );

  00065	6a 01		 push	 1
  00067	68 89 00 00 00	 push	 137			; 00000089H
  0006c	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 1854 : 	
; 1855 : 						draw_hardware_3d_object ( object_order->object, FALSE );

  00071	6a 00		 push	 0
  00073	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  00076	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ?draw_hardware_3d_object@@YGXPAUOBJECT_3D_INSTANCE@@H@Z ; draw_hardware_3d_object

; 1856 : 				}
; 1857 : 				else

  0007f	eb 28		 jmp	 SHORT $LN9@draw_norma
$LN8@draw_norma:

; 1858 : 				{
; 1859 : 	
; 1860 : 					set_d3d_int_state ( D3DRENDERSTATE_CLIPPING, FALSE );

  00081	6a 00		 push	 0
  00083	68 88 00 00 00	 push	 136			; 00000088H
  00088	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 1861 : 					set_d3d_int_state ( D3DRENDERSTATE_LIGHTING, FALSE );

  0008d	6a 00		 push	 0
  0008f	68 89 00 00 00	 push	 137			; 00000089H
  00094	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 1862 : 
; 1863 : 						draw_wbuffered_3d_object ( object_order->object, FALSE, FALSE );

  00099	6a 00		 push	 0
  0009b	6a 00		 push	 0
  0009d	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  000a0	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000a3	51		 push	 ecx
  000a4	e8 00 00 00 00	 call	 ?draw_wbuffered_3d_object@@YGXPAUOBJECT_3D_INSTANCE@@HH@Z ; draw_wbuffered_3d_object
$LN9@draw_norma:

; 1864 : 				}
; 1865 : 
; 1866 : #if DRAW_OBJECT_BOUNDING_BOX
; 1867 : 
; 1868 : 				draw_3d_object_bounding_box ( object_order->object );
; 1869 : 
; 1870 : #endif
; 1871 : 
; 1872 : 				break;

  000a9	e9 7b 02 00 00	 jmp	 $LN4@draw_norma
$LN10@draw_norma:

; 1873 : 			}
; 1874 : 
; 1875 : 			case	OBJECT_3D_DRAW_TYPE_ZBUFFERED_OBJECT:
; 1876 : 			{
; 1877 : 
; 1878 : 				if ( d3d_using_hardware_tnl )

  000ae	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_using_hardware_tnl@@3HA, 0 ; d3d_using_hardware_tnl
  000b5	74 2a		 je	 SHORT $LN11@draw_norma

; 1879 : 				{
; 1880 : 	
; 1881 : 					set_d3d_int_state ( D3DRENDERSTATE_CLIPPING, TRUE );

  000b7	6a 01		 push	 1
  000b9	68 88 00 00 00	 push	 136			; 00000088H
  000be	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 1882 : 					set_d3d_int_state ( D3DRENDERSTATE_LIGHTING, TRUE );

  000c3	6a 01		 push	 1
  000c5	68 89 00 00 00	 push	 137			; 00000089H
  000ca	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 1883 : 	
; 1884 : 					draw_hardware_zbuffered_3d_object ( object_order->object, FALSE, FALSE );

  000cf	6a 00		 push	 0
  000d1	6a 00		 push	 0
  000d3	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  000d6	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ?draw_hardware_zbuffered_3d_object@@YGXPAUOBJECT_3D_INSTANCE@@HH@Z ; draw_hardware_zbuffered_3d_object

; 1885 : 				}
; 1886 : 				else

  000df	eb 28		 jmp	 SHORT $LN12@draw_norma
$LN11@draw_norma:

; 1887 : 				{
; 1888 : 	
; 1889 : 					set_d3d_int_state ( D3DRENDERSTATE_CLIPPING, FALSE );

  000e1	6a 00		 push	 0
  000e3	68 88 00 00 00	 push	 136			; 00000088H
  000e8	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 1890 : 					set_d3d_int_state ( D3DRENDERSTATE_LIGHTING, FALSE );

  000ed	6a 00		 push	 0
  000ef	68 89 00 00 00	 push	 137			; 00000089H
  000f4	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 1891 : 	
; 1892 : 					draw_zbuffered_3d_object ( object_order->object, FALSE, FALSE );

  000f9	6a 00		 push	 0
  000fb	6a 00		 push	 0
  000fd	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  00100	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00103	51		 push	 ecx
  00104	e8 00 00 00 00	 call	 ?draw_zbuffered_3d_object@@YGXPAUOBJECT_3D_INSTANCE@@HH@Z ; draw_zbuffered_3d_object
$LN12@draw_norma:

; 1893 : 				}
; 1894 : 
; 1895 : 				break;

  00109	e9 1b 02 00 00	 jmp	 $LN4@draw_norma
$LN13@draw_norma:

; 1896 : 			}
; 1897 : 
; 1898 : 			case	OBJECT_3D_DRAW_TYPE_OBJECT_COLOURED:
; 1899 : 			{
; 1900 : 
; 1901 : 				set_d3d_int_state ( D3DRENDERSTATE_CLIPPING, FALSE );

  0010e	6a 00		 push	 0
  00110	68 88 00 00 00	 push	 136			; 00000088H
  00115	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 1902 : 				set_d3d_int_state ( D3DRENDERSTATE_LIGHTING, FALSE );

  0011a	6a 00		 push	 0
  0011c	68 89 00 00 00	 push	 137			; 00000089H
  00121	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 1903 : 
; 1904 : 				if ( shadows_enabled )

  00126	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?shadows_enabled@@3HA, 0 ; shadows_enabled
  0012d	74 1d		 je	 SHORT $LN14@draw_norma

; 1905 : 				{
; 1906 : 
; 1907 : 					if ( object_order->object->object_has_shadow )

  0012f	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  00132	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00135	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00138	c1 ea 02	 shr	 edx, 2
  0013b	83 e2 01	 and	 edx, 1
  0013e	74 0c		 je	 SHORT $LN14@draw_norma

; 1908 : 					{
; 1909 : 	
; 1910 : 						draw_3d_object_shadow ( object_order->object );

  00140	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  00143	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00146	51		 push	 ecx
  00147	e8 00 00 00 00	 call	 ?draw_3d_object_shadow@@YGXPAUOBJECT_3D_INSTANCE@@@Z ; draw_3d_object_shadow
$LN14@draw_norma:

; 1911 : 					}
; 1912 : 				}
; 1913 : 
; 1914 : 				//
; 1915 : 				// Recolour the lights
; 1916 : 				//
; 1917 : 
; 1918 : 				copy_and_recolour_current_3d_lights ( object_order->colour );

  0014c	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  0014f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00152	51		 push	 ecx
  00153	e8 00 00 00 00	 call	 ?copy_and_recolour_current_3d_lights@@YGXUREAL_COLOUR@@@Z ; copy_and_recolour_current_3d_lights

; 1919 : 
; 1920 : 				draw_wbuffered_3d_object ( object_order->object, FALSE, TRUE );

  00158	6a 01		 push	 1
  0015a	6a 00		 push	 0
  0015c	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  0015f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00162	51		 push	 ecx
  00163	e8 00 00 00 00	 call	 ?draw_wbuffered_3d_object@@YGXPAUOBJECT_3D_INSTANCE@@HH@Z ; draw_wbuffered_3d_object

; 1921 : 
; 1922 : 				restore_uncoloured_current_3d_lights ();

  00168	e8 00 00 00 00	 call	 ?restore_uncoloured_current_3d_lights@@YGXXZ ; restore_uncoloured_current_3d_lights

; 1923 : 
; 1924 : 				break;

  0016d	e9 b7 01 00 00	 jmp	 $LN4@draw_norma
$LN16@draw_norma:

; 1925 : 			}
; 1926 : 
; 1927 : 			case	OBJECT_3D_DRAW_TYPE_TERRAIN_3D_OBJECT:
; 1928 : 			{
; 1929 : 
; 1930 : 				if ( d3d_using_hardware_tnl )

  00172	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_using_hardware_tnl@@3HA, 0 ; d3d_using_hardware_tnl
  00179	74 28		 je	 SHORT $LN17@draw_norma

; 1931 : 				{
; 1932 : 	
; 1933 : 					set_d3d_int_state ( D3DRENDERSTATE_CLIPPING, TRUE );

  0017b	6a 01		 push	 1
  0017d	68 88 00 00 00	 push	 136			; 00000088H
  00182	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 1934 : 					set_d3d_int_state ( D3DRENDERSTATE_LIGHTING, TRUE );

  00187	6a 01		 push	 1
  00189	68 89 00 00 00	 push	 137			; 00000089H
  0018e	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 1935 : 	
; 1936 : 					draw_hardware_3d_object ( object_order->object, FALSE );

  00193	6a 00		 push	 0
  00195	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  00198	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0019b	51		 push	 ecx
  0019c	e8 00 00 00 00	 call	 ?draw_hardware_3d_object@@YGXPAUOBJECT_3D_INSTANCE@@H@Z ; draw_hardware_3d_object

; 1937 : 				}
; 1938 : 				else

  001a1	eb 28		 jmp	 SHORT $LN18@draw_norma
$LN17@draw_norma:

; 1939 : 				{
; 1940 : 	
; 1941 : 					set_d3d_int_state ( D3DRENDERSTATE_CLIPPING, FALSE );

  001a3	6a 00		 push	 0
  001a5	68 88 00 00 00	 push	 136			; 00000088H
  001aa	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 1942 : 					set_d3d_int_state ( D3DRENDERSTATE_LIGHTING, FALSE );

  001af	6a 00		 push	 0
  001b1	68 89 00 00 00	 push	 137			; 00000089H
  001b6	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 1943 : 	
; 1944 : 					draw_wbuffered_3d_object ( object_order->object, FALSE, TRUE );

  001bb	6a 01		 push	 1
  001bd	6a 00		 push	 0
  001bf	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  001c2	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  001c5	51		 push	 ecx
  001c6	e8 00 00 00 00	 call	 ?draw_wbuffered_3d_object@@YGXPAUOBJECT_3D_INSTANCE@@HH@Z ; draw_wbuffered_3d_object
$LN18@draw_norma:

; 1945 : 				}
; 1946 : 
; 1947 : 				break;

  001cb	e9 59 01 00 00	 jmp	 $LN4@draw_norma
$LN19@draw_norma:

; 1948 : 			}
; 1949 : 
; 1950 : 			case OBJECT_3D_DRAW_TYPE_POLYLINE:
; 1951 : 			{
; 1952 : 
; 1953 : 				set_d3d_int_state ( D3DRENDERSTATE_CLIPPING, FALSE );

  001d0	6a 00		 push	 0
  001d2	68 88 00 00 00	 push	 136			; 00000088H
  001d7	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 1954 : 				set_d3d_int_state ( D3DRENDERSTATE_LIGHTING, FALSE );

  001dc	6a 00		 push	 0
  001de	68 89 00 00 00	 push	 137			; 00000089H
  001e3	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 1955 : 
; 1956 : 				draw_3d_polyline ( &object_order->polyline );

  001e8	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  001eb	83 c0 10	 add	 eax, 16			; 00000010H
  001ee	50		 push	 eax
  001ef	e8 00 00 00 00	 call	 ?draw_3d_polyline@@YGXPAUOBJECT_3D_POLYLINE@@@Z ; draw_3d_polyline

; 1957 : 
; 1958 : 				break;

  001f4	e9 30 01 00 00	 jmp	 $LN4@draw_norma
$LN20@draw_norma:

; 1959 : 			}
; 1960 : 
; 1961 : 
; 1962 : 			case	OBJECT_3D_DRAW_TYPE_TERRAIN_3D_CLIPPED_SECTOR:
; 1963 : 			{
; 1964 : 
; 1965 : 				set_d3d_int_state ( D3DRENDERSTATE_CLIPPING, FALSE );

  001f9	6a 00		 push	 0
  001fb	68 88 00 00 00	 push	 136			; 00000088H
  00200	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 1966 : 				set_d3d_int_state ( D3DRENDERSTATE_LIGHTING, FALSE );

  00205	6a 00		 push	 0
  00207	68 89 00 00 00	 push	 137			; 00000089H
  0020c	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 1967 : 
; 1968 : 				if ( active_3d_environment->render_filter != RENDER_CLEAR )

  00211	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00216	83 b8 d0 02 00
	00 01		 cmp	 DWORD PTR [eax+720], 1
  0021d	74 0b		 je	 SHORT $LN21@draw_norma

; 1969 : 				{
; 1970 : 	
; 1971 : 					draw_3d_terrain_3d_clipped_bw_sector ( object_order );

  0021f	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  00222	50		 push	 eax
  00223	e8 00 00 00 00	 call	 ?draw_3d_terrain_3d_clipped_bw_sector@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; draw_3d_terrain_3d_clipped_bw_sector

; 1972 : 				}
; 1973 : 				else

  00228	eb 09		 jmp	 SHORT $LN22@draw_norma
$LN21@draw_norma:

; 1974 : 				{
; 1975 : 	
; 1976 : 					draw_3d_terrain_3d_clipped_sector ( object_order );

  0022a	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  0022d	50		 push	 eax
  0022e	e8 00 00 00 00	 call	 ?draw_3d_terrain_3d_clipped_sector@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; draw_3d_terrain_3d_clipped_sector
$LN22@draw_norma:

; 1977 : 				}
; 1978 : 
; 1979 : 				break;

  00233	e9 f1 00 00 00	 jmp	 $LN4@draw_norma
$LN23@draw_norma:

; 1980 : 			}
; 1981 : 
; 1982 : 			case	OBJECT_3D_DRAW_TYPE_TERRAIN_2D_CLIPPED_SECTOR:
; 1983 : 			{
; 1984 : 
; 1985 : 				set_d3d_int_state ( D3DRENDERSTATE_CLIPPING, FALSE );

  00238	6a 00		 push	 0
  0023a	68 88 00 00 00	 push	 136			; 00000088H
  0023f	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 1986 : 				set_d3d_int_state ( D3DRENDERSTATE_LIGHTING, FALSE );

  00244	6a 00		 push	 0
  00246	68 89 00 00 00	 push	 137			; 00000089H
  0024b	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 1987 : 
; 1988 : 				if ( active_3d_environment->render_filter != RENDER_CLEAR )

  00250	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00255	83 b8 d0 02 00
	00 01		 cmp	 DWORD PTR [eax+720], 1
  0025c	74 0b		 je	 SHORT $LN24@draw_norma

; 1989 : 				{
; 1990 : 
; 1991 : 					draw_3d_terrain_2d_clipped_bw_sector ( object_order );

  0025e	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  00261	50		 push	 eax
  00262	e8 00 00 00 00	 call	 ?draw_3d_terrain_2d_clipped_bw_sector@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; draw_3d_terrain_2d_clipped_bw_sector

; 1992 : 				}
; 1993 : 				else

  00267	eb 09		 jmp	 SHORT $LN25@draw_norma
$LN24@draw_norma:

; 1994 : 				{
; 1995 : 
; 1996 : 					draw_3d_terrain_2d_clipped_sector ( object_order );

  00269	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  0026c	50		 push	 eax
  0026d	e8 00 00 00 00	 call	 ?draw_3d_terrain_2d_clipped_sector@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; draw_3d_terrain_2d_clipped_sector
$LN25@draw_norma:

; 1997 : 				}
; 1998 : 
; 1999 : 				break;

  00272	e9 b2 00 00 00	 jmp	 $LN4@draw_norma
$LN26@draw_norma:

; 2000 : 			}
; 2001 : 
; 2002 : 			case	OBJECT_3D_DRAW_TYPE_TERRAIN_UNCLIPPED_SECTOR:
; 2003 : 			{
; 2004 : 
; 2005 : 				set_d3d_int_state ( D3DRENDERSTATE_CLIPPING, FALSE );

  00277	6a 00		 push	 0
  00279	68 88 00 00 00	 push	 136			; 00000088H
  0027e	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2006 : 				set_d3d_int_state ( D3DRENDERSTATE_LIGHTING, FALSE );

  00283	6a 00		 push	 0
  00285	68 89 00 00 00	 push	 137			; 00000089H
  0028a	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2007 : 
; 2008 : 				if ( active_3d_environment->render_filter != RENDER_CLEAR )

  0028f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00294	83 b8 d0 02 00
	00 01		 cmp	 DWORD PTR [eax+720], 1
  0029b	74 0b		 je	 SHORT $LN27@draw_norma

; 2009 : 				{
; 2010 : 
; 2011 : 					draw_3d_terrain_unclipped_bw_sector ( object_order );

  0029d	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  002a0	50		 push	 eax
  002a1	e8 00 00 00 00	 call	 ?draw_3d_terrain_unclipped_bw_sector@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; draw_3d_terrain_unclipped_bw_sector

; 2012 : 				}
; 2013 : 				else

  002a6	eb 09		 jmp	 SHORT $LN28@draw_norma
$LN27@draw_norma:

; 2014 : 				{
; 2015 : 
; 2016 : 					draw_3d_terrain_unclipped_sector ( object_order );

  002a8	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  002ab	50		 push	 eax
  002ac	e8 00 00 00 00	 call	 ?draw_3d_terrain_unclipped_sector@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; draw_3d_terrain_unclipped_sector
$LN28@draw_norma:

; 2017 : 				}
; 2018 : 
; 2019 : 				break;

  002b1	eb 76		 jmp	 SHORT $LN4@draw_norma
$LN29@draw_norma:

; 2020 : 			}
; 2021 : 
; 2022 : 			case	OBJECT_3D_DRAW_TYPE_TERRAIN_3D_TREE_OBJECT:
; 2023 : 			{
; 2024 : 
; 2025 : 				set_d3d_int_state ( D3DRENDERSTATE_CLIPPING, FALSE );

  002b3	6a 00		 push	 0
  002b5	68 88 00 00 00	 push	 136			; 00000088H
  002ba	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2026 : 				set_d3d_int_state ( D3DRENDERSTATE_LIGHTING, FALSE );

  002bf	6a 00		 push	 0
  002c1	68 89 00 00 00	 push	 137			; 00000089H
  002c6	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2027 : 
; 2028 : 				draw_3d_terrain_tree_object ( object_order );

  002cb	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  002ce	50		 push	 eax
  002cf	e8 00 00 00 00	 call	 ?draw_3d_terrain_tree_object@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; draw_3d_terrain_tree_object

; 2029 : 
; 2030 : 				break;

  002d4	eb 53		 jmp	 SHORT $LN4@draw_norma
$LN30@draw_norma:

; 2031 : 			}
; 2032 : 
; 2033 : 			// Casm 20MAY12 Cloud puffs
; 2034 : 			case	OBJECT_3D_DRAW_TYPE_TERRAIN_3D_CLOUD_PUFF_OBJECT:
; 2035 : 			{
; 2036 : 
; 2037 : 				set_d3d_int_state ( D3DRENDERSTATE_CLIPPING, FALSE );

  002d6	6a 00		 push	 0
  002d8	68 88 00 00 00	 push	 136			; 00000088H
  002dd	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2038 : 				set_d3d_int_state ( D3DRENDERSTATE_LIGHTING, FALSE );

  002e2	6a 00		 push	 0
  002e4	68 89 00 00 00	 push	 137			; 00000089H
  002e9	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2039 : 
; 2040 : 				draw_3d_terrain_cloud_puff_object ( object_order );

  002ee	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  002f1	50		 push	 eax
  002f2	e8 00 00 00 00	 call	 ?draw_3d_terrain_cloud_puff_object@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; draw_3d_terrain_cloud_puff_object

; 2041 : 
; 2042 : 				break;

  002f7	eb 30		 jmp	 SHORT $LN4@draw_norma
$LN31@draw_norma:

; 2043 : 			}
; 2044 : 
; 2045 : 			case	OBJECT_3D_DRAW_TYPE_CLOUD_SECTOR:
; 2046 : 			{
; 2047 : 
; 2048 : 				set_d3d_int_state ( D3DRENDERSTATE_CLIPPING, FALSE );

  002f9	6a 00		 push	 0
  002fb	68 88 00 00 00	 push	 136			; 00000088H
  00300	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2049 : 				set_d3d_int_state ( D3DRENDERSTATE_LIGHTING, FALSE );

  00305	6a 00		 push	 0
  00307	68 89 00 00 00	 push	 137			; 00000089H
  0030c	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2050 : 
; 2051 : 				draw_3d_cloud_sector ( object_order );

  00311	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  00314	50		 push	 eax
  00315	e8 00 00 00 00	 call	 ?draw_3d_cloud_sector@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; draw_3d_cloud_sector

; 2052 : 
; 2053 : 				break;

  0031a	eb 0d		 jmp	 SHORT $LN4@draw_norma
$LN32@draw_norma:

; 2054 : 			}
; 2055 : 
; 2056 : 			default:
; 2057 : 			{
; 2058 : 
; 2059 : 				debug_fatal ( "Unknown object type in draw_3d_objects" );

  0031c	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@FFJJCAGN@Unknown?5object?5type?5in?5draw_3d_@
  00321	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00326	83 c4 04	 add	 esp, 4
$LN4@draw_norma:

; 2060 : 
; 2061 : 				break;
; 2062 : 			}
; 2063 : 		}
; 2064 : 
; 2065 : 		object_order = object_order->succ;

  00329	8b 45 08	 mov	 eax, DWORD PTR _object_order$[ebp]
  0032c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0032f	89 4d 08	 mov	 DWORD PTR _object_order$[ebp], ecx

; 2066 : 	}

  00332	e9 e9 fc ff ff	 jmp	 $LN2@draw_norma
$LN3@draw_norma:

; 2067 : 
; 2068 : 	set_d3d_int_state ( D3DRENDERSTATE_CULLMODE, D3DCULL_CCW );

  00337	6a 03		 push	 3
  00339	6a 16		 push	 22			; 00000016H
  0033b	e8 00 00 00 00	 call	 ?set_d3d_int_state@@YGXW4_D3DRENDERSTATETYPE@@K@Z ; set_d3d_int_state

; 2069 : }

  00340	5f		 pop	 edi
  00341	5e		 pop	 esi
  00342	5b		 pop	 ebx
  00343	8b e5		 mov	 esp, ebp
  00345	5d		 pop	 ebp
  00346	c2 04 00	 ret	 4
  00349	0f 1f 00	 npad	 3
$LN34@draw_norma:
  0034c	00 00 00 00	 DD	 $LN7@draw_norma
  00350	00 00 00 00	 DD	 $LN10@draw_norma
  00354	00 00 00 00	 DD	 $LN13@draw_norma
  00358	00 00 00 00	 DD	 $LN32@draw_norma
  0035c	00 00 00 00	 DD	 $LN32@draw_norma
  00360	00 00 00 00	 DD	 $LN16@draw_norma
  00364	00 00 00 00	 DD	 $LN20@draw_norma
  00368	00 00 00 00	 DD	 $LN23@draw_norma
  0036c	00 00 00 00	 DD	 $LN26@draw_norma
  00370	00 00 00 00	 DD	 $LN32@draw_norma
  00374	00 00 00 00	 DD	 $LN32@draw_norma
  00378	00 00 00 00	 DD	 $LN32@draw_norma
  0037c	00 00 00 00	 DD	 $LN29@draw_norma
  00380	00 00 00 00	 DD	 $LN30@draw_norma
  00384	00 00 00 00	 DD	 $LN31@draw_norma
  00388	00 00 00 00	 DD	 $LN32@draw_norma
  0038c	00 00 00 00	 DD	 $LN32@draw_norma
  00390	00 00 00 00	 DD	 $LN19@draw_norma
?draw_normal_scene_objects@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ENDP ; draw_normal_scene_objects
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjbuf.c
;	COMDAT ?set_3d_exclusive_instance@@YGXPAUOBJECT_3D_INSTANCE@@@Z
_TEXT	SEGMENT
_instance$ = 8						; size = 4
?set_3d_exclusive_instance@@YGXPAUOBJECT_3D_INSTANCE@@@Z PROC ; set_3d_exclusive_instance, COMDAT

; 2340 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2341 : 
; 2342 : 	exclusive_3d_instance = instance;

  00009	8b 45 08	 mov	 eax, DWORD PTR _instance$[ebp]
  0000c	a3 00 00 00 00	 mov	 DWORD PTR ?exclusive_3d_instance@@3PAUOBJECT_3D_INSTANCE@@A, eax ; exclusive_3d_instance

; 2343 : }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?set_3d_exclusive_instance@@YGXPAUOBJECT_3D_INSTANCE@@@Z ENDP ; set_3d_exclusive_instance
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjbuf.c
;	COMDAT ?clear_3d_scene_objects@@YGXXZ
_TEXT	SEGMENT
?clear_3d_scene_objects@@YGXXZ PROC			; clear_3d_scene_objects, COMDAT

; 2298 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2299 : 
; 2300 : 	//
; 2301 : 	// Remove all the 3d objects in the visual drawing list
; 2302 : 	//
; 2303 : 
; 2304 : 	high_zbuffered_scene_slot_sorted_list = NULL;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?high_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0 ; high_zbuffered_scene_slot_sorted_list

; 2305 : 	high_nonzbuffered_scene_slot_sorted_list = NULL;

  00013	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?high_nonzbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0 ; high_nonzbuffered_scene_slot_sorted_list

; 2306 : 	middle_scene_slot_sorted_list = NULL;

  0001d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?middle_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0 ; middle_scene_slot_sorted_list

; 2307 : 	low_zbuffered_scene_slot_sorted_list = NULL;

  00027	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?low_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0 ; low_zbuffered_scene_slot_sorted_list

; 2308 : 	low_nonzbuffered_scene_slot_sorted_list = NULL;

  00031	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?low_nonzbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0 ; low_nonzbuffered_scene_slot_sorted_list

; 2309 : #if 0
; 2310 : 	near_scene_slot_list = NULL;
; 2311 : #endif
; 2312 : 
; 2313 : 	last_high_zbuffered_scene_slot_insert_point = NULL;

  0003b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0

; 2314 : 	last_high_nonzbuffered_scene_slot_insert_point = NULL;

  00045	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0

; 2315 : 	last_middle_scene_slot_insert_point = NULL;

  0004f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?last_middle_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0

; 2316 : 	last_low_zbuffered_scene_slot_insert_point = NULL;

  00059	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0

; 2317 : 	last_low_nonzbuffered_scene_slot_insert_point = NULL;

  00063	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0

; 2318 : #if 0
; 2319 : 	last_near_scene_slot_insert_point = NULL;
; 2320 : #endif
; 2321 : 
; 2322 : 	scene_slot_order_index = 0;

  0006d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?scene_slot_order_index@@3HA, 0

; 2323 : 
; 2324 : 	//
; 2325 : 	// Remove all the light sources from the visual light list
; 2326 : 	//
; 2327 : 
; 2328 : 	//
; 2329 : 	// Reset translucent object surfaces
; 2330 : 	//
; 2331 : 
; 2332 : 	object_3d_transparent_surface_index = 0;

  00077	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?object_3d_transparent_surface_index@@3HA, 0 ; object_3d_transparent_surface_index

; 2333 : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
?clear_3d_scene_objects@@YGXXZ ENDP			; clear_3d_scene_objects
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjbuf.c
;	COMDAT ?draw_3d_scene@@YGXXZ
_TEXT	SEGMENT
_nonzbuffered_insert$1 = -16				; size = 4
_nonzbuffered_list$2 = -12				; size = 4
_zbuffered_insert$3 = -8				; size = 4
_zbuffered_list$4 = -4					; size = 4
?draw_3d_scene@@YGXXZ PROC				; draw_3d_scene, COMDAT

; 1681 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1682 : 
; 1683 : 	//
; 1684 : 	// Two cases here either we are above the middle layer, or below the middle layer.
; 1685 : 	//
; 1686 : 
; 1687 : 	set_up_tnl_hardware ();

  00009	e8 00 00 00 00	 call	 ?set_up_tnl_hardware@@YGXXZ ; set_up_tnl_hardware

; 1688 : 
; 1689 : 	set_d3d_in_order_rendering ( FALSE );

  0000e	6a 00		 push	 0
  00010	e8 00 00 00 00	 call	 ?set_d3d_in_order_rendering@@YGXH@Z ; set_d3d_in_order_rendering

; 1690 : 
; 1691 : 	if ( visual_3d_vp->y > middle_scene_slot_height )

  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0001a	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0001f	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?middle_scene_slot_height@@3MA
  00026	76 68		 jbe	 SHORT $LN2@draw_3d_sc

; 1692 : 	{
; 1693 : 
; 1694 : 		scene_slot_drawing_list
; 1695 : 			*zbuffered_list,
; 1696 : 			*zbuffered_insert,
; 1697 : 			*nonzbuffered_list,
; 1698 : 			*nonzbuffered_insert;
; 1699 : 
; 1700 : 		//
; 1701 : 		// Swap the layers around
; 1702 : 		//
; 1703 : 
; 1704 : 		zbuffered_list = high_zbuffered_scene_slot_sorted_list;

  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?high_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; high_zbuffered_scene_slot_sorted_list
  0002d	89 45 fc	 mov	 DWORD PTR _zbuffered_list$4[ebp], eax

; 1705 : 		zbuffered_insert = last_high_zbuffered_scene_slot_insert_point;

  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00035	89 45 f8	 mov	 DWORD PTR _zbuffered_insert$3[ebp], eax

; 1706 : 		nonzbuffered_list = high_nonzbuffered_scene_slot_sorted_list;

  00038	a1 00 00 00 00	 mov	 eax, DWORD PTR ?high_nonzbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; high_nonzbuffered_scene_slot_sorted_list
  0003d	89 45 f4	 mov	 DWORD PTR _nonzbuffered_list$2[ebp], eax

; 1707 : 		nonzbuffered_insert = last_high_nonzbuffered_scene_slot_insert_point;

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00045	89 45 f0	 mov	 DWORD PTR _nonzbuffered_insert$1[ebp], eax

; 1708 : 
; 1709 : 		high_zbuffered_scene_slot_sorted_list = low_zbuffered_scene_slot_sorted_list;

  00048	a1 00 00 00 00	 mov	 eax, DWORD PTR ?low_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; low_zbuffered_scene_slot_sorted_list
  0004d	a3 00 00 00 00	 mov	 DWORD PTR ?high_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax ; high_zbuffered_scene_slot_sorted_list

; 1710 : 		last_high_zbuffered_scene_slot_insert_point = last_low_zbuffered_scene_slot_insert_point;

  00052	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00057	a3 00 00 00 00	 mov	 DWORD PTR ?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax

; 1711 : 		high_nonzbuffered_scene_slot_sorted_list = low_nonzbuffered_scene_slot_sorted_list;

  0005c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?low_nonzbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; low_nonzbuffered_scene_slot_sorted_list
  00061	a3 00 00 00 00	 mov	 DWORD PTR ?high_nonzbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax ; high_nonzbuffered_scene_slot_sorted_list

; 1712 : 		last_high_nonzbuffered_scene_slot_insert_point = last_low_nonzbuffered_scene_slot_insert_point;

  00066	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax

; 1713 : 
; 1714 : 		low_zbuffered_scene_slot_sorted_list = zbuffered_list;

  00070	8b 45 fc	 mov	 eax, DWORD PTR _zbuffered_list$4[ebp]
  00073	a3 00 00 00 00	 mov	 DWORD PTR ?low_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax ; low_zbuffered_scene_slot_sorted_list

; 1715 : 		last_low_zbuffered_scene_slot_insert_point = zbuffered_insert;

  00078	8b 45 f8	 mov	 eax, DWORD PTR _zbuffered_insert$3[ebp]
  0007b	a3 00 00 00 00	 mov	 DWORD PTR ?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax

; 1716 : 		low_nonzbuffered_scene_slot_sorted_list = nonzbuffered_list;

  00080	8b 45 f4	 mov	 eax, DWORD PTR _nonzbuffered_list$2[ebp]
  00083	a3 00 00 00 00	 mov	 DWORD PTR ?low_nonzbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax ; low_nonzbuffered_scene_slot_sorted_list

; 1717 : 		last_low_nonzbuffered_scene_slot_insert_point = nonzbuffered_insert;

  00088	8b 45 f0	 mov	 eax, DWORD PTR _nonzbuffered_insert$1[ebp]
  0008b	a3 00 00 00 00	 mov	 DWORD PTR ?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax
$LN2@draw_3d_sc:

; 1718 : 	}
; 1719 : 
; 1720 : 	if ( high_zbuffered_scene_slot_sorted_list )

  00090	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?high_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0 ; high_zbuffered_scene_slot_sorted_list
  00097	74 15		 je	 SHORT $LN3@draw_3d_sc

; 1721 : 	{
; 1722 : 
; 1723 : 		current_scene_slot_list = high_zbuffered_scene_slot_sorted_list;

  00099	a1 00 00 00 00	 mov	 eax, DWORD PTR ?high_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; high_zbuffered_scene_slot_sorted_list
  0009e	a3 00 00 00 00	 mov	 DWORD PTR ?current_scene_slot_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax ; current_scene_slot_list

; 1724 : 
; 1725 : 		draw_normal_scene_objects ( high_zbuffered_scene_slot_sorted_list );

  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?high_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; high_zbuffered_scene_slot_sorted_list
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?draw_normal_scene_objects@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; draw_normal_scene_objects
$LN3@draw_3d_sc:

; 1726 : 	}
; 1727 : 
; 1728 : 	if ( high_nonzbuffered_scene_slot_sorted_list )

  000ae	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?high_nonzbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0 ; high_nonzbuffered_scene_slot_sorted_list
  000b5	74 3f		 je	 SHORT $LN6@draw_3d_sc

; 1729 : 	{
; 1730 : 
; 1731 : 		//
; 1732 : 		// Set the transparency stuff on
; 1733 : 		//
; 1734 : 
; 1735 : #if BATCH_DEFINED
; 1736 : 		set_d3d_texture_batching ( FALSE );
; 1737 : #endif
; 1738 : 
; 1739 : 		set_d3d_alpha_fog_zbuffer ( TRUE, FALSE, TRUE, FALSE );

  000b7	6a 00		 push	 0
  000b9	6a 01		 push	 1
  000bb	6a 00		 push	 0
  000bd	6a 01		 push	 1
  000bf	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer

; 1740 : 
; 1741 : 		draw_transparent_scene_objects ( high_nonzbuffered_scene_slot_sorted_list );

  000c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?high_nonzbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; high_nonzbuffered_scene_slot_sorted_list
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ?draw_transparent_scene_objects@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; draw_transparent_scene_objects

; 1742 : 
; 1743 : 		if ( active_3d_environment->fogmode == FOGMODE_OFF )

  000cf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  000d4	83 78 44 03	 cmp	 DWORD PTR [eax+68], 3
  000d8	75 0f		 jne	 SHORT $LN5@draw_3d_sc

; 1744 : 		{
; 1745 : 
; 1746 : 			set_d3d_alpha_fog_zbuffer ( FALSE, FALSE, TRUE, TRUE );

  000da	6a 01		 push	 1
  000dc	6a 01		 push	 1
  000de	6a 00		 push	 0
  000e0	6a 00		 push	 0
  000e2	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer

; 1747 : 		}
; 1748 : 		else

  000e7	eb 0d		 jmp	 SHORT $LN6@draw_3d_sc
$LN5@draw_3d_sc:

; 1749 : 		{
; 1750 : 
; 1751 : 			set_d3d_alpha_fog_zbuffer ( FALSE, TRUE, TRUE, TRUE );

  000e9	6a 01		 push	 1
  000eb	6a 01		 push	 1
  000ed	6a 01		 push	 1
  000ef	6a 00		 push	 0
  000f1	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer
$LN6@draw_3d_sc:

; 1752 : 		}
; 1753 : 	}
; 1754 : 
; 1755 : 	if ( middle_scene_slot_sorted_list )

  000f6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?middle_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0 ; middle_scene_slot_sorted_list
  000fd	74 3f		 je	 SHORT $LN9@draw_3d_sc

; 1756 : 	{
; 1757 : #if BATCH_DEFINED
; 1758 : 		set_d3d_texture_batching ( FALSE );
; 1759 : #endif
; 1760 : 
; 1761 : 		set_d3d_alpha_fog_zbuffer ( TRUE, FALSE, TRUE, FALSE );

  000ff	6a 00		 push	 0
  00101	6a 01		 push	 1
  00103	6a 00		 push	 0
  00105	6a 01		 push	 1
  00107	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer

; 1762 : 
; 1763 : 		draw_normal_scene_objects ( middle_scene_slot_sorted_list );

  0010c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?middle_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; middle_scene_slot_sorted_list
  00111	50		 push	 eax
  00112	e8 00 00 00 00	 call	 ?draw_normal_scene_objects@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; draw_normal_scene_objects

; 1764 : 
; 1765 : 		if ( active_3d_environment->fogmode == FOGMODE_OFF )

  00117	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0011c	83 78 44 03	 cmp	 DWORD PTR [eax+68], 3
  00120	75 0f		 jne	 SHORT $LN8@draw_3d_sc

; 1766 : 		{
; 1767 : 
; 1768 : 			set_d3d_alpha_fog_zbuffer ( FALSE, FALSE, TRUE, TRUE );

  00122	6a 01		 push	 1
  00124	6a 01		 push	 1
  00126	6a 00		 push	 0
  00128	6a 00		 push	 0
  0012a	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer

; 1769 : 		}
; 1770 : 		else

  0012f	eb 0d		 jmp	 SHORT $LN9@draw_3d_sc
$LN8@draw_3d_sc:

; 1771 : 		{
; 1772 : 
; 1773 : 			set_d3d_alpha_fog_zbuffer ( FALSE, TRUE, TRUE, TRUE );

  00131	6a 01		 push	 1
  00133	6a 01		 push	 1
  00135	6a 01		 push	 1
  00137	6a 00		 push	 0
  00139	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer
$LN9@draw_3d_sc:

; 1774 : 		}
; 1775 : 	}
; 1776 : 
; 1777 : 	if ( low_zbuffered_scene_slot_sorted_list )

  0013e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?low_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0 ; low_zbuffered_scene_slot_sorted_list
  00145	74 15		 je	 SHORT $LN10@draw_3d_sc

; 1778 : 	{
; 1779 : 
; 1780 : 		current_scene_slot_list = low_zbuffered_scene_slot_sorted_list;

  00147	a1 00 00 00 00	 mov	 eax, DWORD PTR ?low_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; low_zbuffered_scene_slot_sorted_list
  0014c	a3 00 00 00 00	 mov	 DWORD PTR ?current_scene_slot_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax ; current_scene_slot_list

; 1781 : 
; 1782 : #if BATCH_DEFINED
; 1783 : 		set_d3d_texture_batching ( TRUE );
; 1784 : #endif
; 1785 : 
; 1786 : 		draw_normal_scene_objects ( low_zbuffered_scene_slot_sorted_list );

  00151	a1 00 00 00 00	 mov	 eax, DWORD PTR ?low_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; low_zbuffered_scene_slot_sorted_list
  00156	50		 push	 eax
  00157	e8 00 00 00 00	 call	 ?draw_normal_scene_objects@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; draw_normal_scene_objects
$LN10@draw_3d_sc:

; 1787 : 	}
; 1788 : 
; 1789 : 	if ( low_nonzbuffered_scene_slot_sorted_list )

  0015c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?low_nonzbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0 ; low_nonzbuffered_scene_slot_sorted_list
  00163	74 3f		 je	 SHORT $LN13@draw_3d_sc

; 1790 : 	{
; 1791 : 
; 1792 : #if BATCH_DEFINED
; 1793 : 		set_d3d_texture_batching ( FALSE );
; 1794 : #endif
; 1795 : 
; 1796 : 		set_d3d_alpha_fog_zbuffer ( TRUE, FALSE, TRUE, FALSE );

  00165	6a 00		 push	 0
  00167	6a 01		 push	 1
  00169	6a 00		 push	 0
  0016b	6a 01		 push	 1
  0016d	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer

; 1797 : 
; 1798 : 		draw_transparent_scene_objects ( low_nonzbuffered_scene_slot_sorted_list );

  00172	a1 00 00 00 00	 mov	 eax, DWORD PTR ?low_nonzbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; low_nonzbuffered_scene_slot_sorted_list
  00177	50		 push	 eax
  00178	e8 00 00 00 00	 call	 ?draw_transparent_scene_objects@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; draw_transparent_scene_objects

; 1799 : 
; 1800 : 		if ( active_3d_environment->fogmode == FOGMODE_OFF )

  0017d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00182	83 78 44 03	 cmp	 DWORD PTR [eax+68], 3
  00186	75 0f		 jne	 SHORT $LN12@draw_3d_sc

; 1801 : 		{
; 1802 : 
; 1803 : 			set_d3d_alpha_fog_zbuffer ( FALSE, FALSE, TRUE, TRUE );

  00188	6a 01		 push	 1
  0018a	6a 01		 push	 1
  0018c	6a 00		 push	 0
  0018e	6a 00		 push	 0
  00190	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer

; 1804 : 		}
; 1805 : 		else

  00195	eb 0d		 jmp	 SHORT $LN13@draw_3d_sc
$LN12@draw_3d_sc:

; 1806 : 		{
; 1807 : 
; 1808 : 			set_d3d_alpha_fog_zbuffer ( FALSE, TRUE, TRUE, TRUE );

  00197	6a 01		 push	 1
  00199	6a 01		 push	 1
  0019b	6a 01		 push	 1
  0019d	6a 00		 push	 0
  0019f	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer
$LN13@draw_3d_sc:

; 1809 : 		}
; 1810 : 	}
; 1811 : 
; 1812 : #if 0
; 1813 : 	//
; 1814 : 	// Now render any "near" objects in the scene
; 1815 : 	//
; 1816 : 
; 1817 : 	if ( near_scene_slot_list )
; 1818 : 	{
; 1819 : 
; 1820 : 		draw_z_sorted_scene_objects ( near_scene_slot_list );
; 1821 : 	}
; 1822 : #endif
; 1823 : }

  001a4	5f		 pop	 edi
  001a5	5e		 pop	 esi
  001a6	5b		 pop	 ebx
  001a7	8b e5		 mov	 esp, ebp
  001a9	5d		 pop	 ebp
  001aa	c3		 ret	 0
?draw_3d_scene@@YGXXZ ENDP				; draw_3d_scene
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjbuf.c
;	COMDAT ?insert_transparent_buffer_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z
_TEXT	SEGMENT
_object$ = 8						; size = 4
?insert_transparent_buffer_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z PROC ; insert_transparent_buffer_into_3d_scene, COMDAT

; 1650 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1651 : 
; 1652 : 	//
; 1653 : 	// This inserts the object into the non-zbuffered list, dependant on which list is currently being drawn
; 1654 : 	//
; 1655 : 
; 1656 : 	if ( current_scene_slot_list == high_zbuffered_scene_slot_sorted_list )

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_scene_slot_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; current_scene_slot_list
  0000e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?high_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; high_zbuffered_scene_slot_sorted_list
  00014	75 0b		 jne	 SHORT $LN2@insert_tra

; 1657 : 	{
; 1658 : 
; 1659 : 		//
; 1660 : 		// Insert into the high scene list
; 1661 : 		//
; 1662 : 
; 1663 : 		insert_high_nonzbuffered_scene_slot_into_3d_scene ( object );

  00016	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?insert_high_nonzbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_high_nonzbuffered_scene_slot_into_3d_scene

; 1664 : 	}
; 1665 : 	else

  0001f	eb 09		 jmp	 SHORT $LN1@insert_tra
$LN2@insert_tra:

; 1666 : 	{
; 1667 : 
; 1668 : 		//
; 1669 : 		// Insert into the low scene list
; 1670 : 		//
; 1671 : 
; 1672 : 		insert_low_nonzbuffered_scene_slot_into_3d_scene ( object );

  00021	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?insert_low_nonzbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_low_nonzbuffered_scene_slot_into_3d_scene
$LN1@insert_tra:

; 1673 : 	}
; 1674 : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?insert_transparent_buffer_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ENDP ; insert_transparent_buffer_into_3d_scene
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjbuf.c
;	COMDAT ?insert_zbiased_coloured_object_into_3d_scene@@YGXW4OBJECT_3D_DRAWING_TYPES@@PAXUREAL_COLOUR@@M@Z
_TEXT	SEGMENT
tv65 = -80						; size = 4
_visibility$1 = -12					; size = 4
_object$2 = -8						; size = 4
_buffer$ = -4						; size = 4
_type$ = 8						; size = 4
_data$ = 12						; size = 4
_colour$ = 16						; size = 4
_distance_bias$ = 20					; size = 4
?insert_zbiased_coloured_object_into_3d_scene@@YGXW4OBJECT_3D_DRAWING_TYPES@@PAXUREAL_COLOUR@@M@Z PROC ; insert_zbiased_coloured_object_into_3d_scene, COMDAT

; 762  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 763  : 
; 764  : 	scene_slot_drawing_list
; 765  : 		*buffer;
; 766  : 
; 767  : 	number_of_objects_in_3d_scene++;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_objects_in_3d_scene@@3HA ; number_of_objects_in_3d_scene
  0000e	83 c0 01	 add	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_objects_in_3d_scene@@3HA, eax ; number_of_objects_in_3d_scene

; 768  : 
; 769  : 	switch ( type )

  00016	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  00019	89 45 b0	 mov	 DWORD PTR tv65[ebp], eax
  0001c	83 7d b0 03	 cmp	 DWORD PTR tv65[ebp], 3
  00020	74 05		 je	 SHORT $LN4@insert_zbi
  00022	e9 8d 00 00 00	 jmp	 $LN9@insert_zbi
$LN4@insert_zbi:

; 770  : 	{
; 771  : 	
; 772  : 		case OBJECT_3D_DRAW_TYPE_OBJECT_COLOURED:
; 773  : 		{
; 774  : 
; 775  : 			object_3d_instance
; 776  : 				*object;
; 777  : 
; 778  : 			enum OBJECT_3D_VISIBILITY
; 779  : 				visibility;
; 780  : 
; 781  : 			object = ( object_3d_instance * ) data;

  00027	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  0002a	89 45 f8	 mov	 DWORD PTR _object$2[ebp], eax

; 782  : 
; 783  : 			//
; 784  : 			// Set the relative position & clip object
; 785  : 			//
; 786  : 
; 787  : 			set_object_3d_instance_relative_position ( object );

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _object$2[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?set_object_3d_instance_relative_position@@YGXPAUOBJECT_3D_INSTANCE@@@Z ; set_object_3d_instance_relative_position

; 788  : 
; 789  : 			visibility = get_object_3d_instance_visibility ( object );

  00036	8b 45 f8	 mov	 eax, DWORD PTR _object$2[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?get_object_3d_instance_visibility@@YG?AW4OBJECT_3D_VISIBILITY@@PAUOBJECT_3D_INSTANCE@@@Z ; get_object_3d_instance_visibility
  0003f	89 45 f4	 mov	 DWORD PTR _visibility$1[ebp], eax

; 790  : 
; 791  : 			if ( visibility != OBJECT_3D_NOT_VISIBLE )

  00042	83 7d f4 03	 cmp	 DWORD PTR _visibility$1[ebp], 3
  00046	74 6a		 je	 SHORT $LN8@insert_zbi

; 792  : 			{
; 793  : 
; 794  : 				buffer = get_3d_scene_slot ();

  00048	e8 00 00 00 00	 call	 ?get_3d_scene_slot@@YGPAUSCENE_SLOT_DRAWING_LIST@@XZ ; get_3d_scene_slot
  0004d	89 45 fc	 mov	 DWORD PTR _buffer$[ebp], eax

; 795  : 	
; 796  : 				if ( buffer )

  00050	83 7d fc 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  00054	74 5c		 je	 SHORT $LN8@insert_zbi

; 797  : 				{
; 798  : 
; 799  : 					distance_bias += object->view_position.z;

  00056	8b 45 f8	 mov	 eax, DWORD PTR _object$2[ebp]
  00059	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _distance_bias$[ebp]
  0005e	f3 0f 58 40 40	 addss	 xmm0, DWORD PTR [eax+64]
  00063	f3 0f 11 45 14	 movss	 DWORD PTR _distance_bias$[ebp], xmm0

; 800  : 
; 801  : 					buffer->type = OBJECT_3D_DRAW_TYPE_OBJECT_COLOURED;

  00068	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  0006b	c7 40 08 03 00
	00 00		 mov	 DWORD PTR [eax+8], 3

; 802  : 	
; 803  : 					buffer->z = *( ( int * ) &distance_bias );

  00072	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  00075	8b 4d 14	 mov	 ecx, DWORD PTR _distance_bias$[ebp]
  00078	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 804  : 	
; 805  : 					buffer->object = object;

  0007b	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  0007e	8b 4d f8	 mov	 ecx, DWORD PTR _object$2[ebp]
  00081	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 806  : 
; 807  : 					buffer->colour = colour;

  00084	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  00087	8b 4d 10	 mov	 ecx, DWORD PTR _colour$[ebp]
  0008a	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 808  : 
; 809  : 					if ( object->vp.y > middle_scene_slot_height )

  0008d	8b 45 f8	 mov	 eax, DWORD PTR _object$2[ebp]
  00090	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00095	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?middle_scene_slot_height@@3MA
  0009c	76 0b		 jbe	 SHORT $LN7@insert_zbi

; 810  : 					{
; 811  : 
; 812  : 						insert_high_zbuffered_scene_slot_into_3d_scene ( buffer );

  0009e	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ?insert_high_zbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_high_zbuffered_scene_slot_into_3d_scene

; 813  : 					}
; 814  : 					else

  000a7	eb 09		 jmp	 SHORT $LN8@insert_zbi
$LN7@insert_zbi:

; 815  : 					{
; 816  : 
; 817  : 						insert_low_zbuffered_scene_slot_into_3d_scene ( buffer );

  000a9	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 ?insert_low_zbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_low_zbuffered_scene_slot_into_3d_scene
$LN8@insert_zbi:

; 818  : 					}
; 819  : 				}
; 820  : 			}
; 821  : 
; 822  : 			break;

  000b2	eb 0d		 jmp	 SHORT $LN2@insert_zbi
$LN9@insert_zbi:

; 823  : 		}
; 824  : 
; 825  : 		default:
; 826  : 		{
; 827  : 
; 828  : 			debug_fatal ( "Unknown object type in insert_object_3d_instance_into_scene" );

  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@JJJALLCE@Unknown?5object?5type?5in?5insert_o@
  000b9	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000be	83 c4 04	 add	 esp, 4
$LN2@insert_zbi:

; 829  : 
; 830  : 			break;
; 831  : 		}
; 832  : 	}
; 833  : }

  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi
  000c3	5b		 pop	 ebx
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 10 00	 ret	 16			; 00000010H
?insert_zbiased_coloured_object_into_3d_scene@@YGXW4OBJECT_3D_DRAWING_TYPES@@PAXUREAL_COLOUR@@M@Z ENDP ; insert_zbiased_coloured_object_into_3d_scene
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjbuf.c
;	COMDAT ?insert_zbiased_object_into_3d_scene@@YGXW4OBJECT_3D_DRAWING_TYPES@@PAXM@Z
_TEXT	SEGMENT
tv65 = -132						; size = 4
_relative_position$1 = -64				; size = 12
_explosion$2 = -52					; size = 4
_relative_position$3 = -48				; size = 12
_sprite$4 = -36						; size = 4
_visibility$5 = -32					; size = 4
_object$6 = -28						; size = 4
_visibility$7 = -24					; size = 4
_object$8 = -20						; size = 4
_visible$9 = -16					; size = 4
_visibility$10 = -12					; size = 4
_object$11 = -8						; size = 4
_buffer$ = -4						; size = 4
_type$ = 8						; size = 4
_data$ = 12						; size = 4
_distance_bias$ = 16					; size = 4
?insert_zbiased_object_into_3d_scene@@YGXW4OBJECT_3D_DRAWING_TYPES@@PAXM@Z PROC ; insert_zbiased_object_into_3d_scene, COMDAT

; 194  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 195  : 
; 196  : 	scene_slot_drawing_list
; 197  : 		*buffer;
; 198  : 
; 199  : 	number_of_objects_in_3d_scene++;

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_objects_in_3d_scene@@3HA ; number_of_objects_in_3d_scene
  00011	83 c0 01	 add	 eax, 1
  00014	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_objects_in_3d_scene@@3HA, eax ; number_of_objects_in_3d_scene

; 200  : 
; 201  : 	switch ( type )

  00019	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  0001c	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  00022	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR tv65[ebp]
  00028	83 e9 01	 sub	 ecx, 1
  0002b	89 8d 7c ff ff
	ff		 mov	 DWORD PTR tv65[ebp], ecx
  00031	83 bd 7c ff ff
	ff 13		 cmp	 DWORD PTR tv65[ebp], 19	; 00000013H
  00038	0f 87 54 04 00
	00		 ja	 $LN40@insert_zbi
  0003e	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR tv65[ebp]
  00044	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN42@insert_zbi[edx]
  0004b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN43@insert_zbi[eax*4]
$LN4@insert_zbi:

; 202  : 	{
; 203  : 	
; 204  : 		case OBJECT_3D_DRAW_TYPE_OBJECT:
; 205  : 		{
; 206  : 
; 207  : 			object_3d_instance
; 208  : 				*object;
; 209  : 
; 210  : 			enum OBJECT_3D_VISIBILITY
; 211  : 				visibility;
; 212  : 
; 213  : 			object = ( object_3d_instance * ) data;

  00052	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  00055	89 45 f8	 mov	 DWORD PTR _object$11[ebp], eax

; 214  : 
; 215  : 			if ( ( !exclusive_3d_instance ) || ( exclusive_3d_instance == object ) )

  00058	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?exclusive_3d_instance@@3PAUOBJECT_3D_INSTANCE@@A, 0 ; exclusive_3d_instance
  0005f	74 0e		 je	 SHORT $LN6@insert_zbi
  00061	a1 00 00 00 00	 mov	 eax, DWORD PTR ?exclusive_3d_instance@@3PAUOBJECT_3D_INSTANCE@@A ; exclusive_3d_instance
  00066	3b 45 f8	 cmp	 eax, DWORD PTR _object$11[ebp]
  00069	0f 85 21 01 00
	00		 jne	 $LN15@insert_zbi
$LN6@insert_zbi:

; 216  : 			{
; 217  : 
; 218  : 				if ( ( object->object_has_shadow ) && ( shadows_enabled ) && ( !exclusive_3d_instance ) )

  0006f	8b 45 f8	 mov	 eax, DWORD PTR _object$11[ebp]
  00072	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00075	c1 e9 02	 shr	 ecx, 2
  00078	83 e1 01	 and	 ecx, 1
  0007b	0f 84 93 00 00
	00		 je	 $LN11@insert_zbi
  00081	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?shadows_enabled@@3HA, 0 ; shadows_enabled
  00088	0f 84 86 00 00
	00		 je	 $LN11@insert_zbi
  0008e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?exclusive_3d_instance@@3PAUOBJECT_3D_INSTANCE@@A, 0 ; exclusive_3d_instance
  00095	75 7d		 jne	 SHORT $LN11@insert_zbi

; 219  : 				{
; 220  : 
; 221  : 					enum OBJECT_3D_VISIBILITY
; 222  : 						visible;
; 223  : 
; 224  : 					visible = get_object_3d_instance_shadow_visibility ( object );

  00097	8b 45 f8	 mov	 eax, DWORD PTR _object$11[ebp]
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ?get_object_3d_instance_shadow_visibility@@YG?AW4OBJECT_3D_VISIBILITY@@PAUOBJECT_3D_INSTANCE@@@Z ; get_object_3d_instance_shadow_visibility
  000a0	89 45 f0	 mov	 DWORD PTR _visible$9[ebp], eax

; 225  : 
; 226  : 					if ( visible != OBJECT_3D_NOT_VISIBLE )

  000a3	83 7d f0 03	 cmp	 DWORD PTR _visible$9[ebp], 3
  000a7	74 6b		 je	 SHORT $LN11@insert_zbi

; 227  : 					{
; 228  : 	
; 229  : 						buffer = get_3d_scene_slot ();

  000a9	e8 00 00 00 00	 call	 ?get_3d_scene_slot@@YGPAUSCENE_SLOT_DRAWING_LIST@@XZ ; get_3d_scene_slot
  000ae	89 45 fc	 mov	 DWORD PTR _buffer$[ebp], eax

; 230  : 			
; 231  : 						if ( buffer )

  000b1	83 7d fc 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  000b5	74 5d		 je	 SHORT $LN11@insert_zbi

; 232  : 						{
; 233  : 		
; 234  : 							distance_bias += object->view_position.z;

  000b7	8b 45 f8	 mov	 eax, DWORD PTR _object$11[ebp]
  000ba	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _distance_bias$[ebp]
  000bf	f3 0f 58 40 40	 addss	 xmm0, DWORD PTR [eax+64]
  000c4	f3 0f 11 45 10	 movss	 DWORD PTR _distance_bias$[ebp], xmm0

; 235  : 		
; 236  : 							distance_bias += SHADOW_DISTANCE_BIAS;

  000c9	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _distance_bias$[ebp]
  000ce	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@45000000
  000d6	f3 0f 11 45 10	 movss	 DWORD PTR _distance_bias$[ebp], xmm0

; 237  : 		
; 238  : 							buffer->type = OBJECT_3D_DRAW_TYPE_OBJECT_SHADOW;

  000db	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  000de	c7 40 08 04 00
	00 00		 mov	 DWORD PTR [eax+8], 4

; 239  : 			
; 240  : 							buffer->z = *( ( int * ) &distance_bias );

  000e5	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  000e8	8b 4d 10	 mov	 ecx, DWORD PTR _distance_bias$[ebp]
  000eb	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 241  : 
; 242  : 							buffer->object = object;

  000ee	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  000f1	8b 4d f8	 mov	 ecx, DWORD PTR _object$11[ebp]
  000f4	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 243  : 		
; 244  : 							if ( get_3d_shadows_translucent () )

  000f7	e8 00 00 00 00	 call	 ?get_3d_shadows_translucent@@YGHXZ ; get_3d_shadows_translucent
  000fc	85 c0		 test	 eax, eax
  000fe	74 0b		 je	 SHORT $LN10@insert_zbi

; 245  : 							{
; 246  : 		
; 247  : 								insert_low_nonzbuffered_scene_slot_into_3d_scene ( buffer );

  00100	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ?insert_low_nonzbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_low_nonzbuffered_scene_slot_into_3d_scene

; 248  : 							}
; 249  : 							else

  00109	eb 09		 jmp	 SHORT $LN11@insert_zbi
$LN10@insert_zbi:

; 250  : 							{
; 251  : 			
; 252  : 								insert_low_zbuffered_scene_slot_into_3d_scene ( buffer );

  0010b	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  0010e	50		 push	 eax
  0010f	e8 00 00 00 00	 call	 ?insert_low_zbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_low_zbuffered_scene_slot_into_3d_scene
$LN11@insert_zbi:

; 253  : 							}
; 254  : 						}
; 255  : 					}
; 256  : 				}
; 257  : 	
; 258  : 				//
; 259  : 				// Set the relative position & clip object
; 260  : 				//
; 261  : 	
; 262  : 				set_object_3d_instance_relative_position ( object );

  00114	8b 45 f8	 mov	 eax, DWORD PTR _object$11[ebp]
  00117	50		 push	 eax
  00118	e8 00 00 00 00	 call	 ?set_object_3d_instance_relative_position@@YGXPAUOBJECT_3D_INSTANCE@@@Z ; set_object_3d_instance_relative_position

; 263  : 	
; 264  : 				visibility = get_object_3d_instance_visibility ( object );

  0011d	8b 45 f8	 mov	 eax, DWORD PTR _object$11[ebp]
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 ?get_object_3d_instance_visibility@@YG?AW4OBJECT_3D_VISIBILITY@@PAUOBJECT_3D_INSTANCE@@@Z ; get_object_3d_instance_visibility
  00126	89 45 f4	 mov	 DWORD PTR _visibility$10[ebp], eax

; 265  : 	
; 266  : 				if ( visibility != OBJECT_3D_NOT_VISIBLE )

  00129	83 7d f4 03	 cmp	 DWORD PTR _visibility$10[ebp], 3
  0012d	74 61		 je	 SHORT $LN15@insert_zbi

; 267  : 				{
; 268  : 	
; 269  : 					buffer = get_3d_scene_slot ();

  0012f	e8 00 00 00 00	 call	 ?get_3d_scene_slot@@YGPAUSCENE_SLOT_DRAWING_LIST@@XZ ; get_3d_scene_slot
  00134	89 45 fc	 mov	 DWORD PTR _buffer$[ebp], eax

; 270  : 		
; 271  : 					if ( buffer )

  00137	83 7d fc 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  0013b	74 53		 je	 SHORT $LN15@insert_zbi

; 272  : 					{
; 273  : 	
; 274  : 						distance_bias += object->view_position.z;

  0013d	8b 45 f8	 mov	 eax, DWORD PTR _object$11[ebp]
  00140	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _distance_bias$[ebp]
  00145	f3 0f 58 40 40	 addss	 xmm0, DWORD PTR [eax+64]
  0014a	f3 0f 11 45 10	 movss	 DWORD PTR _distance_bias$[ebp], xmm0

; 275  : 	
; 276  : 						buffer->type = OBJECT_3D_DRAW_TYPE_OBJECT;

  0014f	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  00152	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [eax+8], 1

; 277  : 		
; 278  : 						buffer->z = *( ( int * ) &distance_bias );

  00159	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  0015c	8b 4d 10	 mov	 ecx, DWORD PTR _distance_bias$[ebp]
  0015f	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 279  : 
; 280  : 						buffer->object = object;

  00162	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  00165	8b 4d f8	 mov	 ecx, DWORD PTR _object$11[ebp]
  00168	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 281  : 	
; 282  : 						if ( object->vp.y > middle_scene_slot_height )

  0016b	8b 45 f8	 mov	 eax, DWORD PTR _object$11[ebp]
  0016e	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00173	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?middle_scene_slot_height@@3MA
  0017a	76 0b		 jbe	 SHORT $LN14@insert_zbi

; 283  : 						{
; 284  : 	
; 285  : 							insert_high_zbuffered_scene_slot_into_3d_scene ( buffer );

  0017c	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  0017f	50		 push	 eax
  00180	e8 00 00 00 00	 call	 ?insert_high_zbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_high_zbuffered_scene_slot_into_3d_scene

; 286  : 						}
; 287  : 						else

  00185	eb 09		 jmp	 SHORT $LN15@insert_zbi
$LN14@insert_zbi:

; 288  : 						{
; 289  : 	
; 290  : 							insert_low_zbuffered_scene_slot_into_3d_scene ( buffer );

  00187	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  0018a	50		 push	 eax
  0018b	e8 00 00 00 00	 call	 ?insert_low_zbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_low_zbuffered_scene_slot_into_3d_scene
$LN15@insert_zbi:

; 291  : 						}
; 292  : 
; 293  : 						//
; 294  : 						// Hack in here to pre-load any textures on the object
; 295  : 						//
; 296  : 
; 297  : //						if ( active_3d_environment->infrared_mode == INFRARED_OFF )
; 298  : 						{
; 299  : 	
; 300  : //							pre_render_3d_object ( object );
; 301  : 						}
; 302  : 					}
; 303  : 				}
; 304  : 			}
; 305  : 
; 306  : 			break;

  00190	e9 0a 03 00 00	 jmp	 $LN2@insert_zbi
$LN16@insert_zbi:

; 307  : 		}
; 308  : 
; 309  : 		case OBJECT_3D_DRAW_TYPE_OBJECT_SCENE:
; 310  : 		{
; 311  : 
; 312  : 			struct OBJECT_3D_SCENE
; 313  : 				*object;
; 314  : 
; 315  : 			enum OBJECT_3D_VISIBILITY
; 316  : 				visibility;
; 317  : 
; 318  : 			object = ( object_3d_scene * ) data;

  00195	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  00198	89 45 ec	 mov	 DWORD PTR _object$8[ebp], eax

; 319  : 
; 320  : 			//
; 321  : 			// Set the relative position & clip object
; 322  : 			//
; 323  : 
; 324  : 			get_position_3d_relative_position ( &object->position, &object->relative_position );

  0019b	8b 45 ec	 mov	 eax, DWORD PTR _object$8[ebp]
  0019e	83 c0 0c	 add	 eax, 12			; 0000000cH
  001a1	50		 push	 eax
  001a2	8b 4d ec	 mov	 ecx, DWORD PTR _object$8[ebp]
  001a5	51		 push	 ecx
  001a6	e8 00 00 00 00	 call	 ?get_position_3d_relative_position@@YGXPAUVEC3D@@0@Z ; get_position_3d_relative_position

; 325  : 
; 326  : 			visibility = get_scene_3d_instance_visibility ( object->object_index, &object->relative_position );

  001ab	8b 45 ec	 mov	 eax, DWORD PTR _object$8[ebp]
  001ae	83 c0 0c	 add	 eax, 12			; 0000000cH
  001b1	50		 push	 eax
  001b2	8b 4d ec	 mov	 ecx, DWORD PTR _object$8[ebp]
  001b5	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  001b8	52		 push	 edx
  001b9	e8 00 00 00 00	 call	 ?get_scene_3d_instance_visibility@@YG?AW4OBJECT_3D_VISIBILITY@@HPAUVEC3D@@@Z ; get_scene_3d_instance_visibility
  001be	89 45 e8	 mov	 DWORD PTR _visibility$7[ebp], eax

; 327  : 
; 328  : 			if ( visibility != OBJECT_3D_NOT_VISIBLE )

  001c1	83 7d e8 03	 cmp	 DWORD PTR _visibility$7[ebp], 3
  001c5	74 68		 je	 SHORT $LN20@insert_zbi

; 329  : 			{
; 330  : 
; 331  : 				buffer = get_3d_scene_slot ();

  001c7	e8 00 00 00 00	 call	 ?get_3d_scene_slot@@YGPAUSCENE_SLOT_DRAWING_LIST@@XZ ; get_3d_scene_slot
  001cc	89 45 fc	 mov	 DWORD PTR _buffer$[ebp], eax

; 332  : 	
; 333  : 				if ( buffer )

  001cf	83 7d fc 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  001d3	74 5a		 je	 SHORT $LN20@insert_zbi

; 334  : 				{
; 335  : 
; 336  : 					distance_bias += object->relative_position.z;

  001d5	8b 45 ec	 mov	 eax, DWORD PTR _object$8[ebp]
  001d8	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _distance_bias$[ebp]
  001dd	f3 0f 58 40 14	 addss	 xmm0, DWORD PTR [eax+20]
  001e2	f3 0f 11 45 10	 movss	 DWORD PTR _distance_bias$[ebp], xmm0

; 337  : 
; 338  : 					buffer->type = OBJECT_3D_DRAW_TYPE_OBJECT_SCENE;

  001e7	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  001ea	c7 40 08 14 00
	00 00		 mov	 DWORD PTR [eax+8], 20	; 00000014H

; 339  : 	
; 340  : 					buffer->z = *( ( int * ) &distance_bias );

  001f1	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  001f4	8b 4d 10	 mov	 ecx, DWORD PTR _distance_bias$[ebp]
  001f7	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 341  : 	
; 342  : 					buffer->scene = *object;

  001fa	8b 7d fc	 mov	 edi, DWORD PTR _buffer$[ebp]
  001fd	83 c7 10	 add	 edi, 16			; 00000010H
  00200	b9 08 00 00 00	 mov	 ecx, 8
  00205	8b 75 ec	 mov	 esi, DWORD PTR _object$8[ebp]
  00208	f3 a5		 rep movsd

; 343  : 
; 344  : 					if ( object->position.y > middle_scene_slot_height )

  0020a	8b 45 ec	 mov	 eax, DWORD PTR _object$8[ebp]
  0020d	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00212	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?middle_scene_slot_height@@3MA
  00219	76 0b		 jbe	 SHORT $LN19@insert_zbi

; 345  : 					{
; 346  : 
; 347  : 						insert_high_zbuffered_scene_slot_into_3d_scene ( buffer );

  0021b	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  0021e	50		 push	 eax
  0021f	e8 00 00 00 00	 call	 ?insert_high_zbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_high_zbuffered_scene_slot_into_3d_scene

; 348  : 					}
; 349  : 					else

  00224	eb 09		 jmp	 SHORT $LN20@insert_zbi
$LN19@insert_zbi:

; 350  : 					{
; 351  : 
; 352  : 						insert_low_zbuffered_scene_slot_into_3d_scene ( buffer );

  00226	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  00229	50		 push	 eax
  0022a	e8 00 00 00 00	 call	 ?insert_low_zbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_low_zbuffered_scene_slot_into_3d_scene
$LN20@insert_zbi:

; 353  : 					}
; 354  : 				}
; 355  : 			}
; 356  : 
; 357  : 			break;

  0022f	e9 6b 02 00 00	 jmp	 $LN2@insert_zbi
$LN21@insert_zbi:

; 358  : 		}
; 359  : 
; 360  : 		case OBJECT_3D_DRAW_TYPE_ZBUFFERED_OBJECT:
; 361  : 		{
; 362  : 
; 363  : 			object_3d_instance
; 364  : 				*object;
; 365  : 
; 366  : 			enum OBJECT_3D_VISIBILITY
; 367  : 				visibility;
; 368  : 
; 369  : 			object = ( object_3d_instance * ) data;

  00234	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  00237	89 45 e4	 mov	 DWORD PTR _object$6[ebp], eax

; 370  : 
; 371  : 			if ( ( !exclusive_3d_instance ) || ( exclusive_3d_instance == object ) )

  0023a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?exclusive_3d_instance@@3PAUOBJECT_3D_INSTANCE@@A, 0 ; exclusive_3d_instance
  00241	74 0a		 je	 SHORT $LN23@insert_zbi
  00243	a1 00 00 00 00	 mov	 eax, DWORD PTR ?exclusive_3d_instance@@3PAUOBJECT_3D_INSTANCE@@A ; exclusive_3d_instance
  00248	3b 45 e4	 cmp	 eax, DWORD PTR _object$6[ebp]
  0024b	75 7c		 jne	 SHORT $LN27@insert_zbi
$LN23@insert_zbi:

; 372  : 			{
; 373  : 
; 374  : 				//
; 375  : 				// Set the relative position & clip object
; 376  : 				//
; 377  : 	
; 378  : 				set_object_3d_instance_relative_position ( object );

  0024d	8b 45 e4	 mov	 eax, DWORD PTR _object$6[ebp]
  00250	50		 push	 eax
  00251	e8 00 00 00 00	 call	 ?set_object_3d_instance_relative_position@@YGXPAUOBJECT_3D_INSTANCE@@@Z ; set_object_3d_instance_relative_position

; 379  : 	
; 380  : 				visibility = get_object_3d_instance_visibility ( object );

  00256	8b 45 e4	 mov	 eax, DWORD PTR _object$6[ebp]
  00259	50		 push	 eax
  0025a	e8 00 00 00 00	 call	 ?get_object_3d_instance_visibility@@YG?AW4OBJECT_3D_VISIBILITY@@PAUOBJECT_3D_INSTANCE@@@Z ; get_object_3d_instance_visibility
  0025f	89 45 e0	 mov	 DWORD PTR _visibility$5[ebp], eax

; 381  : 	
; 382  : 				if ( visibility != OBJECT_3D_NOT_VISIBLE )

  00262	83 7d e0 03	 cmp	 DWORD PTR _visibility$5[ebp], 3
  00266	74 61		 je	 SHORT $LN27@insert_zbi

; 383  : 				{
; 384  : 	
; 385  : 					buffer = get_3d_scene_slot ();

  00268	e8 00 00 00 00	 call	 ?get_3d_scene_slot@@YGPAUSCENE_SLOT_DRAWING_LIST@@XZ ; get_3d_scene_slot
  0026d	89 45 fc	 mov	 DWORD PTR _buffer$[ebp], eax

; 386  : 		
; 387  : 					if ( buffer )

  00270	83 7d fc 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  00274	74 53		 je	 SHORT $LN27@insert_zbi

; 388  : 					{
; 389  : 	
; 390  : 						distance_bias += object->view_position.z;

  00276	8b 45 e4	 mov	 eax, DWORD PTR _object$6[ebp]
  00279	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _distance_bias$[ebp]
  0027e	f3 0f 58 40 40	 addss	 xmm0, DWORD PTR [eax+64]
  00283	f3 0f 11 45 10	 movss	 DWORD PTR _distance_bias$[ebp], xmm0

; 391  : 	
; 392  : 						buffer->type = OBJECT_3D_DRAW_TYPE_ZBUFFERED_OBJECT;

  00288	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  0028b	c7 40 08 02 00
	00 00		 mov	 DWORD PTR [eax+8], 2

; 393  : 		
; 394  : 						buffer->z = *( ( int * ) &distance_bias );

  00292	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  00295	8b 4d 10	 mov	 ecx, DWORD PTR _distance_bias$[ebp]
  00298	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 395  : 		
; 396  : 						buffer->object = object;

  0029b	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  0029e	8b 4d e4	 mov	 ecx, DWORD PTR _object$6[ebp]
  002a1	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 397  : 	
; 398  : 						if ( object->vp.y > middle_scene_slot_height )

  002a4	8b 45 e4	 mov	 eax, DWORD PTR _object$6[ebp]
  002a7	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  002ac	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?middle_scene_slot_height@@3MA
  002b3	76 0b		 jbe	 SHORT $LN26@insert_zbi

; 399  : 						{
; 400  : 	
; 401  : 							insert_high_zbuffered_scene_slot_into_3d_scene ( buffer );

  002b5	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  002b8	50		 push	 eax
  002b9	e8 00 00 00 00	 call	 ?insert_high_zbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_high_zbuffered_scene_slot_into_3d_scene

; 402  : 						}
; 403  : 						else

  002be	eb 09		 jmp	 SHORT $LN27@insert_zbi
$LN26@insert_zbi:

; 404  : 						{
; 405  : 	
; 406  : 							insert_low_zbuffered_scene_slot_into_3d_scene ( buffer );

  002c0	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  002c3	50		 push	 eax
  002c4	e8 00 00 00 00	 call	 ?insert_low_zbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_low_zbuffered_scene_slot_into_3d_scene
$LN27@insert_zbi:

; 407  : 						}
; 408  : 
; 409  : 						//
; 410  : 						// Hack in here to pre-load any textures on the object
; 411  : 						//
; 412  : 
; 413  : //						if ( active_3d_environment->infrared_mode == INFRARED_OFF )
; 414  : 						{
; 415  : 	
; 416  : //							pre_render_3d_object ( object );
; 417  : 						}
; 418  : 					}
; 419  : 				}
; 420  : 			}
; 421  : 
; 422  : 			break;

  002c9	e9 d1 01 00 00	 jmp	 $LN2@insert_zbi
$LN28@insert_zbi:

; 423  : 		}
; 424  : 
; 425  : 		case OBJECT_3D_DRAW_TYPE_SPRITE:
; 426  : 		{
; 427  : 
; 428  : 			object_3d_sprite
; 429  : 				*sprite;
; 430  : 
; 431  : 			vec3d
; 432  : 				relative_position;
; 433  : 
; 434  : 			if ( !exclusive_3d_instance )

  002ce	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?exclusive_3d_instance@@3PAUOBJECT_3D_INSTANCE@@A, 0 ; exclusive_3d_instance
  002d5	0f 85 d1 00 00
	00		 jne	 $LN33@insert_zbi

; 435  : 			{
; 436  : 	
; 437  : 				sprite = ( object_3d_sprite * ) data;

  002db	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  002de	89 45 dc	 mov	 DWORD PTR _sprite$4[ebp], eax

; 438  : 	
; 439  : 				get_position_3d_relative_position ( &sprite->position, &relative_position );

  002e1	8d 45 d0	 lea	 eax, DWORD PTR _relative_position$3[ebp]
  002e4	50		 push	 eax
  002e5	8b 4d dc	 mov	 ecx, DWORD PTR _sprite$4[ebp]
  002e8	51		 push	 ecx
  002e9	e8 00 00 00 00	 call	 ?get_position_3d_relative_position@@YGXPAUVEC3D@@0@Z ; get_position_3d_relative_position

; 440  : 	
; 441  : 				if ( relative_position.z >= clip_hither )

  002ee	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _relative_position$3[ebp+8]
  002f3	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?clip_hither@@3MA
  002fa	0f 82 ac 00 00
	00		 jb	 $LN33@insert_zbi

; 442  : 				{
; 443  : 	
; 444  : 					buffer = get_3d_scene_slot ();

  00300	e8 00 00 00 00	 call	 ?get_3d_scene_slot@@YGPAUSCENE_SLOT_DRAWING_LIST@@XZ ; get_3d_scene_slot
  00305	89 45 fc	 mov	 DWORD PTR _buffer$[ebp], eax

; 445  : 		
; 446  : 					if ( buffer )

  00308	83 7d fc 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  0030c	0f 84 9a 00 00
	00		 je	 $LN33@insert_zbi

; 447  : 					{
; 448  : 	
; 449  : 						distance_bias += relative_position.z;

  00312	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _distance_bias$[ebp]
  00317	f3 0f 58 45 d8	 addss	 xmm0, DWORD PTR _relative_position$3[ebp+8]
  0031c	f3 0f 11 45 10	 movss	 DWORD PTR _distance_bias$[ebp], xmm0

; 450  : 	
; 451  : 						buffer->type = OBJECT_3D_DRAW_TYPE_SPRITE;

  00321	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  00324	c7 40 08 10 00
	00 00		 mov	 DWORD PTR [eax+8], 16	; 00000010H

; 452  : 		
; 453  : 						buffer->z = *( ( int * ) &distance_bias );

  0032b	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  0032e	8b 4d 10	 mov	 ecx, DWORD PTR _distance_bias$[ebp]
  00331	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 454  : 		
; 455  : 						buffer->sprite.position = relative_position;

  00334	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  00337	83 c0 10	 add	 eax, 16			; 00000010H
  0033a	8b 4d d0	 mov	 ecx, DWORD PTR _relative_position$3[ebp]
  0033d	89 08		 mov	 DWORD PTR [eax], ecx
  0033f	8b 55 d4	 mov	 edx, DWORD PTR _relative_position$3[ebp+4]
  00342	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00345	8b 4d d8	 mov	 ecx, DWORD PTR _relative_position$3[ebp+8]
  00348	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 456  : 						buffer->sprite.texture = sprite->texture;

  0034b	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  0034e	8b 4d dc	 mov	 ecx, DWORD PTR _sprite$4[ebp]
  00351	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00354	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 457  : 						buffer->sprite.radius = sprite->radius;

  00357	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  0035a	8b 4d dc	 mov	 ecx, DWORD PTR _sprite$4[ebp]
  0035d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00360	89 50 20	 mov	 DWORD PTR [eax+32], edx

; 458  : 						buffer->sprite.colour = sprite->colour;

  00363	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  00366	8b 4d dc	 mov	 ecx, DWORD PTR _sprite$4[ebp]
  00369	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0036c	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 459  : 						buffer->sprite.additive = sprite->additive;

  0036f	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  00372	8b 4d dc	 mov	 ecx, DWORD PTR _sprite$4[ebp]
  00375	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00378	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 460  : 						buffer->sprite.roll = sprite->roll;

  0037b	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  0037e	8b 4d dc	 mov	 ecx, DWORD PTR _sprite$4[ebp]
  00381	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00384	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 461  : 	
; 462  : 						if ( sprite->position.y > middle_scene_slot_height )

  00387	8b 45 dc	 mov	 eax, DWORD PTR _sprite$4[ebp]
  0038a	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0038f	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?middle_scene_slot_height@@3MA
  00396	76 0b		 jbe	 SHORT $LN32@insert_zbi

; 463  : 						{
; 464  : 	
; 465  : 							insert_high_nonzbuffered_scene_slot_into_3d_scene ( buffer );

  00398	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  0039b	50		 push	 eax
  0039c	e8 00 00 00 00	 call	 ?insert_high_nonzbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_high_nonzbuffered_scene_slot_into_3d_scene

; 466  : 						}
; 467  : 						else

  003a1	eb 09		 jmp	 SHORT $LN33@insert_zbi
$LN32@insert_zbi:

; 468  : 						{
; 469  : 	
; 470  : 							insert_low_nonzbuffered_scene_slot_into_3d_scene ( buffer );

  003a3	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  003a6	50		 push	 eax
  003a7	e8 00 00 00 00	 call	 ?insert_low_nonzbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_low_nonzbuffered_scene_slot_into_3d_scene
$LN33@insert_zbi:

; 471  : 						}
; 472  : 					}
; 473  : 				}
; 474  : 			}
; 475  : 
; 476  : 			break;

  003ac	e9 ee 00 00 00	 jmp	 $LN2@insert_zbi
$LN34@insert_zbi:

; 477  : 		}
; 478  : 
; 479  : 		case OBJECT_3D_DRAW_TYPE_EXPLOSION:
; 480  : 		{
; 481  : 
; 482  : 			object_3d_explosion
; 483  : 				*explosion;
; 484  : 
; 485  : 			vec3d
; 486  : 				relative_position;
; 487  : 
; 488  : 			if ( !exclusive_3d_instance )

  003b1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?exclusive_3d_instance@@3PAUOBJECT_3D_INSTANCE@@A, 0 ; exclusive_3d_instance
  003b8	0f 85 d2 00 00
	00		 jne	 $LN39@insert_zbi

; 489  : 			{
; 490  : 	
; 491  : 				explosion = ( object_3d_explosion * ) data;

  003be	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  003c1	89 45 cc	 mov	 DWORD PTR _explosion$2[ebp], eax

; 492  : 	
; 493  : 				get_position_3d_relative_position ( &explosion->position, &relative_position );

  003c4	8d 45 c0	 lea	 eax, DWORD PTR _relative_position$1[ebp]
  003c7	50		 push	 eax
  003c8	8b 4d cc	 mov	 ecx, DWORD PTR _explosion$2[ebp]
  003cb	51		 push	 ecx
  003cc	e8 00 00 00 00	 call	 ?get_position_3d_relative_position@@YGXPAUVEC3D@@0@Z ; get_position_3d_relative_position

; 494  : 	
; 495  : 				if ( relative_position.z >= clip_hither )

  003d1	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _relative_position$1[ebp+8]
  003d6	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?clip_hither@@3MA
  003dd	0f 82 ad 00 00
	00		 jb	 $LN39@insert_zbi

; 496  : 				{
; 497  : 	
; 498  : 					buffer = get_3d_scene_slot ();

  003e3	e8 00 00 00 00	 call	 ?get_3d_scene_slot@@YGPAUSCENE_SLOT_DRAWING_LIST@@XZ ; get_3d_scene_slot
  003e8	89 45 fc	 mov	 DWORD PTR _buffer$[ebp], eax

; 499  : 		
; 500  : 					if ( buffer )

  003eb	83 7d fc 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  003ef	0f 84 9b 00 00
	00		 je	 $LN39@insert_zbi

; 501  : 					{
; 502  : 	
; 503  : 						distance_bias += relative_position.z;

  003f5	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _distance_bias$[ebp]
  003fa	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _relative_position$1[ebp+8]
  003ff	f3 0f 11 45 10	 movss	 DWORD PTR _distance_bias$[ebp], xmm0

; 504  : 	
; 505  : 						buffer->type = OBJECT_3D_DRAW_TYPE_EXPLOSION;

  00404	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  00407	c7 40 08 13 00
	00 00		 mov	 DWORD PTR [eax+8], 19	; 00000013H

; 506  : 		
; 507  : 						buffer->z = *( ( int * ) &distance_bias );

  0040e	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  00411	8b 4d 10	 mov	 ecx, DWORD PTR _distance_bias$[ebp]
  00414	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 508  : 		
; 509  : 						buffer->explosion.position = explosion->position;

  00417	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  0041a	83 c0 10	 add	 eax, 16			; 00000010H
  0041d	8b 4d cc	 mov	 ecx, DWORD PTR _explosion$2[ebp]
  00420	8b 11		 mov	 edx, DWORD PTR [ecx]
  00422	89 10		 mov	 DWORD PTR [eax], edx
  00424	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00427	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0042a	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0042d	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 510  : 						buffer->explosion.relative_position = relative_position;

  00430	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  00433	83 c0 1c	 add	 eax, 28			; 0000001cH
  00436	8b 4d c0	 mov	 ecx, DWORD PTR _relative_position$1[ebp]
  00439	89 08		 mov	 DWORD PTR [eax], ecx
  0043b	8b 55 c4	 mov	 edx, DWORD PTR _relative_position$1[ebp+4]
  0043e	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00441	8b 4d c8	 mov	 ecx, DWORD PTR _relative_position$1[ebp+8]
  00444	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 511  : 						buffer->explosion.scale = explosion->scale;

  00447	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  0044a	8b 4d cc	 mov	 ecx, DWORD PTR _explosion$2[ebp]
  0044d	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00450	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 512  : 						buffer->explosion.animation = explosion->animation;

  00453	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  00456	8b 4d cc	 mov	 ecx, DWORD PTR _explosion$2[ebp]
  00459	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0045c	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 513  : 						buffer->explosion.object_index = explosion->object_index;

  0045f	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  00462	8b 4d cc	 mov	 ecx, DWORD PTR _explosion$2[ebp]
  00465	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00468	89 50 30	 mov	 DWORD PTR [eax+48], edx

; 514  : 	
; 515  : 						if ( explosion->position.y > middle_scene_slot_height )

  0046b	8b 45 cc	 mov	 eax, DWORD PTR _explosion$2[ebp]
  0046e	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00473	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?middle_scene_slot_height@@3MA
  0047a	76 0b		 jbe	 SHORT $LN38@insert_zbi

; 516  : 						{
; 517  : 	
; 518  : 							insert_high_nonzbuffered_scene_slot_into_3d_scene ( buffer );

  0047c	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  0047f	50		 push	 eax
  00480	e8 00 00 00 00	 call	 ?insert_high_nonzbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_high_nonzbuffered_scene_slot_into_3d_scene

; 519  : 						}
; 520  : 						else

  00485	eb 09		 jmp	 SHORT $LN39@insert_zbi
$LN38@insert_zbi:

; 521  : 						{
; 522  : 	
; 523  : 							insert_low_nonzbuffered_scene_slot_into_3d_scene ( buffer );

  00487	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  0048a	50		 push	 eax
  0048b	e8 00 00 00 00	 call	 ?insert_low_nonzbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_low_nonzbuffered_scene_slot_into_3d_scene
$LN39@insert_zbi:

; 524  : 						}
; 525  : 					}
; 526  : 				}
; 527  : 			}
; 528  : 
; 529  : 			break;

  00490	eb 0d		 jmp	 SHORT $LN2@insert_zbi
$LN40@insert_zbi:

; 530  : 		}
; 531  : 
; 532  : 	
; 533  : 		default:
; 534  : 		{
; 535  : 
; 536  : 			debug_fatal ( "Unknown object type in insert_object_3d_instance_into_scene" );

  00492	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@JJJALLCE@Unknown?5object?5type?5in?5insert_o@
  00497	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0049c	83 c4 04	 add	 esp, 4
$LN2@insert_zbi:

; 537  : 
; 538  : 			break;
; 539  : 		}
; 540  : 	}
; 541  : }

  0049f	5f		 pop	 edi
  004a0	5e		 pop	 esi
  004a1	5b		 pop	 ebx
  004a2	8b e5		 mov	 esp, ebp
  004a4	5d		 pop	 ebp
  004a5	c2 0c 00	 ret	 12			; 0000000cH
$LN43@insert_zbi:
  004a8	00 00 00 00	 DD	 $LN4@insert_zbi
  004ac	00 00 00 00	 DD	 $LN21@insert_zbi
  004b0	00 00 00 00	 DD	 $LN28@insert_zbi
  004b4	00 00 00 00	 DD	 $LN34@insert_zbi
  004b8	00 00 00 00	 DD	 $LN16@insert_zbi
  004bc	00 00 00 00	 DD	 $LN40@insert_zbi
$LN42@insert_zbi:
  004c0	00		 DB	 0
  004c1	01		 DB	 1
  004c2	05		 DB	 5
  004c3	05		 DB	 5
  004c4	05		 DB	 5
  004c5	05		 DB	 5
  004c6	05		 DB	 5
  004c7	05		 DB	 5
  004c8	05		 DB	 5
  004c9	05		 DB	 5
  004ca	05		 DB	 5
  004cb	05		 DB	 5
  004cc	05		 DB	 5
  004cd	05		 DB	 5
  004ce	05		 DB	 5
  004cf	02		 DB	 2
  004d0	05		 DB	 5
  004d1	05		 DB	 5
  004d2	03		 DB	 3
  004d3	04		 DB	 4
?insert_zbiased_object_into_3d_scene@@YGXW4OBJECT_3D_DRAWING_TYPES@@PAXM@Z ENDP ; insert_zbiased_object_into_3d_scene
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjbuf.c
;	COMDAT ?insert_zbiased_relative_object_into_3d_scene@@YGXW4OBJECT_3D_DRAWING_TYPES@@PAUVEC3D@@PAXM@Z
_TEXT	SEGMENT
tv65 = -88						; size = 4
_visibility$1 = -20					; size = 4
_object$2 = -16						; size = 4
_visibility$3 = -12					; size = 4
_object$4 = -8						; size = 4
_buffer$ = -4						; size = 4
_type$ = 8						; size = 4
_relative_position$ = 12				; size = 4
_data$ = 16						; size = 4
_distance_bias$ = 20					; size = 4
?insert_zbiased_relative_object_into_3d_scene@@YGXW4OBJECT_3D_DRAWING_TYPES@@PAUVEC3D@@PAXM@Z PROC ; insert_zbiased_relative_object_into_3d_scene, COMDAT

; 601  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 602  : 
; 603  : 	scene_slot_drawing_list
; 604  : 		*buffer;
; 605  : 
; 606  : 	number_of_objects_in_3d_scene++;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_objects_in_3d_scene@@3HA ; number_of_objects_in_3d_scene
  0000e	83 c0 01	 add	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_objects_in_3d_scene@@3HA, eax ; number_of_objects_in_3d_scene

; 607  : 
; 608  : 	switch ( type )

  00016	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  00019	89 45 a8	 mov	 DWORD PTR tv65[ebp], eax
  0001c	83 7d a8 01	 cmp	 DWORD PTR tv65[ebp], 1
  00020	74 0f		 je	 SHORT $LN4@insert_zbi
  00022	83 7d a8 02	 cmp	 DWORD PTR tv65[ebp], 2
  00026	0f 84 b3 00 00
	00		 je	 $LN11@insert_zbi
  0002c	e9 59 01 00 00	 jmp	 $LN18@insert_zbi
$LN4@insert_zbi:

; 609  : 	{
; 610  : 	
; 611  : 		case OBJECT_3D_DRAW_TYPE_OBJECT:
; 612  : 		{
; 613  : 
; 614  : 			object_3d_instance
; 615  : 				*object;
; 616  : 
; 617  : 			enum OBJECT_3D_VISIBILITY
; 618  : 				visibility;
; 619  : 
; 620  : 			object = ( object_3d_instance * ) data;

  00031	8b 45 10	 mov	 eax, DWORD PTR _data$[ebp]
  00034	89 45 f8	 mov	 DWORD PTR _object$4[ebp], eax

; 621  : 
; 622  : 			if ( ( !exclusive_3d_instance ) || ( exclusive_3d_instance == object ) )

  00037	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?exclusive_3d_instance@@3PAUOBJECT_3D_INSTANCE@@A, 0 ; exclusive_3d_instance
  0003e	74 0e		 je	 SHORT $LN6@insert_zbi
  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?exclusive_3d_instance@@3PAUOBJECT_3D_INSTANCE@@A ; exclusive_3d_instance
  00045	3b 45 f8	 cmp	 eax, DWORD PTR _object$4[ebp]
  00048	0f 85 8c 00 00
	00		 jne	 $LN10@insert_zbi
$LN6@insert_zbi:

; 623  : 			{
; 624  : 
; 625  : 				//
; 626  : 				// No shadows on relative objects
; 627  : 				//
; 628  : 
; 629  : 				//
; 630  : 				// Set the relative position & clip object
; 631  : 				//
; 632  : 
; 633  : 				object->view_position = *relative_position;

  0004e	8b 45 f8	 mov	 eax, DWORD PTR _object$4[ebp]
  00051	83 c0 38	 add	 eax, 56			; 00000038H
  00054	8b 4d 0c	 mov	 ecx, DWORD PTR _relative_position$[ebp]
  00057	8b 11		 mov	 edx, DWORD PTR [ecx]
  00059	89 10		 mov	 DWORD PTR [eax], edx
  0005b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0005e	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00061	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00064	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 634  : 
; 635  : //				set_object_3d_instance_relative_position ( object );
; 636  : 	
; 637  : 				visibility = get_object_3d_instance_visibility ( object );

  00067	8b 45 f8	 mov	 eax, DWORD PTR _object$4[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?get_object_3d_instance_visibility@@YG?AW4OBJECT_3D_VISIBILITY@@PAUOBJECT_3D_INSTANCE@@@Z ; get_object_3d_instance_visibility
  00070	89 45 f4	 mov	 DWORD PTR _visibility$3[ebp], eax

; 638  : 	
; 639  : 				if ( visibility != OBJECT_3D_NOT_VISIBLE )

  00073	83 7d f4 03	 cmp	 DWORD PTR _visibility$3[ebp], 3
  00077	74 61		 je	 SHORT $LN10@insert_zbi

; 640  : 				{
; 641  : 	
; 642  : 					buffer = get_3d_scene_slot ();

  00079	e8 00 00 00 00	 call	 ?get_3d_scene_slot@@YGPAUSCENE_SLOT_DRAWING_LIST@@XZ ; get_3d_scene_slot
  0007e	89 45 fc	 mov	 DWORD PTR _buffer$[ebp], eax

; 643  : 		
; 644  : 					if ( buffer )

  00081	83 7d fc 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  00085	74 53		 je	 SHORT $LN10@insert_zbi

; 645  : 					{
; 646  : 	
; 647  : 						distance_bias += object->view_position.z;

  00087	8b 45 f8	 mov	 eax, DWORD PTR _object$4[ebp]
  0008a	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _distance_bias$[ebp]
  0008f	f3 0f 58 40 40	 addss	 xmm0, DWORD PTR [eax+64]
  00094	f3 0f 11 45 14	 movss	 DWORD PTR _distance_bias$[ebp], xmm0

; 648  : 	
; 649  : 						buffer->type = OBJECT_3D_DRAW_TYPE_OBJECT;

  00099	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  0009c	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [eax+8], 1

; 650  : 		
; 651  : 						buffer->z = *( ( int * ) &distance_bias );

  000a3	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  000a6	8b 4d 14	 mov	 ecx, DWORD PTR _distance_bias$[ebp]
  000a9	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 652  : 		
; 653  : 						buffer->object = object;

  000ac	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  000af	8b 4d f8	 mov	 ecx, DWORD PTR _object$4[ebp]
  000b2	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 654  : 	
; 655  : 						if ( object->vp.y > middle_scene_slot_height )

  000b5	8b 45 f8	 mov	 eax, DWORD PTR _object$4[ebp]
  000b8	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  000bd	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?middle_scene_slot_height@@3MA
  000c4	76 0b		 jbe	 SHORT $LN9@insert_zbi

; 656  : 						{
; 657  : 	
; 658  : 							insert_high_zbuffered_scene_slot_into_3d_scene ( buffer );

  000c6	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ?insert_high_zbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_high_zbuffered_scene_slot_into_3d_scene

; 659  : 						}
; 660  : 						else

  000cf	eb 09		 jmp	 SHORT $LN10@insert_zbi
$LN9@insert_zbi:

; 661  : 						{
; 662  : 	
; 663  : 							insert_low_zbuffered_scene_slot_into_3d_scene ( buffer );

  000d1	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 ?insert_low_zbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_low_zbuffered_scene_slot_into_3d_scene
$LN10@insert_zbi:

; 664  : 						}
; 665  : 
; 666  : 						//
; 667  : 						// Hack in here to pre-load any textures on the object
; 668  : 						//
; 669  : 
; 670  : //						if ( active_3d_environment->infrared_mode == INFRARED_OFF )
; 671  : 						{
; 672  : 	
; 673  : //							pre_render_3d_object ( object );
; 674  : 						}
; 675  : 					}
; 676  : 				}
; 677  : 			}
; 678  : 
; 679  : 			break;

  000da	e9 b8 00 00 00	 jmp	 $LN2@insert_zbi
$LN11@insert_zbi:

; 680  : 		}
; 681  : 
; 682  : 		case OBJECT_3D_DRAW_TYPE_ZBUFFERED_OBJECT:
; 683  : 		{
; 684  : 
; 685  : 			object_3d_instance
; 686  : 				*object;
; 687  : 
; 688  : 			enum OBJECT_3D_VISIBILITY
; 689  : 				visibility;
; 690  : 
; 691  : 			object = ( object_3d_instance * ) data;

  000df	8b 45 10	 mov	 eax, DWORD PTR _data$[ebp]
  000e2	89 45 f0	 mov	 DWORD PTR _object$2[ebp], eax

; 692  : 
; 693  : 			if ( ( !exclusive_3d_instance ) || ( exclusive_3d_instance == object ) )

  000e5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?exclusive_3d_instance@@3PAUOBJECT_3D_INSTANCE@@A, 0 ; exclusive_3d_instance
  000ec	74 0e		 je	 SHORT $LN13@insert_zbi
  000ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?exclusive_3d_instance@@3PAUOBJECT_3D_INSTANCE@@A ; exclusive_3d_instance
  000f3	3b 45 f0	 cmp	 eax, DWORD PTR _object$2[ebp]
  000f6	0f 85 8c 00 00
	00		 jne	 $LN17@insert_zbi
$LN13@insert_zbi:

; 694  : 			{
; 695  : 
; 696  : 				//
; 697  : 				// Set the relative position & clip object
; 698  : 				//
; 699  : 	
; 700  : 				object->view_position = *relative_position;

  000fc	8b 45 f0	 mov	 eax, DWORD PTR _object$2[ebp]
  000ff	83 c0 38	 add	 eax, 56			; 00000038H
  00102	8b 4d 0c	 mov	 ecx, DWORD PTR _relative_position$[ebp]
  00105	8b 11		 mov	 edx, DWORD PTR [ecx]
  00107	89 10		 mov	 DWORD PTR [eax], edx
  00109	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0010c	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0010f	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00112	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 701  : 
; 702  : 				visibility = get_object_3d_instance_visibility ( object );

  00115	8b 45 f0	 mov	 eax, DWORD PTR _object$2[ebp]
  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 ?get_object_3d_instance_visibility@@YG?AW4OBJECT_3D_VISIBILITY@@PAUOBJECT_3D_INSTANCE@@@Z ; get_object_3d_instance_visibility
  0011e	89 45 ec	 mov	 DWORD PTR _visibility$1[ebp], eax

; 703  : 	
; 704  : 				if ( visibility != OBJECT_3D_NOT_VISIBLE )

  00121	83 7d ec 03	 cmp	 DWORD PTR _visibility$1[ebp], 3
  00125	74 61		 je	 SHORT $LN17@insert_zbi

; 705  : 				{
; 706  : 	
; 707  : 					buffer = get_3d_scene_slot ();

  00127	e8 00 00 00 00	 call	 ?get_3d_scene_slot@@YGPAUSCENE_SLOT_DRAWING_LIST@@XZ ; get_3d_scene_slot
  0012c	89 45 fc	 mov	 DWORD PTR _buffer$[ebp], eax

; 708  : 		
; 709  : 					if ( buffer )

  0012f	83 7d fc 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  00133	74 53		 je	 SHORT $LN17@insert_zbi

; 710  : 					{
; 711  : 	
; 712  : 						distance_bias += object->view_position.z;

  00135	8b 45 f0	 mov	 eax, DWORD PTR _object$2[ebp]
  00138	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _distance_bias$[ebp]
  0013d	f3 0f 58 40 40	 addss	 xmm0, DWORD PTR [eax+64]
  00142	f3 0f 11 45 14	 movss	 DWORD PTR _distance_bias$[ebp], xmm0

; 713  : 	
; 714  : 						buffer->type = OBJECT_3D_DRAW_TYPE_ZBUFFERED_OBJECT;

  00147	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  0014a	c7 40 08 02 00
	00 00		 mov	 DWORD PTR [eax+8], 2

; 715  : 		
; 716  : 						buffer->z = *( ( int * ) &distance_bias );

  00151	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  00154	8b 4d 14	 mov	 ecx, DWORD PTR _distance_bias$[ebp]
  00157	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 717  : 		
; 718  : 						buffer->object = object;

  0015a	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  0015d	8b 4d f0	 mov	 ecx, DWORD PTR _object$2[ebp]
  00160	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 719  : 	
; 720  : 						if ( object->vp.y > middle_scene_slot_height )

  00163	8b 45 f0	 mov	 eax, DWORD PTR _object$2[ebp]
  00166	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  0016b	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?middle_scene_slot_height@@3MA
  00172	76 0b		 jbe	 SHORT $LN16@insert_zbi

; 721  : 						{
; 722  : 	
; 723  : 							insert_high_zbuffered_scene_slot_into_3d_scene ( buffer );

  00174	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  00177	50		 push	 eax
  00178	e8 00 00 00 00	 call	 ?insert_high_zbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_high_zbuffered_scene_slot_into_3d_scene

; 724  : 						}
; 725  : 						else

  0017d	eb 09		 jmp	 SHORT $LN17@insert_zbi
$LN16@insert_zbi:

; 726  : 						{
; 727  : 	
; 728  : 							insert_low_zbuffered_scene_slot_into_3d_scene ( buffer );

  0017f	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  00182	50		 push	 eax
  00183	e8 00 00 00 00	 call	 ?insert_low_zbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_low_zbuffered_scene_slot_into_3d_scene
$LN17@insert_zbi:

; 729  : 						}
; 730  : 
; 731  : 						//
; 732  : 						// Hack in here to pre-load any textures on the object
; 733  : 						//
; 734  : 
; 735  : //						if ( active_3d_environment->infrared_mode == INFRARED_OFF )
; 736  : 						{
; 737  : 	
; 738  : //							pre_render_3d_object ( object );
; 739  : 						}
; 740  : 					}
; 741  : 				}
; 742  : 			}
; 743  : 
; 744  : 			break;

  00188	eb 0d		 jmp	 SHORT $LN2@insert_zbi
$LN18@insert_zbi:

; 745  : 		}
; 746  : 
; 747  : 		default:
; 748  : 		{
; 749  : 
; 750  : 			debug_fatal ( "Unknown object type in insert_object_3d_instance_into_scene" );

  0018a	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@JJJALLCE@Unknown?5object?5type?5in?5insert_o@
  0018f	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00194	83 c4 04	 add	 esp, 4
$LN2@insert_zbi:

; 751  : 
; 752  : 			break;
; 753  : 		}
; 754  : 	}
; 755  : }

  00197	5f		 pop	 edi
  00198	5e		 pop	 esi
  00199	5b		 pop	 ebx
  0019a	8b e5		 mov	 esp, ebp
  0019c	5d		 pop	 ebp
  0019d	c2 10 00	 ret	 16			; 00000010H
?insert_zbiased_relative_object_into_3d_scene@@YGXW4OBJECT_3D_DRAWING_TYPES@@PAUVEC3D@@PAXM@Z ENDP ; insert_zbiased_relative_object_into_3d_scene
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjbuf.c
;	COMDAT ?insert_low_nonzbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z
_TEXT	SEGMENT
_object$ = 8						; size = 4
?insert_low_nonzbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z PROC ; insert_low_nonzbuffered_scene_slot_into_3d_scene, COMDAT

; 1472 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1473 : 
; 1474 : 	if ( !last_low_nonzbuffered_scene_slot_insert_point )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0
  00010	75 2e		 jne	 SHORT $LN6@insert_low

; 1475 : 	{
; 1476 : 
; 1477 : 		low_nonzbuffered_scene_slot_sorted_list = object;

  00012	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00015	a3 00 00 00 00	 mov	 DWORD PTR ?low_nonzbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax ; low_nonzbuffered_scene_slot_sorted_list

; 1478 : 
; 1479 : 		low_nonzbuffered_scene_slot_sorted_list->pred = NULL;

  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?low_nonzbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; low_nonzbuffered_scene_slot_sorted_list
  0001f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1480 : 
; 1481 : 		low_nonzbuffered_scene_slot_sorted_list->succ = NULL;

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ?low_nonzbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; low_nonzbuffered_scene_slot_sorted_list
  0002a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1482 : 
; 1483 : 		last_low_nonzbuffered_scene_slot_insert_point = low_nonzbuffered_scene_slot_sorted_list;

  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?low_nonzbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; low_nonzbuffered_scene_slot_sorted_list
  00036	a3 00 00 00 00	 mov	 DWORD PTR ?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax

; 1484 : 	}
; 1485 : 	else

  0003b	e9 78 01 00 00	 jmp	 $LN1@insert_low
$LN6@insert_low:

; 1486 : 	{
; 1487 : 
; 1488 : 		if ( object->z < last_low_nonzbuffered_scene_slot_insert_point->z )

  00040	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00043	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00049	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0004c	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  0004f	0f 8d b3 00 00
	00		 jge	 $LN4@insert_low
$LN2@insert_low:

; 1489 : 		{
; 1490 : 
; 1491 : 			//
; 1492 : 			// Search Forwards
; 1493 : 			//
; 1494 : 
; 1495 : 			while ( last_low_nonzbuffered_scene_slot_insert_point )

  00055	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0
  0005c	0f 84 a1 00 00
	00		 je	 $LN3@insert_low

; 1496 : 			{
; 1497 : 
; 1498 : 				if ( object->z >= last_low_nonzbuffered_scene_slot_insert_point->z )

  00062	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00065	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0006b	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0006e	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00071	7c 43		 jl	 SHORT $LN10@insert_low

; 1499 : 				{
; 1500 : 
; 1501 : 					//
; 1502 : 					// Insert before this one.
; 1503 : 					//
; 1504 : 
; 1505 : 					object->pred = last_low_nonzbuffered_scene_slot_insert_point->pred;

  00073	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00076	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0007c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007e	89 10		 mov	 DWORD PTR [eax], edx

; 1506 : 					object->succ = last_low_nonzbuffered_scene_slot_insert_point;

  00080	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00083	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00089	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1507 : 
; 1508 : 					last_low_nonzbuffered_scene_slot_insert_point->pred = object;

  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00091	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  00094	89 08		 mov	 DWORD PTR [eax], ecx

; 1509 : 
; 1510 : 					if ( object->pred )

  00096	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00099	83 38 00	 cmp	 DWORD PTR [eax], 0
  0009c	74 0b		 je	 SHORT $LN11@insert_low

; 1511 : 					{
; 1512 : 
; 1513 : 						object->pred->succ = object;

  0009e	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000a1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a3	8b 55 08	 mov	 edx, DWORD PTR _object$[ebp]
  000a6	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN11@insert_low:

; 1514 : 					}
; 1515 : 
; 1516 : 					last_low_nonzbuffered_scene_slot_insert_point = object;

  000a9	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000ac	a3 00 00 00 00	 mov	 DWORD PTR ?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax

; 1517 : 
; 1518 : 					return;

  000b1	e9 02 01 00 00	 jmp	 $LN1@insert_low
$LN10@insert_low:

; 1519 : 				}
; 1520 : 
; 1521 : 				if ( last_low_nonzbuffered_scene_slot_insert_point->succ )

  000b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  000bb	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000bf	74 10		 je	 SHORT $LN12@insert_low

; 1522 : 				{
; 1523 : 
; 1524 : 					last_low_nonzbuffered_scene_slot_insert_point = last_low_nonzbuffered_scene_slot_insert_point->succ;

  000c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  000c6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c9	89 0d 00 00 00
	00		 mov	 DWORD PTR ?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, ecx

; 1525 : 				}
; 1526 : 				else

  000cf	eb 2d		 jmp	 SHORT $LN13@insert_low
$LN12@insert_low:

; 1527 : 				{
; 1528 : 
; 1529 : 					//
; 1530 : 					// Insert at end of list
; 1531 : 					//
; 1532 : 
; 1533 : 					last_low_nonzbuffered_scene_slot_insert_point->succ = object;

  000d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  000d6	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  000d9	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1534 : 
; 1535 : 					object->pred = last_low_nonzbuffered_scene_slot_insert_point;

  000dc	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  000e5	89 08		 mov	 DWORD PTR [eax], ecx

; 1536 : 
; 1537 : 					object->succ = NULL;

  000e7	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000ea	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1538 : 
; 1539 : 					last_low_nonzbuffered_scene_slot_insert_point = object;

  000f1	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000f4	a3 00 00 00 00	 mov	 DWORD PTR ?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax

; 1540 : 
; 1541 : 					return;

  000f9	e9 ba 00 00 00	 jmp	 $LN1@insert_low
$LN13@insert_low:

; 1542 : 				}
; 1543 : 			}

  000fe	e9 52 ff ff ff	 jmp	 $LN2@insert_low
$LN3@insert_low:

; 1544 : 		}
; 1545 : 		else

  00103	e9 b0 00 00 00	 jmp	 $LN1@insert_low
$LN4@insert_low:

; 1546 : 		{
; 1547 : 
; 1548 : 			//
; 1549 : 			// Search Backwards
; 1550 : 			//
; 1551 : 
; 1552 : 			while ( last_low_nonzbuffered_scene_slot_insert_point )

  00108	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0
  0010f	0f 84 a3 00 00
	00		 je	 $LN1@insert_low

; 1553 : 			{
; 1554 : 
; 1555 : 				if ( object->z <= last_low_nonzbuffered_scene_slot_insert_point->z )

  00115	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00118	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0011e	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00121	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00124	7f 43		 jg	 SHORT $LN14@insert_low

; 1556 : 				{
; 1557 : 
; 1558 : 					//
; 1559 : 					// Insert after this one.
; 1560 : 					//
; 1561 : 
; 1562 : 					object->pred = last_low_nonzbuffered_scene_slot_insert_point;

  00126	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00129	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0012f	89 08		 mov	 DWORD PTR [eax], ecx

; 1563 : 					object->succ = last_low_nonzbuffered_scene_slot_insert_point->succ;

  00131	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00134	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0013a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0013d	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1564 : 
; 1565 : 					last_low_nonzbuffered_scene_slot_insert_point->succ = object;

  00140	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00145	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  00148	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1566 : 
; 1567 : 					if ( object->succ )

  0014b	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0014e	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00152	74 0b		 je	 SHORT $LN15@insert_low

; 1568 : 					{
; 1569 : 
; 1570 : 						object->succ->pred = object;

  00154	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00157	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0015a	8b 55 08	 mov	 edx, DWORD PTR _object$[ebp]
  0015d	89 11		 mov	 DWORD PTR [ecx], edx
$LN15@insert_low:

; 1571 : 					}
; 1572 : 
; 1573 : 					last_low_nonzbuffered_scene_slot_insert_point = object;

  0015f	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00162	a3 00 00 00 00	 mov	 DWORD PTR ?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax

; 1574 : 
; 1575 : 					return;

  00167	eb 4f		 jmp	 SHORT $LN1@insert_low
$LN14@insert_low:

; 1576 : 				}
; 1577 : 
; 1578 : 				if ( last_low_nonzbuffered_scene_slot_insert_point->pred )

  00169	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0016e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00171	74 0f		 je	 SHORT $LN16@insert_low

; 1579 : 				{
; 1580 : 
; 1581 : 					last_low_nonzbuffered_scene_slot_insert_point = last_low_nonzbuffered_scene_slot_insert_point->pred;

  00173	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00178	8b 08		 mov	 ecx, DWORD PTR [eax]
  0017a	89 0d 00 00 00
	00		 mov	 DWORD PTR ?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, ecx

; 1582 : 				}
; 1583 : 				else

  00180	eb 31		 jmp	 SHORT $LN17@insert_low
$LN16@insert_low:

; 1584 : 				{
; 1585 : 
; 1586 : 					//
; 1587 : 					// Insert at start of list
; 1588 : 					//
; 1589 : 
; 1590 : 					low_nonzbuffered_scene_slot_sorted_list->pred = object;

  00182	a1 00 00 00 00	 mov	 eax, DWORD PTR ?low_nonzbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; low_nonzbuffered_scene_slot_sorted_list
  00187	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  0018a	89 08		 mov	 DWORD PTR [eax], ecx

; 1591 : 
; 1592 : 					object->succ = low_nonzbuffered_scene_slot_sorted_list;

  0018c	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0018f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?low_nonzbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; low_nonzbuffered_scene_slot_sorted_list
  00195	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1593 : 					object->pred = NULL;

  00198	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0019b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1594 : 
; 1595 : 					low_nonzbuffered_scene_slot_sorted_list = object;

  001a1	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  001a4	a3 00 00 00 00	 mov	 DWORD PTR ?low_nonzbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax ; low_nonzbuffered_scene_slot_sorted_list

; 1596 : 
; 1597 : 					last_low_nonzbuffered_scene_slot_insert_point = object;

  001a9	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  001ac	a3 00 00 00 00	 mov	 DWORD PTR ?last_low_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax

; 1598 : 
; 1599 : 					return;

  001b1	eb 05		 jmp	 SHORT $LN1@insert_low
$LN17@insert_low:

; 1600 : 				}
; 1601 : 			}

  001b3	e9 50 ff ff ff	 jmp	 $LN4@insert_low
$LN1@insert_low:

; 1602 : 		}
; 1603 : 	}
; 1604 : }

  001b8	5f		 pop	 edi
  001b9	5e		 pop	 esi
  001ba	5b		 pop	 ebx
  001bb	8b e5		 mov	 esp, ebp
  001bd	5d		 pop	 ebp
  001be	c2 04 00	 ret	 4
?insert_low_nonzbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ENDP ; insert_low_nonzbuffered_scene_slot_into_3d_scene
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjbuf.c
;	COMDAT ?insert_low_zbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z
_TEXT	SEGMENT
_object$ = 8						; size = 4
?insert_low_zbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z PROC ; insert_low_zbuffered_scene_slot_into_3d_scene, COMDAT

; 1333 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1334 : 
; 1335 : 	if ( !last_low_zbuffered_scene_slot_insert_point )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0
  00010	75 2e		 jne	 SHORT $LN6@insert_low

; 1336 : 	{
; 1337 : 
; 1338 : 		low_zbuffered_scene_slot_sorted_list = object;

  00012	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00015	a3 00 00 00 00	 mov	 DWORD PTR ?low_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax ; low_zbuffered_scene_slot_sorted_list

; 1339 : 
; 1340 : 		low_zbuffered_scene_slot_sorted_list->pred = NULL;

  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?low_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; low_zbuffered_scene_slot_sorted_list
  0001f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1341 : 
; 1342 : 		low_zbuffered_scene_slot_sorted_list->succ = NULL;

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ?low_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; low_zbuffered_scene_slot_sorted_list
  0002a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1343 : 
; 1344 : 		last_low_zbuffered_scene_slot_insert_point = low_zbuffered_scene_slot_sorted_list;

  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?low_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; low_zbuffered_scene_slot_sorted_list
  00036	a3 00 00 00 00	 mov	 DWORD PTR ?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax

; 1345 : 	}
; 1346 : 	else

  0003b	e9 78 01 00 00	 jmp	 $LN1@insert_low
$LN6@insert_low:

; 1347 : 	{
; 1348 : 
; 1349 : 		if ( object->z < last_low_zbuffered_scene_slot_insert_point->z )

  00040	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00043	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00049	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0004c	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  0004f	0f 8d b3 00 00
	00		 jge	 $LN4@insert_low
$LN2@insert_low:

; 1350 : 		{
; 1351 : 
; 1352 : 			//
; 1353 : 			// Search Forwards
; 1354 : 			//
; 1355 : 
; 1356 : 			while ( last_low_zbuffered_scene_slot_insert_point )

  00055	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0
  0005c	0f 84 a1 00 00
	00		 je	 $LN3@insert_low

; 1357 : 			{
; 1358 : 
; 1359 : 				if ( object->z >= last_low_zbuffered_scene_slot_insert_point->z )

  00062	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00065	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0006b	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0006e	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00071	7c 43		 jl	 SHORT $LN10@insert_low

; 1360 : 				{
; 1361 : 
; 1362 : 					//
; 1363 : 					// Insert before this one.
; 1364 : 					//
; 1365 : 
; 1366 : 					object->pred = last_low_zbuffered_scene_slot_insert_point->pred;

  00073	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00076	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0007c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007e	89 10		 mov	 DWORD PTR [eax], edx

; 1367 : 					object->succ = last_low_zbuffered_scene_slot_insert_point;

  00080	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00083	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00089	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1368 : 
; 1369 : 					last_low_zbuffered_scene_slot_insert_point->pred = object;

  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00091	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  00094	89 08		 mov	 DWORD PTR [eax], ecx

; 1370 : 
; 1371 : 					if ( object->pred )

  00096	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00099	83 38 00	 cmp	 DWORD PTR [eax], 0
  0009c	74 0b		 je	 SHORT $LN11@insert_low

; 1372 : 					{
; 1373 : 
; 1374 : 						object->pred->succ = object;

  0009e	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000a1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a3	8b 55 08	 mov	 edx, DWORD PTR _object$[ebp]
  000a6	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN11@insert_low:

; 1375 : 					}
; 1376 : 
; 1377 : 					last_low_zbuffered_scene_slot_insert_point = object;

  000a9	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000ac	a3 00 00 00 00	 mov	 DWORD PTR ?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax

; 1378 : 
; 1379 : 					return;

  000b1	e9 02 01 00 00	 jmp	 $LN1@insert_low
$LN10@insert_low:

; 1380 : 				}
; 1381 : 
; 1382 : 				if ( last_low_zbuffered_scene_slot_insert_point->succ )

  000b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  000bb	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000bf	74 10		 je	 SHORT $LN12@insert_low

; 1383 : 				{
; 1384 : 
; 1385 : 					last_low_zbuffered_scene_slot_insert_point = last_low_zbuffered_scene_slot_insert_point->succ;

  000c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  000c6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c9	89 0d 00 00 00
	00		 mov	 DWORD PTR ?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, ecx

; 1386 : 				}
; 1387 : 				else

  000cf	eb 2d		 jmp	 SHORT $LN13@insert_low
$LN12@insert_low:

; 1388 : 				{
; 1389 : 
; 1390 : 					//
; 1391 : 					// Insert at end of list
; 1392 : 					//
; 1393 : 
; 1394 : 					last_low_zbuffered_scene_slot_insert_point->succ = object;

  000d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  000d6	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  000d9	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1395 : 
; 1396 : 					object->pred = last_low_zbuffered_scene_slot_insert_point;

  000dc	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  000e5	89 08		 mov	 DWORD PTR [eax], ecx

; 1397 : 
; 1398 : 					object->succ = NULL;

  000e7	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000ea	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1399 : 
; 1400 : 					last_low_zbuffered_scene_slot_insert_point = object;

  000f1	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000f4	a3 00 00 00 00	 mov	 DWORD PTR ?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax

; 1401 : 
; 1402 : 					return;

  000f9	e9 ba 00 00 00	 jmp	 $LN1@insert_low
$LN13@insert_low:

; 1403 : 				}
; 1404 : 			}

  000fe	e9 52 ff ff ff	 jmp	 $LN2@insert_low
$LN3@insert_low:

; 1405 : 		}
; 1406 : 		else

  00103	e9 b0 00 00 00	 jmp	 $LN1@insert_low
$LN4@insert_low:

; 1407 : 		{
; 1408 : 
; 1409 : 			//
; 1410 : 			// Search Backwards
; 1411 : 			//
; 1412 : 
; 1413 : 			while ( last_low_zbuffered_scene_slot_insert_point )

  00108	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0
  0010f	0f 84 a3 00 00
	00		 je	 $LN1@insert_low

; 1414 : 			{
; 1415 : 
; 1416 : 				if ( object->z <= last_low_zbuffered_scene_slot_insert_point->z )

  00115	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00118	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0011e	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00121	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00124	7f 43		 jg	 SHORT $LN14@insert_low

; 1417 : 				{
; 1418 : 
; 1419 : 					//
; 1420 : 					// Insert after this one.
; 1421 : 					//
; 1422 : 
; 1423 : 					object->pred = last_low_zbuffered_scene_slot_insert_point;

  00126	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00129	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0012f	89 08		 mov	 DWORD PTR [eax], ecx

; 1424 : 					object->succ = last_low_zbuffered_scene_slot_insert_point->succ;

  00131	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00134	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0013a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0013d	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1425 : 
; 1426 : 					last_low_zbuffered_scene_slot_insert_point->succ = object;

  00140	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00145	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  00148	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1427 : 
; 1428 : 					if ( object->succ )

  0014b	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0014e	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00152	74 0b		 je	 SHORT $LN15@insert_low

; 1429 : 					{
; 1430 : 
; 1431 : 						object->succ->pred = object;

  00154	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00157	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0015a	8b 55 08	 mov	 edx, DWORD PTR _object$[ebp]
  0015d	89 11		 mov	 DWORD PTR [ecx], edx
$LN15@insert_low:

; 1432 : 					}
; 1433 : 
; 1434 : 					last_low_zbuffered_scene_slot_insert_point = object;

  0015f	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00162	a3 00 00 00 00	 mov	 DWORD PTR ?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax

; 1435 : 
; 1436 : 					return;

  00167	eb 4f		 jmp	 SHORT $LN1@insert_low
$LN14@insert_low:

; 1437 : 				}
; 1438 : 
; 1439 : 				if ( last_low_zbuffered_scene_slot_insert_point->pred )

  00169	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0016e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00171	74 0f		 je	 SHORT $LN16@insert_low

; 1440 : 				{
; 1441 : 
; 1442 : 					last_low_zbuffered_scene_slot_insert_point = last_low_zbuffered_scene_slot_insert_point->pred;

  00173	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00178	8b 08		 mov	 ecx, DWORD PTR [eax]
  0017a	89 0d 00 00 00
	00		 mov	 DWORD PTR ?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, ecx

; 1443 : 				}
; 1444 : 				else

  00180	eb 31		 jmp	 SHORT $LN17@insert_low
$LN16@insert_low:

; 1445 : 				{
; 1446 : 
; 1447 : 					//
; 1448 : 					// Insert at start of list
; 1449 : 					//
; 1450 : 
; 1451 : 					low_zbuffered_scene_slot_sorted_list->pred = object;

  00182	a1 00 00 00 00	 mov	 eax, DWORD PTR ?low_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; low_zbuffered_scene_slot_sorted_list
  00187	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  0018a	89 08		 mov	 DWORD PTR [eax], ecx

; 1452 : 
; 1453 : 					object->succ = low_zbuffered_scene_slot_sorted_list;

  0018c	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0018f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?low_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; low_zbuffered_scene_slot_sorted_list
  00195	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1454 : 					object->pred = NULL;

  00198	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0019b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1455 : 
; 1456 : 					low_zbuffered_scene_slot_sorted_list = object;

  001a1	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  001a4	a3 00 00 00 00	 mov	 DWORD PTR ?low_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax ; low_zbuffered_scene_slot_sorted_list

; 1457 : 
; 1458 : 					last_low_zbuffered_scene_slot_insert_point = object;

  001a9	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  001ac	a3 00 00 00 00	 mov	 DWORD PTR ?last_low_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax

; 1459 : 
; 1460 : 					return;

  001b1	eb 05		 jmp	 SHORT $LN1@insert_low
$LN17@insert_low:

; 1461 : 				}
; 1462 : 			}

  001b3	e9 50 ff ff ff	 jmp	 $LN4@insert_low
$LN1@insert_low:

; 1463 : 		}
; 1464 : 	}
; 1465 : }

  001b8	5f		 pop	 edi
  001b9	5e		 pop	 esi
  001ba	5b		 pop	 ebx
  001bb	8b e5		 mov	 esp, ebp
  001bd	5d		 pop	 ebp
  001be	c2 04 00	 ret	 4
?insert_low_zbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ENDP ; insert_low_zbuffered_scene_slot_into_3d_scene
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjbuf.c
;	COMDAT ?insert_middle_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z
_TEXT	SEGMENT
_object$ = 8						; size = 4
?insert_middle_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z PROC ; insert_middle_scene_slot_into_3d_scene, COMDAT

; 1194 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1195 : 
; 1196 : 	if ( !last_middle_scene_slot_insert_point )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?last_middle_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0
  00010	75 2e		 jne	 SHORT $LN6@insert_mid

; 1197 : 	{
; 1198 : 
; 1199 : 		middle_scene_slot_sorted_list = object;

  00012	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00015	a3 00 00 00 00	 mov	 DWORD PTR ?middle_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax ; middle_scene_slot_sorted_list

; 1200 : 
; 1201 : 		middle_scene_slot_sorted_list->pred = NULL;

  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?middle_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; middle_scene_slot_sorted_list
  0001f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1202 : 
; 1203 : 		middle_scene_slot_sorted_list->succ = NULL;

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ?middle_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; middle_scene_slot_sorted_list
  0002a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1204 : 
; 1205 : 		last_middle_scene_slot_insert_point = middle_scene_slot_sorted_list;

  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?middle_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; middle_scene_slot_sorted_list
  00036	a3 00 00 00 00	 mov	 DWORD PTR ?last_middle_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax

; 1206 : 	}
; 1207 : 	else

  0003b	e9 78 01 00 00	 jmp	 $LN1@insert_mid
$LN6@insert_mid:

; 1208 : 	{
; 1209 : 
; 1210 : 		if ( object->z < last_middle_scene_slot_insert_point->z )

  00040	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00043	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_middle_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00049	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0004c	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  0004f	0f 8d b3 00 00
	00		 jge	 $LN4@insert_mid
$LN2@insert_mid:

; 1211 : 		{
; 1212 : 
; 1213 : 			//
; 1214 : 			// Search Forwards
; 1215 : 			//
; 1216 : 
; 1217 : 			while ( last_middle_scene_slot_insert_point )

  00055	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?last_middle_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0
  0005c	0f 84 a1 00 00
	00		 je	 $LN3@insert_mid

; 1218 : 			{
; 1219 : 
; 1220 : 				if ( object->z >= last_middle_scene_slot_insert_point->z )

  00062	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00065	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_middle_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0006b	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0006e	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00071	7c 43		 jl	 SHORT $LN10@insert_mid

; 1221 : 				{
; 1222 : 
; 1223 : 					//
; 1224 : 					// Insert before this one.
; 1225 : 					//
; 1226 : 
; 1227 : 					object->pred = last_middle_scene_slot_insert_point->pred;

  00073	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00076	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_middle_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0007c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007e	89 10		 mov	 DWORD PTR [eax], edx

; 1228 : 					object->succ = last_middle_scene_slot_insert_point;

  00080	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00083	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_middle_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00089	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1229 : 
; 1230 : 					last_middle_scene_slot_insert_point->pred = object;

  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_middle_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00091	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  00094	89 08		 mov	 DWORD PTR [eax], ecx

; 1231 : 
; 1232 : 					if ( object->pred )

  00096	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00099	83 38 00	 cmp	 DWORD PTR [eax], 0
  0009c	74 0b		 je	 SHORT $LN11@insert_mid

; 1233 : 					{
; 1234 : 
; 1235 : 						object->pred->succ = object;

  0009e	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000a1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a3	8b 55 08	 mov	 edx, DWORD PTR _object$[ebp]
  000a6	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN11@insert_mid:

; 1236 : 					}
; 1237 : 
; 1238 : 					last_middle_scene_slot_insert_point = object;

  000a9	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000ac	a3 00 00 00 00	 mov	 DWORD PTR ?last_middle_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax

; 1239 : 
; 1240 : 					return;

  000b1	e9 02 01 00 00	 jmp	 $LN1@insert_mid
$LN10@insert_mid:

; 1241 : 				}
; 1242 : 
; 1243 : 				if ( last_middle_scene_slot_insert_point->succ )

  000b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_middle_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  000bb	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000bf	74 10		 je	 SHORT $LN12@insert_mid

; 1244 : 				{
; 1245 : 
; 1246 : 					last_middle_scene_slot_insert_point = last_middle_scene_slot_insert_point->succ;

  000c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_middle_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  000c6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c9	89 0d 00 00 00
	00		 mov	 DWORD PTR ?last_middle_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, ecx

; 1247 : 				}
; 1248 : 				else

  000cf	eb 2d		 jmp	 SHORT $LN13@insert_mid
$LN12@insert_mid:

; 1249 : 				{
; 1250 : 
; 1251 : 					//
; 1252 : 					// Insert at end of list
; 1253 : 					//
; 1254 : 
; 1255 : 					last_middle_scene_slot_insert_point->succ = object;

  000d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_middle_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  000d6	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  000d9	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1256 : 
; 1257 : 					object->pred = last_middle_scene_slot_insert_point;

  000dc	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_middle_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  000e5	89 08		 mov	 DWORD PTR [eax], ecx

; 1258 : 
; 1259 : 					object->succ = NULL;

  000e7	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000ea	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1260 : 
; 1261 : 					last_middle_scene_slot_insert_point = object;

  000f1	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000f4	a3 00 00 00 00	 mov	 DWORD PTR ?last_middle_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax

; 1262 : 
; 1263 : 					return;

  000f9	e9 ba 00 00 00	 jmp	 $LN1@insert_mid
$LN13@insert_mid:

; 1264 : 				}
; 1265 : 			}

  000fe	e9 52 ff ff ff	 jmp	 $LN2@insert_mid
$LN3@insert_mid:

; 1266 : 		}
; 1267 : 		else

  00103	e9 b0 00 00 00	 jmp	 $LN1@insert_mid
$LN4@insert_mid:

; 1268 : 		{
; 1269 : 
; 1270 : 			//
; 1271 : 			// Search Backwards
; 1272 : 			//
; 1273 : 
; 1274 : 			while ( last_middle_scene_slot_insert_point )

  00108	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?last_middle_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0
  0010f	0f 84 a3 00 00
	00		 je	 $LN1@insert_mid

; 1275 : 			{
; 1276 : 
; 1277 : 				if ( object->z <= last_middle_scene_slot_insert_point->z )

  00115	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00118	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_middle_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0011e	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00121	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00124	7f 43		 jg	 SHORT $LN14@insert_mid

; 1278 : 				{
; 1279 : 
; 1280 : 					//
; 1281 : 					// Insert after this one.
; 1282 : 					//
; 1283 : 
; 1284 : 					object->pred = last_middle_scene_slot_insert_point;

  00126	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00129	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_middle_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0012f	89 08		 mov	 DWORD PTR [eax], ecx

; 1285 : 					object->succ = last_middle_scene_slot_insert_point->succ;

  00131	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00134	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_middle_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0013a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0013d	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1286 : 
; 1287 : 					last_middle_scene_slot_insert_point->succ = object;

  00140	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_middle_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00145	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  00148	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1288 : 
; 1289 : 					if ( object->succ )

  0014b	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0014e	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00152	74 0b		 je	 SHORT $LN15@insert_mid

; 1290 : 					{
; 1291 : 
; 1292 : 						object->succ->pred = object;

  00154	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00157	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0015a	8b 55 08	 mov	 edx, DWORD PTR _object$[ebp]
  0015d	89 11		 mov	 DWORD PTR [ecx], edx
$LN15@insert_mid:

; 1293 : 					}
; 1294 : 
; 1295 : 					last_middle_scene_slot_insert_point = object;

  0015f	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00162	a3 00 00 00 00	 mov	 DWORD PTR ?last_middle_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax

; 1296 : 
; 1297 : 					return;

  00167	eb 4f		 jmp	 SHORT $LN1@insert_mid
$LN14@insert_mid:

; 1298 : 				}
; 1299 : 
; 1300 : 				if ( last_middle_scene_slot_insert_point->pred )

  00169	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_middle_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0016e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00171	74 0f		 je	 SHORT $LN16@insert_mid

; 1301 : 				{
; 1302 : 
; 1303 : 					last_middle_scene_slot_insert_point = last_middle_scene_slot_insert_point->pred;

  00173	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_middle_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00178	8b 08		 mov	 ecx, DWORD PTR [eax]
  0017a	89 0d 00 00 00
	00		 mov	 DWORD PTR ?last_middle_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, ecx

; 1304 : 				}
; 1305 : 				else

  00180	eb 31		 jmp	 SHORT $LN17@insert_mid
$LN16@insert_mid:

; 1306 : 				{
; 1307 : 
; 1308 : 					//
; 1309 : 					// Insert at start of list
; 1310 : 					//
; 1311 : 
; 1312 : 					middle_scene_slot_sorted_list->pred = object;

  00182	a1 00 00 00 00	 mov	 eax, DWORD PTR ?middle_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; middle_scene_slot_sorted_list
  00187	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  0018a	89 08		 mov	 DWORD PTR [eax], ecx

; 1313 : 
; 1314 : 					object->succ = middle_scene_slot_sorted_list;

  0018c	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0018f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?middle_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; middle_scene_slot_sorted_list
  00195	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1315 : 					object->pred = NULL;

  00198	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0019b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1316 : 
; 1317 : 					middle_scene_slot_sorted_list = object;

  001a1	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  001a4	a3 00 00 00 00	 mov	 DWORD PTR ?middle_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax ; middle_scene_slot_sorted_list

; 1318 : 
; 1319 : 					last_middle_scene_slot_insert_point = object;

  001a9	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  001ac	a3 00 00 00 00	 mov	 DWORD PTR ?last_middle_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax

; 1320 : 
; 1321 : 					return;

  001b1	eb 05		 jmp	 SHORT $LN1@insert_mid
$LN17@insert_mid:

; 1322 : 				}
; 1323 : 			}

  001b3	e9 50 ff ff ff	 jmp	 $LN4@insert_mid
$LN1@insert_mid:

; 1324 : 		}
; 1325 : 	}
; 1326 : }

  001b8	5f		 pop	 edi
  001b9	5e		 pop	 esi
  001ba	5b		 pop	 ebx
  001bb	8b e5		 mov	 esp, ebp
  001bd	5d		 pop	 ebp
  001be	c2 04 00	 ret	 4
?insert_middle_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ENDP ; insert_middle_scene_slot_into_3d_scene
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjbuf.c
;	COMDAT ?insert_high_nonzbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z
_TEXT	SEGMENT
_object$ = 8						; size = 4
?insert_high_nonzbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z PROC ; insert_high_nonzbuffered_scene_slot_into_3d_scene, COMDAT

; 1055 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1056 : 
; 1057 : 	if ( !last_high_nonzbuffered_scene_slot_insert_point )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0
  00010	75 2e		 jne	 SHORT $LN6@insert_hig

; 1058 : 	{
; 1059 : 
; 1060 : 		high_nonzbuffered_scene_slot_sorted_list = object;

  00012	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00015	a3 00 00 00 00	 mov	 DWORD PTR ?high_nonzbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax ; high_nonzbuffered_scene_slot_sorted_list

; 1061 : 
; 1062 : 		high_nonzbuffered_scene_slot_sorted_list->pred = NULL;

  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?high_nonzbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; high_nonzbuffered_scene_slot_sorted_list
  0001f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1063 : 
; 1064 : 		high_nonzbuffered_scene_slot_sorted_list->succ = NULL;

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ?high_nonzbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; high_nonzbuffered_scene_slot_sorted_list
  0002a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1065 : 
; 1066 : 		last_high_nonzbuffered_scene_slot_insert_point = high_nonzbuffered_scene_slot_sorted_list;

  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?high_nonzbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; high_nonzbuffered_scene_slot_sorted_list
  00036	a3 00 00 00 00	 mov	 DWORD PTR ?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax

; 1067 : 	}
; 1068 : 	else

  0003b	e9 78 01 00 00	 jmp	 $LN1@insert_hig
$LN6@insert_hig:

; 1069 : 	{
; 1070 : 
; 1071 : 		if ( object->z < last_high_nonzbuffered_scene_slot_insert_point->z )

  00040	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00043	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00049	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0004c	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  0004f	0f 8d b3 00 00
	00		 jge	 $LN4@insert_hig
$LN2@insert_hig:

; 1072 : 		{
; 1073 : 
; 1074 : 			//
; 1075 : 			// Search Forwards
; 1076 : 			//
; 1077 : 
; 1078 : 			while ( last_high_nonzbuffered_scene_slot_insert_point )

  00055	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0
  0005c	0f 84 a1 00 00
	00		 je	 $LN3@insert_hig

; 1079 : 			{
; 1080 : 
; 1081 : 				if ( object->z >= last_high_nonzbuffered_scene_slot_insert_point->z )

  00062	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00065	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0006b	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0006e	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00071	7c 43		 jl	 SHORT $LN10@insert_hig

; 1082 : 				{
; 1083 : 
; 1084 : 					//
; 1085 : 					// Insert before this one.
; 1086 : 					//
; 1087 : 
; 1088 : 					object->pred = last_high_nonzbuffered_scene_slot_insert_point->pred;

  00073	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00076	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0007c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007e	89 10		 mov	 DWORD PTR [eax], edx

; 1089 : 					object->succ = last_high_nonzbuffered_scene_slot_insert_point;

  00080	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00083	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00089	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1090 : 
; 1091 : 					last_high_nonzbuffered_scene_slot_insert_point->pred = object;

  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00091	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  00094	89 08		 mov	 DWORD PTR [eax], ecx

; 1092 : 
; 1093 : 					if ( object->pred )

  00096	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00099	83 38 00	 cmp	 DWORD PTR [eax], 0
  0009c	74 0b		 je	 SHORT $LN11@insert_hig

; 1094 : 					{
; 1095 : 
; 1096 : 						object->pred->succ = object;

  0009e	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000a1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a3	8b 55 08	 mov	 edx, DWORD PTR _object$[ebp]
  000a6	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN11@insert_hig:

; 1097 : 					}
; 1098 : 
; 1099 : 					last_high_nonzbuffered_scene_slot_insert_point = object;

  000a9	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000ac	a3 00 00 00 00	 mov	 DWORD PTR ?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax

; 1100 : 
; 1101 : 					return;

  000b1	e9 02 01 00 00	 jmp	 $LN1@insert_hig
$LN10@insert_hig:

; 1102 : 				}
; 1103 : 
; 1104 : 				if ( last_high_nonzbuffered_scene_slot_insert_point->succ )

  000b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  000bb	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000bf	74 10		 je	 SHORT $LN12@insert_hig

; 1105 : 				{
; 1106 : 
; 1107 : 					last_high_nonzbuffered_scene_slot_insert_point = last_high_nonzbuffered_scene_slot_insert_point->succ;

  000c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  000c6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c9	89 0d 00 00 00
	00		 mov	 DWORD PTR ?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, ecx

; 1108 : 				}
; 1109 : 				else

  000cf	eb 2d		 jmp	 SHORT $LN13@insert_hig
$LN12@insert_hig:

; 1110 : 				{
; 1111 : 
; 1112 : 					//
; 1113 : 					// Insert at end of list
; 1114 : 					//
; 1115 : 
; 1116 : 					last_high_nonzbuffered_scene_slot_insert_point->succ = object;

  000d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  000d6	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  000d9	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1117 : 
; 1118 : 					object->pred = last_high_nonzbuffered_scene_slot_insert_point;

  000dc	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  000e5	89 08		 mov	 DWORD PTR [eax], ecx

; 1119 : 
; 1120 : 					object->succ = NULL;

  000e7	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000ea	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1121 : 
; 1122 : 					last_high_nonzbuffered_scene_slot_insert_point = object;

  000f1	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000f4	a3 00 00 00 00	 mov	 DWORD PTR ?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax

; 1123 : 
; 1124 : 					return;

  000f9	e9 ba 00 00 00	 jmp	 $LN1@insert_hig
$LN13@insert_hig:

; 1125 : 				}
; 1126 : 			}

  000fe	e9 52 ff ff ff	 jmp	 $LN2@insert_hig
$LN3@insert_hig:

; 1127 : 		}
; 1128 : 		else

  00103	e9 b0 00 00 00	 jmp	 $LN1@insert_hig
$LN4@insert_hig:

; 1129 : 		{
; 1130 : 
; 1131 : 			//
; 1132 : 			// Search Backwards
; 1133 : 			//
; 1134 : 
; 1135 : 			while ( last_high_nonzbuffered_scene_slot_insert_point )

  00108	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0
  0010f	0f 84 a3 00 00
	00		 je	 $LN1@insert_hig

; 1136 : 			{
; 1137 : 
; 1138 : 				if ( object->z <= last_high_nonzbuffered_scene_slot_insert_point->z )

  00115	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00118	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0011e	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00121	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00124	7f 43		 jg	 SHORT $LN14@insert_hig

; 1139 : 				{
; 1140 : 
; 1141 : 					//
; 1142 : 					// Insert after this one.
; 1143 : 					//
; 1144 : 
; 1145 : 					object->pred = last_high_nonzbuffered_scene_slot_insert_point;

  00126	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00129	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0012f	89 08		 mov	 DWORD PTR [eax], ecx

; 1146 : 					object->succ = last_high_nonzbuffered_scene_slot_insert_point->succ;

  00131	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00134	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0013a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0013d	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1147 : 
; 1148 : 					last_high_nonzbuffered_scene_slot_insert_point->succ = object;

  00140	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00145	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  00148	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1149 : 
; 1150 : 					if ( object->succ )

  0014b	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0014e	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00152	74 0b		 je	 SHORT $LN15@insert_hig

; 1151 : 					{
; 1152 : 
; 1153 : 						object->succ->pred = object;

  00154	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00157	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0015a	8b 55 08	 mov	 edx, DWORD PTR _object$[ebp]
  0015d	89 11		 mov	 DWORD PTR [ecx], edx
$LN15@insert_hig:

; 1154 : 					}
; 1155 : 
; 1156 : 					last_high_nonzbuffered_scene_slot_insert_point = object;

  0015f	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00162	a3 00 00 00 00	 mov	 DWORD PTR ?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax

; 1157 : 
; 1158 : 					return;

  00167	eb 4f		 jmp	 SHORT $LN1@insert_hig
$LN14@insert_hig:

; 1159 : 				}
; 1160 : 
; 1161 : 				if ( last_high_nonzbuffered_scene_slot_insert_point->pred )

  00169	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0016e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00171	74 0f		 je	 SHORT $LN16@insert_hig

; 1162 : 				{
; 1163 : 
; 1164 : 					last_high_nonzbuffered_scene_slot_insert_point = last_high_nonzbuffered_scene_slot_insert_point->pred;

  00173	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00178	8b 08		 mov	 ecx, DWORD PTR [eax]
  0017a	89 0d 00 00 00
	00		 mov	 DWORD PTR ?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, ecx

; 1165 : 				}
; 1166 : 				else

  00180	eb 31		 jmp	 SHORT $LN17@insert_hig
$LN16@insert_hig:

; 1167 : 				{
; 1168 : 
; 1169 : 					//
; 1170 : 					// Insert at start of list
; 1171 : 					//
; 1172 : 
; 1173 : 					high_nonzbuffered_scene_slot_sorted_list->pred = object;

  00182	a1 00 00 00 00	 mov	 eax, DWORD PTR ?high_nonzbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; high_nonzbuffered_scene_slot_sorted_list
  00187	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  0018a	89 08		 mov	 DWORD PTR [eax], ecx

; 1174 : 
; 1175 : 					object->succ = high_nonzbuffered_scene_slot_sorted_list;

  0018c	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0018f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?high_nonzbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; high_nonzbuffered_scene_slot_sorted_list
  00195	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1176 : 					object->pred = NULL;

  00198	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0019b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1177 : 
; 1178 : 					high_nonzbuffered_scene_slot_sorted_list = object;

  001a1	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  001a4	a3 00 00 00 00	 mov	 DWORD PTR ?high_nonzbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax ; high_nonzbuffered_scene_slot_sorted_list

; 1179 : 
; 1180 : 					last_high_nonzbuffered_scene_slot_insert_point = object;

  001a9	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  001ac	a3 00 00 00 00	 mov	 DWORD PTR ?last_high_nonzbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax

; 1181 : 
; 1182 : 					return;

  001b1	eb 05		 jmp	 SHORT $LN1@insert_hig
$LN17@insert_hig:

; 1183 : 				}
; 1184 : 			}

  001b3	e9 50 ff ff ff	 jmp	 $LN4@insert_hig
$LN1@insert_hig:

; 1185 : 		}
; 1186 : 	}
; 1187 : }

  001b8	5f		 pop	 edi
  001b9	5e		 pop	 esi
  001ba	5b		 pop	 ebx
  001bb	8b e5		 mov	 esp, ebp
  001bd	5d		 pop	 ebp
  001be	c2 04 00	 ret	 4
?insert_high_nonzbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ENDP ; insert_high_nonzbuffered_scene_slot_into_3d_scene
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjbuf.c
;	COMDAT ?insert_high_zbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z
_TEXT	SEGMENT
_object$ = 8						; size = 4
?insert_high_zbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z PROC ; insert_high_zbuffered_scene_slot_into_3d_scene, COMDAT

; 916  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 917  : 
; 918  : 	if ( !last_high_zbuffered_scene_slot_insert_point )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0
  00010	75 2e		 jne	 SHORT $LN6@insert_hig

; 919  : 	{
; 920  : 
; 921  : 		high_zbuffered_scene_slot_sorted_list = object;

  00012	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00015	a3 00 00 00 00	 mov	 DWORD PTR ?high_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax ; high_zbuffered_scene_slot_sorted_list

; 922  : 
; 923  : 		high_zbuffered_scene_slot_sorted_list->pred = NULL;

  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?high_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; high_zbuffered_scene_slot_sorted_list
  0001f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 924  : 
; 925  : 		high_zbuffered_scene_slot_sorted_list->succ = NULL;

  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ?high_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; high_zbuffered_scene_slot_sorted_list
  0002a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 926  : 
; 927  : 		last_high_zbuffered_scene_slot_insert_point = high_zbuffered_scene_slot_sorted_list;

  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?high_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; high_zbuffered_scene_slot_sorted_list
  00036	a3 00 00 00 00	 mov	 DWORD PTR ?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax

; 928  : 	}
; 929  : 	else

  0003b	e9 78 01 00 00	 jmp	 $LN1@insert_hig
$LN6@insert_hig:

; 930  : 	{
; 931  : 
; 932  : 		if ( object->z < last_high_zbuffered_scene_slot_insert_point->z )

  00040	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00043	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00049	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0004c	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  0004f	0f 8d b3 00 00
	00		 jge	 $LN4@insert_hig
$LN2@insert_hig:

; 933  : 		{
; 934  : 
; 935  : 			//
; 936  : 			// Search Forwards
; 937  : 			//
; 938  : 
; 939  : 			while ( last_high_zbuffered_scene_slot_insert_point )

  00055	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0
  0005c	0f 84 a1 00 00
	00		 je	 $LN3@insert_hig

; 940  : 			{
; 941  : 
; 942  : 				if ( object->z >= last_high_zbuffered_scene_slot_insert_point->z )

  00062	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00065	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0006b	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0006e	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00071	7c 43		 jl	 SHORT $LN10@insert_hig

; 943  : 				{
; 944  : 
; 945  : 					//
; 946  : 					// Insert before this one.
; 947  : 					//
; 948  : 
; 949  : 					object->pred = last_high_zbuffered_scene_slot_insert_point->pred;

  00073	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00076	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0007c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007e	89 10		 mov	 DWORD PTR [eax], edx

; 950  : 					object->succ = last_high_zbuffered_scene_slot_insert_point;

  00080	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00083	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00089	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 951  : 
; 952  : 					last_high_zbuffered_scene_slot_insert_point->pred = object;

  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00091	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  00094	89 08		 mov	 DWORD PTR [eax], ecx

; 953  : 
; 954  : 					if ( object->pred )

  00096	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00099	83 38 00	 cmp	 DWORD PTR [eax], 0
  0009c	74 0b		 je	 SHORT $LN11@insert_hig

; 955  : 					{
; 956  : 
; 957  : 						object->pred->succ = object;

  0009e	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000a1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a3	8b 55 08	 mov	 edx, DWORD PTR _object$[ebp]
  000a6	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN11@insert_hig:

; 958  : 					}
; 959  : 
; 960  : 					last_high_zbuffered_scene_slot_insert_point = object;

  000a9	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000ac	a3 00 00 00 00	 mov	 DWORD PTR ?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax

; 961  : 
; 962  : 					return;

  000b1	e9 02 01 00 00	 jmp	 $LN1@insert_hig
$LN10@insert_hig:

; 963  : 				}
; 964  : 
; 965  : 				if ( last_high_zbuffered_scene_slot_insert_point->succ )

  000b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  000bb	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000bf	74 10		 je	 SHORT $LN12@insert_hig

; 966  : 				{
; 967  : 
; 968  : 					last_high_zbuffered_scene_slot_insert_point = last_high_zbuffered_scene_slot_insert_point->succ;

  000c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  000c6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c9	89 0d 00 00 00
	00		 mov	 DWORD PTR ?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, ecx

; 969  : 				}
; 970  : 				else

  000cf	eb 2d		 jmp	 SHORT $LN13@insert_hig
$LN12@insert_hig:

; 971  : 				{
; 972  : 
; 973  : 					//
; 974  : 					// Insert at end of list
; 975  : 					//
; 976  : 
; 977  : 					last_high_zbuffered_scene_slot_insert_point->succ = object;

  000d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  000d6	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  000d9	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 978  : 
; 979  : 					object->pred = last_high_zbuffered_scene_slot_insert_point;

  000dc	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  000e5	89 08		 mov	 DWORD PTR [eax], ecx

; 980  : 
; 981  : 					object->succ = NULL;

  000e7	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000ea	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 982  : 
; 983  : 					last_high_zbuffered_scene_slot_insert_point = object;

  000f1	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  000f4	a3 00 00 00 00	 mov	 DWORD PTR ?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax

; 984  : 
; 985  : 					return;

  000f9	e9 ba 00 00 00	 jmp	 $LN1@insert_hig
$LN13@insert_hig:

; 986  : 				}
; 987  : 			}

  000fe	e9 52 ff ff ff	 jmp	 $LN2@insert_hig
$LN3@insert_hig:

; 988  : 		}
; 989  : 		else

  00103	e9 b0 00 00 00	 jmp	 $LN1@insert_hig
$LN4@insert_hig:

; 990  : 		{
; 991  : 
; 992  : 			//
; 993  : 			// Search Backwards
; 994  : 			//
; 995  : 
; 996  : 			while ( last_high_zbuffered_scene_slot_insert_point )

  00108	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, 0
  0010f	0f 84 a3 00 00
	00		 je	 $LN1@insert_hig

; 997  : 			{
; 998  : 
; 999  : 				if ( object->z <= last_high_zbuffered_scene_slot_insert_point->z )

  00115	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00118	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0011e	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00121	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00124	7f 43		 jg	 SHORT $LN14@insert_hig

; 1000 : 				{
; 1001 : 
; 1002 : 					//
; 1003 : 					// Insert after this one.
; 1004 : 					//
; 1005 : 
; 1006 : 					object->pred = last_high_zbuffered_scene_slot_insert_point;

  00126	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00129	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0012f	89 08		 mov	 DWORD PTR [eax], ecx

; 1007 : 					object->succ = last_high_zbuffered_scene_slot_insert_point->succ;

  00131	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00134	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0013a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0013d	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1008 : 
; 1009 : 					last_high_zbuffered_scene_slot_insert_point->succ = object;

  00140	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00145	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  00148	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1010 : 
; 1011 : 					if ( object->succ )

  0014b	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0014e	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00152	74 0b		 je	 SHORT $LN15@insert_hig

; 1012 : 					{
; 1013 : 
; 1014 : 						object->succ->pred = object;

  00154	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00157	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0015a	8b 55 08	 mov	 edx, DWORD PTR _object$[ebp]
  0015d	89 11		 mov	 DWORD PTR [ecx], edx
$LN15@insert_hig:

; 1015 : 					}
; 1016 : 
; 1017 : 					last_high_zbuffered_scene_slot_insert_point = object;

  0015f	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00162	a3 00 00 00 00	 mov	 DWORD PTR ?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax

; 1018 : 
; 1019 : 					return;

  00167	eb 4f		 jmp	 SHORT $LN1@insert_hig
$LN14@insert_hig:

; 1020 : 				}
; 1021 : 
; 1022 : 				if ( last_high_zbuffered_scene_slot_insert_point->pred )

  00169	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  0016e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00171	74 0f		 je	 SHORT $LN16@insert_hig

; 1023 : 				{
; 1024 : 
; 1025 : 					last_high_zbuffered_scene_slot_insert_point = last_high_zbuffered_scene_slot_insert_point->pred;

  00173	a1 00 00 00 00	 mov	 eax, DWORD PTR ?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00178	8b 08		 mov	 ecx, DWORD PTR [eax]
  0017a	89 0d 00 00 00
	00		 mov	 DWORD PTR ?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, ecx

; 1026 : 				}
; 1027 : 				else

  00180	eb 31		 jmp	 SHORT $LN17@insert_hig
$LN16@insert_hig:

; 1028 : 				{
; 1029 : 
; 1030 : 					//
; 1031 : 					// Insert at start of list
; 1032 : 					//
; 1033 : 
; 1034 : 					high_zbuffered_scene_slot_sorted_list->pred = object;

  00182	a1 00 00 00 00	 mov	 eax, DWORD PTR ?high_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; high_zbuffered_scene_slot_sorted_list
  00187	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  0018a	89 08		 mov	 DWORD PTR [eax], ecx

; 1035 : 
; 1036 : 					object->succ = high_zbuffered_scene_slot_sorted_list;

  0018c	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0018f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?high_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A ; high_zbuffered_scene_slot_sorted_list
  00195	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1037 : 					object->pred = NULL;

  00198	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0019b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1038 : 
; 1039 : 					high_zbuffered_scene_slot_sorted_list = object;

  001a1	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  001a4	a3 00 00 00 00	 mov	 DWORD PTR ?high_zbuffered_scene_slot_sorted_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax ; high_zbuffered_scene_slot_sorted_list

; 1040 : 
; 1041 : 					last_high_zbuffered_scene_slot_insert_point = object;

  001a9	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  001ac	a3 00 00 00 00	 mov	 DWORD PTR ?last_high_zbuffered_scene_slot_insert_point@@3PAUSCENE_SLOT_DRAWING_LIST@@A, eax

; 1042 : 
; 1043 : 					return;

  001b1	eb 05		 jmp	 SHORT $LN1@insert_hig
$LN17@insert_hig:

; 1044 : 				}
; 1045 : 			}

  001b3	e9 50 ff ff ff	 jmp	 $LN4@insert_hig
$LN1@insert_hig:

; 1046 : 		}
; 1047 : 	}
; 1048 : }

  001b8	5f		 pop	 edi
  001b9	5e		 pop	 esi
  001ba	5b		 pop	 ebx
  001bb	8b e5		 mov	 esp, ebp
  001bd	5d		 pop	 ebp
  001be	c2 04 00	 ret	 4
?insert_high_zbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ENDP ; insert_high_zbuffered_scene_slot_into_3d_scene
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjbuf.c
;	COMDAT ?insert_object_shadow_into_3d_scene@@YGXPAUOBJECT_3D_INSTANCE@@@Z
_TEXT	SEGMENT
_visible$1 = -8						; size = 4
_buffer$ = -4						; size = 4
_object$ = 8						; size = 4
?insert_object_shadow_into_3d_scene@@YGXPAUOBJECT_3D_INSTANCE@@@Z PROC ; insert_object_shadow_into_3d_scene, COMDAT

; 548  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 549  : 
; 550  : 	scene_slot_drawing_list
; 551  : 		*buffer;
; 552  : 
; 553  : 	number_of_objects_in_3d_scene++;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?number_of_objects_in_3d_scene@@3HA ; number_of_objects_in_3d_scene
  0000e	83 c0 01	 add	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR ?number_of_objects_in_3d_scene@@3HA, eax ; number_of_objects_in_3d_scene

; 554  : 
; 555  : 	if ( ( !exclusive_3d_instance ) || ( exclusive_3d_instance == object ) )

  00016	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?exclusive_3d_instance@@3PAUOBJECT_3D_INSTANCE@@A, 0 ; exclusive_3d_instance
  0001d	74 0a		 je	 SHORT $LN3@insert_obj
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?exclusive_3d_instance@@3PAUOBJECT_3D_INSTANCE@@A ; exclusive_3d_instance
  00024	3b 45 08	 cmp	 eax, DWORD PTR _object$[ebp]
  00027	75 73		 jne	 SHORT $LN1@insert_obj
$LN3@insert_obj:

; 556  : 	{
; 557  : 
; 558  : 		if ( ( object->object_has_shadow ) && ( shadows_enabled ) )

  00029	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  0002c	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0002f	c1 e9 02	 shr	 ecx, 2
  00032	83 e1 01	 and	 ecx, 1
  00035	74 65		 je	 SHORT $LN1@insert_obj
  00037	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?shadows_enabled@@3HA, 0 ; shadows_enabled
  0003e	74 5c		 je	 SHORT $LN1@insert_obj

; 559  : 		{
; 560  : 
; 561  : 			enum OBJECT_3D_VISIBILITY
; 562  : 				visible;
; 563  : 
; 564  : 			visible = get_object_3d_instance_shadow_visibility ( object );

  00040	8b 45 08	 mov	 eax, DWORD PTR _object$[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?get_object_3d_instance_shadow_visibility@@YG?AW4OBJECT_3D_VISIBILITY@@PAUOBJECT_3D_INSTANCE@@@Z ; get_object_3d_instance_shadow_visibility
  00049	89 45 f8	 mov	 DWORD PTR _visible$1[ebp], eax

; 565  : 
; 566  : 			if ( visible != OBJECT_3D_NOT_VISIBLE )

  0004c	83 7d f8 03	 cmp	 DWORD PTR _visible$1[ebp], 3
  00050	74 4a		 je	 SHORT $LN1@insert_obj

; 567  : 			{
; 568  : 
; 569  : 				buffer = get_3d_scene_slot ();

  00052	e8 00 00 00 00	 call	 ?get_3d_scene_slot@@YGPAUSCENE_SLOT_DRAWING_LIST@@XZ ; get_3d_scene_slot
  00057	89 45 fc	 mov	 DWORD PTR _buffer$[ebp], eax

; 570  : 	
; 571  : 				if ( buffer )

  0005a	83 7d fc 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  0005e	74 3c		 je	 SHORT $LN1@insert_obj

; 572  : 				{
; 573  : 
; 574  : 					buffer->type = OBJECT_3D_DRAW_TYPE_OBJECT_SHADOW;

  00060	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  00063	c7 40 08 04 00
	00 00		 mov	 DWORD PTR [eax+8], 4

; 575  : 	
; 576  : 					buffer->z = *( ( int * ) &object->view_position.z );

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  0006d	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  00070	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00073	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 577  : 	
; 578  : 					buffer->object = object;

  00076	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  00079	8b 4d 08	 mov	 ecx, DWORD PTR _object$[ebp]
  0007c	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 579  : 
; 580  : 					if ( get_3d_shadows_translucent () )

  0007f	e8 00 00 00 00	 call	 ?get_3d_shadows_translucent@@YGHXZ ; get_3d_shadows_translucent
  00084	85 c0		 test	 eax, eax
  00086	74 0b		 je	 SHORT $LN7@insert_obj

; 581  : 					{
; 582  : 
; 583  : 						insert_low_nonzbuffered_scene_slot_into_3d_scene ( buffer );

  00088	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ?insert_low_nonzbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_low_nonzbuffered_scene_slot_into_3d_scene

; 584  : 					}
; 585  : 					else

  00091	eb 09		 jmp	 SHORT $LN1@insert_obj
$LN7@insert_obj:

; 586  : 					{
; 587  : 	
; 588  : 						insert_low_zbuffered_scene_slot_into_3d_scene ( buffer );

  00093	8b 45 fc	 mov	 eax, DWORD PTR _buffer$[ebp]
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 ?insert_low_zbuffered_scene_slot_into_3d_scene@@YGXPAUSCENE_SLOT_DRAWING_LIST@@@Z ; insert_low_zbuffered_scene_slot_into_3d_scene
$LN1@insert_obj:

; 589  : 					}
; 590  : 				}
; 591  : 			}
; 592  : 		}
; 593  : 	}
; 594  : }

  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c2 04 00	 ret	 4
?insert_object_shadow_into_3d_scene@@YGXPAUOBJECT_3D_INSTANCE@@@Z ENDP ; insert_object_shadow_into_3d_scene
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjbuf.c
;	COMDAT ?get_3d_scene_slot@@YGPAUSCENE_SLOT_DRAWING_LIST@@XZ
_TEXT	SEGMENT
tv68 = -68						; size = 4
?get_3d_scene_slot@@YGPAUSCENE_SLOT_DRAWING_LIST@@XZ PROC ; get_3d_scene_slot, COMDAT

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 174  : 
; 175  : 	if ( scene_slot_order_index < MAX_3D_OBJECTS )

  00009	81 3d 00 00 00
	00 00 10 00 00	 cmp	 DWORD PTR ?scene_slot_order_index@@3HA, 4096 ; 00001000H
  00013	7d 25		 jge	 SHORT $LN2@get_3d_sce

; 176  : 	{
; 177  : 
; 178  : 		return ( &scene_slot_order_list[scene_slot_order_index++] );

  00015	6b 05 00 00 00
	00 4c		 imul	 eax, DWORD PTR ?scene_slot_order_index@@3HA, 76
  0001c	05 00 00 00 00	 add	 eax, OFFSET ?scene_slot_order_list@@3PAUSCENE_SLOT_DRAWING_LIST@@A
  00021	89 45 bc	 mov	 DWORD PTR tv68[ebp], eax
  00024	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?scene_slot_order_index@@3HA
  0002a	83 c1 01	 add	 ecx, 1
  0002d	89 0d 00 00 00
	00		 mov	 DWORD PTR ?scene_slot_order_index@@3HA, ecx
  00033	8b 45 bc	 mov	 eax, DWORD PTR tv68[ebp]
  00036	eb 11		 jmp	 SHORT $LN1@get_3d_sce

; 179  : 	}
; 180  : 	else

  00038	eb 0f		 jmp	 SHORT $LN1@get_3d_sce
$LN2@get_3d_sce:

; 181  : 	{
; 182  : 
; 183  : 		debug_log ( "Exceeded object count for scene" );

  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NJJGKNHB@Exceeded?5object?5count?5for?5scene@
  0003f	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  00044	83 c4 04	 add	 esp, 4

; 184  : 
; 185  : 		return ( NULL );

  00047	33 c0		 xor	 eax, eax
$LN1@get_3d_sce:

; 186  : 	}
; 187  : }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
?get_3d_scene_slot@@YGPAUSCENE_SLOT_DRAWING_LIST@@XZ ENDP ; get_3d_scene_slot
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dobjbuf.c
;	COMDAT ?set_middle_scene_slot_height@@YGXM@Z
_TEXT	SEGMENT
_height$ = 8						; size = 4
?set_middle_scene_slot_height@@YGXM@Z PROC		; set_middle_scene_slot_height, COMDAT

; 163  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 164  : 
; 165  : 	middle_scene_slot_height = height;

  00009	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _height$[ebp]
  0000e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?middle_scene_slot_height@@3MA, xmm0

; 166  : }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?set_middle_scene_slot_height@@YGXM@Z ENDP		; set_middle_scene_slot_height
_TEXT	ENDS
END
