; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\entity\special\effect\soundeff\se_snd.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?ui_sounds_muted@@3HA				; ui_sounds_muted
PUBLIC	??_C@_0O@MAAGBJBO@Sound?5Effects@		; `string'
PUBLIC	??_C@_0P@OIBOADCF@Warning?5System@		; `string'
PUBLIC	??_C@_0BA@EJDACHAL@Co?9Pilot?5Speech@		; `string'
PUBLIC	??_C@_0P@NFDJINGK@Wingmen?5Speech@		; `string'
PUBLIC	??_C@_0BE@BHBPMPD@Air?5Traffic?5Control@	; `string'
PUBLIC	??_C@_0BE@KBCDLBPO@Forward?5Air?5Control@	; `string'
PUBLIC	??_C@_0P@BAFHIMAJ@Ground?5Control@		; `string'
_BSS	SEGMENT
?ui_sounds_muted@@3HA DD 01H DUP (?)			; ui_sounds_muted
_BSS	ENDS
;	COMDAT ??_C@_0P@BAFHIMAJ@Ground?5Control@
CONST	SEGMENT
??_C@_0P@BAFHIMAJ@Ground?5Control@ DB 'Ground Control', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KBCDLBPO@Forward?5Air?5Control@
CONST	SEGMENT
??_C@_0BE@KBCDLBPO@Forward?5Air?5Control@ DB 'Forward Air Control', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BHBPMPD@Air?5Traffic?5Control@
CONST	SEGMENT
??_C@_0BE@BHBPMPD@Air?5Traffic?5Control@ DB 'Air Traffic Control', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NFDJINGK@Wingmen?5Speech@
CONST	SEGMENT
??_C@_0P@NFDJINGK@Wingmen?5Speech@ DB 'Wingmen Speech', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EJDACHAL@Co?9Pilot?5Speech@
CONST	SEGMENT
??_C@_0BA@EJDACHAL@Co?9Pilot?5Speech@ DB 'Co-Pilot Speech', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OIBOADCF@Warning?5System@
CONST	SEGMENT
??_C@_0P@OIBOADCF@Warning?5System@ DB 'Warning System', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MAAGBJBO@Sound?5Effects@
CONST	SEGMENT
??_C@_0O@MAAGBJBO@Sound?5Effects@ DB 'Sound Effects', 00H ; `string'
CONST	ENDS
PUBLIC	?overload_sound_effect_sound_functions@@YGXXZ	; overload_sound_effect_sound_functions
PUBLIC	?get_sound_channel_name@@YGPBDH@Z		; get_sound_channel_name
PUBLIC	?get_sound_channel_volume@@YGHH@Z		; get_sound_channel_volume
PUBLIC	?set_sound_channel_volume@@YGXHH@Z		; set_sound_channel_volume
PUBLIC	?get_sound_channel_muted@@YGHH@Z		; get_sound_channel_muted
PUBLIC	?set_sound_channel_muted@@YGXHH@Z		; set_sound_channel_muted
PUBLIC	?initialise_sound_channels@@YGXXZ		; initialise_sound_channels
PUBLIC	?__LINE__Var@?0??play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z@4JA ; `play_local_sound'::`1'::__LINE__Var
PUBLIC	??_C@_0FE@KPCIHEDK@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0BC@EBDAMAJO@raw?9?$DOeffect_index@	; `string'
PUBLIC	??_C@_0CN@ODLPCGGO@raw?9?$DOsound_channel?5?$DM?5NUM_SOUND_@ ; `string'
PUBLIC	??_C@_0O@EICIFFBF@?$CBraw?9?$DOlooping@		; `string'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3f1a36e2eb1c432d
PUBLIC	__real@3f800000
PUBLIC	__real@3f847ae147ae147b
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4010000000000000
PUBLIC	__real@42c80000
PUBLIC	__real@437f0000
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?malloc_fast_memory@@YGPAXI@Z:PROC		; malloc_fast_memory
EXTRN	?free_mem@@YGXPAX@Z:PROC			; free_mem
EXTRN	?create_single_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@HHHPAXH@Z:PROC ; create_single_system_sound_effect
EXTRN	?create_sequenced_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@HPAUSOUND_SEQUENCE_INFORMATION@@HPAXH@Z:PROC ; create_sequenced_system_sound_effect
EXTRN	?get_system_sound_effect_playing@@YGHPAUSYSTEM_SOUND_EFFECT@@@Z:PROC ; get_system_sound_effect_playing
EXTRN	?destroy_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z:PROC ; destroy_system_sound_effect
EXTRN	?play_sequenced_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@HM@Z:PROC ; play_sequenced_system_sound_effect
EXTRN	?play_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@M@Z:PROC ; play_system_sound_effect
EXTRN	?set_system_sound_effect_volume@@YGXPAUSYSTEM_SOUND_EFFECT@@H@Z:PROC ; set_system_sound_effect_volume
EXTRN	?set_system_sound_effect_position@@YGXPAUSYSTEM_SOUND_EFFECT@@UVEC3D@@@Z:PROC ; set_system_sound_effect_position
EXTRN	?set_system_sound_effect_pitch@@YGXPAUSYSTEM_SOUND_EFFECT@@M@Z:PROC ; set_system_sound_effect_pitch
EXTRN	?get_gunship_comms_equipment_ok@@YGHXZ:PROC	; get_gunship_comms_equipment_ok
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?canopy_sound_amp@@3PAY02HA:BYTE		; canopy_sound_amp
EXTRN	?global_options@@3UGLOBAL_OPTIONS_DATA@@A:BYTE	; global_options
EXTRN	?application_sound_effects@@3PAUSOUND_EFFECT_INFORMATION@@A:BYTE ; application_sound_effects
EXTRN	?overload_invalid_list_type_message@@3PBDB:DWORD ; overload_invalid_list_type_message
EXTRN	?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_parent
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?overload_invalid_ptr_type_message@@3PBDB:DWORD	; overload_invalid_ptr_type_message
EXTRN	?fn_set_local_entity_ptr_value@@3PAY0BE@P6GXPAUENTITY@@W4PTR_TYPES@@PAX@ZA:BYTE ; fn_set_local_entity_ptr_value
EXTRN	?fn_play_local_entity_sound@@3PAP6GXPAUENTITY@@PAUVIEWPOINT@@M@ZA:BYTE ; fn_play_local_entity_sound
EXTRN	?gunship_entity@@3PAUENTITY@@A:DWORD		; gunship_entity
EXTRN	?session_entity@@3PAUENTITY@@A:DWORD		; session_entity
EXTRN	?in_cockpit@@3HA:DWORD				; in_cockpit
EXTRN	?canopy_door_state@@3MA:DWORD			; canopy_door_state
EXTRN	__fltused:DWORD
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3f847ae147ae147b
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f1a36e2eb1c432d
CONST	SEGMENT
__real@3f1a36e2eb1c432d DQ 03f1a36e2eb1c432dr	; 0.0001
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_0O@EICIFFBF@?$CBraw?9?$DOlooping@
CONST	SEGMENT
??_C@_0O@EICIFFBF@?$CBraw?9?$DOlooping@ DB '!raw->looping', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@ODLPCGGO@raw?9?$DOsound_channel?5?$DM?5NUM_SOUND_@
CONST	SEGMENT
??_C@_0CN@ODLPCGGO@raw?9?$DOsound_channel?5?$DM?5NUM_SOUND_@ DB 'raw->sou'
	DB	'nd_channel < NUM_SOUND_CHANNEL_TYPES', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EBDAMAJO@raw?9?$DOeffect_index@
CONST	SEGMENT
??_C@_0BC@EBDAMAJO@raw?9?$DOeffect_index@ DB 'raw->effect_index', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FE@KPCIHEDK@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0FE@KPCIHEDK@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\entity\special\effect\sounde'
	DB	'ff\se_snd.c', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z@4JA DD 073H ; `play_local_sound'::`1'::__LINE__Var
_DATA	ENDS
_DATA	SEGMENT
?sound_channel_info@@3PAUSOUND_CHANNEL_INFO_TYPE@@A DD 00H ; sound_channel_info
	DD	0aH
	DD	FLAT:??_C@_0O@MAAGBJBO@Sound?5Effects@
	DD	00H
	DD	0aH
	DD	FLAT:??_C@_0P@OIBOADCF@Warning?5System@
	DD	00H
	DD	0aH
	DD	FLAT:??_C@_0BA@EJDACHAL@Co?9Pilot?5Speech@
	DD	00H
	DD	0aH
	DD	FLAT:??_C@_0P@NFDJINGK@Wingmen?5Speech@
	DD	00H
	DD	0aH
	DD	FLAT:??_C@_0BE@BHBPMPD@Air?5Traffic?5Control@
	DD	00H
	DD	0aH
	DD	FLAT:??_C@_0BE@KBCDLBPO@Forward?5Air?5Control@
	DD	00H
	DD	0aH
	DD	FLAT:??_C@_0P@BAFHIMAJ@Ground?5Control@
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\se_snd.c
;	COMDAT ?play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z
_TEXT	SEGMENT
tv375 = -180						; size = 8
tv357 = -180						; size = 8
tv651 = -176						; size = 4
tv622 = -176						; size = 4
tv679 = -172						; size = 4
tv653 = -172						; size = 8
tv624 = -172						; size = 8
tv472 = -172						; size = 4
tv418 = -172						; size = 4
tv376 = -172						; size = 8
tv358 = -172						; size = 8
tv337 = -172						; size = 4
tv307 = -172						; size = 4
tv287 = -172						; size = 4
tv267 = -172						; size = 4
tv247 = -172						; size = 4
tv227 = -172						; size = 4
tv196 = -172						; size = 4
tv166 = -172						; size = 4
tv128 = -172						; size = 4
tv671 = -168						; size = 4
tv473 = -168						; size = 4
tv419 = -168						; size = 4
tv390 = -168						; size = 4
tv386 = -168						; size = 4
tv329 = -168						; size = 4
tv299 = -168						; size = 4
tv279 = -168						; size = 4
tv259 = -168						; size = 4
tv239 = -168						; size = 4
tv219 = -168						; size = 4
tv188 = -168						; size = 4
tv158 = -168						; size = 4
tv88 = -168						; size = 4
tv73 = -168						; size = 4
_lifetime$1 = -100					; size = 4
_current_index$2 = -96					; size = 4
_size$3 = -92						; size = 4
_rate$4 = -88						; size = 4
_d$5 = -84						; size = 4
_sample_time$6 = -80					; size = 4
_pitch$7 = -76						; size = 4
_sound_vector$8 = -72					; size = 12
_samples$9 = -60					; size = 4
_sample_loop$10 = -56					; size = 4
_values$11 = -52					; size = 4
_csa_code$12 = -48					; size = 4
_temp$13 = -44						; size = 4
_maximum_sound_range$ = -40				; size = 4
_reference_sound_range$ = -36				; size = 4
_minimum_sound_range$ = -32				; size = 4
_channel_volume$ = -28					; size = 4
_v$ = -24						; size = 4
_channel$ = -20						; size = 4
_maximum_volume$ = -16					; size = 4
_volume$ = -12						; size = 4
_raw$ = -8						; size = 4
_parent$ = -4						; size = 4
_en$ = 8						; size = 4
_vp$ = 12						; size = 4
_range$ = 16						; size = 4
?play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z PROC	; play_local_sound, COMDAT

; 115  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 116  : 	entity
; 117  : 		*parent;
; 118  : 
; 119  : 	sound_effect
; 120  : 		*raw;
; 121  : 
; 122  : 	int
; 123  : 		volume,
; 124  : 		maximum_volume,
; 125  : 		channel;
; 126  : 
; 127  : 	float
; 128  : 		v,
; 129  : 		channel_volume,
; 130  : 		minimum_sound_range,
; 131  : 		reference_sound_range,
; 132  : 		maximum_sound_range;
; 133  : 
; 134  : 	raw = (sound_effect *) get_local_entity_data (en);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0000f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00012	89 4d f8	 mov	 DWORD PTR _raw$[ebp], ecx

; 135  : 
; 136  : 	ASSERT (raw->effect_index);

  00015	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00018	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  0001c	75 18		 jne	 SHORT $LN12@play_local
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z@4JA
  00023	83 c0 15	 add	 eax, 21			; 00000015H
  00026	50		 push	 eax
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@KPCIHEDK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@EBDAMAJO@raw?9?$DOeffect_index@
  00031	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN12@play_local:

; 137  : 
; 138  : 	//
; 139  : 	// check sound effect / speech options
; 140  : 	//
; 141  : 
; 142  : 	switch (raw->eff.sub_type)

  00036	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  00041	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  00047	83 ea 13	 sub	 edx, 19			; 00000013H
  0004a	89 95 58 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], edx
  00050	83 bd 58 ff ff
	ff 15		 cmp	 DWORD PTR tv73[ebp], 21	; 00000015H
  00057	77 35		 ja	 SHORT $LN17@play_local
  00059	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR tv73[ebp]
  0005f	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN148@play_local[eax]
  00066	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN150@play_local[ecx*4]
$LN13@play_local:

; 143  : 	{
; 144  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_CPG_MESSAGE:
; 145  : 		{
; 146  : 			if (!get_global_copilot_speech_effects_enabled ())

  0006d	83 3d c0 01 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+448, 0
  00074	75 05		 jne	 SHORT $LN14@play_local

; 147  : 			{
; 148  : 				return;

  00076	e9 02 11 00 00	 jmp	 $LN1@play_local
$LN14@play_local:

; 149  : 			}
; 150  : 
; 151  : 			// deliberate fall-through ...
; 152  : 		}
; 153  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_MISC_SPEECH:
; 154  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_RADIO_MESSAGE:
; 155  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_WARNING_MESSAGE:
; 156  : 		{
; 157  : 			//
; 158  : 			// SPEECH
; 159  : 			//
; 160  : 
; 161  : 			if (!get_global_speech_effects_enabled())

  0007b	a1 50 00 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+80
  00080	d1 e8		 shr	 eax, 1
  00082	83 e0 01	 and	 eax, 1
  00085	75 05		 jne	 SHORT $LN16@play_local

; 162  : 			{
; 163  : 				return;

  00087	e9 f1 10 00 00	 jmp	 $LN1@play_local
$LN16@play_local:

; 164  : 			}
; 165  : 
; 166  : 			break;

  0008c	eb 0f		 jmp	 SHORT $LN2@play_local
$LN17@play_local:

; 167  : 		}
; 168  : 		default:
; 169  : 		{
; 170  : 			//
; 171  : 			// SOUND EFFECTS
; 172  : 			//
; 173  : 
; 174  : 			if (!get_global_sound_effects_enabled())

  0008e	a1 50 00 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+80
  00093	83 e0 01	 and	 eax, 1
  00096	75 05		 jne	 SHORT $LN18@play_local

; 175  : 			{
; 176  : 				return;

  00098	e9 e0 10 00 00	 jmp	 $LN1@play_local
$LN18@play_local:
$LN2@play_local:

; 177  : 			}
; 178  : 
; 179  : 			break;
; 180  : 		}
; 181  : 	}
; 182  : 
; 183  : 	//
; 184  : 	// turn on/off the interior/exterior sounds
; 185  : 	//
; 186  : 
; 187  : 	parent = get_local_entity_parent (en, LIST_TYPE_SPECIAL_EFFECT);

  0009d	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  000a1	74 0d		 je	 SHORT $LN82@play_local
  000a3	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a8	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv88[ebp], ecx
  000ae	eb 24		 jmp	 SHORT $LN83@play_local
$LN82@play_local:
  000b0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z@4JA
  000b6	83 c2 48	 add	 edx, 72			; 00000048H
  000b9	52		 push	 edx
  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@KPCIHEDK@c?3?2users?2nhv90?2projects?2eech?2ap@
  000bf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ca	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv88[ebp], 0
$LN83@play_local:
  000d4	b9 01 00 00 00	 mov	 ecx, 1
  000d9	85 c9		 test	 ecx, ecx
  000db	74 0c		 je	 SHORT $LN84@play_local
  000dd	c7 85 54 ff ff
	ff 24 00 00 00	 mov	 DWORD PTR tv128[ebp], 36 ; 00000024H
  000e7	eb 24		 jmp	 SHORT $LN85@play_local
$LN84@play_local:
  000e9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z@4JA
  000ef	83 c2 48	 add	 edx, 72			; 00000048H
  000f2	52		 push	 edx
  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@KPCIHEDK@c?3?2users?2nhv90?2projects?2eech?2ap@
  000f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  000fd	50		 push	 eax
  000fe	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00103	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv128[ebp], 0
$LN85@play_local:
  0010d	6a 24		 push	 36			; 00000024H
  0010f	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00112	51		 push	 ecx
  00113	69 95 58 ff ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv88[ebp], 180
  0011d	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR tv128[ebp]
  00123	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0012a	ff d1		 call	 ecx
  0012c	89 45 fc	 mov	 DWORD PTR _parent$[ebp], eax

; 188  : 
; 189  : 	if (
; 190  : 			(!parent) ||
; 191  : 			((raw->sound_locality == SOUND_LOCALITY_EXTERIOR) && (in_cockpit) && (parent == get_gunship_entity ())) ||

  0012f	83 7d fc 00	 cmp	 DWORD PTR _parent$[ebp], 0
  00133	74 61		 je	 SHORT $LN22@play_local
  00135	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00138	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  0013b	c1 e9 06	 shr	 ecx, 6
  0013e	83 e1 03	 and	 ecx, 3
  00141	83 f9 02	 cmp	 ecx, 2
  00144	75 14		 jne	 SHORT $LN21@play_local
  00146	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?in_cockpit@@3HA, 0 ; in_cockpit
  0014d	74 0b		 je	 SHORT $LN21@play_local
  0014f	8b 45 fc	 mov	 eax, DWORD PTR _parent$[ebp]
  00152	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00158	74 3c		 je	 SHORT $LN22@play_local
$LN21@play_local:
  0015a	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  0015d	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00160	c1 e9 06	 shr	 ecx, 6
  00163	83 e1 03	 and	 ecx, 3
  00166	83 f9 01	 cmp	 ecx, 1
  00169	0f 85 d3 00 00
	00		 jne	 $LN19@play_local
  0016f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?in_cockpit@@3HA, 0 ; in_cockpit
  00176	74 1e		 je	 SHORT $LN22@play_local
  00178	8b 45 fc	 mov	 eax, DWORD PTR _parent$[ebp]
  0017b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00181	0f 84 bb 00 00
	00		 je	 $LN19@play_local
  00187	8b 45 fc	 mov	 eax, DWORD PTR _parent$[ebp]
  0018a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  00190	0f 84 ac 00 00
	00		 je	 $LN19@play_local
$LN22@play_local:

; 192  : 			((raw->sound_locality == SOUND_LOCALITY_INTERIOR) && ((!in_cockpit) || ((parent != get_gunship_entity ()) && (parent != get_session_entity ()))))
; 193  : //			((raw->sound_locality == SOUND_LOCALITY_EXTERIOR) && (in_cockpit) && canopy_door_state == CANOPY_DOOR_STATE_CLOSED && (parent == get_gunship_entity ())) ||
; 194  : //			((raw->sound_locality == SOUND_LOCALITY_INTERIOR) && ((!in_cockpit) || canopy_door_state != CANOPY_DOOR_STATE_CLOSED || ((parent != get_gunship_entity ()) && (parent != get_session_entity ()))))
; 195  : 			)
; 196  : 	{
; 197  : 		//
; 198  : 		// added the !parent clause. Should really ASSERT on !parent, but there is the case of client lag meaning
; 199  : 		// the S.E. was unlinked but has not been destroyed yet.
; 200  : 		//
; 201  : 		
; 202  : 		if (raw->sound_effect_data)

  00196	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00199	83 78 3c 00	 cmp	 DWORD PTR [eax+60], 0
  0019d	0f 84 9a 00 00
	00		 je	 $LN23@play_local

; 203  : 		{
; 204  : 			destroy_system_sound_effect (raw->sound_effect_data);

  001a3	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  001a6	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  001a9	51		 push	 ecx
  001aa	e8 00 00 00 00	 call	 ?destroy_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z ; destroy_system_sound_effect

; 205  : 
; 206  : 			set_local_entity_ptr_value (en, PTR_TYPE_SOUND_EFFECT_DATA, NULL);

  001af	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  001b3	74 0d		 je	 SHORT $LN86@play_local
  001b5	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  001b8	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ba	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv158[ebp], ecx
  001c0	eb 24		 jmp	 SHORT $LN87@play_local
$LN86@play_local:
  001c2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z@4JA
  001c8	83 c2 5b	 add	 edx, 91			; 0000005bH
  001cb	52		 push	 edx
  001cc	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@KPCIHEDK@c?3?2users?2nhv90?2projects?2eech?2ap@
  001d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001d6	50		 push	 eax
  001d7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001dc	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv158[ebp], 0
$LN87@play_local:
  001e6	b9 01 00 00 00	 mov	 ecx, 1
  001eb	85 c9		 test	 ecx, ecx
  001ed	74 0c		 je	 SHORT $LN88@play_local
  001ef	c7 85 54 ff ff
	ff 0e 00 00 00	 mov	 DWORD PTR tv166[ebp], 14 ; 0000000eH
  001f9	eb 24		 jmp	 SHORT $LN89@play_local
$LN88@play_local:
  001fb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z@4JA
  00201	83 c2 5b	 add	 edx, 91			; 0000005bH
  00204	52		 push	 edx
  00205	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@KPCIHEDK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0020a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_ptr_type_message@@3PBDB ; overload_invalid_ptr_type_message
  0020f	50		 push	 eax
  00210	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00215	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv166[ebp], 0
$LN89@play_local:
  0021f	6a 00		 push	 0
  00221	6a 0e		 push	 14			; 0000000eH
  00223	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00226	51		 push	 ecx
  00227	6b 95 58 ff ff
	ff 50		 imul	 edx, DWORD PTR tv158[ebp], 80
  0022e	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR tv166[ebp]
  00234	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_local_entity_ptr_value@@3PAY0BE@P6GXPAUENTITY@@W4PTR_TYPES@@PAX@ZA[edx+eax*4]
  0023b	ff d1		 call	 ecx
$LN23@play_local:

; 207  : 		}
; 208  : 
; 209  : 		return;

  0023d	e9 3b 0f 00 00	 jmp	 $LN1@play_local
$LN19@play_local:

; 210  : 	}
; 211  : 
; 212  : 	//
; 213  : 	// don't play radio messages if radio broken
; 214  : 	//
; 215  : 
; 216  : 	if (raw->eff.sub_type == ENTITY_SUB_TYPE_EFFECT_SOUND_RADIO_MESSAGE) 

  00242	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00245	83 38 1e	 cmp	 DWORD PTR [eax], 30	; 0000001eH
  00248	0f 85 c6 00 00
	00		 jne	 $LN26@play_local

; 217  : 	{
; 218  : 		if (get_gunship_entity ())

  0024e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00255	0f 84 b9 00 00
	00		 je	 $LN26@play_local

; 219  : 		{
; 220  : 			if (!get_gunship_comms_equipment_ok ())

  0025b	e8 00 00 00 00	 call	 ?get_gunship_comms_equipment_ok@@YGHXZ ; get_gunship_comms_equipment_ok
  00260	85 c0		 test	 eax, eax
  00262	0f 85 ac 00 00
	00		 jne	 $LN26@play_local

; 221  : 			{
; 222  : 				if (raw->sound_effect_data)

  00268	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  0026b	83 78 3c 00	 cmp	 DWORD PTR [eax+60], 0
  0026f	0f 84 9a 00 00
	00		 je	 $LN27@play_local

; 223  : 				{
; 224  : 					destroy_system_sound_effect (raw->sound_effect_data);

  00275	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00278	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  0027b	51		 push	 ecx
  0027c	e8 00 00 00 00	 call	 ?destroy_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z ; destroy_system_sound_effect

; 225  : 
; 226  : 					set_local_entity_ptr_value (en, PTR_TYPE_SOUND_EFFECT_DATA, NULL);

  00281	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00285	74 0d		 je	 SHORT $LN90@play_local
  00287	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0028a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0028c	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv188[ebp], ecx
  00292	eb 24		 jmp	 SHORT $LN91@play_local
$LN90@play_local:
  00294	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z@4JA
  0029a	83 c2 6f	 add	 edx, 111		; 0000006fH
  0029d	52		 push	 edx
  0029e	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@KPCIHEDK@c?3?2users?2nhv90?2projects?2eech?2ap@
  002a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002a8	50		 push	 eax
  002a9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002ae	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv188[ebp], 0
$LN91@play_local:
  002b8	b9 01 00 00 00	 mov	 ecx, 1
  002bd	85 c9		 test	 ecx, ecx
  002bf	74 0c		 je	 SHORT $LN92@play_local
  002c1	c7 85 54 ff ff
	ff 0e 00 00 00	 mov	 DWORD PTR tv196[ebp], 14 ; 0000000eH
  002cb	eb 24		 jmp	 SHORT $LN93@play_local
$LN92@play_local:
  002cd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z@4JA
  002d3	83 c2 6f	 add	 edx, 111		; 0000006fH
  002d6	52		 push	 edx
  002d7	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@KPCIHEDK@c?3?2users?2nhv90?2projects?2eech?2ap@
  002dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_ptr_type_message@@3PBDB ; overload_invalid_ptr_type_message
  002e1	50		 push	 eax
  002e2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002e7	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv196[ebp], 0
$LN93@play_local:
  002f1	6a 00		 push	 0
  002f3	6a 0e		 push	 14			; 0000000eH
  002f5	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  002f8	51		 push	 ecx
  002f9	6b 95 58 ff ff
	ff 50		 imul	 edx, DWORD PTR tv188[ebp], 80
  00300	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR tv196[ebp]
  00306	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_local_entity_ptr_value@@3PAY0BE@P6GXPAUENTITY@@W4PTR_TYPES@@PAX@ZA[edx+eax*4]
  0030d	ff d1		 call	 ecx
$LN27@play_local:

; 227  : 				}
; 228  : 
; 229  : 				return;

  0030f	e9 69 0e 00 00	 jmp	 $LN1@play_local
$LN26@play_local:

; 230  : 			}
; 231  : 		}
; 232  : 	}
; 233  : 
; 234  : 	if ((!raw->valid_sound_effect) && (raw->valid_effect_lifetime <= 0.0))

  00314	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00317	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  0031a	c1 e9 08	 shr	 ecx, 8
  0031d	83 e1 01	 and	 ecx, 1
  00320	0f 85 c7 00 00
	00		 jne	 $LN28@play_local
  00326	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00329	f3 0f 5a 40 38	 cvtss2sd xmm0, DWORD PTR [eax+56]
  0032e	0f 57 c9	 xorps	 xmm1, xmm1
  00331	66 0f 2f c8	 comisd	 xmm1, xmm0
  00335	0f 82 b2 00 00
	00		 jb	 $LN28@play_local

; 235  : 	{
; 236  : 		//
; 237  : 		// destroy sound if it is playing
; 238  : 		//
; 239  : 
; 240  : 		if (raw->sound_effect_data)

  0033b	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  0033e	83 78 3c 00	 cmp	 DWORD PTR [eax+60], 0
  00342	0f 84 a0 00 00
	00		 je	 $LN29@play_local

; 241  : 		{
; 242  : 			destroy_system_sound_effect (raw->sound_effect_data);

  00348	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  0034b	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  0034e	51		 push	 ecx
  0034f	e8 00 00 00 00	 call	 ?destroy_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z ; destroy_system_sound_effect

; 243  : 
; 244  : 			set_local_entity_ptr_value (en, PTR_TYPE_SOUND_EFFECT_DATA, NULL);

  00354	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00358	74 0d		 je	 SHORT $LN94@play_local
  0035a	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0035d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0035f	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv219[ebp], ecx
  00365	eb 27		 jmp	 SHORT $LN95@play_local
$LN94@play_local:
  00367	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z@4JA
  0036d	81 c2 81 00 00
	00		 add	 edx, 129		; 00000081H
  00373	52		 push	 edx
  00374	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@KPCIHEDK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00379	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0037e	50		 push	 eax
  0037f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00384	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv219[ebp], 0
$LN95@play_local:
  0038e	b9 01 00 00 00	 mov	 ecx, 1
  00393	85 c9		 test	 ecx, ecx
  00395	74 0c		 je	 SHORT $LN96@play_local
  00397	c7 85 54 ff ff
	ff 0e 00 00 00	 mov	 DWORD PTR tv227[ebp], 14 ; 0000000eH
  003a1	eb 27		 jmp	 SHORT $LN97@play_local
$LN96@play_local:
  003a3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z@4JA
  003a9	81 c2 81 00 00
	00		 add	 edx, 129		; 00000081H
  003af	52		 push	 edx
  003b0	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@KPCIHEDK@c?3?2users?2nhv90?2projects?2eech?2ap@
  003b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_ptr_type_message@@3PBDB ; overload_invalid_ptr_type_message
  003ba	50		 push	 eax
  003bb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003c0	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv227[ebp], 0
$LN97@play_local:
  003ca	6a 00		 push	 0
  003cc	6a 0e		 push	 14			; 0000000eH
  003ce	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  003d1	51		 push	 ecx
  003d2	6b 95 58 ff ff
	ff 50		 imul	 edx, DWORD PTR tv219[ebp], 80
  003d9	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR tv227[ebp]
  003df	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_local_entity_ptr_value@@3PAY0BE@P6GXPAUENTITY@@W4PTR_TYPES@@PAX@ZA[edx+eax*4]
  003e6	ff d1		 call	 ecx
$LN29@play_local:

; 245  : 		}
; 246  : 
; 247  : 		return;

  003e8	e9 90 0d 00 00	 jmp	 $LN1@play_local
$LN28@play_local:

; 248  : 	}
; 249  : 
; 250  : 	//
; 251  : 	// check if sound is within range
; 252  : 	//
; 253  : 
; 254  : 	minimum_sound_range = get_local_entity_float_value (en, FLOAT_TYPE_MINIMUM_SOUND_RANGE);

  003ed	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  003f1	74 0d		 je	 SHORT $LN98@play_local
  003f3	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  003f6	8b 08		 mov	 ecx, DWORD PTR [eax]
  003f8	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv239[ebp], ecx
  003fe	eb 27		 jmp	 SHORT $LN99@play_local
$LN98@play_local:
  00400	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z@4JA
  00406	81 c2 8b 00 00
	00		 add	 edx, 139		; 0000008bH
  0040c	52		 push	 edx
  0040d	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@KPCIHEDK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00412	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00417	50		 push	 eax
  00418	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0041d	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv239[ebp], 0
$LN99@play_local:
  00427	b9 01 00 00 00	 mov	 ecx, 1
  0042c	85 c9		 test	 ecx, ecx
  0042e	74 0c		 je	 SHORT $LN100@play_local
  00430	c7 85 54 ff ff
	ff a4 00 00 00	 mov	 DWORD PTR tv247[ebp], 164 ; 000000a4H
  0043a	eb 27		 jmp	 SHORT $LN101@play_local
$LN100@play_local:
  0043c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z@4JA
  00442	81 c2 8b 00 00
	00		 add	 edx, 139		; 0000008bH
  00448	52		 push	 edx
  00449	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@KPCIHEDK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0044e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00453	50		 push	 eax
  00454	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00459	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv247[ebp], 0
$LN101@play_local:
  00463	68 a4 00 00 00	 push	 164			; 000000a4H
  00468	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0046b	51		 push	 ecx
  0046c	69 95 58 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv239[ebp], 700
  00476	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR tv247[ebp]
  0047c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00483	ff d1		 call	 ecx
  00485	d9 5d e0	 fstp	 DWORD PTR _minimum_sound_range$[ebp]

; 255  : 	reference_sound_range = get_local_entity_float_value (en, FLOAT_TYPE_REFERENCE_SOUND_RANGE);

  00488	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0048c	74 0d		 je	 SHORT $LN102@play_local
  0048e	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00491	8b 08		 mov	 ecx, DWORD PTR [eax]
  00493	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv259[ebp], ecx
  00499	eb 27		 jmp	 SHORT $LN103@play_local
$LN102@play_local:
  0049b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z@4JA
  004a1	81 c2 8c 00 00
	00		 add	 edx, 140		; 0000008cH
  004a7	52		 push	 edx
  004a8	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@KPCIHEDK@c?3?2users?2nhv90?2projects?2eech?2ap@
  004ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  004b2	50		 push	 eax
  004b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004b8	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv259[ebp], 0
$LN103@play_local:
  004c2	b9 01 00 00 00	 mov	 ecx, 1
  004c7	85 c9		 test	 ecx, ecx
  004c9	74 0c		 je	 SHORT $LN104@play_local
  004cb	c7 85 54 ff ff
	ff a5 00 00 00	 mov	 DWORD PTR tv267[ebp], 165 ; 000000a5H
  004d5	eb 27		 jmp	 SHORT $LN105@play_local
$LN104@play_local:
  004d7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z@4JA
  004dd	81 c2 8c 00 00
	00		 add	 edx, 140		; 0000008cH
  004e3	52		 push	 edx
  004e4	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@KPCIHEDK@c?3?2users?2nhv90?2projects?2eech?2ap@
  004e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  004ee	50		 push	 eax
  004ef	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004f4	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv267[ebp], 0
$LN105@play_local:
  004fe	68 a5 00 00 00	 push	 165			; 000000a5H
  00503	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00506	51		 push	 ecx
  00507	69 95 58 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv259[ebp], 700
  00511	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR tv267[ebp]
  00517	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  0051e	ff d1		 call	 ecx
  00520	d9 5d dc	 fstp	 DWORD PTR _reference_sound_range$[ebp]

; 256  : 	maximum_sound_range = get_local_entity_float_value (en, FLOAT_TYPE_MAXIMUM_SOUND_RANGE);

  00523	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00527	74 0d		 je	 SHORT $LN106@play_local
  00529	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0052c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0052e	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv279[ebp], ecx
  00534	eb 27		 jmp	 SHORT $LN107@play_local
$LN106@play_local:
  00536	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z@4JA
  0053c	81 c2 8d 00 00
	00		 add	 edx, 141		; 0000008dH
  00542	52		 push	 edx
  00543	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@KPCIHEDK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00548	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0054d	50		 push	 eax
  0054e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00553	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv279[ebp], 0
$LN107@play_local:
  0055d	b9 01 00 00 00	 mov	 ecx, 1
  00562	85 c9		 test	 ecx, ecx
  00564	74 0c		 je	 SHORT $LN108@play_local
  00566	c7 85 54 ff ff
	ff a6 00 00 00	 mov	 DWORD PTR tv287[ebp], 166 ; 000000a6H
  00570	eb 27		 jmp	 SHORT $LN109@play_local
$LN108@play_local:
  00572	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z@4JA
  00578	81 c2 8d 00 00
	00		 add	 edx, 141		; 0000008dH
  0057e	52		 push	 edx
  0057f	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@KPCIHEDK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00584	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00589	50		 push	 eax
  0058a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0058f	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv287[ebp], 0
$LN109@play_local:
  00599	68 a6 00 00 00	 push	 166			; 000000a6H
  0059e	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  005a1	51		 push	 ecx
  005a2	69 95 58 ff ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv279[ebp], 700
  005ac	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR tv287[ebp]
  005b2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  005b9	ff d1		 call	 ecx
  005bb	d9 5d d8	 fstp	 DWORD PTR _maximum_sound_range$[ebp]

; 257  : 
; 258  : 	maximum_volume = get_local_entity_int_value (en, INT_TYPE_MAXIMUM_VOLUME);

  005be	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  005c2	74 0d		 je	 SHORT $LN110@play_local
  005c4	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  005c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  005c9	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv299[ebp], ecx
  005cf	eb 27		 jmp	 SHORT $LN111@play_local
$LN110@play_local:
  005d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z@4JA
  005d7	81 c2 8f 00 00
	00		 add	 edx, 143		; 0000008fH
  005dd	52		 push	 edx
  005de	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@KPCIHEDK@c?3?2users?2nhv90?2projects?2eech?2ap@
  005e3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  005e8	50		 push	 eax
  005e9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005ee	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv299[ebp], 0
$LN111@play_local:
  005f8	b9 01 00 00 00	 mov	 ecx, 1
  005fd	85 c9		 test	 ecx, ecx
  005ff	74 0c		 je	 SHORT $LN112@play_local
  00601	c7 85 54 ff ff
	ff 84 00 00 00	 mov	 DWORD PTR tv307[ebp], 132 ; 00000084H
  0060b	eb 27		 jmp	 SHORT $LN113@play_local
$LN112@play_local:
  0060d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z@4JA
  00613	81 c2 8f 00 00
	00		 add	 edx, 143		; 0000008fH
  00619	52		 push	 edx
  0061a	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@KPCIHEDK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0061f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00624	50		 push	 eax
  00625	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0062a	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv307[ebp], 0
$LN113@play_local:
  00634	68 84 00 00 00	 push	 132			; 00000084H
  00639	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0063c	51		 push	 ecx
  0063d	69 95 58 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv299[ebp], 1116
  00647	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR tv307[ebp]
  0064d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00654	ff d1		 call	 ecx
  00656	89 45 f0	 mov	 DWORD PTR _maximum_volume$[ebp], eax

; 259  : 
; 260  : 	if ((maximum_sound_range == 0.0) || (range == 0.0))

  00659	f3 0f 5a 45 d8	 cvtss2sd xmm0, DWORD PTR _maximum_sound_range$[ebp]
  0065e	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00666	9f		 lahf
  00667	f6 c4 44	 test	 ah, 68			; 00000044H
  0066a	7b 13		 jnp	 SHORT $LN32@play_local
  0066c	f3 0f 5a 45 10	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  00671	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00679	9f		 lahf
  0067a	f6 c4 44	 test	 ah, 68			; 00000044H
  0067d	7a 0f		 jp	 SHORT $LN30@play_local
$LN32@play_local:

; 261  : 	{
; 262  : 		v = maximum_volume;

  0067f	f3 0f 2a 45 f0	 cvtsi2ss xmm0, DWORD PTR _maximum_volume$[ebp]
  00684	f3 0f 11 45 e8	 movss	 DWORD PTR _v$[ebp], xmm0

; 263  : 	}
; 264  : 	else

  00689	e9 88 02 00 00	 jmp	 $LN31@play_local
$LN30@play_local:

; 265  : 	{
; 266  : 		if (range >= maximum_sound_range)

  0068e	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _range$[ebp]
  00693	0f 2f 45 d8	 comiss	 xmm0, DWORD PTR _maximum_sound_range$[ebp]
  00697	0f 82 b2 00 00
	00		 jb	 $LN33@play_local

; 267  : 		{
; 268  : 			#if DEBUG_MODULE
; 269  : 		
; 270  : 			debug_log ("SE_SND : Don't play sound ( range = %.2f, zr = %.2f, index = %s )", range, zero_volume_range, application_sound_effects [raw->effect_index [0]].name);
; 271  : 		
; 272  : 			#endif
; 273  : 		
; 274  : 			if (raw->sound_effect_data)

  0069d	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  006a0	83 78 3c 00	 cmp	 DWORD PTR [eax+60], 0
  006a4	0f 84 a0 00 00
	00		 je	 $LN34@play_local

; 275  : 			{
; 276  : 				destroy_system_sound_effect (raw->sound_effect_data);

  006aa	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  006ad	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  006b0	51		 push	 ecx
  006b1	e8 00 00 00 00	 call	 ?destroy_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z ; destroy_system_sound_effect

; 277  : 
; 278  : 				set_local_entity_ptr_value (en, PTR_TYPE_SOUND_EFFECT_DATA, NULL);

  006b6	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  006ba	74 0d		 je	 SHORT $LN114@play_local
  006bc	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  006bf	8b 08		 mov	 ecx, DWORD PTR [eax]
  006c1	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv329[ebp], ecx
  006c7	eb 27		 jmp	 SHORT $LN115@play_local
$LN114@play_local:
  006c9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z@4JA
  006cf	81 c2 a3 00 00
	00		 add	 edx, 163		; 000000a3H
  006d5	52		 push	 edx
  006d6	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@KPCIHEDK@c?3?2users?2nhv90?2projects?2eech?2ap@
  006db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  006e0	50		 push	 eax
  006e1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006e6	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv329[ebp], 0
$LN115@play_local:
  006f0	b9 01 00 00 00	 mov	 ecx, 1
  006f5	85 c9		 test	 ecx, ecx
  006f7	74 0c		 je	 SHORT $LN116@play_local
  006f9	c7 85 54 ff ff
	ff 0e 00 00 00	 mov	 DWORD PTR tv337[ebp], 14 ; 0000000eH
  00703	eb 27		 jmp	 SHORT $LN117@play_local
$LN116@play_local:
  00705	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z@4JA
  0070b	81 c2 a3 00 00
	00		 add	 edx, 163		; 000000a3H
  00711	52		 push	 edx
  00712	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@KPCIHEDK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00717	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_ptr_type_message@@3PBDB ; overload_invalid_ptr_type_message
  0071c	50		 push	 eax
  0071d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00722	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv337[ebp], 0
$LN117@play_local:
  0072c	6a 00		 push	 0
  0072e	6a 0e		 push	 14			; 0000000eH
  00730	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00733	51		 push	 ecx
  00734	6b 95 58 ff ff
	ff 50		 imul	 edx, DWORD PTR tv329[ebp], 80
  0073b	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR tv337[ebp]
  00741	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_local_entity_ptr_value@@3PAY0BE@P6GXPAUENTITY@@W4PTR_TYPES@@PAX@ZA[edx+eax*4]
  00748	ff d1		 call	 ecx
$LN34@play_local:

; 279  : 			}
; 280  : 
; 281  : 			return;

  0074a	e9 2e 0a 00 00	 jmp	 $LN1@play_local
$LN33@play_local:

; 282  : 		}
; 283  : 
; 284  : 		//
; 285  : 		// adjust volume with range
; 286  : 		//
; 287  : 		{
; 288  : //			float temp;
; 289  : //			temp = zero_volume_range - range;
; 290  : //			v = maximum_volume * ((temp * temp) / (zero_volume_range * zero_volume_range));
; 291  : 			if ((minimum_sound_range == 0.0) && (reference_sound_range == 0.0))

  0074f	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _minimum_sound_range$[ebp]
  00754	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0075c	9f		 lahf
  0075d	f6 c4 44	 test	 ah, 68			; 00000044H
  00760	7a 44		 jp	 SHORT $LN35@play_local
  00762	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR _reference_sound_range$[ebp]
  00767	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0076f	9f		 lahf
  00770	f6 c4 44	 test	 ah, 68			; 00000044H
  00773	7a 31		 jp	 SHORT $LN35@play_local

; 292  : 			{
; 293  : 				float temp;
; 294  : 				temp = maximum_sound_range - range;

  00775	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _maximum_sound_range$[ebp]
  0077a	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _range$[ebp]
  0077f	f3 0f 11 45 d4	 movss	 DWORD PTR _temp$13[ebp], xmm0

; 295  : 				v = ((temp * temp) / (maximum_sound_range * maximum_sound_range));

  00784	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _temp$13[ebp]
  00789	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _temp$13[ebp]
  0078e	f3 0f 10 4d d8	 movss	 xmm1, DWORD PTR _maximum_sound_range$[ebp]
  00793	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _maximum_sound_range$[ebp]
  00798	f3 0f 5e c1	 divss	 xmm0, xmm1
  0079c	f3 0f 11 45 e8	 movss	 DWORD PTR _v$[ebp], xmm0
  007a1	e9 61 01 00 00	 jmp	 $LN38@play_local
$LN35@play_local:

; 296  : 			}
; 297  : 			else if (minimum_sound_range == 0.0)

  007a6	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _minimum_sound_range$[ebp]
  007ab	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  007b3	9f		 lahf
  007b4	f6 c4 44	 test	 ah, 68			; 00000044H
  007b7	7a 6d		 jp	 SHORT $LN37@play_local

; 298  : 			{
; 299  : 				v = range >= maximum_sound_range ? 0.0 : range > reference_sound_range ? reference_sound_range / range : 1.0;

  007b9	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _range$[ebp]
  007be	0f 2f 45 d8	 comiss	 xmm0, DWORD PTR _maximum_sound_range$[ebp]
  007c2	72 0d		 jb	 SHORT $LN120@play_local
  007c4	0f 57 c0	 xorps	 xmm0, xmm0
  007c7	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv358[ebp], xmm0
  007cf	eb 43		 jmp	 SHORT $LN121@play_local
$LN120@play_local:
  007d1	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _range$[ebp]
  007d6	0f 2f 45 dc	 comiss	 xmm0, DWORD PTR _reference_sound_range$[ebp]
  007da	76 18		 jbe	 SHORT $LN118@play_local
  007dc	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _reference_sound_range$[ebp]
  007e1	f3 0f 5e 45 10	 divss	 xmm0, DWORD PTR _range$[ebp]
  007e6	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  007ea	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv357[ebp], xmm0
  007f2	eb 10		 jmp	 SHORT $LN119@play_local
$LN118@play_local:
  007f4	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  007fc	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv357[ebp], xmm0
$LN119@play_local:
  00804	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv357[ebp]
  0080c	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv358[ebp], xmm0
$LN121@play_local:
  00814	f2 0f 5a 85 54
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv358[ebp]
  0081c	f3 0f 11 45 e8	 movss	 DWORD PTR _v$[ebp], xmm0

; 300  : 			}
; 301  : 			else

  00821	e9 e1 00 00 00	 jmp	 $LN38@play_local
$LN37@play_local:

; 302  : 			{
; 303  : 				v = 0.0;

  00826	0f 57 c0	 xorps	 xmm0, xmm0
  00829	f3 0f 11 45 e8	 movss	 DWORD PTR _v$[ebp], xmm0

; 304  : 				if((range >= maximum_sound_range) || (range <= minimum_sound_range))

  0082e	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _range$[ebp]
  00833	0f 2f 45 d8	 comiss	 xmm0, DWORD PTR _maximum_sound_range$[ebp]
  00837	73 0b		 jae	 SHORT $LN41@play_local
  00839	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _minimum_sound_range$[ebp]
  0083e	0f 2f 45 10	 comiss	 xmm0, DWORD PTR _range$[ebp]
  00842	72 0a		 jb	 SHORT $LN39@play_local
$LN41@play_local:

; 305  : 					v = 0.0;

  00844	0f 57 c0	 xorps	 xmm0, xmm0
  00847	f3 0f 11 45 e8	 movss	 DWORD PTR _v$[ebp], xmm0
  0084c	eb 53		 jmp	 SHORT $LN43@play_local
$LN39@play_local:

; 306  : 				else if (range < reference_sound_range)

  0084e	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _reference_sound_range$[ebp]
  00853	0f 2f 45 10	 comiss	 xmm0, DWORD PTR _range$[ebp]
  00857	76 1f		 jbe	 SHORT $LN42@play_local

; 307  : 					v = (range-minimum_sound_range) / (reference_sound_range-minimum_sound_range);

  00859	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _range$[ebp]
  0085e	f3 0f 5c 45 e0	 subss	 xmm0, DWORD PTR _minimum_sound_range$[ebp]
  00863	f3 0f 10 4d dc	 movss	 xmm1, DWORD PTR _reference_sound_range$[ebp]
  00868	f3 0f 5c 4d e0	 subss	 xmm1, DWORD PTR _minimum_sound_range$[ebp]
  0086d	f3 0f 5e c1	 divss	 xmm0, xmm1
  00871	f3 0f 11 45 e8	 movss	 DWORD PTR _v$[ebp], xmm0

; 308  : 				else

  00876	eb 29		 jmp	 SHORT $LN43@play_local
$LN42@play_local:

; 309  : 					v = 1- ((range-reference_sound_range) / (maximum_sound_range-reference_sound_range));

  00878	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _range$[ebp]
  0087d	f3 0f 5c 45 dc	 subss	 xmm0, DWORD PTR _reference_sound_range$[ebp]
  00882	f3 0f 10 4d d8	 movss	 xmm1, DWORD PTR _maximum_sound_range$[ebp]
  00887	f3 0f 5c 4d dc	 subss	 xmm1, DWORD PTR _reference_sound_range$[ebp]
  0088c	f3 0f 5e c1	 divss	 xmm0, xmm1
  00890	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00898	f3 0f 5c c8	 subss	 xmm1, xmm0
  0089c	f3 0f 11 4d e8	 movss	 DWORD PTR _v$[ebp], xmm1
$LN43@play_local:

; 310  : 				//Normalize
; 311  : 				v = bound(v, 0.0, 1.0);

  008a1	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _v$[ebp]
  008a6	0f 57 c9	 xorps	 xmm1, xmm1
  008a9	66 0f 2f c8	 comisd	 xmm1, xmm0
  008ad	76 0d		 jbe	 SHORT $LN124@play_local
  008af	0f 57 c0	 xorps	 xmm0, xmm0
  008b2	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv376[ebp], xmm0
  008ba	eb 3e		 jmp	 SHORT $LN125@play_local
$LN124@play_local:
  008bc	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _v$[ebp]
  008c1	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  008c9	76 12		 jbe	 SHORT $LN122@play_local
  008cb	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  008d3	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv375[ebp], xmm0
  008db	eb 0d		 jmp	 SHORT $LN123@play_local
$LN122@play_local:
  008dd	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _v$[ebp]
  008e2	f2 0f 11 85 4c
	ff ff ff	 movsd	 QWORD PTR tv375[ebp], xmm0
$LN123@play_local:
  008ea	f2 0f 10 85 4c
	ff ff ff	 movsd	 xmm0, QWORD PTR tv375[ebp]
  008f2	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv376[ebp], xmm0
$LN125@play_local:
  008fa	f2 0f 5a 85 54
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv376[ebp]
  00902	f3 0f 11 45 e8	 movss	 DWORD PTR _v$[ebp], xmm0
$LN38@play_local:

; 312  : 			}
; 313  : 			v = v * maximum_volume;

  00907	f3 0f 2a 45 f0	 cvtsi2ss xmm0, DWORD PTR _maximum_volume$[ebp]
  0090c	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _v$[ebp]
  00911	f3 0f 11 45 e8	 movss	 DWORD PTR _v$[ebp], xmm0
$LN31@play_local:

; 314  : 		}
; 315  : 	}
; 316  : 
; 317  : 	//
; 318  : 	// adjust volume with entity amplification level
; 319  : 	//
; 320  : 	
; 321  : 	v *= raw->amplification;

  00916	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00919	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _v$[ebp]
  0091e	f3 0f 59 40 2c	 mulss	 xmm0, DWORD PTR [eax+44]
  00923	f3 0f 11 45 e8	 movss	 DWORD PTR _v$[ebp], xmm0

; 322  : 
; 323  : 	channel = raw->sound_channel != SOUND_CHANNEL_SOUND_EFFECT ? 1 : 0;

  00928	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  0092b	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  0092e	c1 e9 02	 shr	 ecx, 2
  00931	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00934	74 0c		 je	 SHORT $LN126@play_local
  00936	c7 85 58 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv386[ebp], 1
  00940	eb 0a		 jmp	 SHORT $LN127@play_local
$LN126@play_local:
  00942	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv386[ebp], 0
$LN127@play_local:
  0094c	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR tv386[ebp]
  00952	89 55 ec	 mov	 DWORD PTR _channel$[ebp], edx

; 324  : 
; 325  : 	//
; 326  : 	// arneh - adjust volume with canopy close/open
; 327  : 	//
; 328  : 
; 329  : 	if (in_cockpit)

  00955	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?in_cockpit@@3HA, 0 ; in_cockpit
  0095c	0f 84 96 01 00
	00		 je	 $LN57@play_local

; 330  : 	{
; 331  : 		// Casm 03MAR10 Canopy sound amplification control
; 332  : 		csa_codes
; 333  : 			csa_code;
; 334  : 
; 335  : 		// Casm 07DEC09
; 336  : 		switch (raw->eff.sub_type)

  00962	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00965	8b 08		 mov	 ecx, DWORD PTR [eax]
  00967	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv390[ebp], ecx
  0096d	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR tv390[ebp]
  00973	83 ea 0a	 sub	 edx, 10			; 0000000aH
  00976	89 95 58 ff ff
	ff		 mov	 DWORD PTR tv390[ebp], edx
  0097c	83 bd 58 ff ff
	ff 1d		 cmp	 DWORD PTR tv390[ebp], 29 ; 0000001dH
  00983	77 7d		 ja	 SHORT $LN56@play_local
  00985	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR tv390[ebp]
  0098b	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN149@play_local[eax]
  00992	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN151@play_local[ecx*4]
$LN45@play_local:

; 337  : 		{
; 338  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_ROTOR_LOOPING:
; 339  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_ROTOR_SLAP:
; 340  : 			//ataribaby 28/12/2008 if in player heli then do it as internal otherwise as external sound from other helis 
; 341  : 			if (parent == get_gunship_entity ())

  00999	8b 45 fc	 mov	 eax, DWORD PTR _parent$[ebp]
  0099c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  009a2	75 09		 jne	 SHORT $LN46@play_local

; 342  : 			{
; 343  : 				csa_code = CSA_CODES_ROTOR_PLAYER;

  009a4	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _csa_code$12[ebp], 0

; 344  : 			}
; 345  : 			else

  009ab	eb 07		 jmp	 SHORT $LN47@play_local
$LN46@play_local:

; 346  : 			{
; 347  : 				csa_code = CSA_CODES_ROTOR_EXTERNAL;

  009ad	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR _csa_code$12[ebp], 1
$LN47@play_local:

; 348  : 			}
; 349  : 			break;

  009b4	eb 5a		 jmp	 SHORT $LN4@play_local
$LN48@play_local:

; 350  : 		//ataribaby 28/12/2008 lets guns rocks
; 351  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_GATLING_GUN: 
; 352  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_CHAIN_GUN:
; 353  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_GUN_PODS:
; 354  : 			csa_code = CSA_CODES_GUNS;

  009b6	c7 45 d0 06 00
	00 00		 mov	 DWORD PTR _csa_code$12[ebp], 6

; 355  : 			break;

  009bd	eb 51		 jmp	 SHORT $LN4@play_local
$LN49@play_local:

; 356  : 		//ataribaby 28/12/2008 all external sound sources gets influenced by external_sounds_volume setting			
; 357  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_AMBIENT_HEAVY_RAIN:
; 358  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_AMBIENT_HEAVY_WIND:
; 359  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_AMBIENT_LIGHT_RAIN:
; 360  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_AMBIENT_LIGHT_WIND:
; 361  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_AMBIENT_JUNGLE:
; 362  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_AMBIENT_SEA:
; 363  : 			csa_code = CSA_CODES_ENV;

  009bf	c7 45 d0 07 00
	00 00		 mov	 DWORD PTR _csa_code$12[ebp], 7

; 364  : 			break;

  009c6	eb 48		 jmp	 SHORT $LN4@play_local
$LN50@play_local:

; 365  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_ROTOR_TURBINE1:
; 366  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_ROTOR_WIND_DOWN1:
; 367  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_ROTOR_WIND_DOWN2:
; 368  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_ROTOR_WIND_UP1:
; 369  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_ROTOR_WIND_UP2:
; 370  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_ENGINE:
; 371  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_ENGINE_LOOPING1:
; 372  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_ENGINE_LOOPING2:
; 373  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_ROTOR_TURBINE2:
; 374  : 			//ataribaby 28/12/2008 if in player heli then do it as internal otherwise as external sound from other helis 
; 375  : 			if (parent == get_gunship_entity ())

  009c8	8b 45 fc	 mov	 eax, DWORD PTR _parent$[ebp]
  009cb	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  009d1	75 09		 jne	 SHORT $LN51@play_local

; 376  : 			{
; 377  : 				csa_code = CSA_CODES_ENGINE_PLAYER;

  009d3	c7 45 d0 02 00
	00 00		 mov	 DWORD PTR _csa_code$12[ebp], 2

; 378  : 			}
; 379  : 			else

  009da	eb 07		 jmp	 SHORT $LN52@play_local
$LN51@play_local:

; 380  : 			{
; 381  : 				csa_code = CSA_CODES_ENGINE_EXTERNAL;

  009dc	c7 45 d0 03 00
	00 00		 mov	 DWORD PTR _csa_code$12[ebp], 3
$LN52@play_local:

; 382  : 			}
; 383  : 			break;

  009e3	eb 2b		 jmp	 SHORT $LN4@play_local
$LN53@play_local:

; 384  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_MISC:
; 385  : 			if (parent == get_gunship_entity ())

  009e5	8b 45 fc	 mov	 eax, DWORD PTR _parent$[ebp]
  009e8	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  009ee	75 09		 jne	 SHORT $LN54@play_local

; 386  : 			{
; 387  : 				csa_code = CSA_CODES_MISC_PLAYER;

  009f0	c7 45 d0 04 00
	00 00		 mov	 DWORD PTR _csa_code$12[ebp], 4

; 388  : 			}
; 389  : 			else

  009f7	eb 07		 jmp	 SHORT $LN55@play_local
$LN54@play_local:

; 390  : 			{
; 391  : 				csa_code = CSA_CODES_MISC_EXTERNAL;

  009f9	c7 45 d0 05 00
	00 00		 mov	 DWORD PTR _csa_code$12[ebp], 5
$LN55@play_local:

; 392  : 			}
; 393  : 			break;

  00a00	eb 0e		 jmp	 SHORT $LN4@play_local
$LN56@play_local:

; 394  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_CPG_MESSAGE:
; 395  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_INCOMING_MISSILE_WARNING:
; 396  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_LOCK_ON_TONE:
; 397  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_MCA:
; 398  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_MISC_SPEECH:
; 399  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_RADAR_LOCKED:
; 400  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_RADAR_TRACKED:
; 401  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_RADIO_MESSAGE:
; 402  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_APU_TURBINE:
; 403  : 		case ENTITY_SUB_TYPE_EFFECT_SOUND_WARNING_MESSAGE:
; 404  : 		default:
; 405  : 			csa_code = CSA_CODES_LAST;

  00a02	c7 45 d0 08 00
	00 00		 mov	 DWORD PTR _csa_code$12[ebp], 8

; 406  : 			channel = 1;

  00a09	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _channel$[ebp], 1
$LN4@play_local:

; 407  : 			break;
; 408  : 		}
; 409  : 
; 410  : 		if (csa_code != CSA_CODES_LAST)

  00a10	83 7d d0 08	 cmp	 DWORD PTR _csa_code$12[ebp], 8
  00a14	0f 84 de 00 00
	00		 je	 $LN57@play_local

; 411  : 		{
; 412  : 			int
; 413  : 				*values;
; 414  : 
; 415  : 			values = canopy_sound_amp[csa_code];

  00a1a	6b 45 d0 0c	 imul	 eax, DWORD PTR _csa_code$12[ebp], 12
  00a1e	05 00 00 00 00	 add	 eax, OFFSET ?canopy_sound_amp@@3PAY02HA ; canopy_sound_amp
  00a23	89 45 cc	 mov	 DWORD PTR _values$11[ebp], eax

; 416  : 			v *= values[CSA_VALUES_MIN] * 0.01 + bound((int)(canopy_door_state * 100), 0, values[CSA_VALUES_TOP]) * values[CSA_VALUES_MUL] * 0.0001;

  00a26	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?canopy_door_state@@3MA
  00a2e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42c80000
  00a36	f3 0f 2c c0	 cvttss2si eax, xmm0
  00a3a	85 c0		 test	 eax, eax
  00a3c	7d 0c		 jge	 SHORT $LN130@play_local
  00a3e	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv419[ebp], 0
  00a48	eb 60		 jmp	 SHORT $LN131@play_local
$LN130@play_local:
  00a4a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?canopy_door_state@@3MA
  00a52	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42c80000
  00a5a	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00a5e	ba 04 00 00 00	 mov	 edx, 4
  00a63	c1 e2 00	 shl	 edx, 0
  00a66	8b 45 cc	 mov	 eax, DWORD PTR _values$11[ebp]
  00a69	3b 0c 10	 cmp	 ecx, DWORD PTR [eax+edx]
  00a6c	7e 16		 jle	 SHORT $LN128@play_local
  00a6e	b9 04 00 00 00	 mov	 ecx, 4
  00a73	c1 e1 00	 shl	 ecx, 0
  00a76	8b 55 cc	 mov	 edx, DWORD PTR _values$11[ebp]
  00a79	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00a7c	89 85 54 ff ff
	ff		 mov	 DWORD PTR tv418[ebp], eax
  00a82	eb 1a		 jmp	 SHORT $LN129@play_local
$LN128@play_local:
  00a84	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?canopy_door_state@@3MA
  00a8c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42c80000
  00a94	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00a98	89 8d 54 ff ff
	ff		 mov	 DWORD PTR tv418[ebp], ecx
$LN129@play_local:
  00a9e	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR tv418[ebp]
  00aa4	89 95 58 ff ff
	ff		 mov	 DWORD PTR tv419[ebp], edx
$LN131@play_local:
  00aaa	b8 04 00 00 00	 mov	 eax, 4
  00aaf	6b c8 00	 imul	 ecx, eax, 0
  00ab2	8b 55 cc	 mov	 edx, DWORD PTR _values$11[ebp]
  00ab5	f2 0f 2a 04 0a	 cvtsi2sd xmm0, DWORD PTR [edx+ecx]
  00aba	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  00ac2	b8 04 00 00 00	 mov	 eax, 4
  00ac7	d1 e0		 shl	 eax, 1
  00ac9	8b 4d cc	 mov	 ecx, DWORD PTR _values$11[ebp]
  00acc	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR tv419[ebp]
  00ad2	0f af 14 01	 imul	 edx, DWORD PTR [ecx+eax]
  00ad6	f2 0f 2a ca	 cvtsi2sd xmm1, edx
  00ada	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3f1a36e2eb1c432d
  00ae2	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00ae6	f3 0f 5a 4d e8	 cvtss2sd xmm1, DWORD PTR _v$[ebp]
  00aeb	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00aef	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00af3	f3 0f 11 45 e8	 movss	 DWORD PTR _v$[ebp], xmm0
$LN57@play_local:

; 417  : 		}
; 418  : 	}
; 419  : 
; 420  : 	if (ui_sounds_muted == 1)

  00af8	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?ui_sounds_muted@@3HA, 1 ; ui_sounds_muted
  00aff	75 08		 jne	 SHORT $LN58@play_local

; 421  : 		v = 0.0; //ataribaby 29/12/2008 for muted UI sounds

  00b01	0f 57 c0	 xorps	 xmm0, xmm0
  00b04	f3 0f 11 45 e8	 movss	 DWORD PTR _v$[ebp], xmm0
$LN58@play_local:

; 422  : 
; 423  : 	//
; 424  : 	// adjust volume with channel sound settings
; 425  : 	//
; 426  : 
; 427  : 	ASSERT (raw->sound_channel < NUM_SOUND_CHANNEL_TYPES);

  00b09	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00b0c	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00b0f	c1 e9 02	 shr	 ecx, 2
  00b12	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00b15	83 f9 07	 cmp	 ecx, 7
  00b18	72 1a		 jb	 SHORT $LN59@play_local
  00b1a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z@4JA
  00b1f	05 38 01 00 00	 add	 eax, 312		; 00000138H
  00b24	50		 push	 eax
  00b25	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@KPCIHEDK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b2a	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@ODLPCGGO@raw?9?$DOsound_channel?5?$DM?5NUM_SOUND_@
  00b2f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN59@play_local:

; 428  : 
; 429  : 	if (sound_channel_info [raw->sound_channel].mute)

  00b34	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00b37	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00b3a	c1 e9 02	 shr	 ecx, 2
  00b3d	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00b40	6b d1 0c	 imul	 edx, ecx, 12
  00b43	83 ba 00 00 00
	00 00		 cmp	 DWORD PTR ?sound_channel_info@@3PAUSOUND_CHANNEL_INFO_TYPE@@A[edx], 0
  00b4a	74 0a		 je	 SHORT $LN60@play_local

; 430  : 	{
; 431  : 		v = SOUND_MINIMUM_VOLUME;

  00b4c	0f 57 c0	 xorps	 xmm0, xmm0
  00b4f	f3 0f 11 45 e8	 movss	 DWORD PTR _v$[ebp], xmm0

; 432  : 	}
; 433  : 	else

  00b54	eb 3b		 jmp	 SHORT $LN61@play_local
$LN60@play_local:

; 434  : 	{
; 435  : 		channel_volume = (float)(sound_channel_info [raw->sound_channel].volume);

  00b56	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00b59	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00b5c	c1 e9 02	 shr	 ecx, 2
  00b5f	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00b62	6b d1 0c	 imul	 edx, ecx, 12
  00b65	f3 0f 2a 82 04
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?sound_channel_info@@3PAUSOUND_CHANNEL_INFO_TYPE@@A[edx+4]
  00b6d	f3 0f 11 45 e4	 movss	 DWORD PTR _channel_volume$[ebp], xmm0

; 436  : 
; 437  : 		v *= (channel_volume * 0.1);

  00b72	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _channel_volume$[ebp]
  00b77	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00b7f	f3 0f 5a 4d e8	 cvtss2sd xmm1, DWORD PTR _v$[ebp]
  00b84	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00b88	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00b8c	f3 0f 11 45 e8	 movss	 DWORD PTR _v$[ebp], xmm0
$LN61@play_local:

; 438  : 	}
; 439  : 
; 440  : 	//
; 441  : 	// adjust volume for "dying" sound effects (currently only applies to chaingun etc.) 
; 442  : 	//
; 443  : 	
; 444  : 	if ((!raw->valid_sound_effect) && (raw->valid_effect_lifetime < 0.25))

  00b91	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00b94	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00b97	c1 e9 08	 shr	 ecx, 8
  00b9a	83 e1 01	 and	 ecx, 1
  00b9d	75 38		 jne	 SHORT $LN62@play_local
  00b9f	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00ba2	f3 0f 5a 40 38	 cvtss2sd xmm0, DWORD PTR [eax+56]
  00ba7	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fd0000000000000
  00baf	66 0f 2f c8	 comisd	 xmm1, xmm0
  00bb3	76 22		 jbe	 SHORT $LN62@play_local

; 445  : 	{
; 446  : 		v *= (raw->valid_effect_lifetime * 4.0);

  00bb5	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00bb8	f3 0f 5a 40 38	 cvtss2sd xmm0, DWORD PTR [eax+56]
  00bbd	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4010000000000000
  00bc5	f3 0f 5a 4d e8	 cvtss2sd xmm1, DWORD PTR _v$[ebp]
  00bca	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00bce	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00bd2	f3 0f 11 45 e8	 movss	 DWORD PTR _v$[ebp], xmm0
$LN62@play_local:

; 447  : 	}
; 448  : 
; 449  : 	v = bound (v, SOUND_MINIMUM_VOLUME, SOUND_MAXIMUM_VOLUME);

  00bd7	0f 57 c0	 xorps	 xmm0, xmm0
  00bda	0f 2f 45 e8	 comiss	 xmm0, DWORD PTR _v$[ebp]
  00bde	76 0d		 jbe	 SHORT $LN134@play_local
  00be0	0f 57 c0	 xorps	 xmm0, xmm0
  00be3	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR tv473[ebp], xmm0
  00beb	eb 3d		 jmp	 SHORT $LN135@play_local
$LN134@play_local:
  00bed	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _v$[ebp]
  00bf2	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@437f0000
  00bf9	76 12		 jbe	 SHORT $LN132@play_local
  00bfb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437f0000
  00c03	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR tv472[ebp], xmm0
  00c0b	eb 0d		 jmp	 SHORT $LN133@play_local
$LN132@play_local:
  00c0d	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _v$[ebp]
  00c12	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR tv472[ebp], xmm0
$LN133@play_local:
  00c1a	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR tv472[ebp]
  00c22	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR tv473[ebp], xmm0
$LN135@play_local:
  00c2a	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR tv473[ebp]
  00c32	f3 0f 11 45 e8	 movss	 DWORD PTR _v$[ebp], xmm0

; 450  : 
; 451  : 	convert_float_to_int (v, &volume);

  00c37	8d 45 f4	 lea	 eax, DWORD PTR _volume$[ebp]
  00c3a	50		 push	 eax
  00c3b	51		 push	 ecx
  00c3c	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _v$[ebp]
  00c41	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c46	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 452  : 
; 453  : 	#if DEBUG_MODULE
; 454  : 	
; 455  : 	debug_log ("SE_SND : Play sound ( range = %.2f, volume = %d, index = %s )", range, volume, application_sound_effects [raw->effect_index [0]].name);
; 456  : 	
; 457  : 	#endif
; 458  : 	
; 459  : 	if (volume > SOUND_MINIMUM_VOLUME)

  00c4b	83 7d f4 00	 cmp	 DWORD PTR _volume$[ebp], 0
  00c4f	0f 8e 7b 04 00
	00		 jle	 $LN63@play_local

; 460  : 	{
; 461  : 		if (!raw->sound_effect_data)

  00c55	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00c58	83 78 3c 00	 cmp	 DWORD PTR [eax+60], 0
  00c5c	0f 85 25 01 00
	00		 jne	 $LN69@play_local

; 462  : 		{
; 463  : 			#if DEBUG_MODULE
; 464  : 	
; 465  : 			debug_log ("SE_SND: creating sound effect");
; 466  : 	
; 467  : 			#endif
; 468  : 	
; 469  : 			if (raw->sound_effect_sequence_count > 1)

  00c62	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00c65	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00c68	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  00c6b	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00c6e	83 f9 01	 cmp	 ecx, 1
  00c71	0f 86 cc 00 00
	00		 jbe	 $LN66@play_local

; 470  : 			{
; 471  : 				//
; 472  : 				// play sequence of sounds
; 473  : 				//
; 474  : 
; 475  : 				unsigned int
; 476  : 					sample_loop;
; 477  : 
; 478  : 				sound_sequence_information
; 479  : 					*samples;
; 480  : 
; 481  : 				ASSERT (!raw->looping);

  00c77	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00c7a	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00c7d	c1 e9 09	 shr	 ecx, 9
  00c80	83 e1 01	 and	 ecx, 1
  00c83	74 1a		 je	 SHORT $LN68@play_local
  00c85	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z@4JA
  00c8a	05 6e 01 00 00	 add	 eax, 366		; 0000016eH
  00c8f	50		 push	 eax
  00c90	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@KPCIHEDK@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c95	68 00 00 00 00	 push	 OFFSET ??_C@_0O@EICIFFBF@?$CBraw?9?$DOlooping@
  00c9a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN68@play_local:

; 482  : 
; 483  : 				samples = (sound_sequence_information *) malloc_fast_mem (sizeof (sound_sequence_information) * raw->sound_effect_sequence_count);

  00c9f	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00ca2	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00ca5	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  00ca8	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00cab	c1 e1 03	 shl	 ecx, 3
  00cae	51		 push	 ecx
  00caf	e8 00 00 00 00	 call	 ?malloc_fast_memory@@YGPAXI@Z ; malloc_fast_memory
  00cb4	89 45 c4	 mov	 DWORD PTR _samples$9[ebp], eax

; 484  : 
; 485  : 				for (sample_loop = 0; sample_loop < raw->sound_effect_sequence_count; sample_loop ++)

  00cb7	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _sample_loop$10[ebp], 0
  00cbe	eb 09		 jmp	 SHORT $LN8@play_local
$LN6@play_local:
  00cc0	8b 45 c8	 mov	 eax, DWORD PTR _sample_loop$10[ebp]
  00cc3	83 c0 01	 add	 eax, 1
  00cc6	89 45 c8	 mov	 DWORD PTR _sample_loop$10[ebp], eax
$LN8@play_local:
  00cc9	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00ccc	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00ccf	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  00cd2	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00cd5	39 4d c8	 cmp	 DWORD PTR _sample_loop$10[ebp], ecx
  00cd8	73 36		 jae	 SHORT $LN7@play_local

; 486  : 				{
; 487  : 					samples [sample_loop].sound_sample_index = raw->effect_index [sample_loop];

  00cda	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00cdd	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00ce0	8b 55 c8	 mov	 edx, DWORD PTR _sample_loop$10[ebp]
  00ce3	8b 45 c4	 mov	 eax, DWORD PTR _samples$9[ebp]
  00ce6	8b 75 c8	 mov	 esi, DWORD PTR _sample_loop$10[ebp]
  00ce9	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00cec	89 0c d0	 mov	 DWORD PTR [eax+edx*8], ecx

; 488  : 
; 489  : 					samples [sample_loop].rate = application_sound_effects [raw->effect_index [sample_loop]].rate;

  00cef	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00cf2	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00cf5	8b 55 c8	 mov	 edx, DWORD PTR _sample_loop$10[ebp]
  00cf8	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00cfb	c1 e0 05	 shl	 eax, 5
  00cfe	8b 4d c8	 mov	 ecx, DWORD PTR _sample_loop$10[ebp]
  00d01	8b 55 c4	 mov	 edx, DWORD PTR _samples$9[ebp]
  00d04	8b 80 08 00 00
	00		 mov	 eax, DWORD PTR ?application_sound_effects@@3PAUSOUND_EFFECT_INFORMATION@@A[eax+8]
  00d0a	89 44 ca 04	 mov	 DWORD PTR [edx+ecx*8+4], eax

; 490  : 				}

  00d0e	eb b0		 jmp	 SHORT $LN6@play_local
$LN7@play_local:

; 491  : 
; 492  : 				raw->sound_effect_data = create_sequenced_system_sound_effect (raw->sound_effect_sequence_count, samples, volume, (void *) en, channel);

  00d10	8b 45 ec	 mov	 eax, DWORD PTR _channel$[ebp]
  00d13	50		 push	 eax
  00d14	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00d17	51		 push	 ecx
  00d18	8b 55 f4	 mov	 edx, DWORD PTR _volume$[ebp]
  00d1b	52		 push	 edx
  00d1c	8b 45 c4	 mov	 eax, DWORD PTR _samples$9[ebp]
  00d1f	50		 push	 eax
  00d20	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  00d23	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00d26	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  00d29	83 e2 0f	 and	 edx, 15			; 0000000fH
  00d2c	52		 push	 edx
  00d2d	e8 00 00 00 00	 call	 ?create_sequenced_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@HPAUSOUND_SEQUENCE_INFORMATION@@HPAXH@Z ; create_sequenced_system_sound_effect
  00d32	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  00d35	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 493  : 
; 494  : 				free_mem (samples);

  00d38	8b 45 c4	 mov	 eax, DWORD PTR _samples$9[ebp]
  00d3b	50		 push	 eax
  00d3c	e8 00 00 00 00	 call	 ?free_mem@@YGXPAX@Z	; free_mem

; 495  : 			}
; 496  : 			else

  00d41	eb 36		 jmp	 SHORT $LN67@play_local
$LN66@play_local:

; 497  : 			{
; 498  : 				//
; 499  : 				// play single sound
; 500  : 				//
; 501  : 
; 502  : 				raw->sound_effect_data = create_single_system_sound_effect (raw->effect_index [0], volume, raw->looping, (void *) en, channel);

  00d43	8b 45 ec	 mov	 eax, DWORD PTR _channel$[ebp]
  00d46	50		 push	 eax
  00d47	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00d4a	51		 push	 ecx
  00d4b	8b 55 f8	 mov	 edx, DWORD PTR _raw$[ebp]
  00d4e	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  00d51	c1 e8 09	 shr	 eax, 9
  00d54	83 e0 01	 and	 eax, 1
  00d57	50		 push	 eax
  00d58	8b 4d f4	 mov	 ecx, DWORD PTR _volume$[ebp]
  00d5b	51		 push	 ecx
  00d5c	ba 04 00 00 00	 mov	 edx, 4
  00d61	6b c2 00	 imul	 eax, edx, 0
  00d64	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  00d67	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00d6a	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  00d6d	50		 push	 eax
  00d6e	e8 00 00 00 00	 call	 ?create_single_system_sound_effect@@YGPAUSYSTEM_SOUND_EFFECT@@HHHPAXH@Z ; create_single_system_sound_effect
  00d73	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  00d76	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN67@play_local:

; 503  : 			}
; 504  : 
; 505  : 			if (!raw->sound_effect_data)

  00d79	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00d7c	83 78 3c 00	 cmp	 DWORD PTR [eax+60], 0
  00d80	75 05		 jne	 SHORT $LN69@play_local

; 506  : 			{
; 507  : 				#if DEBUG_MODULE
; 508  : 	
; 509  : 				debug_log ("SE_SND: UNABLE TO CREATE SOUND EFFECT");
; 510  : 	
; 511  : 				#endif
; 512  : 	
; 513  : 				return;

  00d82	e9 f6 03 00 00	 jmp	 $LN1@play_local
$LN69@play_local:

; 514  : 			}
; 515  : 		}
; 516  : 	
; 517  : 		if (raw->sound_effect_data)

  00d87	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00d8a	83 78 3c 00	 cmp	 DWORD PTR [eax+60], 0
  00d8e	0f 84 37 03 00
	00		 je	 $LN75@play_local

; 518  : 		{
; 519  : 			//
; 520  : 			// set volume
; 521  : 			//
; 522  : 
; 523  : 			set_system_sound_effect_volume (raw->sound_effect_data, volume);

  00d94	8b 45 f4	 mov	 eax, DWORD PTR _volume$[ebp]
  00d97	50		 push	 eax
  00d98	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  00d9b	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00d9e	52		 push	 edx
  00d9f	e8 00 00 00 00	 call	 ?set_system_sound_effect_volume@@YGXPAUSYSTEM_SOUND_EFFECT@@H@Z ; set_system_sound_effect_volume

; 524  : 
; 525  : 			//
; 526  : 			// set panning
; 527  : 			//
; 528  : 
; 529  : 			if ((raw->panning) && (raw->sound_locality != SOUND_LOCALITY_INTERIOR))

  00da4	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00da7	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00daa	c1 e9 0a	 shr	 ecx, 10			; 0000000aH
  00dad	83 e1 01	 and	 ecx, 1
  00db0	74 71		 je	 SHORT $LN71@play_local
  00db2	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00db5	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00db8	c1 e9 06	 shr	 ecx, 6
  00dbb	83 e1 03	 and	 ecx, 3
  00dbe	83 f9 01	 cmp	 ecx, 1
  00dc1	74 60		 je	 SHORT $LN71@play_local

; 530  : 			{
; 531  : 				vec3d
; 532  : 					sound_vector;
; 533  : 
; 534  : 				sound_vector.x = raw->eff.position.x - vp->x;

  00dc3	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00dc6	8b 4d 0c	 mov	 ecx, DWORD PTR _vp$[ebp]
  00dc9	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00dce	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00dd2	f3 0f 11 45 b8	 movss	 DWORD PTR _sound_vector$8[ebp], xmm0

; 535  : 				sound_vector.y = raw->eff.position.y - vp->y;

  00dd7	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00dda	8b 4d 0c	 mov	 ecx, DWORD PTR _vp$[ebp]
  00ddd	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00de2	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00de7	f3 0f 11 45 bc	 movss	 DWORD PTR _sound_vector$8[ebp+4], xmm0

; 536  : 				sound_vector.z = raw->eff.position.z - vp->z;

  00dec	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00def	8b 4d 0c	 mov	 ecx, DWORD PTR _vp$[ebp]
  00df2	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00df7	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00dfc	f3 0f 11 45 c0	 movss	 DWORD PTR _sound_vector$8[ebp+8], xmm0

; 537  : 
; 538  : 				// Casm 07DEC09 OpenAL support
; 539  : 				set_system_sound_effect_position (raw->sound_effect_data, sound_vector);

  00e01	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00e04	8b c4		 mov	 eax, esp
  00e06	8b 4d b8	 mov	 ecx, DWORD PTR _sound_vector$8[ebp]
  00e09	89 08		 mov	 DWORD PTR [eax], ecx
  00e0b	8b 55 bc	 mov	 edx, DWORD PTR _sound_vector$8[ebp+4]
  00e0e	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00e11	8b 4d c0	 mov	 ecx, DWORD PTR _sound_vector$8[ebp+8]
  00e14	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00e17	8b 55 f8	 mov	 edx, DWORD PTR _raw$[ebp]
  00e1a	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  00e1d	50		 push	 eax
  00e1e	e8 00 00 00 00	 call	 ?set_system_sound_effect_position@@YGXPAUSYSTEM_SOUND_EFFECT@@UVEC3D@@@Z ; set_system_sound_effect_position
$LN71@play_local:

; 540  : 			}
; 541  : 
; 542  : 			//Werewolf pitch 4 Feb 2006
; 543  : 			if (raw->pitch)

  00e23	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00e26	f3 0f 10 40 30	 movss	 xmm0, DWORD PTR [eax+48]
  00e2b	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00e32	9f		 lahf
  00e33	f6 c4 44	 test	 ah, 68			; 00000044H
  00e36	7b 24		 jnp	 SHORT $LN72@play_local

; 544  : 			{
; 545  : 				float pitch = raw->pitch;

  00e38	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00e3b	f3 0f 10 40 30	 movss	 xmm0, DWORD PTR [eax+48]
  00e40	f3 0f 11 45 b4	 movss	 DWORD PTR _pitch$7[ebp], xmm0

; 546  : //				debug_log ( "sound entity pitch change, pitch=%.2f ", pitch);
; 547  : 
; 548  : 				set_system_sound_effect_pitch (raw->sound_effect_data, pitch);

  00e45	51		 push	 ecx
  00e46	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _pitch$7[ebp]
  00e4b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e50	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00e53	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00e56	51		 push	 ecx
  00e57	e8 00 00 00 00	 call	 ?set_system_sound_effect_pitch@@YGXPAUSYSTEM_SOUND_EFFECT@@M@Z ; set_system_sound_effect_pitch
$LN72@play_local:

; 549  : 			}
; 550  : 			//End Werewolf pitch 4 Feb 2006
; 551  : 				
; 552  : 			if (!get_system_sound_effect_playing (raw->sound_effect_data))

  00e5c	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00e5f	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00e62	51		 push	 ecx
  00e63	e8 00 00 00 00	 call	 ?get_system_sound_effect_playing@@YGHPAUSYSTEM_SOUND_EFFECT@@@Z ; get_system_sound_effect_playing
  00e68	85 c0		 test	 eax, eax
  00e6a	0f 85 5b 02 00
	00		 jne	 $LN75@play_local

; 553  : 			{
; 554  : 				if (!raw->looping)

  00e70	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00e73	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00e76	c1 e9 09	 shr	 ecx, 9
  00e79	83 e1 01	 and	 ecx, 1
  00e7c	0f 85 34 02 00
	00		 jne	 $LN74@play_local

; 555  : 				{
; 556  : 					if (raw->effect_lifetime > 0.0)

  00e82	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00e85	f3 0f 5a 40 34	 cvtss2sd xmm0, DWORD PTR [eax+52]
  00e8a	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00e92	0f 86 1c 02 00
	00		 jbe	 $LN78@play_local

; 557  : 					{
; 558  : 						float
; 559  : 							sample_time,
; 560  : 							d,
; 561  : 							rate,
; 562  : 							size;
; 563  : 	
; 564  : 						//
; 565  : 						// play sound part way through
; 566  : 						//
; 567  : 	
; 568  : 						if (raw->sound_effect_sequence_count > 1)

  00e98	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00e9b	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00e9e	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  00ea1	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00ea4	83 f9 01	 cmp	 ecx, 1
  00ea7	0f 86 2e 01 00
	00		 jbe	 $LN77@play_local

; 569  : 						{
; 570  : 							//
; 571  : 							// sequenced sound
; 572  : 							//
; 573  : 
; 574  : 							int
; 575  : 								current_index;
; 576  : 
; 577  : 							float
; 578  : 								lifetime;
; 579  : 
; 580  : 							lifetime = raw->effect_lifetime;

  00ead	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00eb0	f3 0f 10 40 34	 movss	 xmm0, DWORD PTR [eax+52]
  00eb5	f3 0f 11 45 9c	 movss	 DWORD PTR _lifetime$1[ebp], xmm0

; 581  : 
; 582  : 							for (current_index = raw->sound_effect_sequence_count - 1; current_index >= 0; current_index --)

  00eba	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00ebd	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00ec0	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  00ec3	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00ec6	83 e9 01	 sub	 ecx, 1
  00ec9	89 4d a0	 mov	 DWORD PTR _current_index$2[ebp], ecx
  00ecc	eb 09		 jmp	 SHORT $LN11@play_local
$LN9@play_local:
  00ece	8b 45 a0	 mov	 eax, DWORD PTR _current_index$2[ebp]
  00ed1	83 e8 01	 sub	 eax, 1
  00ed4	89 45 a0	 mov	 DWORD PTR _current_index$2[ebp], eax
$LN11@play_local:
  00ed7	83 7d a0 00	 cmp	 DWORD PTR _current_index$2[ebp], 0
  00edb	0f 8c f5 00 00
	00		 jl	 $LN10@play_local

; 583  : 							{
; 584  : 								rate = (float)(application_sound_effects [raw->effect_index [current_index]].rate);

  00ee1	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00ee4	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00ee7	8b 55 a0	 mov	 edx, DWORD PTR _current_index$2[ebp]
  00eea	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00eed	c1 e0 05	 shl	 eax, 5
  00ef0	f3 0f 2a 80 08
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?application_sound_effects@@3PAUSOUND_EFFECT_INFORMATION@@A[eax+8]
  00ef8	f3 0f 11 45 a8	 movss	 DWORD PTR _rate$4[ebp], xmm0

; 585  : 								size = (float)(application_sound_effects [raw->effect_index [current_index]].size);

  00efd	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  00f00	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00f03	8b 55 a0	 mov	 edx, DWORD PTR _current_index$2[ebp]
  00f06	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00f09	c1 e0 05	 shl	 eax, 5
  00f0c	f3 0f 2a 80 0c
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?application_sound_effects@@3PAUSOUND_EFFECT_INFORMATION@@A[eax+12]
  00f14	f3 0f 11 45 a4	 movss	 DWORD PTR _size$3[ebp], xmm0

; 586  : 
; 587  : 								sample_time = size / rate; // It's not correct because of pitch

  00f19	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _size$3[ebp]
  00f1e	f3 0f 5e 45 a8	 divss	 xmm0, DWORD PTR _rate$4[ebp]
  00f23	f3 0f 11 45 b0	 movss	 DWORD PTR _sample_time$6[ebp], xmm0

; 588  : 
; 589  : 								if (lifetime <= sample_time)

  00f28	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _sample_time$6[ebp]
  00f2d	0f 2f 45 9c	 comiss	 xmm0, DWORD PTR _lifetime$1[ebp]
  00f31	0f 82 8b 00 00
	00		 jb	 $LN79@play_local

; 590  : 								{
; 591  : 									d = sample_time - lifetime;

  00f37	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _sample_time$6[ebp]
  00f3c	f3 0f 5c 45 9c	 subss	 xmm0, DWORD PTR _lifetime$1[ebp]
  00f41	f3 0f 11 45 ac	 movss	 DWORD PTR _d$5[ebp], xmm0

; 592  : 
; 593  : 									d = bound (d, 0.0, sample_time);

  00f46	f3 0f 5a 45 ac	 cvtss2sd xmm0, DWORD PTR _d$5[ebp]
  00f4b	0f 57 c9	 xorps	 xmm1, xmm1
  00f4e	66 0f 2f c8	 comisd	 xmm1, xmm0
  00f52	76 0d		 jbe	 SHORT $LN138@play_local
  00f54	0f 57 c0	 xorps	 xmm0, xmm0
  00f57	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv624[ebp], xmm0
  00f5f	eb 37		 jmp	 SHORT $LN139@play_local
$LN138@play_local:
  00f61	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _d$5[ebp]
  00f66	0f 2f 45 b0	 comiss	 xmm0, DWORD PTR _sample_time$6[ebp]
  00f6a	76 0f		 jbe	 SHORT $LN136@play_local
  00f6c	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _sample_time$6[ebp]
  00f71	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR tv622[ebp], xmm0
  00f79	eb 0d		 jmp	 SHORT $LN137@play_local
$LN136@play_local:
  00f7b	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _d$5[ebp]
  00f80	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR tv622[ebp], xmm0
$LN137@play_local:
  00f88	f3 0f 5a 85 50
	ff ff ff	 cvtss2sd xmm0, DWORD PTR tv622[ebp]
  00f90	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv624[ebp], xmm0
$LN139@play_local:
  00f98	f2 0f 5a 85 54
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv624[ebp]
  00fa0	f3 0f 11 45 ac	 movss	 DWORD PTR _d$5[ebp], xmm0

; 594  : 
; 595  : 									play_sequenced_system_sound_effect (raw->sound_effect_data, current_index, d);

  00fa5	51		 push	 ecx
  00fa6	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _d$5[ebp]
  00fab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fb0	8b 45 a0	 mov	 eax, DWORD PTR _current_index$2[ebp]
  00fb3	50		 push	 eax
  00fb4	8b 4d f8	 mov	 ecx, DWORD PTR _raw$[ebp]
  00fb7	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00fba	52		 push	 edx
  00fbb	e8 00 00 00 00	 call	 ?play_sequenced_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@HM@Z ; play_sequenced_system_sound_effect

; 596  : 
; 597  : 									break;

  00fc0	eb 14		 jmp	 SHORT $LN10@play_local
$LN79@play_local:

; 598  : 								}
; 599  : 
; 600  : 								lifetime -= sample_time;

  00fc2	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _lifetime$1[ebp]
  00fc7	f3 0f 5c 45 b0	 subss	 xmm0, DWORD PTR _sample_time$6[ebp]
  00fcc	f3 0f 11 45 9c	 movss	 DWORD PTR _lifetime$1[ebp], xmm0

; 601  : 							}

  00fd1	e9 f8 fe ff ff	 jmp	 $LN9@play_local
$LN10@play_local:

; 602  : 						}
; 603  : 						else

  00fd6	e9 d9 00 00 00	 jmp	 $LN78@play_local
$LN77@play_local:

; 604  : 						{
; 605  : 							//
; 606  : 							// single sound
; 607  : 							//
; 608  : 
; 609  : 							rate = (float)(application_sound_effects [raw->effect_index [0]].rate);

  00fdb	b8 04 00 00 00	 mov	 eax, 4
  00fe0	6b c8 00	 imul	 ecx, eax, 0
  00fe3	8b 55 f8	 mov	 edx, DWORD PTR _raw$[ebp]
  00fe6	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00fe9	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  00fec	c1 e1 05	 shl	 ecx, 5
  00fef	f3 0f 2a 81 08
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?application_sound_effects@@3PAUSOUND_EFFECT_INFORMATION@@A[ecx+8]
  00ff7	f3 0f 11 45 a8	 movss	 DWORD PTR _rate$4[ebp], xmm0

; 610  : 							size = (float)(application_sound_effects [raw->effect_index [0]].size);

  00ffc	b8 04 00 00 00	 mov	 eax, 4
  01001	6b c8 00	 imul	 ecx, eax, 0
  01004	8b 55 f8	 mov	 edx, DWORD PTR _raw$[ebp]
  01007	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  0100a	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  0100d	c1 e1 05	 shl	 ecx, 5
  01010	f3 0f 2a 81 0c
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?application_sound_effects@@3PAUSOUND_EFFECT_INFORMATION@@A[ecx+12]
  01018	f3 0f 11 45 a4	 movss	 DWORD PTR _size$3[ebp], xmm0

; 611  : 	
; 612  : 							sample_time = size / rate; // It's not correct because of pitch

  0101d	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _size$3[ebp]
  01022	f3 0f 5e 45 a8	 divss	 xmm0, DWORD PTR _rate$4[ebp]
  01027	f3 0f 11 45 b0	 movss	 DWORD PTR _sample_time$6[ebp], xmm0

; 613  : 
; 614  : 							d = sample_time - raw->effect_lifetime;

  0102c	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  0102f	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _sample_time$6[ebp]
  01034	f3 0f 5c 40 34	 subss	 xmm0, DWORD PTR [eax+52]
  01039	f3 0f 11 45 ac	 movss	 DWORD PTR _d$5[ebp], xmm0

; 615  : 	
; 616  : 							d = bound (d, 0.0, sample_time);

  0103e	f3 0f 5a 45 ac	 cvtss2sd xmm0, DWORD PTR _d$5[ebp]
  01043	0f 57 c9	 xorps	 xmm1, xmm1
  01046	66 0f 2f c8	 comisd	 xmm1, xmm0
  0104a	76 0d		 jbe	 SHORT $LN142@play_local
  0104c	0f 57 c0	 xorps	 xmm0, xmm0
  0104f	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv653[ebp], xmm0
  01057	eb 37		 jmp	 SHORT $LN143@play_local
$LN142@play_local:
  01059	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _d$5[ebp]
  0105e	0f 2f 45 b0	 comiss	 xmm0, DWORD PTR _sample_time$6[ebp]
  01062	76 0f		 jbe	 SHORT $LN140@play_local
  01064	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _sample_time$6[ebp]
  01069	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR tv651[ebp], xmm0
  01071	eb 0d		 jmp	 SHORT $LN141@play_local
$LN140@play_local:
  01073	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _d$5[ebp]
  01078	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR tv651[ebp], xmm0
$LN141@play_local:
  01080	f3 0f 5a 85 50
	ff ff ff	 cvtss2sd xmm0, DWORD PTR tv651[ebp]
  01088	f2 0f 11 85 54
	ff ff ff	 movsd	 QWORD PTR tv653[ebp], xmm0
$LN143@play_local:
  01090	f2 0f 5a 85 54
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv653[ebp]
  01098	f3 0f 11 45 ac	 movss	 DWORD PTR _d$5[ebp], xmm0

; 617  : 
; 618  : 							#if DEBUG_MODULE
; 619  : 		
; 620  : 							debug_log ("SE_SND: playing sound from byte %d / %.0f", buffer_position, size);
; 621  : 			
; 622  : 							#endif
; 623  : 
; 624  : 							play_system_sound_effect (raw->sound_effect_data, d);

  0109d	51		 push	 ecx
  0109e	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _d$5[ebp]
  010a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010a8	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  010ab	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  010ae	51		 push	 ecx
  010af	e8 00 00 00 00	 call	 ?play_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@M@Z ; play_system_sound_effect
$LN78@play_local:

; 625  : 						}
; 626  : 					}
; 627  : 				}
; 628  : 				else

  010b4	eb 15		 jmp	 SHORT $LN75@play_local
$LN74@play_local:

; 629  : 				{
; 630  : 					//
; 631  : 					// play sound from start
; 632  : 					//
; 633  : 	
; 634  : 					#if DEBUG_MODULE
; 635  : 	
; 636  : 					debug_log ("SE_SND: playing sound from start");
; 637  : 		
; 638  : 					#endif
; 639  : 
; 640  : 					play_system_sound_effect (raw->sound_effect_data, 0.0);

  010b6	51		 push	 ecx
  010b7	0f 57 c0	 xorps	 xmm0, xmm0
  010ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010bf	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  010c2	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  010c5	51		 push	 ecx
  010c6	e8 00 00 00 00	 call	 ?play_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@M@Z ; play_system_sound_effect
$LN75@play_local:

; 641  : 				}
; 642  : 			}
; 643  : 		}
; 644  : 	}
; 645  : 	else

  010cb	e9 ad 00 00 00	 jmp	 $LN80@play_local
$LN63@play_local:

; 646  : 	{
; 647  : 		//
; 648  : 		// destroy sound if it is playing
; 649  : 		//
; 650  : 
; 651  : 		if (raw->sound_effect_data)

  010d0	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  010d3	83 78 3c 00	 cmp	 DWORD PTR [eax+60], 0
  010d7	0f 84 a0 00 00
	00		 je	 $LN80@play_local

; 652  : 		{
; 653  : 			#if DEBUG_MODULE
; 654  : 	
; 655  : 			debug_log ("SE_SND: destroying sound (volume too low)");
; 656  : 		
; 657  : 			#endif
; 658  : 
; 659  : 			destroy_system_sound_effect (raw->sound_effect_data);

  010dd	8b 45 f8	 mov	 eax, DWORD PTR _raw$[ebp]
  010e0	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  010e3	51		 push	 ecx
  010e4	e8 00 00 00 00	 call	 ?destroy_system_sound_effect@@YGXPAUSYSTEM_SOUND_EFFECT@@@Z ; destroy_system_sound_effect

; 660  : 
; 661  : 			set_local_entity_ptr_value (en, PTR_TYPE_SOUND_EFFECT_DATA, NULL);

  010e9	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  010ed	74 0d		 je	 SHORT $LN144@play_local
  010ef	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  010f2	8b 08		 mov	 ecx, DWORD PTR [eax]
  010f4	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv671[ebp], ecx
  010fa	eb 27		 jmp	 SHORT $LN145@play_local
$LN144@play_local:
  010fc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z@4JA
  01102	81 c2 22 02 00
	00		 add	 edx, 546		; 00000222H
  01108	52		 push	 edx
  01109	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@KPCIHEDK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0110e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01113	50		 push	 eax
  01114	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01119	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv671[ebp], 0
$LN145@play_local:
  01123	b9 01 00 00 00	 mov	 ecx, 1
  01128	85 c9		 test	 ecx, ecx
  0112a	74 0c		 je	 SHORT $LN146@play_local
  0112c	c7 85 54 ff ff
	ff 0e 00 00 00	 mov	 DWORD PTR tv679[ebp], 14 ; 0000000eH
  01136	eb 27		 jmp	 SHORT $LN147@play_local
$LN146@play_local:
  01138	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z@4JA
  0113e	81 c2 22 02 00
	00		 add	 edx, 546		; 00000222H
  01144	52		 push	 edx
  01145	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@KPCIHEDK@c?3?2users?2nhv90?2projects?2eech?2ap@
  0114a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_ptr_type_message@@3PBDB ; overload_invalid_ptr_type_message
  0114f	50		 push	 eax
  01150	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01155	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv679[ebp], 0
$LN147@play_local:
  0115f	6a 00		 push	 0
  01161	6a 0e		 push	 14			; 0000000eH
  01163	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  01166	51		 push	 ecx
  01167	6b 95 58 ff ff
	ff 50		 imul	 edx, DWORD PTR tv671[ebp], 80
  0116e	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR tv679[ebp]
  01174	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_set_local_entity_ptr_value@@3PAY0BE@P6GXPAUENTITY@@W4PTR_TYPES@@PAX@ZA[edx+eax*4]
  0117b	ff d1		 call	 ecx
$LN80@play_local:
$LN1@play_local:

; 662  : 		}
; 663  : 	}
; 664  : }

  0117d	5f		 pop	 edi
  0117e	5e		 pop	 esi
  0117f	5b		 pop	 ebx
  01180	8b e5		 mov	 esp, ebp
  01182	5d		 pop	 ebp
  01183	c2 0c 00	 ret	 12			; 0000000cH
  01186	66 90		 npad	 2
$LN150@play_local:
  01188	00 00 00 00	 DD	 $LN13@play_local
  0118c	00 00 00 00	 DD	 $LN14@play_local
  01190	00 00 00 00	 DD	 $LN17@play_local
$LN148@play_local:
  01194	00		 DB	 0
  01195	02		 DB	 2
  01196	02		 DB	 2
  01197	02		 DB	 2
  01198	02		 DB	 2
  01199	02		 DB	 2
  0119a	02		 DB	 2
  0119b	02		 DB	 2
  0119c	01		 DB	 1
  0119d	02		 DB	 2
  0119e	02		 DB	 2
  0119f	01		 DB	 1
  011a0	02		 DB	 2
  011a1	02		 DB	 2
  011a2	02		 DB	 2
  011a3	02		 DB	 2
  011a4	02		 DB	 2
  011a5	02		 DB	 2
  011a6	02		 DB	 2
  011a7	02		 DB	 2
  011a8	02		 DB	 2
  011a9	01		 DB	 1
  011aa	66 90		 npad	 2
$LN151@play_local:
  011ac	00 00 00 00	 DD	 $LN49@play_local
  011b0	00 00 00 00	 DD	 $LN48@play_local
  011b4	00 00 00 00	 DD	 $LN50@play_local
  011b8	00 00 00 00	 DD	 $LN53@play_local
  011bc	00 00 00 00	 DD	 $LN45@play_local
  011c0	00 00 00 00	 DD	 $LN56@play_local
$LN149@play_local:
  011c4	00		 DB	 0
  011c5	00		 DB	 0
  011c6	00		 DB	 0
  011c7	00		 DB	 0
  011c8	00		 DB	 0
  011c9	00		 DB	 0
  011ca	01		 DB	 1
  011cb	01		 DB	 1
  011cc	01		 DB	 1
  011cd	05		 DB	 5
  011ce	02		 DB	 2
  011cf	02		 DB	 2
  011d0	02		 DB	 2
  011d1	05		 DB	 5
  011d2	05		 DB	 5
  011d3	05		 DB	 5
  011d4	03		 DB	 3
  011d5	05		 DB	 5
  011d6	05		 DB	 5
  011d7	05		 DB	 5
  011d8	05		 DB	 5
  011d9	04		 DB	 4
  011da	05		 DB	 5
  011db	02		 DB	 2
  011dc	02		 DB	 2
  011dd	04		 DB	 4
  011de	02		 DB	 2
  011df	02		 DB	 2
  011e0	02		 DB	 2
  011e1	02		 DB	 2
?play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z ENDP	; play_local_sound
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\se_snd.c
;	COMDAT ?initialise_sound_channels@@YGXXZ
_TEXT	SEGMENT
_loop$ = -4						; size = 4
?initialise_sound_channels@@YGXXZ PROC			; initialise_sound_channels, COMDAT

; 731  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 732  : 	int
; 733  : 		loop;
; 734  : 
; 735  : 	for (loop = 0; loop < NUM_SOUND_CHANNEL_TYPES; loop ++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@initialise:
  0001b	83 7d fc 07	 cmp	 DWORD PTR _loop$[ebp], 7
  0001f	7d 2a		 jge	 SHORT $LN1@initialise

; 736  : 	{
; 737  : 		sound_channel_info [loop].mute = get_global_sound_channel_muted (loop);

  00021	6b 45 fc 0c	 imul	 eax, DWORD PTR _loop$[ebp], 12
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _loop$[ebp]
  00028	8b 14 8d 9c 03
	00 00		 mov	 edx, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A[ecx*4+924]
  0002f	89 90 00 00 00
	00		 mov	 DWORD PTR ?sound_channel_info@@3PAUSOUND_CHANNEL_INFO_TYPE@@A[eax], edx

; 738  : 
; 739  : 		sound_channel_info [loop].volume = get_global_sound_channel_volume (loop);

  00035	6b 45 fc 0c	 imul	 eax, DWORD PTR _loop$[ebp], 12
  00039	8b 4d fc	 mov	 ecx, DWORD PTR _loop$[ebp]
  0003c	8b 14 8d 80 03
	00 00		 mov	 edx, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A[ecx*4+896]
  00043	89 90 04 00 00
	00		 mov	 DWORD PTR ?sound_channel_info@@3PAUSOUND_CHANNEL_INFO_TYPE@@A[eax+4], edx

; 740  : 	}

  00049	eb c7		 jmp	 SHORT $LN2@initialise
$LN1@initialise:

; 741  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?initialise_sound_channels@@YGXXZ ENDP			; initialise_sound_channels
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\se_snd.c
;	COMDAT ?set_sound_channel_muted@@YGXHH@Z
_TEXT	SEGMENT
_channel$ = 8						; size = 4
_mute$ = 12						; size = 4
?set_sound_channel_muted@@YGXHH@Z PROC			; set_sound_channel_muted, COMDAT

; 720  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 721  : 	sound_channel_info [channel].mute = mute;

  00009	6b 45 08 0c	 imul	 eax, DWORD PTR _channel$[ebp], 12
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR _mute$[ebp]
  00010	89 88 00 00 00
	00		 mov	 DWORD PTR ?sound_channel_info@@3PAUSOUND_CHANNEL_INFO_TYPE@@A[eax], ecx

; 722  : 
; 723  : 	set_global_sound_channel_muted (channel, mute);

  00016	8b 45 08	 mov	 eax, DWORD PTR _channel$[ebp]
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _mute$[ebp]
  0001c	89 0c 85 9c 03
	00 00		 mov	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A[eax*4+924], ecx

; 724  : }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?set_sound_channel_muted@@YGXHH@Z ENDP			; set_sound_channel_muted
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\se_snd.c
;	COMDAT ?get_sound_channel_muted@@YGHH@Z
_TEXT	SEGMENT
_channel$ = 8						; size = 4
?get_sound_channel_muted@@YGHH@Z PROC			; get_sound_channel_muted, COMDAT

; 711  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 712  : 	return sound_channel_info [channel].mute;

  00009	6b 45 08 0c	 imul	 eax, DWORD PTR _channel$[ebp], 12
  0000d	8b 80 00 00 00
	00		 mov	 eax, DWORD PTR ?sound_channel_info@@3PAUSOUND_CHANNEL_INFO_TYPE@@A[eax]

; 713  : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?get_sound_channel_muted@@YGHH@Z ENDP			; get_sound_channel_muted
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\se_snd.c
;	COMDAT ?set_sound_channel_volume@@YGXHH@Z
_TEXT	SEGMENT
tv66 = -72						; size = 4
tv67 = -68						; size = 4
_channel$ = 8						; size = 4
_volume$ = 12						; size = 4
?set_sound_channel_volume@@YGXHH@Z PROC			; set_sound_channel_volume, COMDAT

; 698  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 699  : 	volume = bound (volume, 1, 10);

  00009	83 7d 0c 01	 cmp	 DWORD PTR _volume$[ebp], 1
  0000d	7d 09		 jge	 SHORT $LN5@set_sound_
  0000f	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  00016	eb 1b		 jmp	 SHORT $LN6@set_sound_
$LN5@set_sound_:
  00018	83 7d 0c 0a	 cmp	 DWORD PTR _volume$[ebp], 10 ; 0000000aH
  0001c	7e 09		 jle	 SHORT $LN3@set_sound_
  0001e	c7 45 b8 0a 00
	00 00		 mov	 DWORD PTR tv66[ebp], 10	; 0000000aH
  00025	eb 06		 jmp	 SHORT $LN4@set_sound_
$LN3@set_sound_:
  00027	8b 45 0c	 mov	 eax, DWORD PTR _volume$[ebp]
  0002a	89 45 b8	 mov	 DWORD PTR tv66[ebp], eax
$LN4@set_sound_:
  0002d	8b 4d b8	 mov	 ecx, DWORD PTR tv66[ebp]
  00030	89 4d bc	 mov	 DWORD PTR tv67[ebp], ecx
$LN6@set_sound_:
  00033	8b 55 bc	 mov	 edx, DWORD PTR tv67[ebp]
  00036	89 55 0c	 mov	 DWORD PTR _volume$[ebp], edx

; 700  : 	
; 701  : 	sound_channel_info [channel].volume = volume;

  00039	6b 45 08 0c	 imul	 eax, DWORD PTR _channel$[ebp], 12
  0003d	8b 4d 0c	 mov	 ecx, DWORD PTR _volume$[ebp]
  00040	89 88 04 00 00
	00		 mov	 DWORD PTR ?sound_channel_info@@3PAUSOUND_CHANNEL_INFO_TYPE@@A[eax+4], ecx

; 702  : 
; 703  : 	set_global_sound_channel_volume (channel, volume);

  00046	8b 45 08	 mov	 eax, DWORD PTR _channel$[ebp]
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR _volume$[ebp]
  0004c	89 0c 85 80 03
	00 00		 mov	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A[eax*4+896], ecx

; 704  : }

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 08 00	 ret	 8
?set_sound_channel_volume@@YGXHH@Z ENDP			; set_sound_channel_volume
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\se_snd.c
;	COMDAT ?get_sound_channel_volume@@YGHH@Z
_TEXT	SEGMENT
_channel$ = 8						; size = 4
?get_sound_channel_volume@@YGHH@Z PROC			; get_sound_channel_volume, COMDAT

; 689  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 690  : 	return sound_channel_info [channel].volume;

  00009	6b 45 08 0c	 imul	 eax, DWORD PTR _channel$[ebp], 12
  0000d	8b 80 04 00 00
	00		 mov	 eax, DWORD PTR ?sound_channel_info@@3PAUSOUND_CHANNEL_INFO_TYPE@@A[eax+4]

; 691  : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?get_sound_channel_volume@@YGHH@Z ENDP			; get_sound_channel_volume
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\se_snd.c
;	COMDAT ?get_sound_channel_name@@YGPBDH@Z
_TEXT	SEGMENT
_channel$ = 8						; size = 4
?get_sound_channel_name@@YGPBDH@Z PROC			; get_sound_channel_name, COMDAT

; 680  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 681  : 	return sound_channel_info [channel].text;

  00009	6b 45 08 0c	 imul	 eax, DWORD PTR _channel$[ebp], 12
  0000d	8b 80 08 00 00
	00		 mov	 eax, DWORD PTR ?sound_channel_info@@3PAUSOUND_CHANNEL_INFO_TYPE@@A[eax+8]

; 682  : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	5b		 pop	 ebx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?get_sound_channel_name@@YGPBDH@Z ENDP			; get_sound_channel_name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\entity\special\effect\soundeff\se_snd.c
;	COMDAT ?overload_sound_effect_sound_functions@@YGXXZ
_TEXT	SEGMENT
?overload_sound_effect_sound_functions@@YGXXZ PROC	; overload_sound_effect_sound_functions, COMDAT

; 671  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 672  : 	fn_play_local_entity_sound[ENTITY_TYPE_SOUND_EFFECT]	= play_local_sound;

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	c1 e0 05	 shl	 eax, 5
  00011	c7 80 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fn_play_local_entity_sound@@3PAP6GXPAUENTITY@@PAUVIEWPOINT@@M@ZA[eax], OFFSET ?play_local_sound@@YGXPAUENTITY@@PAUVIEWPOINT@@M@Z ; play_local_sound

; 673  : }

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?overload_sound_effect_sound_functions@@YGXXZ ENDP	; overload_sound_effect_sound_functions
_TEXT	ENDS
END
