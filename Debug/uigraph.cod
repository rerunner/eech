; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\userint2\ui_draw\uigraph.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_ceilf
PUBLIC	_floorf
PUBLIC	?ceil@@YGMM@Z					; ceil
PUBLIC	?floor@@YGMM@Z					; floor
PUBLIC	?ui_draw_graphic@@YGXMMMMPAG@Z			; ui_draw_graphic
PUBLIC	?ui_draw_part_graphic@@YGXMMMMHHPAG@Z		; ui_draw_part_graphic
PUBLIC	?ui_draw_memory_graphic@@YGXPAUUI_OBJECT@@MMMMHHHH@Z ; ui_draw_memory_graphic
PUBLIC	?ui_draw_unscaled_memory_graphic@@YGXMMMMPAUSCREEN@@@Z ; ui_draw_unscaled_memory_graphic
PUBLIC	?ui_draw_alpha_graphic@@YGXMMMMPAG@Z		; ui_draw_alpha_graphic
PUBLIC	?ui_draw_part_alpha_graphic@@YGXMMMMHHPAG@Z	; ui_draw_part_alpha_graphic
PUBLIC	?ui_draw_scaled_graphic@@YGXHHHHHHHHHHPAG0@Z	; ui_draw_scaled_graphic
PUBLIC	?ui_draw_scaled_masked_graphic@@YGXHHHHHHHHHHPAG0@Z ; ui_draw_scaled_masked_graphic
PUBLIC	?ui_draw_masked_graphic@@YGXHHHHHHPAG0@Z	; ui_draw_masked_graphic
PUBLIC	?ui_draw_texture_graphic@@YGXMMMMPAUTEXTURE_GRAPHIC@@UREAL_COLOUR@@@Z ; ui_draw_texture_graphic
PUBLIC	??$min@H@std@@YGABHABH0@Z			; std::min<int>
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??ui_draw_alpha_graphic@@YGXMMMMPAG@Z@4JA ; `ui_draw_alpha_graphic'::`1'::__LINE__Var
PUBLIC	??_C@_0EA@DLDDNMKJ@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0CO@EDGFEILM@get_screen_pixel_width?5?$CI?5active@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	__real@3dcccccd
PUBLIC	__real@40000000
PUBLIC	__real@406fe00000000000
PUBLIC	__real@41200000
PUBLIC	__real@4b40005a
EXTRN	__imp___invalid_parameter:PROC
EXTRN	_memcpy:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	__imp__ceil:PROC
EXTRN	__imp__floor:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z:PROC	; clip_3d_polygon
EXTRN	?get_screen_pixel_width@@YGHPAUSCREEN@@@Z:PROC	; get_screen_pixel_width
EXTRN	?get_screen_data@@YGPAEPAUSCREEN@@@Z:PROC	; get_screen_data
EXTRN	?get_screen_pitch@@YGHPAUSCREEN@@@Z:PROC	; get_screen_pitch
EXTRN	?get_screen_width@@YGHPAUSCREEN@@@Z:PROC	; get_screen_width
EXTRN	?get_screen_height@@YGHPAUSCREEN@@@Z:PROC	; get_screen_height
EXTRN	?generate_outcode@@YGHMM@Z:PROC			; generate_outcode
EXTRN	?get_rgb_colour_value@@YG?AUREAL_COLOUR@@K@Z:PROC ; get_rgb_colour_value
EXTRN	?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z:PROC	; set_d3d_alpha_fog_zbuffer
EXTRN	?set_d3d_texture_wrapping@@YGXHH@Z:PROC		; set_d3d_texture_wrapping
EXTRN	?set_d3d_texture_mag_filtering@@YGXH@Z:PROC	; set_d3d_texture_mag_filtering
EXTRN	?set_d3d_texture_min_filtering@@YGXH@Z:PROC	; set_d3d_texture_min_filtering
EXTRN	?set_d3d_texture_mip_filtering@@YGXH@Z:PROC	; set_d3d_texture_mip_filtering
EXTRN	?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z:PROC ; set_d3d_flat_shaded_textured_renderstate
EXTRN	?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z:PROC ; draw_wbuffered_flat_shaded_textured_polygon
EXTRN	?ui_clip_area@@YGHPAM000@Z:PROC			; ui_clip_area
EXTRN	?clip_3d_coord@@3HA:DWORD			; clip_3d_coord
EXTRN	?active_screen@@3PAUSCREEN@@A:DWORD		; active_screen
EXTRN	?active_screen_red_mask@@3HA:DWORD		; active_screen_red_mask
EXTRN	?active_screen_red_shift@@3HA:DWORD		; active_screen_red_shift
EXTRN	?active_screen_green_mask@@3HA:DWORD		; active_screen_green_mask
EXTRN	?active_screen_green_shift@@3HA:DWORD		; active_screen_green_shift
EXTRN	?active_screen_blue_mask@@3HA:DWORD		; active_screen_blue_mask
EXTRN	?active_screen_blue_shift@@3HA:DWORD		; active_screen_blue_shift
EXTRN	?active_screen_alpha_mask@@3HA:DWORD		; active_screen_alpha_mask
EXTRN	?active_screen_alpha_shift@@3HA:DWORD		; active_screen_alpha_shift
EXTRN	?fn_get_ui_object_memory_graphic@@3PAP6GPAUSCREEN@@PAUUI_OBJECT@@@ZA:BYTE ; fn_get_ui_object_memory_graphic
EXTRN	?ui_x_origin@@3MA:DWORD				; ui_x_origin
EXTRN	?ui_y_origin@@3MA:DWORD				; ui_y_origin
EXTRN	__fltused:DWORD
;	COMDAT __real@4b40005a
CONST	SEGMENT
__real@4b40005a DD 04b40005ar			; 1.2583e+07
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@EDGFEILM@get_screen_pixel_width?5?$CI?5active@
CONST	SEGMENT
??_C@_0CO@EDGFEILM@get_screen_pixel_width?5?$CI?5active@ DB 'get_screen_p'
	DB	'ixel_width ( active_screen ) == 2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@DLDDNMKJ@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0EA@DLDDNMKJ@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\userint2\ui_draw\uigraph.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ui_draw_alpha_graphic@@YGXMMMMPAG@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ui_draw_alpha_graphic@@YGXMMMMPAG@Z@4JA DD 0277H ; `ui_draw_alpha_graphic'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@H@std@@YGABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@H@std@@YGABHABH0@Z PROC				; std::min<int>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	7d 61		 jge	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00015	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001f	7c 02		 jl	 SHORT $LN7@min
  00021	eb 4a		 jmp	 SHORT $LN2@min
$LN7@min:
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0002d	6a 00		 push	 0
  0002f	68 36 15 00 00	 push	 5430			; 00001536H
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  00039	6a 02		 push	 2
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 01		 jne	 SHORT $LN12@min
  00049	cc		 int	 3
$LN12@min:
  0004a	6a 00		 push	 0
  0004c	68 36 15 00 00	 push	 5430			; 00001536H
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00066	83 c4 14	 add	 esp, 20			; 00000014H
  00069	33 c0		 xor	 eax, eax
  0006b	75 b6		 jne	 SHORT $LN7@min
$LN2@min:
  0006d	33 c0		 xor	 eax, eax
  0006f	75 a4		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00071	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00074	eb 03		 jmp	 SHORT $LN11@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  00076	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN11@min:

; 5435 : 	}

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
??$min@H@std@@YGABHABH0@Z ENDP				; std::min<int>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_draw\uigraph.c
;	COMDAT ?ui_draw_texture_graphic@@YGXMMMMPAUTEXTURE_GRAPHIC@@UREAL_COLOUR@@@Z
_TEXT	SEGMENT
_poly$1 = -340						; size = 4
_outcode2$2 = -336					; size = 4
_outcode$3 = -332					; size = 4
_specular$ = -328					; size = 4
_y$ = -324						; size = 4
_x$ = -320						; size = 4
_dy$ = -316						; size = 4
_dx$ = -312						; size = 4
_height$ = -308						; size = 4
_width$ = -304						; size = 4
_end_y$ = -300						; size = 4
_end_x$ = -296						; size = 4
_start_y$ = -292					; size = 4
_start_x$ = -288					; size = 4
_iheight$ = -284					; size = 4
_iwidth$ = -280						; size = 4
_texture_height_left$ = -276				; size = 4
_texture_width_left$ = -272				; size = 4
_texture_y$ = -268					; size = 4
_texture_x$ = -264					; size = 4
_texture_index$ = -260					; size = 4
_quad$ = -256						; size = 256
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
_graphic$ = 24						; size = 4
_colour$ = 28						; size = 4
?ui_draw_texture_graphic@@YGXMMMMPAUTEXTURE_GRAPHIC@@UREAL_COLOUR@@@Z PROC ; ui_draw_texture_graphic, COMDAT

; 1194 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 01 00
	00		 sub	 esp, 404		; 00000194H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1195 : 
; 1196 : 	vertex
; 1197 : 		quad[4];
; 1198 : 
; 1199 : 	int
; 1200 : 		texture_index,
; 1201 : 		texture_x,
; 1202 : 		texture_y,
; 1203 : 		texture_width_left,
; 1204 : 		texture_height_left,
; 1205 : 		iwidth,
; 1206 : 		iheight;
; 1207 : 
; 1208 : 	float
; 1209 : 		start_x,
; 1210 : 		start_y,
; 1211 : 		end_x,
; 1212 : 		end_y,
; 1213 : 		width,
; 1214 : 		height,
; 1215 : 		dx,
; 1216 : 		dy,
; 1217 : 		x,
; 1218 : 		y;
; 1219 : 
; 1220 : 	real_colour
; 1221 : 		specular;
; 1222 : 
; 1223 : 	x1 = floor ( x1 );

  0000c	51		 push	 ecx
  0000d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00012	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00017	e8 00 00 00 00	 call	 ?floor@@YGMM@Z		; floor
  0001c	d9 5d 08	 fstp	 DWORD PTR _x1$[ebp]

; 1224 : 	x2 = ceil ( x2 );

  0001f	51		 push	 ecx
  00020	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00025	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002a	e8 00 00 00 00	 call	 ?ceil@@YGMM@Z		; ceil
  0002f	d9 5d 10	 fstp	 DWORD PTR _x2$[ebp]

; 1225 : 	y1 = floor ( y1 );

  00032	51		 push	 ecx
  00033	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00038	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003d	e8 00 00 00 00	 call	 ?floor@@YGMM@Z		; floor
  00042	d9 5d 0c	 fstp	 DWORD PTR _y1$[ebp]

; 1226 : 	y2 = ceil ( y2 );

  00045	51		 push	 ecx
  00046	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0004b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00050	e8 00 00 00 00	 call	 ?ceil@@YGMM@Z		; ceil
  00055	d9 5d 14	 fstp	 DWORD PTR _y2$[ebp]

; 1227 : 
; 1228 : 	start_x = x1;

  00058	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0005d	f3 0f 11 85 e0
	fe ff ff	 movss	 DWORD PTR _start_x$[ebp], xmm0

; 1229 : 	start_y = y1;

  00065	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0006a	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR _start_y$[ebp], xmm0

; 1230 : 
; 1231 : 	end_x = x2;

  00072	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00077	f3 0f 11 85 d8
	fe ff ff	 movss	 DWORD PTR _end_x$[ebp], xmm0

; 1232 : 	end_y = y2;

  0007f	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y2$[ebp]
  00084	f3 0f 11 85 d4
	fe ff ff	 movss	 DWORD PTR _end_y$[ebp], xmm0

; 1233 : 
; 1234 : 	width = end_x - start_x;

  0008c	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR _end_x$[ebp]
  00094	f3 0f 5c 85 e0
	fe ff ff	 subss	 xmm0, DWORD PTR _start_x$[ebp]
  0009c	f3 0f 11 85 d0
	fe ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 1235 : 	height = end_y - start_y;

  000a4	f3 0f 10 85 d4
	fe ff ff	 movss	 xmm0, DWORD PTR _end_y$[ebp]
  000ac	f3 0f 5c 85 dc
	fe ff ff	 subss	 xmm0, DWORD PTR _start_y$[ebp]
  000b4	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR _height$[ebp], xmm0

; 1236 : 
; 1237 : 	iwidth = ( int ) width;

  000bc	f3 0f 2c 85 d0
	fe ff ff	 cvttss2si eax, DWORD PTR _width$[ebp]
  000c4	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _iwidth$[ebp], eax

; 1238 : 	iheight = ( int ) height;

  000ca	f3 0f 2c 85 cc
	fe ff ff	 cvttss2si eax, DWORD PTR _height$[ebp]
  000d2	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _iheight$[ebp], eax

; 1239 : 
; 1240 : 	if ( width > iwidth )

  000d8	f3 0f 2a 85 e8
	fe ff ff	 cvtsi2ss xmm0, DWORD PTR _iwidth$[ebp]
  000e0	f3 0f 10 8d d0
	fe ff ff	 movss	 xmm1, DWORD PTR _width$[ebp]
  000e8	0f 2f c8	 comiss	 xmm1, xmm0
  000eb	76 0f		 jbe	 SHORT $LN8@ui_draw_te

; 1241 : 	{
; 1242 : 
; 1243 : 		iwidth++;

  000ed	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _iwidth$[ebp]
  000f3	83 c0 01	 add	 eax, 1
  000f6	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _iwidth$[ebp], eax
$LN8@ui_draw_te:

; 1244 : 	}
; 1245 : 
; 1246 : 	if ( height > iheight )

  000fc	f3 0f 2a 85 e4
	fe ff ff	 cvtsi2ss xmm0, DWORD PTR _iheight$[ebp]
  00104	f3 0f 10 8d cc
	fe ff ff	 movss	 xmm1, DWORD PTR _height$[ebp]
  0010c	0f 2f c8	 comiss	 xmm1, xmm0
  0010f	76 0f		 jbe	 SHORT $LN9@ui_draw_te

; 1247 : 	{
; 1248 : 
; 1249 : 		iheight++;

  00111	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _iheight$[ebp]
  00117	83 c0 01	 add	 eax, 1
  0011a	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _iheight$[ebp], eax
$LN9@ui_draw_te:

; 1250 : 	}
; 1251 : 
; 1252 : 	dx = ( width / graphic->graphic_width ) * graphic->texture_width;

  00120	8b 45 18	 mov	 eax, DWORD PTR _graphic$[ebp]
  00123	f3 0f 2a 40 14	 cvtsi2ss xmm0, DWORD PTR [eax+20]
  00128	f3 0f 10 8d d0
	fe ff ff	 movss	 xmm1, DWORD PTR _width$[ebp]
  00130	f3 0f 5e c8	 divss	 xmm1, xmm0
  00134	8b 4d 18	 mov	 ecx, DWORD PTR _graphic$[ebp]
  00137	f3 0f 2a 41 0c	 cvtsi2ss xmm0, DWORD PTR [ecx+12]
  0013c	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00140	f3 0f 11 8d c8
	fe ff ff	 movss	 DWORD PTR _dx$[ebp], xmm1

; 1253 : 	dy = ( height / graphic->graphic_height ) * graphic->texture_height;

  00148	8b 45 18	 mov	 eax, DWORD PTR _graphic$[ebp]
  0014b	f3 0f 2a 40 18	 cvtsi2ss xmm0, DWORD PTR [eax+24]
  00150	f3 0f 10 8d cc
	fe ff ff	 movss	 xmm1, DWORD PTR _height$[ebp]
  00158	f3 0f 5e c8	 divss	 xmm1, xmm0
  0015c	8b 4d 18	 mov	 ecx, DWORD PTR _graphic$[ebp]
  0015f	f3 0f 2a 41 10	 cvtsi2ss xmm0, DWORD PTR [ecx+16]
  00164	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00168	f3 0f 11 8d c4
	fe ff ff	 movss	 DWORD PTR _dy$[ebp], xmm1

; 1254 : 
; 1255 : 	texture_width_left = graphic->graphic_width;

  00170	8b 45 18	 mov	 eax, DWORD PTR _graphic$[ebp]
  00173	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00176	89 8d f0 fe ff
	ff		 mov	 DWORD PTR _texture_width_left$[ebp], ecx

; 1256 : 	texture_height_left = graphic->graphic_height;

  0017c	8b 45 18	 mov	 eax, DWORD PTR _graphic$[ebp]
  0017f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00182	89 8d ec fe ff
	ff		 mov	 DWORD PTR _texture_height_left$[ebp], ecx

; 1257 : 
; 1258 : 	if ( ( graphic->transparent ) || ( colour.alpha != 255 ) )

  00188	8b 45 18	 mov	 eax, DWORD PTR _graphic$[ebp]
  0018b	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  0018f	75 0b		 jne	 SHORT $LN12@ui_draw_te
  00191	0f b6 45 1f	 movzx	 eax, BYTE PTR _colour$[ebp+3]
  00195	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0019a	74 0f		 je	 SHORT $LN10@ui_draw_te
$LN12@ui_draw_te:

; 1259 : 	{
; 1260 : 
; 1261 : 		set_d3d_alpha_fog_zbuffer ( TRUE, FALSE, FALSE, FALSE );

  0019c	6a 00		 push	 0
  0019e	6a 00		 push	 0
  001a0	6a 00		 push	 0
  001a2	6a 01		 push	 1
  001a4	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer

; 1262 : 	}
; 1263 : 	else

  001a9	eb 0d		 jmp	 SHORT $LN11@ui_draw_te
$LN10@ui_draw_te:

; 1264 : 	{
; 1265 : 
; 1266 : 		set_d3d_alpha_fog_zbuffer ( FALSE, FALSE, FALSE, FALSE );

  001ab	6a 00		 push	 0
  001ad	6a 00		 push	 0
  001af	6a 00		 push	 0
  001b1	6a 00		 push	 0
  001b3	e8 00 00 00 00	 call	 ?set_d3d_alpha_fog_zbuffer@@YGXHHHH@Z ; set_d3d_alpha_fog_zbuffer
$LN11@ui_draw_te:

; 1267 : 	}
; 1268 : 
; 1269 : 	set_d3d_texture_wrapping ( 0, FALSE );

  001b8	6a 00		 push	 0
  001ba	6a 00		 push	 0
  001bc	e8 00 00 00 00	 call	 ?set_d3d_texture_wrapping@@YGXHH@Z ; set_d3d_texture_wrapping

; 1270 : 
; 1271 : 
; 1272 : 	set_d3d_texture_mip_filtering ( FALSE );

  001c1	6a 00		 push	 0
  001c3	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering

; 1273 : 
; 1274 : 	if ( ( iwidth == graphic->graphic_width ) && ( iheight == graphic->graphic_height ) )

  001c8	8b 45 18	 mov	 eax, DWORD PTR _graphic$[ebp]
  001cb	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _iwidth$[ebp]
  001d1	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  001d4	75 1e		 jne	 SHORT $LN13@ui_draw_te
  001d6	8b 45 18	 mov	 eax, DWORD PTR _graphic$[ebp]
  001d9	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _iheight$[ebp]
  001df	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  001e2	75 10		 jne	 SHORT $LN13@ui_draw_te

; 1275 : 	{
; 1276 : 
; 1277 : 		set_d3d_texture_mag_filtering ( FALSE );

  001e4	6a 00		 push	 0
  001e6	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 1278 : 		set_d3d_texture_min_filtering ( FALSE );

  001eb	6a 00		 push	 0
  001ed	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 1279 : 	}
; 1280 : 	else

  001f2	eb 0e		 jmp	 SHORT $LN14@ui_draw_te
$LN13@ui_draw_te:

; 1281 : 	{
; 1282 : 
; 1283 : 		set_d3d_texture_mag_filtering ( TRUE );

  001f4	6a 01		 push	 1
  001f6	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 1284 : 		set_d3d_texture_min_filtering ( TRUE );

  001fb	6a 01		 push	 1
  001fd	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering
$LN14@ui_draw_te:

; 1285 : 	}
; 1286 : 
; 1287 : //	set_d3d_zbuffer_comparison ( FALSE );
; 1288 : 
; 1289 : //	set_d3d_zbuffer_writing ( FALSE );
; 1290 : 
; 1291 : 	specular.red = 0;

  00202	c6 85 ba fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+2], 0

; 1292 : 	specular.green = 0;

  00209	c6 85 b9 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+1], 0

; 1293 : 	specular.blue = 0;

  00210	c6 85 b8 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp], 0

; 1294 : 	specular.alpha = 255;

  00217	c6 85 bb fe ff
	ff ff		 mov	 BYTE PTR _specular$[ebp+3], 255 ; 000000ffH

; 1295 : 
; 1296 : 	y = start_y;

  0021e	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _start_y$[ebp]
  00226	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR _y$[ebp], xmm0

; 1297 : 
; 1298 : 	texture_index = 0;

  0022e	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _texture_index$[ebp], 0

; 1299 : 
; 1300 : 	for ( texture_y = 0; texture_y < graphic->number_of_textures_high; texture_y++ )

  00238	c7 85 f4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _texture_y$[ebp], 0
  00242	eb 0f		 jmp	 SHORT $LN4@ui_draw_te
$LN2@ui_draw_te:
  00244	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _texture_y$[ebp]
  0024a	83 c0 01	 add	 eax, 1
  0024d	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _texture_y$[ebp], eax
$LN4@ui_draw_te:
  00253	8b 45 18	 mov	 eax, DWORD PTR _graphic$[ebp]
  00256	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _texture_y$[ebp]
  0025c	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0025f	0f 8d 11 06 00
	00		 jge	 $LN3@ui_draw_te

; 1301 : 	{
; 1302 : 
; 1303 : 		x = start_x;

  00265	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _start_x$[ebp]
  0026d	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR _x$[ebp], xmm0

; 1304 : 
; 1305 : 		for ( texture_x = 0; texture_x < graphic->number_of_textures_wide; texture_x++ )

  00275	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _texture_x$[ebp], 0
  0027f	eb 0f		 jmp	 SHORT $LN7@ui_draw_te
$LN5@ui_draw_te:
  00281	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _texture_x$[ebp]
  00287	83 c0 01	 add	 eax, 1
  0028a	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _texture_x$[ebp], eax
$LN7@ui_draw_te:
  00290	8b 45 18	 mov	 eax, DWORD PTR _graphic$[ebp]
  00293	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _texture_x$[ebp]
  00299	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0029c	0f 8d b7 05 00
	00		 jge	 $LN6@ui_draw_te

; 1306 : 		{
; 1307 : 
; 1308 : 			int
; 1309 : 				outcode,
; 1310 : 				outcode2;
; 1311 : 
; 1312 : 			set_d3d_flat_shaded_textured_renderstate ( graphic->textures[texture_index].texture );

  002a2	6b 85 fc fe ff
	ff 0c		 imul	 eax, DWORD PTR _texture_index$[ebp], 12
  002a9	8b 4d 18	 mov	 ecx, DWORD PTR _graphic$[ebp]
  002ac	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  002af	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  002b3	50		 push	 eax
  002b4	e8 00 00 00 00	 call	 ?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z ; set_d3d_flat_shaded_textured_renderstate

; 1313 : 	
; 1314 : 			quad[0].i = x;

  002b9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002be	6b c8 00	 imul	 ecx, eax, 0
  002c1	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR _x$[ebp]
  002c9	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 1315 : 			quad[0].j = y;

  002d2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002d7	6b c8 00	 imul	 ecx, eax, 0
  002da	f3 0f 10 85 bc
	fe ff ff	 movss	 xmm0, DWORD PTR _y$[ebp]
  002e2	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 1316 : 			quad[0].u = 0;

  002eb	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002f0	6b c8 00	 imul	 ecx, eax, 0
  002f3	0f 57 c0	 xorps	 xmm0, xmm0
  002f6	f3 0f 11 84 0d
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+24], xmm0

; 1317 : 			quad[0].v = 0;

  002ff	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00304	6b c8 00	 imul	 ecx, eax, 0
  00307	0f 57 c0	 xorps	 xmm0, xmm0
  0030a	f3 0f 11 84 0d
	1c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+28], xmm0

; 1318 : 	
; 1319 : 			quad[1].i = x + dx * graphic->textures[texture_index].umax;

  00313	6b 85 fc fe ff
	ff 0c		 imul	 eax, DWORD PTR _texture_index$[ebp], 12
  0031a	8b 4d 18	 mov	 ecx, DWORD PTR _graphic$[ebp]
  0031d	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00320	f3 0f 10 85 c8
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00328	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  0032d	f3 0f 58 85 c0
	fe ff ff	 addss	 xmm0, DWORD PTR _x$[ebp]
  00335	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0033a	c1 e0 00	 shl	 eax, 0
  0033d	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 1320 : 			quad[1].j = y;

  00346	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0034b	c1 e0 00	 shl	 eax, 0
  0034e	f3 0f 10 85 bc
	fe ff ff	 movss	 xmm0, DWORD PTR _y$[ebp]
  00356	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 1321 : 			quad[1].u = graphic->textures[texture_index].umax;

  0035f	6b 85 fc fe ff
	ff 0c		 imul	 eax, DWORD PTR _texture_index$[ebp], 12
  00366	8b 4d 18	 mov	 ecx, DWORD PTR _graphic$[ebp]
  00369	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0036c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00371	c1 e1 00	 shl	 ecx, 0
  00374	8b 14 02	 mov	 edx, DWORD PTR [edx+eax]
  00377	89 94 0d 18 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+ecx+24], edx

; 1322 : 			quad[1].v = 0;

  0037e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00383	c1 e0 00	 shl	 eax, 0
  00386	0f 57 c0	 xorps	 xmm0, xmm0
  00389	f3 0f 11 84 05
	1c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+28], xmm0

; 1323 : 	
; 1324 : 			quad[2].i = x + dx * graphic->textures[texture_index].umax;

  00392	6b 85 fc fe ff
	ff 0c		 imul	 eax, DWORD PTR _texture_index$[ebp], 12
  00399	8b 4d 18	 mov	 ecx, DWORD PTR _graphic$[ebp]
  0039c	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0039f	f3 0f 10 85 c8
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$[ebp]
  003a7	f3 0f 59 04 02	 mulss	 xmm0, DWORD PTR [edx+eax]
  003ac	f3 0f 58 85 c0
	fe ff ff	 addss	 xmm0, DWORD PTR _x$[ebp]
  003b4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003b9	d1 e0		 shl	 eax, 1
  003bb	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 1325 : 			quad[2].j = y + dy * graphic->textures[texture_index].vmax;

  003c4	6b 85 fc fe ff
	ff 0c		 imul	 eax, DWORD PTR _texture_index$[ebp], 12
  003cb	8b 4d 18	 mov	 ecx, DWORD PTR _graphic$[ebp]
  003ce	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  003d1	f3 0f 10 85 c4
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$[ebp]
  003d9	f3 0f 59 44 02
	04		 mulss	 xmm0, DWORD PTR [edx+eax+4]
  003df	f3 0f 58 85 bc
	fe ff ff	 addss	 xmm0, DWORD PTR _y$[ebp]
  003e7	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  003ec	d1 e0		 shl	 eax, 1
  003ee	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 1326 : 			quad[2].u = graphic->textures[texture_index].umax;

  003f7	6b 85 fc fe ff
	ff 0c		 imul	 eax, DWORD PTR _texture_index$[ebp], 12
  003fe	8b 4d 18	 mov	 ecx, DWORD PTR _graphic$[ebp]
  00401	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00404	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00409	d1 e1		 shl	 ecx, 1
  0040b	8b 14 02	 mov	 edx, DWORD PTR [edx+eax]
  0040e	89 94 0d 18 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+ecx+24], edx

; 1327 : 			quad[2].v = graphic->textures[texture_index].vmax;

  00415	6b 85 fc fe ff
	ff 0c		 imul	 eax, DWORD PTR _texture_index$[ebp], 12
  0041c	8b 4d 18	 mov	 ecx, DWORD PTR _graphic$[ebp]
  0041f	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00422	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00427	d1 e1		 shl	 ecx, 1
  00429	8b 54 02 04	 mov	 edx, DWORD PTR [edx+eax+4]
  0042d	89 94 0d 1c ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+ecx+28], edx

; 1328 : 	
; 1329 : 			quad[3].i = x;

  00434	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00439	6b c8 03	 imul	 ecx, eax, 3
  0043c	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR _x$[ebp]
  00444	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 1330 : 			quad[3].j = y + dy * graphic->textures[texture_index].vmax;

  0044d	6b 85 fc fe ff
	ff 0c		 imul	 eax, DWORD PTR _texture_index$[ebp], 12
  00454	8b 4d 18	 mov	 ecx, DWORD PTR _graphic$[ebp]
  00457	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0045a	f3 0f 10 85 c4
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00462	f3 0f 59 44 02
	04		 mulss	 xmm0, DWORD PTR [edx+eax+4]
  00468	f3 0f 58 85 bc
	fe ff ff	 addss	 xmm0, DWORD PTR _y$[ebp]
  00470	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00475	6b c8 03	 imul	 ecx, eax, 3
  00478	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 1331 : 			quad[3].u = 0;

  00481	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00486	6b c8 03	 imul	 ecx, eax, 3
  00489	0f 57 c0	 xorps	 xmm0, xmm0
  0048c	f3 0f 11 84 0d
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+24], xmm0

; 1332 : 			quad[3].v = graphic->textures[texture_index].vmax;

  00495	6b 85 fc fe ff
	ff 0c		 imul	 eax, DWORD PTR _texture_index$[ebp], 12
  0049c	8b 4d 18	 mov	 ecx, DWORD PTR _graphic$[ebp]
  0049f	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  004a2	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  004a7	6b c9 03	 imul	 ecx, ecx, 3
  004aa	8b 54 02 04	 mov	 edx, DWORD PTR [edx+eax+4]
  004ae	89 94 0d 1c ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+ecx+28], edx

; 1333 : 	
; 1334 : 			quad[0].z = 10;

  004b5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004ba	6b c8 00	 imul	 ecx, eax, 0
  004bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  004c5	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 1335 : 			quad[0].q = 0.1;

  004ce	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004d3	6b c8 00	 imul	 ecx, eax, 0
  004d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  004de	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 1336 : 			quad[0].next_vertex = &quad[1];

  004e7	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  004ec	c1 e0 00	 shl	 eax, 0
  004ef	8d 8c 05 00 ff
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  004f6	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  004fb	6b c2 00	 imul	 eax, edx, 0
  004fe	89 8c 05 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], ecx

; 1337 : 		
; 1338 : 			quad[1].z = 10;

  00505	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0050a	c1 e0 00	 shl	 eax, 0
  0050d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  00515	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 1339 : 			quad[1].q = 0.1;

  0051e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00523	c1 e0 00	 shl	 eax, 0
  00526	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0052e	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 1340 : 			quad[1].next_vertex = &quad[2];

  00537	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0053c	d1 e0		 shl	 eax, 1
  0053e	8d 8c 05 00 ff
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  00545	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0054a	c1 e2 00	 shl	 edx, 0
  0054d	89 8c 15 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+edx+40], ecx

; 1341 : 		
; 1342 : 			quad[2].z = 10;

  00554	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00559	d1 e0		 shl	 eax, 1
  0055b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  00563	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 1343 : 			quad[2].q = 0.1;

  0056c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00571	d1 e0		 shl	 eax, 1
  00573	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0057b	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 1344 : 			quad[2].next_vertex = &quad[3];

  00584	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00589	6b c8 03	 imul	 ecx, eax, 3
  0058c	8d 94 0d 00 ff
	ff ff		 lea	 edx, DWORD PTR _quad$[ebp+ecx]
  00593	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00598	d1 e0		 shl	 eax, 1
  0059a	89 94 05 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], edx

; 1345 : 		
; 1346 : 			quad[3].z = 10;

  005a1	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  005a6	6b c8 03	 imul	 ecx, eax, 3
  005a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  005b1	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 1347 : 			quad[3].q = 0.1;

  005ba	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  005bf	6b c8 03	 imul	 ecx, eax, 3
  005c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  005ca	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 1348 : 			quad[3].next_vertex = NULL;

  005d3	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  005d8	6b c8 03	 imul	 ecx, eax, 3
  005db	c7 84 0d 28 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$[ebp+ecx+40], 0

; 1349 : 
; 1350 : 			quad[0].outcode = generate_outcode ( quad[0].i, quad[0].j );

  005e6	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  005eb	6b c8 00	 imul	 ecx, eax, 0
  005ee	51		 push	 ecx
  005ef	f3 0f 10 84 0d
	14 ff ff ff	 movss	 xmm0, DWORD PTR _quad$[ebp+ecx+20]
  005f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005fd	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00602	6b c2 00	 imul	 eax, edx, 0
  00605	51		 push	 ecx
  00606	f3 0f 10 84 05
	10 ff ff ff	 movss	 xmm0, DWORD PTR _quad$[ebp+eax+16]
  0060f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00614	e8 00 00 00 00	 call	 ?generate_outcode@@YGHMM@Z ; generate_outcode
  00619	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0061e	6b d1 00	 imul	 edx, ecx, 0
  00621	88 84 15 2c ff
	ff ff		 mov	 BYTE PTR _quad$[ebp+edx+44], al

; 1351 : 			quad[1].outcode = generate_outcode ( quad[1].i, quad[1].j );

  00628	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0062d	c1 e0 00	 shl	 eax, 0
  00630	51		 push	 ecx
  00631	f3 0f 10 84 05
	14 ff ff ff	 movss	 xmm0, DWORD PTR _quad$[ebp+eax+20]
  0063a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063f	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00644	c1 e1 00	 shl	 ecx, 0
  00647	51		 push	 ecx
  00648	f3 0f 10 84 0d
	10 ff ff ff	 movss	 xmm0, DWORD PTR _quad$[ebp+ecx+16]
  00651	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00656	e8 00 00 00 00	 call	 ?generate_outcode@@YGHMM@Z ; generate_outcode
  0065b	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00660	c1 e2 00	 shl	 edx, 0
  00663	88 84 15 2c ff
	ff ff		 mov	 BYTE PTR _quad$[ebp+edx+44], al

; 1352 : 			quad[2].outcode = generate_outcode ( quad[2].i, quad[2].j );

  0066a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0066f	d1 e0		 shl	 eax, 1
  00671	51		 push	 ecx
  00672	f3 0f 10 84 05
	14 ff ff ff	 movss	 xmm0, DWORD PTR _quad$[ebp+eax+20]
  0067b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00680	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00685	d1 e1		 shl	 ecx, 1
  00687	51		 push	 ecx
  00688	f3 0f 10 84 0d
	10 ff ff ff	 movss	 xmm0, DWORD PTR _quad$[ebp+ecx+16]
  00691	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00696	e8 00 00 00 00	 call	 ?generate_outcode@@YGHMM@Z ; generate_outcode
  0069b	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  006a0	d1 e2		 shl	 edx, 1
  006a2	88 84 15 2c ff
	ff ff		 mov	 BYTE PTR _quad$[ebp+edx+44], al

; 1353 : 			quad[3].outcode = generate_outcode ( quad[3].i, quad[3].j );

  006a9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  006ae	6b c8 03	 imul	 ecx, eax, 3
  006b1	51		 push	 ecx
  006b2	f3 0f 10 84 0d
	14 ff ff ff	 movss	 xmm0, DWORD PTR _quad$[ebp+ecx+20]
  006bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006c0	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  006c5	6b c2 03	 imul	 eax, edx, 3
  006c8	51		 push	 ecx
  006c9	f3 0f 10 84 05
	10 ff ff ff	 movss	 xmm0, DWORD PTR _quad$[ebp+eax+16]
  006d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d7	e8 00 00 00 00	 call	 ?generate_outcode@@YGHMM@Z ; generate_outcode
  006dc	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  006e1	6b d1 03	 imul	 edx, ecx, 3
  006e4	88 84 15 2c ff
	ff ff		 mov	 BYTE PTR _quad$[ebp+edx+44], al

; 1354 : 
; 1355 : 			outcode = quad[0].outcode;

  006eb	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  006f0	6b c8 00	 imul	 ecx, eax, 0
  006f3	0f b6 94 0d 2c
	ff ff ff	 movzx	 edx, BYTE PTR _quad$[ebp+ecx+44]
  006fb	89 95 b4 fe ff
	ff		 mov	 DWORD PTR _outcode$3[ebp], edx

; 1356 : 			outcode2 = quad[0].outcode;

  00701	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00706	6b c8 00	 imul	 ecx, eax, 0
  00709	0f b6 94 0d 2c
	ff ff ff	 movzx	 edx, BYTE PTR _quad$[ebp+ecx+44]
  00711	89 95 b0 fe ff
	ff		 mov	 DWORD PTR _outcode2$2[ebp], edx

; 1357 : 			outcode |= quad[1].outcode;

  00717	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0071c	c1 e0 00	 shl	 eax, 0
  0071f	0f b6 8c 05 2c
	ff ff ff	 movzx	 ecx, BYTE PTR _quad$[ebp+eax+44]
  00727	0b 8d b4 fe ff
	ff		 or	 ecx, DWORD PTR _outcode$3[ebp]
  0072d	89 8d b4 fe ff
	ff		 mov	 DWORD PTR _outcode$3[ebp], ecx

; 1358 : 			outcode2 &= quad[1].outcode;

  00733	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00738	c1 e0 00	 shl	 eax, 0
  0073b	0f b6 8c 05 2c
	ff ff ff	 movzx	 ecx, BYTE PTR _quad$[ebp+eax+44]
  00743	23 8d b0 fe ff
	ff		 and	 ecx, DWORD PTR _outcode2$2[ebp]
  00749	89 8d b0 fe ff
	ff		 mov	 DWORD PTR _outcode2$2[ebp], ecx

; 1359 : 			outcode |= quad[2].outcode;

  0074f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00754	d1 e0		 shl	 eax, 1
  00756	0f b6 8c 05 2c
	ff ff ff	 movzx	 ecx, BYTE PTR _quad$[ebp+eax+44]
  0075e	0b 8d b4 fe ff
	ff		 or	 ecx, DWORD PTR _outcode$3[ebp]
  00764	89 8d b4 fe ff
	ff		 mov	 DWORD PTR _outcode$3[ebp], ecx

; 1360 : 			outcode2 &= quad[2].outcode;

  0076a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0076f	d1 e0		 shl	 eax, 1
  00771	0f b6 8c 05 2c
	ff ff ff	 movzx	 ecx, BYTE PTR _quad$[ebp+eax+44]
  00779	23 8d b0 fe ff
	ff		 and	 ecx, DWORD PTR _outcode2$2[ebp]
  0077f	89 8d b0 fe ff
	ff		 mov	 DWORD PTR _outcode2$2[ebp], ecx

; 1361 : 			outcode |= quad[3].outcode;

  00785	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0078a	6b c8 03	 imul	 ecx, eax, 3
  0078d	0f b6 94 0d 2c
	ff ff ff	 movzx	 edx, BYTE PTR _quad$[ebp+ecx+44]
  00795	0b 95 b4 fe ff
	ff		 or	 edx, DWORD PTR _outcode$3[ebp]
  0079b	89 95 b4 fe ff
	ff		 mov	 DWORD PTR _outcode$3[ebp], edx

; 1362 : 			outcode2 &= quad[3].outcode;

  007a1	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  007a6	6b c8 03	 imul	 ecx, eax, 3
  007a9	0f b6 94 0d 2c
	ff ff ff	 movzx	 edx, BYTE PTR _quad$[ebp+ecx+44]
  007b1	23 95 b0 fe ff
	ff		 and	 edx, DWORD PTR _outcode2$2[ebp]
  007b7	89 95 b0 fe ff
	ff		 mov	 DWORD PTR _outcode2$2[ebp], edx

; 1363 : 
; 1364 : 			if ( outcode2 == 0 )

  007bd	75 6e		 jne	 SHORT $LN17@ui_draw_te

; 1365 : 			{
; 1366 : 
; 1367 : 				if ( outcode )

  007bf	83 bd b4 fe ff
	ff 00		 cmp	 DWORD PTR _outcode$3[ebp], 0
  007c6	74 4e		 je	 SHORT $LN16@ui_draw_te

; 1368 : 				{
; 1369 : 
; 1370 : 					vertex
; 1371 : 						*poly;
; 1372 : 
; 1373 : 					clip_3d_coord = 0;

  007c8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?clip_3d_coord@@3HA, 0 ; clip_3d_coord

; 1374 : 
; 1375 : 					poly = clip_3d_polygon ( &quad[0], outcode );

  007d2	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _outcode$3[ebp]
  007d8	50		 push	 eax
  007d9	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  007de	6b d1 00	 imul	 edx, ecx, 0
  007e1	8d 84 15 00 ff
	ff ff		 lea	 eax, DWORD PTR _quad$[ebp+edx]
  007e8	50		 push	 eax
  007e9	e8 00 00 00 00	 call	 ?clip_3d_polygon@@YGPAUVERTEX@@PAU1@H@Z ; clip_3d_polygon
  007ee	89 85 ac fe ff
	ff		 mov	 DWORD PTR _poly$1[ebp], eax

; 1376 : 
; 1377 : 					if ( poly )

  007f4	83 bd ac fe ff
	ff 00		 cmp	 DWORD PTR _poly$1[ebp], 0
  007fb	74 17		 je	 SHORT $LN18@ui_draw_te

; 1378 : 					{
; 1379 : 
; 1380 : 						draw_wbuffered_flat_shaded_textured_polygon ( poly, colour, specular );

  007fd	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _specular$[ebp]
  00803	50		 push	 eax
  00804	8b 4d 1c	 mov	 ecx, DWORD PTR _colour$[ebp]
  00807	51		 push	 ecx
  00808	8b 95 ac fe ff
	ff		 mov	 edx, DWORD PTR _poly$1[ebp]
  0080e	52		 push	 edx
  0080f	e8 00 00 00 00	 call	 ?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_flat_shaded_textured_polygon
$LN18@ui_draw_te:

; 1381 : 					}
; 1382 : 				}
; 1383 : 				else

  00814	eb 17		 jmp	 SHORT $LN17@ui_draw_te
$LN16@ui_draw_te:

; 1384 : 				{
; 1385 : 	
; 1386 : 					draw_wbuffered_flat_shaded_textured_polygon ( quad, colour, specular );

  00816	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _specular$[ebp]
  0081c	50		 push	 eax
  0081d	8b 4d 1c	 mov	 ecx, DWORD PTR _colour$[ebp]
  00820	51		 push	 ecx
  00821	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR _quad$[ebp]
  00827	52		 push	 edx
  00828	e8 00 00 00 00	 call	 ?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_flat_shaded_textured_polygon
$LN17@ui_draw_te:

; 1387 : 				}
; 1388 : 			}
; 1389 : 
; 1390 : 			texture_index++;

  0082d	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _texture_index$[ebp]
  00833	83 c0 01	 add	 eax, 1
  00836	89 85 fc fe ff
	ff		 mov	 DWORD PTR _texture_index$[ebp], eax

; 1391 : 
; 1392 : 			x += dx;

  0083c	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR _x$[ebp]
  00844	f3 0f 58 85 c8
	fe ff ff	 addss	 xmm0, DWORD PTR _dx$[ebp]
  0084c	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR _x$[ebp], xmm0

; 1393 : 		}

  00854	e9 28 fa ff ff	 jmp	 $LN5@ui_draw_te
$LN6@ui_draw_te:

; 1394 : 
; 1395 : 		y += dy;

  00859	f3 0f 10 85 bc
	fe ff ff	 movss	 xmm0, DWORD PTR _y$[ebp]
  00861	f3 0f 58 85 c4
	fe ff ff	 addss	 xmm0, DWORD PTR _dy$[ebp]
  00869	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR _y$[ebp], xmm0

; 1396 : 	}

  00871	e9 ce f9 ff ff	 jmp	 $LN2@ui_draw_te
$LN3@ui_draw_te:

; 1397 : 
; 1398 : //	flush_triangle_primitives ();
; 1399 : }

  00876	5f		 pop	 edi
  00877	5e		 pop	 esi
  00878	5b		 pop	 ebx
  00879	8b e5		 mov	 esp, ebp
  0087b	5d		 pop	 ebp
  0087c	c2 18 00	 ret	 24			; 00000018H
?ui_draw_texture_graphic@@YGXMMMMPAUTEXTURE_GRAPHIC@@UREAL_COLOUR@@@Z ENDP ; ui_draw_texture_graphic
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_draw\uigraph.c
;	COMDAT ?ui_draw_masked_graphic@@YGXHHHHHHPAG0@Z
_TEXT	SEGMENT
_destination_int_ptr$1 = -16				; size = 4
_source_int_ptr$2 = -12					; size = 4
_destination_y_loop$ = -8				; size = 4
_destination_x_loop$ = -4				; size = 4
_destination_x1$ = 8					; size = 4
_destination_y1$ = 12					; size = 4
_destination_x2$ = 16					; size = 4
_destination_y2$ = 20					; size = 4
_destination_pitch$ = 24				; size = 4
_source_pitch$ = 28					; size = 4
_source_ptr$ = 32					; size = 4
_destination_ptr$ = 36					; size = 4
?ui_draw_masked_graphic@@YGXHHHHHHPAG0@Z PROC		; ui_draw_masked_graphic, COMDAT

; 1078 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1079 : 
; 1080 : 	int
; 1081 : 		destination_x_loop,
; 1082 : 		destination_y_loop;
; 1083 : 
; 1084 : 	destination_pitch = destination_pitch >> 1;

  00009	8b 45 18	 mov	 eax, DWORD PTR _destination_pitch$[ebp]
  0000c	d1 f8		 sar	 eax, 1
  0000e	89 45 18	 mov	 DWORD PTR _destination_pitch$[ebp], eax

; 1085 : 	source_pitch = source_pitch >> 1;

  00011	8b 45 1c	 mov	 eax, DWORD PTR _source_pitch$[ebp]
  00014	d1 f8		 sar	 eax, 1
  00016	89 45 1c	 mov	 DWORD PTR _source_pitch$[ebp], eax

; 1086 : 
; 1087 : 	destination_ptr += (destination_x1 + (destination_y1 * destination_pitch));

  00019	8b 45 0c	 mov	 eax, DWORD PTR _destination_y1$[ebp]
  0001c	0f af 45 18	 imul	 eax, DWORD PTR _destination_pitch$[ebp]
  00020	03 45 08	 add	 eax, DWORD PTR _destination_x1$[ebp]
  00023	8b 4d 24	 mov	 ecx, DWORD PTR _destination_ptr$[ebp]
  00026	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00029	89 55 24	 mov	 DWORD PTR _destination_ptr$[ebp], edx

; 1088 : 
; 1089 : 	destination_pitch -= (destination_x2 - destination_x1);

  0002c	8b 45 10	 mov	 eax, DWORD PTR _destination_x2$[ebp]
  0002f	2b 45 08	 sub	 eax, DWORD PTR _destination_x1$[ebp]
  00032	8b 4d 18	 mov	 ecx, DWORD PTR _destination_pitch$[ebp]
  00035	2b c8		 sub	 ecx, eax
  00037	89 4d 18	 mov	 DWORD PTR _destination_pitch$[ebp], ecx

; 1090 : 	source_pitch -= (destination_x2 - destination_x1);

  0003a	8b 45 10	 mov	 eax, DWORD PTR _destination_x2$[ebp]
  0003d	2b 45 08	 sub	 eax, DWORD PTR _destination_x1$[ebp]
  00040	8b 4d 1c	 mov	 ecx, DWORD PTR _source_pitch$[ebp]
  00043	2b c8		 sub	 ecx, eax
  00045	89 4d 1c	 mov	 DWORD PTR _source_pitch$[ebp], ecx

; 1091 : 
; 1092 : 	for (destination_y_loop = destination_y1; destination_y_loop < destination_y2; destination_y_loop ++)

  00048	8b 45 0c	 mov	 eax, DWORD PTR _destination_y1$[ebp]
  0004b	89 45 f8	 mov	 DWORD PTR _destination_y_loop$[ebp], eax
  0004e	eb 09		 jmp	 SHORT $LN4@ui_draw_ma
$LN2@ui_draw_ma:
  00050	8b 45 f8	 mov	 eax, DWORD PTR _destination_y_loop$[ebp]
  00053	83 c0 01	 add	 eax, 1
  00056	89 45 f8	 mov	 DWORD PTR _destination_y_loop$[ebp], eax
$LN4@ui_draw_ma:
  00059	8b 45 f8	 mov	 eax, DWORD PTR _destination_y_loop$[ebp]
  0005c	3b 45 14	 cmp	 eax, DWORD PTR _destination_y2$[ebp]
  0005f	0f 8d 4e 01 00
	00		 jge	 $LN1@ui_draw_ma

; 1093 : 	{
; 1094 : 
; 1095 : 		int
; 1096 : 			*source_int_ptr,
; 1097 : 			*destination_int_ptr;
; 1098 : 
; 1099 : 		destination_x_loop = destination_x1;

  00065	8b 45 08	 mov	 eax, DWORD PTR _destination_x1$[ebp]
  00068	89 45 fc	 mov	 DWORD PTR _destination_x_loop$[ebp], eax

; 1100 : 
; 1101 : 		if ( destination_x_loop & 1 )

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _destination_x_loop$[ebp]
  0006e	83 e0 01	 and	 eax, 1
  00071	74 31		 je	 SHORT $LN11@ui_draw_ma

; 1102 : 		{
; 1103 : 
; 1104 : 			if (*source_ptr)

  00073	8b 45 20	 mov	 eax, DWORD PTR _source_ptr$[ebp]
  00076	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00079	85 c9		 test	 ecx, ecx
  0007b	74 0c		 je	 SHORT $LN12@ui_draw_ma

; 1105 : 			{
; 1106 : 
; 1107 : 				*destination_ptr = *source_ptr;

  0007d	8b 45 24	 mov	 eax, DWORD PTR _destination_ptr$[ebp]
  00080	8b 4d 20	 mov	 ecx, DWORD PTR _source_ptr$[ebp]
  00083	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00086	66 89 10	 mov	 WORD PTR [eax], dx
$LN12@ui_draw_ma:

; 1108 : 			}
; 1109 : 
; 1110 : 			destination_ptr ++;

  00089	8b 45 24	 mov	 eax, DWORD PTR _destination_ptr$[ebp]
  0008c	83 c0 02	 add	 eax, 2
  0008f	89 45 24	 mov	 DWORD PTR _destination_ptr$[ebp], eax

; 1111 : 
; 1112 : 			source_ptr ++;

  00092	8b 45 20	 mov	 eax, DWORD PTR _source_ptr$[ebp]
  00095	83 c0 02	 add	 eax, 2
  00098	89 45 20	 mov	 DWORD PTR _source_ptr$[ebp], eax

; 1113 : 
; 1114 : 			destination_x_loop++;

  0009b	8b 45 fc	 mov	 eax, DWORD PTR _destination_x_loop$[ebp]
  0009e	83 c0 01	 add	 eax, 1
  000a1	89 45 fc	 mov	 DWORD PTR _destination_x_loop$[ebp], eax
$LN11@ui_draw_ma:

; 1115 : 		}
; 1116 : 
; 1117 : 		source_int_ptr = ( int * ) source_ptr;

  000a4	8b 45 20	 mov	 eax, DWORD PTR _source_ptr$[ebp]
  000a7	89 45 f4	 mov	 DWORD PTR _source_int_ptr$2[ebp], eax

; 1118 : 
; 1119 : 		destination_int_ptr = ( int * ) destination_ptr;

  000aa	8b 45 24	 mov	 eax, DWORD PTR _destination_ptr$[ebp]
  000ad	89 45 f0	 mov	 DWORD PTR _destination_int_ptr$1[ebp], eax

; 1120 : 
; 1121 : 		for ( ; destination_x_loop < ( destination_x2 - 2 ); destination_x_loop += 2 )

  000b0	eb 09		 jmp	 SHORT $LN7@ui_draw_ma
$LN5@ui_draw_ma:
  000b2	8b 45 fc	 mov	 eax, DWORD PTR _destination_x_loop$[ebp]
  000b5	83 c0 02	 add	 eax, 2
  000b8	89 45 fc	 mov	 DWORD PTR _destination_x_loop$[ebp], eax
$LN7@ui_draw_ma:
  000bb	8b 45 10	 mov	 eax, DWORD PTR _destination_x2$[ebp]
  000be	83 e8 02	 sub	 eax, 2
  000c1	39 45 fc	 cmp	 DWORD PTR _destination_x_loop$[ebp], eax
  000c4	0f 8d 83 00 00
	00		 jge	 $LN6@ui_draw_ma

; 1122 : 		{
; 1123 : 
; 1124 : 			if ( *source_int_ptr )

  000ca	8b 45 f4	 mov	 eax, DWORD PTR _source_int_ptr$2[ebp]
  000cd	83 38 00	 cmp	 DWORD PTR [eax], 0
  000d0	74 64		 je	 SHORT $LN13@ui_draw_ma

; 1125 : 			{
; 1126 : 
; 1127 : 				if ( *source_int_ptr & 0xffff0000 )

  000d2	8b 45 f4	 mov	 eax, DWORD PTR _source_int_ptr$2[ebp]
  000d5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d7	81 e1 00 00 ff
	ff		 and	 ecx, -65536		; ffff0000H
  000dd	74 39		 je	 SHORT $LN14@ui_draw_ma

; 1128 : 				{
; 1129 : 
; 1130 : 					if ( *source_int_ptr & 0xffff )

  000df	8b 45 f4	 mov	 eax, DWORD PTR _source_int_ptr$2[ebp]
  000e2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e4	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  000ea	74 0c		 je	 SHORT $LN16@ui_draw_ma

; 1131 : 					{
; 1132 : 
; 1133 : 						//
; 1134 : 						// Both pixels need copying
; 1135 : 						//
; 1136 : 
; 1137 : 						*destination_int_ptr = *source_int_ptr;

  000ec	8b 45 f0	 mov	 eax, DWORD PTR _destination_int_ptr$1[ebp]
  000ef	8b 4d f4	 mov	 ecx, DWORD PTR _source_int_ptr$2[ebp]
  000f2	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f4	89 10		 mov	 DWORD PTR [eax], edx

; 1138 : 					}
; 1139 : 					else

  000f6	eb 1e		 jmp	 SHORT $LN17@ui_draw_ma
$LN16@ui_draw_ma:

; 1140 : 					{
; 1141 : 
; 1142 : 						//
; 1143 : 						// First pixel needs copying, but not the second
; 1144 : 						//
; 1145 : 
; 1146 : 						( ( short int * ) destination_int_ptr )[1] = ( ( short int * ) source_int_ptr )[1];

  000f8	b8 02 00 00 00	 mov	 eax, 2
  000fd	c1 e0 00	 shl	 eax, 0
  00100	b9 02 00 00 00	 mov	 ecx, 2
  00105	c1 e1 00	 shl	 ecx, 0
  00108	8b 55 f0	 mov	 edx, DWORD PTR _destination_int_ptr$1[ebp]
  0010b	8b 75 f4	 mov	 esi, DWORD PTR _source_int_ptr$2[ebp]
  0010e	66 8b 04 06	 mov	 ax, WORD PTR [esi+eax]
  00112	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax
$LN17@ui_draw_ma:

; 1147 : 					}
; 1148 : 				}
; 1149 : 				else

  00116	eb 1e		 jmp	 SHORT $LN13@ui_draw_ma
$LN14@ui_draw_ma:

; 1150 : 				{
; 1151 : 
; 1152 : 					//
; 1153 : 					// Second pixel needs copying, but not the first
; 1154 : 					//
; 1155 : 
; 1156 : 					( ( short int * ) destination_int_ptr )[0] = ( ( short int * ) source_int_ptr )[0];

  00118	b8 02 00 00 00	 mov	 eax, 2
  0011d	6b c8 00	 imul	 ecx, eax, 0
  00120	ba 02 00 00 00	 mov	 edx, 2
  00125	6b c2 00	 imul	 eax, edx, 0
  00128	8b 55 f0	 mov	 edx, DWORD PTR _destination_int_ptr$1[ebp]
  0012b	8b 75 f4	 mov	 esi, DWORD PTR _source_int_ptr$2[ebp]
  0012e	66 8b 0c 0e	 mov	 cx, WORD PTR [esi+ecx]
  00132	66 89 0c 02	 mov	 WORD PTR [edx+eax], cx
$LN13@ui_draw_ma:

; 1157 : 				}
; 1158 : 			}
; 1159 : 
; 1160 : 			destination_int_ptr ++;

  00136	8b 45 f0	 mov	 eax, DWORD PTR _destination_int_ptr$1[ebp]
  00139	83 c0 04	 add	 eax, 4
  0013c	89 45 f0	 mov	 DWORD PTR _destination_int_ptr$1[ebp], eax

; 1161 : 
; 1162 : 			source_int_ptr ++;

  0013f	8b 45 f4	 mov	 eax, DWORD PTR _source_int_ptr$2[ebp]
  00142	83 c0 04	 add	 eax, 4
  00145	89 45 f4	 mov	 DWORD PTR _source_int_ptr$2[ebp], eax

; 1163 : 		}

  00148	e9 65 ff ff ff	 jmp	 $LN5@ui_draw_ma
$LN6@ui_draw_ma:

; 1164 : 
; 1165 : 		source_ptr = ( unsigned short int * ) source_int_ptr;

  0014d	8b 45 f4	 mov	 eax, DWORD PTR _source_int_ptr$2[ebp]
  00150	89 45 20	 mov	 DWORD PTR _source_ptr$[ebp], eax

; 1166 : 
; 1167 : 		destination_ptr = ( unsigned short int * ) destination_int_ptr;

  00153	8b 45 f0	 mov	 eax, DWORD PTR _destination_int_ptr$1[ebp]
  00156	89 45 24	 mov	 DWORD PTR _destination_ptr$[ebp], eax

; 1168 : 
; 1169 : 		for ( ; destination_x_loop < destination_x2; destination_x_loop ++)

  00159	eb 09		 jmp	 SHORT $LN10@ui_draw_ma
$LN8@ui_draw_ma:
  0015b	8b 45 fc	 mov	 eax, DWORD PTR _destination_x_loop$[ebp]
  0015e	83 c0 01	 add	 eax, 1
  00161	89 45 fc	 mov	 DWORD PTR _destination_x_loop$[ebp], eax
$LN10@ui_draw_ma:
  00164	8b 45 fc	 mov	 eax, DWORD PTR _destination_x_loop$[ebp]
  00167	3b 45 10	 cmp	 eax, DWORD PTR _destination_x2$[ebp]
  0016a	7d 2a		 jge	 SHORT $LN9@ui_draw_ma

; 1170 : 		{
; 1171 : 
; 1172 : 			if (*source_ptr)

  0016c	8b 45 20	 mov	 eax, DWORD PTR _source_ptr$[ebp]
  0016f	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00172	85 c9		 test	 ecx, ecx
  00174	74 0c		 je	 SHORT $LN18@ui_draw_ma

; 1173 : 			{
; 1174 : 
; 1175 : 				*destination_ptr = *source_ptr;

  00176	8b 45 24	 mov	 eax, DWORD PTR _destination_ptr$[ebp]
  00179	8b 4d 20	 mov	 ecx, DWORD PTR _source_ptr$[ebp]
  0017c	66 8b 11	 mov	 dx, WORD PTR [ecx]
  0017f	66 89 10	 mov	 WORD PTR [eax], dx
$LN18@ui_draw_ma:

; 1176 : 			}
; 1177 : 
; 1178 : 			destination_ptr ++;

  00182	8b 45 24	 mov	 eax, DWORD PTR _destination_ptr$[ebp]
  00185	83 c0 02	 add	 eax, 2
  00188	89 45 24	 mov	 DWORD PTR _destination_ptr$[ebp], eax

; 1179 : 
; 1180 : 			source_ptr ++;

  0018b	8b 45 20	 mov	 eax, DWORD PTR _source_ptr$[ebp]
  0018e	83 c0 02	 add	 eax, 2
  00191	89 45 20	 mov	 DWORD PTR _source_ptr$[ebp], eax

; 1181 : 		}

  00194	eb c5		 jmp	 SHORT $LN8@ui_draw_ma
$LN9@ui_draw_ma:

; 1182 : 
; 1183 : 		destination_ptr += destination_pitch;

  00196	8b 45 18	 mov	 eax, DWORD PTR _destination_pitch$[ebp]
  00199	8b 4d 24	 mov	 ecx, DWORD PTR _destination_ptr$[ebp]
  0019c	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0019f	89 55 24	 mov	 DWORD PTR _destination_ptr$[ebp], edx

; 1184 : 
; 1185 : 		source_ptr += source_pitch;

  001a2	8b 45 1c	 mov	 eax, DWORD PTR _source_pitch$[ebp]
  001a5	8b 4d 20	 mov	 ecx, DWORD PTR _source_ptr$[ebp]
  001a8	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  001ab	89 55 20	 mov	 DWORD PTR _source_ptr$[ebp], edx

; 1186 : 	}

  001ae	e9 9d fe ff ff	 jmp	 $LN2@ui_draw_ma
$LN1@ui_draw_ma:

; 1187 : }

  001b3	5f		 pop	 edi
  001b4	5e		 pop	 esi
  001b5	5b		 pop	 ebx
  001b6	8b e5		 mov	 esp, ebp
  001b8	5d		 pop	 ebp
  001b9	c2 20 00	 ret	 32			; 00000020H
?ui_draw_masked_graphic@@YGXHHHHHHPAG0@Z ENDP		; ui_draw_masked_graphic
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_draw\uigraph.c
;	COMDAT ?ui_draw_scaled_masked_graphic@@YGXHHHHHHHHHHPAG0@Z
_TEXT	SEGMENT
_source_line_ptr$ = -56					; size = 4
_destination_line_ptr$ = -52				; size = 4
_destination_y_loop$ = -48				; size = 4
_destination_x_loop$ = -44				; size = 4
_destination_y_delta$ = -40				; size = 4
_destination_x_delta$ = -36				; size = 4
_source_y_delta$ = -32					; size = 4
_source_x_delta$ = -28					; size = 4
_source_y_inc$ = -24					; size = 4
_source_y_counter$ = -20				; size = 4
_source_x_counter$ = -16				; size = 4
_source_x_inc_whole$ = -12				; size = 4
_source_x_inc_frac$ = -8				; size = 4
_source_x_error$ = -4					; size = 4
_source_x1$ = 8						; size = 4
_source_y1$ = 12					; size = 4
_source_x2$ = 16					; size = 4
_source_y2$ = 20					; size = 4
_source_pitch$ = 24					; size = 4
_destination_x1$ = 28					; size = 4
_destination_y1$ = 32					; size = 4
_destination_x2$ = 36					; size = 4
_destination_y2$ = 40					; size = 4
_destination_pitch$ = 44				; size = 4
_source_ptr$ = 48					; size = 4
_destination_ptr$ = 52					; size = 4
?ui_draw_scaled_masked_graphic@@YGXHHHHHHHHHHPAG0@Z PROC ; ui_draw_scaled_masked_graphic, COMDAT

; 988  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 989  : 
; 990  : 	int
; 991  : 		source_x_error,
; 992  : 		source_x_inc_frac,
; 993  : 		source_x_inc_whole,
; 994  : 		source_x_counter = 0,

  00009	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _source_x_counter$[ebp], 0

; 995  : 		source_y_counter = 0,

  00010	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _source_y_counter$[ebp], 0

; 996  : 		source_y_inc,
; 997  : 		source_x_delta,
; 998  : 		source_y_delta,
; 999  : 		destination_x_delta,
; 1000 : 		destination_y_delta;
; 1001 : 
; 1002 : 	int
; 1003 : 		destination_x_loop,
; 1004 : 		destination_y_loop;
; 1005 : 
; 1006 : 	unsigned short int
; 1007 : 		*destination_line_ptr,
; 1008 : 		*source_line_ptr;
; 1009 : 
; 1010 : 	destination_pitch = destination_pitch >> 1;

  00017	8b 45 2c	 mov	 eax, DWORD PTR _destination_pitch$[ebp]
  0001a	d1 f8		 sar	 eax, 1
  0001c	89 45 2c	 mov	 DWORD PTR _destination_pitch$[ebp], eax

; 1011 : 	source_pitch = source_pitch >> 1;

  0001f	8b 45 18	 mov	 eax, DWORD PTR _source_pitch$[ebp]
  00022	d1 f8		 sar	 eax, 1
  00024	89 45 18	 mov	 DWORD PTR _source_pitch$[ebp], eax

; 1012 : 
; 1013 : 	source_x_delta = source_x2 - source_x1;

  00027	8b 45 10	 mov	 eax, DWORD PTR _source_x2$[ebp]
  0002a	2b 45 08	 sub	 eax, DWORD PTR _source_x1$[ebp]
  0002d	89 45 e4	 mov	 DWORD PTR _source_x_delta$[ebp], eax

; 1014 : 	source_y_delta = source_y2 - source_y1;

  00030	8b 45 14	 mov	 eax, DWORD PTR _source_y2$[ebp]
  00033	2b 45 0c	 sub	 eax, DWORD PTR _source_y1$[ebp]
  00036	89 45 e0	 mov	 DWORD PTR _source_y_delta$[ebp], eax

; 1015 : 
; 1016 : 	destination_x_delta = destination_x2 - destination_x1;

  00039	8b 45 24	 mov	 eax, DWORD PTR _destination_x2$[ebp]
  0003c	2b 45 1c	 sub	 eax, DWORD PTR _destination_x1$[ebp]
  0003f	89 45 dc	 mov	 DWORD PTR _destination_x_delta$[ebp], eax

; 1017 : 	destination_y_delta = destination_y2 - destination_y1;

  00042	8b 45 28	 mov	 eax, DWORD PTR _destination_y2$[ebp]
  00045	2b 45 20	 sub	 eax, DWORD PTR _destination_y1$[ebp]
  00048	89 45 d8	 mov	 DWORD PTR _destination_y_delta$[ebp], eax

; 1018 : 
; 1019 : 	source_x_inc_frac = ((source_x_delta << 16) / destination_x_delta) & 0xFFFF;

  0004b	8b 45 e4	 mov	 eax, DWORD PTR _source_x_delta$[ebp]
  0004e	c1 e0 10	 shl	 eax, 16			; 00000010H
  00051	99		 cdq
  00052	f7 7d dc	 idiv	 DWORD PTR _destination_x_delta$[ebp]
  00055	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0005a	89 45 f8	 mov	 DWORD PTR _source_x_inc_frac$[ebp], eax

; 1020 : 	source_x_inc_whole = ((source_x_delta << 16) / destination_x_delta) >> 16;

  0005d	8b 45 e4	 mov	 eax, DWORD PTR _source_x_delta$[ebp]
  00060	c1 e0 10	 shl	 eax, 16			; 00000010H
  00063	99		 cdq
  00064	f7 7d dc	 idiv	 DWORD PTR _destination_x_delta$[ebp]
  00067	c1 f8 10	 sar	 eax, 16			; 00000010H
  0006a	89 45 f4	 mov	 DWORD PTR _source_x_inc_whole$[ebp], eax

; 1021 : 
; 1022 : 	source_y_inc = (source_y_delta << 16) / destination_y_delta;

  0006d	8b 45 e0	 mov	 eax, DWORD PTR _source_y_delta$[ebp]
  00070	c1 e0 10	 shl	 eax, 16			; 00000010H
  00073	99		 cdq
  00074	f7 7d d8	 idiv	 DWORD PTR _destination_y_delta$[ebp]
  00077	89 45 e8	 mov	 DWORD PTR _source_y_inc$[ebp], eax

; 1023 : 
; 1024 : 	destination_ptr += (destination_x1 + (destination_y1 * destination_pitch));

  0007a	8b 45 20	 mov	 eax, DWORD PTR _destination_y1$[ebp]
  0007d	0f af 45 2c	 imul	 eax, DWORD PTR _destination_pitch$[ebp]
  00081	03 45 1c	 add	 eax, DWORD PTR _destination_x1$[ebp]
  00084	8b 4d 34	 mov	 ecx, DWORD PTR _destination_ptr$[ebp]
  00087	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0008a	89 55 34	 mov	 DWORD PTR _destination_ptr$[ebp], edx

; 1025 : 
; 1026 : 	source_ptr += (source_x1 + (source_y1 * source_pitch));

  0008d	8b 45 0c	 mov	 eax, DWORD PTR _source_y1$[ebp]
  00090	0f af 45 18	 imul	 eax, DWORD PTR _source_pitch$[ebp]
  00094	03 45 08	 add	 eax, DWORD PTR _source_x1$[ebp]
  00097	8b 4d 30	 mov	 ecx, DWORD PTR _source_ptr$[ebp]
  0009a	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0009d	89 55 30	 mov	 DWORD PTR _source_ptr$[ebp], edx

; 1027 : 
; 1028 : 	destination_line_ptr = destination_ptr;

  000a0	8b 45 34	 mov	 eax, DWORD PTR _destination_ptr$[ebp]
  000a3	89 45 cc	 mov	 DWORD PTR _destination_line_ptr$[ebp], eax

; 1029 : 
; 1030 : 	source_x_error = 0;

  000a6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _source_x_error$[ebp], 0

; 1031 : 
; 1032 : 	for (destination_y_loop = 0; destination_y_loop < destination_y_delta; destination_y_loop ++)

  000ad	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _destination_y_loop$[ebp], 0
  000b4	eb 09		 jmp	 SHORT $LN4@ui_draw_sc
$LN2@ui_draw_sc:
  000b6	8b 45 d0	 mov	 eax, DWORD PTR _destination_y_loop$[ebp]
  000b9	83 c0 01	 add	 eax, 1
  000bc	89 45 d0	 mov	 DWORD PTR _destination_y_loop$[ebp], eax
$LN4@ui_draw_sc:
  000bf	8b 45 d0	 mov	 eax, DWORD PTR _destination_y_loop$[ebp]
  000c2	3b 45 d8	 cmp	 eax, DWORD PTR _destination_y_delta$[ebp]
  000c5	0f 8d a4 00 00
	00		 jge	 $LN1@ui_draw_sc

; 1033 : 	{
; 1034 : 
; 1035 : 		source_line_ptr = source_ptr + ((source_y_counter >> 16) * source_pitch);

  000cb	8b 45 ec	 mov	 eax, DWORD PTR _source_y_counter$[ebp]
  000ce	c1 f8 10	 sar	 eax, 16			; 00000010H
  000d1	0f af 45 18	 imul	 eax, DWORD PTR _source_pitch$[ebp]
  000d5	8b 4d 30	 mov	 ecx, DWORD PTR _source_ptr$[ebp]
  000d8	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  000db	89 55 c8	 mov	 DWORD PTR _source_line_ptr$[ebp], edx

; 1036 : 
; 1037 : 		source_x_counter = 0;

  000de	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _source_x_counter$[ebp], 0

; 1038 : 		
; 1039 : 		for (destination_x_loop = 0; destination_x_loop < destination_x_delta; destination_x_loop ++)

  000e5	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _destination_x_loop$[ebp], 0
  000ec	eb 09		 jmp	 SHORT $LN7@ui_draw_sc
$LN5@ui_draw_sc:
  000ee	8b 45 d4	 mov	 eax, DWORD PTR _destination_x_loop$[ebp]
  000f1	83 c0 01	 add	 eax, 1
  000f4	89 45 d4	 mov	 DWORD PTR _destination_x_loop$[ebp], eax
$LN7@ui_draw_sc:
  000f7	8b 45 d4	 mov	 eax, DWORD PTR _destination_x_loop$[ebp]
  000fa	3b 45 dc	 cmp	 eax, DWORD PTR _destination_x_delta$[ebp]
  000fd	7d 53		 jge	 SHORT $LN6@ui_draw_sc

; 1040 : 		{
; 1041 : 
; 1042 : 			if (*source_line_ptr)

  000ff	8b 45 c8	 mov	 eax, DWORD PTR _source_line_ptr$[ebp]
  00102	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00105	85 c9		 test	 ecx, ecx
  00107	74 0c		 je	 SHORT $LN8@ui_draw_sc

; 1043 : 			{
; 1044 : 
; 1045 : 				*destination_line_ptr = *source_line_ptr;

  00109	8b 45 cc	 mov	 eax, DWORD PTR _destination_line_ptr$[ebp]
  0010c	8b 4d c8	 mov	 ecx, DWORD PTR _source_line_ptr$[ebp]
  0010f	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00112	66 89 10	 mov	 WORD PTR [eax], dx
$LN8@ui_draw_sc:

; 1046 : 			}
; 1047 : 
; 1048 : 			destination_line_ptr ++;

  00115	8b 45 cc	 mov	 eax, DWORD PTR _destination_line_ptr$[ebp]
  00118	83 c0 02	 add	 eax, 2
  0011b	89 45 cc	 mov	 DWORD PTR _destination_line_ptr$[ebp], eax

; 1049 : 
; 1050 : 			source_line_ptr += source_x_inc_whole;

  0011e	8b 45 f4	 mov	 eax, DWORD PTR _source_x_inc_whole$[ebp]
  00121	8b 4d c8	 mov	 ecx, DWORD PTR _source_line_ptr$[ebp]
  00124	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00127	89 55 c8	 mov	 DWORD PTR _source_line_ptr$[ebp], edx

; 1051 : 
; 1052 : 			source_x_error += source_x_inc_frac;

  0012a	8b 45 fc	 mov	 eax, DWORD PTR _source_x_error$[ebp]
  0012d	03 45 f8	 add	 eax, DWORD PTR _source_x_inc_frac$[ebp]
  00130	89 45 fc	 mov	 DWORD PTR _source_x_error$[ebp], eax

; 1053 : 
; 1054 : 			if (source_x_error >= 1 << 16)

  00133	81 7d fc 00 00
	01 00		 cmp	 DWORD PTR _source_x_error$[ebp], 65536 ; 00010000H
  0013a	7c 14		 jl	 SHORT $LN9@ui_draw_sc

; 1055 : 			{
; 1056 : 
; 1057 : 				source_x_error -= 1 << 16;

  0013c	8b 45 fc	 mov	 eax, DWORD PTR _source_x_error$[ebp]
  0013f	2d 00 00 01 00	 sub	 eax, 65536		; 00010000H
  00144	89 45 fc	 mov	 DWORD PTR _source_x_error$[ebp], eax

; 1058 : 
; 1059 : 				source_line_ptr ++;

  00147	8b 45 c8	 mov	 eax, DWORD PTR _source_line_ptr$[ebp]
  0014a	83 c0 02	 add	 eax, 2
  0014d	89 45 c8	 mov	 DWORD PTR _source_line_ptr$[ebp], eax
$LN9@ui_draw_sc:

; 1060 : 			}
; 1061 : 		}

  00150	eb 9c		 jmp	 SHORT $LN5@ui_draw_sc
$LN6@ui_draw_sc:

; 1062 : 
; 1063 : 		destination_line_ptr += destination_pitch - destination_x_loop;

  00152	8b 45 2c	 mov	 eax, DWORD PTR _destination_pitch$[ebp]
  00155	2b 45 d4	 sub	 eax, DWORD PTR _destination_x_loop$[ebp]
  00158	8b 4d cc	 mov	 ecx, DWORD PTR _destination_line_ptr$[ebp]
  0015b	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0015e	89 55 cc	 mov	 DWORD PTR _destination_line_ptr$[ebp], edx

; 1064 : 
; 1065 : 		source_y_counter += source_y_inc;

  00161	8b 45 ec	 mov	 eax, DWORD PTR _source_y_counter$[ebp]
  00164	03 45 e8	 add	 eax, DWORD PTR _source_y_inc$[ebp]
  00167	89 45 ec	 mov	 DWORD PTR _source_y_counter$[ebp], eax

; 1066 : 	}

  0016a	e9 47 ff ff ff	 jmp	 $LN2@ui_draw_sc
$LN1@ui_draw_sc:

; 1067 : }

  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi
  00171	5b		 pop	 ebx
  00172	8b e5		 mov	 esp, ebp
  00174	5d		 pop	 ebp
  00175	c2 30 00	 ret	 48			; 00000030H
?ui_draw_scaled_masked_graphic@@YGXHHHHHHHHHHPAG0@Z ENDP ; ui_draw_scaled_masked_graphic
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_draw\uigraph.c
;	COMDAT ?ui_draw_scaled_graphic@@YGXHHHHHHHHHHPAG0@Z
_TEXT	SEGMENT
_source_line_ptr$ = -56					; size = 4
_destination_line_ptr$ = -52				; size = 4
_destination_y_loop$ = -48				; size = 4
_destination_x_loop$ = -44				; size = 4
_destination_y_delta$ = -40				; size = 4
_destination_x_delta$ = -36				; size = 4
_source_y_delta$ = -32					; size = 4
_source_x_delta$ = -28					; size = 4
_source_y_inc$ = -24					; size = 4
_source_y_counter$ = -20				; size = 4
_source_x_counter$ = -16				; size = 4
_source_x_inc_whole$ = -12				; size = 4
_source_x_inc_frac$ = -8				; size = 4
_source_x_error$ = -4					; size = 4
_source_x1$ = 8						; size = 4
_source_y1$ = 12					; size = 4
_source_x2$ = 16					; size = 4
_source_y2$ = 20					; size = 4
_source_pitch$ = 24					; size = 4
_destination_x1$ = 28					; size = 4
_destination_y1$ = 32					; size = 4
_destination_x2$ = 36					; size = 4
_destination_y2$ = 40					; size = 4
_destination_pitch$ = 44				; size = 4
_source_ptr$ = 48					; size = 4
_destination_ptr$ = 52					; size = 4
?ui_draw_scaled_graphic@@YGXHHHHHHHHHHPAG0@Z PROC	; ui_draw_scaled_graphic, COMDAT

; 904  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 905  : 
; 906  : 	int
; 907  : 		source_x_error,
; 908  : 		source_x_inc_frac,
; 909  : 		source_x_inc_whole,
; 910  : 		source_x_counter = 0,

  00009	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _source_x_counter$[ebp], 0

; 911  : 		source_y_counter = 0,

  00010	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _source_y_counter$[ebp], 0

; 912  : 		source_y_inc,
; 913  : 		source_x_delta,
; 914  : 		source_y_delta,
; 915  : 		destination_x_delta,
; 916  : 		destination_y_delta;
; 917  : 
; 918  : 	int
; 919  : 		destination_x_loop,
; 920  : 		destination_y_loop;
; 921  : 
; 922  : 	unsigned short int
; 923  : 		*destination_line_ptr,
; 924  : 		*source_line_ptr;
; 925  : 
; 926  : 	destination_pitch = destination_pitch >> 1;

  00017	8b 45 2c	 mov	 eax, DWORD PTR _destination_pitch$[ebp]
  0001a	d1 f8		 sar	 eax, 1
  0001c	89 45 2c	 mov	 DWORD PTR _destination_pitch$[ebp], eax

; 927  : 	source_pitch = source_pitch >> 1;

  0001f	8b 45 18	 mov	 eax, DWORD PTR _source_pitch$[ebp]
  00022	d1 f8		 sar	 eax, 1
  00024	89 45 18	 mov	 DWORD PTR _source_pitch$[ebp], eax

; 928  : 
; 929  : 	source_x_delta = source_x2 - source_x1;

  00027	8b 45 10	 mov	 eax, DWORD PTR _source_x2$[ebp]
  0002a	2b 45 08	 sub	 eax, DWORD PTR _source_x1$[ebp]
  0002d	89 45 e4	 mov	 DWORD PTR _source_x_delta$[ebp], eax

; 930  : 	source_y_delta = source_y2 - source_y1;

  00030	8b 45 14	 mov	 eax, DWORD PTR _source_y2$[ebp]
  00033	2b 45 0c	 sub	 eax, DWORD PTR _source_y1$[ebp]
  00036	89 45 e0	 mov	 DWORD PTR _source_y_delta$[ebp], eax

; 931  : 
; 932  : 	destination_x_delta = destination_x2 - destination_x1;

  00039	8b 45 24	 mov	 eax, DWORD PTR _destination_x2$[ebp]
  0003c	2b 45 1c	 sub	 eax, DWORD PTR _destination_x1$[ebp]
  0003f	89 45 dc	 mov	 DWORD PTR _destination_x_delta$[ebp], eax

; 933  : 	destination_y_delta = destination_y2 - destination_y1;

  00042	8b 45 28	 mov	 eax, DWORD PTR _destination_y2$[ebp]
  00045	2b 45 20	 sub	 eax, DWORD PTR _destination_y1$[ebp]
  00048	89 45 d8	 mov	 DWORD PTR _destination_y_delta$[ebp], eax

; 934  : 
; 935  : 	source_x_inc_frac = ((source_x_delta << 16) / destination_x_delta) & 0xFFFF;

  0004b	8b 45 e4	 mov	 eax, DWORD PTR _source_x_delta$[ebp]
  0004e	c1 e0 10	 shl	 eax, 16			; 00000010H
  00051	99		 cdq
  00052	f7 7d dc	 idiv	 DWORD PTR _destination_x_delta$[ebp]
  00055	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0005a	89 45 f8	 mov	 DWORD PTR _source_x_inc_frac$[ebp], eax

; 936  : 	source_x_inc_whole = ((source_x_delta << 16) / destination_x_delta) >> 16;

  0005d	8b 45 e4	 mov	 eax, DWORD PTR _source_x_delta$[ebp]
  00060	c1 e0 10	 shl	 eax, 16			; 00000010H
  00063	99		 cdq
  00064	f7 7d dc	 idiv	 DWORD PTR _destination_x_delta$[ebp]
  00067	c1 f8 10	 sar	 eax, 16			; 00000010H
  0006a	89 45 f4	 mov	 DWORD PTR _source_x_inc_whole$[ebp], eax

; 937  : 
; 938  : 	source_y_inc = (source_y_delta << 16) / destination_y_delta;

  0006d	8b 45 e0	 mov	 eax, DWORD PTR _source_y_delta$[ebp]
  00070	c1 e0 10	 shl	 eax, 16			; 00000010H
  00073	99		 cdq
  00074	f7 7d d8	 idiv	 DWORD PTR _destination_y_delta$[ebp]
  00077	89 45 e8	 mov	 DWORD PTR _source_y_inc$[ebp], eax

; 939  : 
; 940  : 	destination_ptr += (destination_x1 + (destination_y1 * destination_pitch));

  0007a	8b 45 20	 mov	 eax, DWORD PTR _destination_y1$[ebp]
  0007d	0f af 45 2c	 imul	 eax, DWORD PTR _destination_pitch$[ebp]
  00081	03 45 1c	 add	 eax, DWORD PTR _destination_x1$[ebp]
  00084	8b 4d 34	 mov	 ecx, DWORD PTR _destination_ptr$[ebp]
  00087	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0008a	89 55 34	 mov	 DWORD PTR _destination_ptr$[ebp], edx

; 941  : 
; 942  : 	source_ptr += (source_x1 + (source_y1 * source_pitch));

  0008d	8b 45 0c	 mov	 eax, DWORD PTR _source_y1$[ebp]
  00090	0f af 45 18	 imul	 eax, DWORD PTR _source_pitch$[ebp]
  00094	03 45 08	 add	 eax, DWORD PTR _source_x1$[ebp]
  00097	8b 4d 30	 mov	 ecx, DWORD PTR _source_ptr$[ebp]
  0009a	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0009d	89 55 30	 mov	 DWORD PTR _source_ptr$[ebp], edx

; 943  : 
; 944  : 	destination_line_ptr = destination_ptr;

  000a0	8b 45 34	 mov	 eax, DWORD PTR _destination_ptr$[ebp]
  000a3	89 45 cc	 mov	 DWORD PTR _destination_line_ptr$[ebp], eax

; 945  : 
; 946  : 	source_x_error = 0;

  000a6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _source_x_error$[ebp], 0

; 947  : 
; 948  : 	for (destination_y_loop = 0; destination_y_loop < destination_y_delta; destination_y_loop ++)

  000ad	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _destination_y_loop$[ebp], 0
  000b4	eb 09		 jmp	 SHORT $LN4@ui_draw_sc
$LN2@ui_draw_sc:
  000b6	8b 45 d0	 mov	 eax, DWORD PTR _destination_y_loop$[ebp]
  000b9	83 c0 01	 add	 eax, 1
  000bc	89 45 d0	 mov	 DWORD PTR _destination_y_loop$[ebp], eax
$LN4@ui_draw_sc:
  000bf	8b 45 d0	 mov	 eax, DWORD PTR _destination_y_loop$[ebp]
  000c2	3b 45 d8	 cmp	 eax, DWORD PTR _destination_y_delta$[ebp]
  000c5	0f 8d 9a 00 00
	00		 jge	 $LN1@ui_draw_sc

; 949  : 	{
; 950  : 
; 951  : 		source_line_ptr = source_ptr + ((source_y_counter >> 16) * source_pitch);

  000cb	8b 45 ec	 mov	 eax, DWORD PTR _source_y_counter$[ebp]
  000ce	c1 f8 10	 sar	 eax, 16			; 00000010H
  000d1	0f af 45 18	 imul	 eax, DWORD PTR _source_pitch$[ebp]
  000d5	8b 4d 30	 mov	 ecx, DWORD PTR _source_ptr$[ebp]
  000d8	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  000db	89 55 c8	 mov	 DWORD PTR _source_line_ptr$[ebp], edx

; 952  : 
; 953  : 		source_x_counter = 0;

  000de	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _source_x_counter$[ebp], 0

; 954  : 		
; 955  : 		for (destination_x_loop = 0; destination_x_loop < destination_x_delta; destination_x_loop ++)

  000e5	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _destination_x_loop$[ebp], 0
  000ec	eb 09		 jmp	 SHORT $LN7@ui_draw_sc
$LN5@ui_draw_sc:
  000ee	8b 45 d4	 mov	 eax, DWORD PTR _destination_x_loop$[ebp]
  000f1	83 c0 01	 add	 eax, 1
  000f4	89 45 d4	 mov	 DWORD PTR _destination_x_loop$[ebp], eax
$LN7@ui_draw_sc:
  000f7	8b 45 d4	 mov	 eax, DWORD PTR _destination_x_loop$[ebp]
  000fa	3b 45 dc	 cmp	 eax, DWORD PTR _destination_x_delta$[ebp]
  000fd	7d 49		 jge	 SHORT $LN6@ui_draw_sc

; 956  : 		{
; 957  : 
; 958  : 			*destination_line_ptr ++ = *source_line_ptr;

  000ff	8b 45 cc	 mov	 eax, DWORD PTR _destination_line_ptr$[ebp]
  00102	8b 4d c8	 mov	 ecx, DWORD PTR _source_line_ptr$[ebp]
  00105	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00108	66 89 10	 mov	 WORD PTR [eax], dx
  0010b	8b 45 cc	 mov	 eax, DWORD PTR _destination_line_ptr$[ebp]
  0010e	83 c0 02	 add	 eax, 2
  00111	89 45 cc	 mov	 DWORD PTR _destination_line_ptr$[ebp], eax

; 959  : 
; 960  : 			source_line_ptr += source_x_inc_whole;

  00114	8b 45 f4	 mov	 eax, DWORD PTR _source_x_inc_whole$[ebp]
  00117	8b 4d c8	 mov	 ecx, DWORD PTR _source_line_ptr$[ebp]
  0011a	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0011d	89 55 c8	 mov	 DWORD PTR _source_line_ptr$[ebp], edx

; 961  : 
; 962  : 			source_x_error += source_x_inc_frac;

  00120	8b 45 fc	 mov	 eax, DWORD PTR _source_x_error$[ebp]
  00123	03 45 f8	 add	 eax, DWORD PTR _source_x_inc_frac$[ebp]
  00126	89 45 fc	 mov	 DWORD PTR _source_x_error$[ebp], eax

; 963  : 
; 964  : 			if (source_x_error >= 1 << 16)

  00129	81 7d fc 00 00
	01 00		 cmp	 DWORD PTR _source_x_error$[ebp], 65536 ; 00010000H
  00130	7c 14		 jl	 SHORT $LN8@ui_draw_sc

; 965  : 			{
; 966  : 
; 967  : 				source_x_error -= 1 << 16;

  00132	8b 45 fc	 mov	 eax, DWORD PTR _source_x_error$[ebp]
  00135	2d 00 00 01 00	 sub	 eax, 65536		; 00010000H
  0013a	89 45 fc	 mov	 DWORD PTR _source_x_error$[ebp], eax

; 968  : 
; 969  : 				source_line_ptr ++;

  0013d	8b 45 c8	 mov	 eax, DWORD PTR _source_line_ptr$[ebp]
  00140	83 c0 02	 add	 eax, 2
  00143	89 45 c8	 mov	 DWORD PTR _source_line_ptr$[ebp], eax
$LN8@ui_draw_sc:

; 970  : 			}
; 971  : 		}

  00146	eb a6		 jmp	 SHORT $LN5@ui_draw_sc
$LN6@ui_draw_sc:

; 972  : 
; 973  : 		destination_line_ptr += destination_pitch - destination_x_loop;

  00148	8b 45 2c	 mov	 eax, DWORD PTR _destination_pitch$[ebp]
  0014b	2b 45 d4	 sub	 eax, DWORD PTR _destination_x_loop$[ebp]
  0014e	8b 4d cc	 mov	 ecx, DWORD PTR _destination_line_ptr$[ebp]
  00151	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00154	89 55 cc	 mov	 DWORD PTR _destination_line_ptr$[ebp], edx

; 974  : 
; 975  : 		source_y_counter += source_y_inc;

  00157	8b 45 ec	 mov	 eax, DWORD PTR _source_y_counter$[ebp]
  0015a	03 45 e8	 add	 eax, DWORD PTR _source_y_inc$[ebp]
  0015d	89 45 ec	 mov	 DWORD PTR _source_y_counter$[ebp], eax

; 976  : 	}

  00160	e9 51 ff ff ff	 jmp	 $LN2@ui_draw_sc
$LN1@ui_draw_sc:

; 977  : }

  00165	5f		 pop	 edi
  00166	5e		 pop	 esi
  00167	5b		 pop	 ebx
  00168	8b e5		 mov	 esp, ebp
  0016a	5d		 pop	 ebp
  0016b	c2 30 00	 ret	 48			; 00000030H
?ui_draw_scaled_graphic@@YGXHHHHHHHHHHPAG0@Z ENDP	; ui_draw_scaled_graphic
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_draw\uigraph.c
;	COMDAT ?ui_draw_part_alpha_graphic@@YGXMMMMHHPAG@Z
_TEXT	SEGMENT
$T1 = -148						; size = 4
$T2 = -144						; size = 4
_int_y2$ = -76						; size = 4
_int_x2$ = -72						; size = 4
_int_y1$ = -68						; size = 4
_int_x1$ = -64						; size = 4
_y_start_int$ = -60					; size = 4
_x_start_int$ = -56					; size = 4
_new_y2$ = -52						; size = 4
_new_x2$ = -48						; size = 4
_new_y1$ = -44						; size = 4
_new_x1$ = -40						; size = 4
_y_start$ = -36						; size = 4
_x_start$ = -32						; size = 4
_loop_y$ = -28						; size = 4
_clip_x_size$ = -24					; size = 4
_screen_pitch$ = -20					; size = 4
_int_y_size$ = -16					; size = 4
_screen_ptr$ = -12					; size = 4
_graphic_y$ = -8					; size = 2
_graphic_x$ = -4					; size = 2
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
_start_x$ = 24						; size = 4
_start_y$ = 28						; size = 4
_graphic$ = 32						; size = 4
?ui_draw_part_alpha_graphic@@YGXMMMMHHPAG@Z PROC	; ui_draw_part_alpha_graphic, COMDAT

; 775  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 776  : 
; 777  : 	unsigned short int
; 778  : 		graphic_x,
; 779  : 		graphic_y,
; 780  : 		*screen_ptr;
; 781  : 
; 782  : 	int
; 783  : 		int_y_size,
; 784  : 		screen_pitch,
; 785  : 		clip_x_size,
; 786  : 		loop_y;
; 787  : 
; 788  : 	float
; 789  : 		x_start,
; 790  : 		y_start,
; 791  : 		new_x1,
; 792  : 		new_y1,
; 793  : 		new_x2,
; 794  : 		new_y2;
; 795  : 
; 796  : 	int
; 797  : 		x_start_int,
; 798  : 		y_start_int,
; 799  : 		int_x1,
; 800  : 		int_y1,
; 801  : 		int_x2,
; 802  : 		int_y2;
; 803  : 
; 804  : 	new_x1 = x1;

  0000c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00011	f3 0f 11 45 d8	 movss	 DWORD PTR _new_x1$[ebp], xmm0

; 805  : 
; 806  : 	new_y1 = y1;

  00016	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0001b	f3 0f 11 45 d4	 movss	 DWORD PTR _new_y1$[ebp], xmm0

; 807  : 
; 808  : 	new_x2 = x2;

  00020	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00025	f3 0f 11 45 d0	 movss	 DWORD PTR _new_x2$[ebp], xmm0

; 809  : 
; 810  : 	new_y2 = y2;

  0002a	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0002f	f3 0f 11 45 cc	 movss	 DWORD PTR _new_y2$[ebp], xmm0

; 811  : 
; 812  : 	//debug_log ("UIGRAPH: part alpha graphic %f, %f -> %f, %f", x1, y1, x2, y2);
; 813  : 
; 814  : 	// clip area to ui viewport
; 815  : 
; 816  : 	ui_clip_area (&new_x1, &new_y1, &new_x2, &new_y2);

  00034	8d 45 cc	 lea	 eax, DWORD PTR _new_y2$[ebp]
  00037	50		 push	 eax
  00038	8d 4d d0	 lea	 ecx, DWORD PTR _new_x2$[ebp]
  0003b	51		 push	 ecx
  0003c	8d 55 d4	 lea	 edx, DWORD PTR _new_y1$[ebp]
  0003f	52		 push	 edx
  00040	8d 45 d8	 lea	 eax, DWORD PTR _new_x1$[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?ui_clip_area@@YGHPAM000@Z ; ui_clip_area

; 817  : 
; 818  : 	x_start = new_x1 - x1;

  00049	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _new_x1$[ebp]
  0004e	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x1$[ebp]
  00053	f3 0f 11 45 e0	 movss	 DWORD PTR _x_start$[ebp], xmm0

; 819  : 
; 820  : 	y_start = new_y1 - y1;

  00058	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _new_y1$[ebp]
  0005d	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _y1$[ebp]
  00062	f3 0f 11 45 dc	 movss	 DWORD PTR _y_start$[ebp], xmm0

; 821  : 
; 822  : 	// button coords should be in viewport coords,
; 823  : 	// so add ui_origin to convert into screen coords
; 824  : 
; 825  : 	x1 += ui_x_origin;

  00067	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0006c	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_x_origin@@3MA
  00074	f3 0f 11 45 08	 movss	 DWORD PTR _x1$[ebp], xmm0

; 826  : 
; 827  : 	y1 += ui_y_origin;

  00079	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0007e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_y_origin@@3MA
  00086	f3 0f 11 45 0c	 movss	 DWORD PTR _y1$[ebp], xmm0

; 828  : 
; 829  : 	x2 += ui_x_origin;

  0008b	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00090	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_x_origin@@3MA
  00098	f3 0f 11 45 10	 movss	 DWORD PTR _x2$[ebp], xmm0

; 830  : 
; 831  : 	y2 += ui_y_origin;

  0009d	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y2$[ebp]
  000a2	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_y_origin@@3MA
  000aa	f3 0f 11 45 14	 movss	 DWORD PTR _y2$[ebp], xmm0

; 832  : 
; 833  : 	new_x1 += ui_x_origin;

  000af	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _new_x1$[ebp]
  000b4	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_x_origin@@3MA
  000bc	f3 0f 11 45 d8	 movss	 DWORD PTR _new_x1$[ebp], xmm0

; 834  : 
; 835  : 	new_y1 += ui_y_origin;

  000c1	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _new_y1$[ebp]
  000c6	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_y_origin@@3MA
  000ce	f3 0f 11 45 d4	 movss	 DWORD PTR _new_y1$[ebp], xmm0

; 836  : 
; 837  : 	new_x2 += ui_x_origin;

  000d3	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _new_x2$[ebp]
  000d8	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_x_origin@@3MA
  000e0	f3 0f 11 45 d0	 movss	 DWORD PTR _new_x2$[ebp], xmm0

; 838  : 
; 839  : 	new_y2 += ui_y_origin;

  000e5	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _new_y2$[ebp]
  000ea	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_y_origin@@3MA
  000f2	f3 0f 11 45 cc	 movss	 DWORD PTR _new_y2$[ebp], xmm0

; 840  : 
; 841  : 	// check if possible to draw
; 842  : 
; 843  : 	if ((new_x2 - new_x1 < 2) || (new_y2 - new_y1 <= 2))

  000f7	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _new_x2$[ebp]
  000fc	f3 0f 5c 45 d8	 subss	 xmm0, DWORD PTR _new_x1$[ebp]
  00101	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  00109	0f 2f c8	 comiss	 xmm1, xmm0
  0010c	77 17		 ja	 SHORT $LN6@ui_draw_pa
  0010e	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _new_y2$[ebp]
  00113	f3 0f 5c 45 d4	 subss	 xmm0, DWORD PTR _new_y1$[ebp]
  00118	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  00120	0f 2f c8	 comiss	 xmm1, xmm0
  00123	72 05		 jb	 SHORT $LN5@ui_draw_pa
$LN6@ui_draw_pa:

; 844  : 	{
; 845  : 
; 846  : 		return;

  00125	e9 85 01 00 00	 jmp	 $LN1@ui_draw_pa
$LN5@ui_draw_pa:

; 847  : 	}
; 848  : 
; 849  : 	// convert variabless to ints to save crap conversion
; 850  : 
; 851  : 	convert_float_to_int (new_x1, &int_x1);

  0012a	8d 45 c0	 lea	 eax, DWORD PTR _int_x1$[ebp]
  0012d	50		 push	 eax
  0012e	51		 push	 ecx
  0012f	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _new_x1$[ebp]
  00134	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00139	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 852  : 	convert_float_to_int (new_y1, &int_y1);

  0013e	8d 45 bc	 lea	 eax, DWORD PTR _int_y1$[ebp]
  00141	50		 push	 eax
  00142	51		 push	 ecx
  00143	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _new_y1$[ebp]
  00148	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014d	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 853  : 	convert_float_to_int (new_x2, &int_x2);

  00152	8d 45 b8	 lea	 eax, DWORD PTR _int_x2$[ebp]
  00155	50		 push	 eax
  00156	51		 push	 ecx
  00157	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _new_x2$[ebp]
  0015c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00161	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 854  : 	convert_float_to_int (new_y2, &int_y2);

  00166	8d 45 b4	 lea	 eax, DWORD PTR _int_y2$[ebp]
  00169	50		 push	 eax
  0016a	51		 push	 ecx
  0016b	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _new_y2$[ebp]
  00170	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00175	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 855  : 	convert_float_to_int (x_start, &x_start_int);

  0017a	8d 45 c8	 lea	 eax, DWORD PTR _x_start_int$[ebp]
  0017d	50		 push	 eax
  0017e	51		 push	 ecx
  0017f	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x_start$[ebp]
  00184	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00189	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 856  : 	convert_float_to_int (y_start, &y_start_int);

  0018e	8d 45 c4	 lea	 eax, DWORD PTR _y_start_int$[ebp]
  00191	50		 push	 eax
  00192	51		 push	 ecx
  00193	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y_start$[ebp]
  00198	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019d	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 857  : 
; 858  : 	// draw graphic
; 859  : 
; 860  : 	graphic_x = *graphic ++;

  001a2	8b 45 20	 mov	 eax, DWORD PTR _graphic$[ebp]
  001a5	66 8b 08	 mov	 cx, WORD PTR [eax]
  001a8	66 89 4d fc	 mov	 WORD PTR _graphic_x$[ebp], cx
  001ac	8b 55 20	 mov	 edx, DWORD PTR _graphic$[ebp]
  001af	83 c2 02	 add	 edx, 2
  001b2	89 55 20	 mov	 DWORD PTR _graphic$[ebp], edx

; 861  : 
; 862  : 	graphic_y = *graphic ++;

  001b5	8b 45 20	 mov	 eax, DWORD PTR _graphic$[ebp]
  001b8	66 8b 08	 mov	 cx, WORD PTR [eax]
  001bb	66 89 4d f8	 mov	 WORD PTR _graphic_y$[ebp], cx
  001bf	8b 55 20	 mov	 edx, DWORD PTR _graphic$[ebp]
  001c2	83 c2 02	 add	 edx, 2
  001c5	89 55 20	 mov	 DWORD PTR _graphic$[ebp], edx

; 863  : 
; 864  : 	graphic += (start_y + y_start_int) * graphic_x + x_start_int + start_x;

  001c8	8b 45 1c	 mov	 eax, DWORD PTR _start_y$[ebp]
  001cb	03 45 c4	 add	 eax, DWORD PTR _y_start_int$[ebp]
  001ce	0f b7 4d fc	 movzx	 ecx, WORD PTR _graphic_x$[ebp]
  001d2	0f af c1	 imul	 eax, ecx
  001d5	03 45 c8	 add	 eax, DWORD PTR _x_start_int$[ebp]
  001d8	03 45 18	 add	 eax, DWORD PTR _start_x$[ebp]
  001db	8b 55 20	 mov	 edx, DWORD PTR _graphic$[ebp]
  001de	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  001e1	89 45 20	 mov	 DWORD PTR _graphic$[ebp], eax

; 865  : 
; 866  : 	clip_x_size = int_x2 - int_x1 + 1;

  001e4	8b 45 b8	 mov	 eax, DWORD PTR _int_x2$[ebp]
  001e7	2b 45 c0	 sub	 eax, DWORD PTR _int_x1$[ebp]
  001ea	83 c0 01	 add	 eax, 1
  001ed	89 45 e8	 mov	 DWORD PTR _clip_x_size$[ebp], eax

; 867  : 
; 868  : 	screen_ptr = (unsigned short int *) get_screen_data (active_screen);

  001f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  001f5	50		 push	 eax
  001f6	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  001fb	89 45 f4	 mov	 DWORD PTR _screen_ptr$[ebp], eax

; 869  : 
; 870  : 	screen_pitch = get_screen_pitch (active_screen);

  001fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00203	50		 push	 eax
  00204	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  00209	89 45 ec	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 871  : 
; 872  : 	screen_pitch = screen_pitch >> 1;

  0020c	8b 45 ec	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  0020f	d1 f8		 sar	 eax, 1
  00211	89 45 ec	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 873  : 
; 874  : 	screen_ptr += screen_pitch * int_y1;

  00214	8b 45 ec	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  00217	0f af 45 bc	 imul	 eax, DWORD PTR _int_y1$[ebp]
  0021b	8b 4d f4	 mov	 ecx, DWORD PTR _screen_ptr$[ebp]
  0021e	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00221	89 55 f4	 mov	 DWORD PTR _screen_ptr$[ebp], edx

; 875  : 
; 876  : 	screen_ptr += int_x1;

  00224	8b 45 c0	 mov	 eax, DWORD PTR _int_x1$[ebp]
  00227	8b 4d f4	 mov	 ecx, DWORD PTR _screen_ptr$[ebp]
  0022a	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0022d	89 55 f4	 mov	 DWORD PTR _screen_ptr$[ebp], edx

; 877  : 
; 878  : 	// which ever is smaller, area or graphic
; 879  : 
; 880  : 	int_y_size = min (int_y2 - int_y1, (int) graphic_y);

  00230	0f b7 45 f8	 movzx	 eax, WORD PTR _graphic_y$[ebp]
  00234	89 85 70 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0023a	8b 4d b4	 mov	 ecx, DWORD PTR _int_y2$[ebp]
  0023d	2b 4d bc	 sub	 ecx, DWORD PTR _int_y1$[ebp]
  00240	89 8d 6c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00246	8d 95 70 ff ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  0024c	52		 push	 edx
  0024d	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00253	50		 push	 eax
  00254	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  00259	8b 08		 mov	 ecx, DWORD PTR [eax]
  0025b	89 4d f0	 mov	 DWORD PTR _int_y_size$[ebp], ecx

; 881  : 
; 882  : 	clip_x_size *= sizeof (short int);

  0025e	8b 45 e8	 mov	 eax, DWORD PTR _clip_x_size$[ebp]
  00261	d1 e0		 shl	 eax, 1
  00263	89 45 e8	 mov	 DWORD PTR _clip_x_size$[ebp], eax

; 883  : 
; 884  : 	for (loop_y = 0; loop_y <= int_y_size; loop_y ++)

  00266	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _loop_y$[ebp], 0
  0026d	eb 09		 jmp	 SHORT $LN4@ui_draw_pa
$LN2@ui_draw_pa:
  0026f	8b 45 e4	 mov	 eax, DWORD PTR _loop_y$[ebp]
  00272	83 c0 01	 add	 eax, 1
  00275	89 45 e4	 mov	 DWORD PTR _loop_y$[ebp], eax
$LN4@ui_draw_pa:
  00278	8b 45 e4	 mov	 eax, DWORD PTR _loop_y$[ebp]
  0027b	3b 45 f0	 cmp	 eax, DWORD PTR _int_y_size$[ebp]
  0027e	7f 2f		 jg	 SHORT $LN3@ui_draw_pa

; 885  : 	{
; 886  : 
; 887  : 		memcpy (screen_ptr, graphic, clip_x_size);

  00280	8b 45 e8	 mov	 eax, DWORD PTR _clip_x_size$[ebp]
  00283	50		 push	 eax
  00284	8b 4d 20	 mov	 ecx, DWORD PTR _graphic$[ebp]
  00287	51		 push	 ecx
  00288	8b 55 f4	 mov	 edx, DWORD PTR _screen_ptr$[ebp]
  0028b	52		 push	 edx
  0028c	e8 00 00 00 00	 call	 _memcpy
  00291	83 c4 0c	 add	 esp, 12			; 0000000cH

; 888  : 
; 889  : 		screen_ptr += screen_pitch;

  00294	8b 45 ec	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  00297	8b 4d f4	 mov	 ecx, DWORD PTR _screen_ptr$[ebp]
  0029a	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0029d	89 55 f4	 mov	 DWORD PTR _screen_ptr$[ebp], edx

; 890  : 
; 891  : 		graphic += graphic_x;

  002a0	0f b7 45 fc	 movzx	 eax, WORD PTR _graphic_x$[ebp]
  002a4	8b 4d 20	 mov	 ecx, DWORD PTR _graphic$[ebp]
  002a7	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  002aa	89 55 20	 mov	 DWORD PTR _graphic$[ebp], edx

; 892  : 	}

  002ad	eb c0		 jmp	 SHORT $LN2@ui_draw_pa
$LN3@ui_draw_pa:
$LN1@ui_draw_pa:

; 893  : }

  002af	5f		 pop	 edi
  002b0	5e		 pop	 esi
  002b1	5b		 pop	 ebx
  002b2	8b e5		 mov	 esp, ebp
  002b4	5d		 pop	 ebp
  002b5	c2 1c 00	 ret	 28			; 0000001cH
?ui_draw_part_alpha_graphic@@YGXMMMMHHPAG@Z ENDP	; ui_draw_part_alpha_graphic
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_draw\uigraph.c
;	COMDAT ?ui_draw_alpha_graphic@@YGXMMMMPAG@Z
_TEXT	SEGMENT
$T1 = -160						; size = 4
$T2 = -156						; size = 4
_ib$3 = -88						; size = 4
_ig$4 = -84						; size = 4
_ir$5 = -80						; size = 4
_alpha_factor$6 = -76					; size = 4
_db$7 = -72						; size = 4
_dg$8 = -68						; size = 4
_dr$9 = -64						; size = 4
_result_colour$10 = -60					; size = 4
_pixel_colour$11 = -56					; size = 4
_this_colour$12 = -52					; size = 4
_line_ptr$13 = -48					; size = 4
_loop_width$14 = -44					; size = 4
_this_image_ptr$ = -40					; size = 4
_screen_ptr$ = -36					; size = 4
_this_alpha_ptr$ = -32					; size = 4
_loop_height$ = -28					; size = 4
_image_pitch$ = -24					; size = 4
_pitch$ = -20						; size = 4
_int_height$ = -16					; size = 4
_int_width$ = -12					; size = 4
_int_y$ = -8						; size = 4
_int_x$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
_graphic$ = 24						; size = 4
?ui_draw_alpha_graphic@@YGXMMMMPAG@Z PROC		; ui_draw_alpha_graphic, COMDAT

; 631  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 632  : 
; 633  : 	int
; 634  : 		int_x,
; 635  : 		int_y,
; 636  : 		int_width,
; 637  : 		int_height;
; 638  : 
; 639  : 	int
; 640  : 		pitch,
; 641  : 		image_pitch,
; 642  : 		loop_height;
; 643  : 
; 644  : 	unsigned char
; 645  : 		*this_alpha_ptr;
; 646  : 
; 647  : 	unsigned short int
; 648  : 		*screen_ptr,
; 649  : 		*this_image_ptr;
; 650  : 
; 651  : 	ASSERT ( get_screen_pixel_width ( active_screen ) == 2 );

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?get_screen_pixel_width@@YGHPAUSCREEN@@@Z ; get_screen_pixel_width
  00017	83 f8 02	 cmp	 eax, 2
  0001a	74 18		 je	 SHORT $LN8@ui_draw_al
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??ui_draw_alpha_graphic@@YGXMMMMPAG@Z@4JA
  00021	83 c0 14	 add	 eax, 20			; 00000014H
  00024	50		 push	 eax
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@DLDDNMKJ@c?3?2users?2nhv90?2projects?2eech?2mo@
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@EDGFEILM@get_screen_pixel_width?5?$CI?5active@
  0002f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@ui_draw_al:

; 652  : 
; 653  : 
; 654  : 	//
; 655  : 	// store some variables in alternative types for speed
; 656  : 	//
; 657  : 
; 658  : 	//debug_log ("UIGRAPH: alpha graphic %f, %f -> %f, %f", x1, y1, x2, y2);
; 659  : 
; 660  : 	int_width = *graphic ++;

  00034	8b 45 18	 mov	 eax, DWORD PTR _graphic$[ebp]
  00037	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0003a	89 4d f4	 mov	 DWORD PTR _int_width$[ebp], ecx
  0003d	8b 55 18	 mov	 edx, DWORD PTR _graphic$[ebp]
  00040	83 c2 02	 add	 edx, 2
  00043	89 55 18	 mov	 DWORD PTR _graphic$[ebp], edx

; 661  : 
; 662  : 	int_height = *graphic ++;

  00046	8b 45 18	 mov	 eax, DWORD PTR _graphic$[ebp]
  00049	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0004c	89 4d f0	 mov	 DWORD PTR _int_height$[ebp], ecx
  0004f	8b 55 18	 mov	 edx, DWORD PTR _graphic$[ebp]
  00052	83 c2 02	 add	 edx, 2
  00055	89 55 18	 mov	 DWORD PTR _graphic$[ebp], edx

; 663  : 
; 664  : 	image_pitch = int_width;

  00058	8b 45 f4	 mov	 eax, DWORD PTR _int_width$[ebp]
  0005b	89 45 e8	 mov	 DWORD PTR _image_pitch$[ebp], eax

; 665  : 
; 666  : 	this_image_ptr = graphic;

  0005e	8b 45 18	 mov	 eax, DWORD PTR _graphic$[ebp]
  00061	89 45 d8	 mov	 DWORD PTR _this_image_ptr$[ebp], eax

; 667  : 
; 668  : 	this_alpha_ptr = (unsigned char *) (graphic + (int_width * int_height));

  00064	8b 45 f4	 mov	 eax, DWORD PTR _int_width$[ebp]
  00067	0f af 45 f0	 imul	 eax, DWORD PTR _int_height$[ebp]
  0006b	8b 4d 18	 mov	 ecx, DWORD PTR _graphic$[ebp]
  0006e	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00071	89 55 e0	 mov	 DWORD PTR _this_alpha_ptr$[ebp], edx

; 669  : 
; 670  : 	//
; 671  : 	// 
; 672  : 	//
; 673  : 
; 674  : 	pitch = get_screen_pitch (active_screen) / 2;

  00074	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  0007f	99		 cdq
  00080	2b c2		 sub	 eax, edx
  00082	d1 f8		 sar	 eax, 1
  00084	89 45 ec	 mov	 DWORD PTR _pitch$[ebp], eax

; 675  : 
; 676  : 	screen_ptr = (unsigned short int *) get_screen_data (active_screen);

  00087	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  00092	89 45 dc	 mov	 DWORD PTR _screen_ptr$[ebp], eax

; 677  : 
; 678  : 	convert_float_to_int (y1 * pitch, &int_y);

  00095	8d 45 f8	 lea	 eax, DWORD PTR _int_y$[ebp]
  00098	50		 push	 eax
  00099	f3 0f 2a 45 ec	 cvtsi2ss xmm0, DWORD PTR _pitch$[ebp]
  0009e	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _y1$[ebp]
  000a3	51		 push	 ecx
  000a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a9	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 679  : 
; 680  : 	screen_ptr += int_y;

  000ae	8b 45 f8	 mov	 eax, DWORD PTR _int_y$[ebp]
  000b1	8b 4d dc	 mov	 ecx, DWORD PTR _screen_ptr$[ebp]
  000b4	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  000b7	89 55 dc	 mov	 DWORD PTR _screen_ptr$[ebp], edx

; 681  : 
; 682  : 	convert_float_to_int (x1, &int_x);

  000ba	8d 45 fc	 lea	 eax, DWORD PTR _int_x$[ebp]
  000bd	50		 push	 eax
  000be	51		 push	 ecx
  000bf	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x1$[ebp]
  000c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c9	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 683  : 
; 684  : 	for (loop_height = int_height; loop_height > 0; loop_height --)

  000ce	8b 45 f0	 mov	 eax, DWORD PTR _int_height$[ebp]
  000d1	89 45 e4	 mov	 DWORD PTR _loop_height$[ebp], eax
  000d4	eb 09		 jmp	 SHORT $LN4@ui_draw_al
$LN2@ui_draw_al:
  000d6	8b 45 e4	 mov	 eax, DWORD PTR _loop_height$[ebp]
  000d9	83 e8 01	 sub	 eax, 1
  000dc	89 45 e4	 mov	 DWORD PTR _loop_height$[ebp], eax
$LN4@ui_draw_al:
  000df	83 7d e4 00	 cmp	 DWORD PTR _loop_height$[ebp], 0
  000e3	0f 8e 1b 02 00
	00		 jle	 $LN3@ui_draw_al

; 685  : 	{
; 686  : 
; 687  : 		int
; 688  : 			loop_width;
; 689  : 
; 690  : 		unsigned short int
; 691  : 			*line_ptr;
; 692  : 
; 693  : 		line_ptr = (unsigned short int *) screen_ptr + int_x;

  000e9	8b 45 fc	 mov	 eax, DWORD PTR _int_x$[ebp]
  000ec	8b 4d dc	 mov	 ecx, DWORD PTR _screen_ptr$[ebp]
  000ef	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  000f2	89 55 d0	 mov	 DWORD PTR _line_ptr$13[ebp], edx

; 694  : 
; 695  : 		for (loop_width = 0; loop_width < int_width; loop_width ++)

  000f5	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _loop_width$14[ebp], 0
  000fc	eb 09		 jmp	 SHORT $LN7@ui_draw_al
$LN5@ui_draw_al:
  000fe	8b 45 d4	 mov	 eax, DWORD PTR _loop_width$14[ebp]
  00101	83 c0 01	 add	 eax, 1
  00104	89 45 d4	 mov	 DWORD PTR _loop_width$14[ebp], eax
$LN7@ui_draw_al:
  00107	8b 45 d4	 mov	 eax, DWORD PTR _loop_width$14[ebp]
  0010a	3b 45 f4	 cmp	 eax, DWORD PTR _int_width$[ebp]
  0010d	0f 8d c5 01 00
	00		 jge	 $LN6@ui_draw_al

; 696  : 		{
; 697  : 
; 698  : 			//
; 699  : 			// plot pixel according to 8bit alpha mask
; 700  : 			//
; 701  : 
; 702  : 			if (*this_alpha_ptr < 248)

  00113	8b 45 e0	 mov	 eax, DWORD PTR _this_alpha_ptr$[ebp]
  00116	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00119	81 f9 f8 00 00
	00		 cmp	 ecx, 248		; 000000f8H
  0011f	0f 8d 93 01 00
	00		 jge	 $LN11@ui_draw_al

; 703  : 			{
; 704  : 
; 705  : 				if (*this_alpha_ptr > 8)

  00125	8b 45 e0	 mov	 eax, DWORD PTR _this_alpha_ptr$[ebp]
  00128	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0012b	83 f9 08	 cmp	 ecx, 8
  0012e	0f 8e 78 01 00
	00		 jle	 $LN10@ui_draw_al

; 706  : 				{
; 707  : 	
; 708  : 					rgb_colour
; 709  : 						this_colour,
; 710  : 						pixel_colour,
; 711  : 						result_colour;
; 712  : 	
; 713  : 					float
; 714  : 						dr,
; 715  : 						dg,
; 716  : 						db,
; 717  : 						alpha_factor;
; 718  : 	
; 719  : 					int
; 720  : 						ir,
; 721  : 						ig,
; 722  : 						ib;
; 723  : 	
; 724  : 					this_colour = get_rgb_colour_value (*line_ptr);

  00134	8b 45 d0	 mov	 eax, DWORD PTR _line_ptr$13[ebp]
  00137	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0013a	51		 push	 ecx
  0013b	e8 00 00 00 00	 call	 ?get_rgb_colour_value@@YG?AUREAL_COLOUR@@K@Z ; get_rgb_colour_value
  00140	89 85 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00146	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  0014c	89 55 cc	 mov	 DWORD PTR _this_colour$12[ebp], edx

; 725  : 					pixel_colour = get_rgb_colour_value (*this_image_ptr);

  0014f	8b 45 d8	 mov	 eax, DWORD PTR _this_image_ptr$[ebp]
  00152	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00155	51		 push	 ecx
  00156	e8 00 00 00 00	 call	 ?get_rgb_colour_value@@YG?AUREAL_COLOUR@@K@Z ; get_rgb_colour_value
  0015b	89 85 60 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00161	8b 95 60 ff ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  00167	89 55 c8	 mov	 DWORD PTR _pixel_colour$11[ebp], edx

; 726  : 	
; 727  : 					alpha_factor = ((float) (*this_alpha_ptr)) / 255.0;

  0016a	8b 45 e0	 mov	 eax, DWORD PTR _this_alpha_ptr$[ebp]
  0016d	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00170	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00174	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00178	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@406fe00000000000
  00180	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00184	f3 0f 11 45 b4	 movss	 DWORD PTR _alpha_factor$6[ebp], xmm0

; 728  : 	
; 729  : 					dr = this_colour.r - pixel_colour.r;

  00189	0f b6 45 ce	 movzx	 eax, BYTE PTR _this_colour$12[ebp+2]
  0018d	0f b6 4d ca	 movzx	 ecx, BYTE PTR _pixel_colour$11[ebp+2]
  00191	2b c1		 sub	 eax, ecx
  00193	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00197	f3 0f 11 45 c0	 movss	 DWORD PTR _dr$9[ebp], xmm0

; 730  : 					dg = this_colour.g - pixel_colour.g;

  0019c	0f b6 45 cd	 movzx	 eax, BYTE PTR _this_colour$12[ebp+1]
  001a0	0f b6 4d c9	 movzx	 ecx, BYTE PTR _pixel_colour$11[ebp+1]
  001a4	2b c1		 sub	 eax, ecx
  001a6	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  001aa	f3 0f 11 45 bc	 movss	 DWORD PTR _dg$8[ebp], xmm0

; 731  : 					db = this_colour.b - pixel_colour.b;

  001af	0f b6 45 cc	 movzx	 eax, BYTE PTR _this_colour$12[ebp]
  001b3	0f b6 4d c8	 movzx	 ecx, BYTE PTR _pixel_colour$11[ebp]
  001b7	2b c1		 sub	 eax, ecx
  001b9	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  001bd	f3 0f 11 45 b8	 movss	 DWORD PTR _db$7[ebp], xmm0

; 732  : 	
; 733  : 					dr = ( dr * alpha_factor ) + FLOAT_FLOAT_FACTOR;

  001c2	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _dr$9[ebp]
  001c7	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _alpha_factor$6[ebp]
  001cc	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  001d4	f3 0f 11 45 c0	 movss	 DWORD PTR _dr$9[ebp], xmm0

; 734  : 					dg = ( dg * alpha_factor ) + FLOAT_FLOAT_FACTOR;

  001d9	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _dg$8[ebp]
  001de	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _alpha_factor$6[ebp]
  001e3	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  001eb	f3 0f 11 45 bc	 movss	 DWORD PTR _dg$8[ebp], xmm0

; 735  : 					db = ( db * alpha_factor ) + FLOAT_FLOAT_FACTOR;

  001f0	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _db$7[ebp]
  001f5	f3 0f 59 45 b4	 mulss	 xmm0, DWORD PTR _alpha_factor$6[ebp]
  001fa	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4b40005a
  00202	f3 0f 11 45 b8	 movss	 DWORD PTR _db$7[ebp], xmm0

; 736  : 	
; 737  : 					ir = ( *( ( int * ) &dr ) - INTEGER_FLOAT_FACTOR );

  00207	8b 45 c0	 mov	 eax, DWORD PTR _dr$9[ebp]
  0020a	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0020f	89 45 b0	 mov	 DWORD PTR _ir$5[ebp], eax

; 738  : 					ig = ( *( ( int * ) &dg ) - INTEGER_FLOAT_FACTOR );

  00212	8b 45 bc	 mov	 eax, DWORD PTR _dg$8[ebp]
  00215	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  0021a	89 45 ac	 mov	 DWORD PTR _ig$4[ebp], eax

; 739  : 					ib = ( *( ( int * ) &db ) - INTEGER_FLOAT_FACTOR );

  0021d	8b 45 b8	 mov	 eax, DWORD PTR _db$7[ebp]
  00220	2d 5a 00 40 4b	 sub	 eax, 1262485594		; 4b40005aH
  00225	89 45 a8	 mov	 DWORD PTR _ib$3[ebp], eax

; 740  : 	
; 741  : 					result_colour.r = pixel_colour.r + ir;	//(dr * alpha_factor);

  00228	0f b6 45 ca	 movzx	 eax, BYTE PTR _pixel_colour$11[ebp+2]
  0022c	03 45 b0	 add	 eax, DWORD PTR _ir$5[ebp]
  0022f	88 45 c6	 mov	 BYTE PTR _result_colour$10[ebp+2], al

; 742  : 					result_colour.g = pixel_colour.g + ig;	//(dg * alpha_factor);

  00232	0f b6 45 c9	 movzx	 eax, BYTE PTR _pixel_colour$11[ebp+1]
  00236	03 45 ac	 add	 eax, DWORD PTR _ig$4[ebp]
  00239	88 45 c5	 mov	 BYTE PTR _result_colour$10[ebp+1], al

; 743  : 					result_colour.b = pixel_colour.b + ib;	//(db * alpha_factor);

  0023c	0f b6 45 c8	 movzx	 eax, BYTE PTR _pixel_colour$11[ebp]
  00240	03 45 a8	 add	 eax, DWORD PTR _ib$3[ebp]
  00243	88 45 c4	 mov	 BYTE PTR _result_colour$10[ebp], al

; 744  : 					result_colour.a = 0;

  00246	c6 45 c7 00	 mov	 BYTE PTR _result_colour$10[ebp+3], 0

; 745  : 	
; 746  : 					*line_ptr = get_packed_colour (result_colour);

  0024a	0f b6 45 c6	 movzx	 eax, BYTE PTR _result_colour$10[ebp+2]
  0024e	c1 e0 18	 shl	 eax, 24			; 00000018H
  00251	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?active_screen_red_mask@@3HA ; active_screen_red_mask
  00257	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_red_shift@@3HA ; active_screen_red_shift
  0025d	d3 e8		 shr	 eax, cl
  0025f	0f b6 55 c5	 movzx	 edx, BYTE PTR _result_colour$10[ebp+1]
  00263	c1 e2 18	 shl	 edx, 24			; 00000018H
  00266	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_green_mask@@3HA ; active_screen_green_mask
  0026c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_green_shift@@3HA ; active_screen_green_shift
  00272	d3 ea		 shr	 edx, cl
  00274	0b c2		 or	 eax, edx
  00276	0f b6 55 c4	 movzx	 edx, BYTE PTR _result_colour$10[ebp]
  0027a	c1 e2 18	 shl	 edx, 24			; 00000018H
  0027d	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_blue_mask@@3HA ; active_screen_blue_mask
  00283	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_blue_shift@@3HA ; active_screen_blue_shift
  00289	d3 ea		 shr	 edx, cl
  0028b	0b c2		 or	 eax, edx
  0028d	0f b6 55 c7	 movzx	 edx, BYTE PTR _result_colour$10[ebp+3]
  00291	c1 e2 18	 shl	 edx, 24			; 00000018H
  00294	23 15 00 00 00
	00		 and	 edx, DWORD PTR ?active_screen_alpha_mask@@3HA ; active_screen_alpha_mask
  0029a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?active_screen_alpha_shift@@3HA ; active_screen_alpha_shift
  002a0	d3 ea		 shr	 edx, cl
  002a2	0b c2		 or	 eax, edx
  002a4	8b 4d d0	 mov	 ecx, DWORD PTR _line_ptr$13[ebp]
  002a7	66 89 01	 mov	 WORD PTR [ecx], ax

; 747  : 				}
; 748  : 				else

  002aa	eb 0c		 jmp	 SHORT $LN11@ui_draw_al
$LN10@ui_draw_al:

; 749  : 				{
; 750  : 
; 751  : 					*line_ptr = *this_image_ptr;

  002ac	8b 45 d0	 mov	 eax, DWORD PTR _line_ptr$13[ebp]
  002af	8b 4d d8	 mov	 ecx, DWORD PTR _this_image_ptr$[ebp]
  002b2	66 8b 11	 mov	 dx, WORD PTR [ecx]
  002b5	66 89 10	 mov	 WORD PTR [eax], dx
$LN11@ui_draw_al:

; 752  : 				}
; 753  : 			}
; 754  : 
; 755  : 			line_ptr ++;

  002b8	8b 45 d0	 mov	 eax, DWORD PTR _line_ptr$13[ebp]
  002bb	83 c0 02	 add	 eax, 2
  002be	89 45 d0	 mov	 DWORD PTR _line_ptr$13[ebp], eax

; 756  : 
; 757  : 			this_image_ptr ++;

  002c1	8b 45 d8	 mov	 eax, DWORD PTR _this_image_ptr$[ebp]
  002c4	83 c0 02	 add	 eax, 2
  002c7	89 45 d8	 mov	 DWORD PTR _this_image_ptr$[ebp], eax

; 758  : 
; 759  : 			this_alpha_ptr ++;

  002ca	8b 45 e0	 mov	 eax, DWORD PTR _this_alpha_ptr$[ebp]
  002cd	83 c0 01	 add	 eax, 1
  002d0	89 45 e0	 mov	 DWORD PTR _this_alpha_ptr$[ebp], eax

; 760  : 		}

  002d3	e9 26 fe ff ff	 jmp	 $LN5@ui_draw_al
$LN6@ui_draw_al:

; 761  : 
; 762  : 		screen_ptr += pitch;

  002d8	8b 45 ec	 mov	 eax, DWORD PTR _pitch$[ebp]
  002db	8b 4d dc	 mov	 ecx, DWORD PTR _screen_ptr$[ebp]
  002de	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  002e1	89 55 dc	 mov	 DWORD PTR _screen_ptr$[ebp], edx

; 763  : 
; 764  : 		this_image_ptr += (image_pitch - int_width);

  002e4	8b 45 e8	 mov	 eax, DWORD PTR _image_pitch$[ebp]
  002e7	2b 45 f4	 sub	 eax, DWORD PTR _int_width$[ebp]
  002ea	8b 4d d8	 mov	 ecx, DWORD PTR _this_image_ptr$[ebp]
  002ed	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  002f0	89 55 d8	 mov	 DWORD PTR _this_image_ptr$[ebp], edx

; 765  : 
; 766  : 		this_alpha_ptr += (image_pitch - int_width);

  002f3	8b 45 e8	 mov	 eax, DWORD PTR _image_pitch$[ebp]
  002f6	2b 45 f4	 sub	 eax, DWORD PTR _int_width$[ebp]
  002f9	03 45 e0	 add	 eax, DWORD PTR _this_alpha_ptr$[ebp]
  002fc	89 45 e0	 mov	 DWORD PTR _this_alpha_ptr$[ebp], eax

; 767  : 	}

  002ff	e9 d2 fd ff ff	 jmp	 $LN2@ui_draw_al
$LN3@ui_draw_al:

; 768  : }

  00304	5f		 pop	 edi
  00305	5e		 pop	 esi
  00306	5b		 pop	 ebx
  00307	8b e5		 mov	 esp, ebp
  00309	5d		 pop	 ebp
  0030a	c2 14 00	 ret	 20			; 00000014H
?ui_draw_alpha_graphic@@YGXMMMMPAG@Z ENDP		; ui_draw_alpha_graphic
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_draw\uigraph.c
;	COMDAT ?ui_draw_unscaled_memory_graphic@@YGXMMMMPAUSCREEN@@@Z
_TEXT	SEGMENT
$T1 = -156						; size = 4
$T2 = -152						; size = 4
_int_y2$ = -84						; size = 4
_int_x2$ = -80						; size = 4
_int_y1$ = -76						; size = 4
_int_x1$ = -72						; size = 4
_y_start_int$ = -68					; size = 4
_x_start_int$ = -64					; size = 4
_new_y2$ = -60						; size = 4
_new_x2$ = -56						; size = 4
_new_y1$ = -52						; size = 4
_new_x1$ = -48						; size = 4
_y_start$ = -44						; size = 4
_x_start$ = -40						; size = 4
_loop_y$ = -36						; size = 4
_clip_x_size$ = -32					; size = 4
_screen_pitch$ = -28					; size = 4
_int_y_size$ = -24					; size = 4
_screen_ptr$ = -20					; size = 4
_graphic_y$ = -16					; size = 2
_graphic_x$ = -12					; size = 2
_graphic_pitch$ = -8					; size = 2
_graphic$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
_memory_graphic$ = 24					; size = 4
?ui_draw_unscaled_memory_graphic@@YGXMMMMPAUSCREEN@@@Z PROC ; ui_draw_unscaled_memory_graphic, COMDAT

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 9c 00 00
	00		 sub	 esp, 156		; 0000009cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 381  : 
; 382  : 	unsigned short int
; 383  : 		*graphic,
; 384  : 		graphic_pitch,
; 385  : 		graphic_x,
; 386  : 		graphic_y,
; 387  : 		*screen_ptr;
; 388  : 
; 389  : 	int
; 390  : 		int_y_size,
; 391  : 		screen_pitch,
; 392  : 		clip_x_size,
; 393  : 		loop_y;
; 394  : 
; 395  : 	float
; 396  : 		x_start,
; 397  : 		y_start,
; 398  : 		new_x1,
; 399  : 		new_y1,
; 400  : 		new_x2,
; 401  : 		new_y2;
; 402  : 
; 403  : 	int
; 404  : 		x_start_int,
; 405  : 		y_start_int,
; 406  : 		int_x1,
; 407  : 		int_y1,
; 408  : 		int_x2,
; 409  : 		int_y2;
; 410  : 
; 411  : 	graphic = (unsigned short int *) get_screen_data (memory_graphic);

  0000c	8b 45 18	 mov	 eax, DWORD PTR _memory_graphic$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  00015	89 45 fc	 mov	 DWORD PTR _graphic$[ebp], eax

; 412  : 
; 413  : 	graphic_pitch = get_screen_pitch (memory_graphic);

  00018	8b 45 18	 mov	 eax, DWORD PTR _memory_graphic$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  00021	66 89 45 f8	 mov	 WORD PTR _graphic_pitch$[ebp], ax

; 414  : 
; 415  : 	graphic_pitch = graphic_pitch >> 1;

  00025	0f b7 45 f8	 movzx	 eax, WORD PTR _graphic_pitch$[ebp]
  00029	d1 f8		 sar	 eax, 1
  0002b	66 89 45 f8	 mov	 WORD PTR _graphic_pitch$[ebp], ax

; 416  : 
; 417  : 	graphic_x = get_screen_width (memory_graphic);

  0002f	8b 45 18	 mov	 eax, DWORD PTR _memory_graphic$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?get_screen_width@@YGHPAUSCREEN@@@Z ; get_screen_width
  00038	66 89 45 f4	 mov	 WORD PTR _graphic_x$[ebp], ax

; 418  : 
; 419  : 	graphic_y = get_screen_height (memory_graphic);

  0003c	8b 45 18	 mov	 eax, DWORD PTR _memory_graphic$[ebp]
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ?get_screen_height@@YGHPAUSCREEN@@@Z ; get_screen_height
  00045	66 89 45 f0	 mov	 WORD PTR _graphic_y$[ebp], ax

; 420  : 
; 421  : 	new_x1 = x1;

  00049	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0004e	f3 0f 11 45 d0	 movss	 DWORD PTR _new_x1$[ebp], xmm0

; 422  : 
; 423  : 	new_y1 = y1;

  00053	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00058	f3 0f 11 45 cc	 movss	 DWORD PTR _new_y1$[ebp], xmm0

; 424  : 
; 425  : 	new_x2 = x2;

  0005d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00062	f3 0f 11 45 c8	 movss	 DWORD PTR _new_x2$[ebp], xmm0

; 426  : 
; 427  : 	new_y2 = y2;

  00067	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0006c	f3 0f 11 45 c4	 movss	 DWORD PTR _new_y2$[ebp], xmm0

; 428  : 
; 429  : 	// clip area to ui viewport
; 430  : 
; 431  : 	ui_clip_area (&new_x1, &new_y1, &new_x2, &new_y2);

  00071	8d 45 c4	 lea	 eax, DWORD PTR _new_y2$[ebp]
  00074	50		 push	 eax
  00075	8d 4d c8	 lea	 ecx, DWORD PTR _new_x2$[ebp]
  00078	51		 push	 ecx
  00079	8d 55 cc	 lea	 edx, DWORD PTR _new_y1$[ebp]
  0007c	52		 push	 edx
  0007d	8d 45 d0	 lea	 eax, DWORD PTR _new_x1$[ebp]
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 ?ui_clip_area@@YGHPAM000@Z ; ui_clip_area

; 432  : 
; 433  : 	x_start = new_x1 - x1;

  00086	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _new_x1$[ebp]
  0008b	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x1$[ebp]
  00090	f3 0f 11 45 d8	 movss	 DWORD PTR _x_start$[ebp], xmm0

; 434  : 
; 435  : 	y_start = new_y1 - y1;

  00095	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _new_y1$[ebp]
  0009a	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _y1$[ebp]
  0009f	f3 0f 11 45 d4	 movss	 DWORD PTR _y_start$[ebp], xmm0

; 436  : 
; 437  : 	// button coords should be in viewport coords,
; 438  : 	// so add ui_origin to convert into screen coords
; 439  : 
; 440  : 	x1 += ui_x_origin;

  000a4	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x1$[ebp]
  000a9	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_x_origin@@3MA
  000b1	f3 0f 11 45 08	 movss	 DWORD PTR _x1$[ebp], xmm0

; 441  : 
; 442  : 	y1 += ui_y_origin;

  000b6	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y1$[ebp]
  000bb	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_y_origin@@3MA
  000c3	f3 0f 11 45 0c	 movss	 DWORD PTR _y1$[ebp], xmm0

; 443  : 
; 444  : 	x2 += ui_x_origin;

  000c8	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x2$[ebp]
  000cd	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_x_origin@@3MA
  000d5	f3 0f 11 45 10	 movss	 DWORD PTR _x2$[ebp], xmm0

; 445  : 
; 446  : 	y2 += ui_y_origin;

  000da	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y2$[ebp]
  000df	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_y_origin@@3MA
  000e7	f3 0f 11 45 14	 movss	 DWORD PTR _y2$[ebp], xmm0

; 447  : 
; 448  : 	new_x1 += ui_x_origin;

  000ec	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _new_x1$[ebp]
  000f1	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_x_origin@@3MA
  000f9	f3 0f 11 45 d0	 movss	 DWORD PTR _new_x1$[ebp], xmm0

; 449  : 
; 450  : 	new_y1 += ui_y_origin;

  000fe	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _new_y1$[ebp]
  00103	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_y_origin@@3MA
  0010b	f3 0f 11 45 cc	 movss	 DWORD PTR _new_y1$[ebp], xmm0

; 451  : 
; 452  : 	new_x2 += ui_x_origin;

  00110	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _new_x2$[ebp]
  00115	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_x_origin@@3MA
  0011d	f3 0f 11 45 c8	 movss	 DWORD PTR _new_x2$[ebp], xmm0

; 453  : 
; 454  : 	new_y2 += ui_y_origin;

  00122	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _new_y2$[ebp]
  00127	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_y_origin@@3MA
  0012f	f3 0f 11 45 c4	 movss	 DWORD PTR _new_y2$[ebp], xmm0

; 455  : 
; 456  : 	// check if possible to draw
; 457  : 
; 458  : 	if ((new_x2 - new_x1 < 2) || (new_y2 - new_y1 <= 2))

  00134	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _new_x2$[ebp]
  00139	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _new_x1$[ebp]
  0013e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  00146	0f 2f c8	 comiss	 xmm1, xmm0
  00149	77 17		 ja	 SHORT $LN6@ui_draw_un
  0014b	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _new_y2$[ebp]
  00150	f3 0f 5c 45 cc	 subss	 xmm0, DWORD PTR _new_y1$[ebp]
  00155	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  0015d	0f 2f c8	 comiss	 xmm1, xmm0
  00160	72 05		 jb	 SHORT $LN5@ui_draw_un
$LN6@ui_draw_un:

; 459  : 	{
; 460  : 
; 461  : 		return;

  00162	e9 54 01 00 00	 jmp	 $LN1@ui_draw_un
$LN5@ui_draw_un:

; 462  : 	}
; 463  : 
; 464  : 	// convert variabless to ints to save crap conversion
; 465  : 
; 466  : 	convert_float_to_int (new_x1, &int_x1);

  00167	8d 45 b8	 lea	 eax, DWORD PTR _int_x1$[ebp]
  0016a	50		 push	 eax
  0016b	51		 push	 ecx
  0016c	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _new_x1$[ebp]
  00171	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00176	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 467  : 	convert_float_to_int (new_y1, &int_y1);

  0017b	8d 45 b4	 lea	 eax, DWORD PTR _int_y1$[ebp]
  0017e	50		 push	 eax
  0017f	51		 push	 ecx
  00180	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _new_y1$[ebp]
  00185	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018a	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 468  : 	convert_float_to_int (new_x2, &int_x2);

  0018f	8d 45 b0	 lea	 eax, DWORD PTR _int_x2$[ebp]
  00192	50		 push	 eax
  00193	51		 push	 ecx
  00194	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _new_x2$[ebp]
  00199	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019e	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 469  : 	convert_float_to_int (new_y2, &int_y2);

  001a3	8d 45 ac	 lea	 eax, DWORD PTR _int_y2$[ebp]
  001a6	50		 push	 eax
  001a7	51		 push	 ecx
  001a8	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _new_y2$[ebp]
  001ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b2	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 470  : 	convert_float_to_int (x_start, &x_start_int);

  001b7	8d 45 c0	 lea	 eax, DWORD PTR _x_start_int$[ebp]
  001ba	50		 push	 eax
  001bb	51		 push	 ecx
  001bc	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _x_start$[ebp]
  001c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c6	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 471  : 	convert_float_to_int (y_start, &y_start_int);

  001cb	8d 45 bc	 lea	 eax, DWORD PTR _y_start_int$[ebp]
  001ce	50		 push	 eax
  001cf	51		 push	 ecx
  001d0	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _y_start$[ebp]
  001d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001da	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 472  : 
; 473  : 	// draw graphic
; 474  : 
; 475  : 	graphic += y_start_int * graphic_x + x_start_int;

  001df	0f b7 45 f4	 movzx	 eax, WORD PTR _graphic_x$[ebp]
  001e3	0f af 45 bc	 imul	 eax, DWORD PTR _y_start_int$[ebp]
  001e7	03 45 c0	 add	 eax, DWORD PTR _x_start_int$[ebp]
  001ea	8b 4d fc	 mov	 ecx, DWORD PTR _graphic$[ebp]
  001ed	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  001f0	89 55 fc	 mov	 DWORD PTR _graphic$[ebp], edx

; 476  : 
; 477  : 	clip_x_size = int_x2 - int_x1;

  001f3	8b 45 b0	 mov	 eax, DWORD PTR _int_x2$[ebp]
  001f6	2b 45 b8	 sub	 eax, DWORD PTR _int_x1$[ebp]
  001f9	89 45 e0	 mov	 DWORD PTR _clip_x_size$[ebp], eax

; 478  : 
; 479  : 	screen_ptr = (unsigned short int *) get_screen_data (active_screen);

  001fc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00201	50		 push	 eax
  00202	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  00207	89 45 ec	 mov	 DWORD PTR _screen_ptr$[ebp], eax

; 480  : 
; 481  : 	screen_pitch = get_screen_pitch (active_screen);

  0020a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0020f	50		 push	 eax
  00210	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  00215	89 45 e4	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 482  : 
; 483  : 	screen_pitch = screen_pitch >> 1;

  00218	8b 45 e4	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  0021b	d1 f8		 sar	 eax, 1
  0021d	89 45 e4	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 484  : 
; 485  : 	screen_ptr += screen_pitch * int_y1;

  00220	8b 45 e4	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  00223	0f af 45 b4	 imul	 eax, DWORD PTR _int_y1$[ebp]
  00227	8b 4d ec	 mov	 ecx, DWORD PTR _screen_ptr$[ebp]
  0022a	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0022d	89 55 ec	 mov	 DWORD PTR _screen_ptr$[ebp], edx

; 486  : 
; 487  : 	screen_ptr += int_x1;

  00230	8b 45 b8	 mov	 eax, DWORD PTR _int_x1$[ebp]
  00233	8b 4d ec	 mov	 ecx, DWORD PTR _screen_ptr$[ebp]
  00236	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00239	89 55 ec	 mov	 DWORD PTR _screen_ptr$[ebp], edx

; 488  : 
; 489  : 	// which ever is smaller, area or graphic
; 490  : 
; 491  : 	int_y_size = min (int_y2 - int_y1, (int) graphic_y);

  0023c	0f b7 45 f0	 movzx	 eax, WORD PTR _graphic_y$[ebp]
  00240	89 85 68 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00246	8b 4d ac	 mov	 ecx, DWORD PTR _int_y2$[ebp]
  00249	2b 4d b4	 sub	 ecx, DWORD PTR _int_y1$[ebp]
  0024c	89 8d 64 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00252	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  00258	52		 push	 edx
  00259	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0025f	50		 push	 eax
  00260	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  00265	8b 08		 mov	 ecx, DWORD PTR [eax]
  00267	89 4d e8	 mov	 DWORD PTR _int_y_size$[ebp], ecx

; 492  : 
; 493  : 	clip_x_size *= sizeof (short int);

  0026a	8b 45 e0	 mov	 eax, DWORD PTR _clip_x_size$[ebp]
  0026d	d1 e0		 shl	 eax, 1
  0026f	89 45 e0	 mov	 DWORD PTR _clip_x_size$[ebp], eax

; 494  : 
; 495  : 	for (loop_y = 0; loop_y < int_y_size; loop_y ++)

  00272	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _loop_y$[ebp], 0
  00279	eb 09		 jmp	 SHORT $LN4@ui_draw_un
$LN2@ui_draw_un:
  0027b	8b 45 dc	 mov	 eax, DWORD PTR _loop_y$[ebp]
  0027e	83 c0 01	 add	 eax, 1
  00281	89 45 dc	 mov	 DWORD PTR _loop_y$[ebp], eax
$LN4@ui_draw_un:
  00284	8b 45 dc	 mov	 eax, DWORD PTR _loop_y$[ebp]
  00287	3b 45 e8	 cmp	 eax, DWORD PTR _int_y_size$[ebp]
  0028a	7d 2f		 jge	 SHORT $LN3@ui_draw_un

; 496  : 	{
; 497  : 
; 498  : 		memcpy (screen_ptr, graphic, clip_x_size);

  0028c	8b 45 e0	 mov	 eax, DWORD PTR _clip_x_size$[ebp]
  0028f	50		 push	 eax
  00290	8b 4d fc	 mov	 ecx, DWORD PTR _graphic$[ebp]
  00293	51		 push	 ecx
  00294	8b 55 ec	 mov	 edx, DWORD PTR _screen_ptr$[ebp]
  00297	52		 push	 edx
  00298	e8 00 00 00 00	 call	 _memcpy
  0029d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 499  : 
; 500  : 		screen_ptr += screen_pitch;

  002a0	8b 45 e4	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  002a3	8b 4d ec	 mov	 ecx, DWORD PTR _screen_ptr$[ebp]
  002a6	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  002a9	89 55 ec	 mov	 DWORD PTR _screen_ptr$[ebp], edx

; 501  : 
; 502  : 		graphic += graphic_pitch;

  002ac	0f b7 45 f8	 movzx	 eax, WORD PTR _graphic_pitch$[ebp]
  002b0	8b 4d fc	 mov	 ecx, DWORD PTR _graphic$[ebp]
  002b3	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  002b6	89 55 fc	 mov	 DWORD PTR _graphic$[ebp], edx

; 503  : 	}

  002b9	eb c0		 jmp	 SHORT $LN2@ui_draw_un
$LN3@ui_draw_un:
$LN1@ui_draw_un:

; 504  : }

  002bb	5f		 pop	 edi
  002bc	5e		 pop	 esi
  002bd	5b		 pop	 ebx
  002be	8b e5		 mov	 esp, ebp
  002c0	5d		 pop	 ebp
  002c1	c2 14 00	 ret	 20			; 00000014H
?ui_draw_unscaled_memory_graphic@@YGXMMMMPAUSCREEN@@@Z ENDP ; ui_draw_unscaled_memory_graphic
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_draw\uigraph.c
;	COMDAT ?ui_draw_memory_graphic@@YGXPAUUI_OBJECT@@MMMMHHHH@Z
_TEXT	SEGMENT
_screen_pitch$ = -20					; size = 4
_data_pitch$ = -16					; size = 4
_screen_ptr$ = -12					; size = 4
_data_ptr$ = -8						; size = 4
_memory_graphic$ = -4					; size = 4
_obj$ = 8						; size = 4
_x1$ = 12						; size = 4
_y1$ = 16						; size = 4
_x2$ = 20						; size = 4
_y2$ = 24						; size = 4
_memory_graphic_width$ = 28				; size = 4
_memory_graphic_height$ = 32				; size = 4
_memory_graphic_pitch$ = 36				; size = 4
_masked$ = 40						; size = 4
?ui_draw_memory_graphic@@YGXPAUUI_OBJECT@@MMMMHHHH@Z PROC ; ui_draw_memory_graphic, COMDAT

; 328  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 329  : 
; 330  : 	struct SCREEN
; 331  : 		*memory_graphic;
; 332  : 
; 333  : 	unsigned short int
; 334  : 		*data_ptr,
; 335  : 		*screen_ptr;
; 336  : 
; 337  : 	int
; 338  : 		data_pitch,
; 339  : 		screen_pitch;
; 340  : 
; 341  : 	memory_graphic = get_ui_object_memory_graphic (obj);

  00009	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00010	8b 11		 mov	 edx, DWORD PTR [ecx]
  00012	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_ui_object_memory_graphic@@3PAP6GPAUSCREEN@@PAUUI_OBJECT@@@ZA[edx*4]
  00019	ff d0		 call	 eax
  0001b	89 45 fc	 mov	 DWORD PTR _memory_graphic$[ebp], eax

; 342  : 
; 343  : 	ui_clip_area (&x1, &y1, &x2, &y2);

  0001e	8d 45 18	 lea	 eax, DWORD PTR _y2$[ebp]
  00021	50		 push	 eax
  00022	8d 4d 14	 lea	 ecx, DWORD PTR _x2$[ebp]
  00025	51		 push	 ecx
  00026	8d 55 10	 lea	 edx, DWORD PTR _y1$[ebp]
  00029	52		 push	 edx
  0002a	8d 45 0c	 lea	 eax, DWORD PTR _x1$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?ui_clip_area@@YGHPAM000@Z ; ui_clip_area

; 344  : 
; 345  : 	x1 += ui_x_origin;

  00033	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00038	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_x_origin@@3MA
  00040	f3 0f 11 45 0c	 movss	 DWORD PTR _x1$[ebp], xmm0

; 346  : 
; 347  : 	y1 += ui_y_origin;

  00045	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0004a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_y_origin@@3MA
  00052	f3 0f 11 45 10	 movss	 DWORD PTR _y1$[ebp], xmm0

; 348  : 
; 349  : 	x2 += ui_x_origin;

  00057	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _x2$[ebp]
  0005c	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_x_origin@@3MA
  00064	f3 0f 11 45 14	 movss	 DWORD PTR _x2$[ebp], xmm0

; 350  : 
; 351  : 	y2 += ui_y_origin;

  00069	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0006e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_y_origin@@3MA
  00076	f3 0f 11 45 18	 movss	 DWORD PTR _y2$[ebp], xmm0

; 352  : 
; 353  : 	screen_ptr = (unsigned short int *) get_screen_data (active_screen);

  0007b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  00086	89 45 f4	 mov	 DWORD PTR _screen_ptr$[ebp], eax

; 354  : 
; 355  : 	screen_pitch = get_screen_pitch (active_screen);

  00089	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  00094	89 45 ec	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 356  : 
; 357  : 	data_ptr = (unsigned short int *) get_screen_data (memory_graphic);

  00097	8b 45 fc	 mov	 eax, DWORD PTR _memory_graphic$[ebp]
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  000a0	89 45 f8	 mov	 DWORD PTR _data_ptr$[ebp], eax

; 358  : 
; 359  : 	data_pitch = get_screen_pitch (memory_graphic);

  000a3	8b 45 fc	 mov	 eax, DWORD PTR _memory_graphic$[ebp]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  000ac	89 45 f0	 mov	 DWORD PTR _data_pitch$[ebp], eax

; 360  : 
; 361  : 	if (masked)

  000af	83 7d 28 00	 cmp	 DWORD PTR _masked$[ebp], 0
  000b3	74 2f		 je	 SHORT $LN2@ui_draw_me

; 362  : 	{
; 363  : 
; 364  : 			ui_draw_masked_graphic (x1, y1, x2, y2,

  000b5	8b 45 f4	 mov	 eax, DWORD PTR _screen_ptr$[ebp]
  000b8	50		 push	 eax
  000b9	8b 4d f8	 mov	 ecx, DWORD PTR _data_ptr$[ebp]
  000bc	51		 push	 ecx
  000bd	8b 55 24	 mov	 edx, DWORD PTR _memory_graphic_pitch$[ebp]
  000c0	52		 push	 edx
  000c1	8b 45 ec	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  000c4	50		 push	 eax
  000c5	f3 0f 2c 4d 18	 cvttss2si ecx, DWORD PTR _y2$[ebp]
  000ca	51		 push	 ecx
  000cb	f3 0f 2c 55 14	 cvttss2si edx, DWORD PTR _x2$[ebp]
  000d0	52		 push	 edx
  000d1	f3 0f 2c 45 10	 cvttss2si eax, DWORD PTR _y1$[ebp]
  000d6	50		 push	 eax
  000d7	f3 0f 2c 4d 0c	 cvttss2si ecx, DWORD PTR _x1$[ebp]
  000dc	51		 push	 ecx
  000dd	e8 00 00 00 00	 call	 ?ui_draw_masked_graphic@@YGXHHHHHHPAG0@Z ; ui_draw_masked_graphic

; 365  : 											screen_pitch, memory_graphic_pitch,
; 366  : 											(unsigned short int *) data_ptr, screen_ptr);
; 367  : 	}
; 368  : 	else

  000e2	eb 35		 jmp	 SHORT $LN3@ui_draw_me
$LN2@ui_draw_me:

; 369  : 	{
; 370  : 		
; 371  : 			ui_draw_unscaled_memory_graphic (x1, y1, x2, y2, memory_graphic);

  000e4	8b 45 fc	 mov	 eax, DWORD PTR _memory_graphic$[ebp]
  000e7	50		 push	 eax
  000e8	51		 push	 ecx
  000e9	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _y2$[ebp]
  000ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f3	51		 push	 ecx
  000f4	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _x2$[ebp]
  000f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fe	51		 push	 ecx
  000ff	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _y1$[ebp]
  00104	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00109	51		 push	 ecx
  0010a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0010f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00114	e8 00 00 00 00	 call	 ?ui_draw_unscaled_memory_graphic@@YGXMMMMPAUSCREEN@@@Z ; ui_draw_unscaled_memory_graphic
$LN3@ui_draw_me:

; 372  : 	}
; 373  : }

  00119	5f		 pop	 edi
  0011a	5e		 pop	 esi
  0011b	5b		 pop	 ebx
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c2 24 00	 ret	 36			; 00000024H
?ui_draw_memory_graphic@@YGXPAUUI_OBJECT@@MMMMHHHH@Z ENDP ; ui_draw_memory_graphic
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_draw\uigraph.c
;	COMDAT ?ui_draw_part_graphic@@YGXMMMMHHPAG@Z
_TEXT	SEGMENT
$T1 = -148						; size = 4
$T2 = -144						; size = 4
_int_y2$ = -76						; size = 4
_int_x2$ = -72						; size = 4
_int_y1$ = -68						; size = 4
_int_x1$ = -64						; size = 4
_y_start_int$ = -60					; size = 4
_x_start_int$ = -56					; size = 4
_new_y2$ = -52						; size = 4
_new_x2$ = -48						; size = 4
_new_y1$ = -44						; size = 4
_new_x1$ = -40						; size = 4
_y_start$ = -36						; size = 4
_x_start$ = -32						; size = 4
_loop_y$ = -28						; size = 4
_clip_x_size$ = -24					; size = 4
_screen_pitch$ = -20					; size = 4
_int_y_size$ = -16					; size = 4
_screen_ptr$ = -12					; size = 4
_graphic_y$ = -8					; size = 2
_graphic_x$ = -4					; size = 2
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
_start_x$ = 24						; size = 4
_start_y$ = 28						; size = 4
_graphic$ = 32						; size = 4
?ui_draw_part_graphic@@YGXMMMMHHPAG@Z PROC		; ui_draw_part_graphic, COMDAT

; 203  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 204  : 
; 205  : 	unsigned short int
; 206  : 		graphic_x,
; 207  : 		graphic_y,
; 208  : 		*screen_ptr;
; 209  : 
; 210  : 	int
; 211  : 		int_y_size,
; 212  : 		screen_pitch,
; 213  : 		clip_x_size,
; 214  : 		loop_y;
; 215  : 
; 216  : 	float
; 217  : 		x_start,
; 218  : 		y_start,
; 219  : 		new_x1,
; 220  : 		new_y1,
; 221  : 		new_x2,
; 222  : 		new_y2;
; 223  : 
; 224  : 	int
; 225  : 		x_start_int,
; 226  : 		y_start_int,
; 227  : 		int_x1,
; 228  : 		int_y1,
; 229  : 		int_x2,
; 230  : 		int_y2;
; 231  : 
; 232  : 	new_x1 = x1;

  0000c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00011	f3 0f 11 45 d8	 movss	 DWORD PTR _new_x1$[ebp], xmm0

; 233  : 
; 234  : 	new_y1 = y1;

  00016	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0001b	f3 0f 11 45 d4	 movss	 DWORD PTR _new_y1$[ebp], xmm0

; 235  : 
; 236  : 	new_x2 = x2;

  00020	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00025	f3 0f 11 45 d0	 movss	 DWORD PTR _new_x2$[ebp], xmm0

; 237  : 
; 238  : 	new_y2 = y2;

  0002a	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0002f	f3 0f 11 45 cc	 movss	 DWORD PTR _new_y2$[ebp], xmm0

; 239  : 
; 240  : 	//debug_log ("UIGRAPH: part graphic %f, %f -> %f, %f", x1, y1, x2, y2);
; 241  : 
; 242  : 	// clip area to ui viewport
; 243  : 
; 244  : 	ui_clip_area (&new_x1, &new_y1, &new_x2, &new_y2);

  00034	8d 45 cc	 lea	 eax, DWORD PTR _new_y2$[ebp]
  00037	50		 push	 eax
  00038	8d 4d d0	 lea	 ecx, DWORD PTR _new_x2$[ebp]
  0003b	51		 push	 ecx
  0003c	8d 55 d4	 lea	 edx, DWORD PTR _new_y1$[ebp]
  0003f	52		 push	 edx
  00040	8d 45 d8	 lea	 eax, DWORD PTR _new_x1$[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?ui_clip_area@@YGHPAM000@Z ; ui_clip_area

; 245  : 
; 246  : 	x_start = new_x1 - x1;

  00049	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _new_x1$[ebp]
  0004e	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x1$[ebp]
  00053	f3 0f 11 45 e0	 movss	 DWORD PTR _x_start$[ebp], xmm0

; 247  : 
; 248  : 	y_start = new_y1 - y1;

  00058	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _new_y1$[ebp]
  0005d	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _y1$[ebp]
  00062	f3 0f 11 45 dc	 movss	 DWORD PTR _y_start$[ebp], xmm0

; 249  : 
; 250  : 	// button coords should be in viewport coords,
; 251  : 	// so add ui_origin to convert into screen coords
; 252  : 
; 253  : 	x1 += ui_x_origin;

  00067	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0006c	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_x_origin@@3MA
  00074	f3 0f 11 45 08	 movss	 DWORD PTR _x1$[ebp], xmm0

; 254  : 
; 255  : 	y1 += ui_y_origin;

  00079	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0007e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_y_origin@@3MA
  00086	f3 0f 11 45 0c	 movss	 DWORD PTR _y1$[ebp], xmm0

; 256  : 
; 257  : 	x2 += ui_x_origin;

  0008b	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00090	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_x_origin@@3MA
  00098	f3 0f 11 45 10	 movss	 DWORD PTR _x2$[ebp], xmm0

; 258  : 
; 259  : 	y2 += ui_y_origin;

  0009d	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y2$[ebp]
  000a2	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_y_origin@@3MA
  000aa	f3 0f 11 45 14	 movss	 DWORD PTR _y2$[ebp], xmm0

; 260  : 
; 261  : 	new_x1 += ui_x_origin;

  000af	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _new_x1$[ebp]
  000b4	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_x_origin@@3MA
  000bc	f3 0f 11 45 d8	 movss	 DWORD PTR _new_x1$[ebp], xmm0

; 262  : 
; 263  : 	new_y1 += ui_y_origin;

  000c1	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _new_y1$[ebp]
  000c6	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_y_origin@@3MA
  000ce	f3 0f 11 45 d4	 movss	 DWORD PTR _new_y1$[ebp], xmm0

; 264  : 
; 265  : 	new_x2 += ui_x_origin;

  000d3	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _new_x2$[ebp]
  000d8	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_x_origin@@3MA
  000e0	f3 0f 11 45 d0	 movss	 DWORD PTR _new_x2$[ebp], xmm0

; 266  : 
; 267  : 	new_y2 += ui_y_origin;

  000e5	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _new_y2$[ebp]
  000ea	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_y_origin@@3MA
  000f2	f3 0f 11 45 cc	 movss	 DWORD PTR _new_y2$[ebp], xmm0

; 268  : 
; 269  : 	// check if possible to draw
; 270  : 
; 271  : 	if ((new_x2 - new_x1 < 2) || (new_y2 - new_y1 <= 2))

  000f7	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _new_x2$[ebp]
  000fc	f3 0f 5c 45 d8	 subss	 xmm0, DWORD PTR _new_x1$[ebp]
  00101	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  00109	0f 2f c8	 comiss	 xmm1, xmm0
  0010c	77 17		 ja	 SHORT $LN6@ui_draw_pa
  0010e	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _new_y2$[ebp]
  00113	f3 0f 5c 45 d4	 subss	 xmm0, DWORD PTR _new_y1$[ebp]
  00118	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  00120	0f 2f c8	 comiss	 xmm1, xmm0
  00123	72 05		 jb	 SHORT $LN5@ui_draw_pa
$LN6@ui_draw_pa:

; 272  : 	{
; 273  : 
; 274  : 		return;

  00125	e9 85 01 00 00	 jmp	 $LN1@ui_draw_pa
$LN5@ui_draw_pa:

; 275  : 	}
; 276  : 
; 277  : 	// convert variabless to ints to save crap conversion
; 278  : 
; 279  : 	convert_float_to_int (new_x1, &int_x1);

  0012a	8d 45 c0	 lea	 eax, DWORD PTR _int_x1$[ebp]
  0012d	50		 push	 eax
  0012e	51		 push	 ecx
  0012f	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _new_x1$[ebp]
  00134	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00139	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 280  : 	convert_float_to_int (new_y1, &int_y1);

  0013e	8d 45 bc	 lea	 eax, DWORD PTR _int_y1$[ebp]
  00141	50		 push	 eax
  00142	51		 push	 ecx
  00143	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _new_y1$[ebp]
  00148	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014d	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 281  : 	convert_float_to_int (new_x2, &int_x2);

  00152	8d 45 b8	 lea	 eax, DWORD PTR _int_x2$[ebp]
  00155	50		 push	 eax
  00156	51		 push	 ecx
  00157	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _new_x2$[ebp]
  0015c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00161	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 282  : 	convert_float_to_int (new_y2, &int_y2);

  00166	8d 45 b4	 lea	 eax, DWORD PTR _int_y2$[ebp]
  00169	50		 push	 eax
  0016a	51		 push	 ecx
  0016b	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _new_y2$[ebp]
  00170	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00175	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 283  : 	convert_float_to_int (x_start, &x_start_int);

  0017a	8d 45 c8	 lea	 eax, DWORD PTR _x_start_int$[ebp]
  0017d	50		 push	 eax
  0017e	51		 push	 ecx
  0017f	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x_start$[ebp]
  00184	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00189	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 284  : 	convert_float_to_int (y_start, &y_start_int);

  0018e	8d 45 c4	 lea	 eax, DWORD PTR _y_start_int$[ebp]
  00191	50		 push	 eax
  00192	51		 push	 ecx
  00193	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y_start$[ebp]
  00198	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019d	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 285  : 
; 286  : 	// draw graphic
; 287  : 
; 288  : 	graphic_x = *graphic ++;

  001a2	8b 45 20	 mov	 eax, DWORD PTR _graphic$[ebp]
  001a5	66 8b 08	 mov	 cx, WORD PTR [eax]
  001a8	66 89 4d fc	 mov	 WORD PTR _graphic_x$[ebp], cx
  001ac	8b 55 20	 mov	 edx, DWORD PTR _graphic$[ebp]
  001af	83 c2 02	 add	 edx, 2
  001b2	89 55 20	 mov	 DWORD PTR _graphic$[ebp], edx

; 289  : 
; 290  : 	graphic_y = *graphic ++;

  001b5	8b 45 20	 mov	 eax, DWORD PTR _graphic$[ebp]
  001b8	66 8b 08	 mov	 cx, WORD PTR [eax]
  001bb	66 89 4d f8	 mov	 WORD PTR _graphic_y$[ebp], cx
  001bf	8b 55 20	 mov	 edx, DWORD PTR _graphic$[ebp]
  001c2	83 c2 02	 add	 edx, 2
  001c5	89 55 20	 mov	 DWORD PTR _graphic$[ebp], edx

; 291  : 
; 292  : 	graphic += (start_y + y_start_int) * graphic_x + x_start_int + start_x;

  001c8	8b 45 1c	 mov	 eax, DWORD PTR _start_y$[ebp]
  001cb	03 45 c4	 add	 eax, DWORD PTR _y_start_int$[ebp]
  001ce	0f b7 4d fc	 movzx	 ecx, WORD PTR _graphic_x$[ebp]
  001d2	0f af c1	 imul	 eax, ecx
  001d5	03 45 c8	 add	 eax, DWORD PTR _x_start_int$[ebp]
  001d8	03 45 18	 add	 eax, DWORD PTR _start_x$[ebp]
  001db	8b 55 20	 mov	 edx, DWORD PTR _graphic$[ebp]
  001de	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  001e1	89 45 20	 mov	 DWORD PTR _graphic$[ebp], eax

; 293  : 
; 294  : 	clip_x_size = int_x2 - int_x1 + 1;

  001e4	8b 45 b8	 mov	 eax, DWORD PTR _int_x2$[ebp]
  001e7	2b 45 c0	 sub	 eax, DWORD PTR _int_x1$[ebp]
  001ea	83 c0 01	 add	 eax, 1
  001ed	89 45 e8	 mov	 DWORD PTR _clip_x_size$[ebp], eax

; 295  : 
; 296  : 	screen_ptr = (unsigned short int *) get_screen_data (active_screen);

  001f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  001f5	50		 push	 eax
  001f6	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  001fb	89 45 f4	 mov	 DWORD PTR _screen_ptr$[ebp], eax

; 297  : 
; 298  : 	screen_pitch = get_screen_pitch (active_screen);

  001fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  00203	50		 push	 eax
  00204	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  00209	89 45 ec	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 299  : 
; 300  : 	screen_pitch = screen_pitch >> 1;

  0020c	8b 45 ec	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  0020f	d1 f8		 sar	 eax, 1
  00211	89 45 ec	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 301  : 
; 302  : 	screen_ptr += screen_pitch * int_y1;

  00214	8b 45 ec	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  00217	0f af 45 bc	 imul	 eax, DWORD PTR _int_y1$[ebp]
  0021b	8b 4d f4	 mov	 ecx, DWORD PTR _screen_ptr$[ebp]
  0021e	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00221	89 55 f4	 mov	 DWORD PTR _screen_ptr$[ebp], edx

; 303  : 
; 304  : 	screen_ptr += int_x1;

  00224	8b 45 c0	 mov	 eax, DWORD PTR _int_x1$[ebp]
  00227	8b 4d f4	 mov	 ecx, DWORD PTR _screen_ptr$[ebp]
  0022a	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0022d	89 55 f4	 mov	 DWORD PTR _screen_ptr$[ebp], edx

; 305  : 
; 306  : 	// which ever is smaller, area or graphic
; 307  : 
; 308  : 	int_y_size = min (int_y2 - int_y1, (int) graphic_y);

  00230	0f b7 45 f8	 movzx	 eax, WORD PTR _graphic_y$[ebp]
  00234	89 85 70 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0023a	8b 4d b4	 mov	 ecx, DWORD PTR _int_y2$[ebp]
  0023d	2b 4d bc	 sub	 ecx, DWORD PTR _int_y1$[ebp]
  00240	89 8d 6c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00246	8d 95 70 ff ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  0024c	52		 push	 edx
  0024d	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00253	50		 push	 eax
  00254	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  00259	8b 08		 mov	 ecx, DWORD PTR [eax]
  0025b	89 4d f0	 mov	 DWORD PTR _int_y_size$[ebp], ecx

; 309  : 
; 310  : 	clip_x_size *= sizeof (short int);

  0025e	8b 45 e8	 mov	 eax, DWORD PTR _clip_x_size$[ebp]
  00261	d1 e0		 shl	 eax, 1
  00263	89 45 e8	 mov	 DWORD PTR _clip_x_size$[ebp], eax

; 311  : 
; 312  : 	for (loop_y = 0; loop_y <= int_y_size; loop_y ++)

  00266	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _loop_y$[ebp], 0
  0026d	eb 09		 jmp	 SHORT $LN4@ui_draw_pa
$LN2@ui_draw_pa:
  0026f	8b 45 e4	 mov	 eax, DWORD PTR _loop_y$[ebp]
  00272	83 c0 01	 add	 eax, 1
  00275	89 45 e4	 mov	 DWORD PTR _loop_y$[ebp], eax
$LN4@ui_draw_pa:
  00278	8b 45 e4	 mov	 eax, DWORD PTR _loop_y$[ebp]
  0027b	3b 45 f0	 cmp	 eax, DWORD PTR _int_y_size$[ebp]
  0027e	7f 2f		 jg	 SHORT $LN3@ui_draw_pa

; 313  : 	{
; 314  : 
; 315  : 		memcpy (screen_ptr, graphic, clip_x_size);

  00280	8b 45 e8	 mov	 eax, DWORD PTR _clip_x_size$[ebp]
  00283	50		 push	 eax
  00284	8b 4d 20	 mov	 ecx, DWORD PTR _graphic$[ebp]
  00287	51		 push	 ecx
  00288	8b 55 f4	 mov	 edx, DWORD PTR _screen_ptr$[ebp]
  0028b	52		 push	 edx
  0028c	e8 00 00 00 00	 call	 _memcpy
  00291	83 c4 0c	 add	 esp, 12			; 0000000cH

; 316  : 
; 317  : 		screen_ptr += screen_pitch;

  00294	8b 45 ec	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  00297	8b 4d f4	 mov	 ecx, DWORD PTR _screen_ptr$[ebp]
  0029a	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0029d	89 55 f4	 mov	 DWORD PTR _screen_ptr$[ebp], edx

; 318  : 
; 319  : 		graphic += graphic_x;

  002a0	0f b7 45 fc	 movzx	 eax, WORD PTR _graphic_x$[ebp]
  002a4	8b 4d 20	 mov	 ecx, DWORD PTR _graphic$[ebp]
  002a7	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  002aa	89 55 20	 mov	 DWORD PTR _graphic$[ebp], edx

; 320  : 	}

  002ad	eb c0		 jmp	 SHORT $LN2@ui_draw_pa
$LN3@ui_draw_pa:
$LN1@ui_draw_pa:

; 321  : }

  002af	5f		 pop	 edi
  002b0	5e		 pop	 esi
  002b1	5b		 pop	 ebx
  002b2	8b e5		 mov	 esp, ebp
  002b4	5d		 pop	 ebp
  002b5	c2 1c 00	 ret	 28			; 0000001cH
?ui_draw_part_graphic@@YGXMMMMHHPAG@Z ENDP		; ui_draw_part_graphic
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\userint2\ui_draw\uigraph.c
;	COMDAT ?ui_draw_graphic@@YGXMMMMPAG@Z
_TEXT	SEGMENT
$T1 = -148						; size = 4
$T2 = -144						; size = 4
_int_y2$ = -76						; size = 4
_int_x2$ = -72						; size = 4
_int_y1$ = -68						; size = 4
_int_x1$ = -64						; size = 4
_y_start_int$ = -60					; size = 4
_x_start_int$ = -56					; size = 4
_new_y2$ = -52						; size = 4
_new_x2$ = -48						; size = 4
_new_y1$ = -44						; size = 4
_new_x1$ = -40						; size = 4
_y_start$ = -36						; size = 4
_x_start$ = -32						; size = 4
_loop_y$ = -28						; size = 4
_clip_x_size$ = -24					; size = 4
_screen_pitch$ = -20					; size = 4
_int_y_size$ = -16					; size = 4
_screen_ptr$ = -12					; size = 4
_graphic_y$ = -8					; size = 2
_graphic_x$ = -4					; size = 2
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
_graphic$ = 24						; size = 4
?ui_draw_graphic@@YGXMMMMPAG@Z PROC			; ui_draw_graphic, COMDAT

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 79   : 
; 80   : 	unsigned short int
; 81   : 		graphic_x,
; 82   : 		graphic_y,
; 83   : 		*screen_ptr;
; 84   : 
; 85   : 	int
; 86   : 		int_y_size,
; 87   : 		screen_pitch,
; 88   : 		clip_x_size,
; 89   : 		loop_y;
; 90   : 
; 91   : 	float
; 92   : 		x_start,
; 93   : 		y_start,
; 94   : 		new_x1,
; 95   : 		new_y1,
; 96   : 		new_x2,
; 97   : 		new_y2;
; 98   : 
; 99   : 	int
; 100  : 		x_start_int,
; 101  : 		y_start_int,
; 102  : 		int_x1,
; 103  : 		int_y1,
; 104  : 		int_x2,
; 105  : 		int_y2;
; 106  : 
; 107  : 	new_x1 = x1;

  0000c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00011	f3 0f 11 45 d8	 movss	 DWORD PTR _new_x1$[ebp], xmm0

; 108  : 
; 109  : 	new_y1 = y1;

  00016	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0001b	f3 0f 11 45 d4	 movss	 DWORD PTR _new_y1$[ebp], xmm0

; 110  : 
; 111  : 	new_x2 = x2;

  00020	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00025	f3 0f 11 45 d0	 movss	 DWORD PTR _new_x2$[ebp], xmm0

; 112  : 
; 113  : 	new_y2 = y2;

  0002a	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y2$[ebp]
  0002f	f3 0f 11 45 cc	 movss	 DWORD PTR _new_y2$[ebp], xmm0

; 114  : 
; 115  : 	//debug_log ("UIGRAPH: graphic %f, %f -> %f, %f", x1, y1, x2, y2);
; 116  : 
; 117  : 	// clip area to ui viewport
; 118  : 
; 119  : 	ui_clip_area (&new_x1, &new_y1, &new_x2, &new_y2);

  00034	8d 45 cc	 lea	 eax, DWORD PTR _new_y2$[ebp]
  00037	50		 push	 eax
  00038	8d 4d d0	 lea	 ecx, DWORD PTR _new_x2$[ebp]
  0003b	51		 push	 ecx
  0003c	8d 55 d4	 lea	 edx, DWORD PTR _new_y1$[ebp]
  0003f	52		 push	 edx
  00040	8d 45 d8	 lea	 eax, DWORD PTR _new_x1$[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?ui_clip_area@@YGHPAM000@Z ; ui_clip_area

; 120  : 
; 121  : 	x_start = new_x1 - x1;

  00049	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _new_x1$[ebp]
  0004e	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _x1$[ebp]
  00053	f3 0f 11 45 e0	 movss	 DWORD PTR _x_start$[ebp], xmm0

; 122  : 
; 123  : 	y_start = new_y1 - y1;

  00058	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _new_y1$[ebp]
  0005d	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _y1$[ebp]
  00062	f3 0f 11 45 dc	 movss	 DWORD PTR _y_start$[ebp], xmm0

; 124  : 
; 125  : 	// button coords should be in viewport coords,
; 126  : 	// so add ui_origin to convert into screen coords
; 127  : 
; 128  : 	x1 += ui_x_origin;

  00067	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x1$[ebp]
  0006c	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_x_origin@@3MA
  00074	f3 0f 11 45 08	 movss	 DWORD PTR _x1$[ebp], xmm0

; 129  : 
; 130  : 	y1 += ui_y_origin;

  00079	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y1$[ebp]
  0007e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_y_origin@@3MA
  00086	f3 0f 11 45 0c	 movss	 DWORD PTR _y1$[ebp], xmm0

; 131  : 
; 132  : 	x2 += ui_x_origin;

  0008b	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x2$[ebp]
  00090	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_x_origin@@3MA
  00098	f3 0f 11 45 10	 movss	 DWORD PTR _x2$[ebp], xmm0

; 133  : 
; 134  : 	y2 += ui_y_origin;

  0009d	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y2$[ebp]
  000a2	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_y_origin@@3MA
  000aa	f3 0f 11 45 14	 movss	 DWORD PTR _y2$[ebp], xmm0

; 135  : 
; 136  : 	new_x1 += ui_x_origin;

  000af	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _new_x1$[ebp]
  000b4	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_x_origin@@3MA
  000bc	f3 0f 11 45 d8	 movss	 DWORD PTR _new_x1$[ebp], xmm0

; 137  : 
; 138  : 	new_y1 += ui_y_origin;

  000c1	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _new_y1$[ebp]
  000c6	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_y_origin@@3MA
  000ce	f3 0f 11 45 d4	 movss	 DWORD PTR _new_y1$[ebp], xmm0

; 139  : 
; 140  : 	new_x2 += ui_x_origin;

  000d3	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _new_x2$[ebp]
  000d8	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_x_origin@@3MA
  000e0	f3 0f 11 45 d0	 movss	 DWORD PTR _new_x2$[ebp], xmm0

; 141  : 
; 142  : 	new_y2 += ui_y_origin;

  000e5	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _new_y2$[ebp]
  000ea	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ui_y_origin@@3MA
  000f2	f3 0f 11 45 cc	 movss	 DWORD PTR _new_y2$[ebp], xmm0

; 143  : 
; 144  : 	// check if possible to draw
; 145  : 
; 146  : 	if ((new_x2 - new_x1 < 2) || (new_y2 - new_y1 <= 2))

  000f7	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _new_x2$[ebp]
  000fc	f3 0f 5c 45 d8	 subss	 xmm0, DWORD PTR _new_x1$[ebp]
  00101	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  00109	0f 2f c8	 comiss	 xmm1, xmm0
  0010c	77 17		 ja	 SHORT $LN6@ui_draw_gr
  0010e	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _new_y2$[ebp]
  00113	f3 0f 5c 45 d4	 subss	 xmm0, DWORD PTR _new_y1$[ebp]
  00118	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  00120	0f 2f c8	 comiss	 xmm1, xmm0
  00123	72 05		 jb	 SHORT $LN5@ui_draw_gr
$LN6@ui_draw_gr:

; 147  : 	{
; 148  : 
; 149  : 		return;

  00125	e9 7d 01 00 00	 jmp	 $LN1@ui_draw_gr
$LN5@ui_draw_gr:

; 150  : 	}
; 151  : 
; 152  : 	// convert variabless to ints to save crap conversion
; 153  : 
; 154  : 	convert_float_to_int (new_x1, &int_x1);

  0012a	8d 45 c0	 lea	 eax, DWORD PTR _int_x1$[ebp]
  0012d	50		 push	 eax
  0012e	51		 push	 ecx
  0012f	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _new_x1$[ebp]
  00134	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00139	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 155  : 	convert_float_to_int (new_y1, &int_y1);

  0013e	8d 45 bc	 lea	 eax, DWORD PTR _int_y1$[ebp]
  00141	50		 push	 eax
  00142	51		 push	 ecx
  00143	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _new_y1$[ebp]
  00148	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014d	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 156  : 	convert_float_to_int (new_x2, &int_x2);

  00152	8d 45 b8	 lea	 eax, DWORD PTR _int_x2$[ebp]
  00155	50		 push	 eax
  00156	51		 push	 ecx
  00157	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _new_x2$[ebp]
  0015c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00161	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 157  : 	convert_float_to_int (new_y2, &int_y2);

  00166	8d 45 b4	 lea	 eax, DWORD PTR _int_y2$[ebp]
  00169	50		 push	 eax
  0016a	51		 push	 ecx
  0016b	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _new_y2$[ebp]
  00170	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00175	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 158  : 	convert_float_to_int (x_start, &x_start_int);

  0017a	8d 45 c8	 lea	 eax, DWORD PTR _x_start_int$[ebp]
  0017d	50		 push	 eax
  0017e	51		 push	 ecx
  0017f	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x_start$[ebp]
  00184	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00189	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 159  : 	convert_float_to_int (y_start, &y_start_int);

  0018e	8d 45 c4	 lea	 eax, DWORD PTR _y_start_int$[ebp]
  00191	50		 push	 eax
  00192	51		 push	 ecx
  00193	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y_start$[ebp]
  00198	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019d	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 160  : 
; 161  : 	// draw graphic
; 162  : 
; 163  : 	graphic_x = *graphic ++;

  001a2	8b 45 18	 mov	 eax, DWORD PTR _graphic$[ebp]
  001a5	66 8b 08	 mov	 cx, WORD PTR [eax]
  001a8	66 89 4d fc	 mov	 WORD PTR _graphic_x$[ebp], cx
  001ac	8b 55 18	 mov	 edx, DWORD PTR _graphic$[ebp]
  001af	83 c2 02	 add	 edx, 2
  001b2	89 55 18	 mov	 DWORD PTR _graphic$[ebp], edx

; 164  : 
; 165  : 	graphic_y = *graphic ++;

  001b5	8b 45 18	 mov	 eax, DWORD PTR _graphic$[ebp]
  001b8	66 8b 08	 mov	 cx, WORD PTR [eax]
  001bb	66 89 4d f8	 mov	 WORD PTR _graphic_y$[ebp], cx
  001bf	8b 55 18	 mov	 edx, DWORD PTR _graphic$[ebp]
  001c2	83 c2 02	 add	 edx, 2
  001c5	89 55 18	 mov	 DWORD PTR _graphic$[ebp], edx

; 166  : 
; 167  : 	graphic += y_start_int * graphic_x + x_start_int;

  001c8	0f b7 45 fc	 movzx	 eax, WORD PTR _graphic_x$[ebp]
  001cc	0f af 45 c4	 imul	 eax, DWORD PTR _y_start_int$[ebp]
  001d0	03 45 c8	 add	 eax, DWORD PTR _x_start_int$[ebp]
  001d3	8b 4d 18	 mov	 ecx, DWORD PTR _graphic$[ebp]
  001d6	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  001d9	89 55 18	 mov	 DWORD PTR _graphic$[ebp], edx

; 168  : 
; 169  : 	clip_x_size = int_x2 - int_x1 + 1;

  001dc	8b 45 b8	 mov	 eax, DWORD PTR _int_x2$[ebp]
  001df	2b 45 c0	 sub	 eax, DWORD PTR _int_x1$[ebp]
  001e2	83 c0 01	 add	 eax, 1
  001e5	89 45 e8	 mov	 DWORD PTR _clip_x_size$[ebp], eax

; 170  : 
; 171  : 	screen_ptr = (unsigned short int *) get_screen_data (active_screen);

  001e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  001ed	50		 push	 eax
  001ee	e8 00 00 00 00	 call	 ?get_screen_data@@YGPAEPAUSCREEN@@@Z ; get_screen_data
  001f3	89 45 f4	 mov	 DWORD PTR _screen_ptr$[ebp], eax

; 172  : 
; 173  : 	screen_pitch = get_screen_pitch (active_screen);

  001f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_screen@@3PAUSCREEN@@A ; active_screen
  001fb	50		 push	 eax
  001fc	e8 00 00 00 00	 call	 ?get_screen_pitch@@YGHPAUSCREEN@@@Z ; get_screen_pitch
  00201	89 45 ec	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 174  : 
; 175  : 	screen_pitch = screen_pitch >> 1;

  00204	8b 45 ec	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  00207	d1 f8		 sar	 eax, 1
  00209	89 45 ec	 mov	 DWORD PTR _screen_pitch$[ebp], eax

; 176  : 
; 177  : 	screen_ptr += screen_pitch * int_y1;

  0020c	8b 45 ec	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  0020f	0f af 45 bc	 imul	 eax, DWORD PTR _int_y1$[ebp]
  00213	8b 4d f4	 mov	 ecx, DWORD PTR _screen_ptr$[ebp]
  00216	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00219	89 55 f4	 mov	 DWORD PTR _screen_ptr$[ebp], edx

; 178  : 
; 179  : 	screen_ptr += int_x1;

  0021c	8b 45 c0	 mov	 eax, DWORD PTR _int_x1$[ebp]
  0021f	8b 4d f4	 mov	 ecx, DWORD PTR _screen_ptr$[ebp]
  00222	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00225	89 55 f4	 mov	 DWORD PTR _screen_ptr$[ebp], edx

; 180  : 
; 181  : 	// which ever is smaller, area or graphic
; 182  : 
; 183  : 	int_y_size = min (int_y2 - int_y1, (int) graphic_y);

  00228	0f b7 45 f8	 movzx	 eax, WORD PTR _graphic_y$[ebp]
  0022c	89 85 70 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00232	8b 4d b4	 mov	 ecx, DWORD PTR _int_y2$[ebp]
  00235	2b 4d bc	 sub	 ecx, DWORD PTR _int_y1$[ebp]
  00238	89 8d 6c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  0023e	8d 95 70 ff ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  00244	52		 push	 edx
  00245	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0024b	50		 push	 eax
  0024c	e8 00 00 00 00	 call	 ??$min@H@std@@YGABHABH0@Z ; std::min<int>
  00251	8b 08		 mov	 ecx, DWORD PTR [eax]
  00253	89 4d f0	 mov	 DWORD PTR _int_y_size$[ebp], ecx

; 184  : 
; 185  : 	clip_x_size *= sizeof (short int);

  00256	8b 45 e8	 mov	 eax, DWORD PTR _clip_x_size$[ebp]
  00259	d1 e0		 shl	 eax, 1
  0025b	89 45 e8	 mov	 DWORD PTR _clip_x_size$[ebp], eax

; 186  : 
; 187  : 	for (loop_y = 0; loop_y <= int_y_size; loop_y ++)

  0025e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _loop_y$[ebp], 0
  00265	eb 09		 jmp	 SHORT $LN4@ui_draw_gr
$LN2@ui_draw_gr:
  00267	8b 45 e4	 mov	 eax, DWORD PTR _loop_y$[ebp]
  0026a	83 c0 01	 add	 eax, 1
  0026d	89 45 e4	 mov	 DWORD PTR _loop_y$[ebp], eax
$LN4@ui_draw_gr:
  00270	8b 45 e4	 mov	 eax, DWORD PTR _loop_y$[ebp]
  00273	3b 45 f0	 cmp	 eax, DWORD PTR _int_y_size$[ebp]
  00276	7f 2f		 jg	 SHORT $LN3@ui_draw_gr

; 188  : 	{
; 189  : 
; 190  : 		memcpy (screen_ptr, graphic, clip_x_size);

  00278	8b 45 e8	 mov	 eax, DWORD PTR _clip_x_size$[ebp]
  0027b	50		 push	 eax
  0027c	8b 4d 18	 mov	 ecx, DWORD PTR _graphic$[ebp]
  0027f	51		 push	 ecx
  00280	8b 55 f4	 mov	 edx, DWORD PTR _screen_ptr$[ebp]
  00283	52		 push	 edx
  00284	e8 00 00 00 00	 call	 _memcpy
  00289	83 c4 0c	 add	 esp, 12			; 0000000cH

; 191  : 
; 192  : 		screen_ptr += screen_pitch;

  0028c	8b 45 ec	 mov	 eax, DWORD PTR _screen_pitch$[ebp]
  0028f	8b 4d f4	 mov	 ecx, DWORD PTR _screen_ptr$[ebp]
  00292	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00295	89 55 f4	 mov	 DWORD PTR _screen_ptr$[ebp], edx

; 193  : 
; 194  : 		graphic += graphic_x;

  00298	0f b7 45 fc	 movzx	 eax, WORD PTR _graphic_x$[ebp]
  0029c	8b 4d 18	 mov	 ecx, DWORD PTR _graphic$[ebp]
  0029f	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  002a2	89 55 18	 mov	 DWORD PTR _graphic$[ebp], edx

; 195  : 	}

  002a5	eb c0		 jmp	 SHORT $LN2@ui_draw_gr
$LN3@ui_draw_gr:
$LN1@ui_draw_gr:

; 196  : }

  002a7	5f		 pop	 edi
  002a8	5e		 pop	 esi
  002a9	5b		 pop	 ebx
  002aa	8b e5		 mov	 esp, ebp
  002ac	5d		 pop	 ebp
  002ad	c2 14 00	 ret	 20			; 00000014H
?ui_draw_graphic@@YGXMMMMPAG@Z ENDP			; ui_draw_graphic
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?floor@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?floor@@YGMM@Z PROC					; floor, COMDAT

; 122  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 123  : 	return (_CSTD floorf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _floorf
  00019	83 c4 04	 add	 esp, 4

; 124  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?floor@@YGMM@Z ENDP					; floor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?ceil@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?ceil@@YGMM@Z PROC					; ceil, COMDAT

; 66   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 67   : 	return (_CSTD ceilf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _ceilf
  00019	83 c4 04	 add	 esp, 4

; 68   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?ceil@@YGMM@Z ENDP					; ceil
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _floorf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_floorf	PROC						; COMDAT

; 685  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 686  :             return (float)floor(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  0001c	83 c4 08	 add	 esp, 8
  0001f	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00022	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 687  :         }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
_floorf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _ceilf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_ceilf	PROC						; COMDAT

; 643  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 644  :             return (float)ceil(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  0001c	83 c4 08	 add	 esp, 8
  0001f	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00022	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 645  :         }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
_ceilf	ENDP
_TEXT	ENDS
END
