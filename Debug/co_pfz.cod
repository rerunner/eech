; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\gunships\avionics\common\co_pfz.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?current_pfz@@3IA				; current_pfz
PUBLIC	?next_free_pfz@@3IA				; next_free_pfz
PUBLIC	?next_free_nfz@@3IA				; next_free_nfz
_BSS	SEGMENT
?next_free_pfz@@3IA DD 01H DUP (?)			; next_free_pfz
?next_free_nfz@@3IA DD 01H DUP (?)			; next_free_nfz
_BSS	ENDS
_DATA	SEGMENT
?current_pfz@@3IA DD 0ffffffffH				; current_pfz
_DATA	ENDS
PUBLIC	?get_pfz@@YGPAUpfz@@I@Z				; get_pfz
PUBLIC	?get_nfz@@YGPAUpfz@@I@Z				; get_nfz
PUBLIC	?delete_pfz@@YGXI@Z				; delete_pfz
PUBLIC	?delete_nfz@@YGXI@Z				; delete_nfz
PUBLIC	?add_pfz@@YGXPAUVEC3D@@000@Z			; add_pfz
PUBLIC	?add_nfz@@YGXPAUVEC3D@@000@Z			; add_nfz
PUBLIC	?relative_position_to_world_coordinate@@YGXPAUVEC3D@@0QAY02M@Z ; relative_position_to_world_coordinate
PUBLIC	?world_coordinate_to_relative_position@@YGXPAUVEC3D@@0QAY02M@Z ; world_coordinate_to_relative_position
PUBLIC	?coordinate_is_inside_pfz@@YGHPAUVEC3D@@IH@Z	; coordinate_is_inside_pfz
PUBLIC	?coordinate_is_inside_square@@YGHPAUVEC3D@@0000@Z ; coordinate_is_inside_square
PUBLIC	?select_next_pfz@@YGXXZ				; select_next_pfz
PUBLIC	?select_previous_pfz@@YGXXZ			; select_previous_pfz
PUBLIC	?deselect_pfz@@YGXXZ				; deselect_pfz
PUBLIC	?delete_current_pfz@@YGXXZ			; delete_current_pfz
PUBLIC	?is_valid_pfz_target@@YGHPAUVEC3D@@@Z		; is_valid_pfz_target
PUBLIC	?pfz_active@@YGHXZ				; pfz_active
PUBLIC	?__LINE__Var@?0??get_pfz@@YGPAUpfz@@I@Z@4JA	; `get_pfz'::`1'::__LINE__Var
PUBLIC	??_C@_0EO@PFPAFEAF@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_0BL@PBODPHKH@pfz_number?5?$DM?5next_free_pfz@ ; `string'
PUBLIC	?__LINE__Var@?0??get_nfz@@YGPAUpfz@@I@Z@4JA	; `get_nfz'::`1'::__LINE__Var
PUBLIC	??_C@_0BL@GBIKPHBD@nfz_number?5?$DM?5next_free_nfz@ ; `string'
PUBLIC	?__LINE__Var@?0??delete_pfz@@YGXI@Z@4JA		; `delete_pfz'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??delete_nfz@@YGXI@Z@4JA		; `delete_nfz'::`1'::__LINE__Var
PUBLIC	__real@00000000
EXTRN	_memmove:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z:PROC ; multiply_matrix3x3_vec3d
EXTRN	?update_common_ground_radar@@YGXH@Z:PROC	; update_common_ground_radar
EXTRN	?ground_radar_is_active@@YGHXZ:PROC		; ground_radar_is_active
EXTRN	?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A:DWORD ; current_flight_dynamics
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?pfzs@@3PAUpfz@@A DB 0300H DUP (?)			; pfzs
?nfzs@@3PAUpfz@@A DB 0c0H DUP (?)			; nfzs
_BSS	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??delete_nfz@@YGXI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??delete_nfz@@YGXI@Z@4JA DD 038H		; `delete_nfz'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??delete_pfz@@YGXI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??delete_pfz@@YGXI@Z@4JA DD 02aH		; `delete_pfz'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BL@GBIKPHBD@nfz_number?5?$DM?5next_free_nfz@
CONST	SEGMENT
??_C@_0BL@GBIKPHBD@nfz_number?5?$DM?5next_free_nfz@ DB 'nfz_number < next'
	DB	'_free_nfz', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_nfz@@YGPAUpfz@@I@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_nfz@@YGPAUpfz@@I@Z@4JA DD 023H	; `get_nfz'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BL@PBODPHKH@pfz_number?5?$DM?5next_free_pfz@
CONST	SEGMENT
??_C@_0BL@PBODPHKH@pfz_number?5?$DM?5next_free_pfz@ DB 'pfz_number < next'
	DB	'_free_pfz', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@PFPAFEAF@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EO@PFPAFEAF@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nh'
	DB	'v90\projects\eech\aphavoc\source\gunships\avionics\common\co_'
	DB	'pfz.c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_pfz@@YGPAUpfz@@I@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_pfz@@YGPAUpfz@@I@Z@4JA DD 01cH	; `get_pfz'::`1'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_pfz.c
;	COMDAT ?pfz_active@@YGHXZ
_TEXT	SEGMENT
tv65 = -68						; size = 4
?pfz_active@@YGHXZ PROC					; pfz_active, COMDAT

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 233  : 	return current_pfz != NO_PFZ;	

  00009	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?current_pfz@@3IA, -1 ; current_pfz
  00010	74 09		 je	 SHORT $LN3@pfz_active
  00012	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  00019	eb 07		 jmp	 SHORT $LN4@pfz_active
$LN3@pfz_active:
  0001b	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$LN4@pfz_active:
  00022	8b 45 bc	 mov	 eax, DWORD PTR tv65[ebp]

; 234  : }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?pfz_active@@YGHXZ ENDP					; pfz_active
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_pfz.c
;	COMDAT ?is_valid_pfz_target@@YGHPAUVEC3D@@@Z
_TEXT	SEGMENT
_i$ = -4						; size = 4
_target_position$ = 8					; size = 4
?is_valid_pfz_target@@YGHPAUVEC3D@@@Z PROC		; is_valid_pfz_target, COMDAT

; 213  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 214  : 	unsigned int i;
; 215  : 
; 216  : 	// If we have an active PFZ check that if position is inside it
; 217  : 	if (current_pfz != NO_PFZ
; 218  : 		&& !coordinate_is_inside_pfz(target_position, current_pfz, FALSE))

  00009	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?current_pfz@@3IA, -1 ; current_pfz
  00010	74 19		 je	 SHORT $LN5@is_valid_p
  00012	6a 00		 push	 0
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pfz@@3IA ; current_pfz
  00019	50		 push	 eax
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR _target_position$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 ?coordinate_is_inside_pfz@@YGHPAUVEC3D@@IH@Z ; coordinate_is_inside_pfz
  00023	85 c0		 test	 eax, eax
  00025	75 04		 jne	 SHORT $LN5@is_valid_p

; 219  : 	{
; 220  : 		return FALSE;

  00027	33 c0		 xor	 eax, eax
  00029	eb 3b		 jmp	 SHORT $LN1@is_valid_p
$LN5@is_valid_p:

; 221  : 	}
; 222  : 	
; 223  : 	// If it is check that it is also not in a No Fire Zone
; 224  : 	for (i=0; i < next_free_nfz; i++)

  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00032	eb 09		 jmp	 SHORT $LN4@is_valid_p
$LN2@is_valid_p:
  00034	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00037	83 c0 01	 add	 eax, 1
  0003a	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@is_valid_p:
  0003d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00040	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?next_free_nfz@@3IA ; next_free_nfz
  00046	73 19		 jae	 SHORT $LN3@is_valid_p

; 225  : 		if (coordinate_is_inside_pfz(target_position, i, TRUE))

  00048	6a 01		 push	 1
  0004a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0004d	50		 push	 eax
  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _target_position$[ebp]
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 ?coordinate_is_inside_pfz@@YGHPAUVEC3D@@IH@Z ; coordinate_is_inside_pfz
  00057	85 c0		 test	 eax, eax
  00059	74 04		 je	 SHORT $LN6@is_valid_p

; 226  : 			return FALSE;	

  0005b	33 c0		 xor	 eax, eax
  0005d	eb 07		 jmp	 SHORT $LN1@is_valid_p
$LN6@is_valid_p:

; 227  : 
; 228  : 	return TRUE;

  0005f	eb d3		 jmp	 SHORT $LN2@is_valid_p
$LN3@is_valid_p:
  00061	b8 01 00 00 00	 mov	 eax, 1
$LN1@is_valid_p:

; 229  : }

  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c2 04 00	 ret	 4
?is_valid_pfz_target@@YGHPAUVEC3D@@@Z ENDP		; is_valid_pfz_target
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_pfz.c
;	COMDAT ?delete_current_pfz@@YGXXZ
_TEXT	SEGMENT
?delete_current_pfz@@YGXXZ PROC				; delete_current_pfz, COMDAT

; 207  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 208  : 	if (current_pfz != NO_PFZ)

  00009	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?current_pfz@@3IA, -1 ; current_pfz
  00010	74 0b		 je	 SHORT $LN1@delete_cur

; 209  : 		delete_pfz((unsigned int)current_pfz);

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pfz@@3IA ; current_pfz
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ?delete_pfz@@YGXI@Z	; delete_pfz
$LN1@delete_cur:

; 210  : }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?delete_current_pfz@@YGXXZ ENDP				; delete_current_pfz
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_pfz.c
;	COMDAT ?deselect_pfz@@YGXXZ
_TEXT	SEGMENT
?deselect_pfz@@YGXXZ PROC				; deselect_pfz, COMDAT

; 200  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 201  : 	current_pfz = NO_PFZ;

  00009	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?current_pfz@@3IA, -1 ; current_pfz

; 202  : 	if (!ground_radar_is_active())

  00013	e8 00 00 00 00	 call	 ?ground_radar_is_active@@YGHXZ ; ground_radar_is_active
  00018	85 c0		 test	 eax, eax
  0001a	75 07		 jne	 SHORT $LN1@deselect_p

; 203  : 		update_common_ground_radar (TRUE);

  0001c	6a 01		 push	 1
  0001e	e8 00 00 00 00	 call	 ?update_common_ground_radar@@YGXH@Z ; update_common_ground_radar
$LN1@deselect_p:

; 204  : }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?deselect_pfz@@YGXXZ ENDP				; deselect_pfz
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_pfz.c
;	COMDAT ?select_previous_pfz@@YGXXZ
_TEXT	SEGMENT
?select_previous_pfz@@YGXXZ PROC			; select_previous_pfz, COMDAT

; 185  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 186  : 	if (next_free_pfz)  // there are any PFZs

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?next_free_pfz@@3IA, 0 ; next_free_pfz
  00010	74 30		 je	 SHORT $LN2@select_pre

; 187  : 	{
; 188  : 		current_pfz--;

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pfz@@3IA ; current_pfz
  00017	83 e8 01	 sub	 eax, 1
  0001a	a3 00 00 00 00	 mov	 DWORD PTR ?current_pfz@@3IA, eax ; current_pfz

; 189  : 		
; 190  : 		if (current_pfz >= next_free_pfz)

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pfz@@3IA ; current_pfz
  00024	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?next_free_pfz@@3IA ; next_free_pfz
  0002a	72 0d		 jb	 SHORT $LN4@select_pre

; 191  : 			current_pfz = next_free_pfz-1;

  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?next_free_pfz@@3IA ; next_free_pfz
  00031	83 e8 01	 sub	 eax, 1
  00034	a3 00 00 00 00	 mov	 DWORD PTR ?current_pfz@@3IA, eax ; current_pfz
$LN4@select_pre:

; 192  : 
; 193  : 		update_common_ground_radar (TRUE);

  00039	6a 01		 push	 1
  0003b	e8 00 00 00 00	 call	 ?update_common_ground_radar@@YGXH@Z ; update_common_ground_radar

; 194  : 	}
; 195  : 	else

  00040	eb 0a		 jmp	 SHORT $LN1@select_pre
$LN2@select_pre:

; 196  : 		current_pfz = NO_PFZ;

  00042	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?current_pfz@@3IA, -1 ; current_pfz
$LN1@select_pre:

; 197  : }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
?select_previous_pfz@@YGXXZ ENDP			; select_previous_pfz
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_pfz.c
;	COMDAT ?select_next_pfz@@YGXXZ
_TEXT	SEGMENT
?select_next_pfz@@YGXXZ PROC				; select_next_pfz, COMDAT

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 170  : 	if (next_free_pfz)  // there are any PFZs

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?next_free_pfz@@3IA, 0 ; next_free_pfz
  00010	74 36		 je	 SHORT $LN2@select_nex

; 171  : 	{
; 172  : 		current_pfz++;

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pfz@@3IA ; current_pfz
  00017	83 c0 01	 add	 eax, 1
  0001a	a3 00 00 00 00	 mov	 DWORD PTR ?current_pfz@@3IA, eax ; current_pfz

; 173  : 		
; 174  : 		if (current_pfz >= next_free_pfz)

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pfz@@3IA ; current_pfz
  00024	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?next_free_pfz@@3IA ; next_free_pfz
  0002a	72 0a		 jb	 SHORT $LN4@select_nex

; 175  : 			current_pfz = 0;

  0002c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?current_pfz@@3IA, 0 ; current_pfz
$LN4@select_nex:

; 176  : 
; 177  : 		if (!ground_radar_is_active())

  00036	e8 00 00 00 00	 call	 ?ground_radar_is_active@@YGHXZ ; ground_radar_is_active
  0003b	85 c0		 test	 eax, eax
  0003d	75 07		 jne	 SHORT $LN5@select_nex

; 178  : 			update_common_ground_radar (TRUE);

  0003f	6a 01		 push	 1
  00041	e8 00 00 00 00	 call	 ?update_common_ground_radar@@YGXH@Z ; update_common_ground_radar
$LN5@select_nex:

; 179  : 	}
; 180  : 	else

  00046	eb 0a		 jmp	 SHORT $LN1@select_nex
$LN2@select_nex:

; 181  : 		current_pfz = NO_PFZ;

  00048	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?current_pfz@@3IA, -1 ; current_pfz
$LN1@select_nex:

; 182  : }

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
?select_next_pfz@@YGXXZ ENDP				; select_next_pfz
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_pfz.c
;	COMDAT ?coordinate_is_inside_square@@YGHPAUVEC3D@@0000@Z
_TEXT	SEGMENT
tv80 = -76						; size = 4
_winding_direction$ = -8				; size = 4
_negative$ = -4						; size = 4
_coordinate$ = 8					; size = 4
_corner1$ = 12						; size = 4
_corner2$ = 16						; size = 4
_corner3$ = 20						; size = 4
_corner4$ = 24						; size = 4
?coordinate_is_inside_square@@YGHPAUVEC3D@@0000@Z PROC	; coordinate_is_inside_square, COMDAT

; 140  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 141  : 	int negative;
; 142  : 	float winding_direction;
; 143  : 
; 144  : 	winding_direction = (coordinate->z - corner1->z) * (corner2->x - corner1->x)

  00009	8b 45 08	 mov	 eax, DWORD PTR _coordinate$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _corner1$[ebp]
  0000f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00014	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00019	8b 55 10	 mov	 edx, DWORD PTR _corner2$[ebp]
  0001c	8b 45 0c	 mov	 eax, DWORD PTR _corner1$[ebp]
  0001f	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  00023	f3 0f 5c 08	 subss	 xmm1, DWORD PTR [eax]
  00027	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _coordinate$[ebp]
  0002e	8b 55 0c	 mov	 edx, DWORD PTR _corner1$[ebp]
  00031	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  00035	f3 0f 5c 0a	 subss	 xmm1, DWORD PTR [edx]
  00039	8b 45 10	 mov	 eax, DWORD PTR _corner2$[ebp]
  0003c	8b 4d 0c	 mov	 ecx, DWORD PTR _corner1$[ebp]
  0003f	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  00044	f3 0f 5c 51 08	 subss	 xmm2, DWORD PTR [ecx+8]
  00049	f3 0f 59 ca	 mulss	 xmm1, xmm2
  0004d	f3 0f 5c c1	 subss	 xmm0, xmm1
  00051	f3 0f 11 45 f8	 movss	 DWORD PTR _winding_direction$[ebp], xmm0

; 145  : 					  - (coordinate->x - corner1->x) * (corner2->z - corner1->z);
; 146  : 	negative = (winding_direction < 0);

  00056	0f 57 c0	 xorps	 xmm0, xmm0
  00059	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _winding_direction$[ebp]
  0005d	76 09		 jbe	 SHORT $LN12@coordinate
  0005f	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv80[ebp], 1
  00066	eb 07		 jmp	 SHORT $LN13@coordinate
$LN12@coordinate:
  00068	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN13@coordinate:
  0006f	8b 45 b4	 mov	 eax, DWORD PTR tv80[ebp]
  00072	89 45 fc	 mov	 DWORD PTR _negative$[ebp], eax

; 147  : 
; 148  : 	winding_direction = (coordinate->z - corner2->z) * (corner3->x - corner2->x)

  00075	8b 45 08	 mov	 eax, DWORD PTR _coordinate$[ebp]
  00078	8b 4d 10	 mov	 ecx, DWORD PTR _corner2$[ebp]
  0007b	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00080	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00085	8b 55 14	 mov	 edx, DWORD PTR _corner3$[ebp]
  00088	8b 45 10	 mov	 eax, DWORD PTR _corner2$[ebp]
  0008b	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  0008f	f3 0f 5c 08	 subss	 xmm1, DWORD PTR [eax]
  00093	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00097	8b 4d 08	 mov	 ecx, DWORD PTR _coordinate$[ebp]
  0009a	8b 55 10	 mov	 edx, DWORD PTR _corner2$[ebp]
  0009d	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  000a1	f3 0f 5c 0a	 subss	 xmm1, DWORD PTR [edx]
  000a5	8b 45 14	 mov	 eax, DWORD PTR _corner3$[ebp]
  000a8	8b 4d 10	 mov	 ecx, DWORD PTR _corner2$[ebp]
  000ab	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  000b0	f3 0f 5c 51 08	 subss	 xmm2, DWORD PTR [ecx+8]
  000b5	f3 0f 59 ca	 mulss	 xmm1, xmm2
  000b9	f3 0f 5c c1	 subss	 xmm0, xmm1
  000bd	f3 0f 11 45 f8	 movss	 DWORD PTR _winding_direction$[ebp], xmm0

; 149  : 					  - (coordinate->x - corner2->x) * (corner3->z - corner2->z);
; 150  : 	if ((negative && winding_direction > 0) || (!negative && winding_direction < 0))

  000c2	83 7d fc 00	 cmp	 DWORD PTR _negative$[ebp], 0
  000c6	74 0e		 je	 SHORT $LN4@coordinate
  000c8	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _winding_direction$[ebp]
  000cd	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  000d4	77 0f		 ja	 SHORT $LN3@coordinate
$LN4@coordinate:
  000d6	83 7d fc 00	 cmp	 DWORD PTR _negative$[ebp], 0
  000da	75 10		 jne	 SHORT $LN2@coordinate
  000dc	0f 57 c0	 xorps	 xmm0, xmm0
  000df	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _winding_direction$[ebp]
  000e3	76 07		 jbe	 SHORT $LN2@coordinate
$LN3@coordinate:

; 151  : 		return FALSE;

  000e5	33 c0		 xor	 eax, eax
  000e7	e9 ed 00 00 00	 jmp	 $LN1@coordinate
$LN2@coordinate:

; 152  : 	
; 153  : 	winding_direction = (coordinate->z - corner3->z) * (corner4->x - corner3->x)

  000ec	8b 45 08	 mov	 eax, DWORD PTR _coordinate$[ebp]
  000ef	8b 4d 14	 mov	 ecx, DWORD PTR _corner3$[ebp]
  000f2	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000f7	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  000fc	8b 55 18	 mov	 edx, DWORD PTR _corner4$[ebp]
  000ff	8b 45 14	 mov	 eax, DWORD PTR _corner3$[ebp]
  00102	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  00106	f3 0f 5c 08	 subss	 xmm1, DWORD PTR [eax]
  0010a	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0010e	8b 4d 08	 mov	 ecx, DWORD PTR _coordinate$[ebp]
  00111	8b 55 14	 mov	 edx, DWORD PTR _corner3$[ebp]
  00114	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  00118	f3 0f 5c 0a	 subss	 xmm1, DWORD PTR [edx]
  0011c	8b 45 18	 mov	 eax, DWORD PTR _corner4$[ebp]
  0011f	8b 4d 14	 mov	 ecx, DWORD PTR _corner3$[ebp]
  00122	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  00127	f3 0f 5c 51 08	 subss	 xmm2, DWORD PTR [ecx+8]
  0012c	f3 0f 59 ca	 mulss	 xmm1, xmm2
  00130	f3 0f 5c c1	 subss	 xmm0, xmm1
  00134	f3 0f 11 45 f8	 movss	 DWORD PTR _winding_direction$[ebp], xmm0

; 154  : 					  - (coordinate->x - corner3->x) * (corner4->z - corner3->z);
; 155  : 	if ((negative && winding_direction > 0) || (!negative && winding_direction < 0))

  00139	83 7d fc 00	 cmp	 DWORD PTR _negative$[ebp], 0
  0013d	74 0e		 je	 SHORT $LN7@coordinate
  0013f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _winding_direction$[ebp]
  00144	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0014b	77 0f		 ja	 SHORT $LN6@coordinate
$LN7@coordinate:
  0014d	83 7d fc 00	 cmp	 DWORD PTR _negative$[ebp], 0
  00151	75 0d		 jne	 SHORT $LN5@coordinate
  00153	0f 57 c0	 xorps	 xmm0, xmm0
  00156	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _winding_direction$[ebp]
  0015a	76 04		 jbe	 SHORT $LN5@coordinate
$LN6@coordinate:

; 156  : 		return FALSE;

  0015c	33 c0		 xor	 eax, eax
  0015e	eb 79		 jmp	 SHORT $LN1@coordinate
$LN5@coordinate:

; 157  : 
; 158  : 	winding_direction = (coordinate->z - corner4->z) * (corner1->x - corner4->x)

  00160	8b 45 08	 mov	 eax, DWORD PTR _coordinate$[ebp]
  00163	8b 4d 18	 mov	 ecx, DWORD PTR _corner4$[ebp]
  00166	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0016b	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00170	8b 55 0c	 mov	 edx, DWORD PTR _corner1$[ebp]
  00173	8b 45 18	 mov	 eax, DWORD PTR _corner4$[ebp]
  00176	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  0017a	f3 0f 5c 08	 subss	 xmm1, DWORD PTR [eax]
  0017e	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00182	8b 4d 08	 mov	 ecx, DWORD PTR _coordinate$[ebp]
  00185	8b 55 18	 mov	 edx, DWORD PTR _corner4$[ebp]
  00188	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  0018c	f3 0f 5c 0a	 subss	 xmm1, DWORD PTR [edx]
  00190	8b 45 0c	 mov	 eax, DWORD PTR _corner1$[ebp]
  00193	8b 4d 18	 mov	 ecx, DWORD PTR _corner4$[ebp]
  00196	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  0019b	f3 0f 5c 51 08	 subss	 xmm2, DWORD PTR [ecx+8]
  001a0	f3 0f 59 ca	 mulss	 xmm1, xmm2
  001a4	f3 0f 5c c1	 subss	 xmm0, xmm1
  001a8	f3 0f 11 45 f8	 movss	 DWORD PTR _winding_direction$[ebp], xmm0

; 159  : 					  - (coordinate->x - corner4->x) * (corner1->z - corner4->z);
; 160  : 	if ((negative && winding_direction > 0) || (!negative && winding_direction < 0))

  001ad	83 7d fc 00	 cmp	 DWORD PTR _negative$[ebp], 0
  001b1	74 0e		 je	 SHORT $LN10@coordinate
  001b3	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _winding_direction$[ebp]
  001b8	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  001bf	77 0f		 ja	 SHORT $LN9@coordinate
$LN10@coordinate:
  001c1	83 7d fc 00	 cmp	 DWORD PTR _negative$[ebp], 0
  001c5	75 0d		 jne	 SHORT $LN8@coordinate
  001c7	0f 57 c0	 xorps	 xmm0, xmm0
  001ca	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _winding_direction$[ebp]
  001ce	76 04		 jbe	 SHORT $LN8@coordinate
$LN9@coordinate:

; 161  : 		return FALSE;

  001d0	33 c0		 xor	 eax, eax
  001d2	eb 05		 jmp	 SHORT $LN1@coordinate
$LN8@coordinate:

; 162  : 
; 163  : 	return TRUE;	

  001d4	b8 01 00 00 00	 mov	 eax, 1
$LN1@coordinate:

; 164  : }

  001d9	5f		 pop	 edi
  001da	5e		 pop	 esi
  001db	5b		 pop	 ebx
  001dc	8b e5		 mov	 esp, ebp
  001de	5d		 pop	 ebp
  001df	c2 14 00	 ret	 20			; 00000014H
?coordinate_is_inside_square@@YGHPAUVEC3D@@0000@Z ENDP	; coordinate_is_inside_square
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_pfz.c
;	COMDAT ?coordinate_is_inside_pfz@@YGHPAUVEC3D@@IH@Z
_TEXT	SEGMENT
_coordinate$ = 8					; size = 4
_pfz_number$ = 12					; size = 4
_is_nfz$ = 16						; size = 4
?coordinate_is_inside_pfz@@YGHPAUVEC3D@@IH@Z PROC	; coordinate_is_inside_pfz, COMDAT

; 124  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 125  : 	if (is_nfz)

  00009	83 7d 10 00	 cmp	 DWORD PTR _is_nfz$[ebp], 0
  0000d	74 37		 je	 SHORT $LN2@coordinate

; 126  : 	{
; 127  : 		return coordinate_is_inside_square(coordinate, 

  0000f	6b 45 0c 30	 imul	 eax, DWORD PTR _pfz_number$[ebp], 48
  00013	05 24 00 00 00	 add	 eax, OFFSET ?nfzs@@3PAUpfz@@A+36
  00018	50		 push	 eax
  00019	6b 4d 0c 30	 imul	 ecx, DWORD PTR _pfz_number$[ebp], 48
  0001d	81 c1 18 00 00
	00		 add	 ecx, OFFSET ?nfzs@@3PAUpfz@@A+24
  00023	51		 push	 ecx
  00024	6b 55 0c 30	 imul	 edx, DWORD PTR _pfz_number$[ebp], 48
  00028	81 c2 0c 00 00
	00		 add	 edx, OFFSET ?nfzs@@3PAUpfz@@A+12
  0002e	52		 push	 edx
  0002f	6b 45 0c 30	 imul	 eax, DWORD PTR _pfz_number$[ebp], 48
  00033	05 00 00 00 00	 add	 eax, OFFSET ?nfzs@@3PAUpfz@@A
  00038	50		 push	 eax
  00039	8b 4d 08	 mov	 ecx, DWORD PTR _coordinate$[ebp]
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 ?coordinate_is_inside_square@@YGHPAUVEC3D@@0000@Z ; coordinate_is_inside_square
  00042	eb 35		 jmp	 SHORT $LN1@coordinate

; 128  : 			&nfzs[pfz_number].corner1, &nfzs[pfz_number].corner2,
; 129  : 			&nfzs[pfz_number].corner3, &nfzs[pfz_number].corner4);
; 130  : 	}
; 131  : 	else

  00044	eb 33		 jmp	 SHORT $LN1@coordinate
$LN2@coordinate:

; 132  : 	{
; 133  : 		return coordinate_is_inside_square(coordinate, 

  00046	6b 45 0c 30	 imul	 eax, DWORD PTR _pfz_number$[ebp], 48
  0004a	05 24 00 00 00	 add	 eax, OFFSET ?pfzs@@3PAUpfz@@A+36
  0004f	50		 push	 eax
  00050	6b 4d 0c 30	 imul	 ecx, DWORD PTR _pfz_number$[ebp], 48
  00054	81 c1 18 00 00
	00		 add	 ecx, OFFSET ?pfzs@@3PAUpfz@@A+24
  0005a	51		 push	 ecx
  0005b	6b 55 0c 30	 imul	 edx, DWORD PTR _pfz_number$[ebp], 48
  0005f	81 c2 0c 00 00
	00		 add	 edx, OFFSET ?pfzs@@3PAUpfz@@A+12
  00065	52		 push	 edx
  00066	6b 45 0c 30	 imul	 eax, DWORD PTR _pfz_number$[ebp], 48
  0006a	05 00 00 00 00	 add	 eax, OFFSET ?pfzs@@3PAUpfz@@A
  0006f	50		 push	 eax
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _coordinate$[ebp]
  00073	51		 push	 ecx
  00074	e8 00 00 00 00	 call	 ?coordinate_is_inside_square@@YGHPAUVEC3D@@0000@Z ; coordinate_is_inside_square
$LN1@coordinate:

; 134  : 			&pfzs[pfz_number].corner1, &pfzs[pfz_number].corner2,
; 135  : 			&pfzs[pfz_number].corner3, &pfzs[pfz_number].corner4);
; 136  : 	}
; 137  : }

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 0c 00	 ret	 12			; 0000000cH
?coordinate_is_inside_pfz@@YGHPAUVEC3D@@IH@Z ENDP	; coordinate_is_inside_pfz
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_pfz.c
;	COMDAT ?world_coordinate_to_relative_position@@YGXPAUVEC3D@@0QAY02M@Z
_TEXT	SEGMENT
_relative_position$ = -12				; size = 12
_world_coordinate$ = 8					; size = 4
_relative_vector$ = 12					; size = 4
_rotation_matrix$ = 16					; size = 4
?world_coordinate_to_relative_position@@YGXPAUVEC3D@@0QAY02M@Z PROC ; world_coordinate_to_relative_position, COMDAT

; 112  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 113  : 	vec3d relative_position;
; 114  : 
; 115  : 	relative_position.x = world_coordinate->x - current_flight_dynamics->position.x;

  00009	8b 45 08	 mov	 eax, DWORD PTR _world_coordinate$[ebp]
  0000c	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00016	f2 0f 5c 81 ac
	00 00 00	 subsd	 xmm0, QWORD PTR [ecx+172]
  0001e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00022	f3 0f 11 45 f4	 movss	 DWORD PTR _relative_position$[ebp], xmm0

; 116  : 	relative_position.y = 0;

  00027	0f 57 c0	 xorps	 xmm0, xmm0
  0002a	f3 0f 11 45 f8	 movss	 DWORD PTR _relative_position$[ebp+4], xmm0

; 117  : 	relative_position.z = world_coordinate->z - current_flight_dynamics->position.z;

  0002f	8b 45 08	 mov	 eax, DWORD PTR _world_coordinate$[ebp]
  00032	f3 0f 5a 40 08	 cvtss2sd xmm0, DWORD PTR [eax+8]
  00037	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0003d	f2 0f 5c 81 bc
	00 00 00	 subsd	 xmm0, QWORD PTR [ecx+188]
  00045	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00049	f3 0f 11 45 fc	 movss	 DWORD PTR _relative_position$[ebp+8], xmm0

; 118  : 
; 119  : 	multiply_matrix3x3_vec3d(relative_vector, rotation_matrix, &relative_position);

  0004e	8d 45 f4	 lea	 eax, DWORD PTR _relative_position$[ebp]
  00051	50		 push	 eax
  00052	8b 4d 10	 mov	 ecx, DWORD PTR _rotation_matrix$[ebp]
  00055	51		 push	 ecx
  00056	8b 55 0c	 mov	 edx, DWORD PTR _relative_vector$[ebp]
  00059	52		 push	 edx
  0005a	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 120  : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 0c 00	 ret	 12			; 0000000cH
?world_coordinate_to_relative_position@@YGXPAUVEC3D@@0QAY02M@Z ENDP ; world_coordinate_to_relative_position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_pfz.c
;	COMDAT ?relative_position_to_world_coordinate@@YGXPAUVEC3D@@0QAY02M@Z
_TEXT	SEGMENT
_position_vector$ = -12					; size = 12
_relative_position$ = 8					; size = 4
_world_coordinate$ = 12					; size = 4
_rotation_matrix$ = 16					; size = 4
?relative_position_to_world_coordinate@@YGXPAUVEC3D@@0QAY02M@Z PROC ; relative_position_to_world_coordinate, COMDAT

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 102  : 	vec3d position_vector;
; 103  : 
; 104  : 	multiply_matrix3x3_vec3d(&position_vector, rotation_matrix, relative_position);

  00009	8b 45 08	 mov	 eax, DWORD PTR _relative_position$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _rotation_matrix$[ebp]
  00010	51		 push	 ecx
  00011	8d 55 f4	 lea	 edx, DWORD PTR _position_vector$[ebp]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ?multiply_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_matrix3x3_vec3d

; 105  : 
; 106  : 	world_coordinate->x = current_flight_dynamics->position.x + position_vector.x;

  0001a	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _position_vector$[ebp]
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00024	f2 0f 58 80 ac
	00 00 00	 addsd	 xmm0, QWORD PTR [eax+172]
  0002c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _world_coordinate$[ebp]
  00033	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 107  : 	world_coordinate->y = 0.0;

  00037	8b 45 0c	 mov	 eax, DWORD PTR _world_coordinate$[ebp]
  0003a	0f 57 c0	 xorps	 xmm0, xmm0
  0003d	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 108  : 	world_coordinate->z = current_flight_dynamics->position.z + position_vector.z;

  00042	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _position_vector$[ebp+8]
  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0004c	f2 0f 58 80 bc
	00 00 00	 addsd	 xmm0, QWORD PTR [eax+188]
  00054	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00058	8b 4d 0c	 mov	 ecx, DWORD PTR _world_coordinate$[ebp]
  0005b	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 109  : }

  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 0c 00	 ret	 12			; 0000000cH
?relative_position_to_world_coordinate@@YGXPAUVEC3D@@0QAY02M@Z ENDP ; relative_position_to_world_coordinate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_pfz.c
;	COMDAT ?add_nfz@@YGXPAUVEC3D@@000@Z
_TEXT	SEGMENT
_corner1$ = 8						; size = 4
_corner2$ = 12						; size = 4
_corner3$ = 16						; size = 4
_corner4$ = 20						; size = 4
?add_nfz@@YGXPAUVEC3D@@000@Z PROC			; add_nfz, COMDAT

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 89   : 	if (next_free_nfz == MAX_NFZS)  // if full delete oldest

  00009	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?next_free_nfz@@3IA, 4 ; next_free_nfz
  00010	75 07		 jne	 SHORT $LN2@add_nfz

; 90   : 		delete_nfz(0);

  00012	6a 00		 push	 0
  00014	e8 00 00 00 00	 call	 ?delete_nfz@@YGXI@Z	; delete_nfz
$LN2@add_nfz:

; 91   : 
; 92   : 	nfzs[next_free_nfz].corner1 = *corner1;

  00019	6b 05 00 00 00
	00 30		 imul	 eax, DWORD PTR ?next_free_nfz@@3IA, 48 ; next_free_nfz
  00020	05 00 00 00 00	 add	 eax, OFFSET ?nfzs@@3PAUpfz@@A
  00025	8b 4d 08	 mov	 ecx, DWORD PTR _corner1$[ebp]
  00028	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002a	89 10		 mov	 DWORD PTR [eax], edx
  0002c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002f	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00032	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00035	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 93   : 	nfzs[next_free_nfz].corner2 = *corner2;

  00038	6b 05 00 00 00
	00 30		 imul	 eax, DWORD PTR ?next_free_nfz@@3IA, 48 ; next_free_nfz
  0003f	05 0c 00 00 00	 add	 eax, OFFSET ?nfzs@@3PAUpfz@@A+12
  00044	8b 4d 0c	 mov	 ecx, DWORD PTR _corner2$[ebp]
  00047	8b 11		 mov	 edx, DWORD PTR [ecx]
  00049	89 10		 mov	 DWORD PTR [eax], edx
  0004b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0004e	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00051	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00054	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 94   : 	nfzs[next_free_nfz].corner3 = *corner3;

  00057	6b 05 00 00 00
	00 30		 imul	 eax, DWORD PTR ?next_free_nfz@@3IA, 48 ; next_free_nfz
  0005e	05 18 00 00 00	 add	 eax, OFFSET ?nfzs@@3PAUpfz@@A+24
  00063	8b 4d 10	 mov	 ecx, DWORD PTR _corner3$[ebp]
  00066	8b 11		 mov	 edx, DWORD PTR [ecx]
  00068	89 10		 mov	 DWORD PTR [eax], edx
  0006a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0006d	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00070	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00073	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 95   : 	nfzs[next_free_nfz].corner4 = *corner4;

  00076	6b 05 00 00 00
	00 30		 imul	 eax, DWORD PTR ?next_free_nfz@@3IA, 48 ; next_free_nfz
  0007d	05 24 00 00 00	 add	 eax, OFFSET ?nfzs@@3PAUpfz@@A+36
  00082	8b 4d 14	 mov	 ecx, DWORD PTR _corner4$[ebp]
  00085	8b 11		 mov	 edx, DWORD PTR [ecx]
  00087	89 10		 mov	 DWORD PTR [eax], edx
  00089	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0008c	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0008f	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00092	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 96   : 
; 97   : 	next_free_nfz++;

  00095	a1 00 00 00 00	 mov	 eax, DWORD PTR ?next_free_nfz@@3IA ; next_free_nfz
  0009a	83 c0 01	 add	 eax, 1
  0009d	a3 00 00 00 00	 mov	 DWORD PTR ?next_free_nfz@@3IA, eax ; next_free_nfz

; 98   : }

  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	5b		 pop	 ebx
  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c2 10 00	 ret	 16			; 00000010H
?add_nfz@@YGXPAUVEC3D@@000@Z ENDP			; add_nfz
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_pfz.c
;	COMDAT ?add_pfz@@YGXPAUVEC3D@@000@Z
_TEXT	SEGMENT
_corner1$ = 8						; size = 4
_corner2$ = 12						; size = 4
_corner3$ = 16						; size = 4
_corner4$ = 20						; size = 4
?add_pfz@@YGXPAUVEC3D@@000@Z PROC			; add_pfz, COMDAT

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 69   : 	if (next_free_pfz == MAX_PFZS)  // if full delete oldest

  00009	83 3d 00 00 00
	00 10		 cmp	 DWORD PTR ?next_free_pfz@@3IA, 16 ; next_free_pfz, 00000010H
  00010	75 07		 jne	 SHORT $LN2@add_pfz

; 70   : 		delete_pfz(0);

  00012	6a 00		 push	 0
  00014	e8 00 00 00 00	 call	 ?delete_pfz@@YGXI@Z	; delete_pfz
$LN2@add_pfz:

; 71   : 
; 72   : 	#if DEBUG_MODULE
; 73   : 	debug_print_vec(corner1);
; 74   : 	debug_print_vec(corner2);
; 75   : 	debug_print_vec(corner3);
; 76   : 	debug_print_vec(corner4);
; 77   : 	#endif
; 78   : 
; 79   : 	pfzs[next_free_pfz].corner1 = *corner1;

  00019	6b 05 00 00 00
	00 30		 imul	 eax, DWORD PTR ?next_free_pfz@@3IA, 48 ; next_free_pfz
  00020	05 00 00 00 00	 add	 eax, OFFSET ?pfzs@@3PAUpfz@@A
  00025	8b 4d 08	 mov	 ecx, DWORD PTR _corner1$[ebp]
  00028	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002a	89 10		 mov	 DWORD PTR [eax], edx
  0002c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002f	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00032	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00035	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 80   : 	pfzs[next_free_pfz].corner2 = *corner2;

  00038	6b 05 00 00 00
	00 30		 imul	 eax, DWORD PTR ?next_free_pfz@@3IA, 48 ; next_free_pfz
  0003f	05 0c 00 00 00	 add	 eax, OFFSET ?pfzs@@3PAUpfz@@A+12
  00044	8b 4d 0c	 mov	 ecx, DWORD PTR _corner2$[ebp]
  00047	8b 11		 mov	 edx, DWORD PTR [ecx]
  00049	89 10		 mov	 DWORD PTR [eax], edx
  0004b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0004e	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00051	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00054	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 81   : 	pfzs[next_free_pfz].corner3 = *corner3;

  00057	6b 05 00 00 00
	00 30		 imul	 eax, DWORD PTR ?next_free_pfz@@3IA, 48 ; next_free_pfz
  0005e	05 18 00 00 00	 add	 eax, OFFSET ?pfzs@@3PAUpfz@@A+24
  00063	8b 4d 10	 mov	 ecx, DWORD PTR _corner3$[ebp]
  00066	8b 11		 mov	 edx, DWORD PTR [ecx]
  00068	89 10		 mov	 DWORD PTR [eax], edx
  0006a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0006d	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00070	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00073	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 82   : 	pfzs[next_free_pfz].corner4 = *corner4;

  00076	6b 05 00 00 00
	00 30		 imul	 eax, DWORD PTR ?next_free_pfz@@3IA, 48 ; next_free_pfz
  0007d	05 24 00 00 00	 add	 eax, OFFSET ?pfzs@@3PAUpfz@@A+36
  00082	8b 4d 14	 mov	 ecx, DWORD PTR _corner4$[ebp]
  00085	8b 11		 mov	 edx, DWORD PTR [ecx]
  00087	89 10		 mov	 DWORD PTR [eax], edx
  00089	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0008c	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0008f	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00092	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 83   : 
; 84   : 	next_free_pfz++;

  00095	a1 00 00 00 00	 mov	 eax, DWORD PTR ?next_free_pfz@@3IA ; next_free_pfz
  0009a	83 c0 01	 add	 eax, 1
  0009d	a3 00 00 00 00	 mov	 DWORD PTR ?next_free_pfz@@3IA, eax ; next_free_pfz

; 85   : }

  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	5b		 pop	 ebx
  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c2 10 00	 ret	 16			; 00000010H
?add_pfz@@YGXPAUVEC3D@@000@Z ENDP			; add_pfz
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_pfz.c
;	COMDAT ?delete_nfz@@YGXI@Z
_TEXT	SEGMENT
_nfz_number$ = 8					; size = 4
?delete_nfz@@YGXI@Z PROC				; delete_nfz, COMDAT

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	ASSERT(nfz_number < next_free_nfz);

  00009	8b 45 08	 mov	 eax, DWORD PTR _nfz_number$[ebp]
  0000c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?next_free_nfz@@3IA ; next_free_nfz
  00012	72 18		 jb	 SHORT $LN2@delete_nfz
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??delete_nfz@@YGXI@Z@4JA
  00019	83 c0 01	 add	 eax, 1
  0001c	50		 push	 eax
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@PFPAFEAF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@GBIKPHBD@nfz_number?5?$DM?5next_free_nfz@
  00027	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@delete_nfz:

; 58   : 
; 59   : 	memmove(&nfzs[nfz_number], &nfzs[nfz_number+1], (next_free_nfz - nfz_number) * sizeof(nfzs[0]));

  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?next_free_nfz@@3IA ; next_free_nfz
  00031	2b 45 08	 sub	 eax, DWORD PTR _nfz_number$[ebp]
  00034	6b c8 30	 imul	 ecx, eax, 48
  00037	51		 push	 ecx
  00038	8b 55 08	 mov	 edx, DWORD PTR _nfz_number$[ebp]
  0003b	83 c2 01	 add	 edx, 1
  0003e	6b c2 30	 imul	 eax, edx, 48
  00041	05 00 00 00 00	 add	 eax, OFFSET ?nfzs@@3PAUpfz@@A
  00046	50		 push	 eax
  00047	6b 4d 08 30	 imul	 ecx, DWORD PTR _nfz_number$[ebp], 48
  0004b	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?nfzs@@3PAUpfz@@A
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 _memmove
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH

; 60   : 
; 61   : 	next_free_nfz--;

  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?next_free_nfz@@3IA ; next_free_nfz
  0005f	83 e8 01	 sub	 eax, 1
  00062	a3 00 00 00 00	 mov	 DWORD PTR ?next_free_nfz@@3IA, eax ; next_free_nfz

; 62   : 
; 63   : 	if (!ground_radar_is_active())

  00067	e8 00 00 00 00	 call	 ?ground_radar_is_active@@YGHXZ ; ground_radar_is_active
  0006c	85 c0		 test	 eax, eax
  0006e	75 07		 jne	 SHORT $LN1@delete_nfz

; 64   : 		update_common_ground_radar (TRUE);

  00070	6a 01		 push	 1
  00072	e8 00 00 00 00	 call	 ?update_common_ground_radar@@YGXH@Z ; update_common_ground_radar
$LN1@delete_nfz:

; 65   : }

  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c2 04 00	 ret	 4
?delete_nfz@@YGXI@Z ENDP				; delete_nfz
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_pfz.c
;	COMDAT ?delete_pfz@@YGXI@Z
_TEXT	SEGMENT
_pfz_number$ = 8					; size = 4
?delete_pfz@@YGXI@Z PROC				; delete_pfz, COMDAT

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 43   : 	// deletes by moving all following elements one step up to fill the slot
; 44   : 	
; 45   : 	ASSERT(pfz_number < next_free_pfz);

  00009	8b 45 08	 mov	 eax, DWORD PTR _pfz_number$[ebp]
  0000c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?next_free_pfz@@3IA ; next_free_pfz
  00012	72 18		 jb	 SHORT $LN2@delete_pfz
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??delete_pfz@@YGXI@Z@4JA
  00019	83 c0 03	 add	 eax, 3
  0001c	50		 push	 eax
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@PFPAFEAF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@PBODPHKH@pfz_number?5?$DM?5next_free_pfz@
  00027	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@delete_pfz:

; 46   : 
; 47   : 	memmove(&pfzs[pfz_number], &pfzs[pfz_number+1], (next_free_pfz - pfz_number) * sizeof(pfzs[0]));

  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?next_free_pfz@@3IA ; next_free_pfz
  00031	2b 45 08	 sub	 eax, DWORD PTR _pfz_number$[ebp]
  00034	6b c8 30	 imul	 ecx, eax, 48
  00037	51		 push	 ecx
  00038	8b 55 08	 mov	 edx, DWORD PTR _pfz_number$[ebp]
  0003b	83 c2 01	 add	 edx, 1
  0003e	6b c2 30	 imul	 eax, edx, 48
  00041	05 00 00 00 00	 add	 eax, OFFSET ?pfzs@@3PAUpfz@@A
  00046	50		 push	 eax
  00047	6b 4d 08 30	 imul	 ecx, DWORD PTR _pfz_number$[ebp], 48
  0004b	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?pfzs@@3PAUpfz@@A
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 _memmove
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH

; 48   : 
; 49   : 	next_free_pfz--;

  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?next_free_pfz@@3IA ; next_free_pfz
  0005f	83 e8 01	 sub	 eax, 1
  00062	a3 00 00 00 00	 mov	 DWORD PTR ?next_free_pfz@@3IA, eax ; next_free_pfz

; 50   : 	
; 51   : 	if (current_pfz >= next_free_pfz)

  00067	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_pfz@@3IA ; current_pfz
  0006c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?next_free_pfz@@3IA ; next_free_pfz
  00072	72 05		 jb	 SHORT $LN1@delete_pfz

; 52   : 		select_previous_pfz();

  00074	e8 00 00 00 00	 call	 ?select_previous_pfz@@YGXXZ ; select_previous_pfz
$LN1@delete_pfz:

; 53   : }

  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
?delete_pfz@@YGXI@Z ENDP				; delete_pfz
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_pfz.c
;	COMDAT ?get_nfz@@YGPAUpfz@@I@Z
_TEXT	SEGMENT
_nfz_number$ = 8					; size = 4
?get_nfz@@YGPAUpfz@@I@Z PROC				; get_nfz, COMDAT

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 36   : 	ASSERT(nfz_number < next_free_nfz);

  00009	8b 45 08	 mov	 eax, DWORD PTR _nfz_number$[ebp]
  0000c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?next_free_nfz@@3IA ; next_free_nfz
  00012	72 18		 jb	 SHORT $LN2@get_nfz
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_nfz@@YGPAUpfz@@I@Z@4JA
  00019	83 c0 01	 add	 eax, 1
  0001c	50		 push	 eax
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@PFPAFEAF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@GBIKPHBD@nfz_number?5?$DM?5next_free_nfz@
  00027	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_nfz:

; 37   : 	
; 38   : 	return &nfzs[nfz_number];

  0002c	6b 45 08 30	 imul	 eax, DWORD PTR _nfz_number$[ebp], 48
  00030	05 00 00 00 00	 add	 eax, OFFSET ?nfzs@@3PAUpfz@@A

; 39   : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?get_nfz@@YGPAUpfz@@I@Z ENDP				; get_nfz
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_pfz.c
;	COMDAT ?get_pfz@@YGPAUpfz@@I@Z
_TEXT	SEGMENT
_pfz_number$ = 8					; size = 4
?get_pfz@@YGPAUpfz@@I@Z PROC				; get_pfz, COMDAT

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 29   : 	ASSERT(pfz_number < next_free_pfz);

  00009	8b 45 08	 mov	 eax, DWORD PTR _pfz_number$[ebp]
  0000c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?next_free_pfz@@3IA ; next_free_pfz
  00012	72 18		 jb	 SHORT $LN2@get_pfz
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_pfz@@YGPAUpfz@@I@Z@4JA
  00019	83 c0 01	 add	 eax, 1
  0001c	50		 push	 eax
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@PFPAFEAF@c?3?2users?2nhv90?2projects?2eech?2ap@
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@PBODPHKH@pfz_number?5?$DM?5next_free_pfz@
  00027	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@get_pfz:

; 30   : 	
; 31   : 	return &pfzs[pfz_number];

  0002c	6b 45 08 30	 imul	 eax, DWORD PTR _pfz_number$[ebp], 48
  00030	05 00 00 00 00	 add	 eax, OFFSET ?pfzs@@3PAUpfz@@A

; 32   : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?get_pfz@@YGPAUpfz@@I@Z ENDP				; get_pfz
_TEXT	ENDS
END
