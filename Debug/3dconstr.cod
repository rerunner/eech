; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\3d\3dconstr.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?construct_3d_line@@YGPAUVERTEX@@PAUPOINT_3D_PLAIN_REFERENCE@@HPAH@Z ; construct_3d_line
PUBLIC	?construct_3d_triangle_fan@@YGPAUVERTEX@@HPAUPOINT_3D_PLAIN_REFERENCE@@HPAH@Z ; construct_3d_triangle_fan
PUBLIC	?construct_3d_surface_shadow_triangle_fan@@YGPAUVERTEX@@HHPAH@Z ; construct_3d_surface_shadow_triangle_fan
PUBLIC	?construct_3d_textured_triangle_fan@@YGPAUVERTEX@@HPAUPOINT_3D_PLAIN_REFERENCE@@PAUOBJECT_3D_SHORT_TEXTURED_POINT@@HPAH@Z ; construct_3d_textured_triangle_fan
PUBLIC	?construct_3d_surface_shadow_textured_triangle_fan@@YGPAUVERTEX@@HHPAH@Z ; construct_3d_surface_shadow_textured_triangle_fan
PUBLIC	?outcode_3d_polygon@@YGHHPAUPOINT_3D_PLAIN_REFERENCE@@HPAH@Z ; outcode_3d_polygon
PUBLIC	?outcode_3d_surface_polygon@@YGHHHPAH@Z		; outcode_3d_surface_polygon
PUBLIC	?apply_perspective_to_polygon_texture@@YGXPAUVERTEX@@@Z ; apply_perspective_to_polygon_texture
PUBLIC	?remove_perspective_from_polygon_texture@@YGXPAUVERTEX@@@Z ; remove_perspective_from_polygon_texture
PUBLIC	?apply_perspective_to_polygon_dual_texture@@YGXPAUVERTEX@@@Z ; apply_perspective_to_polygon_dual_texture
PUBLIC	?remove_perspective_from_polygon_dual_texture@@YGXPAUVERTEX@@@Z ; remove_perspective_from_polygon_dual_texture
PUBLIC	?get_3d_point_outcodes@@YGIMMM@Z		; get_3d_point_outcodes
PUBLIC	__real@3ff0000000000000
EXTRN	?generate_3d_outcode@@YGHMM@Z:PROC		; generate_3d_outcode
EXTRN	?clip_hither@@3MA:DWORD				; clip_hither
EXTRN	?clip_yonder@@3MA:DWORD				; clip_yonder
EXTRN	?active_3d_environment@@3PAUENV_3D@@A:DWORD	; active_3d_environment
EXTRN	?visual_3d_vp@@3PAUVIEWPOINT@@A:DWORD		; visual_3d_vp
EXTRN	?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A:DWORD ; current_object_3d_point_list
EXTRN	?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A:DWORD ; current_object_3d_surface_point_texture_list
EXTRN	?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A:DWORD ; current_object_3d_surface_point_list
EXTRN	?transformed_3d_points@@3PAUVERTEX@@A:BYTE	; transformed_3d_points
EXTRN	__fltused:DWORD
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dconstr.c
;	COMDAT ?get_3d_point_outcodes@@YGIMMM@Z
_TEXT	SEGMENT
_outcode$ = -28						; size = 4
_q$ = -24						; size = 4
_j$ = -20						; size = 4
_i$ = -16						; size = 4
_z_rel$ = -12						; size = 4
_y_rel$ = -8						; size = 4
_x_rel$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?get_3d_point_outcodes@@YGIMMM@Z PROC			; get_3d_point_outcodes, COMDAT

; 460  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 461  : 
; 462  : 	float
; 463  : 		x_rel,
; 464  : 		y_rel,
; 465  : 		z_rel,
; 466  : 		i,
; 467  : 		j,
; 468  : 		q;
; 469  : 
; 470  : 	unsigned int
; 471  : 		outcode;
; 472  : 
; 473  : 	x -= visual_3d_vp->x;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0000e	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  00013	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00017	f3 0f 11 45 08	 movss	 DWORD PTR _x$[ebp], xmm0

; 474  : 	y -= visual_3d_vp->y;

  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00021	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  00026	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  0002b	f3 0f 11 45 0c	 movss	 DWORD PTR _y$[ebp], xmm0

; 475  : 	z -= visual_3d_vp->z;

  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00035	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]
  0003a	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  0003f	f3 0f 11 45 10	 movss	 DWORD PTR _z$[ebp], xmm0

; 476  : 
; 477  : 	x_rel = ( ( x * visual_3d_vp->xv.x ) + ( y * visual_3d_vp->xv.y ) + ( z * visual_3d_vp->xv.z ) );

  00044	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00049	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  0004e	f3 0f 59 40 0c	 mulss	 xmm0, DWORD PTR [eax+12]
  00053	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00059	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _y$[ebp]
  0005e	f3 0f 59 49 10	 mulss	 xmm1, DWORD PTR [ecx+16]
  00063	f3 0f 58 c1	 addss	 xmm0, xmm1
  00067	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  0006d	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _z$[ebp]
  00072	f3 0f 59 4a 14	 mulss	 xmm1, DWORD PTR [edx+20]
  00077	f3 0f 58 c1	 addss	 xmm0, xmm1
  0007b	f3 0f 11 45 fc	 movss	 DWORD PTR _x_rel$[ebp], xmm0

; 478  : 	y_rel = ( ( x * visual_3d_vp->yv.x ) + ( y * visual_3d_vp->yv.y ) + ( z * visual_3d_vp->yv.z ) );

  00080	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00085	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  0008a	f3 0f 59 40 18	 mulss	 xmm0, DWORD PTR [eax+24]
  0008f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  00095	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _y$[ebp]
  0009a	f3 0f 59 49 1c	 mulss	 xmm1, DWORD PTR [ecx+28]
  0009f	f3 0f 58 c1	 addss	 xmm0, xmm1
  000a3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000a9	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _z$[ebp]
  000ae	f3 0f 59 4a 20	 mulss	 xmm1, DWORD PTR [edx+32]
  000b3	f3 0f 58 c1	 addss	 xmm0, xmm1
  000b7	f3 0f 11 45 f8	 movss	 DWORD PTR _y_rel$[ebp], xmm0

; 479  : 	z_rel = ( ( x * visual_3d_vp->zv.x ) + ( y * visual_3d_vp->zv.y ) + ( z * visual_3d_vp->zv.z ) );

  000bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000c1	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  000c6	f3 0f 59 40 24	 mulss	 xmm0, DWORD PTR [eax+36]
  000cb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000d1	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _y$[ebp]
  000d6	f3 0f 59 49 28	 mulss	 xmm1, DWORD PTR [ecx+40]
  000db	f3 0f 58 c1	 addss	 xmm0, xmm1
  000df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?visual_3d_vp@@3PAUVIEWPOINT@@A ; visual_3d_vp
  000e5	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _z$[ebp]
  000ea	f3 0f 59 4a 2c	 mulss	 xmm1, DWORD PTR [edx+44]
  000ef	f3 0f 58 c1	 addss	 xmm0, xmm1
  000f3	f3 0f 11 45 f4	 movss	 DWORD PTR _z_rel$[ebp], xmm0

; 480  : 
; 481  : 	if ( *( ( int * ) &z_rel ) >= *( ( int * ) &clip_hither ) )

  000f8	8b 45 f4	 mov	 eax, DWORD PTR _z_rel$[ebp]
  000fb	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?clip_hither@@3MA
  00101	0f 8c ab 00 00
	00		 jl	 $LN2@get_3d_poi

; 482  : 	{
; 483  : 
; 484  : 		if ( *( ( int * ) &z_rel ) <= *( ( int * ) &clip_yonder ) )

  00107	8b 45 f4	 mov	 eax, DWORD PTR _z_rel$[ebp]
  0010a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?clip_yonder@@3MA
  00110	0f 8f 93 00 00
	00		 jg	 $LN4@get_3d_poi

; 485  : 		{
; 486  : 	
; 487  : 			q = 1.0 / z_rel;

  00116	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _z_rel$[ebp]
  0011b	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00123	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00127	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0012b	f3 0f 11 45 e8	 movss	 DWORD PTR _q$[ebp], xmm0

; 488  : 		
; 489  : 			i = ( active_3d_environment->screen_i_scale * x_rel * q );

  00130	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00135	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00139	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _x_rel$[ebp]
  0013e	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _q$[ebp]
  00143	f3 0f 11 45 f0	 movss	 DWORD PTR _i$[ebp], xmm0

; 490  : 		
; 491  : 			j = ( active_3d_environment->screen_j_scale * y_rel * q );

  00148	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0014d	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00152	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _y_rel$[ebp]
  00157	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _q$[ebp]
  0015c	f3 0f 11 45 ec	 movss	 DWORD PTR _j$[ebp], xmm0

; 492  : 		
; 493  : 			j = ( active_3d_environment->y_origin - j );

  00161	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  00166	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  0016b	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _j$[ebp]
  00170	f3 0f 11 45 ec	 movss	 DWORD PTR _j$[ebp], xmm0

; 494  : 		
; 495  : 			i += active_3d_environment->x_origin;

  00175	a1 00 00 00 00	 mov	 eax, DWORD PTR ?active_3d_environment@@3PAUENV_3D@@A ; active_3d_environment
  0017a	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _i$[ebp]
  0017f	f3 0f 58 40 10	 addss	 xmm0, DWORD PTR [eax+16]
  00184	f3 0f 11 45 f0	 movss	 DWORD PTR _i$[ebp], xmm0

; 496  : 		
; 497  : 			outcode = generate_3d_outcode ( i, j );

  00189	51		 push	 ecx
  0018a	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _j$[ebp]
  0018f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00194	51		 push	 ecx
  00195	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _i$[ebp]
  0019a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019f	e8 00 00 00 00	 call	 ?generate_3d_outcode@@YGHMM@Z ; generate_3d_outcode
  001a4	89 45 e4	 mov	 DWORD PTR _outcode$[ebp], eax

; 498  : 		}
; 499  : 		else

  001a7	eb 07		 jmp	 SHORT $LN5@get_3d_poi
$LN4@get_3d_poi:

; 500  : 		{
; 501  : 
; 502  : 			outcode = CLIP_YONDER;

  001a9	c7 45 e4 10 00
	00 00		 mov	 DWORD PTR _outcode$[ebp], 16 ; 00000010H
$LN5@get_3d_poi:

; 503  : 		}
; 504  : 	}
; 505  : 	else

  001b0	eb 07		 jmp	 SHORT $LN3@get_3d_poi
$LN2@get_3d_poi:

; 506  : 	{
; 507  : 
; 508  : 		outcode = CLIP_HITHER;

  001b2	c7 45 e4 20 00
	00 00		 mov	 DWORD PTR _outcode$[ebp], 32 ; 00000020H
$LN3@get_3d_poi:

; 509  : 	}
; 510  : 
; 511  : 	return ( outcode );

  001b9	8b 45 e4	 mov	 eax, DWORD PTR _outcode$[ebp]

; 512  : }

  001bc	5f		 pop	 edi
  001bd	5e		 pop	 esi
  001be	5b		 pop	 ebx
  001bf	8b e5		 mov	 esp, ebp
  001c1	5d		 pop	 ebp
  001c2	c2 0c 00	 ret	 12			; 0000000cH
?get_3d_point_outcodes@@YGIMMM@Z ENDP			; get_3d_point_outcodes
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dconstr.c
;	COMDAT ?remove_perspective_from_polygon_dual_texture@@YGXPAUVERTEX@@@Z
_TEXT	SEGMENT
_poly$ = 8						; size = 4
?remove_perspective_from_polygon_dual_texture@@YGXPAUVERTEX@@@Z PROC ; remove_perspective_from_polygon_dual_texture, COMDAT

; 441  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@remove_per:

; 442  : 
; 443  : 	while ( poly )

  00009	83 7d 08 00	 cmp	 DWORD PTR _poly$[ebp], 0
  0000d	74 6b		 je	 SHORT $LN3@remove_per

; 444  : 	{
; 445  : 
; 446  : 		poly->u = poly->u * poly->z;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _poly$[ebp]
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _poly$[ebp]
  00015	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  0001a	f3 0f 59 41 08	 mulss	 xmm0, DWORD PTR [ecx+8]
  0001f	8b 55 08	 mov	 edx, DWORD PTR _poly$[ebp]
  00022	f3 0f 11 42 18	 movss	 DWORD PTR [edx+24], xmm0

; 447  : 		poly->v = poly->v * poly->z;

  00027	8b 45 08	 mov	 eax, DWORD PTR _poly$[ebp]
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _poly$[ebp]
  0002d	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  00032	f3 0f 59 41 08	 mulss	 xmm0, DWORD PTR [ecx+8]
  00037	8b 55 08	 mov	 edx, DWORD PTR _poly$[ebp]
  0003a	f3 0f 11 42 1c	 movss	 DWORD PTR [edx+28], xmm0

; 448  : 		poly->u2 = poly->u2 * poly->z;

  0003f	8b 45 08	 mov	 eax, DWORD PTR _poly$[ebp]
  00042	8b 4d 08	 mov	 ecx, DWORD PTR _poly$[ebp]
  00045	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  0004a	f3 0f 59 41 08	 mulss	 xmm0, DWORD PTR [ecx+8]
  0004f	8b 55 08	 mov	 edx, DWORD PTR _poly$[ebp]
  00052	f3 0f 11 42 20	 movss	 DWORD PTR [edx+32], xmm0

; 449  : 		poly->v2 = poly->v2 * poly->z;

  00057	8b 45 08	 mov	 eax, DWORD PTR _poly$[ebp]
  0005a	8b 4d 08	 mov	 ecx, DWORD PTR _poly$[ebp]
  0005d	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [eax+36]
  00062	f3 0f 59 41 08	 mulss	 xmm0, DWORD PTR [ecx+8]
  00067	8b 55 08	 mov	 edx, DWORD PTR _poly$[ebp]
  0006a	f3 0f 11 42 24	 movss	 DWORD PTR [edx+36], xmm0

; 450  : 
; 451  : 		poly = poly->next_vertex;

  0006f	8b 45 08	 mov	 eax, DWORD PTR _poly$[ebp]
  00072	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00075	89 4d 08	 mov	 DWORD PTR _poly$[ebp], ecx

; 452  : 	}

  00078	eb 8f		 jmp	 SHORT $LN2@remove_per
$LN3@remove_per:

; 453  : }

  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
?remove_perspective_from_polygon_dual_texture@@YGXPAUVERTEX@@@Z ENDP ; remove_perspective_from_polygon_dual_texture
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dconstr.c
;	COMDAT ?apply_perspective_to_polygon_dual_texture@@YGXPAUVERTEX@@@Z
_TEXT	SEGMENT
_poly$ = 8						; size = 4
?apply_perspective_to_polygon_dual_texture@@YGXPAUVERTEX@@@Z PROC ; apply_perspective_to_polygon_dual_texture, COMDAT

; 422  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@apply_pers:

; 423  : 
; 424  : 	while ( poly )

  00009	83 7d 08 00	 cmp	 DWORD PTR _poly$[ebp], 0
  0000d	74 6b		 je	 SHORT $LN3@apply_pers

; 425  : 	{
; 426  : 
; 427  : 		poly->u = poly->u * poly->q;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _poly$[ebp]
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _poly$[ebp]
  00015	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  0001a	f3 0f 59 41 0c	 mulss	 xmm0, DWORD PTR [ecx+12]
  0001f	8b 55 08	 mov	 edx, DWORD PTR _poly$[ebp]
  00022	f3 0f 11 42 18	 movss	 DWORD PTR [edx+24], xmm0

; 428  : 		poly->v = poly->v * poly->q;

  00027	8b 45 08	 mov	 eax, DWORD PTR _poly$[ebp]
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _poly$[ebp]
  0002d	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  00032	f3 0f 59 41 0c	 mulss	 xmm0, DWORD PTR [ecx+12]
  00037	8b 55 08	 mov	 edx, DWORD PTR _poly$[ebp]
  0003a	f3 0f 11 42 1c	 movss	 DWORD PTR [edx+28], xmm0

; 429  : 		poly->u2 = poly->u2 * poly->q;

  0003f	8b 45 08	 mov	 eax, DWORD PTR _poly$[ebp]
  00042	8b 4d 08	 mov	 ecx, DWORD PTR _poly$[ebp]
  00045	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  0004a	f3 0f 59 41 0c	 mulss	 xmm0, DWORD PTR [ecx+12]
  0004f	8b 55 08	 mov	 edx, DWORD PTR _poly$[ebp]
  00052	f3 0f 11 42 20	 movss	 DWORD PTR [edx+32], xmm0

; 430  : 		poly->v2 = poly->v2 * poly->q;

  00057	8b 45 08	 mov	 eax, DWORD PTR _poly$[ebp]
  0005a	8b 4d 08	 mov	 ecx, DWORD PTR _poly$[ebp]
  0005d	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [eax+36]
  00062	f3 0f 59 41 0c	 mulss	 xmm0, DWORD PTR [ecx+12]
  00067	8b 55 08	 mov	 edx, DWORD PTR _poly$[ebp]
  0006a	f3 0f 11 42 24	 movss	 DWORD PTR [edx+36], xmm0

; 431  : 
; 432  : 		poly = poly->next_vertex;

  0006f	8b 45 08	 mov	 eax, DWORD PTR _poly$[ebp]
  00072	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00075	89 4d 08	 mov	 DWORD PTR _poly$[ebp], ecx

; 433  : 	}

  00078	eb 8f		 jmp	 SHORT $LN2@apply_pers
$LN3@apply_pers:

; 434  : }

  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
?apply_perspective_to_polygon_dual_texture@@YGXPAUVERTEX@@@Z ENDP ; apply_perspective_to_polygon_dual_texture
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dconstr.c
;	COMDAT ?remove_perspective_from_polygon_texture@@YGXPAUVERTEX@@@Z
_TEXT	SEGMENT
_poly$ = 8						; size = 4
?remove_perspective_from_polygon_texture@@YGXPAUVERTEX@@@Z PROC ; remove_perspective_from_polygon_texture, COMDAT

; 405  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@remove_per:

; 406  : 
; 407  : 	while ( poly )

  00009	83 7d 08 00	 cmp	 DWORD PTR _poly$[ebp], 0
  0000d	74 3b		 je	 SHORT $LN3@remove_per

; 408  : 	{
; 409  : 
; 410  : 		poly->u = poly->u * poly->z;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _poly$[ebp]
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _poly$[ebp]
  00015	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  0001a	f3 0f 59 41 08	 mulss	 xmm0, DWORD PTR [ecx+8]
  0001f	8b 55 08	 mov	 edx, DWORD PTR _poly$[ebp]
  00022	f3 0f 11 42 18	 movss	 DWORD PTR [edx+24], xmm0

; 411  : 		poly->v = poly->v * poly->z;

  00027	8b 45 08	 mov	 eax, DWORD PTR _poly$[ebp]
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _poly$[ebp]
  0002d	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  00032	f3 0f 59 41 08	 mulss	 xmm0, DWORD PTR [ecx+8]
  00037	8b 55 08	 mov	 edx, DWORD PTR _poly$[ebp]
  0003a	f3 0f 11 42 1c	 movss	 DWORD PTR [edx+28], xmm0

; 412  : 
; 413  : 		poly = poly->next_vertex;

  0003f	8b 45 08	 mov	 eax, DWORD PTR _poly$[ebp]
  00042	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00045	89 4d 08	 mov	 DWORD PTR _poly$[ebp], ecx

; 414  : 	}

  00048	eb bf		 jmp	 SHORT $LN2@remove_per
$LN3@remove_per:

; 415  : }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
?remove_perspective_from_polygon_texture@@YGXPAUVERTEX@@@Z ENDP ; remove_perspective_from_polygon_texture
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dconstr.c
;	COMDAT ?apply_perspective_to_polygon_texture@@YGXPAUVERTEX@@@Z
_TEXT	SEGMENT
_poly$ = 8						; size = 4
?apply_perspective_to_polygon_texture@@YGXPAUVERTEX@@@Z PROC ; apply_perspective_to_polygon_texture, COMDAT

; 388  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@apply_pers:

; 389  : 
; 390  : 	while ( poly )

  00009	83 7d 08 00	 cmp	 DWORD PTR _poly$[ebp], 0
  0000d	74 3b		 je	 SHORT $LN3@apply_pers

; 391  : 	{
; 392  : 
; 393  : 		poly->u = poly->u * poly->q;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _poly$[ebp]
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _poly$[ebp]
  00015	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  0001a	f3 0f 59 41 0c	 mulss	 xmm0, DWORD PTR [ecx+12]
  0001f	8b 55 08	 mov	 edx, DWORD PTR _poly$[ebp]
  00022	f3 0f 11 42 18	 movss	 DWORD PTR [edx+24], xmm0

; 394  : 		poly->v = poly->v * poly->q;

  00027	8b 45 08	 mov	 eax, DWORD PTR _poly$[ebp]
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _poly$[ebp]
  0002d	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  00032	f3 0f 59 41 0c	 mulss	 xmm0, DWORD PTR [ecx+12]
  00037	8b 55 08	 mov	 edx, DWORD PTR _poly$[ebp]
  0003a	f3 0f 11 42 1c	 movss	 DWORD PTR [edx+28], xmm0

; 395  : 
; 396  : 		poly = poly->next_vertex;

  0003f	8b 45 08	 mov	 eax, DWORD PTR _poly$[ebp]
  00042	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00045	89 4d 08	 mov	 DWORD PTR _poly$[ebp], ecx

; 397  : 	}

  00048	eb bf		 jmp	 SHORT $LN2@apply_pers
$LN3@apply_pers:

; 398  : }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
?apply_perspective_to_polygon_texture@@YGXPAUVERTEX@@@Z ENDP ; apply_perspective_to_polygon_texture
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dconstr.c
;	COMDAT ?outcode_3d_surface_polygon@@YGHHHPAH@Z
_TEXT	SEGMENT
_points_list$ = -16					; size = 4
_outcode2$ = -10					; size = 1
_outcode$ = -9						; size = 1
_this_outcode$ = -8					; size = 4
_count$ = -4						; size = 4
_num_points$ = 8					; size = 4
_base_point$ = 12					; size = 4
_polygon_outcode$ = 16					; size = 4
?outcode_3d_surface_polygon@@YGHHHPAH@Z PROC		; outcode_3d_surface_polygon, COMDAT

; 351  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 352  : 
; 353  : 	int
; 354  : 		count,
; 355  : 		this_outcode;
; 356  : 
; 357  : 	unsigned char
; 358  : 		outcode,
; 359  : 		outcode2;
; 360  : 
; 361  : 	vertex
; 362  : 		*points_list;
; 363  : 
; 364  : 	points_list = transformed_3d_points + base_point;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _base_point$[ebp]
  0000c	c1 e0 06	 shl	 eax, 6
  0000f	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_points@@3PAUVERTEX@@A ; transformed_3d_points
  00014	89 45 f0	 mov	 DWORD PTR _points_list$[ebp], eax

; 365  : 
; 366  : 	this_outcode = points_list[ current_object_3d_surface_point_list[ current_object_3d_point_list[0].point ].point].outcode;

  00017	b8 01 00 00 00	 mov	 eax, 1
  0001c	6b c8 00	 imul	 ecx, eax, 0
  0001f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  00025	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  0002f	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00033	c1 e2 06	 shl	 edx, 6
  00036	8b 45 f0	 mov	 eax, DWORD PTR _points_list$[ebp]
  00039	0f b6 4c 10 2c	 movzx	 ecx, BYTE PTR [eax+edx+44]
  0003e	89 4d f8	 mov	 DWORD PTR _this_outcode$[ebp], ecx

; 367  : 	outcode = this_outcode;

  00041	8a 45 f8	 mov	 al, BYTE PTR _this_outcode$[ebp]
  00044	88 45 f7	 mov	 BYTE PTR _outcode$[ebp], al

; 368  : 	outcode2 = this_outcode;

  00047	8a 45 f8	 mov	 al, BYTE PTR _this_outcode$[ebp]
  0004a	88 45 f6	 mov	 BYTE PTR _outcode2$[ebp], al

; 369  : 
; 370  : 	for ( count = 1; count < num_points; count++ )

  0004d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _count$[ebp], 1
  00054	eb 09		 jmp	 SHORT $LN4@outcode_3d
$LN2@outcode_3d:
  00056	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00059	83 c0 01	 add	 eax, 1
  0005c	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@outcode_3d:
  0005f	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00062	3b 45 08	 cmp	 eax, DWORD PTR _num_points$[ebp]
  00065	7d 39		 jge	 SHORT $LN3@outcode_3d

; 371  : 	{
; 372  : 
; 373  : 		this_outcode = points_list[ current_object_3d_surface_point_list[ current_object_3d_point_list[count].point ].point].outcode;

  00067	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  0006c	03 45 fc	 add	 eax, DWORD PTR _count$[ebp]
  0006f	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00072	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  00078	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  0007c	c1 e0 06	 shl	 eax, 6
  0007f	8b 4d f0	 mov	 ecx, DWORD PTR _points_list$[ebp]
  00082	0f b6 54 01 2c	 movzx	 edx, BYTE PTR [ecx+eax+44]
  00087	89 55 f8	 mov	 DWORD PTR _this_outcode$[ebp], edx

; 374  : 		outcode |= this_outcode;

  0008a	0f b6 45 f7	 movzx	 eax, BYTE PTR _outcode$[ebp]
  0008e	0b 45 f8	 or	 eax, DWORD PTR _this_outcode$[ebp]
  00091	88 45 f7	 mov	 BYTE PTR _outcode$[ebp], al

; 375  : 		outcode2 &= this_outcode;

  00094	0f b6 45 f6	 movzx	 eax, BYTE PTR _outcode2$[ebp]
  00098	23 45 f8	 and	 eax, DWORD PTR _this_outcode$[ebp]
  0009b	88 45 f6	 mov	 BYTE PTR _outcode2$[ebp], al

; 376  : 	}

  0009e	eb b6		 jmp	 SHORT $LN2@outcode_3d
$LN3@outcode_3d:

; 377  : 
; 378  : 	*polygon_outcode = outcode;

  000a0	0f b6 45 f7	 movzx	 eax, BYTE PTR _outcode$[ebp]
  000a4	8b 4d 10	 mov	 ecx, DWORD PTR _polygon_outcode$[ebp]
  000a7	89 01		 mov	 DWORD PTR [ecx], eax

; 379  : 
; 380  : 	return ( outcode2 );

  000a9	0f b6 45 f6	 movzx	 eax, BYTE PTR _outcode2$[ebp]

; 381  : }

  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 0c 00	 ret	 12			; 0000000cH
?outcode_3d_surface_polygon@@YGHHHPAH@Z ENDP		; outcode_3d_surface_polygon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dconstr.c
;	COMDAT ?outcode_3d_polygon@@YGHHPAUPOINT_3D_PLAIN_REFERENCE@@HPAH@Z
_TEXT	SEGMENT
_points_list$ = -16					; size = 4
_outcode2$ = -10					; size = 1
_outcode$ = -9						; size = 1
_this_outcode$ = -8					; size = 4
_count$ = -4						; size = 4
_num_points$ = 8					; size = 4
_points$ = 12						; size = 4
_base_point$ = 16					; size = 4
_polygon_outcode$ = 20					; size = 4
?outcode_3d_polygon@@YGHHPAUPOINT_3D_PLAIN_REFERENCE@@HPAH@Z PROC ; outcode_3d_polygon, COMDAT

; 314  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 315  : 
; 316  : 	int
; 317  : 		count,
; 318  : 		this_outcode;
; 319  : 
; 320  : 	unsigned char
; 321  : 		outcode,
; 322  : 		outcode2;
; 323  : 
; 324  : 	vertex
; 325  : 		*points_list;
; 326  : 
; 327  : 	points_list = transformed_3d_points + base_point;

  00009	8b 45 10	 mov	 eax, DWORD PTR _base_point$[ebp]
  0000c	c1 e0 06	 shl	 eax, 6
  0000f	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_points@@3PAUVERTEX@@A ; transformed_3d_points
  00014	89 45 f0	 mov	 DWORD PTR _points_list$[ebp], eax

; 328  : 
; 329  : 	this_outcode = points_list[points[0].point].outcode;

  00017	b8 02 00 00 00	 mov	 eax, 2
  0001c	6b c8 00	 imul	 ecx, eax, 0
  0001f	8b 55 0c	 mov	 edx, DWORD PTR _points$[ebp]
  00022	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  00026	c1 e0 06	 shl	 eax, 6
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _points_list$[ebp]
  0002c	0f b6 54 01 2c	 movzx	 edx, BYTE PTR [ecx+eax+44]
  00031	89 55 f8	 mov	 DWORD PTR _this_outcode$[ebp], edx

; 330  : 	outcode = this_outcode;

  00034	8a 45 f8	 mov	 al, BYTE PTR _this_outcode$[ebp]
  00037	88 45 f7	 mov	 BYTE PTR _outcode$[ebp], al

; 331  : 	outcode2 = this_outcode;

  0003a	8a 45 f8	 mov	 al, BYTE PTR _this_outcode$[ebp]
  0003d	88 45 f6	 mov	 BYTE PTR _outcode2$[ebp], al

; 332  : 
; 333  : 	for ( count = 1; count < num_points; count++ )

  00040	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _count$[ebp], 1
  00047	eb 09		 jmp	 SHORT $LN4@outcode_3d
$LN2@outcode_3d:
  00049	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0004c	83 c0 01	 add	 eax, 1
  0004f	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@outcode_3d:
  00052	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00055	3b 45 08	 cmp	 eax, DWORD PTR _num_points$[ebp]
  00058	7d 2e		 jge	 SHORT $LN3@outcode_3d

; 334  : 	{
; 335  : 
; 336  : 		this_outcode = points_list[points[count].point].outcode;

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0005d	8b 4d 0c	 mov	 ecx, DWORD PTR _points$[ebp]
  00060	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00064	c1 e2 06	 shl	 edx, 6
  00067	8b 45 f0	 mov	 eax, DWORD PTR _points_list$[ebp]
  0006a	0f b6 4c 10 2c	 movzx	 ecx, BYTE PTR [eax+edx+44]
  0006f	89 4d f8	 mov	 DWORD PTR _this_outcode$[ebp], ecx

; 337  : 		outcode |= this_outcode;

  00072	0f b6 45 f7	 movzx	 eax, BYTE PTR _outcode$[ebp]
  00076	0b 45 f8	 or	 eax, DWORD PTR _this_outcode$[ebp]
  00079	88 45 f7	 mov	 BYTE PTR _outcode$[ebp], al

; 338  : 		outcode2 &= this_outcode;

  0007c	0f b6 45 f6	 movzx	 eax, BYTE PTR _outcode2$[ebp]
  00080	23 45 f8	 and	 eax, DWORD PTR _this_outcode$[ebp]
  00083	88 45 f6	 mov	 BYTE PTR _outcode2$[ebp], al

; 339  : 	}

  00086	eb c1		 jmp	 SHORT $LN2@outcode_3d
$LN3@outcode_3d:

; 340  : 
; 341  : 	*polygon_outcode = outcode;

  00088	0f b6 45 f7	 movzx	 eax, BYTE PTR _outcode$[ebp]
  0008c	8b 4d 14	 mov	 ecx, DWORD PTR _polygon_outcode$[ebp]
  0008f	89 01		 mov	 DWORD PTR [ecx], eax

; 342  : 
; 343  : 	return ( outcode2 );

  00091	0f b6 45 f6	 movzx	 eax, BYTE PTR _outcode2$[ebp]

; 344  : }

  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c2 10 00	 ret	 16			; 00000010H
?outcode_3d_polygon@@YGHHPAUPOINT_3D_PLAIN_REFERENCE@@HPAH@Z ENDP ; outcode_3d_polygon
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dconstr.c
;	COMDAT ?construct_3d_surface_shadow_textured_triangle_fan@@YGPAUVERTEX@@HHPAH@Z
_TEXT	SEGMENT
_third_point$ = -16					; size = 4
_second_point$ = -12					; size = 4
_first_point$ = -8					; size = 4
_outcode2$ = -2						; size = 1
_outcode$ = -1						; size = 1
_triangle_index$ = 8					; size = 4
_base_point$ = 12					; size = 4
_polygon_outcode$ = 16					; size = 4
?construct_3d_surface_shadow_textured_triangle_fan@@YGPAUVERTEX@@HHPAH@Z PROC ; construct_3d_surface_shadow_textured_triangle_fan, COMDAT

; 261  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 262  : 
; 263  : 	unsigned char
; 264  : 		outcode,
; 265  : 		outcode2;
; 266  : 
; 267  : 	int
; 268  : 		first_point,
; 269  : 		second_point,
; 270  : 		third_point;
; 271  : 
; 272  : 	first_point = current_object_3d_surface_point_list[ current_object_3d_point_list[0].point ].point + base_point;

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  00017	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  0001b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  00021	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00025	03 55 0c	 add	 edx, DWORD PTR _base_point$[ebp]
  00028	89 55 f8	 mov	 DWORD PTR _first_point$[ebp], edx

; 273  : 	outcode = transformed_3d_points[ first_point ].outcode;

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _first_point$[ebp]
  0002e	c1 e0 06	 shl	 eax, 6
  00031	8a 88 2c 00 00
	00		 mov	 cl, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  00037	88 4d ff	 mov	 BYTE PTR _outcode$[ebp], cl

; 274  : 	outcode2 = transformed_3d_points[ first_point ].outcode;

  0003a	8b 45 f8	 mov	 eax, DWORD PTR _first_point$[ebp]
  0003d	c1 e0 06	 shl	 eax, 6
  00040	8a 88 2c 00 00
	00		 mov	 cl, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  00046	88 4d fe	 mov	 BYTE PTR _outcode2$[ebp], cl

; 275  : 
; 276  : 	second_point = current_object_3d_surface_point_list[ current_object_3d_point_list[triangle_index + 1].point ].point + base_point;

  00049	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  0004e	03 45 08	 add	 eax, DWORD PTR _triangle_index$[ebp]
  00051	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  0005b	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  0005f	03 45 0c	 add	 eax, DWORD PTR _base_point$[ebp]
  00062	89 45 f4	 mov	 DWORD PTR _second_point$[ebp], eax

; 277  : 	outcode |= transformed_3d_points[second_point].outcode;

  00065	8b 45 f4	 mov	 eax, DWORD PTR _second_point$[ebp]
  00068	c1 e0 06	 shl	 eax, 6
  0006b	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  00072	0f b6 55 ff	 movzx	 edx, BYTE PTR _outcode$[ebp]
  00076	0b d1		 or	 edx, ecx
  00078	88 55 ff	 mov	 BYTE PTR _outcode$[ebp], dl

; 278  : 	outcode2 &= transformed_3d_points[second_point].outcode;

  0007b	8b 45 f4	 mov	 eax, DWORD PTR _second_point$[ebp]
  0007e	c1 e0 06	 shl	 eax, 6
  00081	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  00088	0f b6 55 fe	 movzx	 edx, BYTE PTR _outcode2$[ebp]
  0008c	23 d1		 and	 edx, ecx
  0008e	88 55 fe	 mov	 BYTE PTR _outcode2$[ebp], dl

; 279  : 	transformed_3d_points[first_point] .next_vertex = &transformed_3d_points [second_point];

  00091	8b 45 f4	 mov	 eax, DWORD PTR _second_point$[ebp]
  00094	c1 e0 06	 shl	 eax, 6
  00097	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_points@@3PAUVERTEX@@A ; transformed_3d_points
  0009c	8b 4d f8	 mov	 ecx, DWORD PTR _first_point$[ebp]
  0009f	c1 e1 06	 shl	 ecx, 6
  000a2	89 81 28 00 00
	00		 mov	 DWORD PTR ?transformed_3d_points@@3PAUVERTEX@@A[ecx+40], eax

; 280  : 
; 281  : 	third_point = current_object_3d_surface_point_list[ current_object_3d_point_list[triangle_index + 2].point ].point + base_point;

  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  000ad	03 45 08	 add	 eax, DWORD PTR _triangle_index$[ebp]
  000b0	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  000b4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  000ba	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  000be	03 45 0c	 add	 eax, DWORD PTR _base_point$[ebp]
  000c1	89 45 f0	 mov	 DWORD PTR _third_point$[ebp], eax

; 282  : 	outcode |= transformed_3d_points[third_point].outcode;

  000c4	8b 45 f0	 mov	 eax, DWORD PTR _third_point$[ebp]
  000c7	c1 e0 06	 shl	 eax, 6
  000ca	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  000d1	0f b6 55 ff	 movzx	 edx, BYTE PTR _outcode$[ebp]
  000d5	0b d1		 or	 edx, ecx
  000d7	88 55 ff	 mov	 BYTE PTR _outcode$[ebp], dl

; 283  : 	outcode2 &= transformed_3d_points[third_point].outcode;

  000da	8b 45 f0	 mov	 eax, DWORD PTR _third_point$[ebp]
  000dd	c1 e0 06	 shl	 eax, 6
  000e0	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  000e7	0f b6 55 fe	 movzx	 edx, BYTE PTR _outcode2$[ebp]
  000eb	23 d1		 and	 edx, ecx
  000ed	88 55 fe	 mov	 BYTE PTR _outcode2$[ebp], dl

; 284  : 	transformed_3d_points[second_point] .next_vertex = &transformed_3d_points[third_point];

  000f0	8b 45 f0	 mov	 eax, DWORD PTR _third_point$[ebp]
  000f3	c1 e0 06	 shl	 eax, 6
  000f6	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_points@@3PAUVERTEX@@A ; transformed_3d_points
  000fb	8b 4d f4	 mov	 ecx, DWORD PTR _second_point$[ebp]
  000fe	c1 e1 06	 shl	 ecx, 6
  00101	89 81 28 00 00
	00		 mov	 DWORD PTR ?transformed_3d_points@@3PAUVERTEX@@A[ecx+40], eax

; 285  : 
; 286  : 	transformed_3d_points[first_point].u = current_object_3d_surface_point_texture_list[ current_object_3d_point_list[0].point ].u;

  00107	b8 01 00 00 00	 mov	 eax, 1
  0010c	6b c8 00	 imul	 ecx, eax, 0
  0010f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  00115	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00119	8b 4d f8	 mov	 ecx, DWORD PTR _first_point$[ebp]
  0011c	c1 e1 06	 shl	 ecx, 6
  0011f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A ; current_object_3d_surface_point_texture_list
  00125	8b 04 c2	 mov	 eax, DWORD PTR [edx+eax*8]
  00128	89 81 18 00 00
	00		 mov	 DWORD PTR ?transformed_3d_points@@3PAUVERTEX@@A[ecx+24], eax

; 287  : 	transformed_3d_points[first_point].v = current_object_3d_surface_point_texture_list[ current_object_3d_point_list[0].point ].v;

  0012e	b8 01 00 00 00	 mov	 eax, 1
  00133	6b c8 00	 imul	 ecx, eax, 0
  00136	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  0013c	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00140	8b 4d f8	 mov	 ecx, DWORD PTR _first_point$[ebp]
  00143	c1 e1 06	 shl	 ecx, 6
  00146	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A ; current_object_3d_surface_point_texture_list
  0014c	8b 44 c2 04	 mov	 eax, DWORD PTR [edx+eax*8+4]
  00150	89 81 1c 00 00
	00		 mov	 DWORD PTR ?transformed_3d_points@@3PAUVERTEX@@A[ecx+28], eax

; 288  : 	transformed_3d_points[second_point].u = current_object_3d_surface_point_texture_list[ current_object_3d_point_list[triangle_index+1].point ].u;

  00156	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  0015b	03 45 08	 add	 eax, DWORD PTR _triangle_index$[ebp]
  0015e	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00162	8b 55 f4	 mov	 edx, DWORD PTR _second_point$[ebp]
  00165	c1 e2 06	 shl	 edx, 6
  00168	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A ; current_object_3d_surface_point_texture_list
  0016d	8b 0c c8	 mov	 ecx, DWORD PTR [eax+ecx*8]
  00170	89 8a 18 00 00
	00		 mov	 DWORD PTR ?transformed_3d_points@@3PAUVERTEX@@A[edx+24], ecx

; 289  : 	transformed_3d_points[second_point].v = current_object_3d_surface_point_texture_list[ current_object_3d_point_list[triangle_index+1].point ].v;

  00176	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  0017b	03 45 08	 add	 eax, DWORD PTR _triangle_index$[ebp]
  0017e	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00182	8b 55 f4	 mov	 edx, DWORD PTR _second_point$[ebp]
  00185	c1 e2 06	 shl	 edx, 6
  00188	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A ; current_object_3d_surface_point_texture_list
  0018d	8b 4c c8 04	 mov	 ecx, DWORD PTR [eax+ecx*8+4]
  00191	89 8a 1c 00 00
	00		 mov	 DWORD PTR ?transformed_3d_points@@3PAUVERTEX@@A[edx+28], ecx

; 290  : 	transformed_3d_points[third_point].u = current_object_3d_surface_point_texture_list[ current_object_3d_point_list[triangle_index+2].point ].u;

  00197	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  0019c	03 45 08	 add	 eax, DWORD PTR _triangle_index$[ebp]
  0019f	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  001a3	8b 55 f0	 mov	 edx, DWORD PTR _third_point$[ebp]
  001a6	c1 e2 06	 shl	 edx, 6
  001a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A ; current_object_3d_surface_point_texture_list
  001ae	8b 0c c8	 mov	 ecx, DWORD PTR [eax+ecx*8]
  001b1	89 8a 18 00 00
	00		 mov	 DWORD PTR ?transformed_3d_points@@3PAUVERTEX@@A[edx+24], ecx

; 291  : 	transformed_3d_points[third_point].v = current_object_3d_surface_point_texture_list[ current_object_3d_point_list[triangle_index+2].point ].v;

  001b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  001bc	03 45 08	 add	 eax, DWORD PTR _triangle_index$[ebp]
  001bf	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  001c3	8b 55 f0	 mov	 edx, DWORD PTR _third_point$[ebp]
  001c6	c1 e2 06	 shl	 edx, 6
  001c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_surface_point_texture_list@@3PAUOBJECT_3D_SHORT_TEXTURED_POINT@@A ; current_object_3d_surface_point_texture_list
  001ce	8b 4c c8 04	 mov	 ecx, DWORD PTR [eax+ecx*8+4]
  001d2	89 8a 1c 00 00
	00		 mov	 DWORD PTR ?transformed_3d_points@@3PAUVERTEX@@A[edx+28], ecx

; 292  : 
; 293  : 	transformed_3d_points[third_point].next_vertex = NULL;

  001d8	8b 45 f0	 mov	 eax, DWORD PTR _third_point$[ebp]
  001db	c1 e0 06	 shl	 eax, 6
  001de	c7 80 28 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+40], 0

; 294  : 
; 295  : 	*polygon_outcode = outcode;

  001e8	0f b6 45 ff	 movzx	 eax, BYTE PTR _outcode$[ebp]
  001ec	8b 4d 10	 mov	 ecx, DWORD PTR _polygon_outcode$[ebp]
  001ef	89 01		 mov	 DWORD PTR [ecx], eax

; 296  : 
; 297  : 	if ( outcode2 )

  001f1	0f b6 45 fe	 movzx	 eax, BYTE PTR _outcode2$[ebp]
  001f5	85 c0		 test	 eax, eax
  001f7	74 06		 je	 SHORT $LN2@construct_

; 298  : 	{
; 299  : 
; 300  : 		return ( NULL );

  001f9	33 c0		 xor	 eax, eax
  001fb	eb 0d		 jmp	 SHORT $LN3@construct_

; 301  : 	}
; 302  : 	else

  001fd	eb 0b		 jmp	 SHORT $LN3@construct_
$LN2@construct_:

; 303  : 	{
; 304  : 
; 305  : 		return ( &transformed_3d_points[first_point] );

  001ff	8b 45 f8	 mov	 eax, DWORD PTR _first_point$[ebp]
  00202	c1 e0 06	 shl	 eax, 6
  00205	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_points@@3PAUVERTEX@@A ; transformed_3d_points
$LN3@construct_:

; 306  : 	}
; 307  : }

  0020a	5f		 pop	 edi
  0020b	5e		 pop	 esi
  0020c	5b		 pop	 ebx
  0020d	8b e5		 mov	 esp, ebp
  0020f	5d		 pop	 ebp
  00210	c2 0c 00	 ret	 12			; 0000000cH
?construct_3d_surface_shadow_textured_triangle_fan@@YGPAUVERTEX@@HHPAH@Z ENDP ; construct_3d_surface_shadow_textured_triangle_fan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dconstr.c
;	COMDAT ?construct_3d_textured_triangle_fan@@YGPAUVERTEX@@HPAUPOINT_3D_PLAIN_REFERENCE@@PAUOBJECT_3D_SHORT_TEXTURED_POINT@@HPAH@Z
_TEXT	SEGMENT
_third_point$ = -20					; size = 4
_second_point$ = -16					; size = 4
_first_point$ = -12					; size = 4
_points_base$ = -8					; size = 4
_outcode2$ = -2						; size = 1
_outcode$ = -1						; size = 1
_triangle_index$ = 8					; size = 4
_polygon_points$ = 12					; size = 4
_texture_points$ = 16					; size = 4
_base_point$ = 20					; size = 4
_polygon_outcode$ = 24					; size = 4
?construct_3d_textured_triangle_fan@@YGPAUVERTEX@@HPAUPOINT_3D_PLAIN_REFERENCE@@PAUOBJECT_3D_SHORT_TEXTURED_POINT@@HPAH@Z PROC ; construct_3d_textured_triangle_fan, COMDAT

; 204  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 205  : 
; 206  : 	unsigned char
; 207  : 		outcode,
; 208  : 		outcode2;
; 209  : 
; 210  : 	vertex
; 211  : 		*points_base,
; 212  : 		*first_point,
; 213  : 		*second_point,
; 214  : 		*third_point;
; 215  : 
; 216  : 	points_base = &transformed_3d_points[base_point];

  00009	8b 45 14	 mov	 eax, DWORD PTR _base_point$[ebp]
  0000c	c1 e0 06	 shl	 eax, 6
  0000f	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_points@@3PAUVERTEX@@A ; transformed_3d_points
  00014	89 45 f8	 mov	 DWORD PTR _points_base$[ebp], eax

; 217  : 
; 218  : 	first_point = &points_base[polygon_points[0].point];

  00017	b8 02 00 00 00	 mov	 eax, 2
  0001c	6b c8 00	 imul	 ecx, eax, 0
  0001f	8b 55 0c	 mov	 edx, DWORD PTR _polygon_points$[ebp]
  00022	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  00026	c1 e0 06	 shl	 eax, 6
  00029	03 45 f8	 add	 eax, DWORD PTR _points_base$[ebp]
  0002c	89 45 f4	 mov	 DWORD PTR _first_point$[ebp], eax

; 219  : 	first_point->u = texture_points[0].u;

  0002f	b8 08 00 00 00	 mov	 eax, 8
  00034	6b c8 00	 imul	 ecx, eax, 0
  00037	8b 55 f4	 mov	 edx, DWORD PTR _first_point$[ebp]
  0003a	8b 45 10	 mov	 eax, DWORD PTR _texture_points$[ebp]
  0003d	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  00040	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 220  : 	first_point->v = texture_points[0].v;

  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	6b c8 00	 imul	 ecx, eax, 0
  0004b	8b 55 f4	 mov	 edx, DWORD PTR _first_point$[ebp]
  0004e	8b 45 10	 mov	 eax, DWORD PTR _texture_points$[ebp]
  00051	8b 4c 08 04	 mov	 ecx, DWORD PTR [eax+ecx+4]
  00055	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx

; 221  : 	outcode = first_point->outcode;

  00058	8b 45 f4	 mov	 eax, DWORD PTR _first_point$[ebp]
  0005b	8a 48 2c	 mov	 cl, BYTE PTR [eax+44]
  0005e	88 4d ff	 mov	 BYTE PTR _outcode$[ebp], cl

; 222  : 	outcode2 = first_point->outcode;

  00061	8b 45 f4	 mov	 eax, DWORD PTR _first_point$[ebp]
  00064	8a 48 2c	 mov	 cl, BYTE PTR [eax+44]
  00067	88 4d fe	 mov	 BYTE PTR _outcode2$[ebp], cl

; 223  : 
; 224  : 	second_point = &points_base[polygon_points[triangle_index+1].point];

  0006a	8b 45 08	 mov	 eax, DWORD PTR _triangle_index$[ebp]
  0006d	8b 4d 0c	 mov	 ecx, DWORD PTR _polygon_points$[ebp]
  00070	0f b7 54 41 02	 movzx	 edx, WORD PTR [ecx+eax*2+2]
  00075	c1 e2 06	 shl	 edx, 6
  00078	03 55 f8	 add	 edx, DWORD PTR _points_base$[ebp]
  0007b	89 55 f0	 mov	 DWORD PTR _second_point$[ebp], edx

; 225  : 	second_point->u = texture_points[triangle_index+1].u;

  0007e	8b 45 f0	 mov	 eax, DWORD PTR _second_point$[ebp]
  00081	8b 4d 08	 mov	 ecx, DWORD PTR _triangle_index$[ebp]
  00084	8b 55 10	 mov	 edx, DWORD PTR _texture_points$[ebp]
  00087	8b 4c ca 08	 mov	 ecx, DWORD PTR [edx+ecx*8+8]
  0008b	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 226  : 	second_point->v = texture_points[triangle_index+1].v;

  0008e	8b 45 f0	 mov	 eax, DWORD PTR _second_point$[ebp]
  00091	8b 4d 08	 mov	 ecx, DWORD PTR _triangle_index$[ebp]
  00094	8b 55 10	 mov	 edx, DWORD PTR _texture_points$[ebp]
  00097	8b 4c ca 0c	 mov	 ecx, DWORD PTR [edx+ecx*8+12]
  0009b	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 227  : 	outcode |= second_point->outcode;

  0009e	8b 45 f0	 mov	 eax, DWORD PTR _second_point$[ebp]
  000a1	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000a5	0f b6 55 ff	 movzx	 edx, BYTE PTR _outcode$[ebp]
  000a9	0b d1		 or	 edx, ecx
  000ab	88 55 ff	 mov	 BYTE PTR _outcode$[ebp], dl

; 228  : 	outcode2 &= second_point->outcode;

  000ae	8b 45 f0	 mov	 eax, DWORD PTR _second_point$[ebp]
  000b1	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000b5	0f b6 55 fe	 movzx	 edx, BYTE PTR _outcode2$[ebp]
  000b9	23 d1		 and	 edx, ecx
  000bb	88 55 fe	 mov	 BYTE PTR _outcode2$[ebp], dl

; 229  : 
; 230  : 	third_point = &points_base[polygon_points[triangle_index+2].point];

  000be	8b 45 08	 mov	 eax, DWORD PTR _triangle_index$[ebp]
  000c1	8b 4d 0c	 mov	 ecx, DWORD PTR _polygon_points$[ebp]
  000c4	0f b7 54 41 04	 movzx	 edx, WORD PTR [ecx+eax*2+4]
  000c9	c1 e2 06	 shl	 edx, 6
  000cc	03 55 f8	 add	 edx, DWORD PTR _points_base$[ebp]
  000cf	89 55 ec	 mov	 DWORD PTR _third_point$[ebp], edx

; 231  : 	third_point->u = texture_points[triangle_index+2].u;

  000d2	8b 45 ec	 mov	 eax, DWORD PTR _third_point$[ebp]
  000d5	8b 4d 08	 mov	 ecx, DWORD PTR _triangle_index$[ebp]
  000d8	8b 55 10	 mov	 edx, DWORD PTR _texture_points$[ebp]
  000db	8b 4c ca 10	 mov	 ecx, DWORD PTR [edx+ecx*8+16]
  000df	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 232  : 	third_point->v = texture_points[triangle_index+2].v;

  000e2	8b 45 ec	 mov	 eax, DWORD PTR _third_point$[ebp]
  000e5	8b 4d 08	 mov	 ecx, DWORD PTR _triangle_index$[ebp]
  000e8	8b 55 10	 mov	 edx, DWORD PTR _texture_points$[ebp]
  000eb	8b 4c ca 14	 mov	 ecx, DWORD PTR [edx+ecx*8+20]
  000ef	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 233  : 	outcode |= third_point->outcode;

  000f2	8b 45 ec	 mov	 eax, DWORD PTR _third_point$[ebp]
  000f5	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  000f9	0f b6 55 ff	 movzx	 edx, BYTE PTR _outcode$[ebp]
  000fd	0b d1		 or	 edx, ecx
  000ff	88 55 ff	 mov	 BYTE PTR _outcode$[ebp], dl

; 234  : 	outcode2 &= third_point->outcode;

  00102	8b 45 ec	 mov	 eax, DWORD PTR _third_point$[ebp]
  00105	0f b6 48 2c	 movzx	 ecx, BYTE PTR [eax+44]
  00109	0f b6 55 fe	 movzx	 edx, BYTE PTR _outcode2$[ebp]
  0010d	23 d1		 and	 edx, ecx
  0010f	88 55 fe	 mov	 BYTE PTR _outcode2$[ebp], dl

; 235  : 
; 236  : 	if ( outcode2 )

  00112	0f b6 45 fe	 movzx	 eax, BYTE PTR _outcode2$[ebp]
  00116	85 c0		 test	 eax, eax
  00118	74 06		 je	 SHORT $LN2@construct_

; 237  : 	{
; 238  : 
; 239  : 		return ( NULL );

  0011a	33 c0		 xor	 eax, eax
  0011c	eb 2a		 jmp	 SHORT $LN3@construct_

; 240  : 	}
; 241  : 	else

  0011e	eb 28		 jmp	 SHORT $LN3@construct_
$LN2@construct_:

; 242  : 	{
; 243  : 
; 244  : 		*polygon_outcode = outcode;

  00120	0f b6 45 ff	 movzx	 eax, BYTE PTR _outcode$[ebp]
  00124	8b 4d 18	 mov	 ecx, DWORD PTR _polygon_outcode$[ebp]
  00127	89 01		 mov	 DWORD PTR [ecx], eax

; 245  : 
; 246  : 		first_point->next_vertex = second_point;

  00129	8b 45 f4	 mov	 eax, DWORD PTR _first_point$[ebp]
  0012c	8b 4d f0	 mov	 ecx, DWORD PTR _second_point$[ebp]
  0012f	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 247  : 
; 248  : 		second_point->next_vertex = third_point;

  00132	8b 45 f0	 mov	 eax, DWORD PTR _second_point$[ebp]
  00135	8b 4d ec	 mov	 ecx, DWORD PTR _third_point$[ebp]
  00138	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 249  : 
; 250  : 		third_point->next_vertex = NULL;

  0013b	8b 45 ec	 mov	 eax, DWORD PTR _third_point$[ebp]
  0013e	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 251  : 	
; 252  : 		return ( first_point );

  00145	8b 45 f4	 mov	 eax, DWORD PTR _first_point$[ebp]
$LN3@construct_:

; 253  : 	}
; 254  : }

  00148	5f		 pop	 edi
  00149	5e		 pop	 esi
  0014a	5b		 pop	 ebx
  0014b	8b e5		 mov	 esp, ebp
  0014d	5d		 pop	 ebp
  0014e	c2 14 00	 ret	 20			; 00000014H
?construct_3d_textured_triangle_fan@@YGPAUVERTEX@@HPAUPOINT_3D_PLAIN_REFERENCE@@PAUOBJECT_3D_SHORT_TEXTURED_POINT@@HPAH@Z ENDP ; construct_3d_textured_triangle_fan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dconstr.c
;	COMDAT ?construct_3d_surface_shadow_triangle_fan@@YGPAUVERTEX@@HHPAH@Z
_TEXT	SEGMENT
_third_point$ = -16					; size = 4
_second_point$ = -12					; size = 4
_first_point$ = -8					; size = 4
_outcode2$ = -2						; size = 1
_outcode$ = -1						; size = 1
_triangle_index$ = 8					; size = 4
_base_point$ = 12					; size = 4
_polygon_outcode$ = 16					; size = 4
?construct_3d_surface_shadow_triangle_fan@@YGPAUVERTEX@@HHPAH@Z PROC ; construct_3d_surface_shadow_triangle_fan, COMDAT

; 158  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 159  : 
; 160  : 	unsigned char
; 161  : 		outcode,
; 162  : 		outcode2;
; 163  : 
; 164  : 	int
; 165  : 		first_point,
; 166  : 		second_point,
; 167  : 		third_point;
; 168  : 
; 169  : 	first_point = current_object_3d_surface_point_list[ current_object_3d_point_list[0].point ].point + base_point;

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  00017	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  0001b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  00021	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00025	03 55 0c	 add	 edx, DWORD PTR _base_point$[ebp]
  00028	89 55 f8	 mov	 DWORD PTR _first_point$[ebp], edx

; 170  : 	outcode = transformed_3d_points[ first_point ].outcode;

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _first_point$[ebp]
  0002e	c1 e0 06	 shl	 eax, 6
  00031	8a 88 2c 00 00
	00		 mov	 cl, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  00037	88 4d ff	 mov	 BYTE PTR _outcode$[ebp], cl

; 171  : 	outcode2 = transformed_3d_points[ first_point ].outcode;

  0003a	8b 45 f8	 mov	 eax, DWORD PTR _first_point$[ebp]
  0003d	c1 e0 06	 shl	 eax, 6
  00040	8a 88 2c 00 00
	00		 mov	 cl, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  00046	88 4d fe	 mov	 BYTE PTR _outcode2$[ebp], cl

; 172  : 
; 173  : 	second_point = current_object_3d_surface_point_list[ current_object_3d_point_list[triangle_index + 1].point ].point + base_point;

  00049	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  0004e	03 45 08	 add	 eax, DWORD PTR _triangle_index$[ebp]
  00051	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  0005b	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  0005f	03 45 0c	 add	 eax, DWORD PTR _base_point$[ebp]
  00062	89 45 f4	 mov	 DWORD PTR _second_point$[ebp], eax

; 174  : 	outcode |= transformed_3d_points[second_point].outcode;

  00065	8b 45 f4	 mov	 eax, DWORD PTR _second_point$[ebp]
  00068	c1 e0 06	 shl	 eax, 6
  0006b	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  00072	0f b6 55 ff	 movzx	 edx, BYTE PTR _outcode$[ebp]
  00076	0b d1		 or	 edx, ecx
  00078	88 55 ff	 mov	 BYTE PTR _outcode$[ebp], dl

; 175  : 	outcode2 &= transformed_3d_points[second_point].outcode;

  0007b	8b 45 f4	 mov	 eax, DWORD PTR _second_point$[ebp]
  0007e	c1 e0 06	 shl	 eax, 6
  00081	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  00088	0f b6 55 fe	 movzx	 edx, BYTE PTR _outcode2$[ebp]
  0008c	23 d1		 and	 edx, ecx
  0008e	88 55 fe	 mov	 BYTE PTR _outcode2$[ebp], dl

; 176  : 	transformed_3d_points[first_point] .next_vertex = &transformed_3d_points [second_point];

  00091	8b 45 f4	 mov	 eax, DWORD PTR _second_point$[ebp]
  00094	c1 e0 06	 shl	 eax, 6
  00097	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_points@@3PAUVERTEX@@A ; transformed_3d_points
  0009c	8b 4d f8	 mov	 ecx, DWORD PTR _first_point$[ebp]
  0009f	c1 e1 06	 shl	 ecx, 6
  000a2	89 81 28 00 00
	00		 mov	 DWORD PTR ?transformed_3d_points@@3PAUVERTEX@@A[ecx+40], eax

; 177  : 
; 178  : 	third_point = current_object_3d_surface_point_list[ current_object_3d_point_list[triangle_index + 2].point ].point + base_point;

  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_object_3d_point_list@@3PAUPOINT_3D_SHORT_REFERENCE@@A ; current_object_3d_point_list
  000ad	03 45 08	 add	 eax, DWORD PTR _triangle_index$[ebp]
  000b0	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  000b4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_object_3d_surface_point_list@@3PAUPOINT_3D_PLAIN_REFERENCE@@A ; current_object_3d_surface_point_list
  000ba	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  000be	03 45 0c	 add	 eax, DWORD PTR _base_point$[ebp]
  000c1	89 45 f0	 mov	 DWORD PTR _third_point$[ebp], eax

; 179  : 	outcode |= transformed_3d_points[third_point].outcode;

  000c4	8b 45 f0	 mov	 eax, DWORD PTR _third_point$[ebp]
  000c7	c1 e0 06	 shl	 eax, 6
  000ca	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  000d1	0f b6 55 ff	 movzx	 edx, BYTE PTR _outcode$[ebp]
  000d5	0b d1		 or	 edx, ecx
  000d7	88 55 ff	 mov	 BYTE PTR _outcode$[ebp], dl

; 180  : 	outcode2 &= transformed_3d_points[third_point].outcode;

  000da	8b 45 f0	 mov	 eax, DWORD PTR _third_point$[ebp]
  000dd	c1 e0 06	 shl	 eax, 6
  000e0	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  000e7	0f b6 55 fe	 movzx	 edx, BYTE PTR _outcode2$[ebp]
  000eb	23 d1		 and	 edx, ecx
  000ed	88 55 fe	 mov	 BYTE PTR _outcode2$[ebp], dl

; 181  : 	transformed_3d_points[second_point] .next_vertex = &transformed_3d_points[third_point];

  000f0	8b 45 f0	 mov	 eax, DWORD PTR _third_point$[ebp]
  000f3	c1 e0 06	 shl	 eax, 6
  000f6	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_points@@3PAUVERTEX@@A ; transformed_3d_points
  000fb	8b 4d f4	 mov	 ecx, DWORD PTR _second_point$[ebp]
  000fe	c1 e1 06	 shl	 ecx, 6
  00101	89 81 28 00 00
	00		 mov	 DWORD PTR ?transformed_3d_points@@3PAUVERTEX@@A[ecx+40], eax

; 182  : 
; 183  : 	transformed_3d_points[third_point].next_vertex = NULL;

  00107	8b 45 f0	 mov	 eax, DWORD PTR _third_point$[ebp]
  0010a	c1 e0 06	 shl	 eax, 6
  0010d	c7 80 28 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+40], 0

; 184  : 
; 185  : 	*polygon_outcode = outcode;

  00117	0f b6 45 ff	 movzx	 eax, BYTE PTR _outcode$[ebp]
  0011b	8b 4d 10	 mov	 ecx, DWORD PTR _polygon_outcode$[ebp]
  0011e	89 01		 mov	 DWORD PTR [ecx], eax

; 186  : 
; 187  : 	if ( outcode2 )

  00120	0f b6 45 fe	 movzx	 eax, BYTE PTR _outcode2$[ebp]
  00124	85 c0		 test	 eax, eax
  00126	74 06		 je	 SHORT $LN2@construct_

; 188  : 	{
; 189  : 
; 190  : 		return ( NULL );

  00128	33 c0		 xor	 eax, eax
  0012a	eb 0d		 jmp	 SHORT $LN1@construct_

; 191  : 	}
; 192  : 	else

  0012c	eb 0b		 jmp	 SHORT $LN1@construct_
$LN2@construct_:

; 193  : 	{
; 194  : 
; 195  : 		return ( &transformed_3d_points[first_point] );

  0012e	8b 45 f8	 mov	 eax, DWORD PTR _first_point$[ebp]
  00131	c1 e0 06	 shl	 eax, 6
  00134	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_points@@3PAUVERTEX@@A ; transformed_3d_points
$LN1@construct_:

; 196  : 	}
; 197  : }

  00139	5f		 pop	 edi
  0013a	5e		 pop	 esi
  0013b	5b		 pop	 ebx
  0013c	8b e5		 mov	 esp, ebp
  0013e	5d		 pop	 ebp
  0013f	c2 0c 00	 ret	 12			; 0000000cH
?construct_3d_surface_shadow_triangle_fan@@YGPAUVERTEX@@HHPAH@Z ENDP ; construct_3d_surface_shadow_triangle_fan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dconstr.c
;	COMDAT ?construct_3d_triangle_fan@@YGPAUVERTEX@@HPAUPOINT_3D_PLAIN_REFERENCE@@HPAH@Z
_TEXT	SEGMENT
_third_point$ = -16					; size = 4
_second_point$ = -12					; size = 4
_first_point$ = -8					; size = 4
_outcode2$ = -2						; size = 1
_outcode$ = -1						; size = 1
_triangle_index$ = 8					; size = 4
_points$ = 12						; size = 4
_base_point$ = 16					; size = 4
_polygon_outcode$ = 20					; size = 4
?construct_3d_triangle_fan@@YGPAUVERTEX@@HPAUPOINT_3D_PLAIN_REFERENCE@@HPAH@Z PROC ; construct_3d_triangle_fan, COMDAT

; 112  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 113  : 
; 114  : 	unsigned char
; 115  : 		outcode,
; 116  : 		outcode2;
; 117  : 
; 118  : 	int
; 119  : 		first_point,
; 120  : 		second_point,
; 121  : 		third_point;
; 122  : 
; 123  : 	first_point = points[0].point + base_point;

  00009	b8 02 00 00 00	 mov	 eax, 2
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 55 0c	 mov	 edx, DWORD PTR _points$[ebp]
  00014	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  00018	03 45 10	 add	 eax, DWORD PTR _base_point$[ebp]
  0001b	89 45 f8	 mov	 DWORD PTR _first_point$[ebp], eax

; 124  : 	outcode = transformed_3d_points[ first_point ].outcode;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR _first_point$[ebp]
  00021	c1 e0 06	 shl	 eax, 6
  00024	8a 88 2c 00 00
	00		 mov	 cl, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  0002a	88 4d ff	 mov	 BYTE PTR _outcode$[ebp], cl

; 125  : 	outcode2 = transformed_3d_points[ first_point ].outcode;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _first_point$[ebp]
  00030	c1 e0 06	 shl	 eax, 6
  00033	8a 88 2c 00 00
	00		 mov	 cl, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  00039	88 4d fe	 mov	 BYTE PTR _outcode2$[ebp], cl

; 126  : 
; 127  : 	second_point = points[triangle_index + 1].point + base_point;

  0003c	8b 45 08	 mov	 eax, DWORD PTR _triangle_index$[ebp]
  0003f	8b 4d 0c	 mov	 ecx, DWORD PTR _points$[ebp]
  00042	0f b7 54 41 02	 movzx	 edx, WORD PTR [ecx+eax*2+2]
  00047	03 55 10	 add	 edx, DWORD PTR _base_point$[ebp]
  0004a	89 55 f4	 mov	 DWORD PTR _second_point$[ebp], edx

; 128  : 	outcode |= transformed_3d_points[second_point].outcode;

  0004d	8b 45 f4	 mov	 eax, DWORD PTR _second_point$[ebp]
  00050	c1 e0 06	 shl	 eax, 6
  00053	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  0005a	0f b6 55 ff	 movzx	 edx, BYTE PTR _outcode$[ebp]
  0005e	0b d1		 or	 edx, ecx
  00060	88 55 ff	 mov	 BYTE PTR _outcode$[ebp], dl

; 129  : 	outcode2 &= transformed_3d_points[second_point].outcode;

  00063	8b 45 f4	 mov	 eax, DWORD PTR _second_point$[ebp]
  00066	c1 e0 06	 shl	 eax, 6
  00069	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  00070	0f b6 55 fe	 movzx	 edx, BYTE PTR _outcode2$[ebp]
  00074	23 d1		 and	 edx, ecx
  00076	88 55 fe	 mov	 BYTE PTR _outcode2$[ebp], dl

; 130  : 	transformed_3d_points[first_point] .next_vertex = &transformed_3d_points [second_point];

  00079	8b 45 f4	 mov	 eax, DWORD PTR _second_point$[ebp]
  0007c	c1 e0 06	 shl	 eax, 6
  0007f	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_points@@3PAUVERTEX@@A ; transformed_3d_points
  00084	8b 4d f8	 mov	 ecx, DWORD PTR _first_point$[ebp]
  00087	c1 e1 06	 shl	 ecx, 6
  0008a	89 81 28 00 00
	00		 mov	 DWORD PTR ?transformed_3d_points@@3PAUVERTEX@@A[ecx+40], eax

; 131  : 
; 132  : 	third_point = points[triangle_index + 2].point + base_point;

  00090	8b 45 08	 mov	 eax, DWORD PTR _triangle_index$[ebp]
  00093	8b 4d 0c	 mov	 ecx, DWORD PTR _points$[ebp]
  00096	0f b7 54 41 04	 movzx	 edx, WORD PTR [ecx+eax*2+4]
  0009b	03 55 10	 add	 edx, DWORD PTR _base_point$[ebp]
  0009e	89 55 f0	 mov	 DWORD PTR _third_point$[ebp], edx

; 133  : 	outcode |= transformed_3d_points[third_point].outcode;

  000a1	8b 45 f0	 mov	 eax, DWORD PTR _third_point$[ebp]
  000a4	c1 e0 06	 shl	 eax, 6
  000a7	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  000ae	0f b6 55 ff	 movzx	 edx, BYTE PTR _outcode$[ebp]
  000b2	0b d1		 or	 edx, ecx
  000b4	88 55 ff	 mov	 BYTE PTR _outcode$[ebp], dl

; 134  : 	outcode2 &= transformed_3d_points[third_point].outcode;

  000b7	8b 45 f0	 mov	 eax, DWORD PTR _third_point$[ebp]
  000ba	c1 e0 06	 shl	 eax, 6
  000bd	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  000c4	0f b6 55 fe	 movzx	 edx, BYTE PTR _outcode2$[ebp]
  000c8	23 d1		 and	 edx, ecx
  000ca	88 55 fe	 mov	 BYTE PTR _outcode2$[ebp], dl

; 135  : 	transformed_3d_points[second_point] .next_vertex = &transformed_3d_points[third_point];

  000cd	8b 45 f0	 mov	 eax, DWORD PTR _third_point$[ebp]
  000d0	c1 e0 06	 shl	 eax, 6
  000d3	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_points@@3PAUVERTEX@@A ; transformed_3d_points
  000d8	8b 4d f4	 mov	 ecx, DWORD PTR _second_point$[ebp]
  000db	c1 e1 06	 shl	 ecx, 6
  000de	89 81 28 00 00
	00		 mov	 DWORD PTR ?transformed_3d_points@@3PAUVERTEX@@A[ecx+40], eax

; 136  : 
; 137  : 	transformed_3d_points[third_point].next_vertex = NULL;

  000e4	8b 45 f0	 mov	 eax, DWORD PTR _third_point$[ebp]
  000e7	c1 e0 06	 shl	 eax, 6
  000ea	c7 80 28 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+40], 0

; 138  : 
; 139  : 	*polygon_outcode = outcode;

  000f4	0f b6 45 ff	 movzx	 eax, BYTE PTR _outcode$[ebp]
  000f8	8b 4d 14	 mov	 ecx, DWORD PTR _polygon_outcode$[ebp]
  000fb	89 01		 mov	 DWORD PTR [ecx], eax

; 140  : 
; 141  : 	if ( outcode2 )

  000fd	0f b6 45 fe	 movzx	 eax, BYTE PTR _outcode2$[ebp]
  00101	85 c0		 test	 eax, eax
  00103	74 06		 je	 SHORT $LN2@construct_

; 142  : 	{
; 143  : 
; 144  : 		return ( NULL );

  00105	33 c0		 xor	 eax, eax
  00107	eb 0d		 jmp	 SHORT $LN1@construct_

; 145  : 	}
; 146  : 	else

  00109	eb 0b		 jmp	 SHORT $LN1@construct_
$LN2@construct_:

; 147  : 	{
; 148  : 
; 149  : 		return ( &transformed_3d_points[first_point] );

  0010b	8b 45 f8	 mov	 eax, DWORD PTR _first_point$[ebp]
  0010e	c1 e0 06	 shl	 eax, 6
  00111	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_points@@3PAUVERTEX@@A ; transformed_3d_points
$LN1@construct_:

; 150  : 	}
; 151  : }

  00116	5f		 pop	 edi
  00117	5e		 pop	 esi
  00118	5b		 pop	 ebx
  00119	8b e5		 mov	 esp, ebp
  0011b	5d		 pop	 ebp
  0011c	c2 10 00	 ret	 16			; 00000010H
?construct_3d_triangle_fan@@YGPAUVERTEX@@HPAUPOINT_3D_PLAIN_REFERENCE@@HPAH@Z ENDP ; construct_3d_triangle_fan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\3d\3dconstr.c
;	COMDAT ?construct_3d_line@@YGPAUVERTEX@@PAUPOINT_3D_PLAIN_REFERENCE@@HPAH@Z
_TEXT	SEGMENT
_this_point$ = -16					; size = 4
_first_point$ = -12					; size = 4
_outcode2$ = -8						; size = 4
_outcode$ = -4						; size = 4
_points$ = 8						; size = 4
_base_point$ = 12					; size = 4
_polygon_outcode$ = 16					; size = 4
?construct_3d_line@@YGPAUVERTEX@@PAUPOINT_3D_PLAIN_REFERENCE@@HPAH@Z PROC ; construct_3d_line, COMDAT

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 75   : 
; 76   : 	int
; 77   : 		outcode,
; 78   : 		outcode2,
; 79   : 		first_point,
; 80   : 		this_point;
; 81   : 
; 82   : 	first_point = points[0].point + base_point;

  00009	b8 02 00 00 00	 mov	 eax, 2
  0000e	6b c8 00	 imul	 ecx, eax, 0
  00011	8b 55 08	 mov	 edx, DWORD PTR _points$[ebp]
  00014	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  00018	03 45 0c	 add	 eax, DWORD PTR _base_point$[ebp]
  0001b	89 45 f4	 mov	 DWORD PTR _first_point$[ebp], eax

; 83   : 	outcode = transformed_3d_points[first_point].outcode;

  0001e	8b 45 f4	 mov	 eax, DWORD PTR _first_point$[ebp]
  00021	c1 e0 06	 shl	 eax, 6
  00024	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  0002b	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 84   : 	outcode2 = transformed_3d_points[first_point].outcode;

  0002e	8b 45 f4	 mov	 eax, DWORD PTR _first_point$[ebp]
  00031	c1 e0 06	 shl	 eax, 6
  00034	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  0003b	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx

; 85   : 
; 86   : 	this_point = points[1].point + base_point;

  0003e	b8 02 00 00 00	 mov	 eax, 2
  00043	c1 e0 00	 shl	 eax, 0
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _points$[ebp]
  00049	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  0004d	03 55 0c	 add	 edx, DWORD PTR _base_point$[ebp]
  00050	89 55 f0	 mov	 DWORD PTR _this_point$[ebp], edx

; 87   : 	outcode |= transformed_3d_points[this_point].outcode;

  00053	8b 45 f0	 mov	 eax, DWORD PTR _this_point$[ebp]
  00056	c1 e0 06	 shl	 eax, 6
  00059	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  00060	0b 4d fc	 or	 ecx, DWORD PTR _outcode$[ebp]
  00063	89 4d fc	 mov	 DWORD PTR _outcode$[ebp], ecx

; 88   : 	outcode2 &= transformed_3d_points[this_point].outcode;

  00066	8b 45 f0	 mov	 eax, DWORD PTR _this_point$[ebp]
  00069	c1 e0 06	 shl	 eax, 6
  0006c	0f b6 88 2c 00
	00 00		 movzx	 ecx, BYTE PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+44]
  00073	23 4d f8	 and	 ecx, DWORD PTR _outcode2$[ebp]
  00076	89 4d f8	 mov	 DWORD PTR _outcode2$[ebp], ecx

; 89   : 	transformed_3d_points[first_point].next_vertex = &transformed_3d_points[this_point];

  00079	8b 45 f0	 mov	 eax, DWORD PTR _this_point$[ebp]
  0007c	c1 e0 06	 shl	 eax, 6
  0007f	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_points@@3PAUVERTEX@@A ; transformed_3d_points
  00084	8b 4d f4	 mov	 ecx, DWORD PTR _first_point$[ebp]
  00087	c1 e1 06	 shl	 ecx, 6
  0008a	89 81 28 00 00
	00		 mov	 DWORD PTR ?transformed_3d_points@@3PAUVERTEX@@A[ecx+40], eax

; 90   : 
; 91   : 	transformed_3d_points[this_point].next_vertex = NULL;

  00090	8b 45 f0	 mov	 eax, DWORD PTR _this_point$[ebp]
  00093	c1 e0 06	 shl	 eax, 6
  00096	c7 80 28 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?transformed_3d_points@@3PAUVERTEX@@A[eax+40], 0

; 92   : 
; 93   : 	*polygon_outcode = outcode;

  000a0	8b 45 10	 mov	 eax, DWORD PTR _polygon_outcode$[ebp]
  000a3	8b 4d fc	 mov	 ecx, DWORD PTR _outcode$[ebp]
  000a6	89 08		 mov	 DWORD PTR [eax], ecx

; 94   : 	
; 95   : 	if ( outcode2 )

  000a8	83 7d f8 00	 cmp	 DWORD PTR _outcode2$[ebp], 0
  000ac	74 06		 je	 SHORT $LN2@construct_

; 96   : 	{
; 97   : 
; 98   : 		return ( NULL );

  000ae	33 c0		 xor	 eax, eax
  000b0	eb 0d		 jmp	 SHORT $LN1@construct_

; 99   : 	}
; 100  : 	else

  000b2	eb 0b		 jmp	 SHORT $LN1@construct_
$LN2@construct_:

; 101  : 	{
; 102  : 
; 103  : 		return ( &transformed_3d_points[first_point] );

  000b4	8b 45 f4	 mov	 eax, DWORD PTR _first_point$[ebp]
  000b7	c1 e0 06	 shl	 eax, 6
  000ba	05 00 00 00 00	 add	 eax, OFFSET ?transformed_3d_points@@3PAUVERTEX@@A ; transformed_3d_points
$LN1@construct_:

; 104  : 	}
; 105  : }

  000bf	5f		 pop	 edi
  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx
  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c2 0c 00	 ret	 12			; 0000000cH
?construct_3d_line@@YGPAUVERTEX@@PAUPOINT_3D_PLAIN_REFERENCE@@HPAH@Z ENDP ; construct_3d_line
_TEXT	ENDS
END
