; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\maths\qternion.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?slerp_quaternion@@YGXPAUQUATERNION@@PBU1@1M@Z	; slerp_quaternion
PUBLIC	?multiply_quaternion_by_quaternion@@YGXPAUQUATERNION@@PBU1@1@Z ; multiply_quaternion_by_quaternion
PUBLIC	?multiply_quaternion_by_vec3d@@YGXPAUVEC3D@@PBUQUATERNION@@PBU1@@Z ; multiply_quaternion_by_vec3d
PUBLIC	?convert_quaternion_to_matrix3x3@@YGXQAY02MPBUQUATERNION@@@Z ; convert_quaternion_to_matrix3x3
PUBLIC	?convert_matrix3x3_to_quaternion@@YGXPAUQUATERNION@@QAY02$$CBM@Z ; convert_matrix3x3_to_quaternion
PUBLIC	__real@0000000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_acos:PROC
EXTRN	_sin:PROC
EXTRN	_sqrt:PROC
EXTRN	?normalise_3d_vector@@YGMPAUVEC3D@@@Z:PROC	; normalise_3d_vector
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\qternion.c
;	COMDAT ?convert_matrix3x3_to_quaternion@@YGXPAUQUATERNION@@QAY02$$CBM@Z
_TEXT	SEGMENT
_nxt$ = -72						; size = 12
_k$ = -60						; size = 4
_j$ = -56						; size = 4
_i$ = -52						; size = 4
_q$ = -48						; size = 32
_s$ = -16						; size = 8
_tr$ = -8						; size = 8
_result$ = 8						; size = 4
_matrix$ = 12						; size = 4
?convert_matrix3x3_to_quaternion@@YGXPAUQUATERNION@@QAY02$$CBM@Z PROC ; convert_matrix3x3_to_quaternion, COMDAT

; 278  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 279  : 
; 280  : 	double
; 281  : 		tr,
; 282  : 		s,
; 283  : 		q[4];
; 284  : 
; 285  : 	int
; 286  : 		i,
; 287  : 		j,
; 288  : 		k,
; 289  : 		nxt[3] = { 1, 2, 0 };

  0000c	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR _nxt$[ebp], 1
  00013	c7 45 bc 02 00
	00 00		 mov	 DWORD PTR _nxt$[ebp+4], 2
  0001a	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _nxt$[ebp+8], 0

; 290  : 
; 291  : 	//
; 292  : 	// Calculate the matrix diagonal
; 293  : 	//
; 294  : 
; 295  : 	tr = matrix[0][0] + matrix[1][1] + matrix[2][2];

  00021	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00026	6b c8 00	 imul	 ecx, eax, 0
  00029	03 4d 0c	 add	 ecx, DWORD PTR _matrix$[ebp]
  0002c	ba 04 00 00 00	 mov	 edx, 4
  00031	6b c2 00	 imul	 eax, edx, 0
  00034	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00039	c1 e2 00	 shl	 edx, 0
  0003c	03 55 0c	 add	 edx, DWORD PTR _matrix$[ebp]
  0003f	be 04 00 00 00	 mov	 esi, 4
  00044	c1 e6 00	 shl	 esi, 0
  00047	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0004c	f3 0f 58 04 32	 addss	 xmm0, DWORD PTR [edx+esi]
  00051	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00056	d1 e0		 shl	 eax, 1
  00058	03 45 0c	 add	 eax, DWORD PTR _matrix$[ebp]
  0005b	b9 04 00 00 00	 mov	 ecx, 4
  00060	d1 e1		 shl	 ecx, 1
  00062	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [eax+ecx]
  00067	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0006b	f2 0f 11 45 f8	 movsd	 QWORD PTR _tr$[ebp], xmm0

; 296  : 
; 297  : 	if ( tr > 0.0 )

  00070	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _tr$[ebp]
  00075	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0007d	0f 86 1a 01 00
	00		 jbe	 $LN2@convert_ma

; 298  : 	{
; 299  : 
; 300  : 		//
; 301  : 		// Matrix diagonal is positive.
; 302  : 		//
; 303  : 
; 304  : 		s = sqrt ( tr + 1.0 );

  00083	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR _tr$[ebp]
  00088	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00090	83 ec 08	 sub	 esp, 8
  00093	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00098	e8 00 00 00 00	 call	 _sqrt
  0009d	83 c4 08	 add	 esp, 8
  000a0	dd 5d f0	 fstp	 QWORD PTR _s$[ebp]

; 305  : 
; 306  : 		result->w = s / 2.0;

  000a3	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _s$[ebp]
  000a8	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4000000000000000
  000b0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000b4	8b 45 08	 mov	 eax, DWORD PTR _result$[ebp]
  000b7	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 307  : 
; 308  : 		s = 0.5 / s;

  000bb	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fe0000000000000
  000c3	f2 0f 5e 45 f0	 divsd	 xmm0, QWORD PTR _s$[ebp]
  000c8	f2 0f 11 45 f0	 movsd	 QWORD PTR _s$[ebp], xmm0

; 309  : 
; 310  : 		result->x = ( matrix[2][1] - matrix[1][2] ) * s;

  000cd	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000d2	d1 e0		 shl	 eax, 1
  000d4	03 45 0c	 add	 eax, DWORD PTR _matrix$[ebp]
  000d7	b9 04 00 00 00	 mov	 ecx, 4
  000dc	c1 e1 00	 shl	 ecx, 0
  000df	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000e4	c1 e2 00	 shl	 edx, 0
  000e7	03 55 0c	 add	 edx, DWORD PTR _matrix$[ebp]
  000ea	be 04 00 00 00	 mov	 esi, 4
  000ef	d1 e6		 shl	 esi, 1
  000f1	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  000f6	f3 0f 5c 04 32	 subss	 xmm0, DWORD PTR [edx+esi]
  000fb	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000ff	f2 0f 59 45 f0	 mulsd	 xmm0, QWORD PTR _s$[ebp]
  00104	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00108	8b 45 08	 mov	 eax, DWORD PTR _result$[ebp]
  0010b	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 311  : 		result->y = ( matrix[0][2] - matrix[2][0] ) * s;

  00110	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00115	6b c8 00	 imul	 ecx, eax, 0
  00118	03 4d 0c	 add	 ecx, DWORD PTR _matrix$[ebp]
  0011b	ba 04 00 00 00	 mov	 edx, 4
  00120	d1 e2		 shl	 edx, 1
  00122	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00127	d1 e0		 shl	 eax, 1
  00129	03 45 0c	 add	 eax, DWORD PTR _matrix$[ebp]
  0012c	be 04 00 00 00	 mov	 esi, 4
  00131	6b f6 00	 imul	 esi, esi, 0
  00134	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00139	f3 0f 5c 04 30	 subss	 xmm0, DWORD PTR [eax+esi]
  0013e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00142	f2 0f 59 45 f0	 mulsd	 xmm0, QWORD PTR _s$[ebp]
  00147	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0014b	8b 4d 08	 mov	 ecx, DWORD PTR _result$[ebp]
  0014e	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 312  : 		result->z = ( matrix[1][0] - matrix[0][1] ) * s;

  00153	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00158	c1 e0 00	 shl	 eax, 0
  0015b	03 45 0c	 add	 eax, DWORD PTR _matrix$[ebp]
  0015e	b9 04 00 00 00	 mov	 ecx, 4
  00163	6b d1 00	 imul	 edx, ecx, 0
  00166	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0016b	6b c9 00	 imul	 ecx, ecx, 0
  0016e	03 4d 0c	 add	 ecx, DWORD PTR _matrix$[ebp]
  00171	be 04 00 00 00	 mov	 esi, 4
  00176	c1 e6 00	 shl	 esi, 0
  00179	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  0017e	f3 0f 5c 04 31	 subss	 xmm0, DWORD PTR [ecx+esi]
  00183	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00187	f2 0f 59 45 f0	 mulsd	 xmm0, QWORD PTR _s$[ebp]
  0018c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00190	8b 55 08	 mov	 edx, DWORD PTR _result$[ebp]
  00193	f3 0f 11 42 0c	 movss	 DWORD PTR [edx+12], xmm0

; 313  : 	}
; 314  : 	else

  00198	e9 f6 01 00 00	 jmp	 $LN3@convert_ma
$LN2@convert_ma:

; 315  : 	{
; 316  : 
; 317  : 		//
; 318  : 		// Matrix diagonal is negative.
; 319  : 		//
; 320  : 
; 321  : 		i = 0;

  0019d	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 322  : 
; 323  : 		if ( matrix[1][1] > matrix[0][0] )

  001a4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001a9	c1 e0 00	 shl	 eax, 0
  001ac	03 45 0c	 add	 eax, DWORD PTR _matrix$[ebp]
  001af	b9 04 00 00 00	 mov	 ecx, 4
  001b4	c1 e1 00	 shl	 ecx, 0
  001b7	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  001bc	6b d2 00	 imul	 edx, edx, 0
  001bf	03 55 0c	 add	 edx, DWORD PTR _matrix$[ebp]
  001c2	be 04 00 00 00	 mov	 esi, 4
  001c7	6b f6 00	 imul	 esi, esi, 0
  001ca	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  001cf	0f 2f 04 32	 comiss	 xmm0, DWORD PTR [edx+esi]
  001d3	76 07		 jbe	 SHORT $LN4@convert_ma

; 324  : 		{
; 325  : 
; 326  : 			i = 1;

  001d5	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
$LN4@convert_ma:

; 327  : 		}
; 328  : 
; 329  : 		if ( matrix[2][2] > matrix[i][i] )

  001dc	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001e1	d1 e0		 shl	 eax, 1
  001e3	03 45 0c	 add	 eax, DWORD PTR _matrix$[ebp]
  001e6	b9 04 00 00 00	 mov	 ecx, 4
  001eb	d1 e1		 shl	 ecx, 1
  001ed	6b 55 cc 0c	 imul	 edx, DWORD PTR _i$[ebp], 12
  001f1	03 55 0c	 add	 edx, DWORD PTR _matrix$[ebp]
  001f4	8b 75 cc	 mov	 esi, DWORD PTR _i$[ebp]
  001f7	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  001fc	0f 2f 04 b2	 comiss	 xmm0, DWORD PTR [edx+esi*4]
  00200	76 07		 jbe	 SHORT $LN5@convert_ma

; 330  : 		{
; 331  : 
; 332  : 			i = 2;

  00202	c7 45 cc 02 00
	00 00		 mov	 DWORD PTR _i$[ebp], 2
$LN5@convert_ma:

; 333  : 		}
; 334  : 
; 335  : 		j = nxt[i];

  00209	8b 45 cc	 mov	 eax, DWORD PTR _i$[ebp]
  0020c	8b 4c 85 b8	 mov	 ecx, DWORD PTR _nxt$[ebp+eax*4]
  00210	89 4d c8	 mov	 DWORD PTR _j$[ebp], ecx

; 336  : 		k = nxt[j];

  00213	8b 45 c8	 mov	 eax, DWORD PTR _j$[ebp]
  00216	8b 4c 85 b8	 mov	 ecx, DWORD PTR _nxt$[ebp+eax*4]
  0021a	89 4d c4	 mov	 DWORD PTR _k$[ebp], ecx

; 337  : 
; 338  : 		s = sqrt ( ( matrix[i][i] - ( matrix[j][j] + matrix[k][k] ) ) + 1.0 );

  0021d	6b 45 cc 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00221	03 45 0c	 add	 eax, DWORD PTR _matrix$[ebp]
  00224	6b 4d c8 0c	 imul	 ecx, DWORD PTR _j$[ebp], 12
  00228	03 4d 0c	 add	 ecx, DWORD PTR _matrix$[ebp]
  0022b	6b 55 c4 0c	 imul	 edx, DWORD PTR _k$[ebp], 12
  0022f	03 55 0c	 add	 edx, DWORD PTR _matrix$[ebp]
  00232	8b 75 c8	 mov	 esi, DWORD PTR _j$[ebp]
  00235	8b 7d c4	 mov	 edi, DWORD PTR _k$[ebp]
  00238	f3 0f 10 04 b1	 movss	 xmm0, DWORD PTR [ecx+esi*4]
  0023d	f3 0f 58 04 ba	 addss	 xmm0, DWORD PTR [edx+edi*4]
  00242	8b 4d cc	 mov	 ecx, DWORD PTR _i$[ebp]
  00245	f3 0f 10 0c 88	 movss	 xmm1, DWORD PTR [eax+ecx*4]
  0024a	f3 0f 5c c8	 subss	 xmm1, xmm0
  0024e	f3 0f 5a c1	 cvtss2sd xmm0, xmm1
  00252	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0025a	83 ec 08	 sub	 esp, 8
  0025d	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00262	e8 00 00 00 00	 call	 _sqrt
  00267	83 c4 08	 add	 esp, 8
  0026a	dd 5d f0	 fstp	 QWORD PTR _s$[ebp]

; 339  : 
; 340  : 		q[i] = s * 0.5;

  0026d	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _s$[ebp]
  00272	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0027a	8b 45 cc	 mov	 eax, DWORD PTR _i$[ebp]
  0027d	f2 0f 11 44 c5
	d0		 movsd	 QWORD PTR _q$[ebp+eax*8], xmm0

; 341  : 
; 342  : 		if ( s != 0.0 )

  00283	f2 0f 10 45 f0	 movsd	 xmm0, QWORD PTR _s$[ebp]
  00288	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00290	9f		 lahf
  00291	f6 c4 44	 test	 ah, 68			; 00000044H
  00294	7b 12		 jnp	 SHORT $LN6@convert_ma

; 343  : 		{
; 344  : 
; 345  : 			s = 0.5 / s;

  00296	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0029e	f2 0f 5e 45 f0	 divsd	 xmm0, QWORD PTR _s$[ebp]
  002a3	f2 0f 11 45 f0	 movsd	 QWORD PTR _s$[ebp], xmm0
$LN6@convert_ma:

; 346  : 		}
; 347  : 
; 348  : 		q[3] = ( matrix[k][j] - matrix[j][k] ) * s;

  002a8	6b 45 c4 0c	 imul	 eax, DWORD PTR _k$[ebp], 12
  002ac	03 45 0c	 add	 eax, DWORD PTR _matrix$[ebp]
  002af	6b 4d c8 0c	 imul	 ecx, DWORD PTR _j$[ebp], 12
  002b3	03 4d 0c	 add	 ecx, DWORD PTR _matrix$[ebp]
  002b6	8b 55 c8	 mov	 edx, DWORD PTR _j$[ebp]
  002b9	8b 75 c4	 mov	 esi, DWORD PTR _k$[ebp]
  002bc	f3 0f 10 04 90	 movss	 xmm0, DWORD PTR [eax+edx*4]
  002c1	f3 0f 5c 04 b1	 subss	 xmm0, DWORD PTR [ecx+esi*4]
  002c6	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002ca	f2 0f 59 45 f0	 mulsd	 xmm0, QWORD PTR _s$[ebp]
  002cf	b8 08 00 00 00	 mov	 eax, 8
  002d4	6b c8 03	 imul	 ecx, eax, 3
  002d7	f2 0f 11 44 0d
	d0		 movsd	 QWORD PTR _q$[ebp+ecx], xmm0

; 349  : 		q[j] = ( matrix[j][i] + matrix[i][j] ) * s;

  002dd	6b 45 c8 0c	 imul	 eax, DWORD PTR _j$[ebp], 12
  002e1	03 45 0c	 add	 eax, DWORD PTR _matrix$[ebp]
  002e4	6b 4d cc 0c	 imul	 ecx, DWORD PTR _i$[ebp], 12
  002e8	03 4d 0c	 add	 ecx, DWORD PTR _matrix$[ebp]
  002eb	8b 55 cc	 mov	 edx, DWORD PTR _i$[ebp]
  002ee	8b 75 c8	 mov	 esi, DWORD PTR _j$[ebp]
  002f1	f3 0f 10 04 90	 movss	 xmm0, DWORD PTR [eax+edx*4]
  002f6	f3 0f 58 04 b1	 addss	 xmm0, DWORD PTR [ecx+esi*4]
  002fb	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  002ff	f2 0f 59 45 f0	 mulsd	 xmm0, QWORD PTR _s$[ebp]
  00304	8b 45 c8	 mov	 eax, DWORD PTR _j$[ebp]
  00307	f2 0f 11 44 c5
	d0		 movsd	 QWORD PTR _q$[ebp+eax*8], xmm0

; 350  : 		q[k] = ( matrix[k][i] + matrix[i][k] ) * s;

  0030d	6b 45 c4 0c	 imul	 eax, DWORD PTR _k$[ebp], 12
  00311	03 45 0c	 add	 eax, DWORD PTR _matrix$[ebp]
  00314	6b 4d cc 0c	 imul	 ecx, DWORD PTR _i$[ebp], 12
  00318	03 4d 0c	 add	 ecx, DWORD PTR _matrix$[ebp]
  0031b	8b 55 cc	 mov	 edx, DWORD PTR _i$[ebp]
  0031e	8b 75 c4	 mov	 esi, DWORD PTR _k$[ebp]
  00321	f3 0f 10 04 90	 movss	 xmm0, DWORD PTR [eax+edx*4]
  00326	f3 0f 58 04 b1	 addss	 xmm0, DWORD PTR [ecx+esi*4]
  0032b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0032f	f2 0f 59 45 f0	 mulsd	 xmm0, QWORD PTR _s$[ebp]
  00334	8b 45 c4	 mov	 eax, DWORD PTR _k$[ebp]
  00337	f2 0f 11 44 c5
	d0		 movsd	 QWORD PTR _q$[ebp+eax*8], xmm0

; 351  : 
; 352  : 		result->x = q[0];

  0033d	b8 08 00 00 00	 mov	 eax, 8
  00342	6b c8 00	 imul	 ecx, eax, 0
  00345	f2 0f 5a 44 0d
	d0		 cvtsd2ss xmm0, QWORD PTR _q$[ebp+ecx]
  0034b	8b 55 08	 mov	 edx, DWORD PTR _result$[ebp]
  0034e	f3 0f 11 42 04	 movss	 DWORD PTR [edx+4], xmm0

; 353  : 		result->y = q[1];

  00353	b8 08 00 00 00	 mov	 eax, 8
  00358	c1 e0 00	 shl	 eax, 0
  0035b	f2 0f 5a 44 05
	d0		 cvtsd2ss xmm0, QWORD PTR _q$[ebp+eax]
  00361	8b 4d 08	 mov	 ecx, DWORD PTR _result$[ebp]
  00364	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 354  : 		result->z = q[2];

  00369	b8 08 00 00 00	 mov	 eax, 8
  0036e	d1 e0		 shl	 eax, 1
  00370	f2 0f 5a 44 05
	d0		 cvtsd2ss xmm0, QWORD PTR _q$[ebp+eax]
  00376	8b 4d 08	 mov	 ecx, DWORD PTR _result$[ebp]
  00379	f3 0f 11 41 0c	 movss	 DWORD PTR [ecx+12], xmm0

; 355  : 		result->w = q[3];

  0037e	b8 08 00 00 00	 mov	 eax, 8
  00383	6b c8 03	 imul	 ecx, eax, 3
  00386	f2 0f 5a 44 0d
	d0		 cvtsd2ss xmm0, QWORD PTR _q$[ebp+ecx]
  0038c	8b 55 08	 mov	 edx, DWORD PTR _result$[ebp]
  0038f	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0
$LN3@convert_ma:

; 356  : 	}
; 357  : }

  00393	5f		 pop	 edi
  00394	5e		 pop	 esi
  00395	5b		 pop	 ebx
  00396	8b e5		 mov	 esp, ebp
  00398	5d		 pop	 ebp
  00399	c2 08 00	 ret	 8
?convert_matrix3x3_to_quaternion@@YGXPAUQUATERNION@@QAY02$$CBM@Z ENDP ; convert_matrix3x3_to_quaternion
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\qternion.c
;	COMDAT ?convert_quaternion_to_matrix3x3@@YGXQAY02MPBUQUATERNION@@@Z
_TEXT	SEGMENT
_z2$ = -96						; size = 8
_y2$ = -88						; size = 8
_x2$ = -80						; size = 8
_zz$ = -72						; size = 8
_xz$ = -64						; size = 8
_xy$ = -56						; size = 8
_yz$ = -48						; size = 8
_yy$ = -40						; size = 8
_xx$ = -32						; size = 8
_wz$ = -24						; size = 8
_wy$ = -16						; size = 8
_wx$ = -8						; size = 8
_result$ = 8						; size = 4
_q$ = 12						; size = 4
?convert_quaternion_to_matrix3x3@@YGXQAY02MPBUQUATERNION@@@Z PROC ; convert_quaternion_to_matrix3x3, COMDAT

; 223  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 224  : 
; 225  : 	double
; 226  : 		wx,
; 227  : 		wy,
; 228  : 		wz,
; 229  : 		xx,
; 230  : 		yy,
; 231  : 		yz,
; 232  : 		xy,
; 233  : 		xz,
; 234  : 		zz,
; 235  : 		x2,
; 236  : 		y2,
; 237  : 		z2;
; 238  : 
; 239  : 	x2 = q->x + q->x;

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _q$[ebp]
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR _q$[ebp]
  00012	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00017	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  0001c	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00020	f2 0f 11 45 b0	 movsd	 QWORD PTR _x2$[ebp], xmm0

; 240  : 	y2 = q->y + q->y;

  00025	8b 45 0c	 mov	 eax, DWORD PTR _q$[ebp]
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR _q$[ebp]
  0002b	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00030	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  00035	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00039	f2 0f 11 45 a8	 movsd	 QWORD PTR _y2$[ebp], xmm0

; 241  : 	z2 = q->z + q->z;

  0003e	8b 45 0c	 mov	 eax, DWORD PTR _q$[ebp]
  00041	8b 4d 0c	 mov	 ecx, DWORD PTR _q$[ebp]
  00044	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00049	f3 0f 58 41 0c	 addss	 xmm0, DWORD PTR [ecx+12]
  0004e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00052	f2 0f 11 45 a0	 movsd	 QWORD PTR _z2$[ebp], xmm0

; 242  : 
; 243  : 	xx = q->x * x2;

  00057	8b 45 0c	 mov	 eax, DWORD PTR _q$[ebp]
  0005a	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  0005f	f2 0f 59 45 b0	 mulsd	 xmm0, QWORD PTR _x2$[ebp]
  00064	f2 0f 11 45 e0	 movsd	 QWORD PTR _xx$[ebp], xmm0

; 244  : 	xy = q->x * y2;

  00069	8b 45 0c	 mov	 eax, DWORD PTR _q$[ebp]
  0006c	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  00071	f2 0f 59 45 a8	 mulsd	 xmm0, QWORD PTR _y2$[ebp]
  00076	f2 0f 11 45 c8	 movsd	 QWORD PTR _xy$[ebp], xmm0

; 245  : 	xz = q->x * z2;

  0007b	8b 45 0c	 mov	 eax, DWORD PTR _q$[ebp]
  0007e	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  00083	f2 0f 59 45 a0	 mulsd	 xmm0, QWORD PTR _z2$[ebp]
  00088	f2 0f 11 45 c0	 movsd	 QWORD PTR _xz$[ebp], xmm0

; 246  : 
; 247  : 	yy = q->y * y2;

  0008d	8b 45 0c	 mov	 eax, DWORD PTR _q$[ebp]
  00090	f3 0f 5a 40 08	 cvtss2sd xmm0, DWORD PTR [eax+8]
  00095	f2 0f 59 45 a8	 mulsd	 xmm0, QWORD PTR _y2$[ebp]
  0009a	f2 0f 11 45 d8	 movsd	 QWORD PTR _yy$[ebp], xmm0

; 248  : 	yz = q->y * z2;

  0009f	8b 45 0c	 mov	 eax, DWORD PTR _q$[ebp]
  000a2	f3 0f 5a 40 08	 cvtss2sd xmm0, DWORD PTR [eax+8]
  000a7	f2 0f 59 45 a0	 mulsd	 xmm0, QWORD PTR _z2$[ebp]
  000ac	f2 0f 11 45 d0	 movsd	 QWORD PTR _yz$[ebp], xmm0

; 249  : 
; 250  : 	zz = q->z * z2;

  000b1	8b 45 0c	 mov	 eax, DWORD PTR _q$[ebp]
  000b4	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  000b9	f2 0f 59 45 a0	 mulsd	 xmm0, QWORD PTR _z2$[ebp]
  000be	f2 0f 11 45 b8	 movsd	 QWORD PTR _zz$[ebp], xmm0

; 251  : 
; 252  : 	wx = q->w * x2;

  000c3	8b 45 0c	 mov	 eax, DWORD PTR _q$[ebp]
  000c6	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  000ca	f2 0f 59 45 b0	 mulsd	 xmm0, QWORD PTR _x2$[ebp]
  000cf	f2 0f 11 45 f8	 movsd	 QWORD PTR _wx$[ebp], xmm0

; 253  : 	wy = q->w * y2;

  000d4	8b 45 0c	 mov	 eax, DWORD PTR _q$[ebp]
  000d7	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  000db	f2 0f 59 45 a8	 mulsd	 xmm0, QWORD PTR _y2$[ebp]
  000e0	f2 0f 11 45 f0	 movsd	 QWORD PTR _wy$[ebp], xmm0

; 254  : 	wz = q->w * z2;

  000e5	8b 45 0c	 mov	 eax, DWORD PTR _q$[ebp]
  000e8	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  000ec	f2 0f 59 45 a0	 mulsd	 xmm0, QWORD PTR _z2$[ebp]
  000f1	f2 0f 11 45 e8	 movsd	 QWORD PTR _wz$[ebp], xmm0

; 255  : 
; 256  : 	result[0][0] = 1.0 - ( yy + zz );

  000f6	f2 0f 10 45 d8	 movsd	 xmm0, QWORD PTR _yy$[ebp]
  000fb	f2 0f 58 45 b8	 addsd	 xmm0, QWORD PTR _zz$[ebp]
  00100	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00108	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0010c	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00110	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00115	6b c8 00	 imul	 ecx, eax, 0
  00118	03 4d 08	 add	 ecx, DWORD PTR _result$[ebp]
  0011b	ba 04 00 00 00	 mov	 edx, 4
  00120	6b c2 00	 imul	 eax, edx, 0
  00123	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 257  : 	result[0][1] = xy - wz;

  00128	f2 0f 10 45 c8	 movsd	 xmm0, QWORD PTR _xy$[ebp]
  0012d	f2 0f 5c 45 e8	 subsd	 xmm0, QWORD PTR _wz$[ebp]
  00132	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00136	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0013b	6b c8 00	 imul	 ecx, eax, 0
  0013e	03 4d 08	 add	 ecx, DWORD PTR _result$[ebp]
  00141	ba 04 00 00 00	 mov	 edx, 4
  00146	c1 e2 00	 shl	 edx, 0
  00149	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 258  : 	result[0][2] = xz + wy;

  0014e	f2 0f 10 45 c0	 movsd	 xmm0, QWORD PTR _xz$[ebp]
  00153	f2 0f 58 45 f0	 addsd	 xmm0, QWORD PTR _wy$[ebp]
  00158	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0015c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00161	6b c8 00	 imul	 ecx, eax, 0
  00164	03 4d 08	 add	 ecx, DWORD PTR _result$[ebp]
  00167	ba 04 00 00 00	 mov	 edx, 4
  0016c	d1 e2		 shl	 edx, 1
  0016e	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 259  : 
; 260  : 	result[1][0] = xy + wz;

  00173	f2 0f 10 45 c8	 movsd	 xmm0, QWORD PTR _xy$[ebp]
  00178	f2 0f 58 45 e8	 addsd	 xmm0, QWORD PTR _wz$[ebp]
  0017d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00181	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00186	c1 e0 00	 shl	 eax, 0
  00189	03 45 08	 add	 eax, DWORD PTR _result$[ebp]
  0018c	b9 04 00 00 00	 mov	 ecx, 4
  00191	6b d1 00	 imul	 edx, ecx, 0
  00194	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 261  : 	result[1][1] = 1.0 - ( xx + zz );

  00199	f2 0f 10 45 e0	 movsd	 xmm0, QWORD PTR _xx$[ebp]
  0019e	f2 0f 58 45 b8	 addsd	 xmm0, QWORD PTR _zz$[ebp]
  001a3	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  001ab	f2 0f 5c c8	 subsd	 xmm1, xmm0
  001af	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  001b3	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001b8	c1 e0 00	 shl	 eax, 0
  001bb	03 45 08	 add	 eax, DWORD PTR _result$[ebp]
  001be	b9 04 00 00 00	 mov	 ecx, 4
  001c3	c1 e1 00	 shl	 ecx, 0
  001c6	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 262  : 	result[1][2] = yz - wx;

  001cb	f2 0f 10 45 d0	 movsd	 xmm0, QWORD PTR _yz$[ebp]
  001d0	f2 0f 5c 45 f8	 subsd	 xmm0, QWORD PTR _wx$[ebp]
  001d5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001d9	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001de	c1 e0 00	 shl	 eax, 0
  001e1	03 45 08	 add	 eax, DWORD PTR _result$[ebp]
  001e4	b9 04 00 00 00	 mov	 ecx, 4
  001e9	d1 e1		 shl	 ecx, 1
  001eb	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 263  : 
; 264  : 	result[2][0] = xz - wy;

  001f0	f2 0f 10 45 c0	 movsd	 xmm0, QWORD PTR _xz$[ebp]
  001f5	f2 0f 5c 45 f0	 subsd	 xmm0, QWORD PTR _wy$[ebp]
  001fa	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001fe	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00203	d1 e0		 shl	 eax, 1
  00205	03 45 08	 add	 eax, DWORD PTR _result$[ebp]
  00208	b9 04 00 00 00	 mov	 ecx, 4
  0020d	6b d1 00	 imul	 edx, ecx, 0
  00210	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 265  : 	result[2][1] = yz + wx;

  00215	f2 0f 10 45 d0	 movsd	 xmm0, QWORD PTR _yz$[ebp]
  0021a	f2 0f 58 45 f8	 addsd	 xmm0, QWORD PTR _wx$[ebp]
  0021f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00223	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00228	d1 e0		 shl	 eax, 1
  0022a	03 45 08	 add	 eax, DWORD PTR _result$[ebp]
  0022d	b9 04 00 00 00	 mov	 ecx, 4
  00232	c1 e1 00	 shl	 ecx, 0
  00235	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 266  : 	result[2][2] = 1.0 - ( xx + yy );

  0023a	f2 0f 10 45 e0	 movsd	 xmm0, QWORD PTR _xx$[ebp]
  0023f	f2 0f 58 45 d8	 addsd	 xmm0, QWORD PTR _yy$[ebp]
  00244	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0024c	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00250	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00254	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00259	d1 e0		 shl	 eax, 1
  0025b	03 45 08	 add	 eax, DWORD PTR _result$[ebp]
  0025e	b9 04 00 00 00	 mov	 ecx, 4
  00263	d1 e1		 shl	 ecx, 1
  00265	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 267  : 
; 268  : 	normalise_3d_vector ( ( vec3d * ) &result[0][0] );

  0026a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0026f	6b c8 00	 imul	 ecx, eax, 0
  00272	03 4d 08	 add	 ecx, DWORD PTR _result$[ebp]
  00275	ba 04 00 00 00	 mov	 edx, 4
  0027a	6b c2 00	 imul	 eax, edx, 0
  0027d	03 c8		 add	 ecx, eax
  0027f	51		 push	 ecx
  00280	e8 00 00 00 00	 call	 ?normalise_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_3d_vector
  00285	dd d8		 fstp	 ST(0)

; 269  : 	normalise_3d_vector ( ( vec3d * ) &result[1][0] );

  00287	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0028c	c1 e0 00	 shl	 eax, 0
  0028f	03 45 08	 add	 eax, DWORD PTR _result$[ebp]
  00292	b9 04 00 00 00	 mov	 ecx, 4
  00297	6b d1 00	 imul	 edx, ecx, 0
  0029a	03 c2		 add	 eax, edx
  0029c	50		 push	 eax
  0029d	e8 00 00 00 00	 call	 ?normalise_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_3d_vector
  002a2	dd d8		 fstp	 ST(0)

; 270  : 	normalise_3d_vector ( ( vec3d * ) &result[2][0] );

  002a4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002a9	d1 e0		 shl	 eax, 1
  002ab	03 45 08	 add	 eax, DWORD PTR _result$[ebp]
  002ae	b9 04 00 00 00	 mov	 ecx, 4
  002b3	6b d1 00	 imul	 edx, ecx, 0
  002b6	03 c2		 add	 eax, edx
  002b8	50		 push	 eax
  002b9	e8 00 00 00 00	 call	 ?normalise_3d_vector@@YGMPAUVEC3D@@@Z ; normalise_3d_vector
  002be	dd d8		 fstp	 ST(0)

; 271  : }

  002c0	5f		 pop	 edi
  002c1	5e		 pop	 esi
  002c2	5b		 pop	 ebx
  002c3	8b e5		 mov	 esp, ebp
  002c5	5d		 pop	 ebp
  002c6	c2 08 00	 ret	 8
?convert_quaternion_to_matrix3x3@@YGXQAY02MPBUQUATERNION@@@Z ENDP ; convert_quaternion_to_matrix3x3
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\qternion.c
;	COMDAT ?multiply_quaternion_by_vec3d@@YGXPAUVEC3D@@PBUQUATERNION@@PBU1@@Z
_TEXT	SEGMENT
_h$ = -28						; size = 4
_g$ = -24						; size = 4
_f$ = -20						; size = 4
_e$ = -16						; size = 4
_d$ = -12						; size = 4
_c$ = -8						; size = 4
_a$ = -4						; size = 4
_result$ = 8						; size = 4
_q$ = 12						; size = 4
_v$ = 16						; size = 4
?multiply_quaternion_by_vec3d@@YGXPAUVEC3D@@PBUQUATERNION@@PBU1@@Z PROC ; multiply_quaternion_by_vec3d, COMDAT

; 194  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 195  : 
; 196  : 	float
; 197  : 		a,
; 198  : 		c,
; 199  : 		d,
; 200  : 		e,
; 201  : 		f,
; 202  : 		g,
; 203  : 		h;
; 204  : 
; 205  : 	a = ( q->w + q->x ) * ( v->x );

  00009	8b 45 0c	 mov	 eax, DWORD PTR _q$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _q$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  00018	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0001b	f3 0f 59 02	 mulss	 xmm0, DWORD PTR [edx]
  0001f	f3 0f 11 45 fc	 movss	 DWORD PTR _a$[ebp], xmm0

; 206  : 	c = ( q->x - q->w ) * ( v->y - v->z );

  00024	8b 45 0c	 mov	 eax, DWORD PTR _q$[ebp]
  00027	8b 4d 0c	 mov	 ecx, DWORD PTR _q$[ebp]
  0002a	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0002f	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00033	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00036	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00039	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  0003e	f3 0f 5c 48 08	 subss	 xmm1, DWORD PTR [eax+8]
  00043	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00047	f3 0f 11 45 f8	 movss	 DWORD PTR _c$[ebp], xmm0

; 207  : 	d = ( q->y + q->z ) * ( v->x );

  0004c	8b 45 0c	 mov	 eax, DWORD PTR _q$[ebp]
  0004f	8b 4d 0c	 mov	 ecx, DWORD PTR _q$[ebp]
  00052	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00057	f3 0f 58 41 0c	 addss	 xmm0, DWORD PTR [ecx+12]
  0005c	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0005f	f3 0f 59 02	 mulss	 xmm0, DWORD PTR [edx]
  00063	f3 0f 11 45 f4	 movss	 DWORD PTR _d$[ebp], xmm0

; 208  : 	e = ( q->x + q->z ) * ( v->x + v->y );

  00068	8b 45 0c	 mov	 eax, DWORD PTR _q$[ebp]
  0006b	8b 4d 0c	 mov	 ecx, DWORD PTR _q$[ebp]
  0006e	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00073	f3 0f 58 41 0c	 addss	 xmm0, DWORD PTR [ecx+12]
  00078	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0007b	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0007e	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  00082	f3 0f 58 48 04	 addss	 xmm1, DWORD PTR [eax+4]
  00087	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0008b	f3 0f 11 45 f0	 movss	 DWORD PTR _e$[ebp], xmm0

; 209  : 	f = ( q->x - q->z ) * ( v->x - v->y );

  00090	8b 45 0c	 mov	 eax, DWORD PTR _q$[ebp]
  00093	8b 4d 0c	 mov	 ecx, DWORD PTR _q$[ebp]
  00096	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0009b	f3 0f 5c 41 0c	 subss	 xmm0, DWORD PTR [ecx+12]
  000a0	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  000a3	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  000a6	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  000aa	f3 0f 5c 48 04	 subss	 xmm1, DWORD PTR [eax+4]
  000af	f3 0f 59 c1	 mulss	 xmm0, xmm1
  000b3	f3 0f 11 45 ec	 movss	 DWORD PTR _f$[ebp], xmm0

; 210  : 	g = ( q->w + q->y ) * ( v->z );

  000b8	8b 45 0c	 mov	 eax, DWORD PTR _q$[ebp]
  000bb	8b 4d 0c	 mov	 ecx, DWORD PTR _q$[ebp]
  000be	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000c2	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  000c7	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  000ca	f3 0f 59 42 08	 mulss	 xmm0, DWORD PTR [edx+8]
  000cf	f3 0f 11 45 e8	 movss	 DWORD PTR _g$[ebp], xmm0

; 211  : 	h = ( q->w - q->y ) * ( v->z );

  000d4	8b 45 0c	 mov	 eax, DWORD PTR _q$[ebp]
  000d7	8b 4d 0c	 mov	 ecx, DWORD PTR _q$[ebp]
  000da	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000de	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  000e3	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  000e6	f3 0f 59 42 08	 mulss	 xmm0, DWORD PTR [edx+8]
  000eb	f3 0f 11 45 e4	 movss	 DWORD PTR _h$[ebp], xmm0

; 212  : 
; 213  : 	result->x = a - ( e + f + g + h ) / 2;

  000f0	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _e$[ebp]
  000f5	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _f$[ebp]
  000fa	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _g$[ebp]
  000ff	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _h$[ebp]
  00104	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0010c	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _a$[ebp]
  00111	f3 0f 5c c8	 subss	 xmm1, xmm0
  00115	8b 45 08	 mov	 eax, DWORD PTR _result$[ebp]
  00118	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1

; 214  : 	result->y = -c + ( e - f + g - h ) / 2;

  0011c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _c$[ebp]
  00121	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00128	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _e$[ebp]
  0012d	f3 0f 5c 4d ec	 subss	 xmm1, DWORD PTR _f$[ebp]
  00132	f3 0f 58 4d e8	 addss	 xmm1, DWORD PTR _g$[ebp]
  00137	f3 0f 5c 4d e4	 subss	 xmm1, DWORD PTR _h$[ebp]
  0013c	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@40000000
  00144	f3 0f 58 c1	 addss	 xmm0, xmm1
  00148	8b 45 08	 mov	 eax, DWORD PTR _result$[ebp]
  0014b	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 215  : 	result->z = -d + ( e - f - g + h ) / 2;

  00150	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _d$[ebp]
  00155	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0015c	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _e$[ebp]
  00161	f3 0f 5c 4d ec	 subss	 xmm1, DWORD PTR _f$[ebp]
  00166	f3 0f 5c 4d e8	 subss	 xmm1, DWORD PTR _g$[ebp]
  0016b	f3 0f 58 4d e4	 addss	 xmm1, DWORD PTR _h$[ebp]
  00170	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@40000000
  00178	f3 0f 58 c1	 addss	 xmm0, xmm1
  0017c	8b 45 08	 mov	 eax, DWORD PTR _result$[ebp]
  0017f	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 216  : }

  00184	5f		 pop	 edi
  00185	5e		 pop	 esi
  00186	5b		 pop	 ebx
  00187	8b e5		 mov	 esp, ebp
  00189	5d		 pop	 ebp
  0018a	c2 0c 00	 ret	 12			; 0000000cH
?multiply_quaternion_by_vec3d@@YGXPAUVEC3D@@PBUQUATERNION@@PBU1@@Z ENDP ; multiply_quaternion_by_vec3d
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\qternion.c
;	COMDAT ?multiply_quaternion_by_quaternion@@YGXPAUQUATERNION@@PBU1@1@Z
_TEXT	SEGMENT
_h$ = -32						; size = 4
_g$ = -28						; size = 4
_f$ = -24						; size = 4
_e$ = -20						; size = 4
_d$ = -16						; size = 4
_c$ = -12						; size = 4
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_result$ = 8						; size = 4
_q1$ = 12						; size = 4
_q2$ = 16						; size = 4
?multiply_quaternion_by_quaternion@@YGXPAUQUATERNION@@PBU1@1@Z PROC ; multiply_quaternion_by_quaternion, COMDAT

; 162  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 163  : 
; 164  : 	float
; 165  : 		a,
; 166  : 		b,
; 167  : 		c,
; 168  : 		d,
; 169  : 		e,
; 170  : 		f,
; 171  : 		g,
; 172  : 		h;
; 173  : 
; 174  : 	a = ( q1->w + q1->x ) * ( q2->w + q2->x );

  00009	8b 45 0c	 mov	 eax, DWORD PTR _q1$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _q1$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  00018	8b 55 10	 mov	 edx, DWORD PTR _q2$[ebp]
  0001b	8b 45 10	 mov	 eax, DWORD PTR _q2$[ebp]
  0001e	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  00022	f3 0f 58 48 04	 addss	 xmm1, DWORD PTR [eax+4]
  00027	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0002b	f3 0f 11 45 fc	 movss	 DWORD PTR _a$[ebp], xmm0

; 175  : 	b = ( q1->z - q1->y ) * ( q2->y - q2->z );

  00030	8b 45 0c	 mov	 eax, DWORD PTR _q1$[ebp]
  00033	8b 4d 0c	 mov	 ecx, DWORD PTR _q1$[ebp]
  00036	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  0003b	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00040	8b 55 10	 mov	 edx, DWORD PTR _q2$[ebp]
  00043	8b 45 10	 mov	 eax, DWORD PTR _q2$[ebp]
  00046	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [edx+8]
  0004b	f3 0f 5c 48 0c	 subss	 xmm1, DWORD PTR [eax+12]
  00050	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00054	f3 0f 11 45 f8	 movss	 DWORD PTR _b$[ebp], xmm0

; 176  : 	c = ( q1->x - q1->w ) * ( q2->y - q2->z );

  00059	8b 45 0c	 mov	 eax, DWORD PTR _q1$[ebp]
  0005c	8b 4d 0c	 mov	 ecx, DWORD PTR _q1$[ebp]
  0005f	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00064	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00068	8b 55 10	 mov	 edx, DWORD PTR _q2$[ebp]
  0006b	8b 45 10	 mov	 eax, DWORD PTR _q2$[ebp]
  0006e	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [edx+8]
  00073	f3 0f 5c 48 0c	 subss	 xmm1, DWORD PTR [eax+12]
  00078	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0007c	f3 0f 11 45 f4	 movss	 DWORD PTR _c$[ebp], xmm0

; 177  : 	d = ( q1->y + q1->z ) * ( q2->x - q2->w );

  00081	8b 45 0c	 mov	 eax, DWORD PTR _q1$[ebp]
  00084	8b 4d 0c	 mov	 ecx, DWORD PTR _q1$[ebp]
  00087	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0008c	f3 0f 58 41 0c	 addss	 xmm0, DWORD PTR [ecx+12]
  00091	8b 55 10	 mov	 edx, DWORD PTR _q2$[ebp]
  00094	8b 45 10	 mov	 eax, DWORD PTR _q2$[ebp]
  00097	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  0009c	f3 0f 5c 08	 subss	 xmm1, DWORD PTR [eax]
  000a0	f3 0f 59 c1	 mulss	 xmm0, xmm1
  000a4	f3 0f 11 45 f0	 movss	 DWORD PTR _d$[ebp], xmm0

; 178  : 	e = ( q1->x + q1->z ) * ( q2->x + q2->y );

  000a9	8b 45 0c	 mov	 eax, DWORD PTR _q1$[ebp]
  000ac	8b 4d 0c	 mov	 ecx, DWORD PTR _q1$[ebp]
  000af	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000b4	f3 0f 58 41 0c	 addss	 xmm0, DWORD PTR [ecx+12]
  000b9	8b 55 10	 mov	 edx, DWORD PTR _q2$[ebp]
  000bc	8b 45 10	 mov	 eax, DWORD PTR _q2$[ebp]
  000bf	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  000c4	f3 0f 58 48 08	 addss	 xmm1, DWORD PTR [eax+8]
  000c9	f3 0f 59 c1	 mulss	 xmm0, xmm1
  000cd	f3 0f 11 45 ec	 movss	 DWORD PTR _e$[ebp], xmm0

; 179  : 	f = ( q1->x - q1->z ) * ( q2->x - q2->y );

  000d2	8b 45 0c	 mov	 eax, DWORD PTR _q1$[ebp]
  000d5	8b 4d 0c	 mov	 ecx, DWORD PTR _q1$[ebp]
  000d8	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000dd	f3 0f 5c 41 0c	 subss	 xmm0, DWORD PTR [ecx+12]
  000e2	8b 55 10	 mov	 edx, DWORD PTR _q2$[ebp]
  000e5	8b 45 10	 mov	 eax, DWORD PTR _q2$[ebp]
  000e8	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  000ed	f3 0f 5c 48 08	 subss	 xmm1, DWORD PTR [eax+8]
  000f2	f3 0f 59 c1	 mulss	 xmm0, xmm1
  000f6	f3 0f 11 45 e8	 movss	 DWORD PTR _f$[ebp], xmm0

; 180  : 	g = ( q1->w + q1->y ) * ( q2->w - q2->z );

  000fb	8b 45 0c	 mov	 eax, DWORD PTR _q1$[ebp]
  000fe	8b 4d 0c	 mov	 ecx, DWORD PTR _q1$[ebp]
  00101	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00105	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  0010a	8b 55 10	 mov	 edx, DWORD PTR _q2$[ebp]
  0010d	8b 45 10	 mov	 eax, DWORD PTR _q2$[ebp]
  00110	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  00114	f3 0f 5c 48 0c	 subss	 xmm1, DWORD PTR [eax+12]
  00119	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0011d	f3 0f 11 45 e4	 movss	 DWORD PTR _g$[ebp], xmm0

; 181  : 	h = ( q1->w - q1->y ) * ( q2->w + q2->z );

  00122	8b 45 0c	 mov	 eax, DWORD PTR _q1$[ebp]
  00125	8b 4d 0c	 mov	 ecx, DWORD PTR _q1$[ebp]
  00128	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0012c	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00131	8b 55 10	 mov	 edx, DWORD PTR _q2$[ebp]
  00134	8b 45 10	 mov	 eax, DWORD PTR _q2$[ebp]
  00137	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  0013b	f3 0f 58 48 0c	 addss	 xmm1, DWORD PTR [eax+12]
  00140	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00144	f3 0f 11 45 e0	 movss	 DWORD PTR _h$[ebp], xmm0

; 182  : 
; 183  : 	result->w = b + ( -e - f + g + h ) / 2;

  00149	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _e$[ebp]
  0014e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00155	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _f$[ebp]
  0015a	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _g$[ebp]
  0015f	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _h$[ebp]
  00164	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0016c	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _b$[ebp]
  00171	8b 45 08	 mov	 eax, DWORD PTR _result$[ebp]
  00174	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 184  : 	result->x = a - ( e + f + g + h ) / 2;

  00178	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _e$[ebp]
  0017d	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _f$[ebp]
  00182	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _g$[ebp]
  00187	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _h$[ebp]
  0018c	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00194	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _a$[ebp]
  00199	f3 0f 5c c8	 subss	 xmm1, xmm0
  0019d	8b 45 08	 mov	 eax, DWORD PTR _result$[ebp]
  001a0	f3 0f 11 48 04	 movss	 DWORD PTR [eax+4], xmm1

; 185  : 	result->y = -c + ( e - f + g - h ) / 2;

  001a5	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _c$[ebp]
  001aa	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001b1	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _e$[ebp]
  001b6	f3 0f 5c 4d e8	 subss	 xmm1, DWORD PTR _f$[ebp]
  001bb	f3 0f 58 4d e4	 addss	 xmm1, DWORD PTR _g$[ebp]
  001c0	f3 0f 5c 4d e0	 subss	 xmm1, DWORD PTR _h$[ebp]
  001c5	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@40000000
  001cd	f3 0f 58 c1	 addss	 xmm0, xmm1
  001d1	8b 45 08	 mov	 eax, DWORD PTR _result$[ebp]
  001d4	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 186  : 	result->z = -d + ( e - f - g + h ) / 2;

  001d9	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _d$[ebp]
  001de	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001e5	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _e$[ebp]
  001ea	f3 0f 5c 4d e8	 subss	 xmm1, DWORD PTR _f$[ebp]
  001ef	f3 0f 5c 4d e4	 subss	 xmm1, DWORD PTR _g$[ebp]
  001f4	f3 0f 58 4d e0	 addss	 xmm1, DWORD PTR _h$[ebp]
  001f9	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@40000000
  00201	f3 0f 58 c1	 addss	 xmm0, xmm1
  00205	8b 45 08	 mov	 eax, DWORD PTR _result$[ebp]
  00208	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 187  : }

  0020d	5f		 pop	 edi
  0020e	5e		 pop	 esi
  0020f	5b		 pop	 ebx
  00210	8b e5		 mov	 esp, ebp
  00212	5d		 pop	 ebp
  00213	c2 0c 00	 ret	 12			; 0000000cH
?multiply_quaternion_by_quaternion@@YGXPAUQUATERNION@@PBU1@1@Z ENDP ; multiply_quaternion_by_quaternion
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\maths\qternion.c
;	COMDAT ?slerp_quaternion@@YGXPAUQUATERNION@@PBU1@1M@Z
_TEXT	SEGMENT
tv260 = -144						; size = 8
tv255 = -144						; size = 8
_scale1$ = -72						; size = 8
_scale0$ = -64						; size = 8
_sinom$ = -56						; size = 8
_cosom$ = -48						; size = 8
_omega$ = -40						; size = 8
_to1$ = -32						; size = 32
_result$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_t$ = 20						; size = 4
?slerp_quaternion@@YGXPAUQUATERNION@@PBU1@1M@Z PROC	; slerp_quaternion, COMDAT

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 81   : 
; 82   : 	double
; 83   : 		to1[4];
; 84   : 
; 85   : 	double
; 86   : 		omega,
; 87   : 		cosom,
; 88   : 		sinom,
; 89   : 		scale0,
; 90   : 		scale1;
; 91   : 
; 92   : 	//
; 93   : 	// Dot product to get the cosine of the angle between the two quaternions
; 94   : 	//
; 95   : 
; 96   : 	cosom = ( ( from->x * to->x ) + ( from->y * to->y ) + ( from->z * to->z ) + ( from->w * to->w ) );

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _from$[ebp]
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR _to$[ebp]
  00012	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00017	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [ecx+4]
  0001c	8b 55 0c	 mov	 edx, DWORD PTR _from$[ebp]
  0001f	8b 45 10	 mov	 eax, DWORD PTR _to$[ebp]
  00022	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [edx+8]
  00027	f3 0f 59 48 08	 mulss	 xmm1, DWORD PTR [eax+8]
  0002c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _from$[ebp]
  00033	8b 55 10	 mov	 edx, DWORD PTR _to$[ebp]
  00036	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  0003b	f3 0f 59 4a 0c	 mulss	 xmm1, DWORD PTR [edx+12]
  00040	f3 0f 58 c1	 addss	 xmm0, xmm1
  00044	8b 45 0c	 mov	 eax, DWORD PTR _from$[ebp]
  00047	8b 4d 10	 mov	 ecx, DWORD PTR _to$[ebp]
  0004a	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  0004e	f3 0f 59 09	 mulss	 xmm1, DWORD PTR [ecx]
  00052	f3 0f 58 c1	 addss	 xmm0, xmm1
  00056	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0005a	f2 0f 11 45 d0	 movsd	 QWORD PTR _cosom$[ebp], xmm0

; 97   : 
; 98   : 	//
; 99   : 	// Adjust the signs ( if necessary )
; 100  : 	//
; 101  : 
; 102  : 	if ( cosom < 0.0 )

  0005f	0f 57 c0	 xorps	 xmm0, xmm0
  00062	66 0f 2f 45 d0	 comisd	 xmm0, QWORD PTR _cosom$[ebp]
  00067	0f 86 95 00 00
	00		 jbe	 $LN2@slerp_quat

; 103  : 	{
; 104  : 
; 105  : 		cosom = -cosom;

  0006d	f2 0f 10 45 d0	 movsd	 xmm0, QWORD PTR _cosom$[ebp]
  00072	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00079	f2 0f 11 45 d0	 movsd	 QWORD PTR _cosom$[ebp], xmm0

; 106  : 
; 107  : 		to1[0] = - to->x;

  0007e	8b 45 10	 mov	 eax, DWORD PTR _to$[ebp]
  00081	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00086	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0008d	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00091	b9 08 00 00 00	 mov	 ecx, 8
  00096	6b d1 00	 imul	 edx, ecx, 0
  00099	f2 0f 11 44 15
	e0		 movsd	 QWORD PTR _to1$[ebp+edx], xmm0

; 108  : 		to1[1] = - to->y;

  0009f	8b 45 10	 mov	 eax, DWORD PTR _to$[ebp]
  000a2	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000a7	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000ae	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000b2	b9 08 00 00 00	 mov	 ecx, 8
  000b7	c1 e1 00	 shl	 ecx, 0
  000ba	f2 0f 11 44 0d
	e0		 movsd	 QWORD PTR _to1$[ebp+ecx], xmm0

; 109  : 		to1[2] = - to->z;

  000c0	8b 45 10	 mov	 eax, DWORD PTR _to$[ebp]
  000c3	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  000c8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000cf	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000d3	b9 08 00 00 00	 mov	 ecx, 8
  000d8	d1 e1		 shl	 ecx, 1
  000da	f2 0f 11 44 0d
	e0		 movsd	 QWORD PTR _to1$[ebp+ecx], xmm0

; 110  : 		to1[3] = - to->w;

  000e0	8b 45 10	 mov	 eax, DWORD PTR _to$[ebp]
  000e3	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000e7	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000ee	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  000f2	b9 08 00 00 00	 mov	 ecx, 8
  000f7	6b d1 03	 imul	 edx, ecx, 3
  000fa	f2 0f 11 44 15
	e0		 movsd	 QWORD PTR _to1$[ebp+edx], xmm0

; 111  : 	}
; 112  : 	else

  00100	eb 56		 jmp	 SHORT $LN3@slerp_quat
$LN2@slerp_quat:

; 113  : 	{
; 114  : 
; 115  : 		to1[0] = to->x;

  00102	8b 45 10	 mov	 eax, DWORD PTR _to$[ebp]
  00105	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  0010a	b9 08 00 00 00	 mov	 ecx, 8
  0010f	6b d1 00	 imul	 edx, ecx, 0
  00112	f2 0f 11 44 15
	e0		 movsd	 QWORD PTR _to1$[ebp+edx], xmm0

; 116  : 		to1[1] = to->y;

  00118	8b 45 10	 mov	 eax, DWORD PTR _to$[ebp]
  0011b	f3 0f 5a 40 08	 cvtss2sd xmm0, DWORD PTR [eax+8]
  00120	b9 08 00 00 00	 mov	 ecx, 8
  00125	c1 e1 00	 shl	 ecx, 0
  00128	f2 0f 11 44 0d
	e0		 movsd	 QWORD PTR _to1$[ebp+ecx], xmm0

; 117  : 		to1[2] = to->z;

  0012e	8b 45 10	 mov	 eax, DWORD PTR _to$[ebp]
  00131	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  00136	b9 08 00 00 00	 mov	 ecx, 8
  0013b	d1 e1		 shl	 ecx, 1
  0013d	f2 0f 11 44 0d
	e0		 movsd	 QWORD PTR _to1$[ebp+ecx], xmm0

; 118  : 		to1[3] = to->w;

  00143	8b 45 10	 mov	 eax, DWORD PTR _to$[ebp]
  00146	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  0014a	b9 08 00 00 00	 mov	 ecx, 8
  0014f	6b d1 03	 imul	 edx, ecx, 3
  00152	f2 0f 11 44 15
	e0		 movsd	 QWORD PTR _to1$[ebp+edx], xmm0
$LN3@slerp_quat:

; 119  : 	}
; 120  : 
; 121  : 	//
; 122  : 	// Calculate coefficients
; 123  : 	//
; 124  : 
; 125  : 	if ( ( 1.0 - cosom ) > SLERP_DELTA )

  00158	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00160	f2 0f 5c 45 d0	 subsd	 xmm0, QWORD PTR _cosom$[ebp]
  00165	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0016d	0f 86 a2 00 00
	00		 jbe	 $LN4@slerp_quat

; 126  : 	{
; 127  : 
; 128  : 		//
; 129  : 		// Slerp routine
; 130  : 		//
; 131  : 
; 132  : 		omega = acos ( cosom );

  00173	83 ec 08	 sub	 esp, 8
  00176	f2 0f 10 45 d0	 movsd	 xmm0, QWORD PTR _cosom$[ebp]
  0017b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00180	e8 00 00 00 00	 call	 _acos
  00185	83 c4 08	 add	 esp, 8
  00188	dd 5d d8	 fstp	 QWORD PTR _omega$[ebp]

; 133  : 
; 134  : 		sinom = sin ( omega );

  0018b	83 ec 08	 sub	 esp, 8
  0018e	f2 0f 10 45 d8	 movsd	 xmm0, QWORD PTR _omega$[ebp]
  00193	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00198	e8 00 00 00 00	 call	 _sin
  0019d	83 c4 08	 add	 esp, 8
  001a0	dd 5d c8	 fstp	 QWORD PTR _sinom$[ebp]

; 135  : 
; 136  : 		scale0 = sin ( ( 1.0 - t ) * omega ) / sinom;

  001a3	f3 0f 5a 45 14	 cvtss2sd xmm0, DWORD PTR _t$[ebp]
  001a8	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  001b0	f2 0f 5c c8	 subsd	 xmm1, xmm0
  001b4	f2 0f 59 4d d8	 mulsd	 xmm1, QWORD PTR _omega$[ebp]
  001b9	83 ec 08	 sub	 esp, 8
  001bc	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  001c1	e8 00 00 00 00	 call	 _sin
  001c6	83 c4 08	 add	 esp, 8
  001c9	dd 9d 70 ff ff
	ff		 fstp	 QWORD PTR tv255[ebp]
  001cf	f2 0f 10 85 70
	ff ff ff	 movsd	 xmm0, QWORD PTR tv255[ebp]
  001d7	f2 0f 5e 45 c8	 divsd	 xmm0, QWORD PTR _sinom$[ebp]
  001dc	f2 0f 11 45 c0	 movsd	 QWORD PTR _scale0$[ebp], xmm0

; 137  : 
; 138  : 		scale1 = sin ( t * omega ) / sinom;

  001e1	f3 0f 5a 45 14	 cvtss2sd xmm0, DWORD PTR _t$[ebp]
  001e6	f2 0f 59 45 d8	 mulsd	 xmm0, QWORD PTR _omega$[ebp]
  001eb	83 ec 08	 sub	 esp, 8
  001ee	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  001f3	e8 00 00 00 00	 call	 _sin
  001f8	83 c4 08	 add	 esp, 8
  001fb	dd 9d 70 ff ff
	ff		 fstp	 QWORD PTR tv260[ebp]
  00201	f2 0f 10 85 70
	ff ff ff	 movsd	 xmm0, QWORD PTR tv260[ebp]
  00209	f2 0f 5e 45 c8	 divsd	 xmm0, QWORD PTR _sinom$[ebp]
  0020e	f2 0f 11 45 b8	 movsd	 QWORD PTR _scale1$[ebp], xmm0

; 139  : 	}
; 140  : 	else

  00213	eb 20		 jmp	 SHORT $LN5@slerp_quat
$LN4@slerp_quat:

; 141  : 	{
; 142  : 
; 143  : 		//
; 144  : 		// Two positions very close together - interpolate
; 145  : 		//
; 146  : 
; 147  : 		scale0 = 1.0 - t;

  00215	f3 0f 5a 45 14	 cvtss2sd xmm0, DWORD PTR _t$[ebp]
  0021a	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00222	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00226	f2 0f 11 4d c0	 movsd	 QWORD PTR _scale0$[ebp], xmm1

; 148  : 		scale1 = t;

  0022b	f3 0f 5a 45 14	 cvtss2sd xmm0, DWORD PTR _t$[ebp]
  00230	f2 0f 11 45 b8	 movsd	 QWORD PTR _scale1$[ebp], xmm0
$LN5@slerp_quat:

; 149  : 	}
; 150  : 
; 151  : 	result->x = scale0 * ( double )from->x + scale1 * ( double ) to1[0];

  00235	8b 45 0c	 mov	 eax, DWORD PTR _from$[ebp]
  00238	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  0023d	f2 0f 59 45 c0	 mulsd	 xmm0, QWORD PTR _scale0$[ebp]
  00242	b9 08 00 00 00	 mov	 ecx, 8
  00247	6b d1 00	 imul	 edx, ecx, 0
  0024a	f2 0f 10 4d b8	 movsd	 xmm1, QWORD PTR _scale1$[ebp]
  0024f	f2 0f 59 4c 15
	e0		 mulsd	 xmm1, QWORD PTR _to1$[ebp+edx]
  00255	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00259	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0025d	8b 45 08	 mov	 eax, DWORD PTR _result$[ebp]
  00260	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 152  : 	result->y = scale0 * ( double )from->y + scale1 * ( double ) to1[1];

  00265	8b 45 0c	 mov	 eax, DWORD PTR _from$[ebp]
  00268	f3 0f 5a 40 08	 cvtss2sd xmm0, DWORD PTR [eax+8]
  0026d	f2 0f 59 45 c0	 mulsd	 xmm0, QWORD PTR _scale0$[ebp]
  00272	b9 08 00 00 00	 mov	 ecx, 8
  00277	c1 e1 00	 shl	 ecx, 0
  0027a	f2 0f 10 4d b8	 movsd	 xmm1, QWORD PTR _scale1$[ebp]
  0027f	f2 0f 59 4c 0d
	e0		 mulsd	 xmm1, QWORD PTR _to1$[ebp+ecx]
  00285	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00289	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0028d	8b 55 08	 mov	 edx, DWORD PTR _result$[ebp]
  00290	f3 0f 11 42 08	 movss	 DWORD PTR [edx+8], xmm0

; 153  : 	result->z = scale0 * ( double )from->z + scale1 * ( double ) to1[2];

  00295	8b 45 0c	 mov	 eax, DWORD PTR _from$[ebp]
  00298	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  0029d	f2 0f 59 45 c0	 mulsd	 xmm0, QWORD PTR _scale0$[ebp]
  002a2	b9 08 00 00 00	 mov	 ecx, 8
  002a7	d1 e1		 shl	 ecx, 1
  002a9	f2 0f 10 4d b8	 movsd	 xmm1, QWORD PTR _scale1$[ebp]
  002ae	f2 0f 59 4c 0d
	e0		 mulsd	 xmm1, QWORD PTR _to1$[ebp+ecx]
  002b4	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002b8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002bc	8b 55 08	 mov	 edx, DWORD PTR _result$[ebp]
  002bf	f3 0f 11 42 0c	 movss	 DWORD PTR [edx+12], xmm0

; 154  : 	result->w = scale0 * ( double )from->w + scale1 * ( double ) to1[3];

  002c4	8b 45 0c	 mov	 eax, DWORD PTR _from$[ebp]
  002c7	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  002cb	f2 0f 59 45 c0	 mulsd	 xmm0, QWORD PTR _scale0$[ebp]
  002d0	b9 08 00 00 00	 mov	 ecx, 8
  002d5	6b d1 03	 imul	 edx, ecx, 3
  002d8	f2 0f 10 4d b8	 movsd	 xmm1, QWORD PTR _scale1$[ebp]
  002dd	f2 0f 59 4c 15
	e0		 mulsd	 xmm1, QWORD PTR _to1$[ebp+edx]
  002e3	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002e7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002eb	8b 45 08	 mov	 eax, DWORD PTR _result$[ebp]
  002ee	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 155  : }

  002f2	5f		 pop	 edi
  002f3	5e		 pop	 esi
  002f4	5b		 pop	 ebx
  002f5	8b e5		 mov	 esp, ebp
  002f7	5d		 pop	 ebp
  002f8	c2 10 00	 ret	 16			; 00000010H
?slerp_quaternion@@YGXPAUQUATERNION@@PBU1@1M@Z ENDP	; slerp_quaternion
_TEXT	ENDS
END
