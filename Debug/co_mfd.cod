; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\gunships\avionics\common\co_mfd.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?display_mfd_layout_grid@@3HA			; display_mfd_layout_grid
PUBLIC	?mfd_mode_names@@3PAPBDA			; mfd_mode_names
PUBLIC	?large_eo_3d_texture_screen@@3PAUSCREEN@@A	; large_eo_3d_texture_screen
PUBLIC	?small_eo_3d_texture_screen@@3PAUSCREEN@@A	; small_eo_3d_texture_screen
PUBLIC	?pointer_position_x@@3MA			; pointer_position_x
PUBLIC	?pointer_position_y@@3MA			; pointer_position_y
PUBLIC	?clicked_position_x@@3MA			; clicked_position_x
PUBLIC	?clicked_position_y@@3MA			; clicked_position_y
PUBLIC	??_C@_0N@GAELBKDE@MFD_MODE_OFF@			; `string'
PUBLIC	??_C@_0BB@EDNJLIIK@MFD_MODE_DAMAGED@		; `string'
PUBLIC	??_C@_0BG@GFPKGBB@MFD_MODE_GROUND_RADAR@	; `string'
PUBLIC	??_C@_0BD@JEBDEICH@MFD_MODE_AIR_RADAR@		; `string'
PUBLIC	??_C@_0O@MAKIEFFB@MFD_MODE_FLIR@		; `string'
PUBLIC	??_C@_0N@OCCKPIHK@MFD_MODE_DTV@			; `string'
PUBLIC	??_C@_0N@HKKOIFAM@MFD_MODE_DVO@			; `string'
PUBLIC	??_C@_0P@GCIFJMBD@MFD_MODE_LLLTV@		; `string'
PUBLIC	??_C@_0N@MPIIMJLD@MFD_MODE_TSD@			; `string'
PUBLIC	??_C@_0N@LBFEFPFP@MFD_MODE_ASE@			; `string'
PUBLIC	??_C@_0BA@MMPFPECM@MFD_MODE_WEAPON@		; `string'
PUBLIC	??_C@_0BA@PPFGJHHP@MFD_MODE_SYSTEM@		; `string'
PUBLIC	??_C@_0BA@BGBENHEB@MFD_MODE_ENGINE@		; `string'
_BSS	SEGMENT
?display_mfd_layout_grid@@3HA DD 01H DUP (?)		; display_mfd_layout_grid
?large_eo_3d_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; large_eo_3d_texture_screen
?small_eo_3d_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; small_eo_3d_texture_screen
?clicked_position_x@@3MA DD 01H DUP (?)			; clicked_position_x
?clicked_position_y@@3MA DD 01H DUP (?)			; clicked_position_y
_BSS	ENDS
;	COMDAT ??_C@_0BA@BGBENHEB@MFD_MODE_ENGINE@
CONST	SEGMENT
??_C@_0BA@BGBENHEB@MFD_MODE_ENGINE@ DB 'MFD_MODE_ENGINE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PPFGJHHP@MFD_MODE_SYSTEM@
CONST	SEGMENT
??_C@_0BA@PPFGJHHP@MFD_MODE_SYSTEM@ DB 'MFD_MODE_SYSTEM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MMPFPECM@MFD_MODE_WEAPON@
CONST	SEGMENT
??_C@_0BA@MMPFPECM@MFD_MODE_WEAPON@ DB 'MFD_MODE_WEAPON', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LBFEFPFP@MFD_MODE_ASE@
CONST	SEGMENT
??_C@_0N@LBFEFPFP@MFD_MODE_ASE@ DB 'MFD_MODE_ASE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MPIIMJLD@MFD_MODE_TSD@
CONST	SEGMENT
??_C@_0N@MPIIMJLD@MFD_MODE_TSD@ DB 'MFD_MODE_TSD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GCIFJMBD@MFD_MODE_LLLTV@
CONST	SEGMENT
??_C@_0P@GCIFJMBD@MFD_MODE_LLLTV@ DB 'MFD_MODE_LLLTV', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HKKOIFAM@MFD_MODE_DVO@
CONST	SEGMENT
??_C@_0N@HKKOIFAM@MFD_MODE_DVO@ DB 'MFD_MODE_DVO', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OCCKPIHK@MFD_MODE_DTV@
CONST	SEGMENT
??_C@_0N@OCCKPIHK@MFD_MODE_DTV@ DB 'MFD_MODE_DTV', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MAKIEFFB@MFD_MODE_FLIR@
CONST	SEGMENT
??_C@_0O@MAKIEFFB@MFD_MODE_FLIR@ DB 'MFD_MODE_FLIR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JEBDEICH@MFD_MODE_AIR_RADAR@
CONST	SEGMENT
??_C@_0BD@JEBDEICH@MFD_MODE_AIR_RADAR@ DB 'MFD_MODE_AIR_RADAR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GFPKGBB@MFD_MODE_GROUND_RADAR@
CONST	SEGMENT
??_C@_0BG@GFPKGBB@MFD_MODE_GROUND_RADAR@ DB 'MFD_MODE_GROUND_RADAR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EDNJLIIK@MFD_MODE_DAMAGED@
CONST	SEGMENT
??_C@_0BB@EDNJLIIK@MFD_MODE_DAMAGED@ DB 'MFD_MODE_DAMAGED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GAELBKDE@MFD_MODE_OFF@
CONST	SEGMENT
??_C@_0N@GAELBKDE@MFD_MODE_OFF@ DB 'MFD_MODE_OFF', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
?mfd_mode_names@@3PAPBDA DD FLAT:??_C@_0N@GAELBKDE@MFD_MODE_OFF@ ; mfd_mode_names
	DD	FLAT:??_C@_0BB@EDNJLIIK@MFD_MODE_DAMAGED@
	DD	FLAT:??_C@_0BG@GFPKGBB@MFD_MODE_GROUND_RADAR@
	DD	FLAT:??_C@_0BD@JEBDEICH@MFD_MODE_AIR_RADAR@
	DD	FLAT:??_C@_0O@MAKIEFFB@MFD_MODE_FLIR@
	DD	FLAT:??_C@_0N@OCCKPIHK@MFD_MODE_DTV@
	DD	FLAT:??_C@_0N@HKKOIFAM@MFD_MODE_DVO@
	DD	FLAT:??_C@_0P@GCIFJMBD@MFD_MODE_LLLTV@
	DD	FLAT:??_C@_0N@MPIIMJLD@MFD_MODE_TSD@
	DD	FLAT:??_C@_0N@LBFEFPFP@MFD_MODE_ASE@
	DD	FLAT:??_C@_0BA@MMPFPECM@MFD_MODE_WEAPON@
	DD	FLAT:??_C@_0BA@PPFGJHHP@MFD_MODE_SYSTEM@
	DD	FLAT:??_C@_0BA@BGBENHEB@MFD_MODE_ENGINE@
	DD	00H
?pointer_position_x@@3MA DD 03f800000r		; 1	; pointer_position_x
?pointer_position_y@@3MA DD 0bf800000r		; -1	; pointer_position_y
_DATA	ENDS
PUBLIC	_fabsf
PUBLIC	?fabs@@YGMM@Z					; fabs
PUBLIC	?update_pointer_position@@YGXXZ			; update_pointer_position
PUBLIC	?store_point_left_event@@YGXPAUEVENT@@@Z	; store_point_left_event
PUBLIC	?store_point_right_event@@YGXPAUEVENT@@@Z	; store_point_right_event
PUBLIC	?is_holding_left_button@@YGHXZ			; is_holding_left_button
PUBLIC	?is_holding_right_button@@YGHXZ			; is_holding_right_button
PUBLIC	?reset_mfd_mouse_buttons@@YGXXZ			; reset_mfd_mouse_buttons
PUBLIC	?initialise_common_mfd@@YGXXZ			; initialise_common_mfd
PUBLIC	?deinitialise_common_mfd@@YGXXZ			; deinitialise_common_mfd
PUBLIC	?initialise_common_mfd_3d_textures@@YGXXZ	; initialise_common_mfd_3d_textures
PUBLIC	?deinitialise_common_mfd_3d_textures@@YGXXZ	; deinitialise_common_mfd_3d_textures
PUBLIC	?draw_symbology_to_texture@@YGXPAUSCREEN@@HHHHHHHUREAL_COLOUR@@1P6GXH@Z@Z ; draw_symbology_to_texture
PUBLIC	__real@3f000000
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3f800000
PUBLIC	__real@3f9999999999999a
PUBLIC	__real@3ff199999999999a
PUBLIC	__real@bff199999999999a
EXTRN	_fabs:PROC
EXTRN	?get_mouse_update_flag@@YGHXZ:PROC		; get_mouse_update_flag
EXTRN	?get_mouse_move_delta_x@@YGHXZ:PROC		; get_mouse_move_delta_x
EXTRN	?get_mouse_move_delta_y@@YGHXZ:PROC		; get_mouse_move_delta_y
EXTRN	?create_user_3dvisual_texture_screen@@YGPAUSCREEN@@HHH@Z:PROC ; create_user_3dvisual_texture_screen
EXTRN	?destroy_screen@@YGHPAUSCREEN@@@Z:PROC		; destroy_screen
EXTRN	?lock_screen@@YGHPAUSCREEN@@@Z:PROC		; lock_screen
EXTRN	?unlock_screen@@YGHPAUSCREEN@@@Z:PROC		; unlock_screen
EXTRN	?set_active_screen@@YGHPAUSCREEN@@@Z:PROC	; set_active_screen
EXTRN	?set_block@@YGXHHHHUREAL_COLOUR@@@Z:PROC	; set_block
EXTRN	?set_d3d_transparency_on@@YGXXZ:PROC		; set_d3d_transparency_on
EXTRN	?set_d3d_transparency_off@@YGXXZ:PROC		; set_d3d_transparency_off
EXTRN	?set_d3d_zbuffer_comparison@@YGXH@Z:PROC	; set_d3d_zbuffer_comparison
EXTRN	?set_d3d_culling@@YGXH@Z:PROC			; set_d3d_culling
EXTRN	?set_d3d_texture_wrapping@@YGXHH@Z:PROC		; set_d3d_texture_wrapping
EXTRN	?set_d3d_texture_mag_filtering@@YGXH@Z:PROC	; set_d3d_texture_mag_filtering
EXTRN	?set_d3d_texture_min_filtering@@YGXH@Z:PROC	; set_d3d_texture_min_filtering
EXTRN	?set_d3d_texture_mip_filtering@@YGXH@Z:PROC	; set_d3d_texture_mip_filtering
EXTRN	?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z:PROC ; set_d3d_flat_shaded_textured_renderstate
EXTRN	?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z:PROC ; draw_wbuffered_flat_shaded_textured_polygon
EXTRN	?get_system_texture_ptr@@YGPAUSCREEN@@H@Z:PROC	; get_system_texture_ptr
EXTRN	?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z:PROC ; flush_screen_texture_graphics
EXTRN	?set_3d_active_environment@@YGXPAUENV_3D@@@Z:PROC ; set_3d_active_environment
EXTRN	?begin_3d_scene@@YGHXZ:PROC			; begin_3d_scene
EXTRN	?end_3d_scene@@YGXXZ:PROC			; end_3d_scene
EXTRN	?create_apache_pfz@@YGXH@Z:PROC			; create_apache_pfz
EXTRN	?apache_select_clicked_target@@YGXXZ:PROC	; apache_select_clicked_target
EXTRN	?application_video_width@@3HA:DWORD		; application_video_width
EXTRN	?d3d_can_render_to_texture@@3HA:DWORD		; d3d_can_render_to_texture
EXTRN	?video_screen@@3PAUSCREEN@@A:DWORD		; video_screen
EXTRN	?command_line_mouse_look@@3HA:DWORD		; command_line_mouse_look
EXTRN	?global_options@@3UGLOBAL_OPTIONS_DATA@@A:BYTE	; global_options
EXTRN	?main_3d_env@@3PAUENV_3D@@A:DWORD		; main_3d_env
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?left_button_held@@3HA DD 01H DUP (?)			; left_button_held
?right_button_held@@3HA DD 01H DUP (?)			; right_button_held
_BSS	ENDS
;	COMDAT __real@bff199999999999a
CONST	SEGMENT
__real@bff199999999999a DQ 0bff199999999999ar	; -1.1
CONST	ENDS
;	COMDAT __real@3ff199999999999a
CONST	SEGMENT
__real@3ff199999999999a DQ 03ff199999999999ar	; 1.1
CONST	ENDS
;	COMDAT __real@3f9999999999999a
CONST	SEGMENT
__real@3f9999999999999a DQ 03f9999999999999ar	; 0.025
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
_DATA	SEGMENT
?previous_mouse_update_flag@?1??update_pointer_position@@YGXXZ@4HA DD 01H ; `update_pointer_position'::`2'::previous_mouse_update_flag
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_mfd.c
;	COMDAT ?store_point@@YGXHH@Z
_TEXT	SEGMENT
tv135 = -72						; size = 8
tv95 = -72						; size = 8
tv84 = -68						; size = 4
_button_down$ = 8					; size = 4
_left_button$ = 12					; size = 4
?store_point@@YGXHH@Z PROC				; store_point, COMDAT

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 189  : 	if (button_down)

  00009	83 7d 08 00	 cmp	 DWORD PTR _button_down$[ebp], 0
  0000d	74 55		 je	 SHORT $LN2@store_poin

; 190  : 	{
; 191  : 		clicked_position_x = pointer_position_x;

  0000f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pointer_position_x@@3MA
  00017	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?clicked_position_x@@3MA, xmm0

; 192  : 		clicked_position_y = pointer_position_y;

  0001f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pointer_position_y@@3MA
  00027	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?clicked_position_y@@3MA, xmm0

; 193  : 		
; 194  : 		if (left_button)

  0002f	83 7d 0c 00	 cmp	 DWORD PTR _left_button$[ebp], 0
  00033	74 16		 je	 SHORT $LN4@store_poin

; 195  : 		{
; 196  : 			left_button_held = TRUE;

  00035	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?left_button_held@@3HA, 1

; 197  : 			right_button_held = FALSE;

  0003f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?right_button_held@@3HA, 0

; 198  : 		}
; 199  : 		else

  00049	eb 14		 jmp	 SHORT $LN5@store_poin
$LN4@store_poin:

; 200  : 		{
; 201  : 			right_button_held = TRUE;

  0004b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?right_button_held@@3HA, 1

; 202  : 			left_button_held = FALSE;

  00055	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?left_button_held@@3HA, 0
$LN5@store_poin:

; 203  : 		}
; 204  : 	}
; 205  : 	else

  0005f	e9 ce 00 00 00	 jmp	 $LN3@store_poin
$LN2@store_poin:

; 206  : 	{
; 207  : 		if (get_global_gunship_type () == GUNSHIP_TYPE_APACHE)

  00064	83 3d 0c 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+12, 0
  0006b	0f 85 ad 00 00
	00		 jne	 $LN9@store_poin

; 208  : 		{
; 209  : 			if (left_button_held && left_button
; 210  : 				&& fabs(clicked_position_x - pointer_position_x) < CLICK_TOLERANCE
; 211  : 				&& fabs(clicked_position_y - pointer_position_y) < CLICK_TOLERANCE)

  00071	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?left_button_held@@3HA, 0
  00078	74 67		 je	 SHORT $LN7@store_poin
  0007a	83 7d 0c 00	 cmp	 DWORD PTR _left_button$[ebp], 0
  0007e	74 61		 je	 SHORT $LN7@store_poin
  00080	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?clicked_position_x@@3MA
  00088	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?pointer_position_x@@3MA
  00090	51		 push	 ecx
  00091	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00096	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  0009b	dd 5d b8	 fstp	 QWORD PTR tv95[ebp]
  0009e	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3f9999999999999a
  000a6	66 0f 2f 45 b8	 comisd	 xmm0, QWORD PTR tv95[ebp]
  000ab	76 34		 jbe	 SHORT $LN7@store_poin
  000ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?clicked_position_y@@3MA
  000b5	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?pointer_position_y@@3MA
  000bd	51		 push	 ecx
  000be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c3	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  000c8	dd 5d b8	 fstp	 QWORD PTR tv135[ebp]
  000cb	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3f9999999999999a
  000d3	66 0f 2f 45 b8	 comisd	 xmm0, QWORD PTR tv135[ebp]
  000d8	76 07		 jbe	 SHORT $LN7@store_poin

; 212  : 			{
; 213  : 				apache_select_clicked_target();

  000da	e8 00 00 00 00	 call	 ?apache_select_clicked_target@@YGXXZ ; apache_select_clicked_target

; 214  : 			}
; 215  : 			else if ((left_button_held && left_button)

  000df	eb 3d		 jmp	 SHORT $LN9@store_poin
$LN7@store_poin:

; 216  : 					 || (right_button_held && !left_button))

  000e1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?left_button_held@@3HA, 0
  000e8	74 06		 je	 SHORT $LN11@store_poin
  000ea	83 7d 0c 00	 cmp	 DWORD PTR _left_button$[ebp], 0
  000ee	75 0f		 jne	 SHORT $LN10@store_poin
$LN11@store_poin:
  000f0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?right_button_held@@3HA, 0
  000f7	74 25		 je	 SHORT $LN9@store_poin
  000f9	83 7d 0c 00	 cmp	 DWORD PTR _left_button$[ebp], 0
  000fd	75 1f		 jne	 SHORT $LN9@store_poin
$LN10@store_poin:

; 217  : 			{
; 218  : 				create_apache_pfz(!left_button);

  000ff	83 7d 0c 00	 cmp	 DWORD PTR _left_button$[ebp], 0
  00103	75 09		 jne	 SHORT $LN13@store_poin
  00105	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv84[ebp], 1
  0010c	eb 07		 jmp	 SHORT $LN14@store_poin
$LN13@store_poin:
  0010e	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$LN14@store_poin:
  00115	8b 45 bc	 mov	 eax, DWORD PTR tv84[ebp]
  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 ?create_apache_pfz@@YGXH@Z ; create_apache_pfz
$LN9@store_poin:

; 219  : 			}
; 220  : 		}
; 221  : 
; 222  : 		left_button_held = right_button_held = FALSE;

  0011e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?right_button_held@@3HA, 0
  00128	a1 00 00 00 00	 mov	 eax, DWORD PTR ?right_button_held@@3HA
  0012d	a3 00 00 00 00	 mov	 DWORD PTR ?left_button_held@@3HA, eax
$LN3@store_poin:

; 223  : 	}
; 224  : }

  00132	5f		 pop	 edi
  00133	5e		 pop	 esi
  00134	5b		 pop	 ebx
  00135	8b e5		 mov	 esp, ebp
  00137	5d		 pop	 ebp
  00138	c2 08 00	 ret	 8
?store_point@@YGXHH@Z ENDP				; store_point
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_mfd.c
;	COMDAT ?draw_symbology_to_texture@@YGXPAUSCREEN@@HHHHHHHUREAL_COLOUR@@1P6GXH@Z@Z
_TEXT	SEGMENT
_specular$ = -260					; size = 4
_quad$ = -256						; size = 256
_texture_screen$ = 8					; size = 4
_texture_index$ = 12					; size = 4
_texture_width$ = 16					; size = 4
_texture_height$ = 20					; size = 4
_x_min$ = 24						; size = 4
_y_min$ = 28						; size = 4
_x_max$ = 32						; size = 4
_y_max$ = 36						; size = 4
_colour$ = 40						; size = 4
_background_colour$ = 44				; size = 4
_draw_2d_symbols_function$ = 48				; size = 4
?draw_symbology_to_texture@@YGXPAUSCREEN@@HHHHHHHUREAL_COLOUR@@1P6GXH@Z@Z PROC ; draw_symbology_to_texture, COMDAT

; 294  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 295  : 	vertex
; 296  : 		quad[4];
; 297  : 
; 298  : 	real_colour
; 299  : 		specular;
; 300  : 
; 301  : 	//
; 302  : 	// draw MFD on texture
; 303  : 	//
; 304  : 
; 305  : 	set_active_screen (texture_screen);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _texture_screen$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 306  : 
; 307  : 	if (lock_screen (texture_screen))

  00015	8b 45 08	 mov	 eax, DWORD PTR _texture_screen$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0001e	85 c0		 test	 eax, eax
  00020	74 32		 je	 SHORT $LN2@draw_symbo

; 308  : 	{
; 309  : //		set_block (x_min, y_min, x_max, y_max, clear_colour);
; 310  : 		set_block (0, 0, texture_width-1, texture_height-1, background_colour);

  00022	8b 45 2c	 mov	 eax, DWORD PTR _background_colour$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 14	 mov	 ecx, DWORD PTR _texture_height$[ebp]
  00029	83 e9 01	 sub	 ecx, 1
  0002c	51		 push	 ecx
  0002d	8b 55 10	 mov	 edx, DWORD PTR _texture_width$[ebp]
  00030	83 ea 01	 sub	 edx, 1
  00033	52		 push	 edx
  00034	6a 00		 push	 0
  00036	6a 00		 push	 0
  00038	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 311  : 
; 312  : //		draw_layout_grid ();
; 313  : 
; 314  : 		draw_2d_symbols_function(TRUE);

  0003d	6a 01		 push	 1
  0003f	ff 55 30	 call	 DWORD PTR _draw_2d_symbols_function$[ebp]

; 315  : 
; 316  : 		flush_screen_texture_graphics (texture_screen);

  00042	8b 45 08	 mov	 eax, DWORD PTR _texture_screen$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 317  : 		unlock_screen (texture_screen);

  0004b	8b 45 08	 mov	 eax, DWORD PTR _texture_screen$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN2@draw_symbo:

; 318  : 	}
; 319  : 
; 320  : 	set_active_screen (video_screen);

  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 321  : 
; 322  : 	//
; 323  : 	// render MFD to screen
; 324  : 	//
; 325  : 
; 326  : 	set_3d_active_environment (main_3d_env);

  0005f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 327  : 
; 328  : 	if (begin_3d_scene ())

  0006a	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  0006f	85 c0		 test	 eax, eax
  00071	0f 84 48 03 00
	00		 je	 $LN3@draw_symbo

; 329  : 	{
; 330  : 		set_d3d_transparency_on ();

  00077	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 331  : 		set_d3d_zbuffer_comparison (FALSE);

  0007c	6a 00		 push	 0
  0007e	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 332  : 		set_d3d_culling (FALSE);

  00083	6a 00		 push	 0
  00085	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 333  : 		set_d3d_texture_wrapping (0, FALSE);

  0008a	6a 00		 push	 0
  0008c	6a 00		 push	 0
  0008e	e8 00 00 00 00	 call	 ?set_d3d_texture_wrapping@@YGXHH@Z ; set_d3d_texture_wrapping

; 334  : 
; 335  : 		if ((application_video_width == 640) || (get_global_unscaled_displays ()))

  00093	81 3d 00 00 00
	00 80 02 00 00	 cmp	 DWORD PTR ?application_video_width@@3HA, 640 ; application_video_width, 00000280H
  0009d	74 09		 je	 SHORT $LN6@draw_symbo
  0009f	83 3d 74 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+884, 0
  000a6	74 17		 je	 SHORT $LN4@draw_symbo
$LN6@draw_symbo:

; 336  : 		{
; 337  : 			set_d3d_texture_mag_filtering (FALSE);

  000a8	6a 00		 push	 0
  000aa	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 338  : 			set_d3d_texture_min_filtering (FALSE);

  000af	6a 00		 push	 0
  000b1	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 339  : 			set_d3d_texture_mip_filtering (FALSE);

  000b6	6a 00		 push	 0
  000b8	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering

; 340  : 		}
; 341  : 		else

  000bd	eb 15		 jmp	 SHORT $LN5@draw_symbo
$LN4@draw_symbo:

; 342  : 		{
; 343  : 			set_d3d_texture_mag_filtering (TRUE);

  000bf	6a 01		 push	 1
  000c1	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 344  : 			set_d3d_texture_min_filtering (TRUE);

  000c6	6a 01		 push	 1
  000c8	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 345  : 			set_d3d_texture_mip_filtering (FALSE);

  000cd	6a 00		 push	 0
  000cf	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering
$LN5@draw_symbo:

; 346  : 		}
; 347  : 
; 348  : //		set_d3d_flat_shaded_textured_renderstate (get_system_texture_ptr (TEXTURE_INDEX_AVCKPT_DISPLAY_ORT));
; 349  : 		set_d3d_flat_shaded_textured_renderstate (get_system_texture_ptr (texture_index));

  000d4	8b 45 0c	 mov	 eax, DWORD PTR _texture_index$[ebp]
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 ?get_system_texture_ptr@@YGPAUSCREEN@@H@Z ; get_system_texture_ptr
  000dd	50		 push	 eax
  000de	e8 00 00 00 00	 call	 ?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z ; set_d3d_flat_shaded_textured_renderstate

; 350  : 
; 351  :       ////////////////////////////////////////
; 352  :       //
; 353  : 
; 354  : /*		colour.red				= hud_colour_table[get_global_hud_colour ()].r;
; 355  : 		colour.green			= hud_colour_table[get_global_hud_colour ()].g;
; 356  : 		colour.blue				= hud_colour_table[get_global_hud_colour ()].b;
; 357  : 		colour.alpha			= 255;
; 358  : */
; 359  : 		specular.red			= 0;

  000e3	c6 85 fe fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+2], 0

; 360  : 		specular.green			= 0;

  000ea	c6 85 fd fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+1], 0

; 361  : 		specular.blue			= 0;

  000f1	c6 85 fc fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp], 0

; 362  : 		specular.alpha			= 255;

  000f8	c6 85 ff fe ff
	ff ff		 mov	 BYTE PTR _specular$[ebp+3], 255 ; 000000ffH

; 363  : 
; 364  : 		quad[0].i				= x_min;

  000ff	f3 0f 2a 45 18	 cvtsi2ss xmm0, DWORD PTR _x_min$[ebp]
  00104	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00109	6b c8 00	 imul	 ecx, eax, 0
  0010c	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 365  : 		quad[0].j	  			= y_min;

  00115	f3 0f 2a 45 1c	 cvtsi2ss xmm0, DWORD PTR _y_min$[ebp]
  0011a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0011f	6b c8 00	 imul	 ecx, eax, 0
  00122	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 366  : 		quad[0].z	  			= 0.5;

  0012b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00130	6b c8 00	 imul	 ecx, eax, 0
  00133	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0013b	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 367  : 		quad[0].q	  			= 0.5;

  00144	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00149	6b c8 00	 imul	 ecx, eax, 0
  0014c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00154	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 368  : 		quad[0].u	  			= 0.0;

  0015d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00162	6b c8 00	 imul	 ecx, eax, 0
  00165	0f 57 c0	 xorps	 xmm0, xmm0
  00168	f3 0f 11 84 0d
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+24], xmm0

; 369  : 		quad[0].v	  			= 0.0;

  00171	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00176	6b c8 00	 imul	 ecx, eax, 0
  00179	0f 57 c0	 xorps	 xmm0, xmm0
  0017c	f3 0f 11 84 0d
	1c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+28], xmm0

; 370  : 
; 371  : 		quad[1].i				= x_max;

  00185	f3 0f 2a 45 20	 cvtsi2ss xmm0, DWORD PTR _x_max$[ebp]
  0018a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0018f	c1 e0 00	 shl	 eax, 0
  00192	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 372  : 		quad[1].j  				= y_min;

  0019b	f3 0f 2a 45 1c	 cvtsi2ss xmm0, DWORD PTR _y_min$[ebp]
  001a0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001a5	c1 e0 00	 shl	 eax, 0
  001a8	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 373  : 		quad[1].z  				= 0.5;

  001b1	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001b6	c1 e0 00	 shl	 eax, 0
  001b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001c1	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 374  : 		quad[1].q  				= 0.5;

  001ca	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001cf	c1 e0 00	 shl	 eax, 0
  001d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001da	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 375  : 		quad[1].u  				= 1.0;

  001e3	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001e8	c1 e0 00	 shl	 eax, 0
  001eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001f3	f3 0f 11 84 05
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+24], xmm0

; 376  : 		quad[1].v  				= 0.0;

  001fc	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00201	c1 e0 00	 shl	 eax, 0
  00204	0f 57 c0	 xorps	 xmm0, xmm0
  00207	f3 0f 11 84 05
	1c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+28], xmm0

; 377  : 
; 378  : 		quad[2].i				= x_max;

  00210	f3 0f 2a 45 20	 cvtsi2ss xmm0, DWORD PTR _x_max$[ebp]
  00215	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0021a	d1 e0		 shl	 eax, 1
  0021c	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 379  : 		quad[2].j 				= y_max;

  00225	f3 0f 2a 45 24	 cvtsi2ss xmm0, DWORD PTR _y_max$[ebp]
  0022a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0022f	d1 e0		 shl	 eax, 1
  00231	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 380  : 		quad[2].z  				= 0.5;

  0023a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0023f	d1 e0		 shl	 eax, 1
  00241	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00249	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 381  : 		quad[2].q  				= 0.5;

  00252	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00257	d1 e0		 shl	 eax, 1
  00259	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00261	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 382  : 		quad[2].u  				= 1.0;

  0026a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0026f	d1 e0		 shl	 eax, 1
  00271	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00279	f3 0f 11 84 05
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+24], xmm0

; 383  : 		quad[2].v  				= 1.0;

  00282	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00287	d1 e0		 shl	 eax, 1
  00289	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00291	f3 0f 11 84 05
	1c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+28], xmm0

; 384  : 
; 385  : 		quad[3].i				= x_min;

  0029a	f3 0f 2a 45 18	 cvtsi2ss xmm0, DWORD PTR _x_min$[ebp]
  0029f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002a4	6b c8 03	 imul	 ecx, eax, 3
  002a7	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 386  : 		quad[3].j				= y_max;

  002b0	f3 0f 2a 45 24	 cvtsi2ss xmm0, DWORD PTR _y_max$[ebp]
  002b5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002ba	6b c8 03	 imul	 ecx, eax, 3
  002bd	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 387  : 		quad[3].z				= 0.5;

  002c6	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002cb	6b c8 03	 imul	 ecx, eax, 3
  002ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  002d6	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 388  : 		quad[3].q				= 0.5;

  002df	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002e4	6b c8 03	 imul	 ecx, eax, 3
  002e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  002ef	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 389  : 		quad[3].u				= 0.0;

  002f8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  002fd	6b c8 03	 imul	 ecx, eax, 3
  00300	0f 57 c0	 xorps	 xmm0, xmm0
  00303	f3 0f 11 84 0d
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+24], xmm0

; 390  : 		quad[3].v				= 1.0;

  0030c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00311	6b c8 03	 imul	 ecx, eax, 3
  00314	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0031c	f3 0f 11 84 0d
	1c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+28], xmm0

; 391  : 
; 392  : 		quad[0].next_vertex	= &quad[1];

  00325	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0032a	c1 e0 00	 shl	 eax, 0
  0032d	8d 8c 05 00 ff
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  00334	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00339	6b c2 00	 imul	 eax, edx, 0
  0033c	89 8c 05 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], ecx

; 393  : 		quad[1].next_vertex	= &quad[2];

  00343	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00348	d1 e0		 shl	 eax, 1
  0034a	8d 8c 05 00 ff
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  00351	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00356	c1 e2 00	 shl	 edx, 0
  00359	89 8c 15 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+edx+40], ecx

; 394  : 		quad[2].next_vertex	= &quad[3];

  00360	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00365	6b c8 03	 imul	 ecx, eax, 3
  00368	8d 94 0d 00 ff
	ff ff		 lea	 edx, DWORD PTR _quad$[ebp+ecx]
  0036f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00374	d1 e0		 shl	 eax, 1
  00376	89 94 05 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], edx

; 395  : 		quad[3].next_vertex	= NULL;

  0037d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00382	6b c8 03	 imul	 ecx, eax, 3
  00385	c7 84 0d 28 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$[ebp+ecx+40], 0

; 396  : 
; 397  :       //
; 398  :       ////////////////////////////////////////
; 399  : 
; 400  : 		draw_wbuffered_flat_shaded_textured_polygon (quad, colour, specular);

  00390	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _specular$[ebp]
  00396	50		 push	 eax
  00397	8b 4d 28	 mov	 ecx, DWORD PTR _colour$[ebp]
  0039a	51		 push	 ecx
  0039b	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR _quad$[ebp]
  003a1	52		 push	 edx
  003a2	e8 00 00 00 00	 call	 ?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_flat_shaded_textured_polygon

; 401  : 
; 402  : 		set_d3d_transparency_off ();

  003a7	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 403  : 		set_d3d_zbuffer_comparison (TRUE);

  003ac	6a 01		 push	 1
  003ae	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 404  : 		set_d3d_culling (TRUE);

  003b3	6a 01		 push	 1
  003b5	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 405  : 		end_3d_scene ();

  003ba	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN3@draw_symbo:

; 406  : 	}
; 407  : }

  003bf	5f		 pop	 edi
  003c0	5e		 pop	 esi
  003c1	5b		 pop	 ebx
  003c2	8b e5		 mov	 esp, ebp
  003c4	5d		 pop	 ebp
  003c5	c2 2c 00	 ret	 44			; 0000002cH
?draw_symbology_to_texture@@YGXPAUSCREEN@@HHHHHHHUREAL_COLOUR@@1P6GXH@Z@Z ENDP ; draw_symbology_to_texture
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_mfd.c
;	COMDAT ?deinitialise_common_mfd_3d_textures@@YGXXZ
_TEXT	SEGMENT
?deinitialise_common_mfd_3d_textures@@YGXXZ PROC	; deinitialise_common_mfd_3d_textures, COMDAT

; 175  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 176  : 	if (d3d_can_render_to_texture)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  00010	74 16		 je	 SHORT $LN1@deinitiali

; 177  : 	{
; 178  : 		destroy_screen (large_eo_3d_texture_screen);

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_eo_3d_texture_screen@@3PAUSCREEN@@A ; large_eo_3d_texture_screen
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 179  : 		destroy_screen (small_eo_3d_texture_screen);

  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_eo_3d_texture_screen@@3PAUSCREEN@@A ; small_eo_3d_texture_screen
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen
$LN1@deinitiali:

; 180  : 	}
; 181  : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?deinitialise_common_mfd_3d_textures@@YGXXZ ENDP	; deinitialise_common_mfd_3d_textures
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_mfd.c
;	COMDAT ?initialise_common_mfd_3d_textures@@YGXXZ
_TEXT	SEGMENT
?initialise_common_mfd_3d_textures@@YGXXZ PROC		; initialise_common_mfd_3d_textures, COMDAT

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 158  : 	if (d3d_can_render_to_texture)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  00010	74 2e		 je	 SHORT $LN2@initialise

; 159  : 	{
; 160  : 		large_eo_3d_texture_screen = create_user_3dvisual_texture_screen (256, 256, TEXTURE_TYPE_SCREEN);

  00012	6a 04		 push	 4
  00014	68 00 01 00 00	 push	 256			; 00000100H
  00019	68 00 01 00 00	 push	 256			; 00000100H
  0001e	e8 00 00 00 00	 call	 ?create_user_3dvisual_texture_screen@@YGPAUSCREEN@@HHH@Z ; create_user_3dvisual_texture_screen
  00023	a3 00 00 00 00	 mov	 DWORD PTR ?large_eo_3d_texture_screen@@3PAUSCREEN@@A, eax ; large_eo_3d_texture_screen

; 161  : 		small_eo_3d_texture_screen = create_user_3dvisual_texture_screen (128, 128, TEXTURE_TYPE_SCREEN);

  00028	6a 04		 push	 4
  0002a	68 80 00 00 00	 push	 128			; 00000080H
  0002f	68 80 00 00 00	 push	 128			; 00000080H
  00034	e8 00 00 00 00	 call	 ?create_user_3dvisual_texture_screen@@YGPAUSCREEN@@HHH@Z ; create_user_3dvisual_texture_screen
  00039	a3 00 00 00 00	 mov	 DWORD PTR ?small_eo_3d_texture_screen@@3PAUSCREEN@@A, eax ; small_eo_3d_texture_screen

; 162  : 	}
; 163  : 	else

  0003e	eb 14		 jmp	 SHORT $LN1@initialise
$LN2@initialise:

; 164  : 	{
; 165  : 		large_eo_3d_texture_screen = NULL;

  00040	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?large_eo_3d_texture_screen@@3PAUSCREEN@@A, 0 ; large_eo_3d_texture_screen

; 166  : 		small_eo_3d_texture_screen = NULL;

  0004a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?small_eo_3d_texture_screen@@3PAUSCREEN@@A, 0 ; small_eo_3d_texture_screen
$LN1@initialise:

; 167  : 	}
; 168  : }

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?initialise_common_mfd_3d_textures@@YGXXZ ENDP		; initialise_common_mfd_3d_textures
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_mfd.c
;	COMDAT ?deinitialise_common_mfd@@YGXXZ
_TEXT	SEGMENT
?deinitialise_common_mfd@@YGXXZ PROC			; deinitialise_common_mfd, COMDAT

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 150  : }

  00009	5f		 pop	 edi
  0000a	5e		 pop	 esi
  0000b	5b		 pop	 ebx
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?deinitialise_common_mfd@@YGXXZ ENDP			; deinitialise_common_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_mfd.c
;	COMDAT ?initialise_common_mfd@@YGXXZ
_TEXT	SEGMENT
?initialise_common_mfd@@YGXXZ PROC			; initialise_common_mfd, COMDAT

; 139  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 140  : 	display_mfd_layout_grid = FALSE;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?display_mfd_layout_grid@@3HA, 0 ; display_mfd_layout_grid

; 141  : 	reset_mfd_mouse_buttons();

  00013	e8 00 00 00 00	 call	 ?reset_mfd_mouse_buttons@@YGXXZ ; reset_mfd_mouse_buttons

; 142  : }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?initialise_common_mfd@@YGXXZ ENDP			; initialise_common_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_mfd.c
;	COMDAT ?reset_mfd_mouse_buttons@@YGXXZ
_TEXT	SEGMENT
?reset_mfd_mouse_buttons@@YGXXZ PROC			; reset_mfd_mouse_buttons, COMDAT

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 131  : 	left_button_held = right_button_held = FALSE;	

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?right_button_held@@3HA, 0
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?right_button_held@@3HA
  00018	a3 00 00 00 00	 mov	 DWORD PTR ?left_button_held@@3HA, eax

; 132  : }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?reset_mfd_mouse_buttons@@YGXXZ ENDP			; reset_mfd_mouse_buttons
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_mfd.c
;	COMDAT ?is_holding_right_button@@YGHXZ
_TEXT	SEGMENT
?is_holding_right_button@@YGHXZ PROC			; is_holding_right_button, COMDAT

; 246  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 247  : 	return right_button_held;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?right_button_held@@3HA

; 248  : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?is_holding_right_button@@YGHXZ ENDP			; is_holding_right_button
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_mfd.c
;	COMDAT ?is_holding_left_button@@YGHXZ
_TEXT	SEGMENT
?is_holding_left_button@@YGHXZ PROC			; is_holding_left_button, COMDAT

; 241  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 242  : 	return left_button_held;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?left_button_held@@3HA

; 243  : }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?is_holding_left_button@@YGHXZ ENDP			; is_holding_left_button
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_mfd.c
;	COMDAT ?store_point_right_event@@YGXPAUEVENT@@@Z
_TEXT	SEGMENT
tv68 = -68						; size = 4
_ev$ = 8						; size = 4
?store_point_right_event@@YGXPAUEVENT@@@Z PROC		; store_point_right_event, COMDAT

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 233  : 	store_point(ev->state == BUTTON_STATE_DOWN, FALSE);

  00009	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0000c	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00010	83 f9 02	 cmp	 ecx, 2
  00013	75 09		 jne	 SHORT $LN3@store_poin
  00015	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
  0001c	eb 07		 jmp	 SHORT $LN4@store_poin
$LN3@store_poin:
  0001e	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN4@store_poin:
  00025	6a 00		 push	 0
  00027	8b 55 bc	 mov	 edx, DWORD PTR tv68[ebp]
  0002a	52		 push	 edx
  0002b	e8 00 00 00 00	 call	 ?store_point@@YGXHH@Z	; store_point

; 234  : }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
?store_point_right_event@@YGXPAUEVENT@@@Z ENDP		; store_point_right_event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_mfd.c
;	COMDAT ?store_point_left_event@@YGXPAUEVENT@@@Z
_TEXT	SEGMENT
tv68 = -68						; size = 4
_ev$ = 8						; size = 4
?store_point_left_event@@YGXPAUEVENT@@@Z PROC		; store_point_left_event, COMDAT

; 227  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 228  : 	store_point(ev->state == BUTTON_STATE_DOWN, TRUE);

  00009	8b 45 08	 mov	 eax, DWORD PTR _ev$[ebp]
  0000c	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00010	83 f9 02	 cmp	 ecx, 2
  00013	75 09		 jne	 SHORT $LN3@store_poin
  00015	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
  0001c	eb 07		 jmp	 SHORT $LN4@store_poin
$LN3@store_poin:
  0001e	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN4@store_poin:
  00025	6a 01		 push	 1
  00027	8b 55 bc	 mov	 edx, DWORD PTR tv68[ebp]
  0002a	52		 push	 edx
  0002b	e8 00 00 00 00	 call	 ?store_point@@YGXHH@Z	; store_point

; 229  : }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
?store_point_left_event@@YGXPAUEVENT@@@Z ENDP		; store_point_left_event
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\common\co_mfd.c
;	COMDAT ?update_pointer_position@@YGXXZ
_TEXT	SEGMENT
tv93 = -88						; size = 8
tv85 = -88						; size = 8
tv94 = -80						; size = 8
tv86 = -80						; size = 8
_dy$1 = -8						; size = 4
_dx$2 = -4						; size = 4
?update_pointer_position@@YGXXZ PROC			; update_pointer_position, COMDAT

; 251  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 252  : 	static int previous_mouse_update_flag = 1;
; 253  : 
; 254  : 	
; 255  : 	// don't move pointer when ah64d's EO is active thealx 130215
; 256  : 
; 257  : 	if (get_global_gunship_type() == GUNSHIP_TYPE_APACHE && command_line_mouse_look  != MOUSELOOK_ON)

  00009	83 3d 0c 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+12, 0
  00010	75 0e		 jne	 SHORT $LN2@update_poi
  00012	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?command_line_mouse_look@@3HA, 3 ; command_line_mouse_look
  00019	74 05		 je	 SHORT $LN2@update_poi
  0001b	e9 4f 01 00 00	 jmp	 $LN4@update_poi
$LN2@update_poi:

; 258  : 	{
; 259  : 
; 260  : 	}
; 261  : 	else if (previous_mouse_update_flag != get_mouse_update_flag())

  00020	e8 00 00 00 00	 call	 ?get_mouse_update_flag@@YGHXZ ; get_mouse_update_flag
  00025	39 05 00 00 00
	00		 cmp	 DWORD PTR ?previous_mouse_update_flag@?1??update_pointer_position@@YGXXZ@4HA, eax
  0002b	0f 84 3e 01 00
	00		 je	 $LN4@update_poi

; 262  : 	{
; 263  : 		float dx, dy;
; 264  : 
; 265  : 		dx = get_mouse_move_delta_x() * 0.001;

  00031	e8 00 00 00 00	 call	 ?get_mouse_move_delta_x@@YGHXZ ; get_mouse_move_delta_x
  00036	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  0003a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00042	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00046	f3 0f 11 45 fc	 movss	 DWORD PTR _dx$2[ebp], xmm0

; 266  : 		dy = -get_mouse_move_delta_y() * 0.001;

  0004b	e8 00 00 00 00	 call	 ?get_mouse_move_delta_y@@YGHXZ ; get_mouse_move_delta_y
  00050	f7 d8		 neg	 eax
  00052	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  00056	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0005e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00062	f3 0f 11 45 f8	 movss	 DWORD PTR _dy$1[ebp], xmm0

; 267  : 
; 268  : 		previous_mouse_update_flag = get_mouse_update_flag();

  00067	e8 00 00 00 00	 call	 ?get_mouse_update_flag@@YGHXZ ; get_mouse_update_flag
  0006c	a3 00 00 00 00	 mov	 DWORD PTR ?previous_mouse_update_flag@?1??update_pointer_position@@YGXXZ@4HA, eax

; 269  : 
; 270  : 		pointer_position_x += dx;

  00071	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pointer_position_x@@3MA
  00079	f3 0f 58 45 fc	 addss	 xmm0, DWORD PTR _dx$2[ebp]
  0007e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pointer_position_x@@3MA, xmm0

; 271  : 		pointer_position_y += dy;

  00086	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?pointer_position_y@@3MA
  0008e	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _dy$1[ebp]
  00093	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pointer_position_y@@3MA, xmm0

; 272  : 
; 273  : 		pointer_position_x = bound(pointer_position_x, -1.1, 1.1);

  0009b	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?pointer_position_x@@3MA
  000a3	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bff199999999999a
  000ab	66 0f 2f c8	 comisd	 xmm1, xmm0
  000af	76 0f		 jbe	 SHORT $LN8@update_poi
  000b1	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff199999999999a
  000b9	f2 0f 11 45 b0	 movsd	 QWORD PTR tv86[ebp], xmm0
  000be	eb 38		 jmp	 SHORT $LN9@update_poi
$LN8@update_poi:
  000c0	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?pointer_position_x@@3MA
  000c8	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff199999999999a
  000d0	76 0f		 jbe	 SHORT $LN6@update_poi
  000d2	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff199999999999a
  000da	f2 0f 11 45 a8	 movsd	 QWORD PTR tv85[ebp], xmm0
  000df	eb 0d		 jmp	 SHORT $LN7@update_poi
$LN6@update_poi:
  000e1	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?pointer_position_x@@3MA
  000e9	f2 0f 11 45 a8	 movsd	 QWORD PTR tv85[ebp], xmm0
$LN7@update_poi:
  000ee	f2 0f 10 45 a8	 movsd	 xmm0, QWORD PTR tv85[ebp]
  000f3	f2 0f 11 45 b0	 movsd	 QWORD PTR tv86[ebp], xmm0
$LN9@update_poi:
  000f8	f2 0f 5a 45 b0	 cvtsd2ss xmm0, QWORD PTR tv86[ebp]
  000fd	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pointer_position_x@@3MA, xmm0

; 274  : 		pointer_position_y = bound(pointer_position_y, -1.1, 1.1);		

  00105	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?pointer_position_y@@3MA
  0010d	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bff199999999999a
  00115	66 0f 2f c8	 comisd	 xmm1, xmm0
  00119	76 0f		 jbe	 SHORT $LN12@update_poi
  0011b	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff199999999999a
  00123	f2 0f 11 45 b0	 movsd	 QWORD PTR tv94[ebp], xmm0
  00128	eb 38		 jmp	 SHORT $LN13@update_poi
$LN12@update_poi:
  0012a	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?pointer_position_y@@3MA
  00132	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff199999999999a
  0013a	76 0f		 jbe	 SHORT $LN10@update_poi
  0013c	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff199999999999a
  00144	f2 0f 11 45 a8	 movsd	 QWORD PTR tv93[ebp], xmm0
  00149	eb 0d		 jmp	 SHORT $LN11@update_poi
$LN10@update_poi:
  0014b	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?pointer_position_y@@3MA
  00153	f2 0f 11 45 a8	 movsd	 QWORD PTR tv93[ebp], xmm0
$LN11@update_poi:
  00158	f2 0f 10 45 a8	 movsd	 xmm0, QWORD PTR tv93[ebp]
  0015d	f2 0f 11 45 b0	 movsd	 QWORD PTR tv94[ebp], xmm0
$LN13@update_poi:
  00162	f2 0f 5a 45 b0	 cvtsd2ss xmm0, QWORD PTR tv94[ebp]
  00167	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?pointer_position_y@@3MA, xmm0
$LN4@update_poi:

; 275  : 	}
; 276  : }

  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi
  00171	5b		 pop	 ebx
  00172	8b e5		 mov	 esp, ebp
  00174	5d		 pop	 ebp
  00175	c3		 ret	 0
?update_pointer_position@@YGXXZ ENDP			; update_pointer_position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fabs@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?fabs@@YGMM@Z PROC					; fabs, COMDAT

; 112  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 113  : 	return (_CSTD fabsf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _fabsf
  00019	83 c4 04	 add	 esp, 4

; 114  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?fabs@@YGMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 671  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 672  :             return (float)fabs(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _fabs
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 673  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
END
