; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\modules\system\time.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?system_delta_time@@3MA				; system_delta_time
PUBLIC	?system_one_over_delta_time@@3MA		; system_one_over_delta_time
PUBLIC	?locked_frame_rate@@3HA				; locked_frame_rate
PUBLIC	?system_delta_time_average@@3MA			; system_delta_time_average
_BSS	SEGMENT
?locked_frame_rate@@3HA DD 01H DUP (?)			; locked_frame_rate
_BSS	ENDS
_DATA	SEGMENT
?system_delta_time@@3MA DD 03dcccccdr		; 0.1	; system_delta_time
?system_one_over_delta_time@@3MA DD 041200000r	; 10	; system_one_over_delta_time
?system_delta_time_average@@3MA DD 03dcccccdr	; 0.1	; system_delta_time_average
_DATA	ENDS
PUBLIC	?reset_delta_time@@YGXXZ			; reset_delta_time
PUBLIC	?set_delta_time@@YGXXZ				; set_delta_time
PUBLIC	?debug_watch_delta_time@@YGXXZ			; debug_watch_delta_time
PUBLIC	?get_system_time@@YGIXZ				; get_system_time
PUBLIC	?get_delta_time_average@@YGMXZ			; get_delta_time_average
PUBLIC	?get_system_time_of_day@@YGHXZ			; get_system_time_of_day
PUBLIC	?get_system_date@@YGXPAH00@Z			; get_system_date
PUBLIC	?lock_frame_rate@@YGXM@Z			; lock_frame_rate
PUBLIC	?unlock_frame_rate@@YGXXZ			; unlock_frame_rate
PUBLIC	?set_manual_delta_time@@YGXM@Z			; set_manual_delta_time
PUBLIC	??_C@_0BL@EDJNEDGC@system_delta_time?7?7?7?7?7?$DN?5?$CFf@ ; `string'
PUBLIC	??_C@_0CB@DNPLPFCL@system_delta_time_average?$CF?7?7?$DN?5?$CF@ ; `string'
PUBLIC	??_C@_0CA@GFDBOHBC@system_one_over_delta_time?7?$DN?5?$CFf@ ; `string'
PUBLIC	??_C@_0DD@NDMCHNNP@Coordinated?5Universal?5Time?5not?5@ ; `string'
PUBLIC	?__LINE__Var@?0??lock_frame_rate@@YGXM@Z@4JA	; `lock_frame_rate'::`1'::__LINE__Var
PUBLIC	??_C@_0DD@PELKMKBM@c?3?2users?2nhv90?2projects?2eech?2mo@ ; `string'
PUBLIC	??_C@_0BI@LHMKJANG@frames_per_second?5?$DO?50?40@ ; `string'
PUBLIC	??_C@_0CM@GLNHJJAG@Frame?5rate?5locked?5to?5?$CF?42f?5frame@ ; `string'
PUBLIC	??_C@_0BE@MJLLJIDM@Frame?5rate?5unlocked@	; `string'
PUBLIC	??_C@_0CD@JOFDIOHK@TIME?3?5cannot?5set?5locked?5delta?5t@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3a83126f
PUBLIC	__real@3dcccccd
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@408f400000000000
PUBLIC	__real@41200000
PUBLIC	__real@43480000
PUBLIC	__real@447a0000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	__imp___gmtime64:PROC
EXTRN	__imp___time64:PROC
EXTRN	__imp__GetSystemTime@4:PROC
EXTRN	__imp__timeGetTime@0:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ:PROC ; debug_colour_log
EXTRN	?debug_watch@@YGXPBDW4mt_type@@PAX@Z:PROC	; debug_watch
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?system_delta_time_history@@3PAMA DD 0c8H DUP (?)	; system_delta_time_history
?system_delta_time_history_position@@3HA DD 01H DUP (?)	; system_delta_time_history_position
?last_time_value@@3KA DD 01H DUP (?)			; last_time_value
_BSS	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@43480000
CONST	SEGMENT
__real@43480000 DD 043480000r			; 200
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_0CD@JOFDIOHK@TIME?3?5cannot?5set?5locked?5delta?5t@
CONST	SEGMENT
??_C@_0CD@JOFDIOHK@TIME?3?5cannot?5set?5locked?5delta?5t@ DB 'TIME: canno'
	DB	't set locked delta time', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MJLLJIDM@Frame?5rate?5unlocked@
CONST	SEGMENT
??_C@_0BE@MJLLJIDM@Frame?5rate?5unlocked@ DB 'Frame rate unlocked', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@GLNHJJAG@Frame?5rate?5locked?5to?5?$CF?42f?5frame@
CONST	SEGMENT
??_C@_0CM@GLNHJJAG@Frame?5rate?5locked?5to?5?$CF?42f?5frame@ DB 'Frame ra'
	DB	'te locked to %.2f frames per second', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LHMKJANG@frames_per_second?5?$DO?50?40@
CONST	SEGMENT
??_C@_0BI@LHMKJANG@frames_per_second?5?$DO?50?40@ DB 'frames_per_second >'
	DB	' 0.0', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@PELKMKBM@c?3?2users?2nhv90?2projects?2eech?2mo@
CONST	SEGMENT
??_C@_0DD@PELKMKBM@c?3?2users?2nhv90?2projects?2eech?2mo@ DB 'c:\users\nh'
	DB	'v90\projects\eech\modules\system\time.c', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??lock_frame_rate@@YGXM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??lock_frame_rate@@YGXM@Z@4JA DD 0149H	; `lock_frame_rate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DD@NDMCHNNP@Coordinated?5Universal?5Time?5not?5@
CONST	SEGMENT
??_C@_0DD@NDMCHNNP@Coordinated?5Universal?5Time?5not?5@ DB 'Coordinated U'
	DB	'niversal Time not supported by system', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GFDBOHBC@system_one_over_delta_time?7?$DN?5?$CFf@
CONST	SEGMENT
??_C@_0CA@GFDBOHBC@system_one_over_delta_time?7?$DN?5?$CFf@ DB 'system_on'
	DB	'e_over_delta_time', 09H, '= %f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DNPLPFCL@system_delta_time_average?$CF?7?7?$DN?5?$CF@
CONST	SEGMENT
??_C@_0CB@DNPLPFCL@system_delta_time_average?$CF?7?7?$DN?5?$CF@ DB 'syste'
	DB	'm_delta_time_average%', 09H, 09H, '= %f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EDJNEDGC@system_delta_time?7?7?7?7?7?$DN?5?$CFf@
CONST	SEGMENT
??_C@_0BL@EDJNEDGC@system_delta_time?7?7?7?7?7?$DN?5?$CFf@ DB 'system_del'
	DB	'ta_time', 09H, 09H, 09H, 09H, 09H, '= %f', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?locked_delta_time@@3MA DD 03d23d70ar		; 0.04	; locked_delta_time
?locked_one_over_delta_time@@3MA DD 041c80000r	; 25	; locked_one_over_delta_time
_DATA	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\time.c
;	COMDAT ?set_manual_delta_time@@YGXM@Z
_TEXT	SEGMENT
_delta_time$ = 8					; size = 4
?set_manual_delta_time@@YGXM@Z PROC			; set_manual_delta_time, COMDAT

; 359  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 360  : 
; 361  : 	if (!locked_frame_rate)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?locked_frame_rate@@3HA, 0 ; locked_frame_rate
  00010	75 62		 jne	 SHORT $LN2@set_manual

; 362  : 	{
; 363  : 
; 364  : 		system_delta_time = delta_time;

  00012	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _delta_time$[ebp]
  00017	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?system_delta_time@@3MA, xmm0

; 365  : 
; 366  : 		system_one_over_delta_time = 1.0 / delta_time;

  0001f	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _delta_time$[ebp]
  00024	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0002c	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00030	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00034	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?system_one_over_delta_time@@3MA, xmm0

; 367  : 
; 368  : 		system_delta_time_history [system_delta_time_history_position] = system_delta_time;

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?system_delta_time_history_position@@3HA
  00041	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00049	f3 0f 11 04 85
	00 00 00 00	 movss	 DWORD PTR ?system_delta_time_history@@3PAMA[eax*4], xmm0

; 369  : 
; 370  : 		system_delta_time_history_position = (++ system_delta_time_history_position) % DELTA_TIME_HISTORY_SIZE;

  00052	a1 00 00 00 00	 mov	 eax, DWORD PTR ?system_delta_time_history_position@@3HA
  00057	83 c0 01	 add	 eax, 1
  0005a	a3 00 00 00 00	 mov	 DWORD PTR ?system_delta_time_history_position@@3HA, eax
  0005f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?system_delta_time_history_position@@3HA
  00064	99		 cdq
  00065	b9 c8 00 00 00	 mov	 ecx, 200		; 000000c8H
  0006a	f7 f9		 idiv	 ecx
  0006c	89 15 00 00 00
	00		 mov	 DWORD PTR ?system_delta_time_history_position@@3HA, edx

; 371  : 	}
; 372  : 	else

  00072	eb 0d		 jmp	 SHORT $LN3@set_manual
$LN2@set_manual:

; 373  : 	{
; 374  : 
; 375  : 		debug_log ("TIME: cannot set locked delta time");

  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@JOFDIOHK@TIME?3?5cannot?5set?5locked?5delta?5t@
  00079	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  0007e	83 c4 04	 add	 esp, 4
$LN3@set_manual:

; 376  : 	}
; 377  : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?set_manual_delta_time@@YGXM@Z ENDP			; set_manual_delta_time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\time.c
;	COMDAT ?unlock_frame_rate@@YGXXZ
_TEXT	SEGMENT
?unlock_frame_rate@@YGXXZ PROC				; unlock_frame_rate, COMDAT

; 347  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 348  : 
; 349  : 	locked_frame_rate = FALSE;

  00009	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?locked_frame_rate@@3HA, 0 ; locked_frame_rate

; 350  : 
; 351  : 	debug_colour_log ( DEBUG_COLOUR_BLUE, "Frame rate unlocked" );

  00013	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@MJLLJIDM@Frame?5rate?5unlocked@
  00018	6a 01		 push	 1
  0001a	e8 00 00 00 00	 call	 ?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ ; debug_colour_log
  0001f	83 c4 08	 add	 esp, 8

; 352  : }

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?unlock_frame_rate@@YGXXZ ENDP				; unlock_frame_rate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\time.c
;	COMDAT ?lock_frame_rate@@YGXM@Z
_TEXT	SEGMENT
_frames_per_second$ = 8					; size = 4
?lock_frame_rate@@YGXM@Z PROC				; lock_frame_rate, COMDAT

; 329  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 330  : 
; 331  : 	ASSERT ( frames_per_second > 0.0 );

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _frames_per_second$[ebp]
  0000e	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00016	77 18		 ja	 SHORT $LN2@lock_frame
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??lock_frame_rate@@YGXM@Z@4JA
  0001d	83 c0 02	 add	 eax, 2
  00020	50		 push	 eax
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@PELKMKBM@c?3?2users?2nhv90?2projects?2eech?2mo@
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@LHMKJANG@frames_per_second?5?$DO?50?40@
  0002b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@lock_frame:

; 332  : 
; 333  : 	locked_frame_rate = TRUE;

  00030	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?locked_frame_rate@@3HA, 1 ; locked_frame_rate

; 334  : 
; 335  : 	locked_delta_time = 1.0 / frames_per_second;

  0003a	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _frames_per_second$[ebp]
  0003f	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00047	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0004b	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0004f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?locked_delta_time@@3MA, xmm0

; 336  : 
; 337  : 	locked_one_over_delta_time = frames_per_second;

  00057	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _frames_per_second$[ebp]
  0005c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?locked_one_over_delta_time@@3MA, xmm0

; 338  : 
; 339  : 	debug_colour_log ( DEBUG_COLOUR_RED, "Frame rate locked to %.2f frames per second", frames_per_second );

  00064	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _frames_per_second$[ebp]
  00069	83 ec 08	 sub	 esp, 8
  0006c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@GLNHJJAG@Frame?5rate?5locked?5to?5?$CF?42f?5frame@
  00076	6a 04		 push	 4
  00078	e8 00 00 00 00	 call	 ?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ ; debug_colour_log
  0007d	83 c4 10	 add	 esp, 16			; 00000010H

; 340  : }

  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c2 04 00	 ret	 4
?lock_frame_rate@@YGXM@Z ENDP				; lock_frame_rate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\time.c
;	COMDAT ?get_system_date@@YGXPAH00@Z
_TEXT	SEGMENT
_tmbuf$ = -12						; size = 4
_timer$ = -8						; size = 8
_day$ = 8						; size = 4
_month$ = 12						; size = 4
_year$ = 16						; size = 4
?get_system_date@@YGXPAH00@Z PROC			; get_system_date, COMDAT

; 294  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 295  : 	time_t
; 296  : 		timer;
; 297  : 
; 298  : 	struct tm
; 299  : 		*tmbuf;
; 300  : 
; 301  : 	timer = time ( NULL );

  00009	6a 00		 push	 0
  0000b	e8 00 00 00 00	 call	 _time
  00010	83 c4 04	 add	 esp, 4
  00013	89 45 f8	 mov	 DWORD PTR _timer$[ebp], eax
  00016	89 55 fc	 mov	 DWORD PTR _timer$[ebp+4], edx

; 302  : 
; 303  : 	if ( timer != -1 )

  00019	8b 45 f8	 mov	 eax, DWORD PTR _timer$[ebp]
  0001c	23 45 fc	 and	 eax, DWORD PTR _timer$[ebp+4]
  0001f	83 f8 ff	 cmp	 eax, -1
  00022	74 43		 je	 SHORT $LN2@get_system

; 304  : 	{
; 305  : 
; 306  : 		tmbuf = gmtime ( &timer );

  00024	8d 45 f8	 lea	 eax, DWORD PTR _timer$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 _gmtime
  0002d	83 c4 04	 add	 esp, 4
  00030	89 45 f4	 mov	 DWORD PTR _tmbuf$[ebp], eax

; 307  : 
; 308  : 		if ( tmbuf )

  00033	83 7d f4 00	 cmp	 DWORD PTR _tmbuf$[ebp], 0
  00037	74 2e		 je	 SHORT $LN2@get_system

; 309  : 		{
; 310  : 	
; 311  : 			*day = tmbuf->tm_mday;

  00039	8b 45 08	 mov	 eax, DWORD PTR _day$[ebp]
  0003c	8b 4d f4	 mov	 ecx, DWORD PTR _tmbuf$[ebp]
  0003f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00042	89 10		 mov	 DWORD PTR [eax], edx

; 312  : 	
; 313  : 			*month = ( tmbuf->tm_mon + 1 );

  00044	8b 45 f4	 mov	 eax, DWORD PTR _tmbuf$[ebp]
  00047	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0004a	83 c1 01	 add	 ecx, 1
  0004d	8b 55 0c	 mov	 edx, DWORD PTR _month$[ebp]
  00050	89 0a		 mov	 DWORD PTR [edx], ecx

; 314  : 	
; 315  : 			*year = ( tmbuf->tm_year % 100 );

  00052	8b 45 f4	 mov	 eax, DWORD PTR _tmbuf$[ebp]
  00055	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00058	99		 cdq
  00059	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0005e	f7 f9		 idiv	 ecx
  00060	8b 45 10	 mov	 eax, DWORD PTR _year$[ebp]
  00063	89 10		 mov	 DWORD PTR [eax], edx

; 316  : 
; 317  : 			return;

  00065	eb 0d		 jmp	 SHORT $LN1@get_system
$LN2@get_system:

; 318  : 		}
; 319  : 	}
; 320  : 
; 321  : 	debug_fatal( "Coordinated Universal Time not supported by system" );

  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@NDMCHNNP@Coordinated?5Universal?5Time?5not?5@
  0006c	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00071	83 c4 04	 add	 esp, 4
$LN1@get_system:

; 322  : }

  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	5b		 pop	 ebx
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 0c 00	 ret	 12			; 0000000cH
?get_system_date@@YGXPAH00@Z ENDP			; get_system_date
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\time.c
;	COMDAT ?get_system_time_of_day@@YGHXZ
_TEXT	SEGMENT
_time$ = -28						; size = 16
_seconds$ = -12						; size = 4
_minutes$ = -8						; size = 4
_hours$ = -4						; size = 4
?get_system_time_of_day@@YGHXZ PROC			; get_system_time_of_day, COMDAT

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 251  : 
; 252  : 	int
; 253  : 		hours,
; 254  : 		minutes,
; 255  : 		seconds;
; 256  : 
; 257  : #ifdef WIN32
; 258  : 	SYSTEMTIME
; 259  : 		time;
; 260  : 
; 261  : 	GetSystemTime ( &time );

  00009	8d 45 e4	 lea	 eax, DWORD PTR _time$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemTime@4

; 262  : 
; 263  : 	hours = time.wHour;

  00013	0f b7 45 ec	 movzx	 eax, WORD PTR _time$[ebp+8]
  00017	89 45 fc	 mov	 DWORD PTR _hours$[ebp], eax

; 264  : 	minutes = time.wMinute;

  0001a	0f b7 45 ee	 movzx	 eax, WORD PTR _time$[ebp+10]
  0001e	89 45 f8	 mov	 DWORD PTR _minutes$[ebp], eax

; 265  : 	seconds = time.wSecond;

  00021	0f b7 45 f0	 movzx	 eax, WORD PTR _time$[ebp+12]
  00025	89 45 f4	 mov	 DWORD PTR _seconds$[ebp], eax

; 266  : #else
; 267  : 	time_t
; 268  : 		timer;
; 269  : 
; 270  : 	struct tm
; 271  : 		*tmbuf;
; 272  : 
; 273  : 	//
; 274  : 	// get number of seconds past midnight
; 275  : 	//
; 276  : 	
; 277  : 	time ( &timer );
; 278  : 
; 279  : 	tmbuf = gmtime ( &timer );
; 280  : 
; 281  : 	hours = tmbuf->tm_hour;
; 282  : 	minutes = tmbuf->tm_min;
; 283  : 	seconds = tmbuf->tm_sec;
; 284  : #endif
; 285  : 
; 286  : 	return ( ( hours * 60 * 60 ) + ( minutes * 60 ) + ( seconds ) );

  00028	6b 45 fc 3c	 imul	 eax, DWORD PTR _hours$[ebp], 60
  0002c	6b c8 3c	 imul	 ecx, eax, 60
  0002f	6b 45 f8 3c	 imul	 eax, DWORD PTR _minutes$[ebp], 60
  00033	03 4d f4	 add	 ecx, DWORD PTR _seconds$[ebp]
  00036	03 c1		 add	 eax, ecx

; 287  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?get_system_time_of_day@@YGHXZ ENDP			; get_system_time_of_day
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\time.c
;	COMDAT ?get_delta_time_average@@YGMXZ
_TEXT	SEGMENT
_loop$ = -4						; size = 4
?get_delta_time_average@@YGMXZ PROC			; get_delta_time_average, COMDAT

; 213  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 214  : 
; 215  : 	int
; 216  : 		loop;
; 217  : 
; 218  : 	system_delta_time_average = 0.0;

  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?system_delta_time_average@@3MA, xmm0

; 219  : 
; 220  : 	for ( loop = 0; loop < DELTA_TIME_HISTORY_SIZE; loop ++ )

  00014	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  0001b	eb 09		 jmp	 SHORT $LN4@get_delta_
$LN2@get_delta_:
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00020	83 c0 01	 add	 eax, 1
  00023	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@get_delta_:
  00026	81 7d fc c8 00
	00 00		 cmp	 DWORD PTR _loop$[ebp], 200 ; 000000c8H
  0002d	7d 1e		 jge	 SHORT $LN3@get_delta_

; 221  : 	{
; 222  : 
; 223  : 		system_delta_time_average += system_delta_time_history[loop];

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00032	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?system_delta_time_average@@3MA
  0003a	f3 0f 58 04 85
	00 00 00 00	 addss	 xmm0, DWORD PTR ?system_delta_time_history@@3PAMA[eax*4]
  00043	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?system_delta_time_average@@3MA, xmm0

; 224  : 	}

  0004b	eb d0		 jmp	 SHORT $LN2@get_delta_
$LN3@get_delta_:

; 225  : 
; 226  : 	system_delta_time_average /= DELTA_TIME_HISTORY_SIZE;

  0004d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?system_delta_time_average@@3MA
  00055	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@43480000
  0005d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?system_delta_time_average@@3MA, xmm0

; 227  : 
; 228  : 	return ( system_delta_time_average );

  00065	d9 05 00 00 00
	00		 fld	 DWORD PTR ?system_delta_time_average@@3MA ; system_delta_time_average

; 229  : }

  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
?get_delta_time_average@@YGMXZ ENDP			; get_delta_time_average
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\time.c
;	COMDAT ?get_system_time@@YGIXZ
_TEXT	SEGMENT
?get_system_time@@YGIXZ PROC				; get_system_time, COMDAT

; 203  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 204  : 
; 205  : 	return ( ( unsigned int ) timeGetTime () );

  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0

; 206  : }

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?get_system_time@@YGIXZ ENDP				; get_system_time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\time.c
;	COMDAT ?debug_watch_delta_time@@YGXXZ
_TEXT	SEGMENT
?debug_watch_delta_time@@YGXXZ PROC			; debug_watch_delta_time, COMDAT

; 236  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 237  : 
; 238  : 	debug_watch ( "system_delta_time					= %f", MT_FLOAT, &system_delta_time );

  00009	68 00 00 00 00	 push	 OFFSET ?system_delta_time@@3MA ; system_delta_time
  0000e	6a 02		 push	 2
  00010	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@EDJNEDGC@system_delta_time?7?7?7?7?7?$DN?5?$CFf@
  00015	e8 00 00 00 00	 call	 ?debug_watch@@YGXPBDW4mt_type@@PAX@Z ; debug_watch

; 239  : 
; 240  : 	debug_watch ( "system_delta_time_average%		= %f", MT_FLOAT, &system_delta_time_average );

  0001a	68 00 00 00 00	 push	 OFFSET ?system_delta_time_average@@3MA ; system_delta_time_average
  0001f	6a 02		 push	 2
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@DNPLPFCL@system_delta_time_average?$CF?7?7?$DN?5?$CF@
  00026	e8 00 00 00 00	 call	 ?debug_watch@@YGXPBDW4mt_type@@PAX@Z ; debug_watch

; 241  : 
; 242  : 	debug_watch ( "system_one_over_delta_time	= %f", MT_FLOAT, &system_one_over_delta_time );

  0002b	68 00 00 00 00	 push	 OFFSET ?system_one_over_delta_time@@3MA ; system_one_over_delta_time
  00030	6a 02		 push	 2
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@GFDBOHBC@system_one_over_delta_time?7?$DN?5?$CFf@
  00037	e8 00 00 00 00	 call	 ?debug_watch@@YGXPBDW4mt_type@@PAX@Z ; debug_watch

; 243  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?debug_watch_delta_time@@YGXXZ ENDP			; debug_watch_delta_time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\time.c
;	COMDAT ?set_delta_time@@YGXXZ
_TEXT	SEGMENT
tv87 = -84						; size = 8
tv83 = -76						; size = 4
_difference$ = -8					; size = 4
_this_time_value$ = -4					; size = 4
?set_delta_time@@YGXXZ PROC				; set_delta_time, COMDAT

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 144  : 
; 145  : #ifdef WIN32
; 146  : 	DWORD
; 147  : 		this_time_value,
; 148  : 		difference;
; 149  : #else
; 150  : 	long
; 151  : 		this_time_value,
; 152  : 		difference;
; 153  : #endif
; 154  : 
; 155  : 	if ( !locked_frame_rate )

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?locked_frame_rate@@3HA, 0 ; locked_frame_rate
  00010	0f 85 df 00 00
	00		 jne	 $LN2@set_delta_

; 156  : 	{
; 157  : 
; 158  : 		this_time_value = timeGetTime ();

  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0
  0001c	89 45 fc	 mov	 DWORD PTR _this_time_value$[ebp], eax

; 159  : 
; 160  : 		difference = this_time_value - last_time_value;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this_time_value$[ebp]
  00022	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?last_time_value@@3KA
  00028	89 45 f8	 mov	 DWORD PTR _difference$[ebp], eax

; 161  : 
; 162  : 		system_delta_time = ( ( ( float ) difference ) / 1000.0 );

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _difference$[ebp]
  0002e	89 45 b4	 mov	 DWORD PTR tv83[ebp], eax
  00031	f2 0f 2a 45 b4	 cvtsi2sd xmm0, DWORD PTR tv83[ebp]
  00036	8b 4d b4	 mov	 ecx, DWORD PTR tv83[ebp]
  00039	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0003c	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  00045	f2 0f 11 45 ac	 movsd	 QWORD PTR tv87[ebp], xmm0
  0004a	f2 0f 5a 45 ac	 cvtsd2ss xmm0, QWORD PTR tv87[ebp]
  0004f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00053	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@408f400000000000
  0005b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0005f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?system_delta_time@@3MA, xmm0

; 163  : 
; 164  : 		if ( system_delta_time == 0.0 )

  00067	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?system_delta_time@@3MA
  0006f	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00077	9f		 lahf
  00078	f6 c4 44	 test	 ah, 68			; 00000044H
  0007b	7a 22		 jp	 SHORT $LN4@set_delta_

; 165  : 		{
; 166  : 
; 167  : 			system_delta_time = 0.001;	//1.0;

  0007d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3a83126f
  00085	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?system_delta_time@@3MA, xmm0

; 168  : 
; 169  : 			system_one_over_delta_time = 1000.0;	//1.0 / system_delta_time;

  0008d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@447a0000
  00095	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?system_one_over_delta_time@@3MA, xmm0

; 170  : 		}
; 171  : 		else

  0009d	eb 20		 jmp	 SHORT $LN5@set_delta_
$LN4@set_delta_:

; 172  : 		{
; 173  : 	
; 174  : 			system_one_over_delta_time = 1.0 / system_delta_time;

  0009f	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?system_delta_time@@3MA
  000a7	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000af	f2 0f 5e c8	 divsd	 xmm1, xmm0
  000b3	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  000b7	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?system_one_over_delta_time@@3MA, xmm0
$LN5@set_delta_:

; 175  : 		}
; 176  : 
; 177  : 		last_time_value = this_time_value;

  000bf	8b 45 fc	 mov	 eax, DWORD PTR _this_time_value$[ebp]
  000c2	a3 00 00 00 00	 mov	 DWORD PTR ?last_time_value@@3KA, eax

; 178  : 
; 179  : 		system_delta_time_history[system_delta_time_history_position] = system_delta_time;

  000c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?system_delta_time_history_position@@3HA
  000cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  000d4	f3 0f 11 04 85
	00 00 00 00	 movss	 DWORD PTR ?system_delta_time_history@@3PAMA[eax*4], xmm0

; 180  : 
; 181  : 		system_delta_time_history_position = ( system_delta_time_history_position + 1 ) % DELTA_TIME_HISTORY_SIZE;

  000dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?system_delta_time_history_position@@3HA
  000e2	83 c0 01	 add	 eax, 1
  000e5	99		 cdq
  000e6	b9 c8 00 00 00	 mov	 ecx, 200		; 000000c8H
  000eb	f7 f9		 idiv	 ecx
  000ed	89 15 00 00 00
	00		 mov	 DWORD PTR ?system_delta_time_history_position@@3HA, edx

; 182  : 	}
; 183  : 	else

  000f3	eb 2b		 jmp	 SHORT $LN3@set_delta_
$LN2@set_delta_:

; 184  : 	{
; 185  : 
; 186  : 		//
; 187  : 		// *MUST* update the last_time_value
; 188  : 		//
; 189  : 
; 190  : 		last_time_value = timeGetTime ();

  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0
  000fb	a3 00 00 00 00	 mov	 DWORD PTR ?last_time_value@@3KA, eax

; 191  : 
; 192  : 		system_delta_time = locked_delta_time;

  00100	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?locked_delta_time@@3MA
  00108	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?system_delta_time@@3MA, xmm0

; 193  : 
; 194  : 		system_one_over_delta_time = locked_one_over_delta_time;

  00110	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?locked_one_over_delta_time@@3MA
  00118	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?system_one_over_delta_time@@3MA, xmm0
$LN3@set_delta_:

; 195  : 	}
; 196  : }

  00120	5f		 pop	 edi
  00121	5e		 pop	 esi
  00122	5b		 pop	 ebx
  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	c3		 ret	 0
?set_delta_time@@YGXXZ ENDP				; set_delta_time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\modules\system\time.c
;	COMDAT ?reset_delta_time@@YGXXZ
_TEXT	SEGMENT
_loop$ = -4						; size = 4
?reset_delta_time@@YGXXZ PROC				; reset_delta_time, COMDAT

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 119  : 
; 120  : 	int
; 121  : 		loop;
; 122  : 
; 123  : 	for ( loop = 0; loop < DELTA_TIME_HISTORY_SIZE; loop ++ )

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@reset_delt
$LN2@reset_delt:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@reset_delt:
  0001b	81 7d fc c8 00
	00 00		 cmp	 DWORD PTR _loop$[ebp], 200 ; 000000c8H
  00022	7d 16		 jge	 SHORT $LN3@reset_delt

; 124  : 	{
; 125  : 
; 126  : 		system_delta_time_history[loop] = 0.1;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _loop$[ebp]
  00027	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0002f	f3 0f 11 04 85
	00 00 00 00	 movss	 DWORD PTR ?system_delta_time_history@@3PAMA[eax*4], xmm0

; 127  : 	}

  00038	eb d8		 jmp	 SHORT $LN2@reset_delt
$LN3@reset_delt:

; 128  : 
; 129  : 	system_delta_time_history_position = 0;

  0003a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?system_delta_time_history_position@@3HA, 0

; 130  : 
; 131  : 	last_time_value = timeGetTime ();

  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0
  0004a	a3 00 00 00 00	 mov	 DWORD PTR ?last_time_value@@3KA, eax

; 132  : 
; 133  : 	system_delta_time = 0.1;

  0004f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00057	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?system_delta_time@@3MA, xmm0

; 134  : 
; 135  : 	system_one_over_delta_time = 10.0;

  0005f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  00067	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?system_one_over_delta_time@@3MA, xmm0

; 136  : }

  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
?reset_delta_time@@YGXXZ ENDP				; reset_delta_time
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\time.h
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 535  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 536  :             return _time64(_Time);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Time$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
  00013	83 c4 04	 add	 esp, 4

; 537  :         }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\time.h
;	COMDAT _gmtime
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_gmtime	PROC						; COMDAT

; 498  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 499  :             #pragma warning(push)
; 500  :             #pragma warning(disable: 4996)
; 501  :             return _gmtime64(_Time);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Time$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___gmtime64
  00013	83 c4 04	 add	 esp, 4

; 502  :             #pragma warning(pop)
; 503  :         }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
_gmtime	ENDP
_TEXT	ENDS
END
