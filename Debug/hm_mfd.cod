; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27045.0 

	TITLE	C:\Users\nhv90\Projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BC@KDOHHIAN@KA50_MFD_MODE_OFF@		; `string'
PUBLIC	??_C@_0BG@IFHGHAAA@KA50_MFD_MODE_DAMAGED@	; `string'
PUBLIC	??_C@_0BD@JPGOGBDL@KA50_MFD_MODE_FLIR@		; `string'
PUBLIC	??_C@_0BC@MCEKLIK@KA50_MFD_MODE_TSD@		; `string'
PUBLIC	??_C@_0BC@HCPIDNGG@KA50_MFD_MODE_ASE@		; `string'
PUBLIC	??_C@_0BF@GPOEMMBG@KA50_MFD_MODE_WEAPON@	; `string'
PUBLIC	??_C@_0BF@FMEHKPEF@KA50_MFD_MODE_SYSTEM@	; `string'
PUBLIC	??_C@_0BF@LFAFOPHL@KA50_MFD_MODE_ENGINE@	; `string'
PUBLIC	??_C@_0BF@MBJOMCBN@KA50_MFD_MODE_FLIGHT@	; `string'
PUBLIC	??_C@_0BG@JNINJICK@KA50_MFD_MODE_MISSION@	; `string'
PUBLIC	??_C@_0BJ@HJLLBIJ@KA50_MFD_LOCATION_SHKVAL@	; `string'
PUBLIC	??_C@_0BI@MPCOKKAF@KA50_MFD_LOCATION_ABRIS@	; `string'
_BSS	SEGMENT
?shkval_mfd_mode@@3W4KA50_MFD_MODES@@A DD 01H DUP (?)	; shkval_mfd_mode
?abris_mfd_mode@@3W4KA50_MFD_MODES@@A DD 01H DUP (?)	; abris_mfd_mode
_BSS	ENDS
;	COMDAT ??_C@_0BI@MPCOKKAF@KA50_MFD_LOCATION_ABRIS@
CONST	SEGMENT
??_C@_0BI@MPCOKKAF@KA50_MFD_LOCATION_ABRIS@ DB 'KA50_MFD_LOCATION_ABRIS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HJLLBIJ@KA50_MFD_LOCATION_SHKVAL@
CONST	SEGMENT
??_C@_0BJ@HJLLBIJ@KA50_MFD_LOCATION_SHKVAL@ DB 'KA50_MFD_LOCATION_SHKVAL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JNINJICK@KA50_MFD_MODE_MISSION@
CONST	SEGMENT
??_C@_0BG@JNINJICK@KA50_MFD_MODE_MISSION@ DB 'KA50_MFD_MODE_MISSION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MBJOMCBN@KA50_MFD_MODE_FLIGHT@
CONST	SEGMENT
??_C@_0BF@MBJOMCBN@KA50_MFD_MODE_FLIGHT@ DB 'KA50_MFD_MODE_FLIGHT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LFAFOPHL@KA50_MFD_MODE_ENGINE@
CONST	SEGMENT
??_C@_0BF@LFAFOPHL@KA50_MFD_MODE_ENGINE@ DB 'KA50_MFD_MODE_ENGINE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FMEHKPEF@KA50_MFD_MODE_SYSTEM@
CONST	SEGMENT
??_C@_0BF@FMEHKPEF@KA50_MFD_MODE_SYSTEM@ DB 'KA50_MFD_MODE_SYSTEM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GPOEMMBG@KA50_MFD_MODE_WEAPON@
CONST	SEGMENT
??_C@_0BF@GPOEMMBG@KA50_MFD_MODE_WEAPON@ DB 'KA50_MFD_MODE_WEAPON', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HCPIDNGG@KA50_MFD_MODE_ASE@
CONST	SEGMENT
??_C@_0BC@HCPIDNGG@KA50_MFD_MODE_ASE@ DB 'KA50_MFD_MODE_ASE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MCEKLIK@KA50_MFD_MODE_TSD@
CONST	SEGMENT
??_C@_0BC@MCEKLIK@KA50_MFD_MODE_TSD@ DB 'KA50_MFD_MODE_TSD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JPGOGBDL@KA50_MFD_MODE_FLIR@
CONST	SEGMENT
??_C@_0BD@JPGOGBDL@KA50_MFD_MODE_FLIR@ DB 'KA50_MFD_MODE_FLIR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IFHGHAAA@KA50_MFD_MODE_DAMAGED@
CONST	SEGMENT
??_C@_0BG@IFHGHAAA@KA50_MFD_MODE_DAMAGED@ DB 'KA50_MFD_MODE_DAMAGED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KDOHHIAN@KA50_MFD_MODE_OFF@
CONST	SEGMENT
??_C@_0BC@KDOHHIAN@KA50_MFD_MODE_OFF@ DB 'KA50_MFD_MODE_OFF', 00H ; `string'
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	_atan2f
PUBLIC	_cosf
PUBLIC	_fabsf
PUBLIC	_fmodf
PUBLIC	_sinf
PUBLIC	_sqrtf
PUBLIC	_tanf
PUBLIC	?atan2@@YGMMM@Z					; atan2
PUBLIC	?cos@@YGMM@Z					; cos
PUBLIC	?fabs@@YGMM@Z					; fabs
PUBLIC	?fmod@@YGMMM@Z					; fmod
PUBLIC	?sin@@YGMM@Z					; sin
PUBLIC	?sqrt@@YGMM@Z					; sqrt
PUBLIC	?tan@@YGMM@Z					; tan
PUBLIC	?initialise_ka50_mfd@@YGXXZ			; initialise_ka50_mfd
PUBLIC	?deinitialise_ka50_mfd@@YGXXZ			; deinitialise_ka50_mfd
PUBLIC	?draw_ka50_mfd@@YGXXZ				; draw_ka50_mfd
PUBLIC	?set_ka50_text_display_text@@YGXPAD00@Z		; set_ka50_text_display_text
PUBLIC	?draw_ka50_full_screen_display@@YGXXZ		; draw_ka50_full_screen_display
PUBLIC	?draw_overlaid_ka50_mfd@@YGXXZ			; draw_overlaid_ka50_mfd
PUBLIC	?select_ka50_mfd_mode@@YGXW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z ; select_ka50_mfd_mode
PUBLIC	?select_next_ka50_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z ; select_next_ka50_mfd
PUBLIC	?select_previous_ka50_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z ; select_previous_ka50_mfd
PUBLIC	?toggle_ka50_mfd_on_off@@YGXW4KA50_MFD_LOCATIONS@@@Z ; toggle_ka50_mfd_on_off
PUBLIC	?select_next_ka50_tsd_ase_range@@YGXXZ		; select_next_ka50_tsd_ase_range
PUBLIC	?select_previous_ka50_tsd_ase_range@@YGXXZ	; select_previous_ka50_tsd_ase_range
PUBLIC	?select_next_ka50_tsd_declutter_level@@YGXXZ	; select_next_ka50_tsd_declutter_level
PUBLIC	?select_previous_ka50_tsd_declutter_level@@YGXXZ ; select_previous_ka50_tsd_declutter_level
PUBLIC	?toggle_ka50_ase_auto_page@@YGXXZ		; toggle_ka50_ase_auto_page
PUBLIC	?auto_page_ka50_ase_mfd@@YGXXZ			; auto_page_ka50_ase_mfd
PUBLIC	?select_ka50_eo_mfd@@YGXXZ			; select_ka50_eo_mfd
PUBLIC	??$min@M@std@@YGABMABM0@Z			; std::min<float>
PUBLIC	??$max@M@std@@YGABMABM0@Z			; std::max<float>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA ; `draw_radar_target_symbol'::`1'::__LINE__Var
PUBLIC	??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@ ; `string'
PUBLIC	??_C@_06JJLAMBGK@target@			; `string'
PUBLIC	??_C@_0BA@IIPCKJML@source_position@		; `string'
PUBLIC	??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@ ; `string'
PUBLIC	??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@ ; `string'
PUBLIC	?__LINE__Var@?0??transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z@4JA ; `transform_mfd_screen_co_ords_to_mfd_texture_co_ords'::`1'::__LINE__Var
PUBLIC	??_C@_01KBJDNOO@i@				; `string'
PUBLIC	??_C@_01CBDEGOCN@j@				; `string'
PUBLIC	?__LINE__Var@?0??draw_heading_scale@@YGXMH@Z@4JA ; `draw_heading_scale'::`1'::__LINE__Var
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_03MDIFNIHN@360@				; `string'
PUBLIC	?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA ; `draw_3d_eo_display'::`1'::__LINE__Var
PUBLIC	??_C@_02KMMHFIEO@eo@				; `string'
PUBLIC	??_C@_0BF@MDEHLDP@eo_3d_texture_screen@		; `string'
PUBLIC	??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@ ; `string'
PUBLIC	??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@ ; `string'
PUBLIC	??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z@4JA ; `draw_full_screen_3d_eo_display'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA ; `draw_2d_eo_display'::`1'::__LINE__Var
PUBLIC	??_C@_04MIGKMLBH@FLIR@				; `string'
PUBLIC	??_C@_03MAMPKPPK@XXX@				; `string'
PUBLIC	??_C@_08JFLECGBM@LO?5LIGHT@			; `string'
PUBLIC	??_C@_02ONPABID@LO@				; `string'
PUBLIC	??_C@_04GGBPDDBN@?$CF?41f@			; `string'
PUBLIC	??_C@_03NGNKAJPJ@?$CFdm@			; `string'
PUBLIC	??_C@_06OMCABMNO@?$CF?41fKm@			; `string'
PUBLIC	??_C@_06KODELPLK@LOCKED@			; `string'
PUBLIC	??_C@_06GPMJGLEM@MARKED@			; `string'
PUBLIC	??_C@_01CPLAODJH@S@				; `string'
PUBLIC	?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA ; `draw_tactical_situation_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0CH@MOMFCEOG@ka50_mfd_location_valid?5?$CImfd_lo@ ; `string'
PUBLIC	??_C@_05IHJDDCGF@2?45KM@			; `string'
PUBLIC	??_C@_03CAFGHLBJ@5KM@				; `string'
PUBLIC	??_C@_04GMKPDCBM@10KM@				; `string'
PUBLIC	??_C@_04BMNBLIPO@25KM@				; `string'
PUBLIC	??_C@_08KFHEGLBA@COMBINED@			; `string'
PUBLIC	??_C@_09ECOKIFNI@TARGETING@			; `string'
PUBLIC	??_C@_0L@CNLPLFKK@NAVIGATION@			; `string'
PUBLIC	??_C@_06LLLMNJMM@NO?5ACQ@			; `string'
PUBLIC	??_C@_08JJGIEILB@EOS?5FLIR@			; `string'
PUBLIC	??_C@_03GJMPEADF@HMS@				; `string'
PUBLIC	??_C@_08HNIIHLPL@?$CF?5?5?54d?5M@		; `string'
PUBLIC	??_C@_0O@FMJDLNLC@SECTOR?3?5?$CFd?0?$CFd@	; `string'
PUBLIC	??_C@_0M@FOMEHBFC@?$CFc?3?5?$CF?41f?5KM@	; `string'
PUBLIC	??_C@_09KJKGCNAK@?$CFc?3?5?$CFd?5KM@		; `string'
PUBLIC	??_C@_06BAOIPBEF@?9?3?9?9?4?9@			; `string'
PUBLIC	??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@	; `string'
PUBLIC	??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@		; `string'
PUBLIC	?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA ; `get_closest_missile'::`1'::__LINE__Var
PUBLIC	??_C@_06OEKOLKIL@source@			; `string'
PUBLIC	??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA ; `draw_aircraft_survivability_equipment_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@		; `string'
PUBLIC	??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@		; `string'
PUBLIC	??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@		; `string'
PUBLIC	??_C@_0L@DADPKEOI@IR?5JAM?5XXX@			; `string'
PUBLIC	??_C@_09OKBKNIAL@IR?5JAM?5ON@			; `string'
PUBLIC	??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@			; `string'
PUBLIC	??_C@_06CNPDBJMK@IR?5XXX@			; `string'
PUBLIC	??_C@_05JBLHJOBL@IR?5ON@			; `string'
PUBLIC	??_C@_06CCMEMHEJ@IR?5OFF@			; `string'
PUBLIC	??_C@_0L@JHFIBGMI@RD?5JAM?5XXX@			; `string'
PUBLIC	??_C@_09OKIOJJOP@RD?5JAM?5ON@			; `string'
PUBLIC	??_C@_0L@JIGPMIEL@RD?5JAM?5OFF@			; `string'
PUBLIC	??_C@_06JNKFDAHI@RD?5XXX@			; `string'
PUBLIC	??_C@_05BHAGAOGB@RD?5ON@			; `string'
PUBLIC	??_C@_06JCJCOOPL@RD?5OFF@			; `string'
PUBLIC	??_C@_04LMMJFDCN@AUTO@				; `string'
PUBLIC	??_C@_08GHAEIHAP@CHAFF?3XX@			; `string'
PUBLIC	??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@		; `string'
PUBLIC	??_C@_04KJNFJKOK@C?3XX@				; `string'
PUBLIC	??_C@_06GNOFKMCG@C?3?$CF02d@			; `string'
PUBLIC	??_C@_08HGDOPGOH@FLARE?3XX@			; `string'
PUBLIC	??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@		; `string'
PUBLIC	??_C@_04GBDFBFJK@F?3XX@				; `string'
PUBLIC	??_C@_06DPNNIDIB@F?3?$CF02d@			; `string'
PUBLIC	?__LINE__Var@?0??draw_weapon_display_mfd@@YGXXZ@4JA ; `draw_weapon_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_03NHPMNECN@ARM@				; `string'
PUBLIC	??_C@_03CBNMOHKF@C?1M@				; `string'
PUBLIC	??_C@_0L@GPHKKCOA@CHAFFx?$CF02d@		; `string'
PUBLIC	??_C@_06CPHFAHEB@Cx?$CF02d@			; `string'
PUBLIC	??_C@_08FGBJBHLJ@CHAFFxXX@			; `string'
PUBLIC	??_C@_04JIMIAKFM@CxXX@				; `string'
PUBLIC	??_C@_0L@NONPILJE@FLAREx?$CF02d@		; `string'
PUBLIC	??_C@_06HNENCIOG@Fx?$CF02d@			; `string'
PUBLIC	??_C@_08EHCDGGFB@FLARExXX@			; `string'
PUBLIC	??_C@_04FACIIFCM@FxXX@				; `string'
PUBLIC	??_C@_07EPFBIBAD@HEx?$CF03d@			; `string'
PUBLIC	??_C@_07GFPICJEB@APx?$CF03d@			; `string'
PUBLIC	??_C@_05HGDIBGHI@x?$CF02d@			; `string'
PUBLIC	??_C@_0BB@FAFOJLKK@ROCKET?5SALVOxALL@		; `string'
PUBLIC	??_C@_0BC@CEPGDBDN@ROCKET?5SALVOx?$CF02d@	; `string'
PUBLIC	?__LINE__Var@?0??print_mfd_system_message@@YGMPAD0HMM@Z@4JA ; `print_mfd_system_message'::`1'::__LINE__Var
PUBLIC	??_C@_09FJJPPKDN@equipment@			; `string'
PUBLIC	??_C@_07FPLKDJGL@warning@			; `string'
PUBLIC	??_C@_02GIPFHKNO@OK@				; `string'
PUBLIC	??_C@_04OOEBCMBF@FAIL@				; `string'
PUBLIC	??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@		; `string'
PUBLIC	??_C@_0N@JDBOFCJG@RADAR?5JAMMER@		; `string'
PUBLIC	??_C@_09MILGCPFO@IR?5JAMMER@			; `string'
PUBLIC	??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@	; `string'
PUBLIC	??_C@_0P@OEDGDHNF@COMMUNICATIONS@		; `string'
PUBLIC	??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@	; `string'
PUBLIC	??_C@_03HOHJDGGL@HUD@				; `string'
PUBLIC	??_C@_03HCHJIECN@NVG@				; `string'
PUBLIC	??_C@_0L@LMAEBBOE@STABILISER@			; `string'
PUBLIC	??_C@_0L@FFIGCBMA@MAIN?5ROTOR@			; `string'
PUBLIC	??_C@_07OHKEFPKJ@DAMAGED@			; `string'
PUBLIC	??_C@_08ICMALC@L?5ENGINE@			; `string'
PUBLIC	??_C@_03FGGDJIBK@APU@				; `string'
PUBLIC	??_C@_08GEIAFJFB@R?5ENGINE@			; `string'
PUBLIC	??_C@_03IBEFMGAI@LOW@				; `string'
PUBLIC	??_C@_0BD@KOEIBOKB@HYDRAULIC?5PRESSURE@		; `string'
PUBLIC	??_C@_0N@MMJNGGCF@OIL?5PRESSURE@		; `string'
PUBLIC	??_C@_04PKDHFCJF@HIGH@				; `string'
PUBLIC	??_C@_02MFICFPOF@NG@				; `string'
PUBLIC	??_C@_02MAABNLHD@NP@				; `string'
PUBLIC	??_C@_03FGEMCONN@TRQ@				; `string'
PUBLIC	??_C@_03DBNGLLAD@TGT@				; `string'
PUBLIC	??_C@_02PCDHLJPB@NR@				; `string'
PUBLIC	??_C@_0O@HPBNLJLN@FUEL?5?5?5?5?5?5?$CF4d@	; `string'
PUBLIC	??_C@_0O@IFONFGGI@OIL?5PRES?4?5LOW@		; `string'
PUBLIC	??_C@_0P@HKDAKEPP@OIL?5PRES?4?5NORM@		; `string'
PUBLIC	??_C@_0BC@OMFADECJ@APU?5?5?5?5?5?5?5?$CF3?40f?$CF?$CF@ ; `string'
PUBLIC	??_C@_08PLAGFMEO@THROTTLE@			; `string'
PUBLIC	??_C@_04LMJCBFEL@OFF?5@				; `string'
PUBLIC	??_C@_04IMMGDCFE@IDLE@				; `string'
PUBLIC	??_C@_04MJEFHDBD@FLY?5@				; `string'
PUBLIC	??_C@_06HPNMMHPJ@?$CF03d?$CF?$CF@		; `string'
PUBLIC	??_C@_08HFPCNHOJ@?5?$CFs?5OFF?5@		; `string'
PUBLIC	??_C@_08EFKGPAPG@?5?$CFs?5IDLE@			; `string'
PUBLIC	??_C@_08CFLBLB@?5?$CFs?5FLY?5@			; `string'
PUBLIC	??_C@_0L@JGIHHDGO@?5?$CFs?5?$CF03d?$CF?$CF@	; `string'
PUBLIC	?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA	; `draw_pitch_ladder'::`1'::__LINE__Var
PUBLIC	??_C@_03NJMPCKOA@?$CFd0@			; `string'
PUBLIC	??_C@_04MLFODOCP@R?$CF3d@			; `string'
PUBLIC	??_C@_04OCCELDNI@?$CF04d@			; `string'
PUBLIC	??_C@_03GLKEJMAA@?$CF4d@			; `string'
PUBLIC	??_C@_0BH@DIKEHEFB@min?3?5?$CF?402f?0?5max?3?5?$CF?402f@ ; `string'
PUBLIC	??_C@_04GHNNFJCK@?$CF?40f@			; `string'
PUBLIC	?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA ; `display_waypoint_information'::`1'::__LINE__Var
PUBLIC	??_C@_08EELEMDEH@?$CFc?3?5?$CFd?5M@		; `string'
PUBLIC	?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA ; `draw_flight_display_mfd'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??print_mono_font_max_length_string@@YGXPAD@Z@4JA ; `print_mono_font_max_length_string'::`1'::__LINE__Var
PUBLIC	??_C@_01LKDEMHDF@s@				; `string'
PUBLIC	??_C@_05KEIIKJGB@?$CF?431s@			; `string'
PUBLIC	?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA ; `get_player_rank_and_name'::`1'::__LINE__Var
PUBLIC	??_C@_02LFNMGJAP@en@				; `string'
PUBLIC	??_C@_06HOHPNJLC@buffer@			; `string'
PUBLIC	??_C@_05DNIIFBMG@?$CFs?5?$CFs@			; `string'
PUBLIC	?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA ; `print_target_position'::`1'::__LINE__Var
PUBLIC	??_C@_08OAGMDKAF@position@			; `string'
PUBLIC	??_C@_0CA@NPMPDHNJ@?5?5?5?5?5?5?5?$DM?$CF03d?0?$CF03d?$DO?5?$CF6?41fKm?5?$CF3d?$HP@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA ; `draw_mission_display_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0N@DBEHAMGN@FLIGHT?5GROUP@		; `string'
PUBLIC	??_C@_07MLNBPDHK@company@			; `string'
PUBLIC	??_C@_03DKEJHHJP@?$CFs?3@			; `string'
PUBLIC	??_C@_0N@CPCKCPHJ@?$CFc?$CFs?51?9?$CFd?5?$CFs@	; `string'
PUBLIC	??_C@_09JGJHKNML@?$CFc1?9?$CFd?5?$CFs@		; `string'
PUBLIC	??_C@_09EKFLINLD@?$CFc?$CFs?51?9?$CFd@		; `string'
PUBLIC	??_C@_06IAHIIHDD@?$CFc1?9?$CFd@			; `string'
PUBLIC	??_C@_0N@JBFLAFMH@FORMATION?3?$CFs@		; `string'
PUBLIC	??_C@_0DJ@FHGBBPHP@get_local_entity_int_value?5?$CItas@ ; `string'
PUBLIC	??_C@_07PPFPLHID@MISSION@			; `string'
PUBLIC	??_C@_09FCABHDEH@TYPE?5?5?3?$CFs@		; `string'
PUBLIC	??_C@_09MMJDMDOM@OBJECT?3?$CFs@			; `string'
PUBLIC	??_C@_09NFLHCPML@STATUS?3?$CFs@			; `string'
PUBLIC	??_C@_09MDEJFDEL@START?5?3?$CFs@		; `string'
PUBLIC	??_C@_09HDLDOKLK@END?5?5?5?3?$CFs@		; `string'
PUBLIC	??_C@_0BK@MIBJHEEL@COUNT?5?3Kills?$DN?$CFd?5Losses?$DN?$CFd@ ; `string'
PUBLIC	??_C@_0CL@NLIKEJAC@TIME?5?5?3MT?$DN?$CF02d?3?$CF02d?3?$CF02d?5MD?$DN?$CF02@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_mfd@@YGXPAUSCREEN@@PAW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z@4JA ; `draw_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0L@DHCAJMOH@mfd_screen@			; `string'
PUBLIC	??_C@_0BM@IMMOJIFF@ka50_mfd_mode_valid?5?$CI?$CKmode?$CJ@ ; `string'
PUBLIC	??_C@_0CD@NMFMNCJL@ka50_mfd_location_valid?5?$CIlocati@ ; `string'
PUBLIC	??_C@_0BL@EJABPDDO@Invalid?5main?5MFD?5mode?5?$DN?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_text_display@@YGXPAUSCREEN@@@Z@4JA ; `draw_text_display'::`1'::__LINE__Var
PUBLIC	??_C@_0M@CPFKEDIA@text_screen@			; `string'
PUBLIC	?__LINE__Var@?0??initialise_ka50_mfd@@YGXXZ@4JA	; `initialise_ka50_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_0BL@ICCLDILN@num_weapon_line_points?5?$DO?50@ ; `string'
PUBLIC	??_C@_0CC@DECEGKIO@?$CInum_weapon_line_points?5?$CG?51?$CJ?5?$DN?$DN@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_ka50_mfd@@YGXXZ@4JA	; `draw_ka50_mfd'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??set_ka50_text_display_text@@YGXPAD00@Z@4JA ; `set_ka50_text_display_text'::`1'::__LINE__Var
PUBLIC	??_C@_02JAFEPHFG@s1@				; `string'
PUBLIC	??_C@_02LLHJKEJF@s2@				; `string'
PUBLIC	??_C@_02KCGCJFNE@s3@				; `string'
PUBLIC	??_C@_0BH@KFJLEDAI@Invalid?5view?5mode?5?$DN?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?0??draw_overlaid_mfd@@YGXPAUSCREEN@@W4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z@4JA ; `draw_overlaid_mfd'::`1'::__LINE__Var
PUBLIC	??_C@_0BL@LNMELKLJ@ka50_mfd_mode_valid?5?$CImode?$CJ@ ; `string'
PUBLIC	??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?0??get_default_mfd_mode@@YG?AW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z@4JA ; `get_default_mfd_mode'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??get_mfd_damage@@YGHW4KA50_MFD_LOCATIONS@@@Z@4JA ; `get_mfd_damage'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??select_ka50_mfd_mode@@YGXW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z@4JA ; `select_ka50_mfd_mode'::`1'::__LINE__Var
PUBLIC	??_C@_0BP@CDPALFHI@ka50_mfd_mode_valid?5?$CImfd_mode?$CJ@ ; `string'
PUBLIC	??_C@_07DCHAPOBD@?$CFs?5?$DN?5?$CFs@		; `string'
PUBLIC	?__LINE__Var@?0??get_next_mfd_mode@@YG?AW4KA50_MFD_MODES@@W42@W4KA50_MFD_LOCATIONS@@@Z@4JA ; `get_next_mfd_mode'::`1'::__LINE__Var
PUBLIC	??_C@_0BL@JOJLEIFO@Next?5Ka?950?5MFD?5mode?5for?5?$CFi@ ; `string'
PUBLIC	?__LINE__Var@?0??get_previous_mfd_mode@@YG?AW4KA50_MFD_MODES@@W42@W4KA50_MFD_LOCATIONS@@@Z@4JA ; `get_previous_mfd_mode'::`1'::__LINE__Var
PUBLIC	??_C@_0BP@EBNLNNAN@Previous?5Ka?950?5MFD?5mode?5for?5?$CFi@ ; `string'
PUBLIC	?__LINE__Var@?0??select_next_ka50_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA ; `select_next_ka50_mfd'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??select_previous_ka50_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA ; `select_previous_ka50_mfd'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??toggle_ka50_mfd_on_off@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA ; `toggle_ka50_mfd_on_off'::`1'::__LINE__Var
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3a83126f
PUBLIC	__real@3d0f5c29
PUBLIC	__real@3d23d70a
PUBLIC	__real@3da3d70a
PUBLIC	__real@3db851ec
PUBLIC	__real@3dcccccd
PUBLIC	__real@3de38e39
PUBLIC	__real@3e0ccccd
PUBLIC	__real@3e19999a
PUBLIC	__real@3e32b8c2
PUBLIC	__real@3e333333
PUBLIC	__real@3e3d70a4
PUBLIC	__real@3e400000
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e59999a
PUBLIC	__real@3e6147ae
PUBLIC	__real@3e6e978d
PUBLIC	__real@3e733333
PUBLIC	__real@3e800000
PUBLIC	__real@3e91eb85
PUBLIC	__real@3e933333
PUBLIC	__real@3e99999a
PUBLIC	__real@3ecccccd
PUBLIC	__real@3ee66666
PUBLIC	__real@3ef0a3d7
PUBLIC	__real@3effbe77
PUBLIC	__real@3f000000
PUBLIC	__real@3f00002000400080
PUBLIC	__real@3f051eb8
PUBLIC	__real@3f0ccccd
PUBLIC	__real@3f10000000000000
PUBLIC	__real@3f11eb85
PUBLIC	__real@3f133333
PUBLIC	__real@3f170a3d
PUBLIC	__real@3f19999a
PUBLIC	__real@3f1a36e2eb1c432d
PUBLIC	__real@3f251eb8
PUBLIC	__real@3f266666
PUBLIC	__real@3f31eb85
PUBLIC	__real@3f333333
PUBLIC	__real@3f3ae147
PUBLIC	__real@3f3eb852
PUBLIC	__real@3f451eb8
PUBLIC	__real@3f47ae14
PUBLIC	__real@3f4a3d71
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f4f5c29
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3f51eb85
PUBLIC	__real@3f547ae1
PUBLIC	__real@3f5999999999999a
PUBLIC	__real@3f5c987100000000
PUBLIC	__real@3f5eb852
PUBLIC	__real@3f666666
PUBLIC	__real@3f68f5c3
PUBLIC	__real@3f6b851f
PUBLIC	__real@3f6e147b
PUBLIC	__real@3f733333
PUBLIC	__real@3f79999a
PUBLIC	__real@3f7fbe77
PUBLIC	__real@3f800000
PUBLIC	__real@3f847ae147ae147b
PUBLIC	__real@3f9999999999999a
PUBLIC	__real@3fa999999999999a
PUBLIC	__real@3fb3333333333333
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fbc71c720000000
PUBLIC	__real@3fc0000000000000
PUBLIC	__real@3fc3333333333333
PUBLIC	__real@3fc6571848000000
PUBLIC	__real@3fc90fdb
PUBLIC	__real@3fc999999999999a
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fd6571848000000
PUBLIC	__real@3fd999999999999a
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe3333333333333
PUBLIC	__real@3fe8000000000000
PUBLIC	__real@3fe999999999999a
PUBLIC	__real@3feff7ced916872b
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff0c09b332ccccd
PUBLIC	__real@3ff3333340000000
PUBLIC	__real@3ff5d3d193333333
PUBLIC	__real@3ff8000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@400921fb51000000
PUBLIC	__real@4010000000000000
PUBLIC	__real@4016eb167e7d81e3
PUBLIC	__real@401921fb51000000
PUBLIC	__real@401c000000000000
PUBLIC	__real@401c463abb200000
PUBLIC	__real@4020000000000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@402a000000000000
PUBLIC	__real@4044000000000000
PUBLIC	__real@40490fdb
PUBLIC	__real@4051400000000000
PUBLIC	__real@4059000000000000
PUBLIC	__real@405b800000000000
PUBLIC	__real@405e000000000000
PUBLIC	__real@405f400000000000
PUBLIC	__real@405fc00000000000
PUBLIC	__real@4062a00000000000
PUBLIC	__real@40666666
PUBLIC	__real@406f400000000000
PUBLIC	__real@4070000000000000
PUBLIC	__real@4079c00000000000
PUBLIC	__real@407e000000000000
PUBLIC	__real@407ec00000000000
PUBLIC	__real@40800000
PUBLIC	__real@4084000000000000
PUBLIC	__real@408f400000000000
PUBLIC	__real@40a00000
PUBLIC	__real@40c3878000000000
PUBLIC	__real@40f86a0000000000
PUBLIC	__real@41000000
PUBLIC	__real@41100000
PUBLIC	__real@41200000
PUBLIC	__real@41300000
PUBLIC	__real@41400000
PUBLIC	__real@41900000
PUBLIC	__real@41980000
PUBLIC	__real@41c80000
PUBLIC	__real@41e00000
PUBLIC	__real@421c0000
PUBLIC	__real@42652ee0
PUBLIC	__real@42c80000
PUBLIC	__real@43000000
PUBLIC	__real@437fffbe
PUBLIC	__real@43800000
PUBLIC	__real@44480000
PUBLIC	__real@44fa0000
PUBLIC	__real@459c4000
PUBLIC	__real@461c4000
PUBLIC	__real@46c35000
PUBLIC	__real@49742400
PUBLIC	__real@80000000
PUBLIC	__real@bca3d70a
PUBLIC	__real@bccccccd
PUBLIC	__real@bd23d70a
PUBLIC	__real@bd4ccccd
PUBLIC	__real@bd99999a
PUBLIC	__real@bdcccccd
PUBLIC	__real@bdf5c28f
PUBLIC	__real@be000000
PUBLIC	__real@be0ccccd
PUBLIC	__real@be0f5c29
PUBLIC	__real@be19999a
PUBLIC	__real@be23d70a
PUBLIC	__real@be28f5c3
PUBLIC	__real@be2e147b
PUBLIC	__real@be333333
PUBLIC	__real@be4ccccd
PUBLIC	__real@be59999a
PUBLIC	__real@be6147ae
PUBLIC	__real@be666666
PUBLIC	__real@be800000
PUBLIC	__real@be851eb8
PUBLIC	__real@be87ae14
PUBLIC	__real@be8a3d71
PUBLIC	__real@be8ccccd
PUBLIC	__real@be933333
PUBLIC	__real@be99999a
PUBLIC	__real@becccccd
PUBLIC	__real@bed70a3d
PUBLIC	__real@bed9999a
PUBLIC	__real@bee66666
PUBLIC	__real@bef0a3d7
PUBLIC	__real@bf000000
PUBLIC	__real@bf051eb8
PUBLIC	__real@bf11eb85
PUBLIC	__real@bf19999a
PUBLIC	__real@bf2147ae
PUBLIC	__real@bf251eb8
PUBLIC	__real@bf266666
PUBLIC	__real@bf2ccccd
PUBLIC	__real@bf31eb85
PUBLIC	__real@bf333333
PUBLIC	__real@bf3ae147
PUBLIC	__real@bf3eb852
PUBLIC	__real@bf400000
PUBLIC	__real@bf48f5c3
PUBLIC	__real@bf4ccccd
PUBLIC	__real@bf566666
PUBLIC	__real@bf59999a
PUBLIC	__real@bf5eb852
PUBLIC	__real@bf6147ae
PUBLIC	__real@bf63d70a
PUBLIC	__real@bf666666
PUBLIC	__real@bf68f5c3
PUBLIC	__real@bf6b851f
PUBLIC	__real@bf6e147b
PUBLIC	__real@bf733333
PUBLIC	__real@bf800000
PUBLIC	__real@bfc90fdb
PUBLIC	__real@bfd3333333333333
PUBLIC	__real@bfd6571848000000
PUBLIC	__real@bfe0000000000000
PUBLIC	__real@bff0000000000000
PUBLIC	__real@c0000000
PUBLIC	__real@c00921fb51000000
PUBLIC	__real@c024000000000000
PUBLIC	__real@c0400000
PUBLIC	__real@c0800000
PUBLIC	__real@c0a00000
PUBLIC	__real@c0c00000
PUBLIC	__real@c1000000
PUBLIC	__real@c1200000
PUBLIC	__real@c1400000
PUBLIC	__real@c1980000
PUBLIC	__real@c1c80000
PUBLIC	__real@c2180000
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	_abs:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__strncpy:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	_atan2:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_fmod:PROC
EXTRN	_sin:PROC
EXTRN	_sqrt:PROC
EXTRN	_tan:PROC
EXTRN	__imp__ceil:PROC
EXTRN	__imp__floor:PROC
EXTRN	?process_assert@@YGXPBD0H@Z:PROC		; process_assert
EXTRN	?convert_float_to_int@@YGXMPAH@Z:PROC		; convert_float_to_int
EXTRN	?debug_fatal@@YAXPBDZZ:PROC			; debug_fatal
EXTRN	?debug_log@@YAXPBDZZ:PROC			; debug_log
EXTRN	?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ:PROC ; debug_colour_log
EXTRN	?safe_malloc_memory@@YGPAXI@Z:PROC		; safe_malloc_memory
EXTRN	?safe_free@@YGXPAX@Z:PROC			; safe_free
EXTRN	?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z:PROC	; get_3d_vector_magnitude
EXTRN	?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z:PROC ; normalise_3d_vector_given_magnitude
EXTRN	?get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z:PROC ; get_3d_unit_vector_dot_product
EXTRN	?get_3d_transformation_matrix@@YGXQAY02MMMM@Z:PROC ; get_3d_transformation_matrix
EXTRN	?multiply_transpose_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z:PROC ; multiply_transpose_matrix3x3_vec3d
EXTRN	?multiply_matrix3x3_matrix3x3@@YGXQAY02MQAY02$$CBM1@Z:PROC ; multiply_matrix3x3_matrix3x3
EXTRN	?sfrand1norm@@YGNXZ:PROC			; sfrand1norm
EXTRN	?get_2d_range@@YGMPBUVEC3D@@0@Z:PROC		; get_2d_range
EXTRN	?get_3d_range@@YGMPBUVEC3D@@0@Z:PROC		; get_3d_range
EXTRN	?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z:PROC ; create_user_texture_screen
EXTRN	?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z:PROC ; create_system_texture_screen
EXTRN	?set_system_texture_screen@@YGXPAUSCREEN@@H@Z:PROC ; set_system_texture_screen
EXTRN	?destroy_screen@@YGHPAUSCREEN@@@Z:PROC		; destroy_screen
EXTRN	?lock_screen@@YGHPAUSCREEN@@@Z:PROC		; lock_screen
EXTRN	?unlock_screen@@YGHPAUSCREEN@@@Z:PROC		; unlock_screen
EXTRN	?set_active_screen@@YGHPAUSCREEN@@@Z:PROC	; set_active_screen
EXTRN	?set_3d_render_target@@YGHPAUSCREEN@@@Z:PROC	; set_3d_render_target
EXTRN	?finalise_3d_render_target_texture@@YGXPAUSCREEN@@@Z:PROC ; finalise_3d_render_target_texture
EXTRN	?set_block@@YGXHHHHUREAL_COLOUR@@@Z:PROC	; set_block
EXTRN	?draw_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC	; draw_line
EXTRN	?set_d3d_transparency_on@@YGXXZ:PROC		; set_d3d_transparency_on
EXTRN	?set_d3d_transparency_off@@YGXXZ:PROC		; set_d3d_transparency_off
EXTRN	?set_d3d_zbuffer_comparison@@YGXH@Z:PROC	; set_d3d_zbuffer_comparison
EXTRN	?set_d3d_culling@@YGXH@Z:PROC			; set_d3d_culling
EXTRN	?set_d3d_texture_wrapping@@YGXHH@Z:PROC		; set_d3d_texture_wrapping
EXTRN	?set_d3d_texture_mag_filtering@@YGXH@Z:PROC	; set_d3d_texture_mag_filtering
EXTRN	?set_d3d_texture_min_filtering@@YGXH@Z:PROC	; set_d3d_texture_min_filtering
EXTRN	?set_d3d_texture_mip_filtering@@YGXH@Z:PROC	; set_d3d_texture_mip_filtering
EXTRN	?set_d3d_plain_renderstate@@YGXXZ:PROC		; set_d3d_plain_renderstate
EXTRN	?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z:PROC ; set_d3d_flat_shaded_textured_renderstate
EXTRN	?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z:PROC ; draw_wbuffered_plain_polygon
EXTRN	?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z:PROC ; draw_wbuffered_flat_shaded_textured_polygon
EXTRN	?get_system_texture_ptr@@YGPAUSCREEN@@H@Z:PROC	; get_system_texture_ptr
EXTRN	?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z:PROC ; flush_screen_texture_graphics
EXTRN	?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z:PROC ; set_mono_font_type
EXTRN	?set_mono_font_position@@YGXMM@Z:PROC		; set_mono_font_position
EXTRN	?set_mono_font_rel_position@@YGXMM@Z:PROC	; set_mono_font_rel_position
EXTRN	?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z:PROC	; set_mono_font_colour
EXTRN	?get_mono_font_char_height@@YGMD@Z:PROC		; get_mono_font_char_height
EXTRN	?print_mono_font_char@@YGXD@Z:PROC		; print_mono_font_char
EXTRN	?get_mono_font_string_width@@YGMPBD@Z:PROC	; get_mono_font_string_width
EXTRN	?print_mono_font_string@@YGXPBD@Z:PROC		; print_mono_font_string
EXTRN	?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z:PROC ; draw_mono_sprite
EXTRN	?create_2d_environment@@YGPAUENV_2D@@XZ:PROC	; create_2d_environment
EXTRN	?destroy_2d_environment@@YGXPAUENV_2D@@@Z:PROC	; destroy_2d_environment
EXTRN	?set_2d_active_environment@@YGXPAUENV_2D@@@Z:PROC ; set_2d_active_environment
EXTRN	?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z:PROC	; set_2d_viewport
EXTRN	?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z:PROC ; set_2d_viewport_origin
EXTRN	?set_2d_window@@YGXPAUENV_2D@@MMMM@Z:PROC	; set_2d_window
EXTRN	?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z:PROC	; set_2d_window_rotation
EXTRN	?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z:PROC ; set_2d_instance_rotation
EXTRN	?set_2d_instance_position@@YGXPAUENV_2D@@MM@Z:PROC ; set_2d_instance_position
EXTRN	?reset_2d_instance@@YGXPAUENV_2D@@@Z:PROC	; reset_2d_instance
EXTRN	?set_2d_pixel@@YGXMMUREAL_COLOUR@@@Z:PROC	; set_2d_pixel
EXTRN	?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC	; draw_2d_line
EXTRN	?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z:PROC ; draw_2d_half_thick_line
EXTRN	?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z:PROC ; draw_2d_filled_triangle
EXTRN	?set_2d_mono_font_position@@YGXMM@Z:PROC	; set_2d_mono_font_position
EXTRN	?get_2d_world_position@@YGXMMPAM0@Z:PROC	; get_2d_world_position
EXTRN	?get_2d_int_screen_coordinates@@YGXMMPAH0@Z:PROC ; get_2d_int_screen_coordinates
EXTRN	?get_2d_float_screen_coordinates@@YGXMMPAM0@Z:PROC ; get_2d_float_screen_coordinates
EXTRN	?get_2d_float_screen_x_coordinate@@YGXMPAM@Z:PROC ; get_2d_float_screen_x_coordinate
EXTRN	?get_2d_float_screen_y_coordinate@@YGXMPAM@Z:PROC ; get_2d_float_screen_y_coordinate
EXTRN	?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z:PROC ; draw_2d_mono_sprite
EXTRN	?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z:PROC	; draw_2d_circle
EXTRN	?draw_2d_arc@@YGXMMMIUREAL_COLOUR@@@Z:PROC	; draw_2d_arc
EXTRN	?draw_2d_box@@YGXMMMMHHUREAL_COLOUR@@@Z:PROC	; draw_2d_box
EXTRN	?set_3d_active_environment@@YGXPAUENV_3D@@@Z:PROC ; set_3d_active_environment
EXTRN	?get_object_3d_number_of_poly_lines@@YGHH@Z:PROC ; get_object_3d_number_of_poly_lines
EXTRN	?get_object_3d_poly_line_data@@YGXHPAUVEC3D@@@Z:PROC ; get_object_3d_poly_line_data
EXTRN	?begin_3d_scene@@YGHXZ:PROC			; begin_3d_scene
EXTRN	?end_3d_scene@@YGXXZ:PROC			; end_3d_scene
EXTRN	?get_position_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUVEC3D@@PAM1@Z:PROC ; get_position_3d_screen_coordinates
EXTRN	?get_local_entity_target_bearing@@YGMPAUENTITY@@0PAM@Z:PROC ; get_local_entity_target_bearing
EXTRN	?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z:PROC ; get_local_entity_target_point
EXTRN	?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z:PROC ; get_local_entity_weapon_count
EXTRN	?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z:PROC ; get_local_entity_weapon_hardpoint_info
EXTRN	?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z:PROC ; get_waypoint_display_position
EXTRN	?get_keysite_entity_mfd_display_name@@YGXPAUENTITY@@PAD@Z:PROC ; get_keysite_entity_mfd_display_name
EXTRN	?get_player_task@@YGPAUENTITY@@PAU1@@Z:PROC	; get_player_task
EXTRN	?get_local_sector_entity@@YGPAUENTITY@@PAUVEC3D@@@Z:PROC ; get_local_sector_entity
EXTRN	?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z:PROC ; get_simple_session_weather_at_point
EXTRN	?get_task_estimated_route_duration@@YGMPAUENTITY@@@Z:PROC ; get_task_estimated_route_duration
EXTRN	?get_task_objective_mfd_display_string@@YGXPAUENTITY@@PAD@Z:PROC ; get_task_objective_mfd_display_string
EXTRN	?get_local_entity_first_waypoint@@YGPAUENTITY@@PAU1@@Z:PROC ; get_local_entity_first_waypoint
EXTRN	?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z:PROC ; get_local_entity_current_waypoint
EXTRN	?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z:PROC ; set_main_3d_params
EXTRN	?set_pilots_full_screen_params@@YGXH@Z:PROC	; set_pilots_full_screen_params
EXTRN	?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z:PROC	; draw_main_3d_scene
EXTRN	?get_target_display_name@@YGPBDPAUENTITY@@PADH@Z:PROC ; get_target_display_name
EXTRN	?get_range_finder@@YG?AW4rangefinding_system@@XZ:PROC ; get_range_finder
EXTRN	?draw_tsd_terrain_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MH@Z:PROC ; draw_tsd_terrain_map
EXTRN	?draw_tsd_contour_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MHH@Z:PROC ; draw_tsd_contour_map
EXTRN	?Initialise_TSD_render_terrain@@YGXXZ:PROC	; Initialise_TSD_render_terrain
EXTRN	?convert_linear_view_value@@YGMPAUEO_PARAMS_DYNAMIC_MOVE@@@Z:PROC ; convert_linear_view_value
EXTRN	?get_range_to_target@@YGMXZ:PROC		; get_range_to_target
EXTRN	?eo_is_locked@@YGHXZ:PROC			; eo_is_locked
EXTRN	?get_ka50_eo_relative_centred_viewpoint@@YGXPAUVIEWPOINT@@@Z:PROC ; get_ka50_eo_relative_centred_viewpoint
EXTRN	?get_digital_clock_values@@YGXMPAM00@Z:PROC	; get_digital_clock_values
EXTRN	?get_digital_clock_int_values@@YGXMPAH00@Z:PROC	; get_digital_clock_int_values
EXTRN	?get_untranslated_pilot_rank_short_name@@YGPBDH@Z:PROC ; get_untranslated_pilot_rank_short_name
EXTRN	?copy_export_mfd@@YGXPAUSCREEN@@0@Z:PROC	; copy_export_mfd
EXTRN	__chkstk:PROC
EXTRN	?system_delta_time@@3MA:DWORD			; system_delta_time
EXTRN	?random_number_seed@@3HA:DWORD			; random_number_seed
EXTRN	?application_video_width@@3HA:DWORD		; application_video_width
EXTRN	?d3d_can_render_to_texture@@3HA:DWORD		; d3d_can_render_to_texture
EXTRN	?sys_col_red@@3UREAL_COLOUR@@A:DWORD		; sys_col_red
EXTRN	?video_screen@@3PAUSCREEN@@A:DWORD		; video_screen
EXTRN	?command_line_dynamics_engine_startup@@3HA:DWORD ; command_line_dynamics_engine_startup
EXTRN	?command_line_high_res_mfd@@3HA:DWORD		; command_line_high_res_mfd
EXTRN	?command_line_tsd_enemy_colours@@3HA:DWORD	; command_line_tsd_enemy_colours
EXTRN	?command_line_colour_mfd@@3HA:DWORD		; command_line_colour_mfd
EXTRN	?command_line_export_mfd@@3HA:DWORD		; command_line_export_mfd
EXTRN	?null_entity_pointer_message@@3PBDB:DWORD	; null_entity_pointer_message
EXTRN	?formation_display_names@@3PAPBDA:BYTE		; formation_display_names
EXTRN	?task_status_names@@3PAPBDA:BYTE		; task_status_names
EXTRN	?global_options@@3UGLOBAL_OPTIONS_DATA@@A:BYTE	; global_options
EXTRN	?world_map@@3UWORLD_MAP_DATA@@A:BYTE		; world_map
EXTRN	?overload_invalid_list_type_message@@3PBDB:DWORD ; overload_invalid_list_type_message
EXTRN	?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_first_child
EXTRN	?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_parent
EXTRN	?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA:BYTE ; fn_get_local_entity_child_succ
EXTRN	?fn_get_local_entity_attitude_matrix_ptr@@3PAP6GPAY122MPAUENTITY@@@ZA:BYTE ; fn_get_local_entity_attitude_matrix_ptr
EXTRN	?overload_invalid_char_type_message@@3PBDB:DWORD ; overload_invalid_char_type_message
EXTRN	?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA:BYTE ; fn_get_local_entity_char_value
EXTRN	?draw_eo_3d_scene@@3HA:DWORD			; draw_eo_3d_scene
EXTRN	?overload_invalid_float_type_message@@3PBDB:DWORD ; overload_invalid_float_type_message
EXTRN	?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA:BYTE ; fn_get_local_entity_float_value
EXTRN	?overload_invalid_int_type_message@@3PBDB:DWORD	; overload_invalid_int_type_message
EXTRN	?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA:BYTE ; fn_get_local_entity_int_value
EXTRN	?overload_invalid_ptr_type_message@@3PBDB:DWORD	; overload_invalid_ptr_type_message
EXTRN	?fn_get_local_entity_ptr_value@@3PAY0BE@P6GPAXPAUENTITY@@W4PTR_TYPES@@@ZA:BYTE ; fn_get_local_entity_ptr_value
EXTRN	?overload_invalid_string_type_message@@3PBDB:DWORD ; overload_invalid_string_type_message
EXTRN	?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA:BYTE ; fn_get_local_entity_string
EXTRN	?overload_invalid_vec3d_type_message@@3PBDB:DWORD ; overload_invalid_vec3d_type_message
EXTRN	?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA:BYTE ; fn_get_local_entity_vec3d
EXTRN	?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA:BYTE ; fn_get_local_entity_vec3d_ptr
EXTRN	?entities@@3PAUENTITY@@A:DWORD			; entities
EXTRN	?weapon_database@@3PAUWEAPON_DATA@@A:BYTE	; weapon_database
EXTRN	?gunship_entity@@3PAUENTITY@@A:DWORD		; gunship_entity
EXTRN	?session_entity@@3PAUENTITY@@A:DWORD		; session_entity
EXTRN	?full_screen_width@@3MA:DWORD			; full_screen_width
EXTRN	?full_screen_height@@3MA:DWORD			; full_screen_height
EXTRN	?main_3d_env@@3PAUENV_3D@@A:DWORD		; main_3d_env
EXTRN	?main_vp@@3UVIEWPOINT@@A:BYTE			; main_vp
EXTRN	?view_mode@@3W4VIEW_MODES@@A:DWORD		; view_mode
EXTRN	?tsd_render_mode@@3W4TSD_RENDER_MODES@@A:DWORD	; tsd_render_mode
EXTRN	?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A:DWORD ; target_acquisition_system
EXTRN	?eo_low_light@@3HA:DWORD			; eo_low_light
EXTRN	?eo_ground_stabilised@@3HA:DWORD		; eo_ground_stabilised
EXTRN	?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A:DWORD ; eo_sensor
EXTRN	?eo_azimuth@@3MA:DWORD				; eo_azimuth
EXTRN	?eo_max_azimuth@@3MA:DWORD			; eo_max_azimuth
EXTRN	?eo_elevation@@3MA:DWORD			; eo_elevation
EXTRN	?eo_min_elevation@@3MA:DWORD			; eo_min_elevation
EXTRN	?eo_max_elevation@@3MA:DWORD			; eo_max_elevation
EXTRN	?eo_max_visual_range@@3MA:DWORD			; eo_max_visual_range
EXTRN	?eo_vp@@3UVIEWPOINT@@A:BYTE			; eo_vp
EXTRN	?display_mfd_layout_grid@@3HA:DWORD		; display_mfd_layout_grid
EXTRN	?large_eo_3d_texture_screen@@3PAUSCREEN@@A:DWORD ; large_eo_3d_texture_screen
EXTRN	?small_eo_3d_texture_screen@@3PAUSCREEN@@A:DWORD ; small_eo_3d_texture_screen
EXTRN	?large_display_target_symbol_selected_target@@3QBDB:BYTE ; large_display_target_symbol_selected_target
EXTRN	?large_display_target_symbol_selected_target_mask@@3QBDB:BYTE ; large_display_target_symbol_selected_target_mask
EXTRN	?small_display_target_symbol_selected_target@@3QBDB:BYTE ; small_display_target_symbol_selected_target
EXTRN	?small_display_target_symbol_selected_target_mask@@3QBDB:BYTE ; small_display_target_symbol_selected_target_mask
EXTRN	?large_display_target_symbols_los@@3PAPBDA:BYTE	; large_display_target_symbols_los
EXTRN	?large_display_target_symbols_los_mask@@3PAPBDA:BYTE ; large_display_target_symbols_los_mask
EXTRN	?large_display_target_symbols_no_los@@3PAPBDA:BYTE ; large_display_target_symbols_no_los
EXTRN	?large_display_target_symbols_no_los_mask@@3PAPBDA:BYTE ; large_display_target_symbols_no_los_mask
EXTRN	?small_display_target_symbols_los@@3PAPBDA:BYTE	; small_display_target_symbols_los
EXTRN	?small_display_target_symbols_los_mask@@3PAPBDA:BYTE ; small_display_target_symbols_los_mask
EXTRN	?small_display_target_symbols_no_los@@3PAPBDA:BYTE ; small_display_target_symbols_no_los
EXTRN	?small_display_target_symbols_no_los_mask@@3PAPBDA:BYTE ; small_display_target_symbols_no_los_mask
EXTRN	?rocket_salvo_size@@3HA:DWORD			; rocket_salvo_size
EXTRN	?gun_is_firing@@3HA:DWORD			; gun_is_firing
EXTRN	?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A:DWORD	; ka50_damage
EXTRN	?ka50_flir@@3UEO_PARAMS_DYNAMIC_MOVE@@A:BYTE	; ka50_flir
EXTRN	?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A:DWORD ; virtual_cockpit_inst3d
EXTRN	?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A:DWORD ; current_flight_dynamics
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?mfd_colours@@3PAUREAL_COLOUR@@A DD 014H DUP (?)	; mfd_colours
?clear_mfd_colour@@3UREAL_COLOUR@@A DD 01H DUP (?)	; clear_mfd_colour
?text_display_colours@@3PAUREAL_COLOUR@@A DD 02H DUP (?) ; text_display_colours
?mfd_env@@3PAUENV_2D@@A DD 01H DUP (?)			; mfd_env
?int_mfd_viewport_size@@3HA DD 01H DUP (?)		; int_mfd_viewport_size
?mfd_viewport_size@@3MA DD 01H DUP (?)			; mfd_viewport_size
?mfd_viewport_x_org@@3MA DD 01H DUP (?)			; mfd_viewport_x_org
?mfd_viewport_y_org@@3MA DD 01H DUP (?)			; mfd_viewport_y_org
?mfd_viewport_x_min@@3MA DD 01H DUP (?)			; mfd_viewport_x_min
?mfd_viewport_y_min@@3MA DD 01H DUP (?)			; mfd_viewport_y_min
?mfd_viewport_x_max@@3MA DD 01H DUP (?)			; mfd_viewport_x_max
?mfd_viewport_y_max@@3MA DD 01H DUP (?)			; mfd_viewport_y_max
?mfd_screen_x_min@@3MA DD 01H DUP (?)			; mfd_screen_x_min
?mfd_screen_y_min@@3MA DD 01H DUP (?)			; mfd_screen_y_min
?mfd_screen_x_max@@3MA DD 01H DUP (?)			; mfd_screen_x_max
?mfd_screen_y_max@@3MA DD 01H DUP (?)			; mfd_screen_y_max
?mfd_screen_width@@3MA DD 01H DUP (?)			; mfd_screen_width
?mfd_screen_height@@3MA DD 01H DUP (?)			; mfd_screen_height
?mfd_screen_x_scale@@3MA DD 01H DUP (?)			; mfd_screen_x_scale
?mfd_screen_y_scale@@3MA DD 01H DUP (?)			; mfd_screen_y_scale
?draw_large_mfd@@3HA DD 01H DUP (?)			; draw_large_mfd
?shkval_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; shkval_mfd_texture_screen
?abris_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; abris_mfd_texture_screen
?ekran_display_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; ekran_display_texture_screen
?large_shkval_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; large_shkval_mfd_texture_screen
?large_abris_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; large_abris_mfd_texture_screen
?large_ekran_display_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; large_ekran_display_texture_screen
?small_shkval_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; small_shkval_mfd_texture_screen
?small_abris_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; small_abris_mfd_texture_screen
?small_ekran_display_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?) ; small_ekran_display_texture_screen
?eo_3d_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; eo_3d_texture_screen
?full_mfd_texture_screen@@3PAUSCREEN@@A DD 01H DUP (?)	; full_mfd_texture_screen
?text_display_line1@@3PADA DB 0bH DUP (?)		; text_display_line1
	ALIGN	4

?text_display_line2@@3PADA DB 0bH DUP (?)		; text_display_line2
	ALIGN	4

?text_display_line3@@3PADA DB 0bH DUP (?)		; text_display_line3
	ALIGN	4

?tsd_ase_range@@3MA DD 01H DUP (?)			; tsd_ase_range
?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A DD 01H DUP (?) ; tsd_declutter_level
?tsd_threat_line_flash_timer@@3MA DD 01H DUP (?)	; tsd_threat_line_flash_timer
?tsd_draw_threat_line_status@@3HA DD 01H DUP (?)	; tsd_draw_threat_line_status
?ase_threat_line_flash_timer@@3MA DD 01H DUP (?)	; ase_threat_line_flash_timer
?ase_draw_threat_line_status@@3HA DD 01H DUP (?)	; ase_draw_threat_line_status
?main_horizon_mask@@3PADA DD 01H DUP (?)		; main_horizon_mask
?num_weapon_line_points@@3HA DD 01H DUP (?)		; num_weapon_line_points
?weapon_line_points@@3PAUVEC3D@@A DD 01H DUP (?)	; weapon_line_points
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c2180000
CONST	SEGMENT
__real@c2180000 DD 0c2180000r			; -38
CONST	ENDS
;	COMDAT __real@c1c80000
CONST	SEGMENT
__real@c1c80000 DD 0c1c80000r			; -25
CONST	ENDS
;	COMDAT __real@c1980000
CONST	SEGMENT
__real@c1980000 DD 0c1980000r			; -19
CONST	ENDS
;	COMDAT __real@c1400000
CONST	SEGMENT
__real@c1400000 DD 0c1400000r			; -12
CONST	ENDS
;	COMDAT __real@c1200000
CONST	SEGMENT
__real@c1200000 DD 0c1200000r			; -10
CONST	ENDS
;	COMDAT __real@c1000000
CONST	SEGMENT
__real@c1000000 DD 0c1000000r			; -8
CONST	ENDS
;	COMDAT __real@c0c00000
CONST	SEGMENT
__real@c0c00000 DD 0c0c00000r			; -6
CONST	ENDS
;	COMDAT __real@c0a00000
CONST	SEGMENT
__real@c0a00000 DD 0c0a00000r			; -5
CONST	ENDS
;	COMDAT __real@c0800000
CONST	SEGMENT
__real@c0800000 DD 0c0800000r			; -4
CONST	ENDS
;	COMDAT __real@c0400000
CONST	SEGMENT
__real@c0400000 DD 0c0400000r			; -3
CONST	ENDS
;	COMDAT __real@c024000000000000
CONST	SEGMENT
__real@c024000000000000 DQ 0c024000000000000r	; -10
CONST	ENDS
;	COMDAT __real@c00921fb51000000
CONST	SEGMENT
__real@c00921fb51000000 DQ 0c00921fb51000000r	; -3.14159
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
CONST	ENDS
;	COMDAT __real@bfd6571848000000
CONST	SEGMENT
__real@bfd6571848000000 DQ 0bfd6571848000000r	; -0.349066
CONST	ENDS
;	COMDAT __real@bfd3333333333333
CONST	SEGMENT
__real@bfd3333333333333 DQ 0bfd3333333333333r	; -0.3
CONST	ENDS
;	COMDAT __real@bfc90fdb
CONST	SEGMENT
__real@bfc90fdb DD 0bfc90fdbr			; -1.5708
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf733333
CONST	SEGMENT
__real@bf733333 DD 0bf733333r			; -0.95
CONST	ENDS
;	COMDAT __real@bf6e147b
CONST	SEGMENT
__real@bf6e147b DD 0bf6e147br			; -0.93
CONST	ENDS
;	COMDAT __real@bf6b851f
CONST	SEGMENT
__real@bf6b851f DD 0bf6b851fr			; -0.92
CONST	ENDS
;	COMDAT __real@bf68f5c3
CONST	SEGMENT
__real@bf68f5c3 DD 0bf68f5c3r			; -0.91
CONST	ENDS
;	COMDAT __real@bf666666
CONST	SEGMENT
__real@bf666666 DD 0bf666666r			; -0.9
CONST	ENDS
;	COMDAT __real@bf63d70a
CONST	SEGMENT
__real@bf63d70a DD 0bf63d70ar			; -0.89
CONST	ENDS
;	COMDAT __real@bf6147ae
CONST	SEGMENT
__real@bf6147ae DD 0bf6147aer			; -0.88
CONST	ENDS
;	COMDAT __real@bf5eb852
CONST	SEGMENT
__real@bf5eb852 DD 0bf5eb852r			; -0.87
CONST	ENDS
;	COMDAT __real@bf59999a
CONST	SEGMENT
__real@bf59999a DD 0bf59999ar			; -0.85
CONST	ENDS
;	COMDAT __real@bf566666
CONST	SEGMENT
__real@bf566666 DD 0bf566666r			; -0.8375
CONST	ENDS
;	COMDAT __real@bf4ccccd
CONST	SEGMENT
__real@bf4ccccd DD 0bf4ccccdr			; -0.8
CONST	ENDS
;	COMDAT __real@bf48f5c3
CONST	SEGMENT
__real@bf48f5c3 DD 0bf48f5c3r			; -0.785
CONST	ENDS
;	COMDAT __real@bf400000
CONST	SEGMENT
__real@bf400000 DD 0bf400000r			; -0.75
CONST	ENDS
;	COMDAT __real@bf3eb852
CONST	SEGMENT
__real@bf3eb852 DD 0bf3eb852r			; -0.745
CONST	ENDS
;	COMDAT __real@bf3ae147
CONST	SEGMENT
__real@bf3ae147 DD 0bf3ae147r			; -0.73
CONST	ENDS
;	COMDAT __real@bf333333
CONST	SEGMENT
__real@bf333333 DD 0bf333333r			; -0.7
CONST	ENDS
;	COMDAT __real@bf31eb85
CONST	SEGMENT
__real@bf31eb85 DD 0bf31eb85r			; -0.695
CONST	ENDS
;	COMDAT __real@bf2ccccd
CONST	SEGMENT
__real@bf2ccccd DD 0bf2ccccdr			; -0.675
CONST	ENDS
;	COMDAT __real@bf266666
CONST	SEGMENT
__real@bf266666 DD 0bf266666r			; -0.65
CONST	ENDS
;	COMDAT __real@bf251eb8
CONST	SEGMENT
__real@bf251eb8 DD 0bf251eb8r			; -0.645
CONST	ENDS
;	COMDAT __real@bf2147ae
CONST	SEGMENT
__real@bf2147ae DD 0bf2147aer			; -0.63
CONST	ENDS
;	COMDAT __real@bf19999a
CONST	SEGMENT
__real@bf19999a DD 0bf19999ar			; -0.6
CONST	ENDS
;	COMDAT __real@bf11eb85
CONST	SEGMENT
__real@bf11eb85 DD 0bf11eb85r			; -0.57
CONST	ENDS
;	COMDAT __real@bf051eb8
CONST	SEGMENT
__real@bf051eb8 DD 0bf051eb8r			; -0.52
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@bef0a3d7
CONST	SEGMENT
__real@bef0a3d7 DD 0bef0a3d7r			; -0.47
CONST	ENDS
;	COMDAT __real@bee66666
CONST	SEGMENT
__real@bee66666 DD 0bee66666r			; -0.45
CONST	ENDS
;	COMDAT __real@bed9999a
CONST	SEGMENT
__real@bed9999a DD 0bed9999ar			; -0.425
CONST	ENDS
;	COMDAT __real@bed70a3d
CONST	SEGMENT
__real@bed70a3d DD 0bed70a3dr			; -0.42
CONST	ENDS
;	COMDAT __real@becccccd
CONST	SEGMENT
__real@becccccd DD 0becccccdr			; -0.4
CONST	ENDS
;	COMDAT __real@be99999a
CONST	SEGMENT
__real@be99999a DD 0be99999ar			; -0.3
CONST	ENDS
;	COMDAT __real@be933333
CONST	SEGMENT
__real@be933333 DD 0be933333r			; -0.2875
CONST	ENDS
;	COMDAT __real@be8ccccd
CONST	SEGMENT
__real@be8ccccd DD 0be8ccccdr			; -0.275
CONST	ENDS
;	COMDAT __real@be8a3d71
CONST	SEGMENT
__real@be8a3d71 DD 0be8a3d71r			; -0.27
CONST	ENDS
;	COMDAT __real@be87ae14
CONST	SEGMENT
__real@be87ae14 DD 0be87ae14r			; -0.265
CONST	ENDS
;	COMDAT __real@be851eb8
CONST	SEGMENT
__real@be851eb8 DD 0be851eb8r			; -0.26
CONST	ENDS
;	COMDAT __real@be800000
CONST	SEGMENT
__real@be800000 DD 0be800000r			; -0.25
CONST	ENDS
;	COMDAT __real@be666666
CONST	SEGMENT
__real@be666666 DD 0be666666r			; -0.225
CONST	ENDS
;	COMDAT __real@be6147ae
CONST	SEGMENT
__real@be6147ae DD 0be6147aer			; -0.22
CONST	ENDS
;	COMDAT __real@be59999a
CONST	SEGMENT
__real@be59999a DD 0be59999ar			; -0.2125
CONST	ENDS
;	COMDAT __real@be4ccccd
CONST	SEGMENT
__real@be4ccccd DD 0be4ccccdr			; -0.2
CONST	ENDS
;	COMDAT __real@be333333
CONST	SEGMENT
__real@be333333 DD 0be333333r			; -0.175
CONST	ENDS
;	COMDAT __real@be2e147b
CONST	SEGMENT
__real@be2e147b DD 0be2e147br			; -0.17
CONST	ENDS
;	COMDAT __real@be28f5c3
CONST	SEGMENT
__real@be28f5c3 DD 0be28f5c3r			; -0.165
CONST	ENDS
;	COMDAT __real@be23d70a
CONST	SEGMENT
__real@be23d70a DD 0be23d70ar			; -0.16
CONST	ENDS
;	COMDAT __real@be19999a
CONST	SEGMENT
__real@be19999a DD 0be19999ar			; -0.15
CONST	ENDS
;	COMDAT __real@be0f5c29
CONST	SEGMENT
__real@be0f5c29 DD 0be0f5c29r			; -0.14
CONST	ENDS
;	COMDAT __real@be0ccccd
CONST	SEGMENT
__real@be0ccccd DD 0be0ccccdr			; -0.1375
CONST	ENDS
;	COMDAT __real@be000000
CONST	SEGMENT
__real@be000000 DD 0be000000r			; -0.125
CONST	ENDS
;	COMDAT __real@bdf5c28f
CONST	SEGMENT
__real@bdf5c28f DD 0bdf5c28fr			; -0.12
CONST	ENDS
;	COMDAT __real@bdcccccd
CONST	SEGMENT
__real@bdcccccd DD 0bdcccccdr			; -0.1
CONST	ENDS
;	COMDAT __real@bd99999a
CONST	SEGMENT
__real@bd99999a DD 0bd99999ar			; -0.075
CONST	ENDS
;	COMDAT __real@bd4ccccd
CONST	SEGMENT
__real@bd4ccccd DD 0bd4ccccdr			; -0.05
CONST	ENDS
;	COMDAT __real@bd23d70a
CONST	SEGMENT
__real@bd23d70a DD 0bd23d70ar			; -0.04
CONST	ENDS
;	COMDAT __real@bccccccd
CONST	SEGMENT
__real@bccccccd DD 0bccccccdr			; -0.025
CONST	ENDS
;	COMDAT __real@bca3d70a
CONST	SEGMENT
__real@bca3d70a DD 0bca3d70ar			; -0.02
CONST	ENDS
;	COMDAT __real@80000000
CONST	SEGMENT
__real@80000000 DD 080000000r			; -0
CONST	ENDS
;	COMDAT __real@49742400
CONST	SEGMENT
__real@49742400 DD 049742400r			; 1e+06
CONST	ENDS
;	COMDAT __real@46c35000
CONST	SEGMENT
__real@46c35000 DD 046c35000r			; 25000
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@459c4000
CONST	SEGMENT
__real@459c4000 DD 0459c4000r			; 5000
CONST	ENDS
;	COMDAT __real@44fa0000
CONST	SEGMENT
__real@44fa0000 DD 044fa0000r			; 2000
CONST	ENDS
;	COMDAT __real@44480000
CONST	SEGMENT
__real@44480000 DD 044480000r			; 800
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@437fffbe
CONST	SEGMENT
__real@437fffbe DD 0437fffber			; 255.999
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42652ee0
CONST	SEGMENT
__real@42652ee0 DD 042652ee0r			; 57.2958
CONST	ENDS
;	COMDAT __real@421c0000
CONST	SEGMENT
__real@421c0000 DD 0421c0000r			; 39
CONST	ENDS
;	COMDAT __real@41e00000
CONST	SEGMENT
__real@41e00000 DD 041e00000r			; 28
CONST	ENDS
;	COMDAT __real@41c80000
CONST	SEGMENT
__real@41c80000 DD 041c80000r			; 25
CONST	ENDS
;	COMDAT __real@41980000
CONST	SEGMENT
__real@41980000 DD 041980000r			; 19
CONST	ENDS
;	COMDAT __real@41900000
CONST	SEGMENT
__real@41900000 DD 041900000r			; 18
CONST	ENDS
;	COMDAT __real@41400000
CONST	SEGMENT
__real@41400000 DD 041400000r			; 12
CONST	ENDS
;	COMDAT __real@41300000
CONST	SEGMENT
__real@41300000 DD 041300000r			; 11
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@41100000
CONST	SEGMENT
__real@41100000 DD 041100000r			; 9
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40f86a0000000000
CONST	SEGMENT
__real@40f86a0000000000 DQ 040f86a0000000000r	; 100000
CONST	ENDS
;	COMDAT __real@40c3878000000000
CONST	SEGMENT
__real@40c3878000000000 DQ 040c3878000000000r	; 9999
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@4084000000000000
CONST	SEGMENT
__real@4084000000000000 DQ 04084000000000000r	; 640
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@407ec00000000000
CONST	SEGMENT
__real@407ec00000000000 DQ 0407ec00000000000r	; 492
CONST	ENDS
;	COMDAT __real@407e000000000000
CONST	SEGMENT
__real@407e000000000000 DQ 0407e000000000000r	; 480
CONST	ENDS
;	COMDAT __real@4079c00000000000
CONST	SEGMENT
__real@4079c00000000000 DQ 04079c00000000000r	; 412
CONST	ENDS
;	COMDAT __real@4070000000000000
CONST	SEGMENT
__real@4070000000000000 DQ 04070000000000000r	; 256
CONST	ENDS
;	COMDAT __real@406f400000000000
CONST	SEGMENT
__real@406f400000000000 DQ 0406f400000000000r	; 250
CONST	ENDS
;	COMDAT __real@40666666
CONST	SEGMENT
__real@40666666 DD 040666666r			; 3.6
CONST	ENDS
;	COMDAT __real@4062a00000000000
CONST	SEGMENT
__real@4062a00000000000 DQ 04062a00000000000r	; 149
CONST	ENDS
;	COMDAT __real@405fc00000000000
CONST	SEGMENT
__real@405fc00000000000 DQ 0405fc00000000000r	; 127
CONST	ENDS
;	COMDAT __real@405f400000000000
CONST	SEGMENT
__real@405f400000000000 DQ 0405f400000000000r	; 125
CONST	ENDS
;	COMDAT __real@405e000000000000
CONST	SEGMENT
__real@405e000000000000 DQ 0405e000000000000r	; 120
CONST	ENDS
;	COMDAT __real@405b800000000000
CONST	SEGMENT
__real@405b800000000000 DQ 0405b800000000000r	; 110
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@4051400000000000
CONST	SEGMENT
__real@4051400000000000 DQ 04051400000000000r	; 69
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@4044000000000000
CONST	SEGMENT
__real@4044000000000000 DQ 04044000000000000r	; 40
CONST	ENDS
;	COMDAT __real@402a000000000000
CONST	SEGMENT
__real@402a000000000000 DQ 0402a000000000000r	; 13
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@4020000000000000
CONST	SEGMENT
__real@4020000000000000 DQ 04020000000000000r	; 8
CONST	ENDS
;	COMDAT __real@401c463abb200000
CONST	SEGMENT
__real@401c463abb200000 DQ 0401c463abb200000r	; 7.06858
CONST	ENDS
;	COMDAT __real@401c000000000000
CONST	SEGMENT
__real@401c000000000000 DQ 0401c000000000000r	; 7
CONST	ENDS
;	COMDAT __real@401921fb51000000
CONST	SEGMENT
__real@401921fb51000000 DQ 0401921fb51000000r	; 6.28319
CONST	ENDS
;	COMDAT __real@4016eb167e7d81e3
CONST	SEGMENT
__real@4016eb167e7d81e3 DQ 04016eb167e7d81e3r	; 5.72958
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@400921fb51000000
CONST	SEGMENT
__real@400921fb51000000 DQ 0400921fb51000000r	; 3.14159
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff8000000000000
CONST	SEGMENT
__real@3ff8000000000000 DQ 03ff8000000000000r	; 1.5
CONST	ENDS
;	COMDAT __real@3ff5d3d193333333
CONST	SEGMENT
__real@3ff5d3d193333333 DQ 03ff5d3d193333333r	; 1.36421
CONST	ENDS
;	COMDAT __real@3ff3333340000000
CONST	SEGMENT
__real@3ff3333340000000 DQ 03ff3333340000000r	; 1.2
CONST	ENDS
;	COMDAT __real@3ff0c09b332ccccd
CONST	SEGMENT
__real@3ff0c09b332ccccd DQ 03ff0c09b332ccccdr	; 1.04702
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3feff7ced916872b
CONST	SEGMENT
__real@3feff7ced916872b DQ 03feff7ced916872br	; 0.999
CONST	ENDS
;	COMDAT __real@3fe999999999999a
CONST	SEGMENT
__real@3fe999999999999a DQ 03fe999999999999ar	; 0.8
CONST	ENDS
;	COMDAT __real@3fe8000000000000
CONST	SEGMENT
__real@3fe8000000000000 DQ 03fe8000000000000r	; 0.75
CONST	ENDS
;	COMDAT __real@3fe3333333333333
CONST	SEGMENT
__real@3fe3333333333333 DQ 03fe3333333333333r	; 0.6
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd999999999999a
CONST	SEGMENT
__real@3fd999999999999a DQ 03fd999999999999ar	; 0.4
CONST	ENDS
;	COMDAT __real@3fd6571848000000
CONST	SEGMENT
__real@3fd6571848000000 DQ 03fd6571848000000r	; 0.349066
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fc999999999999a
CONST	SEGMENT
__real@3fc999999999999a DQ 03fc999999999999ar	; 0.2
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3fc6571848000000
CONST	SEGMENT
__real@3fc6571848000000 DQ 03fc6571848000000r	; 0.174533
CONST	ENDS
;	COMDAT __real@3fc3333333333333
CONST	SEGMENT
__real@3fc3333333333333 DQ 03fc3333333333333r	; 0.15
CONST	ENDS
;	COMDAT __real@3fc0000000000000
CONST	SEGMENT
__real@3fc0000000000000 DQ 03fc0000000000000r	; 0.125
CONST	ENDS
;	COMDAT __real@3fbc71c720000000
CONST	SEGMENT
__real@3fbc71c720000000 DQ 03fbc71c720000000r	; 0.111111
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3fb3333333333333
CONST	SEGMENT
__real@3fb3333333333333 DQ 03fb3333333333333r	; 0.075
CONST	ENDS
;	COMDAT __real@3fa999999999999a
CONST	SEGMENT
__real@3fa999999999999a DQ 03fa999999999999ar	; 0.05
CONST	ENDS
;	COMDAT __real@3f9999999999999a
CONST	SEGMENT
__real@3f9999999999999a DQ 03f9999999999999ar	; 0.025
CONST	ENDS
;	COMDAT __real@3f847ae147ae147b
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7fbe77
CONST	SEGMENT
__real@3f7fbe77 DD 03f7fbe77r			; 0.999
CONST	ENDS
;	COMDAT __real@3f79999a
CONST	SEGMENT
__real@3f79999a DD 03f79999ar			; 0.975
CONST	ENDS
;	COMDAT __real@3f733333
CONST	SEGMENT
__real@3f733333 DD 03f733333r			; 0.95
CONST	ENDS
;	COMDAT __real@3f6e147b
CONST	SEGMENT
__real@3f6e147b DD 03f6e147br			; 0.93
CONST	ENDS
;	COMDAT __real@3f6b851f
CONST	SEGMENT
__real@3f6b851f DD 03f6b851fr			; 0.92
CONST	ENDS
;	COMDAT __real@3f68f5c3
CONST	SEGMENT
__real@3f68f5c3 DD 03f68f5c3r			; 0.91
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f5eb852
CONST	SEGMENT
__real@3f5eb852 DD 03f5eb852r			; 0.87
CONST	ENDS
;	COMDAT __real@3f5c987100000000
CONST	SEGMENT
__real@3f5c987100000000 DQ 03f5c987100000000r	; 0.00174533
CONST	ENDS
;	COMDAT __real@3f5999999999999a
CONST	SEGMENT
__real@3f5999999999999a DQ 03f5999999999999ar	; 0.0015625
CONST	ENDS
;	COMDAT __real@3f547ae1
CONST	SEGMENT
__real@3f547ae1 DD 03f547ae1r			; 0.83
CONST	ENDS
;	COMDAT __real@3f51eb85
CONST	SEGMENT
__real@3f51eb85 DD 03f51eb85r			; 0.82
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3f4f5c29
CONST	SEGMENT
__real@3f4f5c29 DD 03f4f5c29r			; 0.81
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f4a3d71
CONST	SEGMENT
__real@3f4a3d71 DD 03f4a3d71r			; 0.79
CONST	ENDS
;	COMDAT __real@3f47ae14
CONST	SEGMENT
__real@3f47ae14 DD 03f47ae14r			; 0.78
CONST	ENDS
;	COMDAT __real@3f451eb8
CONST	SEGMENT
__real@3f451eb8 DD 03f451eb8r			; 0.77
CONST	ENDS
;	COMDAT __real@3f3eb852
CONST	SEGMENT
__real@3f3eb852 DD 03f3eb852r			; 0.745
CONST	ENDS
;	COMDAT __real@3f3ae147
CONST	SEGMENT
__real@3f3ae147 DD 03f3ae147r			; 0.73
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f31eb85
CONST	SEGMENT
__real@3f31eb85 DD 03f31eb85r			; 0.695
CONST	ENDS
;	COMDAT __real@3f266666
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
CONST	ENDS
;	COMDAT __real@3f251eb8
CONST	SEGMENT
__real@3f251eb8 DD 03f251eb8r			; 0.645
CONST	ENDS
;	COMDAT __real@3f1a36e2eb1c432d
CONST	SEGMENT
__real@3f1a36e2eb1c432d DQ 03f1a36e2eb1c432dr	; 0.0001
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f170a3d
CONST	SEGMENT
__real@3f170a3d DD 03f170a3dr			; 0.59
CONST	ENDS
;	COMDAT __real@3f133333
CONST	SEGMENT
__real@3f133333 DD 03f133333r			; 0.575
CONST	ENDS
;	COMDAT __real@3f11eb85
CONST	SEGMENT
__real@3f11eb85 DD 03f11eb85r			; 0.57
CONST	ENDS
;	COMDAT __real@3f10000000000000
CONST	SEGMENT
__real@3f10000000000000 DQ 03f10000000000000r	; 6.10352e-05
CONST	ENDS
;	COMDAT __real@3f0ccccd
CONST	SEGMENT
__real@3f0ccccd DD 03f0ccccdr			; 0.55
CONST	ENDS
;	COMDAT __real@3f051eb8
CONST	SEGMENT
__real@3f051eb8 DD 03f051eb8r			; 0.52
CONST	ENDS
;	COMDAT __real@3f00002000400080
CONST	SEGMENT
__real@3f00002000400080 DQ 03f00002000400080r	; 3.05185e-05
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3effbe77
CONST	SEGMENT
__real@3effbe77 DD 03effbe77r			; 0.4995
CONST	ENDS
;	COMDAT __real@3ef0a3d7
CONST	SEGMENT
__real@3ef0a3d7 DD 03ef0a3d7r			; 0.47
CONST	ENDS
;	COMDAT __real@3ee66666
CONST	SEGMENT
__real@3ee66666 DD 03ee66666r			; 0.45
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e933333
CONST	SEGMENT
__real@3e933333 DD 03e933333r			; 0.2875
CONST	ENDS
;	COMDAT __real@3e91eb85
CONST	SEGMENT
__real@3e91eb85 DD 03e91eb85r			; 0.285
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e733333
CONST	SEGMENT
__real@3e733333 DD 03e733333r			; 0.2375
CONST	ENDS
;	COMDAT __real@3e6e978d
CONST	SEGMENT
__real@3e6e978d DD 03e6e978dr			; 0.233
CONST	ENDS
;	COMDAT __real@3e6147ae
CONST	SEGMENT
__real@3e6147ae DD 03e6147aer			; 0.22
CONST	ENDS
;	COMDAT __real@3e59999a
CONST	SEGMENT
__real@3e59999a DD 03e59999ar			; 0.2125
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e400000
CONST	SEGMENT
__real@3e400000 DD 03e400000r			; 0.1875
CONST	ENDS
;	COMDAT __real@3e3d70a4
CONST	SEGMENT
__real@3e3d70a4 DD 03e3d70a4r			; 0.185
CONST	ENDS
;	COMDAT __real@3e333333
CONST	SEGMENT
__real@3e333333 DD 03e333333r			; 0.175
CONST	ENDS
;	COMDAT __real@3e32b8c2
CONST	SEGMENT
__real@3e32b8c2 DD 03e32b8c2r			; 0.174533
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
CONST	ENDS
;	COMDAT __real@3e0ccccd
CONST	SEGMENT
__real@3e0ccccd DD 03e0ccccdr			; 0.1375
CONST	ENDS
;	COMDAT __real@3de38e39
CONST	SEGMENT
__real@3de38e39 DD 03de38e39r			; 0.111111
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3db851ec
CONST	SEGMENT
__real@3db851ec DD 03db851ecr			; 0.09
CONST	ENDS
;	COMDAT __real@3da3d70a
CONST	SEGMENT
__real@3da3d70a DD 03da3d70ar			; 0.08
CONST	ENDS
;	COMDAT __real@3d23d70a
CONST	SEGMENT
__real@3d23d70a DD 03d23d70ar			; 0.04
CONST	ENDS
;	COMDAT __real@3d0f5c29
CONST	SEGMENT
__real@3d0f5c29 DD 03d0f5c29r			; 0.035
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??toggle_ka50_mfd_on_off@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??toggle_ka50_mfd_on_off@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA DD 02033H ; `toggle_ka50_mfd_on_off'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??select_previous_ka50_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??select_previous_ka50_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA DD 02020H ; `select_previous_ka50_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??select_next_ka50_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??select_next_ka50_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA DD 0200dH ; `select_next_ka50_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BP@EBNLNNAN@Previous?5Ka?950?5MFD?5mode?5for?5?$CFi@
CONST	SEGMENT
??_C@_0BP@EBNLNNAN@Previous?5Ka?950?5MFD?5mode?5for?5?$CFi@ DB 'Previous '
	DB	'Ka-50 MFD mode for %i', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_previous_mfd_mode@@YG?AW4KA50_MFD_MODES@@W42@W4KA50_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_previous_mfd_mode@@YG?AW4KA50_MFD_MODES@@W42@W4KA50_MFD_LOCATIONS@@@Z@4JA DD 01fa9H ; `get_previous_mfd_mode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BL@JOJLEIFO@Next?5Ka?950?5MFD?5mode?5for?5?$CFi@
CONST	SEGMENT
??_C@_0BL@JOJLEIFO@Next?5Ka?950?5MFD?5mode?5for?5?$CFi@ DB 'Next Ka-50 MF'
	DB	'D mode for %i', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_next_mfd_mode@@YG?AW4KA50_MFD_MODES@@W42@W4KA50_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_next_mfd_mode@@YG?AW4KA50_MFD_MODES@@W42@W4KA50_MFD_LOCATIONS@@@Z@4JA DD 01f45H ; `get_next_mfd_mode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_07DCHAPOBD@?$CFs?5?$DN?5?$CFs@
CONST	SEGMENT
??_C@_07DCHAPOBD@?$CFs?5?$DN?5?$CFs@ DB '%s = %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@CDPALFHI@ka50_mfd_mode_valid?5?$CImfd_mode?$CJ@
CONST	SEGMENT
??_C@_0BP@CDPALFHI@ka50_mfd_mode_valid?5?$CImfd_mode?$CJ@ DB 'ka50_mfd_mo'
	DB	'de_valid (mfd_mode)', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??select_ka50_mfd_mode@@YGXW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??select_ka50_mfd_mode@@YGXW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z@4JA DD 01f24H ; `select_ka50_mfd_mode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_mfd_damage@@YGHW4KA50_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_mfd_damage@@YGHW4KA50_MFD_LOCATIONS@@@Z@4JA DD 01f01H ; `get_mfd_damage'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??get_default_mfd_mode@@YG?AW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_default_mfd_mode@@YG?AW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z@4JA DD 01edeH ; `get_default_mfd_mode'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@ DB 'Invalid EO senso'
	DB	'r = %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LNMELKLJ@ka50_mfd_mode_valid?5?$CImode?$CJ@
CONST	SEGMENT
??_C@_0BL@LNMELKLJ@ka50_mfd_mode_valid?5?$CImode?$CJ@ DB 'ka50_mfd_mode_v'
	DB	'alid (mode)', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_overlaid_mfd@@YGXPAUSCREEN@@W4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_overlaid_mfd@@YGXPAUSCREEN@@W4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z@4JA DD 01c65H ; `draw_overlaid_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BH@KFJLEDAI@Invalid?5view?5mode?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BH@KFJLEDAI@Invalid?5view?5mode?5?$DN?5?$CFd@ DB 'Invalid view mod'
	DB	'e = %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02KCGCJFNE@s3@
CONST	SEGMENT
??_C@_02KCGCJFNE@s3@ DB 's3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LLHJKEJF@s2@
CONST	SEGMENT
??_C@_02LLHJKEJF@s2@ DB 's2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JAFEPHFG@s1@
CONST	SEGMENT
??_C@_02JAFEPHFG@s1@ DB 's1', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??set_ka50_text_display_text@@YGXPAD00@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??set_ka50_text_display_text@@YGXPAD00@Z@4JA DD 01b09H ; `set_ka50_text_display_text'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_ka50_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_ka50_mfd@@YGXXZ@4JA DD 01a39H	; `draw_ka50_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CC@DECEGKIO@?$CInum_weapon_line_points?5?$CG?51?$CJ?5?$DN?$DN@
CONST	SEGMENT
??_C@_0CC@DECEGKIO@?$CInum_weapon_line_points?5?$CG?51?$CJ?5?$DN?$DN@ DB '('
	DB	'num_weapon_line_points & 1) == 0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@ICCLDILN@num_weapon_line_points?5?$DO?50@
CONST	SEGMENT
??_C@_0BL@ICCLDILN@num_weapon_line_points?5?$DO?50@ DB 'num_weapon_line_p'
	DB	'oints > 0', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??initialise_ka50_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??initialise_ka50_mfd@@YGXXZ@4JA DD 0199cH ; `initialise_ka50_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0M@CPFKEDIA@text_screen@
CONST	SEGMENT
??_C@_0M@CPFKEDIA@text_screen@ DB 'text_screen', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_text_display@@YGXPAUSCREEN@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_text_display@@YGXPAUSCREEN@@@Z@4JA DD 01925H ; `draw_text_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BL@EJABPDDO@Invalid?5main?5MFD?5mode?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_0BL@EJABPDDO@Invalid?5main?5MFD?5mode?5?$DN?5?$CFd@ DB 'Invalid mai'
	DB	'n MFD mode = %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@NMFMNCJL@ka50_mfd_location_valid?5?$CIlocati@
CONST	SEGMENT
??_C@_0CD@NMFMNCJL@ka50_mfd_location_valid?5?$CIlocati@ DB 'ka50_mfd_loca'
	DB	'tion_valid (location)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IMMOJIFF@ka50_mfd_mode_valid?5?$CI?$CKmode?$CJ@
CONST	SEGMENT
??_C@_0BM@IMMOJIFF@ka50_mfd_mode_valid?5?$CI?$CKmode?$CJ@ DB 'ka50_mfd_mo'
	DB	'de_valid (*mode)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DHCAJMOH@mfd_screen@
CONST	SEGMENT
??_C@_0L@DHCAJMOH@mfd_screen@ DB 'mfd_screen', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_mfd@@YGXPAUSCREEN@@PAW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_mfd@@YGXPAUSCREEN@@PAW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z@4JA DD 018aaH ; `draw_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CL@NLIKEJAC@TIME?5?5?3MT?$DN?$CF02d?3?$CF02d?3?$CF02d?5MD?$DN?$CF02@
CONST	SEGMENT
??_C@_0CL@NLIKEJAC@TIME?5?5?3MT?$DN?$CF02d?3?$CF02d?3?$CF02d?5MD?$DN?$CF02@ DB 'T'
	DB	'IME  :MT=%02d:%02d:%02d MD=%02d:%02d:%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MIBJHEEL@COUNT?5?3Kills?$DN?$CFd?5Losses?$DN?$CFd@
CONST	SEGMENT
??_C@_0BK@MIBJHEEL@COUNT?5?3Kills?$DN?$CFd?5Losses?$DN?$CFd@ DB 'COUNT :K'
	DB	'ills=%d Losses=%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09HDLDOKLK@END?5?5?5?3?$CFs@
CONST	SEGMENT
??_C@_09HDLDOKLK@END?5?5?5?3?$CFs@ DB 'END   :%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MDEJFDEL@START?5?3?$CFs@
CONST	SEGMENT
??_C@_09MDEJFDEL@START?5?3?$CFs@ DB 'START :%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NFLHCPML@STATUS?3?$CFs@
CONST	SEGMENT
??_C@_09NFLHCPML@STATUS?3?$CFs@ DB 'STATUS:%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MMJDMDOM@OBJECT?3?$CFs@
CONST	SEGMENT
??_C@_09MMJDMDOM@OBJECT?3?$CFs@ DB 'OBJECT:%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FCABHDEH@TYPE?5?5?3?$CFs@
CONST	SEGMENT
??_C@_09FCABHDEH@TYPE?5?5?3?$CFs@ DB 'TYPE  :%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07PPFPLHID@MISSION@
CONST	SEGMENT
??_C@_07PPFPLHID@MISSION@ DB 'MISSION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@FHGBBPHP@get_local_entity_int_value?5?$CItas@
CONST	SEGMENT
??_C@_0DJ@FHGBBPHP@get_local_entity_int_value?5?$CItas@ DB 'get_local_ent'
	DB	'ity_int_value (task, INT_TYPE_VISIBLE_TASK)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JBFLAFMH@FORMATION?3?$CFs@
CONST	SEGMENT
??_C@_0N@JBFLAFMH@FORMATION?3?$CFs@ DB 'FORMATION:%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06IAHIIHDD@?$CFc1?9?$CFd@
CONST	SEGMENT
??_C@_06IAHIIHDD@?$CFc1?9?$CFd@ DB '%c1-%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EKFLINLD@?$CFc?$CFs?51?9?$CFd@
CONST	SEGMENT
??_C@_09EKFLINLD@?$CFc?$CFs?51?9?$CFd@ DB '%c%s 1-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JGJHKNML@?$CFc1?9?$CFd?5?$CFs@
CONST	SEGMENT
??_C@_09JGJHKNML@?$CFc1?9?$CFd?5?$CFs@ DB '%c1-%d %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CPCKCPHJ@?$CFc?$CFs?51?9?$CFd?5?$CFs@
CONST	SEGMENT
??_C@_0N@CPCKCPHJ@?$CFc?$CFs?51?9?$CFd?5?$CFs@ DB '%c%s 1-%d %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03DKEJHHJP@?$CFs?3@
CONST	SEGMENT
??_C@_03DKEJHHJP@?$CFs?3@ DB '%s:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07MLNBPDHK@company@
CONST	SEGMENT
??_C@_07MLNBPDHK@company@ DB 'company', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DBEHAMGN@FLIGHT?5GROUP@
CONST	SEGMENT
??_C@_0N@DBEHAMGN@FLIGHT?5GROUP@ DB 'FLIGHT GROUP', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA DD 016b2H ; `draw_mission_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CA@NPMPDHNJ@?5?5?5?5?5?5?5?$DM?$CF03d?0?$CF03d?$DO?5?$CF6?41fKm?5?$CF3d?$HP@
CONST	SEGMENT
??_C@_0CA@NPMPDHNJ@?5?5?5?5?5?5?5?$DM?$CF03d?0?$CF03d?$DO?5?$CF6?41fKm?5?$CF3d?$HP@ DB ' '
	DB	'      <%03d,%03d> %6.1fKm %3d', 07fH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08OAGMDKAF@position@
CONST	SEGMENT
??_C@_08OAGMDKAF@position@ DB 'position', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA DD 01685H ; `print_target_position'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05DNIIFBMG@?$CFs?5?$CFs@
CONST	SEGMENT
??_C@_05DNIIFBMG@?$CFs?5?$CFs@ DB '%s %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HOHPNJLC@buffer@
CONST	SEGMENT
??_C@_06HOHPNJLC@buffer@ DB 'buffer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02LFNMGJAP@en@
CONST	SEGMENT
??_C@_02LFNMGJAP@en@ DB 'en', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA DD 01654H ; `get_player_rank_and_name'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05KEIIKJGB@?$CF?431s@
CONST	SEGMENT
??_C@_05KEIIKJGB@?$CF?431s@ DB '%.31s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01LKDEMHDF@s@
CONST	SEGMENT
??_C@_01LKDEMHDF@s@ DB 's', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??print_mono_font_max_length_string@@YGXPAD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??print_mono_font_max_length_string@@YGXPAD@Z@4JA DD 01644H ; `print_mono_font_max_length_string'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA DD 01626H ; `draw_flight_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_08EELEMDEH@?$CFc?3?5?$CFd?5M@
CONST	SEGMENT
??_C@_08EELEMDEH@?$CFc?3?5?$CFd?5M@ DB '%c: %d M', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA DD 015b5H ; `display_waypoint_information'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04GHNNFJCK@?$CF?40f@
CONST	SEGMENT
??_C@_04GHNNFJCK@?$CF?40f@ DB '%.0f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DIKEHEFB@min?3?5?$CF?402f?0?5max?3?5?$CF?402f@
CONST	SEGMENT
??_C@_0BH@DIKEHEFB@min?3?5?$CF?402f?0?5max?3?5?$CF?402f@ DB 'min: %.02f, '
	DB	'max: %.02f', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03GLKEJMAA@?$CF4d@
CONST	SEGMENT
??_C@_03GLKEJMAA@?$CF4d@ DB '%4d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OCCELDNI@?$CF04d@
CONST	SEGMENT
??_C@_04OCCELDNI@?$CF04d@ DB '%04d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MLFODOCP@R?$CF3d@
CONST	SEGMENT
??_C@_04MLFODOCP@R?$CF3d@ DB 'R%3d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NJMPCKOA@?$CFd0@
CONST	SEGMENT
??_C@_03NJMPCKOA@?$CFd0@ DB '%d0', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA DD 01333H	; `draw_pitch_ladder'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0L@JGIHHDGO@?5?$CFs?5?$CF03d?$CF?$CF@
CONST	SEGMENT
??_C@_0L@JGIHHDGO@?5?$CFs?5?$CF03d?$CF?$CF@ DB ' %s %03d%%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CFLBLB@?5?$CFs?5FLY?5@
CONST	SEGMENT
??_C@_08CFLBLB@?5?$CFs?5FLY?5@ DB ' %s FLY ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08EFKGPAPG@?5?$CFs?5IDLE@
CONST	SEGMENT
??_C@_08EFKGPAPG@?5?$CFs?5IDLE@ DB ' %s IDLE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HFPCNHOJ@?5?$CFs?5OFF?5@
CONST	SEGMENT
??_C@_08HFPCNHOJ@?5?$CFs?5OFF?5@ DB ' %s OFF ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HPNMMHPJ@?$CF03d?$CF?$CF@
CONST	SEGMENT
??_C@_06HPNMMHPJ@?$CF03d?$CF?$CF@ DB '%03d%%', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04MJEFHDBD@FLY?5@
CONST	SEGMENT
??_C@_04MJEFHDBD@FLY?5@ DB 'FLY ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IMMGDCFE@IDLE@
CONST	SEGMENT
??_C@_04IMMGDCFE@IDLE@ DB 'IDLE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LMJCBFEL@OFF?5@
CONST	SEGMENT
??_C@_04LMJCBFEL@OFF?5@ DB 'OFF ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08PLAGFMEO@THROTTLE@
CONST	SEGMENT
??_C@_08PLAGFMEO@THROTTLE@ DB 'THROTTLE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OMFADECJ@APU?5?5?5?5?5?5?5?$CF3?40f?$CF?$CF@
CONST	SEGMENT
??_C@_0BC@OMFADECJ@APU?5?5?5?5?5?5?5?$CF3?40f?$CF?$CF@ DB 'APU       %3.0'
	DB	'f%%', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HKDAKEPP@OIL?5PRES?4?5NORM@
CONST	SEGMENT
??_C@_0P@HKDAKEPP@OIL?5PRES?4?5NORM@ DB 'OIL PRES. NORM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IFONFGGI@OIL?5PRES?4?5LOW@
CONST	SEGMENT
??_C@_0O@IFONFGGI@OIL?5PRES?4?5LOW@ DB 'OIL PRES. LOW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HPBNLJLN@FUEL?5?5?5?5?5?5?$CF4d@
CONST	SEGMENT
??_C@_0O@HPBNLJLN@FUEL?5?5?5?5?5?5?$CF4d@ DB 'FUEL      %4d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02PCDHLJPB@NR@
CONST	SEGMENT
??_C@_02PCDHLJPB@NR@ DB 'NR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03DBNGLLAD@TGT@
CONST	SEGMENT
??_C@_03DBNGLLAD@TGT@ DB 'TGT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FGEMCONN@TRQ@
CONST	SEGMENT
??_C@_03FGEMCONN@TRQ@ DB 'TRQ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MAABNLHD@NP@
CONST	SEGMENT
??_C@_02MAABNLHD@NP@ DB 'NP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MFICFPOF@NG@
CONST	SEGMENT
??_C@_02MFICFPOF@NG@ DB 'NG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PKDHFCJF@HIGH@
CONST	SEGMENT
??_C@_04PKDHFCJF@HIGH@ DB 'HIGH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MMJNGGCF@OIL?5PRESSURE@
CONST	SEGMENT
??_C@_0N@MMJNGGCF@OIL?5PRESSURE@ DB 'OIL PRESSURE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KOEIBOKB@HYDRAULIC?5PRESSURE@
CONST	SEGMENT
??_C@_0BD@KOEIBOKB@HYDRAULIC?5PRESSURE@ DB 'HYDRAULIC PRESSURE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03IBEFMGAI@LOW@
CONST	SEGMENT
??_C@_03IBEFMGAI@LOW@ DB 'LOW', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08GEIAFJFB@R?5ENGINE@
CONST	SEGMENT
??_C@_08GEIAFJFB@R?5ENGINE@ DB 'R ENGINE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03FGGDJIBK@APU@
CONST	SEGMENT
??_C@_03FGGDJIBK@APU@ DB 'APU', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08ICMALC@L?5ENGINE@
CONST	SEGMENT
??_C@_08ICMALC@L?5ENGINE@ DB 'L ENGINE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OHKEFPKJ@DAMAGED@
CONST	SEGMENT
??_C@_07OHKEFPKJ@DAMAGED@ DB 'DAMAGED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FFIGCBMA@MAIN?5ROTOR@
CONST	SEGMENT
??_C@_0L@FFIGCBMA@MAIN?5ROTOR@ DB 'MAIN ROTOR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LMAEBBOE@STABILISER@
CONST	SEGMENT
??_C@_0L@LMAEBBOE@STABILISER@ DB 'STABILISER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03HCHJIECN@NVG@
CONST	SEGMENT
??_C@_03HCHJIECN@NVG@ DB 'NVG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HOHJDGGL@HUD@
CONST	SEGMENT
??_C@_03HOHJDGGL@HUD@ DB 'HUD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@
CONST	SEGMENT
??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@ DB 'RADAR WARNING SYSTEM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OEDGDHNF@COMMUNICATIONS@
CONST	SEGMENT
??_C@_0P@OEDGDHNF@COMMUNICATIONS@ DB 'COMMUNICATIONS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@
CONST	SEGMENT
??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@ DB 'NAVIGATION COMPUTER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MILGCPFO@IR?5JAMMER@
CONST	SEGMENT
??_C@_09MILGCPFO@IR?5JAMMER@ DB 'IR JAMMER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JDBOFCJG@RADAR?5JAMMER@
CONST	SEGMENT
??_C@_0N@JDBOFCJG@RADAR?5JAMMER@ DB 'RADAR JAMMER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@
CONST	SEGMENT
??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@ DB 'LASER DESIGNATOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04OOEBCMBF@FAIL@
CONST	SEGMENT
??_C@_04OOEBCMBF@FAIL@ DB 'FAIL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GIPFHKNO@OK@
CONST	SEGMENT
??_C@_02GIPFHKNO@OK@ DB 'OK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07FPLKDJGL@warning@
CONST	SEGMENT
??_C@_07FPLKDJGL@warning@ DB 'warning', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09FJJPPKDN@equipment@
CONST	SEGMENT
??_C@_09FJJPPKDN@equipment@ DB 'equipment', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??print_mfd_system_message@@YGMPAD0HMM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??print_mfd_system_message@@YGMPAD0HMM@Z@4JA DD 01199H ; `print_mfd_system_message'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BC@CEPGDBDN@ROCKET?5SALVOx?$CF02d@
CONST	SEGMENT
??_C@_0BC@CEPGDBDN@ROCKET?5SALVOx?$CF02d@ DB 'ROCKET SALVOx%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FAFOJLKK@ROCKET?5SALVOxALL@
CONST	SEGMENT
??_C@_0BB@FAFOJLKK@ROCKET?5SALVOxALL@ DB 'ROCKET SALVOxALL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05HGDIBGHI@x?$CF02d@
CONST	SEGMENT
??_C@_05HGDIBGHI@x?$CF02d@ DB 'x%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GFPICJEB@APx?$CF03d@
CONST	SEGMENT
??_C@_07GFPICJEB@APx?$CF03d@ DB 'APx%03d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EPFBIBAD@HEx?$CF03d@
CONST	SEGMENT
??_C@_07EPFBIBAD@HEx?$CF03d@ DB 'HEx%03d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FACIIFCM@FxXX@
CONST	SEGMENT
??_C@_04FACIIFCM@FxXX@ DB 'FxXX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08EHCDGGFB@FLARExXX@
CONST	SEGMENT
??_C@_08EHCDGGFB@FLARExXX@ DB 'FLARExXX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HNENCIOG@Fx?$CF02d@
CONST	SEGMENT
??_C@_06HNENCIOG@Fx?$CF02d@ DB 'Fx%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NONPILJE@FLAREx?$CF02d@
CONST	SEGMENT
??_C@_0L@NONPILJE@FLAREx?$CF02d@ DB 'FLAREx%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04JIMIAKFM@CxXX@
CONST	SEGMENT
??_C@_04JIMIAKFM@CxXX@ DB 'CxXX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08FGBJBHLJ@CHAFFxXX@
CONST	SEGMENT
??_C@_08FGBJBHLJ@CHAFFxXX@ DB 'CHAFFxXX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CPHFAHEB@Cx?$CF02d@
CONST	SEGMENT
??_C@_06CPHFAHEB@Cx?$CF02d@ DB 'Cx%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GPHKKCOA@CHAFFx?$CF02d@
CONST	SEGMENT
??_C@_0L@GPHKKCOA@CHAFFx?$CF02d@ DB 'CHAFFx%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03CBNMOHKF@C?1M@
CONST	SEGMENT
??_C@_03CBNMOHKF@C?1M@ DB 'C/M', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NHPMNECN@ARM@
CONST	SEGMENT
??_C@_03NHPMNECN@ARM@ DB 'ARM', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_weapon_display_mfd@@YGXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_weapon_display_mfd@@YGXXZ@4JA DD 0e6cH ; `draw_weapon_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06DPNNIDIB@F?3?$CF02d@
CONST	SEGMENT
??_C@_06DPNNIDIB@F?3?$CF02d@ DB 'F:%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GBDFBFJK@F?3XX@
CONST	SEGMENT
??_C@_04GBDFBFJK@F?3XX@ DB 'F:XX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@
CONST	SEGMENT
??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@ DB 'FLARE:%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HGDOPGOH@FLARE?3XX@
CONST	SEGMENT
??_C@_08HGDOPGOH@FLARE?3XX@ DB 'FLARE:XX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GNOFKMCG@C?3?$CF02d@
CONST	SEGMENT
??_C@_06GNOFKMCG@C?3?$CF02d@ DB 'C:%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KJNFJKOK@C?3XX@
CONST	SEGMENT
??_C@_04KJNFJKOK@C?3XX@ DB 'C:XX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@
CONST	SEGMENT
??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@ DB 'CHAFF:%02d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GHAEIHAP@CHAFF?3XX@
CONST	SEGMENT
??_C@_08GHAEIHAP@CHAFF?3XX@ DB 'CHAFF:XX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LMMJFDCN@AUTO@
CONST	SEGMENT
??_C@_04LMMJFDCN@AUTO@ DB 'AUTO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06JCJCOOPL@RD?5OFF@
CONST	SEGMENT
??_C@_06JCJCOOPL@RD?5OFF@ DB 'RD OFF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BHAGAOGB@RD?5ON@
CONST	SEGMENT
??_C@_05BHAGAOGB@RD?5ON@ DB 'RD ON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JNKFDAHI@RD?5XXX@
CONST	SEGMENT
??_C@_06JNKFDAHI@RD?5XXX@ DB 'RD XXX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JIGPMIEL@RD?5JAM?5OFF@
CONST	SEGMENT
??_C@_0L@JIGPMIEL@RD?5JAM?5OFF@ DB 'RD JAM OFF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OKIOJJOP@RD?5JAM?5ON@
CONST	SEGMENT
??_C@_09OKIOJJOP@RD?5JAM?5ON@ DB 'RD JAM ON', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JHFIBGMI@RD?5JAM?5XXX@
CONST	SEGMENT
??_C@_0L@JHFIBGMI@RD?5JAM?5XXX@ DB 'RD JAM XXX', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06CCMEMHEJ@IR?5OFF@
CONST	SEGMENT
??_C@_06CCMEMHEJ@IR?5OFF@ DB 'IR OFF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JBLHJOBL@IR?5ON@
CONST	SEGMENT
??_C@_05JBLHJOBL@IR?5ON@ DB 'IR ON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CNPDBJMK@IR?5XXX@
CONST	SEGMENT
??_C@_06CNPDBJMK@IR?5XXX@ DB 'IR XXX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@
CONST	SEGMENT
??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@ DB 'IR JAM OFF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OKBKNIAL@IR?5JAM?5ON@
CONST	SEGMENT
??_C@_09OKBKNIAL@IR?5JAM?5ON@ DB 'IR JAM ON', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DADPKEOI@IR?5JAM?5XXX@
CONST	SEGMENT
??_C@_0L@DADPKEOI@IR?5JAM?5XXX@ DB 'IR JAM XXX', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@
CONST	SEGMENT
??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@ DB 'LS MSL:%.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@
CONST	SEGMENT
??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@ DB 'RF MSL:%.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@
CONST	SEGMENT
??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@ DB 'IR MSL:%.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA DD 0bf0H ; `draw_aircraft_survivability_equipment_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@
CONST	SEGMENT
??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@ DB '(threa'
	DB	't_type == THREAT_TYPE_RF_MISSILE) || (threat_type == THREAT_T'
	DB	'YPE_IR_MISSILE) || (threat_type == THREAT_TYPE_LASER_MISSILE)'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06OEKOLKIL@source@
CONST	SEGMENT
??_C@_06OEKOLKIL@source@ DB 'source', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA DD 0b89H ; `get_closest_missile'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@
CONST	SEGMENT
??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@ DB '--:--:--', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@
CONST	SEGMENT
??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@ DB '%02d:%02d:%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BAOIPBEF@?9?3?9?9?4?9@
CONST	SEGMENT
??_C@_06BAOIPBEF@?9?3?9?9?4?9@ DB '-:--.-', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09KJKGCNAK@?$CFc?3?5?$CFd?5KM@
CONST	SEGMENT
??_C@_09KJKGCNAK@?$CFc?3?5?$CFd?5KM@ DB '%c: %d KM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FOMEHBFC@?$CFc?3?5?$CF?41f?5KM@
CONST	SEGMENT
??_C@_0M@FOMEHBFC@?$CFc?3?5?$CF?41f?5KM@ DB '%c: %.1f KM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FMJDLNLC@SECTOR?3?5?$CFd?0?$CFd@
CONST	SEGMENT
??_C@_0O@FMJDLNLC@SECTOR?3?5?$CFd?0?$CFd@ DB 'SECTOR: %d,%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HNIIHLPL@?$CF?5?5?54d?5M@
CONST	SEGMENT
??_C@_08HNIIHLPL@?$CF?5?5?54d?5M@ DB '%   4d M', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03GJMPEADF@HMS@
CONST	SEGMENT
??_C@_03GJMPEADF@HMS@ DB 'HMS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08JJGIEILB@EOS?5FLIR@
CONST	SEGMENT
??_C@_08JJGIEILB@EOS?5FLIR@ DB 'EOS FLIR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LLLMNJMM@NO?5ACQ@
CONST	SEGMENT
??_C@_06LLLMNJMM@NO?5ACQ@ DB 'NO ACQ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CNLPLFKK@NAVIGATION@
CONST	SEGMENT
??_C@_0L@CNLPLFKK@NAVIGATION@ DB 'NAVIGATION', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09ECOKIFNI@TARGETING@
CONST	SEGMENT
??_C@_09ECOKIFNI@TARGETING@ DB 'TARGETING', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KFHEGLBA@COMBINED@
CONST	SEGMENT
??_C@_08KFHEGLBA@COMBINED@ DB 'COMBINED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BMNBLIPO@25KM@
CONST	SEGMENT
??_C@_04BMNBLIPO@25KM@ DB '25KM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GMKPDCBM@10KM@
CONST	SEGMENT
??_C@_04GMKPDCBM@10KM@ DB '10KM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CAFGHLBJ@5KM@
CONST	SEGMENT
??_C@_03CAFGHLBJ@5KM@ DB '5KM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IHJDDCGF@2?45KM@
CONST	SEGMENT
??_C@_05IHJDDCGF@2?45KM@ DB '2.5KM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@MOMFCEOG@ka50_mfd_location_valid?5?$CImfd_lo@
CONST	SEGMENT
??_C@_0CH@MOMFCEOG@ka50_mfd_location_valid?5?$CImfd_lo@ DB 'ka50_mfd_loca'
	DB	'tion_valid (mfd_location)', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA DD 08b4H ; `draw_tactical_situation_display_mfd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_01CPLAODJH@S@
CONST	SEGMENT
??_C@_01CPLAODJH@S@ DB 'S', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06GPMJGLEM@MARKED@
CONST	SEGMENT
??_C@_06GPMJGLEM@MARKED@ DB 'MARKED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KODELPLK@LOCKED@
CONST	SEGMENT
??_C@_06KODELPLK@LOCKED@ DB 'LOCKED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OMCABMNO@?$CF?41fKm@
CONST	SEGMENT
??_C@_06OMCABMNO@?$CF?41fKm@ DB '%.1fKm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NGNKAJPJ@?$CFdm@
CONST	SEGMENT
??_C@_03NGNKAJPJ@?$CFdm@ DB '%dm', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GGBPDDBN@?$CF?41f@
CONST	SEGMENT
??_C@_04GGBPDDBN@?$CF?41f@ DB '%.1f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02ONPABID@LO@
CONST	SEGMENT
??_C@_02ONPABID@LO@ DB 'LO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08JFLECGBM@LO?5LIGHT@
CONST	SEGMENT
??_C@_08JFLECGBM@LO?5LIGHT@ DB 'LO LIGHT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03MAMPKPPK@XXX@
CONST	SEGMENT
??_C@_03MAMPKPPK@XXX@ DB 'XXX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MIGKMLBH@FLIR@
CONST	SEGMENT
??_C@_04MIGKMLBH@FLIR@ DB 'FLIR', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA DD 066bH ; `draw_2d_eo_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z@4JA DD 05f6H ; `draw_full_screen_3d_eo_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
CONST	SEGMENT
??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@ DB 'Invalid target'
	DB	' acquisition system = %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
CONST	SEGMENT
??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@ DB '('
	DB	'day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT'
	DB	'_TYPES)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
CONST	SEGMENT
??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@ DB '(weather_'
	DB	'mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LA'
	DB	'ST)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
CONST	SEGMENT
??_C@_0BF@MDEHLDP@eo_3d_texture_screen@ DB 'eo_3d_texture_screen', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KMMHFIEO@eo@
CONST	SEGMENT
??_C@_02KMMHFIEO@eo@ DB 'eo', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA DD 0575H ; `draw_3d_eo_display'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_03MDIFNIHN@360@
CONST	SEGMENT
??_C@_03MDIFNIHN@360@ DB '360', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_heading_scale@@YGXMH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_heading_scale@@YGXMH@Z@4JA DD 03deH ; `draw_heading_scale'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_01CBDEGOCN@j@
CONST	SEGMENT
??_C@_01CBDEGOCN@j@ DB 'j', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01KBJDNOO@i@
CONST	SEGMENT
??_C@_01KBJDNOO@i@ DB 'i', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z@4JA DD 0334H ; `transform_mfd_screen_co_ords_to_mfd_texture_co_ords'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@
CONST	SEGMENT
??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@ DB '('
	DB	'target_symbol_type >= 0) && (target_symbol_type < NUM_TARGET_'
	DB	'SYMBOL_TYPES)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@
CONST	SEGMENT
??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@ DB '!get_local'
	DB	'_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IIPCKJML@source_position@
CONST	SEGMENT
??_C@_0BA@IIPCKJML@source_position@ DB 'source_position', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JJLAMBGK@target@
CONST	SEGMENT
??_C@_06JJLAMBGK@target@ DB 'target', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
CONST	SEGMENT
??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@ DB 'c:\users\nhv'
	DB	'90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd'
	DB	'.c', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA DD 0f9H ; `draw_radar_target_symbol'::`1'::__LINE__Var
_DATA	ENDS
_DATA	SEGMENT
?ka50_mfd_mode_names@@3PAPADA DD FLAT:??_C@_0BC@KDOHHIAN@KA50_MFD_MODE_OFF@ ; ka50_mfd_mode_names
	DD	FLAT:??_C@_0BG@IFHGHAAA@KA50_MFD_MODE_DAMAGED@
	DD	FLAT:??_C@_0BD@JPGOGBDL@KA50_MFD_MODE_FLIR@
	DD	FLAT:??_C@_0BC@MCEKLIK@KA50_MFD_MODE_TSD@
	DD	FLAT:??_C@_0BC@HCPIDNGG@KA50_MFD_MODE_ASE@
	DD	FLAT:??_C@_0BF@GPOEMMBG@KA50_MFD_MODE_WEAPON@
	DD	FLAT:??_C@_0BF@FMEHKPEF@KA50_MFD_MODE_SYSTEM@
	DD	FLAT:??_C@_0BF@LFAFOPHL@KA50_MFD_MODE_ENGINE@
	DD	FLAT:??_C@_0BF@MBJOMCBN@KA50_MFD_MODE_FLIGHT@
	DD	FLAT:??_C@_0BG@JNINJICK@KA50_MFD_MODE_MISSION@
?ka50_mfd_location_names@@3PAPADA DD FLAT:??_C@_0BJ@HJLLBIJ@KA50_MFD_LOCATION_SHKVAL@ ; ka50_mfd_location_names
	DD	FLAT:??_C@_0BI@MPCOKKAF@KA50_MFD_LOCATION_ABRIS@
?mfd_mode_ptrs@@3PAPAW4KA50_MFD_MODES@@A DD FLAT:?shkval_mfd_mode@@3W4KA50_MFD_MODES@@A ; mfd_mode_ptrs
	DD	FLAT:?abris_mfd_mode@@3W4KA50_MFD_MODES@@A
?small_command_heading_carat@@3PADA DB 07H		; small_command_heading_carat
	DB	04H
	DB	0fdH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
?large_azimuth_marker@@3PADA DB 05H			; large_azimuth_marker
	DB	0cH
	DB	0feH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
?small_azimuth_marker@@3PADA DB 03H			; small_azimuth_marker
	DB	08H
	DB	0ffH
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
?small_elevation_marker@@3PADA DB 08H			; small_elevation_marker
	DB	03H
	DB	01H
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
?large_elevation_marker@@3PADA DB 0cH			; large_elevation_marker
	DB	05H
	DB	01H
	DB	0feH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
?large_range_marker@@3PADA DB 0cH			; large_range_marker
	DB	05H
	DB	0f4H
	DB	0feH
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
?small_range_marker@@3PADA DB 08H			; small_range_marker
	DB	03H
	DB	0f8H
	DB	0ffH
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
?large_rate_of_climb_scale_pointer@@3PADA DB 05H	; large_rate_of_climb_scale_pointer
	DB	09H
	DB	0fbH
	DB	0fcH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+3
?large_tsd_ase_aircraft_datum@@3PADA DB 011H		; large_tsd_ase_aircraft_datum
	DB	025H
	DB	0f8H
	DB	0eeH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+7
?large_tsd_ase_aircraft_datum_mask@@3PADA DB 013H	; large_tsd_ase_aircraft_datum_mask
	DB	027H
	DB	0f7H
	DB	0edH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+7
?small_tsd_ase_aircraft_datum@@3PADA DB 07H		; small_tsd_ase_aircraft_datum
	DB	0fH
	DB	0fdH
	DB	0f9H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	ORG $+3
?small_tsd_ase_aircraft_datum_mask@@3PADA DB 09H	; small_tsd_ase_aircraft_datum_mask
	DB	011H
	DB	0fcH
	DB	0f8H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	ORG $+3
?large_tsd_waypoint_marker@@3PADA DB 0cH		; large_tsd_waypoint_marker
	DB	0dH
	DB	0fbH
	DB	0faH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
?small_tsd_waypoint_marker@@3PADA DB 09H		; small_tsd_waypoint_marker
	DB	09H
	DB	0fcH
	DB	0fcH
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	ORG $+3
?large_ase_missile@@3PADA DB 0bH			; large_ase_missile
	DB	09H
	DB	0fbH
	DB	0fcH
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	ORG $+1
?large_ase_missile_mask@@3PADA DB 0dH			; large_ase_missile_mask
	DB	0bH
	DB	0faH
	DB	0fbH
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	ORG $+1
?small_ase_missile@@3PADA DB 07H			; small_ase_missile
	DB	05H
	DB	0fdH
	DB	0feH
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	ORG $+5
?small_ase_missile_mask@@3PADA DB 09H			; small_ase_missile_mask
	DB	07H
	DB	0fcH
	DB	0fdH
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	ORG $+5
?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A DD 02H ; flir_light_levels
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A DD 01H ; flir_noise_levels
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
_DATA	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?get_previous_mfd_mode@@YG?AW4KA50_MFD_MODES@@W41@W4KA50_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
_previous_mfd_mode$ = -4				; size = 4
_mfd_mode$ = 8						; size = 4
_mfd_location$ = 12					; size = 4
?get_previous_mfd_mode@@YG?AW4KA50_MFD_MODES@@W41@W4KA50_MFD_LOCATIONS@@@Z PROC ; get_previous_mfd_mode, COMDAT

; 8105 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8106 : 	ka50_mfd_modes
; 8107 : 		previous_mfd_mode;
; 8108 : 
; 8109 : 	ASSERT (ka50_mfd_mode_valid (mfd_mode));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@get_previo
  0000f	83 7d 08 0a	 cmp	 DWORD PTR _mfd_mode$[ebp], 10 ; 0000000aH
  00013	7c 18		 jl	 SHORT $LN4@get_previo
$LN5@get_previo:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_previous_mfd_mode@@YG?AW4KA50_MFD_MODES@@W42@W4KA50_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@CDPALFHI@ka50_mfd_mode_valid?5?$CImfd_mode?$CJ@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_previo:

; 8110 : 
; 8111 : 	ASSERT (ka50_mfd_location_valid (mfd_location));

  0002d	83 7d 0c 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  00031	7c 06		 jl	 SHORT $LN7@get_previo
  00033	83 7d 0c 02	 cmp	 DWORD PTR _mfd_location$[ebp], 2
  00037	7c 18		 jl	 SHORT $LN6@get_previo
$LN7@get_previo:
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_previous_mfd_mode@@YG?AW4KA50_MFD_MODES@@W42@W4KA50_MFD_LOCATIONS@@@Z@4JA
  0003e	83 c0 06	 add	 eax, 6
  00041	50		 push	 eax
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MOMFCEOG@ka50_mfd_location_valid?5?$CImfd_lo@
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_previo:

; 8112 : 
; 8113 : 	switch (mfd_mode)

  00051	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00054	89 45 b8	 mov	 DWORD PTR tv76[ebp], eax
  00057	83 7d b8 09	 cmp	 DWORD PTR tv76[ebp], 9
  0005b	77 60		 ja	 SHORT $LN17@get_previo
  0005d	8b 4d b8	 mov	 ecx, DWORD PTR tv76[ebp]
  00060	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN19@get_previo[ecx*4]
$LN8@get_previo:

; 8114 : 	{
; 8115 : 		////////////////////////////////////////
; 8116 : 		case KA50_MFD_MODE_OFF:
; 8117 : 		////////////////////////////////////////
; 8118 : 		{
; 8119 : 			previous_mfd_mode = get_default_mfd_mode (mfd_location);

  00067	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?get_default_mfd_mode@@YG?AW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z ; get_default_mfd_mode
  00070	89 45 fc	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax

; 8120 : 
; 8121 : 			break;

  00073	eb 5f		 jmp	 SHORT $LN2@get_previo
$LN9@get_previo:

; 8122 : 		}
; 8123 : 		////////////////////////////////////////
; 8124 : 		case KA50_MFD_MODE_DAMAGED:
; 8125 : 		////////////////////////////////////////
; 8126 : 		{
; 8127 : 			previous_mfd_mode = KA50_MFD_MODE_DAMAGED;

  00075	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 1

; 8128 : 
; 8129 : 			break;

  0007c	eb 56		 jmp	 SHORT $LN2@get_previo
$LN10@get_previo:

; 8130 : 		}
; 8131 : 		////////////////////////////////////////
; 8132 : 		case KA50_MFD_MODE_TSD:
; 8133 : 		////////////////////////////////////////
; 8134 : 		{
; 8135 : 			previous_mfd_mode = KA50_MFD_MODE_MISSION;

  0007e	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 9

; 8136 : 
; 8137 : 			break;

  00085	eb 4d		 jmp	 SHORT $LN2@get_previo
$LN11@get_previo:

; 8138 : 		}
; 8139 : 		////////////////////////////////////////
; 8140 : 		case KA50_MFD_MODE_ASE:
; 8141 : 		////////////////////////////////////////
; 8142 : 		{
; 8143 : 			previous_mfd_mode = KA50_MFD_MODE_TSD;

  00087	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 3

; 8144 : 
; 8145 : 			break;

  0008e	eb 44		 jmp	 SHORT $LN2@get_previo
$LN12@get_previo:

; 8146 : 		}
; 8147 : 		////////////////////////////////////////
; 8148 : 		case KA50_MFD_MODE_WEAPON:
; 8149 : 		////////////////////////////////////////
; 8150 : 		{
; 8151 : 			previous_mfd_mode = KA50_MFD_MODE_ASE;

  00090	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 4

; 8152 : 
; 8153 : 			break;

  00097	eb 3b		 jmp	 SHORT $LN2@get_previo
$LN13@get_previo:

; 8154 : 		}
; 8155 : 		////////////////////////////////////////
; 8156 : 		case KA50_MFD_MODE_SYSTEM:
; 8157 : 		////////////////////////////////////////
; 8158 : 		{
; 8159 : 			previous_mfd_mode = KA50_MFD_MODE_WEAPON;

  00099	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 5

; 8160 : 
; 8161 : 			break;

  000a0	eb 32		 jmp	 SHORT $LN2@get_previo
$LN14@get_previo:

; 8162 : 		}
; 8163 : 		////////////////////////////////////////
; 8164 : 		case KA50_MFD_MODE_ENGINE:
; 8165 : 		////////////////////////////////////////
; 8166 : 		{
; 8167 : 			previous_mfd_mode = KA50_MFD_MODE_SYSTEM;

  000a2	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 6

; 8168 : 
; 8169 : 			break;

  000a9	eb 29		 jmp	 SHORT $LN2@get_previo
$LN15@get_previo:

; 8170 : 		}
; 8171 : 		////////////////////////////////////////
; 8172 : 		case KA50_MFD_MODE_FLIGHT:
; 8173 : 		////////////////////////////////////////
; 8174 : 		{
; 8175 : 			previous_mfd_mode = KA50_MFD_MODE_ENGINE;

  000ab	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 7

; 8176 : 
; 8177 : 			break;

  000b2	eb 20		 jmp	 SHORT $LN2@get_previo
$LN16@get_previo:

; 8178 : 		}
; 8179 : 		////////////////////////////////////////
; 8180 : 		case KA50_MFD_MODE_MISSION:
; 8181 : 		////////////////////////////////////////
; 8182 : 		{
; 8183 : 			previous_mfd_mode = KA50_MFD_MODE_FLIGHT;

  000b4	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _previous_mfd_mode$[ebp], 8

; 8184 : 
; 8185 : 			break;

  000bb	eb 17		 jmp	 SHORT $LN2@get_previo
$LN17@get_previo:

; 8186 : 		}
; 8187 : 		default:
; 8188 : 		{
; 8189 : 			debug_fatal ( "Previous Ka-50 MFD mode for %i", mfd_mode );

  000bd	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  000c0	50		 push	 eax
  000c1	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@EBNLNNAN@Previous?5Ka?950?5MFD?5mode?5for?5?$CFi@
  000c6	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000cb	83 c4 08	 add	 esp, 8

; 8190 : 
; 8191 : 			previous_mfd_mode = mfd_mode;

  000ce	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  000d1	89 45 fc	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax
$LN2@get_previo:

; 8192 : 
; 8193 : 			break;
; 8194 : 		}
; 8195 : 	}
; 8196 : 
; 8197 : 	return (previous_mfd_mode);

  000d4	8b 45 fc	 mov	 eax, DWORD PTR _previous_mfd_mode$[ebp]

; 8198 : }

  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	5b		 pop	 ebx
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c2 08 00	 ret	 8
$LN19@get_previo:
  000e0	00 00 00 00	 DD	 $LN8@get_previo
  000e4	00 00 00 00	 DD	 $LN9@get_previo
  000e8	00 00 00 00	 DD	 $LN17@get_previo
  000ec	00 00 00 00	 DD	 $LN10@get_previo
  000f0	00 00 00 00	 DD	 $LN11@get_previo
  000f4	00 00 00 00	 DD	 $LN12@get_previo
  000f8	00 00 00 00	 DD	 $LN13@get_previo
  000fc	00 00 00 00	 DD	 $LN14@get_previo
  00100	00 00 00 00	 DD	 $LN15@get_previo
  00104	00 00 00 00	 DD	 $LN16@get_previo
?get_previous_mfd_mode@@YG?AW4KA50_MFD_MODES@@W41@W4KA50_MFD_LOCATIONS@@@Z ENDP ; get_previous_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?get_next_mfd_mode@@YG?AW4KA50_MFD_MODES@@W41@W4KA50_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
_next_mfd_mode$ = -4					; size = 4
_mfd_mode$ = 8						; size = 4
_mfd_location$ = 12					; size = 4
?get_next_mfd_mode@@YG?AW4KA50_MFD_MODES@@W41@W4KA50_MFD_LOCATIONS@@@Z PROC ; get_next_mfd_mode, COMDAT

; 8005 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8006 : 	ka50_mfd_modes
; 8007 : 		next_mfd_mode;
; 8008 : 
; 8009 : 	ASSERT (ka50_mfd_mode_valid (mfd_mode));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@get_next_m
  0000f	83 7d 08 0a	 cmp	 DWORD PTR _mfd_mode$[ebp], 10 ; 0000000aH
  00013	7c 18		 jl	 SHORT $LN4@get_next_m
$LN5@get_next_m:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_next_mfd_mode@@YG?AW4KA50_MFD_MODES@@W42@W4KA50_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@CDPALFHI@ka50_mfd_mode_valid?5?$CImfd_mode?$CJ@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_next_m:

; 8010 : 
; 8011 : 	ASSERT (ka50_mfd_location_valid (mfd_location));

  0002d	83 7d 0c 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  00031	7c 06		 jl	 SHORT $LN7@get_next_m
  00033	83 7d 0c 02	 cmp	 DWORD PTR _mfd_location$[ebp], 2
  00037	7c 18		 jl	 SHORT $LN6@get_next_m
$LN7@get_next_m:
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_next_mfd_mode@@YG?AW4KA50_MFD_MODES@@W42@W4KA50_MFD_LOCATIONS@@@Z@4JA
  0003e	83 c0 06	 add	 eax, 6
  00041	50		 push	 eax
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MOMFCEOG@ka50_mfd_location_valid?5?$CImfd_lo@
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_next_m:

; 8012 : 
; 8013 : 	switch (mfd_mode)

  00051	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00054	89 45 b8	 mov	 DWORD PTR tv76[ebp], eax
  00057	83 7d b8 09	 cmp	 DWORD PTR tv76[ebp], 9
  0005b	77 60		 ja	 SHORT $LN17@get_next_m
  0005d	8b 4d b8	 mov	 ecx, DWORD PTR tv76[ebp]
  00060	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN19@get_next_m[ecx*4]
$LN8@get_next_m:

; 8014 : 	{
; 8015 : 		////////////////////////////////////////
; 8016 : 		case KA50_MFD_MODE_OFF:
; 8017 : 		////////////////////////////////////////
; 8018 : 		{
; 8019 : 			next_mfd_mode = get_default_mfd_mode (mfd_location);

  00067	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?get_default_mfd_mode@@YG?AW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z ; get_default_mfd_mode
  00070	89 45 fc	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax

; 8020 : 
; 8021 : 			break;

  00073	eb 5f		 jmp	 SHORT $LN2@get_next_m
$LN9@get_next_m:

; 8022 : 		}
; 8023 : 		////////////////////////////////////////
; 8024 : 		case KA50_MFD_MODE_DAMAGED:
; 8025 : 		////////////////////////////////////////
; 8026 : 		{
; 8027 : 			next_mfd_mode = KA50_MFD_MODE_DAMAGED;

  00075	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 1

; 8028 : 
; 8029 : 			break;

  0007c	eb 56		 jmp	 SHORT $LN2@get_next_m
$LN10@get_next_m:

; 8030 : 		}
; 8031 : 		////////////////////////////////////////
; 8032 : 		case KA50_MFD_MODE_TSD:
; 8033 : 		////////////////////////////////////////
; 8034 : 		{
; 8035 : 			next_mfd_mode = KA50_MFD_MODE_ASE;

  0007e	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 4

; 8036 : 
; 8037 : 			break;

  00085	eb 4d		 jmp	 SHORT $LN2@get_next_m
$LN11@get_next_m:

; 8038 : 		}
; 8039 : 		////////////////////////////////////////
; 8040 : 		case KA50_MFD_MODE_ASE:
; 8041 : 		////////////////////////////////////////
; 8042 : 		{
; 8043 : 			next_mfd_mode = KA50_MFD_MODE_WEAPON;

  00087	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 5

; 8044 : 
; 8045 : 			break;

  0008e	eb 44		 jmp	 SHORT $LN2@get_next_m
$LN12@get_next_m:

; 8046 : 		}
; 8047 : 		////////////////////////////////////////
; 8048 : 		case KA50_MFD_MODE_WEAPON:
; 8049 : 		////////////////////////////////////////
; 8050 : 		{
; 8051 : 			next_mfd_mode = KA50_MFD_MODE_SYSTEM;

  00090	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 6

; 8052 : 
; 8053 : 			break;

  00097	eb 3b		 jmp	 SHORT $LN2@get_next_m
$LN13@get_next_m:

; 8054 : 		}
; 8055 : 		////////////////////////////////////////
; 8056 : 		case KA50_MFD_MODE_SYSTEM:
; 8057 : 		////////////////////////////////////////
; 8058 : 		{
; 8059 : 			next_mfd_mode = KA50_MFD_MODE_ENGINE;

  00099	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 7

; 8060 : 
; 8061 : 			break;

  000a0	eb 32		 jmp	 SHORT $LN2@get_next_m
$LN14@get_next_m:

; 8062 : 		}
; 8063 : 		////////////////////////////////////////
; 8064 : 		case KA50_MFD_MODE_ENGINE:
; 8065 : 		////////////////////////////////////////
; 8066 : 		{
; 8067 : 			next_mfd_mode = KA50_MFD_MODE_FLIGHT;

  000a2	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 8

; 8068 : 
; 8069 : 			break;

  000a9	eb 29		 jmp	 SHORT $LN2@get_next_m
$LN15@get_next_m:

; 8070 : 		}
; 8071 : 		////////////////////////////////////////
; 8072 : 		case KA50_MFD_MODE_FLIGHT:
; 8073 : 		////////////////////////////////////////
; 8074 : 		{
; 8075 : 			next_mfd_mode = KA50_MFD_MODE_MISSION;

  000ab	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 9

; 8076 : 
; 8077 : 			break;

  000b2	eb 20		 jmp	 SHORT $LN2@get_next_m
$LN16@get_next_m:

; 8078 : 		}
; 8079 : 		////////////////////////////////////////
; 8080 : 		case KA50_MFD_MODE_MISSION:
; 8081 : 		////////////////////////////////////////
; 8082 : 		{
; 8083 : 			next_mfd_mode = KA50_MFD_MODE_TSD;

  000b4	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _next_mfd_mode$[ebp], 3

; 8084 : 
; 8085 : 			break;

  000bb	eb 17		 jmp	 SHORT $LN2@get_next_m
$LN17@get_next_m:

; 8086 : 		}
; 8087 : 		default:
; 8088 : 		{
; 8089 : 			debug_fatal ( "Next Ka-50 MFD mode for %i", mfd_mode );

  000bd	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  000c0	50		 push	 eax
  000c1	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@JOJLEIFO@Next?5Ka?950?5MFD?5mode?5for?5?$CFi@
  000c6	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  000cb	83 c4 08	 add	 esp, 8

; 8090 : 
; 8091 : 			next_mfd_mode = mfd_mode;

  000ce	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  000d1	89 45 fc	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax
$LN2@get_next_m:

; 8092 : 
; 8093 : 			break;
; 8094 : 		}
; 8095 : 	}
; 8096 : 
; 8097 : 	return (next_mfd_mode);

  000d4	8b 45 fc	 mov	 eax, DWORD PTR _next_mfd_mode$[ebp]

; 8098 : }

  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	5b		 pop	 ebx
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c2 08 00	 ret	 8
$LN19@get_next_m:
  000e0	00 00 00 00	 DD	 $LN8@get_next_m
  000e4	00 00 00 00	 DD	 $LN9@get_next_m
  000e8	00 00 00 00	 DD	 $LN17@get_next_m
  000ec	00 00 00 00	 DD	 $LN10@get_next_m
  000f0	00 00 00 00	 DD	 $LN11@get_next_m
  000f4	00 00 00 00	 DD	 $LN12@get_next_m
  000f8	00 00 00 00	 DD	 $LN13@get_next_m
  000fc	00 00 00 00	 DD	 $LN14@get_next_m
  00100	00 00 00 00	 DD	 $LN15@get_next_m
  00104	00 00 00 00	 DD	 $LN16@get_next_m
?get_next_mfd_mode@@YG?AW4KA50_MFD_MODES@@W41@W4KA50_MFD_LOCATIONS@@@Z ENDP ; get_next_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?get_mfd_damage@@YGHW4KA50_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_damage$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?get_mfd_damage@@YGHW4KA50_MFD_LOCATIONS@@@Z PROC	; get_mfd_damage, COMDAT

; 7937 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7938 : 	int
; 7939 : 		damage;
; 7940 : 
; 7941 : 	ASSERT (ka50_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@get_mfd_da
  0000f	83 7d 08 02	 cmp	 DWORD PTR _mfd_location$[ebp], 2
  00013	7c 18		 jl	 SHORT $LN4@get_mfd_da
$LN5@get_mfd_da:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_mfd_damage@@YGHW4KA50_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MOMFCEOG@ka50_mfd_location_valid?5?$CImfd_lo@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_mfd_da:

; 7942 : 
; 7943 : 	switch (mfd_location)

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	89 45 b8	 mov	 DWORD PTR tv70[ebp], eax
  00033	83 7d b8 00	 cmp	 DWORD PTR tv70[ebp], 0
  00037	74 08		 je	 SHORT $LN6@get_mfd_da
  00039	83 7d b8 01	 cmp	 DWORD PTR tv70[ebp], 1
  0003d	74 12		 je	 SHORT $LN7@get_mfd_da
  0003f	eb 1e		 jmp	 SHORT $LN2@get_mfd_da
$LN6@get_mfd_da:

; 7944 : 	{
; 7945 : 		////////////////////////////////////////
; 7946 : 		case KA50_MFD_LOCATION_SHKVAL:
; 7947 : 		////////////////////////////////////////
; 7948 : 		{
; 7949 : 			damage = ka50_damage.shkval_mfd;

  00041	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  00046	c1 e8 09	 shr	 eax, 9
  00049	83 e0 01	 and	 eax, 1
  0004c	89 45 fc	 mov	 DWORD PTR _damage$[ebp], eax

; 7950 : 
; 7951 : 			break;

  0004f	eb 0e		 jmp	 SHORT $LN2@get_mfd_da
$LN7@get_mfd_da:

; 7952 : 		}
; 7953 : 		////////////////////////////////////////
; 7954 : 		case KA50_MFD_LOCATION_ABRIS:
; 7955 : 		////////////////////////////////////////
; 7956 : 		{
; 7957 : 			damage = ka50_damage.abris_mfd;

  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  00056	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  00059	83 e0 01	 and	 eax, 1
  0005c	89 45 fc	 mov	 DWORD PTR _damage$[ebp], eax
$LN2@get_mfd_da:

; 7958 : 
; 7959 : 			break;
; 7960 : 		}
; 7961 : 		////////////////////////////////////////
; 7962 : 	}
; 7963 : 
; 7964 : 	return (damage);

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _damage$[ebp]

; 7965 : }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
?get_mfd_damage@@YGHW4KA50_MFD_LOCATIONS@@@Z ENDP	; get_mfd_damage
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?get_default_mfd_mode@@YG?AW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_mfd_mode$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?get_default_mfd_mode@@YG?AW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z PROC ; get_default_mfd_mode, COMDAT

; 7902 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7903 : 	ka50_mfd_modes
; 7904 : 		mfd_mode;
; 7905 : 
; 7906 : 	ASSERT (ka50_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN5@get_defaul
  0000f	83 7d 08 02	 cmp	 DWORD PTR _mfd_location$[ebp], 2
  00013	7c 18		 jl	 SHORT $LN4@get_defaul
$LN5@get_defaul:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_default_mfd_mode@@YG?AW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MOMFCEOG@ka50_mfd_location_valid?5?$CImfd_lo@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_defaul:

; 7907 : 
; 7908 : 	switch (mfd_location)

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	89 45 b8	 mov	 DWORD PTR tv70[ebp], eax
  00033	83 7d b8 00	 cmp	 DWORD PTR tv70[ebp], 0
  00037	74 08		 je	 SHORT $LN6@get_defaul
  00039	83 7d b8 01	 cmp	 DWORD PTR tv70[ebp], 1
  0003d	74 0b		 je	 SHORT $LN7@get_defaul
  0003f	eb 10		 jmp	 SHORT $LN2@get_defaul
$LN6@get_defaul:

; 7909 : 	{
; 7910 : 		////////////////////////////////////////
; 7911 : 		case KA50_MFD_LOCATION_SHKVAL:
; 7912 : 		////////////////////////////////////////
; 7913 : 		{
; 7914 : 			mfd_mode = KA50_MFD_MODE_FLIR;

  00041	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 2

; 7915 : 
; 7916 : 			break;

  00048	eb 07		 jmp	 SHORT $LN2@get_defaul
$LN7@get_defaul:

; 7917 : 		}
; 7918 : 		////////////////////////////////////////
; 7919 : 		case KA50_MFD_LOCATION_ABRIS:
; 7920 : 		////////////////////////////////////////
; 7921 : 		{
; 7922 : 			mfd_mode = KA50_MFD_MODE_TSD;

  0004a	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 3
$LN2@get_defaul:

; 7923 : 
; 7924 : 			break;
; 7925 : 		}
; 7926 : 		////////////////////////////////////////
; 7927 : 	}
; 7928 : 
; 7929 : 	return (mfd_mode);

  00051	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]

; 7930 : }

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?get_default_mfd_mode@@YG?AW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z ENDP ; get_default_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_overlaid_mfd@@YGXPAUSCREEN@@W4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv291 = -380						; size = 4
tv90 = -380						; size = 4
_width$1 = -312						; size = 4
_specular$2 = -308					; size = 4
_colour$3 = -304					; size = 4
_quad$4 = -300						; size = 256
_store_background_colour$ = -44				; size = 4
_store_road_colour$ = -40				; size = 4
_store_river_colour$ = -36				; size = 4
_store_contour_colour$ = -32				; size = 4
_store_colour6$ = -28					; size = 4
_store_colour5$ = -24					; size = 4
_store_colour4$ = -20					; size = 4
_store_colour3$ = -16					; size = 4
_store_colour2$ = -12					; size = 4
_store_colour1$ = -8					; size = 4
_border_size$ = -4					; size = 4
_mfd_screen$ = 8					; size = 4
_mode$ = 12						; size = 4
_location$ = 16						; size = 4
?draw_overlaid_mfd@@YGXPAUSCREEN@@W4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z PROC ; draw_overlaid_mfd, COMDAT

; 7269 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 7c 01 00
	00		 sub	 esp, 380		; 0000017cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 7270 : 	float
; 7271 : 		border_size;
; 7272 : 
; 7273 : 	rgb_colour
; 7274 : 		store_colour1,
; 7275 : 		store_colour2,
; 7276 : 		store_colour3,
; 7277 : 		store_colour4,
; 7278 : 		store_colour5,
; 7279 : 		store_colour6,
; 7280 : 		store_contour_colour,
; 7281 : 		store_river_colour,
; 7282 : 		store_road_colour,
; 7283 : 		store_background_colour;
; 7284 : 
; 7285 : 	ASSERT (mfd_screen);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _mfd_screen$[ebp], 0
  00010	75 18		 jne	 SHORT $LN6@draw_overl
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_mfd@@YGXPAUSCREEN@@W4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z@4JA
  00017	83 c0 10	 add	 eax, 16			; 00000010H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DHCAJMOH@mfd_screen@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@draw_overl:

; 7286 : 
; 7287 : 	ASSERT (ka50_mfd_mode_valid (mode));

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _mode$[ebp], 0
  0002e	7c 06		 jl	 SHORT $LN8@draw_overl
  00030	83 7d 0c 0a	 cmp	 DWORD PTR _mode$[ebp], 10 ; 0000000aH
  00034	7c 18		 jl	 SHORT $LN7@draw_overl
$LN8@draw_overl:
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_mfd@@YGXPAUSCREEN@@W4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z@4JA
  0003b	83 c0 12	 add	 eax, 18			; 00000012H
  0003e	50		 push	 eax
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LNMELKLJ@ka50_mfd_mode_valid?5?$CImode?$CJ@
  00049	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@draw_overl:

; 7288 : 
; 7289 : 	ASSERT (ka50_mfd_location_valid (location));

  0004e	83 7d 10 00	 cmp	 DWORD PTR _location$[ebp], 0
  00052	7c 06		 jl	 SHORT $LN10@draw_overl
  00054	83 7d 10 02	 cmp	 DWORD PTR _location$[ebp], 2
  00058	7c 18		 jl	 SHORT $LN9@draw_overl
$LN10@draw_overl:
  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_overlaid_mfd@@YGXPAUSCREEN@@W4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z@4JA
  0005f	83 c0 14	 add	 eax, 20			; 00000014H
  00062	50		 push	 eax
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@NMFMNCJL@ka50_mfd_location_valid?5?$CIlocati@
  0006d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@draw_overl:

; 7290 : 
; 7291 : 	if (mode == KA50_MFD_MODE_OFF)

  00072	83 7d 0c 00	 cmp	 DWORD PTR _mode$[ebp], 0
  00076	75 05		 jne	 SHORT $LN11@draw_overl

; 7292 : 	{
; 7293 : 		return;

  00078	e9 a2 11 00 00	 jmp	 $LN1@draw_overl
$LN11@draw_overl:

; 7294 : 	}
; 7295 : 
; 7296 : 	////////////////////////////////////////
; 7297 : 	//
; 7298 : 	// scale position and size wrt screen resolution
; 7299 : 	//
; 7300 : 	////////////////////////////////////////
; 7301 : 
; 7302 : 	border_size = 4.0 * full_screen_width * (1.0 / 640.0);

  0007d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  00085	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4010000000000000
  0008d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f5999999999999a
  00095	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00099	f3 0f 11 45 fc	 movss	 DWORD PTR _border_size$[ebp], xmm0

; 7303 : 
; 7304 : 	if (get_global_unscaled_displays ())

  0009e	83 3d 74 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+884, 0
  000a5	74 12		 je	 SHORT $LN12@draw_overl

; 7305 : 	{
; 7306 : 		mfd_screen_width = mfd_viewport_size;

  000a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  000af	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_width@@3MA, xmm0

; 7307 : 	}
; 7308 : 	else

  000b7	eb 1c		 jmp	 SHORT $LN13@draw_overl
$LN12@draw_overl:

; 7309 : 	{
; 7310 : 		mfd_screen_width = full_screen_width * (128.0 / 640.0);

  000b9	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  000c1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc999999999999a
  000c9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000cd	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_width@@3MA, xmm0
$LN13@draw_overl:

; 7311 : 	}
; 7312 : 
; 7313 : 	mfd_screen_height = mfd_screen_width;

  000d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_width@@3MA
  000dd	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_height@@3MA, xmm0

; 7314 : 
; 7315 : 	switch (location)

  000e5	8b 45 10	 mov	 eax, DWORD PTR _location$[ebp]
  000e8	89 85 84 fe ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  000ee	83 bd 84 fe ff
	ff 00		 cmp	 DWORD PTR tv90[ebp], 0
  000f5	74 0b		 je	 SHORT $LN14@draw_overl
  000f7	83 bd 84 fe ff
	ff 01		 cmp	 DWORD PTR tv90[ebp], 1
  000fe	74 2e		 je	 SHORT $LN15@draw_overl
  00100	eb 66		 jmp	 SHORT $LN2@draw_overl
$LN14@draw_overl:

; 7316 : 	{
; 7317 : 		////////////////////////////////////////
; 7318 : 		case KA50_MFD_LOCATION_SHKVAL:
; 7319 : 		////////////////////////////////////////
; 7320 : 		{
; 7321 : 			mfd_screen_x_min = border_size;

  00102	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _border_size$[ebp]
  00107	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_min@@3MA, xmm0

; 7322 : 			mfd_screen_y_min = full_screen_height - border_size - mfd_screen_height;

  0010f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?full_screen_height@@3MA
  00117	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _border_size$[ebp]
  0011c	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_height@@3MA
  00124	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_min@@3MA, xmm0

; 7323 : 
; 7324 : 			break;

  0012c	eb 3a		 jmp	 SHORT $LN2@draw_overl
$LN15@draw_overl:

; 7325 : 		}
; 7326 : 		////////////////////////////////////////
; 7327 : 		case KA50_MFD_LOCATION_ABRIS:
; 7328 : 		////////////////////////////////////////
; 7329 : 		{
; 7330 : 			mfd_screen_x_min = full_screen_width - border_size - mfd_screen_width;

  0012e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?full_screen_width@@3MA
  00136	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _border_size$[ebp]
  0013b	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_width@@3MA
  00143	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_min@@3MA, xmm0

; 7331 : 			mfd_screen_y_min = full_screen_height - border_size - mfd_screen_height;

  0014b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?full_screen_height@@3MA
  00153	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR _border_size$[ebp]
  00158	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_height@@3MA
  00160	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_min@@3MA, xmm0
$LN2@draw_overl:

; 7332 : 
; 7333 : 			break;
; 7334 : 		}
; 7335 : 	}
; 7336 : 
; 7337 : 	mfd_screen_x_max = mfd_screen_x_min + mfd_screen_width - 0.0001;

  00168	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00170	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?mfd_screen_width@@3MA
  00178	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0017c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f1a36e2eb1c432d
  00184	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00188	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_max@@3MA, xmm0

; 7338 : 	mfd_screen_y_max = mfd_screen_y_min + mfd_screen_height - 0.0001;

  00190	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00198	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?mfd_screen_height@@3MA
  001a0	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001a4	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f1a36e2eb1c432d
  001ac	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001b0	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_max@@3MA, xmm0

; 7339 : 
; 7340 : 	mfd_screen_x_scale = mfd_viewport_size / mfd_screen_width;

  001b8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  001c0	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?mfd_screen_width@@3MA
  001c8	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_scale@@3MA, xmm0

; 7341 : 	mfd_screen_y_scale = mfd_viewport_size / mfd_screen_height;

  001d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  001d8	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?mfd_screen_height@@3MA
  001e0	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_scale@@3MA, xmm0

; 7342 : 
; 7343 : 	////////////////////////////////////////
; 7344 : 	//
; 7345 : 	// store colours
; 7346 : 	//
; 7347 : 	////////////////////////////////////////
; 7348 : 
; 7349 : 	store_colour1				= MFD_COLOUR1;

  001e8	b8 04 00 00 00	 mov	 eax, 4
  001ed	6b c8 00	 imul	 ecx, eax, 0
  001f0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001f6	89 55 f8	 mov	 DWORD PTR _store_colour1$[ebp], edx

; 7350 : 	store_colour2				= MFD_COLOUR2;

  001f9	b8 04 00 00 00	 mov	 eax, 4
  001fe	c1 e0 00	 shl	 eax, 0
  00201	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00207	89 4d f4	 mov	 DWORD PTR _store_colour2$[ebp], ecx

; 7351 : 	store_colour3				= MFD_COLOUR3;

  0020a	b8 04 00 00 00	 mov	 eax, 4
  0020f	d1 e0		 shl	 eax, 1
  00211	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00217	89 4d f0	 mov	 DWORD PTR _store_colour3$[ebp], ecx

; 7352 : 	store_colour4				= MFD_COLOUR4;

  0021a	b8 04 00 00 00	 mov	 eax, 4
  0021f	6b c8 03	 imul	 ecx, eax, 3
  00222	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00228	89 55 ec	 mov	 DWORD PTR _store_colour4$[ebp], edx

; 7353 : 	store_colour5				= MFD_COLOUR5;

  0022b	b8 04 00 00 00	 mov	 eax, 4
  00230	c1 e0 02	 shl	 eax, 2
  00233	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00239	89 4d e8	 mov	 DWORD PTR _store_colour5$[ebp], ecx

; 7354 : 	store_colour6				= MFD_COLOUR6;

  0023c	b8 04 00 00 00	 mov	 eax, 4
  00241	6b c8 05	 imul	 ecx, eax, 5
  00244	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0024a	89 55 e4	 mov	 DWORD PTR _store_colour6$[ebp], edx

; 7355 : 	store_contour_colour		= MFD_CONTOUR_COLOUR;

  0024d	b8 04 00 00 00	 mov	 eax, 4
  00252	6b c8 06	 imul	 ecx, eax, 6
  00255	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0025b	89 55 e0	 mov	 DWORD PTR _store_contour_colour$[ebp], edx

; 7356 : 	store_river_colour		= MFD_RIVER_COLOUR;

  0025e	b8 04 00 00 00	 mov	 eax, 4
  00263	6b c8 07	 imul	 ecx, eax, 7
  00266	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0026c	89 55 dc	 mov	 DWORD PTR _store_river_colour$[ebp], edx

; 7357 : 	store_road_colour			= MFD_ROAD_COLOUR;

  0026f	b8 04 00 00 00	 mov	 eax, 4
  00274	c1 e0 03	 shl	 eax, 3
  00277	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0027d	89 4d d8	 mov	 DWORD PTR _store_road_colour$[ebp], ecx

; 7358 : 	store_background_colour	= MFD_BACKGROUND_COLOUR;

  00280	b8 04 00 00 00	 mov	 eax, 4
  00285	6b c8 09	 imul	 ecx, eax, 9
  00288	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0028e	89 55 d4	 mov	 DWORD PTR _store_background_colour$[ebp], edx

; 7359 : 
; 7360 : 	set_rgb_colour (MFD_COLOUR1,            255, 255,   0, 255);

  00291	b8 04 00 00 00	 mov	 eax, 4
  00296	6b c8 00	 imul	 ecx, eax, 0
  00299	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  002a0	b8 04 00 00 00	 mov	 eax, 4
  002a5	6b c8 00	 imul	 ecx, eax, 0
  002a8	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  002af	b8 04 00 00 00	 mov	 eax, 4
  002b4	6b c8 00	 imul	 ecx, eax, 0
  002b7	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  002be	b8 04 00 00 00	 mov	 eax, 4
  002c3	6b c8 00	 imul	 ecx, eax, 0
  002c6	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 7361 : 	set_rgb_colour (MFD_COLOUR2,            200, 200,   0, 255);

  002cd	b8 04 00 00 00	 mov	 eax, 4
  002d2	c1 e0 00	 shl	 eax, 0
  002d5	c6 80 02 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 200 ; 000000c8H
  002dc	b8 04 00 00 00	 mov	 eax, 4
  002e1	c1 e0 00	 shl	 eax, 0
  002e4	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  002eb	b8 04 00 00 00	 mov	 eax, 4
  002f0	c1 e0 00	 shl	 eax, 0
  002f3	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  002fa	b8 04 00 00 00	 mov	 eax, 4
  002ff	c1 e0 00	 shl	 eax, 0
  00302	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 7362 : 	set_rgb_colour (MFD_COLOUR3,            176, 176,   0, 255);

  00309	b8 04 00 00 00	 mov	 eax, 4
  0030e	d1 e0		 shl	 eax, 1
  00310	c6 80 02 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 176 ; 000000b0H
  00317	b8 04 00 00 00	 mov	 eax, 4
  0031c	d1 e0		 shl	 eax, 1
  0031e	c6 80 01 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 176 ; 000000b0H
  00325	b8 04 00 00 00	 mov	 eax, 4
  0032a	d1 e0		 shl	 eax, 1
  0032c	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00333	b8 04 00 00 00	 mov	 eax, 4
  00338	d1 e0		 shl	 eax, 1
  0033a	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 7363 : 	set_rgb_colour (MFD_COLOUR4,            151, 151,   0, 255);

  00341	b8 04 00 00 00	 mov	 eax, 4
  00346	6b c8 03	 imul	 ecx, eax, 3
  00349	c6 81 02 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 151 ; 00000097H
  00350	b8 04 00 00 00	 mov	 eax, 4
  00355	6b c8 03	 imul	 ecx, eax, 3
  00358	c6 81 01 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 151 ; 00000097H
  0035f	b8 04 00 00 00	 mov	 eax, 4
  00364	6b c8 03	 imul	 ecx, eax, 3
  00367	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  0036e	b8 04 00 00 00	 mov	 eax, 4
  00373	6b c8 03	 imul	 ecx, eax, 3
  00376	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 7364 : 	set_rgb_colour (MFD_COLOUR5,            140, 140,   0, 255);

  0037d	b8 04 00 00 00	 mov	 eax, 4
  00382	c1 e0 02	 shl	 eax, 2
  00385	c6 80 02 00 00
	00 8c		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 140 ; 0000008cH
  0038c	b8 04 00 00 00	 mov	 eax, 4
  00391	c1 e0 02	 shl	 eax, 2
  00394	c6 80 01 00 00
	00 8c		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 140 ; 0000008cH
  0039b	b8 04 00 00 00	 mov	 eax, 4
  003a0	c1 e0 02	 shl	 eax, 2
  003a3	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  003aa	b8 04 00 00 00	 mov	 eax, 4
  003af	c1 e0 02	 shl	 eax, 2
  003b2	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 7365 : 	set_rgb_colour (MFD_COLOUR6,             80,  52,   8, 255);

  003b9	b8 04 00 00 00	 mov	 eax, 4
  003be	6b c8 05	 imul	 ecx, eax, 5
  003c1	c6 81 02 00 00
	00 50		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 80 ; 00000050H
  003c8	b8 04 00 00 00	 mov	 eax, 4
  003cd	6b c8 05	 imul	 ecx, eax, 5
  003d0	c6 81 01 00 00
	00 34		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 52 ; 00000034H
  003d7	b8 04 00 00 00	 mov	 eax, 4
  003dc	6b c8 05	 imul	 ecx, eax, 5
  003df	c6 81 00 00 00
	00 08		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 8
  003e6	b8 04 00 00 00	 mov	 eax, 4
  003eb	6b c8 05	 imul	 ecx, eax, 5
  003ee	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 7366 : 	set_rgb_colour (MFD_CONTOUR_COLOUR,     151, 151,   0, 255);

  003f5	b8 04 00 00 00	 mov	 eax, 4
  003fa	6b c8 06	 imul	 ecx, eax, 6
  003fd	c6 81 02 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 151 ; 00000097H
  00404	b8 04 00 00 00	 mov	 eax, 4
  00409	6b c8 06	 imul	 ecx, eax, 6
  0040c	c6 81 01 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 151 ; 00000097H
  00413	b8 04 00 00 00	 mov	 eax, 4
  00418	6b c8 06	 imul	 ecx, eax, 6
  0041b	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00422	b8 04 00 00 00	 mov	 eax, 4
  00427	6b c8 06	 imul	 ecx, eax, 6
  0042a	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 7367 : 	set_rgb_colour (MFD_RIVER_COLOUR,       176, 176,   0, 255);

  00431	b8 04 00 00 00	 mov	 eax, 4
  00436	6b c8 07	 imul	 ecx, eax, 7
  00439	c6 81 02 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 176 ; 000000b0H
  00440	b8 04 00 00 00	 mov	 eax, 4
  00445	6b c8 07	 imul	 ecx, eax, 7
  00448	c6 81 01 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 176 ; 000000b0H
  0044f	b8 04 00 00 00	 mov	 eax, 4
  00454	6b c8 07	 imul	 ecx, eax, 7
  00457	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  0045e	b8 04 00 00 00	 mov	 eax, 4
  00463	6b c8 07	 imul	 ecx, eax, 7
  00466	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 7368 : 	set_rgb_colour (MFD_ROAD_COLOUR,        200, 200,   0, 255);

  0046d	b8 04 00 00 00	 mov	 eax, 4
  00472	c1 e0 03	 shl	 eax, 3
  00475	c6 80 02 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 200 ; 000000c8H
  0047c	b8 04 00 00 00	 mov	 eax, 4
  00481	c1 e0 03	 shl	 eax, 3
  00484	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  0048b	b8 04 00 00 00	 mov	 eax, 4
  00490	c1 e0 03	 shl	 eax, 3
  00493	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  0049a	b8 04 00 00 00	 mov	 eax, 4
  0049f	c1 e0 03	 shl	 eax, 3
  004a2	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 7369 : 	set_rgb_colour (MFD_BACKGROUND_COLOUR,  255, 255, 255,   0);

  004a9	b8 04 00 00 00	 mov	 eax, 4
  004ae	6b c8 09	 imul	 ecx, eax, 9
  004b1	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  004b8	b8 04 00 00 00	 mov	 eax, 4
  004bd	6b c8 09	 imul	 ecx, eax, 9
  004c0	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  004c7	b8 04 00 00 00	 mov	 eax, 4
  004cc	6b c8 09	 imul	 ecx, eax, 9
  004cf	c6 81 00 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 255 ; 000000ffH
  004d6	b8 04 00 00 00	 mov	 eax, 4
  004db	6b c8 09	 imul	 ecx, eax, 9
  004de	c6 81 03 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 0

; 7370 : 
; 7371 : 	////////////////////////////////////////
; 7372 : 	//
; 7373 : 	// draw MFD display
; 7374 : 	//
; 7375 : 	////////////////////////////////////////
; 7376 : 
; 7377 : 	switch (mode)

  004e5	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  004e8	89 85 84 fe ff
	ff		 mov	 DWORD PTR tv291[ebp], eax
  004ee	83 bd 84 fe ff
	ff 09		 cmp	 DWORD PTR tv291[ebp], 9
  004f5	0f 87 77 08 00
	00		 ja	 $LN38@draw_overl
  004fb	8b 8d 84 fe ff
	ff		 mov	 ecx, DWORD PTR tv291[ebp]
  00501	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN46@draw_overl[ecx*4]
$LN16@draw_overl:

; 7378 : 	{
; 7379 : 		////////////////////////////////////////
; 7380 : 		case KA50_MFD_MODE_OFF:
; 7381 : 		////////////////////////////////////////
; 7382 : 		{
; 7383 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00508	51		 push	 ecx
  00509	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00511	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00516	51		 push	 ecx
  00517	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0051f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00524	51		 push	 ecx
  00525	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0052d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00532	51		 push	 ecx
  00533	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0053b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00540	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00545	50		 push	 eax
  00546	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 7384 : 
; 7385 : 			set_active_screen (mfd_screen);

  0054b	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0054e	50		 push	 eax
  0054f	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 7386 : 
; 7387 : 			if (lock_screen (mfd_screen))

  00554	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00557	50		 push	 eax
  00558	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  0055d	85 c0		 test	 eax, eax
  0055f	74 3a		 je	 SHORT $LN17@draw_overl

; 7388 : 			{
; 7389 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00561	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00566	50		 push	 eax
  00567	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  0056d	83 e9 01	 sub	 ecx, 1
  00570	51		 push	 ecx
  00571	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00577	83 ea 01	 sub	 edx, 1
  0057a	52		 push	 edx
  0057b	6a 00		 push	 0
  0057d	6a 00		 push	 0
  0057f	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 7390 : 
; 7391 : 				draw_layout_grid ();

  00584	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 7392 : 
; 7393 : 				flush_screen_texture_graphics (mfd_screen);

  00589	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0058c	50		 push	 eax
  0058d	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 7394 : 
; 7395 : 				unlock_screen (mfd_screen);

  00592	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00595	50		 push	 eax
  00596	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN17@draw_overl:

; 7396 : 			}
; 7397 : 
; 7398 : 			break;

  0059b	e9 e3 07 00 00	 jmp	 $LN4@draw_overl
$LN18@draw_overl:

; 7399 : 		}
; 7400 : 		////////////////////////////////////////
; 7401 : 		case KA50_MFD_MODE_DAMAGED:
; 7402 : 		////////////////////////////////////////
; 7403 : 		{
; 7404 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  005a0	51		 push	 ecx
  005a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  005a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ae	51		 push	 ecx
  005af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  005b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005bc	51		 push	 ecx
  005bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  005c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ca	51		 push	 ecx
  005cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  005d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d8	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 7405 : 
; 7406 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  005dd	51		 push	 ecx
  005de	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  005e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005eb	51		 push	 ecx
  005ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  005f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f9	51		 push	 ecx
  005fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00602	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00607	51		 push	 ecx
  00608	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00610	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00615	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0061a	50		 push	 eax
  0061b	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 7407 : 
; 7408 : 			set_active_screen (mfd_screen);

  00620	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00623	50		 push	 eax
  00624	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 7409 : 
; 7410 : 			if (lock_screen (mfd_screen))

  00629	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0062c	50		 push	 eax
  0062d	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00632	85 c0		 test	 eax, eax
  00634	74 3f		 je	 SHORT $LN19@draw_overl

; 7411 : 			{
; 7412 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00636	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0063b	50		 push	 eax
  0063c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00642	83 e9 01	 sub	 ecx, 1
  00645	51		 push	 ecx
  00646	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  0064c	83 ea 01	 sub	 edx, 1
  0064f	52		 push	 edx
  00650	6a 00		 push	 0
  00652	6a 00		 push	 0
  00654	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 7413 : 
; 7414 : 				draw_layout_grid ();

  00659	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 7415 : 
; 7416 : 				draw_overlaid_damaged_mfd ();

  0065e	e8 00 00 00 00	 call	 ?draw_overlaid_damaged_mfd@@YGXXZ ; draw_overlaid_damaged_mfd

; 7417 : 
; 7418 : 				flush_screen_texture_graphics (mfd_screen);

  00663	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00666	50		 push	 eax
  00667	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 7419 : 
; 7420 : 				unlock_screen (mfd_screen);

  0066c	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0066f	50		 push	 eax
  00670	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN19@draw_overl:

; 7421 : 			}
; 7422 : 
; 7423 : 			break;

  00675	e9 09 07 00 00	 jmp	 $LN4@draw_overl
$LN20@draw_overl:

; 7424 : 		}
; 7425 : 		////////////////////////////////////////
; 7426 : 		case KA50_MFD_MODE_FLIR:
; 7427 : 		////////////////////////////////////////
; 7428 : 		{
; 7429 : 			if (!ka50_damage.flir)

  0067a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  0067f	83 e0 01	 and	 eax, 1
  00682	75 10		 jne	 SHORT $LN21@draw_overl

; 7430 : 			{
; 7431 : 				draw_full_screen_3d_eo_display (&ka50_flir, TARGET_ACQUISITION_SYSTEM_FLIR, DISPLAY_3D_TINT_AMBER);

  00684	6a 01		 push	 1
  00686	6a 03		 push	 3
  00688	68 00 00 00 00	 push	 OFFSET ?ka50_flir@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; ka50_flir
  0068d	e8 00 00 00 00	 call	 ?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z ; draw_full_screen_3d_eo_display

; 7432 : 			}
; 7433 : 			else

  00692	eb 3d		 jmp	 SHORT $LN22@draw_overl
$LN21@draw_overl:

; 7434 : 			{
; 7435 : 				draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00694	51		 push	 ecx
  00695	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  0069d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a2	51		 push	 ecx
  006a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  006ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b0	51		 push	 ecx
  006b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  006b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006be	51		 push	 ecx
  006bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  006c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006cc	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background
$LN22@draw_overl:

; 7436 : 			}
; 7437 : 
; 7438 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  006d1	51		 push	 ecx
  006d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  006da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006df	51		 push	 ecx
  006e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  006e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ed	51		 push	 ecx
  006ee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  006f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006fb	51		 push	 ecx
  006fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00704	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00709	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0070e	50		 push	 eax
  0070f	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 7439 : 
; 7440 : 			set_active_screen (mfd_screen);

  00714	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00717	50		 push	 eax
  00718	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 7441 : 
; 7442 : 			if (lock_screen (mfd_screen))

  0071d	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00720	50		 push	 eax
  00721	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00726	85 c0		 test	 eax, eax
  00728	74 41		 je	 SHORT $LN23@draw_overl

; 7443 : 			{
; 7444 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  0072a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0072f	50		 push	 eax
  00730	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00736	83 e9 01	 sub	 ecx, 1
  00739	51		 push	 ecx
  0073a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00740	83 ea 01	 sub	 edx, 1
  00743	52		 push	 edx
  00744	6a 00		 push	 0
  00746	6a 00		 push	 0
  00748	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 7445 : 
; 7446 : 				draw_layout_grid ();

  0074d	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 7447 : 
; 7448 : 				draw_2d_flir_mfd (TRUE);

  00752	6a 01		 push	 1
  00754	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXH@Z ; draw_2d_flir_mfd

; 7449 : 
; 7450 : 				flush_screen_texture_graphics (mfd_screen);

  00759	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0075c	50		 push	 eax
  0075d	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 7451 : 
; 7452 : 				unlock_screen (mfd_screen);

  00762	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00765	50		 push	 eax
  00766	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN23@draw_overl:

; 7453 : 			}
; 7454 : 
; 7455 : 			set_pilots_full_screen_params (FALSE);

  0076b	6a 00		 push	 0
  0076d	e8 00 00 00 00	 call	 ?set_pilots_full_screen_params@@YGXH@Z ; set_pilots_full_screen_params

; 7456 : 
; 7457 : 			break;

  00772	e9 0c 06 00 00	 jmp	 $LN4@draw_overl
$LN24@draw_overl:

; 7458 : 		}
; 7459 : 		////////////////////////////////////////
; 7460 : 		case KA50_MFD_MODE_TSD:
; 7461 : 		////////////////////////////////////////
; 7462 : 		{
; 7463 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00777	51		 push	 ecx
  00778	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00780	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00785	51		 push	 ecx
  00786	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  0078e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00793	51		 push	 ecx
  00794	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  0079c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a1	51		 push	 ecx
  007a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  007aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007af	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 7464 : 
; 7465 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  007b4	51		 push	 ecx
  007b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  007bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c2	51		 push	 ecx
  007c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  007cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d0	51		 push	 ecx
  007d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  007d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007de	51		 push	 ecx
  007df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  007e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  007f1	50		 push	 eax
  007f2	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 7466 : 
; 7467 : 			set_active_screen (mfd_screen);

  007f7	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  007fa	50		 push	 eax
  007fb	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 7468 : 
; 7469 : 			if (lock_screen (mfd_screen))

  00800	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00803	50		 push	 eax
  00804	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00809	85 c0		 test	 eax, eax
  0080b	74 43		 je	 SHORT $LN25@draw_overl

; 7470 : 			{
; 7471 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  0080d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00812	50		 push	 eax
  00813	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00819	83 e9 01	 sub	 ecx, 1
  0081c	51		 push	 ecx
  0081d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00823	83 ea 01	 sub	 edx, 1
  00826	52		 push	 edx
  00827	6a 00		 push	 0
  00829	6a 00		 push	 0
  0082b	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 7472 : 
; 7473 : 				draw_layout_grid ();

  00830	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 7474 : 
; 7475 : 				draw_tactical_situation_display_mfd (location);

  00835	8b 45 10	 mov	 eax, DWORD PTR _location$[ebp]
  00838	50		 push	 eax
  00839	e8 00 00 00 00	 call	 ?draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z ; draw_tactical_situation_display_mfd

; 7476 : 
; 7477 : 				flush_screen_texture_graphics (mfd_screen);

  0083e	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00841	50		 push	 eax
  00842	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 7478 : 
; 7479 : 				unlock_screen (mfd_screen);

  00847	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0084a	50		 push	 eax
  0084b	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN25@draw_overl:

; 7480 : 			}
; 7481 : 
; 7482 : 			break;

  00850	e9 2e 05 00 00	 jmp	 $LN4@draw_overl
$LN26@draw_overl:

; 7483 : 		}
; 7484 : 		////////////////////////////////////////
; 7485 : 		case KA50_MFD_MODE_ASE:
; 7486 : 		////////////////////////////////////////
; 7487 : 		{
; 7488 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00855	51		 push	 ecx
  00856	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  0085e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00863	51		 push	 ecx
  00864	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  0086c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00871	51		 push	 ecx
  00872	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  0087a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0087f	51		 push	 ecx
  00880	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00888	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0088d	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 7489 : 
; 7490 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00892	51		 push	 ecx
  00893	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0089b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a0	51		 push	 ecx
  008a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  008a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ae	51		 push	 ecx
  008af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  008b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008bc	51		 push	 ecx
  008bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  008c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  008cf	50		 push	 eax
  008d0	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 7491 : 
; 7492 : 			set_active_screen (mfd_screen);

  008d5	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  008d8	50		 push	 eax
  008d9	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 7493 : 
; 7494 : 			if (lock_screen (mfd_screen))

  008de	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  008e1	50		 push	 eax
  008e2	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  008e7	85 c0		 test	 eax, eax
  008e9	74 43		 je	 SHORT $LN27@draw_overl

; 7495 : 			{
; 7496 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  008eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  008f0	50		 push	 eax
  008f1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  008f7	83 e9 01	 sub	 ecx, 1
  008fa	51		 push	 ecx
  008fb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00901	83 ea 01	 sub	 edx, 1
  00904	52		 push	 edx
  00905	6a 00		 push	 0
  00907	6a 00		 push	 0
  00909	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 7497 : 
; 7498 : 				draw_layout_grid ();

  0090e	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 7499 : 
; 7500 : 				draw_aircraft_survivability_equipment_display_mfd (location);

  00913	8b 45 10	 mov	 eax, DWORD PTR _location$[ebp]
  00916	50		 push	 eax
  00917	e8 00 00 00 00	 call	 ?draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z ; draw_aircraft_survivability_equipment_display_mfd

; 7501 : 
; 7502 : 				flush_screen_texture_graphics (mfd_screen);

  0091c	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0091f	50		 push	 eax
  00920	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 7503 : 
; 7504 : 				unlock_screen (mfd_screen);

  00925	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00928	50		 push	 eax
  00929	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN27@draw_overl:

; 7505 : 			}
; 7506 : 
; 7507 : 			break;

  0092e	e9 50 04 00 00	 jmp	 $LN4@draw_overl
$LN28@draw_overl:

; 7508 : 		}
; 7509 : 		////////////////////////////////////////
; 7510 : 		case KA50_MFD_MODE_WEAPON:
; 7511 : 		////////////////////////////////////////
; 7512 : 		{
; 7513 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00933	51		 push	 ecx
  00934	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  0093c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00941	51		 push	 ecx
  00942	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  0094a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0094f	51		 push	 ecx
  00950	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00958	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0095d	51		 push	 ecx
  0095e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00966	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0096b	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 7514 : 
; 7515 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00970	51		 push	 ecx
  00971	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00979	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0097e	51		 push	 ecx
  0097f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00987	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0098c	51		 push	 ecx
  0098d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00995	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0099a	51		 push	 ecx
  0099b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  009a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  009ad	50		 push	 eax
  009ae	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 7516 : 
; 7517 : 			set_active_screen (mfd_screen);

  009b3	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  009b6	50		 push	 eax
  009b7	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 7518 : 
; 7519 : 			if (lock_screen (mfd_screen))

  009bc	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  009bf	50		 push	 eax
  009c0	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  009c5	85 c0		 test	 eax, eax
  009c7	74 3f		 je	 SHORT $LN29@draw_overl

; 7520 : 			{
; 7521 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  009c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  009ce	50		 push	 eax
  009cf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  009d5	83 e9 01	 sub	 ecx, 1
  009d8	51		 push	 ecx
  009d9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  009df	83 ea 01	 sub	 edx, 1
  009e2	52		 push	 edx
  009e3	6a 00		 push	 0
  009e5	6a 00		 push	 0
  009e7	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 7522 : 
; 7523 : 				draw_layout_grid ();

  009ec	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 7524 : 
; 7525 : 				draw_weapon_display_mfd ();

  009f1	e8 00 00 00 00	 call	 ?draw_weapon_display_mfd@@YGXXZ ; draw_weapon_display_mfd

; 7526 : 
; 7527 : 				flush_screen_texture_graphics (mfd_screen);

  009f6	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  009f9	50		 push	 eax
  009fa	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 7528 : 
; 7529 : 				unlock_screen (mfd_screen);

  009ff	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00a02	50		 push	 eax
  00a03	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN29@draw_overl:

; 7530 : 			}
; 7531 : 
; 7532 : 			break;

  00a08	e9 76 03 00 00	 jmp	 $LN4@draw_overl
$LN30@draw_overl:

; 7533 : 		}
; 7534 : 		////////////////////////////////////////
; 7535 : 		case KA50_MFD_MODE_SYSTEM:
; 7536 : 		////////////////////////////////////////
; 7537 : 		{
; 7538 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00a0d	51		 push	 ecx
  00a0e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00a16	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a1b	51		 push	 ecx
  00a1c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00a24	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a29	51		 push	 ecx
  00a2a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00a32	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a37	51		 push	 ecx
  00a38	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00a40	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a45	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 7539 : 
; 7540 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00a4a	51		 push	 ecx
  00a4b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00a53	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a58	51		 push	 ecx
  00a59	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00a61	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a66	51		 push	 ecx
  00a67	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00a6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a74	51		 push	 ecx
  00a75	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00a7d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a82	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00a87	50		 push	 eax
  00a88	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 7541 : 
; 7542 : 			set_active_screen (mfd_screen);

  00a8d	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00a90	50		 push	 eax
  00a91	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 7543 : 
; 7544 : 			if (lock_screen (mfd_screen))

  00a96	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00a99	50		 push	 eax
  00a9a	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00a9f	85 c0		 test	 eax, eax
  00aa1	74 3f		 je	 SHORT $LN31@draw_overl

; 7545 : 			{
; 7546 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00aa3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00aa8	50		 push	 eax
  00aa9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00aaf	83 e9 01	 sub	 ecx, 1
  00ab2	51		 push	 ecx
  00ab3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00ab9	83 ea 01	 sub	 edx, 1
  00abc	52		 push	 edx
  00abd	6a 00		 push	 0
  00abf	6a 00		 push	 0
  00ac1	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 7547 : 
; 7548 : 				draw_layout_grid ();

  00ac6	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 7549 : 
; 7550 : 				draw_system_display_mfd ();

  00acb	e8 00 00 00 00	 call	 ?draw_system_display_mfd@@YGXXZ ; draw_system_display_mfd

; 7551 : 
; 7552 : 				flush_screen_texture_graphics (mfd_screen);

  00ad0	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00ad3	50		 push	 eax
  00ad4	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 7553 : 
; 7554 : 				unlock_screen (mfd_screen);

  00ad9	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00adc	50		 push	 eax
  00add	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN31@draw_overl:

; 7555 : 			}
; 7556 : 
; 7557 : 			break;

  00ae2	e9 9c 02 00 00	 jmp	 $LN4@draw_overl
$LN32@draw_overl:

; 7558 : 		}
; 7559 : 		////////////////////////////////////////
; 7560 : 		case KA50_MFD_MODE_ENGINE:
; 7561 : 		////////////////////////////////////////
; 7562 : 		{
; 7563 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00ae7	51		 push	 ecx
  00ae8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00af0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00af5	51		 push	 ecx
  00af6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00afe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b03	51		 push	 ecx
  00b04	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00b0c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b11	51		 push	 ecx
  00b12	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00b1a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b1f	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 7564 : 
; 7565 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00b24	51		 push	 ecx
  00b25	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00b2d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b32	51		 push	 ecx
  00b33	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00b3b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b40	51		 push	 ecx
  00b41	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00b49	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b4e	51		 push	 ecx
  00b4f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00b57	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b5c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00b61	50		 push	 eax
  00b62	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 7566 : 
; 7567 : 			set_active_screen (mfd_screen);

  00b67	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00b6a	50		 push	 eax
  00b6b	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 7568 : 
; 7569 : 			if (lock_screen (mfd_screen))

  00b70	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00b73	50		 push	 eax
  00b74	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00b79	85 c0		 test	 eax, eax
  00b7b	74 3f		 je	 SHORT $LN33@draw_overl

; 7570 : 			{
; 7571 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00b7d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00b82	50		 push	 eax
  00b83	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00b89	83 e9 01	 sub	 ecx, 1
  00b8c	51		 push	 ecx
  00b8d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00b93	83 ea 01	 sub	 edx, 1
  00b96	52		 push	 edx
  00b97	6a 00		 push	 0
  00b99	6a 00		 push	 0
  00b9b	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 7572 : 
; 7573 : 				draw_layout_grid ();

  00ba0	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 7574 : 
; 7575 : 				draw_engine_display_mfd ();

  00ba5	e8 00 00 00 00	 call	 ?draw_engine_display_mfd@@YGXXZ ; draw_engine_display_mfd

; 7576 : 
; 7577 : 				flush_screen_texture_graphics (mfd_screen);

  00baa	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00bad	50		 push	 eax
  00bae	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 7578 : 
; 7579 : 				unlock_screen (mfd_screen);

  00bb3	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00bb6	50		 push	 eax
  00bb7	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN33@draw_overl:

; 7580 : 			}
; 7581 : 
; 7582 : 			break;

  00bbc	e9 c2 01 00 00	 jmp	 $LN4@draw_overl
$LN34@draw_overl:

; 7583 : 		}
; 7584 : 		////////////////////////////////////////
; 7585 : 		case KA50_MFD_MODE_FLIGHT:
; 7586 : 		////////////////////////////////////////
; 7587 : 		{
; 7588 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00bc1	51		 push	 ecx
  00bc2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00bca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bcf	51		 push	 ecx
  00bd0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00bd8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bdd	51		 push	 ecx
  00bde	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00be6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00beb	51		 push	 ecx
  00bec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00bf4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bf9	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 7589 : 
; 7590 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00bfe	51		 push	 ecx
  00bff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00c07	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c0c	51		 push	 ecx
  00c0d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00c15	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c1a	51		 push	 ecx
  00c1b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00c23	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c28	51		 push	 ecx
  00c29	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00c31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c36	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00c3b	50		 push	 eax
  00c3c	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 7591 : 
; 7592 : 			set_active_screen (mfd_screen);

  00c41	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00c44	50		 push	 eax
  00c45	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 7593 : 
; 7594 : 			if (lock_screen (mfd_screen))

  00c4a	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00c4d	50		 push	 eax
  00c4e	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00c53	85 c0		 test	 eax, eax
  00c55	74 3f		 je	 SHORT $LN35@draw_overl

; 7595 : 			{
; 7596 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00c57	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00c5c	50		 push	 eax
  00c5d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00c63	83 e9 01	 sub	 ecx, 1
  00c66	51		 push	 ecx
  00c67	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00c6d	83 ea 01	 sub	 edx, 1
  00c70	52		 push	 edx
  00c71	6a 00		 push	 0
  00c73	6a 00		 push	 0
  00c75	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 7597 : 
; 7598 : 				draw_layout_grid ();

  00c7a	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 7599 : 
; 7600 : 				draw_flight_display_mfd ();

  00c7f	e8 00 00 00 00	 call	 ?draw_flight_display_mfd@@YGXXZ ; draw_flight_display_mfd

; 7601 : 
; 7602 : 				flush_screen_texture_graphics (mfd_screen);

  00c84	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00c87	50		 push	 eax
  00c88	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 7603 : 
; 7604 : 				unlock_screen (mfd_screen);

  00c8d	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00c90	50		 push	 eax
  00c91	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN35@draw_overl:

; 7605 : 			}
; 7606 : 
; 7607 : 			break;

  00c96	e9 e8 00 00 00	 jmp	 $LN4@draw_overl
$LN36@draw_overl:

; 7608 : 		}
; 7609 : 		////////////////////////////////////////
; 7610 : 		case KA50_MFD_MODE_MISSION:
; 7611 : 		////////////////////////////////////////
; 7612 : 		{
; 7613 : 			draw_translucent_mfd_background (mfd_screen_x_min, mfd_screen_y_min, mfd_screen_x_max, mfd_screen_y_max);

  00c9b	51		 push	 ecx
  00c9c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00ca4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ca9	51		 push	 ecx
  00caa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00cb2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cb7	51		 push	 ecx
  00cb8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00cc0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cc5	51		 push	 ecx
  00cc6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00cce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cd3	e8 00 00 00 00	 call	 ?draw_translucent_mfd_background@@YGXMMMM@Z ; draw_translucent_mfd_background

; 7614 : 
; 7615 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00cd8	51		 push	 ecx
  00cd9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00ce1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ce6	51		 push	 ecx
  00ce7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00cef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cf4	51		 push	 ecx
  00cf5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00cfd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d02	51		 push	 ecx
  00d03	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00d0b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d10	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00d15	50		 push	 eax
  00d16	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 7616 : 
; 7617 : 			set_active_screen (mfd_screen);

  00d1b	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00d1e	50		 push	 eax
  00d1f	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 7618 : 
; 7619 : 			if (lock_screen (mfd_screen))

  00d24	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00d27	50		 push	 eax
  00d28	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00d2d	85 c0		 test	 eax, eax
  00d2f	74 3f		 je	 SHORT $LN37@draw_overl

; 7620 : 			{
; 7621 : 				set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, clear_mfd_colour);

  00d31	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00d36	50		 push	 eax
  00d37	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00d3d	83 e9 01	 sub	 ecx, 1
  00d40	51		 push	 ecx
  00d41	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00d47	83 ea 01	 sub	 edx, 1
  00d4a	52		 push	 edx
  00d4b	6a 00		 push	 0
  00d4d	6a 00		 push	 0
  00d4f	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 7622 : 
; 7623 : 				draw_layout_grid ();

  00d54	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 7624 : 
; 7625 : 				draw_mission_display_mfd ();

  00d59	e8 00 00 00 00	 call	 ?draw_mission_display_mfd@@YGXXZ ; draw_mission_display_mfd

; 7626 : 
; 7627 : 				flush_screen_texture_graphics (mfd_screen);

  00d5e	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00d61	50		 push	 eax
  00d62	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 7628 : 
; 7629 : 				unlock_screen (mfd_screen);

  00d67	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00d6a	50		 push	 eax
  00d6b	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN37@draw_overl:

; 7630 : 			}
; 7631 : 
; 7632 : 			break;

  00d70	eb 11		 jmp	 SHORT $LN4@draw_overl
$LN38@draw_overl:

; 7633 : 		}
; 7634 : 		////////////////////////////////////////
; 7635 : 		default:
; 7636 : 		////////////////////////////////////////
; 7637 : 		{
; 7638 : 			debug_fatal ("Invalid main MFD mode = %d", mode);

  00d72	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  00d75	50		 push	 eax
  00d76	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@EJABPDDO@Invalid?5main?5MFD?5mode?5?$DN?5?$CFd@
  00d7b	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00d80	83 c4 08	 add	 esp, 8
$LN4@draw_overl:

; 7639 : 
; 7640 : 			break;
; 7641 : 		}
; 7642 : 	}
; 7643 : 
; 7644 : 	set_active_screen (video_screen);

  00d83	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00d88	50		 push	 eax
  00d89	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 7645 : 
; 7646 : 	////////////////////////////////////////
; 7647 : 	//
; 7648 : 	// render MFD to screen
; 7649 : 	//
; 7650 : 	////////////////////////////////////////
; 7651 : 	{
; 7652 : 		vertex
; 7653 : 			quad[4];
; 7654 : 
; 7655 : 		real_colour
; 7656 : 			colour,
; 7657 : 			specular;
; 7658 : 
; 7659 : 		set_3d_active_environment (main_3d_env);

  00d8e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  00d93	50		 push	 eax
  00d94	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 7660 : 
; 7661 : 		if (begin_3d_scene ())

  00d99	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  00d9e	85 c0		 test	 eax, eax
  00da0	0f 84 d0 03 00
	00		 je	 $LN39@draw_overl

; 7662 : 		{
; 7663 : 			set_d3d_transparency_on ();

  00da6	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 7664 : 
; 7665 : 			set_d3d_zbuffer_comparison (FALSE);

  00dab	6a 00		 push	 0
  00dad	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 7666 : 
; 7667 : 			set_d3d_culling (FALSE);

  00db2	6a 00		 push	 0
  00db4	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 7668 : 
; 7669 : 			set_d3d_texture_wrapping (0, FALSE);

  00db9	6a 00		 push	 0
  00dbb	6a 00		 push	 0
  00dbd	e8 00 00 00 00	 call	 ?set_d3d_texture_wrapping@@YGXHH@Z ; set_d3d_texture_wrapping

; 7670 : 
; 7671 : 			{
; 7672 : 				int
; 7673 : 					width;
; 7674 : 
; 7675 :    			if (application_video_width >= 1280)

  00dc2	81 3d 00 00 00
	00 00 05 00 00	 cmp	 DWORD PTR ?application_video_width@@3HA, 1280 ; application_video_width, 00000500H
  00dcc	7c 0c		 jl	 SHORT $LN40@draw_overl

; 7676 : 				{
; 7677 : 					width = 1280;

  00dce	c7 85 c8 fe ff
	ff 00 05 00 00	 mov	 DWORD PTR _width$1[ebp], 1280 ; 00000500H

; 7678 : 				}
; 7679 : 				else

  00dd8	eb 0a		 jmp	 SHORT $LN41@draw_overl
$LN40@draw_overl:

; 7680 : 				{
; 7681 : 					width = 640;

  00dda	c7 85 c8 fe ff
	ff 80 02 00 00	 mov	 DWORD PTR _width$1[ebp], 640 ; 00000280H
$LN41@draw_overl:

; 7682 : 				}
; 7683 : 
; 7684 : 				if ((application_video_width == width) || (get_global_unscaled_displays ()))

  00de4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?application_video_width@@3HA ; application_video_width
  00de9	3b 85 c8 fe ff
	ff		 cmp	 eax, DWORD PTR _width$1[ebp]
  00def	74 09		 je	 SHORT $LN44@draw_overl
  00df1	83 3d 74 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+884, 0
  00df8	74 17		 je	 SHORT $LN42@draw_overl
$LN44@draw_overl:

; 7685 : 				{
; 7686 : 					set_d3d_texture_mag_filtering (FALSE);

  00dfa	6a 00		 push	 0
  00dfc	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 7687 : 					set_d3d_texture_min_filtering (FALSE);

  00e01	6a 00		 push	 0
  00e03	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 7688 : 					set_d3d_texture_mip_filtering (FALSE);

  00e08	6a 00		 push	 0
  00e0a	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering

; 7689 : 				}
; 7690 : 				else

  00e0f	eb 15		 jmp	 SHORT $LN43@draw_overl
$LN42@draw_overl:

; 7691 : 				{
; 7692 : 					set_d3d_texture_mag_filtering (TRUE);

  00e11	6a 01		 push	 1
  00e13	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 7693 : 					set_d3d_texture_min_filtering (TRUE);

  00e18	6a 01		 push	 1
  00e1a	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 7694 : 					set_d3d_texture_mip_filtering (FALSE);

  00e1f	6a 00		 push	 0
  00e21	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering
$LN43@draw_overl:

; 7695 : 				}
; 7696 : 			}
; 7697 : 
; 7698 : 			set_d3d_flat_shaded_textured_renderstate (mfd_screen);

  00e26	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00e29	50		 push	 eax
  00e2a	e8 00 00 00 00	 call	 ?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z ; set_d3d_flat_shaded_textured_renderstate

; 7699 : 
; 7700 :       	////////////////////////////////////////
; 7701 :       	//
; 7702 : 
; 7703 : 			colour.red				= MFD_COLOUR1.r;

  00e2f	b8 04 00 00 00	 mov	 eax, 4
  00e34	6b c8 00	 imul	 ecx, eax, 0
  00e37	8a 91 02 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2]
  00e3d	88 95 d2 fe ff
	ff		 mov	 BYTE PTR _colour$3[ebp+2], dl

; 7704 : 			colour.green			= MFD_COLOUR1.g;

  00e43	b8 04 00 00 00	 mov	 eax, 4
  00e48	6b c8 00	 imul	 ecx, eax, 0
  00e4b	8a 91 01 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1]
  00e51	88 95 d1 fe ff
	ff		 mov	 BYTE PTR _colour$3[ebp+1], dl

; 7705 : 			colour.blue				= MFD_COLOUR1.b;

  00e57	b8 04 00 00 00	 mov	 eax, 4
  00e5c	6b c8 00	 imul	 ecx, eax, 0
  00e5f	8a 91 00 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e65	88 95 d0 fe ff
	ff		 mov	 BYTE PTR _colour$3[ebp], dl

; 7706 : 			colour.alpha			= MFD_COLOUR1.a;

  00e6b	b8 04 00 00 00	 mov	 eax, 4
  00e70	6b c8 00	 imul	 ecx, eax, 0
  00e73	8a 91 03 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3]
  00e79	88 95 d3 fe ff
	ff		 mov	 BYTE PTR _colour$3[ebp+3], dl

; 7707 : 
; 7708 : 			specular.red			= 0;

  00e7f	c6 85 ce fe ff
	ff 00		 mov	 BYTE PTR _specular$2[ebp+2], 0

; 7709 : 			specular.green			= 0;

  00e86	c6 85 cd fe ff
	ff 00		 mov	 BYTE PTR _specular$2[ebp+1], 0

; 7710 : 			specular.blue			= 0;

  00e8d	c6 85 cc fe ff
	ff 00		 mov	 BYTE PTR _specular$2[ebp], 0

; 7711 : 			specular.alpha			= 255;

  00e94	c6 85 cf fe ff
	ff ff		 mov	 BYTE PTR _specular$2[ebp+3], 255 ; 000000ffH

; 7712 : 
; 7713 : 			quad[0].i				= mfd_screen_x_min;

  00e9b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00ea0	6b c8 00	 imul	 ecx, eax, 0
  00ea3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00eab	f3 0f 11 84 0d
	e4 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+16], xmm0

; 7714 : 			quad[0].j	  			= mfd_screen_y_min;

  00eb4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00eb9	6b c8 00	 imul	 ecx, eax, 0
  00ebc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00ec4	f3 0f 11 84 0d
	e8 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+20], xmm0

; 7715 : 			quad[0].z	  			= 0.5;

  00ecd	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00ed2	6b c8 00	 imul	 ecx, eax, 0
  00ed5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00edd	f3 0f 11 84 0d
	dc fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+8], xmm0

; 7716 : 			quad[0].q	  			= 0.5;

  00ee6	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00eeb	6b c8 00	 imul	 ecx, eax, 0
  00eee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00ef6	f3 0f 11 84 0d
	e0 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+12], xmm0

; 7717 : 			quad[0].u	  			= 0.0;

  00eff	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f04	6b c8 00	 imul	 ecx, eax, 0
  00f07	0f 57 c0	 xorps	 xmm0, xmm0
  00f0a	f3 0f 11 84 0d
	ec fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+24], xmm0

; 7718 : 			quad[0].v	  			= 0.0;

  00f13	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f18	6b c8 00	 imul	 ecx, eax, 0
  00f1b	0f 57 c0	 xorps	 xmm0, xmm0
  00f1e	f3 0f 11 84 0d
	f0 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+28], xmm0

; 7719 : 
; 7720 : 			quad[1].i				= mfd_screen_x_max;

  00f27	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f2c	c1 e0 00	 shl	 eax, 0
  00f2f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00f37	f3 0f 11 84 05
	e4 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+16], xmm0

; 7721 : 			quad[1].j  				= mfd_screen_y_min;

  00f40	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f45	c1 e0 00	 shl	 eax, 0
  00f48	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00f50	f3 0f 11 84 05
	e8 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+20], xmm0

; 7722 : 			quad[1].z  				= 0.5;

  00f59	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f5e	c1 e0 00	 shl	 eax, 0
  00f61	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00f69	f3 0f 11 84 05
	dc fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+8], xmm0

; 7723 : 			quad[1].q  				= 0.5;

  00f72	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f77	c1 e0 00	 shl	 eax, 0
  00f7a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00f82	f3 0f 11 84 05
	e0 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+12], xmm0

; 7724 : 			quad[1].u  				= 1.0;

  00f8b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00f90	c1 e0 00	 shl	 eax, 0
  00f93	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00f9b	f3 0f 11 84 05
	ec fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+24], xmm0

; 7725 : 			quad[1].v  				= 0.0;

  00fa4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00fa9	c1 e0 00	 shl	 eax, 0
  00fac	0f 57 c0	 xorps	 xmm0, xmm0
  00faf	f3 0f 11 84 05
	f0 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+28], xmm0

; 7726 : 
; 7727 : 			quad[2].i				= mfd_screen_x_max;

  00fb8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00fbd	d1 e0		 shl	 eax, 1
  00fbf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00fc7	f3 0f 11 84 05
	e4 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+16], xmm0

; 7728 : 			quad[2].j 				= mfd_screen_y_max;

  00fd0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00fd5	d1 e0		 shl	 eax, 1
  00fd7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00fdf	f3 0f 11 84 05
	e8 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+20], xmm0

; 7729 : 			quad[2].z  				= 0.5;

  00fe8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00fed	d1 e0		 shl	 eax, 1
  00fef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00ff7	f3 0f 11 84 05
	dc fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+8], xmm0

; 7730 : 			quad[2].q  				= 0.5;

  01000	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01005	d1 e0		 shl	 eax, 1
  01007	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0100f	f3 0f 11 84 05
	e0 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+12], xmm0

; 7731 : 			quad[2].u  				= 1.0;

  01018	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0101d	d1 e0		 shl	 eax, 1
  0101f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01027	f3 0f 11 84 05
	ec fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+24], xmm0

; 7732 : 			quad[2].v  				= 1.0;

  01030	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01035	d1 e0		 shl	 eax, 1
  01037	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0103f	f3 0f 11 84 05
	f0 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+eax+28], xmm0

; 7733 : 
; 7734 : 			quad[3].i				= mfd_screen_x_min;

  01048	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0104d	6b c8 03	 imul	 ecx, eax, 3
  01050	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  01058	f3 0f 11 84 0d
	e4 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+16], xmm0

; 7735 : 			quad[3].j				= mfd_screen_y_max;

  01061	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01066	6b c8 03	 imul	 ecx, eax, 3
  01069	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  01071	f3 0f 11 84 0d
	e8 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+20], xmm0

; 7736 : 			quad[3].z				= 0.5;

  0107a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0107f	6b c8 03	 imul	 ecx, eax, 3
  01082	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0108a	f3 0f 11 84 0d
	dc fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+8], xmm0

; 7737 : 			quad[3].q				= 0.5;

  01093	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01098	6b c8 03	 imul	 ecx, eax, 3
  0109b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  010a3	f3 0f 11 84 0d
	e0 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+12], xmm0

; 7738 : 			quad[3].u				= 0.0;

  010ac	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  010b1	6b c8 03	 imul	 ecx, eax, 3
  010b4	0f 57 c0	 xorps	 xmm0, xmm0
  010b7	f3 0f 11 84 0d
	ec fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+24], xmm0

; 7739 : 			quad[3].v				= 1.0;

  010c0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  010c5	6b c8 03	 imul	 ecx, eax, 3
  010c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  010d0	f3 0f 11 84 0d
	f0 fe ff ff	 movss	 DWORD PTR _quad$4[ebp+ecx+28], xmm0

; 7740 : 
; 7741 : 			quad[0].next_vertex	= &quad[1];

  010d9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  010de	c1 e0 00	 shl	 eax, 0
  010e1	8d 8c 05 d4 fe
	ff ff		 lea	 ecx, DWORD PTR _quad$4[ebp+eax]
  010e8	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  010ed	6b c2 00	 imul	 eax, edx, 0
  010f0	89 8c 05 fc fe
	ff ff		 mov	 DWORD PTR _quad$4[ebp+eax+40], ecx

; 7742 : 			quad[1].next_vertex	= &quad[2];

  010f7	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  010fc	d1 e0		 shl	 eax, 1
  010fe	8d 8c 05 d4 fe
	ff ff		 lea	 ecx, DWORD PTR _quad$4[ebp+eax]
  01105	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0110a	c1 e2 00	 shl	 edx, 0
  0110d	89 8c 15 fc fe
	ff ff		 mov	 DWORD PTR _quad$4[ebp+edx+40], ecx

; 7743 : 			quad[2].next_vertex	= &quad[3];

  01114	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01119	6b c8 03	 imul	 ecx, eax, 3
  0111c	8d 94 0d d4 fe
	ff ff		 lea	 edx, DWORD PTR _quad$4[ebp+ecx]
  01123	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01128	d1 e0		 shl	 eax, 1
  0112a	89 94 05 fc fe
	ff ff		 mov	 DWORD PTR _quad$4[ebp+eax+40], edx

; 7744 : 			quad[3].next_vertex	= NULL;

  01131	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01136	6b c8 03	 imul	 ecx, eax, 3
  01139	c7 84 0d fc fe
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$4[ebp+ecx+40], 0

; 7745 : 
; 7746 :       	//
; 7747 :       	////////////////////////////////////////
; 7748 : 
; 7749 : 			draw_wbuffered_flat_shaded_textured_polygon (quad, colour, specular);

  01144	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _specular$2[ebp]
  0114a	50		 push	 eax
  0114b	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _colour$3[ebp]
  01151	51		 push	 ecx
  01152	8d 95 d4 fe ff
	ff		 lea	 edx, DWORD PTR _quad$4[ebp]
  01158	52		 push	 edx
  01159	e8 00 00 00 00	 call	 ?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_flat_shaded_textured_polygon

; 7750 : 
; 7751 : 			set_d3d_transparency_off ();

  0115e	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 7752 : 
; 7753 : 			set_d3d_zbuffer_comparison (TRUE);

  01163	6a 01		 push	 1
  01165	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 7754 : 
; 7755 : 			set_d3d_culling (TRUE);

  0116a	6a 01		 push	 1
  0116c	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 7756 : 
; 7757 : 			end_3d_scene ();

  01171	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN39@draw_overl:

; 7758 : 		}
; 7759 : 	}
; 7760 : 
; 7761 : 	////////////////////////////////////////
; 7762 : 	//
; 7763 : 	// restore colours
; 7764 : 	//
; 7765 : 	////////////////////////////////////////
; 7766 : 
; 7767 : 	MFD_COLOUR1					= store_colour1;

  01176	b8 04 00 00 00	 mov	 eax, 4
  0117b	6b c8 00	 imul	 ecx, eax, 0
  0117e	8b 55 f8	 mov	 edx, DWORD PTR _store_colour1$[ebp]
  01181	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 7768 : 	MFD_COLOUR2					= store_colour2;

  01187	b8 04 00 00 00	 mov	 eax, 4
  0118c	c1 e0 00	 shl	 eax, 0
  0118f	8b 4d f4	 mov	 ecx, DWORD PTR _store_colour2$[ebp]
  01192	89 88 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], ecx

; 7769 : 	MFD_COLOUR3					= store_colour3;

  01198	b8 04 00 00 00	 mov	 eax, 4
  0119d	d1 e0		 shl	 eax, 1
  0119f	8b 4d f0	 mov	 ecx, DWORD PTR _store_colour3$[ebp]
  011a2	89 88 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], ecx

; 7770 : 	MFD_COLOUR4					= store_colour4;

  011a8	b8 04 00 00 00	 mov	 eax, 4
  011ad	6b c8 03	 imul	 ecx, eax, 3
  011b0	8b 55 ec	 mov	 edx, DWORD PTR _store_colour4$[ebp]
  011b3	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 7771 : 	MFD_COLOUR5					= store_colour5;

  011b9	b8 04 00 00 00	 mov	 eax, 4
  011be	c1 e0 02	 shl	 eax, 2
  011c1	8b 4d e8	 mov	 ecx, DWORD PTR _store_colour5$[ebp]
  011c4	89 88 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], ecx

; 7772 : 	MFD_COLOUR6					= store_colour6;

  011ca	b8 04 00 00 00	 mov	 eax, 4
  011cf	6b c8 05	 imul	 ecx, eax, 5
  011d2	8b 55 e4	 mov	 edx, DWORD PTR _store_colour6$[ebp]
  011d5	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 7773 : 	MFD_CONTOUR_COLOUR      = store_contour_colour;

  011db	b8 04 00 00 00	 mov	 eax, 4
  011e0	6b c8 06	 imul	 ecx, eax, 6
  011e3	8b 55 e0	 mov	 edx, DWORD PTR _store_contour_colour$[ebp]
  011e6	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 7774 : 	MFD_RIVER_COLOUR			= store_river_colour;

  011ec	b8 04 00 00 00	 mov	 eax, 4
  011f1	6b c8 07	 imul	 ecx, eax, 7
  011f4	8b 55 dc	 mov	 edx, DWORD PTR _store_river_colour$[ebp]
  011f7	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 7775 : 	MFD_ROAD_COLOUR			= store_road_colour;

  011fd	b8 04 00 00 00	 mov	 eax, 4
  01202	c1 e0 03	 shl	 eax, 3
  01205	8b 4d d8	 mov	 ecx, DWORD PTR _store_road_colour$[ebp]
  01208	89 88 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], ecx

; 7776 :    MFD_BACKGROUND_COLOUR	= store_background_colour;

  0120e	b8 04 00 00 00	 mov	 eax, 4
  01213	6b c8 09	 imul	 ecx, eax, 9
  01216	8b 55 d4	 mov	 edx, DWORD PTR _store_background_colour$[ebp]
  01219	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx
$LN1@draw_overl:

; 7777 : }

  0121f	5f		 pop	 edi
  01220	5e		 pop	 esi
  01221	5b		 pop	 ebx
  01222	8b e5		 mov	 esp, ebp
  01224	5d		 pop	 ebp
  01225	c2 0c 00	 ret	 12			; 0000000cH
$LN46@draw_overl:
  01228	00 00 00 00	 DD	 $LN16@draw_overl
  0122c	00 00 00 00	 DD	 $LN18@draw_overl
  01230	00 00 00 00	 DD	 $LN20@draw_overl
  01234	00 00 00 00	 DD	 $LN24@draw_overl
  01238	00 00 00 00	 DD	 $LN26@draw_overl
  0123c	00 00 00 00	 DD	 $LN28@draw_overl
  01240	00 00 00 00	 DD	 $LN30@draw_overl
  01244	00 00 00 00	 DD	 $LN32@draw_overl
  01248	00 00 00 00	 DD	 $LN34@draw_overl
  0124c	00 00 00 00	 DD	 $LN36@draw_overl
?draw_overlaid_mfd@@YGXPAUSCREEN@@W4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z ENDP ; draw_overlaid_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_translucent_mfd_background@@YGXMMMM@Z
_TEXT	SEGMENT
_specular$ = -264					; size = 4
_colour$ = -260						; size = 4
_quad$ = -256						; size = 256
_x_min$ = 8						; size = 4
_y_min$ = 12						; size = 4
_x_max$ = 16						; size = 4
_y_max$ = 20						; size = 4
?draw_translucent_mfd_background@@YGXMMMM@Z PROC	; draw_translucent_mfd_background, COMDAT

; 7200 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 48 01 00
	00		 sub	 esp, 328		; 00000148H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 7201 : 	vertex
; 7202 : 		quad[4];
; 7203 : 
; 7204 : 	real_colour
; 7205 : 		colour,
; 7206 : 		specular;
; 7207 : 
; 7208 : 	set_3d_active_environment (main_3d_env);

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 7209 : 
; 7210 : 	if (begin_3d_scene ())

  00017	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  0001c	85 c0		 test	 eax, eax
  0001e	0f 84 5a 02 00
	00		 je	 $LN2@draw_trans

; 7211 : 	{
; 7212 : 		colour.red = 0;

  00024	c6 85 fe fe ff
	ff 00		 mov	 BYTE PTR _colour$[ebp+2], 0

; 7213 : 		colour.green = 0;

  0002b	c6 85 fd fe ff
	ff 00		 mov	 BYTE PTR _colour$[ebp+1], 0

; 7214 : 		colour.blue = 0;

  00032	c6 85 fc fe ff
	ff 00		 mov	 BYTE PTR _colour$[ebp], 0

; 7215 : 		colour.alpha = 64;

  00039	c6 85 ff fe ff
	ff 40		 mov	 BYTE PTR _colour$[ebp+3], 64 ; 00000040H

; 7216 : 
; 7217 : 		specular.red = 0;

  00040	c6 85 fa fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+2], 0

; 7218 : 		specular.green = 0;

  00047	c6 85 f9 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+1], 0

; 7219 : 		specular.blue = 0;

  0004e	c6 85 f8 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp], 0

; 7220 : 		specular.alpha = 255;

  00055	c6 85 fb fe ff
	ff ff		 mov	 BYTE PTR _specular$[ebp+3], 255 ; 000000ffH

; 7221 : 
; 7222 : 		set_d3d_transparency_on ();

  0005c	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 7223 : 
; 7224 : 		set_d3d_zbuffer_comparison (FALSE);

  00061	6a 00		 push	 0
  00063	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 7225 : 
; 7226 : 		set_d3d_plain_renderstate ();

  00068	e8 00 00 00 00	 call	 ?set_d3d_plain_renderstate@@YGXXZ ; set_d3d_plain_renderstate

; 7227 : 
; 7228 : 		set_d3d_culling (FALSE);

  0006d	6a 00		 push	 0
  0006f	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 7229 : 
; 7230 : 		quad[0].i = x_min;

  00074	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00079	6b c8 00	 imul	 ecx, eax, 0
  0007c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00081	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 7231 : 		quad[0].j = y_min;

  0008a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0008f	6b c8 00	 imul	 ecx, eax, 0
  00092	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_min$[ebp]
  00097	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 7232 : 		quad[0].z = 0.5;

  000a0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000a5	6b c8 00	 imul	 ecx, eax, 0
  000a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000b0	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 7233 : 		quad[0].q = 0.5;

  000b9	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000be	6b c8 00	 imul	 ecx, eax, 0
  000c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000c9	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 7234 : 		quad[0].next_vertex = &quad[1];

  000d2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000d7	c1 e0 00	 shl	 eax, 0
  000da	8d 8c 05 00 ff
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  000e1	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000e6	6b c2 00	 imul	 eax, edx, 0
  000e9	89 8c 05 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], ecx

; 7235 : 
; 7236 : 		quad[1].i = x_max;

  000f0	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000f5	c1 e0 00	 shl	 eax, 0
  000f8	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  000fd	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 7237 : 		quad[1].j = y_min;

  00106	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0010b	c1 e0 00	 shl	 eax, 0
  0010e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y_min$[ebp]
  00113	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 7238 : 		quad[1].z = 0.5;

  0011c	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00121	c1 e0 00	 shl	 eax, 0
  00124	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0012c	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 7239 : 		quad[1].q = 0.5;

  00135	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0013a	c1 e0 00	 shl	 eax, 0
  0013d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00145	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 7240 : 		quad[1].next_vertex = &quad[2];

  0014e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00153	d1 e0		 shl	 eax, 1
  00155	8d 8c 05 00 ff
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  0015c	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00161	c1 e2 00	 shl	 edx, 0
  00164	89 8c 15 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+edx+40], ecx

; 7241 : 
; 7242 : 		quad[2].i = x_max;

  0016b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00170	d1 e0		 shl	 eax, 1
  00172	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00177	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 7243 : 		quad[2].j = y_max;

  00180	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00185	d1 e0		 shl	 eax, 1
  00187	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_max$[ebp]
  0018c	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 7244 : 		quad[2].z = 0.5;

  00195	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0019a	d1 e0		 shl	 eax, 1
  0019c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001a4	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 7245 : 		quad[2].q = 0.5;

  001ad	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001b2	d1 e0		 shl	 eax, 1
  001b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  001bc	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 7246 : 		quad[2].next_vertex = &quad[3];

  001c5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001ca	6b c8 03	 imul	 ecx, eax, 3
  001cd	8d 94 0d 00 ff
	ff ff		 lea	 edx, DWORD PTR _quad$[ebp+ecx]
  001d4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001d9	d1 e0		 shl	 eax, 1
  001db	89 94 05 28 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], edx

; 7247 : 
; 7248 : 		quad[3].i = x_min;

  001e2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001e7	6b c8 03	 imul	 ecx, eax, 3
  001ea	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  001ef	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 7249 : 		quad[3].j = y_max;

  001f8	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  001fd	6b c8 03	 imul	 ecx, eax, 3
  00200	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_max$[ebp]
  00205	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 7250 : 		quad[3].z = 0.5;

  0020e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00213	6b c8 03	 imul	 ecx, eax, 3
  00216	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0021e	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 7251 : 		quad[3].q = 0.5;

  00227	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0022c	6b c8 03	 imul	 ecx, eax, 3
  0022f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00237	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 7252 : 		quad[3].next_vertex = NULL;

  00240	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00245	6b c8 03	 imul	 ecx, eax, 3
  00248	c7 84 0d 28 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$[ebp+ecx+40], 0

; 7253 : 
; 7254 : 		draw_wbuffered_plain_polygon (quad, colour, specular);

  00253	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _specular$[ebp]
  00259	50		 push	 eax
  0025a	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _colour$[ebp]
  00260	51		 push	 ecx
  00261	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR _quad$[ebp]
  00267	52		 push	 edx
  00268	e8 00 00 00 00	 call	 ?draw_wbuffered_plain_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_plain_polygon

; 7255 : 
; 7256 : 		set_d3d_transparency_off ();

  0026d	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 7257 : 
; 7258 : 		set_d3d_zbuffer_comparison (TRUE);

  00272	6a 01		 push	 1
  00274	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 7259 : 
; 7260 : 		end_3d_scene ();

  00279	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN2@draw_trans:

; 7261 : 	}
; 7262 : }

  0027e	5f		 pop	 edi
  0027f	5e		 pop	 esi
  00280	5b		 pop	 ebx
  00281	8b e5		 mov	 esp, ebp
  00283	5d		 pop	 ebp
  00284	c2 10 00	 ret	 16			; 00000010H
?draw_translucent_mfd_background@@YGXMMMM@Z ENDP	; draw_translucent_mfd_background
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?initalize_horizon_mask@@YGXHPAPAD@Z
_TEXT	SEGMENT
tv218 = -120						; size = 4
tv227 = -116						; size = 4
$T1 = -112						; size = 4
_x_limit$2 = -44					; size = 4
_height_val$3 = -40					; size = 4
_centre_y$ = -36					; size = 4
_radius$ = -32						; size = 4
_cutoff_width$ = -28					; size = 4
_circle_width$ = -24					; size = 4
_height$ = -20						; size = 4
_horizon_mask$ = -16					; size = 4
_row$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_width$ = 8						; size = 4
_mask$ = 12						; size = 4
?initalize_horizon_mask@@YGXHPAPAD@Z PROC		; initalize_horizon_mask, COMDAT

; 6515 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6516 : 	int i,j;
; 6517 : 	char *row;
; 6518 : 	char* horizon_mask;
; 6519 : 	int height = LARGE_MFD_VIEWPORT_SIZE * 0.62;

  00009	c7 45 ec 9e 00
	00 00		 mov	 DWORD PTR _height$[ebp], 158 ; 0000009eH

; 6520 : 	int circle_width = height * 0.8;

  00010	f2 0f 2a 45 ec	 cvtsi2sd xmm0, DWORD PTR _height$[ebp]
  00015	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe999999999999a
  0001d	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00021	89 45 e8	 mov	 DWORD PTR _circle_width$[ebp], eax

; 6521 : 	int cutoff_width = (height - circle_width) / 2;

  00024	8b 45 ec	 mov	 eax, DWORD PTR _height$[ebp]
  00027	2b 45 e8	 sub	 eax, DWORD PTR _circle_width$[ebp]
  0002a	99		 cdq
  0002b	2b c2		 sub	 eax, edx
  0002d	d1 f8		 sar	 eax, 1
  0002f	89 45 e4	 mov	 DWORD PTR _cutoff_width$[ebp], eax

; 6522 : 	int radius = (height / 2) - 2;

  00032	8b 45 ec	 mov	 eax, DWORD PTR _height$[ebp]
  00035	99		 cdq
  00036	2b c2		 sub	 eax, edx
  00038	d1 f8		 sar	 eax, 1
  0003a	83 e8 02	 sub	 eax, 2
  0003d	89 45 e0	 mov	 DWORD PTR _radius$[ebp], eax

; 6523 : 	int centre_y = height / 2;

  00040	8b 45 ec	 mov	 eax, DWORD PTR _height$[ebp]
  00043	99		 cdq
  00044	2b c2		 sub	 eax, edx
  00046	d1 f8		 sar	 eax, 1
  00048	89 45 dc	 mov	 DWORD PTR _centre_y$[ebp], eax

; 6524 : 
; 6525 : 	if (*mask)

  0004b	8b 45 0c	 mov	 eax, DWORD PTR _mask$[ebp]
  0004e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00051	74 0b		 je	 SHORT $LN8@initalize_

; 6526 : 		safe_free(*mask);

  00053	8b 45 0c	 mov	 eax, DWORD PTR _mask$[ebp]
  00056	8b 08		 mov	 ecx, DWORD PTR [eax]
  00058	51		 push	 ecx
  00059	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free
$LN8@initalize_:

; 6527 : 	horizon_mask = (char *) safe_malloc((width * height) + 4);

  0005e	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  00061	0f af 45 ec	 imul	 eax, DWORD PTR _height$[ebp]
  00065	83 c0 04	 add	 eax, 4
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  0006e	89 45 f0	 mov	 DWORD PTR _horizon_mask$[ebp], eax

; 6528 : 	*mask = horizon_mask;

  00071	8b 45 0c	 mov	 eax, DWORD PTR _mask$[ebp]
  00074	8b 4d f0	 mov	 ecx, DWORD PTR _horizon_mask$[ebp]
  00077	89 08		 mov	 DWORD PTR [eax], ecx

; 6529 : 
; 6530 : 	horizon_mask[0] = width;

  00079	b8 01 00 00 00	 mov	 eax, 1
  0007e	6b c8 00	 imul	 ecx, eax, 0
  00081	8b 55 f0	 mov	 edx, DWORD PTR _horizon_mask$[ebp]
  00084	8a 45 08	 mov	 al, BYTE PTR _width$[ebp]
  00087	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 6531 : 	horizon_mask[1] = height;

  0008a	b8 01 00 00 00	 mov	 eax, 1
  0008f	c1 e0 00	 shl	 eax, 0
  00092	8b 4d f0	 mov	 ecx, DWORD PTR _horizon_mask$[ebp]
  00095	8a 55 ec	 mov	 dl, BYTE PTR _height$[ebp]
  00098	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 6532 : 	horizon_mask[2] = -(width / 2);

  0009b	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  0009e	99		 cdq
  0009f	2b c2		 sub	 eax, edx
  000a1	d1 f8		 sar	 eax, 1
  000a3	f7 d8		 neg	 eax
  000a5	b9 01 00 00 00	 mov	 ecx, 1
  000aa	d1 e1		 shl	 ecx, 1
  000ac	8b 55 f0	 mov	 edx, DWORD PTR _horizon_mask$[ebp]
  000af	88 04 0a	 mov	 BYTE PTR [edx+ecx], al

; 6533 : 	horizon_mask[3] = -(height / 2);

  000b2	8b 45 ec	 mov	 eax, DWORD PTR _height$[ebp]
  000b5	99		 cdq
  000b6	2b c2		 sub	 eax, edx
  000b8	d1 f8		 sar	 eax, 1
  000ba	f7 d8		 neg	 eax
  000bc	b9 01 00 00 00	 mov	 ecx, 1
  000c1	6b d1 03	 imul	 edx, ecx, 3
  000c4	8b 4d f0	 mov	 ecx, DWORD PTR _horizon_mask$[ebp]
  000c7	88 04 11	 mov	 BYTE PTR [ecx+edx], al

; 6534 : 
; 6535 : 	for (i = 0; i < height; i++)

  000ca	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000d1	eb 09		 jmp	 SHORT $LN4@initalize_
$LN2@initalize_:
  000d3	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000d6	83 c0 01	 add	 eax, 1
  000d9	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@initalize_:
  000dc	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000df	3b 45 ec	 cmp	 eax, DWORD PTR _height$[ebp]
  000e2	0f 8d ec 00 00
	00		 jge	 $LN3@initalize_

; 6536 : 	{
; 6537 : 		row = &horizon_mask[4 + (i*width)];

  000e8	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000eb	0f af 45 08	 imul	 eax, DWORD PTR _width$[ebp]
  000ef	8b 4d f0	 mov	 ecx, DWORD PTR _horizon_mask$[ebp]
  000f2	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  000f6	89 55 f4	 mov	 DWORD PTR _row$[ebp], edx

; 6538 : 		for (j = 0; j < width; j++)

  000f9	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  00100	eb 09		 jmp	 SHORT $LN7@initalize_
$LN5@initalize_:
  00102	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  00105	83 c0 01	 add	 eax, 1
  00108	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax
$LN7@initalize_:
  0010b	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  0010e	3b 45 08	 cmp	 eax, DWORD PTR _width$[ebp]
  00111	0f 8d b8 00 00
	00		 jge	 $LN6@initalize_

; 6539 : 		{
; 6540 : 			{
; 6541 : 				float height_val = fabs(((float)i - centre_y));

  00117	f3 0f 2a 45 fc	 cvtsi2ss xmm0, DWORD PTR _i$[ebp]
  0011c	f3 0f 2a 4d dc	 cvtsi2ss xmm1, DWORD PTR _centre_y$[ebp]
  00121	f3 0f 5c c1	 subss	 xmm0, xmm1
  00125	51		 push	 ecx
  00126	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012b	e8 00 00 00 00	 call	 ?fabs@@YGMM@Z		; fabs
  00130	d9 5d d8	 fstp	 DWORD PTR _height_val$3[ebp]

; 6542 : 				float x_limit = radius - sqrt((radius * radius) - (height_val * height_val));

  00133	f3 0f 2a 45 e0	 cvtsi2ss xmm0, DWORD PTR _radius$[ebp]
  00138	8b 45 e0	 mov	 eax, DWORD PTR _radius$[ebp]
  0013b	0f af 45 e0	 imul	 eax, DWORD PTR _radius$[ebp]
  0013f	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  00143	f3 0f 10 55 d8	 movss	 xmm2, DWORD PTR _height_val$3[ebp]
  00148	f3 0f 59 55 d8	 mulss	 xmm2, DWORD PTR _height_val$3[ebp]
  0014d	f3 0f 5c ca	 subss	 xmm1, xmm2
  00151	51		 push	 ecx
  00152	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00157	f3 0f 11 45 8c	 movss	 DWORD PTR tv227[ebp], xmm0
  0015c	e8 00 00 00 00	 call	 ?sqrt@@YGMM@Z		; sqrt
  00161	d9 5d 88	 fstp	 DWORD PTR tv218[ebp]
  00164	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR tv227[ebp]
  00169	f3 0f 5c 45 88	 subss	 xmm0, DWORD PTR tv218[ebp]
  0016e	f3 0f 11 45 d4	 movss	 DWORD PTR _x_limit$2[ebp], xmm0

; 6543 : 
; 6544 : 				x_limit = max((float) cutoff_width, x_limit);

  00173	f3 0f 2a 45 e4	 cvtsi2ss xmm0, DWORD PTR _cutoff_width$[ebp]
  00178	f3 0f 11 45 90	 movss	 DWORD PTR $T1[ebp], xmm0
  0017d	8d 45 d4	 lea	 eax, DWORD PTR _x_limit$2[ebp]
  00180	50		 push	 eax
  00181	8d 4d 90	 lea	 ecx, DWORD PTR $T1[ebp]
  00184	51		 push	 ecx
  00185	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  0018a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0018e	f3 0f 11 45 d4	 movss	 DWORD PTR _x_limit$2[ebp], xmm0

; 6545 : 
; 6546 : 				if (j < x_limit || j >= (width - x_limit))

  00193	f3 0f 2a 45 f8	 cvtsi2ss xmm0, DWORD PTR _j$[ebp]
  00198	f3 0f 10 4d d4	 movss	 xmm1, DWORD PTR _x_limit$2[ebp]
  0019d	0f 2f c8	 comiss	 xmm1, xmm0
  001a0	77 14		 ja	 SHORT $LN11@initalize_
  001a2	f3 0f 2a 45 f8	 cvtsi2ss xmm0, DWORD PTR _j$[ebp]
  001a7	f3 0f 2a 4d 08	 cvtsi2ss xmm1, DWORD PTR _width$[ebp]
  001ac	f3 0f 5c 4d d4	 subss	 xmm1, DWORD PTR _x_limit$2[ebp]
  001b1	0f 2f c1	 comiss	 xmm0, xmm1
  001b4	72 0b		 jb	 SHORT $LN9@initalize_
$LN11@initalize_:

; 6547 : 					row[j] = 1;

  001b6	8b 45 f4	 mov	 eax, DWORD PTR _row$[ebp]
  001b9	03 45 f8	 add	 eax, DWORD PTR _j$[ebp]
  001bc	c6 00 01	 mov	 BYTE PTR [eax], 1

; 6548 : 				else

  001bf	eb 09		 jmp	 SHORT $LN10@initalize_
$LN9@initalize_:

; 6549 : 					row[j] = 0;

  001c1	8b 45 f4	 mov	 eax, DWORD PTR _row$[ebp]
  001c4	03 45 f8	 add	 eax, DWORD PTR _j$[ebp]
  001c7	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN10@initalize_:

; 6550 : 			}
; 6551 : 		}

  001ca	e9 33 ff ff ff	 jmp	 $LN5@initalize_
$LN6@initalize_:

; 6552 : 	}

  001cf	e9 ff fe ff ff	 jmp	 $LN2@initalize_
$LN3@initalize_:

; 6553 : }

  001d4	5f		 pop	 edi
  001d5	5e		 pop	 esi
  001d6	5b		 pop	 ebx
  001d7	8b e5		 mov	 esp, ebp
  001d9	5d		 pop	 ebp
  001da	c2 08 00	 ret	 8
?initalize_horizon_mask@@YGXHPAPAD@Z ENDP		; initalize_horizon_mask
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_text_display@@YGXPAUSCREEN@@@Z
_TEXT	SEGMENT
_text_screen$ = 8					; size = 4
?draw_text_display@@YGXPAUSCREEN@@@Z PROC		; draw_text_display, COMDAT

; 6437 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6438 : 	ASSERT (text_screen);

  00009	83 7d 08 00	 cmp	 DWORD PTR _text_screen$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@draw_text_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_text_display@@YGXPAUSCREEN@@@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CPFKEDIA@text_screen@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@draw_text_:

; 6439 : 
; 6440 : 	set_active_screen (text_screen);

  00027	8b 45 08	 mov	 eax, DWORD PTR _text_screen$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 6441 : 
; 6442 : 	if (lock_screen (text_screen))

  00030	8b 45 08	 mov	 eax, DWORD PTR _text_screen$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00039	85 c0		 test	 eax, eax
  0003b	0f 84 3e 02 00
	00		 je	 $LN3@draw_text_

; 6443 : 	{
; 6444 : 		set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, TEXT_BACKGROUND_COLOUR);

  00041	b8 04 00 00 00	 mov	 eax, 4
  00046	c1 e0 00	 shl	 eax, 0
  00049	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax]
  0004f	51		 push	 ecx
  00050	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?int_mfd_viewport_size@@3HA
  00056	83 ea 01	 sub	 edx, 1
  00059	52		 push	 edx
  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?int_mfd_viewport_size@@3HA
  0005f	83 e8 01	 sub	 eax, 1
  00062	50		 push	 eax
  00063	6a 00		 push	 0
  00065	6a 00		 push	 0
  00067	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 6445 : 
; 6446 : 		draw_layout_grid ();

  0006c	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 6447 : 
; 6448 : 		set_mono_font_colour (TEXT_COLOUR1);

  00071	b8 04 00 00 00	 mov	 eax, 4
  00076	6b c8 00	 imul	 ecx, eax, 0
  00079	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx]
  0007f	52		 push	 edx
  00080	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 6449 : 
; 6450 : 		if (draw_large_mfd)

  00085	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0008c	0f 84 f0 00 00
	00		 je	 $LN4@draw_text_

; 6451 : 		{
; 6452 : 			set_mono_font_type (MONO_FONT_TYPE_7X12);

  00092	6a 05		 push	 5
  00094	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 6453 : 
; 6454 : 			set_2d_mono_font_position (-1.0, 1.0);

  00099	51		 push	 ecx
  0009a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a7	51		 push	 ecx
  000a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b5	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6455 : 
; 6456 : 			set_mono_font_rel_position (1.0, 11.0);

  000ba	51		 push	 ecx
  000bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41300000
  000c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c8	51		 push	 ecx
  000c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d6	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6457 : 
; 6458 : 			print_mono_font_string (text_display_line1);

  000db	68 00 00 00 00	 push	 OFFSET ?text_display_line1@@3PADA
  000e0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6459 : 
; 6460 : 			set_2d_mono_font_position (-1.0, 1.0);

  000e5	51		 push	 ecx
  000e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f3	51		 push	 ecx
  000f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00101	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6461 : 
; 6462 : 			set_mono_font_rel_position (1.0, 25.0);

  00106	51		 push	 ecx
  00107	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41c80000
  0010f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00114	51		 push	 ecx
  00115	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0011d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00122	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6463 : 
; 6464 : 			print_mono_font_string (text_display_line2);

  00127	68 00 00 00 00	 push	 OFFSET ?text_display_line2@@3PADA
  0012c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6465 : 
; 6466 : 			set_2d_mono_font_position (-1.0, 1.0);

  00131	51		 push	 ecx
  00132	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0013a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013f	51		 push	 ecx
  00140	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00148	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6467 : 
; 6468 : 			set_mono_font_rel_position (1.0, 39.0);

  00152	51		 push	 ecx
  00153	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@421c0000
  0015b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00160	51		 push	 ecx
  00161	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00169	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6469 : 
; 6470 : 			print_mono_font_string (text_display_line3);

  00173	68 00 00 00 00	 push	 OFFSET ?text_display_line3@@3PADA
  00178	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6471 : 		}
; 6472 : 		else

  0017d	e9 eb 00 00 00	 jmp	 $LN5@draw_text_
$LN4@draw_text_:

; 6473 : 		{
; 6474 : 			set_mono_font_type (MONO_FONT_TYPE_3X6);

  00182	6a 00		 push	 0
  00184	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 6475 : 
; 6476 : 			set_2d_mono_font_position (-1.0, 1.0);

  00189	51		 push	 ecx
  0018a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00192	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00197	51		 push	 ecx
  00198	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  001a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a5	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6477 : 
; 6478 : 			set_mono_font_rel_position (1.0, 5.0);

  001aa	51		 push	 ecx
  001ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  001b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b8	51		 push	 ecx
  001b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c6	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6479 : 
; 6480 : 			print_mono_font_string (text_display_line1);

  001cb	68 00 00 00 00	 push	 OFFSET ?text_display_line1@@3PADA
  001d0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6481 : 
; 6482 : 			set_2d_mono_font_position (-1.0, 1.0);

  001d5	51		 push	 ecx
  001d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e3	51		 push	 ecx
  001e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  001ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f1	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6483 : 
; 6484 : 			set_mono_font_rel_position (1.0, 12.0);

  001f6	51		 push	 ecx
  001f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41400000
  001ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00204	51		 push	 ecx
  00205	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0020d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00212	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6485 : 
; 6486 : 			print_mono_font_string (text_display_line2);

  00217	68 00 00 00 00	 push	 OFFSET ?text_display_line2@@3PADA
  0021c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6487 : 
; 6488 : 			set_2d_mono_font_position (-1.0, 1.0);

  00221	51		 push	 ecx
  00222	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0022a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022f	51		 push	 ecx
  00230	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00238	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 6489 : 
; 6490 : 			set_mono_font_rel_position (1.0, 19.0);

  00242	51		 push	 ecx
  00243	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41980000
  0024b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00250	51		 push	 ecx
  00251	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00259	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 6491 : 
; 6492 : 			print_mono_font_string (text_display_line3);

  00263	68 00 00 00 00	 push	 OFFSET ?text_display_line3@@3PADA
  00268	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN5@draw_text_:

; 6493 : 		}
; 6494 : 
; 6495 : 		flush_screen_texture_graphics (text_screen);

  0026d	8b 45 08	 mov	 eax, DWORD PTR _text_screen$[ebp]
  00270	50		 push	 eax
  00271	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 6496 : 
; 6497 : 		unlock_screen (text_screen);

  00276	8b 45 08	 mov	 eax, DWORD PTR _text_screen$[ebp]
  00279	50		 push	 eax
  0027a	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN3@draw_text_:

; 6498 : 	}
; 6499 : 
; 6500 : 	set_active_screen (video_screen);

  0027f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00284	50		 push	 eax
  00285	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 6501 : }

  0028a	5f		 pop	 edi
  0028b	5e		 pop	 esi
  0028c	5b		 pop	 ebx
  0028d	8b e5		 mov	 esp, ebp
  0028f	5d		 pop	 ebp
  00290	c2 04 00	 ret	 4
?draw_text_display@@YGXPAUSCREEN@@@Z ENDP		; draw_text_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_mfd@@YGXPAUSCREEN@@PAW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv130 = -68						; size = 4
_mfd_screen$ = 8					; size = 4
_mode$ = 12						; size = 4
_location$ = 16						; size = 4
?draw_mfd@@YGXPAUSCREEN@@PAW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z PROC ; draw_mfd, COMDAT

; 6314 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6315 : 	ASSERT (mfd_screen);

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_screen$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN4@draw_mfd
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mfd@@YGXPAUSCREEN@@PAW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DHCAJMOH@mfd_screen@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_mfd:

; 6316 : 
; 6317 : 	ASSERT (ka50_mfd_mode_valid (*mode));

  00027	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	7c 08		 jl	 SHORT $LN6@draw_mfd
  0002f	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  00032	83 38 0a	 cmp	 DWORD PTR [eax], 10	; 0000000aH
  00035	7c 18		 jl	 SHORT $LN5@draw_mfd
$LN6@draw_mfd:
  00037	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mfd@@YGXPAUSCREEN@@PAW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z@4JA
  0003c	83 c0 03	 add	 eax, 3
  0003f	50		 push	 eax
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@IMMOJIFF@ka50_mfd_mode_valid?5?$CI?$CKmode?$CJ@
  0004a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@draw_mfd:

; 6318 : 
; 6319 : 	ASSERT (ka50_mfd_location_valid (location));

  0004f	83 7d 10 00	 cmp	 DWORD PTR _location$[ebp], 0
  00053	7c 06		 jl	 SHORT $LN8@draw_mfd
  00055	83 7d 10 02	 cmp	 DWORD PTR _location$[ebp], 2
  00059	7c 18		 jl	 SHORT $LN7@draw_mfd
$LN8@draw_mfd:
  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mfd@@YGXPAUSCREEN@@PAW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z@4JA
  00060	83 c0 05	 add	 eax, 5
  00063	50		 push	 eax
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00069	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@NMFMNCJL@ka50_mfd_location_valid?5?$CIlocati@
  0006e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@draw_mfd:

; 6320 : 
; 6321 : 	if ((get_undamaged_eo_display_mode (*mode) && d3d_can_render_to_texture))

  00073	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  00076	8b 08		 mov	 ecx, DWORD PTR [eax]
  00078	51		 push	 ecx
  00079	e8 00 00 00 00	 call	 ?get_undamaged_eo_display_mode@@YGHW4KA50_MFD_MODES@@@Z ; get_undamaged_eo_display_mode
  0007e	85 c0		 test	 eax, eax
  00080	74 0e		 je	 SHORT $LN9@draw_mfd
  00082	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  00089	74 05		 je	 SHORT $LN9@draw_mfd

; 6322 : 	{
; 6323 : 		return;

  0008b	e9 db 00 00 00	 jmp	 $LN1@draw_mfd
$LN9@draw_mfd:

; 6324 : 	}
; 6325 : 
; 6326 : 	set_active_screen (mfd_screen);

  00090	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 6327 : 
; 6328 : 	if (lock_screen (mfd_screen))

  00099	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  000a2	85 c0		 test	 eax, eax
  000a4	0f 84 b6 00 00
	00		 je	 $LN10@draw_mfd

; 6329 : 	{
; 6330 : 		set_block (0, 0, int_mfd_viewport_size - 1, int_mfd_viewport_size - 1, MFD_BACKGROUND_COLOUR);

  000aa	b8 04 00 00 00	 mov	 eax, 4
  000af	6b c8 09	 imul	 ecx, eax, 9
  000b2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000b8	52		 push	 edx
  000b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?int_mfd_viewport_size@@3HA
  000be	83 e8 01	 sub	 eax, 1
  000c1	50		 push	 eax
  000c2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?int_mfd_viewport_size@@3HA
  000c8	83 e9 01	 sub	 ecx, 1
  000cb	51		 push	 ecx
  000cc	6a 00		 push	 0
  000ce	6a 00		 push	 0
  000d0	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 6331 : 
; 6332 : 		draw_layout_grid ();

  000d5	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 6333 : 
; 6334 : 		switch (*mode)

  000da	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  000dd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000df	89 4d bc	 mov	 DWORD PTR tv130[ebp], ecx
  000e2	83 7d bc 09	 cmp	 DWORD PTR tv130[ebp], 9
  000e6	77 55		 ja	 SHORT $LN21@draw_mfd
  000e8	8b 55 bc	 mov	 edx, DWORD PTR tv130[ebp]
  000eb	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN23@draw_mfd[edx*4]
$LN11@draw_mfd:

; 6335 : 		{
; 6336 : 			////////////////////////////////////////
; 6337 : 			case KA50_MFD_MODE_OFF:
; 6338 : 			////////////////////////////////////////
; 6339 : 			{
; 6340 : 				break;

  000f2	eb 5a		 jmp	 SHORT $LN2@draw_mfd
$LN12@draw_mfd:

; 6341 : 			}
; 6342 : 			////////////////////////////////////////
; 6343 : 			case KA50_MFD_MODE_DAMAGED:
; 6344 : 			////////////////////////////////////////
; 6345 : 			{
; 6346 : 				draw_damaged_mfd ();

  000f4	e8 00 00 00 00	 call	 ?draw_damaged_mfd@@YGXXZ ; draw_damaged_mfd

; 6347 : 
; 6348 : 				break;

  000f9	eb 53		 jmp	 SHORT $LN2@draw_mfd
$LN13@draw_mfd:

; 6349 : 			}
; 6350 : 			////////////////////////////////////////
; 6351 : 			case KA50_MFD_MODE_FLIR:
; 6352 : 			////////////////////////////////////////
; 6353 : 			{
; 6354 : 				draw_2d_flir_mfd (FALSE);

  000fb	6a 00		 push	 0
  000fd	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXH@Z ; draw_2d_flir_mfd

; 6355 : 
; 6356 : 				break;

  00102	eb 4a		 jmp	 SHORT $LN2@draw_mfd
$LN14@draw_mfd:

; 6357 : 			}
; 6358 : 			////////////////////////////////////////
; 6359 : 			case KA50_MFD_MODE_TSD:
; 6360 : 			////////////////////////////////////////
; 6361 : 			{
; 6362 : 				draw_tactical_situation_display_mfd (location);

  00104	8b 45 10	 mov	 eax, DWORD PTR _location$[ebp]
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 ?draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z ; draw_tactical_situation_display_mfd

; 6363 : 
; 6364 : 				break;

  0010d	eb 3f		 jmp	 SHORT $LN2@draw_mfd
$LN15@draw_mfd:

; 6365 : 			}
; 6366 : 			////////////////////////////////////////
; 6367 : 			case KA50_MFD_MODE_ASE:
; 6368 : 			////////////////////////////////////////
; 6369 : 			{
; 6370 : 				draw_aircraft_survivability_equipment_display_mfd (location);

  0010f	8b 45 10	 mov	 eax, DWORD PTR _location$[ebp]
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 ?draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z ; draw_aircraft_survivability_equipment_display_mfd

; 6371 : 
; 6372 : 				break;

  00118	eb 34		 jmp	 SHORT $LN2@draw_mfd
$LN16@draw_mfd:

; 6373 : 			}
; 6374 : 			////////////////////////////////////////
; 6375 : 			case KA50_MFD_MODE_WEAPON:
; 6376 : 			////////////////////////////////////////
; 6377 : 			{
; 6378 : 				draw_weapon_display_mfd ();

  0011a	e8 00 00 00 00	 call	 ?draw_weapon_display_mfd@@YGXXZ ; draw_weapon_display_mfd

; 6379 : 
; 6380 : 				break;

  0011f	eb 2d		 jmp	 SHORT $LN2@draw_mfd
$LN17@draw_mfd:

; 6381 : 			}
; 6382 : 			////////////////////////////////////////
; 6383 : 			case KA50_MFD_MODE_SYSTEM:
; 6384 : 			////////////////////////////////////////
; 6385 : 			{
; 6386 : 				draw_system_display_mfd ();

  00121	e8 00 00 00 00	 call	 ?draw_system_display_mfd@@YGXXZ ; draw_system_display_mfd

; 6387 : 
; 6388 : 				break;

  00126	eb 26		 jmp	 SHORT $LN2@draw_mfd
$LN18@draw_mfd:

; 6389 : 			}
; 6390 : 			////////////////////////////////////////
; 6391 : 			case KA50_MFD_MODE_ENGINE:
; 6392 : 			////////////////////////////////////////
; 6393 : 			{
; 6394 : 				draw_engine_display_mfd ();

  00128	e8 00 00 00 00	 call	 ?draw_engine_display_mfd@@YGXXZ ; draw_engine_display_mfd

; 6395 : 
; 6396 : 				break;

  0012d	eb 1f		 jmp	 SHORT $LN2@draw_mfd
$LN19@draw_mfd:

; 6397 : 			}
; 6398 : 			////////////////////////////////////////
; 6399 : 			case KA50_MFD_MODE_FLIGHT:
; 6400 : 			////////////////////////////////////////
; 6401 : 			{
; 6402 : 				draw_flight_display_mfd ();

  0012f	e8 00 00 00 00	 call	 ?draw_flight_display_mfd@@YGXXZ ; draw_flight_display_mfd

; 6403 : 
; 6404 : 				break;

  00134	eb 18		 jmp	 SHORT $LN2@draw_mfd
$LN20@draw_mfd:

; 6405 : 			}
; 6406 : 			////////////////////////////////////////
; 6407 : 			case KA50_MFD_MODE_MISSION:
; 6408 : 			////////////////////////////////////////
; 6409 : 			{
; 6410 : 				draw_mission_display_mfd ();

  00136	e8 00 00 00 00	 call	 ?draw_mission_display_mfd@@YGXXZ ; draw_mission_display_mfd

; 6411 : 
; 6412 : 				break;

  0013b	eb 11		 jmp	 SHORT $LN2@draw_mfd
$LN21@draw_mfd:

; 6413 : 			}
; 6414 : 			////////////////////////////////////////
; 6415 : 			default:
; 6416 : 			////////////////////////////////////////
; 6417 : 			{
; 6418 : 				debug_fatal ("Invalid main MFD mode = %d", mode);

  0013d	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  00140	50		 push	 eax
  00141	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@EJABPDDO@Invalid?5main?5MFD?5mode?5?$DN?5?$CFd@
  00146	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0014b	83 c4 08	 add	 esp, 8
$LN2@draw_mfd:

; 6419 : 
; 6420 : 				break;
; 6421 : 			}
; 6422 : 		}
; 6423 : 
; 6424 : 		flush_screen_texture_graphics (mfd_screen);

  0014e	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  00151	50		 push	 eax
  00152	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 6425 : 
; 6426 : 		unlock_screen (mfd_screen);

  00157	8b 45 08	 mov	 eax, DWORD PTR _mfd_screen$[ebp]
  0015a	50		 push	 eax
  0015b	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN10@draw_mfd:

; 6427 : 	}
; 6428 : 
; 6429 : 	set_active_screen (video_screen);

  00160	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00165	50		 push	 eax
  00166	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen
$LN1@draw_mfd:

; 6430 : }

  0016b	5f		 pop	 edi
  0016c	5e		 pop	 esi
  0016d	5b		 pop	 ebx
  0016e	8b e5		 mov	 esp, ebp
  00170	5d		 pop	 ebp
  00171	c2 0c 00	 ret	 12			; 0000000cH
$LN23@draw_mfd:
  00174	00 00 00 00	 DD	 $LN11@draw_mfd
  00178	00 00 00 00	 DD	 $LN12@draw_mfd
  0017c	00 00 00 00	 DD	 $LN13@draw_mfd
  00180	00 00 00 00	 DD	 $LN14@draw_mfd
  00184	00 00 00 00	 DD	 $LN15@draw_mfd
  00188	00 00 00 00	 DD	 $LN16@draw_mfd
  0018c	00 00 00 00	 DD	 $LN17@draw_mfd
  00190	00 00 00 00	 DD	 $LN18@draw_mfd
  00194	00 00 00 00	 DD	 $LN19@draw_mfd
  00198	00 00 00 00	 DD	 $LN20@draw_mfd
?draw_mfd@@YGXPAUSCREEN@@PAW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z ENDP ; draw_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_mission_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv813 = -4112						; size = 4
tv400 = -4112						; size = 4
tv327 = -4112						; size = 4
tv805 = -4108						; size = 4
tv392 = -4108						; size = 4
tv319 = -4108						; size = 4
tv1457 = -4104						; size = 8
tv1210 = -4104						; size = 8
tv1002 = -4104						; size = 8
tv902 = -4104						; size = 4
tv843 = -4104						; size = 4
tv792 = -4104						; size = 4
tv752 = -4104						; size = 4
tv681 = -4104						; size = 4
tv648 = -4104						; size = 4
tv609 = -4104						; size = 4
tv579 = -4104						; size = 4
tv509 = -4104						; size = 4
tv473 = -4104						; size = 4
tv453 = -4104						; size = 4
tv425 = -4104						; size = 4
tv379 = -4104						; size = 4
tv353 = -4104						; size = 4
tv306 = -4104						; size = 4
tv278 = -4104						; size = 4
tv259 = -4104						; size = 4
tv233 = -4104						; size = 4
tv207 = -4104						; size = 4
tv141 = -4104						; size = 4
tv894 = -4100						; size = 4
tv835 = -4100						; size = 4
tv784 = -4100						; size = 4
tv744 = -4100						; size = 4
tv673 = -4100						; size = 4
tv640 = -4100						; size = 4
tv601 = -4100						; size = 4
tv571 = -4100						; size = 4
tv501 = -4100						; size = 4
tv465 = -4100						; size = 4
tv445 = -4100						; size = 4
tv417 = -4100						; size = 4
tv371 = -4100						; size = 4
tv345 = -4100						; size = 4
tv298 = -4100						; size = 4
tv271 = -4100						; size = 4
tv251 = -4100						; size = 4
tv225 = -4100						; size = 4
tv199 = -4100						; size = 4
tv133 = -4100						; size = 4
_buffer$1 = -3584					; size = 1024
_buffer$2 = -2560					; size = 1024
_buffer$3 = -1536					; size = 1024
_objective$ = -512					; size = 4
_keysite$ = -508					; size = 4
_task$ = -504						; size = 4
_member$ = -500						; size = 4
_company$ = -496					; size = 4
_group$ = -492						; size = 4
_en$ = -488						; size = 4
_estimated_time$ = -484					; size = 4
_mission_time$ = -480					; size = 4
_time$ = -476						; size = 4
_x_max$ = -472						; size = 4
_x_mid$ = -468						; size = 4
_x_min$ = -464						; size = 4
_y_adjust$ = -460					; size = 4
_x_adjust$ = -456					; size = 4
_char_height$ = -452					; size = 4
_estimated_seconds$ = -448				; size = 4
_estimated_minutes$ = -444				; size = 4
_estimated_hours$ = -440				; size = 4
_mission_seconds$ = -436				; size = 4
_mission_minutes$ = -432				; size = 4
_mission_hours$ = -428					; size = 4
_seconds$ = -424					; size = 4
_minutes$ = -420					; size = 4
_hours$ = -416						; size = 4
_status_name$ = -412					; size = 4
_formation$ = -408					; size = 4
_s2$ = -404						; size = 200
_s1$ = -204						; size = 200
_c$ = -1						; size = 1
?draw_mission_display_mfd@@YGXXZ PROC			; draw_mission_display_mfd, COMDAT

; 5810 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 10 10 00 00	 mov	 eax, 4112		; 00001010H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi

; 5811 : 	char
; 5812 : 		c,
; 5813 : 		s1[200],
; 5814 : 		s2[200];
; 5815 : 
; 5816 : 	int
; 5817 : 		formation,
; 5818 : 		status_name,
; 5819 : 		hours,
; 5820 : 		minutes,
; 5821 : 		seconds,
; 5822 : 		mission_hours,
; 5823 : 		mission_minutes,
; 5824 : 		mission_seconds,
; 5825 : 		estimated_hours,
; 5826 : 		estimated_minutes,
; 5827 : 		estimated_seconds;
; 5828 : 
; 5829 : 	float
; 5830 : 		char_height,
; 5831 : 		x_adjust,
; 5832 : 		y_adjust,
; 5833 : 		x_min,
; 5834 : 		x_mid,
; 5835 : 		x_max,
; 5836 : 		time,
; 5837 : 		mission_time,
; 5838 : 		estimated_time;
; 5839 : 
; 5840 : 	entity
; 5841 : 		*en,
; 5842 : 		*group,
; 5843 : 		*company,
; 5844 : 		*member,
; 5845 : 		*task,
; 5846 : 		*keysite,
; 5847 : 		*objective;
; 5848 : 
; 5849 : 	en = get_gunship_entity ();

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00015	89 85 18 fe ff
	ff		 mov	 DWORD PTR _en$[ebp], eax

; 5850 : 
; 5851 : 	get_2d_float_screen_y_coordinate (1.0, &y_adjust);

  0001b	8d 85 34 fe ff
	ff		 lea	 eax, DWORD PTR _y_adjust$[ebp]
  00021	50		 push	 eax
  00022	51		 push	 ecx
  00023	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0002b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00030	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 5852 : 
; 5853 : 	get_2d_float_screen_x_coordinate (-1.0, &x_min);

  00035	8d 85 30 fe ff
	ff		 lea	 eax, DWORD PTR _x_min$[ebp]
  0003b	50		 push	 eax
  0003c	51		 push	 ecx
  0003d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00045	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004a	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 5854 : 
; 5855 : 	get_2d_float_screen_x_coordinate (0.0, &x_mid);

  0004f	8d 85 2c fe ff
	ff		 lea	 eax, DWORD PTR _x_mid$[ebp]
  00055	50		 push	 eax
  00056	51		 push	 ecx
  00057	0f 57 c0	 xorps	 xmm0, xmm0
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 5856 : 
; 5857 : 	get_2d_float_screen_x_coordinate (1.0, &x_max);

  00064	8d 85 28 fe ff
	ff		 lea	 eax, DWORD PTR _x_max$[ebp]
  0006a	50		 push	 eax
  0006b	51		 push	 ecx
  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00074	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00079	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 5858 : 
; 5859 : 	if (draw_large_mfd)

  0007e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00085	74 5d		 je	 SHORT $LN4@draw_missi

; 5860 : 	{
; 5861 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  00087	6a 05		 push	 5
  00089	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 5862 : 
; 5863 : 		y_adjust += 3.0;

  0008e	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  00096	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  0009e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000a2	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5864 : 
; 5865 : 		x_min += 3.0;

  000aa	f3 0f 5a 85 30
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _x_min$[ebp]
  000b2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  000ba	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000be	f3 0f 11 85 30
	fe ff ff	 movss	 DWORD PTR _x_min$[ebp], xmm0

; 5866 : 
; 5867 : 		x_max -= 3.0;

  000c6	f3 0f 5a 85 28
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _x_max$[ebp]
  000ce	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4008000000000000
  000d6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000da	f3 0f 11 85 28
	fe ff ff	 movss	 DWORD PTR _x_max$[ebp], xmm0

; 5868 : 	}
; 5869 : 	else

  000e2	eb 5b		 jmp	 SHORT $LN5@draw_missi
$LN4@draw_missi:

; 5870 : 	{
; 5871 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  000e4	6a 00		 push	 0
  000e6	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 5872 : 
; 5873 : 		y_adjust += 2.0;

  000eb	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  000f3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  000fb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ff	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5874 : 
; 5875 : 		x_min += 2.0;

  00107	f3 0f 5a 85 30
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _x_min$[ebp]
  0010f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00117	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0011b	f3 0f 11 85 30
	fe ff ff	 movss	 DWORD PTR _x_min$[ebp], xmm0

; 5876 : 
; 5877 : 		x_max -= 2.0;

  00123	f3 0f 5a 85 28
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _x_max$[ebp]
  0012b	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4000000000000000
  00133	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00137	f3 0f 11 85 28
	fe ff ff	 movss	 DWORD PTR _x_max$[ebp], xmm0
$LN5@draw_missi:

; 5878 : 	}
; 5879 : 
; 5880 : 	char_height = get_mono_font_char_height ('X');

  0013f	6a 58		 push	 88			; 00000058H
  00141	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  00146	d9 9d 3c fe ff
	ff		 fstp	 DWORD PTR _char_height$[ebp]

; 5881 : 
; 5882 : 	////////////////////////////////////////
; 5883 : 	//
; 5884 : 	// flight group
; 5885 : 	//
; 5886 : 	////////////////////////////////////////
; 5887 : 
; 5888 : 	group = get_local_entity_parent (en, LIST_TYPE_MEMBER);

  0014c	83 bd 18 fe ff
	ff 00		 cmp	 DWORD PTR _en$[ebp], 0
  00153	74 10		 je	 SHORT $LN35@draw_missi
  00155	8b 85 18 fe ff
	ff		 mov	 eax, DWORD PTR _en$[ebp]
  0015b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015d	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv133[ebp], ecx
  00163	eb 24		 jmp	 SHORT $LN36@draw_missi
$LN35@draw_missi:
  00165	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  0016b	83 c2 4e	 add	 edx, 78			; 0000004eH
  0016e	52		 push	 edx
  0016f	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00174	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00179	50		 push	 eax
  0017a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0017f	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv133[ebp], 0
$LN36@draw_missi:
  00189	b9 01 00 00 00	 mov	 ecx, 1
  0018e	85 c9		 test	 ecx, ecx
  00190	74 0c		 je	 SHORT $LN37@draw_missi
  00192	c7 85 f8 ef ff
	ff 19 00 00 00	 mov	 DWORD PTR tv141[ebp], 25 ; 00000019H
  0019c	eb 24		 jmp	 SHORT $LN38@draw_missi
$LN37@draw_missi:
  0019e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  001a4	83 c2 4e	 add	 edx, 78			; 0000004eH
  001a7	52		 push	 edx
  001a8	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  001b2	50		 push	 eax
  001b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001b8	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv141[ebp], 0
$LN38@draw_missi:
  001c2	6a 19		 push	 25			; 00000019H
  001c4	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR _en$[ebp]
  001ca	51		 push	 ecx
  001cb	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv133[ebp], 180
  001d5	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv141[ebp]
  001db	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  001e2	ff d1		 call	 ecx
  001e4	89 85 14 fe ff
	ff		 mov	 DWORD PTR _group$[ebp], eax

; 5889 : 
; 5890 : 	if (group)

  001ea	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  001f1	0f 84 39 0b 00
	00		 je	 $LN6@draw_missi

; 5891 : 	{
; 5892 : 		//
; 5893 : 		// title
; 5894 : 		//
; 5895 : 
; 5896 : 		set_mono_font_colour (MFD_COLOUR_GREEN);

  001f7	b8 04 00 00 00	 mov	 eax, 4
  001fc	6b c8 0d	 imul	 ecx, eax, 13
  001ff	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00205	52		 push	 edx
  00206	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5897 : 
; 5898 : 		draw_line (x_min, y_adjust, x_max, y_adjust, MFD_COLOUR_GREEN);

  0020b	b8 04 00 00 00	 mov	 eax, 4
  00210	6b c8 0d	 imul	 ecx, eax, 13
  00213	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00219	52		 push	 edx
  0021a	51		 push	 ecx
  0021b	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00223	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00228	51		 push	 ecx
  00229	f3 0f 10 85 28
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00231	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00236	51		 push	 ecx
  00237	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0023f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00244	51		 push	 ecx
  00245	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  0024d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00252	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5899 : 
; 5900 : 		y_adjust += 2.0;

  00257	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  0025f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00267	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0026b	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5901 : 
; 5902 : 		x_adjust = get_mono_font_string_width ("FLIGHT GROUP") * 0.5;

  00273	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DBEHAMGN@FLIGHT?5GROUP@
  00278	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0027d	dd 9d f8 ef ff
	ff		 fstp	 QWORD PTR tv1002[ebp]
  00283	f2 0f 10 85 f8
	ef ff ff	 movsd	 xmm0, QWORD PTR tv1002[ebp]
  0028b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00293	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00297	f3 0f 11 85 38
	fe ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5903 : 
; 5904 : 		set_mono_font_position (x_mid - x_adjust, y_adjust);

  0029f	51		 push	 ecx
  002a0	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  002a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ad	f3 0f 10 85 2c
	fe ff ff	 movss	 xmm0, DWORD PTR _x_mid$[ebp]
  002b5	f3 0f 5c 85 38
	fe ff ff	 subss	 xmm0, DWORD PTR _x_adjust$[ebp]
  002bd	51		 push	 ecx
  002be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c3	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 5905 : 
; 5906 : 		print_mono_font_string ("FLIGHT GROUP");

  002c8	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DBEHAMGN@FLIGHT?5GROUP@
  002cd	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5907 : 
; 5908 : 		y_adjust += char_height;

  002d2	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  002da	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  002e2	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5909 : 
; 5910 : 		if (draw_large_mfd)

  002ea	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  002f1	74 1c		 je	 SHORT $LN7@draw_missi

; 5911 : 		{
; 5912 : 			y_adjust -= 1.0;

  002f3	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  002fb	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00303	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00307	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN7@draw_missi:

; 5913 : 		}
; 5914 : 
; 5915 : 		draw_line (x_min, y_adjust, x_max, y_adjust, MFD_COLOUR_GREEN);

  0030f	b8 04 00 00 00	 mov	 eax, 4
  00314	6b c8 0d	 imul	 ecx, eax, 13
  00317	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0031d	52		 push	 edx
  0031e	51		 push	 ecx
  0031f	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00327	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032c	51		 push	 ecx
  0032d	f3 0f 10 85 28
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00335	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033a	51		 push	 ecx
  0033b	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00343	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00348	51		 push	 ecx
  00349	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00351	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00356	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 5916 : 
; 5917 : 		if (draw_large_mfd)

  0035b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00362	74 1e		 je	 SHORT $LN8@draw_missi

; 5918 : 		{
; 5919 : 			y_adjust += 3.0;

  00364	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  0036c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  00374	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00378	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5920 : 		}
; 5921 : 		else

  00380	eb 1c		 jmp	 SHORT $LN9@draw_missi
$LN8@draw_missi:

; 5922 : 		{
; 5923 : 			y_adjust += 2.0;

  00382	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  0038a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00392	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00396	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN9@draw_missi:

; 5924 : 		}
; 5925 : 
; 5926 : 		set_mono_font_colour (MFD_COLOUR3);

  0039e	b8 04 00 00 00	 mov	 eax, 4
  003a3	d1 e0		 shl	 eax, 1
  003a5	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  003ab	51		 push	 ecx
  003ac	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5927 : 
; 5928 : 		//
; 5929 : 		// division name
; 5930 : 		//
; 5931 : 
; 5932 : 		if (get_global_current_language () != LANGUAGE_RUSSIAN)

  003b1	83 3d 04 00 00
	00 05		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+4, 5
  003b8	0f 84 b4 01 00
	00		 je	 $LN10@draw_missi

; 5933 : 		{
; 5934 : 			company = get_local_entity_parent (group, LIST_TYPE_DIVISION);

  003be	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  003c5	74 10		 je	 SHORT $LN39@draw_missi
  003c7	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR _group$[ebp]
  003cd	8b 08		 mov	 ecx, DWORD PTR [eax]
  003cf	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv199[ebp], ecx
  003d5	eb 24		 jmp	 SHORT $LN40@draw_missi
$LN39@draw_missi:
  003d7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  003dd	83 c2 7c	 add	 edx, 124		; 0000007cH
  003e0	52		 push	 edx
  003e1	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  003e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003eb	50		 push	 eax
  003ec	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003f1	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv199[ebp], 0
$LN40@draw_missi:
  003fb	b9 01 00 00 00	 mov	 ecx, 1
  00400	85 c9		 test	 ecx, ecx
  00402	74 0c		 je	 SHORT $LN41@draw_missi
  00404	c7 85 f8 ef ff
	ff 0b 00 00 00	 mov	 DWORD PTR tv207[ebp], 11 ; 0000000bH
  0040e	eb 24		 jmp	 SHORT $LN42@draw_missi
$LN41@draw_missi:
  00410	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00416	83 c2 7c	 add	 edx, 124		; 0000007cH
  00419	52		 push	 edx
  0041a	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0041f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00424	50		 push	 eax
  00425	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0042a	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv207[ebp], 0
$LN42@draw_missi:
  00434	6a 0b		 push	 11			; 0000000bH
  00436	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  0043c	51		 push	 ecx
  0043d	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv199[ebp], 180
  00447	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv207[ebp]
  0044d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00454	ff d1		 call	 ecx
  00456	89 85 10 fe ff
	ff		 mov	 DWORD PTR _company$[ebp], eax

; 5935 : 
; 5936 : 			ASSERT (company);

  0045c	83 bd 10 fe ff
	ff 00		 cmp	 DWORD PTR _company$[ebp], 0
  00463	75 18		 jne	 SHORT $LN11@draw_missi
  00465	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  0046a	83 c0 7e	 add	 eax, 126		; 0000007eH
  0046d	50		 push	 eax
  0046e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00473	68 00 00 00 00	 push	 OFFSET ??_C@_07MLNBPDHK@company@
  00478	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN11@draw_missi:

; 5937 : 
; 5938 : 			sprintf (s1, "%s:", get_local_entity_string (company, STRING_TYPE_DIVISION_NAME));

  0047d	83 bd 10 fe ff
	ff 00		 cmp	 DWORD PTR _company$[ebp], 0
  00484	74 10		 je	 SHORT $LN43@draw_missi
  00486	8b 85 10 fe ff
	ff		 mov	 eax, DWORD PTR _company$[ebp]
  0048c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0048e	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv225[ebp], ecx
  00494	eb 27		 jmp	 SHORT $LN44@draw_missi
$LN43@draw_missi:
  00496	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  0049c	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H
  004a2	52		 push	 edx
  004a3	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  004a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  004ad	50		 push	 eax
  004ae	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004b3	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv225[ebp], 0
$LN44@draw_missi:
  004bd	b9 01 00 00 00	 mov	 ecx, 1
  004c2	85 c9		 test	 ecx, ecx
  004c4	74 0c		 je	 SHORT $LN45@draw_missi
  004c6	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv233[ebp], 0
  004d0	eb 27		 jmp	 SHORT $LN46@draw_missi
$LN45@draw_missi:
  004d2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  004d8	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H
  004de	52		 push	 edx
  004df	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  004e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  004e9	50		 push	 eax
  004ea	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004ef	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv233[ebp], 0
$LN46@draw_missi:
  004f9	6a 00		 push	 0
  004fb	8b 8d 10 fe ff
	ff		 mov	 ecx, DWORD PTR _company$[ebp]
  00501	51		 push	 ecx
  00502	6b 95 fc ef ff
	ff 34		 imul	 edx, DWORD PTR tv225[ebp], 52
  00509	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv233[ebp]
  0050f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[edx+eax*4]
  00516	ff d1		 call	 ecx
  00518	50		 push	 eax
  00519	68 00 00 00 00	 push	 OFFSET ??_C@_03DKEJHHJP@?$CFs?3@
  0051e	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _s1$[ebp]
  00524	52		 push	 edx
  00525	e8 00 00 00 00	 call	 _sprintf
  0052a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5939 : 
; 5940 : 			set_mono_font_position (x_min, y_adjust);

  0052d	51		 push	 ecx
  0052e	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00536	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053b	51		 push	 ecx
  0053c	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00544	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00549	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 5941 : 
; 5942 : 			print_mono_font_max_length_string (s1);

  0054e	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  00554	50		 push	 eax
  00555	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 5943 : 
; 5944 : 			y_adjust += char_height;

  0055a	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00562	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  0056a	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN10@draw_missi:

; 5945 : 		}
; 5946 : 
; 5947 : 		//
; 5948 : 		// members (callsign, players' rank and name, group leader)
; 5949 : 		//
; 5950 : 
; 5951 : 		member = get_local_entity_first_child (group, LIST_TYPE_MEMBER);

  00572	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  00579	74 10		 je	 SHORT $LN47@draw_missi
  0057b	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR _group$[ebp]
  00581	8b 08		 mov	 ecx, DWORD PTR [eax]
  00583	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv251[ebp], ecx
  00589	eb 27		 jmp	 SHORT $LN48@draw_missi
$LN47@draw_missi:
  0058b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00591	81 c2 8d 00 00
	00		 add	 edx, 141		; 0000008dH
  00597	52		 push	 edx
  00598	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0059d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  005a2	50		 push	 eax
  005a3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005a8	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv251[ebp], 0
$LN48@draw_missi:
  005b2	b9 01 00 00 00	 mov	 ecx, 1
  005b7	85 c9		 test	 ecx, ecx
  005b9	74 0c		 je	 SHORT $LN49@draw_missi
  005bb	c7 85 f8 ef ff
	ff 19 00 00 00	 mov	 DWORD PTR tv259[ebp], 25 ; 00000019H
  005c5	eb 27		 jmp	 SHORT $LN50@draw_missi
$LN49@draw_missi:
  005c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  005cd	81 c2 8d 00 00
	00		 add	 edx, 141		; 0000008dH
  005d3	52		 push	 edx
  005d4	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  005d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  005de	50		 push	 eax
  005df	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005e4	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv259[ebp], 0
$LN50@draw_missi:
  005ee	6a 19		 push	 25			; 00000019H
  005f0	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  005f6	51		 push	 ecx
  005f7	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv251[ebp], 180
  00601	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv259[ebp]
  00607	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0060e	ff d1		 call	 ecx
  00610	89 85 0c fe ff
	ff		 mov	 DWORD PTR _member$[ebp], eax
$LN2@draw_missi:

; 5952 : 
; 5953 : 		while (member)

  00616	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  0061d	0f 84 f2 05 00
	00		 je	 $LN3@draw_missi

; 5954 : 		{
; 5955 : 			if (get_local_entity_int_value (member, INT_TYPE_GROUP_LEADER))

  00623	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  0062a	74 10		 je	 SHORT $LN51@draw_missi
  0062c	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  00632	8b 08		 mov	 ecx, DWORD PTR [eax]
  00634	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv271[ebp], ecx
  0063a	eb 20		 jmp	 SHORT $LN52@draw_missi
$LN51@draw_missi:
  0063c	68 43 17 00 00	 push	 5955			; 00001743H
  00641	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00646	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0064c	52		 push	 edx
  0064d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00652	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv271[ebp], 0
$LN52@draw_missi:
  0065c	b8 01 00 00 00	 mov	 eax, 1
  00661	85 c0		 test	 eax, eax
  00663	74 0c		 je	 SHORT $LN53@draw_missi
  00665	c7 85 f8 ef ff
	ff 48 00 00 00	 mov	 DWORD PTR tv278[ebp], 72 ; 00000048H
  0066f	eb 20		 jmp	 SHORT $LN54@draw_missi
$LN53@draw_missi:
  00671	68 43 17 00 00	 push	 5955			; 00001743H
  00676	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0067b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00681	51		 push	 ecx
  00682	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00687	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv278[ebp], 0
$LN54@draw_missi:
  00691	6a 48		 push	 72			; 00000048H
  00693	8b 95 0c fe ff
	ff		 mov	 edx, DWORD PTR _member$[ebp]
  00699	52		 push	 edx
  0069a	69 85 fc ef ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv271[ebp], 1116
  006a4	8b 8d f8 ef ff
	ff		 mov	 ecx, DWORD PTR tv278[ebp]
  006aa	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  006b1	ff d2		 call	 edx
  006b3	85 c0		 test	 eax, eax
  006b5	74 06		 je	 SHORT $LN12@draw_missi

; 5956 : 			{
; 5957 : 				c = '>';

  006b7	c6 45 ff 3e	 mov	 BYTE PTR _c$[ebp], 62	; 0000003eH

; 5958 : 			}
; 5959 : 			else

  006bb	eb 04		 jmp	 SHORT $LN13@draw_missi
$LN12@draw_missi:

; 5960 : 			{
; 5961 : 				c = ' ';

  006bd	c6 45 ff 20	 mov	 BYTE PTR _c$[ebp], 32	; 00000020H
$LN13@draw_missi:

; 5962 : 			}
; 5963 : 
; 5964 : 			if (get_player_rank_and_name (member, s2))

  006c1	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _s2$[ebp]
  006c7	50		 push	 eax
  006c8	8b 8d 0c fe ff
	ff		 mov	 ecx, DWORD PTR _member$[ebp]
  006ce	51		 push	 ecx
  006cf	e8 00 00 00 00	 call	 ?get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z ; get_player_rank_and_name
  006d4	85 c0		 test	 eax, eax
  006d6	0f 84 2f 02 00
	00		 je	 $LN14@draw_missi

; 5965 : 			{
; 5966 : 				if (get_global_current_language () != LANGUAGE_RUSSIAN)

  006dc	83 3d 04 00 00
	00 05		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+4, 5
  006e3	0f 84 5e 01 00
	00		 je	 $LN16@draw_missi

; 5967 : 				{
; 5968 : 					sprintf

  006e9	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  006f0	74 10		 je	 SHORT $LN55@draw_missi
  006f2	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  006f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  006fa	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv298[ebp], ecx
  00700	eb 27		 jmp	 SHORT $LN56@draw_missi
$LN55@draw_missi:
  00702	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00708	81 c2 a4 00 00
	00		 add	 edx, 164		; 000000a4H
  0070e	52		 push	 edx
  0070f	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00714	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00719	50		 push	 eax
  0071a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0071f	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv298[ebp], 0
$LN56@draw_missi:
  00729	b9 01 00 00 00	 mov	 ecx, 1
  0072e	85 c9		 test	 ecx, ecx
  00730	74 0c		 je	 SHORT $LN57@draw_missi
  00732	c7 85 f8 ef ff
	ff 4a 00 00 00	 mov	 DWORD PTR tv306[ebp], 74 ; 0000004aH
  0073c	eb 27		 jmp	 SHORT $LN58@draw_missi
$LN57@draw_missi:
  0073e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00744	81 c2 a4 00 00
	00		 add	 edx, 164		; 000000a4H
  0074a	52		 push	 edx
  0074b	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00750	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00755	50		 push	 eax
  00756	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0075b	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv306[ebp], 0
$LN58@draw_missi:
  00765	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  0076c	74 10		 je	 SHORT $LN59@draw_missi
  0076e	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  00774	8b 11		 mov	 edx, DWORD PTR [ecx]
  00776	89 95 f4 ef ff
	ff		 mov	 DWORD PTR tv319[ebp], edx
  0077c	eb 26		 jmp	 SHORT $LN60@draw_missi
$LN59@draw_missi:
  0077e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00783	05 a3 00 00 00	 add	 eax, 163		; 000000a3H
  00788	50		 push	 eax
  00789	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0078e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00794	51		 push	 ecx
  00795	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0079a	c7 85 f4 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv319[ebp], 0
$LN60@draw_missi:
  007a4	ba 01 00 00 00	 mov	 edx, 1
  007a9	85 d2		 test	 edx, edx
  007ab	74 0c		 je	 SHORT $LN61@draw_missi
  007ad	c7 85 f0 ef ff
	ff 04 00 00 00	 mov	 DWORD PTR tv327[ebp], 4
  007b7	eb 26		 jmp	 SHORT $LN62@draw_missi
$LN61@draw_missi:
  007b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  007be	05 a3 00 00 00	 add	 eax, 163		; 000000a3H
  007c3	50		 push	 eax
  007c4	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  007c9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  007cf	51		 push	 ecx
  007d0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  007d5	c7 85 f0 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv327[ebp], 0
$LN62@draw_missi:
  007df	8d 95 6c fe ff
	ff		 lea	 edx, DWORD PTR _s2$[ebp]
  007e5	52		 push	 edx
  007e6	6a 4a		 push	 74			; 0000004aH
  007e8	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  007ee	50		 push	 eax
  007ef	69 8d fc ef ff
	ff 5c 04 00 00	 imul	 ecx, DWORD PTR tv298[ebp], 1116
  007f9	8b 95 f8 ef ff
	ff		 mov	 edx, DWORD PTR tv306[ebp]
  007ff	8b 84 91 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[ecx+edx*4]
  00806	ff d0		 call	 eax
  00808	50		 push	 eax
  00809	6a 04		 push	 4
  0080b	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  00811	51		 push	 ecx
  00812	6b 95 f4 ef ff
	ff 34		 imul	 edx, DWORD PTR tv319[ebp], 52
  00819	8b 85 f0 ef ff
	ff		 mov	 eax, DWORD PTR tv327[ebp]
  0081f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[edx+eax*4]
  00826	ff d1		 call	 ecx
  00828	50		 push	 eax
  00829	0f b6 55 ff	 movzx	 edx, BYTE PTR _c$[ebp]
  0082d	52		 push	 edx
  0082e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CPCKCPHJ@?$CFc?$CFs?51?9?$CFd?5?$CFs@
  00833	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  00839	50		 push	 eax
  0083a	e8 00 00 00 00	 call	 _sprintf
  0083f	83 c4 18	 add	 esp, 24			; 00000018H

; 5969 : 					(
; 5970 : 						s1,
; 5971 : 						"%c%s 1-%d %s",
; 5972 : 						c,
; 5973 : 						get_local_entity_string (group, STRING_TYPE_GROUP_CALLSIGN),
; 5974 : 						get_local_entity_int_value (member, INT_TYPE_GROUP_MEMBER_ID),
; 5975 : 						s2
; 5976 : 					);
; 5977 : 				}
; 5978 : 				else

  00842	e9 bf 00 00 00	 jmp	 $LN17@draw_missi
$LN16@draw_missi:

; 5979 : 				{
; 5980 : 					sprintf

  00847	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  0084e	74 10		 je	 SHORT $LN63@draw_missi
  00850	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  00856	8b 08		 mov	 ecx, DWORD PTR [eax]
  00858	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv345[ebp], ecx
  0085e	eb 27		 jmp	 SHORT $LN64@draw_missi
$LN63@draw_missi:
  00860	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00866	81 c2 af 00 00
	00		 add	 edx, 175		; 000000afH
  0086c	52		 push	 edx
  0086d	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00872	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00877	50		 push	 eax
  00878	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0087d	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv345[ebp], 0
$LN64@draw_missi:
  00887	b9 01 00 00 00	 mov	 ecx, 1
  0088c	85 c9		 test	 ecx, ecx
  0088e	74 0c		 je	 SHORT $LN65@draw_missi
  00890	c7 85 f8 ef ff
	ff 4a 00 00 00	 mov	 DWORD PTR tv353[ebp], 74 ; 0000004aH
  0089a	eb 27		 jmp	 SHORT $LN66@draw_missi
$LN65@draw_missi:
  0089c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  008a2	81 c2 af 00 00
	00		 add	 edx, 175		; 000000afH
  008a8	52		 push	 edx
  008a9	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  008ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  008b3	50		 push	 eax
  008b4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008b9	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv353[ebp], 0
$LN66@draw_missi:
  008c3	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR _s2$[ebp]
  008c9	51		 push	 ecx
  008ca	6a 4a		 push	 74			; 0000004aH
  008cc	8b 95 0c fe ff
	ff		 mov	 edx, DWORD PTR _member$[ebp]
  008d2	52		 push	 edx
  008d3	69 85 fc ef ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv345[ebp], 1116
  008dd	8b 8d f8 ef ff
	ff		 mov	 ecx, DWORD PTR tv353[ebp]
  008e3	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  008ea	ff d2		 call	 edx
  008ec	50		 push	 eax
  008ed	0f b6 45 ff	 movzx	 eax, BYTE PTR _c$[ebp]
  008f1	50		 push	 eax
  008f2	68 00 00 00 00	 push	 OFFSET ??_C@_09JGJHKNML@?$CFc1?9?$CFd?5?$CFs@
  008f7	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _s1$[ebp]
  008fd	51		 push	 ecx
  008fe	e8 00 00 00 00	 call	 _sprintf
  00903	83 c4 14	 add	 esp, 20			; 00000014H
$LN17@draw_missi:

; 5981 : 					(
; 5982 : 						s1,
; 5983 : 						"%c1-%d %s",
; 5984 : 						c,
; 5985 : 						get_local_entity_int_value (member, INT_TYPE_GROUP_MEMBER_ID),
; 5986 : 						s2
; 5987 : 					);
; 5988 : 				}
; 5989 : 			}
; 5990 : 			else

  00906	e9 1c 02 00 00	 jmp	 $LN19@draw_missi
$LN14@draw_missi:

; 5991 : 			{
; 5992 : 				if (get_global_current_language () != LANGUAGE_RUSSIAN)

  0090b	83 3d 04 00 00
	00 05		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+4, 5
  00912	0f 84 57 01 00
	00		 je	 $LN18@draw_missi

; 5993 : 				{
; 5994 : 					sprintf

  00918	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  0091f	74 10		 je	 SHORT $LN67@draw_missi
  00921	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  00927	8b 08		 mov	 ecx, DWORD PTR [eax]
  00929	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv371[ebp], ecx
  0092f	eb 27		 jmp	 SHORT $LN68@draw_missi
$LN67@draw_missi:
  00931	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00937	81 c2 be 00 00
	00		 add	 edx, 190		; 000000beH
  0093d	52		 push	 edx
  0093e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00943	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00948	50		 push	 eax
  00949	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0094e	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv371[ebp], 0
$LN68@draw_missi:
  00958	b9 01 00 00 00	 mov	 ecx, 1
  0095d	85 c9		 test	 ecx, ecx
  0095f	74 0c		 je	 SHORT $LN69@draw_missi
  00961	c7 85 f8 ef ff
	ff 4a 00 00 00	 mov	 DWORD PTR tv379[ebp], 74 ; 0000004aH
  0096b	eb 27		 jmp	 SHORT $LN70@draw_missi
$LN69@draw_missi:
  0096d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00973	81 c2 be 00 00
	00		 add	 edx, 190		; 000000beH
  00979	52		 push	 edx
  0097a	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0097f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00984	50		 push	 eax
  00985	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0098a	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv379[ebp], 0
$LN70@draw_missi:
  00994	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  0099b	74 10		 je	 SHORT $LN71@draw_missi
  0099d	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  009a3	8b 11		 mov	 edx, DWORD PTR [ecx]
  009a5	89 95 f4 ef ff
	ff		 mov	 DWORD PTR tv392[ebp], edx
  009ab	eb 26		 jmp	 SHORT $LN72@draw_missi
$LN71@draw_missi:
  009ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  009b2	05 bd 00 00 00	 add	 eax, 189		; 000000bdH
  009b7	50		 push	 eax
  009b8	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  009bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  009c3	51		 push	 ecx
  009c4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009c9	c7 85 f4 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv392[ebp], 0
$LN72@draw_missi:
  009d3	ba 01 00 00 00	 mov	 edx, 1
  009d8	85 d2		 test	 edx, edx
  009da	74 0c		 je	 SHORT $LN73@draw_missi
  009dc	c7 85 f0 ef ff
	ff 04 00 00 00	 mov	 DWORD PTR tv400[ebp], 4
  009e6	eb 26		 jmp	 SHORT $LN74@draw_missi
$LN73@draw_missi:
  009e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  009ed	05 bd 00 00 00	 add	 eax, 189		; 000000bdH
  009f2	50		 push	 eax
  009f3	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  009f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  009fe	51		 push	 ecx
  009ff	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a04	c7 85 f0 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv400[ebp], 0
$LN74@draw_missi:
  00a0e	6a 4a		 push	 74			; 0000004aH
  00a10	8b 95 0c fe ff
	ff		 mov	 edx, DWORD PTR _member$[ebp]
  00a16	52		 push	 edx
  00a17	69 85 fc ef ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv371[ebp], 1116
  00a21	8b 8d f8 ef ff
	ff		 mov	 ecx, DWORD PTR tv379[ebp]
  00a27	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00a2e	ff d2		 call	 edx
  00a30	50		 push	 eax
  00a31	6a 04		 push	 4
  00a33	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR _group$[ebp]
  00a39	50		 push	 eax
  00a3a	6b 8d f4 ef ff
	ff 34		 imul	 ecx, DWORD PTR tv392[ebp], 52
  00a41	8b 95 f0 ef ff
	ff		 mov	 edx, DWORD PTR tv400[ebp]
  00a47	8b 84 91 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[ecx+edx*4]
  00a4e	ff d0		 call	 eax
  00a50	50		 push	 eax
  00a51	0f b6 4d ff	 movzx	 ecx, BYTE PTR _c$[ebp]
  00a55	51		 push	 ecx
  00a56	68 00 00 00 00	 push	 OFFSET ??_C@_09EKFLINLD@?$CFc?$CFs?51?9?$CFd@
  00a5b	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _s1$[ebp]
  00a61	52		 push	 edx
  00a62	e8 00 00 00 00	 call	 _sprintf
  00a67	83 c4 14	 add	 esp, 20			; 00000014H

; 5995 : 					(
; 5996 : 						s1,
; 5997 : 						"%c%s 1-%d",
; 5998 : 						c,
; 5999 : 						get_local_entity_string (group, STRING_TYPE_GROUP_CALLSIGN),
; 6000 : 						get_local_entity_int_value (member, INT_TYPE_GROUP_MEMBER_ID)
; 6001 : 					);
; 6002 : 				}
; 6003 : 				else

  00a6a	e9 b8 00 00 00	 jmp	 $LN19@draw_missi
$LN18@draw_missi:

; 6004 : 				{
; 6005 : 					sprintf

  00a6f	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  00a76	74 10		 je	 SHORT $LN75@draw_missi
  00a78	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  00a7e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a80	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv417[ebp], ecx
  00a86	eb 27		 jmp	 SHORT $LN76@draw_missi
$LN75@draw_missi:
  00a88	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00a8e	81 c2 c8 00 00
	00		 add	 edx, 200		; 000000c8H
  00a94	52		 push	 edx
  00a95	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a9a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00a9f	50		 push	 eax
  00aa0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00aa5	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv417[ebp], 0
$LN76@draw_missi:
  00aaf	b9 01 00 00 00	 mov	 ecx, 1
  00ab4	85 c9		 test	 ecx, ecx
  00ab6	74 0c		 je	 SHORT $LN77@draw_missi
  00ab8	c7 85 f8 ef ff
	ff 4a 00 00 00	 mov	 DWORD PTR tv425[ebp], 74 ; 0000004aH
  00ac2	eb 27		 jmp	 SHORT $LN78@draw_missi
$LN77@draw_missi:
  00ac4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00aca	81 c2 c8 00 00
	00		 add	 edx, 200		; 000000c8H
  00ad0	52		 push	 edx
  00ad1	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ad6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00adb	50		 push	 eax
  00adc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ae1	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv425[ebp], 0
$LN78@draw_missi:
  00aeb	6a 4a		 push	 74			; 0000004aH
  00aed	8b 8d 0c fe ff
	ff		 mov	 ecx, DWORD PTR _member$[ebp]
  00af3	51		 push	 ecx
  00af4	69 95 fc ef ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv417[ebp], 1116
  00afe	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv425[ebp]
  00b04	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00b0b	ff d1		 call	 ecx
  00b0d	50		 push	 eax
  00b0e	0f b6 55 ff	 movzx	 edx, BYTE PTR _c$[ebp]
  00b12	52		 push	 edx
  00b13	68 00 00 00 00	 push	 OFFSET ??_C@_06IAHIIHDD@?$CFc1?9?$CFd@
  00b18	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  00b1e	50		 push	 eax
  00b1f	e8 00 00 00 00	 call	 _sprintf
  00b24	83 c4 10	 add	 esp, 16			; 00000010H
$LN19@draw_missi:

; 6006 : 					(
; 6007 : 						s1,
; 6008 : 						"%c1-%d",
; 6009 : 						c,
; 6010 : 						get_local_entity_int_value (member, INT_TYPE_GROUP_MEMBER_ID)
; 6011 : 					);
; 6012 : 				}
; 6013 : 			}
; 6014 : 
; 6015 : 			set_mono_font_position (x_min, y_adjust);

  00b27	51		 push	 ecx
  00b28	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00b30	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b35	51		 push	 ecx
  00b36	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00b3e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b43	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6016 : 
; 6017 : 			print_mono_font_max_length_string (s1);

  00b48	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  00b4e	50		 push	 eax
  00b4f	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 6018 : 
; 6019 : 			y_adjust += char_height;

  00b54	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00b5c	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  00b64	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6020 : 
; 6021 : 			member = get_local_entity_child_succ (member, LIST_TYPE_MEMBER);

  00b6c	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR _member$[ebp], 0
  00b73	74 10		 je	 SHORT $LN79@draw_missi
  00b75	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _member$[ebp]
  00b7b	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b7d	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv445[ebp], ecx
  00b83	eb 27		 jmp	 SHORT $LN80@draw_missi
$LN79@draw_missi:
  00b85	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00b8b	81 c2 d3 00 00
	00		 add	 edx, 211		; 000000d3H
  00b91	52		 push	 edx
  00b92	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b97	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00b9c	50		 push	 eax
  00b9d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ba2	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv445[ebp], 0
$LN80@draw_missi:
  00bac	b9 01 00 00 00	 mov	 ecx, 1
  00bb1	85 c9		 test	 ecx, ecx
  00bb3	74 0c		 je	 SHORT $LN81@draw_missi
  00bb5	c7 85 f8 ef ff
	ff 19 00 00 00	 mov	 DWORD PTR tv453[ebp], 25 ; 00000019H
  00bbf	eb 27		 jmp	 SHORT $LN82@draw_missi
$LN81@draw_missi:
  00bc1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00bc7	81 c2 d3 00 00
	00		 add	 edx, 211		; 000000d3H
  00bcd	52		 push	 edx
  00bce	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00bd3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00bd8	50		 push	 eax
  00bd9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00bde	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv453[ebp], 0
$LN82@draw_missi:
  00be8	6a 19		 push	 25			; 00000019H
  00bea	8b 8d 0c fe ff
	ff		 mov	 ecx, DWORD PTR _member$[ebp]
  00bf0	51		 push	 ecx
  00bf1	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv445[ebp], 180
  00bfb	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv453[ebp]
  00c01	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00c08	ff d1		 call	 ecx
  00c0a	89 85 0c fe ff
	ff		 mov	 DWORD PTR _member$[ebp], eax

; 6022 : 		}

  00c10	e9 01 fa ff ff	 jmp	 $LN2@draw_missi
$LN3@draw_missi:

; 6023 : 
; 6024 : 		//
; 6025 : 		// formation
; 6026 : 		//
; 6027 : 
; 6028 : 		formation = get_local_entity_int_value (group, INT_TYPE_GROUP_FORMATION);

  00c15	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _group$[ebp], 0
  00c1c	74 10		 je	 SHORT $LN83@draw_missi
  00c1e	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR _group$[ebp]
  00c24	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c26	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv465[ebp], ecx
  00c2c	eb 27		 jmp	 SHORT $LN84@draw_missi
$LN83@draw_missi:
  00c2e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00c34	81 c2 da 00 00
	00		 add	 edx, 218		; 000000daH
  00c3a	52		 push	 edx
  00c3b	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c40	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00c45	50		 push	 eax
  00c46	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c4b	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv465[ebp], 0
$LN84@draw_missi:
  00c55	b9 01 00 00 00	 mov	 ecx, 1
  00c5a	85 c9		 test	 ecx, ecx
  00c5c	74 0c		 je	 SHORT $LN85@draw_missi
  00c5e	c7 85 f8 ef ff
	ff 47 00 00 00	 mov	 DWORD PTR tv473[ebp], 71 ; 00000047H
  00c68	eb 27		 jmp	 SHORT $LN86@draw_missi
$LN85@draw_missi:
  00c6a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00c70	81 c2 da 00 00
	00		 add	 edx, 218		; 000000daH
  00c76	52		 push	 edx
  00c77	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c7c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00c81	50		 push	 eax
  00c82	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c87	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv473[ebp], 0
$LN86@draw_missi:
  00c91	6a 47		 push	 71			; 00000047H
  00c93	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _group$[ebp]
  00c99	51		 push	 ecx
  00c9a	69 95 fc ef ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv465[ebp], 1116
  00ca4	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv473[ebp]
  00caa	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00cb1	ff d1		 call	 ecx
  00cb3	89 85 68 fe ff
	ff		 mov	 DWORD PTR _formation$[ebp], eax

; 6029 : 
; 6030 : 		sprintf (s1, "FORMATION:%s", formation_display_names[formation]);

  00cb9	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _formation$[ebp]
  00cbf	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?formation_display_names@@3PAPBDA[eax*4]
  00cc6	51		 push	 ecx
  00cc7	68 00 00 00 00	 push	 OFFSET ??_C@_0N@JBFLAFMH@FORMATION?3?$CFs@
  00ccc	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _s1$[ebp]
  00cd2	52		 push	 edx
  00cd3	e8 00 00 00 00	 call	 _sprintf
  00cd8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6031 : 
; 6032 : 		set_mono_font_position (x_min, y_adjust);

  00cdb	51		 push	 ecx
  00cdc	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00ce4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ce9	51		 push	 ecx
  00cea	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00cf2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cf7	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6033 : 
; 6034 : 		print_mono_font_max_length_string (s1);

  00cfc	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  00d02	50		 push	 eax
  00d03	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 6035 : 
; 6036 : 		y_adjust += char_height + 2.0;

  00d08	f3 0f 5a 85 3c
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _char_height$[ebp]
  00d10	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00d18	f3 0f 5a 8d 34
	fe ff ff	 cvtss2sd xmm1, DWORD PTR _y_adjust$[ebp]
  00d20	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00d24	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00d28	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN6@draw_missi:

; 6037 : 	}
; 6038 : 
; 6039 : 	////////////////////////////////////////
; 6040 : 	//
; 6041 : 	// mission
; 6042 : 	//
; 6043 : 	////////////////////////////////////////
; 6044 : 
; 6045 : 	task = get_player_task (NULL);

  00d30	6a 00		 push	 0
  00d32	e8 00 00 00 00	 call	 ?get_player_task@@YGPAUENTITY@@PAU1@@Z ; get_player_task
  00d37	89 85 08 fe ff
	ff		 mov	 DWORD PTR _task$[ebp], eax

; 6046 : 
; 6047 : 	if (task)

  00d3d	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  00d44	0f 84 ad 0c 00
	00		 je	 $LN20@draw_missi

; 6048 : 	{
; 6049 : 		ASSERT (get_local_entity_int_value (task, INT_TYPE_VISIBLE_TASK));

  00d4a	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  00d51	74 10		 je	 SHORT $LN87@draw_missi
  00d53	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  00d59	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d5b	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv501[ebp], ecx
  00d61	eb 27		 jmp	 SHORT $LN88@draw_missi
$LN87@draw_missi:
  00d63	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00d69	81 c2 ef 00 00
	00		 add	 edx, 239		; 000000efH
  00d6f	52		 push	 edx
  00d70	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d75	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00d7a	50		 push	 eax
  00d7b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d80	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv501[ebp], 0
$LN88@draw_missi:
  00d8a	b9 01 00 00 00	 mov	 ecx, 1
  00d8f	85 c9		 test	 ecx, ecx
  00d91	74 0c		 je	 SHORT $LN89@draw_missi
  00d93	c7 85 f8 ef ff
	ff fa 00 00 00	 mov	 DWORD PTR tv509[ebp], 250 ; 000000faH
  00d9d	eb 27		 jmp	 SHORT $LN90@draw_missi
$LN89@draw_missi:
  00d9f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00da5	81 c2 ef 00 00
	00		 add	 edx, 239		; 000000efH
  00dab	52		 push	 edx
  00dac	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00db1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00db6	50		 push	 eax
  00db7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00dbc	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv509[ebp], 0
$LN90@draw_missi:
  00dc6	68 fa 00 00 00	 push	 250			; 000000faH
  00dcb	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  00dd1	51		 push	 ecx
  00dd2	69 95 fc ef ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv501[ebp], 1116
  00ddc	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv509[ebp]
  00de2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00de9	ff d1		 call	 ecx
  00deb	85 c0		 test	 eax, eax
  00ded	75 1a		 jne	 SHORT $LN21@draw_missi
  00def	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00df4	05 ef 00 00 00	 add	 eax, 239		; 000000efH
  00df9	50		 push	 eax
  00dfa	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00dff	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@FHGBBPHP@get_local_entity_int_value?5?$CItas@
  00e04	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN21@draw_missi:

; 6050 : 
; 6051 : 		//
; 6052 : 		// title
; 6053 : 		//
; 6054 : 
; 6055 : 		set_mono_font_colour (MFD_COLOUR_GREEN);

  00e09	b8 04 00 00 00	 mov	 eax, 4
  00e0e	6b c8 0d	 imul	 ecx, eax, 13
  00e11	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e17	52		 push	 edx
  00e18	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 6056 : 
; 6057 : 		draw_line (x_min, y_adjust, x_max, y_adjust, MFD_COLOUR_GREEN);

  00e1d	b8 04 00 00 00	 mov	 eax, 4
  00e22	6b c8 0d	 imul	 ecx, eax, 13
  00e25	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e2b	52		 push	 edx
  00e2c	51		 push	 ecx
  00e2d	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00e35	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e3a	51		 push	 ecx
  00e3b	f3 0f 10 85 28
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00e43	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e48	51		 push	 ecx
  00e49	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00e51	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e56	51		 push	 ecx
  00e57	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00e5f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e64	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 6058 : 
; 6059 : 		y_adjust += 2.0;

  00e69	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  00e71	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00e79	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00e7d	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6060 : 
; 6061 : 		x_adjust = get_mono_font_string_width ("MISSION") * 0.5;

  00e85	68 00 00 00 00	 push	 OFFSET ??_C@_07PPFPLHID@MISSION@
  00e8a	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00e8f	dd 9d f8 ef ff
	ff		 fstp	 QWORD PTR tv1210[ebp]
  00e95	f2 0f 10 85 f8
	ef ff ff	 movsd	 xmm0, QWORD PTR tv1210[ebp]
  00e9d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00ea5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00ea9	f3 0f 11 85 38
	fe ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6062 : 
; 6063 : 		set_mono_font_position (x_mid - x_adjust, y_adjust);

  00eb1	51		 push	 ecx
  00eb2	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00eba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ebf	f3 0f 10 85 2c
	fe ff ff	 movss	 xmm0, DWORD PTR _x_mid$[ebp]
  00ec7	f3 0f 5c 85 38
	fe ff ff	 subss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00ecf	51		 push	 ecx
  00ed0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ed5	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6064 : 
; 6065 : 		print_mono_font_string ("MISSION");

  00eda	68 00 00 00 00	 push	 OFFSET ??_C@_07PPFPLHID@MISSION@
  00edf	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6066 : 
; 6067 : 		y_adjust += char_height;

  00ee4	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00eec	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  00ef4	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6068 : 
; 6069 : 		if (draw_large_mfd)

  00efc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00f03	74 1c		 je	 SHORT $LN22@draw_missi

; 6070 : 		{
; 6071 : 			y_adjust -= 1.0;

  00f05	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  00f0d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00f15	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00f19	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN22@draw_missi:

; 6072 : 		}
; 6073 : 
; 6074 : 		draw_line (x_min, y_adjust, x_max, y_adjust, MFD_COLOUR_GREEN);

  00f21	b8 04 00 00 00	 mov	 eax, 4
  00f26	6b c8 0d	 imul	 ecx, eax, 13
  00f29	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f2f	52		 push	 edx
  00f30	51		 push	 ecx
  00f31	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00f39	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f3e	51		 push	 ecx
  00f3f	f3 0f 10 85 28
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  00f47	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f4c	51		 push	 ecx
  00f4d	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00f55	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f5a	51		 push	 ecx
  00f5b	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  00f63	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f68	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 6075 : 
; 6076 : 		if (draw_large_mfd)

  00f6d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00f74	74 1e		 je	 SHORT $LN23@draw_missi

; 6077 : 		{
; 6078 : 			y_adjust += 3.0;

  00f76	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  00f7e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4008000000000000
  00f86	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00f8a	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6079 : 		}
; 6080 : 		else

  00f92	eb 1c		 jmp	 SHORT $LN24@draw_missi
$LN23@draw_missi:

; 6081 : 		{
; 6082 : 			y_adjust += 2.0;

  00f94	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  00f9c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  00fa4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00fa8	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN24@draw_missi:

; 6083 : 		}
; 6084 : 
; 6085 : 		set_mono_font_colour (MFD_COLOUR3);

  00fb0	b8 04 00 00 00	 mov	 eax, 4
  00fb5	d1 e0		 shl	 eax, 1
  00fb7	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00fbd	51		 push	 ecx
  00fbe	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 6086 : 
; 6087 : 		//
; 6088 : 		// type
; 6089 : 		//
; 6090 : 
; 6091 : 		sprintf (s1, "TYPE  :%s", get_local_entity_string (task, STRING_TYPE_SHORT_DISPLAY_NAME));

  00fc3	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  00fca	74 10		 je	 SHORT $LN91@draw_missi
  00fcc	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  00fd2	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fd4	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv571[ebp], ecx
  00fda	eb 27		 jmp	 SHORT $LN92@draw_missi
$LN91@draw_missi:
  00fdc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  00fe2	81 c2 19 01 00
	00		 add	 edx, 281		; 00000119H
  00fe8	52		 push	 edx
  00fe9	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00fee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00ff3	50		 push	 eax
  00ff4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ff9	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv571[ebp], 0
$LN92@draw_missi:
  01003	b9 01 00 00 00	 mov	 ecx, 1
  01008	85 c9		 test	 ecx, ecx
  0100a	74 0c		 je	 SHORT $LN93@draw_missi
  0100c	c7 85 f8 ef ff
	ff 0c 00 00 00	 mov	 DWORD PTR tv579[ebp], 12 ; 0000000cH
  01016	eb 27		 jmp	 SHORT $LN94@draw_missi
$LN93@draw_missi:
  01018	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  0101e	81 c2 19 01 00
	00		 add	 edx, 281		; 00000119H
  01024	52		 push	 edx
  01025	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0102a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  0102f	50		 push	 eax
  01030	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01035	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv579[ebp], 0
$LN94@draw_missi:
  0103f	6a 0c		 push	 12			; 0000000cH
  01041	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  01047	51		 push	 ecx
  01048	6b 95 fc ef ff
	ff 34		 imul	 edx, DWORD PTR tv571[ebp], 52
  0104f	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv579[ebp]
  01055	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[edx+eax*4]
  0105c	ff d1		 call	 ecx
  0105e	50		 push	 eax
  0105f	68 00 00 00 00	 push	 OFFSET ??_C@_09FCABHDEH@TYPE?5?5?3?$CFs@
  01064	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _s1$[ebp]
  0106a	52		 push	 edx
  0106b	e8 00 00 00 00	 call	 _sprintf
  01070	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6092 : 
; 6093 : 		set_mono_font_position (x_min, y_adjust);

  01073	51		 push	 ecx
  01074	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0107c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01081	51		 push	 ecx
  01082	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  0108a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0108f	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6094 : 
; 6095 : 		print_mono_font_max_length_string (s1);

  01094	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  0109a	50		 push	 eax
  0109b	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 6096 : 
; 6097 : 		y_adjust += char_height;

  010a0	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  010a8	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  010b0	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6098 : 
; 6099 : 		if (draw_large_mfd)

  010b8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  010bf	74 1c		 je	 SHORT $LN25@draw_missi

; 6100 : 		{
; 6101 : 			y_adjust += 2.0;

  010c1	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  010c9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  010d1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  010d5	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN25@draw_missi:

; 6102 : 		}
; 6103 : 
; 6104 : 		//
; 6105 : 		// objective
; 6106 : 		//
; 6107 : 
; 6108 : 		objective = get_local_entity_parent (task, LIST_TYPE_TASK_DEPENDENT);

  010dd	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  010e4	74 10		 je	 SHORT $LN95@draw_missi
  010e6	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  010ec	8b 08		 mov	 ecx, DWORD PTR [eax]
  010ee	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv601[ebp], ecx
  010f4	eb 27		 jmp	 SHORT $LN96@draw_missi
$LN95@draw_missi:
  010f6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  010fc	81 c2 2a 01 00
	00		 add	 edx, 298		; 0000012aH
  01102	52		 push	 edx
  01103	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01108	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0110d	50		 push	 eax
  0110e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01113	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv601[ebp], 0
$LN96@draw_missi:
  0111d	b9 01 00 00 00	 mov	 ecx, 1
  01122	85 c9		 test	 ecx, ecx
  01124	74 0c		 je	 SHORT $LN97@draw_missi
  01126	c7 85 f8 ef ff
	ff 27 00 00 00	 mov	 DWORD PTR tv609[ebp], 39 ; 00000027H
  01130	eb 27		 jmp	 SHORT $LN98@draw_missi
$LN97@draw_missi:
  01132	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01138	81 c2 2a 01 00
	00		 add	 edx, 298		; 0000012aH
  0113e	52		 push	 edx
  0113f	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01144	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01149	50		 push	 eax
  0114a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0114f	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv609[ebp], 0
$LN98@draw_missi:
  01159	6a 27		 push	 39			; 00000027H
  0115b	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  01161	51		 push	 ecx
  01162	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv601[ebp], 180
  0116c	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv609[ebp]
  01172	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01179	ff d1		 call	 ecx
  0117b	89 85 00 fe ff
	ff		 mov	 DWORD PTR _objective$[ebp], eax

; 6109 : 
; 6110 : 		if (objective)

  01181	83 bd 00 fe ff
	ff 00		 cmp	 DWORD PTR _objective$[ebp], 0
  01188	0f 84 e4 00 00
	00		 je	 $LN27@draw_missi

; 6111 : 		{
; 6112 : 			char
; 6113 : 				buffer[1024];
; 6114 : 
; 6115 : 			get_task_objective_mfd_display_string (task, buffer);

  0118e	8d 85 00 fa ff
	ff		 lea	 eax, DWORD PTR _buffer$3[ebp]
  01194	50		 push	 eax
  01195	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  0119b	51		 push	 ecx
  0119c	e8 00 00 00 00	 call	 ?get_task_objective_mfd_display_string@@YGXPAUENTITY@@PAD@Z ; get_task_objective_mfd_display_string

; 6116 : 
; 6117 : 			sprintf (s1, "OBJECT:%s", buffer);

  011a1	8d 85 00 fa ff
	ff		 lea	 eax, DWORD PTR _buffer$3[ebp]
  011a7	50		 push	 eax
  011a8	68 00 00 00 00	 push	 OFFSET ??_C@_09MMJDMDOM@OBJECT?3?$CFs@
  011ad	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _s1$[ebp]
  011b3	51		 push	 ecx
  011b4	e8 00 00 00 00	 call	 _sprintf
  011b9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6118 : 
; 6119 : 			set_mono_font_position (x_min, y_adjust);

  011bc	51		 push	 ecx
  011bd	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  011c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011ca	51		 push	 ecx
  011cb	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  011d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011d8	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6120 : 
; 6121 : 			print_mono_font_max_length_string (s1);

  011dd	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  011e3	50		 push	 eax
  011e4	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 6122 : 
; 6123 : 			y_adjust += char_height;

  011e9	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  011f1	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  011f9	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6124 : 
; 6125 : 			set_mono_font_position (x_min, y_adjust);

  01201	51		 push	 ecx
  01202	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0120a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0120f	51		 push	 ecx
  01210	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  01218	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0121d	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6126 : 
; 6127 : 			print_target_position (en, objective);

  01222	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _objective$[ebp]
  01228	50		 push	 eax
  01229	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR _en$[ebp]
  0122f	51		 push	 ecx
  01230	e8 00 00 00 00	 call	 ?print_target_position@@YGXPAUENTITY@@0@Z ; print_target_position

; 6128 : 
; 6129 : 			y_adjust += char_height;

  01235	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0123d	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  01245	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6130 : 
; 6131 : 			if (draw_large_mfd)

  0124d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01254	74 1c		 je	 SHORT $LN27@draw_missi

; 6132 : 			{
; 6133 : 				y_adjust += 2.0;

  01256	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  0125e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01266	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0126a	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN27@draw_missi:

; 6134 : 			}
; 6135 : 		}
; 6136 : 
; 6137 : 		//
; 6138 : 		// status
; 6139 : 		//
; 6140 : 
; 6141 : 		status_name = get_local_entity_int_value (task, INT_TYPE_TASK_COMPLETED);

  01272	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  01279	74 10		 je	 SHORT $LN99@draw_missi
  0127b	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  01281	8b 08		 mov	 ecx, DWORD PTR [eax]
  01283	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv640[ebp], ecx
  01289	eb 27		 jmp	 SHORT $LN100@draw_missi
$LN99@draw_missi:
  0128b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01291	81 c2 4b 01 00
	00		 add	 edx, 331		; 0000014bH
  01297	52		 push	 edx
  01298	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0129d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  012a2	50		 push	 eax
  012a3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  012a8	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv640[ebp], 0
$LN100@draw_missi:
  012b2	b9 01 00 00 00	 mov	 ecx, 1
  012b7	85 c9		 test	 ecx, ecx
  012b9	74 0c		 je	 SHORT $LN101@draw_missi
  012bb	c7 85 f8 ef ff
	ff d9 00 00 00	 mov	 DWORD PTR tv648[ebp], 217 ; 000000d9H
  012c5	eb 27		 jmp	 SHORT $LN102@draw_missi
$LN101@draw_missi:
  012c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  012cd	81 c2 4b 01 00
	00		 add	 edx, 331		; 0000014bH
  012d3	52		 push	 edx
  012d4	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  012d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  012de	50		 push	 eax
  012df	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  012e4	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv648[ebp], 0
$LN102@draw_missi:
  012ee	68 d9 00 00 00	 push	 217			; 000000d9H
  012f3	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  012f9	51		 push	 ecx
  012fa	69 95 fc ef ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv640[ebp], 1116
  01304	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv648[ebp]
  0130a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  01311	ff d1		 call	 ecx
  01313	89 85 64 fe ff
	ff		 mov	 DWORD PTR _status_name$[ebp], eax

; 6142 : 
; 6143 : 		sprintf (s1, "STATUS:%s", task_status_names[status_name]);

  01319	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _status_name$[ebp]
  0131f	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?task_status_names@@3PAPBDA[eax*4]
  01326	51		 push	 ecx
  01327	68 00 00 00 00	 push	 OFFSET ??_C@_09NFLHCPML@STATUS?3?$CFs@
  0132c	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _s1$[ebp]
  01332	52		 push	 edx
  01333	e8 00 00 00 00	 call	 _sprintf
  01338	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6144 : 
; 6145 : 		set_mono_font_position (x_min, y_adjust);

  0133b	51		 push	 ecx
  0133c	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01344	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01349	51		 push	 ecx
  0134a	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  01352	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01357	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6146 : 
; 6147 : 		print_mono_font_max_length_string (s1);

  0135c	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  01362	50		 push	 eax
  01363	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 6148 : 
; 6149 : 		y_adjust += char_height;

  01368	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01370	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  01378	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6150 : 
; 6151 : 		if (draw_large_mfd)

  01380	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01387	74 1c		 je	 SHORT $LN28@draw_missi

; 6152 : 		{
; 6153 : 			y_adjust += 2.0;

  01389	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01391	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01399	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0139d	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN28@draw_missi:

; 6154 : 		}
; 6155 : 
; 6156 : 		//
; 6157 : 		// start base
; 6158 : 		//
; 6159 : 
; 6160 : 		keysite = get_local_entity_parent (task, LIST_TYPE_ASSIGNED_TASK);

  013a5	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  013ac	74 10		 je	 SHORT $LN103@draw_missi
  013ae	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  013b4	8b 08		 mov	 ecx, DWORD PTR [eax]
  013b6	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv673[ebp], ecx
  013bc	eb 27		 jmp	 SHORT $LN104@draw_missi
$LN103@draw_missi:
  013be	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  013c4	81 c2 5e 01 00
	00		 add	 edx, 350		; 0000015eH
  013ca	52		 push	 edx
  013cb	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  013d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  013d5	50		 push	 eax
  013d6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  013db	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv673[ebp], 0
$LN104@draw_missi:
  013e5	b9 01 00 00 00	 mov	 ecx, 1
  013ea	85 c9		 test	 ecx, ecx
  013ec	74 0c		 je	 SHORT $LN105@draw_missi
  013ee	c7 85 f8 ef ff
	ff 03 00 00 00	 mov	 DWORD PTR tv681[ebp], 3
  013f8	eb 27		 jmp	 SHORT $LN106@draw_missi
$LN105@draw_missi:
  013fa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01400	81 c2 5e 01 00
	00		 add	 edx, 350		; 0000015eH
  01406	52		 push	 edx
  01407	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0140c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01411	50		 push	 eax
  01412	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01417	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv681[ebp], 0
$LN106@draw_missi:
  01421	6a 03		 push	 3
  01423	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  01429	51		 push	 ecx
  0142a	69 95 fc ef ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv673[ebp], 180
  01434	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv681[ebp]
  0143a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01441	ff d1		 call	 ecx
  01443	89 85 04 fe ff
	ff		 mov	 DWORD PTR _keysite$[ebp], eax

; 6161 : 
; 6162 : 		if (keysite)

  01449	83 bd 04 fe ff
	ff 00		 cmp	 DWORD PTR _keysite$[ebp], 0
  01450	0f 84 e4 00 00
	00		 je	 $LN30@draw_missi

; 6163 : 		{
; 6164 : 			char
; 6165 : 				buffer[1024];
; 6166 : 
; 6167 : 			get_keysite_entity_mfd_display_name (keysite, buffer);

  01456	8d 85 00 f6 ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  0145c	50		 push	 eax
  0145d	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR _keysite$[ebp]
  01463	51		 push	 ecx
  01464	e8 00 00 00 00	 call	 ?get_keysite_entity_mfd_display_name@@YGXPAUENTITY@@PAD@Z ; get_keysite_entity_mfd_display_name

; 6168 : 
; 6169 : 			sprintf (s1, "START :%s", buffer);

  01469	8d 85 00 f6 ff
	ff		 lea	 eax, DWORD PTR _buffer$2[ebp]
  0146f	50		 push	 eax
  01470	68 00 00 00 00	 push	 OFFSET ??_C@_09MDEJFDEL@START?5?3?$CFs@
  01475	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _s1$[ebp]
  0147b	51		 push	 ecx
  0147c	e8 00 00 00 00	 call	 _sprintf
  01481	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6170 : 
; 6171 : 			set_mono_font_position (x_min, y_adjust);

  01484	51		 push	 ecx
  01485	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0148d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01492	51		 push	 ecx
  01493	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  0149b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014a0	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6172 : 
; 6173 : 			print_mono_font_max_length_string (s1);

  014a5	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  014ab	50		 push	 eax
  014ac	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 6174 : 
; 6175 : 			y_adjust += char_height;

  014b1	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  014b9	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  014c1	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6176 : 
; 6177 : 			set_mono_font_position (x_min, y_adjust);

  014c9	51		 push	 ecx
  014ca	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  014d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014d7	51		 push	 ecx
  014d8	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  014e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014e5	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6178 : 
; 6179 : 			print_target_position (en, keysite);

  014ea	8b 85 04 fe ff
	ff		 mov	 eax, DWORD PTR _keysite$[ebp]
  014f0	50		 push	 eax
  014f1	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR _en$[ebp]
  014f7	51		 push	 ecx
  014f8	e8 00 00 00 00	 call	 ?print_target_position@@YGXPAUENTITY@@0@Z ; print_target_position

; 6180 : 
; 6181 : 			y_adjust += char_height;

  014fd	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01505	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  0150d	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6182 : 
; 6183 : 			if (draw_large_mfd)

  01515	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0151c	74 1c		 je	 SHORT $LN30@draw_missi

; 6184 : 			{
; 6185 : 				y_adjust += 2.0;

  0151e	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01526	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0152e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01532	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN30@draw_missi:

; 6186 : 			}
; 6187 : 		}
; 6188 : 
; 6189 : 		//
; 6190 : 		// end base
; 6191 : 		//
; 6192 : 
; 6193 : 		keysite = (entity *) get_local_entity_ptr_value (task, PTR_TYPE_RETURN_KEYSITE);

  0153a	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  01541	74 10		 je	 SHORT $LN107@draw_missi
  01543	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  01549	8b 08		 mov	 ecx, DWORD PTR [eax]
  0154b	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv744[ebp], ecx
  01551	eb 27		 jmp	 SHORT $LN108@draw_missi
$LN107@draw_missi:
  01553	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01559	81 c2 7f 01 00
	00		 add	 edx, 383		; 0000017fH
  0155f	52		 push	 edx
  01560	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01565	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0156a	50		 push	 eax
  0156b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01570	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv744[ebp], 0
$LN108@draw_missi:
  0157a	b9 01 00 00 00	 mov	 ecx, 1
  0157f	85 c9		 test	 ecx, ecx
  01581	74 0c		 je	 SHORT $LN109@draw_missi
  01583	c7 85 f8 ef ff
	ff 08 00 00 00	 mov	 DWORD PTR tv752[ebp], 8
  0158d	eb 27		 jmp	 SHORT $LN110@draw_missi
$LN109@draw_missi:
  0158f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01595	81 c2 7f 01 00
	00		 add	 edx, 383		; 0000017fH
  0159b	52		 push	 edx
  0159c	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  015a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_ptr_type_message@@3PBDB ; overload_invalid_ptr_type_message
  015a6	50		 push	 eax
  015a7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  015ac	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv752[ebp], 0
$LN110@draw_missi:
  015b6	6a 08		 push	 8
  015b8	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  015be	51		 push	 ecx
  015bf	6b 95 fc ef ff
	ff 50		 imul	 edx, DWORD PTR tv744[ebp], 80
  015c6	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv752[ebp]
  015cc	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_ptr_value@@3PAY0BE@P6GPAXPAUENTITY@@W4PTR_TYPES@@@ZA[edx+eax*4]
  015d3	ff d1		 call	 ecx
  015d5	89 85 04 fe ff
	ff		 mov	 DWORD PTR _keysite$[ebp], eax

; 6194 : 
; 6195 : 		if (keysite)

  015db	83 bd 04 fe ff
	ff 00		 cmp	 DWORD PTR _keysite$[ebp], 0
  015e2	0f 84 e4 00 00
	00		 je	 $LN32@draw_missi

; 6196 : 		{
; 6197 : 			char
; 6198 : 				buffer[1024];
; 6199 : 
; 6200 : 			get_keysite_entity_mfd_display_name (keysite, buffer);

  015e8	8d 85 00 f2 ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  015ee	50		 push	 eax
  015ef	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR _keysite$[ebp]
  015f5	51		 push	 ecx
  015f6	e8 00 00 00 00	 call	 ?get_keysite_entity_mfd_display_name@@YGXPAUENTITY@@PAD@Z ; get_keysite_entity_mfd_display_name

; 6201 : 
; 6202 : 			sprintf (s1, "END   :%s", buffer);

  015fb	8d 85 00 f2 ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  01601	50		 push	 eax
  01602	68 00 00 00 00	 push	 OFFSET ??_C@_09HDLDOKLK@END?5?5?5?3?$CFs@
  01607	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _s1$[ebp]
  0160d	51		 push	 ecx
  0160e	e8 00 00 00 00	 call	 _sprintf
  01613	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6203 : 
; 6204 : 			set_mono_font_position (x_min, y_adjust);

  01616	51		 push	 ecx
  01617	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0161f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01624	51		 push	 ecx
  01625	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  0162d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01632	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6205 : 
; 6206 : 			print_mono_font_max_length_string (s1);

  01637	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  0163d	50		 push	 eax
  0163e	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 6207 : 
; 6208 : 			y_adjust += char_height;

  01643	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0164b	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  01653	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6209 : 
; 6210 : 			set_mono_font_position (x_min, y_adjust);

  0165b	51		 push	 ecx
  0165c	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01664	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01669	51		 push	 ecx
  0166a	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  01672	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01677	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6211 : 
; 6212 : 			print_target_position (en, keysite);

  0167c	8b 85 04 fe ff
	ff		 mov	 eax, DWORD PTR _keysite$[ebp]
  01682	50		 push	 eax
  01683	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR _en$[ebp]
  01689	51		 push	 ecx
  0168a	e8 00 00 00 00	 call	 ?print_target_position@@YGXPAUENTITY@@0@Z ; print_target_position

; 6213 : 
; 6214 : 			y_adjust += char_height;

  0168f	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01697	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  0169f	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6215 : 
; 6216 : 			if (draw_large_mfd)

  016a7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  016ae	74 1c		 je	 SHORT $LN32@draw_missi

; 6217 : 			{
; 6218 : 				y_adjust += 2.0;

  016b0	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  016b8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  016c0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  016c4	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN32@draw_missi:

; 6219 : 			}
; 6220 : 		}
; 6221 : 
; 6222 : 		//
; 6223 : 		// count (kills and losses)
; 6224 : 		//
; 6225 : 
; 6226 : 		sprintf

  016cc	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  016d3	74 10		 je	 SHORT $LN111@draw_missi
  016d5	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  016db	8b 08		 mov	 ecx, DWORD PTR [eax]
  016dd	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv784[ebp], ecx
  016e3	eb 27		 jmp	 SHORT $LN112@draw_missi
$LN111@draw_missi:
  016e5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  016eb	81 c2 a5 01 00
	00		 add	 edx, 421		; 000001a5H
  016f1	52		 push	 edx
  016f2	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  016f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  016fc	50		 push	 eax
  016fd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01702	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv784[ebp], 0
$LN112@draw_missi:
  0170c	b9 01 00 00 00	 mov	 ecx, 1
  01711	85 c9		 test	 ecx, ecx
  01713	74 0c		 je	 SHORT $LN113@draw_missi
  01715	c7 85 f8 ef ff
	ff 7f 00 00 00	 mov	 DWORD PTR tv792[ebp], 127 ; 0000007fH
  0171f	eb 27		 jmp	 SHORT $LN114@draw_missi
$LN113@draw_missi:
  01721	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01727	81 c2 a5 01 00
	00		 add	 edx, 421		; 000001a5H
  0172d	52		 push	 edx
  0172e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01733	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01738	50		 push	 eax
  01739	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0173e	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv792[ebp], 0
$LN114@draw_missi:
  01748	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  0174f	74 10		 je	 SHORT $LN115@draw_missi
  01751	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  01757	8b 11		 mov	 edx, DWORD PTR [ecx]
  01759	89 95 f4 ef ff
	ff		 mov	 DWORD PTR tv805[ebp], edx
  0175f	eb 26		 jmp	 SHORT $LN116@draw_missi
$LN115@draw_missi:
  01761	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01766	05 a4 01 00 00	 add	 eax, 420		; 000001a4H
  0176b	50		 push	 eax
  0176c	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01771	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01777	51		 push	 ecx
  01778	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0177d	c7 85 f4 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv805[ebp], 0
$LN116@draw_missi:
  01787	ba 01 00 00 00	 mov	 edx, 1
  0178c	85 d2		 test	 edx, edx
  0178e	74 0c		 je	 SHORT $LN117@draw_missi
  01790	c7 85 f0 ef ff
	ff 72 00 00 00	 mov	 DWORD PTR tv813[ebp], 114 ; 00000072H
  0179a	eb 26		 jmp	 SHORT $LN118@draw_missi
$LN117@draw_missi:
  0179c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  017a1	05 a4 01 00 00	 add	 eax, 420		; 000001a4H
  017a6	50		 push	 eax
  017a7	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  017ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  017b2	51		 push	 ecx
  017b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  017b8	c7 85 f0 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv813[ebp], 0
$LN118@draw_missi:
  017c2	6a 7f		 push	 127			; 0000007fH
  017c4	8b 95 08 fe ff
	ff		 mov	 edx, DWORD PTR _task$[ebp]
  017ca	52		 push	 edx
  017cb	69 85 fc ef ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv784[ebp], 1116
  017d5	8b 8d f8 ef ff
	ff		 mov	 ecx, DWORD PTR tv792[ebp]
  017db	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  017e2	ff d2		 call	 edx
  017e4	50		 push	 eax
  017e5	6a 72		 push	 114			; 00000072H
  017e7	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  017ed	50		 push	 eax
  017ee	69 8d f4 ef ff
	ff 5c 04 00 00	 imul	 ecx, DWORD PTR tv805[ebp], 1116
  017f8	8b 95 f0 ef ff
	ff		 mov	 edx, DWORD PTR tv813[ebp]
  017fe	8b 84 91 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[ecx+edx*4]
  01805	ff d0		 call	 eax
  01807	50		 push	 eax
  01808	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@MIBJHEEL@COUNT?5?3Kills?$DN?$CFd?5Losses?$DN?$CFd@
  0180d	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _s1$[ebp]
  01813	51		 push	 ecx
  01814	e8 00 00 00 00	 call	 _sprintf
  01819	83 c4 10	 add	 esp, 16			; 00000010H

; 6227 : 		(
; 6228 : 			s1,
; 6229 : 			"COUNT :Kills=%d Losses=%d",
; 6230 : 			get_local_entity_int_value (task, INT_TYPE_KILLS),
; 6231 : 			get_local_entity_int_value (task, INT_TYPE_LOSSES)
; 6232 : 		);
; 6233 : 
; 6234 : 		set_mono_font_position (x_min, y_adjust);

  0181c	51		 push	 ecx
  0181d	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01825	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0182a	51		 push	 ecx
  0182b	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  01833	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01838	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6235 : 
; 6236 : 		print_mono_font_max_length_string (s1);

  0183d	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  01843	50		 push	 eax
  01844	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 6237 : 
; 6238 : 		y_adjust += char_height;

  01849	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01851	f3 0f 58 85 3c
	fe ff ff	 addss	 xmm0, DWORD PTR _char_height$[ebp]
  01859	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6239 : 
; 6240 : 		if (draw_large_mfd)

  01861	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01868	74 1c		 je	 SHORT $LN33@draw_missi

; 6241 : 		{
; 6242 : 			y_adjust += 2.0;

  0186a	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01872	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0187a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0187e	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN33@draw_missi:

; 6243 : 		}
; 6244 : 
; 6245 : 		//
; 6246 : 		// time
; 6247 : 		//
; 6248 : 
; 6249 : 		mission_time = get_local_entity_float_value (task, FLOAT_TYPE_ELAPSED_MISSION_TIME);

  01886	83 bd 08 fe ff
	ff 00		 cmp	 DWORD PTR _task$[ebp], 0
  0188d	74 10		 je	 SHORT $LN119@draw_missi
  0188f	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  01895	8b 08		 mov	 ecx, DWORD PTR [eax]
  01897	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv835[ebp], ecx
  0189d	eb 27		 jmp	 SHORT $LN120@draw_missi
$LN119@draw_missi:
  0189f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  018a5	81 c2 b7 01 00
	00		 add	 edx, 439		; 000001b7H
  018ab	52		 push	 edx
  018ac	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  018b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  018b6	50		 push	 eax
  018b7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  018bc	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv835[ebp], 0
$LN120@draw_missi:
  018c6	b9 01 00 00 00	 mov	 ecx, 1
  018cb	85 c9		 test	 ecx, ecx
  018cd	74 0c		 je	 SHORT $LN121@draw_missi
  018cf	c7 85 f8 ef ff
	ff 22 00 00 00	 mov	 DWORD PTR tv843[ebp], 34 ; 00000022H
  018d9	eb 27		 jmp	 SHORT $LN122@draw_missi
$LN121@draw_missi:
  018db	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  018e1	81 c2 b7 01 00
	00		 add	 edx, 439		; 000001b7H
  018e7	52		 push	 edx
  018e8	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  018ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  018f2	50		 push	 eax
  018f3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  018f8	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv843[ebp], 0
$LN122@draw_missi:
  01902	6a 22		 push	 34			; 00000022H
  01904	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _task$[ebp]
  0190a	51		 push	 ecx
  0190b	69 95 fc ef ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv835[ebp], 700
  01915	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv843[ebp]
  0191b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  01922	ff d1		 call	 ecx
  01924	d9 9d 20 fe ff
	ff		 fstp	 DWORD PTR _mission_time$[ebp]

; 6250 : 
; 6251 : 		get_digital_clock_int_values (mission_time, &mission_hours, &mission_minutes, &mission_seconds);

  0192a	8d 85 4c fe ff
	ff		 lea	 eax, DWORD PTR _mission_seconds$[ebp]
  01930	50		 push	 eax
  01931	8d 8d 50 fe ff
	ff		 lea	 ecx, DWORD PTR _mission_minutes$[ebp]
  01937	51		 push	 ecx
  01938	8d 95 54 fe ff
	ff		 lea	 edx, DWORD PTR _mission_hours$[ebp]
  0193e	52		 push	 edx
  0193f	51		 push	 ecx
  01940	f3 0f 10 85 20
	fe ff ff	 movss	 xmm0, DWORD PTR _mission_time$[ebp]
  01948	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0194d	e8 00 00 00 00	 call	 ?get_digital_clock_int_values@@YGXMPAH00@Z ; get_digital_clock_int_values

; 6252 : 
; 6253 : 		estimated_time = get_task_estimated_route_duration (task);

  01952	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _task$[ebp]
  01958	50		 push	 eax
  01959	e8 00 00 00 00	 call	 ?get_task_estimated_route_duration@@YGMPAUENTITY@@@Z ; get_task_estimated_route_duration
  0195e	d9 9d 1c fe ff
	ff		 fstp	 DWORD PTR _estimated_time$[ebp]

; 6254 : 
; 6255 : 		get_digital_clock_int_values (estimated_time, &estimated_hours, &estimated_minutes, &estimated_seconds);

  01964	8d 85 40 fe ff
	ff		 lea	 eax, DWORD PTR _estimated_seconds$[ebp]
  0196a	50		 push	 eax
  0196b	8d 8d 44 fe ff
	ff		 lea	 ecx, DWORD PTR _estimated_minutes$[ebp]
  01971	51		 push	 ecx
  01972	8d 95 48 fe ff
	ff		 lea	 edx, DWORD PTR _estimated_hours$[ebp]
  01978	52		 push	 edx
  01979	51		 push	 ecx
  0197a	f3 0f 10 85 1c
	fe ff ff	 movss	 xmm0, DWORD PTR _estimated_time$[ebp]
  01982	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01987	e8 00 00 00 00	 call	 ?get_digital_clock_int_values@@YGXMPAH00@Z ; get_digital_clock_int_values

; 6256 : 
; 6257 : 		sprintf

  0198c	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR _estimated_seconds$[ebp]
  01992	50		 push	 eax
  01993	8b 8d 44 fe ff
	ff		 mov	 ecx, DWORD PTR _estimated_minutes$[ebp]
  01999	51		 push	 ecx
  0199a	8b 95 48 fe ff
	ff		 mov	 edx, DWORD PTR _estimated_hours$[ebp]
  019a0	52		 push	 edx
  019a1	8b 85 4c fe ff
	ff		 mov	 eax, DWORD PTR _mission_seconds$[ebp]
  019a7	50		 push	 eax
  019a8	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _mission_minutes$[ebp]
  019ae	51		 push	 ecx
  019af	8b 95 54 fe ff
	ff		 mov	 edx, DWORD PTR _mission_hours$[ebp]
  019b5	52		 push	 edx
  019b6	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@NLIKEJAC@TIME?5?5?3MT?$DN?$CF02d?3?$CF02d?3?$CF02d?5MD?$DN?$CF02@
  019bb	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  019c1	50		 push	 eax
  019c2	e8 00 00 00 00	 call	 _sprintf
  019c7	83 c4 20	 add	 esp, 32			; 00000020H

; 6258 : 		(
; 6259 : 			s1,
; 6260 : 			"TIME  :MT=%02d:%02d:%02d MD=%02d:%02d:%02d",
; 6261 : 			mission_hours,
; 6262 : 			mission_minutes,
; 6263 : 			mission_seconds,
; 6264 : 			estimated_hours,
; 6265 : 			estimated_minutes,
; 6266 : 			estimated_seconds
; 6267 : 		);
; 6268 : 
; 6269 : 		set_mono_font_position (x_min, y_adjust);

  019ca	51		 push	 ecx
  019cb	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  019d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019d8	51		 push	 ecx
  019d9	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  019e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019e6	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6270 : 
; 6271 : 		print_mono_font_max_length_string (s1);

  019eb	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  019f1	50		 push	 eax
  019f2	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string
$LN20@draw_missi:

; 6272 : 	}
; 6273 : 
; 6274 : 	////////////////////////////////////////
; 6275 : 	//
; 6276 : 	// time of day
; 6277 : 	//
; 6278 : 	////////////////////////////////////////
; 6279 : 
; 6280 : 	set_mono_font_colour (MFD_COLOUR_GREEN);

  019f7	b8 04 00 00 00	 mov	 eax, 4
  019fc	6b c8 0d	 imul	 ecx, eax, 13
  019ff	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a05	52		 push	 edx
  01a06	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 6281 : 
; 6282 : 	get_2d_float_screen_y_coordinate (-0.9, &y_adjust);

  01a0b	8d 85 34 fe ff
	ff		 lea	 eax, DWORD PTR _y_adjust$[ebp]
  01a11	50		 push	 eax
  01a12	51		 push	 ecx
  01a13	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  01a1b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a20	e8 00 00 00 00	 call	 ?get_2d_float_screen_y_coordinate@@YGXMPAM@Z ; get_2d_float_screen_y_coordinate

; 6283 : 
; 6284 : 	y_adjust -= 2.0;

  01a25	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01a2d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4000000000000000
  01a35	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a39	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6285 : 
; 6286 : 	draw_line (x_min, y_adjust, x_max, y_adjust, MFD_COLOUR_GREEN);

  01a41	b8 04 00 00 00	 mov	 eax, 4
  01a46	6b c8 0d	 imul	 ecx, eax, 13
  01a49	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a4f	52		 push	 edx
  01a50	51		 push	 ecx
  01a51	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01a59	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a5e	51		 push	 ecx
  01a5f	f3 0f 10 85 28
	fe ff ff	 movss	 xmm0, DWORD PTR _x_max$[ebp]
  01a67	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a6c	51		 push	 ecx
  01a6d	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01a75	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a7a	51		 push	 ecx
  01a7b	f3 0f 10 85 30
	fe ff ff	 movss	 xmm0, DWORD PTR _x_min$[ebp]
  01a83	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a88	e8 00 00 00 00	 call	 ?draw_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_line

; 6287 : 
; 6288 : 	y_adjust += 2.0;

  01a8d	f3 0f 5a 85 34
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01a95	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01a9d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01aa1	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 6289 : 
; 6290 : 	time = get_local_entity_float_value (get_session_entity (), FLOAT_TYPE_TIME_OF_DAY);

  01aa9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  01ab0	74 0f		 je	 SHORT $LN123@draw_missi
  01ab2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  01ab7	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ab9	89 8d fc ef ff
	ff		 mov	 DWORD PTR tv894[ebp], ecx
  01abf	eb 27		 jmp	 SHORT $LN124@draw_missi
$LN123@draw_missi:
  01ac1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01ac7	81 c2 e0 01 00
	00		 add	 edx, 480		; 000001e0H
  01acd	52		 push	 edx
  01ace	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01ad3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01ad8	50		 push	 eax
  01ad9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01ade	c7 85 fc ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv894[ebp], 0
$LN124@draw_missi:
  01ae8	b9 01 00 00 00	 mov	 ecx, 1
  01aed	85 c9		 test	 ecx, ecx
  01aef	74 0c		 je	 SHORT $LN125@draw_missi
  01af1	c7 85 f8 ef ff
	ff 8e 00 00 00	 mov	 DWORD PTR tv902[ebp], 142 ; 0000008eH
  01afb	eb 27		 jmp	 SHORT $LN126@draw_missi
$LN125@draw_missi:
  01afd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_mission_display_mfd@@YGXXZ@4JA
  01b03	81 c2 e0 01 00
	00		 add	 edx, 480		; 000001e0H
  01b09	52		 push	 edx
  01b0a	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01b0f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  01b14	50		 push	 eax
  01b15	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01b1a	c7 85 f8 ef ff
	ff 00 00 00 00	 mov	 DWORD PTR tv902[ebp], 0
$LN126@draw_missi:
  01b24	68 8e 00 00 00	 push	 142			; 0000008eH
  01b29	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  01b2f	51		 push	 ecx
  01b30	69 95 fc ef ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv894[ebp], 700
  01b3a	8b 85 f8 ef ff
	ff		 mov	 eax, DWORD PTR tv902[ebp]
  01b40	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  01b47	ff d1		 call	 ecx
  01b49	d9 9d 24 fe ff
	ff		 fstp	 DWORD PTR _time$[ebp]

; 6291 : 
; 6292 : 	get_digital_clock_int_values (time, &hours, &minutes, &seconds);

  01b4f	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR _seconds$[ebp]
  01b55	50		 push	 eax
  01b56	8d 8d 5c fe ff
	ff		 lea	 ecx, DWORD PTR _minutes$[ebp]
  01b5c	51		 push	 ecx
  01b5d	8d 95 60 fe ff
	ff		 lea	 edx, DWORD PTR _hours$[ebp]
  01b63	52		 push	 edx
  01b64	51		 push	 ecx
  01b65	f3 0f 10 85 24
	fe ff ff	 movss	 xmm0, DWORD PTR _time$[ebp]
  01b6d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b72	e8 00 00 00 00	 call	 ?get_digital_clock_int_values@@YGXMPAH00@Z ; get_digital_clock_int_values

; 6293 : 
; 6294 : 	sprintf (s1, "%02d:%02d:%02d", hours, minutes, seconds);

  01b77	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR _seconds$[ebp]
  01b7d	50		 push	 eax
  01b7e	8b 8d 5c fe ff
	ff		 mov	 ecx, DWORD PTR _minutes$[ebp]
  01b84	51		 push	 ecx
  01b85	8b 95 60 fe ff
	ff		 mov	 edx, DWORD PTR _hours$[ebp]
  01b8b	52		 push	 edx
  01b8c	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@
  01b91	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  01b97	50		 push	 eax
  01b98	e8 00 00 00 00	 call	 _sprintf
  01b9d	83 c4 14	 add	 esp, 20			; 00000014H

; 6295 : 
; 6296 : 	x_adjust = get_mono_font_string_width (s1) * 0.5;

  01ba0	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  01ba6	50		 push	 eax
  01ba7	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01bac	dd 9d f8 ef ff
	ff		 fstp	 QWORD PTR tv1457[ebp]
  01bb2	f2 0f 10 85 f8
	ef ff ff	 movsd	 xmm0, QWORD PTR tv1457[ebp]
  01bba	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  01bc2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01bc6	f3 0f 11 85 38
	fe ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 6297 : 
; 6298 : 	set_mono_font_position (x_mid - x_adjust, y_adjust);

  01bce	51		 push	 ecx
  01bcf	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01bd7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bdc	f3 0f 10 85 2c
	fe ff ff	 movss	 xmm0, DWORD PTR _x_mid$[ebp]
  01be4	f3 0f 5c 85 38
	fe ff ff	 subss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01bec	51		 push	 ecx
  01bed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bf2	e8 00 00 00 00	 call	 ?set_mono_font_position@@YGXMM@Z ; set_mono_font_position

; 6299 : 
; 6300 : 	print_mono_font_string (s1);

  01bf7	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _s1$[ebp]
  01bfd	50		 push	 eax
  01bfe	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 6301 : }

  01c03	5f		 pop	 edi
  01c04	5e		 pop	 esi
  01c05	5b		 pop	 ebx
  01c06	8b e5		 mov	 esp, ebp
  01c08	5d		 pop	 ebp
  01c09	c3		 ret	 0
?draw_mission_display_mfd@@YGXXZ ENDP			; draw_mission_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?print_target_position@@YGXPAUENTITY@@0@Z
_TEXT	SEGMENT
tv88 = -172						; size = 4
tv193 = -168						; size = 4
tv80 = -168						; size = 4
_position$ = -100					; size = 4
_range$ = -96						; size = 4
_bearing$ = -92						; size = 4
_z_sector$ = -88					; size = 4
_x_sector$ = -84					; size = 4
_s$ = -80						; size = 80
_source$ = 8						; size = 4
_target$ = 12						; size = 4
?print_target_position@@YGXPAUENTITY@@0@Z PROC		; print_target_position, COMDAT

; 5765 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 5766 : 	char
; 5767 : 		s[80];
; 5768 : 
; 5769 : 	int
; 5770 : 		x_sector,
; 5771 : 		z_sector,
; 5772 : 		bearing;
; 5773 : 
; 5774 : 	float
; 5775 : 		range;
; 5776 : 
; 5777 : 	vec3d
; 5778 : 		*position;
; 5779 : 
; 5780 : 	ASSERT (source);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _source$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@print_targ
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
  00017	83 c0 0f	 add	 eax, 15			; 0000000fH
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_06OEKOLKIL@source@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@print_targ:

; 5781 : 
; 5782 : 	ASSERT (target);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN3@print_targ
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
  00035	83 c0 11	 add	 eax, 17			; 00000011H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@print_targ:

; 5783 : 
; 5784 : 	position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00048	83 7d 0c 00	 cmp	 DWORD PTR _target$[ebp], 0
  0004c	74 0d		 je	 SHORT $LN7@print_targ
  0004e	8b 45 0c	 mov	 eax, DWORD PTR _target$[ebp]
  00051	8b 08		 mov	 ecx, DWORD PTR [eax]
  00053	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv80[ebp], ecx
  00059	eb 24		 jmp	 SHORT $LN8@print_targ
$LN7@print_targ:
  0005b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
  00061	83 c2 13	 add	 edx, 19			; 00000013H
  00064	52		 push	 edx
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00075	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv80[ebp], 0
$LN8@print_targ:
  0007f	b9 01 00 00 00	 mov	 ecx, 1
  00084	85 c9		 test	 ecx, ecx
  00086	74 0c		 je	 SHORT $LN9@print_targ
  00088	c7 85 54 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv88[ebp], 8
  00092	eb 24		 jmp	 SHORT $LN10@print_targ
$LN9@print_targ:
  00094	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
  0009a	83 c2 13	 add	 edx, 19			; 00000013H
  0009d	52		 push	 edx
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ae	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv88[ebp], 0
$LN10@print_targ:
  000b8	6a 08		 push	 8
  000ba	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  000bd	51		 push	 ecx
  000be	6b 95 58 ff ff
	ff 60		 imul	 edx, DWORD PTR tv80[ebp], 96
  000c5	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR tv88[ebp]
  000cb	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000d2	ff d1		 call	 ecx
  000d4	89 45 9c	 mov	 DWORD PTR _position$[ebp], eax

; 5785 : 
; 5786 : 	ASSERT (position);

  000d7	83 7d 9c 00	 cmp	 DWORD PTR _position$[ebp], 0
  000db	75 18		 jne	 SHORT $LN4@print_targ
  000dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_target_position@@YGXPAUENTITY@@0@Z@4JA
  000e2	83 c0 15	 add	 eax, 21			; 00000015H
  000e5	50		 push	 eax
  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000eb	68 00 00 00 00	 push	 OFFSET ??_C@_08OAGMDKAF@position@
  000f0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@print_targ:

; 5787 : 
; 5788 : 	get_x_sector (x_sector, position->x);

  000f5	8d 45 ac	 lea	 eax, DWORD PTR _x_sector$[ebp]
  000f8	50		 push	 eax
  000f9	8b 4d 9c	 mov	 ecx, DWORD PTR _position$[ebp]
  000fc	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00100	51		 push	 ecx
  00101	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00106	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  0010b	8b 45 ac	 mov	 eax, DWORD PTR _x_sector$[ebp]
  0010e	99		 cdq
  0010f	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  00115	89 45 ac	 mov	 DWORD PTR _x_sector$[ebp], eax

; 5789 : 	get_z_sector (z_sector, position->z);

  00118	8d 45 a8	 lea	 eax, DWORD PTR _z_sector$[ebp]
  0011b	50		 push	 eax
  0011c	8b 4d 9c	 mov	 ecx, DWORD PTR _position$[ebp]
  0011f	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00124	51		 push	 ecx
  00125	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012a	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int
  0012f	8b 45 a8	 mov	 eax, DWORD PTR _z_sector$[ebp]
  00132	99		 cdq
  00133	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?world_map@@3UWORLD_MAP_DATA@@A
  00139	89 45 a8	 mov	 DWORD PTR _z_sector$[ebp], eax

; 5790 : 
; 5791 : 	bearing = (int) (deg (get_local_entity_target_bearing (source, target, &range)));

  0013c	8d 45 a0	 lea	 eax, DWORD PTR _range$[ebp]
  0013f	50		 push	 eax
  00140	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  00143	51		 push	 ecx
  00144	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  00147	52		 push	 edx
  00148	e8 00 00 00 00	 call	 ?get_local_entity_target_bearing@@YGMPAUENTITY@@0PAM@Z ; get_local_entity_target_bearing
  0014d	d9 9d 58 ff ff
	ff		 fstp	 DWORD PTR tv193[ebp]
  00153	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR tv193[ebp]
  0015b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  00163	f3 0f 2c c0	 cvttss2si eax, xmm0
  00167	89 45 a4	 mov	 DWORD PTR _bearing$[ebp], eax

; 5792 : 
; 5793 : 	if (bearing == 0)

  0016a	83 7d a4 00	 cmp	 DWORD PTR _bearing$[ebp], 0
  0016e	75 07		 jne	 SHORT $LN5@print_targ

; 5794 : 	{
; 5795 : 		bearing = 360;

  00170	c7 45 a4 68 01
	00 00		 mov	 DWORD PTR _bearing$[ebp], 360 ; 00000168H
$LN5@print_targ:

; 5796 : 	}
; 5797 : 
; 5798 : 	range *= (float) (1.0 / 1000.0);

  00177	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _range$[ebp]
  0017c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3a83126f
  00184	f3 0f 11 45 a0	 movss	 DWORD PTR _range$[ebp], xmm0

; 5799 : 
; 5800 : 	sprintf (s, "       <%03d,%03d> %6.1fKm %3d\x7f", x_sector, z_sector, range, bearing);

  00189	8b 45 a4	 mov	 eax, DWORD PTR _bearing$[ebp]
  0018c	50		 push	 eax
  0018d	f3 0f 5a 45 a0	 cvtss2sd xmm0, DWORD PTR _range$[ebp]
  00192	83 ec 08	 sub	 esp, 8
  00195	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0019a	8b 4d a8	 mov	 ecx, DWORD PTR _z_sector$[ebp]
  0019d	51		 push	 ecx
  0019e	8b 55 ac	 mov	 edx, DWORD PTR _x_sector$[ebp]
  001a1	52		 push	 edx
  001a2	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NPMPDHNJ@?5?5?5?5?5?5?5?$DM?$CF03d?0?$CF03d?$DO?5?$CF6?41fKm?5?$CF3d?$HP@
  001a7	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  001aa	50		 push	 eax
  001ab	e8 00 00 00 00	 call	 _sprintf
  001b0	83 c4 1c	 add	 esp, 28			; 0000001cH

; 5801 : 
; 5802 : 	print_mono_font_max_length_string (s);

  001b3	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 ?print_mono_font_max_length_string@@YGXPAD@Z ; print_mono_font_max_length_string

; 5803 : }

  001bc	5f		 pop	 edi
  001bd	5e		 pop	 esi
  001be	5b		 pop	 ebx
  001bf	8b e5		 mov	 esp, ebp
  001c1	5d		 pop	 ebp
  001c2	c2 08 00	 ret	 8
?print_target_position@@YGXPAUENTITY@@0@Z ENDP		; print_target_position
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z
_TEXT	SEGMENT
tv222 = -84						; size = 4
tv201 = -84						; size = 4
tv179 = -84						; size = 4
tv158 = -84						; size = 4
tv139 = -84						; size = 4
tv86 = -84						; size = 4
tv214 = -80						; size = 4
tv193 = -80						; size = 4
tv171 = -80						; size = 4
tv151 = -80						; size = 4
tv131 = -80						; size = 4
tv79 = -80						; size = 4
_aircrew$ = -12						; size = 4
_name$ = -8						; size = 4
_rank$ = -4						; size = 4
_en$ = 8						; size = 4
_buffer$ = 12						; size = 4
?get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z PROC	; get_player_rank_and_name, COMDAT

; 5716 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5717 : 	const char
; 5718 : 		*rank,
; 5719 : 		*name;
; 5720 : 
; 5721 : 	entity
; 5722 : 		*aircrew;
; 5723 : 
; 5724 : 	ASSERT (en);

  00009	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN4@get_player
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  00014	83 c0 08	 add	 eax, 8
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02LFNMGJAP@en@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_player:

; 5725 : 
; 5726 : 	ASSERT (buffer);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN5@get_player
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  00032	83 c0 0a	 add	 eax, 10			; 0000000aH
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_06HOHPNJLC@buffer@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@get_player:

; 5727 : 
; 5728 : 	if (get_local_entity_int_value (en, INT_TYPE_PLAYER) != ENTITY_PLAYER_AI)

  00045	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  00049	74 0a		 je	 SHORT $LN11@get_player
  0004b	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	89 4d b0	 mov	 DWORD PTR tv79[ebp], ecx
  00053	eb 1d		 jmp	 SHORT $LN12@get_player
$LN11@get_player:
  00055	68 60 16 00 00	 push	 5728			; 00001660H
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00065	52		 push	 edx
  00066	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006b	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$LN12@get_player:
  00072	b8 01 00 00 00	 mov	 eax, 1
  00077	85 c0		 test	 eax, eax
  00079	74 09		 je	 SHORT $LN13@get_player
  0007b	c7 45 ac 9c 00
	00 00		 mov	 DWORD PTR tv86[ebp], 156 ; 0000009cH
  00082	eb 1d		 jmp	 SHORT $LN14@get_player
$LN13@get_player:
  00084	68 60 16 00 00	 push	 5728			; 00001660H
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0008e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0009a	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv86[ebp], 0
$LN14@get_player:
  000a1	68 9c 00 00 00	 push	 156			; 0000009cH
  000a6	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  000a9	52		 push	 edx
  000aa	69 45 b0 5c 04
	00 00		 imul	 eax, DWORD PTR tv79[ebp], 1116
  000b1	8b 4d ac	 mov	 ecx, DWORD PTR tv86[ebp]
  000b4	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  000bb	ff d2		 call	 edx
  000bd	85 c0		 test	 eax, eax
  000bf	0f 84 e7 02 00
	00		 je	 $LN6@get_player

; 5729 : 	{
; 5730 : 		aircrew = get_local_entity_first_child (en, LIST_TYPE_AIRCREW);

  000c5	83 7d 08 00	 cmp	 DWORD PTR _en$[ebp], 0
  000c9	74 0a		 je	 SHORT $LN15@get_player
  000cb	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  000ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d0	89 4d b0	 mov	 DWORD PTR tv131[ebp], ecx
  000d3	eb 21		 jmp	 SHORT $LN16@get_player
$LN15@get_player:
  000d5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  000db	83 c2 0e	 add	 edx, 14			; 0000000eH
  000de	52		 push	 edx
  000df	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ef	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv131[ebp], 0
$LN16@get_player:
  000f6	b9 01 00 00 00	 mov	 ecx, 1
  000fb	85 c9		 test	 ecx, ecx
  000fd	74 09		 je	 SHORT $LN17@get_player
  000ff	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv139[ebp], 1
  00106	eb 21		 jmp	 SHORT $LN18@get_player
$LN17@get_player:
  00108	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  0010e	83 c2 0e	 add	 edx, 14			; 0000000eH
  00111	52		 push	 edx
  00112	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00117	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0011c	50		 push	 eax
  0011d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00122	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv139[ebp], 0
$LN18@get_player:
  00129	6a 01		 push	 1
  0012b	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0012e	51		 push	 ecx
  0012f	69 55 b0 b4 00
	00 00		 imul	 edx, DWORD PTR tv131[ebp], 180
  00136	8b 45 ac	 mov	 eax, DWORD PTR tv139[ebp]
  00139	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00140	ff d1		 call	 ecx
  00142	89 45 f4	 mov	 DWORD PTR _aircrew$[ebp], eax
$LN2@get_player:

; 5731 : 
; 5732 : 		while (aircrew)

  00145	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  00149	0f 84 03 01 00
	00		 je	 $LN3@get_player

; 5733 : 		{
; 5734 : 			if (get_local_entity_int_value (aircrew, INT_TYPE_ENTITY_SUB_TYPE) == ENTITY_SUB_TYPE_PILOT_PILOT)

  0014f	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  00153	74 0a		 je	 SHORT $LN19@get_player
  00155	8b 45 f4	 mov	 eax, DWORD PTR _aircrew$[ebp]
  00158	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015a	89 4d b0	 mov	 DWORD PTR tv151[ebp], ecx
  0015d	eb 1d		 jmp	 SHORT $LN20@get_player
$LN19@get_player:
  0015f	68 66 16 00 00	 push	 5734			; 00001666H
  00164	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00169	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0016f	52		 push	 edx
  00170	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00175	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv151[ebp], 0
$LN20@get_player:
  0017c	b8 01 00 00 00	 mov	 eax, 1
  00181	85 c0		 test	 eax, eax
  00183	74 09		 je	 SHORT $LN21@get_player
  00185	c7 45 ac 34 00
	00 00		 mov	 DWORD PTR tv158[ebp], 52 ; 00000034H
  0018c	eb 1d		 jmp	 SHORT $LN22@get_player
$LN21@get_player:
  0018e	68 66 16 00 00	 push	 5734			; 00001666H
  00193	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00198	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0019e	51		 push	 ecx
  0019f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001a4	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv158[ebp], 0
$LN22@get_player:
  001ab	6a 34		 push	 52			; 00000034H
  001ad	8b 55 f4	 mov	 edx, DWORD PTR _aircrew$[ebp]
  001b0	52		 push	 edx
  001b1	69 45 b0 5c 04
	00 00		 imul	 eax, DWORD PTR tv151[ebp], 1116
  001b8	8b 4d ac	 mov	 ecx, DWORD PTR tv158[ebp]
  001bb	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  001c2	ff d2		 call	 edx
  001c4	85 c0		 test	 eax, eax
  001c6	75 05		 jne	 SHORT $LN7@get_player

; 5735 : 			{
; 5736 : 				break;

  001c8	e9 85 00 00 00	 jmp	 $LN3@get_player
$LN7@get_player:

; 5737 : 			}
; 5738 : 
; 5739 : 			aircrew = get_local_entity_child_succ (aircrew, LIST_TYPE_AIRCREW);

  001cd	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  001d1	74 0a		 je	 SHORT $LN23@get_player
  001d3	8b 45 f4	 mov	 eax, DWORD PTR _aircrew$[ebp]
  001d6	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d8	89 4d b0	 mov	 DWORD PTR tv171[ebp], ecx
  001db	eb 21		 jmp	 SHORT $LN24@get_player
$LN23@get_player:
  001dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  001e3	83 c2 17	 add	 edx, 23			; 00000017H
  001e6	52		 push	 edx
  001e7	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001f1	50		 push	 eax
  001f2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001f7	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv171[ebp], 0
$LN24@get_player:
  001fe	b9 01 00 00 00	 mov	 ecx, 1
  00203	85 c9		 test	 ecx, ecx
  00205	74 09		 je	 SHORT $LN25@get_player
  00207	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv179[ebp], 1
  0020e	eb 21		 jmp	 SHORT $LN26@get_player
$LN25@get_player:
  00210	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  00216	83 c2 17	 add	 edx, 23			; 00000017H
  00219	52		 push	 edx
  0021a	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0021f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00224	50		 push	 eax
  00225	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0022a	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv179[ebp], 0
$LN26@get_player:
  00231	6a 01		 push	 1
  00233	8b 4d f4	 mov	 ecx, DWORD PTR _aircrew$[ebp]
  00236	51		 push	 ecx
  00237	69 55 b0 b4 00
	00 00		 imul	 edx, DWORD PTR tv171[ebp], 180
  0023e	8b 45 ac	 mov	 eax, DWORD PTR tv179[ebp]
  00241	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00248	ff d1		 call	 ecx
  0024a	89 45 f4	 mov	 DWORD PTR _aircrew$[ebp], eax

; 5740 : 		}

  0024d	e9 f3 fe ff ff	 jmp	 $LN2@get_player
$LN3@get_player:

; 5741 : 
; 5742 : 		if (aircrew)

  00252	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  00256	0f 84 50 01 00
	00		 je	 $LN6@get_player

; 5743 : 		{
; 5744 : 			rank = get_untranslated_pilot_rank_short_name (get_local_entity_int_value (aircrew, INT_TYPE_PILOT_RANK));

  0025c	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  00260	74 0a		 je	 SHORT $LN27@get_player
  00262	8b 45 f4	 mov	 eax, DWORD PTR _aircrew$[ebp]
  00265	8b 08		 mov	 ecx, DWORD PTR [eax]
  00267	89 4d b0	 mov	 DWORD PTR tv193[ebp], ecx
  0026a	eb 21		 jmp	 SHORT $LN28@get_player
$LN27@get_player:
  0026c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  00272	83 c2 1c	 add	 edx, 28			; 0000001cH
  00275	52		 push	 edx
  00276	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0027b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00280	50		 push	 eax
  00281	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00286	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv193[ebp], 0
$LN28@get_player:
  0028d	b9 01 00 00 00	 mov	 ecx, 1
  00292	85 c9		 test	 ecx, ecx
  00294	74 09		 je	 SHORT $LN29@get_player
  00296	c7 45 ac 9a 00
	00 00		 mov	 DWORD PTR tv201[ebp], 154 ; 0000009aH
  0029d	eb 21		 jmp	 SHORT $LN30@get_player
$LN29@get_player:
  0029f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  002a5	83 c2 1c	 add	 edx, 28			; 0000001cH
  002a8	52		 push	 edx
  002a9	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  002ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  002b3	50		 push	 eax
  002b4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002b9	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv201[ebp], 0
$LN30@get_player:
  002c0	68 9a 00 00 00	 push	 154			; 0000009aH
  002c5	8b 4d f4	 mov	 ecx, DWORD PTR _aircrew$[ebp]
  002c8	51		 push	 ecx
  002c9	69 55 b0 5c 04
	00 00		 imul	 edx, DWORD PTR tv193[ebp], 1116
  002d0	8b 45 ac	 mov	 eax, DWORD PTR tv201[ebp]
  002d3	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  002da	ff d1		 call	 ecx
  002dc	50		 push	 eax
  002dd	e8 00 00 00 00	 call	 ?get_untranslated_pilot_rank_short_name@@YGPBDH@Z ; get_untranslated_pilot_rank_short_name
  002e2	89 45 fc	 mov	 DWORD PTR _rank$[ebp], eax

; 5745 : 
; 5746 : 			name = get_local_entity_string (aircrew, STRING_TYPE_PILOTS_NAME);

  002e5	83 7d f4 00	 cmp	 DWORD PTR _aircrew$[ebp], 0
  002e9	74 0a		 je	 SHORT $LN31@get_player
  002eb	8b 45 f4	 mov	 eax, DWORD PTR _aircrew$[ebp]
  002ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f0	89 4d b0	 mov	 DWORD PTR tv214[ebp], ecx
  002f3	eb 21		 jmp	 SHORT $LN32@get_player
$LN31@get_player:
  002f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  002fb	83 c2 1e	 add	 edx, 30			; 0000001eH
  002fe	52		 push	 edx
  002ff	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00304	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00309	50		 push	 eax
  0030a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0030f	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv214[ebp], 0
$LN32@get_player:
  00316	b9 01 00 00 00	 mov	 ecx, 1
  0031b	85 c9		 test	 ecx, ecx
  0031d	74 09		 je	 SHORT $LN33@get_player
  0031f	c7 45 ac 0a 00
	00 00		 mov	 DWORD PTR tv222[ebp], 10 ; 0000000aH
  00326	eb 21		 jmp	 SHORT $LN34@get_player
$LN33@get_player:
  00328	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z@4JA
  0032e	83 c2 1e	 add	 edx, 30			; 0000001eH
  00331	52		 push	 edx
  00332	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00337	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_string_type_message@@3PBDB ; overload_invalid_string_type_message
  0033c	50		 push	 eax
  0033d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00342	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv222[ebp], 0
$LN34@get_player:
  00349	6a 0a		 push	 10			; 0000000aH
  0034b	8b 4d f4	 mov	 ecx, DWORD PTR _aircrew$[ebp]
  0034e	51		 push	 ecx
  0034f	6b 55 b0 34	 imul	 edx, DWORD PTR tv214[ebp], 52
  00353	8b 45 ac	 mov	 eax, DWORD PTR tv222[ebp]
  00356	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_string@@3PAY0N@P6GPBDPAUENTITY@@W4STRING_TYPES@@@ZA[edx+eax*4]
  0035d	ff d1		 call	 ecx
  0035f	89 45 f8	 mov	 DWORD PTR _name$[ebp], eax

; 5747 : 
; 5748 : 			if ((rank && strlen (rank)) && (name && strlen (name)))

  00362	83 7d fc 00	 cmp	 DWORD PTR _rank$[ebp], 0
  00366	74 44		 je	 SHORT $LN6@get_player
  00368	8b 45 fc	 mov	 eax, DWORD PTR _rank$[ebp]
  0036b	50		 push	 eax
  0036c	e8 00 00 00 00	 call	 _strlen
  00371	83 c4 04	 add	 esp, 4
  00374	85 c0		 test	 eax, eax
  00376	74 34		 je	 SHORT $LN6@get_player
  00378	83 7d f8 00	 cmp	 DWORD PTR _name$[ebp], 0
  0037c	74 2e		 je	 SHORT $LN6@get_player
  0037e	8b 45 f8	 mov	 eax, DWORD PTR _name$[ebp]
  00381	50		 push	 eax
  00382	e8 00 00 00 00	 call	 _strlen
  00387	83 c4 04	 add	 esp, 4
  0038a	85 c0		 test	 eax, eax
  0038c	74 1e		 je	 SHORT $LN6@get_player

; 5749 : 			{
; 5750 : 				sprintf (buffer, "%s %s", rank, name);

  0038e	8b 45 f8	 mov	 eax, DWORD PTR _name$[ebp]
  00391	50		 push	 eax
  00392	8b 4d fc	 mov	 ecx, DWORD PTR _rank$[ebp]
  00395	51		 push	 ecx
  00396	68 00 00 00 00	 push	 OFFSET ??_C@_05DNIIFBMG@?$CFs?5?$CFs@
  0039b	8b 55 0c	 mov	 edx, DWORD PTR _buffer$[ebp]
  0039e	52		 push	 edx
  0039f	e8 00 00 00 00	 call	 _sprintf
  003a4	83 c4 10	 add	 esp, 16			; 00000010H

; 5751 : 
; 5752 : 				return (buffer);

  003a7	8b 45 0c	 mov	 eax, DWORD PTR _buffer$[ebp]
  003aa	eb 02		 jmp	 SHORT $LN1@get_player
$LN6@get_player:

; 5753 : 			}
; 5754 : 		}
; 5755 : 	}
; 5756 : 
; 5757 : 	return (NULL);

  003ac	33 c0		 xor	 eax, eax
$LN1@get_player:

; 5758 : }

  003ae	5f		 pop	 edi
  003af	5e		 pop	 esi
  003b0	5b		 pop	 ebx
  003b1	8b e5		 mov	 esp, ebp
  003b3	5d		 pop	 ebp
  003b4	c2 08 00	 ret	 8
?get_player_rank_and_name@@YGPADPAUENTITY@@PAD@Z ENDP	; get_player_rank_and_name
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?print_mono_font_max_length_string@@YGXPAD@Z
_TEXT	SEGMENT
_buffer$ = -200						; size = 200
_s$ = 8							; size = 4
?print_mono_font_max_length_string@@YGXPAD@Z PROC	; print_mono_font_max_length_string, COMDAT

; 5700 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 5701 : 	char
; 5702 : 		buffer[200];
; 5703 : 
; 5704 : 	ASSERT (s);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _s$[ebp], 0
  00010	75 18		 jne	 SHORT $LN2@print_mono
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_mono_font_max_length_string@@YGXPAD@Z@4JA
  00017	83 c0 04	 add	 eax, 4
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_01LKDEMHDF@s@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@print_mono:

; 5705 : 
; 5706 : 	sprintf (buffer, "%.31s", s);

  0002a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_05KEIIKJGB@?$CF?431s@
  00033	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 _sprintf
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5707 : 
; 5708 : 	print_mono_font_string (buffer);

  00042	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5709 : }

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
?print_mono_font_max_length_string@@YGXPAD@Z ENDP	; print_mono_font_max_length_string
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_flight_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv138 = -76						; size = 4
tv82 = -72						; size = 4
tv74 = -68						; size = 4
?draw_flight_display_mfd@@YGXXZ PROC			; draw_flight_display_mfd, COMDAT

; 5670 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5671 : 	set_mono_font_colour (MFD_COLOUR_LIGHT_BLUE);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	c1 e0 04	 shl	 eax, 4
  00011	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00017	51		 push	 ecx
  00018	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 5672 : 
; 5673 : 	draw_pitch_ladder ();

  0001d	e8 00 00 00 00	 call	 ?draw_pitch_ladder@@YGXXZ ; draw_pitch_ladder

; 5674 : 
; 5675 : 	draw_heading_scale (get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_HEADING), TRUE);

  00022	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00029	74 0c		 je	 SHORT $LN3@draw_fligh
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	89 4d bc	 mov	 DWORD PTR tv74[ebp], ecx
  00035	eb 21		 jmp	 SHORT $LN4@draw_fligh
$LN3@draw_fligh:
  00037	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA
  0003d	83 c2 05	 add	 edx, 5
  00040	52		 push	 edx
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00051	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@draw_fligh:
  00058	b9 01 00 00 00	 mov	 ecx, 1
  0005d	85 c9		 test	 ecx, ecx
  0005f	74 09		 je	 SHORT $LN5@draw_fligh
  00061	c7 45 b8 34 00
	00 00		 mov	 DWORD PTR tv82[ebp], 52	; 00000034H
  00068	eb 21		 jmp	 SHORT $LN6@draw_fligh
$LN5@draw_fligh:
  0006a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_flight_display_mfd@@YGXXZ@4JA
  00070	83 c2 05	 add	 edx, 5
  00073	52		 push	 edx
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00084	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
$LN6@draw_fligh:
  0008b	6a 01		 push	 1
  0008d	6a 34		 push	 52			; 00000034H
  0008f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00095	51		 push	 ecx
  00096	69 55 bc bc 02
	00 00		 imul	 edx, DWORD PTR tv74[ebp], 700
  0009d	8b 45 b8	 mov	 eax, DWORD PTR tv82[ebp]
  000a0	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  000a7	ff d1		 call	 ecx
  000a9	d9 5d b4	 fstp	 DWORD PTR tv138[ebp]
  000ac	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR tv138[ebp]
  000b1	51		 push	 ecx
  000b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b7	e8 00 00 00 00	 call	 ?draw_heading_scale@@YGXMH@Z ; draw_heading_scale

; 5676 : 
; 5677 : 	draw_airspeed_scale();

  000bc	e8 00 00 00 00	 call	 ?draw_airspeed_scale@@YGXXZ ; draw_airspeed_scale

; 5678 : 	draw_sideslip_scale();

  000c1	e8 00 00 00 00	 call	 ?draw_sideslip_scale@@YGXXZ ; draw_sideslip_scale

; 5679 : 
; 5680 : 	draw_altitude_scale();

  000c6	e8 00 00 00 00	 call	 ?draw_altitude_scale@@YGXXZ ; draw_altitude_scale

; 5681 : 
; 5682 : 	draw_rate_of_climb_scale ();

  000cb	e8 00 00 00 00	 call	 ?draw_rate_of_climb_scale@@YGXXZ ; draw_rate_of_climb_scale

; 5683 : 
; 5684 : 	display_waypoint_information ();

  000d0	e8 00 00 00 00	 call	 ?display_waypoint_information@@YGXXZ ; display_waypoint_information

; 5685 : 
; 5686 : 	draw_aircraft_datum();

  000d5	e8 00 00 00 00	 call	 ?draw_aircraft_datum@@YGXXZ ; draw_aircraft_datum

; 5687 : }

  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5b		 pop	 ebx
  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c3		 ret	 0
?draw_flight_display_mfd@@YGXXZ ENDP			; draw_flight_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?display_waypoint_information@@YGXXZ
_TEXT	SEGMENT
tv215 = -200						; size = 4
tv186 = -200						; size = 4
tv150 = -200						; size = 4
tv84 = -200						; size = 4
tv365 = -196						; size = 4
tv341 = -196						; size = 4
tv207 = -196						; size = 4
tv178 = -196						; size = 4
tv142 = -196						; size = 4
tv76 = -196						; size = 4
_seconds$1 = -128					; size = 4
_minutes$2 = -124					; size = 4
_hours$3 = -120						; size = 4
_time_to_go$4 = -116					; size = 4
_f$5 = -112						; size = 4
_i$6 = -108						; size = 4
_waypoint_range$ = -104					; size = 4
_waypoint_position$ = -100				; size = 12
_gunship_position$ = -88				; size = 4
_wp$ = -84						; size = 4
_buffer$ = -80						; size = 80
?display_waypoint_information@@YGXXZ PROC		; display_waypoint_information, COMDAT

; 5557 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 5558 : 	char
; 5559 : 		buffer[80];
; 5560 : 
; 5561 : 	entity
; 5562 : 		*wp;
; 5563 : 
; 5564 : 	vec3d
; 5565 : 		*gunship_position,
; 5566 : 		waypoint_position;
; 5567 : 
; 5568 : 	float
; 5569 : 		waypoint_range;
; 5570 : 
; 5571 : 	wp = get_local_entity_current_waypoint (get_gunship_entity ());

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_current_waypoint
  00017	89 45 ac	 mov	 DWORD PTR _wp$[ebp], eax

; 5572 : 
; 5573 : 	if (wp)

  0001a	83 7d ac 00	 cmp	 DWORD PTR _wp$[ebp], 0
  0001e	0f 84 c5 04 00
	00		 je	 $LN2@display_wa

; 5574 : 	{
; 5575 : 		if (draw_large_mfd)

  00024	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0002b	74 09		 je	 SHORT $LN3@display_wa

; 5576 : 		{
; 5577 : 			set_mono_font_type (MONO_FONT_TYPE_5X9);

  0002d	6a 02		 push	 2
  0002f	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 5578 : 		}
; 5579 : 		else

  00034	eb 07		 jmp	 SHORT $LN4@display_wa
$LN3@display_wa:

; 5580 : 		{
; 5581 : 			set_mono_font_type (MONO_FONT_TYPE_5X7);

  00036	6a 01		 push	 1
  00038	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN4@display_wa:

; 5582 : 		}
; 5583 : 
; 5584 : 		gunship_position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  0003d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00044	74 0f		 je	 SHORT $LN14@display_wa
  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0004b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004d	89 8d 3c ff ff
	ff		 mov	 DWORD PTR tv76[ebp], ecx
  00053	eb 24		 jmp	 SHORT $LN15@display_wa
$LN14@display_wa:
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA
  0005b	83 c2 1b	 add	 edx, 27			; 0000001bH
  0005e	52		 push	 edx
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006f	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv76[ebp], 0
$LN15@display_wa:
  00079	b9 01 00 00 00	 mov	 ecx, 1
  0007e	85 c9		 test	 ecx, ecx
  00080	74 0c		 je	 SHORT $LN16@display_wa
  00082	c7 85 38 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv84[ebp], 8
  0008c	eb 24		 jmp	 SHORT $LN17@display_wa
$LN16@display_wa:
  0008e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA
  00094	83 c2 1b	 add	 edx, 27			; 0000001bH
  00097	52		 push	 edx
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0009d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a8	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv84[ebp], 0
$LN17@display_wa:
  000b2	6a 08		 push	 8
  000b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000ba	51		 push	 ecx
  000bb	6b 95 3c ff ff
	ff 60		 imul	 edx, DWORD PTR tv76[ebp], 96
  000c2	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR tv84[ebp]
  000c8	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000cf	ff d1		 call	 ecx
  000d1	89 45 a8	 mov	 DWORD PTR _gunship_position$[ebp], eax

; 5585 : 
; 5586 : 		get_waypoint_display_position (get_gunship_entity (), wp, &waypoint_position);

  000d4	8d 45 9c	 lea	 eax, DWORD PTR _waypoint_position$[ebp]
  000d7	50		 push	 eax
  000d8	8b 4d ac	 mov	 ecx, DWORD PTR _wp$[ebp]
  000db	51		 push	 ecx
  000dc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000e2	52		 push	 edx
  000e3	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 5587 : 
; 5588 : 		//
; 5589 : 		// waypoint id & range
; 5590 : 		//
; 5591 : 
; 5592 : 		waypoint_range = get_2d_range (gunship_position, &waypoint_position);

  000e8	8d 45 9c	 lea	 eax, DWORD PTR _waypoint_position$[ebp]
  000eb	50		 push	 eax
  000ec	8b 4d a8	 mov	 ecx, DWORD PTR _gunship_position$[ebp]
  000ef	51		 push	 ecx
  000f0	e8 00 00 00 00	 call	 ?get_2d_range@@YGMPBUVEC3D@@0@Z ; get_2d_range
  000f5	d9 5d 98	 fstp	 DWORD PTR _waypoint_range$[ebp]

; 5593 : 
; 5594 : 		if (!ka50_damage.navigation_computer)

  000f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  000fd	c1 e8 04	 shr	 eax, 4
  00100	83 e0 01	 and	 eax, 1
  00103	0f 85 7a 02 00
	00		 jne	 $LN5@display_wa

; 5595 : 		{
; 5596 : 			if (waypoint_range < 1000.0)

  00109	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _waypoint_range$[ebp]
  0010e	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  00116	66 0f 2f c8	 comisd	 xmm1, xmm0
  0011a	0f 86 ae 00 00
	00		 jbe	 $LN7@display_wa

; 5597 : 			{
; 5598 : 				sprintf (buffer, "%c: %d M", get_local_entity_char_value (wp, CHAR_TYPE_TAG), (int) waypoint_range);

  00120	83 7d ac 00	 cmp	 DWORD PTR _wp$[ebp], 0
  00124	74 0d		 je	 SHORT $LN18@display_wa
  00126	8b 45 ac	 mov	 eax, DWORD PTR _wp$[ebp]
  00129	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012b	89 8d 3c ff ff
	ff		 mov	 DWORD PTR tv142[ebp], ecx
  00131	eb 24		 jmp	 SHORT $LN19@display_wa
$LN18@display_wa:
  00133	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA
  00139	83 c2 29	 add	 edx, 41			; 00000029H
  0013c	52		 push	 edx
  0013d	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00142	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00147	50		 push	 eax
  00148	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0014d	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv142[ebp], 0
$LN19@display_wa:
  00157	b9 01 00 00 00	 mov	 ecx, 1
  0015c	85 c9		 test	 ecx, ecx
  0015e	74 0c		 je	 SHORT $LN20@display_wa
  00160	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], 0
  0016a	eb 24		 jmp	 SHORT $LN21@display_wa
$LN20@display_wa:
  0016c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA
  00172	83 c2 29	 add	 edx, 41			; 00000029H
  00175	52		 push	 edx
  00176	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0017b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  00180	50		 push	 eax
  00181	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00186	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], 0
$LN21@display_wa:
  00190	f3 0f 2c 4d 98	 cvttss2si ecx, DWORD PTR _waypoint_range$[ebp]
  00195	51		 push	 ecx
  00196	6a 00		 push	 0
  00198	8b 55 ac	 mov	 edx, DWORD PTR _wp$[ebp]
  0019b	52		 push	 edx
  0019c	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR tv150[ebp]
  001a2	c1 e0 02	 shl	 eax, 2
  001a5	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR tv142[ebp]
  001ab	8b 94 c8 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[eax+ecx*8]
  001b2	ff d2		 call	 edx
  001b4	0f b6 c0	 movzx	 eax, al
  001b7	50		 push	 eax
  001b8	68 00 00 00 00	 push	 OFFSET ??_C@_08EELEMDEH@?$CFc?3?5?$CFd?5M@
  001bd	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  001c0	51		 push	 ecx
  001c1	e8 00 00 00 00	 call	 _sprintf
  001c6	83 c4 10	 add	 esp, 16			; 00000010H
  001c9	e9 b3 01 00 00	 jmp	 $LN10@display_wa
$LN7@display_wa:

; 5599 : 			}
; 5600 : 			else if (waypoint_range < 100000.0)

  001ce	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _waypoint_range$[ebp]
  001d3	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40f86a0000000000
  001db	66 0f 2f c8	 comisd	 xmm1, xmm0
  001df	0f 86 e7 00 00
	00		 jbe	 $LN9@display_wa

; 5601 : 			{
; 5602 : 				int
; 5603 : 					i;
; 5604 : 
; 5605 : 				float
; 5606 : 					f;
; 5607 : 
; 5608 : 				//
; 5609 : 				// this is required to prevent rounding errors around the 100Km mark
; 5610 : 				//
; 5611 : 
; 5612 : 				i = (int) waypoint_range * (1.0 / 100.0);

  001e5	f3 0f 2c 45 98	 cvttss2si eax, DWORD PTR _waypoint_range$[ebp]
  001ea	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  001ee	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  001f6	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  001fa	89 4d 94	 mov	 DWORD PTR _i$6[ebp], ecx

; 5613 : 
; 5614 : 				f = (float) i * (1.0 / 10.0);

  001fd	f3 0f 2a 45 94	 cvtsi2ss xmm0, DWORD PTR _i$6[ebp]
  00202	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00206	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  0020e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00212	f3 0f 11 45 90	 movss	 DWORD PTR _f$5[ebp], xmm0

; 5615 : 
; 5616 : 				sprintf (buffer, "%c: %.1f KM", get_local_entity_char_value (wp, CHAR_TYPE_TAG), f);

  00217	83 7d ac 00	 cmp	 DWORD PTR _wp$[ebp], 0
  0021b	74 0d		 je	 SHORT $LN22@display_wa
  0021d	8b 45 ac	 mov	 eax, DWORD PTR _wp$[ebp]
  00220	8b 08		 mov	 ecx, DWORD PTR [eax]
  00222	89 8d 3c ff ff
	ff		 mov	 DWORD PTR tv178[ebp], ecx
  00228	eb 24		 jmp	 SHORT $LN23@display_wa
$LN22@display_wa:
  0022a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA
  00230	83 c2 3b	 add	 edx, 59			; 0000003bH
  00233	52		 push	 edx
  00234	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00239	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0023e	50		 push	 eax
  0023f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00244	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv178[ebp], 0
$LN23@display_wa:
  0024e	b9 01 00 00 00	 mov	 ecx, 1
  00253	85 c9		 test	 ecx, ecx
  00255	74 0c		 je	 SHORT $LN24@display_wa
  00257	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv186[ebp], 0
  00261	eb 24		 jmp	 SHORT $LN25@display_wa
$LN24@display_wa:
  00263	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA
  00269	83 c2 3b	 add	 edx, 59			; 0000003bH
  0026c	52		 push	 edx
  0026d	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00272	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  00277	50		 push	 eax
  00278	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0027d	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv186[ebp], 0
$LN25@display_wa:
  00287	f3 0f 5a 45 90	 cvtss2sd xmm0, DWORD PTR _f$5[ebp]
  0028c	83 ec 08	 sub	 esp, 8
  0028f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00294	6a 00		 push	 0
  00296	8b 4d ac	 mov	 ecx, DWORD PTR _wp$[ebp]
  00299	51		 push	 ecx
  0029a	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR tv186[ebp]
  002a0	c1 e2 02	 shl	 edx, 2
  002a3	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR tv178[ebp]
  002a9	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[edx+eax*8]
  002b0	ff d1		 call	 ecx
  002b2	0f b6 d0	 movzx	 edx, al
  002b5	52		 push	 edx
  002b6	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FOMEHBFC@?$CFc?3?5?$CF?41f?5KM@
  002bb	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  002be	50		 push	 eax
  002bf	e8 00 00 00 00	 call	 _sprintf
  002c4	83 c4 14	 add	 esp, 20			; 00000014H

; 5617 : 			}
; 5618 : 			else

  002c7	e9 b5 00 00 00	 jmp	 $LN10@display_wa
$LN9@display_wa:

; 5619 : 			{
; 5620 : 				sprintf (buffer, "%c: %d KM", get_local_entity_char_value (wp, CHAR_TYPE_TAG), (int) (waypoint_range * (1.0 / 1000.0)));

  002cc	83 7d ac 00	 cmp	 DWORD PTR _wp$[ebp], 0
  002d0	74 0d		 je	 SHORT $LN26@display_wa
  002d2	8b 45 ac	 mov	 eax, DWORD PTR _wp$[ebp]
  002d5	8b 08		 mov	 ecx, DWORD PTR [eax]
  002d7	89 8d 3c ff ff
	ff		 mov	 DWORD PTR tv207[ebp], ecx
  002dd	eb 24		 jmp	 SHORT $LN27@display_wa
$LN26@display_wa:
  002df	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA
  002e5	83 c2 3f	 add	 edx, 63			; 0000003fH
  002e8	52		 push	 edx
  002e9	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  002ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  002f3	50		 push	 eax
  002f4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  002f9	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv207[ebp], 0
$LN27@display_wa:
  00303	b9 01 00 00 00	 mov	 ecx, 1
  00308	85 c9		 test	 ecx, ecx
  0030a	74 0c		 je	 SHORT $LN28@display_wa
  0030c	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv215[ebp], 0
  00316	eb 24		 jmp	 SHORT $LN29@display_wa
$LN28@display_wa:
  00318	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??display_waypoint_information@@YGXXZ@4JA
  0031e	83 c2 3f	 add	 edx, 63			; 0000003fH
  00321	52		 push	 edx
  00322	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00327	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  0032c	50		 push	 eax
  0032d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00332	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv215[ebp], 0
$LN29@display_wa:
  0033c	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _waypoint_range$[ebp]
  00341	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00349	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  0034d	51		 push	 ecx
  0034e	6a 00		 push	 0
  00350	8b 55 ac	 mov	 edx, DWORD PTR _wp$[ebp]
  00353	52		 push	 edx
  00354	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR tv215[ebp]
  0035a	c1 e0 02	 shl	 eax, 2
  0035d	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR tv207[ebp]
  00363	8b 94 c8 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[eax+ecx*8]
  0036a	ff d2		 call	 edx
  0036c	0f b6 c0	 movzx	 eax, al
  0036f	50		 push	 eax
  00370	68 00 00 00 00	 push	 OFFSET ??_C@_09KJKGCNAK@?$CFc?3?5?$CFd?5KM@
  00375	8d 4d b0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00378	51		 push	 ecx
  00379	e8 00 00 00 00	 call	 _sprintf
  0037e	83 c4 10	 add	 esp, 16			; 00000010H
$LN10@display_wa:

; 5621 : 			}
; 5622 : 		}
; 5623 : 		else

  00381	eb 11		 jmp	 SHORT $LN6@display_wa
$LN5@display_wa:

; 5624 : 		{
; 5625 : 			sprintf (buffer, "-:--.-");

  00383	68 00 00 00 00	 push	 OFFSET ??_C@_06BAOIPBEF@?9?3?9?9?4?9@
  00388	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  0038b	50		 push	 eax
  0038c	e8 00 00 00 00	 call	 _sprintf
  00391	83 c4 08	 add	 esp, 8
$LN6@display_wa:

; 5626 : 		}
; 5627 : 
; 5628 : 		set_2d_mono_font_position (1.0, -0.7);

  00394	51		 push	 ecx
  00395	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  0039d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a2	51		 push	 ecx
  003a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b0	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5629 : 
; 5630 : 		set_mono_font_rel_position (-get_mono_font_string_width(buffer) - 4, 0.0);

  003b5	51		 push	 ecx
  003b6	0f 57 c0	 xorps	 xmm0, xmm0
  003b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003be	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  003c1	50		 push	 eax
  003c2	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  003c7	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv341[ebp]
  003cd	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv341[ebp]
  003d5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  003dc	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40800000
  003e4	51		 push	 ecx
  003e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ea	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5631 : 
; 5632 : 		print_mono_font_string (buffer);

  003ef	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  003f2	50		 push	 eax
  003f3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5633 : 
; 5634 : 		//
; 5635 : 		// time to go
; 5636 : 		//
; 5637 : 
; 5638 : 		if ((current_flight_dynamics->velocity_z.value > 0.1) && (!ka50_damage.navigation_computer))

  003f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  003fd	f3 0f 5a 80 9c
	20 00 00	 cvtss2sd xmm0, DWORD PTR [eax+8348]
  00405	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fb999999999999a
  0040d	76 65		 jbe	 SHORT $LN11@display_wa
  0040f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  00414	c1 e8 04	 shr	 eax, 4
  00417	83 e0 01	 and	 eax, 1
  0041a	75 58		 jne	 SHORT $LN11@display_wa

; 5639 : 		{
; 5640 : 			float
; 5641 : 				time_to_go,
; 5642 : 				hours,
; 5643 : 				minutes,
; 5644 : 				seconds;
; 5645 : 
; 5646 : 			time_to_go = waypoint_range / current_flight_dynamics->velocity_z.value;

  0041c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00421	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _waypoint_range$[ebp]
  00426	f3 0f 5e 80 9c
	20 00 00	 divss	 xmm0, DWORD PTR [eax+8348]
  0042e	f3 0f 11 45 8c	 movss	 DWORD PTR _time_to_go$4[ebp], xmm0

; 5647 : 
; 5648 : 			get_digital_clock_values (time_to_go, &hours, &minutes, &seconds);

  00433	8d 45 80	 lea	 eax, DWORD PTR _seconds$1[ebp]
  00436	50		 push	 eax
  00437	8d 4d 84	 lea	 ecx, DWORD PTR _minutes$2[ebp]
  0043a	51		 push	 ecx
  0043b	8d 55 88	 lea	 edx, DWORD PTR _hours$3[ebp]
  0043e	52		 push	 edx
  0043f	51		 push	 ecx
  00440	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _time_to_go$4[ebp]
  00445	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044a	e8 00 00 00 00	 call	 ?get_digital_clock_values@@YGXMPAM00@Z ; get_digital_clock_values

; 5649 : 
; 5650 : 			sprintf (buffer, "%02d:%02d:%02d", (int) hours, (int) minutes, (int) seconds);

  0044f	f3 0f 2c 45 80	 cvttss2si eax, DWORD PTR _seconds$1[ebp]
  00454	50		 push	 eax
  00455	f3 0f 2c 4d 84	 cvttss2si ecx, DWORD PTR _minutes$2[ebp]
  0045a	51		 push	 ecx
  0045b	f3 0f 2c 55 88	 cvttss2si edx, DWORD PTR _hours$3[ebp]
  00460	52		 push	 edx
  00461	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@
  00466	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  00469	50		 push	 eax
  0046a	e8 00 00 00 00	 call	 _sprintf
  0046f	83 c4 14	 add	 esp, 20			; 00000014H

; 5651 : 		}
; 5652 : 		else

  00472	eb 11		 jmp	 SHORT $LN12@display_wa
$LN11@display_wa:

; 5653 : 		{
; 5654 : 			strcpy (buffer, "--:--:--");

  00474	68 00 00 00 00	 push	 OFFSET ??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@
  00479	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  0047c	50		 push	 eax
  0047d	e8 00 00 00 00	 call	 _strcpy
  00482	83 c4 08	 add	 esp, 8
$LN12@display_wa:

; 5655 : 		}
; 5656 : 
; 5657 : 		set_2d_mono_font_position (1.0, -0.8);

  00485	51		 push	 ecx
  00486	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0048e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00493	51		 push	 ecx
  00494	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0049c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a1	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5658 : 
; 5659 : 		set_mono_font_rel_position (-get_mono_font_string_width(buffer) - 4, 0.0);

  004a6	51		 push	 ecx
  004a7	0f 57 c0	 xorps	 xmm0, xmm0
  004aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004af	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  004b2	50		 push	 eax
  004b3	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  004b8	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv365[ebp]
  004be	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv365[ebp]
  004c6	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  004cd	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40800000
  004d5	51		 push	 ecx
  004d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004db	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5660 : 
; 5661 : 		print_mono_font_string (buffer);

  004e0	8d 45 b0	 lea	 eax, DWORD PTR _buffer$[ebp]
  004e3	50		 push	 eax
  004e4	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN2@display_wa:

; 5662 : 	}
; 5663 : }

  004e9	5f		 pop	 edi
  004ea	5e		 pop	 esi
  004eb	5b		 pop	 ebx
  004ec	8b e5		 mov	 esp, ebp
  004ee	5d		 pop	 ebp
  004ef	c3		 ret	 0
?display_waypoint_information@@YGXXZ ENDP		; display_waypoint_information
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_rate_of_climb_scale@@YGXXZ
_TEXT	SEGMENT
tv213 = -88						; size = 8
tv214 = -80						; size = 8
_y$ = -8						; size = 4
_xpos$ = -4						; size = 4
?draw_rate_of_climb_scale@@YGXXZ PROC			; draw_rate_of_climb_scale, COMDAT

; 5518 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5519 : 	float
; 5520 : 		xpos = 0.47,

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef0a3d7
  00011	f3 0f 11 45 fc	 movss	 DWORD PTR _xpos$[ebp], xmm0

; 5521 : 		y;
; 5522 : 
; 5523 : 	//
; 5524 : 	// draw scale
; 5525 : 	//
; 5526 : 
; 5527 : 	draw_2d_line (+xpos, +0.500, xpos + 0.050, +0.500, MFD_COLOUR_LIGHT_BLUE);

  00016	b8 04 00 00 00	 mov	 eax, 4
  0001b	c1 e0 04	 shl	 eax, 4
  0001e	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00024	51		 push	 ecx
  00025	51		 push	 ecx
  00026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _xpos$[ebp]
  00038	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa999999999999a
  00040	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00044	51		 push	 ecx
  00045	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004a	51		 push	 ecx
  0004b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00053	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00058	51		 push	 ecx
  00059	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _xpos$[ebp]
  0005e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00063	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5528 : 	draw_2d_line (+xpos, +0.400, xpos + 0.025, +0.400, MFD_COLOUR_LIGHT_BLUE);

  00068	b8 04 00 00 00	 mov	 eax, 4
  0006d	c1 e0 04	 shl	 eax, 4
  00070	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00076	51		 push	 ecx
  00077	51		 push	 ecx
  00078	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  00080	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00085	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _xpos$[ebp]
  0008a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9999999999999a
  00092	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00096	51		 push	 ecx
  00097	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009c	51		 push	 ecx
  0009d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  000a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000aa	51		 push	 ecx
  000ab	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _xpos$[ebp]
  000b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5529 : 	draw_2d_line (+xpos, +0.300, xpos + 0.025, +0.300, MFD_COLOUR_LIGHT_BLUE);

  000ba	b8 04 00 00 00	 mov	 eax, 4
  000bf	c1 e0 04	 shl	 eax, 4
  000c2	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  000c8	51		 push	 ecx
  000c9	51		 push	 ecx
  000ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  000d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d7	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _xpos$[ebp]
  000dc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9999999999999a
  000e4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000e8	51		 push	 ecx
  000e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ee	51		 push	 ecx
  000ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  000f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fc	51		 push	 ecx
  000fd	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _xpos$[ebp]
  00102	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00107	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5530 : 	draw_2d_line (+xpos, +0.200, xpos + 0.025, +0.200, MFD_COLOUR_LIGHT_BLUE);

  0010c	b8 04 00 00 00	 mov	 eax, 4
  00111	c1 e0 04	 shl	 eax, 4
  00114	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0011a	51		 push	 ecx
  0011b	51		 push	 ecx
  0011c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00124	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00129	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _xpos$[ebp]
  0012e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9999999999999a
  00136	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0013a	51		 push	 ecx
  0013b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00140	51		 push	 ecx
  00141	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00149	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014e	51		 push	 ecx
  0014f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _xpos$[ebp]
  00154	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00159	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5531 : 	draw_2d_line (+xpos, +0.100, xpos + 0.025, +0.100, MFD_COLOUR_LIGHT_BLUE);

  0015e	b8 04 00 00 00	 mov	 eax, 4
  00163	c1 e0 04	 shl	 eax, 4
  00166	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0016c	51		 push	 ecx
  0016d	51		 push	 ecx
  0016e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00176	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017b	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _xpos$[ebp]
  00180	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9999999999999a
  00188	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0018c	51		 push	 ecx
  0018d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00192	51		 push	 ecx
  00193	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0019b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a0	51		 push	 ecx
  001a1	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _xpos$[ebp]
  001a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ab	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5532 : 	draw_2d_line (+xpos, +0.000, xpos + 0.050, +0.000, MFD_COLOUR_LIGHT_BLUE);

  001b0	b8 04 00 00 00	 mov	 eax, 4
  001b5	c1 e0 04	 shl	 eax, 4
  001b8	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  001be	51		 push	 ecx
  001bf	51		 push	 ecx
  001c0	0f 57 c0	 xorps	 xmm0, xmm0
  001c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c8	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _xpos$[ebp]
  001cd	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa999999999999a
  001d5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001d9	51		 push	 ecx
  001da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001df	51		 push	 ecx
  001e0	0f 57 c0	 xorps	 xmm0, xmm0
  001e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e8	51		 push	 ecx
  001e9	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _xpos$[ebp]
  001ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5533 : 	draw_2d_line (+xpos, -0.100, xpos + 0.025, -0.100, MFD_COLOUR_LIGHT_BLUE);

  001f8	b8 04 00 00 00	 mov	 eax, 4
  001fd	c1 e0 04	 shl	 eax, 4
  00200	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00206	51		 push	 ecx
  00207	51		 push	 ecx
  00208	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  00210	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00215	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _xpos$[ebp]
  0021a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9999999999999a
  00222	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00226	51		 push	 ecx
  00227	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022c	51		 push	 ecx
  0022d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  00235	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023a	51		 push	 ecx
  0023b	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _xpos$[ebp]
  00240	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00245	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5534 : 	draw_2d_line (+xpos, -0.200, xpos + 0.025, -0.200, MFD_COLOUR_LIGHT_BLUE);

  0024a	b8 04 00 00 00	 mov	 eax, 4
  0024f	c1 e0 04	 shl	 eax, 4
  00252	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00258	51		 push	 ecx
  00259	51		 push	 ecx
  0025a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00262	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00267	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _xpos$[ebp]
  0026c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9999999999999a
  00274	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00278	51		 push	 ecx
  00279	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027e	51		 push	 ecx
  0027f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  00287	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028c	51		 push	 ecx
  0028d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _xpos$[ebp]
  00292	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00297	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5535 : 	draw_2d_line (+xpos, -0.300, xpos + 0.025, -0.300, MFD_COLOUR_LIGHT_BLUE);

  0029c	b8 04 00 00 00	 mov	 eax, 4
  002a1	c1 e0 04	 shl	 eax, 4
  002a4	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  002aa	51		 push	 ecx
  002ab	51		 push	 ecx
  002ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  002b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b9	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _xpos$[ebp]
  002be	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9999999999999a
  002c6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ca	51		 push	 ecx
  002cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d0	51		 push	 ecx
  002d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  002d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002de	51		 push	 ecx
  002df	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _xpos$[ebp]
  002e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5536 : 	draw_2d_line (+xpos, -0.400, xpos + 0.025, -0.400, MFD_COLOUR_LIGHT_BLUE);

  002ee	b8 04 00 00 00	 mov	 eax, 4
  002f3	c1 e0 04	 shl	 eax, 4
  002f6	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  002fc	51		 push	 ecx
  002fd	51		 push	 ecx
  002fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00306	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030b	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _xpos$[ebp]
  00310	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9999999999999a
  00318	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0031c	51		 push	 ecx
  0031d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00322	51		 push	 ecx
  00323	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  0032b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00330	51		 push	 ecx
  00331	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _xpos$[ebp]
  00336	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5537 : 	draw_2d_line (+xpos, -0.500, xpos + 0.050, -0.500, MFD_COLOUR_LIGHT_BLUE);

  00340	b8 04 00 00 00	 mov	 eax, 4
  00345	c1 e0 04	 shl	 eax, 4
  00348	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0034e	51		 push	 ecx
  0034f	51		 push	 ecx
  00350	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00358	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035d	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _xpos$[ebp]
  00362	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa999999999999a
  0036a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0036e	51		 push	 ecx
  0036f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00374	51		 push	 ecx
  00375	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0037d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00382	51		 push	 ecx
  00383	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _xpos$[ebp]
  00388	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5538 : 
; 5539 : 	//
; 5540 : 	// get indicator position (fsd +/- 10m/s)
; 5541 : 	//
; 5542 : 
; 5543 : 	y = current_flight_dynamics->world_velocity_y.value;

  00392	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00397	f3 0f 10 80 14
	21 00 00	 movss	 xmm0, DWORD PTR [eax+8468]
  0039f	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0

; 5544 : 
; 5545 : 	y = bound (y, -10.0, 10.0);

  003a4	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  003a9	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c024000000000000
  003b1	66 0f 2f c8	 comisd	 xmm1, xmm0
  003b5	76 0f		 jbe	 SHORT $LN5@draw_rate_
  003b7	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c024000000000000
  003bf	f2 0f 11 45 b0	 movsd	 QWORD PTR tv214[ebp], xmm0
  003c4	eb 32		 jmp	 SHORT $LN6@draw_rate_
$LN5@draw_rate_:
  003c6	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  003cb	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4024000000000000
  003d3	76 0f		 jbe	 SHORT $LN3@draw_rate_
  003d5	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4024000000000000
  003dd	f2 0f 11 45 a8	 movsd	 QWORD PTR tv213[ebp], xmm0
  003e2	eb 0a		 jmp	 SHORT $LN4@draw_rate_
$LN3@draw_rate_:
  003e4	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  003e9	f2 0f 11 45 a8	 movsd	 QWORD PTR tv213[ebp], xmm0
$LN4@draw_rate_:
  003ee	f2 0f 10 45 a8	 movsd	 xmm0, QWORD PTR tv213[ebp]
  003f3	f2 0f 11 45 b0	 movsd	 QWORD PTR tv214[ebp], xmm0
$LN6@draw_rate_:
  003f8	f2 0f 5a 45 b0	 cvtsd2ss xmm0, QWORD PTR tv214[ebp]
  003fd	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0

; 5546 : 
; 5547 : 	y *= 0.05;

  00402	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  00407	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fa999999999999a
  0040f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00413	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0

; 5548 : 
; 5549 : 	draw_2d_mono_sprite(large_rate_of_climb_scale_pointer, xpos + 0.05, y, MFD_COLOUR_LIGHT_BLUE);

  00418	b8 04 00 00 00	 mov	 eax, 4
  0041d	c1 e0 04	 shl	 eax, 4
  00420	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00426	51		 push	 ecx
  00427	51		 push	 ecx
  00428	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0042d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00432	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _xpos$[ebp]
  00437	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa999999999999a
  0043f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00443	51		 push	 ecx
  00444	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00449	68 00 00 00 00	 push	 OFFSET ?large_rate_of_climb_scale_pointer@@3PADA
  0044e	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 5550 : }

  00453	5f		 pop	 edi
  00454	5e		 pop	 esi
  00455	5b		 pop	 ebx
  00456	8b e5		 mov	 esp, ebp
  00458	5d		 pop	 ebp
  00459	c3		 ret	 0
?draw_rate_of_climb_scale@@YGXXZ ENDP			; draw_rate_of_climb_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_airspeed_scale@@YGXXZ
_TEXT	SEGMENT
tv456 = -192						; size = 4
tv361 = -192						; size = 4
_buffer$1 = -124					; size = 8
_x_adjust$2 = -116					; size = 4
_loop$3 = -112						; size = 4
_y$4 = -108						; size = 4
_mod_scale_step_5$5 = -104				; size = 4
_int_scale_step_5$6 = -100				; size = 4
_scale_step_5$7 = -96					; size = 4
_v2$ = -92						; size = 4
_v1$ = -88						; size = 4
_u2$ = -84						; size = 4
_u1$ = -80						; size = 4
_buffer$ = -76						; size = 8
_airspeed$ = -68					; size = 4
_y_adjust$ = -64					; size = 4
_x_adjust$ = -60					; size = 4
_mfd_vp_y_max$ = -56					; size = 4
_mfd_vp_y_min$ = -52					; size = 4
_v$ = -48						; size = 4
_scale_step$ = -44					; size = 4
_scale_bottom$ = -40					; size = 4
_scale_top$ = -36					; size = 4
_x4$ = -32						; size = 4
_x5$ = -28						; size = 4
_x1$ = -24						; size = 4
_box_bottom$ = -20					; size = 4
_box_top$ = -16						; size = 4
_box_end$ = -12						; size = 4
_box_start$ = -8					; size = 4
_y_centre$ = -4						; size = 4
?draw_airspeed_scale@@YGXXZ PROC			; draw_airspeed_scale, COMDAT

; 5367 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 5368 : 	const float
; 5369 : 		y_centre = 0.0,

  0000c	0f 57 c0	 xorps	 xmm0, xmm0
  0000f	f3 0f 11 45 fc	 movss	 DWORD PTR _y_centre$[ebp], xmm0

; 5370 : 		box_start = -0.95,

  00014	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  0001c	f3 0f 11 45 f8	 movss	 DWORD PTR _box_start$[ebp], xmm0

; 5371 : 		box_end = box_start + 0.25,

  00021	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00029	f3 0f 11 45 f4	 movss	 DWORD PTR _box_end$[ebp], xmm0

; 5372 : 		box_top = y_centre + 0.04,

  0002e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  00036	f3 0f 11 45 f0	 movss	 DWORD PTR _box_top$[ebp], xmm0

; 5373 : 		box_bottom = y_centre - 0.04,

  0003b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  00043	f3 0f 11 45 ec	 movss	 DWORD PTR _box_bottom$[ebp], xmm0

; 5374 : 		x1 = box_start,

  00048	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  00050	f3 0f 11 45 e8	 movss	 DWORD PTR _x1$[ebp], xmm0

; 5375 : //		x2 = x1 + 0.03,
; 5376 : //		x3 = x1 + 0.125,
; 5377 : 		x5 = box_end,

  00055	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  0005d	f3 0f 11 45 e4	 movss	 DWORD PTR _x5$[ebp], xmm0

; 5378 : 		x4 = x5 - 0.03,

  00062	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3ae147
  0006a	f3 0f 11 45 e0	 movss	 DWORD PTR _x4$[ebp], xmm0

; 5379 : 		scale_top = y_centre + 0.6,

  0006f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00077	f3 0f 11 45 dc	 movss	 DWORD PTR _scale_top$[ebp], xmm0

; 5380 : 		scale_bottom = y_centre - 0.6,

  0007c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00084	f3 0f 11 45 d8	 movss	 DWORD PTR _scale_bottom$[ebp], xmm0

; 5381 : 		scale_step = 1.0 / 9.0;

  00089	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3de38e39
  00091	f3 0f 11 45 d4	 movss	 DWORD PTR _scale_step$[ebp], xmm0

; 5382 : 
; 5383 : 	float
; 5384 : 		v,
; 5385 : 		mfd_vp_y_min,
; 5386 : 		mfd_vp_y_max,
; 5387 : 		x_adjust,
; 5388 : 		y_adjust = y_centre,

  00096	0f 57 c0	 xorps	 xmm0, xmm0
  00099	f3 0f 11 45 c0	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5389 : 		airspeed = kilometres_per_hour(current_flight_dynamics->velocity_z.value);

  0009e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000a3	f3 0f 10 80 9c
	20 00 00	 movss	 xmm0, DWORD PTR [eax+8348]
  000ab	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40666666
  000b3	f3 0f 11 45 bc	 movss	 DWORD PTR _airspeed$[ebp], xmm0

; 5390 : 
; 5391 : 
; 5392 : 	char
; 5393 : 		buffer[8];
; 5394 : 
; 5395 : 	int
; 5396 : 		u1, u2, v1, v2;
; 5397 : 
; 5398 : 
; 5399 : 	draw_2d_box(x1, scale_top, x5, scale_bottom, TRUE, FALSE, MFD_COLOUR_BLUE);

  000b8	b8 04 00 00 00	 mov	 eax, 4
  000bd	6b c8 11	 imul	 ecx, eax, 17
  000c0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000c6	52		 push	 edx
  000c7	6a 00		 push	 0
  000c9	6a 01		 push	 1
  000cb	51		 push	 ecx
  000cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  000d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d9	51		 push	 ecx
  000da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  000e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e7	51		 push	 ecx
  000e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  000f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f5	51		 push	 ecx
  000f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  000fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00103	e8 00 00 00 00	 call	 ?draw_2d_box@@YGXMMMMHHUREAL_COLOUR@@@Z ; draw_2d_box

; 5400 : 	draw_2d_box(x1, scale_top, x5, scale_bottom, FALSE, FALSE, MFD_COLOUR_LIGHT_BLUE);

  00108	b8 04 00 00 00	 mov	 eax, 4
  0010d	c1 e0 04	 shl	 eax, 4
  00110	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00116	51		 push	 ecx
  00117	6a 00		 push	 0
  00119	6a 00		 push	 0
  0011b	51		 push	 ecx
  0011c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00124	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00129	51		 push	 ecx
  0012a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00132	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00137	51		 push	 ecx
  00138	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00140	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00145	51		 push	 ecx
  00146	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  0014e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00153	e8 00 00 00 00	 call	 ?draw_2d_box@@YGXMMMMHHUREAL_COLOUR@@@Z ; draw_2d_box

; 5401 : 
; 5402 : 	// draw scale
; 5403 : 	get_2d_float_screen_x_coordinate (-y_centre, &v);

  00158	8d 45 d0	 lea	 eax, DWORD PTR _v$[ebp]
  0015b	50		 push	 eax
  0015c	51		 push	 ecx
  0015d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@80000000
  00165	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016a	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 5404 : 
; 5405 : 	mfd_vp_y_min = v - (0.5 * mfd_viewport_size * (scale_top - scale_bottom) * 0.5);

  0016f	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _v$[ebp]
  00174	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  0017c	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00184	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3ff3333340000000
  0018c	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00194	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00198	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0019c	f3 0f 11 45 cc	 movss	 DWORD PTR _mfd_vp_y_min$[ebp], xmm0

; 5406 : 	mfd_vp_y_max = v + (0.5 * mfd_viewport_size * (scale_top - scale_bottom) * 0.5) - 0.001;

  001a1	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _v$[ebp]
  001a6	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  001ae	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  001b6	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3ff3333340000000
  001be	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  001c6	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001ca	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001d2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001d6	f3 0f 11 45 c8	 movss	 DWORD PTR _mfd_vp_y_max$[ebp], xmm0

; 5407 : 
; 5408 : 	debug_log("min: %.02f, max: %.02f", mfd_vp_y_min, mfd_vp_y_max);

  001db	f3 0f 5a 45 c8	 cvtss2sd xmm0, DWORD PTR _mfd_vp_y_max$[ebp]
  001e0	83 ec 08	 sub	 esp, 8
  001e3	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  001e8	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _mfd_vp_y_min$[ebp]
  001ed	83 ec 08	 sub	 esp, 8
  001f0	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  001f5	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@DIKEHEFB@min?3?5?$CF?402f?0?5max?3?5?$CF?402f@
  001fa	e8 00 00 00 00	 call	 ?debug_log@@YAXPBDZZ	; debug_log
  001ff	83 c4 14	 add	 esp, 20			; 00000014H

; 5409 : 
; 5410 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_vp_y_min, mfd_viewport_x_max, mfd_vp_y_max);

  00202	51		 push	 ecx
  00203	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _mfd_vp_y_max$[ebp]
  00208	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020d	51		 push	 ecx
  0020e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00216	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021b	51		 push	 ecx
  0021c	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _mfd_vp_y_min$[ebp]
  00221	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00226	51		 push	 ecx
  00227	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0022f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00234	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00239	50		 push	 eax
  0023a	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 5411 : 
; 5412 : 	//
; 5413 : 	// draw scale
; 5414 : 	//
; 5415 : 
; 5416 : 	{
; 5417 : 		float scale_step_5 = airspeed * 0.4;

  0023f	f3 0f 5a 45 bc	 cvtss2sd xmm0, DWORD PTR _airspeed$[ebp]
  00244	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd999999999999a
  0024c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00250	f3 0f 11 45 a0	 movss	 DWORD PTR _scale_step_5$7[ebp], xmm0

; 5418 : 		int int_scale_step_5 = (int) scale_step_5;

  00255	f3 0f 2c 45 a0	 cvttss2si eax, DWORD PTR _scale_step_5$7[ebp]
  0025a	89 45 9c	 mov	 DWORD PTR _int_scale_step_5$6[ebp], eax

; 5419 : 		float mod_scale_step_5 = scale_step_5 - (float) int_scale_step_5;

  0025d	f3 0f 2a 45 9c	 cvtsi2ss xmm0, DWORD PTR _int_scale_step_5$6[ebp]
  00262	f3 0f 10 4d a0	 movss	 xmm1, DWORD PTR _scale_step_5$7[ebp]
  00267	f3 0f 5c c8	 subss	 xmm1, xmm0
  0026b	f3 0f 11 4d 98	 movss	 DWORD PTR _mod_scale_step_5$5[ebp], xmm1

; 5420 : 
; 5421 : //		int tick_type = (int_scale_step_5 % 4) == 0;
; 5422 : 		float y = -(8.0 + mod_scale_step_5) * scale_step;

  00270	f3 0f 5a 45 98	 cvtss2sd xmm0, DWORD PTR _mod_scale_step_5$5[ebp]
  00275	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4020000000000000
  0027d	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00284	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fbc71c720000000
  0028c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00290	f3 0f 11 45 94	 movss	 DWORD PTR _y$4[ebp], xmm0

; 5423 : 		int loop;
; 5424 : 
; 5425 : 		int_scale_step_5 -= 8;

  00295	8b 45 9c	 mov	 eax, DWORD PTR _int_scale_step_5$6[ebp]
  00298	83 e8 08	 sub	 eax, 8
  0029b	89 45 9c	 mov	 DWORD PTR _int_scale_step_5$6[ebp], eax

; 5426 : 
; 5427 : 		set_mono_font_type (MONO_FONT_TYPE_5X9);

  0029e	6a 02		 push	 2
  002a0	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 5428 : 		y_adjust = -2.0;

  002a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  002ad	f3 0f 11 45 c0	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5429 : 
; 5430 : 		for (loop = 0; loop <= 25; loop++)

  002b2	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _loop$3[ebp], 0
  002b9	eb 09		 jmp	 SHORT $LN4@draw_airsp
$LN2@draw_airsp:
  002bb	8b 45 90	 mov	 eax, DWORD PTR _loop$3[ebp]
  002be	83 c0 01	 add	 eax, 1
  002c1	89 45 90	 mov	 DWORD PTR _loop$3[ebp], eax
$LN4@draw_airsp:
  002c4	83 7d 90 19	 cmp	 DWORD PTR _loop$3[ebp], 25 ; 00000019H
  002c8	0f 8f 05 01 00
	00		 jg	 $LN3@draw_airsp

; 5431 : 		{
; 5432 : //			if (int_scale_step_5 > 0)
; 5433 : 			{
; 5434 : 				draw_2d_line (x4, y, x5, y, MFD_COLOUR_LIGHT_BLUE);

  002ce	b8 04 00 00 00	 mov	 eax, 4
  002d3	c1 e0 04	 shl	 eax, 4
  002d6	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  002dc	51		 push	 ecx
  002dd	51		 push	 ecx
  002de	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y$4[ebp]
  002e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e8	51		 push	 ecx
  002e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  002f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f6	51		 push	 ecx
  002f7	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y$4[ebp]
  002fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00301	51		 push	 ecx
  00302	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3ae147
  0030a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5435 : 
; 5436 : 				if ((int_scale_step_5 % 4) == 0)

  00314	8b 45 9c	 mov	 eax, DWORD PTR _int_scale_step_5$6[ebp]
  00317	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0031c	79 05		 jns	 SHORT $LN7@draw_airsp
  0031e	48		 dec	 eax
  0031f	83 c8 fc	 or	 eax, -4			; fffffffcH
  00322	40		 inc	 eax
$LN7@draw_airsp:
  00323	85 c0		 test	 eax, eax
  00325	0f 85 88 00 00
	00		 jne	 $LN5@draw_airsp

; 5437 : 				{
; 5438 : 					float x_adjust;
; 5439 : 					char buffer[8];
; 5440 : 
; 5441 : 					sprintf(buffer, "%4d", (int_scale_step_5 * 5 / 2));

  0032b	6b 45 9c 05	 imul	 eax, DWORD PTR _int_scale_step_5$6[ebp], 5
  0032f	99		 cdq
  00330	2b c2		 sub	 eax, edx
  00332	d1 f8		 sar	 eax, 1
  00334	50		 push	 eax
  00335	68 00 00 00 00	 push	 OFFSET ??_C@_03GLKEJMAA@?$CF4d@
  0033a	8d 45 84	 lea	 eax, DWORD PTR _buffer$1[ebp]
  0033d	50		 push	 eax
  0033e	e8 00 00 00 00	 call	 _sprintf
  00343	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5442 : 					x_adjust = get_mono_font_string_width(buffer) + 2;

  00346	8d 45 84	 lea	 eax, DWORD PTR _buffer$1[ebp]
  00349	50		 push	 eax
  0034a	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0034f	d9 9d 40 ff ff
	ff		 fstp	 DWORD PTR tv361[ebp]
  00355	f3 0f 10 85 40
	ff ff ff	 movss	 xmm0, DWORD PTR tv361[ebp]
  0035d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40000000
  00365	f3 0f 11 45 8c	 movss	 DWORD PTR _x_adjust$2[ebp], xmm0

; 5443 : 
; 5444 : 					set_2d_mono_font_position (x4, y);

  0036a	51		 push	 ecx
  0036b	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y$4[ebp]
  00370	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00375	51		 push	 ecx
  00376	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3ae147
  0037e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00383	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5445 : 					set_mono_font_rel_position (-x_adjust, y_adjust);

  00388	51		 push	 ecx
  00389	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0038e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00393	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _x_adjust$2[ebp]
  00398	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0039f	51		 push	 ecx
  003a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a5	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5446 : 					print_mono_font_string(buffer);

  003aa	8d 45 84	 lea	 eax, DWORD PTR _buffer$1[ebp]
  003ad	50		 push	 eax
  003ae	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN5@draw_airsp:

; 5447 : 				}
; 5448 : 			}
; 5449 : 
; 5450 : 			int_scale_step_5++;

  003b3	8b 45 9c	 mov	 eax, DWORD PTR _int_scale_step_5$6[ebp]
  003b6	83 c0 01	 add	 eax, 1
  003b9	89 45 9c	 mov	 DWORD PTR _int_scale_step_5$6[ebp], eax

; 5451 : 			y += scale_step;

  003bc	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _y$4[ebp]
  003c1	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3de38e39
  003c9	f3 0f 11 45 94	 movss	 DWORD PTR _y$4[ebp], xmm0

; 5452 : 		}

  003ce	e9 e8 fe ff ff	 jmp	 $LN2@draw_airsp
$LN3@draw_airsp:

; 5453 : 	}
; 5454 : 
; 5455 : 	//
; 5456 : 	// restore 2D environment
; 5457 : 	//
; 5458 : 
; 5459 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  003d3	51		 push	 ecx
  003d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  003dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e1	51		 push	 ecx
  003e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  003ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ef	51		 push	 ecx
  003f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  003f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003fd	51		 push	 ecx
  003fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00406	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00410	50		 push	 eax
  00411	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 5460 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00416	51		 push	 ecx
  00417	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0041f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00424	51		 push	 ecx
  00425	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0042d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00432	51		 push	 ecx
  00433	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0043b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00440	51		 push	 ecx
  00441	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00449	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00453	50		 push	 eax
  00454	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 5461 : 
; 5462 : 	// clear background area
; 5463 : 	get_2d_int_screen_coordinates (box_start, box_top, &u1, &v1);

  00459	8d 45 a8	 lea	 eax, DWORD PTR _v1$[ebp]
  0045c	50		 push	 eax
  0045d	8d 4d b0	 lea	 ecx, DWORD PTR _u1$[ebp]
  00460	51		 push	 ecx
  00461	51		 push	 ecx
  00462	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  0046a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046f	51		 push	 ecx
  00470	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  00478	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047d	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 5464 : 	get_2d_int_screen_coordinates (box_end, box_bottom, &u2, &v2);

  00482	8d 45 a4	 lea	 eax, DWORD PTR _v2$[ebp]
  00485	50		 push	 eax
  00486	8d 4d ac	 lea	 ecx, DWORD PTR _u2$[ebp]
  00489	51		 push	 ecx
  0048a	51		 push	 ecx
  0048b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  00493	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00498	51		 push	 ecx
  00499	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  004a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a6	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 5465 : 	set_block(u1, v1, u2, v2, MFD_COLOUR_BLUE);

  004ab	b8 04 00 00 00	 mov	 eax, 4
  004b0	6b c8 11	 imul	 ecx, eax, 17
  004b3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004b9	52		 push	 edx
  004ba	8b 45 a4	 mov	 eax, DWORD PTR _v2$[ebp]
  004bd	50		 push	 eax
  004be	8b 4d ac	 mov	 ecx, DWORD PTR _u2$[ebp]
  004c1	51		 push	 ecx
  004c2	8b 55 a8	 mov	 edx, DWORD PTR _v1$[ebp]
  004c5	52		 push	 edx
  004c6	8b 45 b0	 mov	 eax, DWORD PTR _u1$[ebp]
  004c9	50		 push	 eax
  004ca	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 5466 : 
; 5467 : 	// draw surrounding box
; 5468 : 	draw_2d_line(box_start, box_top, box_end, box_top, MFD_COLOUR_LIGHT_BLUE);

  004cf	b8 04 00 00 00	 mov	 eax, 4
  004d4	c1 e0 04	 shl	 eax, 4
  004d7	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  004dd	51		 push	 ecx
  004de	51		 push	 ecx
  004df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  004e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ec	51		 push	 ecx
  004ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  004f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fa	51		 push	 ecx
  004fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  00503	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00508	51		 push	 ecx
  00509	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  00511	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00516	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5469 : 	draw_2d_line(box_start, box_bottom, box_end, box_bottom, MFD_COLOUR_LIGHT_BLUE);

  0051b	b8 04 00 00 00	 mov	 eax, 4
  00520	c1 e0 04	 shl	 eax, 4
  00523	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00529	51		 push	 ecx
  0052a	51		 push	 ecx
  0052b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  00533	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00538	51		 push	 ecx
  00539	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  00541	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00546	51		 push	 ecx
  00547	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  0054f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00554	51		 push	 ecx
  00555	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  0055d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00562	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5470 : 	draw_2d_line(box_start, box_top, box_start, box_bottom, MFD_COLOUR_LIGHT_BLUE);

  00567	b8 04 00 00 00	 mov	 eax, 4
  0056c	c1 e0 04	 shl	 eax, 4
  0056f	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00575	51		 push	 ecx
  00576	51		 push	 ecx
  00577	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  0057f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00584	51		 push	 ecx
  00585	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  0058d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00592	51		 push	 ecx
  00593	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  0059b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a0	51		 push	 ecx
  005a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  005a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ae	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5471 : 	draw_2d_line(box_end, box_top, box_end, box_bottom, MFD_COLOUR_LIGHT_BLUE);

  005b3	b8 04 00 00 00	 mov	 eax, 4
  005b8	c1 e0 04	 shl	 eax, 4
  005bb	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  005c1	51		 push	 ecx
  005c2	51		 push	 ecx
  005c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  005cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d0	51		 push	 ecx
  005d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  005d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005de	51		 push	 ecx
  005df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  005e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ec	51		 push	 ecx
  005ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  005f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005fa	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5472 : 
; 5473 : 	// print digital readout
; 5474 : 
; 5475 : 	set_mono_font_type (MONO_FONT_TYPE_6X10);

  005ff	6a 04		 push	 4
  00601	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 5476 : 	y_adjust = -2.0;

  00606	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  0060e	f3 0f 11 45 c0	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5477 : 
; 5478 : 	sprintf(buffer, "%.0f", airspeed);

  00613	f3 0f 5a 45 bc	 cvtss2sd xmm0, DWORD PTR _airspeed$[ebp]
  00618	83 ec 08	 sub	 esp, 8
  0061b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00620	68 00 00 00 00	 push	 OFFSET ??_C@_04GHNNFJCK@?$CF?40f@
  00625	8d 45 b4	 lea	 eax, DWORD PTR _buffer$[ebp]
  00628	50		 push	 eax
  00629	e8 00 00 00 00	 call	 _sprintf
  0062e	83 c4 10	 add	 esp, 16			; 00000010H

; 5479 : 	x_adjust = -get_mono_font_string_width(buffer) - 1;

  00631	8d 45 b4	 lea	 eax, DWORD PTR _buffer$[ebp]
  00634	50		 push	 eax
  00635	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0063a	d9 9d 40 ff ff
	ff		 fstp	 DWORD PTR tv456[ebp]
  00640	f3 0f 10 85 40
	ff ff ff	 movss	 xmm0, DWORD PTR tv456[ebp]
  00648	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0064f	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00657	f3 0f 11 45 c4	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5480 : 
; 5481 : 	set_2d_mono_font_position (box_end, y_centre);

  0065c	51		 push	 ecx
  0065d	0f 57 c0	 xorps	 xmm0, xmm0
  00660	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00665	51		 push	 ecx
  00666	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  0066e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00673	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5482 : 	set_mono_font_rel_position (x_adjust, y_adjust);

  00678	51		 push	 ecx
  00679	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0067e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00683	51		 push	 ecx
  00684	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00689	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0068e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5483 : 	print_mono_font_string(buffer);

  00693	8d 45 b4	 lea	 eax, DWORD PTR _buffer$[ebp]
  00696	50		 push	 eax
  00697	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5484 : }

  0069c	5f		 pop	 edi
  0069d	5e		 pop	 esi
  0069e	5b		 pop	 ebx
  0069f	8b e5		 mov	 esp, ebp
  006a1	5d		 pop	 ebp
  006a2	c3		 ret	 0
?draw_airspeed_scale@@YGXXZ ENDP			; draw_airspeed_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_altitude_scale@@YGXXZ
_TEXT	SEGMENT
tv461 = -208						; size = 4
_buffer$1 = -140					; size = 8
_x_adjust$2 = -132					; size = 4
_loop$3 = -128						; size = 4
_y$4 = -124						; size = 4
_mod_scale_step_5$5 = -120				; size = 4
_int_scale_step_5$6 = -116				; size = 4
_scale_step_5$7 = -112					; size = 4
_displayed_altitude$ = -108				; size = 4
_v2$ = -104						; size = 4
_v1$ = -100						; size = 4
_u2$ = -96						; size = 4
_u1$ = -92						; size = 4
_buffer$ = -88						; size = 8
_format$ = -80						; size = 4
_altitude$ = -76					; size = 4
_barometric_altitude$ = -72				; size = 4
_radar_altitude$ = -68					; size = 4
_y_adjust$ = -64					; size = 4
_x_adjust$ = -60					; size = 4
_mfd_vp_y_max$ = -56					; size = 4
_mfd_vp_y_min$ = -52					; size = 4
_v$ = -48						; size = 4
_scale_step$ = -44					; size = 4
_scale_bottom$ = -40					; size = 4
_scale_top$ = -36					; size = 4
_x5$ = -32						; size = 4
_x2$ = -28						; size = 4
_x1$ = -24						; size = 4
_box_bottom$ = -20					; size = 4
_box_top$ = -16						; size = 4
_box_end$ = -12						; size = 4
_box_start$ = -8					; size = 4
_y_centre$ = -4						; size = 4
?draw_altitude_scale@@YGXXZ PROC			; draw_altitude_scale, COMDAT

; 5232 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 5233 : 	const float
; 5234 : 		y_centre = 0.0,

  0000c	0f 57 c0	 xorps	 xmm0, xmm0
  0000f	f3 0f 11 45 fc	 movss	 DWORD PTR _y_centre$[ebp], xmm0

; 5235 : 		box_start = 0.7,

  00014	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  0001c	f3 0f 11 45 f8	 movss	 DWORD PTR _box_start$[ebp], xmm0

; 5236 : 		box_end = box_start + 0.25,

  00021	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  00029	f3 0f 11 45 f4	 movss	 DWORD PTR _box_end$[ebp], xmm0

; 5237 : 		box_top = y_centre + 0.04,

  0002e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  00036	f3 0f 11 45 f0	 movss	 DWORD PTR _box_top$[ebp], xmm0

; 5238 : 		box_bottom = y_centre - 0.04,

  0003b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  00043	f3 0f 11 45 ec	 movss	 DWORD PTR _box_bottom$[ebp], xmm0

; 5239 : 		x1 = box_start,

  00048	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00050	f3 0f 11 45 e8	 movss	 DWORD PTR _x1$[ebp], xmm0

; 5240 : 		x2 = x1 + 0.03,

  00055	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3ae147
  0005d	f3 0f 11 45 e4	 movss	 DWORD PTR _x2$[ebp], xmm0

; 5241 : //		x3 = x1 + 0.125,
; 5242 : 		x5 = box_end,

  00062	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  0006a	f3 0f 11 45 e0	 movss	 DWORD PTR _x5$[ebp], xmm0

; 5243 : //		x4 = x5 - 0.03,
; 5244 : 		scale_top = y_centre + 0.6,

  0006f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00077	f3 0f 11 45 dc	 movss	 DWORD PTR _scale_top$[ebp], xmm0

; 5245 : 		scale_bottom = y_centre - 0.6,

  0007c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00084	f3 0f 11 45 d8	 movss	 DWORD PTR _scale_bottom$[ebp], xmm0

; 5246 : 		scale_step = 1.0 / 9.0;

  00089	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3de38e39
  00091	f3 0f 11 45 d4	 movss	 DWORD PTR _scale_step$[ebp], xmm0

; 5247 : 
; 5248 : 	float
; 5249 : 		v,
; 5250 : 		mfd_vp_y_min,
; 5251 : 		mfd_vp_y_max,
; 5252 : 		x_adjust,
; 5253 : 		y_adjust = y_centre,

  00096	0f 57 c0	 xorps	 xmm0, xmm0
  00099	f3 0f 11 45 c0	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5254 : 		radar_altitude = current_flight_dynamics->radar_altitude.value,

  0009e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000a3	f3 0f 10 80 44
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9284]
  000ab	f3 0f 11 45 bc	 movss	 DWORD PTR _radar_altitude$[ebp], xmm0

; 5255 : 		barometric_altitude = current_flight_dynamics->barometric_altitude.value,

  000b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000b5	f3 0f 10 80 2c
	24 00 00	 movss	 xmm0, DWORD PTR [eax+9260]
  000bd	f3 0f 11 45 b8	 movss	 DWORD PTR _barometric_altitude$[ebp], xmm0

; 5256 : 		altitude;
; 5257 : 
; 5258 : 
; 5259 : 	char
; 5260 : 		*format,
; 5261 : 		buffer[8];
; 5262 : 
; 5263 : 	int
; 5264 : 		u1, u2, v1, v2,
; 5265 : 		displayed_altitude = (int)((barometric_altitude + 5) / 10);

  000c2	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _barometric_altitude$[ebp]
  000c7	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40a00000
  000cf	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@41200000
  000d7	f3 0f 2c c0	 cvttss2si eax, xmm0
  000db	89 45 94	 mov	 DWORD PTR _displayed_altitude$[ebp], eax

; 5266 : 
; 5267 : 
; 5268 : 	draw_2d_box(x1, scale_top, x5, scale_bottom, TRUE, FALSE, MFD_COLOUR_BLUE);

  000de	b8 04 00 00 00	 mov	 eax, 4
  000e3	6b c8 11	 imul	 ecx, eax, 17
  000e6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000ec	52		 push	 edx
  000ed	6a 00		 push	 0
  000ef	6a 01		 push	 1
  000f1	51		 push	 ecx
  000f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  000fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ff	51		 push	 ecx
  00100	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  00108	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010d	51		 push	 ecx
  0010e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00116	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011b	51		 push	 ecx
  0011c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00124	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00129	e8 00 00 00 00	 call	 ?draw_2d_box@@YGXMMMMHHUREAL_COLOUR@@@Z ; draw_2d_box

; 5269 : 	draw_2d_box(x1, scale_top, x5, scale_bottom, FALSE, FALSE, MFD_COLOUR_LIGHT_BLUE);

  0012e	b8 04 00 00 00	 mov	 eax, 4
  00133	c1 e0 04	 shl	 eax, 4
  00136	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0013c	51		 push	 ecx
  0013d	6a 00		 push	 0
  0013f	6a 00		 push	 0
  00141	51		 push	 ecx
  00142	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  0014a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014f	51		 push	 ecx
  00150	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  00158	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015d	51		 push	 ecx
  0015e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00166	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016b	51		 push	 ecx
  0016c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00174	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00179	e8 00 00 00 00	 call	 ?draw_2d_box@@YGXMMMMHHUREAL_COLOUR@@@Z ; draw_2d_box

; 5270 : 
; 5271 : 	// draw scale
; 5272 : 	get_2d_float_screen_x_coordinate (-y_centre, &v);

  0017e	8d 45 d0	 lea	 eax, DWORD PTR _v$[ebp]
  00181	50		 push	 eax
  00182	51		 push	 ecx
  00183	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@80000000
  0018b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00190	e8 00 00 00 00	 call	 ?get_2d_float_screen_x_coordinate@@YGXMPAM@Z ; get_2d_float_screen_x_coordinate

; 5273 : 
; 5274 : 	mfd_vp_y_min = v - (0.5 * mfd_viewport_size * (scale_top - scale_bottom) * 0.5);

  00195	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _v$[ebp]
  0019a	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  001a2	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  001aa	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3ff3333340000000
  001b2	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  001ba	f2 0f 5c c1	 subsd	 xmm0, xmm1
  001be	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001c2	f3 0f 11 45 cc	 movss	 DWORD PTR _mfd_vp_y_min$[ebp], xmm0

; 5275 : 	mfd_vp_y_max = v + (0.5 * mfd_viewport_size * (scale_top - scale_bottom) * 0.5) - 0.001;

  001c7	f3 0f 5a 45 d0	 cvtss2sd xmm0, DWORD PTR _v$[ebp]
  001cc	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  001d4	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  001dc	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3ff3333340000000
  001e4	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  001ec	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001f0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001f8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001fc	f3 0f 11 45 c8	 movss	 DWORD PTR _mfd_vp_y_max$[ebp], xmm0

; 5276 : 
; 5277 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_vp_y_min, mfd_viewport_x_max, mfd_vp_y_max);

  00201	51		 push	 ecx
  00202	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _mfd_vp_y_max$[ebp]
  00207	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020c	51		 push	 ecx
  0020d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00215	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021a	51		 push	 ecx
  0021b	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _mfd_vp_y_min$[ebp]
  00220	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00225	51		 push	 ecx
  00226	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0022e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00233	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00238	50		 push	 eax
  00239	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 5278 : 
; 5279 : 	if (radar_altitude < 250.0)

  0023e	f3 0f 5a 45 bc	 cvtss2sd xmm0, DWORD PTR _radar_altitude$[ebp]
  00243	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@406f400000000000
  0024b	66 0f 2f c8	 comisd	 xmm1, xmm0
  0024f	76 1b		 jbe	 SHORT $LN5@draw_altit

; 5280 : 	{
; 5281 : 		format = "R%3d";

  00251	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _format$[ebp], OFFSET ??_C@_04MLFODOCP@R?$CF3d@

; 5282 : 		altitude = radar_altitude;

  00258	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _radar_altitude$[ebp]
  0025d	f3 0f 11 45 b4	 movss	 DWORD PTR _altitude$[ebp], xmm0

; 5283 : 		displayed_altitude = altitude;

  00262	f3 0f 2c 45 b4	 cvttss2si eax, DWORD PTR _altitude$[ebp]
  00267	89 45 94	 mov	 DWORD PTR _displayed_altitude$[ebp], eax

; 5284 : 	}
; 5285 : 	else

  0026a	eb 30		 jmp	 SHORT $LN6@draw_altit
$LN5@draw_altit:

; 5286 : 	{
; 5287 : 		format = "%04d";

  0026c	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _format$[ebp], OFFSET ??_C@_04OCCELDNI@?$CF04d@

; 5288 : 		altitude = barometric_altitude;

  00273	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _barometric_altitude$[ebp]
  00278	f3 0f 11 45 b4	 movss	 DWORD PTR _altitude$[ebp], xmm0

; 5289 : 		displayed_altitude = (int)((barometric_altitude + 5) / 10) * 10;

  0027d	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _barometric_altitude$[ebp]
  00282	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40a00000
  0028a	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@41200000
  00292	f3 0f 2c c0	 cvttss2si eax, xmm0
  00296	6b c8 0a	 imul	 ecx, eax, 10
  00299	89 4d 94	 mov	 DWORD PTR _displayed_altitude$[ebp], ecx
$LN6@draw_altit:

; 5290 : 	}
; 5291 : 
; 5292 : 	//
; 5293 : 	// draw scale
; 5294 : 	//
; 5295 : 
; 5296 : 	{
; 5297 : 		float scale_step_5 = altitude * 0.4;

  0029c	f3 0f 5a 45 b4	 cvtss2sd xmm0, DWORD PTR _altitude$[ebp]
  002a1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd999999999999a
  002a9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ad	f3 0f 11 45 90	 movss	 DWORD PTR _scale_step_5$7[ebp], xmm0

; 5298 : 		int int_scale_step_5 = (int) scale_step_5;

  002b2	f3 0f 2c 45 90	 cvttss2si eax, DWORD PTR _scale_step_5$7[ebp]
  002b7	89 45 8c	 mov	 DWORD PTR _int_scale_step_5$6[ebp], eax

; 5299 : 		float mod_scale_step_5 = scale_step_5 - (float) int_scale_step_5;

  002ba	f3 0f 2a 45 8c	 cvtsi2ss xmm0, DWORD PTR _int_scale_step_5$6[ebp]
  002bf	f3 0f 10 4d 90	 movss	 xmm1, DWORD PTR _scale_step_5$7[ebp]
  002c4	f3 0f 5c c8	 subss	 xmm1, xmm0
  002c8	f3 0f 11 4d 88	 movss	 DWORD PTR _mod_scale_step_5$5[ebp], xmm1

; 5300 : 
; 5301 : //		int tick_type = (int_scale_step_5 % 4) == 0;
; 5302 : 		float y = -(8.0 + mod_scale_step_5) * scale_step;

  002cd	f3 0f 5a 45 88	 cvtss2sd xmm0, DWORD PTR _mod_scale_step_5$5[ebp]
  002d2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4020000000000000
  002da	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  002e1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fbc71c720000000
  002e9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ed	f3 0f 11 45 84	 movss	 DWORD PTR _y$4[ebp], xmm0

; 5303 : 		int loop;
; 5304 : 
; 5305 : 		int_scale_step_5 -= 8;

  002f2	8b 45 8c	 mov	 eax, DWORD PTR _int_scale_step_5$6[ebp]
  002f5	83 e8 08	 sub	 eax, 8
  002f8	89 45 8c	 mov	 DWORD PTR _int_scale_step_5$6[ebp], eax

; 5306 : 
; 5307 : 		set_mono_font_type (MONO_FONT_TYPE_5X9);

  002fb	6a 02		 push	 2
  002fd	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 5308 : 		y_adjust = -2.0;

  00302	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  0030a	f3 0f 11 45 c0	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5309 : 
; 5310 : 		for (loop = 0; loop <= 25; loop++)

  0030f	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _loop$3[ebp], 0
  00316	eb 09		 jmp	 SHORT $LN4@draw_altit
$LN2@draw_altit:
  00318	8b 45 80	 mov	 eax, DWORD PTR _loop$3[ebp]
  0031b	83 c0 01	 add	 eax, 1
  0031e	89 45 80	 mov	 DWORD PTR _loop$3[ebp], eax
$LN4@draw_altit:
  00321	83 7d 80 19	 cmp	 DWORD PTR _loop$3[ebp], 25 ; 00000019H
  00325	0f 8f f9 00 00
	00		 jg	 $LN3@draw_altit

; 5311 : 		{
; 5312 : 			if (int_scale_step_5 >= 0)

  0032b	83 7d 8c 00	 cmp	 DWORD PTR _int_scale_step_5$6[ebp], 0
  0032f	0f 8c cf 00 00
	00		 jl	 $LN8@draw_altit

; 5313 : 			{
; 5314 : 				draw_2d_line (x1, y, x2, y, MFD_COLOUR_LIGHT_BLUE);

  00335	b8 04 00 00 00	 mov	 eax, 4
  0033a	c1 e0 04	 shl	 eax, 4
  0033d	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00343	51		 push	 ecx
  00344	51		 push	 ecx
  00345	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _y$4[ebp]
  0034a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034f	51		 push	 ecx
  00350	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3ae147
  00358	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035d	51		 push	 ecx
  0035e	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _y$4[ebp]
  00363	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00368	51		 push	 ecx
  00369	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00371	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00376	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5315 : 
; 5316 : 				if ((int_scale_step_5 % 4) == 0)

  0037b	8b 45 8c	 mov	 eax, DWORD PTR _int_scale_step_5$6[ebp]
  0037e	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00383	79 05		 jns	 SHORT $LN10@draw_altit
  00385	48		 dec	 eax
  00386	83 c8 fc	 or	 eax, -4			; fffffffcH
  00389	40		 inc	 eax
$LN10@draw_altit:
  0038a	85 c0		 test	 eax, eax
  0038c	75 76		 jne	 SHORT $LN8@draw_altit

; 5317 : 				{
; 5318 : 					float x_adjust;
; 5319 : 					char buffer[8];
; 5320 : 
; 5321 : 					sprintf(buffer, "%4d", (int_scale_step_5 * 5 / 2));

  0038e	6b 45 8c 05	 imul	 eax, DWORD PTR _int_scale_step_5$6[ebp], 5
  00392	99		 cdq
  00393	2b c2		 sub	 eax, edx
  00395	d1 f8		 sar	 eax, 1
  00397	50		 push	 eax
  00398	68 00 00 00 00	 push	 OFFSET ??_C@_03GLKEJMAA@?$CF4d@
  0039d	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  003a3	50		 push	 eax
  003a4	e8 00 00 00 00	 call	 _sprintf
  003a9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5322 : 					x_adjust = 2.0; //get_mono_font_string_width(buffer) + 2;

  003ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  003b4	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _x_adjust$2[ebp], xmm0

; 5323 : 
; 5324 : 					set_2d_mono_font_position (x2, y);

  003bc	51		 push	 ecx
  003bd	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _y$4[ebp]
  003c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c7	51		 push	 ecx
  003c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3ae147
  003d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d5	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5325 : 					set_mono_font_rel_position (x_adjust, y_adjust);

  003da	51		 push	 ecx
  003db	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  003e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e5	51		 push	 ecx
  003e6	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$2[ebp]
  003ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f3	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5326 : 					print_mono_font_string(buffer);

  003f8	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$1[ebp]
  003fe	50		 push	 eax
  003ff	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN8@draw_altit:

; 5327 : 				}
; 5328 : 			}
; 5329 : 
; 5330 : 			int_scale_step_5++;

  00404	8b 45 8c	 mov	 eax, DWORD PTR _int_scale_step_5$6[ebp]
  00407	83 c0 01	 add	 eax, 1
  0040a	89 45 8c	 mov	 DWORD PTR _int_scale_step_5$6[ebp], eax

; 5331 : 			y += scale_step;

  0040d	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _y$4[ebp]
  00412	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3de38e39
  0041a	f3 0f 11 45 84	 movss	 DWORD PTR _y$4[ebp], xmm0

; 5332 : 		}

  0041f	e9 f4 fe ff ff	 jmp	 $LN2@draw_altit
$LN3@draw_altit:

; 5333 : 	}
; 5334 : 
; 5335 : 	//
; 5336 : 	// restore 2D environment
; 5337 : 	//
; 5338 : 
; 5339 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  00424	51		 push	 ecx
  00425	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  0042d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00432	51		 push	 ecx
  00433	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  0043b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00440	51		 push	 ecx
  00441	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00449	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044e	51		 push	 ecx
  0044f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00457	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0045c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00461	50		 push	 eax
  00462	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 5340 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00467	51		 push	 ecx
  00468	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00470	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00475	51		 push	 ecx
  00476	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0047e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00483	51		 push	 ecx
  00484	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0048c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00491	51		 push	 ecx
  00492	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0049a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0049f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  004a4	50		 push	 eax
  004a5	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 5341 : 
; 5342 : 	// clear background area
; 5343 : 	get_2d_int_screen_coordinates (box_start, box_top, &u1, &v1);

  004aa	8d 45 9c	 lea	 eax, DWORD PTR _v1$[ebp]
  004ad	50		 push	 eax
  004ae	8d 4d a4	 lea	 ecx, DWORD PTR _u1$[ebp]
  004b1	51		 push	 ecx
  004b2	51		 push	 ecx
  004b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  004bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c0	51		 push	 ecx
  004c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  004c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ce	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 5344 : 	get_2d_int_screen_coordinates (box_end, box_bottom, &u2, &v2);

  004d3	8d 45 98	 lea	 eax, DWORD PTR _v2$[ebp]
  004d6	50		 push	 eax
  004d7	8d 4d a0	 lea	 ecx, DWORD PTR _u2$[ebp]
  004da	51		 push	 ecx
  004db	51		 push	 ecx
  004dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  004e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e9	51		 push	 ecx
  004ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  004f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004f7	e8 00 00 00 00	 call	 ?get_2d_int_screen_coordinates@@YGXMMPAH0@Z ; get_2d_int_screen_coordinates

; 5345 : 	set_block(u1, v1, u2, v2, MFD_COLOUR_BLUE);

  004fc	b8 04 00 00 00	 mov	 eax, 4
  00501	6b c8 11	 imul	 ecx, eax, 17
  00504	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0050a	52		 push	 edx
  0050b	8b 45 98	 mov	 eax, DWORD PTR _v2$[ebp]
  0050e	50		 push	 eax
  0050f	8b 4d a0	 mov	 ecx, DWORD PTR _u2$[ebp]
  00512	51		 push	 ecx
  00513	8b 55 9c	 mov	 edx, DWORD PTR _v1$[ebp]
  00516	52		 push	 edx
  00517	8b 45 a4	 mov	 eax, DWORD PTR _u1$[ebp]
  0051a	50		 push	 eax
  0051b	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 5346 : 
; 5347 : 	// draw surrounding box
; 5348 : 	draw_2d_line(box_start, box_top, box_end, box_top, MFD_COLOUR_LIGHT_BLUE);

  00520	b8 04 00 00 00	 mov	 eax, 4
  00525	c1 e0 04	 shl	 eax, 4
  00528	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0052e	51		 push	 ecx
  0052f	51		 push	 ecx
  00530	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  00538	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053d	51		 push	 ecx
  0053e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  00546	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0054b	51		 push	 ecx
  0054c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  00554	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00559	51		 push	 ecx
  0055a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00562	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00567	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5349 : 	draw_2d_line(box_start, box_bottom, box_end, box_bottom, MFD_COLOUR_LIGHT_BLUE);

  0056c	b8 04 00 00 00	 mov	 eax, 4
  00571	c1 e0 04	 shl	 eax, 4
  00574	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0057a	51		 push	 ecx
  0057b	51		 push	 ecx
  0057c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  00584	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00589	51		 push	 ecx
  0058a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  00592	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00597	51		 push	 ecx
  00598	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  005a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a5	51		 push	 ecx
  005a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  005ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5350 : 	draw_2d_line(box_start, box_top, box_start, box_bottom, MFD_COLOUR_LIGHT_BLUE);

  005b8	b8 04 00 00 00	 mov	 eax, 4
  005bd	c1 e0 04	 shl	 eax, 4
  005c0	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  005c6	51		 push	 ecx
  005c7	51		 push	 ecx
  005c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  005d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d5	51		 push	 ecx
  005d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  005de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e3	51		 push	 ecx
  005e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  005ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f1	51		 push	 ecx
  005f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  005fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ff	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5351 : 	draw_2d_line(box_end, box_top, box_end, box_bottom, MFD_COLOUR_LIGHT_BLUE);

  00604	b8 04 00 00 00	 mov	 eax, 4
  00609	c1 e0 04	 shl	 eax, 4
  0060c	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00612	51		 push	 ecx
  00613	51		 push	 ecx
  00614	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd23d70a
  0061c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00621	51		 push	 ecx
  00622	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  0062a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0062f	51		 push	 ecx
  00630	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d23d70a
  00638	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063d	51		 push	 ecx
  0063e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  00646	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0064b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5352 : 
; 5353 : 	// print digital readout
; 5354 : 
; 5355 : 	set_mono_font_type (MONO_FONT_TYPE_6X10);

  00650	6a 04		 push	 4
  00652	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 5356 : 	y_adjust = -2.0;

  00657	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  0065f	f3 0f 11 45 c0	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 5357 : 
; 5358 : 	sprintf(buffer, format, displayed_altitude);

  00664	8b 45 94	 mov	 eax, DWORD PTR _displayed_altitude$[ebp]
  00667	50		 push	 eax
  00668	8b 4d b0	 mov	 ecx, DWORD PTR _format$[ebp]
  0066b	51		 push	 ecx
  0066c	8d 55 a8	 lea	 edx, DWORD PTR _buffer$[ebp]
  0066f	52		 push	 edx
  00670	e8 00 00 00 00	 call	 _sprintf
  00675	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5359 : 	x_adjust = -get_mono_font_string_width(buffer) - 1;

  00678	8d 45 a8	 lea	 eax, DWORD PTR _buffer$[ebp]
  0067b	50		 push	 eax
  0067c	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00681	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR tv461[ebp]
  00687	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR tv461[ebp]
  0068f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00696	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  0069e	f3 0f 11 45 c4	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5360 : 
; 5361 : 	set_2d_mono_font_position (box_end, y_centre);

  006a3	51		 push	 ecx
  006a4	0f 57 c0	 xorps	 xmm0, xmm0
  006a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ac	51		 push	 ecx
  006ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  006b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ba	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5362 : 	set_mono_font_rel_position (x_adjust, y_adjust);

  006bf	51		 push	 ecx
  006c0	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  006c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ca	51		 push	 ecx
  006cb	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  006d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d5	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5363 : 	print_mono_font_string(buffer);

  006da	8d 45 a8	 lea	 eax, DWORD PTR _buffer$[ebp]
  006dd	50		 push	 eax
  006de	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5364 : }

  006e3	5f		 pop	 edi
  006e4	5e		 pop	 esi
  006e5	5b		 pop	 ebx
  006e6	8b e5		 mov	 esp, ebp
  006e8	5d		 pop	 ebp
  006e9	c3		 ret	 0
?draw_altitude_scale@@YGXXZ ENDP			; draw_altitude_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_aircraft_datum@@YGXXZ
_TEXT	SEGMENT
_y_centre$ = -4						; size = 4
?draw_aircraft_datum@@YGXXZ PROC			; draw_aircraft_datum, COMDAT

; 5212 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5213 : 	float y_centre = 0.0;

  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	f3 0f 11 45 fc	 movss	 DWORD PTR _y_centre$[ebp], xmm0

; 5214 : 
; 5215 : 	draw_2d_half_thick_line(0.15, y_centre, 0.4, y_centre, MFD_COLOUR_YELLOW);

  00011	b8 04 00 00 00	 mov	 eax, 4
  00016	6b c8 0f	 imul	 ecx, eax, 15
  00019	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0001f	52		 push	 edx
  00020	51		 push	 ecx
  00021	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  00026	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002b	51		 push	 ecx
  0002c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  00034	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00039	51		 push	 ecx
  0003a	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  0003f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00044	51		 push	 ecx
  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  0004d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00052	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 5216 : 	draw_2d_half_thick_line(-0.15, y_centre, -0.4, y_centre, MFD_COLOUR_YELLOW);

  00057	b8 04 00 00 00	 mov	 eax, 4
  0005c	6b c8 0f	 imul	 ecx, eax, 15
  0005f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00065	52		 push	 edx
  00066	51		 push	 ecx
  00067	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  0006c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00071	51		 push	 ecx
  00072	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  0007a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007f	51		 push	 ecx
  00080	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  00085	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008a	51		 push	 ecx
  0008b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  00093	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00098	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 5217 : 
; 5218 : 	draw_2d_half_thick_line(0.15, y_centre, 0.15, y_centre - 0.05, MFD_COLOUR_YELLOW);

  0009d	b8 04 00 00 00	 mov	 eax, 4
  000a2	6b c8 0f	 imul	 ecx, eax, 15
  000a5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000ab	52		 push	 edx
  000ac	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_centre$[ebp]
  000b1	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  000b9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000bd	51		 push	 ecx
  000be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c3	51		 push	 ecx
  000c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  000cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d1	51		 push	 ecx
  000d2	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  000d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000dc	51		 push	 ecx
  000dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e19999a
  000e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ea	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 5219 : 	draw_2d_half_thick_line(-0.15, y_centre, -0.15, y_centre - 0.05, MFD_COLOUR_YELLOW);

  000ef	b8 04 00 00 00	 mov	 eax, 4
  000f4	6b c8 0f	 imul	 ecx, eax, 15
  000f7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000fd	52		 push	 edx
  000fe	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_centre$[ebp]
  00103	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fa999999999999a
  0010b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0010f	51		 push	 ecx
  00110	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00115	51		 push	 ecx
  00116	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  0011e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00123	51		 push	 ecx
  00124	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  00129	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012e	51		 push	 ecx
  0012f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  00137	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013c	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 5220 : 
; 5221 : 	draw_2d_half_thick_line(0.5, y_centre, 0.7, y_centre, MFD_COLOUR_YELLOW);

  00141	b8 04 00 00 00	 mov	 eax, 4
  00146	6b c8 0f	 imul	 ecx, eax, 15
  00149	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0014f	52		 push	 edx
  00150	51		 push	 ecx
  00151	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  00156	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015b	51		 push	 ecx
  0015c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00164	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00169	51		 push	 ecx
  0016a	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  0016f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00174	51		 push	 ecx
  00175	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0017d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00182	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 5222 : 	draw_2d_half_thick_line(-0.5, y_centre, -0.7, y_centre, MFD_COLOUR_YELLOW);

  00187	b8 04 00 00 00	 mov	 eax, 4
  0018c	6b c8 0f	 imul	 ecx, eax, 15
  0018f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00195	52		 push	 edx
  00196	51		 push	 ecx
  00197	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  0019c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a1	51		 push	 ecx
  001a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf333333
  001aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001af	51		 push	 ecx
  001b0	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  001b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ba	51		 push	 ecx
  001bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  001c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c8	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 5223 : 
; 5224 : 	draw_2d_half_thick_line(0.0, y_centre - 0.6, 0.0, y_centre - 0.75, MFD_COLOUR_YELLOW);

  001cd	b8 04 00 00 00	 mov	 eax, 4
  001d2	6b c8 0f	 imul	 ecx, eax, 15
  001d5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001db	52		 push	 edx
  001dc	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_centre$[ebp]
  001e1	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe8000000000000
  001e9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001ed	51		 push	 ecx
  001ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f3	51		 push	 ecx
  001f4	0f 57 c0	 xorps	 xmm0, xmm0
  001f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fc	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_centre$[ebp]
  00201	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe3333333333333
  00209	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0020d	51		 push	 ecx
  0020e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00213	51		 push	 ecx
  00214	0f 57 c0	 xorps	 xmm0, xmm0
  00217	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021c	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 5225 : }

  00221	5f		 pop	 edi
  00222	5e		 pop	 esi
  00223	5b		 pop	 ebx
  00224	8b e5		 mov	 esp, ebp
  00226	5d		 pop	 ebp
  00227	c3		 ret	 0
?draw_aircraft_datum@@YGXXZ ENDP			; draw_aircraft_datum
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_pitch_ladder@@YGXXZ
_TEXT	SEGMENT
tv855 = -264						; size = 8
tv665 = -264						; size = 8
tv659 = -264						; size = 8
tv651 = -264						; size = 8
tv229 = -264						; size = 4
tv92 = -264						; size = 4
tv644 = -260						; size = 4
tv638 = -260						; size = 4
tv626 = -260						; size = 4
tv398 = -260						; size = 4
tv189 = -260						; size = 4
tv182 = -260						; size = 4
tv84 = -260						; size = 4
_right_colour$1 = -192					; size = 4
_left_colour$2 = -188					; size = 4
_tmp$3 = -184						; size = 4
_end_x$4 = -180						; size = 4
_start_x$5 = -176					; size = 4
_right_y$6 = -172					; size = 4
_left_y$7 = -168					; size = 4
_incline$8 = -164					; size = 4
_inverted$9 = -160					; size = 4
_tan_pitch$10 = -156					; size = 4
_y_horizon_abs$11 = -152				; size = 4
_x_horizon_abs$12 = -148				; size = 4
_ground_colour$ = -144					; size = 4
_sky_colour$ = -140					; size = 4
_x_adjust$ = -136					; size = 4
_y_10_deg_step$ = -132					; size = 4
_x_10_deg_step$ = -128					; size = 4
_y_horizon$ = -124					; size = 4
_x_horizon$ = -120					; size = 4
_y_scale$ = -116					; size = 4
_x_scale$ = -112					; size = 4
_lower_edge$ = -108					; size = 4
_upper_edge$ = -104					; size = 4
_right_edge$ = -100					; size = 4
_left_edge$ = -96					; size = 4
_y$ = -92						; size = 4
_x$ = -88						; size = 4
_v$ = -84						; size = 4
_u$ = -80						; size = 4
_roll$ = -76						; size = 4
_pitch_bar_scale$ = -72					; size = 4
_tan_mod_pitch$ = -68					; size = 4
_mod_pitch$ = -64					; size = 4
_pitch$ = -60						; size = 4
_vp_size$ = -56						; size = 4
_size$ = -52						; size = 4
_y_centre$ = -48					; size = 4
_x_centre$ = -44					; size = 4
_y_adjust_below_line$ = -40				; size = 4
_y_adjust_above_line$ = -36				; size = 4
_loop$ = -32						; size = 4
_step_direction$ = -28					; size = 4
_int_pitch$ = -24					; size = 4
_s$ = -20						; size = 20
?draw_pitch_ladder@@YGXXZ PROC				; draw_pitch_ladder, COMDAT

; 4915 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 4916 : 	char
; 4917 : 		s[20];
; 4918 : 
; 4919 : 	int
; 4920 : 		int_pitch,
; 4921 : 		step_direction,
; 4922 : 		loop;
; 4923 : 
; 4924 : 	float
; 4925 : 		y_adjust_above_line,
; 4926 : 		y_adjust_below_line,
; 4927 : 		x_centre,
; 4928 : 		y_centre = 0.0,

  0000c	0f 57 c0	 xorps	 xmm0, xmm0
  0000f	f3 0f 11 45 d0	 movss	 DWORD PTR _y_centre$[ebp], xmm0

; 4929 : 		size,
; 4930 : 		vp_size,
; 4931 : 		pitch,
; 4932 : 		mod_pitch,
; 4933 : 		tan_mod_pitch,
; 4934 : 		pitch_bar_scale,
; 4935 : 		roll,
; 4936 : 		u,
; 4937 : 		v,
; 4938 : 		x,
; 4939 : 		y,
; 4940 : 		left_edge,
; 4941 : 		right_edge,
; 4942 : 		upper_edge,
; 4943 : 		lower_edge,
; 4944 : 		x_scale,
; 4945 : 		y_scale,
; 4946 : 		x_horizon,
; 4947 : 		y_horizon,
; 4948 : 		x_10_deg_step,
; 4949 : 		y_10_deg_step,
; 4950 : 		x_adjust;
; 4951 : 
; 4952 : 	rgb_colour
; 4953 : 		sky_colour,
; 4954 : 		ground_colour;
; 4955 : 
; 4956 : 	if (command_line_colour_mfd)

  00014	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_colour_mfd@@3HA, 0 ; command_line_colour_mfd
  0001b	74 3a		 je	 SHORT $LN7@draw_pitch

; 4957 : 	{
; 4958 : 		sky_colour.red = 0;

  0001d	c6 85 76 ff ff
	ff 00		 mov	 BYTE PTR _sky_colour$[ebp+2], 0

; 4959 : 		sky_colour.green = 120;

  00024	c6 85 75 ff ff
	ff 78		 mov	 BYTE PTR _sky_colour$[ebp+1], 120 ; 00000078H

; 4960 : 		sky_colour.blue = 192;

  0002b	c6 85 74 ff ff
	ff c0		 mov	 BYTE PTR _sky_colour$[ebp], 192 ; 000000c0H

; 4961 : 		sky_colour.alpha = 255;

  00032	c6 85 77 ff ff
	ff ff		 mov	 BYTE PTR _sky_colour$[ebp+3], 255 ; 000000ffH

; 4962 : 
; 4963 : 		ground_colour.red =   0;

  00039	c6 85 72 ff ff
	ff 00		 mov	 BYTE PTR _ground_colour$[ebp+2], 0

; 4964 : 		ground_colour.green =  90;

  00040	c6 85 71 ff ff
	ff 5a		 mov	 BYTE PTR _ground_colour$[ebp+1], 90 ; 0000005aH

; 4965 : 		ground_colour.blue =  10;

  00047	c6 85 70 ff ff
	ff 0a		 mov	 BYTE PTR _ground_colour$[ebp], 10 ; 0000000aH

; 4966 : 		ground_colour.alpha = 255;

  0004e	c6 85 73 ff ff
	ff ff		 mov	 BYTE PTR _ground_colour$[ebp+3], 255 ; 000000ffH

; 4967 : 	}
; 4968 : 	else

  00055	eb 28		 jmp	 SHORT $LN8@draw_pitch
$LN7@draw_pitch:

; 4969 : 	{
; 4970 : 		sky_colour = MFD_COLOUR2;

  00057	b8 04 00 00 00	 mov	 eax, 4
  0005c	c1 e0 00	 shl	 eax, 0
  0005f	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00065	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _sky_colour$[ebp], ecx

; 4971 : 		ground_colour = MFD_COLOUR5;

  0006b	b8 04 00 00 00	 mov	 eax, 4
  00070	c1 e0 02	 shl	 eax, 2
  00073	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00079	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _ground_colour$[ebp], ecx
$LN8@draw_pitch:

; 4972 : 	}
; 4973 : 
; 4974 : 	if (draw_large_mfd)

  0007f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00086	74 23		 je	 SHORT $LN9@draw_pitch

; 4975 : 	{
; 4976 : 		set_mono_font_type (MONO_FONT_TYPE_5X9);

  00088	6a 02		 push	 2
  0008a	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 4977 : 
; 4978 : 		y_adjust_above_line = -3.0;

  0008f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  00097	f3 0f 11 45 dc	 movss	 DWORD PTR _y_adjust_above_line$[ebp], xmm0

; 4979 : 		y_adjust_below_line = -3.0;

  0009c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  000a4	f3 0f 11 45 d8	 movss	 DWORD PTR _y_adjust_below_line$[ebp], xmm0

; 4980 : 	}
; 4981 : 	else

  000a9	eb 21		 jmp	 SHORT $LN10@draw_pitch
$LN9@draw_pitch:

; 4982 : 	{
; 4983 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  000ab	6a 00		 push	 0
  000ad	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 4984 : 
; 4985 : 		y_adjust_above_line = -3.0;

  000b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  000ba	f3 0f 11 45 dc	 movss	 DWORD PTR _y_adjust_above_line$[ebp], xmm0

; 4986 : 		y_adjust_below_line = -1.0;

  000bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000c7	f3 0f 11 45 d8	 movss	 DWORD PTR _y_adjust_below_line$[ebp], xmm0
$LN10@draw_pitch:

; 4987 : 	}
; 4988 : 
; 4989 : 	x_centre = 0.0;

  000cc	0f 57 c0	 xorps	 xmm0, xmm0
  000cf	f3 0f 11 45 d4	 movss	 DWORD PTR _x_centre$[ebp], xmm0

; 4990 : 
; 4991 : 	size = 0.59;

  000d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f170a3d
  000dc	f3 0f 11 45 cc	 movss	 DWORD PTR _size$[ebp], xmm0

; 4992 : 	pitch_bar_scale = 0.8;

  000e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  000e9	f3 0f 11 45 b8	 movss	 DWORD PTR _pitch_bar_scale$[ebp], xmm0

; 4993 : 
; 4994 : 	//
; 4995 : 	//
; 4996 : 
; 4997 : 	get_2d_float_screen_coordinates (PITCH_DATUM_X, PITCH_DATUM_Y, &u, &v);

  000ee	8d 45 ac	 lea	 eax, DWORD PTR _v$[ebp]
  000f1	50		 push	 eax
  000f2	8d 4d b0	 lea	 ecx, DWORD PTR _u$[ebp]
  000f5	51		 push	 ecx
  000f6	51		 push	 ecx
  000f7	0f 57 c0	 xorps	 xmm0, xmm0
  000fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ff	51		 push	 ecx
  00100	0f 57 c0	 xorps	 xmm0, xmm0
  00103	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00108	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 4998 : 	roll = get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_ROLL);

  0010d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00114	74 0f		 je	 SHORT $LN22@draw_pitch
  00116	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0011b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011d	89 8d fc fe ff
	ff		 mov	 DWORD PTR tv84[ebp], ecx
  00123	eb 24		 jmp	 SHORT $LN23@draw_pitch
$LN22@draw_pitch:
  00125	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  0012b	83 c2 53	 add	 edx, 83			; 00000053H
  0012e	52		 push	 edx
  0012f	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00134	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00139	50		 push	 eax
  0013a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0013f	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv84[ebp], 0
$LN23@draw_pitch:
  00149	b9 01 00 00 00	 mov	 ecx, 1
  0014e	85 c9		 test	 ecx, ecx
  00150	74 0c		 je	 SHORT $LN24@draw_pitch
  00152	c7 85 f8 fe ff
	ff 71 00 00 00	 mov	 DWORD PTR tv92[ebp], 113 ; 00000071H
  0015c	eb 24		 jmp	 SHORT $LN25@draw_pitch
$LN24@draw_pitch:
  0015e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  00164	83 c2 53	 add	 edx, 83			; 00000053H
  00167	52		 push	 edx
  00168	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0016d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00172	50		 push	 eax
  00173	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00178	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv92[ebp], 0
$LN25@draw_pitch:
  00182	6a 71		 push	 113			; 00000071H
  00184	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0018a	51		 push	 ecx
  0018b	69 95 fc fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv84[ebp], 700
  00195	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR tv92[ebp]
  0019b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  001a2	ff d1		 call	 ecx
  001a4	d9 5d b4	 fstp	 DWORD PTR _roll$[ebp]

; 4999 : 
; 5000 : 	//
; 5001 : 	// set 2D environment
; 5002 : 	//
; 5003 : 
; 5004 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN * size, MFD_WINDOW_Y_MIN * size, MFD_WINDOW_X_MAX * size, MFD_WINDOW_Y_MAX * size);

  001a7	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  001ac	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3feff7ced916872b
  001b4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001b8	51		 push	 ecx
  001b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001be	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  001c3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3feff7ced916872b
  001cb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001cf	51		 push	 ecx
  001d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d5	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  001da	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff0000000000000
  001e2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001e6	51		 push	 ecx
  001e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ec	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  001f1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bff0000000000000
  001f9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001fd	51		 push	 ecx
  001fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00203	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00208	50		 push	 eax
  00209	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 5005 : 
; 5006 : 	vp_size = mfd_viewport_size * size * 0.5;

  0020e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00216	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _size$[ebp]
  0021b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0021f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00227	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0022b	f3 0f 11 45 c8	 movss	 DWORD PTR _vp_size$[ebp], xmm0

; 5007 : 	set_2d_viewport (mfd_env, u - (vp_size), v - vp_size, u + (vp_size) - 0.001, v + vp_size - 0.001);

  00230	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _v$[ebp]
  00235	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _vp_size$[ebp]
  0023a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0023e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00246	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0024a	51		 push	 ecx
  0024b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00250	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _u$[ebp]
  00255	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _vp_size$[ebp]
  0025a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0025e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00266	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0026a	51		 push	 ecx
  0026b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00270	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _v$[ebp]
  00275	f3 0f 5c 45 c8	 subss	 xmm0, DWORD PTR _vp_size$[ebp]
  0027a	51		 push	 ecx
  0027b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00280	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _u$[ebp]
  00285	f3 0f 5c 45 c8	 subss	 xmm0, DWORD PTR _vp_size$[ebp]
  0028a	51		 push	 ecx
  0028b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00290	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00295	50		 push	 eax
  00296	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 5008 : 
; 5009 : 	upper_edge = 0.5 * size;

  0029b	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  002a0	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  002a8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002ac	f3 0f 11 45 98	 movss	 DWORD PTR _upper_edge$[ebp], xmm0

; 5010 : 	left_edge = -(size * 0.5);

  002b1	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  002b6	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  002be	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  002c5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002c9	f3 0f 11 45 a0	 movss	 DWORD PTR _left_edge$[ebp], xmm0

; 5011 : 	right_edge = (size * 0.5);

  002ce	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  002d3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  002db	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002df	f3 0f 11 45 9c	 movss	 DWORD PTR _right_edge$[ebp], xmm0

; 5012 : 	lower_edge = -0.5 * size;

  002e4	f3 0f 5a 45 cc	 cvtss2sd xmm0, DWORD PTR _size$[ebp]
  002e9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  002f1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002f5	f3 0f 11 45 94	 movss	 DWORD PTR _lower_edge$[ebp], xmm0

; 5013 : 
; 5014 : //	set_2d_viewport (mfd_env, u + left_edge, v + upper_edge, u + right_edge, v + lower_edge);
; 5015 : 
; 5016 : 
; 5017 : 	//
; 5018 : 	// pitch
; 5019 : 	//
; 5020 : 
; 5021 : 	{
; 5022 : 		float
; 5023 : 			x_horizon_abs,
; 5024 : 			y_horizon_abs,
; 5025 : 			tan_pitch;
; 5026 : 
; 5027 : 		int inverted = (roll < -rad(90)) || (roll > rad(90));

  002fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfc90fdb
  00302	0f 2f 45 b4	 comiss	 xmm0, DWORD PTR _roll$[ebp]
  00306	77 1a		 ja	 SHORT $LN26@draw_pitch
  00308	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _roll$[ebp]
  0030d	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3fc90fdb
  00314	77 0c		 ja	 SHORT $LN26@draw_pitch
  00316	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv182[ebp], 0
  00320	eb 0a		 jmp	 SHORT $LN27@draw_pitch
$LN26@draw_pitch:
  00322	c7 85 fc fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv182[ebp], 1
$LN27@draw_pitch:
  0032c	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR tv182[ebp]
  00332	89 85 60 ff ff
	ff		 mov	 DWORD PTR _inverted$9[ebp], eax

; 5028 : 
; 5029 : 		pitch = get_local_entity_float_value (get_gunship_entity (), FLOAT_TYPE_PITCH);

  00338	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0033f	74 0f		 je	 SHORT $LN28@draw_pitch
  00341	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00346	8b 08		 mov	 ecx, DWORD PTR [eax]
  00348	89 8d fc fe ff
	ff		 mov	 DWORD PTR tv189[ebp], ecx
  0034e	eb 24		 jmp	 SHORT $LN29@draw_pitch
$LN28@draw_pitch:
  00350	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  00356	83 c2 72	 add	 edx, 114		; 00000072H
  00359	52		 push	 edx
  0035a	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0035f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00364	50		 push	 eax
  00365	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0036a	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv189[ebp], 0
$LN29@draw_pitch:
  00374	b9 01 00 00 00	 mov	 ecx, 1
  00379	85 c9		 test	 ecx, ecx
  0037b	74 0c		 je	 SHORT $LN30@draw_pitch
  0037d	c7 85 f8 fe ff
	ff 54 00 00 00	 mov	 DWORD PTR tv229[ebp], 84 ; 00000054H
  00387	eb 24		 jmp	 SHORT $LN31@draw_pitch
$LN30@draw_pitch:
  00389	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_pitch_ladder@@YGXXZ@4JA
  0038f	83 c2 72	 add	 edx, 114		; 00000072H
  00392	52		 push	 edx
  00393	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00398	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0039d	50		 push	 eax
  0039e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003a3	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv229[ebp], 0
$LN31@draw_pitch:
  003ad	6a 54		 push	 84			; 00000054H
  003af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  003b5	51		 push	 ecx
  003b6	69 95 fc fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv189[ebp], 700
  003c0	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR tv229[ebp]
  003c6	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  003cd	ff d1		 call	 ecx
  003cf	d9 5d c4	 fstp	 DWORD PTR _pitch$[ebp]

; 5030 : 		tan_pitch = -tan(pitch);

  003d2	51		 push	 ecx
  003d3	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  003d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003dd	e8 00 00 00 00	 call	 ?tan@@YGMM@Z		; tan
  003e2	d9 9d fc fe ff
	ff		 fstp	 DWORD PTR tv626[ebp]
  003e8	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR tv626[ebp]
  003f0	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  003f7	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _tan_pitch$10[ebp], xmm0

; 5031 : 		mod_pitch = fmod (pitch, rad (10.0f));

  003ff	51		 push	 ecx
  00400	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e32b8c2
  00408	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040d	51		 push	 ecx
  0040e	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _pitch$[ebp]
  00413	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00418	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  0041d	d9 5d c0	 fstp	 DWORD PTR _mod_pitch$[ebp]

; 5032 : 		tan_mod_pitch = -tan (mod_pitch);

  00420	51		 push	 ecx
  00421	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _mod_pitch$[ebp]
  00426	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042b	e8 00 00 00 00	 call	 ?tan@@YGMM@Z		; tan
  00430	d9 9d fc fe ff
	ff		 fstp	 DWORD PTR tv638[ebp]
  00436	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR tv638[ebp]
  0043e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00445	f3 0f 11 45 bc	 movss	 DWORD PTR _tan_mod_pitch$[ebp], xmm0

; 5033 : 		int_pitch = (int) (pitch * (1.0 / rad (10.0)));

  0044a	f3 0f 5a 45 c4	 cvtss2sd xmm0, DWORD PTR _pitch$[ebp]
  0044f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4016eb167e7d81e3
  00457	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0045b	89 45 e8	 mov	 DWORD PTR _int_pitch$[ebp], eax

; 5034 : 
; 5035 : 		//
; 5036 : 		// get x and y scale factors
; 5037 : 		//
; 5038 : 
; 5039 : 		x_scale = -sin (roll) * 1.5 * pitch_bar_scale;

  0045e	51		 push	 ecx
  0045f	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00464	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00469	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  0046e	d9 9d fc fe ff
	ff		 fstp	 DWORD PTR tv644[ebp]
  00474	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR tv644[ebp]
  0047c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00483	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00487	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff8000000000000
  0048f	f3 0f 5a 4d b8	 cvtss2sd xmm1, DWORD PTR _pitch_bar_scale$[ebp]
  00494	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00498	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0049c	f3 0f 11 45 90	 movss	 DWORD PTR _x_scale$[ebp], xmm0

; 5040 : 		y_scale = cos (roll) * 1.5 * pitch_bar_scale;

  004a1	51		 push	 ecx
  004a2	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _roll$[ebp]
  004a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ac	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  004b1	dd 9d f8 fe ff
	ff		 fstp	 QWORD PTR tv651[ebp]
  004b7	f2 0f 10 85 f8
	fe ff ff	 movsd	 xmm0, QWORD PTR tv651[ebp]
  004bf	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff8000000000000
  004c7	f3 0f 5a 4d b8	 cvtss2sd xmm1, DWORD PTR _pitch_bar_scale$[ebp]
  004cc	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  004d0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004d4	f3 0f 11 45 8c	 movss	 DWORD PTR _y_scale$[ebp], xmm0

; 5041 : 
; 5042 : 		x_horizon = tan_mod_pitch * x_scale;

  004d9	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _tan_mod_pitch$[ebp]
  004de	f3 0f 59 45 90	 mulss	 xmm0, DWORD PTR _x_scale$[ebp]
  004e3	f3 0f 11 45 88	 movss	 DWORD PTR _x_horizon$[ebp], xmm0

; 5043 : 		y_horizon = tan_mod_pitch * y_scale;

  004e8	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _tan_mod_pitch$[ebp]
  004ed	f3 0f 59 45 8c	 mulss	 xmm0, DWORD PTR _y_scale$[ebp]
  004f2	f3 0f 11 45 84	 movss	 DWORD PTR _y_horizon$[ebp], xmm0

; 5044 : 
; 5045 : 		x_10_deg_step = tan (rad (10.0)) * x_scale;

  004f7	83 ec 08	 sub	 esp, 8
  004fa	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fc6571848000000
  00502	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00507	e8 00 00 00 00	 call	 _tan
  0050c	83 c4 08	 add	 esp, 8
  0050f	dd 9d f8 fe ff
	ff		 fstp	 QWORD PTR tv659[ebp]
  00515	f2 0f 10 85 f8
	fe ff ff	 movsd	 xmm0, QWORD PTR tv659[ebp]
  0051d	f3 0f 5a 4d 90	 cvtss2sd xmm1, DWORD PTR _x_scale$[ebp]
  00522	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00526	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0052a	f3 0f 11 45 80	 movss	 DWORD PTR _x_10_deg_step$[ebp], xmm0

; 5046 : 		y_10_deg_step = tan (rad (10.0)) * y_scale;

  0052f	83 ec 08	 sub	 esp, 8
  00532	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fc6571848000000
  0053a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0053f	e8 00 00 00 00	 call	 _tan
  00544	83 c4 08	 add	 esp, 8
  00547	dd 9d f8 fe ff
	ff		 fstp	 QWORD PTR tv665[ebp]
  0054d	f2 0f 10 85 f8
	fe ff ff	 movsd	 xmm0, QWORD PTR tv665[ebp]
  00555	f3 0f 5a 4d 8c	 cvtss2sd xmm1, DWORD PTR _y_scale$[ebp]
  0055a	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0055e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00562	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _y_10_deg_step$[ebp], xmm0

; 5047 : 
; 5048 : 		x_horizon_abs = tan_pitch * x_scale;

  0056a	f3 0f 10 85 64
	ff ff ff	 movss	 xmm0, DWORD PTR _tan_pitch$10[ebp]
  00572	f3 0f 59 45 90	 mulss	 xmm0, DWORD PTR _x_scale$[ebp]
  00577	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _x_horizon_abs$12[ebp], xmm0

; 5049 : 		y_horizon_abs = tan_pitch * y_scale;

  0057f	f3 0f 10 85 64
	ff ff ff	 movss	 xmm0, DWORD PTR _tan_pitch$10[ebp]
  00587	f3 0f 59 45 8c	 mulss	 xmm0, DWORD PTR _y_scale$[ebp]
  0058c	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _y_horizon_abs$11[ebp], xmm0

; 5050 : 
; 5051 : 		// draw horizon
; 5052 : 		set_2d_pixel(x_horizon_abs, y_horizon_abs, MFD_COLOUR1);

  00594	b8 04 00 00 00	 mov	 eax, 4
  00599	6b c8 00	 imul	 ecx, eax, 0
  0059c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005a2	52		 push	 edx
  005a3	51		 push	 ecx
  005a4	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _y_horizon_abs$11[ebp]
  005ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b1	51		 push	 ecx
  005b2	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$12[ebp]
  005ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005bf	e8 00 00 00 00	 call	 ?set_2d_pixel@@YGXMMUREAL_COLOUR@@@Z ; set_2d_pixel

; 5053 : 		if (roll != -rad(90) && roll != rad(90))

  005c4	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _roll$[ebp]
  005c9	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@bfc90fdb
  005d0	9f		 lahf
  005d1	f6 c4 44	 test	 ah, 68			; 00000044H
  005d4	0f 8b 58 03 00
	00		 jnp	 $LN11@draw_pitch
  005da	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _roll$[ebp]
  005df	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@3fc90fdb
  005e6	9f		 lahf
  005e7	f6 c4 44	 test	 ah, 68			; 00000044H
  005ea	0f 8b 42 03 00
	00		 jnp	 $LN11@draw_pitch

; 5054 : 		{
; 5055 : 			float incline = tan(roll);

  005f0	51		 push	 ecx
  005f1	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _roll$[ebp]
  005f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005fb	e8 00 00 00 00	 call	 ?tan@@YGMM@Z		; tan
  00600	d9 9d 5c ff ff
	ff		 fstp	 DWORD PTR _incline$8[ebp]

; 5056 : 			float left_y, right_y;
; 5057 : 			float start_x = -1.0, end_x = 1.0;

  00606	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0060e	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _start_x$5[ebp], xmm0
  00616	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0061e	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _end_x$4[ebp], xmm0

; 5058 : 
; 5059 : 			left_y = (x_horizon_abs - left_edge) * -incline;

  00626	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$12[ebp]
  0062e	f3 0f 5c 45 a0	 subss	 xmm0, DWORD PTR _left_edge$[ebp]
  00633	f3 0f 10 8d 5c
	ff ff ff	 movss	 xmm1, DWORD PTR _incline$8[ebp]
  0063b	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00642	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00646	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _left_y$7[ebp], xmm0

; 5060 : 			right_y = (right_edge - x_horizon_abs) * incline;

  0064e	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _right_edge$[ebp]
  00653	f3 0f 5c 85 6c
	ff ff ff	 subss	 xmm0, DWORD PTR _x_horizon_abs$12[ebp]
  0065b	f3 0f 59 85 5c
	ff ff ff	 mulss	 xmm0, DWORD PTR _incline$8[ebp]
  00663	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _right_y$6[ebp], xmm0

; 5061 : 
; 5062 : 			if (incline < 0.0)

  0066b	f3 0f 5a 85 5c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _incline$8[ebp]
  00673	0f 57 c9	 xorps	 xmm1, xmm1
  00676	66 0f 2f c8	 comisd	 xmm1, xmm0
  0067a	76 50		 jbe	 SHORT $LN13@draw_pitch

; 5063 : 			{
; 5064 : 				// find where horizon intersects top and bottom
; 5065 : 				start_x = x_horizon_abs + ((1 - y_horizon_abs) / incline);

  0067c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00684	f3 0f 5c 85 68
	ff ff ff	 subss	 xmm0, DWORD PTR _y_horizon_abs$11[ebp]
  0068c	f3 0f 5e 85 5c
	ff ff ff	 divss	 xmm0, DWORD PTR _incline$8[ebp]
  00694	f3 0f 58 85 6c
	ff ff ff	 addss	 xmm0, DWORD PTR _x_horizon_abs$12[ebp]
  0069c	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _start_x$5[ebp], xmm0

; 5066 : 				end_x = x_horizon_abs + ((-2 - y_horizon_abs) / incline);

  006a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  006ac	f3 0f 5c 85 68
	ff ff ff	 subss	 xmm0, DWORD PTR _y_horizon_abs$11[ebp]
  006b4	f3 0f 5e 85 5c
	ff ff ff	 divss	 xmm0, DWORD PTR _incline$8[ebp]
  006bc	f3 0f 58 85 6c
	ff ff ff	 addss	 xmm0, DWORD PTR _x_horizon_abs$12[ebp]
  006c4	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _end_x$4[ebp], xmm0
$LN13@draw_pitch:

; 5067 : 			}
; 5068 : 
; 5069 : 			draw_2d_line(left_edge, left_y, right_edge, right_y, sys_col_red);

  006cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  006d1	50		 push	 eax
  006d2	51		 push	 ecx
  006d3	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _right_y$6[ebp]
  006db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006e0	51		 push	 ecx
  006e1	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _right_edge$[ebp]
  006e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006eb	51		 push	 ecx
  006ec	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _left_y$7[ebp]
  006f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f9	51		 push	 ecx
  006fa	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _left_edge$[ebp]
  006ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00704	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5070 : 
; 5071 : 			left_y = y_horizon_abs + (1.0 + x_horizon_abs) * -incline;

  00709	f3 0f 5a 85 68
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_horizon_abs$11[ebp]
  00711	f3 0f 5a 8d 6c
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _x_horizon_abs$12[ebp]
  00719	f2 0f 58 0d 00
	00 00 00	 addsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00721	f3 0f 10 95 5c
	ff ff ff	 movss	 xmm2, DWORD PTR _incline$8[ebp]
  00729	0f 57 15 00 00
	00 00		 xorps	 xmm2, DWORD PTR __xmm@80000000800000008000000080000000
  00730	f3 0f 5a d2	 cvtss2sd xmm2, xmm2
  00734	f2 0f 59 ca	 mulsd	 xmm1, xmm2
  00738	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0073c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00740	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _left_y$7[ebp], xmm0

; 5072 : 			right_y = y_horizon_abs + (1.0 - x_horizon_abs) * incline;

  00748	f3 0f 5a 85 68
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_horizon_abs$11[ebp]
  00750	f3 0f 5a 8d 6c
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _x_horizon_abs$12[ebp]
  00758	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@3ff0000000000000
  00760	f2 0f 5c d1	 subsd	 xmm2, xmm1
  00764	f3 0f 5a 8d 5c
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _incline$8[ebp]
  0076c	f2 0f 59 d1	 mulsd	 xmm2, xmm1
  00770	f2 0f 58 c2	 addsd	 xmm0, xmm2
  00774	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00778	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _right_y$6[ebp], xmm0

; 5073 : 
; 5074 : 			if (inverted)

  00780	83 bd 60 ff ff
	ff 00		 cmp	 DWORD PTR _inverted$9[ebp], 0
  00787	74 24		 je	 SHORT $LN14@draw_pitch

; 5075 : 			{
; 5076 : 				rgb_colour tmp = sky_colour;

  00789	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _sky_colour$[ebp]
  0078f	89 85 48 ff ff
	ff		 mov	 DWORD PTR _tmp$3[ebp], eax

; 5077 : 				sky_colour = ground_colour;

  00795	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ground_colour$[ebp]
  0079b	89 85 74 ff ff
	ff		 mov	 DWORD PTR _sky_colour$[ebp], eax

; 5078 : 				ground_colour = tmp;

  007a1	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR _tmp$3[ebp]
  007a7	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ground_colour$[ebp], eax
$LN14@draw_pitch:

; 5079 : 			}
; 5080 : 
; 5081 : 			draw_2d_filled_triangle(-1.0, left_y, -1.0, 1.0, 1.0, right_y, sky_colour);

  007ad	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _sky_colour$[ebp]
  007b3	50		 push	 eax
  007b4	51		 push	 ecx
  007b5	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _right_y$6[ebp]
  007bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c2	51		 push	 ecx
  007c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  007cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d0	51		 push	 ecx
  007d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  007d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007de	51		 push	 ecx
  007df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  007e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ec	51		 push	 ecx
  007ed	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _left_y$7[ebp]
  007f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007fa	51		 push	 ecx
  007fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00803	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00808	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 5082 : 			draw_2d_filled_triangle(start_x, 1.0, 1.0, 1.0, 1.0, right_y, sky_colour);

  0080d	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _sky_colour$[ebp]
  00813	50		 push	 eax
  00814	51		 push	 ecx
  00815	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _right_y$6[ebp]
  0081d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00822	51		 push	 ecx
  00823	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0082b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00830	51		 push	 ecx
  00831	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00839	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0083e	51		 push	 ecx
  0083f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00847	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0084c	51		 push	 ecx
  0084d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00855	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0085a	51		 push	 ecx
  0085b	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _start_x$5[ebp]
  00863	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00868	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 5083 : 
; 5084 : 			draw_2d_filled_triangle(-1.0, left_y, end_x, -2.0, -1.0, -2.0, ground_colour);

  0086d	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ground_colour$[ebp]
  00873	50		 push	 eax
  00874	51		 push	 ecx
  00875	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  0087d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00882	51		 push	 ecx
  00883	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0088b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00890	51		 push	 ecx
  00891	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00899	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0089e	51		 push	 ecx
  0089f	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR _end_x$4[ebp]
  008a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ac	51		 push	 ecx
  008ad	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _left_y$7[ebp]
  008b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ba	51		 push	 ecx
  008bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  008c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c8	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 5085 : 			draw_2d_filled_triangle(-1.0, left_y, 1.0, right_y, 1.0, -2.0, ground_colour);

  008cd	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ground_colour$[ebp]
  008d3	50		 push	 eax
  008d4	51		 push	 ecx
  008d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  008dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e2	51		 push	 ecx
  008e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  008eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f0	51		 push	 ecx
  008f1	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _right_y$6[ebp]
  008f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008fe	51		 push	 ecx
  008ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00907	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0090c	51		 push	 ecx
  0090d	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _left_y$7[ebp]
  00915	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0091a	51		 push	 ecx
  0091b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00923	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00928	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 5086 : 		}
; 5087 : 		else  // 90 degree bank

  0092d	e9 cc 01 00 00	 jmp	 $LN12@draw_pitch
$LN11@draw_pitch:

; 5088 : 		{
; 5089 : 			rgb_colour
; 5090 : 				*left_colour,
; 5091 : 				*right_colour;
; 5092 : 
; 5093 : 			if (roll == rad(90))

  00932	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00937	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@3fc90fdb
  0093e	9f		 lahf
  0093f	f6 c4 44	 test	 ah, 68			; 00000044H
  00942	7a 1a		 jp	 SHORT $LN15@draw_pitch

; 5094 : 			{
; 5095 : 				left_colour = &ground_colour;

  00944	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _ground_colour$[ebp]
  0094a	89 85 44 ff ff
	ff		 mov	 DWORD PTR _left_colour$2[ebp], eax

; 5096 : 				right_colour = &sky_colour;

  00950	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _sky_colour$[ebp]
  00956	89 85 40 ff ff
	ff		 mov	 DWORD PTR _right_colour$1[ebp], eax

; 5097 : 			}
; 5098 : 			else

  0095c	eb 18		 jmp	 SHORT $LN16@draw_pitch
$LN15@draw_pitch:

; 5099 : 			{
; 5100 : 				left_colour = &sky_colour;

  0095e	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _sky_colour$[ebp]
  00964	89 85 44 ff ff
	ff		 mov	 DWORD PTR _left_colour$2[ebp], eax

; 5101 : 				right_colour = &ground_colour;

  0096a	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _ground_colour$[ebp]
  00970	89 85 40 ff ff
	ff		 mov	 DWORD PTR _right_colour$1[ebp], eax
$LN16@draw_pitch:

; 5102 : 			}
; 5103 : 
; 5104 : 			draw_2d_filled_triangle(x_horizon_abs, 1.0, 1.0, 1.0, 1.0, -1.0, *right_colour);

  00976	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _right_colour$1[ebp]
  0097c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0097e	51		 push	 ecx
  0097f	51		 push	 ecx
  00980	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00988	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0098d	51		 push	 ecx
  0098e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00996	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0099b	51		 push	 ecx
  0099c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  009a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009a9	51		 push	 ecx
  009aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  009b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009b7	51		 push	 ecx
  009b8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  009c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009c5	51		 push	 ecx
  009c6	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$12[ebp]
  009ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009d3	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 5105 : 			draw_2d_filled_triangle(1.0, -1.0, x_horizon_abs, -1.0, x_horizon_abs, 1.0, *right_colour);

  009d8	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _right_colour$1[ebp]
  009de	8b 08		 mov	 ecx, DWORD PTR [eax]
  009e0	51		 push	 ecx
  009e1	51		 push	 ecx
  009e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  009ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ef	51		 push	 ecx
  009f0	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$12[ebp]
  009f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009fd	51		 push	 ecx
  009fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00a06	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a0b	51		 push	 ecx
  00a0c	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$12[ebp]
  00a14	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a19	51		 push	 ecx
  00a1a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00a22	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a27	51		 push	 ecx
  00a28	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a30	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a35	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 5106 : 
; 5107 : 			draw_2d_filled_triangle(-1.0, 1.0, x_horizon_abs, 1.0, x_horizon_abs, -1.0, *left_colour);

  00a3a	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _left_colour$2[ebp]
  00a40	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a42	51		 push	 ecx
  00a43	51		 push	 ecx
  00a44	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00a4c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a51	51		 push	 ecx
  00a52	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$12[ebp]
  00a5a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a5f	51		 push	 ecx
  00a60	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a68	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a6d	51		 push	 ecx
  00a6e	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$12[ebp]
  00a76	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a7b	51		 push	 ecx
  00a7c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a84	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a89	51		 push	 ecx
  00a8a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00a92	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a97	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle

; 5108 : 			draw_2d_filled_triangle(x_horizon_abs, -1.0, -1.0, -1.0, -1.0, 1.0, *left_colour);

  00a9c	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _left_colour$2[ebp]
  00aa2	8b 08		 mov	 ecx, DWORD PTR [eax]
  00aa4	51		 push	 ecx
  00aa5	51		 push	 ecx
  00aa6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00aae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ab3	51		 push	 ecx
  00ab4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00abc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac1	51		 push	 ecx
  00ac2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00aca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00acf	51		 push	 ecx
  00ad0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00ad8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00add	51		 push	 ecx
  00ade	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00ae6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aeb	51		 push	 ecx
  00aec	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _x_horizon_abs$12[ebp]
  00af4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00af9	e8 00 00 00 00	 call	 ?draw_2d_filled_triangle@@YGXMMMMMMUREAL_COLOUR@@@Z ; draw_2d_filled_triangle
$LN12@draw_pitch:

; 5109 : 		}
; 5110 : 
; 5111 : 		////////////////////////////////////////
; 5112 : 		//
; 5113 : 		// draw pitch ladder
; 5114 : 		//
; 5115 : 		////////////////////////////////////////
; 5116 : 
; 5117 : 		step_direction = -1;

  00afe	c7 45 e4 ff ff
	ff ff		 mov	 DWORD PTR _step_direction$[ebp], -1

; 5118 : 
; 5119 : 		int_pitch = limit_pitch (int_pitch + 3, &step_direction);

  00b05	8d 45 e4	 lea	 eax, DWORD PTR _step_direction$[ebp]
  00b08	50		 push	 eax
  00b09	8b 4d e8	 mov	 ecx, DWORD PTR _int_pitch$[ebp]
  00b0c	83 c1 03	 add	 ecx, 3
  00b0f	51		 push	 ecx
  00b10	e8 00 00 00 00	 call	 ?limit_pitch@@YGHHPAH@Z	; limit_pitch
  00b15	89 45 e8	 mov	 DWORD PTR _int_pitch$[ebp], eax

; 5120 : 
; 5121 : 		x = x_horizon + x_10_deg_step * 3.0;

  00b18	f3 0f 5a 45 88	 cvtss2sd xmm0, DWORD PTR _x_horizon$[ebp]
  00b1d	f3 0f 5a 4d 80	 cvtss2sd xmm1, DWORD PTR _x_10_deg_step$[ebp]
  00b22	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4008000000000000
  00b2a	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00b2e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b32	f3 0f 11 45 a8	 movss	 DWORD PTR _x$[ebp], xmm0

; 5122 : 		y = y_horizon + y_10_deg_step * 3.0;

  00b37	f3 0f 5a 45 84	 cvtss2sd xmm0, DWORD PTR _y_horizon$[ebp]
  00b3c	f3 0f 5a 8d 7c
	ff ff ff	 cvtss2sd xmm1, DWORD PTR _y_10_deg_step$[ebp]
  00b44	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4008000000000000
  00b4c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00b50	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b54	f3 0f 11 45 a4	 movss	 DWORD PTR _y$[ebp], xmm0

; 5123 : 
; 5124 : 		set_2d_instance_rotation (mfd_env, roll);

  00b59	51		 push	 ecx
  00b5a	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _roll$[ebp]
  00b5f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b64	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00b69	50		 push	 eax
  00b6a	e8 00 00 00 00	 call	 ?set_2d_instance_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_instance_rotation

; 5125 : 
; 5126 : 		for (loop = 0; loop < 7; loop++)

  00b6f	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  00b76	eb 09		 jmp	 SHORT $LN4@draw_pitch
$LN2@draw_pitch:
  00b78	8b 45 e0	 mov	 eax, DWORD PTR _loop$[ebp]
  00b7b	83 c0 01	 add	 eax, 1
  00b7e	89 45 e0	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@draw_pitch:
  00b81	83 7d e0 07	 cmp	 DWORD PTR _loop$[ebp], 7
  00b85	0f 8d bd 03 00
	00		 jge	 $LN3@draw_pitch

; 5127 : 		{
; 5128 : 			set_2d_instance_position (mfd_env, x, y);

  00b8b	51		 push	 ecx
  00b8c	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y$[ebp]
  00b91	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b96	51		 push	 ecx
  00b97	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00b9c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ba1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00ba6	50		 push	 eax
  00ba7	e8 00 00 00 00	 call	 ?set_2d_instance_position@@YGXPAUENV_2D@@MM@Z ; set_2d_instance_position

; 5129 : 
; 5130 : 			switch (int_pitch)

  00bac	8b 45 e8	 mov	 eax, DWORD PTR _int_pitch$[ebp]
  00baf	89 85 fc fe ff
	ff		 mov	 DWORD PTR tv398[ebp], eax
  00bb5	83 bd fc fe ff
	ff f7		 cmp	 DWORD PTR tv398[ebp], -9 ; fffffff7H
  00bbc	0f 84 c1 01 00
	00		 je	 $LN20@draw_pitch
  00bc2	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR tv398[ebp], 0
  00bc9	74 0f		 je	 SHORT $LN17@draw_pitch
  00bcb	83 bd fc fe ff
	ff 09		 cmp	 DWORD PTR tv398[ebp], 9
  00bd2	0f 84 22 01 00
	00		 je	 $LN19@draw_pitch
  00bd8	eb 05		 jmp	 SHORT $LN18@draw_pitch
$LN17@draw_pitch:

; 5131 : 			{
; 5132 : 				////////////////////////////////////////
; 5133 : 				case 0:
; 5134 : 				////////////////////////////////////////
; 5135 : 				{
; 5136 : 					break;

  00bda	e9 30 03 00 00	 jmp	 $LN5@draw_pitch
$LN18@draw_pitch:

; 5137 : 				}
; 5138 : 				////////////////////////////////////////
; 5139 : 				default:
; 5140 : 				////////////////////////////////////////
; 5141 : 				{
; 5142 : 					draw_2d_line (-PITCH_BAR_X2, PITCH_BAR_Y2, PITCH_BAR_X2, -PITCH_BAR_Y2, MFD_COLOUR_LIGHT_BLUE);

  00bdf	b8 04 00 00 00	 mov	 eax, 4
  00be4	c1 e0 04	 shl	 eax, 4
  00be7	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00bed	51		 push	 ecx
  00bee	51		 push	 ecx
  00bef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@80000000
  00bf7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bfc	51		 push	 ecx
  00bfd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0ccccd
  00c05	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c0a	51		 push	 ecx
  00c0b	0f 57 c0	 xorps	 xmm0, xmm0
  00c0e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c13	51		 push	 ecx
  00c14	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0ccccd
  00c1c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c21	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5143 : 
; 5144 : 					sprintf (s, "%d0", abs(int_pitch));

  00c26	8b 45 e8	 mov	 eax, DWORD PTR _int_pitch$[ebp]
  00c29	50		 push	 eax
  00c2a	e8 00 00 00 00	 call	 _abs
  00c2f	83 c4 04	 add	 esp, 4
  00c32	50		 push	 eax
  00c33	68 00 00 00 00	 push	 OFFSET ??_C@_03NJMPCKOA@?$CFd0@
  00c38	8d 4d ec	 lea	 ecx, DWORD PTR _s$[ebp]
  00c3b	51		 push	 ecx
  00c3c	e8 00 00 00 00	 call	 _sprintf
  00c41	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5145 : 					x_adjust = get_mono_font_string_width (s) * -0.5;

  00c44	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  00c47	50		 push	 eax
  00c48	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00c4d	dd 9d f8 fe ff
	ff		 fstp	 QWORD PTR tv855[ebp]
  00c53	f2 0f 10 85 f8
	fe ff ff	 movsd	 xmm0, QWORD PTR tv855[ebp]
  00c5b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00c63	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00c67	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 5146 : 
; 5147 : 					set_2d_mono_font_position (+PITCH_BAR_X4, +PITCH_BAR_Y4);

  00c6f	51		 push	 ecx
  00c70	0f 57 c0	 xorps	 xmm0, xmm0
  00c73	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c78	51		 push	 ecx
  00c79	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e59999a
  00c81	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c86	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5148 : 					set_mono_font_rel_position (x_adjust, y_adjust_above_line);

  00c8b	51		 push	 ecx
  00c8c	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y_adjust_above_line$[ebp]
  00c91	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c96	51		 push	 ecx
  00c97	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00c9f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ca4	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5149 : 					print_mono_font_string (s);

  00ca9	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  00cac	50		 push	 eax
  00cad	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5150 : 
; 5151 : 					set_2d_mono_font_position (-PITCH_BAR_X4, +PITCH_BAR_Y4);

  00cb2	51		 push	 ecx
  00cb3	0f 57 c0	 xorps	 xmm0, xmm0
  00cb6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cbb	51		 push	 ecx
  00cbc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be59999a
  00cc4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cc9	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 5152 : 					set_mono_font_rel_position (x_adjust, y_adjust_above_line);

  00cce	51		 push	 ecx
  00ccf	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y_adjust_above_line$[ebp]
  00cd4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cd9	51		 push	 ecx
  00cda	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00ce2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ce7	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 5153 : 					print_mono_font_string (s);

  00cec	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  00cef	50		 push	 eax
  00cf0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 5154 : 
; 5155 : 					break;

  00cf5	e9 15 02 00 00	 jmp	 $LN5@draw_pitch
$LN19@draw_pitch:

; 5156 : 				}
; 5157 : 				////////////////////////////////////////
; 5158 : 				case 9:
; 5159 : 				////////////////////////////////////////
; 5160 : 				{
; 5161 : 					draw_2d_line (+PITCH_BAR_X1, +PITCH_BAR_Y1, +PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR_LIGHT_BLUE);

  00cfa	b8 04 00 00 00	 mov	 eax, 4
  00cff	c1 e0 04	 shl	 eax, 4
  00d02	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00d08	51		 push	 ecx
  00d09	51		 push	 ecx
  00d0a	0f 57 c0	 xorps	 xmm0, xmm0
  00d0d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d12	51		 push	 ecx
  00d13	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e933333
  00d1b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d20	51		 push	 ecx
  00d21	0f 57 c0	 xorps	 xmm0, xmm0
  00d24	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d29	51		 push	 ecx
  00d2a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00d32	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d37	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5162 : 					draw_2d_line (-PITCH_BAR_X1, +PITCH_BAR_Y1, -PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR_LIGHT_BLUE);

  00d3c	b8 04 00 00 00	 mov	 eax, 4
  00d41	c1 e0 04	 shl	 eax, 4
  00d44	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00d4a	51		 push	 ecx
  00d4b	51		 push	 ecx
  00d4c	0f 57 c0	 xorps	 xmm0, xmm0
  00d4f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d54	51		 push	 ecx
  00d55	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be933333
  00d5d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d62	51		 push	 ecx
  00d63	0f 57 c0	 xorps	 xmm0, xmm0
  00d66	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d6b	51		 push	 ecx
  00d6c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  00d74	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d79	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5163 : 
; 5164 : 					break;

  00d7e	e9 8c 01 00 00	 jmp	 $LN5@draw_pitch
$LN20@draw_pitch:

; 5165 : 				}
; 5166 : 				////////////////////////////////////////
; 5167 : 				case -9:
; 5168 : 				////////////////////////////////////////
; 5169 : 				{
; 5170 : 					draw_2d_line (+PITCH_BAR_X1, +PITCH_BAR_Y1, +PITCH_BAR_X2, +PITCH_BAR_Y2, MFD_COLOUR_LIGHT_BLUE);

  00d83	b8 04 00 00 00	 mov	 eax, 4
  00d88	c1 e0 04	 shl	 eax, 4
  00d8b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00d91	51		 push	 ecx
  00d92	51		 push	 ecx
  00d93	0f 57 c0	 xorps	 xmm0, xmm0
  00d96	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d9b	51		 push	 ecx
  00d9c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e0ccccd
  00da4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00da9	51		 push	 ecx
  00daa	0f 57 c0	 xorps	 xmm0, xmm0
  00dad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00db2	51		 push	 ecx
  00db3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00dbb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dc0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5171 : 					draw_2d_line (-PITCH_BAR_X1, +PITCH_BAR_Y1, -PITCH_BAR_X2, +PITCH_BAR_Y2, MFD_COLOUR_LIGHT_BLUE);

  00dc5	b8 04 00 00 00	 mov	 eax, 4
  00dca	c1 e0 04	 shl	 eax, 4
  00dcd	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00dd3	51		 push	 ecx
  00dd4	51		 push	 ecx
  00dd5	0f 57 c0	 xorps	 xmm0, xmm0
  00dd8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ddd	51		 push	 ecx
  00dde	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0ccccd
  00de6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00deb	51		 push	 ecx
  00dec	0f 57 c0	 xorps	 xmm0, xmm0
  00def	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00df4	51		 push	 ecx
  00df5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  00dfd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e02	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5172 : 
; 5173 : 					draw_2d_line (+PITCH_BAR_X3, +PITCH_BAR_Y3, +PITCH_BAR_X4, +PITCH_BAR_Y4, MFD_COLOUR_LIGHT_BLUE);

  00e07	b8 04 00 00 00	 mov	 eax, 4
  00e0c	c1 e0 04	 shl	 eax, 4
  00e0f	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00e15	51		 push	 ecx
  00e16	51		 push	 ecx
  00e17	0f 57 c0	 xorps	 xmm0, xmm0
  00e1a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e1f	51		 push	 ecx
  00e20	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e59999a
  00e28	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e2d	51		 push	 ecx
  00e2e	0f 57 c0	 xorps	 xmm0, xmm0
  00e31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e36	51		 push	 ecx
  00e37	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e333333
  00e3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e44	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5174 : 					draw_2d_line (-PITCH_BAR_X3, +PITCH_BAR_Y3, -PITCH_BAR_X4, +PITCH_BAR_Y4, MFD_COLOUR_LIGHT_BLUE);

  00e49	b8 04 00 00 00	 mov	 eax, 4
  00e4e	c1 e0 04	 shl	 eax, 4
  00e51	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00e57	51		 push	 ecx
  00e58	51		 push	 ecx
  00e59	0f 57 c0	 xorps	 xmm0, xmm0
  00e5c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e61	51		 push	 ecx
  00e62	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be59999a
  00e6a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e6f	51		 push	 ecx
  00e70	0f 57 c0	 xorps	 xmm0, xmm0
  00e73	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e78	51		 push	 ecx
  00e79	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be333333
  00e81	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e86	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5175 : 
; 5176 : 					draw_2d_line (+PITCH_BAR_X5, +PITCH_BAR_Y5, +PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR_LIGHT_BLUE);

  00e8b	b8 04 00 00 00	 mov	 eax, 4
  00e90	c1 e0 04	 shl	 eax, 4
  00e93	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00e99	51		 push	 ecx
  00e9a	51		 push	 ecx
  00e9b	0f 57 c0	 xorps	 xmm0, xmm0
  00e9e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ea3	51		 push	 ecx
  00ea4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e933333
  00eac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eb1	51		 push	 ecx
  00eb2	0f 57 c0	 xorps	 xmm0, xmm0
  00eb5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eba	51		 push	 ecx
  00ebb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  00ec3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ec8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 5177 : 					draw_2d_line (-PITCH_BAR_X5, +PITCH_BAR_Y5, -PITCH_BAR_X6, +PITCH_BAR_Y6, MFD_COLOUR_LIGHT_BLUE);

  00ecd	b8 04 00 00 00	 mov	 eax, 4
  00ed2	c1 e0 04	 shl	 eax, 4
  00ed5	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00edb	51		 push	 ecx
  00edc	51		 push	 ecx
  00edd	0f 57 c0	 xorps	 xmm0, xmm0
  00ee0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ee5	51		 push	 ecx
  00ee6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be933333
  00eee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ef3	51		 push	 ecx
  00ef4	0f 57 c0	 xorps	 xmm0, xmm0
  00ef7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00efc	51		 push	 ecx
  00efd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  00f05	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f0a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN5@draw_pitch:

; 5178 : 
; 5179 : 					break;
; 5180 : 				}
; 5181 : 			}
; 5182 : 
; 5183 : 			int_pitch = limit_pitch (int_pitch + step_direction, &step_direction);

  00f0f	8d 45 e4	 lea	 eax, DWORD PTR _step_direction$[ebp]
  00f12	50		 push	 eax
  00f13	8b 4d e8	 mov	 ecx, DWORD PTR _int_pitch$[ebp]
  00f16	03 4d e4	 add	 ecx, DWORD PTR _step_direction$[ebp]
  00f19	51		 push	 ecx
  00f1a	e8 00 00 00 00	 call	 ?limit_pitch@@YGHHPAH@Z	; limit_pitch
  00f1f	89 45 e8	 mov	 DWORD PTR _int_pitch$[ebp], eax

; 5184 : 
; 5185 : 			x -= x_10_deg_step;

  00f22	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00f27	f3 0f 5c 45 80	 subss	 xmm0, DWORD PTR _x_10_deg_step$[ebp]
  00f2c	f3 0f 11 45 a8	 movss	 DWORD PTR _x$[ebp], xmm0

; 5186 : 			y -= y_10_deg_step;

  00f31	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _y$[ebp]
  00f36	f3 0f 5c 85 7c
	ff ff ff	 subss	 xmm0, DWORD PTR _y_10_deg_step$[ebp]
  00f3e	f3 0f 11 45 a4	 movss	 DWORD PTR _y$[ebp], xmm0

; 5187 : 		}

  00f43	e9 30 fc ff ff	 jmp	 $LN2@draw_pitch
$LN3@draw_pitch:

; 5188 : 	}
; 5189 : 
; 5190 : 	//
; 5191 : 	// restore 2D environment
; 5192 : 	//
; 5193 : 
; 5194 : 	reset_2d_instance (mfd_env);

  00f48	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00f4d	50		 push	 eax
  00f4e	e8 00 00 00 00	 call	 ?reset_2d_instance@@YGXPAUENV_2D@@@Z ; reset_2d_instance

; 5195 : 
; 5196 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  00f53	51		 push	 ecx
  00f54	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00f5c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f61	51		 push	 ecx
  00f62	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00f6a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f6f	51		 push	 ecx
  00f70	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00f78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f7d	51		 push	 ecx
  00f7e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00f86	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f8b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00f90	50		 push	 eax
  00f91	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 5197 : 
; 5198 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00f96	51		 push	 ecx
  00f97	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00f9f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fa4	51		 push	 ecx
  00fa5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00fad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fb2	51		 push	 ecx
  00fb3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00fbb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fc0	51		 push	 ecx
  00fc1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00fc9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00fd3	50		 push	 eax
  00fd4	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 5199 : 
; 5200 : 	draw_2d_mono_sprite (main_horizon_mask, x_centre, y_centre, MFD_BACKGROUND_COLOUR);

  00fd9	b8 04 00 00 00	 mov	 eax, 4
  00fde	6b c8 09	 imul	 ecx, eax, 9
  00fe1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00fe7	52		 push	 edx
  00fe8	51		 push	 ecx
  00fe9	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _y_centre$[ebp]
  00fee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ff3	51		 push	 ecx
  00ff4	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  00ff9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ffe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_horizon_mask@@3PADA
  01003	50		 push	 eax
  01004	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 5201 : 
; 5202 : 	//
; 5203 : 	// restore 2D environment
; 5204 : 	//
; 5205 : 
; 5206 : 	reset_2d_instance (mfd_env);

  01009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0100e	50		 push	 eax
  0100f	e8 00 00 00 00	 call	 ?reset_2d_instance@@YGXPAUENV_2D@@@Z ; reset_2d_instance

; 5207 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  01014	51		 push	 ecx
  01015	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  0101d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01022	51		 push	 ecx
  01023	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  0102b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01030	51		 push	 ecx
  01031	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0103e	51		 push	 ecx
  0103f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01047	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0104c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01051	50		 push	 eax
  01052	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 5208 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  01057	51		 push	 ecx
  01058	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  01060	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01065	51		 push	 ecx
  01066	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  0106e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01073	51		 push	 ecx
  01074	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0107c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01081	51		 push	 ecx
  01082	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0108a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0108f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01094	50		 push	 eax
  01095	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 5209 : }

  0109a	5f		 pop	 edi
  0109b	5e		 pop	 esi
  0109c	5b		 pop	 ebx
  0109d	8b e5		 mov	 esp, ebp
  0109f	5d		 pop	 ebp
  010a0	c3		 ret	 0
?draw_pitch_ladder@@YGXXZ ENDP				; draw_pitch_ladder
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?limit_pitch@@YGHHPAH@Z
_TEXT	SEGMENT
_pitch$ = 8						; size = 4
_step_direction$ = 12					; size = 4
?limit_pitch@@YGHHPAH@Z PROC				; limit_pitch, COMDAT

; 4890 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4891 : 	if (pitch > 9)

  00009	83 7d 08 09	 cmp	 DWORD PTR _pitch$[ebp], 9
  0000d	7e 1f		 jle	 SHORT $LN2@limit_pitc

; 4892 : 	{
; 4893 : 		pitch -= 18;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  00012	83 e8 12	 sub	 eax, 18			; 00000012H
  00015	89 45 08	 mov	 DWORD PTR _pitch$[ebp], eax

; 4894 : 
; 4895 : 		pitch = -pitch;

  00018	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  0001b	f7 d8		 neg	 eax
  0001d	89 45 08	 mov	 DWORD PTR _pitch$[ebp], eax

; 4896 : 
; 4897 : 		*step_direction = -(*step_direction);

  00020	8b 45 0c	 mov	 eax, DWORD PTR _step_direction$[ebp]
  00023	8b 08		 mov	 ecx, DWORD PTR [eax]
  00025	f7 d9		 neg	 ecx
  00027	8b 55 0c	 mov	 edx, DWORD PTR _step_direction$[ebp]
  0002a	89 0a		 mov	 DWORD PTR [edx], ecx
  0002c	eb 23		 jmp	 SHORT $LN3@limit_pitc
$LN2@limit_pitc:

; 4898 : 	}
; 4899 : 	else if (pitch < -9)

  0002e	83 7d 08 f7	 cmp	 DWORD PTR _pitch$[ebp], -9 ; fffffff7H
  00032	7d 1d		 jge	 SHORT $LN3@limit_pitc

; 4900 : 	{
; 4901 : 		pitch += 18;

  00034	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  00037	83 c0 12	 add	 eax, 18			; 00000012H
  0003a	89 45 08	 mov	 DWORD PTR _pitch$[ebp], eax

; 4902 : 
; 4903 : 		pitch = -pitch;

  0003d	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]
  00040	f7 d8		 neg	 eax
  00042	89 45 08	 mov	 DWORD PTR _pitch$[ebp], eax

; 4904 : 
; 4905 : 		*step_direction = -(*step_direction);

  00045	8b 45 0c	 mov	 eax, DWORD PTR _step_direction$[ebp]
  00048	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004a	f7 d9		 neg	 ecx
  0004c	8b 55 0c	 mov	 edx, DWORD PTR _step_direction$[ebp]
  0004f	89 0a		 mov	 DWORD PTR [edx], ecx
$LN3@limit_pitc:

; 4906 : 	}
; 4907 : 
; 4908 : 	return (pitch);

  00051	8b 45 08	 mov	 eax, DWORD PTR _pitch$[ebp]

; 4909 : }

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 08 00	 ret	 8
?limit_pitch@@YGHHPAH@Z ENDP				; limit_pitch
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_engine_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv454 = -272						; size = 8
tv423 = -272						; size = 8
tv399 = -272						; size = 8
tv364 = -272						; size = 8
tv336 = -272						; size = 8
tv313 = -272						; size = 8
tv290 = -272						; size = 8
tv267 = -272						; size = 8
tv244 = -272						; size = 8
tv221 = -272						; size = 8
tv198 = -272						; size = 8
tv175 = -272						; size = 8
tv152 = -272						; size = 8
tv129 = -272						; size = 8
tv808 = -264						; size = 8
tv455 = -264						; size = 8
tv424 = -264						; size = 8
tv400 = -264						; size = 8
tv365 = -264						; size = 8
tv337 = -264						; size = 8
tv314 = -264						; size = 8
tv291 = -264						; size = 8
tv268 = -264						; size = 8
tv245 = -264						; size = 8
tv222 = -264						; size = 8
tv199 = -264						; size = 8
tv176 = -264						; size = 8
tv153 = -264						; size = 8
tv130 = -264						; size = 8
tv380 = -260						; size = 4
_buffer2$1 = -192					; size = 64
_digital_readout$2 = -128				; size = 4
_x_adjust$3 = -124					; size = 4
_i$4 = -120						; size = 4
_digital_readout$5 = -116				; size = 4
_digital_readout$6 = -112				; size = 4
_i$7 = -108						; size = 4
_torque$8 = -104					; size = 4
_rpm$9 = -100						; size = 4
_temp$10 = -96						; size = 4
_torque$11 = -92					; size = 4
_rpm$12 = -88						; size = 4
_rpm$13 = -84						; size = 4
_s$ = -80						; size = 80
?draw_engine_display_mfd@@YGXXZ PROC			; draw_engine_display_mfd, COMDAT

; 4677 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 4678 : 	char
; 4679 : 		s[80];
; 4680 : 
; 4681 : 	set_mono_font_colour (MFD_COLOUR1);

  0000c	b8 04 00 00 00	 mov	 eax, 4
  00011	6b c8 00	 imul	 ecx, eax, 0
  00014	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4682 : 
; 4683 : 	draw_2d_box(-0.9, 0.9, -0.4, -0.9, FALSE, FALSE, MFD_COLOUR1);

  00020	b8 04 00 00 00	 mov	 eax, 4
  00025	6b c8 00	 imul	 ecx, eax, 0
  00028	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0002e	52		 push	 edx
  0002f	6a 00		 push	 0
  00031	6a 00		 push	 0
  00033	51		 push	 ecx
  00034	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  0003c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00041	51		 push	 ecx
  00042	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  0004a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004f	51		 push	 ecx
  00050	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  00058	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005d	51		 push	 ecx
  0005e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  00066	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006b	e8 00 00 00 00	 call	 ?draw_2d_box@@YGXMMMMHHUREAL_COLOUR@@@Z ; draw_2d_box

; 4684 : 	draw_2d_box( 0.9, 0.9,  0.4, -0.9, FALSE, FALSE, MFD_COLOUR1);

  00070	b8 04 00 00 00	 mov	 eax, 4
  00075	6b c8 00	 imul	 ecx, eax, 0
  00078	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0007e	52		 push	 edx
  0007f	6a 00		 push	 0
  00081	6a 00		 push	 0
  00083	51		 push	 ecx
  00084	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  0008c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00091	51		 push	 ecx
  00092	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  0009a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009f	51		 push	 ecx
  000a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  000a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ad	51		 push	 ecx
  000ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  000b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bb	e8 00 00 00 00	 call	 ?draw_2d_box@@YGXMMMMHHUREAL_COLOUR@@@Z ; draw_2d_box

; 4685 : 
; 4686 : 	set_mono_font_type(MONO_FONT_TYPE_6X10);

  000c0	6a 04		 push	 4
  000c2	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 4687 : 
; 4688 : 	// engine NG RPM
; 4689 : 	{
; 4690 : 		float rpm;
; 4691 : 
; 4692 : 		rpm = bound (current_flight_dynamics->left_engine_n1_rpm.value, 0.0, 120.0);

  000c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000cc	f3 0f 5a 80 94
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7316]
  000d4	0f 57 c9	 xorps	 xmm1, xmm1
  000d7	66 0f 2f c8	 comisd	 xmm1, xmm0
  000db	76 0d		 jbe	 SHORT $LN19@draw_engin
  000dd	0f 57 c0	 xorps	 xmm0, xmm0
  000e0	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv130[ebp], xmm0
  000e8	eb 50		 jmp	 SHORT $LN20@draw_engin
$LN19@draw_engin:
  000ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  000f0	f3 0f 5a 81 94
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7316]
  000f8	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  00100	76 12		 jbe	 SHORT $LN17@draw_engin
  00102	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  0010a	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv129[ebp], xmm0
  00112	eb 16		 jmp	 SHORT $LN18@draw_engin
$LN17@draw_engin:
  00114	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0011a	f3 0f 5a 82 94
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7316]
  00122	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv129[ebp], xmm0
$LN18@draw_engin:
  0012a	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv129[ebp]
  00132	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv130[ebp], xmm0
$LN20@draw_engin:
  0013a	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv130[ebp]
  00142	f3 0f 11 45 ac	 movss	 DWORD PTR _rpm$13[ebp], xmm0

; 4693 : 		draw_engine_dial("NG", -0.65, 0.65, 0.2, rpm, 100.0, ARC_LEFT_UP | ARC_LEFT_DOWN | ARC_BOTTOM_LEFT, ARC_TOP_LEFT, ARC_TOP_RIGHT);

  00147	6a 01		 push	 1
  00149	6a 04		 push	 4
  0014b	68 c8 00 00 00	 push	 200			; 000000c8H
  00150	51		 push	 ecx
  00151	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00159	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015e	51		 push	 ecx
  0015f	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _rpm$13[ebp]
  00164	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00169	51		 push	 ecx
  0016a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00172	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00177	51		 push	 ecx
  00178	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  00180	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00185	51		 push	 ecx
  00186	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  0018e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00193	68 00 00 00 00	 push	 OFFSET ??_C@_02MFICFPOF@NG@
  00198	e8 00 00 00 00	 call	 ?draw_engine_dial@@YGXPADMMMMMIII@Z ; draw_engine_dial

; 4694 : 
; 4695 : 		rpm = bound (current_flight_dynamics->right_engine_n1_rpm.value, 0.0, 120.0);

  0019d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  001a2	f3 0f 5a 80 f4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7412]
  001aa	0f 57 c9	 xorps	 xmm1, xmm1
  001ad	66 0f 2f c8	 comisd	 xmm1, xmm0
  001b1	76 0d		 jbe	 SHORT $LN23@draw_engin
  001b3	0f 57 c0	 xorps	 xmm0, xmm0
  001b6	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv153[ebp], xmm0
  001be	eb 50		 jmp	 SHORT $LN24@draw_engin
$LN23@draw_engin:
  001c0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  001c6	f3 0f 5a 81 f4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7412]
  001ce	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  001d6	76 12		 jbe	 SHORT $LN21@draw_engin
  001d8	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  001e0	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv152[ebp], xmm0
  001e8	eb 16		 jmp	 SHORT $LN22@draw_engin
$LN21@draw_engin:
  001ea	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  001f0	f3 0f 5a 82 f4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7412]
  001f8	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv152[ebp], xmm0
$LN22@draw_engin:
  00200	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv152[ebp]
  00208	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv153[ebp], xmm0
$LN24@draw_engin:
  00210	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv153[ebp]
  00218	f3 0f 11 45 ac	 movss	 DWORD PTR _rpm$13[ebp], xmm0

; 4696 : 		draw_engine_dial("NG", 0.65, 0.65, 0.2, rpm, 100.0, ARC_LEFT_UP | ARC_LEFT_DOWN | ARC_BOTTOM_LEFT, ARC_TOP_LEFT, ARC_TOP_RIGHT);

  0021d	6a 01		 push	 1
  0021f	6a 04		 push	 4
  00221	68 c8 00 00 00	 push	 200			; 000000c8H
  00226	51		 push	 ecx
  00227	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  0022f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00234	51		 push	 ecx
  00235	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _rpm$13[ebp]
  0023a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023f	51		 push	 ecx
  00240	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00248	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024d	51		 push	 ecx
  0024e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  00256	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025b	51		 push	 ecx
  0025c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  00264	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00269	68 00 00 00 00	 push	 OFFSET ??_C@_02MFICFPOF@NG@
  0026e	e8 00 00 00 00	 call	 ?draw_engine_dial@@YGXPADMMMMMIII@Z ; draw_engine_dial

; 4697 : 	}
; 4698 : 
; 4699 : 	// engine NP RPM
; 4700 : 	{
; 4701 : 		float rpm;
; 4702 : 
; 4703 : 		rpm = bound (current_flight_dynamics->left_engine_rpm.value, 0.0, 120.0);

  00273	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00278	f3 0f 5a 80 7c
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7292]
  00280	0f 57 c9	 xorps	 xmm1, xmm1
  00283	66 0f 2f c8	 comisd	 xmm1, xmm0
  00287	76 0d		 jbe	 SHORT $LN27@draw_engin
  00289	0f 57 c0	 xorps	 xmm0, xmm0
  0028c	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv176[ebp], xmm0
  00294	eb 50		 jmp	 SHORT $LN28@draw_engin
$LN27@draw_engin:
  00296	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0029c	f3 0f 5a 81 7c
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7292]
  002a4	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  002ac	76 12		 jbe	 SHORT $LN25@draw_engin
  002ae	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  002b6	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv175[ebp], xmm0
  002be	eb 16		 jmp	 SHORT $LN26@draw_engin
$LN25@draw_engin:
  002c0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  002c6	f3 0f 5a 82 7c
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7292]
  002ce	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv175[ebp], xmm0
$LN26@draw_engin:
  002d6	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv175[ebp]
  002de	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv176[ebp], xmm0
$LN28@draw_engin:
  002e6	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv176[ebp]
  002ee	f3 0f 11 45 a8	 movss	 DWORD PTR _rpm$12[ebp], xmm0

; 4704 : 		draw_engine_dial("NP", -0.65, 0.22, 0.2, rpm, 100.0, ARC_LEFT_UP | ARC_LEFT_DOWN | ARC_BOTTOM_LEFT | ARC_TOP_LEFT, ARC_TOP_RIGHT, 0);

  002f3	6a 00		 push	 0
  002f5	6a 01		 push	 1
  002f7	68 cc 00 00 00	 push	 204			; 000000ccH
  002fc	51		 push	 ecx
  002fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00305	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030a	51		 push	 ecx
  0030b	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _rpm$12[ebp]
  00310	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00315	51		 push	 ecx
  00316	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0031e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00323	51		 push	 ecx
  00324	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  0032c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00331	51		 push	 ecx
  00332	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  0033a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033f	68 00 00 00 00	 push	 OFFSET ??_C@_02MAABNLHD@NP@
  00344	e8 00 00 00 00	 call	 ?draw_engine_dial@@YGXPADMMMMMIII@Z ; draw_engine_dial

; 4705 : 
; 4706 : 		rpm = bound (current_flight_dynamics->right_engine_rpm.value, 0.0, 120.0);

  00349	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0034e	f3 0f 5a 80 dc
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7388]
  00356	0f 57 c9	 xorps	 xmm1, xmm1
  00359	66 0f 2f c8	 comisd	 xmm1, xmm0
  0035d	76 0d		 jbe	 SHORT $LN31@draw_engin
  0035f	0f 57 c0	 xorps	 xmm0, xmm0
  00362	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv199[ebp], xmm0
  0036a	eb 50		 jmp	 SHORT $LN32@draw_engin
$LN31@draw_engin:
  0036c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00372	f3 0f 5a 81 dc
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7388]
  0037a	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  00382	76 12		 jbe	 SHORT $LN29@draw_engin
  00384	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  0038c	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv198[ebp], xmm0
  00394	eb 16		 jmp	 SHORT $LN30@draw_engin
$LN29@draw_engin:
  00396	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0039c	f3 0f 5a 82 dc
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7388]
  003a4	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv198[ebp], xmm0
$LN30@draw_engin:
  003ac	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv198[ebp]
  003b4	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv199[ebp], xmm0
$LN32@draw_engin:
  003bc	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv199[ebp]
  003c4	f3 0f 11 45 a8	 movss	 DWORD PTR _rpm$12[ebp], xmm0

; 4707 : 		draw_engine_dial("NP", 0.65, 0.22, 0.2, rpm, 100.0, ARC_LEFT_UP | ARC_LEFT_DOWN | ARC_BOTTOM_LEFT | ARC_TOP_LEFT, ARC_TOP_RIGHT, 0);

  003c9	6a 00		 push	 0
  003cb	6a 01		 push	 1
  003cd	68 cc 00 00 00	 push	 204			; 000000ccH
  003d2	51		 push	 ecx
  003d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  003db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e0	51		 push	 ecx
  003e1	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _rpm$12[ebp]
  003e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003eb	51		 push	 ecx
  003ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  003f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f9	51		 push	 ecx
  003fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6147ae
  00402	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00407	51		 push	 ecx
  00408	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  00410	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00415	68 00 00 00 00	 push	 OFFSET ??_C@_02MAABNLHD@NP@
  0041a	e8 00 00 00 00	 call	 ?draw_engine_dial@@YGXPADMMMMMIII@Z ; draw_engine_dial

; 4708 : 	}
; 4709 : 
; 4710 : 	// engine torque
; 4711 : 	{
; 4712 : 		float torque;
; 4713 : 
; 4714 : 		torque = bound (current_flight_dynamics->left_engine_torque.value, 0.0, 120.0);

  0041f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00424	f3 0f 5a 80 ac
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7340]
  0042c	0f 57 c9	 xorps	 xmm1, xmm1
  0042f	66 0f 2f c8	 comisd	 xmm1, xmm0
  00433	76 0d		 jbe	 SHORT $LN35@draw_engin
  00435	0f 57 c0	 xorps	 xmm0, xmm0
  00438	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv222[ebp], xmm0
  00440	eb 50		 jmp	 SHORT $LN36@draw_engin
$LN35@draw_engin:
  00442	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00448	f3 0f 5a 81 ac
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7340]
  00450	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  00458	76 12		 jbe	 SHORT $LN33@draw_engin
  0045a	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  00462	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv221[ebp], xmm0
  0046a	eb 16		 jmp	 SHORT $LN34@draw_engin
$LN33@draw_engin:
  0046c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00472	f3 0f 5a 82 ac
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7340]
  0047a	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv221[ebp], xmm0
$LN34@draw_engin:
  00482	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv221[ebp]
  0048a	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv222[ebp], xmm0
$LN36@draw_engin:
  00492	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv222[ebp]
  0049a	f3 0f 11 45 a4	 movss	 DWORD PTR _torque$11[ebp], xmm0

; 4715 : 		draw_engine_dial("TRQ", -0.65, -0.22, 0.2, torque, 100.0, ARC_LEFT_UP | ARC_LEFT_DOWN | ARC_BOTTOM_LEFT, ARC_TOP_LEFT, ARC_TOP_RIGHT);

  0049f	6a 01		 push	 1
  004a1	6a 04		 push	 4
  004a3	68 c8 00 00 00	 push	 200			; 000000c8H
  004a8	51		 push	 ecx
  004a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  004b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b6	51		 push	 ecx
  004b7	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _torque$11[ebp]
  004bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c1	51		 push	 ecx
  004c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  004ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004cf	51		 push	 ecx
  004d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be6147ae
  004d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004dd	51		 push	 ecx
  004de	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  004e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004eb	68 00 00 00 00	 push	 OFFSET ??_C@_03FGEMCONN@TRQ@
  004f0	e8 00 00 00 00	 call	 ?draw_engine_dial@@YGXPADMMMMMIII@Z ; draw_engine_dial

; 4716 : 
; 4717 : 		torque = bound (current_flight_dynamics->right_engine_torque.value, 0.0, 120.0);

  004f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  004fa	f3 0f 5a 80 0c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7436]
  00502	0f 57 c9	 xorps	 xmm1, xmm1
  00505	66 0f 2f c8	 comisd	 xmm1, xmm0
  00509	76 0d		 jbe	 SHORT $LN39@draw_engin
  0050b	0f 57 c0	 xorps	 xmm0, xmm0
  0050e	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv245[ebp], xmm0
  00516	eb 50		 jmp	 SHORT $LN40@draw_engin
$LN39@draw_engin:
  00518	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0051e	f3 0f 5a 81 0c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7436]
  00526	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  0052e	76 12		 jbe	 SHORT $LN37@draw_engin
  00530	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  00538	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv244[ebp], xmm0
  00540	eb 16		 jmp	 SHORT $LN38@draw_engin
$LN37@draw_engin:
  00542	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00548	f3 0f 5a 82 0c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7436]
  00550	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv244[ebp], xmm0
$LN38@draw_engin:
  00558	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv244[ebp]
  00560	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv245[ebp], xmm0
$LN40@draw_engin:
  00568	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv245[ebp]
  00570	f3 0f 11 45 a4	 movss	 DWORD PTR _torque$11[ebp], xmm0

; 4718 : 		draw_engine_dial("TRQ", 0.65, -0.22, 0.2, torque, 100.0, ARC_LEFT_UP | ARC_LEFT_DOWN | ARC_BOTTOM_LEFT, ARC_TOP_LEFT, ARC_TOP_RIGHT);

  00575	6a 01		 push	 1
  00577	6a 04		 push	 4
  00579	68 c8 00 00 00	 push	 200			; 000000c8H
  0057e	51		 push	 ecx
  0057f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00587	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0058c	51		 push	 ecx
  0058d	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _torque$11[ebp]
  00592	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00597	51		 push	 ecx
  00598	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  005a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a5	51		 push	 ecx
  005a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be6147ae
  005ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b3	51		 push	 ecx
  005b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  005bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c1	68 00 00 00 00	 push	 OFFSET ??_C@_03FGEMCONN@TRQ@
  005c6	e8 00 00 00 00	 call	 ?draw_engine_dial@@YGXPADMMMMMIII@Z ; draw_engine_dial

; 4719 : 	}
; 4720 : 
; 4721 : 	// engine temp
; 4722 : 	{
; 4723 : 		float temp;
; 4724 : 
; 4725 : 		temp = bound (current_flight_dynamics->left_engine_temp.value, 0.0, 1000.0);

  005cb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  005d0	f3 0f 5a 80 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7364]
  005d8	0f 57 c9	 xorps	 xmm1, xmm1
  005db	66 0f 2f c8	 comisd	 xmm1, xmm0
  005df	76 0d		 jbe	 SHORT $LN43@draw_engin
  005e1	0f 57 c0	 xorps	 xmm0, xmm0
  005e4	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv268[ebp], xmm0
  005ec	eb 50		 jmp	 SHORT $LN44@draw_engin
$LN43@draw_engin:
  005ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  005f4	f3 0f 5a 81 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7364]
  005fc	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@408f400000000000
  00604	76 12		 jbe	 SHORT $LN41@draw_engin
  00606	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@408f400000000000
  0060e	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv267[ebp], xmm0
  00616	eb 16		 jmp	 SHORT $LN42@draw_engin
$LN41@draw_engin:
  00618	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0061e	f3 0f 5a 82 c4
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7364]
  00626	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv267[ebp], xmm0
$LN42@draw_engin:
  0062e	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv267[ebp]
  00636	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv268[ebp], xmm0
$LN44@draw_engin:
  0063e	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv268[ebp]
  00646	f3 0f 11 45 a0	 movss	 DWORD PTR _temp$10[ebp], xmm0

; 4726 : 		draw_engine_dial("TGT", -0.65, -0.65, 0.2, temp, 800.0, ARC_LEFT_UP | ARC_LEFT_DOWN | ARC_BOTTOM_LEFT, ARC_TOP_LEFT, ARC_TOP_RIGHT);

  0064b	6a 01		 push	 1
  0064d	6a 04		 push	 4
  0064f	68 c8 00 00 00	 push	 200			; 000000c8H
  00654	51		 push	 ecx
  00655	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44480000
  0065d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00662	51		 push	 ecx
  00663	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _temp$10[ebp]
  00668	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0066d	51		 push	 ecx
  0066e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00676	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0067b	51		 push	 ecx
  0067c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  00684	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00689	51		 push	 ecx
  0068a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  00692	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00697	68 00 00 00 00	 push	 OFFSET ??_C@_03DBNGLLAD@TGT@
  0069c	e8 00 00 00 00	 call	 ?draw_engine_dial@@YGXPADMMMMMIII@Z ; draw_engine_dial

; 4727 : 
; 4728 : 		temp = bound (current_flight_dynamics->right_engine_temp.value, 0.0, 1000.0);

  006a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  006a6	f3 0f 5a 80 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7460]
  006ae	0f 57 c9	 xorps	 xmm1, xmm1
  006b1	66 0f 2f c8	 comisd	 xmm1, xmm0
  006b5	76 0d		 jbe	 SHORT $LN47@draw_engin
  006b7	0f 57 c0	 xorps	 xmm0, xmm0
  006ba	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv291[ebp], xmm0
  006c2	eb 50		 jmp	 SHORT $LN48@draw_engin
$LN47@draw_engin:
  006c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  006ca	f3 0f 5a 81 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7460]
  006d2	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@408f400000000000
  006da	76 12		 jbe	 SHORT $LN45@draw_engin
  006dc	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@408f400000000000
  006e4	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv290[ebp], xmm0
  006ec	eb 16		 jmp	 SHORT $LN46@draw_engin
$LN45@draw_engin:
  006ee	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  006f4	f3 0f 5a 82 24
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7460]
  006fc	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv290[ebp], xmm0
$LN46@draw_engin:
  00704	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv290[ebp]
  0070c	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv291[ebp], xmm0
$LN48@draw_engin:
  00714	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv291[ebp]
  0071c	f3 0f 11 45 a0	 movss	 DWORD PTR _temp$10[ebp], xmm0

; 4729 : 		draw_engine_dial("TGT", 0.65, -0.65, 0.2, temp, 800.0, ARC_LEFT_UP | ARC_LEFT_DOWN | ARC_BOTTOM_LEFT, ARC_TOP_LEFT, ARC_TOP_RIGHT);

  00721	6a 01		 push	 1
  00723	6a 04		 push	 4
  00725	68 c8 00 00 00	 push	 200			; 000000c8H
  0072a	51		 push	 ecx
  0072b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44480000
  00733	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00738	51		 push	 ecx
  00739	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _temp$10[ebp]
  0073e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00743	51		 push	 ecx
  00744	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0074c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00751	51		 push	 ecx
  00752	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  0075a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0075f	51		 push	 ecx
  00760	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f266666
  00768	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0076d	68 00 00 00 00	 push	 OFFSET ??_C@_03DBNGLLAD@TGT@
  00772	e8 00 00 00 00	 call	 ?draw_engine_dial@@YGXPADMMMMMIII@Z ; draw_engine_dial

; 4730 : 	}
; 4731 : 
; 4732 : 	// rotor RPM
; 4733 : 	{
; 4734 : 		float rpm;
; 4735 : 
; 4736 : 		rpm = bound (current_flight_dynamics->main_rotor_rpm.value, 0.0, 125.0);

  00777	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0077c	f3 0f 5a 80 14
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7700]
  00784	0f 57 c9	 xorps	 xmm1, xmm1
  00787	66 0f 2f c8	 comisd	 xmm1, xmm0
  0078b	76 0d		 jbe	 SHORT $LN51@draw_engin
  0078d	0f 57 c0	 xorps	 xmm0, xmm0
  00790	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv314[ebp], xmm0
  00798	eb 50		 jmp	 SHORT $LN52@draw_engin
$LN51@draw_engin:
  0079a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  007a0	f3 0f 5a 81 14
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7700]
  007a8	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405f400000000000
  007b0	76 12		 jbe	 SHORT $LN49@draw_engin
  007b2	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405f400000000000
  007ba	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv313[ebp], xmm0
  007c2	eb 16		 jmp	 SHORT $LN50@draw_engin
$LN49@draw_engin:
  007c4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  007ca	f3 0f 5a 82 14
	1e 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7700]
  007d2	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv313[ebp], xmm0
$LN50@draw_engin:
  007da	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv313[ebp]
  007e2	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv314[ebp], xmm0
$LN52@draw_engin:
  007ea	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv314[ebp]
  007f2	f3 0f 11 45 9c	 movss	 DWORD PTR _rpm$9[ebp], xmm0

; 4737 : 		draw_engine_dial("NR", 0.0, 0.55, 0.25, rpm, 100.0, ARC_TOP_LEFT, ARC_LEFT_UP | ARC_TOP_RIGHT, ARC_LEFT_DOWN | ARC_BOTTOM_LEFT);

  007f7	68 88 00 00 00	 push	 136			; 00000088H
  007fc	6a 41		 push	 65			; 00000041H
  007fe	6a 04		 push	 4
  00800	51		 push	 ecx
  00801	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00809	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0080e	51		 push	 ecx
  0080f	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _rpm$9[ebp]
  00814	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00819	51		 push	 ecx
  0081a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  00822	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00827	51		 push	 ecx
  00828	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f0ccccd
  00830	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00835	51		 push	 ecx
  00836	0f 57 c0	 xorps	 xmm0, xmm0
  00839	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0083e	68 00 00 00 00	 push	 OFFSET ??_C@_02PCDHLJPB@NR@
  00843	e8 00 00 00 00	 call	 ?draw_engine_dial@@YGXPADMMMMMIII@Z ; draw_engine_dial

; 4738 : 	}
; 4739 : 
; 4740 : 	// combined torque
; 4741 : 	{
; 4742 : 		float torque;
; 4743 : 
; 4744 : 		torque = bound (current_flight_dynamics->combined_engine_torque.value, 0.0, 120.0);

  00848	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0084d	f3 0f 5a 80 8c
	24 00 00	 cvtss2sd xmm0, DWORD PTR [eax+9356]
  00855	0f 57 c9	 xorps	 xmm1, xmm1
  00858	66 0f 2f c8	 comisd	 xmm1, xmm0
  0085c	76 0d		 jbe	 SHORT $LN55@draw_engin
  0085e	0f 57 c0	 xorps	 xmm0, xmm0
  00861	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv337[ebp], xmm0
  00869	eb 50		 jmp	 SHORT $LN56@draw_engin
$LN55@draw_engin:
  0086b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00871	f3 0f 5a 81 8c
	24 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+9356]
  00879	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405e000000000000
  00881	76 12		 jbe	 SHORT $LN53@draw_engin
  00883	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405e000000000000
  0088b	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv336[ebp], xmm0
  00893	eb 16		 jmp	 SHORT $LN54@draw_engin
$LN53@draw_engin:
  00895	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0089b	f3 0f 5a 82 8c
	24 00 00	 cvtss2sd xmm0, DWORD PTR [edx+9356]
  008a3	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv336[ebp], xmm0
$LN54@draw_engin:
  008ab	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv336[ebp]
  008b3	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv337[ebp], xmm0
$LN56@draw_engin:
  008bb	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv337[ebp]
  008c3	f3 0f 11 45 98	 movss	 DWORD PTR _torque$8[ebp], xmm0

; 4745 : 		draw_engine_dial("TRQ", 0.0, 0.0, 0.25, torque, 100.0, ARC_LEFT_UP | ARC_LEFT_DOWN | ARC_BOTTOM_LEFT, ARC_TOP_LEFT, ARC_TOP_RIGHT);

  008c8	6a 01		 push	 1
  008ca	6a 04		 push	 4
  008cc	68 c8 00 00 00	 push	 200			; 000000c8H
  008d1	51		 push	 ecx
  008d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  008da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008df	51		 push	 ecx
  008e0	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _torque$8[ebp]
  008e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ea	51		 push	 ecx
  008eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  008f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f8	51		 push	 ecx
  008f9	0f 57 c0	 xorps	 xmm0, xmm0
  008fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00901	51		 push	 ecx
  00902	0f 57 c0	 xorps	 xmm0, xmm0
  00905	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0090a	68 00 00 00 00	 push	 OFFSET ??_C@_03FGEMCONN@TRQ@
  0090f	e8 00 00 00 00	 call	 ?draw_engine_dial@@YGXPADMMMMMIII@Z ; draw_engine_dial

; 4746 : 	}
; 4747 : 
; 4748 : 	set_mono_font_type(MONO_FONT_TYPE_5X9);

  00914	6a 02		 push	 2
  00916	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 4749 : 
; 4750 : 	// fuel
; 4751 : 	{
; 4752 : 		int i;
; 4753 : 		float digital_readout;
; 4754 : 
; 4755 : 		set_2d_mono_font_position (-0.4, -0.4);

  0091b	51		 push	 ecx
  0091c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00924	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00929	51		 push	 ecx
  0092a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00932	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00937	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4756 : 		set_mono_font_rel_position (8.0, -8.0);

  0093c	51		 push	 ecx
  0093d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  00945	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0094a	51		 push	 ecx
  0094b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  00953	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00958	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4757 : 
; 4758 : 		digital_readout = bound (current_flight_dynamics->fuel_weight.value, 0.0, 9999.0);

  0095d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00962	f3 0f 5a 80 a4
	24 00 00	 cvtss2sd xmm0, DWORD PTR [eax+9380]
  0096a	0f 57 c9	 xorps	 xmm1, xmm1
  0096d	66 0f 2f c8	 comisd	 xmm1, xmm0
  00971	76 0d		 jbe	 SHORT $LN59@draw_engin
  00973	0f 57 c0	 xorps	 xmm0, xmm0
  00976	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv365[ebp], xmm0
  0097e	eb 50		 jmp	 SHORT $LN60@draw_engin
$LN59@draw_engin:
  00980	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00986	f3 0f 5a 81 a4
	24 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+9380]
  0098e	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@40c3878000000000
  00996	76 12		 jbe	 SHORT $LN57@draw_engin
  00998	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@40c3878000000000
  009a0	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv364[ebp], xmm0
  009a8	eb 16		 jmp	 SHORT $LN58@draw_engin
$LN57@draw_engin:
  009aa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  009b0	f3 0f 5a 82 a4
	24 00 00	 cvtss2sd xmm0, DWORD PTR [edx+9380]
  009b8	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv364[ebp], xmm0
$LN58@draw_engin:
  009c0	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv364[ebp]
  009c8	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv365[ebp], xmm0
$LN60@draw_engin:
  009d0	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv365[ebp]
  009d8	f3 0f 11 45 90	 movss	 DWORD PTR _digital_readout$6[ebp], xmm0

; 4759 : 		convert_float_to_int (digital_readout, &i);

  009dd	8d 45 94	 lea	 eax, DWORD PTR _i$7[ebp]
  009e0	50		 push	 eax
  009e1	51		 push	 ecx
  009e2	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _digital_readout$6[ebp]
  009e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ec	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 4760 : 		sprintf (s, "FUEL      %4d", i);

  009f1	8b 45 94	 mov	 eax, DWORD PTR _i$7[ebp]
  009f4	50		 push	 eax
  009f5	68 00 00 00 00	 push	 OFFSET ??_C@_0O@HPBNLJLN@FUEL?5?5?5?5?5?5?$CF4d@
  009fa	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  009fd	51		 push	 ecx
  009fe	e8 00 00 00 00	 call	 _sprintf
  00a03	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4761 : 
; 4762 : 		print_mono_font_string(s);

  00a06	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00a09	50		 push	 eax
  00a0a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4763 : 	}
; 4764 : 
; 4765 : 	// oil pressure
; 4766 : 	{
; 4767 : 		set_2d_mono_font_position (-0.4, -0.5);

  00a0f	51		 push	 ecx
  00a10	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00a18	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a1d	51		 push	 ecx
  00a1e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00a26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a2b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4768 : 		set_mono_font_rel_position (8.0, -8.0);

  00a30	51		 push	 ecx
  00a31	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  00a39	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a3e	51		 push	 ecx
  00a3f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  00a47	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a4c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4769 : 
; 4770 : 		if (get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_OIL_PRESSURE))

  00a51	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00a56	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00a5c	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  00a62	74 0c		 je	 SHORT $LN61@draw_engin
  00a64	c7 85 fc fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv380[ebp], 1
  00a6e	eb 0a		 jmp	 SHORT $LN62@draw_engin
$LN61@draw_engin:
  00a70	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv380[ebp], 0
$LN62@draw_engin:
  00a7a	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR tv380[ebp], 0
  00a81	74 0c		 je	 SHORT $LN2@draw_engin

; 4771 : 			print_mono_font_string("OIL PRES. LOW");

  00a83	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IFONFGGI@OIL?5PRES?4?5LOW@
  00a88	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4772 : 		else

  00a8d	eb 0a		 jmp	 SHORT $LN3@draw_engin
$LN2@draw_engin:

; 4773 : 			print_mono_font_string("OIL PRES. NORM");

  00a8f	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HKDAKEPP@OIL?5PRES?4?5NORM@
  00a94	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN3@draw_engin:

; 4774 : 	}
; 4775 : 
; 4776 : 	// APU
; 4777 : 	{
; 4778 : 		float digital_readout;
; 4779 : 
; 4780 : 		set_2d_mono_font_position (-0.4, -0.6);

  00a99	51		 push	 ecx
  00a9a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00aa2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aa7	51		 push	 ecx
  00aa8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00ab0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ab5	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4781 : 		set_mono_font_rel_position (8.0, -8.0);

  00aba	51		 push	 ecx
  00abb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  00ac3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac8	51		 push	 ecx
  00ac9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  00ad1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ad6	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4782 : 
; 4783 : 		digital_readout = bound (current_flight_dynamics->apu_rpm.value, 0.0, 100.0);

  00adb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00ae0	f3 0f 5a 80 3c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7484]
  00ae8	0f 57 c9	 xorps	 xmm1, xmm1
  00aeb	66 0f 2f c8	 comisd	 xmm1, xmm0
  00aef	76 0d		 jbe	 SHORT $LN65@draw_engin
  00af1	0f 57 c0	 xorps	 xmm0, xmm0
  00af4	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv400[ebp], xmm0
  00afc	eb 50		 jmp	 SHORT $LN66@draw_engin
$LN65@draw_engin:
  00afe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00b04	f3 0f 5a 81 3c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7484]
  00b0c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4059000000000000
  00b14	76 12		 jbe	 SHORT $LN63@draw_engin
  00b16	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4059000000000000
  00b1e	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv399[ebp], xmm0
  00b26	eb 16		 jmp	 SHORT $LN64@draw_engin
$LN63@draw_engin:
  00b28	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00b2e	f3 0f 5a 82 3c
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7484]
  00b36	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv399[ebp], xmm0
$LN64@draw_engin:
  00b3e	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv399[ebp]
  00b46	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv400[ebp], xmm0
$LN66@draw_engin:
  00b4e	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv400[ebp]
  00b56	f3 0f 11 45 8c	 movss	 DWORD PTR _digital_readout$5[ebp], xmm0

; 4784 : 		sprintf (s, "APU       %3.0f%%", digital_readout);

  00b5b	f3 0f 5a 45 8c	 cvtss2sd xmm0, DWORD PTR _digital_readout$5[ebp]
  00b60	83 ec 08	 sub	 esp, 8
  00b63	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00b68	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OMFADECJ@APU?5?5?5?5?5?5?5?$CF3?40f?$CF?$CF@
  00b6d	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00b70	50		 push	 eax
  00b71	e8 00 00 00 00	 call	 _sprintf
  00b76	83 c4 10	 add	 esp, 16			; 00000010H

; 4785 : 
; 4786 : 		print_mono_font_string(s);

  00b79	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00b7c	50		 push	 eax
  00b7d	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4787 : 	}
; 4788 : 
; 4789 : 	// Throttle
; 4790 : 	{
; 4791 : 		int i;
; 4792 : 		float x_adjust;
; 4793 : 		float digital_readout;
; 4794 : 		char buffer2[64];
; 4795 : 
; 4796 : 		set_2d_mono_font_position (-0.4, -0.8);

  00b82	51		 push	 ecx
  00b83	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00b8b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b90	51		 push	 ecx
  00b91	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00b99	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b9e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4797 : 		set_mono_font_rel_position (28.0, -8.0);

  00ba3	51		 push	 ecx
  00ba4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  00bac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bb1	51		 push	 ecx
  00bb2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41e00000
  00bba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bbf	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4798 : 
; 4799 : 		print_mono_font_string("THROTTLE");

  00bc4	68 00 00 00 00	 push	 OFFSET ??_C@_08PLAGFMEO@THROTTLE@
  00bc9	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4800 : 
; 4801 : 		digital_readout = bound (current_flight_dynamics->left_engine_n1_rpm.max, 0.0, 110.0);

  00bce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00bd3	f3 0f 5a 80 a0
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7328]
  00bdb	0f 57 c9	 xorps	 xmm1, xmm1
  00bde	66 0f 2f c8	 comisd	 xmm1, xmm0
  00be2	76 0d		 jbe	 SHORT $LN69@draw_engin
  00be4	0f 57 c0	 xorps	 xmm0, xmm0
  00be7	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv424[ebp], xmm0
  00bef	eb 50		 jmp	 SHORT $LN70@draw_engin
$LN69@draw_engin:
  00bf1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00bf7	f3 0f 5a 81 a0
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7328]
  00bff	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405b800000000000
  00c07	76 12		 jbe	 SHORT $LN67@draw_engin
  00c09	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405b800000000000
  00c11	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv423[ebp], xmm0
  00c19	eb 16		 jmp	 SHORT $LN68@draw_engin
$LN67@draw_engin:
  00c1b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00c21	f3 0f 5a 82 a0
	1c 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7328]
  00c29	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv423[ebp], xmm0
$LN68@draw_engin:
  00c31	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv423[ebp]
  00c39	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv424[ebp], xmm0
$LN70@draw_engin:
  00c41	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv424[ebp]
  00c49	f3 0f 11 45 80	 movss	 DWORD PTR _digital_readout$2[ebp], xmm0

; 4802 : 		convert_float_to_int (digital_readout, &i);

  00c4e	8d 45 88	 lea	 eax, DWORD PTR _i$4[ebp]
  00c51	50		 push	 eax
  00c52	51		 push	 ecx
  00c53	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _digital_readout$2[ebp]
  00c58	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c5d	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 4803 : 
; 4804 : 		if (i < 60)

  00c62	83 7d 88 3c	 cmp	 DWORD PTR _i$4[ebp], 60	; 0000003cH
  00c66	7d 16		 jge	 SHORT $LN4@draw_engin

; 4805 : 			sprintf(buffer2, "OFF ");

  00c68	68 00 00 00 00	 push	 OFFSET ??_C@_04LMJCBFEL@OFF?5@
  00c6d	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR _buffer2$1[ebp]
  00c73	50		 push	 eax
  00c74	e8 00 00 00 00	 call	 _sprintf
  00c79	83 c4 08	 add	 esp, 8
  00c7c	eb 61		 jmp	 SHORT $LN9@draw_engin
$LN4@draw_engin:

; 4806 : 		else if (i == 60)

  00c7e	83 7d 88 3c	 cmp	 DWORD PTR _i$4[ebp], 60	; 0000003cH
  00c82	75 16		 jne	 SHORT $LN6@draw_engin

; 4807 : 			sprintf(buffer2, "IDLE");

  00c84	68 00 00 00 00	 push	 OFFSET ??_C@_04IMMGDCFE@IDLE@
  00c89	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR _buffer2$1[ebp]
  00c8f	50		 push	 eax
  00c90	e8 00 00 00 00	 call	 _sprintf
  00c95	83 c4 08	 add	 esp, 8
  00c98	eb 45		 jmp	 SHORT $LN9@draw_engin
$LN6@draw_engin:

; 4808 : 		else if (i == 110.0)

  00c9a	f2 0f 2a 45 88	 cvtsi2sd xmm0, DWORD PTR _i$4[ebp]
  00c9f	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@405b800000000000
  00ca7	9f		 lahf
  00ca8	f6 c4 44	 test	 ah, 68			; 00000044H
  00cab	7a 16		 jp	 SHORT $LN8@draw_engin

; 4809 : 			sprintf(buffer2, "FLY ");

  00cad	68 00 00 00 00	 push	 OFFSET ??_C@_04MJEFHDBD@FLY?5@
  00cb2	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR _buffer2$1[ebp]
  00cb8	50		 push	 eax
  00cb9	e8 00 00 00 00	 call	 _sprintf
  00cbe	83 c4 08	 add	 esp, 8

; 4810 : 		else

  00cc1	eb 1c		 jmp	 SHORT $LN9@draw_engin
$LN8@draw_engin:

; 4811 : 			sprintf(buffer2, "%03d%%", (i-60) * 2);

  00cc3	8b 45 88	 mov	 eax, DWORD PTR _i$4[ebp]
  00cc6	8d 4c 00 88	 lea	 ecx, DWORD PTR [eax+eax-120]
  00cca	51		 push	 ecx
  00ccb	68 00 00 00 00	 push	 OFFSET ??_C@_06HPNMMHPJ@?$CF03d?$CF?$CF@
  00cd0	8d 95 40 ff ff
	ff		 lea	 edx, DWORD PTR _buffer2$1[ebp]
  00cd6	52		 push	 edx
  00cd7	e8 00 00 00 00	 call	 _sprintf
  00cdc	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@draw_engin:

; 4812 : 
; 4813 : 		digital_readout = bound (current_flight_dynamics->right_engine_n1_rpm.max, 0.0, 110.0);

  00cdf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00ce4	f3 0f 5a 80 00
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [eax+7424]
  00cec	0f 57 c9	 xorps	 xmm1, xmm1
  00cef	66 0f 2f c8	 comisd	 xmm1, xmm0
  00cf3	76 0d		 jbe	 SHORT $LN73@draw_engin
  00cf5	0f 57 c0	 xorps	 xmm0, xmm0
  00cf8	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv455[ebp], xmm0
  00d00	eb 50		 jmp	 SHORT $LN74@draw_engin
$LN73@draw_engin:
  00d02	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00d08	f3 0f 5a 81 00
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+7424]
  00d10	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@405b800000000000
  00d18	76 12		 jbe	 SHORT $LN71@draw_engin
  00d1a	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@405b800000000000
  00d22	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv454[ebp], xmm0
  00d2a	eb 16		 jmp	 SHORT $LN72@draw_engin
$LN71@draw_engin:
  00d2c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00d32	f3 0f 5a 82 00
	1d 00 00	 cvtss2sd xmm0, DWORD PTR [edx+7424]
  00d3a	f2 0f 11 85 f0
	fe ff ff	 movsd	 QWORD PTR tv454[ebp], xmm0
$LN72@draw_engin:
  00d42	f2 0f 10 85 f0
	fe ff ff	 movsd	 xmm0, QWORD PTR tv454[ebp]
  00d4a	f2 0f 11 85 f8
	fe ff ff	 movsd	 QWORD PTR tv455[ebp], xmm0
$LN74@draw_engin:
  00d52	f2 0f 5a 85 f8
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv455[ebp]
  00d5a	f3 0f 11 45 80	 movss	 DWORD PTR _digital_readout$2[ebp], xmm0

; 4814 : 		convert_float_to_int (digital_readout, &i);

  00d5f	8d 45 88	 lea	 eax, DWORD PTR _i$4[ebp]
  00d62	50		 push	 eax
  00d63	51		 push	 ecx
  00d64	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _digital_readout$2[ebp]
  00d69	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d6e	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 4815 : 
; 4816 : 		if (i< 60)

  00d73	83 7d 88 3c	 cmp	 DWORD PTR _i$4[ebp], 60	; 0000003cH
  00d77	7d 1a		 jge	 SHORT $LN10@draw_engin

; 4817 : 			sprintf(s, " %s OFF ", buffer2);

  00d79	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR _buffer2$1[ebp]
  00d7f	50		 push	 eax
  00d80	68 00 00 00 00	 push	 OFFSET ??_C@_08HFPCNHOJ@?5?$CFs?5OFF?5@
  00d85	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00d88	51		 push	 ecx
  00d89	e8 00 00 00 00	 call	 _sprintf
  00d8e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00d91	eb 6d		 jmp	 SHORT $LN15@draw_engin
$LN10@draw_engin:

; 4818 : 		else if (i == 60)

  00d93	83 7d 88 3c	 cmp	 DWORD PTR _i$4[ebp], 60	; 0000003cH
  00d97	75 1a		 jne	 SHORT $LN12@draw_engin

; 4819 : 			sprintf(s, " %s IDLE", buffer2);

  00d99	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR _buffer2$1[ebp]
  00d9f	50		 push	 eax
  00da0	68 00 00 00 00	 push	 OFFSET ??_C@_08EFKGPAPG@?5?$CFs?5IDLE@
  00da5	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00da8	51		 push	 ecx
  00da9	e8 00 00 00 00	 call	 _sprintf
  00dae	83 c4 0c	 add	 esp, 12			; 0000000cH
  00db1	eb 4d		 jmp	 SHORT $LN15@draw_engin
$LN12@draw_engin:

; 4820 : 		else if (i == 110.0)

  00db3	f2 0f 2a 45 88	 cvtsi2sd xmm0, DWORD PTR _i$4[ebp]
  00db8	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@405b800000000000
  00dc0	9f		 lahf
  00dc1	f6 c4 44	 test	 ah, 68			; 00000044H
  00dc4	7a 1a		 jp	 SHORT $LN14@draw_engin

; 4821 : 			sprintf(s, " %s FLY ", buffer2);

  00dc6	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR _buffer2$1[ebp]
  00dcc	50		 push	 eax
  00dcd	68 00 00 00 00	 push	 OFFSET ??_C@_08CFLBLB@?5?$CFs?5FLY?5@
  00dd2	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00dd5	51		 push	 ecx
  00dd6	e8 00 00 00 00	 call	 _sprintf
  00ddb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4822 : 		else

  00dde	eb 20		 jmp	 SHORT $LN15@draw_engin
$LN14@draw_engin:

; 4823 : 			sprintf(s, " %s %03d%%", buffer2, (i-60) * 2);

  00de0	8b 45 88	 mov	 eax, DWORD PTR _i$4[ebp]
  00de3	8d 4c 00 88	 lea	 ecx, DWORD PTR [eax+eax-120]
  00de7	51		 push	 ecx
  00de8	8d 95 40 ff ff
	ff		 lea	 edx, DWORD PTR _buffer2$1[ebp]
  00dee	52		 push	 edx
  00def	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JGIHHDGO@?5?$CFs?5?$CF03d?$CF?$CF@
  00df4	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00df7	50		 push	 eax
  00df8	e8 00 00 00 00	 call	 _sprintf
  00dfd	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@draw_engin:

; 4824 : 
; 4825 : 		x_adjust = get_mono_font_string_width (s) * -0.5;

  00e00	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00e03	50		 push	 eax
  00e04	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00e09	dd 9d f8 fe ff
	ff		 fstp	 QWORD PTR tv808[ebp]
  00e0f	f2 0f 10 85 f8
	fe ff ff	 movsd	 xmm0, QWORD PTR tv808[ebp]
  00e17	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00e1f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00e23	f3 0f 11 45 84	 movss	 DWORD PTR _x_adjust$3[ebp], xmm0

; 4826 : 
; 4827 : 		set_2d_mono_font_position (0.0, -0.9);

  00e28	51		 push	 ecx
  00e29	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  00e31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e36	51		 push	 ecx
  00e37	0f 57 c0	 xorps	 xmm0, xmm0
  00e3a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e3f	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4828 : 		set_mono_font_rel_position (x_adjust, -8.0);

  00e44	51		 push	 ecx
  00e45	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  00e4d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e52	51		 push	 ecx
  00e53	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _x_adjust$3[ebp]
  00e58	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e5d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4829 : 		print_mono_font_string (s);

  00e62	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00e65	50		 push	 eax
  00e66	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4830 : 	}
; 4831 : }

  00e6b	5f		 pop	 edi
  00e6c	5e		 pop	 esi
  00e6d	5b		 pop	 ebx
  00e6e	8b e5		 mov	 esp, ebp
  00e70	5d		 pop	 ebp
  00e71	c3		 ret	 0
?draw_engine_display_mfd@@YGXXZ ENDP			; draw_engine_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_engine_dial@@YGXPADMMMMMIII@Z
_TEXT	SEGMENT
tv159 = -120						; size = 8
tv160 = -112						; size = 8
tv251 = -108						; size = 4
tv244 = -108						; size = 4
tv216 = -108						; size = 4
_dial_y$1 = -40						; size = 4
_dial_x$2 = -36						; size = 4
_dial_angle$3 = -32					; size = 4
_s$ = -28						; size = 20
_y_adjust$ = -8						; size = 4
_x_adjust$ = -4						; size = 4
_name$ = 8						; size = 4
_x_pos$ = 12						; size = 4
_y_pos$ = 16						; size = 4
_size$ = 20						; size = 4
_value$ = 24						; size = 4
_top_value$ = 28					; size = 4
_green_zone$ = 32					; size = 4
_yellow_zone$ = 36					; size = 4
_red_zone$ = 40						; size = 4
?draw_engine_dial@@YGXPADMMMMMIII@Z PROC		; draw_engine_dial, COMDAT

; 4634 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4635 : 	float x_adjust, y_adjust;
; 4636 : 	char s[20];
; 4637 : 
; 4638 : 	draw_2d_arc(x_pos, y_pos, size, green_zone, MFD_COLOUR_GREEN);

  00009	b8 04 00 00 00	 mov	 eax, 4
  0000e	6b c8 0d	 imul	 ecx, eax, 13
  00011	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00017	52		 push	 edx
  00018	8b 45 20	 mov	 eax, DWORD PTR _green_zone$[ebp]
  0001b	50		 push	 eax
  0001c	51		 push	 ecx
  0001d	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _size$[ebp]
  00022	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00027	51		 push	 ecx
  00028	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _y_pos$[ebp]
  0002d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00032	51		 push	 ecx
  00033	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _x_pos$[ebp]
  00038	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003d	e8 00 00 00 00	 call	 ?draw_2d_arc@@YGXMMMIUREAL_COLOUR@@@Z ; draw_2d_arc

; 4639 : 	if (yellow_zone)

  00042	83 7d 24 00	 cmp	 DWORD PTR _yellow_zone$[ebp], 0
  00046	74 39		 je	 SHORT $LN2@draw_engin

; 4640 : 		draw_2d_arc(x_pos, y_pos, size, yellow_zone, MFD_COLOUR_YELLOW);

  00048	b8 04 00 00 00	 mov	 eax, 4
  0004d	6b c8 0f	 imul	 ecx, eax, 15
  00050	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00056	52		 push	 edx
  00057	8b 45 24	 mov	 eax, DWORD PTR _yellow_zone$[ebp]
  0005a	50		 push	 eax
  0005b	51		 push	 ecx
  0005c	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _size$[ebp]
  00061	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00066	51		 push	 ecx
  00067	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _y_pos$[ebp]
  0006c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00071	51		 push	 ecx
  00072	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _x_pos$[ebp]
  00077	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007c	e8 00 00 00 00	 call	 ?draw_2d_arc@@YGXMMMIUREAL_COLOUR@@@Z ; draw_2d_arc
$LN2@draw_engin:

; 4641 : 	if (red_zone)

  00081	83 7d 28 00	 cmp	 DWORD PTR _red_zone$[ebp], 0
  00085	74 39		 je	 SHORT $LN3@draw_engin

; 4642 : 		draw_2d_arc(x_pos, y_pos, size, red_zone, MFD_COLOUR_RED);

  00087	b8 04 00 00 00	 mov	 eax, 4
  0008c	6b c8 12	 imul	 ecx, eax, 18
  0008f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00095	52		 push	 edx
  00096	8b 45 28	 mov	 eax, DWORD PTR _red_zone$[ebp]
  00099	50		 push	 eax
  0009a	51		 push	 ecx
  0009b	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _size$[ebp]
  000a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a5	51		 push	 ecx
  000a6	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _y_pos$[ebp]
  000ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b0	51		 push	 ecx
  000b1	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _x_pos$[ebp]
  000b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bb	e8 00 00 00 00	 call	 ?draw_2d_arc@@YGXMMMIUREAL_COLOUR@@@Z ; draw_2d_arc
$LN3@draw_engin:

; 4643 : 
; 4644 : 	// print value
; 4645 : 	sprintf (s, "%d", (int)(value + 0.5));

  000c0	f3 0f 5a 45 18	 cvtss2sd xmm0, DWORD PTR _value$[ebp]
  000c5	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  000cd	f2 0f 2c c0	 cvttsd2si eax, xmm0
  000d1	50		 push	 eax
  000d2	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  000d7	8d 4d e4	 lea	 ecx, DWORD PTR _s$[ebp]
  000da	51		 push	 ecx
  000db	e8 00 00 00 00	 call	 _sprintf
  000e0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4646 : 	set_2d_mono_font_position (x_pos + size, y_pos - 0.1);

  000e3	f3 0f 5a 45 10	 cvtss2sd xmm0, DWORD PTR _y_pos$[ebp]
  000e8	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb999999999999a
  000f0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000f4	51		 push	 ecx
  000f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fa	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _x_pos$[ebp]
  000ff	f3 0f 58 45 14	 addss	 xmm0, DWORD PTR _size$[ebp]
  00104	51		 push	 ecx
  00105	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010a	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4647 : 
; 4648 : 	x_adjust = -get_mono_font_string_width (s);

  0010f	8d 45 e4	 lea	 eax, DWORD PTR _s$[ebp]
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00118	d9 5d 94	 fstp	 DWORD PTR tv216[ebp]
  0011b	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR tv216[ebp]
  00120	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00127	f3 0f 11 45 fc	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 4649 : 	y_adjust = -6.0;

  0012c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  00134	f3 0f 11 45 f8	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4650 : 
; 4651 : 	set_mono_font_rel_position (x_adjust, y_adjust);

  00139	51		 push	 ecx
  0013a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0013f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00144	51		 push	 ecx
  00145	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0014a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014f	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4652 : 	print_mono_font_string (s);

  00154	8d 45 e4	 lea	 eax, DWORD PTR _s$[ebp]
  00157	50		 push	 eax
  00158	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4653 : 
; 4654 : 	// print name
; 4655 : 	set_2d_mono_font_position (x_pos + 0.05, y_pos - 0.2);

  0015d	f3 0f 5a 45 10	 cvtss2sd xmm0, DWORD PTR _y_pos$[ebp]
  00162	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  0016a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0016e	51		 push	 ecx
  0016f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00174	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR _x_pos$[ebp]
  00179	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa999999999999a
  00181	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00185	51		 push	 ecx
  00186	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4656 : 
; 4657 : 	x_adjust = 1.0;

  00190	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00198	f3 0f 11 45 fc	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 4658 : 	y_adjust = -6.0;

  0019d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  001a5	f3 0f 11 45 f8	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4659 : 
; 4660 : 	set_mono_font_rel_position (x_adjust, y_adjust);

  001aa	51		 push	 ecx
  001ab	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  001b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b5	51		 push	 ecx
  001b6	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  001bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c0	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4661 : 	print_mono_font_string (name);

  001c5	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  001c8	50		 push	 eax
  001c9	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4662 : 
; 4663 : 	// draw dial
; 4664 : 	{
; 4665 : 		float dial_angle = rad(180.0) + (PI * (value / top_value));

  001ce	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _value$[ebp]
  001d3	f3 0f 5e 45 1c	 divss	 xmm0, DWORD PTR _top_value$[ebp]
  001d8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40490fdb
  001e0	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  001e4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@400921fb51000000
  001ec	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001f0	f3 0f 11 45 e0	 movss	 DWORD PTR _dial_angle$3[ebp], xmm0

; 4666 : 		float dial_x, dial_y;
; 4667 : 
; 4668 : 		dial_angle = bound(dial_angle, rad(180.0), rad(405.0));

  001f5	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _dial_angle$3[ebp]
  001fa	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@400921fb51000000
  00202	66 0f 2f c8	 comisd	 xmm1, xmm0
  00206	76 0f		 jbe	 SHORT $LN7@draw_engin
  00208	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@400921fb51000000
  00210	f2 0f 11 45 90	 movsd	 QWORD PTR tv160[ebp], xmm0
  00215	eb 32		 jmp	 SHORT $LN8@draw_engin
$LN7@draw_engin:
  00217	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _dial_angle$3[ebp]
  0021c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@401c463abb200000
  00224	76 0f		 jbe	 SHORT $LN5@draw_engin
  00226	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@401c463abb200000
  0022e	f2 0f 11 45 88	 movsd	 QWORD PTR tv159[ebp], xmm0
  00233	eb 0a		 jmp	 SHORT $LN6@draw_engin
$LN5@draw_engin:
  00235	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _dial_angle$3[ebp]
  0023a	f2 0f 11 45 88	 movsd	 QWORD PTR tv159[ebp], xmm0
$LN6@draw_engin:
  0023f	f2 0f 10 45 88	 movsd	 xmm0, QWORD PTR tv159[ebp]
  00244	f2 0f 11 45 90	 movsd	 QWORD PTR tv160[ebp], xmm0
$LN8@draw_engin:
  00249	f2 0f 5a 45 90	 cvtsd2ss xmm0, QWORD PTR tv160[ebp]
  0024e	f3 0f 11 45 e0	 movss	 DWORD PTR _dial_angle$3[ebp], xmm0

; 4669 : 		dial_x = x_pos + sin(dial_angle) * size;

  00253	51		 push	 ecx
  00254	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _dial_angle$3[ebp]
  00259	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025e	e8 00 00 00 00	 call	 ?sin@@YGMM@Z		; sin
  00263	d9 5d 94	 fstp	 DWORD PTR tv244[ebp]
  00266	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR tv244[ebp]
  0026b	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _size$[ebp]
  00270	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _x_pos$[ebp]
  00275	f3 0f 11 45 dc	 movss	 DWORD PTR _dial_x$2[ebp], xmm0

; 4670 : 		dial_y = y_pos + cos(dial_angle) * size;

  0027a	51		 push	 ecx
  0027b	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _dial_angle$3[ebp]
  00280	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00285	e8 00 00 00 00	 call	 ?cos@@YGMM@Z		; cos
  0028a	d9 5d 94	 fstp	 DWORD PTR tv251[ebp]
  0028d	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR tv251[ebp]
  00292	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _size$[ebp]
  00297	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _y_pos$[ebp]
  0029c	f3 0f 11 45 d8	 movss	 DWORD PTR _dial_y$1[ebp], xmm0

; 4671 : 
; 4672 : 		draw_2d_half_thick_line(x_pos, y_pos, dial_x, dial_y, MFD_COLOUR1);

  002a1	b8 04 00 00 00	 mov	 eax, 4
  002a6	6b c8 00	 imul	 ecx, eax, 0
  002a9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002af	52		 push	 edx
  002b0	51		 push	 ecx
  002b1	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _dial_y$1[ebp]
  002b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002bb	51		 push	 ecx
  002bc	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _dial_x$2[ebp]
  002c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c6	51		 push	 ecx
  002c7	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _y_pos$[ebp]
  002cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d1	51		 push	 ecx
  002d2	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _x_pos$[ebp]
  002d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002dc	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 4673 : 	}
; 4674 : }

  002e1	5f		 pop	 edi
  002e2	5e		 pop	 esi
  002e3	5b		 pop	 ebx
  002e4	8b e5		 mov	 esp, ebp
  002e6	5d		 pop	 ebp
  002e7	c2 24 00	 ret	 36			; 00000024H
?draw_engine_dial@@YGXPADMMMMMIII@Z ENDP		; draw_engine_dial
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_system_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv259 = -76						; size = 4
tv249 = -76						; size = 4
tv241 = -76						; size = 4
tv234 = -76						; size = 4
tv224 = -76						; size = 4
tv214 = -76						; size = 4
tv204 = -76						; size = 4
tv194 = -76						; size = 4
tv184 = -76						; size = 4
_width_adjust$ = -8					; size = 4
_y_adjust$ = -4						; size = 4
?draw_system_display_mfd@@YGXXZ PROC			; draw_system_display_mfd, COMDAT

; 4555 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4556 : 	float
; 4557 : 		y_adjust,
; 4558 : 		width_adjust;
; 4559 : 
; 4560 : 	if (draw_large_mfd)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00010	74 1e		 je	 SHORT $LN2@draw_syste

; 4561 : 	{
; 4562 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  00012	6a 05		 push	 5
  00014	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 4563 : 
; 4564 : 		y_adjust = 0.0;

  00019	0f 57 c0	 xorps	 xmm0, xmm0
  0001c	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4565 : 
; 4566 : 		width_adjust = 2.0;

  00021	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00029	f3 0f 11 45 f8	 movss	 DWORD PTR _width_adjust$[ebp], xmm0

; 4567 : 	}
; 4568 : 	else

  0002e	eb 1c		 jmp	 SHORT $LN3@draw_syste
$LN2@draw_syste:

; 4569 : 	{
; 4570 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  00030	6a 00		 push	 0
  00032	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 4571 : 
; 4572 : 		y_adjust = 0.0;

  00037	0f 57 c0	 xorps	 xmm0, xmm0
  0003a	f3 0f 11 45 fc	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4573 : 
; 4574 : 		width_adjust = 1.0;

  0003f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00047	f3 0f 11 45 f8	 movss	 DWORD PTR _width_adjust$[ebp], xmm0
$LN3@draw_syste:

; 4575 : 	}
; 4576 : 
; 4577 : 	y_adjust = print_mfd_system_message ("FLIR", "FAIL", ka50_damage.flir, y_adjust, width_adjust);

  0004c	51		 push	 ecx
  0004d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  00052	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00057	51		 push	 ecx
  00058	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0005d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00062	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  00067	83 e0 01	 and	 eax, 1
  0006a	50		 push	 eax
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_04MIGKMLBH@FLIR@
  00075	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  0007a	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 4578 : 
; 4579 : 	y_adjust = print_mfd_system_message ("LASER DESIGNATOR", "FAIL", ka50_damage.laser_designator, y_adjust, width_adjust);

  0007d	51		 push	 ecx
  0007e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  00083	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00088	51		 push	 ecx
  00089	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0008e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00093	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  00098	d1 e8		 shr	 eax, 1
  0009a	83 e0 01	 and	 eax, 1
  0009d	50		 push	 eax
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  000a3	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FAAHBEKJ@LASER?5DESIGNATOR@
  000a8	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  000ad	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 4580 : 
; 4581 : 	y_adjust = print_mfd_system_message ("RADAR JAMMER", "FAIL", ka50_damage.radar_jammer, y_adjust, width_adjust);

  000b0	51		 push	 ecx
  000b1	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  000b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bb	51		 push	 ecx
  000bc	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  000cb	c1 e8 02	 shr	 eax, 2
  000ce	83 e0 01	 and	 eax, 1
  000d1	50		 push	 eax
  000d2	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  000d7	68 00 00 00 00	 push	 OFFSET ??_C@_0N@JDBOFCJG@RADAR?5JAMMER@
  000dc	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  000e1	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 4582 : 
; 4583 : 	y_adjust = print_mfd_system_message ("IR JAMMER", "FAIL", ka50_damage.infra_red_jammer, y_adjust, width_adjust);

  000e4	51		 push	 ecx
  000e5	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  000ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ef	51		 push	 ecx
  000f0	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  000ff	c1 e8 03	 shr	 eax, 3
  00102	83 e0 01	 and	 eax, 1
  00105	50		 push	 eax
  00106	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  0010b	68 00 00 00 00	 push	 OFFSET ??_C@_09MILGCPFO@IR?5JAMMER@
  00110	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  00115	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 4584 : 
; 4585 : 	y_adjust = print_mfd_system_message ("NAVIGATION COMPUTER", "FAIL", ka50_damage.navigation_computer, y_adjust, width_adjust);

  00118	51		 push	 ecx
  00119	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  0011e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00123	51		 push	 ecx
  00124	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00129	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  00133	c1 e8 04	 shr	 eax, 4
  00136	83 e0 01	 and	 eax, 1
  00139	50		 push	 eax
  0013a	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  0013f	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LJHOKBLO@NAVIGATION?5COMPUTER@
  00144	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  00149	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 4586 : 
; 4587 : 	y_adjust = print_mfd_system_message ("COMMUNICATIONS", "FAIL", ka50_damage.communications, y_adjust, width_adjust);

  0014c	51		 push	 ecx
  0014d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  00152	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00157	51		 push	 ecx
  00158	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0015d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00162	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  00167	c1 e8 05	 shr	 eax, 5
  0016a	83 e0 01	 and	 eax, 1
  0016d	50		 push	 eax
  0016e	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00173	68 00 00 00 00	 push	 OFFSET ??_C@_0P@OEDGDHNF@COMMUNICATIONS@
  00178	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  0017d	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 4588 : 
; 4589 : 	y_adjust = print_mfd_system_message ("RADAR WARNING SYSTEM", "FAIL", ka50_damage.radar_warning_system, y_adjust, width_adjust);

  00180	51		 push	 ecx
  00181	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  00186	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018b	51		 push	 ecx
  0018c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00191	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00196	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  0019b	c1 e8 06	 shr	 eax, 6
  0019e	83 e0 01	 and	 eax, 1
  001a1	50		 push	 eax
  001a2	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  001a7	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OLLBDBDO@RADAR?5WARNING?5SYSTEM@
  001ac	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  001b1	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 4590 : 
; 4591 : 	y_adjust = print_mfd_system_message ("HUD", "FAIL", ka50_damage.head_up_display, y_adjust, width_adjust);

  001b4	51		 push	 ecx
  001b5	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  001ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bf	51		 push	 ecx
  001c0	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  001c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  001cf	c1 e8 07	 shr	 eax, 7
  001d2	83 e0 01	 and	 eax, 1
  001d5	50		 push	 eax
  001d6	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  001db	68 00 00 00 00	 push	 OFFSET ??_C@_03HOHJDGGL@HUD@
  001e0	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  001e5	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 4592 : 
; 4593 : 	y_adjust = print_mfd_system_message ("HMS", "FAIL", ka50_damage.helmet_mounted_sight, y_adjust, width_adjust);

  001e8	51		 push	 ecx
  001e9	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  001ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f3	51		 push	 ecx
  001f4	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  001f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  00203	c1 e8 08	 shr	 eax, 8
  00206	83 e0 01	 and	 eax, 1
  00209	50		 push	 eax
  0020a	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  0020f	68 00 00 00 00	 push	 OFFSET ??_C@_03GJMPEADF@HMS@
  00214	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  00219	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 4594 : 
; 4595 : 	y_adjust = print_mfd_system_message ("NVG", "FAIL", ka50_damage.night_vision_goggles, y_adjust, width_adjust);

  0021c	51		 push	 ecx
  0021d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  00222	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00227	51		 push	 ecx
  00228	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0022d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00232	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  00237	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  0023a	83 e0 01	 and	 eax, 1
  0023d	50		 push	 eax
  0023e	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00243	68 00 00 00 00	 push	 OFFSET ??_C@_03HCHJIECN@NVG@
  00248	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  0024d	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 4596 : 
; 4597 : 	y_adjust = print_mfd_system_message ("STABILISER", "FAIL", get_dynamics_damage_type (DYNAMICS_DAMAGE_STABILISER), y_adjust, width_adjust);

  00250	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00255	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  0025b	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  00261	74 09		 je	 SHORT $LN7@draw_syste
  00263	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv184[ebp], 1
  0026a	eb 07		 jmp	 SHORT $LN8@draw_syste
$LN7@draw_syste:
  0026c	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv184[ebp], 0
$LN8@draw_syste:
  00273	51		 push	 ecx
  00274	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  00279	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027e	51		 push	 ecx
  0027f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00284	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00289	8b 55 b4	 mov	 edx, DWORD PTR tv184[ebp]
  0028c	52		 push	 edx
  0028d	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  00292	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LMAEBBOE@STABILISER@
  00297	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  0029c	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 4598 : 
; 4599 : 	y_adjust = print_mfd_system_message ("MAIN ROTOR", "FAIL", get_dynamics_damage_type (DYNAMICS_DAMAGE_MAIN_ROTOR), y_adjust, width_adjust);

  0029f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  002a4	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  002aa	83 e1 02	 and	 ecx, 2
  002ad	74 09		 je	 SHORT $LN9@draw_syste
  002af	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv194[ebp], 1
  002b6	eb 07		 jmp	 SHORT $LN10@draw_syste
$LN9@draw_syste:
  002b8	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv194[ebp], 0
$LN10@draw_syste:
  002bf	51		 push	 ecx
  002c0	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  002c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ca	51		 push	 ecx
  002cb	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  002d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d5	8b 55 b4	 mov	 edx, DWORD PTR tv194[ebp]
  002d8	52		 push	 edx
  002d9	68 00 00 00 00	 push	 OFFSET ??_C@_04OOEBCMBF@FAIL@
  002de	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FFIGCBMA@MAIN?5ROTOR@
  002e3	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  002e8	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 4600 : 
; 4601 : 	y_adjust = print_mfd_system_message ("L ENGINE", "DAMAGED", get_dynamics_damage_type (DYNAMICS_DAMAGE_LEFT_ENGINE), y_adjust, width_adjust);

  002eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  002f0	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  002f6	83 e1 08	 and	 ecx, 8
  002f9	74 09		 je	 SHORT $LN11@draw_syste
  002fb	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv204[ebp], 1
  00302	eb 07		 jmp	 SHORT $LN12@draw_syste
$LN11@draw_syste:
  00304	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv204[ebp], 0
$LN12@draw_syste:
  0030b	51		 push	 ecx
  0030c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  00311	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00316	51		 push	 ecx
  00317	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0031c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00321	8b 55 b4	 mov	 edx, DWORD PTR tv204[ebp]
  00324	52		 push	 edx
  00325	68 00 00 00 00	 push	 OFFSET ??_C@_07OHKEFPKJ@DAMAGED@
  0032a	68 00 00 00 00	 push	 OFFSET ??_C@_08ICMALC@L?5ENGINE@
  0032f	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  00334	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 4602 : 
; 4603 : 	y_adjust = print_mfd_system_message ("APU", "DAMAGED", get_dynamics_damage_type (DYNAMICS_DAMAGE_APU), y_adjust, width_adjust);

  00337	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0033c	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00342	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  00348	74 09		 je	 SHORT $LN13@draw_syste
  0034a	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv214[ebp], 1
  00351	eb 07		 jmp	 SHORT $LN14@draw_syste
$LN13@draw_syste:
  00353	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv214[ebp], 0
$LN14@draw_syste:
  0035a	51		 push	 ecx
  0035b	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  00360	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00365	51		 push	 ecx
  00366	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0036b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00370	8b 55 b4	 mov	 edx, DWORD PTR tv214[ebp]
  00373	52		 push	 edx
  00374	68 00 00 00 00	 push	 OFFSET ??_C@_07OHKEFPKJ@DAMAGED@
  00379	68 00 00 00 00	 push	 OFFSET ??_C@_03FGGDJIBK@APU@
  0037e	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  00383	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 4604 : 
; 4605 : 	y_adjust = print_mfd_system_message ("R ENGINE", "DAMAGED", get_dynamics_damage_type (DYNAMICS_DAMAGE_RIGHT_ENGINE), y_adjust, width_adjust);

  00386	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0038b	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00391	83 e1 10	 and	 ecx, 16			; 00000010H
  00394	74 09		 je	 SHORT $LN15@draw_syste
  00396	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv224[ebp], 1
  0039d	eb 07		 jmp	 SHORT $LN16@draw_syste
$LN15@draw_syste:
  0039f	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv224[ebp], 0
$LN16@draw_syste:
  003a6	51		 push	 ecx
  003a7	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  003ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b1	51		 push	 ecx
  003b2	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  003b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003bc	8b 55 b4	 mov	 edx, DWORD PTR tv224[ebp]
  003bf	52		 push	 edx
  003c0	68 00 00 00 00	 push	 OFFSET ??_C@_07OHKEFPKJ@DAMAGED@
  003c5	68 00 00 00 00	 push	 OFFSET ??_C@_08GEIAFJFB@R?5ENGINE@
  003ca	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  003cf	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 4606 : 
; 4607 : 	y_adjust = print_mfd_system_message ("HYDRAULIC PRESSURE", "LOW", get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_HYDRAULICS), y_adjust, width_adjust);

  003d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  003d7	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  003dd	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  003e3	74 09		 je	 SHORT $LN17@draw_syste
  003e5	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv234[ebp], 1
  003ec	eb 07		 jmp	 SHORT $LN18@draw_syste
$LN17@draw_syste:
  003ee	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv234[ebp], 0
$LN18@draw_syste:
  003f5	51		 push	 ecx
  003f6	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  003fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00400	51		 push	 ecx
  00401	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00406	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040b	8b 55 b4	 mov	 edx, DWORD PTR tv234[ebp]
  0040e	52		 push	 edx
  0040f	68 00 00 00 00	 push	 OFFSET ??_C@_03IBEFMGAI@LOW@
  00414	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KOEIBOKB@HYDRAULIC?5PRESSURE@
  00419	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  0041e	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 4608 : 
; 4609 : 	if (get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_OIL_PRESSURE))

  00421	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00426	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  0042c	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  00432	74 09		 je	 SHORT $LN19@draw_syste
  00434	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv241[ebp], 1
  0043b	eb 07		 jmp	 SHORT $LN20@draw_syste
$LN19@draw_syste:
  0043d	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv241[ebp], 0
$LN20@draw_syste:
  00444	83 7d b4 00	 cmp	 DWORD PTR tv241[ebp], 0
  00448	74 51		 je	 SHORT $LN4@draw_syste

; 4610 : 	{
; 4611 : 		y_adjust = print_mfd_system_message ("OIL PRESSURE", "LOW", get_dynamics_damage_type (DYNAMICS_DAMAGE_LOW_OIL_PRESSURE), y_adjust, width_adjust);

  0044a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  0044f	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  00455	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  0045b	74 09		 je	 SHORT $LN21@draw_syste
  0045d	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv249[ebp], 1
  00464	eb 07		 jmp	 SHORT $LN22@draw_syste
$LN21@draw_syste:
  00466	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv249[ebp], 0
$LN22@draw_syste:
  0046d	51		 push	 ecx
  0046e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  00473	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00478	51		 push	 ecx
  00479	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0047e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00483	8b 55 b4	 mov	 edx, DWORD PTR tv249[ebp]
  00486	52		 push	 edx
  00487	68 00 00 00 00	 push	 OFFSET ??_C@_03IBEFMGAI@LOW@
  0048c	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MMJNGGCF@OIL?5PRESSURE@
  00491	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  00496	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]

; 4612 : 	}
; 4613 : 	else

  00499	eb 4f		 jmp	 SHORT $LN5@draw_syste
$LN4@draw_syste:

; 4614 : 	{
; 4615 : 		y_adjust = print_mfd_system_message ("OIL PRESSURE", "HIGH", get_dynamics_damage_type (DYNAMICS_DAMAGE_HIGH_OIL_PRESSURE), y_adjust, width_adjust);

  0049b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  004a0	8b 88 24 25 00
	00		 mov	 ecx, DWORD PTR [eax+9508]
  004a6	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  004ac	74 09		 je	 SHORT $LN23@draw_syste
  004ae	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv259[ebp], 1
  004b5	eb 07		 jmp	 SHORT $LN24@draw_syste
$LN23@draw_syste:
  004b7	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv259[ebp], 0
$LN24@draw_syste:
  004be	51		 push	 ecx
  004bf	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width_adjust$[ebp]
  004c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c9	51		 push	 ecx
  004ca	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  004cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d4	8b 55 b4	 mov	 edx, DWORD PTR tv259[ebp]
  004d7	52		 push	 edx
  004d8	68 00 00 00 00	 push	 OFFSET ??_C@_04PKDHFCJF@HIGH@
  004dd	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MMJNGGCF@OIL?5PRESSURE@
  004e2	e8 00 00 00 00	 call	 ?print_mfd_system_message@@YGMPAD0HMM@Z ; print_mfd_system_message
  004e7	d9 5d fc	 fstp	 DWORD PTR _y_adjust$[ebp]
$LN5@draw_syste:

; 4616 : 	}
; 4617 : }

  004ea	5f		 pop	 edi
  004eb	5e		 pop	 esi
  004ec	5b		 pop	 ebx
  004ed	8b e5		 mov	 esp, ebp
  004ef	5d		 pop	 ebp
  004f0	c3		 ret	 0
?draw_system_display_mfd@@YGXXZ ENDP			; draw_system_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?print_mfd_system_message@@YGMPAD0HMM@Z
_TEXT	SEGMENT
tv162 = -76						; size = 4
_width$ = -8						; size = 4
_status$ = -4						; size = 4
_equipment$ = 8						; size = 4
_warning$ = 12						; size = 4
_fail$ = 16						; size = 4
_y_adjust$ = 20						; size = 4
_width_adjust$ = 24					; size = 4
?print_mfd_system_message@@YGMPAD0HMM@Z PROC		; print_mfd_system_message, COMDAT

; 4505 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 4506 : 	char
; 4507 : 		*status;
; 4508 : 
; 4509 : 	float
; 4510 : 		width;
; 4511 : 
; 4512 : 	ASSERT (equipment);

  00009	83 7d 08 00	 cmp	 DWORD PTR _equipment$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@print_mfd_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_mfd_system_message@@YGMPAD0HMM@Z@4JA
  00014	83 c0 07	 add	 eax, 7
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_09FJJPPKDN@equipment@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@print_mfd_:

; 4513 : 
; 4514 : 	ASSERT (warning);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _warning$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@print_mfd_
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??print_mfd_system_message@@YGMPAD0HMM@Z@4JA
  00032	83 c0 09	 add	 eax, 9
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_07FPLKDJGL@warning@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@print_mfd_:

; 4515 : 
; 4516 : 	if (fail)

  00045	83 7d 10 00	 cmp	 DWORD PTR _fail$[ebp], 0
  00049	74 1c		 je	 SHORT $LN4@print_mfd_

; 4517 : 	{
; 4518 : 		set_mono_font_colour (MFD_COLOUR1);

  0004b	b8 04 00 00 00	 mov	 eax, 4
  00050	6b c8 00	 imul	 ecx, eax, 0
  00053	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00059	52		 push	 edx
  0005a	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4519 : 
; 4520 : 		status = warning;

  0005f	8b 45 0c	 mov	 eax, DWORD PTR _warning$[ebp]
  00062	89 45 fc	 mov	 DWORD PTR _status$[ebp], eax

; 4521 : 	}
; 4522 : 	else

  00065	eb 1b		 jmp	 SHORT $LN5@print_mfd_
$LN4@print_mfd_:

; 4523 : 	{
; 4524 : 		set_mono_font_colour (MFD_COLOUR4);

  00067	b8 04 00 00 00	 mov	 eax, 4
  0006c	6b c8 03	 imul	 ecx, eax, 3
  0006f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00075	52		 push	 edx
  00076	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4525 : 
; 4526 : 		status = "OK";

  0007b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _status$[ebp], OFFSET ??_C@_02GIPFHKNO@OK@
$LN5@print_mfd_:

; 4527 : 	}
; 4528 : 
; 4529 : 	set_2d_mono_font_position (-0.9, 0.975);

  00082	51		 push	 ecx
  00083	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f79999a
  0008b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00090	51		 push	 ecx
  00091	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  00099	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4530 : 
; 4531 : 	set_mono_font_rel_position (1.0, y_adjust);

  000a3	51		 push	 ecx
  000a4	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  000a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ae	51		 push	 ecx
  000af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bc	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4532 : 
; 4533 : 	print_mono_font_string (equipment);

  000c1	8b 45 08	 mov	 eax, DWORD PTR _equipment$[ebp]
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4534 : 
; 4535 : 	width = get_mono_font_string_width (status);

  000ca	8b 45 fc	 mov	 eax, DWORD PTR _status$[ebp]
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  000d3	d9 5d f8	 fstp	 DWORD PTR _width$[ebp]

; 4536 : 
; 4537 : 	width += width_adjust;

  000d6	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width$[ebp]
  000db	f3 0f 58 45 18	 addss	 xmm0, DWORD PTR _width_adjust$[ebp]
  000e0	f3 0f 11 45 f8	 movss	 DWORD PTR _width$[ebp], xmm0

; 4538 : 
; 4539 : 	set_2d_mono_font_position (0.9, 0.975);

  000e5	51		 push	 ecx
  000e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f79999a
  000ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f3	51		 push	 ecx
  000f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  000fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00101	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4540 : 
; 4541 : 	set_mono_font_rel_position (-width, y_adjust);

  00106	51		 push	 ecx
  00107	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0010c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00111	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width$[ebp]
  00116	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0011d	51		 push	 ecx
  0011e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00123	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4542 : 
; 4543 : 	print_mono_font_string (status);

  00128	8b 45 fc	 mov	 eax, DWORD PTR _status$[ebp]
  0012b	50		 push	 eax
  0012c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4544 : 
; 4545 : 	y_adjust += get_mono_font_char_height ('X');

  00131	6a 58		 push	 88			; 00000058H
  00133	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  00138	d9 5d b4	 fstp	 DWORD PTR tv162[ebp]
  0013b	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR tv162[ebp]
  00140	f3 0f 58 45 14	 addss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00145	f3 0f 11 45 14	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 4546 : 
; 4547 : 	return (y_adjust);

  0014a	d9 45 14	 fld	 DWORD PTR _y_adjust$[ebp]

; 4548 : }

  0014d	5f		 pop	 edi
  0014e	5e		 pop	 esi
  0014f	5b		 pop	 ebx
  00150	8b e5		 mov	 esp, ebp
  00152	5d		 pop	 ebp
  00153	c2 14 00	 ret	 20			; 00000014H
?print_mfd_system_message@@YGMPAD0HMM@Z ENDP		; print_mfd_system_message
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_weapon_display_mfd@@YGXXZ
_TEXT	SEGMENT
tv1785 = -188						; size = 8
tv1683 = -188						; size = 8
tv1461 = -188						; size = 8
tv1241 = -188						; size = 8
tv1214 = -188						; size = 8
tv1022 = -188						; size = 8
tv1009 = -188						; size = 8
tv994 = -188						; size = 8
tv981 = -188						; size = 8
tv964 = -188						; size = 8
tv951 = -188						; size = 8
tv78 = -188						; size = 4
tv1668 = -184						; size = 4
tv1446 = -184						; size = 4
tv1188 = -184						; size = 4
tv1180 = -184						; size = 4
tv1169 = -184						; size = 4
tv1111 = -184						; size = 4
tv1103 = -184						; size = 4
tv1092 = -184						; size = 4
tv70 = -184						; size = 4
_selected_weapon$ = -116				; size = 4
_weapon_sub_type$ = -112				; size = 4
_en$ = -108						; size = 4
_y_adjust$ = -104					; size = 4
_x_adjust$ = -100					; size = 4
_damaged$ = -96						; size = 4
_number$ = -92						; size = 4
_result$ = -88						; size = 4
_i$ = -84						; size = 4
_s$ = -80						; size = 80
?draw_weapon_display_mfd@@YGXXZ PROC			; draw_weapon_display_mfd, COMDAT

; 3692 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3693 : 	char
; 3694 : 		s[80];
; 3695 : 
; 3696 : 	int
; 3697 : 		i,
; 3698 : 		result,
; 3699 : 		number,
; 3700 : 		damaged;
; 3701 : 
; 3702 : 	float
; 3703 : 		x_adjust,
; 3704 : 		y_adjust;
; 3705 : 
; 3706 : 	entity
; 3707 : 		*en;
; 3708 : 
; 3709 : 	entity_sub_types
; 3710 : 		weapon_sub_type,
; 3711 : 		selected_weapon;
; 3712 : 
; 3713 : 	en = get_gunship_entity ();

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00011	89 45 94	 mov	 DWORD PTR _en$[ebp], eax

; 3714 : 
; 3715 : 	selected_weapon = get_local_entity_int_value (en, INT_TYPE_SELECTED_WEAPON);

  00014	83 7d 94 00	 cmp	 DWORD PTR _en$[ebp], 0
  00018	74 0d		 je	 SHORT $LN94@draw_weapo
  0001a	8b 45 94	 mov	 eax, DWORD PTR _en$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	89 8d 48 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], ecx
  00025	eb 24		 jmp	 SHORT $LN95@draw_weapo
$LN94@draw_weapo:
  00027	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_weapon_display_mfd@@YGXXZ@4JA
  0002d	83 c2 17	 add	 edx, 23			; 00000017H
  00030	52		 push	 edx
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00041	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN95@draw_weapo:
  0004b	b9 01 00 00 00	 mov	 ecx, 1
  00050	85 c9		 test	 ecx, ecx
  00052	74 0c		 je	 SHORT $LN96@draw_weapo
  00054	c7 85 44 ff ff
	ff b8 00 00 00	 mov	 DWORD PTR tv78[ebp], 184 ; 000000b8H
  0005e	eb 24		 jmp	 SHORT $LN97@draw_weapo
$LN96@draw_weapo:
  00060	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_weapon_display_mfd@@YGXXZ@4JA
  00066	83 c2 17	 add	 edx, 23			; 00000017H
  00069	52		 push	 edx
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0007a	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv78[ebp], 0
$LN97@draw_weapo:
  00084	68 b8 00 00 00	 push	 184			; 000000b8H
  00089	8b 4d 94	 mov	 ecx, DWORD PTR _en$[ebp]
  0008c	51		 push	 ecx
  0008d	69 95 48 ff ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv70[ebp], 1116
  00097	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR tv78[ebp]
  0009d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000a4	ff d1		 call	 ecx
  000a6	89 45 8c	 mov	 DWORD PTR _selected_weapon$[ebp], eax

; 3716 : 
; 3717 : 	////////////////////////////////////////
; 3718 : 	//
; 3719 : 	// draw outline
; 3720 : 	//
; 3721 : 	////////////////////////////////////////
; 3722 : 
; 3723 : 	i = 0;

  000a9	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
$LN2@draw_weapo:

; 3724 : 
; 3725 : 	while (i < num_weapon_line_points)

  000b0	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  000b3	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?num_weapon_line_points@@3HA
  000b9	0f 8d 81 00 00
	00		 jge	 $LN3@draw_weapo

; 3726 : 	{
; 3727 : 		draw_2d_line

  000bf	b8 04 00 00 00	 mov	 eax, 4
  000c4	6b c8 0f	 imul	 ecx, eax, 15
  000c7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  000cd	52		 push	 edx
  000ce	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  000d1	83 c0 01	 add	 eax, 1
  000d4	6b c8 0c	 imul	 ecx, eax, 12
  000d7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A
  000dd	51		 push	 ecx
  000de	f3 0f 10 44 0a
	04		 movss	 xmm0, DWORD PTR [edx+ecx+4]
  000e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e9	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  000ec	83 c0 01	 add	 eax, 1
  000ef	6b c8 0c	 imul	 ecx, eax, 12
  000f2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A
  000f8	51		 push	 ecx
  000f9	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  000fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00103	6b 45 ac 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  00107	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A
  0010d	51		 push	 ecx
  0010e	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [ecx+eax+4]
  00114	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00119	6b 55 ac 0c	 imul	 edx, DWORD PTR _i$[ebp], 12
  0011d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A
  00122	51		 push	 ecx
  00123	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00128	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 3728 : 		(
; 3729 : 			weapon_line_points[i].x,
; 3730 : 			weapon_line_points[i].y,
; 3731 : 			weapon_line_points[i + 1].x,
; 3732 : 			weapon_line_points[i + 1].y,
; 3733 : 			MFD_COLOUR_YELLOW
; 3734 : 		);
; 3735 : 
; 3736 : 		i += 2;

  00132	8b 45 ac	 mov	 eax, DWORD PTR _i$[ebp]
  00135	83 c0 02	 add	 eax, 2
  00138	89 45 ac	 mov	 DWORD PTR _i$[ebp], eax

; 3737 : 	}

  0013b	e9 70 ff ff ff	 jmp	 $LN2@draw_weapo
$LN3@draw_weapo:

; 3738 : 
; 3739 : 	////////////////////////////////////////
; 3740 : 	//
; 3741 : 	// arm
; 3742 : 	//
; 3743 : 	////////////////////////////////////////
; 3744 : 
; 3745 : 	if (selected_weapon != ENTITY_SUB_TYPE_WEAPON_NO_WEAPON)

  00140	83 7d 8c 00	 cmp	 DWORD PTR _selected_weapon$[ebp], 0
  00144	74 16		 je	 SHORT $LN4@draw_weapo

; 3746 : 	{
; 3747 : 		set_mono_font_colour (MFD_COLOUR1);

  00146	b8 04 00 00 00	 mov	 eax, 4
  0014b	6b c8 00	 imul	 ecx, eax, 0
  0014e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00154	52		 push	 edx
  00155	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 3748 : 	}
; 3749 : 	else

  0015a	eb 14		 jmp	 SHORT $LN5@draw_weapo
$LN4@draw_weapo:

; 3750 : 	{
; 3751 : 		set_mono_font_colour (MFD_COLOUR4);

  0015c	b8 04 00 00 00	 mov	 eax, 4
  00161	6b c8 03	 imul	 ecx, eax, 3
  00164	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0016a	52		 push	 edx
  0016b	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN5@draw_weapo:

; 3752 : 	}
; 3753 : 
; 3754 : 	if (draw_large_mfd)

  00170	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00177	74 71		 je	 SHORT $LN6@draw_weapo

; 3755 : 	{
; 3756 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  00179	6a 05		 push	 5
  0017b	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 3757 : 
; 3758 : 		set_2d_mono_font_position (0.0, 0.2);

  00180	51		 push	 ecx
  00181	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00189	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018e	51		 push	 ecx
  0018f	0f 57 c0	 xorps	 xmm0, xmm0
  00192	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00197	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3759 : 
; 3760 : 		x_adjust = get_mono_font_string_width ("ARM") * -0.5;

  0019c	68 00 00 00 00	 push	 OFFSET ??_C@_03NHPMNECN@ARM@
  001a1	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  001a6	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv951[ebp]
  001ac	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv951[ebp]
  001b4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  001bc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001c0	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 3761 : 
; 3762 : 		set_mono_font_rel_position (x_adjust, 0.0);

  001c5	51		 push	 ecx
  001c6	0f 57 c0	 xorps	 xmm0, xmm0
  001c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ce	51		 push	 ecx
  001cf	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  001d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d9	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3763 : 
; 3764 : 		print_mono_font_string ("ARM");

  001de	68 00 00 00 00	 push	 OFFSET ??_C@_03NHPMNECN@ARM@
  001e3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3765 : 	}
; 3766 : 	else

  001e8	eb 6f		 jmp	 SHORT $LN7@draw_weapo
$LN6@draw_weapo:

; 3767 : 	{
; 3768 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  001ea	6a 01		 push	 1
  001ec	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 3769 : 
; 3770 : 		set_2d_mono_font_position (0.0, 0.2);

  001f1	51		 push	 ecx
  001f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  001fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ff	51		 push	 ecx
  00200	0f 57 c0	 xorps	 xmm0, xmm0
  00203	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00208	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3771 : 
; 3772 : 		x_adjust = get_mono_font_string_width ("ARM") * -0.5;

  0020d	68 00 00 00 00	 push	 OFFSET ??_C@_03NHPMNECN@ARM@
  00212	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00217	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv964[ebp]
  0021d	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv964[ebp]
  00225	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0022d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00231	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 3773 : 
; 3774 : 		set_mono_font_rel_position (x_adjust, 0.0);

  00236	51		 push	 ecx
  00237	0f 57 c0	 xorps	 xmm0, xmm0
  0023a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023f	51		 push	 ecx
  00240	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00245	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3775 : 
; 3776 : 		print_mono_font_string ("ARM");

  0024f	68 00 00 00 00	 push	 OFFSET ??_C@_03NHPMNECN@ARM@
  00254	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN7@draw_weapo:

; 3777 : 	}
; 3778 : 
; 3779 : 	////////////////////////////////////////
; 3780 : 	//
; 3781 : 	// auto-counter measures
; 3782 : 	//
; 3783 : 	////////////////////////////////////////
; 3784 : 
; 3785 : 	if (get_global_auto_counter_measures ())

  00259	83 3d 90 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+144, 0
  00260	74 16		 je	 SHORT $LN8@draw_weapo

; 3786 : 	{
; 3787 : 		set_mono_font_colour (MFD_COLOUR1);

  00262	b8 04 00 00 00	 mov	 eax, 4
  00267	6b c8 00	 imul	 ecx, eax, 0
  0026a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00270	52		 push	 edx
  00271	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 3788 : 	}
; 3789 : 	else

  00276	eb 14		 jmp	 SHORT $LN9@draw_weapo
$LN8@draw_weapo:

; 3790 : 	{
; 3791 : 		set_mono_font_colour (MFD_COLOUR4);

  00278	b8 04 00 00 00	 mov	 eax, 4
  0027d	6b c8 03	 imul	 ecx, eax, 3
  00280	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00286	52		 push	 edx
  00287	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN9@draw_weapo:

; 3792 : 	}
; 3793 : 
; 3794 : 	if (draw_large_mfd)

  0028c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00293	0f 84 d4 00 00
	00		 je	 $LN10@draw_weapo

; 3795 : 	{
; 3796 : 		set_mono_font_type (MONO_FONT_TYPE_6X10);

  00299	6a 04		 push	 4
  0029b	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 3797 : 
; 3798 : 		set_2d_mono_font_position (0.0, 0.0);

  002a0	51		 push	 ecx
  002a1	0f 57 c0	 xorps	 xmm0, xmm0
  002a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a9	51		 push	 ecx
  002aa	0f 57 c0	 xorps	 xmm0, xmm0
  002ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b2	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3799 : 
; 3800 : 		x_adjust = get_mono_font_string_width ("AUTO") * -0.5;

  002b7	68 00 00 00 00	 push	 OFFSET ??_C@_04LMMJFDCN@AUTO@
  002bc	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  002c1	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv981[ebp]
  002c7	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv981[ebp]
  002cf	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  002d7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002db	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 3801 : 
; 3802 : 		set_mono_font_rel_position (x_adjust, 0.0);

  002e0	51		 push	 ecx
  002e1	0f 57 c0	 xorps	 xmm0, xmm0
  002e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e9	51		 push	 ecx
  002ea	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  002ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f4	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3803 : 
; 3804 : 		print_mono_font_string ("AUTO");

  002f9	68 00 00 00 00	 push	 OFFSET ??_C@_04LMMJFDCN@AUTO@
  002fe	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3805 : 
; 3806 : 		set_2d_mono_font_position (0.0, 0.0);

  00303	51		 push	 ecx
  00304	0f 57 c0	 xorps	 xmm0, xmm0
  00307	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030c	51		 push	 ecx
  0030d	0f 57 c0	 xorps	 xmm0, xmm0
  00310	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00315	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3807 : 
; 3808 : 		x_adjust = get_mono_font_string_width ("C/M") * -0.5;

  0031a	68 00 00 00 00	 push	 OFFSET ??_C@_03CBNMOHKF@C?1M@
  0031f	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00324	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv994[ebp]
  0032a	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv994[ebp]
  00332	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0033a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0033e	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 3809 : 
; 3810 : 		set_mono_font_rel_position (x_adjust, get_mono_font_char_height ('X'));

  00343	6a 58		 push	 88			; 00000058H
  00345	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  0034a	51		 push	 ecx
  0034b	d9 1c 24	 fstp	 DWORD PTR [esp]
  0034e	51		 push	 ecx
  0034f	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00354	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00359	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3811 : 
; 3812 : 		print_mono_font_string ("C/M");

  0035e	68 00 00 00 00	 push	 OFFSET ??_C@_03CBNMOHKF@C?1M@
  00363	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3813 : 	}
; 3814 : 	else

  00368	e9 cf 00 00 00	 jmp	 $LN11@draw_weapo
$LN10@draw_weapo:

; 3815 : 	{
; 3816 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  0036d	6a 01		 push	 1
  0036f	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 3817 : 
; 3818 : 		set_2d_mono_font_position (0.0, 0.0);

  00374	51		 push	 ecx
  00375	0f 57 c0	 xorps	 xmm0, xmm0
  00378	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037d	51		 push	 ecx
  0037e	0f 57 c0	 xorps	 xmm0, xmm0
  00381	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00386	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3819 : 
; 3820 : 		x_adjust = get_mono_font_string_width ("AUTO") * -0.5;

  0038b	68 00 00 00 00	 push	 OFFSET ??_C@_04LMMJFDCN@AUTO@
  00390	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00395	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv1009[ebp]
  0039b	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1009[ebp]
  003a3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  003ab	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003af	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 3821 : 
; 3822 : 		set_mono_font_rel_position (x_adjust, 0.0);

  003b4	51		 push	 ecx
  003b5	0f 57 c0	 xorps	 xmm0, xmm0
  003b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003bd	51		 push	 ecx
  003be	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  003c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c8	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3823 : 
; 3824 : 		print_mono_font_string ("AUTO");

  003cd	68 00 00 00 00	 push	 OFFSET ??_C@_04LMMJFDCN@AUTO@
  003d2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3825 : 
; 3826 : 		set_2d_mono_font_position (0.0, 0.0);

  003d7	51		 push	 ecx
  003d8	0f 57 c0	 xorps	 xmm0, xmm0
  003db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e0	51		 push	 ecx
  003e1	0f 57 c0	 xorps	 xmm0, xmm0
  003e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e9	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3827 : 
; 3828 : 		x_adjust = get_mono_font_string_width ("C/M") * -0.5;

  003ee	68 00 00 00 00	 push	 OFFSET ??_C@_03CBNMOHKF@C?1M@
  003f3	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  003f8	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv1022[ebp]
  003fe	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1022[ebp]
  00406	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0040e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00412	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 3829 : 
; 3830 : 		set_mono_font_rel_position (x_adjust, get_mono_font_char_height ('X'));

  00417	6a 58		 push	 88			; 00000058H
  00419	e8 00 00 00 00	 call	 ?get_mono_font_char_height@@YGMD@Z ; get_mono_font_char_height
  0041e	51		 push	 ecx
  0041f	d9 1c 24	 fstp	 DWORD PTR [esp]
  00422	51		 push	 ecx
  00423	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00428	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042d	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3831 : 
; 3832 : 		print_mono_font_string ("C/M");

  00432	68 00 00 00 00	 push	 OFFSET ??_C@_03CBNMOHKF@C?1M@
  00437	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN11@draw_weapo:

; 3833 : 	}
; 3834 : 
; 3835 : 	////////////////////////////////////////
; 3836 : 	//
; 3837 : 	// chaff and flares
; 3838 : 	//
; 3839 : 	////////////////////////////////////////
; 3840 : 
; 3841 : 	if (draw_large_mfd)

  0043c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00443	74 16		 je	 SHORT $LN12@draw_weapo

; 3842 : 	{
; 3843 : 		set_mono_font_type (MONO_FONT_TYPE_6X10);

  00445	6a 04		 push	 4
  00447	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 3844 : 
; 3845 : 		y_adjust = -6.0;

  0044c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0c00000
  00454	f3 0f 11 45 98	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3846 : 	}
; 3847 : 	else

  00459	eb 14		 jmp	 SHORT $LN13@draw_weapo
$LN12@draw_weapo:

; 3848 : 	{
; 3849 : 		set_mono_font_type (MONO_FONT_TYPE_3X6);

  0045b	6a 00		 push	 0
  0045d	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 3850 : 
; 3851 : 		y_adjust = -4.0;

  00462	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  0046a	f3 0f 11 45 98	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN13@draw_weapo:

; 3852 : 	}
; 3853 : 
; 3854 : 	//
; 3855 : 	// lh chaff
; 3856 : 	//
; 3857 : 
; 3858 : 	result = get_local_entity_weapon_hardpoint_info (en, KA50_LHS_CHAFF_DISPENSER, ENTITY_SUB_TYPE_WEAPON_CHAFF, &weapon_sub_type, &number, &damaged);

  0046f	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  00472	50		 push	 eax
  00473	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  00476	51		 push	 ecx
  00477	8d 55 90	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  0047a	52		 push	 edx
  0047b	6a 43		 push	 67			; 00000043H
  0047d	6a 05		 push	 5
  0047f	8b 45 94	 mov	 eax, DWORD PTR _en$[ebp]
  00482	50		 push	 eax
  00483	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  00488	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 3859 : 
; 3860 : 	if (result)

  0048b	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  0048f	0f 84 ca 00 00
	00		 je	 $LN22@draw_weapo

; 3861 : 	{
; 3862 : 		set_2d_mono_font_position (-0.95, 0.3);

  00495	51		 push	 ecx
  00496	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  0049e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a3	51		 push	 ecx
  004a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  004ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b1	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3863 : 
; 3864 : 		if (!damaged)

  004b6	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  004ba	75 70		 jne	 SHORT $LN15@draw_weapo

; 3865 : 		{
; 3866 : 			if (number > 0)

  004bc	83 7d a4 00	 cmp	 DWORD PTR _number$[ebp], 0
  004c0	7e 16		 jle	 SHORT $LN17@draw_weapo

; 3867 : 			{
; 3868 : 				set_mono_font_colour (MFD_COLOUR1);

  004c2	b8 04 00 00 00	 mov	 eax, 4
  004c7	6b c8 00	 imul	 ecx, eax, 0
  004ca	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004d0	52		 push	 edx
  004d1	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 3869 : 			}
; 3870 : 			else

  004d6	eb 14		 jmp	 SHORT $LN18@draw_weapo
$LN17@draw_weapo:

; 3871 : 			{
; 3872 : 				set_mono_font_colour (MFD_COLOUR4);

  004d8	b8 04 00 00 00	 mov	 eax, 4
  004dd	6b c8 03	 imul	 ecx, eax, 3
  004e0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004e6	52		 push	 edx
  004e7	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN18@draw_weapo:

; 3873 : 			}
; 3874 : 
; 3875 : 			if (draw_large_mfd)

  004ec	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  004f3	74 17		 je	 SHORT $LN19@draw_weapo

; 3876 : 			{
; 3877 : 				sprintf (s, "CHAFFx%02d", number);

  004f5	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  004f8	50		 push	 eax
  004f9	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GPHKKCOA@CHAFFx?$CF02d@
  004fe	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00501	51		 push	 ecx
  00502	e8 00 00 00 00	 call	 _sprintf
  00507	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3878 : 			}
; 3879 : 			else

  0050a	eb 15		 jmp	 SHORT $LN20@draw_weapo
$LN19@draw_weapo:

; 3880 : 			{
; 3881 : 				sprintf (s, "Cx%02d", number);

  0050c	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  0050f	50		 push	 eax
  00510	68 00 00 00 00	 push	 OFFSET ??_C@_06CPHFAHEB@Cx?$CF02d@
  00515	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00518	51		 push	 ecx
  00519	e8 00 00 00 00	 call	 _sprintf
  0051e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN20@draw_weapo:

; 3882 : 			}
; 3883 : 
; 3884 : 			print_mono_font_string (s);

  00521	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00524	50		 push	 eax
  00525	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3885 : 		}
; 3886 : 		else

  0052a	eb 33		 jmp	 SHORT $LN22@draw_weapo
$LN15@draw_weapo:

; 3887 : 		{
; 3888 : 			set_mono_font_colour (MFD_COLOUR4);

  0052c	b8 04 00 00 00	 mov	 eax, 4
  00531	6b c8 03	 imul	 ecx, eax, 3
  00534	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0053a	52		 push	 edx
  0053b	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 3889 : 
; 3890 : 			if (draw_large_mfd)

  00540	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00547	74 0c		 je	 SHORT $LN21@draw_weapo

; 3891 : 			{
; 3892 : 				print_mono_font_string ("CHAFFxXX");

  00549	68 00 00 00 00	 push	 OFFSET ??_C@_08FGBJBHLJ@CHAFFxXX@
  0054e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3893 : 			}
; 3894 : 			else

  00553	eb 0a		 jmp	 SHORT $LN22@draw_weapo
$LN21@draw_weapo:

; 3895 : 			{
; 3896 : 				print_mono_font_string ("CxXX");

  00555	68 00 00 00 00	 push	 OFFSET ??_C@_04JIMIAKFM@CxXX@
  0055a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN22@draw_weapo:

; 3897 : 			}
; 3898 : 		}
; 3899 : 	}
; 3900 : 
; 3901 : 	//
; 3902 : 	// lh flare
; 3903 : 	//
; 3904 : 
; 3905 : 	result = get_local_entity_weapon_hardpoint_info (en, KA50_LHS_FLARE_DISPENSER, ENTITY_SUB_TYPE_WEAPON_FLARE, &weapon_sub_type, &number, &damaged);

  0055f	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  00562	50		 push	 eax
  00563	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  00566	51		 push	 ecx
  00567	8d 55 90	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  0056a	52		 push	 edx
  0056b	6a 44		 push	 68			; 00000044H
  0056d	6a 05		 push	 5
  0056f	8b 45 94	 mov	 eax, DWORD PTR _en$[ebp]
  00572	50		 push	 eax
  00573	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  00578	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 3906 : 
; 3907 : 	if (result)

  0057b	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  0057f	0f 84 ca 00 00
	00		 je	 $LN31@draw_weapo

; 3908 : 	{
; 3909 : 		set_2d_mono_font_position (-0.95, 0.2);

  00585	51		 push	 ecx
  00586	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0058e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00593	51		 push	 ecx
  00594	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  0059c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a1	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3910 : 
; 3911 : 		if (!damaged)

  005a6	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  005aa	75 70		 jne	 SHORT $LN24@draw_weapo

; 3912 : 		{
; 3913 : 			if (number > 0)

  005ac	83 7d a4 00	 cmp	 DWORD PTR _number$[ebp], 0
  005b0	7e 16		 jle	 SHORT $LN26@draw_weapo

; 3914 : 			{
; 3915 : 				set_mono_font_colour (MFD_COLOUR1);

  005b2	b8 04 00 00 00	 mov	 eax, 4
  005b7	6b c8 00	 imul	 ecx, eax, 0
  005ba	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005c0	52		 push	 edx
  005c1	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 3916 : 			}
; 3917 : 			else

  005c6	eb 14		 jmp	 SHORT $LN27@draw_weapo
$LN26@draw_weapo:

; 3918 : 			{
; 3919 : 				set_mono_font_colour (MFD_COLOUR4);

  005c8	b8 04 00 00 00	 mov	 eax, 4
  005cd	6b c8 03	 imul	 ecx, eax, 3
  005d0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  005d6	52		 push	 edx
  005d7	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN27@draw_weapo:

; 3920 : 			}
; 3921 : 
; 3922 : 			if (draw_large_mfd)

  005dc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  005e3	74 17		 je	 SHORT $LN28@draw_weapo

; 3923 : 			{
; 3924 : 				sprintf (s, "FLAREx%02d", number);

  005e5	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  005e8	50		 push	 eax
  005e9	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NONPILJE@FLAREx?$CF02d@
  005ee	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  005f1	51		 push	 ecx
  005f2	e8 00 00 00 00	 call	 _sprintf
  005f7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3925 : 			}
; 3926 : 			else

  005fa	eb 15		 jmp	 SHORT $LN29@draw_weapo
$LN28@draw_weapo:

; 3927 : 			{
; 3928 : 				sprintf (s, "Fx%02d", number);

  005fc	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  005ff	50		 push	 eax
  00600	68 00 00 00 00	 push	 OFFSET ??_C@_06HNENCIOG@Fx?$CF02d@
  00605	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00608	51		 push	 ecx
  00609	e8 00 00 00 00	 call	 _sprintf
  0060e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN29@draw_weapo:

; 3929 : 			}
; 3930 : 
; 3931 : 			print_mono_font_string (s);

  00611	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00614	50		 push	 eax
  00615	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3932 : 		}
; 3933 : 		else

  0061a	eb 33		 jmp	 SHORT $LN31@draw_weapo
$LN24@draw_weapo:

; 3934 : 		{
; 3935 : 			set_mono_font_colour (MFD_COLOUR4);

  0061c	b8 04 00 00 00	 mov	 eax, 4
  00621	6b c8 03	 imul	 ecx, eax, 3
  00624	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0062a	52		 push	 edx
  0062b	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 3936 : 
; 3937 : 			if (draw_large_mfd)

  00630	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00637	74 0c		 je	 SHORT $LN30@draw_weapo

; 3938 : 			{
; 3939 : 				print_mono_font_string ("FLARExXX");

  00639	68 00 00 00 00	 push	 OFFSET ??_C@_08EHCDGGFB@FLARExXX@
  0063e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3940 : 			}
; 3941 : 			else

  00643	eb 0a		 jmp	 SHORT $LN31@draw_weapo
$LN30@draw_weapo:

; 3942 : 			{
; 3943 : 				print_mono_font_string ("FxXX");

  00645	68 00 00 00 00	 push	 OFFSET ??_C@_04FACIIFCM@FxXX@
  0064a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN31@draw_weapo:

; 3944 : 			}
; 3945 : 		}
; 3946 : 	}
; 3947 : 
; 3948 : 	//
; 3949 : 	// rh chaff
; 3950 : 	//
; 3951 : 
; 3952 : 	result = get_local_entity_weapon_hardpoint_info (en, KA50_RHS_CHAFF_DISPENSER, ENTITY_SUB_TYPE_WEAPON_CHAFF, &weapon_sub_type, &number, &damaged);

  0064f	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  00652	50		 push	 eax
  00653	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  00656	51		 push	 ecx
  00657	8d 55 90	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  0065a	52		 push	 edx
  0065b	6a 43		 push	 67			; 00000043H
  0065d	6a 06		 push	 6
  0065f	8b 45 94	 mov	 eax, DWORD PTR _en$[ebp]
  00662	50		 push	 eax
  00663	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  00668	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 3953 : 
; 3954 : 	if (result)

  0066b	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  0066f	0f 84 87 01 00
	00		 je	 $LN40@draw_weapo

; 3955 : 	{
; 3956 : 		set_2d_mono_font_position (0.95, 0.3);

  00675	51		 push	 ecx
  00676	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  0067e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00683	51		 push	 ecx
  00684	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  0068c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00691	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3957 : 
; 3958 : 		if (!damaged)

  00696	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0069a	0f 85 af 00 00
	00		 jne	 $LN33@draw_weapo

; 3959 : 		{
; 3960 : 			if (number > 0)

  006a0	83 7d a4 00	 cmp	 DWORD PTR _number$[ebp], 0
  006a4	7e 16		 jle	 SHORT $LN35@draw_weapo

; 3961 : 			{
; 3962 : 				set_mono_font_colour (MFD_COLOUR1);

  006a6	b8 04 00 00 00	 mov	 eax, 4
  006ab	6b c8 00	 imul	 ecx, eax, 0
  006ae	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006b4	52		 push	 edx
  006b5	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 3963 : 			}
; 3964 : 			else

  006ba	eb 14		 jmp	 SHORT $LN36@draw_weapo
$LN35@draw_weapo:

; 3965 : 			{
; 3966 : 				set_mono_font_colour (MFD_COLOUR4);

  006bc	b8 04 00 00 00	 mov	 eax, 4
  006c1	6b c8 03	 imul	 ecx, eax, 3
  006c4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  006ca	52		 push	 edx
  006cb	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN36@draw_weapo:

; 3967 : 			}
; 3968 : 
; 3969 : 			if (draw_large_mfd)

  006d0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  006d7	74 17		 je	 SHORT $LN37@draw_weapo

; 3970 : 			{
; 3971 : 				sprintf (s, "CHAFFx%02d", number);

  006d9	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  006dc	50		 push	 eax
  006dd	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GPHKKCOA@CHAFFx?$CF02d@
  006e2	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  006e5	51		 push	 ecx
  006e6	e8 00 00 00 00	 call	 _sprintf
  006eb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3972 : 			}
; 3973 : 			else

  006ee	eb 15		 jmp	 SHORT $LN38@draw_weapo
$LN37@draw_weapo:

; 3974 : 			{
; 3975 : 				sprintf (s, "Cx%02d", number);

  006f0	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  006f3	50		 push	 eax
  006f4	68 00 00 00 00	 push	 OFFSET ??_C@_06CPHFAHEB@Cx?$CF02d@
  006f9	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  006fc	51		 push	 ecx
  006fd	e8 00 00 00 00	 call	 _sprintf
  00702	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN38@draw_weapo:

; 3976 : 			}
; 3977 : 
; 3978 : 			x_adjust = -get_mono_font_string_width (s);

  00705	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00708	50		 push	 eax
  00709	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0070e	d9 9d 48 ff ff
	ff		 fstp	 DWORD PTR tv1092[ebp]
  00714	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv1092[ebp]
  0071c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00723	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 3979 : 
; 3980 : 			set_mono_font_rel_position (x_adjust, 0.0);

  00728	51		 push	 ecx
  00729	0f 57 c0	 xorps	 xmm0, xmm0
  0072c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00731	51		 push	 ecx
  00732	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00737	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0073c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3981 : 
; 3982 : 			print_mono_font_string (s);

  00741	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00744	50		 push	 eax
  00745	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3983 : 		}
; 3984 : 		else

  0074a	e9 ad 00 00 00	 jmp	 $LN40@draw_weapo
$LN33@draw_weapo:

; 3985 : 		{
; 3986 : 			set_mono_font_colour (MFD_COLOUR4);

  0074f	b8 04 00 00 00	 mov	 eax, 4
  00754	6b c8 03	 imul	 ecx, eax, 3
  00757	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0075d	52		 push	 edx
  0075e	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 3987 : 
; 3988 : 			if (draw_large_mfd)

  00763	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0076a	74 49		 je	 SHORT $LN39@draw_weapo

; 3989 : 			{
; 3990 : 				x_adjust = -get_mono_font_string_width ("CHAFFxXX");

  0076c	68 00 00 00 00	 push	 OFFSET ??_C@_08FGBJBHLJ@CHAFFxXX@
  00771	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00776	d9 9d 48 ff ff
	ff		 fstp	 DWORD PTR tv1103[ebp]
  0077c	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv1103[ebp]
  00784	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0078b	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 3991 : 
; 3992 : 				set_mono_font_rel_position (x_adjust, 0.0);

  00790	51		 push	 ecx
  00791	0f 57 c0	 xorps	 xmm0, xmm0
  00794	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00799	51		 push	 ecx
  0079a	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0079f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a4	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3993 : 
; 3994 : 				print_mono_font_string ("CHAFFxXX");

  007a9	68 00 00 00 00	 push	 OFFSET ??_C@_08FGBJBHLJ@CHAFFxXX@
  007ae	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3995 : 			}
; 3996 : 			else

  007b3	eb 47		 jmp	 SHORT $LN40@draw_weapo
$LN39@draw_weapo:

; 3997 : 			{
; 3998 : 				x_adjust = -get_mono_font_string_width ("CxXX");

  007b5	68 00 00 00 00	 push	 OFFSET ??_C@_04JIMIAKFM@CxXX@
  007ba	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  007bf	d9 9d 48 ff ff
	ff		 fstp	 DWORD PTR tv1111[ebp]
  007c5	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv1111[ebp]
  007cd	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  007d4	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 3999 : 
; 4000 : 				set_mono_font_rel_position (x_adjust, 0.0);

  007d9	51		 push	 ecx
  007da	0f 57 c0	 xorps	 xmm0, xmm0
  007dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e2	51		 push	 ecx
  007e3	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  007e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ed	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4001 : 
; 4002 : 				print_mono_font_string ("CxXX");

  007f2	68 00 00 00 00	 push	 OFFSET ??_C@_04JIMIAKFM@CxXX@
  007f7	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN40@draw_weapo:

; 4003 : 			}
; 4004 : 		}
; 4005 : 	}
; 4006 : 
; 4007 : 	//
; 4008 : 	// rh flare
; 4009 : 	//
; 4010 : 
; 4011 : 	result = get_local_entity_weapon_hardpoint_info (en, KA50_RHS_FLARE_DISPENSER, ENTITY_SUB_TYPE_WEAPON_FLARE, &weapon_sub_type, &number, &damaged);

  007fc	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  007ff	50		 push	 eax
  00800	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  00803	51		 push	 ecx
  00804	8d 55 90	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00807	52		 push	 edx
  00808	6a 44		 push	 68			; 00000044H
  0080a	6a 06		 push	 6
  0080c	8b 45 94	 mov	 eax, DWORD PTR _en$[ebp]
  0080f	50		 push	 eax
  00810	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  00815	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 4012 : 
; 4013 : 	if (result)

  00818	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  0081c	0f 84 87 01 00
	00		 je	 $LN49@draw_weapo

; 4014 : 	{
; 4015 : 		set_2d_mono_font_position (0.95, 0.2);

  00822	51		 push	 ecx
  00823	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0082b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00830	51		 push	 ecx
  00831	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f733333
  00839	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0083e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4016 : 
; 4017 : 		if (!damaged)

  00843	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00847	0f 85 af 00 00
	00		 jne	 $LN42@draw_weapo

; 4018 : 		{
; 4019 : 			if (number > 0)

  0084d	83 7d a4 00	 cmp	 DWORD PTR _number$[ebp], 0
  00851	7e 16		 jle	 SHORT $LN44@draw_weapo

; 4020 : 			{
; 4021 : 				set_mono_font_colour (MFD_COLOUR1);

  00853	b8 04 00 00 00	 mov	 eax, 4
  00858	6b c8 00	 imul	 ecx, eax, 0
  0085b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00861	52		 push	 edx
  00862	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4022 : 			}
; 4023 : 			else

  00867	eb 14		 jmp	 SHORT $LN45@draw_weapo
$LN44@draw_weapo:

; 4024 : 			{
; 4025 : 				set_mono_font_colour (MFD_COLOUR4);

  00869	b8 04 00 00 00	 mov	 eax, 4
  0086e	6b c8 03	 imul	 ecx, eax, 3
  00871	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00877	52		 push	 edx
  00878	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN45@draw_weapo:

; 4026 : 			}
; 4027 : 
; 4028 : 			if (draw_large_mfd)

  0087d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00884	74 17		 je	 SHORT $LN46@draw_weapo

; 4029 : 			{
; 4030 : 				sprintf (s, "FLAREx%02d", number);

  00886	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  00889	50		 push	 eax
  0088a	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NONPILJE@FLAREx?$CF02d@
  0088f	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00892	51		 push	 ecx
  00893	e8 00 00 00 00	 call	 _sprintf
  00898	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4031 : 			}
; 4032 : 			else

  0089b	eb 15		 jmp	 SHORT $LN47@draw_weapo
$LN46@draw_weapo:

; 4033 : 			{
; 4034 : 				sprintf (s, "Fx%02d", number);

  0089d	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  008a0	50		 push	 eax
  008a1	68 00 00 00 00	 push	 OFFSET ??_C@_06HNENCIOG@Fx?$CF02d@
  008a6	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  008a9	51		 push	 ecx
  008aa	e8 00 00 00 00	 call	 _sprintf
  008af	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN47@draw_weapo:

; 4035 : 			}
; 4036 : 
; 4037 : 			x_adjust = -get_mono_font_string_width (s);

  008b2	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  008b5	50		 push	 eax
  008b6	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  008bb	d9 9d 48 ff ff
	ff		 fstp	 DWORD PTR tv1169[ebp]
  008c1	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv1169[ebp]
  008c9	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  008d0	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 4038 : 
; 4039 : 			set_mono_font_rel_position (x_adjust, 0.0);

  008d5	51		 push	 ecx
  008d6	0f 57 c0	 xorps	 xmm0, xmm0
  008d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008de	51		 push	 ecx
  008df	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  008e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e9	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4040 : 
; 4041 : 			print_mono_font_string (s);

  008ee	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  008f1	50		 push	 eax
  008f2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4042 : 		}
; 4043 : 		else

  008f7	e9 ad 00 00 00	 jmp	 $LN49@draw_weapo
$LN42@draw_weapo:

; 4044 : 		{
; 4045 : 			set_mono_font_colour (MFD_COLOUR4);

  008fc	b8 04 00 00 00	 mov	 eax, 4
  00901	6b c8 03	 imul	 ecx, eax, 3
  00904	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0090a	52		 push	 edx
  0090b	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4046 : 
; 4047 : 			if (draw_large_mfd)

  00910	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00917	74 49		 je	 SHORT $LN48@draw_weapo

; 4048 : 			{
; 4049 : 				x_adjust = -get_mono_font_string_width ("FLARExXX");

  00919	68 00 00 00 00	 push	 OFFSET ??_C@_08EHCDGGFB@FLARExXX@
  0091e	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00923	d9 9d 48 ff ff
	ff		 fstp	 DWORD PTR tv1180[ebp]
  00929	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv1180[ebp]
  00931	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00938	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 4050 : 
; 4051 : 				set_mono_font_rel_position (x_adjust, 0.0);

  0093d	51		 push	 ecx
  0093e	0f 57 c0	 xorps	 xmm0, xmm0
  00941	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00946	51		 push	 ecx
  00947	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  0094c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00951	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4052 : 
; 4053 : 				print_mono_font_string ("FLARExXX");

  00956	68 00 00 00 00	 push	 OFFSET ??_C@_08EHCDGGFB@FLARExXX@
  0095b	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4054 : 			}
; 4055 : 			else

  00960	eb 47		 jmp	 SHORT $LN49@draw_weapo
$LN48@draw_weapo:

; 4056 : 			{
; 4057 : 				x_adjust = -get_mono_font_string_width ("FxXX");

  00962	68 00 00 00 00	 push	 OFFSET ??_C@_04FACIIFCM@FxXX@
  00967	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0096c	d9 9d 48 ff ff
	ff		 fstp	 DWORD PTR tv1188[ebp]
  00972	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv1188[ebp]
  0097a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00981	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 4058 : 
; 4059 : 				set_mono_font_rel_position (x_adjust, 0.0);

  00986	51		 push	 ecx
  00987	0f 57 c0	 xorps	 xmm0, xmm0
  0098a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0098f	51		 push	 ecx
  00990	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00995	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0099a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4060 : 
; 4061 : 				print_mono_font_string ("FxXX");

  0099f	68 00 00 00 00	 push	 OFFSET ??_C@_04FACIIFCM@FxXX@
  009a4	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN49@draw_weapo:

; 4062 : 			}
; 4063 : 		}
; 4064 : 	}
; 4065 : 
; 4066 : 	////////////////////////////////////////
; 4067 : 	//
; 4068 : 	// cannon
; 4069 : 	//
; 4070 : 	////////////////////////////////////////
; 4071 : 
; 4072 : 	result = get_local_entity_weapon_hardpoint_info (en, KA50_CANNON_TURRET, ENTITY_SUB_TYPE_WEAPON_2A42_30MM_HE_ROUND, &weapon_sub_type, &number, &damaged);

  009a9	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  009ac	50		 push	 eax
  009ad	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  009b0	51		 push	 ecx
  009b1	8d 55 90	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  009b4	52		 push	 edx
  009b5	6a 13		 push	 19			; 00000013H
  009b7	6a 00		 push	 0
  009b9	8b 45 94	 mov	 eax, DWORD PTR _en$[ebp]
  009bc	50		 push	 eax
  009bd	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  009c2	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 4073 : 
; 4074 : 	if (result)

  009c5	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  009c9	0f 84 af 00 00
	00		 je	 $LN50@draw_weapo

; 4075 : 	{
; 4076 : 		//
; 4077 : 		// selected weapon
; 4078 : 		//
; 4079 : 
; 4080 : 		if (weapon_sub_type == selected_weapon)

  009cf	8b 45 90	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  009d2	3b 45 8c	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  009d5	75 16		 jne	 SHORT $LN51@draw_weapo

; 4081 : 		{
; 4082 : 			set_mono_font_colour (MFD_COLOUR1);

  009d7	b8 04 00 00 00	 mov	 eax, 4
  009dc	6b c8 00	 imul	 ecx, eax, 0
  009df	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009e5	52		 push	 edx
  009e6	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4083 : 		}
; 4084 : 		else

  009eb	eb 14		 jmp	 SHORT $LN52@draw_weapo
$LN51@draw_weapo:

; 4085 : 		{
; 4086 : 			set_mono_font_colour (MFD_COLOUR4);

  009ed	b8 04 00 00 00	 mov	 eax, 4
  009f2	6b c8 03	 imul	 ecx, eax, 3
  009f5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  009fb	52		 push	 edx
  009fc	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN52@draw_weapo:

; 4087 : 		}
; 4088 : 
; 4089 : 		//
; 4090 : 		// weapon name and number
; 4091 : 		//
; 4092 : 
; 4093 : 		sprintf (s, "HEx%03d", number);

  00a01	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  00a04	50		 push	 eax
  00a05	68 00 00 00 00	 push	 OFFSET ??_C@_07EPFBIBAD@HEx?$CF03d@
  00a0a	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00a0d	51		 push	 ecx
  00a0e	e8 00 00 00 00	 call	 _sprintf
  00a13	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4094 : 
; 4095 : 		set_2d_mono_font_position (0.0, -0.4);

  00a16	51		 push	 ecx
  00a17	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  00a1f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a24	51		 push	 ecx
  00a25	0f 57 c0	 xorps	 xmm0, xmm0
  00a28	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a2d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4096 : 
; 4097 : 		x_adjust = get_mono_font_string_width (s) * -0.5;

  00a32	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00a35	50		 push	 eax
  00a36	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00a3b	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv1214[ebp]
  00a41	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1214[ebp]
  00a49	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00a51	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a55	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 4098 : 
; 4099 : 		set_mono_font_rel_position (x_adjust, y_adjust);

  00a5a	51		 push	 ecx
  00a5b	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00a60	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a65	51		 push	 ecx
  00a66	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00a6b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a70	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4100 : 
; 4101 : 		print_mono_font_string (s);

  00a75	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00a78	50		 push	 eax
  00a79	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN50@draw_weapo:

; 4102 : 	}
; 4103 : 
; 4104 : 	result = get_local_entity_weapon_hardpoint_info (en, KA50_CANNON_TURRET, ENTITY_SUB_TYPE_WEAPON_2A42_30MM_AP_ROUND, &weapon_sub_type, &number, &damaged);

  00a7e	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  00a81	50		 push	 eax
  00a82	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  00a85	51		 push	 ecx
  00a86	8d 55 90	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00a89	52		 push	 edx
  00a8a	6a 14		 push	 20			; 00000014H
  00a8c	6a 00		 push	 0
  00a8e	8b 45 94	 mov	 eax, DWORD PTR _en$[ebp]
  00a91	50		 push	 eax
  00a92	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  00a97	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 4105 : 
; 4106 : 	if (result)

  00a9a	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  00a9e	0f 84 43 03 00
	00		 je	 $LN59@draw_weapo

; 4107 : 	{
; 4108 : 		//
; 4109 : 		// selected weapon
; 4110 : 		//
; 4111 : 
; 4112 : 		if (weapon_sub_type == selected_weapon)

  00aa4	8b 45 90	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00aa7	3b 45 8c	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00aaa	75 16		 jne	 SHORT $LN54@draw_weapo

; 4113 : 		{
; 4114 : 			set_mono_font_colour (MFD_COLOUR1);

  00aac	b8 04 00 00 00	 mov	 eax, 4
  00ab1	6b c8 00	 imul	 ecx, eax, 0
  00ab4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00aba	52		 push	 edx
  00abb	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4115 : 		}
; 4116 : 		else

  00ac0	eb 14		 jmp	 SHORT $LN55@draw_weapo
$LN54@draw_weapo:

; 4117 : 		{
; 4118 : 			set_mono_font_colour (MFD_COLOUR4);

  00ac2	b8 04 00 00 00	 mov	 eax, 4
  00ac7	6b c8 03	 imul	 ecx, eax, 3
  00aca	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ad0	52		 push	 edx
  00ad1	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN55@draw_weapo:

; 4119 : 		}
; 4120 : 
; 4121 : 		//
; 4122 : 		// weapon name and number
; 4123 : 		//
; 4124 : 
; 4125 : 		sprintf (s, "APx%03d", number);

  00ad6	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  00ad9	50		 push	 eax
  00ada	68 00 00 00 00	 push	 OFFSET ??_C@_07GFPICJEB@APx?$CF03d@
  00adf	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00ae2	51		 push	 ecx
  00ae3	e8 00 00 00 00	 call	 _sprintf
  00ae8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4126 : 
; 4127 : 		set_2d_mono_font_position (0.0, -0.5);

  00aeb	51		 push	 ecx
  00aec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00af4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00af9	51		 push	 ecx
  00afa	0f 57 c0	 xorps	 xmm0, xmm0
  00afd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b02	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4128 : 
; 4129 : 		x_adjust = get_mono_font_string_width (s) * -0.5;

  00b07	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00b0a	50		 push	 eax
  00b0b	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00b10	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv1241[ebp]
  00b16	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1241[ebp]
  00b1e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  00b26	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b2a	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 4130 : 
; 4131 : 		set_mono_font_rel_position (x_adjust, y_adjust);

  00b2f	51		 push	 ecx
  00b30	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00b35	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b3a	51		 push	 ecx
  00b3b	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  00b40	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b45	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4132 : 
; 4133 : 		print_mono_font_string (s);

  00b4a	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00b4d	50		 push	 eax
  00b4e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4134 : 
; 4135 : 		//
; 4136 : 		// lines
; 4137 : 		//
; 4138 : 
; 4139 : 		if (draw_large_mfd)

  00b53	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00b5a	0f 84 46 01 00
	00		 je	 $LN56@draw_weapo

; 4140 : 		{
; 4141 : 			draw_2d_half_thick_line (0.2375, -0.26, 0.2375, -0.425, MFD_COLOUR_YELLOW);

  00b60	b8 04 00 00 00	 mov	 eax, 4
  00b65	6b c8 0f	 imul	 ecx, eax, 15
  00b68	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b6e	52		 push	 edx
  00b6f	51		 push	 ecx
  00b70	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bed9999a
  00b78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b7d	51		 push	 ecx
  00b7e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e733333
  00b86	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b8b	51		 push	 ecx
  00b8c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be851eb8
  00b94	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b99	51		 push	 ecx
  00b9a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e733333
  00ba2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ba7	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 4142 : 
; 4143 : 			draw_2d_half_thick_line (0.1875, -0.425, 0.2375, -0.425, MFD_COLOUR_YELLOW);

  00bac	b8 04 00 00 00	 mov	 eax, 4
  00bb1	6b c8 0f	 imul	 ecx, eax, 15
  00bb4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00bba	52		 push	 edx
  00bbb	51		 push	 ecx
  00bbc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bed9999a
  00bc4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bc9	51		 push	 ecx
  00bca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e733333
  00bd2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bd7	51		 push	 ecx
  00bd8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bed9999a
  00be0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00be5	51		 push	 ecx
  00be6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e400000
  00bee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bf3	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 4144 : 
; 4145 : 			if (ka50_damage.gun_jammed)

  00bf8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  00bfd	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  00c00	83 e0 01	 and	 eax, 1
  00c03	0f 84 98 00 00
	00		 je	 $LN58@draw_weapo

; 4146 : 			{
; 4147 : 				draw_2d_half_thick_line (0.2375 - 0.05, -0.215 - 0.05, 0.2375 + 0.05, -0.215 + 0.05, MFD_COLOUR1);

  00c09	b8 04 00 00 00	 mov	 eax, 4
  00c0e	6b c8 00	 imul	 ecx, eax, 0
  00c11	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c17	52		 push	 edx
  00c18	51		 push	 ecx
  00c19	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be28f5c3
  00c21	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c26	51		 push	 ecx
  00c27	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e933333
  00c2f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c34	51		 push	 ecx
  00c35	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be87ae14
  00c3d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c42	51		 push	 ecx
  00c43	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e400000
  00c4b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c50	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 4148 : 
; 4149 : 				draw_2d_half_thick_line (0.2375 + 0.05, -0.215 - 0.05, 0.2375 - 0.05, -0.215 + 0.05, MFD_COLOUR1);

  00c55	b8 04 00 00 00	 mov	 eax, 4
  00c5a	6b c8 00	 imul	 ecx, eax, 0
  00c5d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c63	52		 push	 edx
  00c64	51		 push	 ecx
  00c65	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be28f5c3
  00c6d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c72	51		 push	 ecx
  00c73	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e400000
  00c7b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c80	51		 push	 ecx
  00c81	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be87ae14
  00c89	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c8e	51		 push	 ecx
  00c8f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e933333
  00c97	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c9c	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN58@draw_weapo:

; 4150 : 			}
; 4151 : 		}
; 4152 : 		else

  00ca1	e9 41 01 00 00	 jmp	 $LN59@draw_weapo
$LN56@draw_weapo:

; 4153 : 		{
; 4154 : 			draw_2d_line (0.233, -0.27, 0.233, -0.42, MFD_COLOUR_YELLOW);

  00ca6	b8 04 00 00 00	 mov	 eax, 4
  00cab	6b c8 0f	 imul	 ecx, eax, 15
  00cae	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00cb4	52		 push	 edx
  00cb5	51		 push	 ecx
  00cb6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bed70a3d
  00cbe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cc3	51		 push	 ecx
  00cc4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6e978d
  00ccc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cd1	51		 push	 ecx
  00cd2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8a3d71
  00cda	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cdf	51		 push	 ecx
  00ce0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6e978d
  00ce8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ced	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4155 : 
; 4156 : 			draw_2d_line (0.2, -0.42, 0.233, -0.42, MFD_COLOUR_YELLOW);

  00cf2	b8 04 00 00 00	 mov	 eax, 4
  00cf7	6b c8 0f	 imul	 ecx, eax, 15
  00cfa	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00d00	52		 push	 edx
  00d01	51		 push	 ecx
  00d02	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bed70a3d
  00d0a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d0f	51		 push	 ecx
  00d10	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6e978d
  00d18	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d1d	51		 push	 ecx
  00d1e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bed70a3d
  00d26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d2b	51		 push	 ecx
  00d2c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00d34	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d39	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4157 : 
; 4158 : 			if (ka50_damage.gun_jammed)

  00d3e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  00d43	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  00d46	83 e0 01	 and	 eax, 1
  00d49	0f 84 98 00 00
	00		 je	 $LN59@draw_weapo

; 4159 : 			{
; 4160 : 				draw_2d_line (0.235 - 0.05, -0.22 - 0.05, 0.235 + 0.05, -0.22 + 0.05, MFD_COLOUR1);

  00d4f	b8 04 00 00 00	 mov	 eax, 4
  00d54	6b c8 00	 imul	 ecx, eax, 0
  00d57	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00d5d	52		 push	 edx
  00d5e	51		 push	 ecx
  00d5f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be2e147b
  00d67	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d6c	51		 push	 ecx
  00d6d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e91eb85
  00d75	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d7a	51		 push	 ecx
  00d7b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8a3d71
  00d83	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d88	51		 push	 ecx
  00d89	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e3d70a4
  00d91	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d96	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4161 : 
; 4162 : 				draw_2d_line (0.235 + 0.05, -0.22 - 0.05, 0.235 - 0.05, -0.22 + 0.05, MFD_COLOUR1);

  00d9b	b8 04 00 00 00	 mov	 eax, 4
  00da0	6b c8 00	 imul	 ecx, eax, 0
  00da3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00da9	52		 push	 edx
  00daa	51		 push	 ecx
  00dab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be2e147b
  00db3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00db8	51		 push	 ecx
  00db9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e3d70a4
  00dc1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dc6	51		 push	 ecx
  00dc7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8a3d71
  00dcf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dd4	51		 push	 ecx
  00dd5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e91eb85
  00ddd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00de2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN59@draw_weapo:

; 4163 : 			}
; 4164 : 		}
; 4165 : 	}
; 4166 : 
; 4167 : 	////////////////////////////////////////
; 4168 : 	//
; 4169 : 	// lh inner pylon
; 4170 : 	//
; 4171 : 	////////////////////////////////////////
; 4172 : 
; 4173 : 	result = get_local_entity_weapon_hardpoint_info (en, KA50_LHS_INNER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, &weapon_sub_type, &number, &damaged);

  00de7	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  00dea	50		 push	 eax
  00deb	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  00dee	51		 push	 ecx
  00def	8d 55 90	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  00df2	52		 push	 edx
  00df3	6a 00		 push	 0
  00df5	6a 01		 push	 1
  00df7	8b 45 94	 mov	 eax, DWORD PTR _en$[ebp]
  00dfa	50		 push	 eax
  00dfb	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  00e00	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 4174 : 
; 4175 : 	if (result)

  00e03	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  00e07	0f 84 f7 02 00
	00		 je	 $LN66@draw_weapo

; 4176 : 	{
; 4177 : 		//
; 4178 : 		// selected weapon
; 4179 : 		//
; 4180 : 
; 4181 : 		if (weapon_sub_type == selected_weapon)

  00e0d	8b 45 90	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  00e10	3b 45 8c	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  00e13	75 16		 jne	 SHORT $LN61@draw_weapo

; 4182 : 		{
; 4183 : 			set_mono_font_colour (MFD_COLOUR1);

  00e15	b8 04 00 00 00	 mov	 eax, 4
  00e1a	6b c8 00	 imul	 ecx, eax, 0
  00e1d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e23	52		 push	 edx
  00e24	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4184 : 		}
; 4185 : 		else

  00e29	eb 14		 jmp	 SHORT $LN62@draw_weapo
$LN61@draw_weapo:

; 4186 : 		{
; 4187 : 			set_mono_font_colour (MFD_COLOUR4);

  00e2b	b8 04 00 00 00	 mov	 eax, 4
  00e30	6b c8 03	 imul	 ecx, eax, 3
  00e33	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e39	52		 push	 edx
  00e3a	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN62@draw_weapo:

; 4188 : 		}
; 4189 : 
; 4190 : 		//
; 4191 : 		// number
; 4192 : 		//
; 4193 : 
; 4194 : 		sprintf (s, "x%02d", number);

  00e3f	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  00e42	50		 push	 eax
  00e43	68 00 00 00 00	 push	 OFFSET ??_C@_05HGDIBGHI@x?$CF02d@
  00e48	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  00e4b	51		 push	 ecx
  00e4c	e8 00 00 00 00	 call	 _sprintf
  00e51	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4195 : 
; 4196 : 		set_2d_mono_font_position (-0.45, -0.6);

  00e54	51		 push	 ecx
  00e55	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  00e5d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e62	51		 push	 ecx
  00e63	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bee66666
  00e6b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e70	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4197 : 
; 4198 : 		print_mono_font_string (s);

  00e75	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  00e78	50		 push	 eax
  00e79	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4199 : 
; 4200 : 		//
; 4201 : 		// lines
; 4202 : 		//
; 4203 : 
; 4204 : 		if (draw_large_mfd)

  00e7e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00e85	0f 84 3f 01 00
	00		 je	 $LN63@draw_weapo

; 4205 : 		{
; 4206 : 			draw_2d_half_thick_line (-0.52, -0.14, -0.52, -0.63, MFD_COLOUR_YELLOW);

  00e8b	b8 04 00 00 00	 mov	 eax, 4
  00e90	6b c8 0f	 imul	 ecx, eax, 15
  00e93	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e99	52		 push	 edx
  00e9a	51		 push	 ecx
  00e9b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  00ea3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ea8	51		 push	 ecx
  00ea9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf051eb8
  00eb1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eb6	51		 push	 ecx
  00eb7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0f5c29
  00ebf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ec4	51		 push	 ecx
  00ec5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf051eb8
  00ecd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ed2	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 4207 : 
; 4208 : 			draw_2d_half_thick_line (-0.47, -0.63, -0.52, -0.63, MFD_COLOUR_YELLOW);

  00ed7	b8 04 00 00 00	 mov	 eax, 4
  00edc	6b c8 0f	 imul	 ecx, eax, 15
  00edf	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ee5	52		 push	 edx
  00ee6	51		 push	 ecx
  00ee7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  00eef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ef4	51		 push	 ecx
  00ef5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf051eb8
  00efd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f02	51		 push	 ecx
  00f03	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  00f0b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f10	51		 push	 ecx
  00f11	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bef0a3d7
  00f19	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f1e	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 4209 : 
; 4210 : 			if (damaged)

  00f23	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00f27	0f 84 98 00 00
	00		 je	 $LN65@draw_weapo

; 4211 : 			{
; 4212 : 				draw_2d_half_thick_line (-0.52 - 0.05, -0.07 - 0.05, -0.52 + 0.05, -0.07 + 0.05, MFD_COLOUR1);

  00f2d	b8 04 00 00 00	 mov	 eax, 4
  00f32	6b c8 00	 imul	 ecx, eax, 0
  00f35	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f3b	52		 push	 edx
  00f3c	51		 push	 ecx
  00f3d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  00f45	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f4a	51		 push	 ecx
  00f4b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bef0a3d7
  00f53	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f58	51		 push	 ecx
  00f59	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  00f61	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f66	51		 push	 ecx
  00f67	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf11eb85
  00f6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f74	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 4213 : 
; 4214 : 				draw_2d_half_thick_line (-0.52 + 0.05, -0.07 - 0.05, -0.52 - 0.05, -0.07 + 0.05, MFD_COLOUR1);

  00f79	b8 04 00 00 00	 mov	 eax, 4
  00f7e	6b c8 00	 imul	 ecx, eax, 0
  00f81	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f87	52		 push	 edx
  00f88	51		 push	 ecx
  00f89	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  00f91	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f96	51		 push	 ecx
  00f97	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf11eb85
  00f9f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fa4	51		 push	 ecx
  00fa5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  00fad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fb2	51		 push	 ecx
  00fb3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bef0a3d7
  00fbb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fc0	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN65@draw_weapo:

; 4215 : 			}
; 4216 : 		}
; 4217 : 		else

  00fc5	e9 3a 01 00 00	 jmp	 $LN66@draw_weapo
$LN63@draw_weapo:

; 4218 : 		{
; 4219 : 			draw_2d_line (-0.52, -0.16, -0.52, -0.63, MFD_COLOUR_YELLOW);

  00fca	b8 04 00 00 00	 mov	 eax, 4
  00fcf	6b c8 0f	 imul	 ecx, eax, 15
  00fd2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00fd8	52		 push	 edx
  00fd9	51		 push	 ecx
  00fda	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  00fe2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fe7	51		 push	 ecx
  00fe8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf051eb8
  00ff0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ff5	51		 push	 ecx
  00ff6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  00ffe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01003	51		 push	 ecx
  01004	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf051eb8
  0100c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01011	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4220 : 
; 4221 : 			draw_2d_line (-0.47, -0.63, -0.52, -0.63, MFD_COLOUR_YELLOW);

  01016	b8 04 00 00 00	 mov	 eax, 4
  0101b	6b c8 0f	 imul	 ecx, eax, 15
  0101e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01024	52		 push	 edx
  01025	51		 push	 ecx
  01026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  0102e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01033	51		 push	 ecx
  01034	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf051eb8
  0103c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01041	51		 push	 ecx
  01042	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  0104a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0104f	51		 push	 ecx
  01050	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bef0a3d7
  01058	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0105d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4222 : 
; 4223 : 			if (damaged)

  01062	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01066	0f 84 98 00 00
	00		 je	 $LN66@draw_weapo

; 4224 : 			{
; 4225 : 				draw_2d_line (-0.52 - 0.05, -0.07 - 0.05, -0.52 + 0.05, -0.07 + 0.05, MFD_COLOUR1);

  0106c	b8 04 00 00 00	 mov	 eax, 4
  01071	6b c8 00	 imul	 ecx, eax, 0
  01074	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0107a	52		 push	 edx
  0107b	51		 push	 ecx
  0107c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  01084	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01089	51		 push	 ecx
  0108a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bef0a3d7
  01092	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01097	51		 push	 ecx
  01098	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  010a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010a5	51		 push	 ecx
  010a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf11eb85
  010ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010b3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4226 : 
; 4227 : 				draw_2d_line (-0.52 + 0.05, -0.07 - 0.05, -0.52 - 0.05, -0.07 + 0.05, MFD_COLOUR1);

  010b8	b8 04 00 00 00	 mov	 eax, 4
  010bd	6b c8 00	 imul	 ecx, eax, 0
  010c0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  010c6	52		 push	 edx
  010c7	51		 push	 ecx
  010c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  010d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010d5	51		 push	 ecx
  010d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf11eb85
  010de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010e3	51		 push	 ecx
  010e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  010ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010f1	51		 push	 ecx
  010f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bef0a3d7
  010fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010ff	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN66@draw_weapo:

; 4228 : 			}
; 4229 : 		}
; 4230 : 	}
; 4231 : 
; 4232 : 	////////////////////////////////////////
; 4233 : 	//
; 4234 : 	// rh inner pylon
; 4235 : 	//
; 4236 : 	////////////////////////////////////////
; 4237 : 
; 4238 : 	result = get_local_entity_weapon_hardpoint_info (en, KA50_RHS_INNER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, &weapon_sub_type, &number, &damaged);

  01104	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  01107	50		 push	 eax
  01108	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  0110b	51		 push	 ecx
  0110c	8d 55 90	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  0110f	52		 push	 edx
  01110	6a 00		 push	 0
  01112	6a 02		 push	 2
  01114	8b 45 94	 mov	 eax, DWORD PTR _en$[ebp]
  01117	50		 push	 eax
  01118	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  0111d	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 4239 : 
; 4240 : 	if (result)

  01120	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  01124	0f 84 ad 03 00
	00		 je	 $LN73@draw_weapo

; 4241 : 	{
; 4242 : 		//
; 4243 : 		// selected weapon
; 4244 : 		//
; 4245 : 
; 4246 : 		if (weapon_sub_type == selected_weapon)

  0112a	8b 45 90	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  0112d	3b 45 8c	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01130	75 16		 jne	 SHORT $LN68@draw_weapo

; 4247 : 		{
; 4248 : 			set_mono_font_colour (MFD_COLOUR1);

  01132	b8 04 00 00 00	 mov	 eax, 4
  01137	6b c8 00	 imul	 ecx, eax, 0
  0113a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01140	52		 push	 edx
  01141	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4249 : 		}
; 4250 : 		else

  01146	eb 14		 jmp	 SHORT $LN69@draw_weapo
$LN68@draw_weapo:

; 4251 : 		{
; 4252 : 			set_mono_font_colour (MFD_COLOUR4);

  01148	b8 04 00 00 00	 mov	 eax, 4
  0114d	6b c8 03	 imul	 ecx, eax, 3
  01150	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01156	52		 push	 edx
  01157	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN69@draw_weapo:

; 4253 : 		}
; 4254 : 
; 4255 : 		//
; 4256 : 		// number
; 4257 : 		//
; 4258 : 
; 4259 : 		sprintf (s, "x%02d", number);

  0115c	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  0115f	50		 push	 eax
  01160	68 00 00 00 00	 push	 OFFSET ??_C@_05HGDIBGHI@x?$CF02d@
  01165	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  01168	51		 push	 ecx
  01169	e8 00 00 00 00	 call	 _sprintf
  0116e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4260 : 
; 4261 : 		set_2d_mono_font_position (0.45, -0.6);

  01171	51		 push	 ecx
  01172	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  0117a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0117f	51		 push	 ecx
  01180	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  01188	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0118d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4262 : 
; 4263 : 		x_adjust = -get_mono_font_string_width (s);

  01192	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01195	50		 push	 eax
  01196	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0119b	d9 9d 48 ff ff
	ff		 fstp	 DWORD PTR tv1446[ebp]
  011a1	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv1446[ebp]
  011a9	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  011b0	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 4264 : 
; 4265 : 		set_mono_font_rel_position (x_adjust, 0.0);

  011b5	51		 push	 ecx
  011b6	0f 57 c0	 xorps	 xmm0, xmm0
  011b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011be	51		 push	 ecx
  011bf	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  011c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011c9	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4266 : 
; 4267 : 		print_mono_font_string (s);

  011ce	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  011d1	50		 push	 eax
  011d2	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4268 : 
; 4269 : 		//
; 4270 : 		// weapon name
; 4271 : 		//
; 4272 : 
; 4273 : 		set_2d_mono_font_position (0.0, -0.6);

  011d7	51		 push	 ecx
  011d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  011e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011e5	51		 push	 ecx
  011e6	0f 57 c0	 xorps	 xmm0, xmm0
  011e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011ee	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4274 : 
; 4275 : 		x_adjust = get_mono_font_string_width (weapon_database[weapon_sub_type].mfd_name) * -0.5;

  011f3	69 45 90 e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  011fa	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+8]
  01200	51		 push	 ecx
  01201	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01206	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv1461[ebp]
  0120c	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1461[ebp]
  01214	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  0121c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01220	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 4276 : 
; 4277 : 		set_mono_font_rel_position (x_adjust, 0.0);

  01225	51		 push	 ecx
  01226	0f 57 c0	 xorps	 xmm0, xmm0
  01229	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0122e	51		 push	 ecx
  0122f	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01234	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01239	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4278 : 
; 4279 : 		print_mono_font_string (weapon_database[weapon_sub_type].mfd_name);

  0123e	69 45 90 e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  01245	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+8]
  0124b	51		 push	 ecx
  0124c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4280 : 
; 4281 : 		//
; 4282 : 		// lines
; 4283 : 		//
; 4284 : 
; 4285 : 		if (draw_large_mfd)

  01251	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01258	0f 84 3f 01 00
	00		 je	 $LN70@draw_weapo

; 4286 : 		{
; 4287 : 			draw_2d_half_thick_line (0.52, -0.14, 0.52, -0.63, MFD_COLOUR_YELLOW);

  0125e	b8 04 00 00 00	 mov	 eax, 4
  01263	6b c8 0f	 imul	 ecx, eax, 15
  01266	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0126c	52		 push	 edx
  0126d	51		 push	 ecx
  0126e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  01276	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0127b	51		 push	 ecx
  0127c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f051eb8
  01284	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01289	51		 push	 ecx
  0128a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0f5c29
  01292	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01297	51		 push	 ecx
  01298	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f051eb8
  012a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012a5	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 4288 : 
; 4289 : 			draw_2d_half_thick_line (0.47, -0.63, 0.52, -0.63, MFD_COLOUR_YELLOW);

  012aa	b8 04 00 00 00	 mov	 eax, 4
  012af	6b c8 0f	 imul	 ecx, eax, 15
  012b2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  012b8	52		 push	 edx
  012b9	51		 push	 ecx
  012ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  012c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012c7	51		 push	 ecx
  012c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f051eb8
  012d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012d5	51		 push	 ecx
  012d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  012de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012e3	51		 push	 ecx
  012e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef0a3d7
  012ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012f1	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 4290 : 
; 4291 : 			if (damaged)

  012f6	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  012fa	0f 84 98 00 00
	00		 je	 $LN72@draw_weapo

; 4292 : 			{
; 4293 : 				draw_2d_half_thick_line (0.52 - 0.05, -0.07 - 0.05, 0.52 + 0.05, -0.07 + 0.05, MFD_COLOUR1);

  01300	b8 04 00 00 00	 mov	 eax, 4
  01305	6b c8 00	 imul	 ecx, eax, 0
  01308	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0130e	52		 push	 edx
  0130f	51		 push	 ecx
  01310	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  01318	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0131d	51		 push	 ecx
  0131e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f11eb85
  01326	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0132b	51		 push	 ecx
  0132c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  01334	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01339	51		 push	 ecx
  0133a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef0a3d7
  01342	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01347	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 4294 : 
; 4295 : 				draw_2d_half_thick_line (0.52 + 0.05, -0.07 - 0.05, 0.52 - 0.05, -0.07 + 0.05, MFD_COLOUR1);

  0134c	b8 04 00 00 00	 mov	 eax, 4
  01351	6b c8 00	 imul	 ecx, eax, 0
  01354	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0135a	52		 push	 edx
  0135b	51		 push	 ecx
  0135c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  01364	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01369	51		 push	 ecx
  0136a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef0a3d7
  01372	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01377	51		 push	 ecx
  01378	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  01380	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01385	51		 push	 ecx
  01386	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f11eb85
  0138e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01393	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN72@draw_weapo:

; 4296 : 			}
; 4297 : 		}
; 4298 : 		else

  01398	e9 3a 01 00 00	 jmp	 $LN73@draw_weapo
$LN70@draw_weapo:

; 4299 : 		{
; 4300 : 			draw_2d_line (0.52, -0.16, 0.52, -0.63, MFD_COLOUR_YELLOW);

  0139d	b8 04 00 00 00	 mov	 eax, 4
  013a2	6b c8 0f	 imul	 ecx, eax, 15
  013a5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  013ab	52		 push	 edx
  013ac	51		 push	 ecx
  013ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  013b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013ba	51		 push	 ecx
  013bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f051eb8
  013c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013c8	51		 push	 ecx
  013c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  013d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013d6	51		 push	 ecx
  013d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f051eb8
  013df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013e4	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4301 : 
; 4302 : 			draw_2d_line (0.47, -0.63, 0.52, -0.63, MFD_COLOUR_YELLOW);

  013e9	b8 04 00 00 00	 mov	 eax, 4
  013ee	6b c8 0f	 imul	 ecx, eax, 15
  013f1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  013f7	52		 push	 edx
  013f8	51		 push	 ecx
  013f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  01401	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01406	51		 push	 ecx
  01407	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f051eb8
  0140f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01414	51		 push	 ecx
  01415	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2147ae
  0141d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01422	51		 push	 ecx
  01423	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef0a3d7
  0142b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01430	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4303 : 
; 4304 : 			if (damaged)

  01435	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01439	0f 84 98 00 00
	00		 je	 $LN73@draw_weapo

; 4305 : 			{
; 4306 : 				draw_2d_line (0.52 - 0.05, -0.07 - 0.05, 0.52 + 0.05, -0.07 + 0.05, MFD_COLOUR1);

  0143f	b8 04 00 00 00	 mov	 eax, 4
  01444	6b c8 00	 imul	 ecx, eax, 0
  01447	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0144d	52		 push	 edx
  0144e	51		 push	 ecx
  0144f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  01457	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0145c	51		 push	 ecx
  0145d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f11eb85
  01465	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0146a	51		 push	 ecx
  0146b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  01473	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01478	51		 push	 ecx
  01479	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef0a3d7
  01481	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01486	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4307 : 
; 4308 : 				draw_2d_line (0.52 + 0.05, -0.07 - 0.05, 0.52 - 0.05, -0.07 + 0.05, MFD_COLOUR1);

  0148b	b8 04 00 00 00	 mov	 eax, 4
  01490	6b c8 00	 imul	 ecx, eax, 0
  01493	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01499	52		 push	 edx
  0149a	51		 push	 ecx
  0149b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  014a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014a8	51		 push	 ecx
  014a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef0a3d7
  014b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014b6	51		 push	 ecx
  014b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  014bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014c4	51		 push	 ecx
  014c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f11eb85
  014cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014d2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN73@draw_weapo:

; 4309 : 			}
; 4310 : 		}
; 4311 : 	}
; 4312 : 
; 4313 : 	////////////////////////////////////////
; 4314 : 	//
; 4315 : 	// lh outer pylons
; 4316 : 	//
; 4317 : 	////////////////////////////////////////
; 4318 : 
; 4319 : 	result = get_local_entity_weapon_hardpoint_info (en, KA50_LHS_OUTER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, &weapon_sub_type, &number, &damaged);

  014d7	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  014da	50		 push	 eax
  014db	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  014de	51		 push	 ecx
  014df	8d 55 90	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  014e2	52		 push	 edx
  014e3	6a 00		 push	 0
  014e5	6a 03		 push	 3
  014e7	8b 45 94	 mov	 eax, DWORD PTR _en$[ebp]
  014ea	50		 push	 eax
  014eb	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  014f0	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 4320 : 
; 4321 : 	if (result)

  014f3	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  014f7	0f 84 10 03 00
	00		 je	 $LN80@draw_weapo

; 4322 : 	{
; 4323 : 		//
; 4324 : 		// selected weapon
; 4325 : 		//
; 4326 : 
; 4327 : 		if (weapon_sub_type == selected_weapon)

  014fd	8b 45 90	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01500	3b 45 8c	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01503	75 16		 jne	 SHORT $LN75@draw_weapo

; 4328 : 		{
; 4329 : 			set_mono_font_colour (MFD_COLOUR1);

  01505	b8 04 00 00 00	 mov	 eax, 4
  0150a	6b c8 00	 imul	 ecx, eax, 0
  0150d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01513	52		 push	 edx
  01514	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4330 : 		}
; 4331 : 		else

  01519	eb 14		 jmp	 SHORT $LN76@draw_weapo
$LN75@draw_weapo:

; 4332 : 		{
; 4333 : 			set_mono_font_colour (MFD_COLOUR4);

  0151b	b8 04 00 00 00	 mov	 eax, 4
  01520	6b c8 03	 imul	 ecx, eax, 3
  01523	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01529	52		 push	 edx
  0152a	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN76@draw_weapo:

; 4334 : 		}
; 4335 : 
; 4336 : 		//
; 4337 : 		// number
; 4338 : 		//
; 4339 : 
; 4340 : 		sprintf (s, "x%02d", number);

  0152f	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  01532	50		 push	 eax
  01533	68 00 00 00 00	 push	 OFFSET ??_C@_05HGDIBGHI@x?$CF02d@
  01538	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  0153b	51		 push	 ecx
  0153c	e8 00 00 00 00	 call	 _sprintf
  01541	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4341 : 
; 4342 : 		set_2d_mono_font_position (-0.45, -0.8);

  01544	51		 push	 ecx
  01545	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  0154d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01552	51		 push	 ecx
  01553	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bee66666
  0155b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01560	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4343 : 
; 4344 : 		set_mono_font_rel_position (0.0, y_adjust);

  01565	51		 push	 ecx
  01566	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0156b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01570	51		 push	 ecx
  01571	0f 57 c0	 xorps	 xmm0, xmm0
  01574	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01579	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4345 : 
; 4346 : 		print_mono_font_string (s);

  0157e	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01581	50		 push	 eax
  01582	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4347 : 
; 4348 : 		//
; 4349 : 		// lines
; 4350 : 		//
; 4351 : 
; 4352 : 		if (draw_large_mfd)

  01587	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0158e	0f 84 3f 01 00
	00		 je	 $LN77@draw_weapo

; 4353 : 		{
; 4354 : 			draw_2d_half_thick_line (-0.695, -0.14, -0.695, -0.785, MFD_COLOUR_YELLOW);

  01594	b8 04 00 00 00	 mov	 eax, 4
  01599	6b c8 0f	 imul	 ecx, eax, 15
  0159c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  015a2	52		 push	 edx
  015a3	51		 push	 ecx
  015a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf48f5c3
  015ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015b1	51		 push	 ecx
  015b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf31eb85
  015ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015bf	51		 push	 ecx
  015c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0f5c29
  015c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015cd	51		 push	 ecx
  015ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf31eb85
  015d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015db	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 4355 : 
; 4356 : 			draw_2d_half_thick_line (-0.47, -0.785, -0.695, -0.785, MFD_COLOUR_YELLOW);

  015e0	b8 04 00 00 00	 mov	 eax, 4
  015e5	6b c8 0f	 imul	 ecx, eax, 15
  015e8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  015ee	52		 push	 edx
  015ef	51		 push	 ecx
  015f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf48f5c3
  015f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015fd	51		 push	 ecx
  015fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf31eb85
  01606	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0160b	51		 push	 ecx
  0160c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf48f5c3
  01614	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01619	51		 push	 ecx
  0161a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bef0a3d7
  01622	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01627	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 4357 : 
; 4358 : 			if (damaged)

  0162c	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01630	0f 84 98 00 00
	00		 je	 $LN79@draw_weapo

; 4359 : 			{
; 4360 : 				draw_2d_half_thick_line (-0.695 - 0.05, -0.07 - 0.05, -0.695 + 0.05, -0.07 + 0.05, MFD_COLOUR1);

  01636	b8 04 00 00 00	 mov	 eax, 4
  0163b	6b c8 00	 imul	 ecx, eax, 0
  0163e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01644	52		 push	 edx
  01645	51		 push	 ecx
  01646	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  0164e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01653	51		 push	 ecx
  01654	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf251eb8
  0165c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01661	51		 push	 ecx
  01662	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  0166a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0166f	51		 push	 ecx
  01670	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3eb852
  01678	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0167d	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 4361 : 
; 4362 : 				draw_2d_half_thick_line (-0.695 + 0.05, -0.07 - 0.05, -0.695 - 0.05, -0.07 + 0.05, MFD_COLOUR1);

  01682	b8 04 00 00 00	 mov	 eax, 4
  01687	6b c8 00	 imul	 ecx, eax, 0
  0168a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01690	52		 push	 edx
  01691	51		 push	 ecx
  01692	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  0169a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0169f	51		 push	 ecx
  016a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3eb852
  016a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016ad	51		 push	 ecx
  016ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  016b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016bb	51		 push	 ecx
  016bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf251eb8
  016c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016c9	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN79@draw_weapo:

; 4363 : 			}
; 4364 : 		}
; 4365 : 		else

  016ce	e9 3a 01 00 00	 jmp	 $LN80@draw_weapo
$LN77@draw_weapo:

; 4366 : 		{
; 4367 : 			draw_2d_line (-0.695, -0.16, -0.695, -0.785, MFD_COLOUR_YELLOW);

  016d3	b8 04 00 00 00	 mov	 eax, 4
  016d8	6b c8 0f	 imul	 ecx, eax, 15
  016db	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  016e1	52		 push	 edx
  016e2	51		 push	 ecx
  016e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf48f5c3
  016eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016f0	51		 push	 ecx
  016f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf31eb85
  016f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016fe	51		 push	 ecx
  016ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  01707	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0170c	51		 push	 ecx
  0170d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf31eb85
  01715	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0171a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4368 : 
; 4369 : 			draw_2d_line (-0.47, -0.785, -0.695, -0.785, MFD_COLOUR_YELLOW);

  0171f	b8 04 00 00 00	 mov	 eax, 4
  01724	6b c8 0f	 imul	 ecx, eax, 15
  01727	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0172d	52		 push	 edx
  0172e	51		 push	 ecx
  0172f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf48f5c3
  01737	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0173c	51		 push	 ecx
  0173d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf31eb85
  01745	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0174a	51		 push	 ecx
  0174b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf48f5c3
  01753	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01758	51		 push	 ecx
  01759	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bef0a3d7
  01761	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01766	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4370 : 
; 4371 : 			if (damaged)

  0176b	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  0176f	0f 84 98 00 00
	00		 je	 $LN80@draw_weapo

; 4372 : 			{
; 4373 : 				draw_2d_line (-0.695 - 0.05, -0.07 - 0.05, -0.695 + 0.05, -0.07 + 0.05, MFD_COLOUR1);

  01775	b8 04 00 00 00	 mov	 eax, 4
  0177a	6b c8 00	 imul	 ecx, eax, 0
  0177d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01783	52		 push	 edx
  01784	51		 push	 ecx
  01785	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  0178d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01792	51		 push	 ecx
  01793	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf251eb8
  0179b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017a0	51		 push	 ecx
  017a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  017a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017ae	51		 push	 ecx
  017af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3eb852
  017b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017bc	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4374 : 
; 4375 : 				draw_2d_line (-0.695 + 0.05, -0.07 - 0.05, -0.695 - 0.05, -0.07 + 0.05, MFD_COLOUR1);

  017c1	b8 04 00 00 00	 mov	 eax, 4
  017c6	6b c8 00	 imul	 ecx, eax, 0
  017c9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  017cf	52		 push	 edx
  017d0	51		 push	 ecx
  017d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  017d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017de	51		 push	 ecx
  017df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf3eb852
  017e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017ec	51		 push	 ecx
  017ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  017f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017fa	51		 push	 ecx
  017fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf251eb8
  01803	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01808	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN80@draw_weapo:

; 4376 : 			}
; 4377 : 		}
; 4378 : 	}
; 4379 : 
; 4380 : 	////////////////////////////////////////
; 4381 : 	//
; 4382 : 	// rh outer pylon
; 4383 : 	//
; 4384 : 	////////////////////////////////////////
; 4385 : 
; 4386 : 	result = get_local_entity_weapon_hardpoint_info (en, KA50_RHS_OUTER_PYLON, ENTITY_SUB_TYPE_WEAPON_NO_WEAPON, &weapon_sub_type, &number, &damaged);

  0180d	8d 45 a0	 lea	 eax, DWORD PTR _damaged$[ebp]
  01810	50		 push	 eax
  01811	8d 4d a4	 lea	 ecx, DWORD PTR _number$[ebp]
  01814	51		 push	 ecx
  01815	8d 55 90	 lea	 edx, DWORD PTR _weapon_sub_type$[ebp]
  01818	52		 push	 edx
  01819	6a 00		 push	 0
  0181b	6a 04		 push	 4
  0181d	8b 45 94	 mov	 eax, DWORD PTR _en$[ebp]
  01820	50		 push	 eax
  01821	e8 00 00 00 00	 call	 ?get_local_entity_weapon_hardpoint_info@@YGHPAUENTITY@@HHPAH11@Z ; get_local_entity_weapon_hardpoint_info
  01826	89 45 a8	 mov	 DWORD PTR _result$[ebp], eax

; 4387 : 
; 4388 : 	if (result)

  01829	83 7d a8 00	 cmp	 DWORD PTR _result$[ebp], 0
  0182d	0f 84 b1 03 00
	00		 je	 $LN87@draw_weapo

; 4389 : 	{
; 4390 : 		//
; 4391 : 		// selected weapon
; 4392 : 		//
; 4393 : 
; 4394 : 		if (weapon_sub_type == selected_weapon)

  01833	8b 45 90	 mov	 eax, DWORD PTR _weapon_sub_type$[ebp]
  01836	3b 45 8c	 cmp	 eax, DWORD PTR _selected_weapon$[ebp]
  01839	75 16		 jne	 SHORT $LN82@draw_weapo

; 4395 : 		{
; 4396 : 			set_mono_font_colour (MFD_COLOUR1);

  0183b	b8 04 00 00 00	 mov	 eax, 4
  01840	6b c8 00	 imul	 ecx, eax, 0
  01843	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01849	52		 push	 edx
  0184a	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4397 : 		}
; 4398 : 		else

  0184f	eb 14		 jmp	 SHORT $LN83@draw_weapo
$LN82@draw_weapo:

; 4399 : 		{
; 4400 : 			set_mono_font_colour (MFD_COLOUR4);

  01851	b8 04 00 00 00	 mov	 eax, 4
  01856	6b c8 03	 imul	 ecx, eax, 3
  01859	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0185f	52		 push	 edx
  01860	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN83@draw_weapo:

; 4401 : 		}
; 4402 : 
; 4403 : 		//
; 4404 : 		// number
; 4405 : 		//
; 4406 : 
; 4407 : 		sprintf (s, "x%02d", number);

  01865	8b 45 a4	 mov	 eax, DWORD PTR _number$[ebp]
  01868	50		 push	 eax
  01869	68 00 00 00 00	 push	 OFFSET ??_C@_05HGDIBGHI@x?$CF02d@
  0186e	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  01871	51		 push	 ecx
  01872	e8 00 00 00 00	 call	 _sprintf
  01877	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4408 : 
; 4409 : 		set_2d_mono_font_position (0.45, -0.8);

  0187a	51		 push	 ecx
  0187b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  01883	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01888	51		 push	 ecx
  01889	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee66666
  01891	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01896	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4410 : 
; 4411 : 		x_adjust = -get_mono_font_string_width (s);

  0189b	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  0189e	50		 push	 eax
  0189f	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  018a4	d9 9d 48 ff ff
	ff		 fstp	 DWORD PTR tv1668[ebp]
  018aa	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR tv1668[ebp]
  018b2	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  018b9	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 4412 : 
; 4413 : 		set_mono_font_rel_position (x_adjust, y_adjust);

  018be	51		 push	 ecx
  018bf	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  018c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018c9	51		 push	 ecx
  018ca	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  018cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018d4	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4414 : 
; 4415 : 		print_mono_font_string (s);

  018d9	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  018dc	50		 push	 eax
  018dd	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4416 : 
; 4417 : 		//
; 4418 : 		// weapon name
; 4419 : 		//
; 4420 : 
; 4421 : 		set_2d_mono_font_position (0.0, -0.8);

  018e2	51		 push	 ecx
  018e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  018eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018f0	51		 push	 ecx
  018f1	0f 57 c0	 xorps	 xmm0, xmm0
  018f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018f9	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4422 : 
; 4423 : 		x_adjust = get_mono_font_string_width (weapon_database[weapon_sub_type].mfd_name) * -0.5;

  018fe	69 45 90 e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  01905	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+8]
  0190b	51		 push	 ecx
  0190c	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01911	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv1683[ebp]
  01917	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1683[ebp]
  0191f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01927	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0192b	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 4424 : 
; 4425 : 		set_mono_font_rel_position (x_adjust, y_adjust);

  01930	51		 push	 ecx
  01931	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01936	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0193b	51		 push	 ecx
  0193c	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01941	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01946	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4426 : 
; 4427 : 		print_mono_font_string (weapon_database[weapon_sub_type].mfd_name);

  0194b	69 45 90 e0 00
	00 00		 imul	 eax, DWORD PTR _weapon_sub_type$[ebp], 224
  01952	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_database@@3PAUWEAPON_DATA@@A[eax+8]
  01958	51		 push	 ecx
  01959	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4428 : 
; 4429 : 		//
; 4430 : 		// lines
; 4431 : 		//
; 4432 : 
; 4433 : 		if (draw_large_mfd)

  0195e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01965	0f 84 3f 01 00
	00		 je	 $LN84@draw_weapo

; 4434 : 		{
; 4435 : 			draw_2d_half_thick_line (0.695, -0.14, 0.695, -0.785, MFD_COLOUR_YELLOW);

  0196b	b8 04 00 00 00	 mov	 eax, 4
  01970	6b c8 0f	 imul	 ecx, eax, 15
  01973	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01979	52		 push	 edx
  0197a	51		 push	 ecx
  0197b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf48f5c3
  01983	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01988	51		 push	 ecx
  01989	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f31eb85
  01991	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01996	51		 push	 ecx
  01997	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be0f5c29
  0199f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019a4	51		 push	 ecx
  019a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f31eb85
  019ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019b2	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 4436 : 
; 4437 : 			draw_2d_half_thick_line (0.47, -0.785, 0.695, -0.785, MFD_COLOUR_YELLOW);

  019b7	b8 04 00 00 00	 mov	 eax, 4
  019bc	6b c8 0f	 imul	 ecx, eax, 15
  019bf	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  019c5	52		 push	 edx
  019c6	51		 push	 ecx
  019c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf48f5c3
  019cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019d4	51		 push	 ecx
  019d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f31eb85
  019dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019e2	51		 push	 ecx
  019e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf48f5c3
  019eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019f0	51		 push	 ecx
  019f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef0a3d7
  019f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019fe	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 4438 : 
; 4439 : 			if (damaged)

  01a03	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01a07	0f 84 98 00 00
	00		 je	 $LN86@draw_weapo

; 4440 : 			{
; 4441 : 				draw_2d_half_thick_line (0.695 - 0.05, -0.07 - 0.05, 0.695 + 0.05, -0.07 + 0.05, MFD_COLOUR1);

  01a0d	b8 04 00 00 00	 mov	 eax, 4
  01a12	6b c8 00	 imul	 ecx, eax, 0
  01a15	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a1b	52		 push	 edx
  01a1c	51		 push	 ecx
  01a1d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  01a25	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a2a	51		 push	 ecx
  01a2b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3eb852
  01a33	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a38	51		 push	 ecx
  01a39	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  01a41	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a46	51		 push	 ecx
  01a47	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f251eb8
  01a4f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a54	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 4442 : 
; 4443 : 				draw_2d_half_thick_line (0.695 + 0.05, -0.07 - 0.05, 0.695 - 0.05, -0.07 + 0.05, MFD_COLOUR1);

  01a59	b8 04 00 00 00	 mov	 eax, 4
  01a5e	6b c8 00	 imul	 ecx, eax, 0
  01a61	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01a67	52		 push	 edx
  01a68	51		 push	 ecx
  01a69	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  01a71	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a76	51		 push	 ecx
  01a77	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f251eb8
  01a7f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a84	51		 push	 ecx
  01a85	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  01a8d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a92	51		 push	 ecx
  01a93	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3eb852
  01a9b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aa0	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line
$LN86@draw_weapo:

; 4444 : 			}
; 4445 : 		}
; 4446 : 		else

  01aa5	e9 3a 01 00 00	 jmp	 $LN87@draw_weapo
$LN84@draw_weapo:

; 4447 : 		{
; 4448 : 			draw_2d_line (0.695, -0.16, 0.695, -0.785, MFD_COLOUR_YELLOW);

  01aaa	b8 04 00 00 00	 mov	 eax, 4
  01aaf	6b c8 0f	 imul	 ecx, eax, 15
  01ab2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01ab8	52		 push	 edx
  01ab9	51		 push	 ecx
  01aba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf48f5c3
  01ac2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ac7	51		 push	 ecx
  01ac8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f31eb85
  01ad0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ad5	51		 push	 ecx
  01ad6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be23d70a
  01ade	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ae3	51		 push	 ecx
  01ae4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f31eb85
  01aec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01af1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4449 : 
; 4450 : 			draw_2d_line (0.47, -0.785, 0.695, -0.785, MFD_COLOUR_YELLOW);

  01af6	b8 04 00 00 00	 mov	 eax, 4
  01afb	6b c8 0f	 imul	 ecx, eax, 15
  01afe	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01b04	52		 push	 edx
  01b05	51		 push	 ecx
  01b06	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf48f5c3
  01b0e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b13	51		 push	 ecx
  01b14	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f31eb85
  01b1c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b21	51		 push	 ecx
  01b22	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf48f5c3
  01b2a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b2f	51		 push	 ecx
  01b30	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ef0a3d7
  01b38	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b3d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4451 : 
; 4452 : 			if (damaged)

  01b42	83 7d a0 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  01b46	0f 84 98 00 00
	00		 je	 $LN87@draw_weapo

; 4453 : 			{
; 4454 : 				draw_2d_line (0.695 - 0.05, -0.07 - 0.05, 0.695 + 0.05, -0.07 + 0.05, MFD_COLOUR1);

  01b4c	b8 04 00 00 00	 mov	 eax, 4
  01b51	6b c8 00	 imul	 ecx, eax, 0
  01b54	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01b5a	52		 push	 edx
  01b5b	51		 push	 ecx
  01b5c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  01b64	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b69	51		 push	 ecx
  01b6a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3eb852
  01b72	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b77	51		 push	 ecx
  01b78	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  01b80	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b85	51		 push	 ecx
  01b86	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f251eb8
  01b8e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b93	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 4455 : 
; 4456 : 				draw_2d_line (0.695 + 0.05, -0.07 - 0.05, 0.695 - 0.05, -0.07 + 0.05, MFD_COLOUR1);

  01b98	b8 04 00 00 00	 mov	 eax, 4
  01b9d	6b c8 00	 imul	 ecx, eax, 0
  01ba0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01ba6	52		 push	 edx
  01ba7	51		 push	 ecx
  01ba8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bca3d70a
  01bb0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bb5	51		 push	 ecx
  01bb6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f251eb8
  01bbe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bc3	51		 push	 ecx
  01bc4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdf5c28f
  01bcc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bd1	51		 push	 ecx
  01bd2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3eb852
  01bda	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bdf	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN87@draw_weapo:

; 4457 : 			}
; 4458 : 		}
; 4459 : 	}
; 4460 : 
; 4461 : 	////////////////////////////////////////
; 4462 : 	//
; 4463 : 	// rocket salvo
; 4464 : 	//
; 4465 : 	////////////////////////////////////////
; 4466 : 
; 4467 : 	if ((selected_weapon == ENTITY_SUB_TYPE_WEAPON_S8) || (selected_weapon == ENTITY_SUB_TYPE_WEAPON_S13))

  01be4	83 7d 8c 22	 cmp	 DWORD PTR _selected_weapon$[ebp], 34 ; 00000022H
  01be8	74 06		 je	 SHORT $LN90@draw_weapo
  01bea	83 7d 8c 23	 cmp	 DWORD PTR _selected_weapon$[ebp], 35 ; 00000023H
  01bee	75 16		 jne	 SHORT $LN88@draw_weapo
$LN90@draw_weapo:

; 4468 : 	{
; 4469 : 		set_mono_font_colour (MFD_COLOUR1);

  01bf0	b8 04 00 00 00	 mov	 eax, 4
  01bf5	6b c8 00	 imul	 ecx, eax, 0
  01bf8	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01bfe	52		 push	 edx
  01bff	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 4470 : 	}
; 4471 : 	else

  01c04	eb 14		 jmp	 SHORT $LN89@draw_weapo
$LN88@draw_weapo:

; 4472 : 	{
; 4473 : 		set_mono_font_colour (MFD_COLOUR4);

  01c06	b8 04 00 00 00	 mov	 eax, 4
  01c0b	6b c8 03	 imul	 ecx, eax, 3
  01c0e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01c14	52		 push	 edx
  01c15	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour
$LN89@draw_weapo:

; 4474 : 	}
; 4475 : 
; 4476 : 	set_2d_mono_font_position (0.0, -0.9);

  01c1a	51		 push	 ecx
  01c1b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  01c23	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c28	51		 push	 ecx
  01c29	0f 57 c0	 xorps	 xmm0, xmm0
  01c2c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c31	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 4477 : 
; 4478 : 	if (rocket_salvo_size == ROCKET_SALVO_SIZE_ALL)

  01c36	81 3d 00 00 00
	00 e8 03 00 00	 cmp	 DWORD PTR ?rocket_salvo_size@@3HA, 1000 ; rocket_salvo_size, 000003e8H
  01c40	75 13		 jne	 SHORT $LN91@draw_weapo

; 4479 : 	{
; 4480 : 		sprintf (s, "ROCKET SALVOxALL");

  01c42	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FAFOJLKK@ROCKET?5SALVOxALL@
  01c47	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01c4a	50		 push	 eax
  01c4b	e8 00 00 00 00	 call	 _sprintf
  01c50	83 c4 08	 add	 esp, 8

; 4481 : 	}
; 4482 : 	else

  01c53	eb 17		 jmp	 SHORT $LN92@draw_weapo
$LN91@draw_weapo:

; 4483 : 	{
; 4484 : 		sprintf (s, "ROCKET SALVOx%02d", rocket_salvo_size);

  01c55	a1 00 00 00 00	 mov	 eax, DWORD PTR ?rocket_salvo_size@@3HA ; rocket_salvo_size
  01c5a	50		 push	 eax
  01c5b	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CEPGDBDN@ROCKET?5SALVOx?$CF02d@
  01c60	8d 4d b0	 lea	 ecx, DWORD PTR _s$[ebp]
  01c63	51		 push	 ecx
  01c64	e8 00 00 00 00	 call	 _sprintf
  01c69	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN92@draw_weapo:

; 4485 : 	}
; 4486 : 
; 4487 : 	x_adjust = get_mono_font_string_width (s) * -0.5;

  01c6c	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01c6f	50		 push	 eax
  01c70	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01c75	dd 9d 44 ff ff
	ff		 fstp	 QWORD PTR tv1785[ebp]
  01c7b	f2 0f 10 85 44
	ff ff ff	 movsd	 xmm0, QWORD PTR tv1785[ebp]
  01c83	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01c8b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c8f	f3 0f 11 45 9c	 movss	 DWORD PTR _x_adjust$[ebp], xmm0

; 4488 : 
; 4489 : 	set_mono_font_rel_position (x_adjust, 0.0);

  01c94	51		 push	 ecx
  01c95	0f 57 c0	 xorps	 xmm0, xmm0
  01c98	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c9d	51		 push	 ecx
  01c9e	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _x_adjust$[ebp]
  01ca3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ca8	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 4490 : 
; 4491 : 	print_mono_font_string (s);

  01cad	8d 45 b0	 lea	 eax, DWORD PTR _s$[ebp]
  01cb0	50		 push	 eax
  01cb1	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 4492 : }

  01cb6	5f		 pop	 edi
  01cb7	5e		 pop	 esi
  01cb8	5b		 pop	 ebx
  01cb9	8b e5		 mov	 esp, ebp
  01cbb	5d		 pop	 ebp
  01cbc	c3		 ret	 0
?draw_weapon_display_mfd@@YGXXZ ENDP			; draw_weapon_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv1338 = -352						; size = 4
tv1058 = -348						; size = 4
tv1036 = -348						; size = 4
tv1008 = -348						; size = 4
tv986 = -348						; size = 4
tv820 = -348						; size = 4
tv767 = -348						; size = 4
tv744 = -348						; size = 4
tv723 = -348						; size = 4
tv703 = -348						; size = 4
tv668 = -348						; size = 4
tv647 = -348						; size = 4
tv626 = -348						; size = 4
tv607 = -348						; size = 4
tv588 = -348						; size = 4
tv567 = -348						; size = 4
tv546 = -348						; size = 4
tv525 = -348						; size = 4
tv506 = -348						; size = 4
tv487 = -348						; size = 4
tv468 = -348						; size = 4
tv448 = -348						; size = 4
tv420 = -348						; size = 4
tv399 = -348						; size = 4
tv380 = -348						; size = 4
tv361 = -348						; size = 4
tv341 = -348						; size = 4
tv314 = -348						; size = 4
tv286 = -348						; size = 4
tv264 = -348						; size = 4
tv243 = -348						; size = 4
tv224 = -348						; size = 4
tv205 = -348						; size = 4
tv176 = -348						; size = 4
tv156 = -348						; size = 4
tv136 = -348						; size = 4
tv84 = -348						; size = 4
tv1051 = -344						; size = 4
tv1029 = -344						; size = 4
tv1001 = -344						; size = 4
tv979 = -344						; size = 4
tv812 = -344						; size = 4
tv759 = -344						; size = 4
tv736 = -344						; size = 4
tv715 = -344						; size = 4
tv695 = -344						; size = 4
tv660 = -344						; size = 4
tv639 = -344						; size = 4
tv619 = -344						; size = 4
tv600 = -344						; size = 4
tv580 = -344						; size = 4
tv560 = -344						; size = 4
tv538 = -344						; size = 4
tv518 = -344						; size = 4
tv499 = -344						; size = 4
tv480 = -344						; size = 4
tv460 = -344						; size = 4
tv440 = -344						; size = 4
tv412 = -344						; size = 4
tv392 = -344						; size = 4
tv373 = -344						; size = 4
tv353 = -344						; size = 4
tv333 = -344						; size = 4
tv306 = -344						; size = 4
tv278 = -344						; size = 4
tv256 = -344						; size = 4
tv236 = -344						; size = 4
tv217 = -344						; size = 4
tv197 = -344						; size = 4
tv168 = -344						; size = 4
tv148 = -344						; size = 4
tv128 = -344						; size = 4
tv76 = -344						; size = 4
_time_to_impact$1 = -276				; size = 4
_closest_missile$2 = -272				; size = 4
_dy$3 = -268						; size = 4
_dx$4 = -264						; size = 4
_air_scan_range$5 = -260				; size = 4
_draw_threat_line$6 = -256				; size = 4
_threat_type$7 = -252					; size = 4
_threat_position$8 = -248				; size = 4
_launched_weapon$9 = -244				; size = 4
_threat$10 = -240					; size = 4
_source_position$ = -236				; size = 4
_source_target$ = -232					; size = 4
_source$ = -228						; size = 4
_source_heading$ = -224					; size = 4
_y_adjust$ = -220					; size = 4
_width$ = -216						; size = 4
_scale$ = -212						; size = 4
_source_side$ = -208					; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z PROC ; draw_aircraft_survivability_equipment_display_mfd, COMDAT

; 3056 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 60 01 00
	00		 sub	 esp, 352		; 00000160H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3057 : 	char
; 3058 : 		*s,
; 3059 : 		buffer[200];
; 3060 : 
; 3061 : 	entity_sides
; 3062 : 		source_side;
; 3063 : 
; 3064 : 	float
; 3065 : 		scale,
; 3066 : 		width,
; 3067 : 		y_adjust,
; 3068 : 		source_heading;
; 3069 : 
; 3070 : 	entity
; 3071 : 		*source,
; 3072 : 		*source_target;
; 3073 : 
; 3074 : 	vec3d
; 3075 : 		*source_position;
; 3076 : 
; 3077 : 	ASSERT (ka50_mfd_location_valid (mfd_location));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  00010	7c 06		 jl	 SHORT $LN13@draw_aircr
  00012	83 7d 08 02	 cmp	 DWORD PTR _mfd_location$[ebp], 2
  00016	7c 18		 jl	 SHORT $LN12@draw_aircr
$LN13@draw_aircr:
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  0001d	83 c0 15	 add	 eax, 21			; 00000015H
  00020	50		 push	 eax
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MOMFCEOG@ka50_mfd_location_valid?5?$CImfd_lo@
  0002b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN12@draw_aircr:

; 3078 : 
; 3079 : 	source = get_gunship_entity ();

  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00035	89 85 1c ff ff
	ff		 mov	 DWORD PTR _source$[ebp], eax

; 3080 : 
; 3081 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);

  0003b	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00042	74 10		 je	 SHORT $LN95@draw_aircr
  00044	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0004a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004c	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv76[ebp], ecx
  00052	eb 24		 jmp	 SHORT $LN96@draw_aircr
$LN95@draw_aircr:
  00054	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  0005a	83 c2 19	 add	 edx, 25			; 00000019H
  0005d	52		 push	 edx
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006e	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv76[ebp], 0
$LN96@draw_aircr:
  00078	b9 01 00 00 00	 mov	 ecx, 1
  0007d	85 c9		 test	 ecx, ecx
  0007f	74 0c		 je	 SHORT $LN97@draw_aircr
  00081	c7 85 a4 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv84[ebp], 187 ; 000000bbH
  0008b	eb 24		 jmp	 SHORT $LN98@draw_aircr
$LN97@draw_aircr:
  0008d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00093	83 c2 19	 add	 edx, 25			; 00000019H
  00096	52		 push	 edx
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0009c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a7	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv84[ebp], 0
$LN98@draw_aircr:
  000b1	68 bb 00 00 00	 push	 187			; 000000bbH
  000b6	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  000bc	51		 push	 ecx
  000bd	69 95 a8 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv76[ebp], 1116
  000c7	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv84[ebp]
  000cd	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000d4	ff d1		 call	 ecx
  000d6	89 85 30 ff ff
	ff		 mov	 DWORD PTR _source_side$[ebp], eax

; 3082 : 
; 3083 : 	source_heading = get_local_entity_float_value (source, FLOAT_TYPE_HEADING);

  000dc	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  000e3	74 10		 je	 SHORT $LN99@draw_aircr
  000e5	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  000eb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ed	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv128[ebp], ecx
  000f3	eb 24		 jmp	 SHORT $LN100@draw_aircr
$LN99@draw_aircr:
  000f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  000fb	83 c2 1b	 add	 edx, 27			; 0000001bH
  000fe	52		 push	 edx
  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00104	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00109	50		 push	 eax
  0010a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0010f	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv128[ebp], 0
$LN100@draw_aircr:
  00119	b9 01 00 00 00	 mov	 ecx, 1
  0011e	85 c9		 test	 ecx, ecx
  00120	74 0c		 je	 SHORT $LN101@draw_aircr
  00122	c7 85 a4 fe ff
	ff 34 00 00 00	 mov	 DWORD PTR tv136[ebp], 52 ; 00000034H
  0012c	eb 24		 jmp	 SHORT $LN102@draw_aircr
$LN101@draw_aircr:
  0012e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00134	83 c2 1b	 add	 edx, 27			; 0000001bH
  00137	52		 push	 edx
  00138	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0013d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00142	50		 push	 eax
  00143	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00148	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv136[ebp], 0
$LN102@draw_aircr:
  00152	6a 34		 push	 52			; 00000034H
  00154	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  0015a	51		 push	 ecx
  0015b	69 95 a8 fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv128[ebp], 700
  00165	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv136[ebp]
  0016b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00172	ff d1		 call	 ecx
  00174	d9 9d 20 ff ff
	ff		 fstp	 DWORD PTR _source_heading$[ebp]

; 3084 : 
; 3085 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  0017a	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00181	74 10		 je	 SHORT $LN103@draw_aircr
  00183	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00189	8b 08		 mov	 ecx, DWORD PTR [eax]
  0018b	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv148[ebp], ecx
  00191	eb 24		 jmp	 SHORT $LN104@draw_aircr
$LN103@draw_aircr:
  00193	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00199	83 c2 1d	 add	 edx, 29			; 0000001dH
  0019c	52		 push	 edx
  0019d	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001a7	50		 push	 eax
  001a8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001ad	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv148[ebp], 0
$LN104@draw_aircr:
  001b7	b9 01 00 00 00	 mov	 ecx, 1
  001bc	85 c9		 test	 ecx, ecx
  001be	74 0c		 je	 SHORT $LN105@draw_aircr
  001c0	c7 85 a4 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv156[ebp], 8
  001ca	eb 24		 jmp	 SHORT $LN106@draw_aircr
$LN105@draw_aircr:
  001cc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  001d2	83 c2 1d	 add	 edx, 29			; 0000001dH
  001d5	52		 push	 edx
  001d6	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001e0	50		 push	 eax
  001e1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001e6	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv156[ebp], 0
$LN106@draw_aircr:
  001f0	6a 08		 push	 8
  001f2	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  001f8	51		 push	 ecx
  001f9	6b 95 a8 fe ff
	ff 60		 imul	 edx, DWORD PTR tv148[ebp], 96
  00200	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv156[ebp]
  00206	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0020d	ff d1		 call	 ecx
  0020f	89 85 14 ff ff
	ff		 mov	 DWORD PTR _source_position$[ebp], eax

; 3086 : 
; 3087 : 	source_target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  00215	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0021c	74 10		 je	 SHORT $LN107@draw_aircr
  0021e	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00224	8b 08		 mov	 ecx, DWORD PTR [eax]
  00226	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv168[ebp], ecx
  0022c	eb 24		 jmp	 SHORT $LN108@draw_aircr
$LN107@draw_aircr:
  0022e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00234	83 c2 1f	 add	 edx, 31			; 0000001fH
  00237	52		 push	 edx
  00238	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0023d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00242	50		 push	 eax
  00243	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00248	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv168[ebp], 0
$LN108@draw_aircr:
  00252	b9 01 00 00 00	 mov	 ecx, 1
  00257	85 c9		 test	 ecx, ecx
  00259	74 0c		 je	 SHORT $LN109@draw_aircr
  0025b	c7 85 a4 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv176[ebp], 38 ; 00000026H
  00265	eb 24		 jmp	 SHORT $LN110@draw_aircr
$LN109@draw_aircr:
  00267	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  0026d	83 c2 1f	 add	 edx, 31			; 0000001fH
  00270	52		 push	 edx
  00271	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00276	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0027b	50		 push	 eax
  0027c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00281	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv176[ebp], 0
$LN110@draw_aircr:
  0028b	6a 26		 push	 38			; 00000026H
  0028d	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00293	51		 push	 ecx
  00294	69 95 a8 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv168[ebp], 180
  0029e	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv176[ebp]
  002a4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  002ab	ff d1		 call	 ecx
  002ad	89 85 18 ff ff
	ff		 mov	 DWORD PTR _source_target$[ebp], eax

; 3088 : 
; 3089 : 	scale = RADIUS / tsd_ase_range;

  002b3	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?tsd_ase_range@@3MA
  002bb	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  002c3	f2 0f 5e c8	 divsd	 xmm1, xmm0
  002c7	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  002cb	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _scale$[ebp], xmm0

; 3090 : 
; 3091 : 	////////////////////////////////////////
; 3092 : 	//
; 3093 : 	// threats
; 3094 : 	//
; 3095 : 	////////////////////////////////////////
; 3096 : 
; 3097 : 	{
; 3098 : 		entity
; 3099 : 			*threat,
; 3100 : 			*launched_weapon;
; 3101 : 
; 3102 : 		vec3d
; 3103 : 			*threat_position;
; 3104 : 
; 3105 : 		threat_types
; 3106 : 			threat_type;
; 3107 : 
; 3108 : 		int
; 3109 : 			draw_threat_line;
; 3110 : 
; 3111 : 		float
; 3112 : 			air_scan_range,
; 3113 : 			dx,
; 3114 : 			dy;
; 3115 : 
; 3116 : 		ase_threat_line_flash_timer -= get_delta_time ();

  002d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?ase_threat_line_flash_timer@@3MA
  002db	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  002e3	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?ase_threat_line_flash_timer@@3MA, xmm0

; 3117 : 
; 3118 : 		if (ase_threat_line_flash_timer < 0.0)

  002eb	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?ase_threat_line_flash_timer@@3MA
  002f3	0f 57 c9	 xorps	 xmm1, xmm1
  002f6	66 0f 2f c8	 comisd	 xmm1, xmm0
  002fa	76 1d		 jbe	 SHORT $LN14@draw_aircr

; 3119 : 		{
; 3120 : 			ase_threat_line_flash_timer = ASE_THREAT_LINE_FLASH_RATE;

  002fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00304	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?ase_threat_line_flash_timer@@3MA, xmm0

; 3121 : 
; 3122 : 			ase_draw_threat_line_status ^= 1;

  0030c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ase_draw_threat_line_status@@3HA
  00311	83 f0 01	 xor	 eax, 1
  00314	a3 00 00 00 00	 mov	 DWORD PTR ?ase_draw_threat_line_status@@3HA, eax
$LN14@draw_aircr:

; 3123 : 		}
; 3124 : 
; 3125 : 		set_2d_window_rotation (mfd_env, source_heading);

  00319	51		 push	 ecx
  0031a	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  00322	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00327	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0032c	50		 push	 eax
  0032d	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 3126 : 
; 3127 : 		//
; 3128 : 		// display enemy SAM and AAA threat range circles
; 3129 : 		//
; 3130 : 		// (use the gunship target list so that threats which are not targetting the player are still visible)
; 3131 : 		//
; 3132 : 
; 3133 : 		threat = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  00332	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00339	74 10		 je	 SHORT $LN111@draw_aircr
  0033b	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00341	8b 08		 mov	 ecx, DWORD PTR [eax]
  00343	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv197[ebp], ecx
  00349	eb 24		 jmp	 SHORT $LN112@draw_aircr
$LN111@draw_aircr:
  0034b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00351	83 c2 4d	 add	 edx, 77			; 0000004dH
  00354	52		 push	 edx
  00355	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0035a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0035f	50		 push	 eax
  00360	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00365	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv197[ebp], 0
$LN112@draw_aircr:
  0036f	b9 01 00 00 00	 mov	 ecx, 1
  00374	85 c9		 test	 ecx, ecx
  00376	74 0c		 je	 SHORT $LN113@draw_aircr
  00378	c7 85 a4 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv205[ebp], 18 ; 00000012H
  00382	eb 24		 jmp	 SHORT $LN114@draw_aircr
$LN113@draw_aircr:
  00384	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  0038a	83 c2 4d	 add	 edx, 77			; 0000004dH
  0038d	52		 push	 edx
  0038e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00393	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00398	50		 push	 eax
  00399	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0039e	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv205[ebp], 0
$LN114@draw_aircr:
  003a8	6a 12		 push	 18			; 00000012H
  003aa	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  003b0	51		 push	 ecx
  003b1	69 95 a8 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv197[ebp], 180
  003bb	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv205[ebp]
  003c1	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  003c8	ff d1		 call	 ecx
  003ca	89 85 10 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN2@draw_aircr:

; 3134 : 
; 3135 : 		while (threat)

  003d0	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  003d7	0f 84 6a 04 00
	00		 je	 $LN3@draw_aircr

; 3136 : 		{
; 3137 : 			if (!get_local_entity_int_value (threat, INT_TYPE_GROUND_RADAR_CLUTTER))

  003dd	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  003e4	74 10		 je	 SHORT $LN115@draw_aircr
  003e6	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  003ec	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ee	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv217[ebp], ecx
  003f4	eb 20		 jmp	 SHORT $LN116@draw_aircr
$LN115@draw_aircr:
  003f6	68 41 0c 00 00	 push	 3137			; 00000c41H
  003fb	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00400	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00406	52		 push	 edx
  00407	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0040c	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv217[ebp], 0
$LN116@draw_aircr:
  00416	b8 01 00 00 00	 mov	 eax, 1
  0041b	85 c0		 test	 eax, eax
  0041d	74 0c		 je	 SHORT $LN117@draw_aircr
  0041f	c7 85 a4 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv224[ebp], 66 ; 00000042H
  00429	eb 20		 jmp	 SHORT $LN118@draw_aircr
$LN117@draw_aircr:
  0042b	68 41 0c 00 00	 push	 3137			; 00000c41H
  00430	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00435	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0043b	51		 push	 ecx
  0043c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00441	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv224[ebp], 0
$LN118@draw_aircr:
  0044b	6a 42		 push	 66			; 00000042H
  0044d	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00453	52		 push	 edx
  00454	69 85 a8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv217[ebp], 1116
  0045e	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv224[ebp]
  00464	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0046b	ff d2		 call	 edx
  0046d	85 c0		 test	 eax, eax
  0046f	0f 85 2f 03 00
	00		 jne	 $LN17@draw_aircr

; 3138 : 			{
; 3139 : 				if (source_side != get_local_entity_int_value (threat, INT_TYPE_SIDE))

  00475	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0047c	74 10		 je	 SHORT $LN119@draw_aircr
  0047e	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00484	8b 08		 mov	 ecx, DWORD PTR [eax]
  00486	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv236[ebp], ecx
  0048c	eb 20		 jmp	 SHORT $LN120@draw_aircr
$LN119@draw_aircr:
  0048e	68 43 0c 00 00	 push	 3139			; 00000c43H
  00493	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00498	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0049e	52		 push	 edx
  0049f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004a4	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv236[ebp], 0
$LN120@draw_aircr:
  004ae	b8 01 00 00 00	 mov	 eax, 1
  004b3	85 c0		 test	 eax, eax
  004b5	74 0c		 je	 SHORT $LN121@draw_aircr
  004b7	c7 85 a4 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv243[ebp], 187 ; 000000bbH
  004c1	eb 20		 jmp	 SHORT $LN122@draw_aircr
$LN121@draw_aircr:
  004c3	68 43 0c 00 00	 push	 3139			; 00000c43H
  004c8	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  004cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  004d3	51		 push	 ecx
  004d4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004d9	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv243[ebp], 0
$LN122@draw_aircr:
  004e3	68 bb 00 00 00	 push	 187			; 000000bbH
  004e8	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  004ee	52		 push	 edx
  004ef	69 85 a8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv236[ebp], 1116
  004f9	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv243[ebp]
  004ff	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00506	ff d2		 call	 edx
  00508	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  0050e	0f 84 90 02 00
	00		 je	 $LN17@draw_aircr

; 3140 : 				{
; 3141 : 					threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  00514	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0051b	74 10		 je	 SHORT $LN123@draw_aircr
  0051d	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00523	8b 08		 mov	 ecx, DWORD PTR [eax]
  00525	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv256[ebp], ecx
  0052b	eb 24		 jmp	 SHORT $LN124@draw_aircr
$LN123@draw_aircr:
  0052d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00533	83 c2 55	 add	 edx, 85			; 00000055H
  00536	52		 push	 edx
  00537	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0053c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00541	50		 push	 eax
  00542	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00547	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv256[ebp], 0
$LN124@draw_aircr:
  00551	b9 01 00 00 00	 mov	 ecx, 1
  00556	85 c9		 test	 ecx, ecx
  00558	74 0c		 je	 SHORT $LN125@draw_aircr
  0055a	c7 85 a4 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv264[ebp], 233 ; 000000e9H
  00564	eb 24		 jmp	 SHORT $LN126@draw_aircr
$LN125@draw_aircr:
  00566	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  0056c	83 c2 55	 add	 edx, 85			; 00000055H
  0056f	52		 push	 edx
  00570	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00575	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0057a	50		 push	 eax
  0057b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00580	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv264[ebp], 0
$LN126@draw_aircr:
  0058a	68 e9 00 00 00	 push	 233			; 000000e9H
  0058f	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00595	51		 push	 ecx
  00596	69 95 a8 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv256[ebp], 1116
  005a0	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv264[ebp]
  005a6	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  005ad	ff d1		 call	 ecx
  005af	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 3142 : 
; 3143 : 					if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA))

  005b5	83 bd 04 ff ff
	ff 05		 cmp	 DWORD PTR _threat_type$7[ebp], 5
  005bc	74 0d		 je	 SHORT $LN18@draw_aircr
  005be	83 bd 04 ff ff
	ff 06		 cmp	 DWORD PTR _threat_type$7[ebp], 6
  005c5	0f 85 d9 01 00
	00		 jne	 $LN17@draw_aircr
$LN18@draw_aircr:

; 3144 : 					{
; 3145 : 						threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  005cb	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  005d2	74 10		 je	 SHORT $LN127@draw_aircr
  005d4	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  005da	8b 08		 mov	 ecx, DWORD PTR [eax]
  005dc	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv278[ebp], ecx
  005e2	eb 24		 jmp	 SHORT $LN128@draw_aircr
$LN127@draw_aircr:
  005e4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  005ea	83 c2 59	 add	 edx, 89			; 00000059H
  005ed	52		 push	 edx
  005ee	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  005f3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  005f8	50		 push	 eax
  005f9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  005fe	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv278[ebp], 0
$LN128@draw_aircr:
  00608	b9 01 00 00 00	 mov	 ecx, 1
  0060d	85 c9		 test	 ecx, ecx
  0060f	74 0c		 je	 SHORT $LN129@draw_aircr
  00611	c7 85 a4 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv286[ebp], 8
  0061b	eb 24		 jmp	 SHORT $LN130@draw_aircr
$LN129@draw_aircr:
  0061d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00623	83 c2 59	 add	 edx, 89			; 00000059H
  00626	52		 push	 edx
  00627	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0062c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00631	50		 push	 eax
  00632	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00637	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv286[ebp], 0
$LN130@draw_aircr:
  00641	6a 08		 push	 8
  00643	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00649	51		 push	 ecx
  0064a	6b 95 a8 fe ff
	ff 60		 imul	 edx, DWORD PTR tv278[ebp], 96
  00651	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv286[ebp]
  00657	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0065e	ff d1		 call	 ecx
  00660	89 85 08 ff ff
	ff		 mov	 DWORD PTR _threat_position$8[ebp], eax

; 3146 : 
; 3147 : 						dx = (threat_position->x - source_position->x) * scale;

  00666	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  0066c	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  00672	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00676	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0067a	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00682	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 3148 : 						dy = (threat_position->z - source_position->z) * scale;

  0068a	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  00690	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  00696	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0069b	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  006a0	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  006a8	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _dy$3[ebp], xmm0

; 3149 : 
; 3150 : 						air_scan_range = get_local_entity_float_value (threat, FLOAT_TYPE_AIR_SCAN_RANGE) * scale;

  006b0	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  006b7	74 10		 je	 SHORT $LN131@draw_aircr
  006b9	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  006bf	8b 08		 mov	 ecx, DWORD PTR [eax]
  006c1	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv306[ebp], ecx
  006c7	eb 24		 jmp	 SHORT $LN132@draw_aircr
$LN131@draw_aircr:
  006c9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  006cf	83 c2 5e	 add	 edx, 94			; 0000005eH
  006d2	52		 push	 edx
  006d3	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  006d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  006dd	50		 push	 eax
  006de	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  006e3	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv306[ebp], 0
$LN132@draw_aircr:
  006ed	b9 01 00 00 00	 mov	 ecx, 1
  006f2	85 c9		 test	 ecx, ecx
  006f4	74 0c		 je	 SHORT $LN133@draw_aircr
  006f6	c7 85 a4 fe ff
	ff 05 00 00 00	 mov	 DWORD PTR tv314[ebp], 5
  00700	eb 24		 jmp	 SHORT $LN134@draw_aircr
$LN133@draw_aircr:
  00702	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00708	83 c2 5e	 add	 edx, 94			; 0000005eH
  0070b	52		 push	 edx
  0070c	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00711	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00716	50		 push	 eax
  00717	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0071c	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv314[ebp], 0
$LN134@draw_aircr:
  00726	6a 05		 push	 5
  00728	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  0072e	51		 push	 ecx
  0072f	69 95 a8 fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv306[ebp], 700
  00739	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv314[ebp]
  0073f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00746	ff d1		 call	 ecx
  00748	d9 9d a0 fe ff
	ff		 fstp	 DWORD PTR tv1338[ebp]
  0074e	f3 0f 10 85 a0
	fe ff ff	 movss	 xmm0, DWORD PTR tv1338[ebp]
  00756	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  0075e	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR _air_scan_range$5[ebp], xmm0

; 3151 : 
; 3152 : 						draw_2d_circle (dx, dy, air_scan_range, MFD_COLOUR_RED);

  00766	b8 04 00 00 00	 mov	 eax, 4
  0076b	6b c8 12	 imul	 ecx, eax, 18
  0076e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00774	52		 push	 edx
  00775	51		 push	 ecx
  00776	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR _air_scan_range$5[ebp]
  0077e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00783	51		 push	 ecx
  00784	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  0078c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00791	51		 push	 ecx
  00792	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  0079a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079f	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle
$LN17@draw_aircr:

; 3153 : 					}
; 3154 : 				}
; 3155 : 			}
; 3156 : 
; 3157 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_GUNSHIP_TARGET);

  007a4	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  007ab	74 10		 je	 SHORT $LN135@draw_aircr
  007ad	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  007b3	8b 08		 mov	 ecx, DWORD PTR [eax]
  007b5	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv333[ebp], ecx
  007bb	eb 24		 jmp	 SHORT $LN136@draw_aircr
$LN135@draw_aircr:
  007bd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  007c3	83 c2 65	 add	 edx, 101		; 00000065H
  007c6	52		 push	 edx
  007c7	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  007cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  007d1	50		 push	 eax
  007d2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  007d7	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv333[ebp], 0
$LN136@draw_aircr:
  007e1	b9 01 00 00 00	 mov	 ecx, 1
  007e6	85 c9		 test	 ecx, ecx
  007e8	74 0c		 je	 SHORT $LN137@draw_aircr
  007ea	c7 85 a4 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv341[ebp], 18 ; 00000012H
  007f4	eb 24		 jmp	 SHORT $LN138@draw_aircr
$LN137@draw_aircr:
  007f6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  007fc	83 c2 65	 add	 edx, 101		; 00000065H
  007ff	52		 push	 edx
  00800	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00805	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0080a	50		 push	 eax
  0080b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00810	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv341[ebp], 0
$LN138@draw_aircr:
  0081a	6a 12		 push	 18			; 00000012H
  0081c	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00822	51		 push	 ecx
  00823	69 95 a8 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv333[ebp], 180
  0082d	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv341[ebp]
  00833	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0083a	ff d1		 call	 ecx
  0083c	89 85 10 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 3158 : 		}

  00842	e9 89 fb ff ff	 jmp	 $LN2@draw_aircr
$LN3@draw_aircr:

; 3159 : 
; 3160 : 		//
; 3161 : 		// display enemy SAM, AAA and AIRBORNE_RADAR threats
; 3162 : 		//
; 3163 : 
; 3164 : 		threat = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  00847	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0084e	74 10		 je	 SHORT $LN139@draw_aircr
  00850	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00856	8b 08		 mov	 ecx, DWORD PTR [eax]
  00858	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv353[ebp], ecx
  0085e	eb 24		 jmp	 SHORT $LN140@draw_aircr
$LN139@draw_aircr:
  00860	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00866	83 c2 6c	 add	 edx, 108		; 0000006cH
  00869	52		 push	 edx
  0086a	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0086f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00874	50		 push	 eax
  00875	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0087a	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv353[ebp], 0
$LN140@draw_aircr:
  00884	b9 01 00 00 00	 mov	 ecx, 1
  00889	85 c9		 test	 ecx, ecx
  0088b	74 0c		 je	 SHORT $LN141@draw_aircr
  0088d	c7 85 a4 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv361[ebp], 18 ; 00000012H
  00897	eb 24		 jmp	 SHORT $LN142@draw_aircr
$LN141@draw_aircr:
  00899	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  0089f	83 c2 6c	 add	 edx, 108		; 0000006cH
  008a2	52		 push	 edx
  008a3	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  008a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  008ad	50		 push	 eax
  008ae	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008b3	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv361[ebp], 0
$LN142@draw_aircr:
  008bd	6a 12		 push	 18			; 00000012H
  008bf	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  008c5	51		 push	 ecx
  008c6	69 95 a8 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv353[ebp], 180
  008d0	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv361[ebp]
  008d6	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  008dd	ff d1		 call	 ecx
  008df	89 85 10 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN4@draw_aircr:

; 3165 : 
; 3166 : 		while (threat)

  008e5	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  008ec	0f 84 bb 02 00
	00		 je	 $LN5@draw_aircr

; 3167 : 		{
; 3168 : 			if (!get_local_entity_int_value (threat, INT_TYPE_GROUND_RADAR_CLUTTER))

  008f2	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  008f9	74 10		 je	 SHORT $LN143@draw_aircr
  008fb	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00901	8b 08		 mov	 ecx, DWORD PTR [eax]
  00903	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv373[ebp], ecx
  00909	eb 20		 jmp	 SHORT $LN144@draw_aircr
$LN143@draw_aircr:
  0090b	68 60 0c 00 00	 push	 3168			; 00000c60H
  00910	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00915	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0091b	52		 push	 edx
  0091c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00921	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv373[ebp], 0
$LN144@draw_aircr:
  0092b	b8 01 00 00 00	 mov	 eax, 1
  00930	85 c0		 test	 eax, eax
  00932	74 0c		 je	 SHORT $LN145@draw_aircr
  00934	c7 85 a4 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv380[ebp], 66 ; 00000042H
  0093e	eb 20		 jmp	 SHORT $LN146@draw_aircr
$LN145@draw_aircr:
  00940	68 60 0c 00 00	 push	 3168			; 00000c60H
  00945	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0094a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00950	51		 push	 ecx
  00951	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00956	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv380[ebp], 0
$LN146@draw_aircr:
  00960	6a 42		 push	 66			; 00000042H
  00962	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00968	52		 push	 edx
  00969	69 85 a8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv373[ebp], 1116
  00973	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv380[ebp]
  00979	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00980	ff d2		 call	 edx
  00982	85 c0		 test	 eax, eax
  00984	0f 85 80 01 00
	00		 jne	 $LN21@draw_aircr

; 3169 : 			{
; 3170 : 				if (source_side != get_local_entity_int_value (threat, INT_TYPE_SIDE))

  0098a	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00991	74 10		 je	 SHORT $LN147@draw_aircr
  00993	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00999	8b 08		 mov	 ecx, DWORD PTR [eax]
  0099b	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv392[ebp], ecx
  009a1	eb 20		 jmp	 SHORT $LN148@draw_aircr
$LN147@draw_aircr:
  009a3	68 62 0c 00 00	 push	 3170			; 00000c62H
  009a8	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  009ad	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  009b3	52		 push	 edx
  009b4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009b9	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv392[ebp], 0
$LN148@draw_aircr:
  009c3	b8 01 00 00 00	 mov	 eax, 1
  009c8	85 c0		 test	 eax, eax
  009ca	74 0c		 je	 SHORT $LN149@draw_aircr
  009cc	c7 85 a4 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv399[ebp], 187 ; 000000bbH
  009d6	eb 20		 jmp	 SHORT $LN150@draw_aircr
$LN149@draw_aircr:
  009d8	68 62 0c 00 00	 push	 3170			; 00000c62H
  009dd	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  009e2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  009e8	51		 push	 ecx
  009e9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  009ee	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv399[ebp], 0
$LN150@draw_aircr:
  009f8	68 bb 00 00 00	 push	 187			; 000000bbH
  009fd	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00a03	52		 push	 edx
  00a04	69 85 a8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv392[ebp], 1116
  00a0e	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv399[ebp]
  00a14	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00a1b	ff d2		 call	 edx
  00a1d	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  00a23	0f 84 e1 00 00
	00		 je	 $LN21@draw_aircr

; 3171 : 				{
; 3172 : 					threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  00a29	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00a30	74 10		 je	 SHORT $LN151@draw_aircr
  00a32	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00a38	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a3a	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv412[ebp], ecx
  00a40	eb 24		 jmp	 SHORT $LN152@draw_aircr
$LN151@draw_aircr:
  00a42	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00a48	83 c2 74	 add	 edx, 116		; 00000074H
  00a4b	52		 push	 edx
  00a4c	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a51	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00a56	50		 push	 eax
  00a57	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a5c	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv412[ebp], 0
$LN152@draw_aircr:
  00a66	b9 01 00 00 00	 mov	 ecx, 1
  00a6b	85 c9		 test	 ecx, ecx
  00a6d	74 0c		 je	 SHORT $LN153@draw_aircr
  00a6f	c7 85 a4 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv420[ebp], 233 ; 000000e9H
  00a79	eb 24		 jmp	 SHORT $LN154@draw_aircr
$LN153@draw_aircr:
  00a7b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00a81	83 c2 74	 add	 edx, 116		; 00000074H
  00a84	52		 push	 edx
  00a85	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a8a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00a8f	50		 push	 eax
  00a90	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a95	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv420[ebp], 0
$LN154@draw_aircr:
  00a9f	68 e9 00 00 00	 push	 233			; 000000e9H
  00aa4	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00aaa	51		 push	 ecx
  00aab	69 95 a8 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv412[ebp], 1116
  00ab5	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv420[ebp]
  00abb	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00ac2	ff d1		 call	 ecx
  00ac4	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 3173 : 
; 3174 : 					if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA) || (threat_type == THREAT_TYPE_AIRBORNE_RADAR))

  00aca	83 bd 04 ff ff
	ff 05		 cmp	 DWORD PTR _threat_type$7[ebp], 5
  00ad1	74 12		 je	 SHORT $LN22@draw_aircr
  00ad3	83 bd 04 ff ff
	ff 06		 cmp	 DWORD PTR _threat_type$7[ebp], 6
  00ada	74 09		 je	 SHORT $LN22@draw_aircr
  00adc	83 bd 04 ff ff
	ff 04		 cmp	 DWORD PTR _threat_type$7[ebp], 4
  00ae3	75 25		 jne	 SHORT $LN21@draw_aircr
$LN22@draw_aircr:

; 3175 : 					{
; 3176 : //VJ 030423 TSD render mod
; 3177 : 						draw_radar_target_symbol (threat, source_position, scale, FALSE, FALSE);

  00ae5	6a 00		 push	 0
  00ae7	6a 00		 push	 0
  00ae9	51		 push	 ecx
  00aea	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00af2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00af7	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00afd	50		 push	 eax
  00afe	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00b04	51		 push	 ecx
  00b05	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN21@draw_aircr:

; 3178 : 					}
; 3179 : 				}
; 3180 : 			}
; 3181 : 
; 3182 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_GUNSHIP_TARGET);

  00b0a	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00b11	74 10		 je	 SHORT $LN155@draw_aircr
  00b13	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00b19	8b 08		 mov	 ecx, DWORD PTR [eax]
  00b1b	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv440[ebp], ecx
  00b21	eb 24		 jmp	 SHORT $LN156@draw_aircr
$LN155@draw_aircr:
  00b23	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00b29	83 c2 7e	 add	 edx, 126		; 0000007eH
  00b2c	52		 push	 edx
  00b2d	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b32	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00b37	50		 push	 eax
  00b38	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b3d	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv440[ebp], 0
$LN156@draw_aircr:
  00b47	b9 01 00 00 00	 mov	 ecx, 1
  00b4c	85 c9		 test	 ecx, ecx
  00b4e	74 0c		 je	 SHORT $LN157@draw_aircr
  00b50	c7 85 a4 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv448[ebp], 18 ; 00000012H
  00b5a	eb 24		 jmp	 SHORT $LN158@draw_aircr
$LN157@draw_aircr:
  00b5c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00b62	83 c2 7e	 add	 edx, 126		; 0000007eH
  00b65	52		 push	 edx
  00b66	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00b6b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00b70	50		 push	 eax
  00b71	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00b76	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv448[ebp], 0
$LN158@draw_aircr:
  00b80	6a 12		 push	 18			; 00000012H
  00b82	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00b88	51		 push	 ecx
  00b89	69 95 a8 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv440[ebp], 180
  00b93	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv448[ebp]
  00b99	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00ba0	ff d1		 call	 ecx
  00ba2	89 85 10 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 3183 : 		}

  00ba8	e9 38 fd ff ff	 jmp	 $LN4@draw_aircr
$LN5@draw_aircr:

; 3184 : 
; 3185 : 		//
; 3186 : 		// draw threat line if gunship is targetted (flash if missile fired)
; 3187 : 		//
; 3188 : 
; 3189 : 		threat = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  00bad	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00bb4	74 10		 je	 SHORT $LN159@draw_aircr
  00bb6	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00bbc	8b 08		 mov	 ecx, DWORD PTR [eax]
  00bbe	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv460[ebp], ecx
  00bc4	eb 27		 jmp	 SHORT $LN160@draw_aircr
$LN159@draw_aircr:
  00bc6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00bcc	81 c2 85 00 00
	00		 add	 edx, 133		; 00000085H
  00bd2	52		 push	 edx
  00bd3	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00bd8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00bdd	50		 push	 eax
  00bde	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00be3	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv460[ebp], 0
$LN160@draw_aircr:
  00bed	b9 01 00 00 00	 mov	 ecx, 1
  00bf2	85 c9		 test	 ecx, ecx
  00bf4	74 0c		 je	 SHORT $LN161@draw_aircr
  00bf6	c7 85 a4 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv468[ebp], 18 ; 00000012H
  00c00	eb 27		 jmp	 SHORT $LN162@draw_aircr
$LN161@draw_aircr:
  00c02	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00c08	81 c2 85 00 00
	00		 add	 edx, 133		; 00000085H
  00c0e	52		 push	 edx
  00c0f	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c14	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00c19	50		 push	 eax
  00c1a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c1f	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv468[ebp], 0
$LN162@draw_aircr:
  00c29	6a 12		 push	 18			; 00000012H
  00c2b	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00c31	51		 push	 ecx
  00c32	69 95 a8 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv460[ebp], 180
  00c3c	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv468[ebp]
  00c42	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00c49	ff d1		 call	 ecx
  00c4b	89 85 10 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN6@draw_aircr:

; 3190 : 
; 3191 : 		while (threat)

  00c51	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00c58	0f 84 be 07 00
	00		 je	 $LN7@draw_aircr

; 3192 : 		{
; 3193 : 			if (!get_local_entity_int_value (threat, INT_TYPE_GROUND_RADAR_CLUTTER))

  00c5e	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00c65	74 10		 je	 SHORT $LN163@draw_aircr
  00c67	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00c6d	8b 08		 mov	 ecx, DWORD PTR [eax]
  00c6f	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv480[ebp], ecx
  00c75	eb 20		 jmp	 SHORT $LN164@draw_aircr
$LN163@draw_aircr:
  00c77	68 79 0c 00 00	 push	 3193			; 00000c79H
  00c7c	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c81	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00c87	52		 push	 edx
  00c88	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c8d	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv480[ebp], 0
$LN164@draw_aircr:
  00c97	b8 01 00 00 00	 mov	 eax, 1
  00c9c	85 c0		 test	 eax, eax
  00c9e	74 0c		 je	 SHORT $LN165@draw_aircr
  00ca0	c7 85 a4 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv487[ebp], 66 ; 00000042H
  00caa	eb 20		 jmp	 SHORT $LN166@draw_aircr
$LN165@draw_aircr:
  00cac	68 79 0c 00 00	 push	 3193			; 00000c79H
  00cb1	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00cb6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00cbc	51		 push	 ecx
  00cbd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00cc2	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv487[ebp], 0
$LN166@draw_aircr:
  00ccc	6a 42		 push	 66			; 00000042H
  00cce	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00cd4	52		 push	 edx
  00cd5	69 85 a8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv480[ebp], 1116
  00cdf	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv487[ebp]
  00ce5	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00cec	ff d2		 call	 edx
  00cee	85 c0		 test	 eax, eax
  00cf0	0f 85 7d 06 00
	00		 jne	 $LN31@draw_aircr

; 3194 : 			{
; 3195 : 				if (source_side != get_local_entity_int_value (threat, INT_TYPE_SIDE))

  00cf6	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00cfd	74 10		 je	 SHORT $LN167@draw_aircr
  00cff	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00d05	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d07	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv499[ebp], ecx
  00d0d	eb 20		 jmp	 SHORT $LN168@draw_aircr
$LN167@draw_aircr:
  00d0f	68 7b 0c 00 00	 push	 3195			; 00000c7bH
  00d14	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d19	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00d1f	52		 push	 edx
  00d20	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d25	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv499[ebp], 0
$LN168@draw_aircr:
  00d2f	b8 01 00 00 00	 mov	 eax, 1
  00d34	85 c0		 test	 eax, eax
  00d36	74 0c		 je	 SHORT $LN169@draw_aircr
  00d38	c7 85 a4 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv506[ebp], 187 ; 000000bbH
  00d42	eb 20		 jmp	 SHORT $LN170@draw_aircr
$LN169@draw_aircr:
  00d44	68 7b 0c 00 00	 push	 3195			; 00000c7bH
  00d49	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00d4e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00d54	51		 push	 ecx
  00d55	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00d5a	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv506[ebp], 0
$LN170@draw_aircr:
  00d64	68 bb 00 00 00	 push	 187			; 000000bbH
  00d69	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00d6f	52		 push	 edx
  00d70	69 85 a8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv499[ebp], 1116
  00d7a	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv506[ebp]
  00d80	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00d87	ff d2		 call	 edx
  00d89	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  00d8f	0f 84 de 05 00
	00		 je	 $LN31@draw_aircr

; 3196 : 				{
; 3197 : 					if (get_local_entity_int_value (threat, INT_TYPE_RADAR_ON))

  00d95	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00d9c	74 10		 je	 SHORT $LN171@draw_aircr
  00d9e	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00da4	8b 08		 mov	 ecx, DWORD PTR [eax]
  00da6	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv518[ebp], ecx
  00dac	eb 20		 jmp	 SHORT $LN172@draw_aircr
$LN171@draw_aircr:
  00dae	68 7d 0c 00 00	 push	 3197			; 00000c7dH
  00db3	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00db8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00dbe	52		 push	 edx
  00dbf	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00dc4	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv518[ebp], 0
$LN172@draw_aircr:
  00dce	b8 01 00 00 00	 mov	 eax, 1
  00dd3	85 c0		 test	 eax, eax
  00dd5	74 0c		 je	 SHORT $LN173@draw_aircr
  00dd7	c7 85 a4 fe ff
	ff a9 00 00 00	 mov	 DWORD PTR tv525[ebp], 169 ; 000000a9H
  00de1	eb 20		 jmp	 SHORT $LN174@draw_aircr
$LN173@draw_aircr:
  00de3	68 7d 0c 00 00	 push	 3197			; 00000c7dH
  00de8	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ded	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00df3	51		 push	 ecx
  00df4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00df9	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv525[ebp], 0
$LN174@draw_aircr:
  00e03	68 a9 00 00 00	 push	 169			; 000000a9H
  00e08	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00e0e	52		 push	 edx
  00e0f	69 85 a8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv518[ebp], 1116
  00e19	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv525[ebp]
  00e1f	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00e26	ff d2		 call	 edx
  00e28	85 c0		 test	 eax, eax
  00e2a	0f 84 43 05 00
	00		 je	 $LN31@draw_aircr

; 3198 : 					{
; 3199 : 						threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  00e30	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00e37	74 10		 je	 SHORT $LN175@draw_aircr
  00e39	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00e3f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e41	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv538[ebp], ecx
  00e47	eb 27		 jmp	 SHORT $LN176@draw_aircr
$LN175@draw_aircr:
  00e49	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00e4f	81 c2 8f 00 00
	00		 add	 edx, 143		; 0000008fH
  00e55	52		 push	 edx
  00e56	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e5b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00e60	50		 push	 eax
  00e61	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e66	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv538[ebp], 0
$LN176@draw_aircr:
  00e70	b9 01 00 00 00	 mov	 ecx, 1
  00e75	85 c9		 test	 ecx, ecx
  00e77	74 0c		 je	 SHORT $LN177@draw_aircr
  00e79	c7 85 a4 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv546[ebp], 233 ; 000000e9H
  00e83	eb 27		 jmp	 SHORT $LN178@draw_aircr
$LN177@draw_aircr:
  00e85	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00e8b	81 c2 8f 00 00
	00		 add	 edx, 143		; 0000008fH
  00e91	52		 push	 edx
  00e92	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e97	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00e9c	50		 push	 eax
  00e9d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ea2	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv546[ebp], 0
$LN178@draw_aircr:
  00eac	68 e9 00 00 00	 push	 233			; 000000e9H
  00eb1	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  00eb7	51		 push	 ecx
  00eb8	69 95 a8 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv538[ebp], 1116
  00ec2	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv546[ebp]
  00ec8	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00ecf	ff d1		 call	 ecx
  00ed1	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 3200 : 
; 3201 : 						if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA) || (threat_type == THREAT_TYPE_AIRBORNE_RADAR))

  00ed7	83 bd 04 ff ff
	ff 05		 cmp	 DWORD PTR _threat_type$7[ebp], 5
  00ede	74 16		 je	 SHORT $LN27@draw_aircr
  00ee0	83 bd 04 ff ff
	ff 06		 cmp	 DWORD PTR _threat_type$7[ebp], 6
  00ee7	74 0d		 je	 SHORT $LN27@draw_aircr
  00ee9	83 bd 04 ff ff
	ff 04		 cmp	 DWORD PTR _threat_type$7[ebp], 4
  00ef0	0f 85 7d 04 00
	00		 jne	 $LN31@draw_aircr
$LN27@draw_aircr:

; 3202 : 						{
; 3203 : 							if (get_local_entity_parent (threat, LIST_TYPE_TARGET) == source)

  00ef6	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00efd	74 10		 je	 SHORT $LN179@draw_aircr
  00eff	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00f05	8b 08		 mov	 ecx, DWORD PTR [eax]
  00f07	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv560[ebp], ecx
  00f0d	eb 20		 jmp	 SHORT $LN180@draw_aircr
$LN179@draw_aircr:
  00f0f	68 83 0c 00 00	 push	 3203			; 00000c83H
  00f14	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f19	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00f1f	52		 push	 edx
  00f20	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f25	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv560[ebp], 0
$LN180@draw_aircr:
  00f2f	b8 01 00 00 00	 mov	 eax, 1
  00f34	85 c0		 test	 eax, eax
  00f36	74 0c		 je	 SHORT $LN181@draw_aircr
  00f38	c7 85 a4 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv567[ebp], 38 ; 00000026H
  00f42	eb 20		 jmp	 SHORT $LN182@draw_aircr
$LN181@draw_aircr:
  00f44	68 83 0c 00 00	 push	 3203			; 00000c83H
  00f49	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f4e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00f54	51		 push	 ecx
  00f55	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f5a	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv567[ebp], 0
$LN182@draw_aircr:
  00f64	6a 26		 push	 38			; 00000026H
  00f66	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _threat$10[ebp]
  00f6c	52		 push	 edx
  00f6d	69 85 a8 fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv560[ebp], 180
  00f77	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv567[ebp]
  00f7d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  00f84	ff d2		 call	 edx
  00f86	3b 85 1c ff ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  00f8c	0f 85 e1 03 00
	00		 jne	 $LN31@draw_aircr

; 3204 : 							{
; 3205 : 								draw_threat_line = TRUE;

  00f92	c7 85 00 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR _draw_threat_line$6[ebp], 1

; 3206 : 
; 3207 : 								launched_weapon = get_local_entity_first_child (threat, LIST_TYPE_LAUNCHED_WEAPON);

  00f9c	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  00fa3	74 10		 je	 SHORT $LN183@draw_aircr
  00fa5	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  00fab	8b 08		 mov	 ecx, DWORD PTR [eax]
  00fad	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv580[ebp], ecx
  00fb3	eb 27		 jmp	 SHORT $LN184@draw_aircr
$LN183@draw_aircr:
  00fb5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00fbb	81 c2 97 00 00
	00		 add	 edx, 151		; 00000097H
  00fc1	52		 push	 edx
  00fc2	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00fc7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00fcc	50		 push	 eax
  00fcd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00fd2	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv580[ebp], 0
$LN184@draw_aircr:
  00fdc	b9 01 00 00 00	 mov	 ecx, 1
  00fe1	85 c9		 test	 ecx, ecx
  00fe3	74 0c		 je	 SHORT $LN185@draw_aircr
  00fe5	c7 85 a4 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv588[ebp], 24 ; 00000018H
  00fef	eb 27		 jmp	 SHORT $LN186@draw_aircr
$LN185@draw_aircr:
  00ff1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00ff7	81 c2 97 00 00
	00		 add	 edx, 151		; 00000097H
  00ffd	52		 push	 edx
  00ffe	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01008	50		 push	 eax
  01009	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0100e	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv588[ebp], 0
$LN186@draw_aircr:
  01018	6a 18		 push	 24			; 00000018H
  0101a	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  01020	51		 push	 ecx
  01021	69 95 a8 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv580[ebp], 180
  0102b	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv588[ebp]
  01031	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01038	ff d1		 call	 ecx
  0103a	89 85 0c ff ff
	ff		 mov	 DWORD PTR _launched_weapon$9[ebp], eax
$LN8@draw_aircr:

; 3208 : 
; 3209 : 								while (launched_weapon)

  01040	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  01047	0f 84 ec 01 00
	00		 je	 $LN9@draw_aircr

; 3210 : 								{
; 3211 : 									if (get_local_entity_int_value (launched_weapon, INT_TYPE_WEAPON_GUIDANCE_TYPE) != WEAPON_GUIDANCE_TYPE_NONE)

  0104d	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  01054	74 10		 je	 SHORT $LN187@draw_aircr
  01056	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$9[ebp]
  0105c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0105e	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv600[ebp], ecx
  01064	eb 20		 jmp	 SHORT $LN188@draw_aircr
$LN187@draw_aircr:
  01066	68 8b 0c 00 00	 push	 3211			; 00000c8bH
  0106b	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01070	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01076	52		 push	 edx
  01077	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0107c	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv600[ebp], 0
$LN188@draw_aircr:
  01086	b8 01 00 00 00	 mov	 eax, 1
  0108b	85 c0		 test	 eax, eax
  0108d	74 0c		 je	 SHORT $LN189@draw_aircr
  0108f	c7 85 a4 fe ff
	ff 07 01 00 00	 mov	 DWORD PTR tv607[ebp], 263 ; 00000107H
  01099	eb 20		 jmp	 SHORT $LN190@draw_aircr
$LN189@draw_aircr:
  0109b	68 8b 0c 00 00	 push	 3211			; 00000c8bH
  010a0	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  010a5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  010ab	51		 push	 ecx
  010ac	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  010b1	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv607[ebp], 0
$LN190@draw_aircr:
  010bb	68 07 01 00 00	 push	 263			; 00000107H
  010c0	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$9[ebp]
  010c6	52		 push	 edx
  010c7	69 85 a8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv600[ebp], 1116
  010d1	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv607[ebp]
  010d7	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  010de	ff d2		 call	 edx
  010e0	85 c0		 test	 eax, eax
  010e2	0f 84 a8 00 00
	00		 je	 $LN30@draw_aircr

; 3212 : 									{
; 3213 : 										if (get_local_entity_parent (launched_weapon, LIST_TYPE_TARGET) == source)

  010e8	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  010ef	74 10		 je	 SHORT $LN191@draw_aircr
  010f1	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$9[ebp]
  010f7	8b 08		 mov	 ecx, DWORD PTR [eax]
  010f9	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv619[ebp], ecx
  010ff	eb 20		 jmp	 SHORT $LN192@draw_aircr
$LN191@draw_aircr:
  01101	68 8d 0c 00 00	 push	 3213			; 00000c8dH
  01106	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0110b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01111	52		 push	 edx
  01112	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01117	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv619[ebp], 0
$LN192@draw_aircr:
  01121	b8 01 00 00 00	 mov	 eax, 1
  01126	85 c0		 test	 eax, eax
  01128	74 0c		 je	 SHORT $LN193@draw_aircr
  0112a	c7 85 a4 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv626[ebp], 38 ; 00000026H
  01134	eb 20		 jmp	 SHORT $LN194@draw_aircr
$LN193@draw_aircr:
  01136	68 8d 0c 00 00	 push	 3213			; 00000c8dH
  0113b	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01140	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01146	51		 push	 ecx
  01147	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0114c	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv626[ebp], 0
$LN194@draw_aircr:
  01156	6a 26		 push	 38			; 00000026H
  01158	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$9[ebp]
  0115e	52		 push	 edx
  0115f	69 85 a8 fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv619[ebp], 180
  01169	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv626[ebp]
  0116f	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  01176	ff d2		 call	 edx
  01178	3b 85 1c ff ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  0117e	75 10		 jne	 SHORT $LN30@draw_aircr

; 3214 : 										{
; 3215 : 											draw_threat_line = ase_draw_threat_line_status;

  01180	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ase_draw_threat_line_status@@3HA
  01185	89 85 00 ff ff
	ff		 mov	 DWORD PTR _draw_threat_line$6[ebp], eax

; 3216 : 
; 3217 : 											break;

  0118b	e9 a9 00 00 00	 jmp	 $LN9@draw_aircr
$LN30@draw_aircr:

; 3218 : 										}
; 3219 : 									}
; 3220 : 
; 3221 : 									launched_weapon = get_local_entity_child_succ (launched_weapon, LIST_TYPE_LAUNCHED_WEAPON);

  01190	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$9[ebp], 0
  01197	74 10		 je	 SHORT $LN195@draw_aircr
  01199	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$9[ebp]
  0119f	8b 08		 mov	 ecx, DWORD PTR [eax]
  011a1	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv639[ebp], ecx
  011a7	eb 27		 jmp	 SHORT $LN196@draw_aircr
$LN195@draw_aircr:
  011a9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  011af	81 c2 a5 00 00
	00		 add	 edx, 165		; 000000a5H
  011b5	52		 push	 edx
  011b6	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  011bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  011c0	50		 push	 eax
  011c1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  011c6	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv639[ebp], 0
$LN196@draw_aircr:
  011d0	b9 01 00 00 00	 mov	 ecx, 1
  011d5	85 c9		 test	 ecx, ecx
  011d7	74 0c		 je	 SHORT $LN197@draw_aircr
  011d9	c7 85 a4 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv647[ebp], 24 ; 00000018H
  011e3	eb 27		 jmp	 SHORT $LN198@draw_aircr
$LN197@draw_aircr:
  011e5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  011eb	81 c2 a5 00 00
	00		 add	 edx, 165		; 000000a5H
  011f1	52		 push	 edx
  011f2	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  011f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  011fc	50		 push	 eax
  011fd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01202	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv647[ebp], 0
$LN198@draw_aircr:
  0120c	6a 18		 push	 24			; 00000018H
  0120e	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _launched_weapon$9[ebp]
  01214	51		 push	 ecx
  01215	69 95 a8 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv639[ebp], 180
  0121f	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv647[ebp]
  01225	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0122c	ff d1		 call	 ecx
  0122e	89 85 0c ff ff
	ff		 mov	 DWORD PTR _launched_weapon$9[ebp], eax

; 3222 : 								}

  01234	e9 07 fe ff ff	 jmp	 $LN8@draw_aircr
$LN9@draw_aircr:

; 3223 : 
; 3224 : 								if (draw_threat_line)

  01239	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _draw_threat_line$6[ebp], 0
  01240	0f 84 2d 01 00
	00		 je	 $LN31@draw_aircr

; 3225 : 								{
; 3226 : 									threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  01246	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0124d	74 10		 je	 SHORT $LN199@draw_aircr
  0124f	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  01255	8b 08		 mov	 ecx, DWORD PTR [eax]
  01257	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv660[ebp], ecx
  0125d	eb 27		 jmp	 SHORT $LN200@draw_aircr
$LN199@draw_aircr:
  0125f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  01265	81 c2 aa 00 00
	00		 add	 edx, 170		; 000000aaH
  0126b	52		 push	 edx
  0126c	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01271	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01276	50		 push	 eax
  01277	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0127c	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv660[ebp], 0
$LN200@draw_aircr:
  01286	b9 01 00 00 00	 mov	 ecx, 1
  0128b	85 c9		 test	 ecx, ecx
  0128d	74 0c		 je	 SHORT $LN201@draw_aircr
  0128f	c7 85 a4 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv668[ebp], 8
  01299	eb 27		 jmp	 SHORT $LN202@draw_aircr
$LN201@draw_aircr:
  0129b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  012a1	81 c2 aa 00 00
	00		 add	 edx, 170		; 000000aaH
  012a7	52		 push	 edx
  012a8	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  012ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  012b2	50		 push	 eax
  012b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  012b8	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv668[ebp], 0
$LN202@draw_aircr:
  012c2	6a 08		 push	 8
  012c4	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  012ca	51		 push	 ecx
  012cb	6b 95 a8 fe ff
	ff 60		 imul	 edx, DWORD PTR tv660[ebp], 96
  012d2	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv668[ebp]
  012d8	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  012df	ff d1		 call	 ecx
  012e1	89 85 08 ff ff
	ff		 mov	 DWORD PTR _threat_position$8[ebp], eax

; 3227 : 
; 3228 : 									dx = (threat_position->x - source_position->x) * scale;

  012e7	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  012ed	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  012f3	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  012f7	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  012fb	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01303	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 3229 : 									dy = (threat_position->z - source_position->z) * scale;

  0130b	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  01311	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01317	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0131c	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  01321	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01329	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _dy$3[ebp], xmm0

; 3230 : 
; 3231 : 									draw_2d_line (0.0, 0.0, dx, dy, MFD_COLOUR_RED);

  01331	b8 04 00 00 00	 mov	 eax, 4
  01336	6b c8 12	 imul	 ecx, eax, 18
  01339	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0133f	52		 push	 edx
  01340	51		 push	 ecx
  01341	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  01349	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0134e	51		 push	 ecx
  0134f	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  01357	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0135c	51		 push	 ecx
  0135d	0f 57 c0	 xorps	 xmm0, xmm0
  01360	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01365	51		 push	 ecx
  01366	0f 57 c0	 xorps	 xmm0, xmm0
  01369	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0136e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN31@draw_aircr:

; 3232 : 								}
; 3233 : 							}
; 3234 : 						}
; 3235 : 					}
; 3236 : 				}
; 3237 : 			}
; 3238 : 
; 3239 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_GUNSHIP_TARGET);

  01373	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0137a	74 10		 je	 SHORT $LN203@draw_aircr
  0137c	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  01382	8b 08		 mov	 ecx, DWORD PTR [eax]
  01384	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv695[ebp], ecx
  0138a	eb 27		 jmp	 SHORT $LN204@draw_aircr
$LN203@draw_aircr:
  0138c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  01392	81 c2 b7 00 00
	00		 add	 edx, 183		; 000000b7H
  01398	52		 push	 edx
  01399	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0139e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  013a3	50		 push	 eax
  013a4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  013a9	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv695[ebp], 0
$LN204@draw_aircr:
  013b3	b9 01 00 00 00	 mov	 ecx, 1
  013b8	85 c9		 test	 ecx, ecx
  013ba	74 0c		 je	 SHORT $LN205@draw_aircr
  013bc	c7 85 a4 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv703[ebp], 18 ; 00000012H
  013c6	eb 27		 jmp	 SHORT $LN206@draw_aircr
$LN205@draw_aircr:
  013c8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  013ce	81 c2 b7 00 00
	00		 add	 edx, 183		; 000000b7H
  013d4	52		 push	 edx
  013d5	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  013da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  013df	50		 push	 eax
  013e0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  013e5	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv703[ebp], 0
$LN206@draw_aircr:
  013ef	6a 12		 push	 18			; 00000012H
  013f1	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  013f7	51		 push	 ecx
  013f8	69 95 a8 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv695[ebp], 180
  01402	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv703[ebp]
  01408	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0140f	ff d1		 call	 ecx
  01411	89 85 10 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 3240 : 		}

  01417	e9 35 f8 ff ff	 jmp	 $LN6@draw_aircr
$LN7@draw_aircr:

; 3241 : 
; 3242 : 		//
; 3243 : 		// draw incoming missiles
; 3244 : 		//
; 3245 : 
; 3246 : 		threat = get_local_entity_first_child (source, LIST_TYPE_TARGET);

  0141c	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01423	74 10		 je	 SHORT $LN207@draw_aircr
  01425	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0142b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0142d	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv715[ebp], ecx
  01433	eb 27		 jmp	 SHORT $LN208@draw_aircr
$LN207@draw_aircr:
  01435	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  0143b	81 c2 be 00 00
	00		 add	 edx, 190		; 000000beH
  01441	52		 push	 edx
  01442	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01447	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0144c	50		 push	 eax
  0144d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01452	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv715[ebp], 0
$LN208@draw_aircr:
  0145c	b9 01 00 00 00	 mov	 ecx, 1
  01461	85 c9		 test	 ecx, ecx
  01463	74 0c		 je	 SHORT $LN209@draw_aircr
  01465	c7 85 a4 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv723[ebp], 38 ; 00000026H
  0146f	eb 27		 jmp	 SHORT $LN210@draw_aircr
$LN209@draw_aircr:
  01471	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  01477	81 c2 be 00 00
	00		 add	 edx, 190		; 000000beH
  0147d	52		 push	 edx
  0147e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01483	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01488	50		 push	 eax
  01489	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0148e	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv723[ebp], 0
$LN210@draw_aircr:
  01498	6a 26		 push	 38			; 00000026H
  0149a	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  014a0	51		 push	 ecx
  014a1	69 95 a8 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv715[ebp], 180
  014ab	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv723[ebp]
  014b1	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  014b8	ff d1		 call	 ecx
  014ba	89 85 10 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax
$LN10@draw_aircr:

; 3247 : 
; 3248 : 		while (threat)

  014c0	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  014c7	0f 84 39 03 00
	00		 je	 $LN11@draw_aircr

; 3249 : 		{
; 3250 : 			threat_type = (threat_types) get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE);

  014cd	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  014d4	74 10		 je	 SHORT $LN211@draw_aircr
  014d6	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  014dc	8b 08		 mov	 ecx, DWORD PTR [eax]
  014de	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv736[ebp], ecx
  014e4	eb 27		 jmp	 SHORT $LN212@draw_aircr
$LN211@draw_aircr:
  014e6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  014ec	81 c2 c2 00 00
	00		 add	 edx, 194		; 000000c2H
  014f2	52		 push	 edx
  014f3	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  014f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  014fd	50		 push	 eax
  014fe	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01503	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv736[ebp], 0
$LN212@draw_aircr:
  0150d	b9 01 00 00 00	 mov	 ecx, 1
  01512	85 c9		 test	 ecx, ecx
  01514	74 0c		 je	 SHORT $LN213@draw_aircr
  01516	c7 85 a4 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv744[ebp], 233 ; 000000e9H
  01520	eb 27		 jmp	 SHORT $LN214@draw_aircr
$LN213@draw_aircr:
  01522	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  01528	81 c2 c2 00 00
	00		 add	 edx, 194		; 000000c2H
  0152e	52		 push	 edx
  0152f	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01534	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01539	50		 push	 eax
  0153a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0153f	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv744[ebp], 0
$LN214@draw_aircr:
  01549	68 e9 00 00 00	 push	 233			; 000000e9H
  0154e	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  01554	51		 push	 ecx
  01555	69 95 a8 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv736[ebp], 1116
  0155f	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv744[ebp]
  01565	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  0156c	ff d1		 call	 ecx
  0156e	89 85 04 ff ff
	ff		 mov	 DWORD PTR _threat_type$7[ebp], eax

; 3251 : 
; 3252 : 			if ((threat_type == THREAT_TYPE_RF_MISSILE) || (threat_type == THREAT_TYPE_IR_MISSILE) || (threat_type == THREAT_TYPE_LASER_MISSILE))

  01574	83 bd 04 ff ff
	ff 01		 cmp	 DWORD PTR _threat_type$7[ebp], 1
  0157b	74 16		 je	 SHORT $LN33@draw_aircr
  0157d	83 bd 04 ff ff
	ff 02		 cmp	 DWORD PTR _threat_type$7[ebp], 2
  01584	74 0d		 je	 SHORT $LN33@draw_aircr
  01586	83 bd 04 ff ff
	ff 03		 cmp	 DWORD PTR _threat_type$7[ebp], 3
  0158d	0f 85 ca 01 00
	00		 jne	 $LN35@draw_aircr
$LN33@draw_aircr:

; 3253 : 			{
; 3254 : 				threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  01593	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  0159a	74 10		 je	 SHORT $LN215@draw_aircr
  0159c	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  015a2	8b 08		 mov	 ecx, DWORD PTR [eax]
  015a4	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv759[ebp], ecx
  015aa	eb 27		 jmp	 SHORT $LN216@draw_aircr
$LN215@draw_aircr:
  015ac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  015b2	81 c2 c6 00 00
	00		 add	 edx, 198		; 000000c6H
  015b8	52		 push	 edx
  015b9	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  015be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  015c3	50		 push	 eax
  015c4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  015c9	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv759[ebp], 0
$LN216@draw_aircr:
  015d3	b9 01 00 00 00	 mov	 ecx, 1
  015d8	85 c9		 test	 ecx, ecx
  015da	74 0c		 je	 SHORT $LN217@draw_aircr
  015dc	c7 85 a4 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv767[ebp], 8
  015e6	eb 27		 jmp	 SHORT $LN218@draw_aircr
$LN217@draw_aircr:
  015e8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  015ee	81 c2 c6 00 00
	00		 add	 edx, 198		; 000000c6H
  015f4	52		 push	 edx
  015f5	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  015fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  015ff	50		 push	 eax
  01600	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01605	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv767[ebp], 0
$LN218@draw_aircr:
  0160f	6a 08		 push	 8
  01611	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  01617	51		 push	 ecx
  01618	6b 95 a8 fe ff
	ff 60		 imul	 edx, DWORD PTR tv759[ebp], 96
  0161f	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv767[ebp]
  01625	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0162c	ff d1		 call	 ecx
  0162e	89 85 08 ff ff
	ff		 mov	 DWORD PTR _threat_position$8[ebp], eax

; 3255 : 
; 3256 : 				dx = (threat_position->x - source_position->x) * scale;

  01634	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  0163a	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01640	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01644	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  01648	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01650	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 3257 : 				dy = (threat_position->z - source_position->z) * scale;

  01658	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _threat_position$8[ebp]
  0165e	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01664	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01669	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0166e	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01676	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _dy$3[ebp], xmm0

; 3258 : 
; 3259 : 				if (draw_large_mfd)

  0167e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01685	74 6c		 je	 SHORT $LN34@draw_aircr

; 3260 : 				{
; 3261 : 					draw_2d_mono_sprite (large_ase_missile_mask, dx, dy, MFD_COLOUR6);

  01687	b8 04 00 00 00	 mov	 eax, 4
  0168c	6b c8 05	 imul	 ecx, eax, 5
  0168f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01695	52		 push	 edx
  01696	51		 push	 ecx
  01697	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  0169f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016a4	51		 push	 ecx
  016a5	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  016ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016b2	68 00 00 00 00	 push	 OFFSET ?large_ase_missile_mask@@3PADA
  016b7	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 3262 : 
; 3263 : 					draw_2d_mono_sprite (large_ase_missile, dx, dy, MFD_COLOUR1);

  016bc	b8 04 00 00 00	 mov	 eax, 4
  016c1	6b c8 00	 imul	 ecx, eax, 0
  016c4	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  016ca	52		 push	 edx
  016cb	51		 push	 ecx
  016cc	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  016d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016d9	51		 push	 ecx
  016da	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  016e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016e7	68 00 00 00 00	 push	 OFFSET ?large_ase_missile@@3PADA
  016ec	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 3264 : 				}
; 3265 : 				else

  016f1	eb 6a		 jmp	 SHORT $LN35@draw_aircr
$LN34@draw_aircr:

; 3266 : 				{
; 3267 : 					draw_2d_mono_sprite (small_ase_missile_mask, dx, dy, MFD_COLOUR6);

  016f3	b8 04 00 00 00	 mov	 eax, 4
  016f8	6b c8 05	 imul	 ecx, eax, 5
  016fb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01701	52		 push	 edx
  01702	51		 push	 ecx
  01703	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  0170b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01710	51		 push	 ecx
  01711	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  01719	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0171e	68 00 00 00 00	 push	 OFFSET ?small_ase_missile_mask@@3PADA
  01723	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 3268 : 
; 3269 : 					draw_2d_mono_sprite (small_ase_missile, dx, dy, MFD_COLOUR1);

  01728	b8 04 00 00 00	 mov	 eax, 4
  0172d	6b c8 00	 imul	 ecx, eax, 0
  01730	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01736	52		 push	 edx
  01737	51		 push	 ecx
  01738	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$3[ebp]
  01740	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01745	51		 push	 ecx
  01746	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  0174e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01753	68 00 00 00 00	 push	 OFFSET ?small_ase_missile@@3PADA
  01758	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN35@draw_aircr:

; 3270 : 				}
; 3271 : 			}
; 3272 : 
; 3273 : 			threat = get_local_entity_child_succ (threat, LIST_TYPE_TARGET);

  0175d	83 bd 10 ff ff
	ff 00		 cmp	 DWORD PTR _threat$10[ebp], 0
  01764	74 10		 je	 SHORT $LN219@draw_aircr
  01766	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _threat$10[ebp]
  0176c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0176e	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv812[ebp], ecx
  01774	eb 27		 jmp	 SHORT $LN220@draw_aircr
$LN219@draw_aircr:
  01776	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  0177c	81 c2 d9 00 00
	00		 add	 edx, 217		; 000000d9H
  01782	52		 push	 edx
  01783	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01788	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0178d	50		 push	 eax
  0178e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01793	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv812[ebp], 0
$LN220@draw_aircr:
  0179d	b9 01 00 00 00	 mov	 ecx, 1
  017a2	85 c9		 test	 ecx, ecx
  017a4	74 0c		 je	 SHORT $LN221@draw_aircr
  017a6	c7 85 a4 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv820[ebp], 38 ; 00000026H
  017b0	eb 27		 jmp	 SHORT $LN222@draw_aircr
$LN221@draw_aircr:
  017b2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  017b8	81 c2 d9 00 00
	00		 add	 edx, 217		; 000000d9H
  017be	52		 push	 edx
  017bf	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  017c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  017c9	50		 push	 eax
  017ca	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  017cf	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv820[ebp], 0
$LN222@draw_aircr:
  017d9	6a 26		 push	 38			; 00000026H
  017db	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _threat$10[ebp]
  017e1	51		 push	 ecx
  017e2	69 95 a8 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv812[ebp], 180
  017ec	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR tv820[ebp]
  017f2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  017f9	ff d1		 call	 ecx
  017fb	89 85 10 ff ff
	ff		 mov	 DWORD PTR _threat$10[ebp], eax

; 3274 : 		}

  01801	e9 ba fc ff ff	 jmp	 $LN10@draw_aircr
$LN11@draw_aircr:

; 3275 : 
; 3276 : 		set_2d_window_rotation (mfd_env, 0.0);

  01806	51		 push	 ecx
  01807	0f 57 c0	 xorps	 xmm0, xmm0
  0180a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0180f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01814	50		 push	 eax
  01815	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 3277 : 	}
; 3278 : 
; 3279 : 	////////////////////////////////////////
; 3280 : 	//
; 3281 : 	// aircraft datum symbol
; 3282 : 	//
; 3283 : 	////////////////////////////////////////
; 3284 : 
; 3285 : 	if (draw_large_mfd)

  0181a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01821	74 58		 je	 SHORT $LN36@draw_aircr

; 3286 : 	{
; 3287 : 		draw_2d_mono_sprite (large_tsd_ase_aircraft_datum_mask, 0.0, 0.0, MFD_COLOUR6);

  01823	b8 04 00 00 00	 mov	 eax, 4
  01828	6b c8 05	 imul	 ecx, eax, 5
  0182b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01831	52		 push	 edx
  01832	51		 push	 ecx
  01833	0f 57 c0	 xorps	 xmm0, xmm0
  01836	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0183b	51		 push	 ecx
  0183c	0f 57 c0	 xorps	 xmm0, xmm0
  0183f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01844	68 00 00 00 00	 push	 OFFSET ?large_tsd_ase_aircraft_datum_mask@@3PADA
  01849	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 3288 : 
; 3289 : 		draw_2d_mono_sprite (large_tsd_ase_aircraft_datum, 0.0, 0.0, MFD_COLOUR1);

  0184e	b8 04 00 00 00	 mov	 eax, 4
  01853	6b c8 00	 imul	 ecx, eax, 0
  01856	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0185c	52		 push	 edx
  0185d	51		 push	 ecx
  0185e	0f 57 c0	 xorps	 xmm0, xmm0
  01861	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01866	51		 push	 ecx
  01867	0f 57 c0	 xorps	 xmm0, xmm0
  0186a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0186f	68 00 00 00 00	 push	 OFFSET ?large_tsd_ase_aircraft_datum@@3PADA
  01874	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 3290 : 	}
; 3291 : 	else

  01879	eb 56		 jmp	 SHORT $LN37@draw_aircr
$LN36@draw_aircr:

; 3292 : 	{
; 3293 : 		draw_2d_mono_sprite (small_tsd_ase_aircraft_datum_mask, 0.0, 0.0, MFD_COLOUR6);

  0187b	b8 04 00 00 00	 mov	 eax, 4
  01880	6b c8 05	 imul	 ecx, eax, 5
  01883	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01889	52		 push	 edx
  0188a	51		 push	 ecx
  0188b	0f 57 c0	 xorps	 xmm0, xmm0
  0188e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01893	51		 push	 ecx
  01894	0f 57 c0	 xorps	 xmm0, xmm0
  01897	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0189c	68 00 00 00 00	 push	 OFFSET ?small_tsd_ase_aircraft_datum_mask@@3PADA
  018a1	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 3294 : 
; 3295 : 		draw_2d_mono_sprite (small_tsd_ase_aircraft_datum, 0.0, 0.0, MFD_COLOUR1);

  018a6	b8 04 00 00 00	 mov	 eax, 4
  018ab	6b c8 00	 imul	 ecx, eax, 0
  018ae	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  018b4	52		 push	 edx
  018b5	51		 push	 ecx
  018b6	0f 57 c0	 xorps	 xmm0, xmm0
  018b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018be	51		 push	 ecx
  018bf	0f 57 c0	 xorps	 xmm0, xmm0
  018c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018c7	68 00 00 00 00	 push	 OFFSET ?small_tsd_ase_aircraft_datum@@3PADA
  018cc	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN37@draw_aircr:

; 3296 : 	}
; 3297 : 
; 3298 : 	set_mono_font_colour (MFD_COLOUR_GREEN);

  018d1	b8 04 00 00 00	 mov	 eax, 4
  018d6	6b c8 0d	 imul	 ecx, eax, 13
  018d9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  018df	52		 push	 edx
  018e0	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 3299 : 
; 3300 : 	if (draw_large_mfd)

  018e5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  018ec	74 09		 je	 SHORT $LN38@draw_aircr

; 3301 : 	{
; 3302 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  018ee	6a 05		 push	 5
  018f0	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 3303 : 	}
; 3304 : 	else

  018f5	eb 07		 jmp	 SHORT $LN39@draw_aircr
$LN38@draw_aircr:

; 3305 : 	{
; 3306 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  018f7	6a 01		 push	 1
  018f9	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN39@draw_aircr:

; 3307 : 	}
; 3308 : 
; 3309 : 	////////////////////////////////////////
; 3310 : 	//
; 3311 : 	// text
; 3312 : 	//
; 3313 : 	////////////////////////////////////////
; 3314 : 
; 3315 : 	//
; 3316 : 	// closest incoming missile
; 3317 : 	//
; 3318 : 
; 3319 : 	{
; 3320 : 		entity
; 3321 : 			*closest_missile;
; 3322 : 
; 3323 : 		float
; 3324 : 			time_to_impact;
; 3325 : 
; 3326 : 		if (draw_large_mfd)

  018fe	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01905	74 12		 je	 SHORT $LN40@draw_aircr

; 3327 : 		{
; 3328 : 			y_adjust = 5.0;

  01907	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  0190f	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3329 : 		}
; 3330 : 		else

  01917	eb 10		 jmp	 SHORT $LN41@draw_aircr
$LN40@draw_aircr:

; 3331 : 		{
; 3332 : 			y_adjust = 2.0;

  01919	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  01921	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN41@draw_aircr:

; 3333 : 		}
; 3334 : 
; 3335 : 		closest_missile = get_closest_missile (source, source_position, THREAT_TYPE_IR_MISSILE, &time_to_impact);

  01929	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _time_to_impact$1[ebp]
  0192f	50		 push	 eax
  01930	6a 02		 push	 2
  01932	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01938	51		 push	 ecx
  01939	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  0193f	52		 push	 edx
  01940	e8 00 00 00 00	 call	 ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ; get_closest_missile
  01945	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _closest_missile$2[ebp], eax

; 3336 : 
; 3337 : 		if (closest_missile)

  0194b	83 bd f0 fe ff
	ff 00		 cmp	 DWORD PTR _closest_missile$2[ebp], 0
  01952	0f 84 b5 00 00
	00		 je	 $LN44@draw_aircr

; 3338 : 		{
; 3339 : 			set_2d_mono_font_position (-1.0, 1.0);

  01958	51		 push	 ecx
  01959	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01961	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01966	51		 push	 ecx
  01967	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0196f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01974	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3340 : 
; 3341 : 			set_mono_font_rel_position (1.0, y_adjust);

  01979	51		 push	 ecx
  0197a	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01982	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01987	51		 push	 ecx
  01988	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01990	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01995	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3342 : 
; 3343 : 			sprintf (buffer, "IR MSL:%.1f", time_to_impact);

  0199a	f3 0f 5a 85 ec
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _time_to_impact$1[ebp]
  019a2	83 ec 08	 sub	 esp, 8
  019a5	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  019aa	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MLJDMDII@IR?5MSL?3?$CF?41f@
  019af	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  019b5	50		 push	 eax
  019b6	e8 00 00 00 00	 call	 _sprintf
  019bb	83 c4 10	 add	 esp, 16			; 00000010H

; 3344 : 
; 3345 : 			print_mono_font_string (buffer);

  019be	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  019c4	50		 push	 eax
  019c5	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3346 : 
; 3347 : 			if (draw_large_mfd)

  019ca	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  019d1	74 1e		 je	 SHORT $LN43@draw_aircr

; 3348 : 			{
; 3349 : 				y_adjust += 13.0;

  019d3	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  019db	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@402a000000000000
  019e3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  019e7	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3350 : 			}
; 3351 : 			else

  019ef	eb 1c		 jmp	 SHORT $LN44@draw_aircr
$LN43@draw_aircr:

; 3352 : 			{
; 3353 : 				y_adjust += 7.0;

  019f1	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  019f9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@401c000000000000
  01a01	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01a05	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN44@draw_aircr:

; 3354 : 			}
; 3355 : 		}
; 3356 : 
; 3357 : 		closest_missile = get_closest_missile (source, source_position, THREAT_TYPE_RF_MISSILE, &time_to_impact);

  01a0d	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _time_to_impact$1[ebp]
  01a13	50		 push	 eax
  01a14	6a 01		 push	 1
  01a16	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01a1c	51		 push	 ecx
  01a1d	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01a23	52		 push	 edx
  01a24	e8 00 00 00 00	 call	 ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ; get_closest_missile
  01a29	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _closest_missile$2[ebp], eax

; 3358 : 
; 3359 : 		if (closest_missile)

  01a2f	83 bd f0 fe ff
	ff 00		 cmp	 DWORD PTR _closest_missile$2[ebp], 0
  01a36	0f 84 b5 00 00
	00		 je	 $LN47@draw_aircr

; 3360 : 		{
; 3361 : 			set_2d_mono_font_position (-1.0, 1.0);

  01a3c	51		 push	 ecx
  01a3d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01a45	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a4a	51		 push	 ecx
  01a4b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01a53	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a58	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3362 : 
; 3363 : 			set_mono_font_rel_position (1.0, y_adjust);

  01a5d	51		 push	 ecx
  01a5e	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01a66	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a6b	51		 push	 ecx
  01a6c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01a74	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a79	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3364 : 
; 3365 : 			sprintf (buffer, "RF MSL:%.1f", time_to_impact);

  01a7e	f3 0f 5a 85 ec
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _time_to_impact$1[ebp]
  01a86	83 ec 08	 sub	 esp, 8
  01a89	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01a8e	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KIDGDNDD@RF?5MSL?3?$CF?41f@
  01a93	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01a99	50		 push	 eax
  01a9a	e8 00 00 00 00	 call	 _sprintf
  01a9f	83 c4 10	 add	 esp, 16			; 00000010H

; 3366 : 
; 3367 : 			print_mono_font_string (buffer);

  01aa2	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01aa8	50		 push	 eax
  01aa9	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3368 : 
; 3369 : 			if (draw_large_mfd)

  01aae	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01ab5	74 1e		 je	 SHORT $LN46@draw_aircr

; 3370 : 			{
; 3371 : 				y_adjust += 13.0;

  01ab7	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01abf	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@402a000000000000
  01ac7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01acb	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3372 : 			}
; 3373 : 			else

  01ad3	eb 1c		 jmp	 SHORT $LN47@draw_aircr
$LN46@draw_aircr:

; 3374 : 			{
; 3375 : 				y_adjust += 7.0;

  01ad5	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y_adjust$[ebp]
  01add	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@401c000000000000
  01ae5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01ae9	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN47@draw_aircr:

; 3376 : 			}
; 3377 : 		}
; 3378 : 
; 3379 : 		closest_missile = get_closest_missile (source, source_position, THREAT_TYPE_LASER_MISSILE, &time_to_impact);

  01af1	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _time_to_impact$1[ebp]
  01af7	50		 push	 eax
  01af8	6a 03		 push	 3
  01afa	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01b00	51		 push	 ecx
  01b01	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01b07	52		 push	 edx
  01b08	e8 00 00 00 00	 call	 ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ; get_closest_missile
  01b0d	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _closest_missile$2[ebp], eax

; 3380 : 
; 3381 : 		if (closest_missile)

  01b13	83 bd f0 fe ff
	ff 00		 cmp	 DWORD PTR _closest_missile$2[ebp], 0
  01b1a	74 72		 je	 SHORT $LN48@draw_aircr

; 3382 : 		{
; 3383 : 			set_2d_mono_font_position (-1.0, 1.0);

  01b1c	51		 push	 ecx
  01b1d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01b25	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b2a	51		 push	 ecx
  01b2b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01b33	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b38	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3384 : 
; 3385 : 			set_mono_font_rel_position (1.0, y_adjust);

  01b3d	51		 push	 ecx
  01b3e	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01b46	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b4b	51		 push	 ecx
  01b4c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01b54	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b59	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3386 : 
; 3387 : 			sprintf (buffer, "LS MSL:%.1f", time_to_impact);

  01b5e	f3 0f 5a 85 ec
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _time_to_impact$1[ebp]
  01b66	83 ec 08	 sub	 esp, 8
  01b69	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01b6e	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JCLOGLFI@LS?5MSL?3?$CF?41f@
  01b73	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01b79	50		 push	 eax
  01b7a	e8 00 00 00 00	 call	 _sprintf
  01b7f	83 c4 10	 add	 esp, 16			; 00000010H

; 3388 : 
; 3389 : 			print_mono_font_string (buffer);

  01b82	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  01b88	50		 push	 eax
  01b89	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN48@draw_aircr:

; 3390 : 		}
; 3391 : 	}
; 3392 : 
; 3393 : 	//
; 3394 : 	// ASE range
; 3395 : 	//
; 3396 : 
; 3397 : 	if (tsd_ase_range == TSD_ASE_RANGE_2000)

  01b8e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  01b96	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  01b9d	9f		 lahf
  01b9e	f6 c4 44	 test	 ah, 68			; 00000044H
  01ba1	7a 09		 jp	 SHORT $LN49@draw_aircr

; 3398 : 	{
; 3399 : 		s = "2.5KM";

  01ba3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_05IHJDDCGF@2?45KM@
  01baa	eb 61		 jmp	 SHORT $LN56@draw_aircr
$LN49@draw_aircr:

; 3400 : 	}
; 3401 : 	else if (tsd_ase_range == TSD_ASE_RANGE_5000)

  01bac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  01bb4	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  01bbb	9f		 lahf
  01bbc	f6 c4 44	 test	 ah, 68			; 00000044H
  01bbf	7a 09		 jp	 SHORT $LN51@draw_aircr

; 3402 : 	{
; 3403 : 		s = "5KM";

  01bc1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03CAFGHLBJ@5KM@
  01bc8	eb 43		 jmp	 SHORT $LN56@draw_aircr
$LN51@draw_aircr:

; 3404 : 	}
; 3405 : 	else if (tsd_ase_range == TSD_ASE_RANGE_10000)

  01bca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  01bd2	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  01bd9	9f		 lahf
  01bda	f6 c4 44	 test	 ah, 68			; 00000044H
  01bdd	7a 09		 jp	 SHORT $LN53@draw_aircr

; 3406 : 	{
; 3407 : 		s = "10KM";

  01bdf	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04GMKPDCBM@10KM@
  01be6	eb 25		 jmp	 SHORT $LN56@draw_aircr
$LN53@draw_aircr:

; 3408 : 	}
; 3409 : 	else if (tsd_ase_range == TSD_ASE_RANGE_25000)

  01be8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  01bf0	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  01bf7	9f		 lahf
  01bf8	f6 c4 44	 test	 ah, 68			; 00000044H
  01bfb	7a 09		 jp	 SHORT $LN55@draw_aircr

; 3410 : 	{
; 3411 : 		s = "25KM";

  01bfd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04BMNBLIPO@25KM@

; 3412 : 	}
; 3413 : 	else

  01c04	eb 07		 jmp	 SHORT $LN56@draw_aircr
$LN55@draw_aircr:

; 3414 : 	{
; 3415 : 		s = "XXX";

  01c06	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN56@draw_aircr:

; 3416 : 	}
; 3417 : 
; 3418 : 	width = get_mono_font_string_width (s);

  01c0d	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  01c10	50		 push	 eax
  01c11	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  01c16	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 3419 : 
; 3420 : 	if (draw_large_mfd)

  01c1c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01c23	74 2e		 je	 SHORT $LN57@draw_aircr

; 3421 : 	{
; 3422 : 		width += 2.0;

  01c25	f3 0f 5a 85 28
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  01c2d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  01c35	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c39	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 3423 : 
; 3424 : 		y_adjust = 5.0;

  01c41	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  01c49	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3425 : 	}
; 3426 : 	else

  01c51	eb 2c		 jmp	 SHORT $LN58@draw_aircr
$LN57@draw_aircr:

; 3427 : 	{
; 3428 : 		width += 1.0;

  01c53	f3 0f 5a 85 28
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  01c5b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  01c63	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c67	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 3429 : 
; 3430 : 		y_adjust = 2.0;

  01c6f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  01c77	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN58@draw_aircr:

; 3431 : 	}
; 3432 : 
; 3433 : 	set_2d_mono_font_position (1.0, 1.0);

  01c7f	51		 push	 ecx
  01c80	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01c88	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c8d	51		 push	 ecx
  01c8e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01c96	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c9b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3434 : 
; 3435 : 	set_mono_font_rel_position (-width, y_adjust);

  01ca0	51		 push	 ecx
  01ca1	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01ca9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cae	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  01cb6	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  01cbd	51		 push	 ecx
  01cbe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cc3	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3436 : 
; 3437 : 	print_mono_font_string (s);

  01cc8	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  01ccb	50		 push	 eax
  01ccc	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3438 : 
; 3439 : 	//
; 3440 : 	// jammers
; 3441 : 	//
; 3442 : 
; 3443 : 	if (draw_large_mfd)

  01cd1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01cd8	0f 84 d2 00 00
	00		 je	 $LN59@draw_aircr

; 3444 : 	{
; 3445 : 		if (ka50_damage.infra_red_jammer)

  01cde	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  01ce3	c1 e8 03	 shr	 eax, 3
  01ce6	83 e0 01	 and	 eax, 1
  01ce9	74 0c		 je	 SHORT $LN61@draw_aircr

; 3446 : 		{
; 3447 : 			s = "IR JAM XXX";

  01ceb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@DADPKEOI@IR?5JAM?5XXX@

; 3448 : 		}
; 3449 : 		else

  01cf2	e9 a4 00 00 00	 jmp	 $LN64@draw_aircr
$LN61@draw_aircr:

; 3450 : 		{
; 3451 : 			if (get_local_entity_int_value (source, INT_TYPE_INFRA_RED_JAMMER_ON))

  01cf7	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01cfe	74 10		 je	 SHORT $LN223@draw_aircr
  01d00	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01d06	8b 08		 mov	 ecx, DWORD PTR [eax]
  01d08	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv979[ebp], ecx
  01d0e	eb 20		 jmp	 SHORT $LN224@draw_aircr
$LN223@draw_aircr:
  01d10	68 7b 0d 00 00	 push	 3451			; 00000d7bH
  01d15	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01d1a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01d20	52		 push	 edx
  01d21	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01d26	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv979[ebp], 0
$LN224@draw_aircr:
  01d30	b8 01 00 00 00	 mov	 eax, 1
  01d35	85 c0		 test	 eax, eax
  01d37	74 0c		 je	 SHORT $LN225@draw_aircr
  01d39	c7 85 a4 fe ff
	ff 68 00 00 00	 mov	 DWORD PTR tv986[ebp], 104 ; 00000068H
  01d43	eb 20		 jmp	 SHORT $LN226@draw_aircr
$LN225@draw_aircr:
  01d45	68 7b 0d 00 00	 push	 3451			; 00000d7bH
  01d4a	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01d4f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01d55	51		 push	 ecx
  01d56	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01d5b	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv986[ebp], 0
$LN226@draw_aircr:
  01d65	6a 68		 push	 104			; 00000068H
  01d67	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01d6d	52		 push	 edx
  01d6e	69 85 a8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv979[ebp], 1116
  01d78	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv986[ebp]
  01d7e	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01d85	ff d2		 call	 edx
  01d87	85 c0		 test	 eax, eax
  01d89	74 09		 je	 SHORT $LN63@draw_aircr

; 3452 : 			{
; 3453 : 				s = "IR JAM ON";

  01d8b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_09OKBKNIAL@IR?5JAM?5ON@

; 3454 : 			}
; 3455 : 			else

  01d92	eb 07		 jmp	 SHORT $LN64@draw_aircr
$LN63@draw_aircr:

; 3456 : 			{
; 3457 : 				s = "IR JAM OFF";

  01d94	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@DPAIHKGL@IR?5JAM?5OFF@
$LN64@draw_aircr:

; 3458 : 			}
; 3459 : 		}
; 3460 : 
; 3461 : 		y_adjust = -25.0;

  01d9b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  01da3	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3462 : 	}
; 3463 : 	else

  01dab	e9 cd 00 00 00	 jmp	 $LN60@draw_aircr
$LN59@draw_aircr:

; 3464 : 	{
; 3465 : 		if (ka50_damage.infra_red_jammer)

  01db0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  01db5	c1 e8 03	 shr	 eax, 3
  01db8	83 e0 01	 and	 eax, 1
  01dbb	74 0c		 je	 SHORT $LN65@draw_aircr

; 3466 : 		{
; 3467 : 			s = "IR XXX";

  01dbd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06CNPDBJMK@IR?5XXX@

; 3468 : 		}
; 3469 : 		else

  01dc4	e9 a4 00 00 00	 jmp	 $LN68@draw_aircr
$LN65@draw_aircr:

; 3470 : 		{
; 3471 : 			if (get_local_entity_int_value (source, INT_TYPE_INFRA_RED_JAMMER_ON))

  01dc9	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01dd0	74 10		 je	 SHORT $LN227@draw_aircr
  01dd2	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01dd8	8b 08		 mov	 ecx, DWORD PTR [eax]
  01dda	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv1001[ebp], ecx
  01de0	eb 20		 jmp	 SHORT $LN228@draw_aircr
$LN227@draw_aircr:
  01de2	68 8f 0d 00 00	 push	 3471			; 00000d8fH
  01de7	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01dec	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01df2	52		 push	 edx
  01df3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01df8	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1001[ebp], 0
$LN228@draw_aircr:
  01e02	b8 01 00 00 00	 mov	 eax, 1
  01e07	85 c0		 test	 eax, eax
  01e09	74 0c		 je	 SHORT $LN229@draw_aircr
  01e0b	c7 85 a4 fe ff
	ff 68 00 00 00	 mov	 DWORD PTR tv1008[ebp], 104 ; 00000068H
  01e15	eb 20		 jmp	 SHORT $LN230@draw_aircr
$LN229@draw_aircr:
  01e17	68 8f 0d 00 00	 push	 3471			; 00000d8fH
  01e1c	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01e21	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01e27	51		 push	 ecx
  01e28	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01e2d	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1008[ebp], 0
$LN230@draw_aircr:
  01e37	6a 68		 push	 104			; 00000068H
  01e39	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01e3f	52		 push	 edx
  01e40	69 85 a8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1001[ebp], 1116
  01e4a	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv1008[ebp]
  01e50	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01e57	ff d2		 call	 edx
  01e59	85 c0		 test	 eax, eax
  01e5b	74 09		 je	 SHORT $LN67@draw_aircr

; 3472 : 			{
; 3473 : 				s = "IR ON";

  01e5d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_05JBLHJOBL@IR?5ON@

; 3474 : 			}
; 3475 : 			else

  01e64	eb 07		 jmp	 SHORT $LN68@draw_aircr
$LN67@draw_aircr:

; 3476 : 			{
; 3477 : 				s = "IR OFF";

  01e66	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06CCMEMHEJ@IR?5OFF@
$LN68@draw_aircr:

; 3478 : 			}
; 3479 : 		}
; 3480 : 
; 3481 : 		y_adjust = -12.0;

  01e6d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  01e75	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN60@draw_aircr:

; 3482 : 	}
; 3483 : 
; 3484 : 	set_2d_mono_font_position (-1.0, -1.0);

  01e7d	51		 push	 ecx
  01e7e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01e86	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e8b	51		 push	 ecx
  01e8c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01e94	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e99	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3485 : 
; 3486 : 	set_mono_font_rel_position (1.0, y_adjust);

  01e9e	51		 push	 ecx
  01e9f	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  01ea7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01eac	51		 push	 ecx
  01ead	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01eb5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01eba	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3487 : 
; 3488 : 	print_mono_font_string (s);

  01ebf	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  01ec2	50		 push	 eax
  01ec3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3489 : 
; 3490 : 	if (draw_large_mfd)

  01ec8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01ecf	0f 84 d5 00 00
	00		 je	 $LN69@draw_aircr

; 3491 : 	{
; 3492 : 		if (ka50_damage.radar_jammer)

  01ed5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  01eda	c1 e8 02	 shr	 eax, 2
  01edd	83 e0 01	 and	 eax, 1
  01ee0	74 0c		 je	 SHORT $LN71@draw_aircr

; 3493 : 		{
; 3494 : 			s = "RD JAM XXX";

  01ee2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@JHFIBGMI@RD?5JAM?5XXX@

; 3495 : 		}
; 3496 : 		else

  01ee9	e9 a7 00 00 00	 jmp	 $LN74@draw_aircr
$LN71@draw_aircr:

; 3497 : 		{
; 3498 : 			if (get_local_entity_int_value (source, INT_TYPE_RADAR_JAMMER_ON))

  01eee	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01ef5	74 10		 je	 SHORT $LN231@draw_aircr
  01ef7	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01efd	8b 08		 mov	 ecx, DWORD PTR [eax]
  01eff	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv1029[ebp], ecx
  01f05	eb 20		 jmp	 SHORT $LN232@draw_aircr
$LN231@draw_aircr:
  01f07	68 aa 0d 00 00	 push	 3498			; 00000daaH
  01f0c	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01f11	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01f17	52		 push	 edx
  01f18	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01f1d	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1029[ebp], 0
$LN232@draw_aircr:
  01f27	b8 01 00 00 00	 mov	 eax, 1
  01f2c	85 c0		 test	 eax, eax
  01f2e	74 0c		 je	 SHORT $LN233@draw_aircr
  01f30	c7 85 a4 fe ff
	ff a8 00 00 00	 mov	 DWORD PTR tv1036[ebp], 168 ; 000000a8H
  01f3a	eb 20		 jmp	 SHORT $LN234@draw_aircr
$LN233@draw_aircr:
  01f3c	68 aa 0d 00 00	 push	 3498			; 00000daaH
  01f41	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01f46	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01f4c	51		 push	 ecx
  01f4d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01f52	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1036[ebp], 0
$LN234@draw_aircr:
  01f5c	68 a8 00 00 00	 push	 168			; 000000a8H
  01f61	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  01f67	52		 push	 edx
  01f68	69 85 a8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1029[ebp], 1116
  01f72	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv1036[ebp]
  01f78	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01f7f	ff d2		 call	 edx
  01f81	85 c0		 test	 eax, eax
  01f83	74 09		 je	 SHORT $LN73@draw_aircr

; 3499 : 			{
; 3500 : 				s = "RD JAM ON";

  01f85	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_09OKIOJJOP@RD?5JAM?5ON@

; 3501 : 			}
; 3502 : 			else

  01f8c	eb 07		 jmp	 SHORT $LN74@draw_aircr
$LN73@draw_aircr:

; 3503 : 			{
; 3504 : 				s = "RD JAM OFF";

  01f8e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@JIGPMIEL@RD?5JAM?5OFF@
$LN74@draw_aircr:

; 3505 : 			}
; 3506 : 		}
; 3507 : 
; 3508 : 		y_adjust = -12.0;

  01f95	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  01f9d	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3509 : 	}
; 3510 : 	else

  01fa5	e9 d0 00 00 00	 jmp	 $LN70@draw_aircr
$LN69@draw_aircr:

; 3511 : 	{
; 3512 : 		if (ka50_damage.radar_jammer)

  01faa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  01faf	c1 e8 02	 shr	 eax, 2
  01fb2	83 e0 01	 and	 eax, 1
  01fb5	74 0c		 je	 SHORT $LN75@draw_aircr

; 3513 : 		{
; 3514 : 			s = "RD XXX";

  01fb7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06JNKFDAHI@RD?5XXX@

; 3515 : 		}
; 3516 : 		else

  01fbe	e9 a7 00 00 00	 jmp	 $LN78@draw_aircr
$LN75@draw_aircr:

; 3517 : 		{
; 3518 : 			if (get_local_entity_int_value (source, INT_TYPE_RADAR_JAMMER_ON))

  01fc3	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01fca	74 10		 je	 SHORT $LN235@draw_aircr
  01fcc	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01fd2	8b 08		 mov	 ecx, DWORD PTR [eax]
  01fd4	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv1051[ebp], ecx
  01fda	eb 20		 jmp	 SHORT $LN236@draw_aircr
$LN235@draw_aircr:
  01fdc	68 be 0d 00 00	 push	 3518			; 00000dbeH
  01fe1	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01fe6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01fec	52		 push	 edx
  01fed	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01ff2	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1051[ebp], 0
$LN236@draw_aircr:
  01ffc	b8 01 00 00 00	 mov	 eax, 1
  02001	85 c0		 test	 eax, eax
  02003	74 0c		 je	 SHORT $LN237@draw_aircr
  02005	c7 85 a4 fe ff
	ff a8 00 00 00	 mov	 DWORD PTR tv1058[ebp], 168 ; 000000a8H
  0200f	eb 20		 jmp	 SHORT $LN238@draw_aircr
$LN237@draw_aircr:
  02011	68 be 0d 00 00	 push	 3518			; 00000dbeH
  02016	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0201b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  02021	51		 push	 ecx
  02022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02027	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1058[ebp], 0
$LN238@draw_aircr:
  02031	68 a8 00 00 00	 push	 168			; 000000a8H
  02036	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  0203c	52		 push	 edx
  0203d	69 85 a8 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1051[ebp], 1116
  02047	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv1058[ebp]
  0204d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  02054	ff d2		 call	 edx
  02056	85 c0		 test	 eax, eax
  02058	74 09		 je	 SHORT $LN77@draw_aircr

; 3519 : 			{
; 3520 : 				s = "RD ON";

  0205a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_05BHAGAOGB@RD?5ON@

; 3521 : 			}
; 3522 : 			else

  02061	eb 07		 jmp	 SHORT $LN78@draw_aircr
$LN77@draw_aircr:

; 3523 : 			{
; 3524 : 				s = "RD OFF";

  02063	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06JCJCOOPL@RD?5OFF@
$LN78@draw_aircr:

; 3525 : 			}
; 3526 : 		}
; 3527 : 
; 3528 : 		y_adjust = -5.0;

  0206a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  02072	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN70@draw_aircr:

; 3529 : 	}
; 3530 : 
; 3531 : 	set_2d_mono_font_position (-1.0, -1.0);

  0207a	51		 push	 ecx
  0207b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02083	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02088	51		 push	 ecx
  02089	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02091	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02096	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3532 : 
; 3533 : 	set_mono_font_rel_position (1.0, y_adjust);

  0209b	51		 push	 ecx
  0209c	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  020a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020a9	51		 push	 ecx
  020aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  020b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020b7	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3534 : 
; 3535 : 	print_mono_font_string (s);

  020bc	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  020bf	50		 push	 eax
  020c0	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3536 : 
; 3537 : 	//
; 3538 : 	// auto-countermeasures
; 3539 : 	//
; 3540 : 
; 3541 : 	if (get_global_auto_counter_measures ())

  020c5	83 3d 90 00 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+144, 0
  020cc	0f 84 16 01 00
	00		 je	 $LN79@draw_aircr

; 3542 : 	{
; 3543 : 		s = "AUTO";

  020d2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04LMMJFDCN@AUTO@

; 3544 : 
; 3545 : 		width = get_mono_font_string_width (s);

  020d9	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  020dc	50		 push	 eax
  020dd	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  020e2	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 3546 : 
; 3547 : 		if (draw_large_mfd)

  020e8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  020ef	74 2e		 je	 SHORT $LN80@draw_aircr

; 3548 : 		{
; 3549 : 			width += 2.0;

  020f1	f3 0f 5a 85 28
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  020f9	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02101	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02105	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 3550 : 
; 3551 : 			y_adjust = -38.0;

  0210d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2180000
  02115	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3552 : 		}
; 3553 : 		else

  0211d	eb 2c		 jmp	 SHORT $LN81@draw_aircr
$LN80@draw_aircr:

; 3554 : 		{
; 3555 : 			width += 1.0;

  0211f	f3 0f 5a 85 28
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  02127	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0212f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02133	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 3556 : 
; 3557 : 			y_adjust = -19.0;

  0213b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1980000
  02143	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN81@draw_aircr:

; 3558 : 		}
; 3559 : 
; 3560 : 		set_2d_mono_font_position (-1.0, -1.0);

  0214b	51		 push	 ecx
  0214c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02154	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02159	51		 push	 ecx
  0215a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02162	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02167	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3561 : 
; 3562 : 		set_mono_font_rel_position (1.0, y_adjust);

  0216c	51		 push	 ecx
  0216d	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02175	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0217a	51		 push	 ecx
  0217b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02183	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02188	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3563 : 
; 3564 : 		print_mono_font_string (s);

  0218d	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02190	50		 push	 eax
  02191	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3565 : 
; 3566 : 		set_2d_mono_font_position (1.0, -1.0);

  02196	51		 push	 ecx
  02197	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0219f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021a4	51		 push	 ecx
  021a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  021ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021b2	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3567 : 
; 3568 : 		set_mono_font_rel_position (-width, y_adjust);

  021b7	51		 push	 ecx
  021b8	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  021c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021c5	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  021cd	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  021d4	51		 push	 ecx
  021d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021da	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3569 : 
; 3570 : 		print_mono_font_string (s);

  021df	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  021e2	50		 push	 eax
  021e3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN79@draw_aircr:

; 3571 : 	}
; 3572 : 
; 3573 : 	//
; 3574 : 	// chaff
; 3575 : 	//
; 3576 : 
; 3577 : 	if (draw_large_mfd)

  021e8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  021ef	0f 84 96 00 00
	00		 je	 $LN82@draw_aircr

; 3578 : 	{
; 3579 : 		if ((ka50_damage.lh_chaff_dispensers) && (ka50_damage.rh_chaff_dispensers))

  021f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  021fa	c1 e8 11	 shr	 eax, 17			; 00000011H
  021fd	83 e0 01	 and	 eax, 1
  02200	74 23		 je	 SHORT $LN84@draw_aircr
  02202	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  02207	c1 e8 12	 shr	 eax, 18			; 00000012H
  0220a	83 e0 01	 and	 eax, 1
  0220d	74 16		 je	 SHORT $LN84@draw_aircr

; 3580 : 		{
; 3581 : 			sprintf (buffer, "CHAFF:XX");

  0220f	68 00 00 00 00	 push	 OFFSET ??_C@_08GHAEIHAP@CHAFF?3XX@
  02214	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0221a	50		 push	 eax
  0221b	e8 00 00 00 00	 call	 _sprintf
  02220	83 c4 08	 add	 esp, 8

; 3582 : 		}
; 3583 : 		else

  02223	eb 23		 jmp	 SHORT $LN85@draw_aircr
$LN84@draw_aircr:

; 3584 : 		{
; 3585 : 			sprintf (buffer, "CHAFF:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_CHAFF));

  02225	6a 43		 push	 67			; 00000043H
  02227	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0222d	50		 push	 eax
  0222e	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  02233	50		 push	 eax
  02234	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CNOKAJIH@CHAFF?3?$CF02d@
  02239	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0223f	51		 push	 ecx
  02240	e8 00 00 00 00	 call	 _sprintf
  02245	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN85@draw_aircr:

; 3586 : 		}
; 3587 : 
; 3588 : 		width = get_mono_font_string_width (buffer);

  02248	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0224e	50		 push	 eax
  0224f	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02254	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 3589 : 
; 3590 : 		width += 2.0;

  0225a	f3 0f 5a 85 28
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  02262	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0226a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0226e	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 3591 : 
; 3592 : 		y_adjust = -25.0;

  02276	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  0227e	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3593 : 	}
; 3594 : 	else

  02286	e9 91 00 00 00	 jmp	 $LN83@draw_aircr
$LN82@draw_aircr:

; 3595 : 	{
; 3596 : 		if ((ka50_damage.lh_chaff_dispensers) && (ka50_damage.rh_chaff_dispensers))

  0228b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  02290	c1 e8 11	 shr	 eax, 17			; 00000011H
  02293	83 e0 01	 and	 eax, 1
  02296	74 23		 je	 SHORT $LN86@draw_aircr
  02298	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  0229d	c1 e8 12	 shr	 eax, 18			; 00000012H
  022a0	83 e0 01	 and	 eax, 1
  022a3	74 16		 je	 SHORT $LN86@draw_aircr

; 3597 : 		{
; 3598 : 			sprintf (buffer, "C:XX");

  022a5	68 00 00 00 00	 push	 OFFSET ??_C@_04KJNFJKOK@C?3XX@
  022aa	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  022b0	50		 push	 eax
  022b1	e8 00 00 00 00	 call	 _sprintf
  022b6	83 c4 08	 add	 esp, 8

; 3599 : 		}
; 3600 : 		else

  022b9	eb 23		 jmp	 SHORT $LN87@draw_aircr
$LN86@draw_aircr:

; 3601 : 		{
; 3602 : 			sprintf (buffer, "C:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_CHAFF));

  022bb	6a 43		 push	 67			; 00000043H
  022bd	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  022c3	50		 push	 eax
  022c4	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  022c9	50		 push	 eax
  022ca	68 00 00 00 00	 push	 OFFSET ??_C@_06GNOFKMCG@C?3?$CF02d@
  022cf	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  022d5	51		 push	 ecx
  022d6	e8 00 00 00 00	 call	 _sprintf
  022db	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN87@draw_aircr:

; 3603 : 		}
; 3604 : 
; 3605 : 		width = get_mono_font_string_width (buffer);

  022de	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  022e4	50		 push	 eax
  022e5	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  022ea	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 3606 : 
; 3607 : 		width += 1.0;

  022f0	f3 0f 5a 85 28
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  022f8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  02300	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02304	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 3608 : 
; 3609 : 		y_adjust = -12.0;

  0230c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  02314	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN83@draw_aircr:

; 3610 : 	}
; 3611 : 
; 3612 : 	set_2d_mono_font_position (1.0, -1.0);

  0231c	51		 push	 ecx
  0231d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02325	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0232a	51		 push	 ecx
  0232b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02333	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02338	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3613 : 
; 3614 : 	set_mono_font_rel_position (-width, y_adjust);

  0233d	51		 push	 ecx
  0233e	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02346	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0234b	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  02353	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0235a	51		 push	 ecx
  0235b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02360	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3615 : 
; 3616 : 	print_mono_font_string (buffer);

  02365	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0236b	50		 push	 eax
  0236c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3617 : 
; 3618 : 	//
; 3619 : 	// flares
; 3620 : 	//
; 3621 : 
; 3622 : 	if (draw_large_mfd)

  02371	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02378	0f 84 96 00 00
	00		 je	 $LN88@draw_aircr

; 3623 : 	{
; 3624 : 		if ((ka50_damage.lh_flare_dispensers) && (ka50_damage.rh_flare_dispensers))

  0237e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  02383	c1 e8 13	 shr	 eax, 19			; 00000013H
  02386	83 e0 01	 and	 eax, 1
  02389	74 23		 je	 SHORT $LN90@draw_aircr
  0238b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  02390	c1 e8 14	 shr	 eax, 20			; 00000014H
  02393	83 e0 01	 and	 eax, 1
  02396	74 16		 je	 SHORT $LN90@draw_aircr

; 3625 : 		{
; 3626 : 			sprintf (buffer, "FLARE:XX");

  02398	68 00 00 00 00	 push	 OFFSET ??_C@_08HGDOPGOH@FLARE?3XX@
  0239d	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  023a3	50		 push	 eax
  023a4	e8 00 00 00 00	 call	 _sprintf
  023a9	83 c4 08	 add	 esp, 8

; 3627 : 		}
; 3628 : 		else

  023ac	eb 23		 jmp	 SHORT $LN91@draw_aircr
$LN90@draw_aircr:

; 3629 : 		{
; 3630 : 			sprintf (buffer, "FLARE:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_FLARE));

  023ae	6a 44		 push	 68			; 00000044H
  023b0	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  023b6	50		 push	 eax
  023b7	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  023bc	50		 push	 eax
  023bd	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JMEPCAPD@FLARE?3?$CF02d@
  023c2	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  023c8	51		 push	 ecx
  023c9	e8 00 00 00 00	 call	 _sprintf
  023ce	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN91@draw_aircr:

; 3631 : 		}
; 3632 : 
; 3633 : 		width = get_mono_font_string_width (buffer);

  023d1	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  023d7	50		 push	 eax
  023d8	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  023dd	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 3634 : 
; 3635 : 		width += 2.0;

  023e3	f3 0f 5a 85 28
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  023eb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  023f3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  023f7	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 3636 : 
; 3637 : 		y_adjust = -12.0;

  023ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  02407	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 3638 : 	}
; 3639 : 	else

  0240f	e9 91 00 00 00	 jmp	 $LN89@draw_aircr
$LN88@draw_aircr:

; 3640 : 	{
; 3641 : 		if ((ka50_damage.lh_flare_dispensers) && (ka50_damage.rh_flare_dispensers))

  02414	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  02419	c1 e8 13	 shr	 eax, 19			; 00000013H
  0241c	83 e0 01	 and	 eax, 1
  0241f	74 23		 je	 SHORT $LN92@draw_aircr
  02421	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  02426	c1 e8 14	 shr	 eax, 20			; 00000014H
  02429	83 e0 01	 and	 eax, 1
  0242c	74 16		 je	 SHORT $LN92@draw_aircr

; 3642 : 		{
; 3643 : 			sprintf (buffer, "F:XX");

  0242e	68 00 00 00 00	 push	 OFFSET ??_C@_04GBDFBFJK@F?3XX@
  02433	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02439	50		 push	 eax
  0243a	e8 00 00 00 00	 call	 _sprintf
  0243f	83 c4 08	 add	 esp, 8

; 3644 : 		}
; 3645 : 		else

  02442	eb 23		 jmp	 SHORT $LN93@draw_aircr
$LN92@draw_aircr:

; 3646 : 		{
; 3647 : 			sprintf (buffer, "F:%02d", get_local_entity_weapon_count (source, ENTITY_SUB_TYPE_WEAPON_FLARE));

  02444	6a 44		 push	 68			; 00000044H
  02446	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0244c	50		 push	 eax
  0244d	e8 00 00 00 00	 call	 ?get_local_entity_weapon_count@@YGHPAUENTITY@@H@Z ; get_local_entity_weapon_count
  02452	50		 push	 eax
  02453	68 00 00 00 00	 push	 OFFSET ??_C@_06DPNNIDIB@F?3?$CF02d@
  02458	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  0245e	51		 push	 ecx
  0245f	e8 00 00 00 00	 call	 _sprintf
  02464	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN93@draw_aircr:

; 3648 : 		}
; 3649 : 
; 3650 : 		width = get_mono_font_string_width (buffer);

  02467	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0246d	50		 push	 eax
  0246e	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  02473	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 3651 : 
; 3652 : 		width += 1.0;

  02479	f3 0f 5a 85 28
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  02481	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  02489	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0248d	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 3653 : 
; 3654 : 		y_adjust = -5.0;

  02495	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  0249d	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN89@draw_aircr:

; 3655 : 	}
; 3656 : 
; 3657 : 	set_2d_mono_font_position (1.0, -1.0);

  024a5	51		 push	 ecx
  024a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  024ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024b3	51		 push	 ecx
  024b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  024bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024c1	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 3658 : 
; 3659 : 	set_mono_font_rel_position (-width, y_adjust);

  024c6	51		 push	 ecx
  024c7	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  024cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024d4	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  024dc	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  024e3	51		 push	 ecx
  024e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024e9	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 3660 : 
; 3661 : 	print_mono_font_string (buffer);

  024ee	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  024f4	50		 push	 eax
  024f5	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 3662 : }

  024fa	5f		 pop	 edi
  024fb	5e		 pop	 esi
  024fc	5b		 pop	 ebx
  024fd	8b e5		 mov	 esp, ebp
  024ff	5d		 pop	 ebp
  02500	c2 04 00	 ret	 4
?draw_aircraft_survivability_equipment_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z ENDP ; draw_aircraft_survivability_equipment_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$max@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YGABMABM0@Z PROC				; std::max<float>, COMDAT

; 5387 : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5388 : 	if (_Left < _Right)

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@max
$LN4@max:

; 5389 : 		{
; 5390 : 		_STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00018	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@max
  00027	eb 4a		 jmp	 SHORT $LN6@max
$LN9@max:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 0e 15 00 00	 push	 5390			; 0000150eH
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@max
  0004f	cc		 int	 3
$LN12@max:
  00050	6a 00		 push	 0
  00052	68 0e 15 00 00	 push	 5390			; 0000150eH
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@max
$LN6@max:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@max

; 5391 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 5392 : 		}
; 5393 : 
; 5394 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 5395 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$max@M@std@@YGABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z
_TEXT	SEGMENT
tv253 = -128						; size = 4
tv190 = -128						; size = 4
tv167 = -128						; size = 4
tv146 = -128						; size = 4
tv95 = -128						; size = 4
tv245 = -124						; size = 4
tv223 = -124						; size = 4
tv182 = -124						; size = 4
tv159 = -124						; size = 4
tv139 = -124						; size = 4
tv87 = -124						; size = 4
$T1 = -120						; size = 4
_attitude$ = -52					; size = 4
_uvec_threat_to_target$ = -48				; size = 12
_threat_position$ = -36					; size = 4
_cos_error$ = -32					; size = 4
_length$ = -28						; size = 4
_time_to_impact$ = -24					; size = 4
_threat_velocity$ = -20					; size = 4
_threat_range$ = -16					; size = 4
_overshot$ = -12					; size = 4
_closest_missile$ = -8					; size = 4
_threat$ = -4						; size = 4
_source$ = 8						; size = 4
_source_position$ = 12					; size = 4
_threat_type$ = 16					; size = 4
_closest_missile_time_to_impact$ = 20			; size = 4
?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z PROC ; get_closest_missile, COMDAT

; 2953 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2954 : 	entity
; 2955 : 		*threat,
; 2956 : 		*closest_missile;
; 2957 : 
; 2958 : 	int
; 2959 : 		overshot;
; 2960 : 
; 2961 : 	float
; 2962 : 		threat_range,
; 2963 : 		threat_velocity,
; 2964 : 		time_to_impact,
; 2965 : 		length,
; 2966 : 		cos_error;
; 2967 : 
; 2968 : 	vec3d
; 2969 : 		*threat_position,
; 2970 : 		uvec_threat_to_target;
; 2971 : 
; 2972 : 	matrix3x3
; 2973 : 		*attitude;
; 2974 : 
; 2975 : 	ASSERT (source);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _source$[ebp], 0
  00010	75 18		 jne	 SHORT $LN4@get_closes
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00017	83 c0 16	 add	 eax, 22			; 00000016H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_06OEKOLKIL@source@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@get_closes:

; 2976 : 
; 2977 : 	ASSERT (source_position);

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _source_position$[ebp], 0
  0002e	75 18		 jne	 SHORT $LN5@get_closes
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00035	83 c0 18	 add	 eax, 24			; 00000018H
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IIPCKJML@source_position@
  00043	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@get_closes:

; 2978 : 
; 2979 : 	ASSERT ((threat_type == THREAT_TYPE_RF_MISSILE) || (threat_type == THREAT_TYPE_IR_MISSILE) || (threat_type == THREAT_TYPE_LASER_MISSILE));

  00048	83 7d 10 01	 cmp	 DWORD PTR _threat_type$[ebp], 1
  0004c	74 24		 je	 SHORT $LN6@get_closes
  0004e	83 7d 10 02	 cmp	 DWORD PTR _threat_type$[ebp], 2
  00052	74 1e		 je	 SHORT $LN6@get_closes
  00054	83 7d 10 03	 cmp	 DWORD PTR _threat_type$[ebp], 3
  00058	74 18		 je	 SHORT $LN6@get_closes
  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  0005f	83 c0 1a	 add	 eax, 26			; 0000001aH
  00062	50		 push	 eax
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0IB@DOFIAAGF@?$CIthreat_type?5?$DN?$DN?5THREAT_TYPE_RF_@
  0006d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@get_closes:

; 2980 : 
; 2981 : 	closest_missile = NULL;

  00072	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _closest_missile$[ebp], 0

; 2982 : 
; 2983 : 	*closest_missile_time_to_impact = 1000000.0;

  00079	8b 45 14	 mov	 eax, DWORD PTR _closest_missile_time_to_impact$[ebp]
  0007c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@49742400
  00084	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 2984 : 
; 2985 : 	threat = get_local_entity_first_child (get_gunship_entity (), LIST_TYPE_TARGET);

  00088	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0008f	74 0c		 je	 SHORT $LN15@get_closes
  00091	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00096	8b 08		 mov	 ecx, DWORD PTR [eax]
  00098	89 4d 84	 mov	 DWORD PTR tv87[ebp], ecx
  0009b	eb 21		 jmp	 SHORT $LN16@get_closes
$LN15@get_closes:
  0009d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  000a3	83 c2 20	 add	 edx, 32			; 00000020H
  000a6	52		 push	 edx
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000b7	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$LN16@get_closes:
  000be	b9 01 00 00 00	 mov	 ecx, 1
  000c3	85 c9		 test	 ecx, ecx
  000c5	74 09		 je	 SHORT $LN17@get_closes
  000c7	c7 45 80 26 00
	00 00		 mov	 DWORD PTR tv95[ebp], 38	; 00000026H
  000ce	eb 21		 jmp	 SHORT $LN18@get_closes
$LN17@get_closes:
  000d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  000d6	83 c2 20	 add	 edx, 32			; 00000020H
  000d9	52		 push	 edx
  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ea	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv95[ebp], 0
$LN18@get_closes:
  000f1	6a 26		 push	 38			; 00000026H
  000f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000f9	51		 push	 ecx
  000fa	69 55 84 b4 00
	00 00		 imul	 edx, DWORD PTR tv87[ebp], 180
  00101	8b 45 80	 mov	 eax, DWORD PTR tv95[ebp]
  00104	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0010b	ff d1		 call	 ecx
  0010d	89 45 fc	 mov	 DWORD PTR _threat$[ebp], eax
$LN2@get_closes:

; 2986 : 
; 2987 : 	while (threat)

  00110	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  00114	0f 84 74 03 00
	00		 je	 $LN3@get_closes

; 2988 : 	{
; 2989 : 		if (get_local_entity_int_value (threat, INT_TYPE_THREAT_TYPE) == threat_type)

  0011a	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0011e	74 0a		 je	 SHORT $LN19@get_closes
  00120	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  00123	8b 08		 mov	 ecx, DWORD PTR [eax]
  00125	89 4d 84	 mov	 DWORD PTR tv139[ebp], ecx
  00128	eb 1d		 jmp	 SHORT $LN20@get_closes
$LN19@get_closes:
  0012a	68 ad 0b 00 00	 push	 2989			; 00000badH
  0012f	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00134	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0013a	52		 push	 edx
  0013b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00140	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv139[ebp], 0
$LN20@get_closes:
  00147	b8 01 00 00 00	 mov	 eax, 1
  0014c	85 c0		 test	 eax, eax
  0014e	74 09		 je	 SHORT $LN21@get_closes
  00150	c7 45 80 e9 00
	00 00		 mov	 DWORD PTR tv146[ebp], 233 ; 000000e9H
  00157	eb 1d		 jmp	 SHORT $LN22@get_closes
$LN21@get_closes:
  00159	68 ad 0b 00 00	 push	 2989			; 00000badH
  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00163	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00169	51		 push	 ecx
  0016a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0016f	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv146[ebp], 0
$LN22@get_closes:
  00176	68 e9 00 00 00	 push	 233			; 000000e9H
  0017b	8b 55 fc	 mov	 edx, DWORD PTR _threat$[ebp]
  0017e	52		 push	 edx
  0017f	69 45 84 5c 04
	00 00		 imul	 eax, DWORD PTR tv139[ebp], 1116
  00186	8b 4d 80	 mov	 ecx, DWORD PTR tv146[ebp]
  00189	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00190	ff d2		 call	 edx
  00192	3b 45 10	 cmp	 eax, DWORD PTR _threat_type$[ebp]
  00195	0f 85 6e 02 00
	00		 jne	 $LN13@get_closes

; 2990 : 		{
; 2991 : 			threat_position = get_local_entity_vec3d_ptr (threat, VEC3D_TYPE_POSITION);

  0019b	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0019f	74 0a		 je	 SHORT $LN23@get_closes
  001a1	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  001a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a6	89 4d 84	 mov	 DWORD PTR tv159[ebp], ecx
  001a9	eb 21		 jmp	 SHORT $LN24@get_closes
$LN23@get_closes:
  001ab	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  001b1	83 c2 26	 add	 edx, 38			; 00000026H
  001b4	52		 push	 edx
  001b5	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ba	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001bf	50		 push	 eax
  001c0	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c5	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv159[ebp], 0
$LN24@get_closes:
  001cc	b9 01 00 00 00	 mov	 ecx, 1
  001d1	85 c9		 test	 ecx, ecx
  001d3	74 09		 je	 SHORT $LN25@get_closes
  001d5	c7 45 80 08 00
	00 00		 mov	 DWORD PTR tv167[ebp], 8
  001dc	eb 21		 jmp	 SHORT $LN26@get_closes
$LN25@get_closes:
  001de	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  001e4	83 c2 26	 add	 edx, 38			; 00000026H
  001e7	52		 push	 edx
  001e8	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001f2	50		 push	 eax
  001f3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001f8	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv167[ebp], 0
$LN26@get_closes:
  001ff	6a 08		 push	 8
  00201	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00204	51		 push	 ecx
  00205	6b 55 84 60	 imul	 edx, DWORD PTR tv159[ebp], 96
  00209	8b 45 80	 mov	 eax, DWORD PTR tv167[ebp]
  0020c	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  00213	ff d1		 call	 ecx
  00215	89 45 dc	 mov	 DWORD PTR _threat_position$[ebp], eax

; 2992 : 
; 2993 : 			threat_range = get_3d_range (source_position, threat_position);

  00218	8b 45 dc	 mov	 eax, DWORD PTR _threat_position$[ebp]
  0021b	50		 push	 eax
  0021c	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  0021f	51		 push	 ecx
  00220	e8 00 00 00 00	 call	 ?get_3d_range@@YGMPBUVEC3D@@0@Z ; get_3d_range
  00225	d9 5d f0	 fstp	 DWORD PTR _threat_range$[ebp]

; 2994 : 
; 2995 : 			threat_velocity = get_local_entity_float_value (threat, FLOAT_TYPE_VELOCITY);

  00228	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0022c	74 0a		 je	 SHORT $LN27@get_closes
  0022e	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  00231	8b 08		 mov	 ecx, DWORD PTR [eax]
  00233	89 4d 84	 mov	 DWORD PTR tv182[ebp], ecx
  00236	eb 21		 jmp	 SHORT $LN28@get_closes
$LN27@get_closes:
  00238	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  0023e	83 c2 2a	 add	 edx, 42			; 0000002aH
  00241	52		 push	 edx
  00242	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00247	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0024c	50		 push	 eax
  0024d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00252	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv182[ebp], 0
$LN28@get_closes:
  00259	b9 01 00 00 00	 mov	 ecx, 1
  0025e	85 c9		 test	 ecx, ecx
  00260	74 09		 je	 SHORT $LN29@get_closes
  00262	c7 45 80 93 00
	00 00		 mov	 DWORD PTR tv190[ebp], 147 ; 00000093H
  00269	eb 21		 jmp	 SHORT $LN30@get_closes
$LN29@get_closes:
  0026b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00271	83 c2 2a	 add	 edx, 42			; 0000002aH
  00274	52		 push	 edx
  00275	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0027a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0027f	50		 push	 eax
  00280	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00285	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv190[ebp], 0
$LN30@get_closes:
  0028c	68 93 00 00 00	 push	 147			; 00000093H
  00291	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00294	51		 push	 ecx
  00295	69 55 84 bc 02
	00 00		 imul	 edx, DWORD PTR tv182[ebp], 700
  0029c	8b 45 80	 mov	 eax, DWORD PTR tv190[ebp]
  0029f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  002a6	ff d1		 call	 ecx
  002a8	d9 5d ec	 fstp	 DWORD PTR _threat_velocity$[ebp]

; 2996 : 
; 2997 : 			time_to_impact = threat_range / max (threat_velocity, 1.0f);

  002ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002b3	f3 0f 11 45 88	 movss	 DWORD PTR $T1[ebp], xmm0
  002b8	8d 45 88	 lea	 eax, DWORD PTR $T1[ebp]
  002bb	50		 push	 eax
  002bc	8d 4d ec	 lea	 ecx, DWORD PTR _threat_velocity$[ebp]
  002bf	51		 push	 ecx
  002c0	e8 00 00 00 00	 call	 ??$max@M@std@@YGABMABM0@Z ; std::max<float>
  002c5	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _threat_range$[ebp]
  002ca	f3 0f 5e 00	 divss	 xmm0, DWORD PTR [eax]
  002ce	f3 0f 11 45 e8	 movss	 DWORD PTR _time_to_impact$[ebp], xmm0

; 2998 : 
; 2999 : 			//
; 3000 : 			// guard against 'overshot target' to prevent spurious indications
; 3001 : 			//
; 3002 : 
; 3003 : 			overshot = FALSE;

  002d3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _overshot$[ebp], 0

; 3004 : 
; 3005 : 			if (time_to_impact < 1.0)

  002da	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _time_to_impact$[ebp]
  002df	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  002e7	66 0f 2f c8	 comisd	 xmm1, xmm0
  002eb	0f 86 f3 00 00
	00		 jbe	 $LN10@get_closes

; 3006 : 			{
; 3007 : 				uvec_threat_to_target.x = source_position->x - threat_position->x;

  002f1	8b 45 0c	 mov	 eax, DWORD PTR _source_position$[ebp]
  002f4	8b 4d dc	 mov	 ecx, DWORD PTR _threat_position$[ebp]
  002f7	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002fb	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  002ff	f3 0f 11 45 d0	 movss	 DWORD PTR _uvec_threat_to_target$[ebp], xmm0

; 3008 : 				uvec_threat_to_target.y = source_position->y - threat_position->y;

  00304	8b 45 0c	 mov	 eax, DWORD PTR _source_position$[ebp]
  00307	8b 4d dc	 mov	 ecx, DWORD PTR _threat_position$[ebp]
  0030a	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0030f	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00314	f3 0f 11 45 d4	 movss	 DWORD PTR _uvec_threat_to_target$[ebp+4], xmm0

; 3009 : 				uvec_threat_to_target.z = source_position->z - threat_position->z;

  00319	8b 45 0c	 mov	 eax, DWORD PTR _source_position$[ebp]
  0031c	8b 4d dc	 mov	 ecx, DWORD PTR _threat_position$[ebp]
  0031f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00324	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00329	f3 0f 11 45 d8	 movss	 DWORD PTR _uvec_threat_to_target$[ebp+8], xmm0

; 3010 : 
; 3011 : 				length = get_3d_vector_magnitude (&uvec_threat_to_target);

  0032e	8d 45 d0	 lea	 eax, DWORD PTR _uvec_threat_to_target$[ebp]
  00331	50		 push	 eax
  00332	e8 00 00 00 00	 call	 ?get_3d_vector_magnitude@@YGMPBUVEC3D@@@Z ; get_3d_vector_magnitude
  00337	d9 5d e4	 fstp	 DWORD PTR _length$[ebp]

; 3012 : 
; 3013 : 				if (length > 1.0)

  0033a	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR _length$[ebp]
  0033f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  00347	0f 86 90 00 00
	00		 jbe	 $LN9@get_closes

; 3014 : 				{
; 3015 : 					normalise_3d_vector_given_magnitude (&uvec_threat_to_target, length);

  0034d	51		 push	 ecx
  0034e	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _length$[ebp]
  00353	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00358	8d 45 d0	 lea	 eax, DWORD PTR _uvec_threat_to_target$[ebp]
  0035b	50		 push	 eax
  0035c	e8 00 00 00 00	 call	 ?normalise_3d_vector_given_magnitude@@YGXPAUVEC3D@@M@Z ; normalise_3d_vector_given_magnitude

; 3016 : 
; 3017 : 					attitude = get_local_entity_attitude_matrix_ptr (threat);

  00361	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  00365	74 0a		 je	 SHORT $LN31@get_closes
  00367	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  0036a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0036c	89 4d 84	 mov	 DWORD PTR tv223[ebp], ecx
  0036f	eb 21		 jmp	 SHORT $LN32@get_closes
$LN31@get_closes:
  00371	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00377	83 c2 40	 add	 edx, 64			; 00000040H
  0037a	52		 push	 edx
  0037b	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00380	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00385	50		 push	 eax
  00386	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0038b	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv223[ebp], 0
$LN32@get_closes:
  00392	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00395	51		 push	 ecx
  00396	8b 55 84	 mov	 edx, DWORD PTR tv223[ebp]
  00399	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?fn_get_local_entity_attitude_matrix_ptr@@3PAP6GPAY122MPAUENTITY@@@ZA[edx*4]
  003a0	ff d0		 call	 eax
  003a2	89 45 cc	 mov	 DWORD PTR _attitude$[ebp], eax

; 3018 : 
; 3019 : 					cos_error = get_3d_unit_vector_dot_product ((vec3d *) &((*attitude) [2][0]), &uvec_threat_to_target);

  003a5	8d 45 d0	 lea	 eax, DWORD PTR _uvec_threat_to_target$[ebp]
  003a8	50		 push	 eax
  003a9	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  003ae	d1 e1		 shl	 ecx, 1
  003b0	03 4d cc	 add	 ecx, DWORD PTR _attitude$[ebp]
  003b3	ba 04 00 00 00	 mov	 edx, 4
  003b8	6b c2 00	 imul	 eax, edx, 0
  003bb	03 c8		 add	 ecx, eax
  003bd	51		 push	 ecx
  003be	e8 00 00 00 00	 call	 ?get_3d_unit_vector_dot_product@@YGMPBUVEC3D@@0@Z ; get_3d_unit_vector_dot_product
  003c3	d9 5d e0	 fstp	 DWORD PTR _cos_error$[ebp]

; 3020 : 
; 3021 : 					if (cos_error < 0.0)

  003c6	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _cos_error$[ebp]
  003cb	0f 57 c9	 xorps	 xmm1, xmm1
  003ce	66 0f 2f c8	 comisd	 xmm1, xmm0
  003d2	76 07		 jbe	 SHORT $LN11@get_closes

; 3022 : 					{
; 3023 : 						overshot = TRUE;

  003d4	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _overshot$[ebp], 1
$LN11@get_closes:

; 3024 : 					}
; 3025 : 				}
; 3026 : 				else

  003db	eb 07		 jmp	 SHORT $LN10@get_closes
$LN9@get_closes:

; 3027 : 				{
; 3028 : 					overshot = TRUE;

  003dd	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _overshot$[ebp], 1
$LN10@get_closes:

; 3029 : 				}
; 3030 : 			}
; 3031 : 
; 3032 : 			if (!overshot)

  003e4	83 7d f4 00	 cmp	 DWORD PTR _overshot$[ebp], 0
  003e8	75 1f		 jne	 SHORT $LN13@get_closes

; 3033 : 			{
; 3034 : 				if (time_to_impact < *closest_missile_time_to_impact)

  003ea	8b 45 14	 mov	 eax, DWORD PTR _closest_missile_time_to_impact$[ebp]
  003ed	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  003f1	0f 2f 45 e8	 comiss	 xmm0, DWORD PTR _time_to_impact$[ebp]
  003f5	76 12		 jbe	 SHORT $LN13@get_closes

; 3035 : 				{
; 3036 : 					closest_missile = threat;

  003f7	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  003fa	89 45 f8	 mov	 DWORD PTR _closest_missile$[ebp], eax

; 3037 : 
; 3038 : 					*closest_missile_time_to_impact = time_to_impact;

  003fd	8b 45 14	 mov	 eax, DWORD PTR _closest_missile_time_to_impact$[ebp]
  00400	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _time_to_impact$[ebp]
  00405	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
$LN13@get_closes:

; 3039 : 				}
; 3040 : 			}
; 3041 : 		}
; 3042 : 
; 3043 : 		threat = get_local_entity_child_succ (threat, LIST_TYPE_TARGET);

  00409	83 7d fc 00	 cmp	 DWORD PTR _threat$[ebp], 0
  0040d	74 0a		 je	 SHORT $LN33@get_closes
  0040f	8b 45 fc	 mov	 eax, DWORD PTR _threat$[ebp]
  00412	8b 08		 mov	 ecx, DWORD PTR [eax]
  00414	89 4d 84	 mov	 DWORD PTR tv245[ebp], ecx
  00417	eb 21		 jmp	 SHORT $LN34@get_closes
$LN33@get_closes:
  00419	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  0041f	83 c2 5a	 add	 edx, 90			; 0000005aH
  00422	52		 push	 edx
  00423	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00428	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0042d	50		 push	 eax
  0042e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00433	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv245[ebp], 0
$LN34@get_closes:
  0043a	b9 01 00 00 00	 mov	 ecx, 1
  0043f	85 c9		 test	 ecx, ecx
  00441	74 09		 je	 SHORT $LN35@get_closes
  00443	c7 45 80 26 00
	00 00		 mov	 DWORD PTR tv253[ebp], 38 ; 00000026H
  0044a	eb 21		 jmp	 SHORT $LN36@get_closes
$LN35@get_closes:
  0044c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??get_closest_missile@@YGPAUENTITY@@PAU2@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z@4JA
  00452	83 c2 5a	 add	 edx, 90			; 0000005aH
  00455	52		 push	 edx
  00456	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0045b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00460	50		 push	 eax
  00461	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00466	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv253[ebp], 0
$LN36@get_closes:
  0046d	6a 26		 push	 38			; 00000026H
  0046f	8b 4d fc	 mov	 ecx, DWORD PTR _threat$[ebp]
  00472	51		 push	 ecx
  00473	69 55 84 b4 00
	00 00		 imul	 edx, DWORD PTR tv245[ebp], 180
  0047a	8b 45 80	 mov	 eax, DWORD PTR tv253[ebp]
  0047d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00484	ff d1		 call	 ecx
  00486	89 45 fc	 mov	 DWORD PTR _threat$[ebp], eax

; 3044 : 	}

  00489	e9 82 fc ff ff	 jmp	 $LN2@get_closes
$LN3@get_closes:

; 3045 : 
; 3046 : 	return (closest_missile);

  0048e	8b 45 f8	 mov	 eax, DWORD PTR _closest_missile$[ebp]

; 3047 : }

  00491	5f		 pop	 edi
  00492	5e		 pop	 esi
  00493	5b		 pop	 ebx
  00494	8b e5		 mov	 esp, ebp
  00496	5d		 pop	 ebp
  00497	c2 10 00	 ret	 16			; 00000010H
?get_closest_missile@@YGPAUENTITY@@PAU1@PAUVEC3D@@W4THREAT_TYPES@@PAM@Z ENDP ; get_closest_missile
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
tv1889 = -452						; size = 4
tv1411 = -448						; size = 4
tv1382 = -448						; size = 4
tv1328 = -448						; size = 4
tv1308 = -448						; size = 4
tv1153 = -448						; size = 4
tv1118 = -448						; size = 4
tv1097 = -448						; size = 4
tv1076 = -448						; size = 4
tv1057 = -448						; size = 4
tv1038 = -448						; size = 4
tv1017 = -448						; size = 4
tv996 = -448						; size = 4
tv975 = -448						; size = 4
tv956 = -448						; size = 4
tv937 = -448						; size = 4
tv918 = -448						; size = 4
tv886 = -448						; size = 4
tv854 = -448						; size = 4
tv835 = -448						; size = 4
tv815 = -448						; size = 4
tv788 = -448						; size = 4
tv760 = -448						; size = 4
tv738 = -448						; size = 4
tv717 = -448						; size = 4
tv698 = -448						; size = 4
tv679 = -448						; size = 4
tv610 = -448						; size = 4
tv589 = -448						; size = 4
tv530 = -448						; size = 4
tv485 = -448						; size = 4
tv176 = -448						; size = 4
tv156 = -448						; size = 4
tv136 = -448						; size = 4
tv84 = -448						; size = 4
tv1403 = -444						; size = 4
tv1374 = -444						; size = 4
tv1320 = -444						; size = 4
tv1300 = -444						; size = 4
tv1260 = -444						; size = 4
tv1145 = -444						; size = 4
tv1110 = -444						; size = 4
tv1089 = -444						; size = 4
tv1069 = -444						; size = 4
tv1050 = -444						; size = 4
tv1030 = -444						; size = 4
tv1010 = -444						; size = 4
tv988 = -444						; size = 4
tv968 = -444						; size = 4
tv949 = -444						; size = 4
tv930 = -444						; size = 4
tv910 = -444						; size = 4
tv878 = -444						; size = 4
tv847 = -444						; size = 4
tv827 = -444						; size = 4
tv807 = -444						; size = 4
tv780 = -444						; size = 4
tv752 = -444						; size = 4
tv730 = -444						; size = 4
tv710 = -444						; size = 4
tv691 = -444						; size = 4
tv639 = -444						; size = 4
tv602 = -444						; size = 4
tv581 = -444						; size = 4
tv522 = -444						; size = 4
tv477 = -444						; size = 4
tv168 = -444						; size = 4
tv148 = -444						; size = 4
tv128 = -444						; size = 4
tv76 = -444						; size = 4
_seconds$1 = -376					; size = 4
_minutes$2 = -372					; size = 4
_hours$3 = -368						; size = 4
_time_to_go$4 = -364					; size = 4
_f$5 = -360						; size = 4
_i$6 = -356						; size = 4
_sec$7 = -352						; size = 4
_sx$8 = -348						; size = 4
_sz$9 = -344						; size = 4
_waypoint_range$10 = -340				; size = 4
_waypoint_position$11 = -336				; size = 12
_wp$12 = -324						; size = 4
_target_range$13 = -320					; size = 4
_dy$14 = -316						; size = 4
_dx$15 = -312						; size = 4
_air_scan_range$16 = -308				; size = 4
_draw_threat_line$17 = -304				; size = 4
_threat_type$18 = -300					; size = 4
_target_position$19 = -296				; size = 4
_launched_weapon$20 = -292				; size = 4
_target$21 = -288					; size = 4
_wp2_rel_position$22 = -284				; size = 12
_wp1_rel_position$23 = -272				; size = 12
_wp2$24 = -260						; size = 4
_wp1$25 = -256						; size = 4
_source_position$ = -252				; size = 4
_source_target$ = -248					; size = 4
_source$ = -244						; size = 4
_source_heading$ = -240					; size = 4
_y_adjust$ = -236					; size = 4
_width$ = -232						; size = 4
_y_origin$ = -228					; size = 4
_x_origin$ = -224					; size = 4
_scale$ = -220						; size = 4
_v$ = -216						; size = 4
_u$ = -212						; size = 4
_source_side$ = -208					; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
_mfd_location$ = 8					; size = 4
?draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z PROC ; draw_tactical_situation_display_mfd, COMDAT

; 2228 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 01 00
	00		 sub	 esp, 452		; 000001c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 2229 : 	char
; 2230 : 		*s,
; 2231 : 		buffer[200];
; 2232 : 
; 2233 : 	entity_sides
; 2234 : 		source_side;
; 2235 : 
; 2236 : 	float
; 2237 : 		u,
; 2238 : 		v,
; 2239 : 		scale,
; 2240 : 		x_origin,
; 2241 : 		y_origin,
; 2242 : 		width,
; 2243 : 		y_adjust,
; 2244 : 		source_heading;
; 2245 : 
; 2246 : 	entity
; 2247 : 		*source,
; 2248 : 		*source_target;
; 2249 : 
; 2250 : 	vec3d
; 2251 : 		*source_position;
; 2252 : 
; 2253 : 	ASSERT (ka50_mfd_location_valid (mfd_location));

  0000c	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  00010	7c 06		 jl	 SHORT $LN17@draw_tacti
  00012	83 7d 08 02	 cmp	 DWORD PTR _mfd_location$[ebp], 2
  00016	7c 18		 jl	 SHORT $LN16@draw_tacti
$LN17@draw_tacti:
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  0001d	83 c0 19	 add	 eax, 25			; 00000019H
  00020	50		 push	 eax
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MOMFCEOG@ka50_mfd_location_valid?5?$CImfd_lo@
  0002b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN16@draw_tacti:

; 2254 : 
; 2255 : 	source = get_gunship_entity ();

  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00035	89 85 0c ff ff
	ff		 mov	 DWORD PTR _source$[ebp], eax

; 2256 : 
; 2257 : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);

  0003b	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00042	74 10		 je	 SHORT $LN95@draw_tacti
  00044	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0004a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004c	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv76[ebp], ecx
  00052	eb 24		 jmp	 SHORT $LN96@draw_tacti
$LN95@draw_tacti:
  00054	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  0005a	83 c2 1d	 add	 edx, 29			; 0000001dH
  0005d	52		 push	 edx
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006e	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv76[ebp], 0
$LN96@draw_tacti:
  00078	b9 01 00 00 00	 mov	 ecx, 1
  0007d	85 c9		 test	 ecx, ecx
  0007f	74 0c		 je	 SHORT $LN97@draw_tacti
  00081	c7 85 40 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv84[ebp], 187 ; 000000bbH
  0008b	eb 24		 jmp	 SHORT $LN98@draw_tacti
$LN97@draw_tacti:
  0008d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00093	83 c2 1d	 add	 edx, 29			; 0000001dH
  00096	52		 push	 edx
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0009c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a7	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv84[ebp], 0
$LN98@draw_tacti:
  000b1	68 bb 00 00 00	 push	 187			; 000000bbH
  000b6	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  000bc	51		 push	 ecx
  000bd	69 95 44 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv76[ebp], 1116
  000c7	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR tv84[ebp]
  000cd	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000d4	ff d1		 call	 ecx
  000d6	89 85 30 ff ff
	ff		 mov	 DWORD PTR _source_side$[ebp], eax

; 2258 : 
; 2259 : 	source_heading = get_local_entity_float_value (source, FLOAT_TYPE_HEADING);

  000dc	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  000e3	74 10		 je	 SHORT $LN99@draw_tacti
  000e5	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  000eb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ed	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv128[ebp], ecx
  000f3	eb 24		 jmp	 SHORT $LN100@draw_tacti
$LN99@draw_tacti:
  000f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  000fb	83 c2 1f	 add	 edx, 31			; 0000001fH
  000fe	52		 push	 edx
  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00104	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00109	50		 push	 eax
  0010a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0010f	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv128[ebp], 0
$LN100@draw_tacti:
  00119	b9 01 00 00 00	 mov	 ecx, 1
  0011e	85 c9		 test	 ecx, ecx
  00120	74 0c		 je	 SHORT $LN101@draw_tacti
  00122	c7 85 40 fe ff
	ff 34 00 00 00	 mov	 DWORD PTR tv136[ebp], 52 ; 00000034H
  0012c	eb 24		 jmp	 SHORT $LN102@draw_tacti
$LN101@draw_tacti:
  0012e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00134	83 c2 1f	 add	 edx, 31			; 0000001fH
  00137	52		 push	 edx
  00138	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0013d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  00142	50		 push	 eax
  00143	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00148	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv136[ebp], 0
$LN102@draw_tacti:
  00152	6a 34		 push	 52			; 00000034H
  00154	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  0015a	51		 push	 ecx
  0015b	69 95 44 fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv128[ebp], 700
  00165	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR tv136[ebp]
  0016b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  00172	ff d1		 call	 ecx
  00174	d9 9d 10 ff ff
	ff		 fstp	 DWORD PTR _source_heading$[ebp]

; 2260 : 
; 2261 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  0017a	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00181	74 10		 je	 SHORT $LN103@draw_tacti
  00183	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00189	8b 08		 mov	 ecx, DWORD PTR [eax]
  0018b	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv148[ebp], ecx
  00191	eb 24		 jmp	 SHORT $LN104@draw_tacti
$LN103@draw_tacti:
  00193	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00199	83 c2 21	 add	 edx, 33			; 00000021H
  0019c	52		 push	 edx
  0019d	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  001a7	50		 push	 eax
  001a8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001ad	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv148[ebp], 0
$LN104@draw_tacti:
  001b7	b9 01 00 00 00	 mov	 ecx, 1
  001bc	85 c9		 test	 ecx, ecx
  001be	74 0c		 je	 SHORT $LN105@draw_tacti
  001c0	c7 85 40 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv156[ebp], 8
  001ca	eb 24		 jmp	 SHORT $LN106@draw_tacti
$LN105@draw_tacti:
  001cc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  001d2	83 c2 21	 add	 edx, 33			; 00000021H
  001d5	52		 push	 edx
  001d6	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001e0	50		 push	 eax
  001e1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001e6	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv156[ebp], 0
$LN106@draw_tacti:
  001f0	6a 08		 push	 8
  001f2	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  001f8	51		 push	 ecx
  001f9	6b 95 44 fe ff
	ff 60		 imul	 edx, DWORD PTR tv148[ebp], 96
  00200	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR tv156[ebp]
  00206	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0020d	ff d1		 call	 ecx
  0020f	89 85 04 ff ff
	ff		 mov	 DWORD PTR _source_position$[ebp], eax

; 2262 : 
; 2263 : 	source_target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  00215	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  0021c	74 10		 je	 SHORT $LN107@draw_tacti
  0021e	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00224	8b 08		 mov	 ecx, DWORD PTR [eax]
  00226	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv168[ebp], ecx
  0022c	eb 24		 jmp	 SHORT $LN108@draw_tacti
$LN107@draw_tacti:
  0022e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00234	83 c2 23	 add	 edx, 35			; 00000023H
  00237	52		 push	 edx
  00238	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0023d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00242	50		 push	 eax
  00243	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00248	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv168[ebp], 0
$LN108@draw_tacti:
  00252	b9 01 00 00 00	 mov	 ecx, 1
  00257	85 c9		 test	 ecx, ecx
  00259	74 0c		 je	 SHORT $LN109@draw_tacti
  0025b	c7 85 40 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv176[ebp], 38 ; 00000026H
  00265	eb 24		 jmp	 SHORT $LN110@draw_tacti
$LN109@draw_tacti:
  00267	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  0026d	83 c2 23	 add	 edx, 35			; 00000023H
  00270	52		 push	 edx
  00271	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00276	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0027b	50		 push	 eax
  0027c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00281	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv176[ebp], 0
$LN110@draw_tacti:
  0028b	6a 26		 push	 38			; 00000026H
  0028d	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00293	51		 push	 ecx
  00294	69 95 44 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv168[ebp], 180
  0029e	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR tv176[ebp]
  002a4	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  002ab	ff d1		 call	 ecx
  002ad	89 85 08 ff ff
	ff		 mov	 DWORD PTR _source_target$[ebp], eax

; 2264 : 
; 2265 : 	scale = RADIUS / tsd_ase_range;

  002b3	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?tsd_ase_range@@3MA
  002bb	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff5d3d193333333
  002c3	f2 0f 5e c8	 divsd	 xmm1, xmm0
  002c7	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  002cb	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _scale$[ebp], xmm0

; 2266 : 
; 2267 : 	//
; 2268 : 	// match ground radar origin
; 2269 : 	//
; 2270 : 
; 2271 : 	if (draw_large_mfd)

  002d3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  002da	74 1d		 je	 SHORT $LN18@draw_tacti

; 2272 : 	{
; 2273 : 		x_origin = 0.0;

  002dc	0f 57 c0	 xorps	 xmm0, xmm0
  002df	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _x_origin$[ebp], xmm0

; 2274 : 		y_origin = -0.6;

  002e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  002ef	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _y_origin$[ebp], xmm0

; 2275 : 	}
; 2276 : 	else

  002f7	eb 1b		 jmp	 SHORT $LN19@draw_tacti
$LN18@draw_tacti:

; 2277 : 	{
; 2278 : 		x_origin = 0.0;

  002f9	0f 57 c0	 xorps	 xmm0, xmm0
  002fc	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _x_origin$[ebp], xmm0

; 2279 : 		y_origin = -0.675;

  00304	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf2ccccd
  0030c	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _y_origin$[ebp], xmm0
$LN19@draw_tacti:

; 2280 : 	}
; 2281 : 
; 2282 : 	get_2d_float_screen_coordinates (x_origin, y_origin, &u, &v);

  00314	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _v$[ebp]
  0031a	50		 push	 eax
  0031b	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _u$[ebp]
  00321	51		 push	 ecx
  00322	51		 push	 ecx
  00323	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  0032b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00330	51		 push	 ecx
  00331	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _x_origin$[ebp]
  00339	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033e	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 2283 : 
; 2284 : 	u -= mfd_viewport_x_min;

  00343	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  0034b	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00353	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _u$[ebp], xmm0

; 2285 : 	v -= mfd_viewport_y_min;

  0035b	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  00363	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0036b	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _v$[ebp], xmm0

; 2286 : 
; 2287 : 	////////////////////////////////////////
; 2288 : 	//
; 2289 : 	//VJ 030423 TSD RENDER MOD
; 2290 : 	//
; 2291 : 	////////////////////////////////////////
; 2292 : 
; 2293 : 	if (tsd_render_mode != TSD_RENDER_CONTOUR_MODE && !ka50_damage.navigation_computer)

  00373	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  0037a	0f 84 df 04 00
	00		 je	 $LN22@draw_tacti
  00380	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  00385	c1 e8 04	 shr	 eax, 4
  00388	83 e0 01	 and	 eax, 1
  0038b	0f 85 ce 04 00
	00		 jne	 $LN22@draw_tacti

; 2294 : 	{
; 2295 : 		//VJ 030423 TSD render mod
; 2296 : 		set_rgb_colour (MFD_COLOUR1,   0, 0,  96, 255);  //dark blue

  00391	b8 04 00 00 00	 mov	 eax, 4
  00396	6b c8 00	 imul	 ecx, eax, 0
  00399	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  003a0	b8 04 00 00 00	 mov	 eax, 4
  003a5	6b c8 00	 imul	 ecx, eax, 0
  003a8	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 0
  003af	b8 04 00 00 00	 mov	 eax, 4
  003b4	6b c8 00	 imul	 ecx, eax, 0
  003b7	c6 81 00 00 00
	00 60		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 96 ; 00000060H
  003be	b8 04 00 00 00	 mov	 eax, 4
  003c3	6b c8 00	 imul	 ecx, eax, 0
  003c6	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 2297 : 	   set_rgb_colour (MFD_COLOUR2,	32, 32,  164, 255); //light blue

  003cd	b8 04 00 00 00	 mov	 eax, 4
  003d2	c1 e0 00	 shl	 eax, 0
  003d5	c6 80 02 00 00
	00 20		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 32 ; 00000020H
  003dc	b8 04 00 00 00	 mov	 eax, 4
  003e1	c1 e0 00	 shl	 eax, 0
  003e4	c6 80 01 00 00
	00 20		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 32 ; 00000020H
  003eb	b8 04 00 00 00	 mov	 eax, 4
  003f0	c1 e0 00	 shl	 eax, 0
  003f3	c6 80 00 00 00
	00 a4		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 164 ; 000000a4H
  003fa	b8 04 00 00 00	 mov	 eax, 4
  003ff	c1 e0 00	 shl	 eax, 0
  00402	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 2298 : 		set_rgb_colour (MFD_COLOUR3, 220, 48,   0, 255); //bright red

  00409	b8 04 00 00 00	 mov	 eax, 4
  0040e	d1 e0		 shl	 eax, 1
  00410	c6 80 02 00 00
	00 dc		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 220 ; 000000dcH
  00417	b8 04 00 00 00	 mov	 eax, 4
  0041c	d1 e0		 shl	 eax, 1
  0041e	c6 80 01 00 00
	00 30		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 48 ; 00000030H
  00425	b8 04 00 00 00	 mov	 eax, 4
  0042a	d1 e0		 shl	 eax, 1
  0042c	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00433	b8 04 00 00 00	 mov	 eax, 4
  00438	d1 e0		 shl	 eax, 1
  0043a	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 2299 : 		set_rgb_colour (MFD_COLOUR4, 148, 32,   0, 255);//dark red

  00441	b8 04 00 00 00	 mov	 eax, 4
  00446	6b c8 03	 imul	 ecx, eax, 3
  00449	c6 81 02 00 00
	00 94		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 148 ; 00000094H
  00450	b8 04 00 00 00	 mov	 eax, 4
  00455	6b c8 03	 imul	 ecx, eax, 3
  00458	c6 81 01 00 00
	00 20		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 32 ; 00000020H
  0045f	b8 04 00 00 00	 mov	 eax, 4
  00464	6b c8 03	 imul	 ecx, eax, 3
  00467	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  0046e	b8 04 00 00 00	 mov	 eax, 4
  00473	6b c8 03	 imul	 ecx, eax, 3
  00476	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 2300 : 
; 2301 : 		set_rgb_colour (MFD_COLOUR6,  255, 255,  0, 255);

  0047d	b8 04 00 00 00	 mov	 eax, 4
  00482	6b c8 05	 imul	 ecx, eax, 5
  00485	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  0048c	b8 04 00 00 00	 mov	 eax, 4
  00491	6b c8 05	 imul	 ecx, eax, 5
  00494	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  0049b	b8 04 00 00 00	 mov	 eax, 4
  004a0	6b c8 05	 imul	 ecx, eax, 5
  004a3	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  004aa	b8 04 00 00 00	 mov	 eax, 4
  004af	6b c8 05	 imul	 ecx, eax, 5
  004b2	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 2302 : 		//VJ 030511 colours 7 and 8 are grays when enemy colour option is off in eech.ini
; 2303 : 		//VJ 030530 colour tweaks: black and dark gray are best
; 2304 : 		set_rgb_colour (MFD_COLOUR7,    64, 64, 64, 255);

  004b9	b8 04 00 00 00	 mov	 eax, 4
  004be	6b c8 0b	 imul	 ecx, eax, 11
  004c1	c6 81 02 00 00
	00 40		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 64 ; 00000040H
  004c8	b8 04 00 00 00	 mov	 eax, 4
  004cd	6b c8 0b	 imul	 ecx, eax, 11
  004d0	c6 81 01 00 00
	00 40		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 64 ; 00000040H
  004d7	b8 04 00 00 00	 mov	 eax, 4
  004dc	6b c8 0b	 imul	 ecx, eax, 11
  004df	c6 81 00 00 00
	00 40		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 64 ; 00000040H
  004e6	b8 04 00 00 00	 mov	 eax, 4
  004eb	6b c8 0b	 imul	 ecx, eax, 11
  004ee	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 2305 : 		set_rgb_colour (MFD_COLOUR8,    0,   0,  0, 255);

  004f5	b8 04 00 00 00	 mov	 eax, 4
  004fa	6b c8 0c	 imul	 ecx, eax, 12
  004fd	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  00504	b8 04 00 00 00	 mov	 eax, 4
  00509	6b c8 0c	 imul	 ecx, eax, 12
  0050c	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 0
  00513	b8 04 00 00 00	 mov	 eax, 4
  00518	6b c8 0c	 imul	 ecx, eax, 12
  0051b	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00522	b8 04 00 00 00	 mov	 eax, 4
  00527	6b c8 0c	 imul	 ecx, eax, 12
  0052a	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 2306 : 
; 2307 : 	   draw_tsd_terrain_map (mfd_env, -y_origin, tsd_ase_range, scale, source_position, source_heading, FALSE);

  00531	6a 00		 push	 0
  00533	51		 push	 ecx
  00534	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  0053c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00541	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00547	50		 push	 eax
  00548	51		 push	 ecx
  00549	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00551	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00556	51		 push	 ecx
  00557	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  0055f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00564	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  0056c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00573	51		 push	 ecx
  00574	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00579	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0057f	51		 push	 ecx
  00580	e8 00 00 00 00	 call	 ?draw_tsd_terrain_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MH@Z ; draw_tsd_terrain_map

; 2308 : 
; 2309 : 		if (command_line_colour_mfd)

  00585	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_colour_mfd@@3HA, 0 ; command_line_colour_mfd
  0058c	0f 84 69 01 00
	00		 je	 $LN21@draw_tacti

; 2310 : 		{
; 2311 : 		   	set_rgb_colour (MFD_COLOUR1,            255, 255, 255, 255);

  00592	b8 04 00 00 00	 mov	 eax, 4
  00597	6b c8 00	 imul	 ecx, eax, 0
  0059a	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  005a1	b8 04 00 00 00	 mov	 eax, 4
  005a6	6b c8 00	 imul	 ecx, eax, 0
  005a9	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  005b0	b8 04 00 00 00	 mov	 eax, 4
  005b5	6b c8 00	 imul	 ecx, eax, 0
  005b8	c6 81 00 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 255 ; 000000ffH
  005bf	b8 04 00 00 00	 mov	 eax, 4
  005c4	6b c8 00	 imul	 ecx, eax, 0
  005c7	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 2312 : 			set_rgb_colour (MFD_COLOUR2,            200, 200, 200, 255);

  005ce	b8 04 00 00 00	 mov	 eax, 4
  005d3	c1 e0 00	 shl	 eax, 0
  005d6	c6 80 02 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 200 ; 000000c8H
  005dd	b8 04 00 00 00	 mov	 eax, 4
  005e2	c1 e0 00	 shl	 eax, 0
  005e5	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  005ec	b8 04 00 00 00	 mov	 eax, 4
  005f1	c1 e0 00	 shl	 eax, 0
  005f4	c6 80 00 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 200 ; 000000c8H
  005fb	b8 04 00 00 00	 mov	 eax, 4
  00600	c1 e0 00	 shl	 eax, 0
  00603	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 2313 : 			set_rgb_colour (MFD_COLOUR3,            176, 176, 176, 255);

  0060a	b8 04 00 00 00	 mov	 eax, 4
  0060f	d1 e0		 shl	 eax, 1
  00611	c6 80 02 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 176 ; 000000b0H
  00618	b8 04 00 00 00	 mov	 eax, 4
  0061d	d1 e0		 shl	 eax, 1
  0061f	c6 80 01 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 176 ; 000000b0H
  00626	b8 04 00 00 00	 mov	 eax, 4
  0062b	d1 e0		 shl	 eax, 1
  0062d	c6 80 00 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 176 ; 000000b0H
  00634	b8 04 00 00 00	 mov	 eax, 4
  00639	d1 e0		 shl	 eax, 1
  0063b	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 2314 : 			set_rgb_colour (MFD_COLOUR4,            151, 151, 151, 255);

  00642	b8 04 00 00 00	 mov	 eax, 4
  00647	6b c8 03	 imul	 ecx, eax, 3
  0064a	c6 81 02 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 151 ; 00000097H
  00651	b8 04 00 00 00	 mov	 eax, 4
  00656	6b c8 03	 imul	 ecx, eax, 3
  00659	c6 81 01 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 151 ; 00000097H
  00660	b8 04 00 00 00	 mov	 eax, 4
  00665	6b c8 03	 imul	 ecx, eax, 3
  00668	c6 81 00 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 151 ; 00000097H
  0066f	b8 04 00 00 00	 mov	 eax, 4
  00674	6b c8 03	 imul	 ecx, eax, 3
  00677	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 2315 : 			set_rgb_colour (MFD_COLOUR5,            128, 128, 128, 255);

  0067e	b8 04 00 00 00	 mov	 eax, 4
  00683	c1 e0 02	 shl	 eax, 2
  00686	c6 80 02 00 00
	00 80		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 128 ; 00000080H
  0068d	b8 04 00 00 00	 mov	 eax, 4
  00692	c1 e0 02	 shl	 eax, 2
  00695	c6 80 01 00 00
	00 80		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 128 ; 00000080H
  0069c	b8 04 00 00 00	 mov	 eax, 4
  006a1	c1 e0 02	 shl	 eax, 2
  006a4	c6 80 00 00 00
	00 80		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 128 ; 00000080H
  006ab	b8 04 00 00 00	 mov	 eax, 4
  006b0	c1 e0 02	 shl	 eax, 2
  006b3	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 2316 : 			set_rgb_colour (MFD_COLOUR6,             40,  40,  40, 255);

  006ba	b8 04 00 00 00	 mov	 eax, 4
  006bf	6b c8 05	 imul	 ecx, eax, 5
  006c2	c6 81 02 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 40 ; 00000028H
  006c9	b8 04 00 00 00	 mov	 eax, 4
  006ce	6b c8 05	 imul	 ecx, eax, 5
  006d1	c6 81 01 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 40 ; 00000028H
  006d8	b8 04 00 00 00	 mov	 eax, 4
  006dd	6b c8 05	 imul	 ecx, eax, 5
  006e0	c6 81 00 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 40 ; 00000028H
  006e7	b8 04 00 00 00	 mov	 eax, 4
  006ec	6b c8 05	 imul	 ecx, eax, 5
  006ef	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 2317 : 		}
; 2318 : 		else

  006f6	e9 64 01 00 00	 jmp	 $LN22@draw_tacti
$LN21@draw_tacti:

; 2319 : 		{
; 2320 : 			set_rgb_colour (MFD_COLOUR1,            255, 135,   0, 255);

  006fb	b8 04 00 00 00	 mov	 eax, 4
  00700	6b c8 00	 imul	 ecx, eax, 0
  00703	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  0070a	b8 04 00 00 00	 mov	 eax, 4
  0070f	6b c8 00	 imul	 ecx, eax, 0
  00712	c6 81 01 00 00
	00 87		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 135 ; 00000087H
  00719	b8 04 00 00 00	 mov	 eax, 4
  0071e	6b c8 00	 imul	 ecx, eax, 0
  00721	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00728	b8 04 00 00 00	 mov	 eax, 4
  0072d	6b c8 00	 imul	 ecx, eax, 0
  00730	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 2321 : 			set_rgb_colour (MFD_COLOUR2,            255,  90,   0, 255);

  00737	b8 04 00 00 00	 mov	 eax, 4
  0073c	c1 e0 00	 shl	 eax, 0
  0073f	c6 80 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 255 ; 000000ffH
  00746	b8 04 00 00 00	 mov	 eax, 4
  0074b	c1 e0 00	 shl	 eax, 0
  0074e	c6 80 01 00 00
	00 5a		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 90 ; 0000005aH
  00755	b8 04 00 00 00	 mov	 eax, 4
  0075a	c1 e0 00	 shl	 eax, 0
  0075d	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00764	b8 04 00 00 00	 mov	 eax, 4
  00769	c1 e0 00	 shl	 eax, 0
  0076c	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 2322 : 			set_rgb_colour (MFD_COLOUR3,            200,  65,   0, 255);

  00773	b8 04 00 00 00	 mov	 eax, 4
  00778	d1 e0		 shl	 eax, 1
  0077a	c6 80 02 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 200 ; 000000c8H
  00781	b8 04 00 00 00	 mov	 eax, 4
  00786	d1 e0		 shl	 eax, 1
  00788	c6 80 01 00 00
	00 41		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 65 ; 00000041H
  0078f	b8 04 00 00 00	 mov	 eax, 4
  00794	d1 e0		 shl	 eax, 1
  00796	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  0079d	b8 04 00 00 00	 mov	 eax, 4
  007a2	d1 e0		 shl	 eax, 1
  007a4	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 2323 : 			set_rgb_colour (MFD_COLOUR4,            130,  50,   0, 255);

  007ab	b8 04 00 00 00	 mov	 eax, 4
  007b0	6b c8 03	 imul	 ecx, eax, 3
  007b3	c6 81 02 00 00
	00 82		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 130 ; 00000082H
  007ba	b8 04 00 00 00	 mov	 eax, 4
  007bf	6b c8 03	 imul	 ecx, eax, 3
  007c2	c6 81 01 00 00
	00 32		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 50 ; 00000032H
  007c9	b8 04 00 00 00	 mov	 eax, 4
  007ce	6b c8 03	 imul	 ecx, eax, 3
  007d1	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  007d8	b8 04 00 00 00	 mov	 eax, 4
  007dd	6b c8 03	 imul	 ecx, eax, 3
  007e0	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 2324 : 			set_rgb_colour (MFD_COLOUR5,            100,  50,   0, 255);

  007e7	b8 04 00 00 00	 mov	 eax, 4
  007ec	c1 e0 02	 shl	 eax, 2
  007ef	c6 80 02 00 00
	00 64		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 100 ; 00000064H
  007f6	b8 04 00 00 00	 mov	 eax, 4
  007fb	c1 e0 02	 shl	 eax, 2
  007fe	c6 80 01 00 00
	00 32		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 50 ; 00000032H
  00805	b8 04 00 00 00	 mov	 eax, 4
  0080a	c1 e0 02	 shl	 eax, 2
  0080d	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00814	b8 04 00 00 00	 mov	 eax, 4
  00819	c1 e0 02	 shl	 eax, 2
  0081c	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 2325 : 			set_rgb_colour (MFD_COLOUR6,             50,  25,   0, 255);

  00823	b8 04 00 00 00	 mov	 eax, 4
  00828	6b c8 05	 imul	 ecx, eax, 5
  0082b	c6 81 02 00 00
	00 32		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 50 ; 00000032H
  00832	b8 04 00 00 00	 mov	 eax, 4
  00837	6b c8 05	 imul	 ecx, eax, 5
  0083a	c6 81 01 00 00
	00 19		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 25 ; 00000019H
  00841	b8 04 00 00 00	 mov	 eax, 4
  00846	6b c8 05	 imul	 ecx, eax, 5
  00849	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00850	b8 04 00 00 00	 mov	 eax, 4
  00855	6b c8 05	 imul	 ecx, eax, 5
  00858	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH
$LN22@draw_tacti:

; 2326 : 		}
; 2327 : 	}
; 2328 : 
; 2329 : 	////////////////////////////////////////
; 2330 : 	//
; 2331 : 	// contour map
; 2332 : 	//
; 2333 : 	////////////////////////////////////////
; 2334 : 
; 2335 : //VJ 030423 TSD render mod, added mfd_env
; 2336 : 	if (!ka50_damage.navigation_computer)

  0085f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  00864	c1 e8 04	 shr	 eax, 4
  00867	83 e0 01	 and	 eax, 1
  0086a	75 5a		 jne	 SHORT $LN23@draw_tacti

; 2337 : 		draw_tsd_contour_map (mfd_env, -y_origin, tsd_ase_range, scale, source_position, source_heading, draw_large_mfd, FALSE);

  0086c	6a 00		 push	 0
  0086e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?draw_large_mfd@@3HA
  00873	50		 push	 eax
  00874	51		 push	 ecx
  00875	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  0087d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00882	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  00888	51		 push	 ecx
  00889	51		 push	 ecx
  0088a	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  00892	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00897	51		 push	 ecx
  00898	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  008a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a5	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  008ad	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  008b4	51		 push	 ecx
  008b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ba	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  008c0	52		 push	 edx
  008c1	e8 00 00 00 00	 call	 ?draw_tsd_contour_map@@YGXPAUENV_2D@@MMMPAUVEC3D@@MHH@Z ; draw_tsd_contour_map
$LN23@draw_tacti:

; 2338 : 
; 2339 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  008c6	51		 push	 ecx
  008c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  008cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d4	51		 push	 ecx
  008d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  008dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e2	51		 push	 ecx
  008e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  008eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f0	51		 push	 ecx
  008f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  008f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00903	50		 push	 eax
  00904	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 2340 : 
; 2341 : 	////////////////////////////////////////
; 2342 : 	//
; 2343 : 	// waypoint route
; 2344 : 	//
; 2345 : 	////////////////////////////////////////
; 2346 : 
; 2347 : 	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_TARGET && !ka50_damage.navigation_computer)

  00909	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  00910	0f 84 a5 06 00
	00		 je	 $LN25@draw_tacti
  00916	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  0091b	c1 e8 04	 shr	 eax, 4
  0091e	83 e0 01	 and	 eax, 1
  00921	0f 85 94 06 00
	00		 jne	 $LN25@draw_tacti

; 2348 : 	{
; 2349 : 		entity
; 2350 : 			*wp1,
; 2351 : 			*wp2;
; 2352 : 
; 2353 : 		vec3d
; 2354 : 			wp1_rel_position,
; 2355 : 			wp2_rel_position;
; 2356 : 
; 2357 : 		wp1 = get_local_entity_first_waypoint (source);

  00927	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0092d	50		 push	 eax
  0092e	e8 00 00 00 00	 call	 ?get_local_entity_first_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_first_waypoint
  00933	89 85 00 ff ff
	ff		 mov	 DWORD PTR _wp1$25[ebp], eax

; 2358 : 
; 2359 : 		if (wp1)

  00939	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _wp1$25[ebp], 0
  00940	0f 84 75 06 00
	00		 je	 $LN25@draw_tacti

; 2360 : 		{
; 2361 : 			set_2d_viewport_origin (mfd_env, u, v);

  00946	51		 push	 ecx
  00947	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  0094f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00954	51		 push	 ecx
  00955	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  0095d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00962	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00967	50		 push	 eax
  00968	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 2362 : 
; 2363 : 			set_2d_window_rotation (mfd_env, source_heading);

  0096d	51		 push	 ecx
  0096e	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  00976	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0097b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00980	50		 push	 eax
  00981	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2364 : 
; 2365 : 			//
; 2366 : 			// waypoint route
; 2367 : 			//
; 2368 : 
; 2369 : 			get_waypoint_display_position (source, wp1, &wp1_rel_position);

  00986	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _wp1_rel_position$23[ebp]
  0098c	50		 push	 eax
  0098d	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _wp1$25[ebp]
  00993	51		 push	 ecx
  00994	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  0099a	52		 push	 edx
  0099b	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 2370 : 
; 2371 : 			wp1_rel_position.x = (wp1_rel_position.x - source_position->x) * scale;

  009a0	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  009a6	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp]
  009ae	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  009b2	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  009ba	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$23[ebp], xmm0

; 2372 : 			wp1_rel_position.z = (wp1_rel_position.z - source_position->z) * scale;

  009c2	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  009c8	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp+8]
  009d0	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  009d5	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  009dd	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$23[ebp+8], xmm0

; 2373 : 
; 2374 : 			wp2 = get_local_entity_child_succ (wp1, LIST_TYPE_WAYPOINT);

  009e5	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _wp1$25[ebp], 0
  009ec	74 10		 je	 SHORT $LN111@draw_tacti
  009ee	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _wp1$25[ebp]
  009f4	8b 08		 mov	 ecx, DWORD PTR [eax]
  009f6	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv477[ebp], ecx
  009fc	eb 27		 jmp	 SHORT $LN112@draw_tacti
$LN111@draw_tacti:
  009fe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00a04	81 c2 92 00 00
	00		 add	 edx, 146		; 00000092H
  00a0a	52		 push	 edx
  00a0b	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a10	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00a15	50		 push	 eax
  00a16	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a1b	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv477[ebp], 0
$LN112@draw_tacti:
  00a25	b9 01 00 00 00	 mov	 ecx, 1
  00a2a	85 c9		 test	 ecx, ecx
  00a2c	74 0c		 je	 SHORT $LN113@draw_tacti
  00a2e	c7 85 40 fe ff
	ff 2c 00 00 00	 mov	 DWORD PTR tv485[ebp], 44 ; 0000002cH
  00a38	eb 27		 jmp	 SHORT $LN114@draw_tacti
$LN113@draw_tacti:
  00a3a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00a40	81 c2 92 00 00
	00		 add	 edx, 146		; 00000092H
  00a46	52		 push	 edx
  00a47	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00a4c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00a51	50		 push	 eax
  00a52	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00a57	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv485[ebp], 0
$LN114@draw_tacti:
  00a61	6a 2c		 push	 44			; 0000002cH
  00a63	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _wp1$25[ebp]
  00a69	51		 push	 ecx
  00a6a	69 95 44 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv477[ebp], 180
  00a74	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR tv485[ebp]
  00a7a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00a81	ff d1		 call	 ecx
  00a83	89 85 fc fe ff
	ff		 mov	 DWORD PTR _wp2$24[ebp], eax
$LN2@draw_tacti:

; 2375 : 
; 2376 : 			while (wp2)

  00a89	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _wp2$24[ebp], 0
  00a90	0f 84 db 01 00
	00		 je	 $LN3@draw_tacti

; 2377 : 			{
; 2378 : 				get_waypoint_display_position (source, wp2, &wp2_rel_position);

  00a96	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _wp2_rel_position$22[ebp]
  00a9c	50		 push	 eax
  00a9d	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _wp2$24[ebp]
  00aa3	51		 push	 ecx
  00aa4	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  00aaa	52		 push	 edx
  00aab	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 2379 : 
; 2380 : 				wp2_rel_position.x = (wp2_rel_position.x - source_position->x) * scale;

  00ab0	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00ab6	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$22[ebp]
  00abe	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00ac2	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00aca	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR _wp2_rel_position$22[ebp], xmm0

; 2381 : 				wp2_rel_position.z = (wp2_rel_position.z - source_position->z) * scale;

  00ad2	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00ad8	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$22[ebp+8]
  00ae0	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00ae5	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00aed	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _wp2_rel_position$22[ebp+8], xmm0

; 2382 : 
; 2383 : 				if (draw_large_mfd)

  00af5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00afc	74 4e		 je	 SHORT $LN26@draw_tacti

; 2384 : 				{
; 2385 : 					draw_2d_half_thick_line (wp1_rel_position.x, wp1_rel_position.z, wp2_rel_position.x, wp2_rel_position.z, MFD_COLOUR_BLUE);

  00afe	b8 04 00 00 00	 mov	 eax, 4
  00b03	6b c8 11	 imul	 ecx, eax, 17
  00b06	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b0c	52		 push	 edx
  00b0d	51		 push	 ecx
  00b0e	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$22[ebp+8]
  00b16	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b1b	51		 push	 ecx
  00b1c	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$22[ebp]
  00b24	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b29	51		 push	 ecx
  00b2a	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp+8]
  00b32	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b37	51		 push	 ecx
  00b38	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp]
  00b40	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b45	e8 00 00 00 00	 call	 ?draw_2d_half_thick_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_half_thick_line

; 2386 : 				}
; 2387 : 				else

  00b4a	eb 4c		 jmp	 SHORT $LN27@draw_tacti
$LN26@draw_tacti:

; 2388 : 				{
; 2389 : 					draw_2d_line (wp1_rel_position.x, wp1_rel_position.z, wp2_rel_position.x, wp2_rel_position.z, MFD_COLOUR_BLUE);

  00b4c	b8 04 00 00 00	 mov	 eax, 4
  00b51	6b c8 11	 imul	 ecx, eax, 17
  00b54	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b5a	52		 push	 edx
  00b5b	51		 push	 ecx
  00b5c	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$22[ebp+8]
  00b64	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b69	51		 push	 ecx
  00b6a	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _wp2_rel_position$22[ebp]
  00b72	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b77	51		 push	 ecx
  00b78	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp+8]
  00b80	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b85	51		 push	 ecx
  00b86	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp]
  00b8e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b93	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN27@draw_tacti:

; 2390 : 				}
; 2391 : 
; 2392 : 				wp1 = wp2;

  00b98	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _wp2$24[ebp]
  00b9e	89 85 00 ff ff
	ff		 mov	 DWORD PTR _wp1$25[ebp], eax

; 2393 : 
; 2394 : 				wp1_rel_position = wp2_rel_position;

  00ba4	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _wp2_rel_position$22[ebp]
  00baa	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _wp1_rel_position$23[ebp], eax
  00bb0	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _wp2_rel_position$22[ebp+4]
  00bb6	89 8d f4 fe ff
	ff		 mov	 DWORD PTR _wp1_rel_position$23[ebp+4], ecx
  00bbc	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR _wp2_rel_position$22[ebp+8]
  00bc2	89 95 f8 fe ff
	ff		 mov	 DWORD PTR _wp1_rel_position$23[ebp+8], edx

; 2395 : 
; 2396 : 				wp2 = get_local_entity_child_succ (wp1, LIST_TYPE_WAYPOINT);

  00bc8	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _wp1$25[ebp], 0
  00bcf	74 10		 je	 SHORT $LN115@draw_tacti
  00bd1	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _wp1$25[ebp]
  00bd7	8b 08		 mov	 ecx, DWORD PTR [eax]
  00bd9	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv522[ebp], ecx
  00bdf	eb 27		 jmp	 SHORT $LN116@draw_tacti
$LN115@draw_tacti:
  00be1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00be7	81 c2 a8 00 00
	00		 add	 edx, 168		; 000000a8H
  00bed	52		 push	 edx
  00bee	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00bf3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00bf8	50		 push	 eax
  00bf9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00bfe	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv522[ebp], 0
$LN116@draw_tacti:
  00c08	b9 01 00 00 00	 mov	 ecx, 1
  00c0d	85 c9		 test	 ecx, ecx
  00c0f	74 0c		 je	 SHORT $LN117@draw_tacti
  00c11	c7 85 40 fe ff
	ff 2c 00 00 00	 mov	 DWORD PTR tv530[ebp], 44 ; 0000002cH
  00c1b	eb 27		 jmp	 SHORT $LN118@draw_tacti
$LN117@draw_tacti:
  00c1d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00c23	81 c2 a8 00 00
	00		 add	 edx, 168		; 000000a8H
  00c29	52		 push	 edx
  00c2a	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00c2f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00c34	50		 push	 eax
  00c35	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00c3a	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv530[ebp], 0
$LN118@draw_tacti:
  00c44	6a 2c		 push	 44			; 0000002cH
  00c46	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _wp1$25[ebp]
  00c4c	51		 push	 ecx
  00c4d	69 95 44 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv522[ebp], 180
  00c57	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR tv530[ebp]
  00c5d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00c64	ff d1		 call	 ecx
  00c66	89 85 fc fe ff
	ff		 mov	 DWORD PTR _wp2$24[ebp], eax

; 2397 : 			}

  00c6c	e9 18 fe ff ff	 jmp	 $LN2@draw_tacti
$LN3@draw_tacti:

; 2398 : 
; 2399 : 			//
; 2400 : 			// waypoint markers
; 2401 : 			//
; 2402 : 
; 2403 : 			set_mono_font_colour (MFD_COLOUR2);

  00c71	b8 04 00 00 00	 mov	 eax, 4
  00c76	c1 e0 00	 shl	 eax, 0
  00c79	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00c7f	51		 push	 ecx
  00c80	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 2404 : 
; 2405 : 			if (draw_large_mfd)

  00c85	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00c8c	74 09		 je	 SHORT $LN28@draw_tacti

; 2406 : 			{
; 2407 : 				set_mono_font_type (MONO_FONT_TYPE_7X12);

  00c8e	6a 05		 push	 5
  00c90	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 2408 : 			}
; 2409 : 			else

  00c95	eb 07		 jmp	 SHORT $LN29@draw_tacti
$LN28@draw_tacti:

; 2410 : 			{
; 2411 : 				set_mono_font_type (MONO_FONT_TYPE_5X7);

  00c97	6a 01		 push	 1
  00c99	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN29@draw_tacti:

; 2412 : 			}
; 2413 : 
; 2414 : 			wp1 = get_local_entity_first_waypoint (source);

  00c9e	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  00ca4	50		 push	 eax
  00ca5	e8 00 00 00 00	 call	 ?get_local_entity_first_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_first_waypoint
  00caa	89 85 00 ff ff
	ff		 mov	 DWORD PTR _wp1$25[ebp], eax
$LN4@draw_tacti:

; 2415 : 
; 2416 : 			while (wp1)

  00cb0	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _wp1$25[ebp], 0
  00cb7	0f 84 a7 02 00
	00		 je	 $LN5@draw_tacti

; 2417 : 			{
; 2418 : 				get_waypoint_display_position (source, wp1, &wp1_rel_position);

  00cbd	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _wp1_rel_position$23[ebp]
  00cc3	50		 push	 eax
  00cc4	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _wp1$25[ebp]
  00cca	51		 push	 ecx
  00ccb	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  00cd1	52		 push	 edx
  00cd2	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 2419 : 
; 2420 : 				wp1_rel_position.x = (wp1_rel_position.x - source_position->x) * scale;

  00cd7	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00cdd	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp]
  00ce5	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00ce9	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00cf1	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$23[ebp], xmm0

; 2421 : 				wp1_rel_position.z = (wp1_rel_position.z - source_position->z) * scale;

  00cf9	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  00cff	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp+8]
  00d07	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  00d0c	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00d14	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR _wp1_rel_position$23[ebp+8], xmm0

; 2422 : 
; 2423 : 				if (draw_large_mfd)

  00d1c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00d23	74 79		 je	 SHORT $LN30@draw_tacti

; 2424 : 				{
; 2425 : 					draw_2d_mono_sprite (large_tsd_waypoint_marker, wp1_rel_position.x, wp1_rel_position.z, MFD_COLOUR_BLUE);

  00d25	b8 04 00 00 00	 mov	 eax, 4
  00d2a	6b c8 11	 imul	 ecx, eax, 17
  00d2d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00d33	52		 push	 edx
  00d34	51		 push	 ecx
  00d35	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp+8]
  00d3d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d42	51		 push	 ecx
  00d43	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp]
  00d4b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d50	68 00 00 00 00	 push	 OFFSET ?large_tsd_waypoint_marker@@3PADA
  00d55	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2426 : 
; 2427 : 					set_2d_mono_font_position (wp1_rel_position.x, wp1_rel_position.z);

  00d5a	51		 push	 ecx
  00d5b	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp+8]
  00d63	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d68	51		 push	 ecx
  00d69	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp]
  00d71	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d76	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2428 : 
; 2429 : 					set_mono_font_rel_position (-2.0, -4.0);

  00d7b	51		 push	 ecx
  00d7c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0800000
  00d84	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d89	51		 push	 ecx
  00d8a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00d92	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d97	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2430 : 				}
; 2431 : 				else

  00d9c	eb 77		 jmp	 SHORT $LN31@draw_tacti
$LN30@draw_tacti:

; 2432 : 				{
; 2433 : 					draw_2d_mono_sprite (small_tsd_waypoint_marker, wp1_rel_position.x, wp1_rel_position.z, MFD_COLOUR_BLUE);

  00d9e	b8 04 00 00 00	 mov	 eax, 4
  00da3	6b c8 11	 imul	 ecx, eax, 17
  00da6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00dac	52		 push	 edx
  00dad	51		 push	 ecx
  00dae	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp+8]
  00db6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dbb	51		 push	 ecx
  00dbc	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp]
  00dc4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dc9	68 00 00 00 00	 push	 OFFSET ?small_tsd_waypoint_marker@@3PADA
  00dce	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2434 : 
; 2435 : 					set_2d_mono_font_position (wp1_rel_position.x, wp1_rel_position.z);

  00dd3	51		 push	 ecx
  00dd4	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp+8]
  00ddc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00de1	51		 push	 ecx
  00de2	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR _wp1_rel_position$23[ebp]
  00dea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00def	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2436 : 
; 2437 : 					set_mono_font_rel_position (-2.0, -2.0);

  00df4	51		 push	 ecx
  00df5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00dfd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e02	51		 push	 ecx
  00e03	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00e0b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e10	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position
$LN31@draw_tacti:

; 2438 : 				}
; 2439 : 
; 2440 : 				print_mono_font_char (get_local_entity_char_value (wp1, CHAR_TYPE_TAG));

  00e15	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _wp1$25[ebp], 0
  00e1c	74 10		 je	 SHORT $LN119@draw_tacti
  00e1e	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _wp1$25[ebp]
  00e24	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e26	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv581[ebp], ecx
  00e2c	eb 27		 jmp	 SHORT $LN120@draw_tacti
$LN119@draw_tacti:
  00e2e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00e34	81 c2 d4 00 00
	00		 add	 edx, 212		; 000000d4H
  00e3a	52		 push	 edx
  00e3b	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e40	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00e45	50		 push	 eax
  00e46	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e4b	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv581[ebp], 0
$LN120@draw_tacti:
  00e55	b9 01 00 00 00	 mov	 ecx, 1
  00e5a	85 c9		 test	 ecx, ecx
  00e5c	74 0c		 je	 SHORT $LN121@draw_tacti
  00e5e	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv589[ebp], 0
  00e68	eb 27		 jmp	 SHORT $LN122@draw_tacti
$LN121@draw_tacti:
  00e6a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00e70	81 c2 d4 00 00
	00		 add	 edx, 212		; 000000d4H
  00e76	52		 push	 edx
  00e77	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00e7c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  00e81	50		 push	 eax
  00e82	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00e87	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv589[ebp], 0
$LN122@draw_tacti:
  00e91	6a 00		 push	 0
  00e93	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _wp1$25[ebp]
  00e99	51		 push	 ecx
  00e9a	8b 95 40 fe ff
	ff		 mov	 edx, DWORD PTR tv589[ebp]
  00ea0	c1 e2 02	 shl	 edx, 2
  00ea3	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR tv581[ebp]
  00ea9	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[edx+eax*8]
  00eb0	ff d1		 call	 ecx
  00eb2	0f b6 d0	 movzx	 edx, al
  00eb5	52		 push	 edx
  00eb6	e8 00 00 00 00	 call	 ?print_mono_font_char@@YGXD@Z ; print_mono_font_char

; 2441 : 
; 2442 : 				wp1 = get_local_entity_child_succ (wp1, LIST_TYPE_WAYPOINT);

  00ebb	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _wp1$25[ebp], 0
  00ec2	74 10		 je	 SHORT $LN123@draw_tacti
  00ec4	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _wp1$25[ebp]
  00eca	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ecc	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv602[ebp], ecx
  00ed2	eb 27		 jmp	 SHORT $LN124@draw_tacti
$LN123@draw_tacti:
  00ed4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00eda	81 c2 d6 00 00
	00		 add	 edx, 214		; 000000d6H
  00ee0	52		 push	 edx
  00ee1	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00ee6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00eeb	50		 push	 eax
  00eec	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00ef1	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv602[ebp], 0
$LN124@draw_tacti:
  00efb	b9 01 00 00 00	 mov	 ecx, 1
  00f00	85 c9		 test	 ecx, ecx
  00f02	74 0c		 je	 SHORT $LN125@draw_tacti
  00f04	c7 85 40 fe ff
	ff 2c 00 00 00	 mov	 DWORD PTR tv610[ebp], 44 ; 0000002cH
  00f0e	eb 27		 jmp	 SHORT $LN126@draw_tacti
$LN125@draw_tacti:
  00f10	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  00f16	81 c2 d6 00 00
	00		 add	 edx, 214		; 000000d6H
  00f1c	52		 push	 edx
  00f1d	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00f22	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00f27	50		 push	 eax
  00f28	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00f2d	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv610[ebp], 0
$LN126@draw_tacti:
  00f37	6a 2c		 push	 44			; 0000002cH
  00f39	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _wp1$25[ebp]
  00f3f	51		 push	 ecx
  00f40	69 95 44 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv602[ebp], 180
  00f4a	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR tv610[ebp]
  00f50	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00f57	ff d1		 call	 ecx
  00f59	89 85 00 ff ff
	ff		 mov	 DWORD PTR _wp1$25[ebp], eax

; 2443 : 			}

  00f5f	e9 4c fd ff ff	 jmp	 $LN4@draw_tacti
$LN5@draw_tacti:

; 2444 : 
; 2445 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00f64	51		 push	 ecx
  00f65	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00f6d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f72	51		 push	 ecx
  00f73	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00f7b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f80	51		 push	 ecx
  00f81	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00f89	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f8e	51		 push	 ecx
  00f8f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00f97	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f9c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00fa1	50		 push	 eax
  00fa2	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 2446 : 
; 2447 : 			set_2d_window_rotation (mfd_env, 0.0);

  00fa7	51		 push	 ecx
  00fa8	0f 57 c0	 xorps	 xmm0, xmm0
  00fab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fb0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00fb5	50		 push	 eax
  00fb6	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN25@draw_tacti:

; 2448 : 		}
; 2449 : 	}
; 2450 : 
; 2451 : 	////////////////////////////////////////
; 2452 : 	//
; 2453 : 	// targets
; 2454 : 	//
; 2455 : 	////////////////////////////////////////
; 2456 : 
; 2457 : 	{
; 2458 : 		entity
; 2459 : 			*target,
; 2460 : 			*launched_weapon;
; 2461 : 
; 2462 : 		vec3d
; 2463 : 			*target_position;
; 2464 : 
; 2465 : 		threat_types
; 2466 : 			threat_type;
; 2467 : 
; 2468 : 		int
; 2469 : 			draw_threat_line;
; 2470 : 
; 2471 : 		float
; 2472 : 			air_scan_range,
; 2473 : 			dx,
; 2474 : 			dy;
; 2475 : 
; 2476 : 		if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_NAVIGATION)

  00fbb	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
  00fc2	0f 84 20 11 00
	00		 je	 $LN32@draw_tacti

; 2477 : 		{
; 2478 : 			tsd_threat_line_flash_timer -= get_delta_time ();

  00fc8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_threat_line_flash_timer@@3MA
  00fd0	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?system_delta_time@@3MA
  00fd8	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_threat_line_flash_timer@@3MA, xmm0

; 2479 : 
; 2480 : 			if (tsd_threat_line_flash_timer < 0.0)

  00fe0	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?tsd_threat_line_flash_timer@@3MA
  00fe8	0f 57 c9	 xorps	 xmm1, xmm1
  00feb	66 0f 2f c8	 comisd	 xmm1, xmm0
  00fef	76 1d		 jbe	 SHORT $LN33@draw_tacti

; 2481 : 			{
; 2482 : 				tsd_threat_line_flash_timer = TSD_THREAT_LINE_FLASH_RATE;

  00ff1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00ff9	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_threat_line_flash_timer@@3MA, xmm0

; 2483 : 
; 2484 : 				tsd_draw_threat_line_status ^= 1;

  01001	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tsd_draw_threat_line_status@@3HA
  01006	83 f0 01	 xor	 eax, 1
  01009	a3 00 00 00 00	 mov	 DWORD PTR ?tsd_draw_threat_line_status@@3HA, eax
$LN33@draw_tacti:

; 2485 : 			}
; 2486 : 
; 2487 : 			set_2d_viewport_origin (mfd_env, u, v);

  0100e	51		 push	 ecx
  0100f	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _v$[ebp]
  01017	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0101c	51		 push	 ecx
  0101d	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  01025	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0102a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0102f	50		 push	 eax
  01030	e8 00 00 00 00	 call	 ?set_2d_viewport_origin@@YGXPAUENV_2D@@MM@Z ; set_2d_viewport_origin

; 2488 : 
; 2489 : 			set_2d_window_rotation (mfd_env, source_heading);

  01035	51		 push	 ecx
  01036	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _source_heading$[ebp]
  0103e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01043	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  01048	50		 push	 eax
  01049	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation

; 2490 : 
; 2491 : 			//
; 2492 : 			// display enemy SAM and AAA threat range circles
; 2493 : 			//
; 2494 : 
; 2495 : 			target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  0104e	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01055	74 10		 je	 SHORT $LN127@draw_tacti
  01057	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0105d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0105f	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv639[ebp], ecx
  01065	eb 27		 jmp	 SHORT $LN128@draw_tacti
$LN127@draw_tacti:
  01067	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  0106d	81 c2 0b 01 00
	00		 add	 edx, 267		; 0000010bH
  01073	52		 push	 edx
  01074	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01079	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0107e	50		 push	 eax
  0107f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01084	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv639[ebp], 0
$LN128@draw_tacti:
  0108e	b9 01 00 00 00	 mov	 ecx, 1
  01093	85 c9		 test	 ecx, ecx
  01095	74 0c		 je	 SHORT $LN129@draw_tacti
  01097	c7 85 40 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv679[ebp], 18 ; 00000012H
  010a1	eb 27		 jmp	 SHORT $LN130@draw_tacti
$LN129@draw_tacti:
  010a3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  010a9	81 c2 0b 01 00
	00		 add	 edx, 267		; 0000010bH
  010af	52		 push	 edx
  010b0	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  010b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  010ba	50		 push	 eax
  010bb	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  010c0	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv679[ebp], 0
$LN130@draw_tacti:
  010ca	6a 12		 push	 18			; 00000012H
  010cc	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  010d2	51		 push	 ecx
  010d3	69 95 44 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv639[ebp], 180
  010dd	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR tv679[ebp]
  010e3	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  010ea	ff d1		 call	 ecx
  010ec	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _target$21[ebp], eax
$LN6@draw_tacti:

; 2496 : 
; 2497 : 			while (target)

  010f2	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  010f9	0f 84 82 04 00
	00		 je	 $LN7@draw_tacti

; 2498 : 			{
; 2499 : 				if (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  010ff	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  01106	74 10		 je	 SHORT $LN131@draw_tacti
  01108	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  0110e	8b 08		 mov	 ecx, DWORD PTR [eax]
  01110	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv691[ebp], ecx
  01116	eb 20		 jmp	 SHORT $LN132@draw_tacti
$LN131@draw_tacti:
  01118	68 c3 09 00 00	 push	 2499			; 000009c3H
  0111d	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01122	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01128	52		 push	 edx
  01129	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0112e	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv691[ebp], 0
$LN132@draw_tacti:
  01138	b8 01 00 00 00	 mov	 eax, 1
  0113d	85 c0		 test	 eax, eax
  0113f	74 0c		 je	 SHORT $LN133@draw_tacti
  01141	c7 85 40 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv698[ebp], 66 ; 00000042H
  0114b	eb 20		 jmp	 SHORT $LN134@draw_tacti
$LN133@draw_tacti:
  0114d	68 c3 09 00 00	 push	 2499			; 000009c3H
  01152	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01157	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0115d	51		 push	 ecx
  0115e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01163	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv698[ebp], 0
$LN134@draw_tacti:
  0116d	6a 42		 push	 66			; 00000042H
  0116f	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _target$21[ebp]
  01175	52		 push	 edx
  01176	69 85 44 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv691[ebp], 1116
  01180	8b 8d 40 fe ff
	ff		 mov	 ecx, DWORD PTR tv698[ebp]
  01186	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  0118d	ff d2		 call	 edx
  0118f	85 c0		 test	 eax, eax
  01191	0f 85 41 03 00
	00		 jne	 $LN36@draw_tacti

; 2500 : 				{
; 2501 : 					if (source_side != get_local_entity_int_value (target, INT_TYPE_SIDE))

  01197	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  0119e	74 10		 je	 SHORT $LN135@draw_tacti
  011a0	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  011a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  011a8	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv710[ebp], ecx
  011ae	eb 20		 jmp	 SHORT $LN136@draw_tacti
$LN135@draw_tacti:
  011b0	68 c5 09 00 00	 push	 2501			; 000009c5H
  011b5	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  011ba	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  011c0	52		 push	 edx
  011c1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  011c6	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv710[ebp], 0
$LN136@draw_tacti:
  011d0	b8 01 00 00 00	 mov	 eax, 1
  011d5	85 c0		 test	 eax, eax
  011d7	74 0c		 je	 SHORT $LN137@draw_tacti
  011d9	c7 85 40 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv717[ebp], 187 ; 000000bbH
  011e3	eb 20		 jmp	 SHORT $LN138@draw_tacti
$LN137@draw_tacti:
  011e5	68 c5 09 00 00	 push	 2501			; 000009c5H
  011ea	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  011ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  011f5	51		 push	 ecx
  011f6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  011fb	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv717[ebp], 0
$LN138@draw_tacti:
  01205	68 bb 00 00 00	 push	 187			; 000000bbH
  0120a	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _target$21[ebp]
  01210	52		 push	 edx
  01211	69 85 44 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv710[ebp], 1116
  0121b	8b 8d 40 fe ff
	ff		 mov	 ecx, DWORD PTR tv717[ebp]
  01221	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01228	ff d2		 call	 edx
  0122a	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  01230	0f 84 a2 02 00
	00		 je	 $LN36@draw_tacti

; 2502 : 					{
; 2503 : 						threat_type = (threat_types) get_local_entity_int_value (target, INT_TYPE_THREAT_TYPE);

  01236	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  0123d	74 10		 je	 SHORT $LN139@draw_tacti
  0123f	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  01245	8b 08		 mov	 ecx, DWORD PTR [eax]
  01247	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv730[ebp], ecx
  0124d	eb 27		 jmp	 SHORT $LN140@draw_tacti
$LN139@draw_tacti:
  0124f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  01255	81 c2 13 01 00
	00		 add	 edx, 275		; 00000113H
  0125b	52		 push	 edx
  0125c	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01261	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01266	50		 push	 eax
  01267	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0126c	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv730[ebp], 0
$LN140@draw_tacti:
  01276	b9 01 00 00 00	 mov	 ecx, 1
  0127b	85 c9		 test	 ecx, ecx
  0127d	74 0c		 je	 SHORT $LN141@draw_tacti
  0127f	c7 85 40 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv738[ebp], 233 ; 000000e9H
  01289	eb 27		 jmp	 SHORT $LN142@draw_tacti
$LN141@draw_tacti:
  0128b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  01291	81 c2 13 01 00
	00		 add	 edx, 275		; 00000113H
  01297	52		 push	 edx
  01298	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0129d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  012a2	50		 push	 eax
  012a3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  012a8	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv738[ebp], 0
$LN142@draw_tacti:
  012b2	68 e9 00 00 00	 push	 233			; 000000e9H
  012b7	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$21[ebp]
  012bd	51		 push	 ecx
  012be	69 95 44 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv730[ebp], 1116
  012c8	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR tv738[ebp]
  012ce	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  012d5	ff d1		 call	 ecx
  012d7	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _threat_type$18[ebp], eax

; 2504 : 
; 2505 : 						if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA))

  012dd	83 bd d4 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$18[ebp], 5
  012e4	74 0d		 je	 SHORT $LN37@draw_tacti
  012e6	83 bd d4 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$18[ebp], 6
  012ed	0f 85 e5 01 00
	00		 jne	 $LN36@draw_tacti
$LN37@draw_tacti:

; 2506 : 						{
; 2507 : 							target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  012f3	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  012fa	74 10		 je	 SHORT $LN143@draw_tacti
  012fc	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  01302	8b 08		 mov	 ecx, DWORD PTR [eax]
  01304	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv752[ebp], ecx
  0130a	eb 27		 jmp	 SHORT $LN144@draw_tacti
$LN143@draw_tacti:
  0130c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  01312	81 c2 17 01 00
	00		 add	 edx, 279		; 00000117H
  01318	52		 push	 edx
  01319	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0131e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01323	50		 push	 eax
  01324	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01329	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv752[ebp], 0
$LN144@draw_tacti:
  01333	b9 01 00 00 00	 mov	 ecx, 1
  01338	85 c9		 test	 ecx, ecx
  0133a	74 0c		 je	 SHORT $LN145@draw_tacti
  0133c	c7 85 40 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv760[ebp], 8
  01346	eb 27		 jmp	 SHORT $LN146@draw_tacti
$LN145@draw_tacti:
  01348	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  0134e	81 c2 17 01 00
	00		 add	 edx, 279		; 00000117H
  01354	52		 push	 edx
  01355	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0135a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0135f	50		 push	 eax
  01360	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01365	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv760[ebp], 0
$LN146@draw_tacti:
  0136f	6a 08		 push	 8
  01371	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$21[ebp]
  01377	51		 push	 ecx
  01378	6b 95 44 fe ff
	ff 60		 imul	 edx, DWORD PTR tv752[ebp], 96
  0137f	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR tv760[ebp]
  01385	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  0138c	ff d1		 call	 ecx
  0138e	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _target_position$19[ebp], eax

; 2508 : 
; 2509 : 							dx = (target_position->x - source_position->x) * scale;

  01394	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _target_position$19[ebp]
  0139a	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  013a0	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  013a4	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  013a8	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  013b0	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR _dx$15[ebp], xmm0

; 2510 : 							dy = (target_position->z - source_position->z) * scale;

  013b8	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _target_position$19[ebp]
  013be	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  013c4	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  013c9	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  013ce	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  013d6	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR _dy$14[ebp], xmm0

; 2511 : 
; 2512 : 							air_scan_range = get_local_entity_float_value (target, FLOAT_TYPE_AIR_SCAN_RANGE) * scale;

  013de	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  013e5	74 10		 je	 SHORT $LN147@draw_tacti
  013e7	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  013ed	8b 08		 mov	 ecx, DWORD PTR [eax]
  013ef	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv780[ebp], ecx
  013f5	eb 27		 jmp	 SHORT $LN148@draw_tacti
$LN147@draw_tacti:
  013f7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  013fd	81 c2 1c 01 00
	00		 add	 edx, 284		; 0000011cH
  01403	52		 push	 edx
  01404	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01409	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0140e	50		 push	 eax
  0140f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01414	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv780[ebp], 0
$LN148@draw_tacti:
  0141e	b9 01 00 00 00	 mov	 ecx, 1
  01423	85 c9		 test	 ecx, ecx
  01425	74 0c		 je	 SHORT $LN149@draw_tacti
  01427	c7 85 40 fe ff
	ff 05 00 00 00	 mov	 DWORD PTR tv788[ebp], 5
  01431	eb 27		 jmp	 SHORT $LN150@draw_tacti
$LN149@draw_tacti:
  01433	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  01439	81 c2 1c 01 00
	00		 add	 edx, 284		; 0000011cH
  0143f	52		 push	 edx
  01440	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01445	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_float_type_message@@3PBDB ; overload_invalid_float_type_message
  0144a	50		 push	 eax
  0144b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01450	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv788[ebp], 0
$LN150@draw_tacti:
  0145a	6a 05		 push	 5
  0145c	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$21[ebp]
  01462	51		 push	 ecx
  01463	69 95 44 fe ff
	ff bc 02 00 00	 imul	 edx, DWORD PTR tv780[ebp], 700
  0146d	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR tv788[ebp]
  01473	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_float_value@@3PAY0KP@P6GMPAUENTITY@@W4FLOAT_TYPES@@@ZA[edx+eax*4]
  0147a	ff d1		 call	 ecx
  0147c	d9 9d 3c fe ff
	ff		 fstp	 DWORD PTR tv1889[ebp]
  01482	f3 0f 10 85 3c
	fe ff ff	 movss	 xmm0, DWORD PTR tv1889[ebp]
  0148a	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01492	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR _air_scan_range$16[ebp], xmm0

; 2513 : 
; 2514 : 							draw_2d_circle (dx, dy, air_scan_range, MFD_COLOUR_RED);

  0149a	b8 04 00 00 00	 mov	 eax, 4
  0149f	6b c8 12	 imul	 ecx, eax, 18
  014a2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  014a8	52		 push	 edx
  014a9	51		 push	 ecx
  014aa	f3 0f 10 85 cc
	fe ff ff	 movss	 xmm0, DWORD PTR _air_scan_range$16[ebp]
  014b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014b7	51		 push	 ecx
  014b8	f3 0f 10 85 c4
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$14[ebp]
  014c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014c5	51		 push	 ecx
  014c6	f3 0f 10 85 c8
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$15[ebp]
  014ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014d3	e8 00 00 00 00	 call	 ?draw_2d_circle@@YGXMMMUREAL_COLOUR@@@Z ; draw_2d_circle
$LN36@draw_tacti:

; 2515 : 
; 2516 : 						}
; 2517 : 					}
; 2518 : 				}
; 2519 : 
; 2520 : 				target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  014d8	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  014df	74 10		 je	 SHORT $LN151@draw_tacti
  014e1	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  014e7	8b 08		 mov	 ecx, DWORD PTR [eax]
  014e9	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv807[ebp], ecx
  014ef	eb 27		 jmp	 SHORT $LN152@draw_tacti
$LN151@draw_tacti:
  014f1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  014f7	81 c2 24 01 00
	00		 add	 edx, 292		; 00000124H
  014fd	52		 push	 edx
  014fe	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01503	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01508	50		 push	 eax
  01509	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0150e	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv807[ebp], 0
$LN152@draw_tacti:
  01518	b9 01 00 00 00	 mov	 ecx, 1
  0151d	85 c9		 test	 ecx, ecx
  0151f	74 0c		 je	 SHORT $LN153@draw_tacti
  01521	c7 85 40 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv815[ebp], 18 ; 00000012H
  0152b	eb 27		 jmp	 SHORT $LN154@draw_tacti
$LN153@draw_tacti:
  0152d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  01533	81 c2 24 01 00
	00		 add	 edx, 292		; 00000124H
  01539	52		 push	 edx
  0153a	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0153f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01544	50		 push	 eax
  01545	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0154a	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv815[ebp], 0
$LN154@draw_tacti:
  01554	6a 12		 push	 18			; 00000012H
  01556	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$21[ebp]
  0155c	51		 push	 ecx
  0155d	69 95 44 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv807[ebp], 180
  01567	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR tv815[ebp]
  0156d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01574	ff d1		 call	 ecx
  01576	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _target$21[ebp], eax

; 2521 : 			}

  0157c	e9 71 fb ff ff	 jmp	 $LN6@draw_tacti
$LN7@draw_tacti:

; 2522 : 
; 2523 : 			//
; 2524 : 			// display all gunship targets (do not show ground radar clutter)
; 2525 : 			//
; 2526 : 
; 2527 : 			target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  01581	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01588	74 10		 je	 SHORT $LN155@draw_tacti
  0158a	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01590	8b 08		 mov	 ecx, DWORD PTR [eax]
  01592	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv827[ebp], ecx
  01598	eb 27		 jmp	 SHORT $LN156@draw_tacti
$LN155@draw_tacti:
  0159a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  015a0	81 c2 2b 01 00
	00		 add	 edx, 299		; 0000012bH
  015a6	52		 push	 edx
  015a7	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  015ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  015b1	50		 push	 eax
  015b2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  015b7	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv827[ebp], 0
$LN156@draw_tacti:
  015c1	b9 01 00 00 00	 mov	 ecx, 1
  015c6	85 c9		 test	 ecx, ecx
  015c8	74 0c		 je	 SHORT $LN157@draw_tacti
  015ca	c7 85 40 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv835[ebp], 18 ; 00000012H
  015d4	eb 27		 jmp	 SHORT $LN158@draw_tacti
$LN157@draw_tacti:
  015d6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  015dc	81 c2 2b 01 00
	00		 add	 edx, 299		; 0000012bH
  015e2	52		 push	 edx
  015e3	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  015e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  015ed	50		 push	 eax
  015ee	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  015f3	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv835[ebp], 0
$LN158@draw_tacti:
  015fd	6a 12		 push	 18			; 00000012H
  015ff	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  01605	51		 push	 ecx
  01606	69 95 44 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv827[ebp], 180
  01610	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR tv835[ebp]
  01616	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0161d	ff d1		 call	 ecx
  0161f	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _target$21[ebp], eax
$LN8@draw_tacti:

; 2528 : 
; 2529 : 			while (target)

  01625	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  0162c	0f 84 92 01 00
	00		 je	 $LN9@draw_tacti

; 2530 : 			{
; 2531 : 				if (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  01632	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  01639	74 10		 je	 SHORT $LN159@draw_tacti
  0163b	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  01641	8b 08		 mov	 ecx, DWORD PTR [eax]
  01643	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv847[ebp], ecx
  01649	eb 20		 jmp	 SHORT $LN160@draw_tacti
$LN159@draw_tacti:
  0164b	68 e3 09 00 00	 push	 2531			; 000009e3H
  01650	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01655	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0165b	52		 push	 edx
  0165c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01661	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv847[ebp], 0
$LN160@draw_tacti:
  0166b	b8 01 00 00 00	 mov	 eax, 1
  01670	85 c0		 test	 eax, eax
  01672	74 0c		 je	 SHORT $LN161@draw_tacti
  01674	c7 85 40 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv854[ebp], 66 ; 00000042H
  0167e	eb 20		 jmp	 SHORT $LN162@draw_tacti
$LN161@draw_tacti:
  01680	68 e3 09 00 00	 push	 2531			; 000009e3H
  01685	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0168a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01690	51		 push	 ecx
  01691	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01696	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv854[ebp], 0
$LN162@draw_tacti:
  016a0	6a 42		 push	 66			; 00000042H
  016a2	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _target$21[ebp]
  016a8	52		 push	 edx
  016a9	69 85 44 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv847[ebp], 1116
  016b3	8b 8d 40 fe ff
	ff		 mov	 ecx, DWORD PTR tv854[ebp]
  016b9	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  016c0	ff d2		 call	 edx
  016c2	85 c0		 test	 eax, eax
  016c4	75 55		 jne	 SHORT $LN40@draw_tacti

; 2532 : 				{
; 2533 : 					//VJ 030423 TSD render mod
; 2534 : 					if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  016c6	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  016cd	75 27		 jne	 SHORT $LN39@draw_tacti

; 2535 : 						draw_radar_target_symbol (target, source_position, scale, FALSE, FALSE);

  016cf	6a 00		 push	 0
  016d1	6a 00		 push	 0
  016d3	51		 push	 ecx
  016d4	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  016dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016e1	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  016e7	50		 push	 eax
  016e8	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$21[ebp]
  016ee	51		 push	 ecx
  016ef	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol

; 2536 : 					else

  016f4	eb 25		 jmp	 SHORT $LN40@draw_tacti
$LN39@draw_tacti:

; 2537 : 						draw_radar_target_symbol (target, source_position, scale, FALSE, TRUE);

  016f6	6a 01		 push	 1
  016f8	6a 00		 push	 0
  016fa	51		 push	 ecx
  016fb	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  01703	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01708	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  0170e	50		 push	 eax
  0170f	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$21[ebp]
  01715	51		 push	 ecx
  01716	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN40@draw_tacti:

; 2538 : 				}
; 2539 : 
; 2540 : 				target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  0171b	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  01722	74 10		 je	 SHORT $LN163@draw_tacti
  01724	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  0172a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0172c	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv878[ebp], ecx
  01732	eb 27		 jmp	 SHORT $LN164@draw_tacti
$LN163@draw_tacti:
  01734	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  0173a	81 c2 38 01 00
	00		 add	 edx, 312		; 00000138H
  01740	52		 push	 edx
  01741	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01746	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0174b	50		 push	 eax
  0174c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01751	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv878[ebp], 0
$LN164@draw_tacti:
  0175b	b9 01 00 00 00	 mov	 ecx, 1
  01760	85 c9		 test	 ecx, ecx
  01762	74 0c		 je	 SHORT $LN165@draw_tacti
  01764	c7 85 40 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv886[ebp], 18 ; 00000012H
  0176e	eb 27		 jmp	 SHORT $LN166@draw_tacti
$LN165@draw_tacti:
  01770	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  01776	81 c2 38 01 00
	00		 add	 edx, 312		; 00000138H
  0177c	52		 push	 edx
  0177d	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01782	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01787	50		 push	 eax
  01788	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0178d	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv886[ebp], 0
$LN166@draw_tacti:
  01797	6a 12		 push	 18			; 00000012H
  01799	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$21[ebp]
  0179f	51		 push	 ecx
  017a0	69 95 44 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv878[ebp], 180
  017aa	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR tv886[ebp]
  017b0	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  017b7	ff d1		 call	 ecx
  017b9	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _target$21[ebp], eax

; 2541 : 			}

  017bf	e9 61 fe ff ff	 jmp	 $LN8@draw_tacti
$LN9@draw_tacti:

; 2542 : 
; 2543 : 			//
; 2544 : 			// draw selected target last
; 2545 : 			//
; 2546 : 
; 2547 : 			if (source_target)

  017c4	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR _source_target$[ebp], 0
  017cb	74 55		 je	 SHORT $LN43@draw_tacti

; 2548 : 			{
; 2549 : 				//VJ 030423 TSD render mod
; 2550 : 				if (tsd_render_mode == TSD_RENDER_CONTOUR_MODE)

  017cd	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_render_mode@@3W4TSD_RENDER_MODES@@A, 1 ; tsd_render_mode
  017d4	75 27		 jne	 SHORT $LN42@draw_tacti

; 2551 : 					draw_radar_target_symbol (source_target, source_position, scale, TRUE, FALSE);

  017d6	6a 00		 push	 0
  017d8	6a 01		 push	 1
  017da	51		 push	 ecx
  017db	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  017e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017e8	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  017ee	50		 push	 eax
  017ef	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_target$[ebp]
  017f5	51		 push	 ecx
  017f6	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol

; 2552 : 				else

  017fb	eb 25		 jmp	 SHORT $LN43@draw_tacti
$LN42@draw_tacti:

; 2553 : 					draw_radar_target_symbol (source_target, source_position, scale, TRUE, TRUE);

  017fd	6a 01		 push	 1
  017ff	6a 01		 push	 1
  01801	51		 push	 ecx
  01802	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _scale$[ebp]
  0180a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0180f	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  01815	50		 push	 eax
  01816	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _source_target$[ebp]
  0181c	51		 push	 ecx
  0181d	e8 00 00 00 00	 call	 ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ; draw_radar_target_symbol
$LN43@draw_tacti:

; 2554 : 			}
; 2555 : 
; 2556 : 			//
; 2557 : 			// draw threat line if gunship is targetted (flash if missile fired)
; 2558 : 			//
; 2559 : 
; 2560 : 			target = get_local_entity_first_child (source, LIST_TYPE_GUNSHIP_TARGET);

  01822	83 bd 0c ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  01829	74 10		 je	 SHORT $LN167@draw_tacti
  0182b	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  01831	8b 08		 mov	 ecx, DWORD PTR [eax]
  01833	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv910[ebp], ecx
  01839	eb 27		 jmp	 SHORT $LN168@draw_tacti
$LN167@draw_tacti:
  0183b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  01841	81 c2 4c 01 00
	00		 add	 edx, 332		; 0000014cH
  01847	52		 push	 edx
  01848	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0184d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01852	50		 push	 eax
  01853	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01858	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv910[ebp], 0
$LN168@draw_tacti:
  01862	b9 01 00 00 00	 mov	 ecx, 1
  01867	85 c9		 test	 ecx, ecx
  01869	74 0c		 je	 SHORT $LN169@draw_tacti
  0186b	c7 85 40 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv918[ebp], 18 ; 00000012H
  01875	eb 27		 jmp	 SHORT $LN170@draw_tacti
$LN169@draw_tacti:
  01877	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  0187d	81 c2 4c 01 00
	00		 add	 edx, 332		; 0000014cH
  01883	52		 push	 edx
  01884	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01889	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  0188e	50		 push	 eax
  0188f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01894	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv918[ebp], 0
$LN170@draw_tacti:
  0189e	6a 12		 push	 18			; 00000012H
  018a0	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  018a6	51		 push	 ecx
  018a7	69 95 44 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv910[ebp], 180
  018b1	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR tv918[ebp]
  018b7	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  018be	ff d1		 call	 ecx
  018c0	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _target$21[ebp], eax
$LN10@draw_tacti:

; 2561 : 
; 2562 : 			while (target)

  018c6	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  018cd	0f 84 be 07 00
	00		 je	 $LN11@draw_tacti

; 2563 : 			{
; 2564 : 				if (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER))

  018d3	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  018da	74 10		 je	 SHORT $LN171@draw_tacti
  018dc	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  018e2	8b 08		 mov	 ecx, DWORD PTR [eax]
  018e4	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv930[ebp], ecx
  018ea	eb 20		 jmp	 SHORT $LN172@draw_tacti
$LN171@draw_tacti:
  018ec	68 04 0a 00 00	 push	 2564			; 00000a04H
  018f1	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  018f6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  018fc	52		 push	 edx
  018fd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01902	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv930[ebp], 0
$LN172@draw_tacti:
  0190c	b8 01 00 00 00	 mov	 eax, 1
  01911	85 c0		 test	 eax, eax
  01913	74 0c		 je	 SHORT $LN173@draw_tacti
  01915	c7 85 40 fe ff
	ff 42 00 00 00	 mov	 DWORD PTR tv937[ebp], 66 ; 00000042H
  0191f	eb 20		 jmp	 SHORT $LN174@draw_tacti
$LN173@draw_tacti:
  01921	68 04 0a 00 00	 push	 2564			; 00000a04H
  01926	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0192b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01931	51		 push	 ecx
  01932	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01937	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv937[ebp], 0
$LN174@draw_tacti:
  01941	6a 42		 push	 66			; 00000042H
  01943	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _target$21[ebp]
  01949	52		 push	 edx
  0194a	69 85 44 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv930[ebp], 1116
  01954	8b 8d 40 fe ff
	ff		 mov	 ecx, DWORD PTR tv937[ebp]
  0195a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01961	ff d2		 call	 edx
  01963	85 c0		 test	 eax, eax
  01965	0f 85 7d 06 00
	00		 jne	 $LN52@draw_tacti

; 2565 : 				{
; 2566 : 					if (source_side != get_local_entity_int_value (target, INT_TYPE_SIDE))

  0196b	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  01972	74 10		 je	 SHORT $LN175@draw_tacti
  01974	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  0197a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0197c	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv949[ebp], ecx
  01982	eb 20		 jmp	 SHORT $LN176@draw_tacti
$LN175@draw_tacti:
  01984	68 06 0a 00 00	 push	 2566			; 00000a06H
  01989	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0198e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01994	52		 push	 edx
  01995	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0199a	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv949[ebp], 0
$LN176@draw_tacti:
  019a4	b8 01 00 00 00	 mov	 eax, 1
  019a9	85 c0		 test	 eax, eax
  019ab	74 0c		 je	 SHORT $LN177@draw_tacti
  019ad	c7 85 40 fe ff
	ff bb 00 00 00	 mov	 DWORD PTR tv956[ebp], 187 ; 000000bbH
  019b7	eb 20		 jmp	 SHORT $LN178@draw_tacti
$LN177@draw_tacti:
  019b9	68 06 0a 00 00	 push	 2566			; 00000a06H
  019be	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  019c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  019c9	51		 push	 ecx
  019ca	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  019cf	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv956[ebp], 0
$LN178@draw_tacti:
  019d9	68 bb 00 00 00	 push	 187			; 000000bbH
  019de	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _target$21[ebp]
  019e4	52		 push	 edx
  019e5	69 85 44 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv949[ebp], 1116
  019ef	8b 8d 40 fe ff
	ff		 mov	 ecx, DWORD PTR tv956[ebp]
  019f5	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  019fc	ff d2		 call	 edx
  019fe	39 85 30 ff ff
	ff		 cmp	 DWORD PTR _source_side$[ebp], eax
  01a04	0f 84 de 05 00
	00		 je	 $LN52@draw_tacti

; 2567 : 					{
; 2568 : 						if (get_local_entity_int_value (target, INT_TYPE_RADAR_ON))

  01a0a	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  01a11	74 10		 je	 SHORT $LN179@draw_tacti
  01a13	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  01a19	8b 08		 mov	 ecx, DWORD PTR [eax]
  01a1b	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv968[ebp], ecx
  01a21	eb 20		 jmp	 SHORT $LN180@draw_tacti
$LN179@draw_tacti:
  01a23	68 08 0a 00 00	 push	 2568			; 00000a08H
  01a28	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01a2d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01a33	52		 push	 edx
  01a34	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01a39	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv968[ebp], 0
$LN180@draw_tacti:
  01a43	b8 01 00 00 00	 mov	 eax, 1
  01a48	85 c0		 test	 eax, eax
  01a4a	74 0c		 je	 SHORT $LN181@draw_tacti
  01a4c	c7 85 40 fe ff
	ff a9 00 00 00	 mov	 DWORD PTR tv975[ebp], 169 ; 000000a9H
  01a56	eb 20		 jmp	 SHORT $LN182@draw_tacti
$LN181@draw_tacti:
  01a58	68 08 0a 00 00	 push	 2568			; 00000a08H
  01a5d	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01a62	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01a68	51		 push	 ecx
  01a69	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01a6e	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv975[ebp], 0
$LN182@draw_tacti:
  01a78	68 a9 00 00 00	 push	 169			; 000000a9H
  01a7d	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _target$21[ebp]
  01a83	52		 push	 edx
  01a84	69 85 44 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv968[ebp], 1116
  01a8e	8b 8d 40 fe ff
	ff		 mov	 ecx, DWORD PTR tv975[ebp]
  01a94	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01a9b	ff d2		 call	 edx
  01a9d	85 c0		 test	 eax, eax
  01a9f	0f 84 43 05 00
	00		 je	 $LN52@draw_tacti

; 2569 : 						{
; 2570 : 							threat_type = (threat_types) get_local_entity_int_value (target, INT_TYPE_THREAT_TYPE);

  01aa5	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  01aac	74 10		 je	 SHORT $LN183@draw_tacti
  01aae	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  01ab4	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ab6	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv988[ebp], ecx
  01abc	eb 27		 jmp	 SHORT $LN184@draw_tacti
$LN183@draw_tacti:
  01abe	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  01ac4	81 c2 56 01 00
	00		 add	 edx, 342		; 00000156H
  01aca	52		 push	 edx
  01acb	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01ad0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01ad5	50		 push	 eax
  01ad6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01adb	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv988[ebp], 0
$LN184@draw_tacti:
  01ae5	b9 01 00 00 00	 mov	 ecx, 1
  01aea	85 c9		 test	 ecx, ecx
  01aec	74 0c		 je	 SHORT $LN185@draw_tacti
  01aee	c7 85 40 fe ff
	ff e9 00 00 00	 mov	 DWORD PTR tv996[ebp], 233 ; 000000e9H
  01af8	eb 27		 jmp	 SHORT $LN186@draw_tacti
$LN185@draw_tacti:
  01afa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  01b00	81 c2 56 01 00
	00		 add	 edx, 342		; 00000156H
  01b06	52		 push	 edx
  01b07	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01b0c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01b11	50		 push	 eax
  01b12	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01b17	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv996[ebp], 0
$LN186@draw_tacti:
  01b21	68 e9 00 00 00	 push	 233			; 000000e9H
  01b26	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$21[ebp]
  01b2c	51		 push	 ecx
  01b2d	69 95 44 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv988[ebp], 1116
  01b37	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR tv996[ebp]
  01b3d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  01b44	ff d1		 call	 ecx
  01b46	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _threat_type$18[ebp], eax

; 2571 : 
; 2572 : 							if ((threat_type == THREAT_TYPE_SAM) || (threat_type == THREAT_TYPE_AAA) || (threat_type == THREAT_TYPE_AIRBORNE_RADAR))

  01b4c	83 bd d4 fe ff
	ff 05		 cmp	 DWORD PTR _threat_type$18[ebp], 5
  01b53	74 16		 je	 SHORT $LN48@draw_tacti
  01b55	83 bd d4 fe ff
	ff 06		 cmp	 DWORD PTR _threat_type$18[ebp], 6
  01b5c	74 0d		 je	 SHORT $LN48@draw_tacti
  01b5e	83 bd d4 fe ff
	ff 04		 cmp	 DWORD PTR _threat_type$18[ebp], 4
  01b65	0f 85 7d 04 00
	00		 jne	 $LN52@draw_tacti
$LN48@draw_tacti:

; 2573 : 							{
; 2574 : 								if (get_local_entity_parent (target, LIST_TYPE_TARGET) == source)

  01b6b	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  01b72	74 10		 je	 SHORT $LN187@draw_tacti
  01b74	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  01b7a	8b 08		 mov	 ecx, DWORD PTR [eax]
  01b7c	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv1010[ebp], ecx
  01b82	eb 20		 jmp	 SHORT $LN188@draw_tacti
$LN187@draw_tacti:
  01b84	68 0e 0a 00 00	 push	 2574			; 00000a0eH
  01b89	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01b8e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01b94	52		 push	 edx
  01b95	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01b9a	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1010[ebp], 0
$LN188@draw_tacti:
  01ba4	b8 01 00 00 00	 mov	 eax, 1
  01ba9	85 c0		 test	 eax, eax
  01bab	74 0c		 je	 SHORT $LN189@draw_tacti
  01bad	c7 85 40 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv1017[ebp], 38 ; 00000026H
  01bb7	eb 20		 jmp	 SHORT $LN190@draw_tacti
$LN189@draw_tacti:
  01bb9	68 0e 0a 00 00	 push	 2574			; 00000a0eH
  01bbe	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01bc3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01bc9	51		 push	 ecx
  01bca	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01bcf	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1017[ebp], 0
$LN190@draw_tacti:
  01bd9	6a 26		 push	 38			; 00000026H
  01bdb	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _target$21[ebp]
  01be1	52		 push	 edx
  01be2	69 85 44 fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv1010[ebp], 180
  01bec	8b 8d 40 fe ff
	ff		 mov	 ecx, DWORD PTR tv1017[ebp]
  01bf2	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  01bf9	ff d2		 call	 edx
  01bfb	3b 85 0c ff ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  01c01	0f 85 e1 03 00
	00		 jne	 $LN52@draw_tacti

; 2575 : 								{
; 2576 : 									draw_threat_line = TRUE;

  01c07	c7 85 d0 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _draw_threat_line$17[ebp], 1

; 2577 : 
; 2578 : 									launched_weapon = get_local_entity_first_child (target, LIST_TYPE_LAUNCHED_WEAPON);

  01c11	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  01c18	74 10		 je	 SHORT $LN191@draw_tacti
  01c1a	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  01c20	8b 08		 mov	 ecx, DWORD PTR [eax]
  01c22	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv1030[ebp], ecx
  01c28	eb 27		 jmp	 SHORT $LN192@draw_tacti
$LN191@draw_tacti:
  01c2a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  01c30	81 c2 5e 01 00
	00		 add	 edx, 350		; 0000015eH
  01c36	52		 push	 edx
  01c37	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01c3c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01c41	50		 push	 eax
  01c42	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01c47	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1030[ebp], 0
$LN192@draw_tacti:
  01c51	b9 01 00 00 00	 mov	 ecx, 1
  01c56	85 c9		 test	 ecx, ecx
  01c58	74 0c		 je	 SHORT $LN193@draw_tacti
  01c5a	c7 85 40 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv1038[ebp], 24 ; 00000018H
  01c64	eb 27		 jmp	 SHORT $LN194@draw_tacti
$LN193@draw_tacti:
  01c66	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  01c6c	81 c2 5e 01 00
	00		 add	 edx, 350		; 0000015eH
  01c72	52		 push	 edx
  01c73	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01c78	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01c7d	50		 push	 eax
  01c7e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01c83	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1038[ebp], 0
$LN194@draw_tacti:
  01c8d	6a 18		 push	 24			; 00000018H
  01c8f	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$21[ebp]
  01c95	51		 push	 ecx
  01c96	69 95 44 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv1030[ebp], 180
  01ca0	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR tv1038[ebp]
  01ca6	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_first_child@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01cad	ff d1		 call	 ecx
  01caf	89 85 dc fe ff
	ff		 mov	 DWORD PTR _launched_weapon$20[ebp], eax
$LN12@draw_tacti:

; 2579 : 
; 2580 : 									while (launched_weapon)

  01cb5	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$20[ebp], 0
  01cbc	0f 84 ec 01 00
	00		 je	 $LN13@draw_tacti

; 2581 : 									{
; 2582 : 										if (get_local_entity_int_value (launched_weapon, INT_TYPE_WEAPON_GUIDANCE_TYPE) != WEAPON_GUIDANCE_TYPE_NONE)

  01cc2	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$20[ebp], 0
  01cc9	74 10		 je	 SHORT $LN195@draw_tacti
  01ccb	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$20[ebp]
  01cd1	8b 08		 mov	 ecx, DWORD PTR [eax]
  01cd3	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv1050[ebp], ecx
  01cd9	eb 20		 jmp	 SHORT $LN196@draw_tacti
$LN195@draw_tacti:
  01cdb	68 16 0a 00 00	 push	 2582			; 00000a16H
  01ce0	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01ce5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01ceb	52		 push	 edx
  01cec	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01cf1	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1050[ebp], 0
$LN196@draw_tacti:
  01cfb	b8 01 00 00 00	 mov	 eax, 1
  01d00	85 c0		 test	 eax, eax
  01d02	74 0c		 je	 SHORT $LN197@draw_tacti
  01d04	c7 85 40 fe ff
	ff 07 01 00 00	 mov	 DWORD PTR tv1057[ebp], 263 ; 00000107H
  01d0e	eb 20		 jmp	 SHORT $LN198@draw_tacti
$LN197@draw_tacti:
  01d10	68 16 0a 00 00	 push	 2582			; 00000a16H
  01d15	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01d1a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  01d20	51		 push	 ecx
  01d21	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01d26	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1057[ebp], 0
$LN198@draw_tacti:
  01d30	68 07 01 00 00	 push	 263			; 00000107H
  01d35	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$20[ebp]
  01d3b	52		 push	 edx
  01d3c	69 85 44 fe ff
	ff 5c 04 00 00	 imul	 eax, DWORD PTR tv1050[ebp], 1116
  01d46	8b 8d 40 fe ff
	ff		 mov	 ecx, DWORD PTR tv1057[ebp]
  01d4c	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  01d53	ff d2		 call	 edx
  01d55	85 c0		 test	 eax, eax
  01d57	0f 84 a8 00 00
	00		 je	 $LN51@draw_tacti

; 2583 : 										{
; 2584 : 											if (get_local_entity_parent (launched_weapon, LIST_TYPE_TARGET) == source)

  01d5d	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$20[ebp], 0
  01d64	74 10		 je	 SHORT $LN199@draw_tacti
  01d66	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$20[ebp]
  01d6c	8b 08		 mov	 ecx, DWORD PTR [eax]
  01d6e	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv1069[ebp], ecx
  01d74	eb 20		 jmp	 SHORT $LN200@draw_tacti
$LN199@draw_tacti:
  01d76	68 18 0a 00 00	 push	 2584			; 00000a18H
  01d7b	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01d80	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01d86	52		 push	 edx
  01d87	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01d8c	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1069[ebp], 0
$LN200@draw_tacti:
  01d96	b8 01 00 00 00	 mov	 eax, 1
  01d9b	85 c0		 test	 eax, eax
  01d9d	74 0c		 je	 SHORT $LN201@draw_tacti
  01d9f	c7 85 40 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv1076[ebp], 38 ; 00000026H
  01da9	eb 20		 jmp	 SHORT $LN202@draw_tacti
$LN201@draw_tacti:
  01dab	68 18 0a 00 00	 push	 2584			; 00000a18H
  01db0	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01db5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01dbb	51		 push	 ecx
  01dbc	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01dc1	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1076[ebp], 0
$LN202@draw_tacti:
  01dcb	6a 26		 push	 38			; 00000026H
  01dcd	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _launched_weapon$20[ebp]
  01dd3	52		 push	 edx
  01dd4	69 85 44 fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv1069[ebp], 180
  01dde	8b 8d 40 fe ff
	ff		 mov	 ecx, DWORD PTR tv1076[ebp]
  01de4	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  01deb	ff d2		 call	 edx
  01ded	3b 85 0c ff ff
	ff		 cmp	 eax, DWORD PTR _source$[ebp]
  01df3	75 10		 jne	 SHORT $LN51@draw_tacti

; 2585 : 											{
; 2586 : 												draw_threat_line = tsd_draw_threat_line_status;

  01df5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tsd_draw_threat_line_status@@3HA
  01dfa	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _draw_threat_line$17[ebp], eax

; 2587 : 
; 2588 : 												break;

  01e00	e9 a9 00 00 00	 jmp	 $LN13@draw_tacti
$LN51@draw_tacti:

; 2589 : 											}
; 2590 : 										}
; 2591 : 
; 2592 : 										launched_weapon = get_local_entity_child_succ (launched_weapon, LIST_TYPE_LAUNCHED_WEAPON);

  01e05	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _launched_weapon$20[ebp], 0
  01e0c	74 10		 je	 SHORT $LN203@draw_tacti
  01e0e	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _launched_weapon$20[ebp]
  01e14	8b 08		 mov	 ecx, DWORD PTR [eax]
  01e16	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv1089[ebp], ecx
  01e1c	eb 27		 jmp	 SHORT $LN204@draw_tacti
$LN203@draw_tacti:
  01e1e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  01e24	81 c2 6c 01 00
	00		 add	 edx, 364		; 0000016cH
  01e2a	52		 push	 edx
  01e2b	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01e30	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01e35	50		 push	 eax
  01e36	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01e3b	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1089[ebp], 0
$LN204@draw_tacti:
  01e45	b9 01 00 00 00	 mov	 ecx, 1
  01e4a	85 c9		 test	 ecx, ecx
  01e4c	74 0c		 je	 SHORT $LN205@draw_tacti
  01e4e	c7 85 40 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR tv1097[ebp], 24 ; 00000018H
  01e58	eb 27		 jmp	 SHORT $LN206@draw_tacti
$LN205@draw_tacti:
  01e5a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  01e60	81 c2 6c 01 00
	00		 add	 edx, 364		; 0000016cH
  01e66	52		 push	 edx
  01e67	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01e6c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  01e71	50		 push	 eax
  01e72	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01e77	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1097[ebp], 0
$LN206@draw_tacti:
  01e81	6a 18		 push	 24			; 00000018H
  01e83	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _launched_weapon$20[ebp]
  01e89	51		 push	 ecx
  01e8a	69 95 44 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv1089[ebp], 180
  01e94	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR tv1097[ebp]
  01e9a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  01ea1	ff d1		 call	 ecx
  01ea3	89 85 dc fe ff
	ff		 mov	 DWORD PTR _launched_weapon$20[ebp], eax

; 2593 : 									}

  01ea9	e9 07 fe ff ff	 jmp	 $LN12@draw_tacti
$LN13@draw_tacti:

; 2594 : 
; 2595 : 									if (draw_threat_line)

  01eae	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _draw_threat_line$17[ebp], 0
  01eb5	0f 84 2d 01 00
	00		 je	 $LN52@draw_tacti

; 2596 : 									{
; 2597 : 										target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  01ebb	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  01ec2	74 10		 je	 SHORT $LN207@draw_tacti
  01ec4	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  01eca	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ecc	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv1110[ebp], ecx
  01ed2	eb 27		 jmp	 SHORT $LN208@draw_tacti
$LN207@draw_tacti:
  01ed4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  01eda	81 c2 71 01 00
	00		 add	 edx, 369		; 00000171H
  01ee0	52		 push	 edx
  01ee1	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01ee6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  01eeb	50		 push	 eax
  01eec	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01ef1	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1110[ebp], 0
$LN208@draw_tacti:
  01efb	b9 01 00 00 00	 mov	 ecx, 1
  01f00	85 c9		 test	 ecx, ecx
  01f02	74 0c		 je	 SHORT $LN209@draw_tacti
  01f04	c7 85 40 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv1118[ebp], 8
  01f0e	eb 27		 jmp	 SHORT $LN210@draw_tacti
$LN209@draw_tacti:
  01f10	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  01f16	81 c2 71 01 00
	00		 add	 edx, 369		; 00000171H
  01f1c	52		 push	 edx
  01f1d	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  01f22	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  01f27	50		 push	 eax
  01f28	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  01f2d	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1118[ebp], 0
$LN210@draw_tacti:
  01f37	6a 08		 push	 8
  01f39	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$21[ebp]
  01f3f	51		 push	 ecx
  01f40	6b 95 44 fe ff
	ff 60		 imul	 edx, DWORD PTR tv1110[ebp], 96
  01f47	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR tv1118[ebp]
  01f4d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  01f54	ff d1		 call	 ecx
  01f56	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _target_position$19[ebp], eax

; 2598 : 
; 2599 : 										dx = (target_position->x - source_position->x) * scale;

  01f5c	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _target_position$19[ebp]
  01f62	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01f68	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01f6c	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  01f70	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01f78	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR _dx$15[ebp], xmm0

; 2600 : 										dy = (target_position->z - source_position->z) * scale;

  01f80	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _target_position$19[ebp]
  01f86	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  01f8c	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01f91	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  01f96	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  01f9e	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR _dy$14[ebp], xmm0

; 2601 : 
; 2602 : 										draw_2d_line (0.0, 0.0, dx, dy, MFD_COLOUR1);

  01fa6	b8 04 00 00 00	 mov	 eax, 4
  01fab	6b c8 00	 imul	 ecx, eax, 0
  01fae	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01fb4	52		 push	 edx
  01fb5	51		 push	 ecx
  01fb6	f3 0f 10 85 c4
	fe ff ff	 movss	 xmm0, DWORD PTR _dy$14[ebp]
  01fbe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fc3	51		 push	 ecx
  01fc4	f3 0f 10 85 c8
	fe ff ff	 movss	 xmm0, DWORD PTR _dx$15[ebp]
  01fcc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fd1	51		 push	 ecx
  01fd2	0f 57 c0	 xorps	 xmm0, xmm0
  01fd5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fda	51		 push	 ecx
  01fdb	0f 57 c0	 xorps	 xmm0, xmm0
  01fde	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01fe3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN52@draw_tacti:

; 2603 : 									}
; 2604 : 								}
; 2605 : 							}
; 2606 : 						}
; 2607 : 					}
; 2608 : 				}
; 2609 : 
; 2610 : 				target = get_local_entity_child_succ (target, LIST_TYPE_GUNSHIP_TARGET);

  01fe8	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _target$21[ebp], 0
  01fef	74 10		 je	 SHORT $LN211@draw_tacti
  01ff1	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _target$21[ebp]
  01ff7	8b 08		 mov	 ecx, DWORD PTR [eax]
  01ff9	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv1145[ebp], ecx
  01fff	eb 27		 jmp	 SHORT $LN212@draw_tacti
$LN211@draw_tacti:
  02001	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  02007	81 c2 7e 01 00
	00		 add	 edx, 382		; 0000017eH
  0200d	52		 push	 edx
  0200e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  02013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  02018	50		 push	 eax
  02019	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0201e	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1145[ebp], 0
$LN212@draw_tacti:
  02028	b9 01 00 00 00	 mov	 ecx, 1
  0202d	85 c9		 test	 ecx, ecx
  0202f	74 0c		 je	 SHORT $LN213@draw_tacti
  02031	c7 85 40 fe ff
	ff 12 00 00 00	 mov	 DWORD PTR tv1153[ebp], 18 ; 00000012H
  0203b	eb 27		 jmp	 SHORT $LN214@draw_tacti
$LN213@draw_tacti:
  0203d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  02043	81 c2 7e 01 00
	00		 add	 edx, 382		; 0000017eH
  02049	52		 push	 edx
  0204a	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0204f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  02054	50		 push	 eax
  02055	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0205a	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1153[ebp], 0
$LN214@draw_tacti:
  02064	6a 12		 push	 18			; 00000012H
  02066	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _target$21[ebp]
  0206c	51		 push	 ecx
  0206d	69 95 44 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv1145[ebp], 180
  02077	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR tv1153[ebp]
  0207d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_child_succ@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  02084	ff d1		 call	 ecx
  02086	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _target$21[ebp], eax

; 2611 : 			}

  0208c	e9 35 f8 ff ff	 jmp	 $LN10@draw_tacti
$LN11@draw_tacti:

; 2612 : 
; 2613 : 			set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  02091	51		 push	 ecx
  02092	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0209a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0209f	51		 push	 ecx
  020a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  020a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020ad	51		 push	 ecx
  020ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  020b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020bb	51		 push	 ecx
  020bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  020c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  020ce	50		 push	 eax
  020cf	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 2614 : 
; 2615 : 			set_2d_window_rotation (mfd_env, 0.0);

  020d4	51		 push	 ecx
  020d5	0f 57 c0	 xorps	 xmm0, xmm0
  020d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  020e2	50		 push	 eax
  020e3	e8 00 00 00 00	 call	 ?set_2d_window_rotation@@YGXPAUENV_2D@@M@Z ; set_2d_window_rotation
$LN32@draw_tacti:

; 2616 : 		}
; 2617 : 	}
; 2618 : 
; 2619 : 	draw_2d_box(-1.0, 1.0, 1.0, 0.87, TRUE, FALSE, MFD_BACKGROUND_COLOUR);

  020e8	b8 04 00 00 00	 mov	 eax, 4
  020ed	6b c8 09	 imul	 ecx, eax, 9
  020f0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  020f6	52		 push	 edx
  020f7	6a 00		 push	 0
  020f9	6a 01		 push	 1
  020fb	51		 push	 ecx
  020fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f5eb852
  02104	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02109	51		 push	 ecx
  0210a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02112	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02117	51		 push	 ecx
  02118	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02120	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02125	51		 push	 ecx
  02126	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0212e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02133	e8 00 00 00 00	 call	 ?draw_2d_box@@YGXMMMMHHUREAL_COLOUR@@@Z ; draw_2d_box

; 2620 : 	draw_2d_box(-1.0, -1.0, 1.0, y_origin, TRUE, FALSE, MFD_BACKGROUND_COLOUR);

  02138	b8 04 00 00 00	 mov	 eax, 4
  0213d	6b c8 09	 imul	 ecx, eax, 9
  02140	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02146	52		 push	 edx
  02147	6a 00		 push	 0
  02149	6a 01		 push	 1
  0214b	51		 push	 ecx
  0214c	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _y_origin$[ebp]
  02154	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02159	51		 push	 ecx
  0215a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02162	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02167	51		 push	 ecx
  02168	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02170	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02175	51		 push	 ecx
  02176	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0217e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02183	e8 00 00 00 00	 call	 ?draw_2d_box@@YGXMMMMHHUREAL_COLOUR@@@Z ; draw_2d_box

; 2621 : 
; 2622 : 	////////////////////////////////////////
; 2623 : 	//
; 2624 : 	// text
; 2625 : 	//
; 2626 : 	////////////////////////////////////////
; 2627 : 
; 2628 : 	set_mono_font_colour (MFD_COLOUR_GREEN);

  02188	b8 04 00 00 00	 mov	 eax, 4
  0218d	6b c8 0d	 imul	 ecx, eax, 13
  02190	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  02196	52		 push	 edx
  02197	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 2629 : 
; 2630 : 	if (draw_large_mfd)

  0219c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  021a3	74 09		 je	 SHORT $LN53@draw_tacti

; 2631 : 	{
; 2632 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  021a5	6a 05		 push	 5
  021a7	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 2633 : 	}
; 2634 : 	else

  021ac	eb 07		 jmp	 SHORT $LN54@draw_tacti
$LN53@draw_tacti:

; 2635 : 	{
; 2636 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  021ae	6a 01		 push	 1
  021b0	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN54@draw_tacti:

; 2637 : 	}
; 2638 : 
; 2639 : 
; 2640 : 	//
; 2641 : 	// TSD range
; 2642 : 	//
; 2643 : 
; 2644 : 	if (tsd_ase_range == TSD_ASE_RANGE_2000)

  021b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  021bd	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  021c4	9f		 lahf
  021c5	f6 c4 44	 test	 ah, 68			; 00000044H
  021c8	7a 09		 jp	 SHORT $LN55@draw_tacti

; 2645 : 	{
; 2646 : 		s = "2.5KM";

  021ca	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_05IHJDDCGF@2?45KM@
  021d1	eb 61		 jmp	 SHORT $LN62@draw_tacti
$LN55@draw_tacti:

; 2647 : 	}
; 2648 : 	else if (tsd_ase_range == TSD_ASE_RANGE_5000)

  021d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  021db	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  021e2	9f		 lahf
  021e3	f6 c4 44	 test	 ah, 68			; 00000044H
  021e6	7a 09		 jp	 SHORT $LN57@draw_tacti

; 2649 : 	{
; 2650 : 		s = "5KM";

  021e8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03CAFGHLBJ@5KM@
  021ef	eb 43		 jmp	 SHORT $LN62@draw_tacti
$LN57@draw_tacti:

; 2651 : 	}
; 2652 : 	else if (tsd_ase_range == TSD_ASE_RANGE_10000)

  021f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  021f9	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  02200	9f		 lahf
  02201	f6 c4 44	 test	 ah, 68			; 00000044H
  02204	7a 09		 jp	 SHORT $LN59@draw_tacti

; 2653 : 	{
; 2654 : 		s = "10KM";

  02206	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04GMKPDCBM@10KM@
  0220d	eb 25		 jmp	 SHORT $LN62@draw_tacti
$LN59@draw_tacti:

; 2655 : 	}
; 2656 : 	else if (tsd_ase_range == TSD_ASE_RANGE_25000)

  0220f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  02217	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  0221e	9f		 lahf
  0221f	f6 c4 44	 test	 ah, 68			; 00000044H
  02222	7a 09		 jp	 SHORT $LN61@draw_tacti

; 2657 : 	{
; 2658 : 		s = "25KM";

  02224	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_04BMNBLIPO@25KM@

; 2659 : 	}
; 2660 : 	else

  0222b	eb 07		 jmp	 SHORT $LN62@draw_tacti
$LN61@draw_tacti:

; 2661 : 	{
; 2662 : 		s = "XXX";

  0222d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN62@draw_tacti:

; 2663 : 	}
; 2664 : 
; 2665 : 	width = get_mono_font_string_width (s);

  02234	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  02237	50		 push	 eax
  02238	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  0223d	d9 9d 18 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 2666 : 
; 2667 : 	if (draw_large_mfd)

  02243	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0224a	74 2e		 je	 SHORT $LN63@draw_tacti

; 2668 : 	{
; 2669 : 		width += 2.0;

  0224c	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  02254	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0225c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02260	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 2670 : 
; 2671 : 		y_adjust = 5.0;

  02268	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  02270	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2672 : 	}
; 2673 : 	else

  02278	eb 2c		 jmp	 SHORT $LN64@draw_tacti
$LN63@draw_tacti:

; 2674 : 	{
; 2675 : 		width += 1.0;

  0227a	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  02282	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0228a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0228e	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 2676 : 
; 2677 : 		y_adjust = 2.0;

  02296	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0229e	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN64@draw_tacti:

; 2678 : 	}
; 2679 : 
; 2680 : 	set_2d_mono_font_position (1.0, 1.0);

  022a6	51		 push	 ecx
  022a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  022af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022b4	51		 push	 ecx
  022b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  022bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022c2	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2681 : 
; 2682 : 	set_mono_font_rel_position (-width, y_adjust);

  022c7	51		 push	 ecx
  022c8	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  022d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022d5	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  022dd	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  022e4	51		 push	 ecx
  022e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022ea	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2683 : 
; 2684 : 	print_mono_font_string (s);

  022ef	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  022f2	50		 push	 eax
  022f3	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2685 : 
; 2686 : 	//
; 2687 : 	// TSD declutter level
; 2688 : 	//
; 2689 : 
; 2690 : 	if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_ALL)

  022f8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0
  022ff	75 09		 jne	 SHORT $LN65@draw_tacti

; 2691 : 	{
; 2692 : 		s = "COMBINED";

  02301	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_08KFHEGLBA@COMBINED@
  02308	eb 2b		 jmp	 SHORT $LN70@draw_tacti
$LN65@draw_tacti:

; 2693 : 	}
; 2694 : 	else if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  0230a	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  02311	75 09		 jne	 SHORT $LN67@draw_tacti

; 2695 : 	{
; 2696 : 		s = "TARGETING";

  02313	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_09ECOKIFNI@TARGETING@
  0231a	eb 19		 jmp	 SHORT $LN70@draw_tacti
$LN67@draw_tacti:

; 2697 : 	}
; 2698 : 	else if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_NAVIGATION)

  0231c	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
  02323	75 09		 jne	 SHORT $LN69@draw_tacti

; 2699 : 	{
; 2700 : 		s = "NAVIGATION";

  02325	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_0L@CNLPLFKK@NAVIGATION@

; 2701 : 	}
; 2702 : 	else

  0232c	eb 07		 jmp	 SHORT $LN70@draw_tacti
$LN69@draw_tacti:

; 2703 : 	{
; 2704 : 		s = "XXX";

  0232e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN70@draw_tacti:

; 2705 : 	}
; 2706 : 
; 2707 : 	if (draw_large_mfd)

  02335	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0233c	74 2e		 je	 SHORT $LN71@draw_tacti

; 2708 : 	{
; 2709 : 		width += 2.0;

  0233e	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  02346	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  0234e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02352	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 2710 : 
; 2711 : 		y_adjust = 5.0;

  0235a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  02362	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2712 : 	}
; 2713 : 	else

  0236a	eb 2c		 jmp	 SHORT $LN72@draw_tacti
$LN71@draw_tacti:

; 2714 : 	{
; 2715 : 		width += 1.0;

  0236c	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  02374	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0237c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02380	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 2716 : 
; 2717 : 		y_adjust = 5.0;

  02388	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  02390	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN72@draw_tacti:

; 2718 : 	}
; 2719 : 
; 2720 : 	set_2d_mono_font_position (-0.95, 1.0);

  02398	51		 push	 ecx
  02399	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  023a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023a6	51		 push	 ecx
  023a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf733333
  023af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023b4	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2721 : 
; 2722 : 	set_mono_font_rel_position (2.0, y_adjust);

  023b9	51		 push	 ecx
  023ba	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  023c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023c7	51		 push	 ecx
  023c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  023d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023d5	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2723 : 
; 2724 : 	print_mono_font_string (s);

  023da	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  023dd	50		 push	 eax
  023de	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2725 : 	//
; 2726 : 	// sensor type
; 2727 : 	//
; 2728 : 
; 2729 : 	set_mono_font_colour (MFD_COLOUR3);

  023e3	b8 04 00 00 00	 mov	 eax, 4
  023e8	d1 e0		 shl	 eax, 1
  023ea	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  023f0	51		 push	 ecx
  023f1	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 2730 : 	set_mono_font_type(MONO_FONT_TYPE_5X9);

  023f6	6a 02		 push	 2
  023f8	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 2731 : 
; 2732 : //	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_NAVIGATION)
; 2733 : 	{
; 2734 : 		switch (target_acquisition_system)

  023fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?target_acquisition_system@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; target_acquisition_system
  02402	89 85 44 fe ff
	ff		 mov	 DWORD PTR tv1260[ebp], eax
  02408	83 bd 44 fe ff
	ff 00		 cmp	 DWORD PTR tv1260[ebp], 0
  0240f	74 14		 je	 SHORT $LN73@draw_tacti
  02411	83 bd 44 fe ff
	ff 03		 cmp	 DWORD PTR tv1260[ebp], 3
  02418	74 14		 je	 SHORT $LN74@draw_tacti
  0241a	83 bd 44 fe ff
	ff 0a		 cmp	 DWORD PTR tv1260[ebp], 10 ; 0000000aH
  02421	74 14		 je	 SHORT $LN75@draw_tacti
  02423	eb 1b		 jmp	 SHORT $LN76@draw_tacti
$LN73@draw_tacti:

; 2735 : 		{
; 2736 : 			case TARGET_ACQUISITION_SYSTEM_OFF:
; 2737 : 			{
; 2738 : 				s = "NO ACQ";

  02425	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_06LLLMNJMM@NO?5ACQ@

; 2739 : 
; 2740 : 				break;

  0242c	eb 19		 jmp	 SHORT $LN14@draw_tacti
$LN74@draw_tacti:

; 2741 : 			}
; 2742 : 			case TARGET_ACQUISITION_SYSTEM_FLIR:
; 2743 : 			{
; 2744 : 				s = "EOS FLIR";

  0242e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_08JJGIEILB@EOS?5FLIR@

; 2745 : 
; 2746 : 				break;

  02435	eb 10		 jmp	 SHORT $LN14@draw_tacti
$LN75@draw_tacti:

; 2747 : 			}
; 2748 : 			case TARGET_ACQUISITION_SYSTEM_HMS:
; 2749 : 			{
; 2750 : 				s = "HMS";

  02437	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03GJMPEADF@HMS@

; 2751 : 
; 2752 : 				break;

  0243e	eb 07		 jmp	 SHORT $LN14@draw_tacti
$LN76@draw_tacti:

; 2753 : 			}
; 2754 : 			default:
; 2755 : 			{
; 2756 : 				s = "XXX";

  02440	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _s$[ebp], OFFSET ??_C@_03MAMPKPPK@XXX@
$LN14@draw_tacti:

; 2757 : 
; 2758 : 				break;
; 2759 : 			}
; 2760 : 		}
; 2761 : 
; 2762 : 		if (draw_large_mfd)

  02447	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0244e	74 12		 je	 SHORT $LN77@draw_tacti

; 2763 : 		{
; 2764 : 			y_adjust = 5.0;

  02450	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  02458	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2765 : 		}
; 2766 : 		else

  02460	eb 10		 jmp	 SHORT $LN78@draw_tacti
$LN77@draw_tacti:

; 2767 : 		{
; 2768 : 			y_adjust = 2.0;

  02462	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0246a	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN78@draw_tacti:

; 2769 : 		}
; 2770 : 
; 2771 : 		set_2d_mono_font_position (0.5, -0.65);

  02472	51		 push	 ecx
  02473	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  0247b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02480	51		 push	 ecx
  02481	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  02489	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0248e	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2772 : 
; 2773 : 		set_mono_font_rel_position (1.0, y_adjust);

  02493	51		 push	 ecx
  02494	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0249c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024a1	51		 push	 ecx
  024a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  024aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024af	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2774 : 
; 2775 : 		print_mono_font_string (s);

  024b4	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  024b7	50		 push	 eax
  024b8	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2776 : 	}
; 2777 : 
; 2778 : 
; 2779 : 	//
; 2780 : 	// target range
; 2781 : 	//
; 2782 : 
; 2783 : 	{
; 2784 : 		float
; 2785 : 			target_range = get_range_to_target();

  024bd	e8 00 00 00 00	 call	 ?get_range_to_target@@YGMXZ ; get_range_to_target
  024c2	d9 9d c0 fe ff
	ff		 fstp	 DWORD PTR _target_range$13[ebp]

; 2786 : 
; 2787 : 		if (target_range > 0.0)

  024c8	f3 0f 5a 85 c0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$13[ebp]
  024d0	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  024d8	0f 86 ce 00 00
	00		 jbe	 $LN79@draw_tacti

; 2788 : 		{
; 2789 : 			sprintf (buffer, "%   4d M", (int) target_range);

  024de	f3 0f 2c 85 c0
	fe ff ff	 cvttss2si eax, DWORD PTR _target_range$13[ebp]
  024e6	50		 push	 eax
  024e7	68 00 00 00 00	 push	 OFFSET ??_C@_08HNIIHLPL@?$CF?5?5?54d?5M@
  024ec	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  024f2	51		 push	 ecx
  024f3	e8 00 00 00 00	 call	 _sprintf
  024f8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2790 : 
; 2791 : 			if (draw_large_mfd)

  024fb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02502	74 2e		 je	 SHORT $LN80@draw_tacti

; 2792 : 			{
; 2793 : 				width += 2.0;

  02504	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  0250c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  02514	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02518	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 2794 : 
; 2795 : 				y_adjust = 5.0;

  02520	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  02528	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2796 : 			}
; 2797 : 			else

  02530	eb 2c		 jmp	 SHORT $LN81@draw_tacti
$LN80@draw_tacti:

; 2798 : 			{
; 2799 : 				width += 1.0;

  02532	f3 0f 5a 85 18
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  0253a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  02542	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02546	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 2800 : 
; 2801 : 				y_adjust = 2.0;

  0254e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  02556	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN81@draw_tacti:

; 2802 : 			}
; 2803 : 
; 2804 : 			set_2d_mono_font_position (0.5, -0.75);

  0255e	51		 push	 ecx
  0255f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  02567	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0256c	51		 push	 ecx
  0256d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  02575	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0257a	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2805 : 
; 2806 : 			set_mono_font_rel_position (1.0, y_adjust);

  0257f	51		 push	 ecx
  02580	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02588	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0258d	51		 push	 ecx
  0258e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02596	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0259b	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2807 : 
; 2808 : 			print_mono_font_string (buffer);

  025a0	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  025a6	50		 push	 eax
  025a7	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN79@draw_tacti:

; 2809 : 		}
; 2810 : 	}
; 2811 : 
; 2812 : 	//
; 2813 : 	// waypoint information
; 2814 : 	//
; 2815 : 
; 2816 : //	if (tsd_declutter_level != TSD_DECLUTTER_LEVEL_TARGET)
; 2817 : 	if (!ka50_damage.navigation_computer)

  025ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  025b1	c1 e8 04	 shr	 eax, 4
  025b4	83 e0 01	 and	 eax, 1
  025b7	0f 85 d9 05 00
	00		 jne	 $LN83@draw_tacti

; 2818 : 	{
; 2819 : 		entity
; 2820 : 			*wp;
; 2821 : 
; 2822 : 		vec3d
; 2823 : 			waypoint_position;
; 2824 : 
; 2825 : 		float
; 2826 : 			waypoint_range;
; 2827 : 
; 2828 : 		// sector:
; 2829 : 		{
; 2830 : 			int sz, sx;
; 2831 : 			entity* sec = get_local_sector_entity(source_position);

  025bd	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source_position$[ebp]
  025c3	50		 push	 eax
  025c4	e8 00 00 00 00	 call	 ?get_local_sector_entity@@YGPAUENTITY@@PAUVEC3D@@@Z ; get_local_sector_entity
  025c9	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _sec$7[ebp], eax

; 2832 : 
; 2833 : 			sx = get_local_entity_int_value(sec, INT_TYPE_X_SECTOR);

  025cf	83 bd a0 fe ff
	ff 00		 cmp	 DWORD PTR _sec$7[ebp], 0
  025d6	74 10		 je	 SHORT $LN215@draw_tacti
  025d8	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _sec$7[ebp]
  025de	8b 08		 mov	 ecx, DWORD PTR [eax]
  025e0	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv1300[ebp], ecx
  025e6	eb 27		 jmp	 SHORT $LN216@draw_tacti
$LN215@draw_tacti:
  025e8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  025ee	81 c2 5d 02 00
	00		 add	 edx, 605		; 0000025dH
  025f4	52		 push	 edx
  025f5	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  025fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  025ff	50		 push	 eax
  02600	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02605	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1300[ebp], 0
$LN216@draw_tacti:
  0260f	b9 01 00 00 00	 mov	 ecx, 1
  02614	85 c9		 test	 ecx, ecx
  02616	74 0c		 je	 SHORT $LN217@draw_tacti
  02618	c7 85 40 fe ff
	ff 15 01 00 00	 mov	 DWORD PTR tv1308[ebp], 277 ; 00000115H
  02622	eb 27		 jmp	 SHORT $LN218@draw_tacti
$LN217@draw_tacti:
  02624	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  0262a	81 c2 5d 02 00
	00		 add	 edx, 605		; 0000025dH
  02630	52		 push	 edx
  02631	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  02636	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0263b	50		 push	 eax
  0263c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02641	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1308[ebp], 0
$LN218@draw_tacti:
  0264b	68 15 01 00 00	 push	 277			; 00000115H
  02650	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _sec$7[ebp]
  02656	51		 push	 ecx
  02657	69 95 44 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv1300[ebp], 1116
  02661	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR tv1308[ebp]
  02667	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  0266e	ff d1		 call	 ecx
  02670	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _sx$8[ebp], eax

; 2834 : 			sz = get_local_entity_int_value(sec, INT_TYPE_Z_SECTOR);

  02676	83 bd a0 fe ff
	ff 00		 cmp	 DWORD PTR _sec$7[ebp], 0
  0267d	74 10		 je	 SHORT $LN219@draw_tacti
  0267f	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _sec$7[ebp]
  02685	8b 08		 mov	 ecx, DWORD PTR [eax]
  02687	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv1320[ebp], ecx
  0268d	eb 27		 jmp	 SHORT $LN220@draw_tacti
$LN219@draw_tacti:
  0268f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  02695	81 c2 5e 02 00
	00		 add	 edx, 606		; 0000025eH
  0269b	52		 push	 edx
  0269c	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  026a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  026a6	50		 push	 eax
  026a7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  026ac	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1320[ebp], 0
$LN220@draw_tacti:
  026b6	b9 01 00 00 00	 mov	 ecx, 1
  026bb	85 c9		 test	 ecx, ecx
  026bd	74 0c		 je	 SHORT $LN221@draw_tacti
  026bf	c7 85 40 fe ff
	ff 16 01 00 00	 mov	 DWORD PTR tv1328[ebp], 278 ; 00000116H
  026c9	eb 27		 jmp	 SHORT $LN222@draw_tacti
$LN221@draw_tacti:
  026cb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  026d1	81 c2 5e 02 00
	00		 add	 edx, 606		; 0000025eH
  026d7	52		 push	 edx
  026d8	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  026dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  026e2	50		 push	 eax
  026e3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  026e8	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1328[ebp], 0
$LN222@draw_tacti:
  026f2	68 16 01 00 00	 push	 278			; 00000116H
  026f7	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _sec$7[ebp]
  026fd	51		 push	 ecx
  026fe	69 95 44 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv1320[ebp], 1116
  02708	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR tv1328[ebp]
  0270e	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  02715	ff d1		 call	 ecx
  02717	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _sz$9[ebp], eax

; 2835 : 
; 2836 : 			sprintf(buffer, "SECTOR: %d,%d", sx, sz);

  0271d	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _sz$9[ebp]
  02723	50		 push	 eax
  02724	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _sx$8[ebp]
  0272a	51		 push	 ecx
  0272b	68 00 00 00 00	 push	 OFFSET ??_C@_0O@FMJDLNLC@SECTOR?3?5?$CFd?0?$CFd@
  02730	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _buffer$[ebp]
  02736	52		 push	 edx
  02737	e8 00 00 00 00	 call	 _sprintf
  0273c	83 c4 10	 add	 esp, 16			; 00000010H

; 2837 : 			set_2d_mono_font_position (-1.0, -0.65);

  0273f	51		 push	 ecx
  02740	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  02748	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0274d	51		 push	 ecx
  0274e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02756	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0275b	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2838 : 			set_mono_font_rel_position (5.0, 5.0);

  02760	51		 push	 ecx
  02761	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  02769	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0276e	51		 push	 ecx
  0276f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  02777	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0277c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2839 : 			print_mono_font_string (buffer);

  02781	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02787	50		 push	 eax
  02788	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2840 : 		}
; 2841 : 
; 2842 : 		wp = get_local_entity_current_waypoint (source);

  0278d	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  02793	50		 push	 eax
  02794	e8 00 00 00 00	 call	 ?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_current_waypoint
  02799	89 85 bc fe ff
	ff		 mov	 DWORD PTR _wp$12[ebp], eax

; 2843 : 
; 2844 : 		if (wp)

  0279f	83 bd bc fe ff
	ff 00		 cmp	 DWORD PTR _wp$12[ebp], 0
  027a6	0f 84 ea 03 00
	00		 je	 $LN83@draw_tacti

; 2845 : 		{
; 2846 : 			get_waypoint_display_position (source, wp, &waypoint_position);

  027ac	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _waypoint_position$11[ebp]
  027b2	50		 push	 eax
  027b3	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR _wp$12[ebp]
  027b9	51		 push	 ecx
  027ba	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _source$[ebp]
  027c0	52		 push	 edx
  027c1	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 2847 : 
; 2848 : 			//
; 2849 : 			// waypoint id & range
; 2850 : 			//
; 2851 : 
; 2852 : 			waypoint_range = get_2d_range (source_position, &waypoint_position);

  027c6	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _waypoint_position$11[ebp]
  027cc	50		 push	 eax
  027cd	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _source_position$[ebp]
  027d3	51		 push	 ecx
  027d4	e8 00 00 00 00	 call	 ?get_2d_range@@YGMPBUVEC3D@@0@Z ; get_2d_range
  027d9	d9 9d ac fe ff
	ff		 fstp	 DWORD PTR _waypoint_range$10[ebp]

; 2853 : 
; 2854 : 			if (!ka50_damage.navigation_computer)

  027df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  027e4	c1 e8 04	 shr	 eax, 4
  027e7	83 e0 01	 and	 eax, 1
  027ea	0f 85 ee 01 00
	00		 jne	 $LN84@draw_tacti

; 2855 : 			{
; 2856 : 				if (waypoint_range < 100000.0)

  027f0	f3 0f 5a 85 ac
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _waypoint_range$10[ebp]
  027f8	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40f86a0000000000
  02800	66 0f 2f c8	 comisd	 xmm1, xmm0
  02804	0f 86 08 01 00
	00		 jbe	 $LN86@draw_tacti

; 2857 : 				{
; 2858 : 					int
; 2859 : 						i;
; 2860 : 
; 2861 : 					float
; 2862 : 						f;
; 2863 : 
; 2864 : 					//
; 2865 : 					// this is required to prevent rounding errors around the 100Km mark
; 2866 : 					//
; 2867 : 
; 2868 : 					i = (int) waypoint_range * (1.0 / 100.0);

  0280a	f3 0f 2c 85 ac
	fe ff ff	 cvttss2si eax, DWORD PTR _waypoint_range$10[ebp]
  02812	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  02816	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f847ae147ae147b
  0281e	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  02822	89 8d 9c fe ff
	ff		 mov	 DWORD PTR _i$6[ebp], ecx

; 2869 : 
; 2870 : 					f = (float) i * (1.0 / 10.0);

  02828	f3 0f 2a 85 9c
	fe ff ff	 cvtsi2ss xmm0, DWORD PTR _i$6[ebp]
  02830	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  02834	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  0283c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  02840	f3 0f 11 85 98
	fe ff ff	 movss	 DWORD PTR _f$5[ebp], xmm0

; 2871 : 
; 2872 : 					sprintf (buffer, "%c: %.1f KM", get_local_entity_char_value (wp, CHAR_TYPE_TAG), f);

  02848	83 bd bc fe ff
	ff 00		 cmp	 DWORD PTR _wp$12[ebp], 0
  0284f	74 10		 je	 SHORT $LN223@draw_tacti
  02851	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _wp$12[ebp]
  02857	8b 08		 mov	 ecx, DWORD PTR [eax]
  02859	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv1374[ebp], ecx
  0285f	eb 27		 jmp	 SHORT $LN224@draw_tacti
$LN223@draw_tacti:
  02861	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  02867	81 c2 84 02 00
	00		 add	 edx, 644		; 00000284H
  0286d	52		 push	 edx
  0286e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  02873	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  02878	50		 push	 eax
  02879	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0287e	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1374[ebp], 0
$LN224@draw_tacti:
  02888	b9 01 00 00 00	 mov	 ecx, 1
  0288d	85 c9		 test	 ecx, ecx
  0288f	74 0c		 je	 SHORT $LN225@draw_tacti
  02891	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1382[ebp], 0
  0289b	eb 27		 jmp	 SHORT $LN226@draw_tacti
$LN225@draw_tacti:
  0289d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  028a3	81 c2 84 02 00
	00		 add	 edx, 644		; 00000284H
  028a9	52		 push	 edx
  028aa	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  028af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  028b4	50		 push	 eax
  028b5	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  028ba	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1382[ebp], 0
$LN226@draw_tacti:
  028c4	f3 0f 5a 85 98
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _f$5[ebp]
  028cc	83 ec 08	 sub	 esp, 8
  028cf	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  028d4	6a 00		 push	 0
  028d6	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR _wp$12[ebp]
  028dc	51		 push	 ecx
  028dd	8b 95 40 fe ff
	ff		 mov	 edx, DWORD PTR tv1382[ebp]
  028e3	c1 e2 02	 shl	 edx, 2
  028e6	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR tv1374[ebp]
  028ec	8b 8c c2 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[edx+eax*8]
  028f3	ff d1		 call	 ecx
  028f5	0f b6 d0	 movzx	 edx, al
  028f8	52		 push	 edx
  028f9	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FOMEHBFC@?$CFc?3?5?$CF?41f?5KM@
  028fe	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02904	50		 push	 eax
  02905	e8 00 00 00 00	 call	 _sprintf
  0290a	83 c4 14	 add	 esp, 20			; 00000014H

; 2873 : 				}
; 2874 : 				else

  0290d	e9 ca 00 00 00	 jmp	 $LN87@draw_tacti
$LN86@draw_tacti:

; 2875 : 				{
; 2876 : 					sprintf (buffer, "%c: %d KM", get_local_entity_char_value (wp, CHAR_TYPE_TAG), (int) (waypoint_range * (1.0 / 1000.0)));

  02912	83 bd bc fe ff
	ff 00		 cmp	 DWORD PTR _wp$12[ebp], 0
  02919	74 10		 je	 SHORT $LN227@draw_tacti
  0291b	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _wp$12[ebp]
  02921	8b 08		 mov	 ecx, DWORD PTR [eax]
  02923	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv1403[ebp], ecx
  02929	eb 27		 jmp	 SHORT $LN228@draw_tacti
$LN227@draw_tacti:
  0292b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  02931	81 c2 88 02 00
	00		 add	 edx, 648		; 00000288H
  02937	52		 push	 edx
  02938	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0293d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  02942	50		 push	 eax
  02943	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02948	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1403[ebp], 0
$LN228@draw_tacti:
  02952	b9 01 00 00 00	 mov	 ecx, 1
  02957	85 c9		 test	 ecx, ecx
  02959	74 0c		 je	 SHORT $LN229@draw_tacti
  0295b	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1411[ebp], 0
  02965	eb 27		 jmp	 SHORT $LN230@draw_tacti
$LN229@draw_tacti:
  02967	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  0296d	81 c2 88 02 00
	00		 add	 edx, 648		; 00000288H
  02973	52		 push	 edx
  02974	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  02979	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_char_type_message@@3PBDB ; overload_invalid_char_type_message
  0297e	50		 push	 eax
  0297f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  02984	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1411[ebp], 0
$LN230@draw_tacti:
  0298e	f3 0f 5a 85 ac
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _waypoint_range$10[ebp]
  02996	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0299e	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  029a2	51		 push	 ecx
  029a3	6a 00		 push	 0
  029a5	8b 95 bc fe ff
	ff		 mov	 edx, DWORD PTR _wp$12[ebp]
  029ab	52		 push	 edx
  029ac	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR tv1411[ebp]
  029b2	c1 e0 02	 shl	 eax, 2
  029b5	8b 8d 44 fe ff
	ff		 mov	 ecx, DWORD PTR tv1403[ebp]
  029bb	8b 94 c8 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_char_value@@3PAY01P6GDPAUENTITY@@W4CHAR_TYPES@@@ZA[eax+ecx*8]
  029c2	ff d2		 call	 edx
  029c4	0f b6 c0	 movzx	 eax, al
  029c7	50		 push	 eax
  029c8	68 00 00 00 00	 push	 OFFSET ??_C@_09KJKGCNAK@?$CFc?3?5?$CFd?5KM@
  029cd	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  029d3	51		 push	 ecx
  029d4	e8 00 00 00 00	 call	 _sprintf
  029d9	83 c4 10	 add	 esp, 16			; 00000010H
$LN87@draw_tacti:

; 2877 : 				}
; 2878 : 			}
; 2879 : 			else

  029dc	eb 14		 jmp	 SHORT $LN85@draw_tacti
$LN84@draw_tacti:

; 2880 : 			{
; 2881 : 				sprintf (buffer, "-:--.-");

  029de	68 00 00 00 00	 push	 OFFSET ??_C@_06BAOIPBEF@?9?3?9?9?4?9@
  029e3	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  029e9	50		 push	 eax
  029ea	e8 00 00 00 00	 call	 _sprintf
  029ef	83 c4 08	 add	 esp, 8
$LN85@draw_tacti:

; 2882 : 			}
; 2883 : 
; 2884 : 			if (draw_large_mfd)

  029f2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  029f9	74 12		 je	 SHORT $LN88@draw_tacti

; 2885 : 			{
; 2886 : 				y_adjust = 5.0;

  029fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  02a03	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2887 : 			}
; 2888 : 			else

  02a0b	eb 10		 jmp	 SHORT $LN89@draw_tacti
$LN88@draw_tacti:

; 2889 : 			{
; 2890 : 				y_adjust = 2.0;

  02a0d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  02a15	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN89@draw_tacti:

; 2891 : 			}
; 2892 : 
; 2893 : 			set_2d_mono_font_position (-1.0, -0.75);

  02a1d	51		 push	 ecx
  02a1e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf400000
  02a26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a2b	51		 push	 ecx
  02a2c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02a34	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a39	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2894 : 
; 2895 : 			set_mono_font_rel_position (5.0, y_adjust);

  02a3e	51		 push	 ecx
  02a3f	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02a47	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a4c	51		 push	 ecx
  02a4d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  02a55	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a5a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2896 : 
; 2897 : 			print_mono_font_string (buffer);

  02a5f	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02a65	50		 push	 eax
  02a66	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 2898 : 
; 2899 : 			//
; 2900 : 			// time to go
; 2901 : 			//
; 2902 : 
; 2903 : 			if ((current_flight_dynamics->velocity_z.value > 0.1) && (!ka50_damage.navigation_computer))

  02a6b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  02a70	f3 0f 5a 80 9c
	20 00 00	 cvtss2sd xmm0, DWORD PTR [eax+8348]
  02a78	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fb999999999999a
  02a80	0f 86 83 00 00
	00		 jbe	 $LN90@draw_tacti
  02a86	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  02a8b	c1 e8 04	 shr	 eax, 4
  02a8e	83 e0 01	 and	 eax, 1
  02a91	75 76		 jne	 SHORT $LN90@draw_tacti

; 2904 : 			{
; 2905 : 				float
; 2906 : 					time_to_go,
; 2907 : 					hours,
; 2908 : 					minutes,
; 2909 : 					seconds;
; 2910 : 
; 2911 : 				time_to_go = waypoint_range / current_flight_dynamics->velocity_z.value;

  02a93	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  02a98	f3 0f 10 85 ac
	fe ff ff	 movss	 xmm0, DWORD PTR _waypoint_range$10[ebp]
  02aa0	f3 0f 5e 80 9c
	20 00 00	 divss	 xmm0, DWORD PTR [eax+8348]
  02aa8	f3 0f 11 85 94
	fe ff ff	 movss	 DWORD PTR _time_to_go$4[ebp], xmm0

; 2912 : 
; 2913 : 				get_digital_clock_values (time_to_go, &hours, &minutes, &seconds);

  02ab0	8d 85 88 fe ff
	ff		 lea	 eax, DWORD PTR _seconds$1[ebp]
  02ab6	50		 push	 eax
  02ab7	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR _minutes$2[ebp]
  02abd	51		 push	 ecx
  02abe	8d 95 90 fe ff
	ff		 lea	 edx, DWORD PTR _hours$3[ebp]
  02ac4	52		 push	 edx
  02ac5	51		 push	 ecx
  02ac6	f3 0f 10 85 94
	fe ff ff	 movss	 xmm0, DWORD PTR _time_to_go$4[ebp]
  02ace	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ad3	e8 00 00 00 00	 call	 ?get_digital_clock_values@@YGXMPAM00@Z ; get_digital_clock_values

; 2914 : 
; 2915 : 				sprintf (buffer, "%02d:%02d:%02d", (int) hours, (int) minutes, (int) seconds);

  02ad8	f3 0f 2c 85 88
	fe ff ff	 cvttss2si eax, DWORD PTR _seconds$1[ebp]
  02ae0	50		 push	 eax
  02ae1	f3 0f 2c 8d 8c
	fe ff ff	 cvttss2si ecx, DWORD PTR _minutes$2[ebp]
  02ae9	51		 push	 ecx
  02aea	f3 0f 2c 95 90
	fe ff ff	 cvttss2si edx, DWORD PTR _hours$3[ebp]
  02af2	52		 push	 edx
  02af3	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d@
  02af8	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02afe	50		 push	 eax
  02aff	e8 00 00 00 00	 call	 _sprintf
  02b04	83 c4 14	 add	 esp, 20			; 00000014H

; 2916 : 			}
; 2917 : 			else

  02b07	eb 14		 jmp	 SHORT $LN91@draw_tacti
$LN90@draw_tacti:

; 2918 : 			{
; 2919 : 				strcpy (buffer, "--:--:--");

  02b09	68 00 00 00 00	 push	 OFFSET ??_C@_08JGCGJPK@?9?9?3?9?9?3?9?9@
  02b0e	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02b14	50		 push	 eax
  02b15	e8 00 00 00 00	 call	 _strcpy
  02b1a	83 c4 08	 add	 esp, 8
$LN91@draw_tacti:

; 2920 : 			}
; 2921 : 
; 2922 : 			if (draw_large_mfd)

  02b1d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  02b24	74 12		 je	 SHORT $LN92@draw_tacti

; 2923 : 			{
; 2924 : 				y_adjust = 5.0;

  02b26	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  02b2e	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 2925 : 			}
; 2926 : 			else

  02b36	eb 10		 jmp	 SHORT $LN93@draw_tacti
$LN92@draw_tacti:

; 2927 : 			{
; 2928 : 				y_adjust = 2.0;

  02b38	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  02b40	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN93@draw_tacti:

; 2929 : 			}
; 2930 : 
; 2931 : 			set_2d_mono_font_position (-1.0, -0.85);

  02b48	51		 push	 ecx
  02b49	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  02b51	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b56	51		 push	 ecx
  02b57	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02b5f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b64	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 2932 : 
; 2933 : 			set_mono_font_rel_position (5.0, y_adjust);

  02b69	51		 push	 ecx
  02b6a	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  02b72	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b77	51		 push	 ecx
  02b78	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  02b80	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b85	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 2934 : 
; 2935 : 			print_mono_font_string (buffer);

  02b8a	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  02b90	50		 push	 eax
  02b91	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN83@draw_tacti:

; 2936 : 		}
; 2937 : 	}
; 2938 : }

  02b96	5f		 pop	 edi
  02b97	5e		 pop	 esi
  02b98	5b		 pop	 ebx
  02b99	8b e5		 mov	 esp, ebp
  02b9b	5d		 pop	 ebp
  02b9c	c2 04 00	 ret	 4
?draw_tactical_situation_display_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z ENDP ; draw_tactical_situation_display_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_2d_flir_mfd@@YGXH@Z
_TEXT	SEGMENT
_valid_3d$ = 8						; size = 4
?draw_2d_flir_mfd@@YGXH@Z PROC				; draw_2d_flir_mfd, COMDAT

; 2203 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2204 : 	draw_2d_eo_display (&ka50_flir, TARGET_ACQUISITION_SYSTEM_FLIR, ka50_damage.flir, valid_3d);

  00009	8b 45 08	 mov	 eax, DWORD PTR _valid_3d$[ebp]
  0000c	50		 push	 eax
  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  00013	83 e1 01	 and	 ecx, 1
  00016	51		 push	 ecx
  00017	6a 03		 push	 3
  00019	68 00 00 00 00	 push	 OFFSET ?ka50_flir@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; ka50_flir
  0001e	e8 00 00 00 00	 call	 ?draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z ; draw_2d_eo_display

; 2205 : }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?draw_2d_flir_mfd@@YGXH@Z ENDP				; draw_2d_flir_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_3d_flir_mfd@@YGXH@Z
_TEXT	SEGMENT
_full_screen$ = 8					; size = 4
?draw_3d_flir_mfd@@YGXH@Z PROC				; draw_3d_flir_mfd, COMDAT

; 2184 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 2185 : 	if (!ka50_damage.flir)

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  0000e	83 e0 01	 and	 eax, 1
  00011	75 22		 jne	 SHORT $LN1@draw_3d_fl

; 2186 : 	{
; 2187 : 		if (full_screen)

  00013	83 7d 08 00	 cmp	 DWORD PTR _full_screen$[ebp], 0
  00017	74 10		 je	 SHORT $LN3@draw_3d_fl

; 2188 : 		{
; 2189 : 			draw_full_screen_3d_eo_display (&ka50_flir, TARGET_ACQUISITION_SYSTEM_FLIR, DISPLAY_3D_TINT_ORANGE);

  00019	6a 05		 push	 5
  0001b	6a 03		 push	 3
  0001d	68 00 00 00 00	 push	 OFFSET ?ka50_flir@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; ka50_flir
  00022	e8 00 00 00 00	 call	 ?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z ; draw_full_screen_3d_eo_display

; 2190 : 		}
; 2191 : 		else

  00027	eb 0c		 jmp	 SHORT $LN1@draw_3d_fl
$LN3@draw_3d_fl:

; 2192 : 		{
; 2193 : 			draw_3d_eo_display (&ka50_flir, TARGET_ACQUISITION_SYSTEM_FLIR);

  00029	6a 03		 push	 3
  0002b	68 00 00 00 00	 push	 OFFSET ?ka50_flir@@3UEO_PARAMS_DYNAMIC_MOVE@@A ; ka50_flir
  00030	e8 00 00 00 00	 call	 ?draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ; draw_3d_eo_display
$LN1@draw_3d_fl:

; 2194 : 		}
; 2195 : 	}
; 2196 : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?draw_3d_flir_mfd@@YGXH@Z ENDP				; draw_3d_flir_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\algorithm
;	COMDAT ??$min@M@std@@YGABMABM0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YGABMABM0@Z PROC				; std::min<float>, COMDAT

; 5427 : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5428 : 	if (_Right < _Left)

  00009	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00013	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00016	76 64		 jbe	 SHORT $LN8@min
$LN4@min:

; 5429 : 		{
; 5430 : 		_STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00022	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00025	77 02		 ja	 SHORT $LN9@min
  00027	eb 4a		 jmp	 SHORT $LN6@min
$LN9@min:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00033	6a 00		 push	 0
  00035	68 36 15 00 00	 push	 5430			; 00001536H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@JMBMHIBC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
  0003f	6a 02		 push	 2
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00047	83 c4 18	 add	 esp, 24			; 00000018H
  0004a	83 f8 01	 cmp	 eax, 1
  0004d	75 01		 jne	 SHORT $LN12@min
  0004f	cc		 int	 3
$LN12@min:
  00050	6a 00		 push	 0
  00052	68 36 15 00 00	 push	 5430			; 00001536H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@FKBPBJEB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006c	83 c4 14	 add	 esp, 20			; 00000014H
  0006f	33 c0		 xor	 eax, eax
  00071	75 b6		 jne	 SHORT $LN9@min
$LN6@min:
  00073	33 c0		 xor	 eax, eax
  00075	75 a1		 jne	 SHORT $LN4@min

; 5431 : 		return (_Right);

  00077	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0007a	eb 03		 jmp	 SHORT $LN1@min
$LN8@min:

; 5432 : 		}
; 5433 : 
; 5434 : 	return (_Left);

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@min:

; 5435 : 	}

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
??$min@M@std@@YGABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z
_TEXT	SEGMENT
tv1070 = -400						; size = 8
tv332 = -400						; size = 4
tv313 = -400						; size = 4
tv135 = -400						; size = 4
tv83 = -400						; size = 4
tv325 = -396						; size = 4
tv305 = -396						; size = 4
tv157 = -396						; size = 4
tv143 = -396						; size = 4
tv95 = -396						; size = 4
tv75 = -396						; size = 4
_level$1 = -328						; size = 4
_visibility$ = -324					; size = 4
_tmp$ = -320						; size = 48
_target_point$ = -272					; size = 12
_source_position$ = -260				; size = 4
_target$ = -256						; size = 4
_source$ = -252						; size = 4
_y$ = -248						; size = 4
_x$ = -244						; size = 4
_j$ = -240						; size = 4
_i$ = -236						; size = 4
_y_adjust$ = -232					; size = 4
_target_range$ = -228					; size = 4
_marker_position$ = -224				; size = 4
_heading$ = -220					; size = 4
_width$ = -216						; size = 4
_has_range$ = -212					; size = 4
_heading_readout$ = -208				; size = 4
_buffer$ = -204						; size = 200
_s$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
_damaged$ = 16						; size = 4
_valid_3d$ = 20						; size = 4
?draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z PROC ; draw_2d_eo_display, COMDAT

; 1643 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 01 00
	00		 sub	 esp, 400		; 00000190H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1644 : 	const char
; 1645 : 		*s;
; 1646 : 	char
; 1647 : 		buffer[200];
; 1648 : 
; 1649 : 	int
; 1650 : 		heading_readout,
; 1651 : 		has_range;
; 1652 : 
; 1653 : 	float
; 1654 : 		width,
; 1655 : 		heading,
; 1656 : 		marker_position,
; 1657 : 		target_range = 0.0,

  0000c	0f 57 c0	 xorps	 xmm0, xmm0
  0000f	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _target_range$[ebp], xmm0

; 1658 : 		y_adjust,
; 1659 : 		i,
; 1660 : 		j,
; 1661 : 		x,
; 1662 : 		y;
; 1663 : 
; 1664 : 	entity
; 1665 : 		*source,
; 1666 : 		*target;
; 1667 : 
; 1668 : 	vec3d
; 1669 : 		*source_position,
; 1670 : 		target_point;
; 1671 : 
; 1672 : 	viewpoint
; 1673 : 		tmp;
; 1674 : 
; 1675 : 	object_3d_visibility
; 1676 : 		visibility;
; 1677 : 
; 1678 : 	ASSERT (eo);

  00017	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  0001b	75 18		 jne	 SHORT $LN4@draw_2d_eo
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  00022	83 c0 23	 add	 eax, 35			; 00000023H
  00025	50		 push	 eax
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  00030	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_2d_eo:

; 1679 : 
; 1680 : 	source = get_gunship_entity ();

  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0003a	89 85 04 ff ff
	ff		 mov	 DWORD PTR _source$[ebp], eax

; 1681 : 
; 1682 : 	source_position = get_local_entity_vec3d_ptr (source, VEC3D_TYPE_POSITION);

  00040	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  00047	74 10		 je	 SHORT $LN61@draw_2d_eo
  00049	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  0004f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00051	89 8d 74 fe ff
	ff		 mov	 DWORD PTR tv75[ebp], ecx
  00057	eb 24		 jmp	 SHORT $LN62@draw_2d_eo
$LN61@draw_2d_eo:
  00059	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  0005f	83 c2 27	 add	 edx, 39			; 00000027H
  00062	52		 push	 edx
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00073	c7 85 74 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv75[ebp], 0
$LN62@draw_2d_eo:
  0007d	b9 01 00 00 00	 mov	 ecx, 1
  00082	85 c9		 test	 ecx, ecx
  00084	74 0c		 je	 SHORT $LN63@draw_2d_eo
  00086	c7 85 70 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv83[ebp], 8
  00090	eb 24		 jmp	 SHORT $LN64@draw_2d_eo
$LN63@draw_2d_eo:
  00092	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  00098	83 c2 27	 add	 edx, 39			; 00000027H
  0009b	52		 push	 edx
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000ac	c7 85 70 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv83[ebp], 0
$LN64@draw_2d_eo:
  000b6	6a 08		 push	 8
  000b8	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  000be	51		 push	 ecx
  000bf	6b 95 74 fe ff
	ff 60		 imul	 edx, DWORD PTR tv75[ebp], 96
  000c6	8b 85 70 fe ff
	ff		 mov	 eax, DWORD PTR tv83[ebp]
  000cc	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000d3	ff d1		 call	 ecx
  000d5	89 85 fc fe ff
	ff		 mov	 DWORD PTR _source_position$[ebp], eax

; 1683 : 
; 1684 : 	target = get_local_entity_parent (source, LIST_TYPE_TARGET);

  000db	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _source$[ebp], 0
  000e2	74 10		 je	 SHORT $LN65@draw_2d_eo
  000e4	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _source$[ebp]
  000ea	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ec	89 8d 74 fe ff
	ff		 mov	 DWORD PTR tv95[ebp], ecx
  000f2	eb 24		 jmp	 SHORT $LN66@draw_2d_eo
$LN65@draw_2d_eo:
  000f4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  000fa	83 c2 29	 add	 edx, 41			; 00000029H
  000fd	52		 push	 edx
  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00103	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0010e	c7 85 74 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv95[ebp], 0
$LN66@draw_2d_eo:
  00118	b9 01 00 00 00	 mov	 ecx, 1
  0011d	85 c9		 test	 ecx, ecx
  0011f	74 0c		 je	 SHORT $LN67@draw_2d_eo
  00121	c7 85 70 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv135[ebp], 38 ; 00000026H
  0012b	eb 24		 jmp	 SHORT $LN68@draw_2d_eo
$LN67@draw_2d_eo:
  0012d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  00133	83 c2 29	 add	 edx, 41			; 00000029H
  00136	52		 push	 edx
  00137	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0013c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00141	50		 push	 eax
  00142	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00147	c7 85 70 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv135[ebp], 0
$LN68@draw_2d_eo:
  00151	6a 26		 push	 38			; 00000026H
  00153	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _source$[ebp]
  00159	51		 push	 ecx
  0015a	69 95 74 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv95[ebp], 180
  00164	8b 85 70 fe ff
	ff		 mov	 eax, DWORD PTR tv135[ebp]
  0016a	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  00171	ff d1		 call	 ecx
  00173	89 85 00 ff ff
	ff		 mov	 DWORD PTR _target$[ebp], eax

; 1685 : 
; 1686 : 	has_range = get_range_finder() != RANGEFINDER_TRIANGULATION;

  00179	e8 00 00 00 00	 call	 ?get_range_finder@@YG?AW4rangefinding_system@@XZ ; get_range_finder
  0017e	83 f8 02	 cmp	 eax, 2
  00181	74 0c		 je	 SHORT $LN69@draw_2d_eo
  00183	c7 85 74 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv143[ebp], 1
  0018d	eb 0a		 jmp	 SHORT $LN70@draw_2d_eo
$LN69@draw_2d_eo:
  0018f	c7 85 74 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv143[ebp], 0
$LN70@draw_2d_eo:
  00199	8b 85 74 fe ff
	ff		 mov	 eax, DWORD PTR tv143[ebp]
  0019f	89 85 2c ff ff
	ff		 mov	 DWORD PTR _has_range$[ebp], eax

; 1687 : 
; 1688 : 	if (has_range)

  001a5	83 bd 2c ff ff
	ff 00		 cmp	 DWORD PTR _has_range$[ebp], 0
  001ac	74 0b		 je	 SHORT $LN5@draw_2d_eo

; 1689 : 		target_range = get_range_to_target();

  001ae	e8 00 00 00 00	 call	 ?get_range_to_target@@YGMXZ ; get_range_to_target
  001b3	d9 9d 1c ff ff
	ff		 fstp	 DWORD PTR _target_range$[ebp]
$LN5@draw_2d_eo:

; 1690 : 
; 1691 : 	////////////////////////////////////////
; 1692 : 	//
; 1693 : 	// text
; 1694 : 	//
; 1695 : 	////////////////////////////////////////
; 1696 : 
; 1697 : 	set_mono_font_colour (MFD_COLOUR_GREEN);

  001b9	b8 04 00 00 00	 mov	 eax, 4
  001be	6b c8 0d	 imul	 ecx, eax, 13
  001c1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  001c7	52		 push	 edx
  001c8	e8 00 00 00 00	 call	 ?set_mono_font_colour@@YGXUREAL_COLOUR@@@Z ; set_mono_font_colour

; 1698 : 
; 1699 : 	if (draw_large_mfd)

  001cd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  001d4	74 09		 je	 SHORT $LN6@draw_2d_eo

; 1700 : 	{
; 1701 : 		set_mono_font_type (MONO_FONT_TYPE_7X12);

  001d6	6a 05		 push	 5
  001d8	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1702 : 	}
; 1703 : 	else

  001dd	eb 07		 jmp	 SHORT $LN7@draw_2d_eo
$LN6@draw_2d_eo:

; 1704 : 	{
; 1705 : 		set_mono_font_type (MONO_FONT_TYPE_5X7);

  001df	6a 01		 push	 1
  001e1	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type
$LN7@draw_2d_eo:

; 1706 : 	}
; 1707 : 
; 1708 : 	//
; 1709 : 	// sensor type
; 1710 : 	//
; 1711 : 
; 1712 : 	if (draw_large_mfd)

  001e6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  001ed	74 12		 je	 SHORT $LN8@draw_2d_eo

; 1713 : 	{
; 1714 : 		y_adjust = 5.0;

  001ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  001f7	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1715 : 	}
; 1716 : 	else

  001ff	eb 10		 jmp	 SHORT $LN9@draw_2d_eo
$LN8@draw_2d_eo:

; 1717 : 	{
; 1718 : 		y_adjust = 2.0;

  00201	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00209	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN9@draw_2d_eo:

; 1719 : 	}
; 1720 : 
; 1721 : 	set_2d_mono_font_position (-1.0, 1.0);

  00211	51		 push	 ecx
  00212	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0021a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021f	51		 push	 ecx
  00220	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00228	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022d	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1722 : 
; 1723 : 	set_mono_font_rel_position (1.0, y_adjust);

  00232	51		 push	 ecx
  00233	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  0023b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00240	51		 push	 ecx
  00241	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00249	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024e	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1724 : 
; 1725 : 	switch (system)

  00253	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  00256	89 85 74 fe ff
	ff		 mov	 DWORD PTR tv157[ebp], eax
  0025c	83 bd 74 fe ff
	ff 03		 cmp	 DWORD PTR tv157[ebp], 3
  00263	74 02		 je	 SHORT $LN10@draw_2d_eo
  00265	eb 0c		 jmp	 SHORT $LN11@draw_2d_eo
$LN10@draw_2d_eo:

; 1726 : 	{
; 1727 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 1728 : 		{
; 1729 : 			print_mono_font_string ("FLIR");

  00267	68 00 00 00 00	 push	 OFFSET ??_C@_04MIGKMLBH@FLIR@
  0026c	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1730 : 
; 1731 : 			break;

  00271	eb 0a		 jmp	 SHORT $LN2@draw_2d_eo
$LN11@draw_2d_eo:

; 1732 : 		}
; 1733 : 		default:
; 1734 : 		{
; 1735 : 			print_mono_font_string ("XXX");

  00273	68 00 00 00 00	 push	 OFFSET ??_C@_03MAMPKPPK@XXX@
  00278	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN2@draw_2d_eo:

; 1736 : 
; 1737 : 			break;
; 1738 : 		}
; 1739 : 	}
; 1740 : 
; 1741 : 	//
; 1742 : 	// damaged
; 1743 : 	//
; 1744 : 
; 1745 : 	if (damaged)

  0027d	83 7d 10 00	 cmp	 DWORD PTR _damaged$[ebp], 0
  00281	0f 84 9d 00 00
	00		 je	 $LN12@draw_2d_eo

; 1746 : 	{
; 1747 : 		draw_2d_line (-0.5, -0.5,  0.5, 0.5, MFD_COLOUR1);

  00287	b8 04 00 00 00	 mov	 eax, 4
  0028c	6b c8 00	 imul	 ecx, eax, 0
  0028f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00295	52		 push	 edx
  00296	51		 push	 ecx
  00297	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0029f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a4	51		 push	 ecx
  002a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  002ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b2	51		 push	 ecx
  002b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  002bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c0	51		 push	 ecx
  002c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  002c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ce	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1748 : 		draw_2d_line ( 0.5, -0.5, -0.5, 0.5, MFD_COLOUR1);

  002d3	b8 04 00 00 00	 mov	 eax, 4
  002d8	6b c8 00	 imul	 ecx, eax, 0
  002db	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  002e1	52		 push	 edx
  002e2	51		 push	 ecx
  002e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  002eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f0	51		 push	 ecx
  002f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  002f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fe	51		 push	 ecx
  002ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00307	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030c	51		 push	 ecx
  0030d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00315	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0031a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1749 : 
; 1750 : 		return;

  0031f	e9 93 1b 00 00	 jmp	 $LN1@draw_2d_eo
$LN12@draw_2d_eo:

; 1751 : 	}
; 1752 : 
; 1753 : 	//
; 1754 : 	// heading
; 1755 : 	//
; 1756 : 
; 1757 : 	heading = get_heading_from_attitude_matrix (eo_vp.attitude);

  00324	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00329	d1 e0		 shl	 eax, 1
  0032b	b9 04 00 00 00	 mov	 ecx, 4
  00330	d1 e1		 shl	 ecx, 1
  00332	51		 push	 ecx
  00333	f3 0f 10 84 08
	0c 00 00 00	 movss	 xmm0, DWORD PTR ?eo_vp@@3UVIEWPOINT@@A[eax+ecx+12]
  0033c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00341	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00346	d1 e2		 shl	 edx, 1
  00348	b8 04 00 00 00	 mov	 eax, 4
  0034d	6b c8 00	 imul	 ecx, eax, 0
  00350	51		 push	 ecx
  00351	f3 0f 10 84 0a
	0c 00 00 00	 movss	 xmm0, DWORD PTR ?eo_vp@@3UVIEWPOINT@@A[edx+ecx+12]
  0035a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035f	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  00364	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR _heading$[ebp]

; 1758 : 
; 1759 : 	if (heading < 0.0)

  0036a	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _heading$[ebp]
  00372	0f 57 c9	 xorps	 xmm1, xmm1
  00375	66 0f 2f c8	 comisd	 xmm1, xmm0
  00379	76 1c		 jbe	 SHORT $LN13@draw_2d_eo

; 1760 : 	{
; 1761 : 		heading += rad (360.0);

  0037b	f3 0f 5a 85 24
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _heading$[ebp]
  00383	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@401921fb51000000
  0038b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0038f	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _heading$[ebp], xmm0
$LN13@draw_2d_eo:

; 1762 : 	}
; 1763 : 
; 1764 : 	heading_readout = (int) deg (heading);

  00397	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _heading$[ebp]
  0039f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  003a7	f3 0f 2c c0	 cvttss2si eax, xmm0
  003ab	89 85 30 ff ff
	ff		 mov	 DWORD PTR _heading_readout$[ebp], eax

; 1765 : 
; 1766 : 	if (heading_readout == 0)

  003b1	83 bd 30 ff ff
	ff 00		 cmp	 DWORD PTR _heading_readout$[ebp], 0
  003b8	75 0a		 jne	 SHORT $LN14@draw_2d_eo

; 1767 : 	{
; 1768 : 		heading_readout = 360;

  003ba	c7 85 30 ff ff
	ff 68 01 00 00	 mov	 DWORD PTR _heading_readout$[ebp], 360 ; 00000168H
$LN14@draw_2d_eo:

; 1769 : 	}
; 1770 : 
; 1771 : 	sprintf (buffer, "%d", heading_readout);

  003c4	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _heading_readout$[ebp]
  003ca	50		 push	 eax
  003cb	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  003d0	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  003d6	51		 push	 ecx
  003d7	e8 00 00 00 00	 call	 _sprintf
  003dc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1772 : 
; 1773 : 	width = get_mono_font_string_width (buffer);

  003df	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  003e5	50		 push	 eax
  003e6	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  003eb	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 1774 : 
; 1775 : 	set_2d_mono_font_position (0.0, 1.0);

  003f1	51		 push	 ecx
  003f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ff	51		 push	 ecx
  00400	0f 57 c0	 xorps	 xmm0, xmm0
  00403	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00408	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1776 : 
; 1777 : 	set_mono_font_rel_position ((-width * 0.5) + 1.0, y_adjust);

  0040d	51		 push	 ecx
  0040e	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00416	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0041b	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00423	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0042a	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0042e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00436	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0043e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00442	51		 push	 ecx
  00443	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00448	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1778 : 
; 1779 : 	print_mono_font_string (buffer);

  0044d	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00453	50		 push	 eax
  00454	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1780 : 
; 1781 : 	//
; 1782 : 	// low light
; 1783 : 	//
; 1784 : 
; 1785 : 	if (eo_low_light)

  00459	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_low_light@@3HA, 0 ; eo_low_light
  00460	0f 84 8c 00 00
	00		 je	 $LN19@draw_2d_eo

; 1786 : 	{
; 1787 : 		if (draw_large_mfd)

  00466	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0046d	74 12		 je	 SHORT $LN16@draw_2d_eo

; 1788 : 		{
; 1789 : 			y_adjust = 18.0;

  0046f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41900000
  00477	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1790 : 		}
; 1791 : 		else

  0047f	eb 10		 jmp	 SHORT $LN17@draw_2d_eo
$LN16@draw_2d_eo:

; 1792 : 		{
; 1793 : 			y_adjust = 9.0;

  00481	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41100000
  00489	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN17@draw_2d_eo:

; 1794 : 		}
; 1795 : 
; 1796 : 		set_2d_mono_font_position (-1.0, 1.0);

  00491	51		 push	 ecx
  00492	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0049a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0049f	51		 push	 ecx
  004a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  004a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ad	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1797 : 
; 1798 : 		set_mono_font_rel_position (1.0, y_adjust);

  004b2	51		 push	 ecx
  004b3	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  004bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c0	51		 push	 ecx
  004c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ce	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1799 : 
; 1800 : 		if (draw_large_mfd)

  004d3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  004da	74 0c		 je	 SHORT $LN18@draw_2d_eo

; 1801 : 		{
; 1802 : 			print_mono_font_string ("LO LIGHT");

  004dc	68 00 00 00 00	 push	 OFFSET ??_C@_08JFLECGBM@LO?5LIGHT@
  004e1	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1803 : 		}
; 1804 : 		else

  004e6	eb 0a		 jmp	 SHORT $LN19@draw_2d_eo
$LN18@draw_2d_eo:

; 1805 : 		{
; 1806 : 			print_mono_font_string ("LO");

  004e8	68 00 00 00 00	 push	 OFFSET ??_C@_02ONPABID@LO@
  004ed	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN19@draw_2d_eo:

; 1807 : 		}
; 1808 : 	}
; 1809 : 
; 1810 : 	//
; 1811 : 	// field of view
; 1812 : 	//
; 1813 : 
; 1814 : 	{
; 1815 : 		float level = 1.0 / convert_linear_view_value (eo);

  004f2	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  004f5	50		 push	 eax
  004f6	e8 00 00 00 00	 call	 ?convert_linear_view_value@@YGMPAUEO_PARAMS_DYNAMIC_MOVE@@@Z ; convert_linear_view_value
  004fb	dd 9d 70 fe ff
	ff		 fstp	 QWORD PTR tv1070[ebp]
  00501	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00509	f2 0f 5e 85 70
	fe ff ff	 divsd	 xmm0, QWORD PTR tv1070[ebp]
  00511	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00515	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR _level$1[ebp], xmm0

; 1816 : 
; 1817 : 		if (level < 10)

  0051d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  00525	0f 2f 85 b8 fe
	ff ff		 comiss	 xmm0, DWORD PTR _level$1[ebp]
  0052c	76 26		 jbe	 SHORT $LN20@draw_2d_eo

; 1818 : 		{
; 1819 : 			sprintf (buffer, "%.1f", level);

  0052e	f3 0f 5a 85 b8
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _level$1[ebp]
  00536	83 ec 08	 sub	 esp, 8
  00539	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0053e	68 00 00 00 00	 push	 OFFSET ??_C@_04GGBPDDBN@?$CF?41f@
  00543	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00549	50		 push	 eax
  0054a	e8 00 00 00 00	 call	 _sprintf
  0054f	83 c4 10	 add	 esp, 16			; 00000010H

; 1820 : 		}
; 1821 : 		else

  00552	eb 1d		 jmp	 SHORT $LN21@draw_2d_eo
$LN20@draw_2d_eo:

; 1822 : 		{
; 1823 : 			sprintf (buffer, "%d", (int)level);

  00554	f3 0f 2c 85 b8
	fe ff ff	 cvttss2si eax, DWORD PTR _level$1[ebp]
  0055c	50		 push	 eax
  0055d	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00562	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00568	51		 push	 ecx
  00569	e8 00 00 00 00	 call	 _sprintf
  0056e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN21@draw_2d_eo:

; 1824 : 		}
; 1825 : 
; 1826 : 		s = buffer;

  00571	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00577	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1827 : 	}
; 1828 : 
; 1829 : 	width = get_mono_font_string_width (s);

  0057a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0057d	50		 push	 eax
  0057e	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00583	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 1830 : 
; 1831 : 	if (draw_large_mfd)

  00589	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00590	74 2e		 je	 SHORT $LN22@draw_2d_eo

; 1832 : 	{
; 1833 : 		width += 2.0;

  00592	f3 0f 5a 85 28
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  0059a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  005a2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005a6	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 1834 : 
; 1835 : 		y_adjust = 5.0;

  005ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  005b6	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1836 : 	}
; 1837 : 	else

  005be	eb 2c		 jmp	 SHORT $LN23@draw_2d_eo
$LN22@draw_2d_eo:

; 1838 : 	{
; 1839 : 		width += 1.0;

  005c0	f3 0f 5a 85 28
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  005c8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  005d0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005d4	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 1840 : 
; 1841 : 		y_adjust = 2.0;

  005dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  005e4	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN23@draw_2d_eo:

; 1842 : 	}
; 1843 : 
; 1844 : 	set_2d_mono_font_position (1.0, 1.0);

  005ec	51		 push	 ecx
  005ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  005f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005fa	51		 push	 ecx
  005fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00603	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00608	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1845 : 
; 1846 : 	set_mono_font_rel_position (-width, y_adjust);

  0060d	51		 push	 ecx
  0060e	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00616	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0061b	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00623	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0062a	51		 push	 ecx
  0062b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00630	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1847 : 
; 1848 : 	print_mono_font_string (s);

  00635	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00638	50		 push	 eax
  00639	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1849 : 
; 1850 : 	//
; 1851 : 	// target name
; 1852 : 	//
; 1853 : 
; 1854 : 	if (draw_large_mfd)

  0063e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00645	74 12		 je	 SHORT $LN24@draw_2d_eo

; 1855 : 	{
; 1856 : 		y_adjust = -12.0;

  00647	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  0064f	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1857 : 	}
; 1858 : 	else

  00657	eb 10		 jmp	 SHORT $LN25@draw_2d_eo
$LN24@draw_2d_eo:

; 1859 : 	{
; 1860 : 		y_adjust = -5.0;

  00659	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0a00000
  00661	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN25@draw_2d_eo:

; 1861 : 	}
; 1862 : 
; 1863 : 	s = get_target_display_name (target, buffer, draw_large_mfd);

  00669	a1 00 00 00 00	 mov	 eax, DWORD PTR ?draw_large_mfd@@3HA
  0066e	50		 push	 eax
  0066f	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00675	51		 push	 ecx
  00676	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _target$[ebp]
  0067c	52		 push	 edx
  0067d	e8 00 00 00 00	 call	 ?get_target_display_name@@YGPBDPAUENTITY@@PADH@Z ; get_target_display_name
  00682	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 1864 : 
; 1865 : 	if (s)

  00685	83 7d fc 00	 cmp	 DWORD PTR _s$[ebp], 0
  00689	74 4b		 je	 SHORT $LN26@draw_2d_eo

; 1866 : 	{
; 1867 : 		set_2d_mono_font_position (-1.0, -1.0);

  0068b	51		 push	 ecx
  0068c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00694	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00699	51		 push	 ecx
  0069a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  006a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a7	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1868 : 
; 1869 : 		set_mono_font_rel_position (1.0, y_adjust);

  006ac	51		 push	 ecx
  006ad	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  006b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ba	51		 push	 ecx
  006bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  006c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006c8	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1870 : 
; 1871 : 		print_mono_font_string (s);

  006cd	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  006d0	50		 push	 eax
  006d1	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN26@draw_2d_eo:

; 1872 : 	}
; 1873 : 
; 1874 : 	//
; 1875 : 	// target range
; 1876 : 	//
; 1877 : 
; 1878 : 	if (target_range > 0.0)

  006d6	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  006de	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  006e6	0f 86 17 01 00
	00		 jbe	 $LN27@draw_2d_eo

; 1879 : 	{
; 1880 : 		if ((target_range < 1000.0) && (!ka50_damage.laser_designator))

  006ec	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  006f4	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@408f400000000000
  006fc	66 0f 2f c8	 comisd	 xmm1, xmm0
  00700	76 2b		 jbe	 SHORT $LN28@draw_2d_eo
  00702	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  00707	d1 e8		 shr	 eax, 1
  00709	83 e0 01	 and	 eax, 1
  0070c	75 1f		 jne	 SHORT $LN28@draw_2d_eo

; 1881 : 		{
; 1882 : 			sprintf (buffer, "%dm", (int) target_range);

  0070e	f3 0f 2c 85 1c
	ff ff ff	 cvttss2si eax, DWORD PTR _target_range$[ebp]
  00716	50		 push	 eax
  00717	68 00 00 00 00	 push	 OFFSET ??_C@_03NGNKAJPJ@?$CFdm@
  0071c	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00722	51		 push	 ecx
  00723	e8 00 00 00 00	 call	 _sprintf
  00728	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1883 : 		}
; 1884 : 		else

  0072b	eb 2c		 jmp	 SHORT $LN29@draw_2d_eo
$LN28@draw_2d_eo:

; 1885 : 		{
; 1886 : 			sprintf (buffer, "%.1fKm", target_range * (1.0 / 1000.0));

  0072d	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  00735	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  0073d	83 ec 08	 sub	 esp, 8
  00740	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00745	68 00 00 00 00	 push	 OFFSET ??_C@_06OMCABMNO@?$CF?41fKm@
  0074a	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  00750	50		 push	 eax
  00751	e8 00 00 00 00	 call	 _sprintf
  00756	83 c4 10	 add	 esp, 16			; 00000010H
$LN29@draw_2d_eo:

; 1887 : 		}
; 1888 : 
; 1889 : 		width = get_mono_font_string_width (buffer);

  00759	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  0075f	50		 push	 eax
  00760	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00765	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 1890 : 
; 1891 : 		set_2d_mono_font_position (1.0, -1.0);

  0076b	51		 push	 ecx
  0076c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00774	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00779	51		 push	 ecx
  0077a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00782	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00787	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1892 : 
; 1893 : 		if (draw_large_mfd)

  0078c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00793	74 1e		 je	 SHORT $LN30@draw_2d_eo

; 1894 : 		{
; 1895 : 			width += 2.0;

  00795	f3 0f 5a 85 28
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  0079d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4000000000000000
  007a5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007a9	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 1896 : 		}
; 1897 : 		else

  007b1	eb 1c		 jmp	 SHORT $LN31@draw_2d_eo
$LN30@draw_2d_eo:

; 1898 : 		{
; 1899 : 			width += 1.0;

  007b3	f3 0f 5a 85 28
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _width$[ebp]
  007bb	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  007c3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  007c7	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _width$[ebp], xmm0
$LN31@draw_2d_eo:

; 1900 : 		}
; 1901 : 
; 1902 : 		set_mono_font_rel_position (-width, y_adjust);

  007cf	51		 push	 ecx
  007d0	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  007d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007dd	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  007e5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  007ec	51		 push	 ecx
  007ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f2	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1903 : 
; 1904 : 		print_mono_font_string (buffer);

  007f7	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  007fd	50		 push	 eax
  007fe	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN27@draw_2d_eo:

; 1905 : 	}
; 1906 : 
; 1907 : 	//
; 1908 : 	// locked
; 1909 : 	//
; 1910 : 
; 1911 : 	if (eo_is_locked())

  00803	e8 00 00 00 00	 call	 ?eo_is_locked@@YGHXZ	; eo_is_locked
  00808	85 c0		 test	 eax, eax
  0080a	74 77		 je	 SHORT $LN32@draw_2d_eo

; 1912 : 	{
; 1913 : 		if (draw_large_mfd)

  0080c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00813	74 12		 je	 SHORT $LN33@draw_2d_eo

; 1914 : 		{
; 1915 : 			y_adjust = -25.0;

  00815	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  0081d	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1916 : 		}
; 1917 : 		else

  00825	eb 10		 jmp	 SHORT $LN34@draw_2d_eo
$LN33@draw_2d_eo:

; 1918 : 		{
; 1919 : 			y_adjust = -12.0;

  00827	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  0082f	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN34@draw_2d_eo:

; 1920 : 		}
; 1921 : 
; 1922 : 		set_2d_mono_font_position (-1.0, -1.0);

  00837	51		 push	 ecx
  00838	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00840	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00845	51		 push	 ecx
  00846	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0084e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00853	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1923 : 
; 1924 : 		set_mono_font_rel_position (1.0, y_adjust);

  00858	51		 push	 ecx
  00859	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00861	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00866	51		 push	 ecx
  00867	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0086f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00874	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1925 : 
; 1926 : 		print_mono_font_string ("LOCKED");

  00879	68 00 00 00 00	 push	 OFFSET ??_C@_06KODELPLK@LOCKED@
  0087e	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN32@draw_2d_eo:

; 1927 : 	}
; 1928 : 
; 1929 : // Jabberwock 031107 Designated targets
; 1930 : 
; 1931 : 	target = get_local_entity_parent (get_gunship_entity (), LIST_TYPE_TARGET);

  00883	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0088a	74 0f		 je	 SHORT $LN71@draw_2d_eo
  0088c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00891	8b 08		 mov	 ecx, DWORD PTR [eax]
  00893	89 8d 74 fe ff
	ff		 mov	 DWORD PTR tv305[ebp], ecx
  00899	eb 27		 jmp	 SHORT $LN72@draw_2d_eo
$LN71@draw_2d_eo:
  0089b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  008a1	81 c2 20 01 00
	00		 add	 edx, 288		; 00000120H
  008a7	52		 push	 edx
  008a8	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  008ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  008b2	50		 push	 eax
  008b3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008b8	c7 85 74 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv305[ebp], 0
$LN72@draw_2d_eo:
  008c2	b9 01 00 00 00	 mov	 ecx, 1
  008c7	85 c9		 test	 ecx, ecx
  008c9	74 0c		 je	 SHORT $LN73@draw_2d_eo
  008cb	c7 85 70 fe ff
	ff 26 00 00 00	 mov	 DWORD PTR tv313[ebp], 38 ; 00000026H
  008d5	eb 27		 jmp	 SHORT $LN74@draw_2d_eo
$LN73@draw_2d_eo:
  008d7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z@4JA
  008dd	81 c2 20 01 00
	00		 add	 edx, 288		; 00000120H
  008e3	52		 push	 edx
  008e4	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  008e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  008ee	50		 push	 eax
  008ef	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  008f4	c7 85 70 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv313[ebp], 0
$LN74@draw_2d_eo:
  008fe	6a 26		 push	 38			; 00000026H
  00900	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00906	51		 push	 ecx
  00907	69 95 74 fe ff
	ff b4 00 00 00	 imul	 edx, DWORD PTR tv305[ebp], 180
  00911	8b 85 70 fe ff
	ff		 mov	 eax, DWORD PTR tv313[ebp]
  00917	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[edx+eax*4]
  0091e	ff d1		 call	 ecx
  00920	89 85 00 ff ff
	ff		 mov	 DWORD PTR _target$[ebp], eax

; 1932 : 
; 1933 : 	if (target && get_local_entity_parent (target, LIST_TYPE_DESIGNATED_TARGET))

  00926	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  0092d	0f 84 36 01 00
	00		 je	 $LN35@draw_2d_eo
  00933	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  0093a	74 10		 je	 SHORT $LN75@draw_2d_eo
  0093c	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _target$[ebp]
  00942	8b 08		 mov	 ecx, DWORD PTR [eax]
  00944	89 8d 74 fe ff
	ff		 mov	 DWORD PTR tv325[ebp], ecx
  0094a	eb 20		 jmp	 SHORT $LN76@draw_2d_eo
$LN75@draw_2d_eo:
  0094c	68 8d 07 00 00	 push	 1933			; 0000078dH
  00951	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00956	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0095c	52		 push	 edx
  0095d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00962	c7 85 74 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv325[ebp], 0
$LN76@draw_2d_eo:
  0096c	b8 01 00 00 00	 mov	 eax, 1
  00971	85 c0		 test	 eax, eax
  00973	74 0c		 je	 SHORT $LN77@draw_2d_eo
  00975	c7 85 70 fe ff
	ff 0a 00 00 00	 mov	 DWORD PTR tv332[ebp], 10 ; 0000000aH
  0097f	eb 20		 jmp	 SHORT $LN78@draw_2d_eo
$LN77@draw_2d_eo:
  00981	68 8d 07 00 00	 push	 1933			; 0000078dH
  00986	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0098b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_list_type_message@@3PBDB ; overload_invalid_list_type_message
  00991	51		 push	 ecx
  00992	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00997	c7 85 70 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv332[ebp], 0
$LN78@draw_2d_eo:
  009a1	6a 0a		 push	 10			; 0000000aH
  009a3	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _target$[ebp]
  009a9	52		 push	 edx
  009aa	69 85 74 fe ff
	ff b4 00 00 00	 imul	 eax, DWORD PTR tv325[ebp], 180
  009b4	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv332[ebp]
  009ba	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_parent@@3PAY0CN@P6GPAUENTITY@@PAU1@W4LIST_TYPES@@@ZA[eax+ecx*4]
  009c1	ff d2		 call	 edx
  009c3	85 c0		 test	 eax, eax
  009c5	0f 84 9e 00 00
	00		 je	 $LN35@draw_2d_eo

; 1934 : 	{
; 1935 : 		if (draw_large_mfd)

  009cb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  009d2	74 12		 je	 SHORT $LN36@draw_2d_eo

; 1936 : 		{
; 1937 : 			y_adjust = -25.0;

  009d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1c80000
  009dc	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1938 : 		}
; 1939 : 		else

  009e4	eb 10		 jmp	 SHORT $LN37@draw_2d_eo
$LN36@draw_2d_eo:

; 1940 : 		{
; 1941 : 			y_adjust = -12.0;

  009e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1400000
  009ee	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN37@draw_2d_eo:

; 1942 : 		}
; 1943 : 
; 1944 : 		width = get_mono_font_string_width ("MARKED");

  009f6	68 00 00 00 00	 push	 OFFSET ??_C@_06GPMJGLEM@MARKED@
  009fb	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00a00	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 1945 : 
; 1946 : 		set_2d_mono_font_position (1.0, -1.0);

  00a06	51		 push	 ecx
  00a07	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00a0f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a14	51		 push	 ecx
  00a15	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a1d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a22	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1947 : 
; 1948 : 		set_mono_font_rel_position (-width - 1.0, y_adjust);

  00a27	51		 push	 ecx
  00a28	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00a30	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a35	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00a3d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00a44	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00a48	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00a50	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a54	51		 push	 ecx
  00a55	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a5a	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1949 : 
; 1950 : 		print_mono_font_string ("MARKED");

  00a5f	68 00 00 00 00	 push	 OFFSET ??_C@_06GPMJGLEM@MARKED@
  00a64	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN35@draw_2d_eo:

; 1951 : 	}
; 1952 : // Jabberwock 031107 ends
; 1953 : 
; 1954 : // added ground stabi by GCsDriver 08-12-2007
; 1955 : 	//
; 1956 : 	// 030418 loke
; 1957 : 	// draw an indication if ground stablisation is enabled
; 1958 : 	//
; 1959 : 
; 1960 : 	if (eo_ground_stabilised)

  00a69	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_ground_stabilised@@3HA, 0 ; eo_ground_stabilised
  00a70	0f 84 8e 00 00
	00		 je	 $LN38@draw_2d_eo

; 1961 : 	{
; 1962 : 		if (draw_large_mfd) // Jabberwock 031107 Designated targets - moved the stab indicator one line up, sorry!

  00a76	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00a7d	74 12		 je	 SHORT $LN39@draw_2d_eo

; 1963 : 		{
; 1964 : 			y_adjust = -38.0;

  00a7f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2180000
  00a87	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0

; 1965 : 		}
; 1966 : 		else

  00a8f	eb 10		 jmp	 SHORT $LN40@draw_2d_eo
$LN39@draw_2d_eo:

; 1967 : 		{
; 1968 : 			y_adjust = -19.0;

  00a91	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1980000
  00a99	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _y_adjust$[ebp], xmm0
$LN40@draw_2d_eo:

; 1969 : 		}
; 1970 : 
; 1971 : 		width = get_mono_font_string_width ("S");

  00aa1	68 00 00 00 00	 push	 OFFSET ??_C@_01CPLAODJH@S@
  00aa6	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00aab	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR _width$[ebp]

; 1972 : 
; 1973 : 		set_2d_mono_font_position (1.0, -1.0);

  00ab1	51		 push	 ecx
  00ab2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00aba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00abf	51		 push	 ecx
  00ac0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00ac8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00acd	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1974 : 
; 1975 : 		set_mono_font_rel_position (-width, y_adjust);

  00ad2	51		 push	 ecx
  00ad3	f3 0f 10 85 18
	ff ff ff	 movss	 xmm0, DWORD PTR _y_adjust$[ebp]
  00adb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ae0	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR _width$[ebp]
  00ae8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00aef	51		 push	 ecx
  00af0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00af5	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1976 : 
; 1977 : 		print_mono_font_string ("S");

  00afa	68 00 00 00 00	 push	 OFFSET ??_C@_01CPLAODJH@S@
  00aff	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string
$LN38@draw_2d_eo:

; 1978 : 	}
; 1979 : 	////////////////////////////////////////
; 1980 : 	//
; 1981 : 	// line graphics
; 1982 : 	//
; 1983 : 	////////////////////////////////////////
; 1984 : 
; 1985 : 	//
; 1986 : 	// datum
; 1987 : 	//
; 1988 : 
; 1989 : 	if (draw_large_mfd)

  00b04	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00b0b	0f 84 0d 01 00
	00		 je	 $LN41@draw_2d_eo

; 1990 : 	{
; 1991 : 		draw_2d_line (-0.075, 0.0, -0.025, 0.0, MFD_COLOUR_GREEN);

  00b11	b8 04 00 00 00	 mov	 eax, 4
  00b16	6b c8 0d	 imul	 ecx, eax, 13
  00b19	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b1f	52		 push	 edx
  00b20	51		 push	 ecx
  00b21	0f 57 c0	 xorps	 xmm0, xmm0
  00b24	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b29	51		 push	 ecx
  00b2a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  00b32	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b37	51		 push	 ecx
  00b38	0f 57 c0	 xorps	 xmm0, xmm0
  00b3b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b40	51		 push	 ecx
  00b41	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00b49	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b4e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1992 : 
; 1993 : 		draw_2d_line (0.035, 0.0, 0.08, 0.0, MFD_COLOUR_GREEN);

  00b53	b8 04 00 00 00	 mov	 eax, 4
  00b58	6b c8 0d	 imul	 ecx, eax, 13
  00b5b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00b61	52		 push	 edx
  00b62	51		 push	 ecx
  00b63	0f 57 c0	 xorps	 xmm0, xmm0
  00b66	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b6b	51		 push	 ecx
  00b6c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  00b74	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b79	51		 push	 ecx
  00b7a	0f 57 c0	 xorps	 xmm0, xmm0
  00b7d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b82	51		 push	 ecx
  00b83	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00b8b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b90	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1994 : 
; 1995 : 		draw_2d_line (0.0, -0.075, 0.0, -0.025, MFD_COLOUR_GREEN);

  00b95	b8 04 00 00 00	 mov	 eax, 4
  00b9a	6b c8 0d	 imul	 ecx, eax, 13
  00b9d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ba3	52		 push	 edx
  00ba4	51		 push	 ecx
  00ba5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  00bad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bb2	51		 push	 ecx
  00bb3	0f 57 c0	 xorps	 xmm0, xmm0
  00bb6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bbb	51		 push	 ecx
  00bbc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00bc4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bc9	51		 push	 ecx
  00bca	0f 57 c0	 xorps	 xmm0, xmm0
  00bcd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bd2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1996 : 
; 1997 : 		draw_2d_line (0.0, 0.035, 0.0, 0.08, MFD_COLOUR_GREEN);

  00bd7	b8 04 00 00 00	 mov	 eax, 4
  00bdc	6b c8 0d	 imul	 ecx, eax, 13
  00bdf	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00be5	52		 push	 edx
  00be6	51		 push	 ecx
  00be7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3da3d70a
  00bef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bf4	51		 push	 ecx
  00bf5	0f 57 c0	 xorps	 xmm0, xmm0
  00bf8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bfd	51		 push	 ecx
  00bfe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00c06	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c0b	51		 push	 ecx
  00c0c	0f 57 c0	 xorps	 xmm0, xmm0
  00c0f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c14	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1998 : 	}
; 1999 : 	else

  00c19	e9 08 01 00 00	 jmp	 $LN42@draw_2d_eo
$LN41@draw_2d_eo:

; 2000 : 	{
; 2001 : 		draw_2d_line (-0.075, 0.0, -0.025, 0.0, MFD_COLOUR_GREEN);

  00c1e	b8 04 00 00 00	 mov	 eax, 4
  00c23	6b c8 0d	 imul	 ecx, eax, 13
  00c26	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c2c	52		 push	 edx
  00c2d	51		 push	 ecx
  00c2e	0f 57 c0	 xorps	 xmm0, xmm0
  00c31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c36	51		 push	 ecx
  00c37	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  00c3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c44	51		 push	 ecx
  00c45	0f 57 c0	 xorps	 xmm0, xmm0
  00c48	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c4d	51		 push	 ecx
  00c4e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00c56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c5b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2002 : 
; 2003 : 		draw_2d_line (0.035, 0.0, 0.09, 0.0, MFD_COLOUR_GREEN);

  00c60	b8 04 00 00 00	 mov	 eax, 4
  00c65	6b c8 0d	 imul	 ecx, eax, 13
  00c68	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00c6e	52		 push	 edx
  00c6f	51		 push	 ecx
  00c70	0f 57 c0	 xorps	 xmm0, xmm0
  00c73	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c78	51		 push	 ecx
  00c79	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3db851ec
  00c81	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c86	51		 push	 ecx
  00c87	0f 57 c0	 xorps	 xmm0, xmm0
  00c8a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c8f	51		 push	 ecx
  00c90	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00c98	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c9d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2004 : 
; 2005 : 		draw_2d_line (0.0, -0.075, 0.0, -0.025, MFD_COLOUR_GREEN);

  00ca2	b8 04 00 00 00	 mov	 eax, 4
  00ca7	6b c8 0d	 imul	 ecx, eax, 13
  00caa	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00cb0	52		 push	 edx
  00cb1	51		 push	 ecx
  00cb2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  00cba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cbf	51		 push	 ecx
  00cc0	0f 57 c0	 xorps	 xmm0, xmm0
  00cc3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cc8	51		 push	 ecx
  00cc9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  00cd1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cd6	51		 push	 ecx
  00cd7	0f 57 c0	 xorps	 xmm0, xmm0
  00cda	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cdf	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2006 : 
; 2007 : 		draw_2d_line (0.0, 0.035, 0.0, 0.09, MFD_COLOUR_GREEN);

  00ce4	b8 04 00 00 00	 mov	 eax, 4
  00ce9	6b c8 0d	 imul	 ecx, eax, 13
  00cec	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00cf2	52		 push	 edx
  00cf3	51		 push	 ecx
  00cf4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3db851ec
  00cfc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d01	51		 push	 ecx
  00d02	0f 57 c0	 xorps	 xmm0, xmm0
  00d05	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d0a	51		 push	 ecx
  00d0b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d0f5c29
  00d13	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d18	51		 push	 ecx
  00d19	0f 57 c0	 xorps	 xmm0, xmm0
  00d1c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d21	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN42@draw_2d_eo:

; 2008 : 	}
; 2009 : 
; 2010 : 	//
; 2011 : 	// azimuth
; 2012 : 	//
; 2013 : 
; 2014 : 	draw_2d_line (-0.5, 0.8, 0.5, 0.8, MFD_COLOUR_GREEN);

  00d26	b8 04 00 00 00	 mov	 eax, 4
  00d2b	6b c8 0d	 imul	 ecx, eax, 13
  00d2e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00d34	52		 push	 edx
  00d35	51		 push	 ecx
  00d36	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00d3e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d43	51		 push	 ecx
  00d44	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00d4c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d51	51		 push	 ecx
  00d52	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00d5a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d5f	51		 push	 ecx
  00d60	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00d68	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d6d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2015 : 
; 2016 : 	marker_position = (eo_azimuth / eo_max_azimuth) * 0.5;

  00d72	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  00d7a	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_max_azimuth@@3MA
  00d82	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00d86	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00d8e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00d92	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _marker_position$[ebp], xmm0

; 2017 : 
; 2018 : 	if (draw_large_mfd)

  00d9a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00da1	0f 84 14 01 00
	00		 je	 $LN43@draw_2d_eo

; 2019 : 	{
; 2020 : 		draw_2d_line (-0.5, 0.8 - 0.02, -0.5, 0.8 + 0.02, MFD_COLOUR_GREEN);

  00da7	b8 04 00 00 00	 mov	 eax, 4
  00dac	6b c8 0d	 imul	 ecx, eax, 13
  00daf	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00db5	52		 push	 edx
  00db6	51		 push	 ecx
  00db7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f51eb85
  00dbf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dc4	51		 push	 ecx
  00dc5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00dcd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dd2	51		 push	 ecx
  00dd3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f47ae14
  00ddb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00de0	51		 push	 ecx
  00de1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00de9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dee	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2021 : 
; 2022 : 		draw_2d_line (0.5, 0.8 - 0.02, 0.5, 0.8 + 0.02, MFD_COLOUR_GREEN);

  00df3	b8 04 00 00 00	 mov	 eax, 4
  00df8	6b c8 0d	 imul	 ecx, eax, 13
  00dfb	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e01	52		 push	 edx
  00e02	51		 push	 ecx
  00e03	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f51eb85
  00e0b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e10	51		 push	 ecx
  00e11	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00e19	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e1e	51		 push	 ecx
  00e1f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f47ae14
  00e27	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e2c	51		 push	 ecx
  00e2d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00e35	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e3a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2023 : 
; 2024 : 		draw_2d_line (0.0, 0.8 - 0.01, 0.0, 0.8 + 0.01, MFD_COLOUR_GREEN);

  00e3f	b8 04 00 00 00	 mov	 eax, 4
  00e44	6b c8 0d	 imul	 ecx, eax, 13
  00e47	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e4d	52		 push	 edx
  00e4e	51		 push	 ecx
  00e4f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4f5c29
  00e57	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e5c	51		 push	 ecx
  00e5d	0f 57 c0	 xorps	 xmm0, xmm0
  00e60	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e65	51		 push	 ecx
  00e66	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4a3d71
  00e6e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e73	51		 push	 ecx
  00e74	0f 57 c0	 xorps	 xmm0, xmm0
  00e77	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e7c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2025 : 
; 2026 : 		draw_2d_mono_sprite (large_azimuth_marker, marker_position, 0.8, MFD_COLOUR_GREEN);

  00e81	b8 04 00 00 00	 mov	 eax, 4
  00e86	6b c8 0d	 imul	 ecx, eax, 13
  00e89	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00e8f	52		 push	 edx
  00e90	51		 push	 ecx
  00e91	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00e99	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e9e	51		 push	 ecx
  00e9f	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _marker_position$[ebp]
  00ea7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eac	68 00 00 00 00	 push	 OFFSET ?large_azimuth_marker@@3PADA
  00eb1	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2027 : 	}
; 2028 : 	else

  00eb6	e9 0f 01 00 00	 jmp	 $LN44@draw_2d_eo
$LN43@draw_2d_eo:

; 2029 : 	{
; 2030 : 		draw_2d_line (-0.5, 0.8 - 0.03, -0.5, 0.8 + 0.03, MFD_COLOUR_GREEN);

  00ebb	b8 04 00 00 00	 mov	 eax, 4
  00ec0	6b c8 0d	 imul	 ecx, eax, 13
  00ec3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00ec9	52		 push	 edx
  00eca	51		 push	 ecx
  00ecb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f547ae1
  00ed3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ed8	51		 push	 ecx
  00ed9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00ee1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ee6	51		 push	 ecx
  00ee7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f451eb8
  00eef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ef4	51		 push	 ecx
  00ef5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00efd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f02	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2031 : 
; 2032 : 		draw_2d_line (0.5, 0.8 - 0.03, 0.5, 0.8 + 0.03, MFD_COLOUR_GREEN);

  00f07	b8 04 00 00 00	 mov	 eax, 4
  00f0c	6b c8 0d	 imul	 ecx, eax, 13
  00f0f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f15	52		 push	 edx
  00f16	51		 push	 ecx
  00f17	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f547ae1
  00f1f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f24	51		 push	 ecx
  00f25	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00f2d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f32	51		 push	 ecx
  00f33	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f451eb8
  00f3b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f40	51		 push	 ecx
  00f41	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00f49	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f4e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2033 : 
; 2034 : 		draw_2d_line (0.0, 0.8 - 0.02, 0.0, 0.8 + 0.02, MFD_COLOUR_GREEN);

  00f53	b8 04 00 00 00	 mov	 eax, 4
  00f58	6b c8 0d	 imul	 ecx, eax, 13
  00f5b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00f61	52		 push	 edx
  00f62	51		 push	 ecx
  00f63	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f51eb85
  00f6b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f70	51		 push	 ecx
  00f71	0f 57 c0	 xorps	 xmm0, xmm0
  00f74	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f79	51		 push	 ecx
  00f7a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f47ae14
  00f82	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f87	51		 push	 ecx
  00f88	0f 57 c0	 xorps	 xmm0, xmm0
  00f8b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f90	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2035 : 
; 2036 : 		draw_2d_mono_sprite (small_azimuth_marker, marker_position, 0.8, MFD_COLOUR_GREEN);

  00f95	b8 04 00 00 00	 mov	 eax, 4
  00f9a	6b c8 0d	 imul	 ecx, eax, 13
  00f9d	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00fa3	52		 push	 edx
  00fa4	51		 push	 ecx
  00fa5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00fad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fb2	51		 push	 ecx
  00fb3	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _marker_position$[ebp]
  00fbb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fc0	68 00 00 00 00	 push	 OFFSET ?small_azimuth_marker@@3PADA
  00fc5	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN44@draw_2d_eo:

; 2037 : 	}
; 2038 : 
; 2039 : 	//
; 2040 : 	// elevation
; 2041 : 	//
; 2042 : 
; 2043 : 	draw_2d_line (-0.9, 0.4, -0.9, -0.3, MFD_COLOUR_GREEN);

  00fca	b8 04 00 00 00	 mov	 eax, 4
  00fcf	6b c8 0d	 imul	 ecx, eax, 13
  00fd2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00fd8	52		 push	 edx
  00fd9	51		 push	 ecx
  00fda	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  00fe2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fe7	51		 push	 ecx
  00fe8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  00ff0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ff5	51		 push	 ecx
  00ff6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  00ffe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01003	51		 push	 ecx
  01004	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  0100c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01011	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2044 : 
; 2045 : 	if (eo_elevation < 0.0)

  01016	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?eo_elevation@@3MA
  0101e	0f 57 c9	 xorps	 xmm1, xmm1
  01021	66 0f 2f c8	 comisd	 xmm1, xmm0
  01025	76 2a		 jbe	 SHORT $LN45@draw_2d_eo

; 2046 : 	{
; 2047 : 		marker_position = (eo_elevation / eo_min_elevation) * -0.3;

  01027	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  0102f	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_min_elevation@@3MA
  01037	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0103b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfd3333333333333
  01043	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01047	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _marker_position$[ebp], xmm0

; 2048 : 	}
; 2049 : 	else

  0104f	eb 28		 jmp	 SHORT $LN46@draw_2d_eo
$LN45@draw_2d_eo:

; 2050 : 	{
; 2051 : 		marker_position = (eo_elevation / eo_max_elevation) * 0.4;

  01051	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  01059	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_max_elevation@@3MA
  01061	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01065	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fd999999999999a
  0106d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01071	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _marker_position$[ebp], xmm0
$LN46@draw_2d_eo:

; 2052 : 	}
; 2053 : 
; 2054 : 	if (draw_large_mfd)

  01079	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01080	0f 84 14 01 00
	00		 je	 $LN47@draw_2d_eo

; 2055 : 	{
; 2056 : 		draw_2d_line (-0.9 - 0.02, 0.4, -0.9 + 0.02, 0.4, MFD_COLOUR_GREEN);

  01086	b8 04 00 00 00	 mov	 eax, 4
  0108b	6b c8 0d	 imul	 ecx, eax, 13
  0108e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01094	52		 push	 edx
  01095	51		 push	 ecx
  01096	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  0109e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010a3	51		 push	 ecx
  010a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  010ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010b1	51		 push	 ecx
  010b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  010ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010bf	51		 push	 ecx
  010c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6b851f
  010c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010cd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2057 : 
; 2058 : 		draw_2d_line (-0.9 - 0.02, -0.3, -0.9 + 0.02, -0.3, MFD_COLOUR_GREEN);

  010d2	b8 04 00 00 00	 mov	 eax, 4
  010d7	6b c8 0d	 imul	 ecx, eax, 13
  010da	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  010e0	52		 push	 edx
  010e1	51		 push	 ecx
  010e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  010ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010ef	51		 push	 ecx
  010f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  010f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010fd	51		 push	 ecx
  010fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  01106	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0110b	51		 push	 ecx
  0110c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6b851f
  01114	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01119	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2059 : 
; 2060 : 		draw_2d_line (-0.9 - 0.01, 0.0, -0.9 + 0.01, 0.0, MFD_COLOUR_GREEN);

  0111e	b8 04 00 00 00	 mov	 eax, 4
  01123	6b c8 0d	 imul	 ecx, eax, 13
  01126	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0112c	52		 push	 edx
  0112d	51		 push	 ecx
  0112e	0f 57 c0	 xorps	 xmm0, xmm0
  01131	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01136	51		 push	 ecx
  01137	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf63d70a
  0113f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01144	51		 push	 ecx
  01145	0f 57 c0	 xorps	 xmm0, xmm0
  01148	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0114d	51		 push	 ecx
  0114e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf68f5c3
  01156	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0115b	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2061 : 
; 2062 : 		draw_2d_mono_sprite (large_elevation_marker, -0.9, marker_position, MFD_COLOUR_GREEN);

  01160	b8 04 00 00 00	 mov	 eax, 4
  01165	6b c8 0d	 imul	 ecx, eax, 13
  01168	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0116e	52		 push	 edx
  0116f	51		 push	 ecx
  01170	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _marker_position$[ebp]
  01178	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0117d	51		 push	 ecx
  0117e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  01186	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0118b	68 00 00 00 00	 push	 OFFSET ?large_elevation_marker@@3PADA
  01190	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2063 : 	}
; 2064 : 	else

  01195	e9 0f 01 00 00	 jmp	 $LN48@draw_2d_eo
$LN47@draw_2d_eo:

; 2065 : 	{
; 2066 : 		draw_2d_line (-0.9 - 0.03, 0.2, -0.9 + 0.03, 0.2, MFD_COLOUR_GREEN);

  0119a	b8 04 00 00 00	 mov	 eax, 4
  0119f	6b c8 0d	 imul	 ecx, eax, 13
  011a2	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  011a8	52		 push	 edx
  011a9	51		 push	 ecx
  011aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  011b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011b7	51		 push	 ecx
  011b8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5eb852
  011c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011c5	51		 push	 ecx
  011c6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  011ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011d3	51		 push	 ecx
  011d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6e147b
  011dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011e1	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2067 : 
; 2068 : 		draw_2d_line (-0.9 - 0.03, -0.6, -0.9 + 0.03, -0.6, MFD_COLOUR_GREEN);

  011e6	b8 04 00 00 00	 mov	 eax, 4
  011eb	6b c8 0d	 imul	 ecx, eax, 13
  011ee	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  011f4	52		 push	 edx
  011f5	51		 push	 ecx
  011f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  011fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01203	51		 push	 ecx
  01204	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf5eb852
  0120c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01211	51		 push	 ecx
  01212	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf19999a
  0121a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0121f	51		 push	 ecx
  01220	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6e147b
  01228	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0122d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2069 : 
; 2070 : 		draw_2d_line (-0.9 - 0.02, 0.0, -0.9 + 0.02, 0.0, MFD_COLOUR_GREEN);

  01232	b8 04 00 00 00	 mov	 eax, 4
  01237	6b c8 0d	 imul	 ecx, eax, 13
  0123a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01240	52		 push	 edx
  01241	51		 push	 ecx
  01242	0f 57 c0	 xorps	 xmm0, xmm0
  01245	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0124a	51		 push	 ecx
  0124b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6147ae
  01253	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01258	51		 push	 ecx
  01259	0f 57 c0	 xorps	 xmm0, xmm0
  0125c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01261	51		 push	 ecx
  01262	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf6b851f
  0126a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0126f	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2071 : 
; 2072 : 		draw_2d_mono_sprite (small_elevation_marker, -0.9, marker_position, MFD_COLOUR_GREEN);

  01274	b8 04 00 00 00	 mov	 eax, 4
  01279	6b c8 0d	 imul	 ecx, eax, 13
  0127c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01282	52		 push	 edx
  01283	51		 push	 ecx
  01284	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _marker_position$[ebp]
  0128c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01291	51		 push	 ecx
  01292	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  0129a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0129f	68 00 00 00 00	 push	 OFFSET ?small_elevation_marker@@3PADA
  012a4	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN48@draw_2d_eo:

; 2073 : 	}
; 2074 : 
; 2075 : 	//
; 2076 : 	// range
; 2077 : 	//
; 2078 : 
; 2079 : 	draw_2d_line (0.9, 0.0, 0.9, -0.5, MFD_COLOUR_GREEN);

  012a9	b8 04 00 00 00	 mov	 eax, 4
  012ae	6b c8 0d	 imul	 ecx, eax, 13
  012b1	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  012b7	52		 push	 edx
  012b8	51		 push	 ecx
  012b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  012c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012c6	51		 push	 ecx
  012c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  012cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012d4	51		 push	 ecx
  012d5	0f 57 c0	 xorps	 xmm0, xmm0
  012d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012dd	51		 push	 ecx
  012de	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  012e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012eb	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2080 : 
; 2081 : 	if (draw_large_mfd)

  012f0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  012f7	0f 84 6f 04 00
	00		 je	 $LN49@draw_2d_eo

; 2082 : 	{
; 2083 : 		draw_2d_line (0.9,  0.000, 0.9 + 0.02,  0.000, MFD_COLOUR_GREEN);

  012fd	b8 04 00 00 00	 mov	 eax, 4
  01302	6b c8 0d	 imul	 ecx, eax, 13
  01305	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0130b	52		 push	 edx
  0130c	51		 push	 ecx
  0130d	0f 57 c0	 xorps	 xmm0, xmm0
  01310	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01315	51		 push	 ecx
  01316	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6b851f
  0131e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01323	51		 push	 ecx
  01324	0f 57 c0	 xorps	 xmm0, xmm0
  01327	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0132c	51		 push	 ecx
  0132d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01335	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0133a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2084 : 		draw_2d_line (0.9, -0.025, 0.9 + 0.01, -0.025, MFD_COLOUR_GREEN);

  0133f	b8 04 00 00 00	 mov	 eax, 4
  01344	6b c8 0d	 imul	 ecx, eax, 13
  01347	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0134d	52		 push	 edx
  0134e	51		 push	 ecx
  0134f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  01357	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0135c	51		 push	 ecx
  0135d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  01365	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0136a	51		 push	 ecx
  0136b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bccccccd
  01373	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01378	51		 push	 ecx
  01379	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01381	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01386	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2085 : 		draw_2d_line (0.9, -0.050, 0.9 + 0.01, -0.050, MFD_COLOUR_GREEN);

  0138b	b8 04 00 00 00	 mov	 eax, 4
  01390	6b c8 0d	 imul	 ecx, eax, 13
  01393	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01399	52		 push	 edx
  0139a	51		 push	 ecx
  0139b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  013a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013a8	51		 push	 ecx
  013a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  013b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013b6	51		 push	 ecx
  013b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd4ccccd
  013bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013c4	51		 push	 ecx
  013c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  013cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013d2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2086 : 		draw_2d_line (0.9, -0.075, 0.9 + 0.01, -0.075, MFD_COLOUR_GREEN);

  013d7	b8 04 00 00 00	 mov	 eax, 4
  013dc	6b c8 0d	 imul	 ecx, eax, 13
  013df	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  013e5	52		 push	 edx
  013e6	51		 push	 ecx
  013e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  013ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013f4	51		 push	 ecx
  013f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  013fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01402	51		 push	 ecx
  01403	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bd99999a
  0140b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01410	51		 push	 ecx
  01411	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01419	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0141e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2087 : 
; 2088 : 		draw_2d_line (0.9, -0.100, 0.9 + 0.02, -0.100, MFD_COLOUR_GREEN);

  01423	b8 04 00 00 00	 mov	 eax, 4
  01428	6b c8 0d	 imul	 ecx, eax, 13
  0142b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01431	52		 push	 edx
  01432	51		 push	 ecx
  01433	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  0143b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01440	51		 push	 ecx
  01441	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6b851f
  01449	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0144e	51		 push	 ecx
  0144f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  01457	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0145c	51		 push	 ecx
  0145d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01465	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0146a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2089 : 		draw_2d_line (0.9, -0.125, 0.9 + 0.01, -0.125, MFD_COLOUR_GREEN);

  0146f	b8 04 00 00 00	 mov	 eax, 4
  01474	6b c8 0d	 imul	 ecx, eax, 13
  01477	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0147d	52		 push	 edx
  0147e	51		 push	 ecx
  0147f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be000000
  01487	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0148c	51		 push	 ecx
  0148d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  01495	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0149a	51		 push	 ecx
  0149b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be000000
  014a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014a8	51		 push	 ecx
  014a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  014b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014b6	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2090 : 		draw_2d_line (0.9, -0.150, 0.9 + 0.01, -0.150, MFD_COLOUR_GREEN);

  014bb	b8 04 00 00 00	 mov	 eax, 4
  014c0	6b c8 0d	 imul	 ecx, eax, 13
  014c3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  014c9	52		 push	 edx
  014ca	51		 push	 ecx
  014cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  014d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014d8	51		 push	 ecx
  014d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  014e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014e6	51		 push	 ecx
  014e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  014ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014f4	51		 push	 ecx
  014f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  014fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01502	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2091 : 		draw_2d_line (0.9, -0.175, 0.9 + 0.01, -0.175, MFD_COLOUR_GREEN);

  01507	b8 04 00 00 00	 mov	 eax, 4
  0150c	6b c8 0d	 imul	 ecx, eax, 13
  0150f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01515	52		 push	 edx
  01516	51		 push	 ecx
  01517	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be333333
  0151f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01524	51		 push	 ecx
  01525	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  0152d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01532	51		 push	 ecx
  01533	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be333333
  0153b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01540	51		 push	 ecx
  01541	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01549	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0154e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2092 : 
; 2093 : 		draw_2d_line (0.9, -0.200, 0.9 + 0.02, -0.200, MFD_COLOUR_GREEN);

  01553	b8 04 00 00 00	 mov	 eax, 4
  01558	6b c8 0d	 imul	 ecx, eax, 13
  0155b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01561	52		 push	 edx
  01562	51		 push	 ecx
  01563	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  0156b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01570	51		 push	 ecx
  01571	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6b851f
  01579	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0157e	51		 push	 ecx
  0157f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  01587	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0158c	51		 push	 ecx
  0158d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01595	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0159a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2094 : 		draw_2d_line (0.9, -0.225, 0.9 + 0.01, -0.225, MFD_COLOUR_GREEN);

  0159f	b8 04 00 00 00	 mov	 eax, 4
  015a4	6b c8 0d	 imul	 ecx, eax, 13
  015a7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  015ad	52		 push	 edx
  015ae	51		 push	 ecx
  015af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be666666
  015b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015bc	51		 push	 ecx
  015bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  015c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015ca	51		 push	 ecx
  015cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be666666
  015d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015d8	51		 push	 ecx
  015d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  015e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015e6	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2095 : 		draw_2d_line (0.9, -0.250, 0.9 + 0.01, -0.250, MFD_COLOUR_GREEN);

  015eb	b8 04 00 00 00	 mov	 eax, 4
  015f0	6b c8 0d	 imul	 ecx, eax, 13
  015f3	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  015f9	52		 push	 edx
  015fa	51		 push	 ecx
  015fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  01603	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01608	51		 push	 ecx
  01609	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  01611	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01616	51		 push	 ecx
  01617	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be800000
  0161f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01624	51		 push	 ecx
  01625	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  0162d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01632	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2096 : 		draw_2d_line (0.9, -0.275, 0.9 + 0.01, -0.275, MFD_COLOUR_GREEN);

  01637	b8 04 00 00 00	 mov	 eax, 4
  0163c	6b c8 0d	 imul	 ecx, eax, 13
  0163f	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01645	52		 push	 edx
  01646	51		 push	 ecx
  01647	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8ccccd
  0164f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01654	51		 push	 ecx
  01655	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f68f5c3
  0165d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01662	51		 push	 ecx
  01663	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be8ccccd
  0166b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01670	51		 push	 ecx
  01671	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01679	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0167e	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2097 : 
; 2098 : 		draw_2d_line (0.9, -0.300, 0.9 + 0.02, -0.300, MFD_COLOUR_GREEN);

  01683	b8 04 00 00 00	 mov	 eax, 4
  01688	6b c8 0d	 imul	 ecx, eax, 13
  0168b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01691	52		 push	 edx
  01692	51		 push	 ecx
  01693	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  0169b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016a0	51		 push	 ecx
  016a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6b851f
  016a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016ae	51		 push	 ecx
  016af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  016b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016bc	51		 push	 ecx
  016bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  016c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016ca	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2099 : 
; 2100 : 		draw_2d_line (0.9, -0.400, 0.9 + 0.02, -0.400, MFD_COLOUR_GREEN);

  016cf	b8 04 00 00 00	 mov	 eax, 4
  016d4	6b c8 0d	 imul	 ecx, eax, 13
  016d7	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  016dd	52		 push	 edx
  016de	51		 push	 ecx
  016df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  016e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016ec	51		 push	 ecx
  016ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6b851f
  016f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016fa	51		 push	 ecx
  016fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  01703	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01708	51		 push	 ecx
  01709	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01711	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01716	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2101 : 
; 2102 : 		draw_2d_line (0.9, -0.500, 0.9 + 0.02, -0.500, MFD_COLOUR_GREEN);

  0171b	b8 04 00 00 00	 mov	 eax, 4
  01720	6b c8 0d	 imul	 ecx, eax, 13
  01723	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01729	52		 push	 edx
  0172a	51		 push	 ecx
  0172b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  01733	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01738	51		 push	 ecx
  01739	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6b851f
  01741	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01746	51		 push	 ecx
  01747	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  0174f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01754	51		 push	 ecx
  01755	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  0175d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01762	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2103 : 	}
; 2104 : 	else

  01767	e9 be 01 00 00	 jmp	 $LN50@draw_2d_eo
$LN49@draw_2d_eo:

; 2105 : 	{
; 2106 : 		draw_2d_line (0.9,  0.000, 0.9 + 0.03,  0.000, MFD_COLOUR_GREEN);

  0176c	b8 04 00 00 00	 mov	 eax, 4
  01771	6b c8 0d	 imul	 ecx, eax, 13
  01774	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0177a	52		 push	 edx
  0177b	51		 push	 ecx
  0177c	0f 57 c0	 xorps	 xmm0, xmm0
  0177f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01784	51		 push	 ecx
  01785	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  0178d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01792	51		 push	 ecx
  01793	0f 57 c0	 xorps	 xmm0, xmm0
  01796	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0179b	51		 push	 ecx
  0179c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  017a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017a9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2107 : 
; 2108 : 		draw_2d_line (0.9, -0.100, 0.9 + 0.03, -0.100, MFD_COLOUR_GREEN);

  017ae	b8 04 00 00 00	 mov	 eax, 4
  017b3	6b c8 0d	 imul	 ecx, eax, 13
  017b6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  017bc	52		 push	 edx
  017bd	51		 push	 ecx
  017be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  017c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017cb	51		 push	 ecx
  017cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  017d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017d9	51		 push	 ecx
  017da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  017e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017e7	51		 push	 ecx
  017e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  017f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017f5	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2109 : 
; 2110 : 		draw_2d_line (0.9, -0.200, 0.9 + 0.03, -0.200, MFD_COLOUR_GREEN);

  017fa	b8 04 00 00 00	 mov	 eax, 4
  017ff	6b c8 0d	 imul	 ecx, eax, 13
  01802	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01808	52		 push	 edx
  01809	51		 push	 ecx
  0180a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  01812	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01817	51		 push	 ecx
  01818	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  01820	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01825	51		 push	 ecx
  01826	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  0182e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01833	51		 push	 ecx
  01834	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  0183c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01841	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2111 : 
; 2112 : 		draw_2d_line (0.9, -0.300, 0.9 + 0.03, -0.300, MFD_COLOUR_GREEN);

  01846	b8 04 00 00 00	 mov	 eax, 4
  0184b	6b c8 0d	 imul	 ecx, eax, 13
  0184e	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01854	52		 push	 edx
  01855	51		 push	 ecx
  01856	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  0185e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01863	51		 push	 ecx
  01864	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  0186c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01871	51		 push	 ecx
  01872	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  0187a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0187f	51		 push	 ecx
  01880	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01888	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0188d	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2113 : 
; 2114 : 		draw_2d_line (0.9, -0.400, 0.9 + 0.03, -0.400, MFD_COLOUR_GREEN);

  01892	b8 04 00 00 00	 mov	 eax, 4
  01897	6b c8 0d	 imul	 ecx, eax, 13
  0189a	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  018a0	52		 push	 edx
  018a1	51		 push	 ecx
  018a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  018aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018af	51		 push	 ecx
  018b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  018b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018bd	51		 push	 ecx
  018be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  018c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018cb	51		 push	 ecx
  018cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  018d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018d9	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2115 : 
; 2116 : 		draw_2d_line (0.9, -0.500, 0.9 + 0.03, -0.500, MFD_COLOUR_GREEN);

  018de	b8 04 00 00 00	 mov	 eax, 4
  018e3	6b c8 0d	 imul	 ecx, eax, 13
  018e6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  018ec	52		 push	 edx
  018ed	51		 push	 ecx
  018ee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  018f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018fb	51		 push	 ecx
  018fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f6e147b
  01904	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01909	51		 push	 ecx
  0190a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  01912	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01917	51		 push	 ecx
  01918	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  01920	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01925	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN50@draw_2d_eo:

; 2117 : 	}
; 2118 : 
; 2119 : 	if (target_range > 0.0)

  0192a	f3 0f 5a 85 1c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _target_range$[ebp]
  01932	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0193a	0f 86 aa 00 00
	00		 jbe	 $LN53@draw_2d_eo

; 2120 : 	{
; 2121 : 		marker_position = (min (target_range, eo_max_visual_range) / eo_max_visual_range) * -0.5;

  01940	68 00 00 00 00	 push	 OFFSET ?eo_max_visual_range@@3MA ; eo_max_visual_range
  01945	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR _target_range$[ebp]
  0194b	50		 push	 eax
  0194c	e8 00 00 00 00	 call	 ??$min@M@std@@YGABMABM0@Z ; std::min<float>
  01951	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01955	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR ?eo_max_visual_range@@3MA
  0195d	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01961	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@bfe0000000000000
  01969	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0196d	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _marker_position$[ebp], xmm0

; 2122 : 
; 2123 : 		if (draw_large_mfd)

  01975	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0197c	74 37		 je	 SHORT $LN52@draw_2d_eo

; 2124 : 		{
; 2125 : 			draw_2d_mono_sprite (large_range_marker, 0.9, marker_position, MFD_COLOUR_GREEN);

  0197e	b8 04 00 00 00	 mov	 eax, 4
  01983	6b c8 0d	 imul	 ecx, eax, 13
  01986	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0198c	52		 push	 edx
  0198d	51		 push	 ecx
  0198e	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _marker_position$[ebp]
  01996	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0199b	51		 push	 ecx
  0199c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  019a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019a9	68 00 00 00 00	 push	 OFFSET ?large_range_marker@@3PADA
  019ae	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 2126 : 		}
; 2127 : 		else

  019b3	eb 35		 jmp	 SHORT $LN53@draw_2d_eo
$LN52@draw_2d_eo:

; 2128 : 		{
; 2129 : 			draw_2d_mono_sprite (small_range_marker, 0.9, marker_position, MFD_COLOUR_GREEN);

  019b5	b8 04 00 00 00	 mov	 eax, 4
  019ba	6b c8 0d	 imul	 ecx, eax, 13
  019bd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  019c3	52		 push	 edx
  019c4	51		 push	 ecx
  019c5	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _marker_position$[ebp]
  019cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019d2	51		 push	 ecx
  019d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  019db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019e0	68 00 00 00 00	 push	 OFFSET ?small_range_marker@@3PADA
  019e5	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN53@draw_2d_eo:

; 2130 : 		}
; 2131 : 	}
; 2132 : 
; 2133 : 	//
; 2134 : 	// target gates
; 2135 : 	//
; 2136 : 
; 2137 : 	if (valid_3d)

  019ea	83 7d 14 00	 cmp	 DWORD PTR _valid_3d$[ebp], 0
  019ee	0f 84 c3 04 00
	00		 je	 $LN56@draw_2d_eo

; 2138 : 	{
; 2139 : 		if (target)

  019f4	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _target$[ebp], 0
  019fb	0f 84 b6 04 00
	00		 je	 $LN56@draw_2d_eo

; 2140 : 		{
; 2141 : 			if (!((!d3d_can_render_to_texture) && (!draw_large_mfd)))

  01a01	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  01a08	75 0d		 jne	 SHORT $LN57@draw_2d_eo
  01a0a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  01a11	0f 84 a0 04 00
	00		 je	 $LN56@draw_2d_eo
$LN57@draw_2d_eo:

; 2142 : 			{
; 2143 : 				tmp = main_vp;

  01a17	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01a1c	be 00 00 00 00	 mov	 esi, OFFSET ?main_vp@@3UVIEWPOINT@@A ; main_vp
  01a21	8d bd c0 fe ff
	ff		 lea	 edi, DWORD PTR _tmp$[ebp]
  01a27	f3 a5		 rep movsd

; 2144 : 
; 2145 : 				main_vp = eo_vp;

  01a29	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01a2e	be 00 00 00 00	 mov	 esi, OFFSET ?eo_vp@@3UVIEWPOINT@@A ; eo_vp
  01a33	bf 00 00 00 00	 mov	 edi, OFFSET ?main_vp@@3UVIEWPOINT@@A ; main_vp
  01a38	f3 a5		 rep movsd

; 2146 : 
; 2147 : 				get_local_entity_target_point (target, &target_point);

  01a3a	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _target_point$[ebp]
  01a40	50		 push	 eax
  01a41	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR _target$[ebp]
  01a47	51		 push	 ecx
  01a48	e8 00 00 00 00	 call	 ?get_local_entity_target_point@@YGXPAUENTITY@@PAUVEC3D@@@Z ; get_local_entity_target_point

; 2148 : 
; 2149 : 				visibility = get_position_3d_screen_coordinates (&target_point, &i, &j);

  01a4d	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _j$[ebp]
  01a53	50		 push	 eax
  01a54	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _i$[ebp]
  01a5a	51		 push	 ecx
  01a5b	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _target_point$[ebp]
  01a61	52		 push	 edx
  01a62	e8 00 00 00 00	 call	 ?get_position_3d_screen_coordinates@@YG?AW4OBJECT_3D_VISIBILITY@@PAUVEC3D@@PAM1@Z ; get_position_3d_screen_coordinates
  01a67	89 85 bc fe ff
	ff		 mov	 DWORD PTR _visibility$[ebp], eax

; 2150 : 
; 2151 : 				if ((visibility == OBJECT_3D_COMPLETELY_VISIBLE) || (visibility == OBJECT_3D_PARTIALLY_VISIBLE))

  01a6d	83 bd bc fe ff
	ff 01		 cmp	 DWORD PTR _visibility$[ebp], 1
  01a74	74 0d		 je	 SHORT $LN59@draw_2d_eo
  01a76	83 bd bc fe ff
	ff 02		 cmp	 DWORD PTR _visibility$[ebp], 2
  01a7d	0f 85 22 04 00
	00		 jne	 $LN58@draw_2d_eo
$LN59@draw_2d_eo:

; 2152 : 				{
; 2153 : 					transform_mfd_screen_co_ords_to_mfd_texture_co_ords (&i, &j);

  01a83	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _j$[ebp]
  01a89	50		 push	 eax
  01a8a	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _i$[ebp]
  01a90	51		 push	 ecx
  01a91	e8 00 00 00 00	 call	 ?transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z ; transform_mfd_screen_co_ords_to_mfd_texture_co_ords

; 2154 : 
; 2155 : 					get_2d_world_position (i, j, &x, &y);

  01a96	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _y$[ebp]
  01a9c	50		 push	 eax
  01a9d	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _x$[ebp]
  01aa3	51		 push	 ecx
  01aa4	51		 push	 ecx
  01aa5	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _j$[ebp]
  01aad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ab2	51		 push	 ecx
  01ab3	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _i$[ebp]
  01abb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ac0	e8 00 00 00 00	 call	 ?get_2d_world_position@@YGXMMPAM0@Z ; get_2d_world_position

; 2156 : 
; 2157 : 					draw_2d_line (x - 0.20, y + 0.20, x - 0.15, y + 0.20, MFD_COLOUR_GREEN);

  01ac5	b8 04 00 00 00	 mov	 eax, 4
  01aca	6b c8 0d	 imul	 ecx, eax, 13
  01acd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01ad3	52		 push	 edx
  01ad4	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01adc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01ae4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01ae8	51		 push	 ecx
  01ae9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aee	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01af6	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01afe	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b02	51		 push	 ecx
  01b03	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b08	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01b10	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01b18	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b1c	51		 push	 ecx
  01b1d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b22	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01b2a	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01b32	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b36	51		 push	 ecx
  01b37	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b3c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2158 : 					draw_2d_line (x + 0.20, y + 0.20, x + 0.15, y + 0.20, MFD_COLOUR_GREEN);

  01b41	b8 04 00 00 00	 mov	 eax, 4
  01b46	6b c8 0d	 imul	 ecx, eax, 13
  01b49	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01b4f	52		 push	 edx
  01b50	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01b58	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01b60	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b64	51		 push	 ecx
  01b65	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b6a	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01b72	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01b7a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b7e	51		 push	 ecx
  01b7f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b84	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01b8c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01b94	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01b98	51		 push	 ecx
  01b99	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b9e	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01ba6	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01bae	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01bb2	51		 push	 ecx
  01bb3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bb8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2159 : 					draw_2d_line (x - 0.20, y - 0.20, x - 0.15, y - 0.20, MFD_COLOUR_GREEN);

  01bbd	b8 04 00 00 00	 mov	 eax, 4
  01bc2	6b c8 0d	 imul	 ecx, eax, 13
  01bc5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01bcb	52		 push	 edx
  01bcc	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01bd4	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01bdc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01be0	51		 push	 ecx
  01be1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01be6	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01bee	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01bf6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01bfa	51		 push	 ecx
  01bfb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c00	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01c08	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01c10	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c14	51		 push	 ecx
  01c15	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c1a	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01c22	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01c2a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c2e	51		 push	 ecx
  01c2f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c34	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2160 : 					draw_2d_line (x + 0.20, y - 0.20, x + 0.15, y - 0.20, MFD_COLOUR_GREEN);

  01c39	b8 04 00 00 00	 mov	 eax, 4
  01c3e	6b c8 0d	 imul	 ecx, eax, 13
  01c41	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01c47	52		 push	 edx
  01c48	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01c50	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01c58	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c5c	51		 push	 ecx
  01c5d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c62	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01c6a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01c72	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c76	51		 push	 ecx
  01c77	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c7c	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01c84	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01c8c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01c90	51		 push	 ecx
  01c91	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c96	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01c9e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01ca6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01caa	51		 push	 ecx
  01cab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cb0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2161 : 					draw_2d_line (x - 0.20, y + 0.20, x - 0.20, y + 0.15, MFD_COLOUR_GREEN);

  01cb5	b8 04 00 00 00	 mov	 eax, 4
  01cba	6b c8 0d	 imul	 ecx, eax, 13
  01cbd	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01cc3	52		 push	 edx
  01cc4	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01ccc	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01cd4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01cd8	51		 push	 ecx
  01cd9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cde	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01ce6	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01cee	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01cf2	51		 push	 ecx
  01cf3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cf8	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01d00	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01d08	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d0c	51		 push	 ecx
  01d0d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d12	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01d1a	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01d22	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d26	51		 push	 ecx
  01d27	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d2c	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2162 : 					draw_2d_line (x - 0.20, y - 0.20, x - 0.20, y - 0.15, MFD_COLOUR_GREEN);

  01d31	b8 04 00 00 00	 mov	 eax, 4
  01d36	6b c8 0d	 imul	 ecx, eax, 13
  01d39	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01d3f	52		 push	 edx
  01d40	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01d48	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01d50	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d54	51		 push	 ecx
  01d55	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d5a	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01d62	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01d6a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d6e	51		 push	 ecx
  01d6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d74	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01d7c	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01d84	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01d88	51		 push	 ecx
  01d89	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d8e	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01d96	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01d9e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01da2	51		 push	 ecx
  01da3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01da8	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2163 : 					draw_2d_line (x + 0.20, y + 0.20, x + 0.20, y + 0.15, MFD_COLOUR_GREEN);

  01dad	b8 04 00 00 00	 mov	 eax, 4
  01db2	6b c8 0d	 imul	 ecx, eax, 13
  01db5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01dbb	52		 push	 edx
  01dbc	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01dc4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01dcc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01dd0	51		 push	 ecx
  01dd1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dd6	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01dde	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01de6	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01dea	51		 push	 ecx
  01deb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01df0	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01df8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01e00	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e04	51		 push	 ecx
  01e05	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e0a	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01e12	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01e1a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e1e	51		 push	 ecx
  01e1f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e24	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 2164 : 					draw_2d_line (x + 0.20, y - 0.20, x + 0.20, y - 0.15, MFD_COLOUR_GREEN);

  01e29	b8 04 00 00 00	 mov	 eax, 4
  01e2e	6b c8 0d	 imul	 ecx, eax, 13
  01e31	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  01e37	52		 push	 edx
  01e38	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01e40	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc3333333333333
  01e48	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e4c	51		 push	 ecx
  01e4d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e52	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01e5a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01e62	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e66	51		 push	 ecx
  01e67	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e6c	f3 0f 5a 85 08
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  01e74	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01e7c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e80	51		 push	 ecx
  01e81	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e86	f3 0f 5a 85 0c
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  01e8e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc999999999999a
  01e96	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01e9a	51		 push	 ecx
  01e9b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ea0	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line
$LN58@draw_2d_eo:

; 2165 : 				}
; 2166 : 
; 2167 : 				main_vp = tmp;

  01ea5	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  01eaa	8d b5 c0 fe ff
	ff		 lea	 esi, DWORD PTR _tmp$[ebp]
  01eb0	bf 00 00 00 00	 mov	 edi, OFFSET ?main_vp@@3UVIEWPOINT@@A ; main_vp
  01eb5	f3 a5		 rep movsd
$LN56@draw_2d_eo:
$LN1@draw_2d_eo:

; 2168 : 			}
; 2169 : 		}
; 2170 : 	}
; 2171 : }

  01eb7	5f		 pop	 edi
  01eb8	5e		 pop	 esi
  01eb9	5b		 pop	 ebx
  01eba	8b e5		 mov	 esp, ebp
  01ebc	5d		 pop	 ebp
  01ebd	c2 10 00	 ret	 16			; 00000010H
?draw_2d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@HH@Z ENDP ; draw_2d_eo_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z
_TEXT	SEGMENT
tv216 = -288						; size = 4
tv145 = -288						; size = 4
tv85 = -288						; size = 4
tv208 = -284						; size = 4
tv157 = -284						; size = 4
tv137 = -284						; size = 4
tv77 = -284						; size = 4
_m$1 = -216						; size = 36
_tmp_vp$2 = -180					; size = 48
_rotated_eo_vp$3 = -132					; size = 48
_centered_eo_vp$4 = -84					; size = 48
_position$5 = -36					; size = 12
_day_segment_type$ = -24				; size = 4
_weather_mode$ = -20					; size = 4
_position$ = -16					; size = 4
_noise_level$ = -12					; size = 4
_light_level$ = -8					; size = 4
_zoom$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
_tint$ = 16						; size = 4
?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z PROC ; draw_full_screen_3d_eo_display, COMDAT

; 1526 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1527 : 	float
; 1528 : 		zoom;
; 1529 : 
; 1530 : 	display_3d_light_levels
; 1531 : 		light_level;
; 1532 : 
; 1533 : 	display_3d_noise_levels
; 1534 : 		noise_level;
; 1535 : 
; 1536 : 	vec3d
; 1537 : 		*position;
; 1538 : 
; 1539 : 	weathermodes
; 1540 : 		weather_mode;
; 1541 : 
; 1542 : 	day_segment_types
; 1543 : 		day_segment_type;
; 1544 : 
; 1545 : 	ASSERT (eo);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  00010	75 18		 jne	 SHORT $LN4@draw_full_
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z@4JA
  00017	83 c0 13	 add	 eax, 19			; 00000013H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_full_:

; 1546 : 
; 1547 : 	zoom = convert_linear_view_value (eo);

  0002a	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?convert_linear_view_value@@YGMPAUEO_PARAMS_DYNAMIC_MOVE@@@Z ; convert_linear_view_value
  00033	d9 5d fc	 fstp	 DWORD PTR _zoom$[ebp]

; 1548 : 
; 1549 : 	position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  00036	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0003d	74 0f		 je	 SHORT $LN12@draw_full_
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00044	8b 08		 mov	 ecx, DWORD PTR [eax]
  00046	89 8d e4 fe ff
	ff		 mov	 DWORD PTR tv77[ebp], ecx
  0004c	eb 24		 jmp	 SHORT $LN13@draw_full_
$LN12@draw_full_:
  0004e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z@4JA
  00054	83 c2 17	 add	 edx, 23			; 00000017H
  00057	52		 push	 edx
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00068	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv77[ebp], 0
$LN13@draw_full_:
  00072	b9 01 00 00 00	 mov	 ecx, 1
  00077	85 c9		 test	 ecx, ecx
  00079	74 0c		 je	 SHORT $LN14@draw_full_
  0007b	c7 85 e0 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv85[ebp], 8
  00085	eb 24		 jmp	 SHORT $LN15@draw_full_
$LN14@draw_full_:
  00087	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z@4JA
  0008d	83 c2 17	 add	 edx, 23			; 00000017H
  00090	52		 push	 edx
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00096	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a1	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv85[ebp], 0
$LN15@draw_full_:
  000ab	6a 08		 push	 8
  000ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000b3	51		 push	 ecx
  000b4	6b 95 e4 fe ff
	ff 60		 imul	 edx, DWORD PTR tv77[ebp], 96
  000bb	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv85[ebp]
  000c1	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000c8	ff d1		 call	 ecx
  000ca	89 45 f0	 mov	 DWORD PTR _position$[ebp], eax

; 1550 : 
; 1551 : 	weather_mode = get_simple_session_weather_at_point (position);

  000cd	8b 45 f0	 mov	 eax, DWORD PTR _position$[ebp]
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z ; get_simple_session_weather_at_point
  000d6	89 45 ec	 mov	 DWORD PTR _weather_mode$[ebp], eax

; 1552 : 
; 1553 : 	ASSERT ((weather_mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LAST));

  000d9	83 7d ec 00	 cmp	 DWORD PTR _weather_mode$[ebp], 0
  000dd	7e 06		 jle	 SHORT $LN6@draw_full_
  000df	83 7d ec 05	 cmp	 DWORD PTR _weather_mode$[ebp], 5
  000e3	7c 18		 jl	 SHORT $LN5@draw_full_
$LN6@draw_full_:
  000e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z@4JA
  000ea	83 c0 1b	 add	 eax, 27			; 0000001bH
  000ed	50		 push	 eax
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
  000f8	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@draw_full_:

; 1554 : 
; 1555 : 	day_segment_type = (day_segment_types) get_local_entity_int_value (get_session_entity (), INT_TYPE_DAY_SEGMENT_TYPE);

  000fd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  00104	74 0f		 je	 SHORT $LN16@draw_full_
  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  0010b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010d	89 8d e4 fe ff
	ff		 mov	 DWORD PTR tv137[ebp], ecx
  00113	eb 24		 jmp	 SHORT $LN17@draw_full_
$LN16@draw_full_:
  00115	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z@4JA
  0011b	83 c2 1d	 add	 edx, 29			; 0000001dH
  0011e	52		 push	 edx
  0011f	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00124	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00129	50		 push	 eax
  0012a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0012f	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv137[ebp], 0
$LN17@draw_full_:
  00139	b9 01 00 00 00	 mov	 ecx, 1
  0013e	85 c9		 test	 ecx, ecx
  00140	74 0c		 je	 SHORT $LN18@draw_full_
  00142	c7 85 e0 fe ff
	ff 27 00 00 00	 mov	 DWORD PTR tv145[ebp], 39 ; 00000027H
  0014c	eb 24		 jmp	 SHORT $LN19@draw_full_
$LN18@draw_full_:
  0014e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z@4JA
  00154	83 c2 1d	 add	 edx, 29			; 0000001dH
  00157	52		 push	 edx
  00158	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0015d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00162	50		 push	 eax
  00163	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00168	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv145[ebp], 0
$LN19@draw_full_:
  00172	6a 27		 push	 39			; 00000027H
  00174	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  0017a	51		 push	 ecx
  0017b	69 95 e4 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv137[ebp], 1116
  00185	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv145[ebp]
  0018b	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00192	ff d1		 call	 ecx
  00194	89 45 e8	 mov	 DWORD PTR _day_segment_type$[ebp], eax

; 1556 : 
; 1557 : 	ASSERT ((day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT_TYPES));

  00197	83 7d e8 00	 cmp	 DWORD PTR _day_segment_type$[ebp], 0
  0019b	7c 06		 jl	 SHORT $LN8@draw_full_
  0019d	83 7d e8 04	 cmp	 DWORD PTR _day_segment_type$[ebp], 4
  001a1	7c 18		 jl	 SHORT $LN7@draw_full_
$LN8@draw_full_:
  001a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z@4JA
  001a8	83 c0 1f	 add	 eax, 31			; 0000001fH
  001ab	50		 push	 eax
  001ac	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001b1	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
  001b6	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN7@draw_full_:

; 1558 : 
; 1559 : 	switch (system)

  001bb	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  001be	89 85 e4 fe ff
	ff		 mov	 DWORD PTR tv157[ebp], eax
  001c4	83 bd e4 fe ff
	ff 03		 cmp	 DWORD PTR tv157[ebp], 3
  001cb	74 02		 je	 SHORT $LN9@draw_full_
  001cd	eb 28		 jmp	 SHORT $LN10@draw_full_
$LN9@draw_full_:

; 1560 : 	{
; 1561 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 1562 : 		{
; 1563 : 			light_level = flir_light_levels[weather_mode][day_segment_type];

  001cf	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  001d2	c1 e0 04	 shl	 eax, 4
  001d5	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  001d8	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  001df	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 1564 : 
; 1565 : 			noise_level = flir_noise_levels[weather_mode][day_segment_type];

  001e2	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  001e5	c1 e0 04	 shl	 eax, 4
  001e8	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  001eb	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  001f2	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 1566 : 
; 1567 : 			break;

  001f5	eb 11		 jmp	 SHORT $LN2@draw_full_
$LN10@draw_full_:

; 1568 : 		}
; 1569 : 		default:
; 1570 : 		{
; 1571 : 			debug_fatal ("Invalid target acquisition system = %d", system);

  001f7	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  001fa	50		 push	 eax
  001fb	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
  00200	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  00205	83 c4 08	 add	 esp, 8
$LN2@draw_full_:

; 1572 : 
; 1573 : 			break;
; 1574 : 		}
; 1575 : 	}
; 1576 : 
; 1577 : 	set_main_3d_params

  00208	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  0020d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  00215	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00219	51		 push	 ecx
  0021a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021f	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  00224	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  0022c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00230	51		 push	 ecx
  00231	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00236	51		 push	 ecx
  00237	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_height@@3MA
  0023f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00244	51		 push	 ecx
  00245	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_width@@3MA
  0024d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00252	51		 push	 ecx
  00253	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  0025b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00260	51		 push	 ecx
  00261	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00269	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026e	8b 45 f4	 mov	 eax, DWORD PTR _noise_level$[ebp]
  00271	50		 push	 eax
  00272	8b 4d f8	 mov	 ecx, DWORD PTR _light_level$[ebp]
  00275	51		 push	 ecx
  00276	8b 55 10	 mov	 edx, DWORD PTR _tint$[ebp]
  00279	52		 push	 edx
  0027a	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params

; 1578 : 	(
; 1579 : 		tint,
; 1580 : 		light_level,
; 1581 : 		noise_level,
; 1582 : 		mfd_screen_x_min,
; 1583 : 		mfd_screen_y_min,
; 1584 : 		mfd_screen_width,
; 1585 : 		mfd_screen_height,
; 1586 : 		rad (59.99) * zoom,
; 1587 : 		rad (59.99) * zoom
; 1588 : 	);
; 1589 : 
; 1590 : 	//
; 1591 : 	// draw 3D scene (temporarily adjust the virtual cockpit position relative to EO sensor position)
; 1592 : 	//
; 1593 : 
; 1594 : 	{
; 1595 : 		vec3d
; 1596 : 			position;
; 1597 : 
; 1598 : 		viewpoint
; 1599 : 			centered_eo_vp,
; 1600 : 			rotated_eo_vp,
; 1601 : 			tmp_vp;
; 1602 : 
; 1603 : 		matrix3x3
; 1604 : 			m;
; 1605 : 
; 1606 : 		tmp_vp = virtual_cockpit_inst3d->vp;

  0027f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  00285	83 c6 08	 add	 esi, 8
  00288	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0028d	8d bd 4c ff ff
	ff		 lea	 edi, DWORD PTR _tmp_vp$2[ebp]
  00293	f3 a5		 rep movsd

; 1607 : 
; 1608 : 		get_ka50_eo_relative_centred_viewpoint (&centered_eo_vp);

  00295	8d 45 ac	 lea	 eax, DWORD PTR _centered_eo_vp$4[ebp]
  00298	50		 push	 eax
  00299	e8 00 00 00 00	 call	 ?get_ka50_eo_relative_centred_viewpoint@@YGXPAUVIEWPOINT@@@Z ; get_ka50_eo_relative_centred_viewpoint

; 1609 : 
; 1610 : 		rotated_eo_vp.position = centered_eo_vp.position;

  0029e	8b 45 ac	 mov	 eax, DWORD PTR _centered_eo_vp$4[ebp]
  002a1	89 85 7c ff ff
	ff		 mov	 DWORD PTR _rotated_eo_vp$3[ebp], eax
  002a7	8b 4d b0	 mov	 ecx, DWORD PTR _centered_eo_vp$4[ebp+4]
  002aa	89 4d 80	 mov	 DWORD PTR _rotated_eo_vp$3[ebp+4], ecx
  002ad	8b 55 b4	 mov	 edx, DWORD PTR _centered_eo_vp$4[ebp+8]
  002b0	89 55 84	 mov	 DWORD PTR _rotated_eo_vp$3[ebp+8], edx

; 1611 : 
; 1612 : 		get_3d_transformation_matrix (m, eo_azimuth, eo_elevation, 0.0);

  002b3	51		 push	 ecx
  002b4	0f 57 c0	 xorps	 xmm0, xmm0
  002b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002bc	51		 push	 ecx
  002bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  002c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ca	51		 push	 ecx
  002cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  002d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d8	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _m$1[ebp]
  002de	50		 push	 eax
  002df	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 1613 : 
; 1614 : 		multiply_matrix3x3_matrix3x3 (rotated_eo_vp.attitude, m, centered_eo_vp.attitude);

  002e4	8d 45 b8	 lea	 eax, DWORD PTR _centered_eo_vp$4[ebp+12]
  002e7	50		 push	 eax
  002e8	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _m$1[ebp]
  002ee	51		 push	 ecx
  002ef	8d 55 88	 lea	 edx, DWORD PTR _rotated_eo_vp$3[ebp+12]
  002f2	52		 push	 edx
  002f3	e8 00 00 00 00	 call	 ?multiply_matrix3x3_matrix3x3@@YGXQAY02MQAY02$$CBM1@Z ; multiply_matrix3x3_matrix3x3

; 1615 : 
; 1616 : 		position.x = -rotated_eo_vp.x;

  002f8	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp]
  00300	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00307	f3 0f 11 45 dc	 movss	 DWORD PTR _position$5[ebp], xmm0

; 1617 : 		position.y = -rotated_eo_vp.y;

  0030c	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+4]
  00311	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00318	f3 0f 11 45 e0	 movss	 DWORD PTR _position$5[ebp+4], xmm0

; 1618 : 		position.z = -rotated_eo_vp.z;

  0031d	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+8]
  00322	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00329	f3 0f 11 45 e4	 movss	 DWORD PTR _position$5[ebp+8], xmm0

; 1619 : 
; 1620 : 		multiply_transpose_matrix3x3_vec3d (&virtual_cockpit_inst3d->vp.position, rotated_eo_vp.attitude, &position);

  0032e	8d 45 dc	 lea	 eax, DWORD PTR _position$5[ebp]
  00331	50		 push	 eax
  00332	8d 4d 88	 lea	 ecx, DWORD PTR _rotated_eo_vp$3[ebp+12]
  00335	51		 push	 ecx
  00336	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  0033c	83 c2 08	 add	 edx, 8
  0033f	52		 push	 edx
  00340	e8 00 00 00 00	 call	 ?multiply_transpose_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_transpose_matrix3x3_vec3d

; 1621 : 
; 1622 : 		get_local_entity_vec3d (get_gunship_entity (), VEC3D_TYPE_POSITION, &position);

  00345	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0034c	74 0f		 je	 SHORT $LN20@draw_full_
  0034e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00353	8b 08		 mov	 ecx, DWORD PTR [eax]
  00355	89 8d e4 fe ff
	ff		 mov	 DWORD PTR tv208[ebp], ecx
  0035b	eb 24		 jmp	 SHORT $LN21@draw_full_
$LN20@draw_full_:
  0035d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z@4JA
  00363	83 c2 60	 add	 edx, 96			; 00000060H
  00366	52		 push	 edx
  00367	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0036c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00371	50		 push	 eax
  00372	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00377	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv208[ebp], 0
$LN21@draw_full_:
  00381	b9 01 00 00 00	 mov	 ecx, 1
  00386	85 c9		 test	 ecx, ecx
  00388	74 0c		 je	 SHORT $LN22@draw_full_
  0038a	c7 85 e0 fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv216[ebp], 8
  00394	eb 24		 jmp	 SHORT $LN23@draw_full_
$LN22@draw_full_:
  00396	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z@4JA
  0039c	83 c2 60	 add	 edx, 96			; 00000060H
  0039f	52		 push	 edx
  003a0	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  003a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  003aa	50		 push	 eax
  003ab	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003b0	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv216[ebp], 0
$LN23@draw_full_:
  003ba	8d 4d dc	 lea	 ecx, DWORD PTR _position$5[ebp]
  003bd	51		 push	 ecx
  003be	6a 08		 push	 8
  003c0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  003c6	52		 push	 edx
  003c7	6b 85 e4 fe ff
	ff 60		 imul	 eax, DWORD PTR tv208[ebp], 96
  003ce	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR tv216[ebp]
  003d4	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  003db	ff d2		 call	 edx

; 1623 : 
; 1624 : 		rotated_eo_vp.x += position.x;

  003dd	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp]
  003e5	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _position$5[ebp]
  003ea	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _rotated_eo_vp$3[ebp], xmm0

; 1625 : 		rotated_eo_vp.y += position.y;

  003f2	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+4]
  003f7	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _position$5[ebp+4]
  003fc	f3 0f 11 45 80	 movss	 DWORD PTR _rotated_eo_vp$3[ebp+4], xmm0

; 1626 : 		rotated_eo_vp.z += position.z;

  00401	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+8]
  00406	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _position$5[ebp+8]
  0040b	f3 0f 11 45 84	 movss	 DWORD PTR _rotated_eo_vp$3[ebp+8], xmm0

; 1627 : 
; 1628 : 		draw_eo_3d_scene = TRUE;

  00410	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 1 ; draw_eo_3d_scene

; 1629 : 
; 1630 : 		draw_main_3d_scene (&rotated_eo_vp);

  0041a	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _rotated_eo_vp$3[ebp]
  00420	50		 push	 eax
  00421	e8 00 00 00 00	 call	 ?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z ; draw_main_3d_scene

; 1631 : 
; 1632 : 		draw_eo_3d_scene = FALSE;

  00426	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 0 ; draw_eo_3d_scene

; 1633 : 
; 1634 : 		virtual_cockpit_inst3d->vp = tmp_vp;

  00430	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  00436	83 c7 08	 add	 edi, 8
  00439	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0043e	8d b5 4c ff ff
	ff		 lea	 esi, DWORD PTR _tmp_vp$2[ebp]
  00444	f3 a5		 rep movsd

; 1635 : 	}
; 1636 : }

  00446	5f		 pop	 edi
  00447	5e		 pop	 esi
  00448	5b		 pop	 ebx
  00449	8b e5		 mov	 esp, ebp
  0044b	5d		 pop	 ebp
  0044c	c2 0c 00	 ret	 12			; 0000000cH
?draw_full_screen_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@W4DISPLAY_3D_TINTS@@@Z ENDP ; draw_full_screen_3d_eo_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z
_TEXT	SEGMENT
tv392 = -316						; size = 8
tv439 = -308						; size = 8
tv388 = -300						; size = 8
tv437 = -292						; size = 8
tv239 = -292						; size = 4
tv150 = -292						; size = 4
tv90 = -292						; size = 4
tv231 = -288						; size = 4
tv162 = -288						; size = 4
tv142 = -288						; size = 4
tv82 = -288						; size = 4
_m$1 = -220						; size = 36
_tmp_vp$2 = -184					; size = 48
_rotated_eo_vp$3 = -136					; size = 48
_centered_eo_vp$4 = -88					; size = 48
_position$5 = -40					; size = 12
_tint$ = -28						; size = 4
_day_segment_type$ = -24				; size = 4
_weather_mode$ = -20					; size = 4
_position$ = -16					; size = 4
_noise_level$ = -12					; size = 4
_light_level$ = -8					; size = 4
_zoom$ = -4						; size = 4
_eo$ = 8						; size = 4
_system$ = 12						; size = 4
?draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z PROC ; draw_3d_eo_display, COMDAT

; 1397 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1398 : 	float
; 1399 : 		zoom;
; 1400 : 
; 1401 : 	display_3d_light_levels
; 1402 : 		light_level;
; 1403 : 
; 1404 : 	display_3d_noise_levels
; 1405 : 		noise_level;
; 1406 : 
; 1407 : 	vec3d
; 1408 : 		*position;
; 1409 : 
; 1410 : 	weathermodes
; 1411 : 		weather_mode;
; 1412 : 
; 1413 : 	day_segment_types
; 1414 : 		day_segment_type;
; 1415 : 
; 1416 : 	display_3d_tints
; 1417 : 		tint;
; 1418 : 
; 1419 : 	ASSERT (eo);

  0000c	83 7d 08 00	 cmp	 DWORD PTR _eo$[ebp], 0
  00010	75 18		 jne	 SHORT $LN4@draw_3d_eo
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00017	83 c0 16	 add	 eax, 22			; 00000016H
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_02KMMHFIEO@eo@
  00025	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_3d_eo:

; 1420 : 
; 1421 : 	ASSERT (eo_3d_texture_screen);

  0002a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, 0
  00031	75 18		 jne	 SHORT $LN5@draw_3d_eo
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00038	83 c0 18	 add	 eax, 24			; 00000018H
  0003b	50		 push	 eax
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
  00046	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@draw_3d_eo:

; 1422 : 
; 1423 : 	zoom = convert_linear_view_value (eo);

  0004b	8b 45 08	 mov	 eax, DWORD PTR _eo$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?convert_linear_view_value@@YGMPAUEO_PARAMS_DYNAMIC_MOVE@@@Z ; convert_linear_view_value
  00054	d9 5d fc	 fstp	 DWORD PTR _zoom$[ebp]

; 1424 : 
; 1425 : 	position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  0005e	74 0f		 je	 SHORT $LN17@draw_3d_eo
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00065	8b 08		 mov	 ecx, DWORD PTR [eax]
  00067	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv82[ebp], ecx
  0006d	eb 24		 jmp	 SHORT $LN18@draw_3d_eo
$LN17@draw_3d_eo:
  0006f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00075	83 c2 1c	 add	 edx, 28			; 0000001cH
  00078	52		 push	 edx
  00079	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0007e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00089	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv82[ebp], 0
$LN18@draw_3d_eo:
  00093	b9 01 00 00 00	 mov	 ecx, 1
  00098	85 c9		 test	 ecx, ecx
  0009a	74 0c		 je	 SHORT $LN19@draw_3d_eo
  0009c	c7 85 dc fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv90[ebp], 8
  000a6	eb 24		 jmp	 SHORT $LN20@draw_3d_eo
$LN19@draw_3d_eo:
  000a8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  000ae	83 c2 1c	 add	 edx, 28			; 0000001cH
  000b1	52		 push	 edx
  000b2	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000c2	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv90[ebp], 0
$LN20@draw_3d_eo:
  000cc	6a 08		 push	 8
  000ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000d4	51		 push	 ecx
  000d5	6b 95 e0 fe ff
	ff 60		 imul	 edx, DWORD PTR tv82[ebp], 96
  000dc	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR tv90[ebp]
  000e2	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  000e9	ff d1		 call	 ecx
  000eb	89 45 f0	 mov	 DWORD PTR _position$[ebp], eax

; 1426 : 
; 1427 : 	weather_mode = get_simple_session_weather_at_point (position);

  000ee	8b 45 f0	 mov	 eax, DWORD PTR _position$[ebp]
  000f1	50		 push	 eax
  000f2	e8 00 00 00 00	 call	 ?get_simple_session_weather_at_point@@YG?AW4WEATHERMODES@@PAUVEC3D@@@Z ; get_simple_session_weather_at_point
  000f7	89 45 ec	 mov	 DWORD PTR _weather_mode$[ebp], eax

; 1428 : 
; 1429 : 	ASSERT ((weather_mode > WEATHERMODE_INVALID) && (weather_mode < WEATHERMODE_LAST));

  000fa	83 7d ec 00	 cmp	 DWORD PTR _weather_mode$[ebp], 0
  000fe	7e 06		 jle	 SHORT $LN7@draw_3d_eo
  00100	83 7d ec 05	 cmp	 DWORD PTR _weather_mode$[ebp], 5
  00104	7c 18		 jl	 SHORT $LN6@draw_3d_eo
$LN7@draw_3d_eo:
  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  0010b	83 c0 20	 add	 eax, 32			; 00000020H
  0010e	50		 push	 eax
  0010f	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@DPCFPJPF@?$CIweather_mode?5?$DO?5WEATHERMODE_INV@
  00119	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN6@draw_3d_eo:

; 1430 : 
; 1431 : 	day_segment_type = (day_segment_types) get_local_entity_int_value (get_session_entity (), INT_TYPE_DAY_SEGMENT_TYPE);

  0011e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?session_entity@@3PAUENTITY@@A, 0 ; session_entity
  00125	74 0f		 je	 SHORT $LN21@draw_3d_eo
  00127	a1 00 00 00 00	 mov	 eax, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  0012c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012e	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv142[ebp], ecx
  00134	eb 24		 jmp	 SHORT $LN22@draw_3d_eo
$LN21@draw_3d_eo:
  00136	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  0013c	83 c2 22	 add	 edx, 34			; 00000022H
  0013f	52		 push	 edx
  00140	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00145	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0014a	50		 push	 eax
  0014b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00150	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv142[ebp], 0
$LN22@draw_3d_eo:
  0015a	b9 01 00 00 00	 mov	 ecx, 1
  0015f	85 c9		 test	 ecx, ecx
  00161	74 0c		 je	 SHORT $LN23@draw_3d_eo
  00163	c7 85 dc fe ff
	ff 27 00 00 00	 mov	 DWORD PTR tv150[ebp], 39 ; 00000027H
  0016d	eb 24		 jmp	 SHORT $LN24@draw_3d_eo
$LN23@draw_3d_eo:
  0016f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00175	83 c2 22	 add	 edx, 34			; 00000022H
  00178	52		 push	 edx
  00179	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0017e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00183	50		 push	 eax
  00184	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00189	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], 0
$LN24@draw_3d_eo:
  00193	6a 27		 push	 39			; 00000027H
  00195	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?session_entity@@3PAUENTITY@@A ; session_entity
  0019b	51		 push	 ecx
  0019c	69 95 e0 fe ff
	ff 5c 04 00 00	 imul	 edx, DWORD PTR tv142[ebp], 1116
  001a6	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR tv150[ebp]
  001ac	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  001b3	ff d1		 call	 ecx
  001b5	89 45 e8	 mov	 DWORD PTR _day_segment_type$[ebp], eax

; 1432 : 
; 1433 : 	ASSERT ((day_segment_type >= 0) && (day_segment_type < NUM_DAY_SEGMENT_TYPES));

  001b8	83 7d e8 00	 cmp	 DWORD PTR _day_segment_type$[ebp], 0
  001bc	7c 06		 jl	 SHORT $LN9@draw_3d_eo
  001be	83 7d e8 04	 cmp	 DWORD PTR _day_segment_type$[ebp], 4
  001c2	7c 18		 jl	 SHORT $LN8@draw_3d_eo
$LN9@draw_3d_eo:
  001c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  001c9	83 c0 24	 add	 eax, 36			; 00000024H
  001cc	50		 push	 eax
  001cd	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001d2	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@LLJGIOPM@?$CIday_segment_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIday@
  001d7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN8@draw_3d_eo:

; 1434 : 
; 1435 : 	switch (system)

  001dc	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  001df	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv162[ebp], eax
  001e5	83 bd e0 fe ff
	ff 03		 cmp	 DWORD PTR tv162[ebp], 3
  001ec	74 02		 je	 SHORT $LN10@draw_3d_eo
  001ee	eb 41		 jmp	 SHORT $LN13@draw_3d_eo
$LN10@draw_3d_eo:

; 1436 : 	{
; 1437 : 		case TARGET_ACQUISITION_SYSTEM_FLIR:
; 1438 : 		{
; 1439 : 			light_level = flir_light_levels[weather_mode][day_segment_type];

  001f0	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  001f3	c1 e0 04	 shl	 eax, 4
  001f6	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  001f9	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_light_levels@@3PAY03W4DISPLAY_3D_LIGHT_LEVELS@@A[eax+ecx*4]
  00200	89 55 f8	 mov	 DWORD PTR _light_level$[ebp], edx

; 1440 : 
; 1441 : 			noise_level = flir_noise_levels[weather_mode][day_segment_type];

  00203	8b 45 ec	 mov	 eax, DWORD PTR _weather_mode$[ebp]
  00206	c1 e0 04	 shl	 eax, 4
  00209	8b 4d e8	 mov	 ecx, DWORD PTR _day_segment_type$[ebp]
  0020c	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?flir_noise_levels@@3PAY03W4DISPLAY_3D_NOISE_LEVELS@@A[eax+ecx*4]
  00213	89 55 f4	 mov	 DWORD PTR _noise_level$[ebp], edx

; 1442 : 
; 1443 : 			if (command_line_colour_mfd)

  00216	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_colour_mfd@@3HA, 0 ; command_line_colour_mfd
  0021d	74 09		 je	 SHORT $LN11@draw_3d_eo

; 1444 : 				tint = DISPLAY_3D_TINT_GREEN;

  0021f	c7 45 e4 03 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 3

; 1445 : 			else

  00226	eb 07		 jmp	 SHORT $LN12@draw_3d_eo
$LN11@draw_3d_eo:

; 1446 : 				tint = DISPLAY_3D_TINT_AMBER;

  00228	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _tint$[ebp], 1
$LN12@draw_3d_eo:

; 1447 : 
; 1448 : 			break;

  0022f	eb 11		 jmp	 SHORT $LN2@draw_3d_eo
$LN13@draw_3d_eo:

; 1449 : 		}
; 1450 : 		default:
; 1451 : 		{
; 1452 : 			debug_fatal ("Invalid target acquisition system = %d", system);

  00231	8b 45 0c	 mov	 eax, DWORD PTR _system$[ebp]
  00234	50		 push	 eax
  00235	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DDKDNBNH@Invalid?5target?5acquisition?5syst@
  0023a	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0023f	83 c4 08	 add	 esp, 8
$LN2@draw_3d_eo:

; 1453 : 
; 1454 : 			break;
; 1455 : 		}
; 1456 : 	}
; 1457 : 
; 1458 : 	set_3d_render_target (eo_3d_texture_screen);

  00242	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00247	50		 push	 eax
  00248	e8 00 00 00 00	 call	 ?set_3d_render_target@@YGHPAUSCREEN@@@Z ; set_3d_render_target

; 1459 : 
; 1460 : 	set_active_screen (eo_3d_texture_screen);

  0024d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00252	50		 push	 eax
  00253	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 1461 : 
; 1462 : 	set_main_3d_params (tint, light_level, noise_level, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_size, mfd_viewport_size, rad (59.99) * zoom, rad (59.99) * zoom);

  00258	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  0025d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  00265	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00269	51		 push	 ecx
  0026a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026f	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _zoom$[ebp]
  00274	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0c09b332ccccd
  0027c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00280	51		 push	 ecx
  00281	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00286	51		 push	 ecx
  00287	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  0028f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00294	51		 push	 ecx
  00295	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  0029d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a2	51		 push	 ecx
  002a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  002ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b0	51		 push	 ecx
  002b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  002b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002be	8b 45 f4	 mov	 eax, DWORD PTR _noise_level$[ebp]
  002c1	50		 push	 eax
  002c2	8b 4d f8	 mov	 ecx, DWORD PTR _light_level$[ebp]
  002c5	51		 push	 ecx
  002c6	8b 55 e4	 mov	 edx, DWORD PTR _tint$[ebp]
  002c9	52		 push	 edx
  002ca	e8 00 00 00 00	 call	 ?set_main_3d_params@@YGXW4DISPLAY_3D_TINTS@@W4DISPLAY_3D_LIGHT_LEVELS@@W4DISPLAY_3D_NOISE_LEVELS@@MMMMMM@Z ; set_main_3d_params

; 1463 : 
; 1464 : 	//
; 1465 : 	// draw 3D scene (temporarily adjust the virtual cockpit position relative to EO sensor position)
; 1466 : 	//
; 1467 : 
; 1468 : 	{
; 1469 : 		vec3d
; 1470 : 			position;
; 1471 : 
; 1472 : 		viewpoint
; 1473 : 			centered_eo_vp,
; 1474 : 			rotated_eo_vp,
; 1475 : 			tmp_vp;
; 1476 : 
; 1477 : 		matrix3x3
; 1478 : 			m;
; 1479 : 
; 1480 : 		tmp_vp = virtual_cockpit_inst3d->vp;

  002cf	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  002d5	83 c6 08	 add	 esi, 8
  002d8	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  002dd	8d bd 48 ff ff
	ff		 lea	 edi, DWORD PTR _tmp_vp$2[ebp]
  002e3	f3 a5		 rep movsd

; 1481 : 
; 1482 : 		get_ka50_eo_relative_centred_viewpoint (&centered_eo_vp);

  002e5	8d 45 a8	 lea	 eax, DWORD PTR _centered_eo_vp$4[ebp]
  002e8	50		 push	 eax
  002e9	e8 00 00 00 00	 call	 ?get_ka50_eo_relative_centred_viewpoint@@YGXPAUVIEWPOINT@@@Z ; get_ka50_eo_relative_centred_viewpoint

; 1483 : 
; 1484 : 		rotated_eo_vp.position = centered_eo_vp.position;

  002ee	8b 45 a8	 mov	 eax, DWORD PTR _centered_eo_vp$4[ebp]
  002f1	89 85 78 ff ff
	ff		 mov	 DWORD PTR _rotated_eo_vp$3[ebp], eax
  002f7	8b 4d ac	 mov	 ecx, DWORD PTR _centered_eo_vp$4[ebp+4]
  002fa	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _rotated_eo_vp$3[ebp+4], ecx
  00300	8b 55 b0	 mov	 edx, DWORD PTR _centered_eo_vp$4[ebp+8]
  00303	89 55 80	 mov	 DWORD PTR _rotated_eo_vp$3[ebp+8], edx

; 1485 : 
; 1486 : 		if (gun_is_firing)

  00306	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gun_is_firing@@3HA, 0 ; gun_is_firing
  0030d	0f 84 99 00 00
	00		 je	 $LN14@draw_3d_eo

; 1487 : 			get_3d_transformation_matrix (m, eo_azimuth + sfrand1norm() * MAX_GUN_SHAKE_DEFLECTION, eo_elevation + sfrand1norm() * MAX_GUN_SHAKE_DEFLECTION, 0.0);

  00313	51		 push	 ecx
  00314	0f 57 c0	 xorps	 xmm0, xmm0
  00317	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0031c	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?eo_elevation@@3MA
  00324	f2 0f 11 85 dc
	fe ff ff	 movsd	 QWORD PTR tv437[ebp], xmm0
  0032c	e8 00 00 00 00	 call	 ?sfrand1norm@@YGNXZ	; sfrand1norm
  00331	dd 9d d4 fe ff
	ff		 fstp	 QWORD PTR tv388[ebp]
  00337	f2 0f 10 85 d4
	fe ff ff	 movsd	 xmm0, QWORD PTR tv388[ebp]
  0033f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f5c987100000000
  00347	f2 0f 10 8d dc
	fe ff ff	 movsd	 xmm1, QWORD PTR tv437[ebp]
  0034f	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00353	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00357	51		 push	 ecx
  00358	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?eo_azimuth@@3MA
  00365	f2 0f 11 85 cc
	fe ff ff	 movsd	 QWORD PTR tv439[ebp], xmm0
  0036d	e8 00 00 00 00	 call	 ?sfrand1norm@@YGNXZ	; sfrand1norm
  00372	dd 9d c4 fe ff
	ff		 fstp	 QWORD PTR tv392[ebp]
  00378	f2 0f 10 85 c4
	fe ff ff	 movsd	 xmm0, QWORD PTR tv392[ebp]
  00380	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f5c987100000000
  00388	f2 0f 10 8d cc
	fe ff ff	 movsd	 xmm1, QWORD PTR tv439[ebp]
  00390	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00394	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00398	51		 push	 ecx
  00399	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039e	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR _m$1[ebp]
  003a4	50		 push	 eax
  003a5	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix

; 1488 : 		else

  003aa	eb 31		 jmp	 SHORT $LN15@draw_3d_eo
$LN14@draw_3d_eo:

; 1489 : 			get_3d_transformation_matrix (m, eo_azimuth, eo_elevation, 0.0);

  003ac	51		 push	 ecx
  003ad	0f 57 c0	 xorps	 xmm0, xmm0
  003b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b5	51		 push	 ecx
  003b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_elevation@@3MA
  003be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c3	51		 push	 ecx
  003c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?eo_azimuth@@3MA
  003cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d1	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR _m$1[ebp]
  003d7	50		 push	 eax
  003d8	e8 00 00 00 00	 call	 ?get_3d_transformation_matrix@@YGXQAY02MMMM@Z ; get_3d_transformation_matrix
$LN15@draw_3d_eo:

; 1490 : 
; 1491 : 		multiply_matrix3x3_matrix3x3 (rotated_eo_vp.attitude, m, centered_eo_vp.attitude);

  003dd	8d 45 b4	 lea	 eax, DWORD PTR _centered_eo_vp$4[ebp+12]
  003e0	50		 push	 eax
  003e1	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _m$1[ebp]
  003e7	51		 push	 ecx
  003e8	8d 55 84	 lea	 edx, DWORD PTR _rotated_eo_vp$3[ebp+12]
  003eb	52		 push	 edx
  003ec	e8 00 00 00 00	 call	 ?multiply_matrix3x3_matrix3x3@@YGXQAY02MQAY02$$CBM1@Z ; multiply_matrix3x3_matrix3x3

; 1492 : 
; 1493 : 		position.x = -rotated_eo_vp.x;

  003f1	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp]
  003f9	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00400	f3 0f 11 45 d8	 movss	 DWORD PTR _position$5[ebp], xmm0

; 1494 : 		position.y = -rotated_eo_vp.y;

  00405	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+4]
  0040d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00414	f3 0f 11 45 dc	 movss	 DWORD PTR _position$5[ebp+4], xmm0

; 1495 : 		position.z = -rotated_eo_vp.z;

  00419	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+8]
  0041e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00425	f3 0f 11 45 e0	 movss	 DWORD PTR _position$5[ebp+8], xmm0

; 1496 : 
; 1497 : 		multiply_transpose_matrix3x3_vec3d (&virtual_cockpit_inst3d->vp.position, rotated_eo_vp.attitude, &position);

  0042a	8d 45 d8	 lea	 eax, DWORD PTR _position$5[ebp]
  0042d	50		 push	 eax
  0042e	8d 4d 84	 lea	 ecx, DWORD PTR _rotated_eo_vp$3[ebp+12]
  00431	51		 push	 ecx
  00432	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  00438	83 c2 08	 add	 edx, 8
  0043b	52		 push	 edx
  0043c	e8 00 00 00 00	 call	 ?multiply_transpose_matrix3x3_vec3d@@YGXPAUVEC3D@@QAY02$$CBMPBU1@@Z ; multiply_transpose_matrix3x3_vec3d

; 1498 : 
; 1499 : 		get_local_entity_vec3d (get_gunship_entity (), VEC3D_TYPE_POSITION, &position);

  00441	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00448	74 0f		 je	 SHORT $LN25@draw_3d_eo
  0044a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0044f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00451	89 8d e0 fe ff
	ff		 mov	 DWORD PTR tv231[ebp], ecx
  00457	eb 24		 jmp	 SHORT $LN26@draw_3d_eo
$LN25@draw_3d_eo:
  00459	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  0045f	83 c2 66	 add	 edx, 102		; 00000066H
  00462	52		 push	 edx
  00463	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00468	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0046d	50		 push	 eax
  0046e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00473	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv231[ebp], 0
$LN26@draw_3d_eo:
  0047d	b9 01 00 00 00	 mov	 ecx, 1
  00482	85 c9		 test	 ecx, ecx
  00484	74 0c		 je	 SHORT $LN27@draw_3d_eo
  00486	c7 85 dc fe ff
	ff 08 00 00 00	 mov	 DWORD PTR tv239[ebp], 8
  00490	eb 24		 jmp	 SHORT $LN28@draw_3d_eo
$LN27@draw_3d_eo:
  00492	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z@4JA
  00498	83 c2 66	 add	 edx, 102		; 00000066H
  0049b	52		 push	 edx
  0049c	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  004a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  004a6	50		 push	 eax
  004a7	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004ac	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv239[ebp], 0
$LN28@draw_3d_eo:
  004b6	8d 4d d8	 lea	 ecx, DWORD PTR _position$5[ebp]
  004b9	51		 push	 ecx
  004ba	6a 08		 push	 8
  004bc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  004c2	52		 push	 edx
  004c3	6b 85 e0 fe ff
	ff 60		 imul	 eax, DWORD PTR tv231[ebp], 96
  004ca	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv239[ebp]
  004d0	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_vec3d@@3PAY0BI@P6GXPAUENTITY@@W4VEC3D_TYPES@@PAUVEC3D@@@ZA[eax+ecx*4]
  004d7	ff d2		 call	 edx

; 1500 : 
; 1501 : 		rotated_eo_vp.x += position.x;

  004d9	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp]
  004e1	f3 0f 58 45 d8	 addss	 xmm0, DWORD PTR _position$5[ebp]
  004e6	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _rotated_eo_vp$3[ebp], xmm0

; 1502 : 		rotated_eo_vp.y += position.y;

  004ee	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+4]
  004f6	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _position$5[ebp+4]
  004fb	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _rotated_eo_vp$3[ebp+4], xmm0

; 1503 : 		rotated_eo_vp.z += position.z;

  00503	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _rotated_eo_vp$3[ebp+8]
  00508	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _position$5[ebp+8]
  0050d	f3 0f 11 45 80	 movss	 DWORD PTR _rotated_eo_vp$3[ebp+8], xmm0

; 1504 : 
; 1505 : 		draw_eo_3d_scene = TRUE;

  00512	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 1 ; draw_eo_3d_scene

; 1506 : 
; 1507 : 		draw_main_3d_scene (&rotated_eo_vp);

  0051c	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _rotated_eo_vp$3[ebp]
  00522	50		 push	 eax
  00523	e8 00 00 00 00	 call	 ?draw_main_3d_scene@@YGXPAUVIEWPOINT@@@Z ; draw_main_3d_scene

; 1508 : 
; 1509 : 		draw_eo_3d_scene = FALSE;

  00528	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_eo_3d_scene@@3HA, 0 ; draw_eo_3d_scene

; 1510 : 
; 1511 : 		virtual_cockpit_inst3d->vp = tmp_vp;

  00532	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?virtual_cockpit_inst3d@@3PAUOBJECT_3D_INSTANCE@@A ; virtual_cockpit_inst3d
  00538	83 c7 08	 add	 edi, 8
  0053b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00540	8d b5 48 ff ff
	ff		 lea	 esi, DWORD PTR _tmp_vp$2[ebp]
  00546	f3 a5		 rep movsd

; 1512 : 	}
; 1513 : 
; 1514 : 	finalise_3d_render_target_texture (eo_3d_texture_screen);

  00548	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  0054d	50		 push	 eax
  0054e	e8 00 00 00 00	 call	 ?finalise_3d_render_target_texture@@YGXPAUSCREEN@@@Z ; finalise_3d_render_target_texture

; 1515 : 
; 1516 : 	set_3d_render_target (video_screen);

  00553	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00558	50		 push	 eax
  00559	e8 00 00 00 00	 call	 ?set_3d_render_target@@YGHPAUSCREEN@@@Z ; set_3d_render_target

; 1517 : 
; 1518 : 	set_active_screen (video_screen);

  0055e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00563	50		 push	 eax
  00564	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 1519 : }

  00569	5f		 pop	 edi
  0056a	5e		 pop	 esi
  0056b	5b		 pop	 ebx
  0056c	8b e5		 mov	 esp, ebp
  0056e	5d		 pop	 ebp
  0056f	c2 08 00	 ret	 8
?draw_3d_eo_display@@YGXPAUEO_PARAMS_DYNAMIC_MOVE@@W4TARGET_ACQUISITION_SYSTEMS@@@Z ENDP ; draw_3d_eo_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?get_undamaged_eo_display_mode@@YGHW4KA50_MFD_MODES@@@Z
_TEXT	SEGMENT
_mode$ = 8						; size = 4
?get_undamaged_eo_display_mode@@YGHW4KA50_MFD_MODES@@@Z PROC ; get_undamaged_eo_display_mode, COMDAT

; 1383 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1384 : 	if ((mode == KA50_MFD_MODE_FLIR) && (!ka50_damage.flir))

  00009	83 7d 08 02	 cmp	 DWORD PTR _mode$[ebp], 2
  0000d	75 11		 jne	 SHORT $LN2@get_undama
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  00014	83 e0 01	 and	 eax, 1
  00017	75 07		 jne	 SHORT $LN2@get_undama

; 1385 : 	{
; 1386 : 		return (TRUE);

  00019	b8 01 00 00 00	 mov	 eax, 1
  0001e	eb 02		 jmp	 SHORT $LN1@get_undama
$LN2@get_undama:

; 1387 : 	}
; 1388 : 
; 1389 : 	return (FALSE);

  00020	33 c0		 xor	 eax, eax
$LN1@get_undama:

; 1390 : }

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?get_undamaged_eo_display_mode@@YGHW4KA50_MFD_MODES@@@Z ENDP ; get_undamaged_eo_display_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_sideslip_scale@@YGXXZ
_TEXT	SEGMENT
_s$ = -64						; size = 20
_int_heading_step_10$ = -44				; size = 4
_loop$ = -40						; size = 4
_j$ = -36						; size = 4
_i$ = -32						; size = 4
_width$ = -28						; size = 4
_x$ = -24						; size = 4
_mod_heading_step_10$ = -20				; size = 4
_mfd_vp_x_max$ = -16					; size = 4
_mfd_vp_x_min$ = -12					; size = 4
_y_position$ = -8					; size = 4
_sideslip$ = -4						; size = 4
?draw_sideslip_scale@@YGXXZ PROC			; draw_sideslip_scale, COMDAT

; 1188 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 1189 : 	float
; 1190 : 		sideslip = kilometres_per_hour(current_flight_dynamics->velocity_x.value),

  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_flight_dynamics@@3PAUDYNAMICS_TYPE@@A ; current_flight_dynamics
  00011	f3 0f 10 80 6c
	20 00 00	 movss	 xmm0, DWORD PTR [eax+8300]
  00019	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40666666
  00021	f3 0f 11 45 fc	 movss	 DWORD PTR _sideslip$[ebp], xmm0

; 1191 : 		y_position,
; 1192 : 		mfd_vp_x_min,
; 1193 : 		mfd_vp_x_max,
; 1194 : 		mod_heading_step_10,
; 1195 : 		x,
; 1196 : 		width,
; 1197 : 		i,
; 1198 : 		j;
; 1199 : 
; 1200 : 	int
; 1201 : 		loop,
; 1202 : 		int_heading_step_10;
; 1203 : 
; 1204 : 	char
; 1205 : 		s[20];
; 1206 : 
; 1207 : 	//
; 1208 : 	// adjust 2D environment for heading scale clipping
; 1209 : 	//
; 1210 : 
; 1211 : 	y_position = -0.65;

  00026	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf266666
  0002e	f3 0f 11 45 f8	 movss	 DWORD PTR _y_position$[ebp], xmm0

; 1212 : 
; 1213 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN * 0.5, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX * 0.5, MFD_WINDOW_Y_MAX);

  00033	51		 push	 ecx
  00034	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  0003c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00041	51		 push	 ecx
  00042	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3effbe77
  0004a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004f	51		 push	 ecx
  00050	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00058	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005d	51		 push	 ecx
  0005e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00066	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 1214 : 
; 1215 : 	mfd_vp_x_min = mfd_viewport_x_org - (mfd_viewport_size * (0.5 * 0.5));

  00076	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  0007e	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00086	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fd0000000000000
  0008e	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00092	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00096	f3 0f 11 45 f4	 movss	 DWORD PTR _mfd_vp_x_min$[ebp], xmm0

; 1216 : 
; 1217 : 	mfd_vp_x_max = mfd_viewport_x_org + (mfd_viewport_size * (0.5 * 0.5)) - 0.001;

  0009b	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  000a3	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  000ab	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fd0000000000000
  000b3	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000b7	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  000bf	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000c3	f3 0f 11 45 f0	 movss	 DWORD PTR _mfd_vp_x_max$[ebp], xmm0

; 1218 : 
; 1219 : 	set_2d_viewport (mfd_env, mfd_vp_x_min, mfd_viewport_y_min, mfd_vp_x_max, mfd_viewport_y_max);

  000c8	51		 push	 ecx
  000c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  000d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d6	51		 push	 ecx
  000d7	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _mfd_vp_x_max$[ebp]
  000dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e1	51		 push	 ecx
  000e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  000ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ef	51		 push	 ecx
  000f0	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _mfd_vp_x_min$[ebp]
  000f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1220 : 
; 1221 : 
; 1222 : 	get_2d_float_screen_coordinates (0.0, y_position, &i, &j);

  00105	8d 45 dc	 lea	 eax, DWORD PTR _j$[ebp]
  00108	50		 push	 eax
  00109	8d 4d e0	 lea	 ecx, DWORD PTR _i$[ebp]
  0010c	51		 push	 ecx
  0010d	51		 push	 ecx
  0010e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_position$[ebp]
  00113	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00118	51		 push	 ecx
  00119	0f 57 c0	 xorps	 xmm0, xmm0
  0011c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00121	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 1223 : 
; 1224 : 	set_mono_font_type (MONO_FONT_TYPE_5X7);

  00126	6a 01		 push	 1
  00128	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1225 : 
; 1226 : 
; 1227 : 	//
; 1228 : 	// sort first major tick position (draw 2 major ticks either side of centre)
; 1229 : 	//
; 1230 : 
; 1231 : 	mod_heading_step_10 = fmod (sideslip, 10.0f);

  0012d	51		 push	 ecx
  0012e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  00136	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013b	51		 push	 ecx
  0013c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _sideslip$[ebp]
  00141	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00146	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  0014b	d9 5d ec	 fstp	 DWORD PTR _mod_heading_step_10$[ebp]

; 1232 : 	int_heading_step_10 = ((int) (sideslip * 0.1) * 10);

  0014e	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _sideslip$[ebp]
  00153	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  0015b	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0015f	6b c8 0a	 imul	 ecx, eax, 10
  00162	89 4d d4	 mov	 DWORD PTR _int_heading_step_10$[ebp], ecx

; 1233 : 	int_heading_step_10 -= 40;

  00165	8b 45 d4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  00168	83 e8 28	 sub	 eax, 40			; 00000028H
  0016b	89 45 d4	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax

; 1234 : 
; 1235 : 	x = - (40.0 + mod_heading_step_10) * 0.025;

  0016e	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _mod_heading_step_10$[ebp]
  00173	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4044000000000000
  0017b	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00182	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f9999999999999a
  0018a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0018e	f3 0f 11 45 e8	 movss	 DWORD PTR _x$[ebp], xmm0

; 1236 : 
; 1237 : 	//
; 1238 : 	// draw heading scale ticks and heading value
; 1239 : 	//
; 1240 : 
; 1241 : 	for (loop = 0; loop < 20; loop++)

  00193	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  0019a	eb 09		 jmp	 SHORT $LN4@draw_sides
$LN2@draw_sides:
  0019c	8b 45 d8	 mov	 eax, DWORD PTR _loop$[ebp]
  0019f	83 c0 01	 add	 eax, 1
  001a2	89 45 d8	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@draw_sides:
  001a5	83 7d d8 14	 cmp	 DWORD PTR _loop$[ebp], 20 ; 00000014H
  001a9	0f 8d 2f 01 00
	00		 jge	 $LN3@draw_sides

; 1242 : 	{
; 1243 : 		//
; 1244 : 		// minor tick every 5 kph
; 1245 : 		//
; 1246 : 
; 1247 : 		draw_2d_line (x + 0.125, y_position + 0.025, x + 0.125, y_position - 0.025, MFD_COLOUR_LIGHT_BLUE);

  001af	b8 04 00 00 00	 mov	 eax, 4
  001b4	c1 e0 04	 shl	 eax, 4
  001b7	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  001bd	51		 push	 ecx
  001be	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y_position$[ebp]
  001c3	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f9999999999999a
  001cb	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001cf	51		 push	 ecx
  001d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d5	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  001da	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc0000000000000
  001e2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001e6	51		 push	 ecx
  001e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ec	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y_position$[ebp]
  001f1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f9999999999999a
  001f9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001fd	51		 push	 ecx
  001fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00203	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00208	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc0000000000000
  00210	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00214	51		 push	 ecx
  00215	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021a	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1248 : 
; 1249 : 		sprintf (s, "%d", abs(int_heading_step_10));

  0021f	8b 45 d4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  00222	50		 push	 eax
  00223	e8 00 00 00 00	 call	 _abs
  00228	83 c4 04	 add	 esp, 4
  0022b	50		 push	 eax
  0022c	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00231	8d 4d c0	 lea	 ecx, DWORD PTR _s$[ebp]
  00234	51		 push	 ecx
  00235	e8 00 00 00 00	 call	 _sprintf
  0023a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1250 : 
; 1251 : 		set_2d_mono_font_position (x, y_position);

  0023d	51		 push	 ecx
  0023e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y_position$[ebp]
  00243	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00248	51		 push	 ecx
  00249	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _x$[ebp]
  0024e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00253	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1252 : 		width = get_mono_font_string_width (s);

  00258	8d 45 c0	 lea	 eax, DWORD PTR _s$[ebp]
  0025b	50		 push	 eax
  0025c	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00261	d9 5d e4	 fstp	 DWORD PTR _width$[ebp]

; 1253 : 		set_mono_font_rel_position ((-width * 0.5) + 1.0, -3.0);

  00264	51		 push	 ecx
  00265	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0400000
  0026d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00272	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _width$[ebp]
  00277	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0027e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00282	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0028a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00292	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00296	51		 push	 ecx
  00297	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029c	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1254 : 
; 1255 : 		print_mono_font_string (s);

  002a1	8d 45 c0	 lea	 eax, DWORD PTR _s$[ebp]
  002a4	50		 push	 eax
  002a5	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1256 : 
; 1257 : 		//
; 1258 : 		// next heading value
; 1259 : 		//
; 1260 : 
; 1261 : 		int_heading_step_10 += 10;

  002aa	8b 45 d4	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  002ad	83 c0 0a	 add	 eax, 10			; 0000000aH
  002b0	89 45 d4	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax

; 1262 : 
; 1263 : 		if (int_heading_step_10 == 360)

  002b3	81 7d d4 68 01
	00 00		 cmp	 DWORD PTR _int_heading_step_10$[ebp], 360 ; 00000168H
  002ba	75 07		 jne	 SHORT $LN5@draw_sides

; 1264 : 		{
; 1265 : 			int_heading_step_10 = 0;

  002bc	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _int_heading_step_10$[ebp], 0
$LN5@draw_sides:

; 1266 : 		}
; 1267 : 
; 1268 : 		x += 0.25;

  002c3	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  002c8	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  002d0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  002d4	f3 0f 11 45 e8	 movss	 DWORD PTR _x$[ebp], xmm0

; 1269 : 	}

  002d9	e9 be fe ff ff	 jmp	 $LN2@draw_sides
$LN3@draw_sides:

; 1270 : 
; 1271 : 	//
; 1272 : 	// restore 2D environment
; 1273 : 	//
; 1274 : 
; 1275 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  002de	51		 push	 ecx
  002df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  002e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ec	51		 push	 ecx
  002ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  002f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fa	51		 push	 ecx
  002fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00303	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00308	51		 push	 ecx
  00309	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00311	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00316	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0031b	50		 push	 eax
  0031c	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 1276 : 
; 1277 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00321	51		 push	 ecx
  00322	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  0032a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032f	51		 push	 ecx
  00330	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00338	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033d	51		 push	 ecx
  0033e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00346	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034b	51		 push	 ecx
  0034c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00354	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00359	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0035e	50		 push	 eax
  0035f	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1278 : }

  00364	5f		 pop	 edi
  00365	5e		 pop	 esi
  00366	5b		 pop	 ebx
  00367	8b e5		 mov	 esp, ebp
  00369	5d		 pop	 ebp
  0036a	c3		 ret	 0
?draw_sideslip_scale@@YGXXZ ENDP			; draw_sideslip_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_heading_scale@@YGXMH@Z
_TEXT	SEGMENT
tv206 = -176						; size = 8
tv207 = -168						; size = 8
tv174 = -168						; size = 4
tv166 = -164						; size = 4
_command_heading$1 = -96				; size = 4
_bearing$2 = -92					; size = 4
_dz$3 = -88						; size = 4
_dx$4 = -84						; size = 4
_waypoint_position$5 = -80				; size = 12
_gunship_position$6 = -68				; size = 4
_wp$7 = -64						; size = 4
_s$ = -60						; size = 20
_int_heading_step_10$ = -40				; size = 4
_loop$ = -36						; size = 4
_j$ = -32						; size = 4
_i$ = -28						; size = 4
_width$ = -24						; size = 4
_x$ = -20						; size = 4
_mod_heading_step_10$ = -16				; size = 4
_mfd_vp_x_max$ = -12					; size = 4
_mfd_vp_x_min$ = -8					; size = 4
_y_position$ = -4					; size = 4
_heading$ = 8						; size = 4
_draw_command_heading$ = 12				; size = 4
?draw_heading_scale@@YGXMH@Z PROC			; draw_heading_scale, COMDAT

; 990  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 991  : 	float
; 992  : 		y_position,
; 993  : 		mfd_vp_x_min,
; 994  : 		mfd_vp_x_max,
; 995  : 		mod_heading_step_10,
; 996  : 		x,
; 997  : 		width,
; 998  : 		i,
; 999  : 		j;
; 1000 : 
; 1001 : 	int
; 1002 : 		loop,
; 1003 : 		int_heading_step_10;
; 1004 : 
; 1005 : 	char
; 1006 : 		s[20];
; 1007 : 
; 1008 : 	//
; 1009 : 	// adjust 2D environment for heading scale clipping
; 1010 : 	//
; 1011 : 
; 1012 : 	if (draw_large_mfd)

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00013	74 0f		 je	 SHORT $LN5@draw_headi

; 1013 : 	{
; 1014 : 		y_position = -0.85;

  00015	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf59999a
  0001d	f3 0f 11 45 fc	 movss	 DWORD PTR _y_position$[ebp], xmm0

; 1015 : 	}
; 1016 : 	else

  00022	eb 0d		 jmp	 SHORT $LN6@draw_headi
$LN5@draw_headi:

; 1017 : 	{
; 1018 : 		y_position = -0.8375;

  00024	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf566666
  0002c	f3 0f 11 45 fc	 movss	 DWORD PTR _y_position$[ebp], xmm0
$LN6@draw_headi:

; 1019 : 	}
; 1020 : 
; 1021 : 	draw_2d_box(-0.5, y_position - 0.1, 0.5, y_position + 0.1, TRUE, FALSE, MFD_COLOUR_BLUE);

  00031	b8 04 00 00 00	 mov	 eax, 4
  00036	6b c8 11	 imul	 ecx, eax, 17
  00039	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0003f	52		 push	 edx
  00040	6a 00		 push	 0
  00042	6a 01		 push	 1
  00044	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_position$[ebp]
  00049	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00051	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00055	51		 push	 ecx
  00056	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005b	51		 push	 ecx
  0005c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00064	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00069	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_position$[ebp]
  0006e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00076	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0007a	51		 push	 ecx
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	51		 push	 ecx
  00081	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00089	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008e	e8 00 00 00 00	 call	 ?draw_2d_box@@YGXMMMMHHUREAL_COLOUR@@@Z ; draw_2d_box

; 1022 : 	draw_2d_box(-0.5, y_position - 0.1, 0.5, y_position + 0.1, FALSE, FALSE, MFD_COLOUR_LIGHT_BLUE);

  00093	b8 04 00 00 00	 mov	 eax, 4
  00098	c1 e0 04	 shl	 eax, 4
  0009b	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  000a1	51		 push	 ecx
  000a2	6a 00		 push	 0
  000a4	6a 00		 push	 0
  000a6	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_position$[ebp]
  000ab	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  000b3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000b7	51		 push	 ecx
  000b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bd	51		 push	 ecx
  000be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cb	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_position$[ebp]
  000d0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb999999999999a
  000d8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000dc	51		 push	 ecx
  000dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e2	51		 push	 ecx
  000e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  000eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f0	e8 00 00 00 00	 call	 ?draw_2d_box@@YGXMMMMHHUREAL_COLOUR@@@Z ; draw_2d_box

; 1023 : 
; 1024 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN * 0.5, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX * 0.5, MFD_WINDOW_Y_MAX);

  000f5	51		 push	 ecx
  000f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  000fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00103	51		 push	 ecx
  00104	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3effbe77
  0010c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00111	51		 push	 ecx
  00112	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0011a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011f	51		 push	 ecx
  00120	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf000000
  00128	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00132	50		 push	 eax
  00133	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 1025 : 
; 1026 : 	mfd_vp_x_min = mfd_viewport_x_org - (mfd_viewport_size * (0.5 * 0.5));

  00138	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  00140	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  00148	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fd0000000000000
  00150	f2 0f 5c c1	 subsd	 xmm0, xmm1
  00154	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00158	f3 0f 11 45 f8	 movss	 DWORD PTR _mfd_vp_x_min$[ebp], xmm0

; 1027 : 
; 1028 : 	mfd_vp_x_max = mfd_viewport_x_org + (mfd_viewport_size * (0.5 * 0.5)) - 0.001;

  0015d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_x_org@@3MA
  00165	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?mfd_viewport_size@@3MA
  0016d	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fd0000000000000
  00175	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00179	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00181	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00185	f3 0f 11 45 f4	 movss	 DWORD PTR _mfd_vp_x_max$[ebp], xmm0

; 1029 : 
; 1030 : 	set_2d_viewport (mfd_env, mfd_vp_x_min, mfd_viewport_y_min, mfd_vp_x_max, mfd_viewport_y_max);

  0018a	51		 push	 ecx
  0018b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00193	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00198	51		 push	 ecx
  00199	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _mfd_vp_x_max$[ebp]
  0019e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a3	51		 push	 ecx
  001a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  001ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b1	51		 push	 ecx
  001b2	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _mfd_vp_x_min$[ebp]
  001b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  001c1	50		 push	 eax
  001c2	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1031 : 
; 1032 : 	//
; 1033 : 	// large and small MFD position
; 1034 : 	//
; 1035 : 
; 1036 : 
; 1037 : 	//
; 1038 : 	// draw heading scale line
; 1039 : 	//
; 1040 : 
; 1041 : //	draw_2d_line (-0.5, y_position, 0.5, y_position, MFD_COLOUR1);
; 1042 : 
; 1043 : 	//
; 1044 : 	// large and small MFD differences
; 1045 : 	//
; 1046 : 
; 1047 : 	get_2d_float_screen_coordinates (0.0, y_position, &i, &j);

  001c7	8d 45 e0	 lea	 eax, DWORD PTR _j$[ebp]
  001ca	50		 push	 eax
  001cb	8d 4d e4	 lea	 ecx, DWORD PTR _i$[ebp]
  001ce	51		 push	 ecx
  001cf	51		 push	 ecx
  001d0	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y_position$[ebp]
  001d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001da	51		 push	 ecx
  001db	0f 57 c0	 xorps	 xmm0, xmm0
  001de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e3	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 1048 : 
; 1049 : 	set_mono_font_type (MONO_FONT_TYPE_5X9);

  001e8	6a 02		 push	 2
  001ea	e8 00 00 00 00	 call	 ?set_mono_font_type@@YGXW4MONO_FONT_TYPES@@@Z ; set_mono_font_type

; 1050 : 
; 1051 : 	//
; 1052 : 	// draw command heading carat
; 1053 : 	//
; 1054 : 
; 1055 : 	if (draw_command_heading)

  001ef	83 7d 0c 00	 cmp	 DWORD PTR _draw_command_heading$[ebp], 0
  001f3	0f 84 66 02 00
	00		 je	 $LN9@draw_headi

; 1056 : 	{
; 1057 : 		if (!ka50_damage.navigation_computer)

  001f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  001fe	c1 e8 04	 shr	 eax, 4
  00201	83 e0 01	 and	 eax, 1
  00204	0f 85 55 02 00
	00		 jne	 $LN9@draw_headi

; 1058 : 		{
; 1059 : 			entity
; 1060 : 				*wp;
; 1061 : 
; 1062 : 			wp = get_local_entity_current_waypoint (get_gunship_entity ());

  0020a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0020f	50		 push	 eax
  00210	e8 00 00 00 00	 call	 ?get_local_entity_current_waypoint@@YGPAUENTITY@@PAU1@@Z ; get_local_entity_current_waypoint
  00215	89 45 c0	 mov	 DWORD PTR _wp$7[ebp], eax

; 1063 : 
; 1064 : 			if (wp)

  00218	83 7d c0 00	 cmp	 DWORD PTR _wp$7[ebp], 0
  0021c	0f 84 3d 02 00
	00		 je	 $LN9@draw_headi

; 1065 : 			{
; 1066 : 				vec3d
; 1067 : 					*gunship_position,
; 1068 : 					waypoint_position;
; 1069 : 
; 1070 : 				float
; 1071 : 					dx,
; 1072 : 					dz,
; 1073 : 					bearing,
; 1074 : 					command_heading;
; 1075 : 
; 1076 : 				gunship_position = get_local_entity_vec3d_ptr (get_gunship_entity (), VEC3D_TYPE_POSITION);

  00222	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gunship_entity@@3PAUENTITY@@A, 0 ; gunship_entity
  00229	74 0f		 je	 SHORT $LN18@draw_headi
  0022b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  00230	8b 08		 mov	 ecx, DWORD PTR [eax]
  00232	89 8d 5c ff ff
	ff		 mov	 DWORD PTR tv166[ebp], ecx
  00238	eb 24		 jmp	 SHORT $LN19@draw_headi
$LN18@draw_headi:
  0023a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_heading_scale@@YGXMH@Z@4JA
  00240	83 c2 56	 add	 edx, 86			; 00000056H
  00243	52		 push	 edx
  00244	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00249	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0024e	50		 push	 eax
  0024f	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00254	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv166[ebp], 0
$LN19@draw_headi:
  0025e	b9 01 00 00 00	 mov	 ecx, 1
  00263	85 c9		 test	 ecx, ecx
  00265	74 0c		 je	 SHORT $LN20@draw_headi
  00267	c7 85 58 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv174[ebp], 8
  00271	eb 24		 jmp	 SHORT $LN21@draw_headi
$LN20@draw_headi:
  00273	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_heading_scale@@YGXMH@Z@4JA
  00279	83 c2 56	 add	 edx, 86			; 00000056H
  0027c	52		 push	 edx
  0027d	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00282	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  00287	50		 push	 eax
  00288	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0028d	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv174[ebp], 0
$LN21@draw_headi:
  00297	6a 08		 push	 8
  00299	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  0029f	51		 push	 ecx
  002a0	6b 95 5c ff ff
	ff 60		 imul	 edx, DWORD PTR tv166[ebp], 96
  002a7	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR tv174[ebp]
  002ad	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  002b4	ff d1		 call	 ecx
  002b6	89 45 bc	 mov	 DWORD PTR _gunship_position$6[ebp], eax

; 1077 : 
; 1078 : 				get_waypoint_display_position (get_gunship_entity (), wp, &waypoint_position);

  002b9	8d 45 b0	 lea	 eax, DWORD PTR _waypoint_position$5[ebp]
  002bc	50		 push	 eax
  002bd	8b 4d c0	 mov	 ecx, DWORD PTR _wp$7[ebp]
  002c0	51		 push	 ecx
  002c1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  002c7	52		 push	 edx
  002c8	e8 00 00 00 00	 call	 ?get_waypoint_display_position@@YGXPAUENTITY@@0PAUVEC3D@@@Z ; get_waypoint_display_position

; 1079 : 
; 1080 : 				dx = waypoint_position.x - gunship_position->x;

  002cd	8b 45 bc	 mov	 eax, DWORD PTR _gunship_position$6[ebp]
  002d0	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _waypoint_position$5[ebp]
  002d5	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  002d9	f3 0f 11 45 ac	 movss	 DWORD PTR _dx$4[ebp], xmm0

; 1081 : 				dz = waypoint_position.z - gunship_position->z;

  002de	8b 45 bc	 mov	 eax, DWORD PTR _gunship_position$6[ebp]
  002e1	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _waypoint_position$5[ebp+8]
  002e6	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  002eb	f3 0f 11 45 a8	 movss	 DWORD PTR _dz$3[ebp], xmm0

; 1082 : 
; 1083 : 				bearing = atan2 (dx, dz);

  002f0	51		 push	 ecx
  002f1	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _dz$3[ebp]
  002f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fb	51		 push	 ecx
  002fc	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _dx$4[ebp]
  00301	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00306	e8 00 00 00 00	 call	 ?atan2@@YGMMM@Z		; atan2
  0030b	d9 5d a4	 fstp	 DWORD PTR _bearing$2[ebp]

; 1084 : 
; 1085 : 				command_heading = bearing - heading;

  0030e	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _bearing$2[ebp]
  00313	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _heading$[ebp]
  00318	f3 0f 11 45 a0	 movss	 DWORD PTR _command_heading$1[ebp], xmm0

; 1086 : 
; 1087 : 				if (command_heading > rad (180.0))

  0031d	f3 0f 5a 45 a0	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  00322	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@400921fb51000000
  0032a	76 18		 jbe	 SHORT $LN10@draw_headi

; 1088 : 				{
; 1089 : 					command_heading -= rad (360.0);

  0032c	f3 0f 5a 45 a0	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  00331	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@401921fb51000000
  00339	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0033d	f3 0f 11 45 a0	 movss	 DWORD PTR _command_heading$1[ebp], xmm0
  00342	eb 29		 jmp	 SHORT $LN12@draw_headi
$LN10@draw_headi:

; 1090 : 				}
; 1091 : 				else if (command_heading < rad (-180.0))

  00344	f3 0f 5a 45 a0	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  00349	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@c00921fb51000000
  00351	66 0f 2f c8	 comisd	 xmm1, xmm0
  00355	76 16		 jbe	 SHORT $LN12@draw_headi

; 1092 : 				{
; 1093 : 					command_heading += rad (360.0);

  00357	f3 0f 5a 45 a0	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  0035c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@401921fb51000000
  00364	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00368	f3 0f 11 45 a0	 movss	 DWORD PTR _command_heading$1[ebp], xmm0
$LN12@draw_headi:

; 1094 : 				}
; 1095 : 
; 1096 : 				command_heading = bound (command_heading, rad (-20.0), rad (20.0));

  0036d	f3 0f 5a 45 a0	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  00372	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@bfd6571848000000
  0037a	66 0f 2f c8	 comisd	 xmm1, xmm0
  0037e	76 12		 jbe	 SHORT $LN24@draw_headi
  00380	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bfd6571848000000
  00388	f2 0f 11 85 58
	ff ff ff	 movsd	 QWORD PTR tv207[ebp], xmm0
  00390	eb 3e		 jmp	 SHORT $LN25@draw_headi
$LN24@draw_headi:
  00392	f3 0f 5a 45 a0	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  00397	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3fd6571848000000
  0039f	76 12		 jbe	 SHORT $LN22@draw_headi
  003a1	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fd6571848000000
  003a9	f2 0f 11 85 50
	ff ff ff	 movsd	 QWORD PTR tv206[ebp], xmm0
  003b1	eb 0d		 jmp	 SHORT $LN23@draw_headi
$LN22@draw_headi:
  003b3	f3 0f 5a 45 a0	 cvtss2sd xmm0, DWORD PTR _command_heading$1[ebp]
  003b8	f2 0f 11 85 50
	ff ff ff	 movsd	 QWORD PTR tv206[ebp], xmm0
$LN23@draw_headi:
  003c0	f2 0f 10 85 50
	ff ff ff	 movsd	 xmm0, QWORD PTR tv206[ebp]
  003c8	f2 0f 11 85 58
	ff ff ff	 movsd	 QWORD PTR tv207[ebp], xmm0
$LN25@draw_headi:
  003d0	f2 0f 5a 85 58
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR tv207[ebp]
  003d8	f3 0f 11 45 a0	 movss	 DWORD PTR _command_heading$1[ebp], xmm0

; 1097 : 
; 1098 : 				get_2d_float_screen_coordinates (deg(command_heading) * (0.025), y_position + 0.05, &i, &j);

  003dd	8d 45 e0	 lea	 eax, DWORD PTR _j$[ebp]
  003e0	50		 push	 eax
  003e1	8d 4d e4	 lea	 ecx, DWORD PTR _i$[ebp]
  003e4	51		 push	 ecx
  003e5	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_position$[ebp]
  003ea	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa999999999999a
  003f2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003f6	51		 push	 ecx
  003f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003fc	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR _command_heading$1[ebp]
  00401	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  00409	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0040d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f9999999999999a
  00415	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00419	51		 push	 ecx
  0041a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0041f	e8 00 00 00 00	 call	 ?get_2d_float_screen_coordinates@@YGXMMPAM0@Z ; get_2d_float_screen_coordinates

; 1099 : 
; 1100 : 				draw_mono_sprite (small_command_heading_carat, i, j + 1.0, MFD_COLOUR1);

  00424	b8 04 00 00 00	 mov	 eax, 4
  00429	6b c8 00	 imul	 ecx, eax, 0
  0042c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00432	52		 push	 edx
  00433	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR _j$[ebp]
  00438	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00440	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00444	51		 push	 ecx
  00445	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044a	51		 push	 ecx
  0044b	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _i$[ebp]
  00450	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00455	68 00 00 00 00	 push	 OFFSET ?small_command_heading_carat@@3PADA
  0045a	e8 00 00 00 00	 call	 ?draw_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_mono_sprite
$LN9@draw_headi:

; 1101 : 			}
; 1102 : 		}
; 1103 : 	}
; 1104 : 
; 1105 : 	//
; 1106 : 	// sort first major tick position (draw 2 major ticks either side of centre)
; 1107 : 	//
; 1108 : 
; 1109 : 	heading = deg (heading);

  0045f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _heading$[ebp]
  00464	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0
  0046c	f3 0f 11 45 08	 movss	 DWORD PTR _heading$[ebp], xmm0

; 1110 : 
; 1111 : 	mod_heading_step_10 = fmod (heading, 10.0f);

  00471	51		 push	 ecx
  00472	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  0047a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047f	51		 push	 ecx
  00480	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _heading$[ebp]
  00485	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0048a	e8 00 00 00 00	 call	 ?fmod@@YGMMM@Z		; fmod
  0048f	d9 5d f0	 fstp	 DWORD PTR _mod_heading_step_10$[ebp]

; 1112 : 
; 1113 : 	int_heading_step_10 = ((int) (heading * 0.1) * 10);

  00492	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR _heading$[ebp]
  00497	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fb999999999999a
  0049f	f2 0f 2c c0	 cvttsd2si eax, xmm0
  004a3	6b c8 0a	 imul	 ecx, eax, 10
  004a6	89 4d d8	 mov	 DWORD PTR _int_heading_step_10$[ebp], ecx

; 1114 : 
; 1115 : 	int_heading_step_10 -= 40;

  004a9	8b 45 d8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  004ac	83 e8 28	 sub	 eax, 40			; 00000028H
  004af	89 45 d8	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax

; 1116 : 
; 1117 : 	if (int_heading_step_10 < 0)

  004b2	79 0b		 jns	 SHORT $LN13@draw_headi

; 1118 : 	{
; 1119 : 		int_heading_step_10 += 360;

  004b4	8b 45 d8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  004b7	05 68 01 00 00	 add	 eax, 360		; 00000168H
  004bc	89 45 d8	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax
$LN13@draw_headi:

; 1120 : 	}
; 1121 : 
; 1122 : 	x = - (40.0 + mod_heading_step_10) * 0.025;

  004bf	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR _mod_heading_step_10$[ebp]
  004c4	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4044000000000000
  004cc	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  004d3	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f9999999999999a
  004db	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  004df	f3 0f 11 45 ec	 movss	 DWORD PTR _x$[ebp], xmm0

; 1123 : 
; 1124 : 	//
; 1125 : 	// draw heading scale ticks and heading value
; 1126 : 	//
; 1127 : 
; 1128 : 	for (loop = 0; loop < 20; loop++)

  004e4	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _loop$[ebp], 0
  004eb	eb 09		 jmp	 SHORT $LN4@draw_headi
$LN2@draw_headi:
  004ed	8b 45 dc	 mov	 eax, DWORD PTR _loop$[ebp]
  004f0	83 c0 01	 add	 eax, 1
  004f3	89 45 dc	 mov	 DWORD PTR _loop$[ebp], eax
$LN4@draw_headi:
  004f6	83 7d dc 14	 cmp	 DWORD PTR _loop$[ebp], 20 ; 00000014H
  004fa	0f 8d a3 01 00
	00		 jge	 $LN3@draw_headi

; 1129 : 	{
; 1130 : 		//
; 1131 : 		// major tick every 10 degrees
; 1132 : 		//
; 1133 : 
; 1134 : 		draw_2d_line (x, y_position + 0.1, x, y_position + 0.05, MFD_COLOUR_LIGHT_BLUE);

  00500	b8 04 00 00 00	 mov	 eax, 4
  00505	c1 e0 04	 shl	 eax, 4
  00508	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  0050e	51		 push	 ecx
  0050f	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_position$[ebp]
  00514	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fa999999999999a
  0051c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00520	51		 push	 ecx
  00521	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00526	51		 push	 ecx
  00527	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x$[ebp]
  0052c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00531	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_position$[ebp]
  00536	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  0053e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00542	51		 push	 ecx
  00543	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00548	51		 push	 ecx
  00549	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x$[ebp]
  0054e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00553	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1135 : 
; 1136 : 		//
; 1137 : 		// minor tick every 5 degrees
; 1138 : 		//
; 1139 : 
; 1140 : 		draw_2d_line (x + 0.125, y_position + 0.1, x + 0.125, y_position + 0.075, MFD_COLOUR_LIGHT_BLUE);

  00558	b8 04 00 00 00	 mov	 eax, 4
  0055d	c1 e0 04	 shl	 eax, 4
  00560	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax]
  00566	51		 push	 ecx
  00567	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_position$[ebp]
  0056c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb3333333333333
  00574	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00578	51		 push	 ecx
  00579	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057e	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00583	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc0000000000000
  0058b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0058f	51		 push	 ecx
  00590	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00595	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_position$[ebp]
  0059a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  005a2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005a6	51		 push	 ecx
  005a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ac	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  005b1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fc0000000000000
  005b9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005bd	51		 push	 ecx
  005be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c3	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 1141 : 
; 1142 : 		//
; 1143 : 		// heading value ('0' displayed as '360')
; 1144 : 		//
; 1145 : 
; 1146 : 		if (int_heading_step_10 != 0)

  005c8	83 7d d8 00	 cmp	 DWORD PTR _int_heading_step_10$[ebp], 0
  005cc	74 17		 je	 SHORT $LN14@draw_headi

; 1147 : 		{
; 1148 : 			sprintf (s, "%d", int_heading_step_10);

  005ce	8b 45 d8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  005d1	50		 push	 eax
  005d2	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  005d7	8d 4d c4	 lea	 ecx, DWORD PTR _s$[ebp]
  005da	51		 push	 ecx
  005db	e8 00 00 00 00	 call	 _sprintf
  005e0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1149 : 		}
; 1150 : 		else

  005e3	eb 11		 jmp	 SHORT $LN15@draw_headi
$LN14@draw_headi:

; 1151 : 		{
; 1152 : 			sprintf (s, "360");

  005e5	68 00 00 00 00	 push	 OFFSET ??_C@_03MDIFNIHN@360@
  005ea	8d 45 c4	 lea	 eax, DWORD PTR _s$[ebp]
  005ed	50		 push	 eax
  005ee	e8 00 00 00 00	 call	 _sprintf
  005f3	83 c4 08	 add	 esp, 8
$LN15@draw_headi:

; 1153 : 		}
; 1154 : 
; 1155 : 		set_2d_mono_font_position (x, y_position - 0.1);

  005f6	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _y_position$[ebp]
  005fb	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00603	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00607	51		 push	 ecx
  00608	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0060d	51		 push	 ecx
  0060e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x$[ebp]
  00613	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00618	e8 00 00 00 00	 call	 ?set_2d_mono_font_position@@YGXMM@Z ; set_2d_mono_font_position

; 1156 : 
; 1157 : 		width = get_mono_font_string_width (s);

  0061d	8d 45 c4	 lea	 eax, DWORD PTR _s$[ebp]
  00620	50		 push	 eax
  00621	e8 00 00 00 00	 call	 ?get_mono_font_string_width@@YGMPBD@Z ; get_mono_font_string_width
  00626	d9 5d e8	 fstp	 DWORD PTR _width$[ebp]

; 1158 : 
; 1159 : 		set_mono_font_rel_position ((-width * 0.5) + 1.0, -10.0);

  00629	51		 push	 ecx
  0062a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1200000
  00632	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00637	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _width$[ebp]
  0063c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00643	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00647	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0064f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00657	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0065b	51		 push	 ecx
  0065c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00661	e8 00 00 00 00	 call	 ?set_mono_font_rel_position@@YGXMM@Z ; set_mono_font_rel_position

; 1160 : 
; 1161 : 		print_mono_font_string (s);

  00666	8d 45 c4	 lea	 eax, DWORD PTR _s$[ebp]
  00669	50		 push	 eax
  0066a	e8 00 00 00 00	 call	 ?print_mono_font_string@@YGXPBD@Z ; print_mono_font_string

; 1162 : 
; 1163 : 		//
; 1164 : 		// next heading value
; 1165 : 		//
; 1166 : 
; 1167 : 		int_heading_step_10 += 10;

  0066f	8b 45 d8	 mov	 eax, DWORD PTR _int_heading_step_10$[ebp]
  00672	83 c0 0a	 add	 eax, 10			; 0000000aH
  00675	89 45 d8	 mov	 DWORD PTR _int_heading_step_10$[ebp], eax

; 1168 : 
; 1169 : 		if (int_heading_step_10 == 360)

  00678	81 7d d8 68 01
	00 00		 cmp	 DWORD PTR _int_heading_step_10$[ebp], 360 ; 00000168H
  0067f	75 07		 jne	 SHORT $LN16@draw_headi

; 1170 : 		{
; 1171 : 			int_heading_step_10 = 0;

  00681	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _int_heading_step_10$[ebp], 0
$LN16@draw_headi:

; 1172 : 		}
; 1173 : 
; 1174 : 		x += 0.25;

  00688	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0068d	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  00695	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00699	f3 0f 11 45 ec	 movss	 DWORD PTR _x$[ebp], xmm0

; 1175 : 	}

  0069e	e9 4a fe ff ff	 jmp	 $LN2@draw_headi
$LN3@draw_headi:

; 1176 : 
; 1177 : 	//
; 1178 : 	// restore 2D environment
; 1179 : 	//
; 1180 : 
; 1181 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  006a3	51		 push	 ecx
  006a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  006ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b1	51		 push	 ecx
  006b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  006ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006bf	51		 push	 ecx
  006c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  006c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006cd	51		 push	 ecx
  006ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  006d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  006e0	50		 push	 eax
  006e1	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 1182 : 
; 1183 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  006e6	51		 push	 ecx
  006e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  006ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f4	51		 push	 ecx
  006f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  006fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00702	51		 push	 ecx
  00703	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0070b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00710	51		 push	 ecx
  00711	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00719	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0071e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00723	50		 push	 eax
  00724	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 1184 : }

  00729	5f		 pop	 edi
  0072a	5e		 pop	 esi
  0072b	5b		 pop	 ebx
  0072c	8b e5		 mov	 esp, ebp
  0072e	5d		 pop	 ebp
  0072f	c2 08 00	 ret	 8
?draw_heading_scale@@YGXMH@Z ENDP			; draw_heading_scale
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_overlaid_damaged_mfd@@YGXXZ
_TEXT	SEGMENT
_y$ = -36						; size = 4
_x_right$ = -32						; size = 4
_x_left$ = -28						; size = 4
_x_delta$ = -24						; size = 4
_x_centre$ = -20					; size = 4
_col$ = -16						; size = 4
_i$ = -12						; size = 4
_max_lines$ = -8					; size = 4
_count$ = -4						; size = 4
?draw_overlaid_damaged_mfd@@YGXXZ PROC			; draw_overlaid_damaged_mfd, COMDAT

; 928  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 929  : 	int
; 930  : 		count,
; 931  : 		max_lines,
; 932  : 		i;
; 933  : 
; 934  : 	rgb_colour
; 935  : 		col;
; 936  : 
; 937  : 	float
; 938  : 		x_centre,
; 939  : 		x_delta,
; 940  : 		x_left,
; 941  : 		x_right,
; 942  : 		y;
; 943  : 
; 944  : 	col.r = 0;

  00009	c6 45 f2 00	 mov	 BYTE PTR _col$[ebp+2], 0

; 945  : 	col.g = 0;

  0000d	c6 45 f1 00	 mov	 BYTE PTR _col$[ebp+1], 0

; 946  : 	col.b = 0;

  00011	c6 45 f0 00	 mov	 BYTE PTR _col$[ebp], 0

; 947  : 	col.a = 255;

  00015	c6 45 f3 ff	 mov	 BYTE PTR _col$[ebp+3], 255 ; 000000ffH

; 948  : 
; 949  : 	if (draw_large_mfd)

  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00020	74 09		 je	 SHORT $LN5@draw_overl

; 950  : 	{
; 951  : 		max_lines = 150;

  00022	c7 45 f8 96 00
	00 00		 mov	 DWORD PTR _max_lines$[ebp], 150 ; 00000096H

; 952  : 	}
; 953  : 	else

  00029	eb 07		 jmp	 SHORT $LN6@draw_overl
$LN5@draw_overl:

; 954  : 	{
; 955  : 		max_lines = 75;

  0002b	c7 45 f8 4b 00
	00 00		 mov	 DWORD PTR _max_lines$[ebp], 75 ; 0000004bH
$LN6@draw_overl:

; 956  : 	}
; 957  : 
; 958  : 	for (count = 0; count < max_lines; count++)

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00039	eb 09		 jmp	 SHORT $LN4@draw_overl
$LN2@draw_overl:
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0003e	83 c0 01	 add	 eax, 1
  00041	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@draw_overl:
  00044	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00047	3b 45 f8	 cmp	 eax, DWORD PTR _max_lines$[ebp]
  0004a	0f 8d 7c 01 00
	00		 jge	 $LN3@draw_overl

; 959  : 	{
; 960  : 		convert_float_to_int (frand1 () * 127.0, &i);

  00050	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  0005a	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  0005f	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00064	8d 4d f4	 lea	 ecx, DWORD PTR _i$[ebp]
  00067	51		 push	 ecx
  00068	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  0006e	c1 fa 10	 sar	 edx, 16			; 00000010H
  00071	81 e2 ff 7f 00
	00		 and	 edx, 32767		; 00007fffH
  00077	f2 0f 2a c2	 cvtsi2sd xmm0, edx
  0007b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00083	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@405fc00000000000
  0008b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0008f	51		 push	 ecx
  00090	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00095	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 961  : 
; 962  : 		col.r = i + 128;

  0009a	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0009d	05 80 00 00 00	 add	 eax, 128		; 00000080H
  000a2	88 45 f2	 mov	 BYTE PTR _col$[ebp+2], al

; 963  : 		col.g = i + 128;

  000a5	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000a8	05 80 00 00 00	 add	 eax, 128		; 00000080H
  000ad	88 45 f1	 mov	 BYTE PTR _col$[ebp+1], al

; 964  : 
; 965  : 		x_centre = sfrand1 ();

  000b0	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  000ba	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  000bf	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  000c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  000ca	c1 f9 10	 sar	 ecx, 16			; 00000010H
  000cd	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  000d3	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  000d9	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  000dd	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  000e5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000e9	f3 0f 11 45 ec	 movss	 DWORD PTR _x_centre$[ebp], xmm0

; 966  : 
; 967  : 		x_delta = (frand1 () * 0.5) + 0.25;

  000ee	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  000f8	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  000fd	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00102	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00108	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0010b	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00111	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00115	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  0011d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00125	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  0012d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00131	f3 0f 11 45 e8	 movss	 DWORD PTR _x_delta$[ebp], xmm0

; 968  : 
; 969  : 		x_left = x_centre - x_delta;

  00136	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  0013b	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _x_delta$[ebp]
  00140	f3 0f 11 45 e4	 movss	 DWORD PTR _x_left$[ebp], xmm0

; 970  : 
; 971  : 		x_right = x_centre + x_delta;

  00145	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  0014a	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _x_delta$[ebp]
  0014f	f3 0f 11 45 e0	 movss	 DWORD PTR _x_right$[ebp], xmm0

; 972  : 
; 973  : 		y = sfrand1 ();

  00154	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  0015e	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00163	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00168	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  0016e	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00171	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00177	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  0017d	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00181	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  00189	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0018d	f3 0f 11 45 dc	 movss	 DWORD PTR _y$[ebp], xmm0

; 974  : 
; 975  : 		draw_2d_line (x_left, y, x_right, y, col);

  00192	8b 45 f0	 mov	 eax, DWORD PTR _col$[ebp]
  00195	50		 push	 eax
  00196	51		 push	 ecx
  00197	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y$[ebp]
  0019c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a1	51		 push	 ecx
  001a2	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x_right$[ebp]
  001a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ac	51		 push	 ecx
  001ad	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y$[ebp]
  001b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b7	51		 push	 ecx
  001b8	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x_left$[ebp]
  001bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 976  : 	}

  001c7	e9 6f fe ff ff	 jmp	 $LN2@draw_overl
$LN3@draw_overl:

; 977  : }

  001cc	5f		 pop	 edi
  001cd	5e		 pop	 esi
  001ce	5b		 pop	 ebx
  001cf	8b e5		 mov	 esp, ebp
  001d1	5d		 pop	 ebp
  001d2	c3		 ret	 0
?draw_overlaid_damaged_mfd@@YGXXZ ENDP			; draw_overlaid_damaged_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_damaged_mfd@@YGXXZ
_TEXT	SEGMENT
_y$ = -36						; size = 4
_x_right$ = -32						; size = 4
_x_left$ = -28						; size = 4
_x_delta$ = -24						; size = 4
_x_centre$ = -20					; size = 4
_col$ = -16						; size = 4
_i$ = -12						; size = 4
_max_lines$ = -8					; size = 4
_count$ = -4						; size = 4
?draw_damaged_mfd@@YGXXZ PROC				; draw_damaged_mfd, COMDAT

; 872  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 873  : 	int
; 874  : 		count,
; 875  : 		max_lines,
; 876  : 		i;
; 877  : 
; 878  : 	rgb_colour
; 879  : 		col;
; 880  : 
; 881  : 	float
; 882  : 		x_centre,
; 883  : 		x_delta,
; 884  : 		x_left,
; 885  : 		x_right,
; 886  : 		y;
; 887  : 
; 888  : 	col.r = 0;

  00009	c6 45 f2 00	 mov	 BYTE PTR _col$[ebp+2], 0

; 889  : 	col.g = 0;

  0000d	c6 45 f1 00	 mov	 BYTE PTR _col$[ebp+1], 0

; 890  : 	col.b = 0;

  00011	c6 45 f0 00	 mov	 BYTE PTR _col$[ebp], 0

; 891  : 	col.a = 255;

  00015	c6 45 f3 ff	 mov	 BYTE PTR _col$[ebp+3], 255 ; 000000ffH

; 892  : 
; 893  : 	if (draw_large_mfd)

  00019	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00020	74 09		 je	 SHORT $LN5@draw_damag

; 894  : 	{
; 895  : 		max_lines = 150;

  00022	c7 45 f8 96 00
	00 00		 mov	 DWORD PTR _max_lines$[ebp], 150 ; 00000096H

; 896  : 	}
; 897  : 	else

  00029	eb 07		 jmp	 SHORT $LN6@draw_damag
$LN5@draw_damag:

; 898  : 	{
; 899  : 		max_lines = 75;

  0002b	c7 45 f8 4b 00
	00 00		 mov	 DWORD PTR _max_lines$[ebp], 75 ; 0000004bH
$LN6@draw_damag:

; 900  : 	}
; 901  : 
; 902  : 	for (count = 0; count < max_lines; count++)

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00039	eb 09		 jmp	 SHORT $LN4@draw_damag
$LN2@draw_damag:
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0003e	83 c0 01	 add	 eax, 1
  00041	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN4@draw_damag:
  00044	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00047	3b 45 f8	 cmp	 eax, DWORD PTR _max_lines$[ebp]
  0004a	0f 8d 7c 01 00
	00		 jge	 $LN3@draw_damag

; 903  : 	{
; 904  : 		convert_float_to_int (frand1 () * 127.0, &i);

  00050	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  0005a	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  0005f	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00064	8d 4d f4	 lea	 ecx, DWORD PTR _i$[ebp]
  00067	51		 push	 ecx
  00068	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  0006e	c1 fa 10	 sar	 edx, 16			; 00000010H
  00071	81 e2 ff 7f 00
	00		 and	 edx, 32767		; 00007fffH
  00077	f2 0f 2a c2	 cvtsi2sd xmm0, edx
  0007b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  00083	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@405fc00000000000
  0008b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0008f	51		 push	 ecx
  00090	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00095	e8 00 00 00 00	 call	 ?convert_float_to_int@@YGXMPAH@Z ; convert_float_to_int

; 905  : 
; 906  : 		col.r = i + 128;

  0009a	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0009d	05 80 00 00 00	 add	 eax, 128		; 00000080H
  000a2	88 45 f2	 mov	 BYTE PTR _col$[ebp+2], al

; 907  : 		col.g = (i >> 1) + 64;

  000a5	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000a8	d1 f8		 sar	 eax, 1
  000aa	83 c0 40	 add	 eax, 64			; 00000040H
  000ad	88 45 f1	 mov	 BYTE PTR _col$[ebp+1], al

; 908  : 
; 909  : 		x_centre = sfrand1 ();

  000b0	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  000ba	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  000bf	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  000c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  000ca	c1 f9 10	 sar	 ecx, 16			; 00000010H
  000cd	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  000d3	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  000d9	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  000dd	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  000e5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000e9	f3 0f 11 45 ec	 movss	 DWORD PTR _x_centre$[ebp], xmm0

; 910  : 
; 911  : 		x_delta = (frand1 () * 0.5) + 0.25;

  000ee	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  000f8	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  000fd	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00102	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  00108	c1 f9 10	 sar	 ecx, 16			; 00000010H
  0010b	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00111	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00115	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00002000400080
  0011d	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00125	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fd0000000000000
  0012d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00131	f3 0f 11 45 e8	 movss	 DWORD PTR _x_delta$[ebp], xmm0

; 912  : 
; 913  : 		x_left = x_centre - x_delta;

  00136	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  0013b	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _x_delta$[ebp]
  00140	f3 0f 11 45 e4	 movss	 DWORD PTR _x_left$[ebp], xmm0

; 914  : 
; 915  : 		x_right = x_centre + x_delta;

  00145	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _x_centre$[ebp]
  0014a	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _x_delta$[ebp]
  0014f	f3 0f 11 45 e0	 movss	 DWORD PTR _x_right$[ebp], xmm0

; 916  : 
; 917  : 		y = sfrand1 ();

  00154	69 05 00 00 00
	00 6d 4e c6 41	 imul	 eax, DWORD PTR ?random_number_seed@@3HA, 1103515245 ; random_number_seed
  0015e	05 39 30 00 00	 add	 eax, 12345		; 00003039H
  00163	a3 00 00 00 00	 mov	 DWORD PTR ?random_number_seed@@3HA, eax ; random_number_seed
  00168	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?random_number_seed@@3HA ; random_number_seed
  0016e	c1 f9 10	 sar	 ecx, 16			; 00000010H
  00171	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  00177	81 e9 00 40 00
	00		 sub	 ecx, 16384		; 00004000H
  0017d	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00181	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f10000000000000
  00189	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0018d	f3 0f 11 45 dc	 movss	 DWORD PTR _y$[ebp], xmm0

; 918  : 
; 919  : 		draw_2d_line (x_left, y, x_right, y, col);

  00192	8b 45 f0	 mov	 eax, DWORD PTR _col$[ebp]
  00195	50		 push	 eax
  00196	51		 push	 ecx
  00197	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y$[ebp]
  0019c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a1	51		 push	 ecx
  001a2	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _x_right$[ebp]
  001a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ac	51		 push	 ecx
  001ad	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _y$[ebp]
  001b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b7	51		 push	 ecx
  001b8	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _x_left$[ebp]
  001bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c2	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 920  : 	}

  001c7	e9 6f fe ff ff	 jmp	 $LN2@draw_damag
$LN3@draw_damag:

; 921  : }

  001cc	5f		 pop	 edi
  001cd	5e		 pop	 esi
  001ce	5b		 pop	 ebx
  001cf	8b e5		 mov	 esp, ebp
  001d1	5d		 pop	 ebp
  001d2	c3		 ret	 0
?draw_damaged_mfd@@YGXXZ ENDP				; draw_damaged_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_layout_grid@@YGXXZ
_TEXT	SEGMENT
_y$ = -8						; size = 4
_x$ = -4						; size = 4
?draw_layout_grid@@YGXXZ PROC				; draw_layout_grid, COMDAT

; 842  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 843  : 	float
; 844  : 		x,
; 845  : 		y;
; 846  : 
; 847  : 	if (display_mfd_layout_grid)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?display_mfd_layout_grid@@3HA, 0 ; display_mfd_layout_grid
  00010	0f 84 ee 00 00
	00		 je	 $LN6@draw_layou

; 848  : 	{
; 849  : 		for (x = -1.0; x <= 1.0; x += 0.1)

  00016	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0001e	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0
  00023	eb 16		 jmp	 SHORT $LN4@draw_layou
$LN2@draw_layou:
  00025	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  0002a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  00032	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00036	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0
$LN4@draw_layou:
  0003b	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _x$[ebp]
  00040	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00048	66 0f 2f c8	 comisd	 xmm1, xmm0
  0004c	72 3f		 jb	 SHORT $LN3@draw_layou

; 850  : 		{
; 851  : 			draw_2d_line (x, -1.0, x, 1.0, sys_col_red);

  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  00053	50		 push	 eax
  00054	51		 push	 ecx
  00055	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0005d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00062	51		 push	 ecx
  00063	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00068	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006d	51		 push	 ecx
  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00076	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007b	51		 push	 ecx
  0007c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  00081	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00086	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 852  : 		}

  0008b	eb 98		 jmp	 SHORT $LN2@draw_layou
$LN3@draw_layou:

; 853  : 
; 854  : 		for (y = -1.0; y <= 1.0; y += 0.1)

  0008d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00095	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0
  0009a	eb 16		 jmp	 SHORT $LN7@draw_layou
$LN5@draw_layou:
  0009c	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  000a1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fb999999999999a
  000a9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ad	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0
$LN7@draw_layou:
  000b2	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _y$[ebp]
  000b7	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000bf	66 0f 2f c8	 comisd	 xmm1, xmm0
  000c3	72 3f		 jb	 SHORT $LN6@draw_layou

; 855  : 		{
; 856  : 			draw_2d_line (-1.0, y, 1.0, y, sys_col_red);

  000c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sys_col_red@@3UREAL_COLOUR@@A ; sys_col_red
  000ca	50		 push	 eax
  000cb	51		 push	 ecx
  000cc	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d6	51		 push	 ecx
  000d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e4	51		 push	 ecx
  000e5	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ef	51		 push	 ecx
  000f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fd	e8 00 00 00 00	 call	 ?draw_2d_line@@YGXMMMMUREAL_COLOUR@@@Z ; draw_2d_line

; 857  : 		}

  00102	eb 98		 jmp	 SHORT $LN5@draw_layou
$LN6@draw_layou:

; 858  : 	}
; 859  : }

  00104	5f		 pop	 edi
  00105	5e		 pop	 esi
  00106	5b		 pop	 ebx
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c3		 ret	 0
?draw_layout_grid@@YGXXZ ENDP				; draw_layout_grid
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
_j$ = 12						; size = 4
?transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z PROC ; transform_mfd_screen_co_ords_to_mfd_texture_co_ords, COMDAT

; 820  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 821  : 	ASSERT (i);

  00009	83 7d 08 00	 cmp	 DWORD PTR _i$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@transform_
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@transform_:

; 822  : 	ASSERT (j);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _j$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@transform_
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z@4JA
  00032	83 c0 02	 add	 eax, 2
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_01CBDEGOCN@j@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@transform_:

; 823  : 
; 824  : 	*i -= mfd_screen_x_min;

  00045	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  00048	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0004c	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00054	8b 4d 08	 mov	 ecx, DWORD PTR _i$[ebp]
  00057	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 825  : 	*j -= mfd_screen_y_min;

  0005b	8b 45 0c	 mov	 eax, DWORD PTR _j$[ebp]
  0005e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00062	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _j$[ebp]
  0006d	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 826  : 
; 827  : 	*i *= mfd_screen_x_scale;

  00071	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  00074	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00078	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?mfd_screen_x_scale@@3MA
  00080	8b 4d 08	 mov	 ecx, DWORD PTR _i$[ebp]
  00083	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 828  : 	*j *= mfd_screen_y_scale;

  00087	8b 45 0c	 mov	 eax, DWORD PTR _j$[ebp]
  0008a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0008e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?mfd_screen_y_scale@@3MA
  00096	8b 4d 0c	 mov	 ecx, DWORD PTR _j$[ebp]
  00099	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 829  : }

  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 08 00	 ret	 8
?transform_mfd_screen_co_ords_to_mfd_texture_co_ords@@YGXPAM0@Z ENDP ; transform_mfd_screen_co_ords_to_mfd_texture_co_ords
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?get_mfd_mode_for_eo_sensor@@YG?AW4KA50_MFD_MODES@@XZ
_TEXT	SEGMENT
_mfd_mode$ = -4						; size = 4
?get_mfd_mode_for_eo_sensor@@YG?AW4KA50_MFD_MODES@@XZ PROC ; get_mfd_mode_for_eo_sensor, COMDAT

; 7881 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7882 : 	ka50_mfd_modes
; 7883 : 		mfd_mode;
; 7884 : 
; 7885 : 	if (eo_sensor == TARGET_ACQUISITION_SYSTEM_FLIR)

  00009	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A, 3 ; eo_sensor
  00010	75 09		 jne	 SHORT $LN2@get_mfd_mo

; 7886 : 	{
; 7887 : 		mfd_mode = KA50_MFD_MODE_FLIR;

  00012	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 2

; 7888 : 	}
; 7889 : 	else

  00019	eb 13		 jmp	 SHORT $LN3@get_mfd_mo
$LN2@get_mfd_mo:

; 7890 : 	{
; 7891 : 		debug_fatal ("Invalid EO sensor = %d", eo_sensor);

  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_sensor@@3W4TARGET_ACQUISITION_SYSTEMS@@A ; eo_sensor
  00020	50		 push	 eax
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BHIMKDNE@Invalid?5EO?5sensor?5?$DN?5?$CFd@
  00026	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0002b	83 c4 08	 add	 esp, 8
$LN3@get_mfd_mo:

; 7892 : 	}
; 7893 : 
; 7894 : 	return (mfd_mode);

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode$[ebp]

; 7895 : }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?get_mfd_mode_for_eo_sensor@@YG?AW4KA50_MFD_MODES@@XZ ENDP ; get_mfd_mode_for_eo_sensor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z
_TEXT	SEGMENT
tv367 = -100						; size = 4
tv288 = -100						; size = 4
tv256 = -100						; size = 4
tv223 = -100						; size = 4
tv193 = -100						; size = 4
tv165 = -100						; size = 4
tv145 = -100						; size = 4
tv88 = -100						; size = 4
tv360 = -96						; size = 4
tv281 = -96						; size = 4
tv249 = -96						; size = 4
tv216 = -96						; size = 4
tv185 = -96						; size = 4
tv157 = -96						; size = 4
tv137 = -96						; size = 4
tv80 = -96						; size = 4
_target_position$ = -28					; size = 4
_dy$ = -24						; size = 4
_dx$ = -20						; size = 4
_source$ = -16						; size = 4
_source_side$ = -12					; size = 4
_target_symbol_colour$ = -8				; size = 4
_target_symbol_type$ = -4				; size = 4
_target$ = 8						; size = 4
_source_position$ = 12					; size = 4
_scale$ = 16						; size = 4
_selected_target$ = 20					; size = 4
_display_on_tsd$ = 24					; size = 4
?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z PROC ; draw_radar_target_symbol, COMDAT

; 249  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 250  : 	target_symbol_types
; 251  : 		target_symbol_type;
; 252  : 
; 253  : 	rgb_colour
; 254  : 		target_symbol_colour;
; 255  : 
; 256  : //VJ 030423 TSD render mod
; 257  : 	entity_sides
; 258  : 		source_side;
; 259  : 	entity
; 260  : 		*source;
; 261  : 
; 262  : 	float
; 263  : 		dx,
; 264  : 		dy;
; 265  : 
; 266  : 	vec3d
; 267  : 		*target_position;
; 268  : 
; 269  : 	ASSERT (target);

  00009	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@draw_radar
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  00014	83 c0 14	 add	 eax, 20			; 00000014H
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@draw_radar:

; 270  : 
; 271  : 	ASSERT (source_position);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _source_position$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@draw_radar
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  00032	83 c0 16	 add	 eax, 22			; 00000016H
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IIPCKJML@source_position@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@draw_radar:

; 272  : 
; 273  : 	ASSERT (!get_local_entity_int_value (target, INT_TYPE_GROUND_RADAR_CLUTTER));

  00045	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  00049	74 0a		 je	 SHORT $LN46@draw_radar
  0004b	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	89 4d a0	 mov	 DWORD PTR tv80[ebp], ecx
  00053	eb 21		 jmp	 SHORT $LN47@draw_radar
$LN46@draw_radar:
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0005b	83 c2 18	 add	 edx, 24			; 00000018H
  0005e	52		 push	 edx
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0006f	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN47@draw_radar:
  00076	b9 01 00 00 00	 mov	 ecx, 1
  0007b	85 c9		 test	 ecx, ecx
  0007d	74 09		 je	 SHORT $LN48@draw_radar
  0007f	c7 45 9c 42 00
	00 00		 mov	 DWORD PTR tv88[ebp], 66	; 00000042H
  00086	eb 21		 jmp	 SHORT $LN49@draw_radar
$LN48@draw_radar:
  00088	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0008e	83 c2 18	 add	 edx, 24			; 00000018H
  00091	52		 push	 edx
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  000a2	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$LN49@draw_radar:
  000a9	6a 42		 push	 66			; 00000042H
  000ab	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  000ae	51		 push	 ecx
  000af	69 55 a0 5c 04
	00 00		 imul	 edx, DWORD PTR tv80[ebp], 1116
  000b6	8b 45 9c	 mov	 eax, DWORD PTR tv88[ebp]
  000b9	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  000c0	ff d1		 call	 ecx
  000c2	85 c0		 test	 eax, eax
  000c4	74 18		 je	 SHORT $LN4@draw_radar
  000c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  000cb	83 c0 18	 add	 eax, 24			; 00000018H
  000ce	50		 push	 eax
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@DBLNIBMF@?$CBget_local_entity_int_value?5?$CIta@
  000d9	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@draw_radar:

; 274  : 
; 275  : //VJ 030423 TSD render mod
; 276  : 	source = get_gunship_entity ();

  000de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gunship_entity@@3PAUENTITY@@A ; gunship_entity
  000e3	89 45 f0	 mov	 DWORD PTR _source$[ebp], eax

; 277  : 	source_side = (entity_sides) get_local_entity_int_value (source, INT_TYPE_SIDE);

  000e6	83 7d f0 00	 cmp	 DWORD PTR _source$[ebp], 0
  000ea	74 0a		 je	 SHORT $LN50@draw_radar
  000ec	8b 45 f0	 mov	 eax, DWORD PTR _source$[ebp]
  000ef	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f1	89 4d a0	 mov	 DWORD PTR tv137[ebp], ecx
  000f4	eb 21		 jmp	 SHORT $LN51@draw_radar
$LN50@draw_radar:
  000f6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  000fc	83 c2 1c	 add	 edx, 28			; 0000001cH
  000ff	52		 push	 edx
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00105	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00110	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv137[ebp], 0
$LN51@draw_radar:
  00117	b9 01 00 00 00	 mov	 ecx, 1
  0011c	85 c9		 test	 ecx, ecx
  0011e	74 09		 je	 SHORT $LN52@draw_radar
  00120	c7 45 9c bb 00
	00 00		 mov	 DWORD PTR tv145[ebp], 187 ; 000000bbH
  00127	eb 21		 jmp	 SHORT $LN53@draw_radar
$LN52@draw_radar:
  00129	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0012f	83 c2 1c	 add	 edx, 28			; 0000001cH
  00132	52		 push	 edx
  00133	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00138	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0013d	50		 push	 eax
  0013e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00143	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv145[ebp], 0
$LN53@draw_radar:
  0014a	68 bb 00 00 00	 push	 187			; 000000bbH
  0014f	8b 4d f0	 mov	 ecx, DWORD PTR _source$[ebp]
  00152	51		 push	 ecx
  00153	69 55 a0 5c 04
	00 00		 imul	 edx, DWORD PTR tv137[ebp], 1116
  0015a	8b 45 9c	 mov	 eax, DWORD PTR tv145[ebp]
  0015d	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00164	ff d1		 call	 ecx
  00166	89 45 f4	 mov	 DWORD PTR _source_side$[ebp], eax

; 278  : 
; 279  : 	target_position = get_local_entity_vec3d_ptr (target, VEC3D_TYPE_POSITION);

  00169	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0016d	74 0a		 je	 SHORT $LN54@draw_radar
  0016f	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00172	8b 08		 mov	 ecx, DWORD PTR [eax]
  00174	89 4d a0	 mov	 DWORD PTR tv157[ebp], ecx
  00177	eb 21		 jmp	 SHORT $LN55@draw_radar
$LN54@draw_radar:
  00179	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0017f	83 c2 1e	 add	 edx, 30			; 0000001eH
  00182	52		 push	 edx
  00183	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00188	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0018d	50		 push	 eax
  0018e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00193	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv157[ebp], 0
$LN55@draw_radar:
  0019a	b9 01 00 00 00	 mov	 ecx, 1
  0019f	85 c9		 test	 ecx, ecx
  001a1	74 09		 je	 SHORT $LN56@draw_radar
  001a3	c7 45 9c 08 00
	00 00		 mov	 DWORD PTR tv165[ebp], 8
  001aa	eb 21		 jmp	 SHORT $LN57@draw_radar
$LN56@draw_radar:
  001ac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  001b2	83 c2 1e	 add	 edx, 30			; 0000001eH
  001b5	52		 push	 edx
  001b6	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  001bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_vec3d_type_message@@3PBDB ; overload_invalid_vec3d_type_message
  001c0	50		 push	 eax
  001c1	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  001c6	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv165[ebp], 0
$LN57@draw_radar:
  001cd	6a 08		 push	 8
  001cf	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  001d2	51		 push	 ecx
  001d3	6b 55 a0 60	 imul	 edx, DWORD PTR tv157[ebp], 96
  001d7	8b 45 9c	 mov	 eax, DWORD PTR tv165[ebp]
  001da	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_vec3d_ptr@@3PAY0BI@P6GPAUVEC3D@@PAUENTITY@@W4VEC3D_TYPES@@@ZA[edx+eax*4]
  001e1	ff d1		 call	 ecx
  001e3	89 45 e4	 mov	 DWORD PTR _target_position$[ebp], eax

; 280  : 
; 281  : 	dx = (target_position->x - source_position->x) * scale;

  001e6	8b 45 e4	 mov	 eax, DWORD PTR _target_position$[ebp]
  001e9	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  001ec	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001f0	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  001f4	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  001f9	f3 0f 11 45 ec	 movss	 DWORD PTR _dx$[ebp], xmm0

; 282  : 	dy = (target_position->z - source_position->z) * scale;

  001fe	8b 45 e4	 mov	 eax, DWORD PTR _target_position$[ebp]
  00201	8b 4d 0c	 mov	 ecx, DWORD PTR _source_position$[ebp]
  00204	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00209	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0020e	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _scale$[ebp]
  00213	f3 0f 11 45 e8	 movss	 DWORD PTR _dy$[ebp], xmm0

; 283  : 
; 284  : 	target_symbol_type = (target_symbol_types) get_local_entity_int_value (target, INT_TYPE_TARGET_SYMBOL_TYPE);

  00218	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  0021c	74 0a		 je	 SHORT $LN58@draw_radar
  0021e	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  00221	8b 08		 mov	 ecx, DWORD PTR [eax]
  00223	89 4d a0	 mov	 DWORD PTR tv185[ebp], ecx
  00226	eb 21		 jmp	 SHORT $LN59@draw_radar
$LN58@draw_radar:
  00228	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  0022e	83 c2 23	 add	 edx, 35			; 00000023H
  00231	52		 push	 edx
  00232	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00237	a1 00 00 00 00	 mov	 eax, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0023c	50		 push	 eax
  0023d	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00242	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv185[ebp], 0
$LN59@draw_radar:
  00249	b9 01 00 00 00	 mov	 ecx, 1
  0024e	85 c9		 test	 ecx, ecx
  00250	74 09		 je	 SHORT $LN60@draw_radar
  00252	c7 45 9c d5 00
	00 00		 mov	 DWORD PTR tv193[ebp], 213 ; 000000d5H
  00259	eb 21		 jmp	 SHORT $LN61@draw_radar
$LN60@draw_radar:
  0025b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  00261	83 c2 23	 add	 edx, 35			; 00000023H
  00264	52		 push	 edx
  00265	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0026a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0026f	50		 push	 eax
  00270	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00275	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv193[ebp], 0
$LN61@draw_radar:
  0027c	68 d5 00 00 00	 push	 213			; 000000d5H
  00281	8b 4d 08	 mov	 ecx, DWORD PTR _target$[ebp]
  00284	51		 push	 ecx
  00285	69 55 a0 5c 04
	00 00		 imul	 edx, DWORD PTR tv185[ebp], 1116
  0028c	8b 45 9c	 mov	 eax, DWORD PTR tv193[ebp]
  0028f	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[edx+eax*4]
  00296	ff d1		 call	 ecx
  00298	89 45 fc	 mov	 DWORD PTR _target_symbol_type$[ebp], eax

; 285  : 
; 286  : 	ASSERT ((target_symbol_type >= 0) && (target_symbol_type < NUM_TARGET_SYMBOL_TYPES));

  0029b	83 7d fc 00	 cmp	 DWORD PTR _target_symbol_type$[ebp], 0
  0029f	7c 06		 jl	 SHORT $LN6@draw_radar
  002a1	83 7d fc 08	 cmp	 DWORD PTR _target_symbol_type$[ebp], 8
  002a5	7c 18		 jl	 SHORT $LN5@draw_radar
$LN6@draw_radar:
  002a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z@4JA
  002ac	83 c0 25	 add	 eax, 37			; 00000025H
  002af	50		 push	 eax
  002b0	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  002b5	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GKFLGKNK@?$CItarget_symbol_type?5?$DO?$DN?50?$CJ?5?$CG?$CG?5?$CIt@
  002ba	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN5@draw_radar:

; 287  : 
; 288  : 	if (get_local_entity_index (target) & 1)

  002bf	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  002c2	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?entities@@3PAUENTITY@@A ; entities
  002c8	c1 f8 04	 sar	 eax, 4
  002cb	83 e0 01	 and	 eax, 1
  002ce	0f 84 e3 00 00
	00		 je	 $LN7@draw_radar

; 289  : 	{
; 290  : //VJ 030423 TSD render mod
; 291  : 		if (display_on_tsd)

  002d4	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  002d8	0f 84 c3 00 00
	00		 je	 $LN9@draw_radar

; 292  : 		{
; 293  : 			//VJ 030511 TSD render mod, treat enemy colours as cheat
; 294  : 			if (command_line_tsd_enemy_colours)

  002de	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_tsd_enemy_colours@@3HA, 0 ; command_line_tsd_enemy_colours
  002e5	0f 84 a3 00 00
	00		 je	 $LN11@draw_radar

; 295  : 			{
; 296  : 				if (source_side == get_local_entity_int_value (target, INT_TYPE_SIDE))

  002eb	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  002ef	74 0a		 je	 SHORT $LN62@draw_radar
  002f1	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  002f4	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f6	89 4d a0	 mov	 DWORD PTR tv216[ebp], ecx
  002f9	eb 1d		 jmp	 SHORT $LN63@draw_radar
$LN62@draw_radar:
  002fb	68 28 01 00 00	 push	 296			; 00000128H
  00300	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00305	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  0030b	52		 push	 edx
  0030c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00311	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv216[ebp], 0
$LN63@draw_radar:
  00318	b8 01 00 00 00	 mov	 eax, 1
  0031d	85 c0		 test	 eax, eax
  0031f	74 09		 je	 SHORT $LN64@draw_radar
  00321	c7 45 9c bb 00
	00 00		 mov	 DWORD PTR tv223[ebp], 187 ; 000000bbH
  00328	eb 1d		 jmp	 SHORT $LN65@draw_radar
$LN64@draw_radar:
  0032a	68 28 01 00 00	 push	 296			; 00000128H
  0032f	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00334	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0033a	51		 push	 ecx
  0033b	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00340	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv223[ebp], 0
$LN65@draw_radar:
  00347	68 bb 00 00 00	 push	 187			; 000000bbH
  0034c	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  0034f	52		 push	 edx
  00350	69 45 a0 5c 04
	00 00		 imul	 eax, DWORD PTR tv216[ebp], 1116
  00357	8b 4d 9c	 mov	 ecx, DWORD PTR tv223[ebp]
  0035a	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00361	ff d2		 call	 edx
  00363	39 45 f4	 cmp	 DWORD PTR _source_side$[ebp], eax
  00366	75 13		 jne	 SHORT $LN13@draw_radar

; 297  : 					target_symbol_colour = MFD_COLOUR_YELLOW;

  00368	b8 04 00 00 00	 mov	 eax, 4
  0036d	6b c8 0f	 imul	 ecx, eax, 15
  00370	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00376	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx

; 298  : 				else

  00379	eb 11		 jmp	 SHORT $LN14@draw_radar
$LN13@draw_radar:

; 299  : 					target_symbol_colour = MFD_COLOUR_RED;

  0037b	b8 04 00 00 00	 mov	 eax, 4
  00380	6b c8 12	 imul	 ecx, eax, 18
  00383	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00389	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN14@draw_radar:

; 300  : 			}
; 301  : 			else

  0038c	eb 11		 jmp	 SHORT $LN12@draw_radar
$LN11@draw_radar:

; 302  : 			{
; 303  : 					target_symbol_colour = MFD_COLOUR_RED;

  0038e	b8 04 00 00 00	 mov	 eax, 4
  00393	6b c8 12	 imul	 ecx, eax, 18
  00396	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0039c	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN12@draw_radar:

; 304  : 			}
; 305  : 		}
; 306  : 		else

  0039f	eb 11		 jmp	 SHORT $LN10@draw_radar
$LN9@draw_radar:

; 307  : 			target_symbol_colour = MFD_COLOUR_RED;

  003a1	b8 04 00 00 00	 mov	 eax, 4
  003a6	6b c8 12	 imul	 ecx, eax, 18
  003a9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  003af	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN10@draw_radar:

; 308  : 	}
; 309  : 	else

  003b2	e9 de 00 00 00	 jmp	 $LN16@draw_radar
$LN7@draw_radar:

; 310  : 	{
; 311  : //VJ 030423 TSD render mod
; 312  : 		if (display_on_tsd)

  003b7	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  003bb	0f 84 c3 00 00
	00		 je	 $LN15@draw_radar

; 313  : 		{
; 314  : 			//VJ 030511 TSD render mod, treat enemy colours as cheat
; 315  : 			if (command_line_tsd_enemy_colours)

  003c1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_tsd_enemy_colours@@3HA, 0 ; command_line_tsd_enemy_colours
  003c8	0f 84 a3 00 00
	00		 je	 $LN17@draw_radar

; 316  : 			{
; 317  : 				if (source_side == get_local_entity_int_value (target, INT_TYPE_SIDE))

  003ce	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  003d2	74 0a		 je	 SHORT $LN66@draw_radar
  003d4	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  003d7	8b 08		 mov	 ecx, DWORD PTR [eax]
  003d9	89 4d a0	 mov	 DWORD PTR tv249[ebp], ecx
  003dc	eb 1d		 jmp	 SHORT $LN67@draw_radar
$LN66@draw_radar:
  003de	68 3d 01 00 00	 push	 317			; 0000013dH
  003e3	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  003e8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  003ee	52		 push	 edx
  003ef	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  003f4	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv249[ebp], 0
$LN67@draw_radar:
  003fb	b8 01 00 00 00	 mov	 eax, 1
  00400	85 c0		 test	 eax, eax
  00402	74 09		 je	 SHORT $LN68@draw_radar
  00404	c7 45 9c bb 00
	00 00		 mov	 DWORD PTR tv256[ebp], 187 ; 000000bbH
  0040b	eb 1d		 jmp	 SHORT $LN69@draw_radar
$LN68@draw_radar:
  0040d	68 3d 01 00 00	 push	 317			; 0000013dH
  00412	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00417	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  0041d	51		 push	 ecx
  0041e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  00423	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv256[ebp], 0
$LN69@draw_radar:
  0042a	68 bb 00 00 00	 push	 187			; 000000bbH
  0042f	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00432	52		 push	 edx
  00433	69 45 a0 5c 04
	00 00		 imul	 eax, DWORD PTR tv249[ebp], 1116
  0043a	8b 4d 9c	 mov	 ecx, DWORD PTR tv256[ebp]
  0043d	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00444	ff d2		 call	 edx
  00446	39 45 f4	 cmp	 DWORD PTR _source_side$[ebp], eax
  00449	75 13		 jne	 SHORT $LN19@draw_radar

; 318  : 					target_symbol_colour = MFD_COLOUR_YELLOW;

  0044b	b8 04 00 00 00	 mov	 eax, 4
  00450	6b c8 0f	 imul	 ecx, eax, 15
  00453	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00459	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx

; 319  : 				else

  0045c	eb 11		 jmp	 SHORT $LN20@draw_radar
$LN19@draw_radar:

; 320  : 					target_symbol_colour = MFD_COLOUR_RED;

  0045e	b8 04 00 00 00	 mov	 eax, 4
  00463	6b c8 12	 imul	 ecx, eax, 18
  00466	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0046c	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN20@draw_radar:

; 321  : 			}
; 322  : 			else

  0046f	eb 11		 jmp	 SHORT $LN18@draw_radar
$LN17@draw_radar:

; 323  : 			{
; 324  : 					target_symbol_colour = MFD_COLOUR_RED;

  00471	b8 04 00 00 00	 mov	 eax, 4
  00476	6b c8 12	 imul	 ecx, eax, 18
  00479	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0047f	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN18@draw_radar:

; 325  : 			}
; 326  : 		}
; 327  : 		else

  00482	eb 11		 jmp	 SHORT $LN16@draw_radar
$LN15@draw_radar:

; 328  : 			target_symbol_colour = MFD_COLOUR_RED;

  00484	b8 04 00 00 00	 mov	 eax, 4
  00489	6b c8 12	 imul	 ecx, eax, 18
  0048c	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00492	89 55 f8	 mov	 DWORD PTR _target_symbol_colour$[ebp], edx
$LN16@draw_radar:

; 329  : 	}
; 330  : 
; 331  : 	if (draw_large_mfd)

  00495	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  0049c	0f 84 44 02 00
	00		 je	 $LN21@draw_radar

; 332  : 	{
; 333  : 		if (get_local_entity_int_value (target, INT_TYPE_GUNSHIP_RADAR_LOS_CLEAR))

  004a2	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  004a6	74 0a		 je	 SHORT $LN70@draw_radar
  004a8	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  004ab	8b 08		 mov	 ecx, DWORD PTR [eax]
  004ad	89 4d a0	 mov	 DWORD PTR tv281[ebp], ecx
  004b0	eb 1d		 jmp	 SHORT $LN71@draw_radar
$LN70@draw_radar:
  004b2	68 4d 01 00 00	 push	 333			; 0000014dH
  004b7	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  004bc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  004c2	52		 push	 edx
  004c3	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004c8	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv281[ebp], 0
$LN71@draw_radar:
  004cf	b8 01 00 00 00	 mov	 eax, 1
  004d4	85 c0		 test	 eax, eax
  004d6	74 09		 je	 SHORT $LN72@draw_radar
  004d8	c7 45 9c 50 00
	00 00		 mov	 DWORD PTR tv288[ebp], 80 ; 00000050H
  004df	eb 1d		 jmp	 SHORT $LN73@draw_radar
$LN72@draw_radar:
  004e1	68 4d 01 00 00	 push	 333			; 0000014dH
  004e6	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  004eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  004f1	51		 push	 ecx
  004f2	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  004f7	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv288[ebp], 0
$LN73@draw_radar:
  004fe	6a 50		 push	 80			; 00000050H
  00500	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00503	52		 push	 edx
  00504	69 45 a0 5c 04
	00 00		 imul	 eax, DWORD PTR tv281[ebp], 1116
  0050b	8b 4d 9c	 mov	 ecx, DWORD PTR tv288[ebp]
  0050e	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00515	ff d2		 call	 edx
  00517	85 c0		 test	 eax, eax
  00519	0f 84 9e 00 00
	00		 je	 $LN23@draw_radar

; 334  : 		{
; 335  : 			if (selected_target)

  0051f	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00523	74 69		 je	 SHORT $LN27@draw_radar

; 336  : 			{
; 337  : //VJ 030423 TSD render mod
; 338  : 				if (display_on_tsd)

  00525	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  00529	74 2e		 je	 SHORT $LN26@draw_radar

; 339  : 					draw_2d_mono_sprite (large_display_target_symbols_los_mask[target_symbol_type], dx, dy, clear_mfd_colour);

  0052b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00530	50		 push	 eax
  00531	51		 push	 ecx
  00532	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00537	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053c	51		 push	 ecx
  0053d	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00542	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00547	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  0054a	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_los_mask@@3PAPBDA[ecx*4]
  00551	52		 push	 edx
  00552	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 340  : 				else

  00557	eb 35		 jmp	 SHORT $LN27@draw_radar
$LN26@draw_radar:

; 341  : 					draw_2d_mono_sprite (large_display_target_symbols_los_mask[target_symbol_type], dx, dy, MFD_COLOUR6);

  00559	b8 04 00 00 00	 mov	 eax, 4
  0055e	6b c8 05	 imul	 ecx, eax, 5
  00561	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00567	52		 push	 edx
  00568	51		 push	 ecx
  00569	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0056e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00573	51		 push	 ecx
  00574	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00579	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057e	8b 45 fc	 mov	 eax, DWORD PTR _target_symbol_type$[ebp]
  00581	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?large_display_target_symbols_los_mask@@3PAPBDA[eax*4]
  00588	51		 push	 ecx
  00589	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN27@draw_radar:

; 342  : 			}
; 343  : 
; 344  : 			draw_2d_mono_sprite (large_display_target_symbols_los[target_symbol_type], dx, dy, target_symbol_colour);

  0058e	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  00591	50		 push	 eax
  00592	51		 push	 ecx
  00593	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00598	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0059d	51		 push	 ecx
  0059e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  005a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a8	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  005ab	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_los@@3PAPBDA[ecx*4]
  005b2	52		 push	 edx
  005b3	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 345  : 		}
; 346  : 		else

  005b8	e9 99 00 00 00	 jmp	 $LN24@draw_radar
$LN23@draw_radar:

; 347  : 		{
; 348  : 			if (selected_target)

  005bd	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  005c1	74 69		 je	 SHORT $LN30@draw_radar

; 349  : 			{
; 350  : //VJ 030423 TSD render mod
; 351  : 				if (display_on_tsd)

  005c3	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  005c7	74 2e		 je	 SHORT $LN29@draw_radar

; 352  : 					draw_2d_mono_sprite (large_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, clear_mfd_colour);

  005c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  005ce	50		 push	 eax
  005cf	51		 push	 ecx
  005d0	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  005d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005da	51		 push	 ecx
  005db	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  005e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e5	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  005e8	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_no_los_mask@@3PAPBDA[ecx*4]
  005ef	52		 push	 edx
  005f0	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 353  : 				else

  005f5	eb 35		 jmp	 SHORT $LN30@draw_radar
$LN29@draw_radar:

; 354  : 					draw_2d_mono_sprite (large_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, MFD_COLOUR6);

  005f7	b8 04 00 00 00	 mov	 eax, 4
  005fc	6b c8 05	 imul	 ecx, eax, 5
  005ff	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00605	52		 push	 edx
  00606	51		 push	 ecx
  00607	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0060c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00611	51		 push	 ecx
  00612	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00617	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0061c	8b 45 fc	 mov	 eax, DWORD PTR _target_symbol_type$[ebp]
  0061f	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?large_display_target_symbols_no_los_mask@@3PAPBDA[eax*4]
  00626	51		 push	 ecx
  00627	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN30@draw_radar:

; 355  : 			}
; 356  : 
; 357  : 			draw_2d_mono_sprite (large_display_target_symbols_no_los[target_symbol_type], dx, dy, target_symbol_colour);

  0062c	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  0062f	50		 push	 eax
  00630	51		 push	 ecx
  00631	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00636	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063b	51		 push	 ecx
  0063c	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00641	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00646	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  00649	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?large_display_target_symbols_no_los@@3PAPBDA[ecx*4]
  00650	52		 push	 edx
  00651	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN24@draw_radar:

; 358  : 		}
; 359  : 
; 360  : 		if (selected_target)

  00656	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  0065a	0f 84 81 00 00
	00		 je	 $LN31@draw_radar

; 361  : 		{
; 362  : //VJ 030423 TSD render mod
; 363  : 			if (display_on_tsd)

  00660	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  00664	74 28		 je	 SHORT $LN32@draw_radar

; 364  : 				draw_2d_mono_sprite (large_display_target_symbol_selected_target_mask, dx, dy, clear_mfd_colour);

  00666	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  0066b	50		 push	 eax
  0066c	51		 push	 ecx
  0066d	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00672	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00677	51		 push	 ecx
  00678	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0067d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00682	68 00 00 00 00	 push	 OFFSET ?large_display_target_symbol_selected_target_mask@@3QBDB ; large_display_target_symbol_selected_target_mask
  00687	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 365  : 			else

  0068c	eb 2f		 jmp	 SHORT $LN33@draw_radar
$LN32@draw_radar:

; 366  : 				draw_2d_mono_sprite (large_display_target_symbol_selected_target_mask, dx, dy, MFD_COLOUR6);

  0068e	b8 04 00 00 00	 mov	 eax, 4
  00693	6b c8 05	 imul	 ecx, eax, 5
  00696	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  0069c	52		 push	 edx
  0069d	51		 push	 ecx
  0069e	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  006a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a8	51		 push	 ecx
  006a9	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  006ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b3	68 00 00 00 00	 push	 OFFSET ?large_display_target_symbol_selected_target_mask@@3QBDB ; large_display_target_symbol_selected_target_mask
  006b8	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN33@draw_radar:

; 367  : 
; 368  : 			draw_2d_mono_sprite (large_display_target_symbol_selected_target, dx, dy, target_symbol_colour);

  006bd	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  006c0	50		 push	 eax
  006c1	51		 push	 ecx
  006c2	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  006c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006cc	51		 push	 ecx
  006cd	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  006d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d7	68 00 00 00 00	 push	 OFFSET ?large_display_target_symbol_selected_target@@3QBDB ; large_display_target_symbol_selected_target
  006dc	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN31@draw_radar:

; 369  : 		}
; 370  : 	}
; 371  : 	else

  006e1	e9 3f 02 00 00	 jmp	 $LN42@draw_radar
$LN21@draw_radar:

; 372  : 	{
; 373  : 		if (get_local_entity_int_value (target, INT_TYPE_GUNSHIP_RADAR_LOS_CLEAR))

  006e6	83 7d 08 00	 cmp	 DWORD PTR _target$[ebp], 0
  006ea	74 0a		 je	 SHORT $LN74@draw_radar
  006ec	8b 45 08	 mov	 eax, DWORD PTR _target$[ebp]
  006ef	8b 08		 mov	 ecx, DWORD PTR [eax]
  006f1	89 4d a0	 mov	 DWORD PTR tv360[ebp], ecx
  006f4	eb 1d		 jmp	 SHORT $LN75@draw_radar
$LN74@draw_radar:
  006f6	68 75 01 00 00	 push	 373			; 00000175H
  006fb	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00700	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?null_entity_pointer_message@@3PBDB ; null_entity_pointer_message
  00706	52		 push	 edx
  00707	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0070c	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv360[ebp], 0
$LN75@draw_radar:
  00713	b8 01 00 00 00	 mov	 eax, 1
  00718	85 c0		 test	 eax, eax
  0071a	74 09		 je	 SHORT $LN76@draw_radar
  0071c	c7 45 9c 50 00
	00 00		 mov	 DWORD PTR tv367[ebp], 80 ; 00000050H
  00723	eb 1d		 jmp	 SHORT $LN77@draw_radar
$LN76@draw_radar:
  00725	68 75 01 00 00	 push	 373			; 00000175H
  0072a	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0072f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?overload_invalid_int_type_message@@3PBDB ; overload_invalid_int_type_message
  00735	51		 push	 ecx
  00736	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
  0073b	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv367[ebp], 0
$LN77@draw_radar:
  00742	6a 50		 push	 80			; 00000050H
  00744	8b 55 08	 mov	 edx, DWORD PTR _target$[ebp]
  00747	52		 push	 edx
  00748	69 45 a0 5c 04
	00 00		 imul	 eax, DWORD PTR tv360[ebp], 1116
  0074f	8b 4d 9c	 mov	 ecx, DWORD PTR tv367[ebp]
  00752	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?fn_get_local_entity_int_value@@3PAY0BBH@P6GHPAUENTITY@@W4INT_TYPES@@@ZA[eax+ecx*4]
  00759	ff d2		 call	 edx
  0075b	85 c0		 test	 eax, eax
  0075d	0f 84 9e 00 00
	00		 je	 $LN34@draw_radar

; 374  : 		{
; 375  : 			if (selected_target)

  00763	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00767	74 69		 je	 SHORT $LN38@draw_radar

; 376  : 			{
; 377  : //VJ 030423 TSD render mod
; 378  : 				if (display_on_tsd)

  00769	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  0076d	74 2e		 je	 SHORT $LN37@draw_radar

; 379  : 					draw_2d_mono_sprite (small_display_target_symbols_los_mask[target_symbol_type], dx, dy, clear_mfd_colour);

  0076f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00774	50		 push	 eax
  00775	51		 push	 ecx
  00776	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0077b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00780	51		 push	 ecx
  00781	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00786	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078b	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  0078e	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_los_mask@@3PAPBDA[ecx*4]
  00795	52		 push	 edx
  00796	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 380  : 				else

  0079b	eb 35		 jmp	 SHORT $LN38@draw_radar
$LN37@draw_radar:

; 381  : 					draw_2d_mono_sprite (small_display_target_symbols_los_mask[target_symbol_type], dx, dy, MFD_COLOUR6);

  0079d	b8 04 00 00 00	 mov	 eax, 4
  007a2	6b c8 05	 imul	 ecx, eax, 5
  007a5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  007ab	52		 push	 edx
  007ac	51		 push	 ecx
  007ad	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  007b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b7	51		 push	 ecx
  007b8	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  007bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c2	8b 45 fc	 mov	 eax, DWORD PTR _target_symbol_type$[ebp]
  007c5	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?small_display_target_symbols_los_mask@@3PAPBDA[eax*4]
  007cc	51		 push	 ecx
  007cd	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN38@draw_radar:

; 382  : 			}
; 383  : 
; 384  : 			draw_2d_mono_sprite (small_display_target_symbols_los[target_symbol_type], dx, dy, target_symbol_colour);

  007d2	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  007d5	50		 push	 eax
  007d6	51		 push	 ecx
  007d7	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  007dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e1	51		 push	 ecx
  007e2	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  007e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ec	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  007ef	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_los@@3PAPBDA[ecx*4]
  007f6	52		 push	 edx
  007f7	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 385  : 		}
; 386  : 		else

  007fc	e9 99 00 00 00	 jmp	 $LN35@draw_radar
$LN34@draw_radar:

; 387  : 		{
; 388  : 			if (selected_target)

  00801	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  00805	74 69		 je	 SHORT $LN41@draw_radar

; 389  : 			{
; 390  : //VJ 030423 TSD render mod
; 391  : 				if (display_on_tsd)

  00807	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  0080b	74 2e		 je	 SHORT $LN40@draw_radar

; 392  : 					draw_2d_mono_sprite (small_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, clear_mfd_colour);

  0080d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  00812	50		 push	 eax
  00813	51		 push	 ecx
  00814	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00819	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081e	51		 push	 ecx
  0081f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00824	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00829	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  0082c	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_no_los_mask@@3PAPBDA[ecx*4]
  00833	52		 push	 edx
  00834	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 393  : 				else

  00839	eb 35		 jmp	 SHORT $LN41@draw_radar
$LN40@draw_radar:

; 394  : 					draw_2d_mono_sprite (small_display_target_symbols_no_los_mask[target_symbol_type], dx, dy, MFD_COLOUR6);

  0083b	b8 04 00 00 00	 mov	 eax, 4
  00840	6b c8 05	 imul	 ecx, eax, 5
  00843	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00849	52		 push	 edx
  0084a	51		 push	 ecx
  0084b	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  00850	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00855	51		 push	 ecx
  00856	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  0085b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00860	8b 45 fc	 mov	 eax, DWORD PTR _target_symbol_type$[ebp]
  00863	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?small_display_target_symbols_no_los_mask@@3PAPBDA[eax*4]
  0086a	51		 push	 ecx
  0086b	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN41@draw_radar:

; 395  : 			}
; 396  : 
; 397  : 			draw_2d_mono_sprite (small_display_target_symbols_no_los[target_symbol_type], dx, dy, target_symbol_colour);

  00870	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  00873	50		 push	 eax
  00874	51		 push	 ecx
  00875	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0087a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0087f	51		 push	 ecx
  00880	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00885	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0088a	8b 4d fc	 mov	 ecx, DWORD PTR _target_symbol_type$[ebp]
  0088d	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?small_display_target_symbols_no_los@@3PAPBDA[ecx*4]
  00894	52		 push	 edx
  00895	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN35@draw_radar:

; 398  : 		}
; 399  : 
; 400  : 		if (selected_target)

  0089a	83 7d 14 00	 cmp	 DWORD PTR _selected_target$[ebp], 0
  0089e	0f 84 81 00 00
	00		 je	 $LN42@draw_radar

; 401  : 		{
; 402  : //VJ 030423 TSD render mod
; 403  : 			if (display_on_tsd)

  008a4	83 7d 18 00	 cmp	 DWORD PTR _display_on_tsd$[ebp], 0
  008a8	74 28		 je	 SHORT $LN43@draw_radar

; 404  : 				draw_2d_mono_sprite (small_display_target_symbol_selected_target_mask, dx, dy, clear_mfd_colour);

  008aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  008af	50		 push	 eax
  008b0	51		 push	 ecx
  008b1	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  008b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008bb	51		 push	 ecx
  008bc	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  008c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c6	68 00 00 00 00	 push	 OFFSET ?small_display_target_symbol_selected_target_mask@@3QBDB ; small_display_target_symbol_selected_target_mask
  008cb	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite

; 405  : 			else

  008d0	eb 2f		 jmp	 SHORT $LN44@draw_radar
$LN43@draw_radar:

; 406  : 				draw_2d_mono_sprite (small_display_target_symbol_selected_target_mask, dx, dy, MFD_COLOUR6);

  008d2	b8 04 00 00 00	 mov	 eax, 4
  008d7	6b c8 05	 imul	 ecx, eax, 5
  008da	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  008e0	52		 push	 edx
  008e1	51		 push	 ecx
  008e2	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  008e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ec	51		 push	 ecx
  008ed	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  008f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f7	68 00 00 00 00	 push	 OFFSET ?small_display_target_symbol_selected_target_mask@@3QBDB ; small_display_target_symbol_selected_target_mask
  008fc	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN44@draw_radar:

; 407  : 
; 408  : 			draw_2d_mono_sprite (small_display_target_symbol_selected_target, dx, dy, target_symbol_colour);

  00901	8b 45 f8	 mov	 eax, DWORD PTR _target_symbol_colour$[ebp]
  00904	50		 push	 eax
  00905	51		 push	 ecx
  00906	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _dy$[ebp]
  0090b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00910	51		 push	 ecx
  00911	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dx$[ebp]
  00916	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0091b	68 00 00 00 00	 push	 OFFSET ?small_display_target_symbol_selected_target@@3QBDB ; small_display_target_symbol_selected_target
  00920	e8 00 00 00 00	 call	 ?draw_2d_mono_sprite@@YGXPBDMMUREAL_COLOUR@@@Z ; draw_2d_mono_sprite
$LN42@draw_radar:

; 409  : 		}
; 410  : 	}
; 411  : }

  00925	5f		 pop	 edi
  00926	5e		 pop	 esi
  00927	5b		 pop	 ebx
  00928	8b e5		 mov	 esp, ebp
  0092a	5d		 pop	 ebp
  0092b	c2 14 00	 ret	 20			; 00000014H
?draw_radar_target_symbol@@YGXPAUENTITY@@PAUVEC3D@@MHH@Z ENDP ; draw_radar_target_symbol
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?select_ka50_eo_mfd@@YGXXZ
_TEXT	SEGMENT
?select_ka50_eo_mfd@@YGXXZ PROC				; select_ka50_eo_mfd, COMDAT

; 8374 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8375 : 	if (shkval_mfd_mode == KA50_MFD_MODE_FLIR)

  00009	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?shkval_mfd_mode@@3W4KA50_MFD_MODES@@A, 2
  00010	75 02		 jne	 SHORT $LN2@select_ka5

; 8376 : 	{
; 8377 : 		return;

  00012	eb 23		 jmp	 SHORT $LN1@select_ka5
$LN2@select_ka5:

; 8378 : 	}
; 8379 : 
; 8380 : 	if ((shkval_mfd_mode == KA50_MFD_MODE_OFF) && (!ka50_damage.shkval_mfd))

  00014	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?shkval_mfd_mode@@3W4KA50_MFD_MODES@@A, 0
  0001b	75 1a		 jne	 SHORT $LN1@select_ka5
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  00022	c1 e8 09	 shr	 eax, 9
  00025	83 e0 01	 and	 eax, 1
  00028	75 0d		 jne	 SHORT $LN1@select_ka5

; 8381 : 	{
; 8382 : 		select_ka50_mfd_mode (get_mfd_mode_for_eo_sensor (), KA50_MFD_LOCATION_SHKVAL);

  0002a	6a 00		 push	 0
  0002c	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4KA50_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ?select_ka50_mfd_mode@@YGXW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z ; select_ka50_mfd_mode
$LN1@select_ka5:

; 8383 : 
; 8384 : 		return;
; 8385 : 	}
; 8386 : }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?select_ka50_eo_mfd@@YGXXZ ENDP				; select_ka50_eo_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?auto_page_ka50_ase_mfd@@YGXXZ
_TEXT	SEGMENT
?auto_page_ka50_ase_mfd@@YGXXZ PROC			; auto_page_ka50_ase_mfd, COMDAT

; 8350 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8351 : 	if (!get_global_ase_auto_page ())

  00009	83 3d 64 03 00
	00 00		 cmp	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+868, 0
  00010	75 02		 jne	 SHORT $LN2@auto_page_

; 8352 : 	{
; 8353 : 		return;

  00012	eb 21		 jmp	 SHORT $LN1@auto_page_
$LN2@auto_page_:

; 8354 : 	}
; 8355 : 
; 8356 : 	if (abris_mfd_mode == KA50_MFD_MODE_ASE)

  00014	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?abris_mfd_mode@@3W4KA50_MFD_MODES@@A, 4
  0001b	75 02		 jne	 SHORT $LN3@auto_page_

; 8357 : 	{
; 8358 : 		return;

  0001d	eb 16		 jmp	 SHORT $LN1@auto_page_
$LN3@auto_page_:

; 8359 : 	}
; 8360 : 
; 8361 : 	if (!ka50_damage.abris_mfd)

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ka50_damage@@3TKA50_DAMAGE_FLAGS@@A ; ka50_damage
  00024	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  00027	83 e0 01	 and	 eax, 1
  0002a	75 09		 jne	 SHORT $LN1@auto_page_

; 8362 : 	{
; 8363 : 		select_ka50_mfd_mode (KA50_MFD_MODE_ASE, KA50_MFD_LOCATION_ABRIS);

  0002c	6a 01		 push	 1
  0002e	6a 04		 push	 4
  00030	e8 00 00 00 00	 call	 ?select_ka50_mfd_mode@@YGXW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z ; select_ka50_mfd_mode
$LN1@auto_page_:

; 8364 : 
; 8365 : 		return;
; 8366 : 	}
; 8367 : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?auto_page_ka50_ase_mfd@@YGXXZ ENDP			; auto_page_ka50_ase_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?toggle_ka50_ase_auto_page@@YGXXZ
_TEXT	SEGMENT
?toggle_ka50_ase_auto_page@@YGXXZ PROC			; toggle_ka50_ase_auto_page, COMDAT

; 8341 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8342 : 	set_global_ase_auto_page (get_global_ase_auto_page () ^ 1);

  00009	a1 64 03 00 00	 mov	 eax, DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+868
  0000e	83 f0 01	 xor	 eax, 1
  00011	a3 64 03 00 00	 mov	 DWORD PTR ?global_options@@3UGLOBAL_OPTIONS_DATA@@A+868, eax

; 8343 : }

  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	5b		 pop	 ebx
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?toggle_ka50_ase_auto_page@@YGXXZ ENDP			; toggle_ka50_ase_auto_page
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?select_previous_ka50_tsd_declutter_level@@YGXXZ
_TEXT	SEGMENT
?select_previous_ka50_tsd_declutter_level@@YGXXZ PROC	; select_previous_ka50_tsd_declutter_level, COMDAT

; 8321 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8322 : 	if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_NAVIGATION)

  00009	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
  00010	75 0c		 jne	 SHORT $LN2@select_pre

; 8323 : 	{
; 8324 : 		tsd_declutter_level = TSD_DECLUTTER_LEVEL_TARGET;

  00012	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  0001c	eb 1f		 jmp	 SHORT $LN1@select_pre
$LN2@select_pre:

; 8325 : 	}
; 8326 : 	else if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  0001e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  00025	75 0c		 jne	 SHORT $LN4@select_pre

; 8327 : 	{
; 8328 : 		tsd_declutter_level = TSD_DECLUTTER_LEVEL_ALL;

  00027	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0

; 8329 : 	}
; 8330 : 	else

  00031	eb 0a		 jmp	 SHORT $LN1@select_pre
$LN4@select_pre:

; 8331 : 	{
; 8332 : 		tsd_declutter_level = TSD_DECLUTTER_LEVEL_NAVIGATION;

  00033	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2
$LN1@select_pre:

; 8333 : 	}
; 8334 : }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?select_previous_ka50_tsd_declutter_level@@YGXXZ ENDP	; select_previous_ka50_tsd_declutter_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?select_next_ka50_tsd_declutter_level@@YGXXZ
_TEXT	SEGMENT
?select_next_ka50_tsd_declutter_level@@YGXXZ PROC	; select_next_ka50_tsd_declutter_level, COMDAT

; 8301 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8302 : 	if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_ALL)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0
  00010	75 0c		 jne	 SHORT $LN2@select_nex

; 8303 : 	{
; 8304 : 		tsd_declutter_level = TSD_DECLUTTER_LEVEL_TARGET;

  00012	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  0001c	eb 1f		 jmp	 SHORT $LN1@select_nex
$LN2@select_nex:

; 8305 : 	}
; 8306 : 	else if (tsd_declutter_level == TSD_DECLUTTER_LEVEL_TARGET)

  0001e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 1
  00025	75 0c		 jne	 SHORT $LN4@select_nex

; 8307 : 	{
; 8308 : 		tsd_declutter_level = TSD_DECLUTTER_LEVEL_NAVIGATION;

  00027	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2

; 8309 : 	}
; 8310 : 	else

  00031	eb 0a		 jmp	 SHORT $LN1@select_nex
$LN4@select_nex:

; 8311 : 	{
; 8312 : 		tsd_declutter_level = TSD_DECLUTTER_LEVEL_ALL;

  00033	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 0
$LN1@select_nex:

; 8313 : 	}
; 8314 : }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?select_next_ka50_tsd_declutter_level@@YGXXZ ENDP	; select_next_ka50_tsd_declutter_level
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?select_previous_ka50_tsd_ase_range@@YGXXZ
_TEXT	SEGMENT
?select_previous_ka50_tsd_ase_range@@YGXXZ PROC		; select_previous_ka50_tsd_ase_range, COMDAT

; 8281 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8282 : 	if (tsd_ase_range == TSD_ASE_RANGE_25000)

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  00011	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@46c35000
  00018	9f		 lahf
  00019	f6 c4 44	 test	 ah, 68			; 00000044H
  0001c	7a 12		 jp	 SHORT $LN2@select_pre

; 8283 : 	{
; 8284 : 		tsd_ase_range = TSD_ASE_RANGE_10000;

  0001e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c4000
  00026	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_ase_range@@3MA, xmm0
  0002e	eb 4c		 jmp	 SHORT $LN6@select_pre
$LN2@select_pre:

; 8285 : 	}
; 8286 : 	else if (tsd_ase_range == TSD_ASE_RANGE_10000)

  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  00038	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  0003f	9f		 lahf
  00040	f6 c4 44	 test	 ah, 68			; 00000044H
  00043	7a 12		 jp	 SHORT $LN4@select_pre

; 8287 : 	{
; 8288 : 		tsd_ase_range = TSD_ASE_RANGE_5000;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  0004d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_ase_range@@3MA, xmm0
  00055	eb 25		 jmp	 SHORT $LN6@select_pre
$LN4@select_pre:

; 8289 : 	}
; 8290 : 	else if (tsd_ase_range == TSD_ASE_RANGE_5000)

  00057	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  0005f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  00066	9f		 lahf
  00067	f6 c4 44	 test	 ah, 68			; 00000044H
  0006a	7a 10		 jp	 SHORT $LN6@select_pre

; 8291 : 	{
; 8292 : 		tsd_ase_range = TSD_ASE_RANGE_2000;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44fa0000
  00074	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_ase_range@@3MA, xmm0
$LN6@select_pre:

; 8293 : 	}
; 8294 : }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?select_previous_ka50_tsd_ase_range@@YGXXZ ENDP		; select_previous_ka50_tsd_ase_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?select_next_ka50_tsd_ase_range@@YGXXZ
_TEXT	SEGMENT
?select_next_ka50_tsd_ase_range@@YGXXZ PROC		; select_next_ka50_tsd_ase_range, COMDAT

; 8261 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8262 : 	if (tsd_ase_range == TSD_ASE_RANGE_2000)

  00009	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  00011	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@44fa0000
  00018	9f		 lahf
  00019	f6 c4 44	 test	 ah, 68			; 00000044H
  0001c	7a 12		 jp	 SHORT $LN2@select_nex

; 8263 : 	{
; 8264 : 		tsd_ase_range = TSD_ASE_RANGE_5000;

  0001e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  00026	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_ase_range@@3MA, xmm0
  0002e	eb 4c		 jmp	 SHORT $LN6@select_nex
$LN2@select_nex:

; 8265 : 	}
; 8266 : 	else if (tsd_ase_range == TSD_ASE_RANGE_5000)

  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  00038	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@459c4000
  0003f	9f		 lahf
  00040	f6 c4 44	 test	 ah, 68			; 00000044H
  00043	7a 12		 jp	 SHORT $LN4@select_nex

; 8267 : 	{
; 8268 : 		tsd_ase_range = TSD_ASE_RANGE_10000;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@461c4000
  0004d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_ase_range@@3MA, xmm0
  00055	eb 25		 jmp	 SHORT $LN6@select_nex
$LN4@select_nex:

; 8269 : 	}
; 8270 : 	else if (tsd_ase_range == TSD_ASE_RANGE_10000)

  00057	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?tsd_ase_range@@3MA
  0005f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@461c4000
  00066	9f		 lahf
  00067	f6 c4 44	 test	 ah, 68			; 00000044H
  0006a	7a 10		 jp	 SHORT $LN6@select_nex

; 8271 : 	{
; 8272 : 		tsd_ase_range = TSD_ASE_RANGE_25000;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@46c35000
  00074	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_ase_range@@3MA, xmm0
$LN6@select_nex:

; 8273 : 	}
; 8274 : }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?select_next_ka50_tsd_ase_range@@YGXXZ ENDP		; select_next_ka50_tsd_ase_range
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?toggle_ka50_mfd_on_off@@YGXW4KA50_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_mfd_location$ = 8					; size = 4
?toggle_ka50_mfd_on_off@@YGXW4KA50_MFD_LOCATIONS@@@Z PROC ; toggle_ka50_mfd_on_off, COMDAT

; 8243 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8244 : 	ASSERT (ka50_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@toggle_ka5
  0000f	83 7d 08 02	 cmp	 DWORD PTR _mfd_location$[ebp], 2
  00013	7c 18		 jl	 SHORT $LN2@toggle_ka5
$LN3@toggle_ka5:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??toggle_ka50_mfd_on_off@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 01	 add	 eax, 1
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MOMFCEOG@ka50_mfd_location_valid?5?$CImfd_lo@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@toggle_ka5:

; 8245 : 
; 8246 : 	if (*mfd_mode_ptrs[mfd_location] != KA50_MFD_MODE_OFF)

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?mfd_mode_ptrs@@3PAPAW4KA50_MFD_MODES@@A[eax*4]
  00037	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0003a	74 0d		 je	 SHORT $LN4@toggle_ka5

; 8247 : 	{
; 8248 : 		select_ka50_mfd_mode (KA50_MFD_MODE_OFF, mfd_location);

  0003c	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0003f	50		 push	 eax
  00040	6a 00		 push	 0
  00042	e8 00 00 00 00	 call	 ?select_ka50_mfd_mode@@YGXW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z ; select_ka50_mfd_mode

; 8249 : 	}
; 8250 : 	else

  00047	eb 09		 jmp	 SHORT $LN1@toggle_ka5
$LN4@toggle_ka5:

; 8251 : 	{
; 8252 : 		select_next_ka50_mfd (mfd_location);

  00049	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ?select_next_ka50_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z ; select_next_ka50_mfd
$LN1@toggle_ka5:

; 8253 : 	}
; 8254 : }

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?toggle_ka50_mfd_on_off@@YGXW4KA50_MFD_LOCATIONS@@@Z ENDP ; toggle_ka50_mfd_on_off
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?select_previous_ka50_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_previous_mfd_mode$ = -8				; size = 4
_mfd_mode_ptr1$ = -4					; size = 4
_mfd_location$ = 8					; size = 4
?select_previous_ka50_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z PROC ; select_previous_ka50_mfd, COMDAT

; 8224 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8225 : 	ka50_mfd_modes
; 8226 : 		*mfd_mode_ptr1,
; 8227 : 		previous_mfd_mode;
; 8228 : 
; 8229 : 	ASSERT (ka50_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@select_pre
  0000f	83 7d 08 02	 cmp	 DWORD PTR _mfd_location$[ebp], 2
  00013	7c 18		 jl	 SHORT $LN2@select_pre
$LN3@select_pre:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_previous_ka50_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 05	 add	 eax, 5
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MOMFCEOG@ka50_mfd_location_valid?5?$CImfd_lo@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@select_pre:

; 8230 : 
; 8231 : 	mfd_mode_ptr1 = mfd_mode_ptrs[mfd_location];

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?mfd_mode_ptrs@@3PAPAW4KA50_MFD_MODES@@A[eax*4]
  00037	89 4d fc	 mov	 DWORD PTR _mfd_mode_ptr1$[ebp], ecx

; 8232 : 
; 8233 : 	previous_mfd_mode = get_previous_mfd_mode (*mfd_mode_ptr1, mfd_location);

  0003a	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0003d	50		 push	 eax
  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _mfd_mode_ptr1$[ebp]
  00041	8b 11		 mov	 edx, DWORD PTR [ecx]
  00043	52		 push	 edx
  00044	e8 00 00 00 00	 call	 ?get_previous_mfd_mode@@YG?AW4KA50_MFD_MODES@@W41@W4KA50_MFD_LOCATIONS@@@Z ; get_previous_mfd_mode
  00049	89 45 f8	 mov	 DWORD PTR _previous_mfd_mode$[ebp], eax

; 8234 : 
; 8235 : 	select_ka50_mfd_mode (previous_mfd_mode, mfd_location);

  0004c	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d f8	 mov	 ecx, DWORD PTR _previous_mfd_mode$[ebp]
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 ?select_ka50_mfd_mode@@YGXW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z ; select_ka50_mfd_mode

; 8236 : }

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 04 00	 ret	 4
?select_previous_ka50_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z ENDP ; select_previous_ka50_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?select_next_ka50_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_next_mfd_mode$ = -8					; size = 4
_mfd_mode_ptr1$ = -4					; size = 4
_mfd_location$ = 8					; size = 4
?select_next_ka50_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z PROC	; select_next_ka50_mfd, COMDAT

; 8205 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 8206 : 	ka50_mfd_modes
; 8207 : 		*mfd_mode_ptr1,
; 8208 : 		next_mfd_mode;
; 8209 : 
; 8210 : 	ASSERT (ka50_mfd_location_valid (mfd_location));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@select_nex
  0000f	83 7d 08 02	 cmp	 DWORD PTR _mfd_location$[ebp], 2
  00013	7c 18		 jl	 SHORT $LN2@select_nex
$LN3@select_nex:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_next_ka50_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 05	 add	 eax, 5
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MOMFCEOG@ka50_mfd_location_valid?5?$CImfd_lo@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@select_nex:

; 8211 : 
; 8212 : 	mfd_mode_ptr1 = mfd_mode_ptrs[mfd_location];

  0002d	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00030	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?mfd_mode_ptrs@@3PAPAW4KA50_MFD_MODES@@A[eax*4]
  00037	89 4d fc	 mov	 DWORD PTR _mfd_mode_ptr1$[ebp], ecx

; 8213 : 
; 8214 : 	next_mfd_mode = get_next_mfd_mode (*mfd_mode_ptr1, mfd_location);

  0003a	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0003d	50		 push	 eax
  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _mfd_mode_ptr1$[ebp]
  00041	8b 11		 mov	 edx, DWORD PTR [ecx]
  00043	52		 push	 edx
  00044	e8 00 00 00 00	 call	 ?get_next_mfd_mode@@YG?AW4KA50_MFD_MODES@@W41@W4KA50_MFD_LOCATIONS@@@Z ; get_next_mfd_mode
  00049	89 45 f8	 mov	 DWORD PTR _next_mfd_mode$[ebp], eax

; 8215 : 
; 8216 : 	select_ka50_mfd_mode (next_mfd_mode, mfd_location);

  0004c	8b 45 08	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d f8	 mov	 ecx, DWORD PTR _next_mfd_mode$[ebp]
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 ?select_ka50_mfd_mode@@YGXW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z ; select_ka50_mfd_mode

; 8217 : }

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 04 00	 ret	 4
?select_next_ka50_mfd@@YGXW4KA50_MFD_LOCATIONS@@@Z ENDP	; select_next_ka50_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?select_ka50_mfd_mode@@YGXW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z
_TEXT	SEGMENT
_mfd_mode_ptr1$ = -4					; size = 4
_mfd_mode$ = 8						; size = 4
_mfd_location$ = 12					; size = 4
?select_ka50_mfd_mode@@YGXW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z PROC ; select_ka50_mfd_mode, COMDAT

; 7972 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7973 : 	ka50_mfd_modes
; 7974 : 		*mfd_mode_ptr1;
; 7975 : 
; 7976 : 	ASSERT (ka50_mfd_mode_valid (mfd_mode));

  00009	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  0000d	7c 06		 jl	 SHORT $LN3@select_ka5
  0000f	83 7d 08 0a	 cmp	 DWORD PTR _mfd_mode$[ebp], 10 ; 0000000aH
  00013	7c 18		 jl	 SHORT $LN2@select_ka5
$LN3@select_ka5:
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_ka50_mfd_mode@@YGXW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z@4JA
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@CDPALFHI@ka50_mfd_mode_valid?5?$CImfd_mode?$CJ@
  00028	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@select_ka5:

; 7977 : 
; 7978 : 	ASSERT (ka50_mfd_location_valid (mfd_location));

  0002d	83 7d 0c 00	 cmp	 DWORD PTR _mfd_location$[ebp], 0
  00031	7c 06		 jl	 SHORT $LN5@select_ka5
  00033	83 7d 0c 02	 cmp	 DWORD PTR _mfd_location$[ebp], 2
  00037	7c 18		 jl	 SHORT $LN4@select_ka5
$LN5@select_ka5:
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??select_ka50_mfd_mode@@YGXW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z@4JA
  0003e	83 c0 06	 add	 eax, 6
  00041	50		 push	 eax
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MOMFCEOG@ka50_mfd_location_valid?5?$CImfd_lo@
  0004c	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@select_ka5:

; 7979 : 
; 7980 : 	debug_colour_log (DEBUG_COLOUR_AMBER, "%s = %s", ka50_mfd_location_names[mfd_location], ka50_mfd_mode_names[mfd_mode]);

  00051	8b 45 08	 mov	 eax, DWORD PTR _mfd_mode$[ebp]
  00054	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?ka50_mfd_mode_names@@3PAPADA[eax*4]
  0005b	51		 push	 ecx
  0005c	8b 55 0c	 mov	 edx, DWORD PTR _mfd_location$[ebp]
  0005f	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?ka50_mfd_location_names@@3PAPADA[edx*4]
  00066	50		 push	 eax
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_07DCHAPOBD@?$CFs?5?$DN?5?$CFs@
  0006c	6a 17		 push	 23			; 00000017H
  0006e	e8 00 00 00 00	 call	 ?debug_colour_log@@YAXW4DEBUG_COLOURS@@PBDZZ ; debug_colour_log
  00073	83 c4 10	 add	 esp, 16			; 00000010H

; 7981 : 
; 7982 : 	mfd_mode_ptr1 = mfd_mode_ptrs[mfd_location];

  00076	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  00079	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?mfd_mode_ptrs@@3PAPAW4KA50_MFD_MODES@@A[eax*4]
  00080	89 4d fc	 mov	 DWORD PTR _mfd_mode_ptr1$[ebp], ecx

; 7983 : 
; 7984 : 	if ((mfd_mode == KA50_MFD_MODE_DAMAGED) && (*mfd_mode_ptr1 == KA50_MFD_MODE_OFF))

  00083	83 7d 08 01	 cmp	 DWORD PTR _mfd_mode$[ebp], 1
  00087	75 0f		 jne	 SHORT $LN6@select_ka5
  00089	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode_ptr1$[ebp]
  0008c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0008f	75 07		 jne	 SHORT $LN6@select_ka5

; 7985 : 	{
; 7986 : 		mfd_mode = KA50_MFD_MODE_OFF;

  00091	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 0
$LN6@select_ka5:

; 7987 : 	}
; 7988 : 
; 7989 : 	if (get_mfd_damage (mfd_location))

  00098	8b 45 0c	 mov	 eax, DWORD PTR _mfd_location$[ebp]
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 ?get_mfd_damage@@YGHW4KA50_MFD_LOCATIONS@@@Z ; get_mfd_damage
  000a1	85 c0		 test	 eax, eax
  000a3	74 0d		 je	 SHORT $LN7@select_ka5

; 7990 : 	{
; 7991 : 		if (mfd_mode != KA50_MFD_MODE_OFF)

  000a5	83 7d 08 00	 cmp	 DWORD PTR _mfd_mode$[ebp], 0
  000a9	74 07		 je	 SHORT $LN7@select_ka5

; 7992 : 		{
; 7993 : 			mfd_mode = KA50_MFD_MODE_DAMAGED;

  000ab	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _mfd_mode$[ebp], 1
$LN7@select_ka5:

; 7994 : 		}
; 7995 : 	}
; 7996 : 
; 7997 : 	*mfd_mode_ptr1 = mfd_mode;

  000b2	8b 45 fc	 mov	 eax, DWORD PTR _mfd_mode_ptr1$[ebp]
  000b5	8b 4d 08	 mov	 ecx, DWORD PTR _mfd_mode$[ebp]
  000b8	89 08		 mov	 DWORD PTR [eax], ecx

; 7998 : }

  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 08 00	 ret	 8
?select_ka50_mfd_mode@@YGXW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z ENDP ; select_ka50_mfd_mode
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_overlaid_ka50_mfd@@YGXXZ
_TEXT	SEGMENT
?draw_overlaid_ka50_mfd@@YGXXZ PROC			; draw_overlaid_ka50_mfd, COMDAT

; 7784 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 7785 : 	////////////////////////////////////////
; 7786 : 	//
; 7787 : 	// SELECT LARGE OR SMALL MFD TEXTURES
; 7788 : 	//
; 7789 : 	////////////////////////////////////////
; 7790 : 
; 7791 :    if (application_video_width >= 1280)

  00009	81 3d 00 00 00
	00 00 05 00 00	 cmp	 DWORD PTR ?application_video_width@@3HA, 1280 ; application_video_width, 00000500H
  00013	7c 34		 jl	 SHORT $LN2@draw_overl

; 7792 :    {
; 7793 : 		draw_large_mfd = TRUE;

  00015	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 1

; 7794 : 
; 7795 : 		shkval_mfd_texture_screen = large_shkval_mfd_texture_screen;

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_shkval_mfd_texture_screen@@3PAUSCREEN@@A
  00024	a3 00 00 00 00	 mov	 DWORD PTR ?shkval_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 7796 : 		abris_mfd_texture_screen = large_abris_mfd_texture_screen;

  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_abris_mfd_texture_screen@@3PAUSCREEN@@A
  0002e	a3 00 00 00 00	 mov	 DWORD PTR ?abris_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 7797 : 		ekran_display_texture_screen = large_ekran_display_texture_screen;

  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_ekran_display_texture_screen@@3PAUSCREEN@@A
  00038	a3 00 00 00 00	 mov	 DWORD PTR ?ekran_display_texture_screen@@3PAUSCREEN@@A, eax

; 7798 : 
; 7799 : 		eo_3d_texture_screen = large_eo_3d_texture_screen;

  0003d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_eo_3d_texture_screen@@3PAUSCREEN@@A ; large_eo_3d_texture_screen
  00042	a3 00 00 00 00	 mov	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, eax

; 7800 :    }
; 7801 :    else

  00047	eb 32		 jmp	 SHORT $LN3@draw_overl
$LN2@draw_overl:

; 7802 :    {
; 7803 : 		draw_large_mfd = FALSE;

  00049	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 0

; 7804 : 
; 7805 : 		shkval_mfd_texture_screen = small_shkval_mfd_texture_screen;

  00053	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_shkval_mfd_texture_screen@@3PAUSCREEN@@A
  00058	a3 00 00 00 00	 mov	 DWORD PTR ?shkval_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 7806 : 		abris_mfd_texture_screen = small_abris_mfd_texture_screen;

  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_abris_mfd_texture_screen@@3PAUSCREEN@@A
  00062	a3 00 00 00 00	 mov	 DWORD PTR ?abris_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 7807 : 		ekran_display_texture_screen = small_ekran_display_texture_screen;

  00067	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_ekran_display_texture_screen@@3PAUSCREEN@@A
  0006c	a3 00 00 00 00	 mov	 DWORD PTR ?ekran_display_texture_screen@@3PAUSCREEN@@A, eax

; 7808 : 
; 7809 : 		eo_3d_texture_screen = small_eo_3d_texture_screen;

  00071	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_eo_3d_texture_screen@@3PAUSCREEN@@A ; small_eo_3d_texture_screen
  00076	a3 00 00 00 00	 mov	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, eax
$LN3@draw_overl:

; 7810 :    }
; 7811 : 
; 7812 : 	set_system_texture_screen (shkval_mfd_texture_screen, TEXTURE_INDEX_HOKUM_COCKPIT_MFD_LHS_2);

  0007b	68 36 05 00 00	 push	 1334			; 00000536H
  00080	a1 00 00 00 00	 mov	 eax, DWORD PTR ?shkval_mfd_texture_screen@@3PAUSCREEN@@A
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 7813 : 	set_system_texture_screen (abris_mfd_texture_screen, TEXTURE_INDEX_HOKUM_COCKPIT_MFD_LHS_1);

  0008b	68 35 05 00 00	 push	 1333			; 00000535H
  00090	a1 00 00 00 00	 mov	 eax, DWORD PTR ?abris_mfd_texture_screen@@3PAUSCREEN@@A
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 7814 : 	set_system_texture_screen (ekran_display_texture_screen, TEXTURE_INDEX_HOKUM_COCKPIT_EKRAN);

  0009b	68 d0 04 00 00	 push	 1232			; 000004d0H
  000a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ekran_display_texture_screen@@3PAUSCREEN@@A
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 7815 : 
; 7816 : 	////////////////////////////////////////
; 7817 : 	//
; 7818 : 	// SET UP MFD 2D ENVIRONMENT
; 7819 : 	//
; 7820 : 	////////////////////////////////////////
; 7821 : 
; 7822 : 	set_2d_active_environment (mfd_env);

  000ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 7823 : 
; 7824 : 	//
; 7825 : 	// window
; 7826 : 	//
; 7827 : 
; 7828 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  000b6	51		 push	 ecx
  000b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  000bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c4	51		 push	 ecx
  000c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  000cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d2	51		 push	 ecx
  000d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e0	51		 push	 ecx
  000e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 7829 : 
; 7830 : 	//
; 7831 : 	// viewport
; 7832 : 	//
; 7833 : 
; 7834 : 	if (draw_large_mfd)

  000f9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00100	74 1c		 je	 SHORT $LN4@draw_overl

; 7835 : 	{
; 7836 : 		mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  00102	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  0010a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 7837 : 
; 7838 : 		int_mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  00112	c7 05 00 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?int_mfd_viewport_size@@3HA, 256 ; 00000100H

; 7839 : 	}
; 7840 : 	else

  0011c	eb 1a		 jmp	 SHORT $LN5@draw_overl
$LN4@draw_overl:

; 7841 : 	{
; 7842 : 		mfd_viewport_size = SMALL_MFD_VIEWPORT_SIZE;

  0011e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  00126	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 7843 : 
; 7844 : 		int_mfd_viewport_size = SMALL_MFD_VIEWPORT_SIZE;

  0012e	c7 05 00 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?int_mfd_viewport_size@@3HA, 128 ; 00000080H
$LN5@draw_overl:

; 7845 : 	}
; 7846 : 
; 7847 : 	mfd_viewport_x_org = mfd_viewport_size * 0.5;

  00138	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00140	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00148	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0014c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 7848 : 
; 7849 : 	mfd_viewport_y_org = mfd_viewport_size * 0.5;

  00154	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  0015c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00164	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00168	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 7850 : 
; 7851 : 	mfd_viewport_x_min = 0.0;

  00170	0f 57 c0	 xorps	 xmm0, xmm0
  00173	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 7852 : 
; 7853 : 	mfd_viewport_y_min = 0.0;

  0017b	0f 57 c0	 xorps	 xmm0, xmm0
  0017e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 7854 : 
; 7855 : 	mfd_viewport_x_max = mfd_viewport_size - 0.001;

  00186	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  0018e	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00196	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0019a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 7856 : 
; 7857 : 	mfd_viewport_y_max = mfd_viewport_size - 0.001;

  001a2	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  001aa	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001b2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001b6	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 7858 : 
; 7859 : 	////////////////////////////////////////
; 7860 : 	//
; 7861 : 	// DRAW DISPLAYS
; 7862 : 	//
; 7863 : 	////////////////////////////////////////
; 7864 : 
; 7865 : 	draw_overlaid_mfd (shkval_mfd_texture_screen, shkval_mfd_mode, KA50_MFD_LOCATION_SHKVAL);

  001be	6a 00		 push	 0
  001c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?shkval_mfd_mode@@3W4KA50_MFD_MODES@@A
  001c5	50		 push	 eax
  001c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?shkval_mfd_texture_screen@@3PAUSCREEN@@A
  001cc	51		 push	 ecx
  001cd	e8 00 00 00 00	 call	 ?draw_overlaid_mfd@@YGXPAUSCREEN@@W4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z ; draw_overlaid_mfd

; 7866 : 
; 7867 : 	draw_overlaid_mfd (abris_mfd_texture_screen, abris_mfd_mode, KA50_MFD_LOCATION_ABRIS);

  001d2	6a 01		 push	 1
  001d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?abris_mfd_mode@@3W4KA50_MFD_MODES@@A
  001d9	50		 push	 eax
  001da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?abris_mfd_texture_screen@@3PAUSCREEN@@A
  001e0	51		 push	 ecx
  001e1	e8 00 00 00 00	 call	 ?draw_overlaid_mfd@@YGXPAUSCREEN@@W4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z ; draw_overlaid_mfd

; 7868 : }

  001e6	5f		 pop	 edi
  001e7	5e		 pop	 esi
  001e8	5b		 pop	 ebx
  001e9	8b e5		 mov	 esp, ebp
  001eb	5d		 pop	 ebp
  001ec	c3		 ret	 0
?draw_overlaid_ka50_mfd@@YGXXZ ENDP			; draw_overlaid_ka50_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_ka50_full_screen_display@@YGXXZ
_TEXT	SEGMENT
tv193 = -340						; size = 4
tv155 = -340						; size = 4
tv65 = -340						; size = 4
_store_mfd_colour$1 = -272				; size = 4
_specular$ = -268					; size = 4
_colour$ = -264						; size = 4
_quad$ = -260						; size = 256
_mode$ = -4						; size = 4
?draw_ka50_full_screen_display@@YGXXZ PROC		; draw_ka50_full_screen_display, COMDAT

; 6946 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 6947 : 	ka50_mfd_modes
; 6948 : 		mode;
; 6949 : 
; 6950 : 	vertex
; 6951 : 		quad[4];
; 6952 : 
; 6953 : 	real_colour
; 6954 : 		colour,
; 6955 : 		specular;
; 6956 : 
; 6957 : 	////////////////////////////////////////
; 6958 : 	//
; 6959 : 	// determine if full screen display is required
; 6960 : 	//
; 6961 : 	////////////////////////////////////////
; 6962 : 
; 6963 : 	if (d3d_can_render_to_texture)

  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  00013	74 05		 je	 SHORT $LN8@draw_ka50_

; 6964 : 	{
; 6965 : 		return;

  00015	e9 ce 07 00 00	 jmp	 $LN1@draw_ka50_
$LN8@draw_ka50_:

; 6966 : 	}
; 6967 : 
; 6968 : 	switch (get_view_mode ())

  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?view_mode@@3W4VIEW_MODES@@A ; view_mode
  0001f	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  00025	83 bd ac fe ff
	ff 26		 cmp	 DWORD PTR tv65[ebp], 38	; 00000026H
  0002c	74 0b		 je	 SHORT $LN9@draw_ka50_
  0002e	83 bd ac fe ff
	ff 27		 cmp	 DWORD PTR tv65[ebp], 39	; 00000027H
  00035	74 0c		 je	 SHORT $LN10@draw_ka50_
  00037	eb 14		 jmp	 SHORT $LN11@draw_ka50_
$LN9@draw_ka50_:

; 6969 : 	{
; 6970 : 		case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY:
; 6971 : 		{
; 6972 : 			mode = shkval_mfd_mode;

  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?shkval_mfd_mode@@3W4KA50_MFD_MODES@@A
  0003e	89 45 fc	 mov	 DWORD PTR _mode$[ebp], eax

; 6973 : 
; 6974 : 			break;

  00041	eb 1d		 jmp	 SHORT $LN2@draw_ka50_
$LN10@draw_ka50_:

; 6975 : 		}
; 6976 : 		case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY:
; 6977 : 		{
; 6978 : 			mode = abris_mfd_mode;

  00043	a1 00 00 00 00	 mov	 eax, DWORD PTR ?abris_mfd_mode@@3W4KA50_MFD_MODES@@A
  00048	89 45 fc	 mov	 DWORD PTR _mode$[ebp], eax

; 6979 : 
; 6980 : 			break;

  0004b	eb 13		 jmp	 SHORT $LN2@draw_ka50_
$LN11@draw_ka50_:

; 6981 : 		}
; 6982 : 		default:
; 6983 : 		{
; 6984 : 			debug_fatal ("Invalid view mode = %d", get_view_mode ());

  0004d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?view_mode@@3W4VIEW_MODES@@A ; view_mode
  00052	50		 push	 eax
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@KFJLEDAI@Invalid?5view?5mode?5?$DN?5?$CFd@
  00058	e8 00 00 00 00	 call	 ?debug_fatal@@YAXPBDZZ	; debug_fatal
  0005d	83 c4 08	 add	 esp, 8
$LN2@draw_ka50_:

; 6985 : 
; 6986 : 			break;
; 6987 : 		}
; 6988 : 	}
; 6989 : 
; 6990 : 	if (!get_undamaged_eo_display_mode (mode))

  00060	8b 45 fc	 mov	 eax, DWORD PTR _mode$[ebp]
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ?get_undamaged_eo_display_mode@@YGHW4KA50_MFD_MODES@@@Z ; get_undamaged_eo_display_mode
  00069	85 c0		 test	 eax, eax
  0006b	75 05		 jne	 SHORT $LN12@draw_ka50_

; 6991 : 	{
; 6992 : 		return;

  0006d	e9 76 07 00 00	 jmp	 $LN1@draw_ka50_
$LN12@draw_ka50_:

; 6993 : 	}
; 6994 : 
; 6995 : 	////////////////////////////////////////
; 6996 : 	//
; 6997 : 	// render 3D display
; 6998 : 	//
; 6999 : 	////////////////////////////////////////
; 7000 : 
; 7001 : 	mfd_screen_x_min = floor ((149.0 * full_screen_width) / 640.0);

  00072	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  0007a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4062a00000000000
  00082	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084000000000000
  0008a	83 ec 08	 sub	 esp, 8
  0008d	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  00098	83 c4 08	 add	 esp, 8
  0009b	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_x_min@@3MA

; 7002 : 	mfd_screen_y_min = floor ((69.0 * full_screen_height) / 480.0);

  000a1	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  000a9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4051400000000000
  000b1	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407e000000000000
  000b9	83 ec 08	 sub	 esp, 8
  000bc	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  000c7	83 c4 08	 add	 esp, 8
  000ca	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_y_min@@3MA

; 7003 : 
; 7004 : 	mfd_screen_x_max = ceil ((492.0 * full_screen_width) / 640.0);

  000d0	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_width@@3MA
  000d8	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@407ec00000000000
  000e0	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4084000000000000
  000e8	83 ec 08	 sub	 esp, 8
  000eb	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  000f6	83 c4 08	 add	 esp, 8
  000f9	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_x_max@@3MA

; 7005 : 	mfd_screen_y_max = ceil ((412.0 * full_screen_height) / 480.0);

  000ff	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?full_screen_height@@3MA
  00107	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4079c00000000000
  0010f	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@407e000000000000
  00117	83 ec 08	 sub	 esp, 8
  0011a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0011f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ceil
  00125	83 c4 08	 add	 esp, 8
  00128	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?mfd_screen_y_max@@3MA

; 7006 : 
; 7007 : 	//
; 7008 : 	// widen by 1 pixel either side to ensure the MFD is covered at all resolutions
; 7009 : 	//
; 7010 : 
; 7011 : 	mfd_screen_x_min -= 1.0;

  0012e	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  00136	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0013e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00142	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_min@@3MA, xmm0

; 7012 : 	mfd_screen_y_min -= 1.0;

  0014a	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00152	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0015a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0015e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_min@@3MA, xmm0

; 7013 : 
; 7014 : 	mfd_screen_x_max += 1.0;

  00166	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  0016e	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00176	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0017a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_max@@3MA, xmm0

; 7015 : 	mfd_screen_y_max += 1.0;

  00182	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  0018a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00192	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00196	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_max@@3MA, xmm0

; 7016 : 
; 7017 : 	mfd_screen_width = mfd_screen_x_max - mfd_screen_x_min;

  0019e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  001a6	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  001ae	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_width@@3MA, xmm0

; 7018 : 	mfd_screen_height = mfd_screen_y_max - mfd_screen_y_min;

  001b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  001be	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  001c6	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_height@@3MA, xmm0

; 7019 : 
; 7020 : 	mfd_screen_x_max -= 0.001;

  001ce	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  001d6	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001de	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001e2	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_max@@3MA, xmm0

; 7021 : 	mfd_screen_y_max -= 0.001;

  001ea	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  001f2	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001fa	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001fe	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_max@@3MA, xmm0

; 7022 : 
; 7023 : 	mfd_screen_x_scale = 256.0 / mfd_screen_width;

  00206	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_width@@3MA
  0020e	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4070000000000000
  00216	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0021a	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0021e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_scale@@3MA, xmm0

; 7024 : 	mfd_screen_y_scale = 256.0 / mfd_screen_height;

  00226	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_screen_height@@3MA
  0022e	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@4070000000000000
  00236	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0023a	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0023e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_scale@@3MA, xmm0

; 7025 : 
; 7026 : 	switch (mode)

  00246	8b 45 fc	 mov	 eax, DWORD PTR _mode$[ebp]
  00249	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv155[ebp], eax
  0024f	83 bd ac fe ff
	ff 02		 cmp	 DWORD PTR tv155[ebp], 2
  00256	74 02		 je	 SHORT $LN13@draw_ka50_
  00258	eb 07		 jmp	 SHORT $LN4@draw_ka50_
$LN13@draw_ka50_:

; 7027 : 	{
; 7028 : 		case KA50_MFD_MODE_FLIR:
; 7029 : 		{
; 7030 : 			draw_3d_flir_mfd (TRUE);

  0025a	6a 01		 push	 1
  0025c	e8 00 00 00 00	 call	 ?draw_3d_flir_mfd@@YGXH@Z ; draw_3d_flir_mfd
$LN4@draw_ka50_:

; 7031 : 
; 7032 : 			break;
; 7033 : 		}
; 7034 : 	}
; 7035 : 
; 7036 : 	////////////////////////////////////////
; 7037 : 	//
; 7038 : 	// render 2D display
; 7039 : 	//
; 7040 : 	////////////////////////////////////////
; 7041 : 
; 7042 : 	set_2d_active_environment (mfd_env);

  00261	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00266	50		 push	 eax
  00267	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 7043 : 
; 7044 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  0026c	51		 push	 ecx
  0026d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00275	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0027a	51		 push	 ecx
  0027b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  00283	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00288	51		 push	 ecx
  00289	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00291	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00296	51		 push	 ecx
  00297	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0029f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  002a9	50		 push	 eax
  002aa	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 7045 : 
; 7046 : 	draw_large_mfd = TRUE;

  002af	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 1

; 7047 : 
; 7048 : 	mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  002b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  002c1	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 7049 : 
; 7050 : 	int_mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  002c9	c7 05 00 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?int_mfd_viewport_size@@3HA, 256 ; 00000100H

; 7051 : 
; 7052 : 	mfd_viewport_x_org = LARGE_MFD_VIEWPORT_SIZE * 0.5;

  002d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  002db	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 7053 : 
; 7054 : 	mfd_viewport_y_org = LARGE_MFD_VIEWPORT_SIZE * 0.5;

  002e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  002eb	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 7055 : 
; 7056 : 	mfd_viewport_x_min = 0.0;

  002f3	0f 57 c0	 xorps	 xmm0, xmm0
  002f6	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 7057 : 
; 7058 : 	mfd_viewport_y_min = 0.0;

  002fe	0f 57 c0	 xorps	 xmm0, xmm0
  00301	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 7059 : 
; 7060 : 	mfd_viewport_x_max = LARGE_MFD_VIEWPORT_SIZE - 0.001;

  00309	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437fffbe
  00311	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 7061 : 
; 7062 : 	mfd_viewport_y_max = LARGE_MFD_VIEWPORT_SIZE - 0.001;

  00319	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@437fffbe
  00321	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 7063 : 
; 7064 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  00329	51		 push	 ecx
  0032a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  00332	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00337	51		 push	 ecx
  00338	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00340	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00345	51		 push	 ecx
  00346	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  0034e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00353	51		 push	 ecx
  00354	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  0035c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00361	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00366	50		 push	 eax
  00367	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 7065 : 
; 7066 : 	//
; 7067 : 	// draw MFD on texture
; 7068 : 	//
; 7069 : 
; 7070 : 	set_active_screen (full_mfd_texture_screen);

  0036c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A
  00371	50		 push	 eax
  00372	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 7071 : 
; 7072 : 	if (lock_screen (full_mfd_texture_screen))

  00377	a1 00 00 00 00	 mov	 eax, DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A
  0037c	50		 push	 eax
  0037d	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00382	85 c0		 test	 eax, eax
  00384	0f 84 b3 00 00
	00		 je	 $LN14@draw_ka50_

; 7073 : 	{
; 7074 :       rgb_colour
; 7075 :          store_mfd_colour;
; 7076 : 
; 7077 :       store_mfd_colour = MFD_COLOUR1;

  0038a	b8 04 00 00 00	 mov	 eax, 4
  0038f	6b c8 00	 imul	 ecx, eax, 0
  00392	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  00398	89 95 f0 fe ff
	ff		 mov	 DWORD PTR _store_mfd_colour$1[ebp], edx

; 7078 : 
; 7079 :       set_rgb_colour (MFD_COLOUR1, 255, 255, 255, 255);

  0039e	b8 04 00 00 00	 mov	 eax, 4
  003a3	6b c8 00	 imul	 ecx, eax, 0
  003a6	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  003ad	b8 04 00 00 00	 mov	 eax, 4
  003b2	6b c8 00	 imul	 ecx, eax, 0
  003b5	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  003bc	b8 04 00 00 00	 mov	 eax, 4
  003c1	6b c8 00	 imul	 ecx, eax, 0
  003c4	c6 81 00 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 255 ; 000000ffH
  003cb	b8 04 00 00 00	 mov	 eax, 4
  003d0	6b c8 00	 imul	 ecx, eax, 0
  003d3	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 7080 : 
; 7081 :       set_block (0, 0, LARGE_MFD_VIEWPORT_SIZE - 1, LARGE_MFD_VIEWPORT_SIZE - 1, clear_mfd_colour);

  003da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A
  003df	50		 push	 eax
  003e0	68 ff 00 00 00	 push	 255			; 000000ffH
  003e5	68 ff 00 00 00	 push	 255			; 000000ffH
  003ea	6a 00		 push	 0
  003ec	6a 00		 push	 0
  003ee	e8 00 00 00 00	 call	 ?set_block@@YGXHHHHUREAL_COLOUR@@@Z ; set_block

; 7082 : 
; 7083 : 		draw_layout_grid ();

  003f3	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 7084 : 
; 7085 : 		switch (mode)

  003f8	8b 45 fc	 mov	 eax, DWORD PTR _mode$[ebp]
  003fb	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv193[ebp], eax
  00401	83 bd ac fe ff
	ff 02		 cmp	 DWORD PTR tv193[ebp], 2
  00408	74 02		 je	 SHORT $LN15@draw_ka50_
  0040a	eb 07		 jmp	 SHORT $LN6@draw_ka50_
$LN15@draw_ka50_:

; 7086 : 		{
; 7087 : 			case KA50_MFD_MODE_FLIR:
; 7088 : 			{
; 7089 : 				draw_2d_flir_mfd (TRUE);

  0040c	6a 01		 push	 1
  0040e	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXH@Z ; draw_2d_flir_mfd
$LN6@draw_ka50_:

; 7090 : 
; 7091 : 				break;
; 7092 : 			}
; 7093 : 		}
; 7094 : 
; 7095 : 		MFD_COLOUR1 = store_mfd_colour;

  00413	b8 04 00 00 00	 mov	 eax, 4
  00418	6b c8 00	 imul	 ecx, eax, 0
  0041b	8b 95 f0 fe ff
	ff		 mov	 edx, DWORD PTR _store_mfd_colour$1[ebp]
  00421	89 91 00 00 00
	00		 mov	 DWORD PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], edx

; 7096 : 
; 7097 : 		flush_screen_texture_graphics (full_mfd_texture_screen);

  00427	a1 00 00 00 00	 mov	 eax, DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A
  0042c	50		 push	 eax
  0042d	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 7098 : 
; 7099 : 		unlock_screen (full_mfd_texture_screen);

  00432	a1 00 00 00 00	 mov	 eax, DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A
  00437	50		 push	 eax
  00438	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN14@draw_ka50_:

; 7100 : 	}
; 7101 : 
; 7102 : 	set_active_screen (video_screen);

  0043d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  00442	50		 push	 eax
  00443	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 7103 : 
; 7104 : 	////////////////////////////////////////
; 7105 : 	//
; 7106 : 	// render MFD to screen
; 7107 : 	//
; 7108 : 	////////////////////////////////////////
; 7109 : 
; 7110 : 	set_3d_active_environment (main_3d_env);

  00448	a1 00 00 00 00	 mov	 eax, DWORD PTR ?main_3d_env@@3PAUENV_3D@@A ; main_3d_env
  0044d	50		 push	 eax
  0044e	e8 00 00 00 00	 call	 ?set_3d_active_environment@@YGXPAUENV_3D@@@Z ; set_3d_active_environment

; 7111 : 
; 7112 : 	if (begin_3d_scene ())

  00453	e8 00 00 00 00	 call	 ?begin_3d_scene@@YGHXZ	; begin_3d_scene
  00458	85 c0		 test	 eax, eax
  0045a	0f 84 88 03 00
	00		 je	 $LN16@draw_ka50_

; 7113 : 	{
; 7114 : 		set_d3d_transparency_on ();

  00460	e8 00 00 00 00	 call	 ?set_d3d_transparency_on@@YGXXZ ; set_d3d_transparency_on

; 7115 : 
; 7116 : 		set_d3d_zbuffer_comparison (FALSE);

  00465	6a 00		 push	 0
  00467	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 7117 : 
; 7118 : 		set_d3d_culling (FALSE);

  0046c	6a 00		 push	 0
  0046e	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 7119 : 
; 7120 : 		set_d3d_texture_wrapping (0, FALSE);

  00473	6a 00		 push	 0
  00475	6a 00		 push	 0
  00477	e8 00 00 00 00	 call	 ?set_d3d_texture_wrapping@@YGXHH@Z ; set_d3d_texture_wrapping

; 7121 : 
; 7122 :       set_d3d_texture_mag_filtering (TRUE);

  0047c	6a 01		 push	 1
  0047e	e8 00 00 00 00	 call	 ?set_d3d_texture_mag_filtering@@YGXH@Z ; set_d3d_texture_mag_filtering

; 7123 :       set_d3d_texture_min_filtering (TRUE);

  00483	6a 01		 push	 1
  00485	e8 00 00 00 00	 call	 ?set_d3d_texture_min_filtering@@YGXH@Z ; set_d3d_texture_min_filtering

; 7124 :       set_d3d_texture_mip_filtering (FALSE);

  0048a	6a 00		 push	 0
  0048c	e8 00 00 00 00	 call	 ?set_d3d_texture_mip_filtering@@YGXH@Z ; set_d3d_texture_mip_filtering

; 7125 : 
; 7126 : 		set_d3d_flat_shaded_textured_renderstate (get_system_texture_ptr (TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD));

  00491	68 f9 00 00 00	 push	 249			; 000000f9H
  00496	e8 00 00 00 00	 call	 ?get_system_texture_ptr@@YGPAUSCREEN@@H@Z ; get_system_texture_ptr
  0049b	50		 push	 eax
  0049c	e8 00 00 00 00	 call	 ?set_d3d_flat_shaded_textured_renderstate@@YGXPAUSCREEN@@@Z ; set_d3d_flat_shaded_textured_renderstate

; 7127 : 
; 7128 :       ////////////////////////////////////////
; 7129 :       //
; 7130 : 
; 7131 : 		colour.red				= MFD_COLOUR1.r;

  004a1	b8 04 00 00 00	 mov	 eax, 4
  004a6	6b c8 00	 imul	 ecx, eax, 0
  004a9	8a 91 02 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2]
  004af	88 95 fa fe ff
	ff		 mov	 BYTE PTR _colour$[ebp+2], dl

; 7132 : 		colour.green			= MFD_COLOUR1.g;

  004b5	b8 04 00 00 00	 mov	 eax, 4
  004ba	6b c8 00	 imul	 ecx, eax, 0
  004bd	8a 91 01 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1]
  004c3	88 95 f9 fe ff
	ff		 mov	 BYTE PTR _colour$[ebp+1], dl

; 7133 : 		colour.blue				= MFD_COLOUR1.b;

  004c9	b8 04 00 00 00	 mov	 eax, 4
  004ce	6b c8 00	 imul	 ecx, eax, 0
  004d1	8a 91 00 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx]
  004d7	88 95 f8 fe ff
	ff		 mov	 BYTE PTR _colour$[ebp], dl

; 7134 : 		colour.alpha			= MFD_COLOUR1.a;

  004dd	b8 04 00 00 00	 mov	 eax, 4
  004e2	6b c8 00	 imul	 ecx, eax, 0
  004e5	8a 91 03 00 00
	00		 mov	 dl, BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3]
  004eb	88 95 fb fe ff
	ff		 mov	 BYTE PTR _colour$[ebp+3], dl

; 7135 : 
; 7136 : 		specular.red			= 0;

  004f1	c6 85 f6 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+2], 0

; 7137 : 		specular.green			= 0;

  004f8	c6 85 f5 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp+1], 0

; 7138 : 		specular.blue			= 0;

  004ff	c6 85 f4 fe ff
	ff 00		 mov	 BYTE PTR _specular$[ebp], 0

; 7139 : 		specular.alpha			= 255;

  00506	c6 85 f7 fe ff
	ff ff		 mov	 BYTE PTR _specular$[ebp+3], 255 ; 000000ffH

; 7140 : 
; 7141 : 		quad[0].i				= mfd_screen_x_min;

  0050d	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00512	6b c8 00	 imul	 ecx, eax, 0
  00515	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  0051d	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 7142 : 		quad[0].j	  			= mfd_screen_y_min;

  00526	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0052b	6b c8 00	 imul	 ecx, eax, 0
  0052e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  00536	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 7143 : 		quad[0].z	  			= 0.5;

  0053f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00544	6b c8 00	 imul	 ecx, eax, 0
  00547	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0054f	f3 0f 11 84 0d
	04 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 7144 : 		quad[0].q	  			= 0.5;

  00558	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0055d	6b c8 00	 imul	 ecx, eax, 0
  00560	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00568	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 7145 : 		quad[0].u	  			= 0.0;

  00571	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00576	6b c8 00	 imul	 ecx, eax, 0
  00579	0f 57 c0	 xorps	 xmm0, xmm0
  0057c	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+24], xmm0

; 7146 : 		quad[0].v	  			= 0.0;

  00585	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0058a	6b c8 00	 imul	 ecx, eax, 0
  0058d	0f 57 c0	 xorps	 xmm0, xmm0
  00590	f3 0f 11 84 0d
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+28], xmm0

; 7147 : 
; 7148 : 		quad[1].i				= mfd_screen_x_max;

  00599	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0059e	c1 e0 00	 shl	 eax, 0
  005a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  005a9	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 7149 : 		quad[1].j  				= mfd_screen_y_min;

  005b2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  005b7	c1 e0 00	 shl	 eax, 0
  005ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_min@@3MA
  005c2	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 7150 : 		quad[1].z  				= 0.5;

  005cb	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  005d0	c1 e0 00	 shl	 eax, 0
  005d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  005db	f3 0f 11 84 05
	04 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 7151 : 		quad[1].q  				= 0.5;

  005e4	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  005e9	c1 e0 00	 shl	 eax, 0
  005ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  005f4	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 7152 : 		quad[1].u  				= 1.0;

  005fd	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00602	c1 e0 00	 shl	 eax, 0
  00605	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0060d	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+24], xmm0

; 7153 : 		quad[1].v  				= 0.0;

  00616	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0061b	c1 e0 00	 shl	 eax, 0
  0061e	0f 57 c0	 xorps	 xmm0, xmm0
  00621	f3 0f 11 84 05
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+28], xmm0

; 7154 : 
; 7155 : 		quad[2].i				= mfd_screen_x_max;

  0062a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0062f	d1 e0		 shl	 eax, 1
  00631	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_max@@3MA
  00639	f3 0f 11 84 05
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+16], xmm0

; 7156 : 		quad[2].j 				= mfd_screen_y_max;

  00642	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00647	d1 e0		 shl	 eax, 1
  00649	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  00651	f3 0f 11 84 05
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+20], xmm0

; 7157 : 		quad[2].z  				= 0.5;

  0065a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0065f	d1 e0		 shl	 eax, 1
  00661	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00669	f3 0f 11 84 05
	04 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+8], xmm0

; 7158 : 		quad[2].q  				= 0.5;

  00672	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00677	d1 e0		 shl	 eax, 1
  00679	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00681	f3 0f 11 84 05
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+12], xmm0

; 7159 : 		quad[2].u  				= 1.0;

  0068a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0068f	d1 e0		 shl	 eax, 1
  00691	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00699	f3 0f 11 84 05
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+24], xmm0

; 7160 : 		quad[2].v  				= 1.0;

  006a2	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  006a7	d1 e0		 shl	 eax, 1
  006a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  006b1	f3 0f 11 84 05
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+eax+28], xmm0

; 7161 : 
; 7162 : 		quad[3].i				= mfd_screen_x_min;

  006ba	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  006bf	6b c8 03	 imul	 ecx, eax, 3
  006c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_x_min@@3MA
  006ca	f3 0f 11 84 0d
	0c ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+16], xmm0

; 7163 : 		quad[3].j				= mfd_screen_y_max;

  006d3	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  006d8	6b c8 03	 imul	 ecx, eax, 3
  006db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_screen_y_max@@3MA
  006e3	f3 0f 11 84 0d
	10 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+20], xmm0

; 7164 : 		quad[3].z				= 0.5;

  006ec	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  006f1	6b c8 03	 imul	 ecx, eax, 3
  006f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  006fc	f3 0f 11 84 0d
	04 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+8], xmm0

; 7165 : 		quad[3].q				= 0.5;

  00705	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0070a	6b c8 03	 imul	 ecx, eax, 3
  0070d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00715	f3 0f 11 84 0d
	08 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+12], xmm0

; 7166 : 		quad[3].u				= 0.0;

  0071e	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00723	6b c8 03	 imul	 ecx, eax, 3
  00726	0f 57 c0	 xorps	 xmm0, xmm0
  00729	f3 0f 11 84 0d
	14 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+24], xmm0

; 7167 : 		quad[3].v				= 1.0;

  00732	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00737	6b c8 03	 imul	 ecx, eax, 3
  0073a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00742	f3 0f 11 84 0d
	18 ff ff ff	 movss	 DWORD PTR _quad$[ebp+ecx+28], xmm0

; 7168 : 
; 7169 : 		quad[0].next_vertex	= &quad[1];

  0074b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00750	c1 e0 00	 shl	 eax, 0
  00753	8d 8c 05 fc fe
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  0075a	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0075f	6b c2 00	 imul	 eax, edx, 0
  00762	89 8c 05 24 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], ecx

; 7170 : 		quad[1].next_vertex	= &quad[2];

  00769	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0076e	d1 e0		 shl	 eax, 1
  00770	8d 8c 05 fc fe
	ff ff		 lea	 ecx, DWORD PTR _quad$[ebp+eax]
  00777	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0077c	c1 e2 00	 shl	 edx, 0
  0077f	89 8c 15 24 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+edx+40], ecx

; 7171 : 		quad[2].next_vertex	= &quad[3];

  00786	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0078b	6b c8 03	 imul	 ecx, eax, 3
  0078e	8d 94 0d fc fe
	ff ff		 lea	 edx, DWORD PTR _quad$[ebp+ecx]
  00795	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0079a	d1 e0		 shl	 eax, 1
  0079c	89 94 05 24 ff
	ff ff		 mov	 DWORD PTR _quad$[ebp+eax+40], edx

; 7172 : 		quad[3].next_vertex	= NULL;

  007a3	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  007a8	6b c8 03	 imul	 ecx, eax, 3
  007ab	c7 84 0d 24 ff
	ff ff 00 00 00
	00		 mov	 DWORD PTR _quad$[ebp+ecx+40], 0

; 7173 : 
; 7174 :       //
; 7175 :       ////////////////////////////////////////
; 7176 : 
; 7177 : 		draw_wbuffered_flat_shaded_textured_polygon (quad, colour, specular);

  007b6	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _specular$[ebp]
  007bc	50		 push	 eax
  007bd	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _colour$[ebp]
  007c3	51		 push	 ecx
  007c4	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _quad$[ebp]
  007ca	52		 push	 edx
  007cb	e8 00 00 00 00	 call	 ?draw_wbuffered_flat_shaded_textured_polygon@@YGXPAUVERTEX@@UREAL_COLOUR@@1@Z ; draw_wbuffered_flat_shaded_textured_polygon

; 7178 : 
; 7179 : 		set_d3d_transparency_off ();

  007d0	e8 00 00 00 00	 call	 ?set_d3d_transparency_off@@YGXXZ ; set_d3d_transparency_off

; 7180 : 
; 7181 : 		set_d3d_zbuffer_comparison (TRUE);

  007d5	6a 01		 push	 1
  007d7	e8 00 00 00 00	 call	 ?set_d3d_zbuffer_comparison@@YGXH@Z ; set_d3d_zbuffer_comparison

; 7182 : 
; 7183 : 		set_d3d_culling (TRUE);

  007dc	6a 01		 push	 1
  007de	e8 00 00 00 00	 call	 ?set_d3d_culling@@YGXH@Z ; set_d3d_culling

; 7184 : 
; 7185 : 		end_3d_scene ();

  007e3	e8 00 00 00 00	 call	 ?end_3d_scene@@YGXXZ	; end_3d_scene
$LN16@draw_ka50_:
$LN1@draw_ka50_:

; 7186 : 	}
; 7187 : }

  007e8	5f		 pop	 edi
  007e9	5e		 pop	 esi
  007ea	5b		 pop	 ebx
  007eb	8b e5		 mov	 esp, ebp
  007ed	5d		 pop	 ebp
  007ee	c3		 ret	 0
?draw_ka50_full_screen_display@@YGXXZ ENDP		; draw_ka50_full_screen_display
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?set_ka50_text_display_text@@YGXPAD00@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
_s3$ = 16						; size = 4
?set_ka50_text_display_text@@YGXPAD00@Z PROC		; set_ka50_text_display_text, COMDAT

; 6921 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6922 : 	ASSERT (s1);

  00009	83 7d 08 00	 cmp	 DWORD PTR _s1$[ebp], 0
  0000d	75 18		 jne	 SHORT $LN2@set_ka50_t
  0000f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_ka50_text_display_text@@YGXPAD00@Z@4JA
  00014	83 c0 01	 add	 eax, 1
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02JAFEPHFG@s1@
  00022	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN2@set_ka50_t:

; 6923 : 
; 6924 : 	ASSERT (s2);

  00027	83 7d 0c 00	 cmp	 DWORD PTR _s2$[ebp], 0
  0002b	75 18		 jne	 SHORT $LN3@set_ka50_t
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_ka50_text_display_text@@YGXPAD00@Z@4JA
  00032	83 c0 03	 add	 eax, 3
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_02LLHJKEJF@s2@
  00040	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN3@set_ka50_t:

; 6925 : 
; 6926 : 	ASSERT (s3);

  00045	83 7d 10 00	 cmp	 DWORD PTR _s3$[ebp], 0
  00049	75 18		 jne	 SHORT $LN4@set_ka50_t
  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??set_ka50_text_display_text@@YGXPAD00@Z@4JA
  00050	83 c0 05	 add	 eax, 5
  00053	50		 push	 eax
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_02KCGCJFNE@s3@
  0005e	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN4@set_ka50_t:

; 6927 : 
; 6928 : 	strncpy (text_display_line1, s1, TEXT_DISPLAY_MAX_STRING_LENGTH);

  00063	6a 0a		 push	 10			; 0000000aH
  00065	8b 45 08	 mov	 eax, DWORD PTR _s1$[ebp]
  00068	50		 push	 eax
  00069	68 00 00 00 00	 push	 OFFSET ?text_display_line1@@3PADA
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6929 : 
; 6930 : 	strncpy (text_display_line2, s2, TEXT_DISPLAY_MAX_STRING_LENGTH);

  00077	6a 0a		 push	 10			; 0000000aH
  00079	8b 45 0c	 mov	 eax, DWORD PTR _s2$[ebp]
  0007c	50		 push	 eax
  0007d	68 00 00 00 00	 push	 OFFSET ?text_display_line2@@3PADA
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6931 : 
; 6932 : 	strncpy (text_display_line3, s3, TEXT_DISPLAY_MAX_STRING_LENGTH);

  0008b	6a 0a		 push	 10			; 0000000aH
  0008d	8b 45 10	 mov	 eax, DWORD PTR _s3$[ebp]
  00090	50		 push	 eax
  00091	68 00 00 00 00	 push	 OFFSET ?text_display_line3@@3PADA
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
  0009c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6933 : 
; 6934 : 	text_display_line1[TEXT_DISPLAY_MAX_STRING_LENGTH] = '\0';

  0009f	b8 01 00 00 00	 mov	 eax, 1
  000a4	6b c8 0a	 imul	 ecx, eax, 10
  000a7	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?text_display_line1@@3PADA[ecx], 0

; 6935 : 
; 6936 : 	text_display_line2[TEXT_DISPLAY_MAX_STRING_LENGTH] = '\0';

  000ae	b8 01 00 00 00	 mov	 eax, 1
  000b3	6b c8 0a	 imul	 ecx, eax, 10
  000b6	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?text_display_line2@@3PADA[ecx], 0

; 6937 : 
; 6938 : 	text_display_line3[TEXT_DISPLAY_MAX_STRING_LENGTH] = '\0';

  000bd	b8 01 00 00 00	 mov	 eax, 1
  000c2	6b c8 0a	 imul	 ecx, eax, 10
  000c5	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?text_display_line3@@3PADA[ecx], 0

; 6939 : }

  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c2 0c 00	 ret	 12			; 0000000cH
?set_ka50_text_display_text@@YGXPAD00@Z ENDP		; set_ka50_text_display_text
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?draw_ka50_mfd@@YGXXZ
_TEXT	SEGMENT
tv158 = -76						; size = 4
tv150 = -76						; size = 4
tv65 = -76						; size = 4
_draw_eo_display$1 = -8					; size = 4
_large_mfd$ = -4					; size = 4
?draw_ka50_mfd@@YGXXZ PROC				; draw_ka50_mfd, COMDAT

; 6713 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6714 : 	////////////////////////////////////////
; 6715 : 	//
; 6716 : 	// SELECT LARGE OR SMALL MFD TEXTURES
; 6717 : 	//
; 6718 : 	////////////////////////////////////////
; 6719 : 
; 6720 : 	// loke 030420
; 6721 : 	// support for high resolution mfd's
; 6722 : 	int
; 6723 : 		large_mfd;
; 6724 : 
; 6725 : 	if (!command_line_high_res_mfd)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_high_res_mfd@@3HA, 0 ; command_line_high_res_mfd
  00010	75 28		 jne	 SHORT $LN8@draw_ka50_

; 6726 : 	{
; 6727 : 		switch (get_view_mode ())

  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?view_mode@@3W4VIEW_MODES@@A ; view_mode
  00017	89 45 b4	 mov	 DWORD PTR tv65[ebp], eax
  0001a	83 7d b4 26	 cmp	 DWORD PTR tv65[ebp], 38	; 00000026H
  0001e	7c 11		 jl	 SHORT $LN11@draw_ka50_
  00020	83 7d b4 29	 cmp	 DWORD PTR tv65[ebp], 41	; 00000029H
  00024	7e 02		 jle	 SHORT $LN10@draw_ka50_
  00026	eb 09		 jmp	 SHORT $LN11@draw_ka50_
$LN10@draw_ka50_:

; 6728 : 		{
; 6729 : 			////////////////////////////////////////
; 6730 : 			case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_LHS_DISPLAY:
; 6731 : 			case VIEW_MODE_VIRTUAL_COCKPIT_PILOT_RHS_DISPLAY:
; 6732 : 			case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_LHS_DISPLAY:
; 6733 : 			case VIEW_MODE_VIRTUAL_COCKPIT_CO_PILOT_RHS_DISPLAY:
; 6734 : 			////////////////////////////////////////
; 6735 : 			{
; 6736 : 
; 6737 : 				large_mfd = 1;

  00028	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _large_mfd$[ebp], 1

; 6738 : 
; 6739 : 				break;

  0002f	eb 07		 jmp	 SHORT $LN2@draw_ka50_
$LN11@draw_ka50_:

; 6740 : 			}
; 6741 : 			////////////////////////////////////////
; 6742 : 			default:
; 6743 : 			////////////////////////////////////////
; 6744 : 			{
; 6745 : 
; 6746 : 				large_mfd = 0;

  00031	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _large_mfd$[ebp], 0
$LN2@draw_ka50_:

; 6747 : 
; 6748 : 				break;
; 6749 : 			}
; 6750 : 		}
; 6751 : 	}
; 6752 : 	else

  00038	eb 07		 jmp	 SHORT $LN9@draw_ka50_
$LN8@draw_ka50_:

; 6753 : 	{
; 6754 : 		large_mfd = 1;

  0003a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _large_mfd$[ebp], 1
$LN9@draw_ka50_:

; 6755 : 	}
; 6756 : 
; 6757 : 	if (large_mfd)

  00041	83 7d fc 00	 cmp	 DWORD PTR _large_mfd$[ebp], 0
  00045	74 34		 je	 SHORT $LN12@draw_ka50_

; 6758 : 	{
; 6759 : 		draw_large_mfd = TRUE;

  00047	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 1

; 6760 : 
; 6761 : 		shkval_mfd_texture_screen = large_shkval_mfd_texture_screen;

  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_shkval_mfd_texture_screen@@3PAUSCREEN@@A
  00056	a3 00 00 00 00	 mov	 DWORD PTR ?shkval_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 6762 : 		abris_mfd_texture_screen = large_abris_mfd_texture_screen;

  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_abris_mfd_texture_screen@@3PAUSCREEN@@A
  00060	a3 00 00 00 00	 mov	 DWORD PTR ?abris_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 6763 : 		ekran_display_texture_screen = large_ekran_display_texture_screen;

  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_ekran_display_texture_screen@@3PAUSCREEN@@A
  0006a	a3 00 00 00 00	 mov	 DWORD PTR ?ekran_display_texture_screen@@3PAUSCREEN@@A, eax

; 6764 : 
; 6765 : 		eo_3d_texture_screen = large_eo_3d_texture_screen;

  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_eo_3d_texture_screen@@3PAUSCREEN@@A ; large_eo_3d_texture_screen
  00074	a3 00 00 00 00	 mov	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, eax

; 6766 : 	}
; 6767 : 	else

  00079	eb 32		 jmp	 SHORT $LN13@draw_ka50_
$LN12@draw_ka50_:

; 6768 : 	{
; 6769 : 		draw_large_mfd = FALSE;

  0007b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?draw_large_mfd@@3HA, 0

; 6770 : 
; 6771 : 		shkval_mfd_texture_screen = small_shkval_mfd_texture_screen;

  00085	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_shkval_mfd_texture_screen@@3PAUSCREEN@@A
  0008a	a3 00 00 00 00	 mov	 DWORD PTR ?shkval_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 6772 : 		abris_mfd_texture_screen = small_abris_mfd_texture_screen;

  0008f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_abris_mfd_texture_screen@@3PAUSCREEN@@A
  00094	a3 00 00 00 00	 mov	 DWORD PTR ?abris_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 6773 : 		ekran_display_texture_screen = small_ekran_display_texture_screen;

  00099	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_ekran_display_texture_screen@@3PAUSCREEN@@A
  0009e	a3 00 00 00 00	 mov	 DWORD PTR ?ekran_display_texture_screen@@3PAUSCREEN@@A, eax

; 6774 : 
; 6775 : 		eo_3d_texture_screen = small_eo_3d_texture_screen;

  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_eo_3d_texture_screen@@3PAUSCREEN@@A ; small_eo_3d_texture_screen
  000a8	a3 00 00 00 00	 mov	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, eax
$LN13@draw_ka50_:

; 6776 : 	}
; 6777 : 
; 6778 : 	set_system_texture_screen (shkval_mfd_texture_screen, TEXTURE_INDEX_HOKUM_COCKPIT_MFD_LHS_2);

  000ad	68 36 05 00 00	 push	 1334			; 00000536H
  000b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?shkval_mfd_texture_screen@@3PAUSCREEN@@A
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 6779 : 	set_system_texture_screen (abris_mfd_texture_screen, TEXTURE_INDEX_HOKUM_COCKPIT_MFD_LHS_1);

  000bd	68 35 05 00 00	 push	 1333			; 00000535H
  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?abris_mfd_texture_screen@@3PAUSCREEN@@A
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 6780 : 	set_system_texture_screen (ekran_display_texture_screen, TEXTURE_INDEX_HOKUM_COCKPIT_EKRAN);

  000cd	68 d0 04 00 00	 push	 1232			; 000004d0H
  000d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ekran_display_texture_screen@@3PAUSCREEN@@A
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 6781 : 
; 6782 : 	////////////////////////////////////////
; 6783 : 	//
; 6784 : 	// SET UP MFD 2D ENVIRONMENT
; 6785 : 	//
; 6786 : 	////////////////////////////////////////
; 6787 : 
; 6788 : 	set_2d_active_environment (mfd_env);

  000dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 ?set_2d_active_environment@@YGXPAUENV_2D@@@Z ; set_2d_active_environment

; 6789 : 
; 6790 : 	//
; 6791 : 	// window
; 6792 : 	//
; 6793 : 
; 6794 : 	set_2d_window (mfd_env, MFD_WINDOW_X_MIN, MFD_WINDOW_Y_MIN, MFD_WINDOW_X_MAX, MFD_WINDOW_Y_MAX);

  000e8	51		 push	 ecx
  000e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  000f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f6	51		 push	 ecx
  000f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fbe77
  000ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00104	51		 push	 ecx
  00105	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0010d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00112	51		 push	 ecx
  00113	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0011b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00120	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  00125	50		 push	 eax
  00126	e8 00 00 00 00	 call	 ?set_2d_window@@YGXPAUENV_2D@@MMMM@Z ; set_2d_window

; 6795 : 
; 6796 : 	//
; 6797 : 	// viewport
; 6798 : 	//
; 6799 : 
; 6800 : 	if (draw_large_mfd)

  0012b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?draw_large_mfd@@3HA, 0
  00132	74 1c		 je	 SHORT $LN14@draw_ka50_

; 6801 : 	{
; 6802 : 		mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  00134	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43800000
  0013c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 6803 : 
; 6804 : 		int_mfd_viewport_size = LARGE_MFD_VIEWPORT_SIZE;

  00144	c7 05 00 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?int_mfd_viewport_size@@3HA, 256 ; 00000100H

; 6805 : 	}
; 6806 : 	else

  0014e	eb 1a		 jmp	 SHORT $LN15@draw_ka50_
$LN14@draw_ka50_:

; 6807 : 	{
; 6808 : 		mfd_viewport_size = SMALL_MFD_VIEWPORT_SIZE;

  00150	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43000000
  00158	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_size@@3MA, xmm0

; 6809 : 
; 6810 : 		int_mfd_viewport_size = SMALL_MFD_VIEWPORT_SIZE;

  00160	c7 05 00 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?int_mfd_viewport_size@@3HA, 128 ; 00000080H
$LN15@draw_ka50_:

; 6811 : 	}
; 6812 : 
; 6813 : 	mfd_viewport_x_org = mfd_viewport_size * 0.5;

  0016a	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00172	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0017a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0017e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_org@@3MA, xmm0

; 6814 : 
; 6815 : 	mfd_viewport_y_org = mfd_viewport_size * 0.5;

  00186	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  0018e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00196	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0019a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_org@@3MA, xmm0

; 6816 : 
; 6817 : 	mfd_viewport_x_min = 0.0;

  001a2	0f 57 c0	 xorps	 xmm0, xmm0
  001a5	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_min@@3MA, xmm0

; 6818 : 
; 6819 : 	mfd_viewport_y_min = 0.0;

  001ad	0f 57 c0	 xorps	 xmm0, xmm0
  001b0	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_min@@3MA, xmm0

; 6820 : 
; 6821 : 	mfd_viewport_x_max = mfd_viewport_size - 0.001;

  001b8	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  001c0	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001c8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001cc	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_x_max@@3MA, xmm0

; 6822 : 
; 6823 : 	mfd_viewport_y_max = mfd_viewport_size - 0.001;

  001d4	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  001dc	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  001e4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001e8	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_viewport_y_max@@3MA, xmm0

; 6824 : 
; 6825 : 	set_2d_viewport (mfd_env, mfd_viewport_x_min, mfd_viewport_y_min, mfd_viewport_x_max, mfd_viewport_y_max);

  001f0	51		 push	 ecx
  001f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_max@@3MA
  001f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fe	51		 push	 ecx
  001ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_max@@3MA
  00207	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020c	51		 push	 ecx
  0020d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_y_min@@3MA
  00215	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021a	51		 push	 ecx
  0021b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_x_min@@3MA
  00223	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00228	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0022d	50		 push	 eax
  0022e	e8 00 00 00 00	 call	 ?set_2d_viewport@@YGXPAUENV_2D@@MMMM@Z ; set_2d_viewport

; 6826 : 
; 6827 : 	mfd_screen_x_min = 0.0;

  00233	0f 57 c0	 xorps	 xmm0, xmm0
  00236	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_min@@3MA, xmm0

; 6828 : 	mfd_screen_y_min = 0.0;

  0023e	0f 57 c0	 xorps	 xmm0, xmm0
  00241	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_min@@3MA, xmm0

; 6829 : 
; 6830 : 	mfd_screen_x_max = mfd_viewport_size - 0.001;

  00249	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00251	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00259	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0025d	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_max@@3MA, xmm0

; 6831 : 	mfd_screen_y_max = mfd_viewport_size - 0.001;

  00265	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  0026d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3f50624dd2f1a9fc
  00275	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00279	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_max@@3MA, xmm0

; 6832 : 
; 6833 : 	mfd_screen_width = mfd_viewport_size;

  00281	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00289	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_width@@3MA, xmm0

; 6834 : 	mfd_screen_height = mfd_viewport_size;

  00291	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?mfd_viewport_size@@3MA
  00299	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_height@@3MA, xmm0

; 6835 : 
; 6836 : 	mfd_screen_x_scale = 1.0;

  002a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002a9	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_x_scale@@3MA, xmm0

; 6837 : 	mfd_screen_y_scale = 1.0;

  002b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002b9	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?mfd_screen_y_scale@@3MA, xmm0

; 6838 : 
; 6839 : 	////////////////////////////////////////
; 6840 : 	//
; 6841 : 	// render EO 3D display (if required)
; 6842 : 	//
; 6843 : 	////////////////////////////////////////
; 6844 : 
; 6845 : 	{
; 6846 : 		int
; 6847 : 			draw_eo_display;
; 6848 : 
; 6849 : 		if (d3d_can_render_to_texture)

  002c1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?d3d_can_render_to_texture@@3HA, 0 ; d3d_can_render_to_texture
  002c8	0f 84 c4 00 00
	00		 je	 $LN19@draw_ka50_

; 6850 : 		{
; 6851 : 			ASSERT (eo_3d_texture_screen);

  002ce	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A, 0
  002d5	75 1a		 jne	 SHORT $LN17@draw_ka50_
  002d7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??draw_ka50_mfd@@YGXXZ@4JA
  002dc	05 8a 00 00 00	 add	 eax, 138		; 0000008aH
  002e1	50		 push	 eax
  002e2	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  002e7	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MDEHLDP@eo_3d_texture_screen@
  002ec	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN17@draw_ka50_:

; 6852 : 
; 6853 : 			draw_eo_display = FALSE;

  002f1	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _draw_eo_display$1[ebp], 0

; 6854 : 
; 6855 : 			if (get_undamaged_eo_display_mode (shkval_mfd_mode))

  002f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?shkval_mfd_mode@@3W4KA50_MFD_MODES@@A
  002fd	50		 push	 eax
  002fe	e8 00 00 00 00	 call	 ?get_undamaged_eo_display_mode@@YGHW4KA50_MFD_MODES@@@Z ; get_undamaged_eo_display_mode
  00303	85 c0		 test	 eax, eax
  00305	74 17		 je	 SHORT $LN18@draw_ka50_

; 6856 : 			{
; 6857 : 				set_system_texture_screen (eo_3d_texture_screen, TEXTURE_INDEX_HOKUM_COCKPIT_MFD_LHS_2);

  00307	68 36 05 00 00	 push	 1334			; 00000536H
  0030c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00311	50		 push	 eax
  00312	e8 00 00 00 00	 call	 ?set_system_texture_screen@@YGXPAUSCREEN@@H@Z ; set_system_texture_screen

; 6858 : 
; 6859 : 				draw_eo_display = TRUE;

  00317	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _draw_eo_display$1[ebp], 1
$LN18@draw_ka50_:

; 6860 : 			}
; 6861 : 
; 6862 : 			if (draw_eo_display)

  0031e	83 7d f8 00	 cmp	 DWORD PTR _draw_eo_display$1[ebp], 0
  00322	74 6e		 je	 SHORT $LN19@draw_ka50_

; 6863 : 			{
; 6864 : 				switch (get_mfd_mode_for_eo_sensor ())

  00324	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4KA50_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  00329	89 45 b4	 mov	 DWORD PTR tv150[ebp], eax
  0032c	83 7d b4 02	 cmp	 DWORD PTR tv150[ebp], 2
  00330	74 02		 je	 SHORT $LN20@draw_ka50_
  00332	eb 07		 jmp	 SHORT $LN4@draw_ka50_
$LN20@draw_ka50_:

; 6865 : 				{
; 6866 : 					case KA50_MFD_MODE_FLIR:
; 6867 : 					{
; 6868 : 						draw_3d_flir_mfd (FALSE);

  00334	6a 00		 push	 0
  00336	e8 00 00 00 00	 call	 ?draw_3d_flir_mfd@@YGXH@Z ; draw_3d_flir_mfd
$LN4@draw_ka50_:

; 6869 : 
; 6870 : 						break;
; 6871 : 					}
; 6872 : 				}
; 6873 : 
; 6874 : 				set_active_screen (eo_3d_texture_screen);

  0033b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00340	50		 push	 eax
  00341	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen

; 6875 : 
; 6876 : 				if (lock_screen (eo_3d_texture_screen))

  00346	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  0034b	50		 push	 eax
  0034c	e8 00 00 00 00	 call	 ?lock_screen@@YGHPAUSCREEN@@@Z ; lock_screen
  00351	85 c0		 test	 eax, eax
  00353	74 32		 je	 SHORT $LN21@draw_ka50_

; 6877 : 				{
; 6878 : 					draw_layout_grid ();

  00355	e8 00 00 00 00	 call	 ?draw_layout_grid@@YGXXZ ; draw_layout_grid

; 6879 : 
; 6880 : 					switch (get_mfd_mode_for_eo_sensor ())

  0035a	e8 00 00 00 00	 call	 ?get_mfd_mode_for_eo_sensor@@YG?AW4KA50_MFD_MODES@@XZ ; get_mfd_mode_for_eo_sensor
  0035f	89 45 b4	 mov	 DWORD PTR tv158[ebp], eax
  00362	83 7d b4 02	 cmp	 DWORD PTR tv158[ebp], 2
  00366	74 02		 je	 SHORT $LN22@draw_ka50_
  00368	eb 07		 jmp	 SHORT $LN6@draw_ka50_
$LN22@draw_ka50_:

; 6881 : 					{
; 6882 : 						case KA50_MFD_MODE_FLIR:
; 6883 : 						{
; 6884 : 							draw_2d_flir_mfd (TRUE);

  0036a	6a 01		 push	 1
  0036c	e8 00 00 00 00	 call	 ?draw_2d_flir_mfd@@YGXH@Z ; draw_2d_flir_mfd
$LN6@draw_ka50_:

; 6885 : 
; 6886 : 							break;
; 6887 : 						}
; 6888 : 					}
; 6889 : 
; 6890 : 					flush_screen_texture_graphics (eo_3d_texture_screen);

  00371	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00376	50		 push	 eax
  00377	e8 00 00 00 00	 call	 ?flush_screen_texture_graphics@@YGXPAUSCREEN@@@Z ; flush_screen_texture_graphics

; 6891 : 
; 6892 : 					unlock_screen (eo_3d_texture_screen);

  0037c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?eo_3d_texture_screen@@3PAUSCREEN@@A
  00381	50		 push	 eax
  00382	e8 00 00 00 00	 call	 ?unlock_screen@@YGHPAUSCREEN@@@Z ; unlock_screen
$LN21@draw_ka50_:

; 6893 : 				}
; 6894 : 
; 6895 : 				set_active_screen (video_screen);

  00387	a1 00 00 00 00	 mov	 eax, DWORD PTR ?video_screen@@3PAUSCREEN@@A ; video_screen
  0038c	50		 push	 eax
  0038d	e8 00 00 00 00	 call	 ?set_active_screen@@YGHPAUSCREEN@@@Z ; set_active_screen
$LN19@draw_ka50_:

; 6896 : 			}
; 6897 : 		}
; 6898 : 	}
; 6899 : 
; 6900 : 	////////////////////////////////////////
; 6901 : 	//
; 6902 : 	// DRAW DISPLAYS
; 6903 : 	//
; 6904 : 	////////////////////////////////////////
; 6905 : 
; 6906 : 	//draw_mfd (shkval_mfd_texture_screen, &shkval_mfd_mode, KA50_MFD_LOCATION_SHKVAL);
; 6907 : 
; 6908 : 	draw_mfd (abris_mfd_texture_screen, &abris_mfd_mode, KA50_MFD_LOCATION_ABRIS);

  00392	6a 01		 push	 1
  00394	68 00 00 00 00	 push	 OFFSET ?abris_mfd_mode@@3W4KA50_MFD_MODES@@A
  00399	a1 00 00 00 00	 mov	 eax, DWORD PTR ?abris_mfd_texture_screen@@3PAUSCREEN@@A
  0039e	50		 push	 eax
  0039f	e8 00 00 00 00	 call	 ?draw_mfd@@YGXPAUSCREEN@@PAW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z ; draw_mfd

; 6909 : 
; 6910 : 	draw_text_display (ekran_display_texture_screen);

  003a4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ekran_display_texture_screen@@3PAUSCREEN@@A
  003a9	50		 push	 eax
  003aa	e8 00 00 00 00	 call	 ?draw_text_display@@YGXPAUSCREEN@@@Z ; draw_text_display

; 6911 : 
; 6912 : 	if (command_line_export_mfd)

  003af	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_export_mfd@@3HA, 0 ; command_line_export_mfd
  003b6	74 12		 je	 SHORT $LN23@draw_ka50_

; 6913 : 		copy_export_mfd(shkval_mfd_texture_screen, abris_mfd_texture_screen);

  003b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?abris_mfd_texture_screen@@3PAUSCREEN@@A
  003bd	50		 push	 eax
  003be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?shkval_mfd_texture_screen@@3PAUSCREEN@@A
  003c4	51		 push	 ecx
  003c5	e8 00 00 00 00	 call	 ?copy_export_mfd@@YGXPAUSCREEN@@0@Z ; copy_export_mfd
$LN23@draw_ka50_:

; 6914 : }

  003ca	5f		 pop	 edi
  003cb	5e		 pop	 esi
  003cc	5b		 pop	 ebx
  003cd	8b e5		 mov	 esp, ebp
  003cf	5d		 pop	 ebp
  003d0	c3		 ret	 0
?draw_ka50_mfd@@YGXXZ ENDP				; draw_ka50_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?deinitialise_ka50_mfd@@YGXXZ
_TEXT	SEGMENT
?deinitialise_ka50_mfd@@YGXXZ PROC			; deinitialise_ka50_mfd, COMDAT

; 6684 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6685 : 	destroy_2d_environment (mfd_env);

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?mfd_env@@3PAUENV_2D@@A
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?destroy_2d_environment@@YGXPAUENV_2D@@@Z ; destroy_2d_environment

; 6686 : 
; 6687 : 	////////////////////////////////////////
; 6688 : 
; 6689 : 	destroy_screen (large_shkval_mfd_texture_screen);

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_shkval_mfd_texture_screen@@3PAUSCREEN@@A
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 6690 : 	destroy_screen (large_abris_mfd_texture_screen);

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_abris_mfd_texture_screen@@3PAUSCREEN@@A
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 6691 : 	destroy_screen (large_ekran_display_texture_screen);

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?large_ekran_display_texture_screen@@3PAUSCREEN@@A
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 6692 : 
; 6693 : 	destroy_screen (small_shkval_mfd_texture_screen);

  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_shkval_mfd_texture_screen@@3PAUSCREEN@@A
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 6694 : 	destroy_screen (small_abris_mfd_texture_screen);

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_abris_mfd_texture_screen@@3PAUSCREEN@@A
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 6695 : 	destroy_screen (small_ekran_display_texture_screen);

  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?small_ekran_display_texture_screen@@3PAUSCREEN@@A
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 6696 : 
; 6697 : 	destroy_screen (full_mfd_texture_screen);

  00056	a1 00 00 00 00	 mov	 eax, DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?destroy_screen@@YGHPAUSCREEN@@@Z ; destroy_screen

; 6698 : 
; 6699 : 	////////////////////////////////////////
; 6700 : 	//
; 6701 : 	// weapon display lines
; 6702 : 	//
; 6703 : 	////////////////////////////////////////
; 6704 : 
; 6705 : 	safe_free (weapon_line_points);

  00061	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ?safe_free@@YGXPAX@Z	; safe_free

; 6706 : }

  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
?deinitialise_ka50_mfd@@YGXXZ ENDP			; deinitialise_ka50_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\users\nhv90\projects\eech\aphavoc\source\gunships\avionics\ka50\hm_mfd.c
;	COMDAT ?initialise_ka50_mfd@@YGXXZ
_TEXT	SEGMENT
_i$1 = -4						; size = 4
?initialise_ka50_mfd@@YGXXZ PROC			; initialise_ka50_mfd, COMDAT

; 6556 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6557 : 	if (command_line_dynamics_engine_startup)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_dynamics_engine_startup@@3HA, 0 ; command_line_dynamics_engine_startup
  00010	74 14		 je	 SHORT $LN5@initialise

; 6558 : 	{
; 6559 : 		select_ka50_mfd_mode (KA50_MFD_MODE_OFF, KA50_MFD_LOCATION_SHKVAL);

  00012	6a 00		 push	 0
  00014	6a 00		 push	 0
  00016	e8 00 00 00 00	 call	 ?select_ka50_mfd_mode@@YGXW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z ; select_ka50_mfd_mode

; 6560 : 		select_ka50_mfd_mode (KA50_MFD_MODE_OFF, KA50_MFD_LOCATION_ABRIS);

  0001b	6a 01		 push	 1
  0001d	6a 00		 push	 0
  0001f	e8 00 00 00 00	 call	 ?select_ka50_mfd_mode@@YGXW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z ; select_ka50_mfd_mode

; 6561 : 	}
; 6562 : 	else

  00024	eb 12		 jmp	 SHORT $LN6@initialise
$LN5@initialise:

; 6563 : 	{
; 6564 : 		select_ka50_mfd_mode (KA50_MFD_MODE_OFF, KA50_MFD_LOCATION_SHKVAL);

  00026	6a 00		 push	 0
  00028	6a 00		 push	 0
  0002a	e8 00 00 00 00	 call	 ?select_ka50_mfd_mode@@YGXW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z ; select_ka50_mfd_mode

; 6565 : 		select_ka50_mfd_mode (KA50_MFD_MODE_TSD, KA50_MFD_LOCATION_ABRIS);

  0002f	6a 01		 push	 1
  00031	6a 03		 push	 3
  00033	e8 00 00 00 00	 call	 ?select_ka50_mfd_mode@@YGXW4KA50_MFD_MODES@@W4KA50_MFD_LOCATIONS@@@Z ; select_ka50_mfd_mode
$LN6@initialise:

; 6566 : 	}
; 6567 : 
; 6568 : 	////////////////////////////////////////
; 6569 : 
; 6570 : 	set_ka50_text_display_text ("", "", "");

  00038	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00047	e8 00 00 00 00	 call	 ?set_ka50_text_display_text@@YGXPAD00@Z ; set_ka50_text_display_text

; 6571 : 
; 6572 : 	////////////////////////////////////////
; 6573 : 
; 6574 : 	tsd_ase_range							= TSD_ASE_RANGE_5000;

  0004c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@459c4000
  00054	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_ase_range@@3MA, xmm0

; 6575 : 	tsd_declutter_level					= TSD_DECLUTTER_LEVEL_NAVIGATION;

  0005c	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?tsd_declutter_level@@3W4TSD_DECLUTTER_LEVELS@@A, 2

; 6576 : 	tsd_threat_line_flash_timer		= TSD_THREAT_LINE_FLASH_RATE;

  00066	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0006e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?tsd_threat_line_flash_timer@@3MA, xmm0

; 6577 : 	tsd_draw_threat_line_status		= 0;

  00076	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?tsd_draw_threat_line_status@@3HA, 0

; 6578 : 	ase_threat_line_flash_timer		= ASE_THREAT_LINE_FLASH_RATE;

  00080	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00088	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?ase_threat_line_flash_timer@@3MA, xmm0

; 6579 : 	ase_draw_threat_line_status		= 0;

  00090	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ase_draw_threat_line_status@@3HA, 0

; 6580 : 
; 6581 : 	////////////////////////////////////////
; 6582 : 
; 6583 : 	mfd_env = create_2d_environment ();

  0009a	e8 00 00 00 00	 call	 ?create_2d_environment@@YGPAUENV_2D@@XZ ; create_2d_environment
  0009f	a3 00 00 00 00	 mov	 DWORD PTR ?mfd_env@@3PAUENV_2D@@A, eax

; 6584 : 
; 6585 : 	////////////////////////////////////////
; 6586 : 
; 6587 : 	large_shkval_mfd_texture_screen = create_user_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  000a4	6a 00		 push	 0
  000a6	6a 02		 push	 2
  000a8	68 00 01 00 00	 push	 256			; 00000100H
  000ad	68 00 01 00 00	 push	 256			; 00000100H
  000b2	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  000b7	a3 00 00 00 00	 mov	 DWORD PTR ?large_shkval_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 6588 : 	large_abris_mfd_texture_screen = create_user_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  000bc	6a 00		 push	 0
  000be	6a 02		 push	 2
  000c0	68 00 01 00 00	 push	 256			; 00000100H
  000c5	68 00 01 00 00	 push	 256			; 00000100H
  000ca	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  000cf	a3 00 00 00 00	 mov	 DWORD PTR ?large_abris_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 6589 : 	large_ekran_display_texture_screen = create_user_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  000d4	6a 00		 push	 0
  000d6	6a 02		 push	 2
  000d8	68 00 01 00 00	 push	 256			; 00000100H
  000dd	68 00 01 00 00	 push	 256			; 00000100H
  000e2	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  000e7	a3 00 00 00 00	 mov	 DWORD PTR ?large_ekran_display_texture_screen@@3PAUSCREEN@@A, eax

; 6590 : 
; 6591 : 	small_shkval_mfd_texture_screen = create_user_texture_screen (SMALL_MFD_VIEWPORT_SIZE, SMALL_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  000ec	6a 00		 push	 0
  000ee	6a 02		 push	 2
  000f0	68 80 00 00 00	 push	 128			; 00000080H
  000f5	68 80 00 00 00	 push	 128			; 00000080H
  000fa	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  000ff	a3 00 00 00 00	 mov	 DWORD PTR ?small_shkval_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 6592 : 	small_abris_mfd_texture_screen = create_user_texture_screen (SMALL_MFD_VIEWPORT_SIZE, SMALL_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  00104	6a 00		 push	 0
  00106	6a 02		 push	 2
  00108	68 80 00 00 00	 push	 128			; 00000080H
  0010d	68 80 00 00 00	 push	 128			; 00000080H
  00112	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  00117	a3 00 00 00 00	 mov	 DWORD PTR ?small_abris_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 6593 : 	small_ekran_display_texture_screen = create_user_texture_screen (SMALL_MFD_VIEWPORT_SIZE, SMALL_MFD_VIEWPORT_SIZE, TEXTURE_TYPE_SINGLEALPHA, 0);

  0011c	6a 00		 push	 0
  0011e	6a 02		 push	 2
  00120	68 80 00 00 00	 push	 128			; 00000080H
  00125	68 80 00 00 00	 push	 128			; 00000080H
  0012a	e8 00 00 00 00	 call	 ?create_user_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_user_texture_screen
  0012f	a3 00 00 00 00	 mov	 DWORD PTR ?small_ekran_display_texture_screen@@3PAUSCREEN@@A, eax

; 6594 : 
; 6595 : 	full_mfd_texture_screen = create_system_texture_screen (LARGE_MFD_VIEWPORT_SIZE, LARGE_MFD_VIEWPORT_SIZE, TEXTURE_INDEX_AVCKPT_DISPLAY_RHS_MFD, TEXTURE_TYPE_SINGLEALPHA);

  00134	6a 02		 push	 2
  00136	68 f9 00 00 00	 push	 249			; 000000f9H
  0013b	68 00 01 00 00	 push	 256			; 00000100H
  00140	68 00 01 00 00	 push	 256			; 00000100H
  00145	e8 00 00 00 00	 call	 ?create_system_texture_screen@@YGPAUSCREEN@@HHHH@Z ; create_system_texture_screen
  0014a	a3 00 00 00 00	 mov	 DWORD PTR ?full_mfd_texture_screen@@3PAUSCREEN@@A, eax

; 6596 : 
; 6597 : 	if (command_line_colour_mfd)

  0014f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?command_line_colour_mfd@@3HA, 0 ; command_line_colour_mfd
  00156	0f 84 d1 02 00
	00		 je	 $LN7@initialise

; 6598 : 	{
; 6599 : 		set_rgb_colour (MFD_COLOUR1,            255, 255, 255, 255);

  0015c	b8 04 00 00 00	 mov	 eax, 4
  00161	6b c8 00	 imul	 ecx, eax, 0
  00164	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  0016b	b8 04 00 00 00	 mov	 eax, 4
  00170	6b c8 00	 imul	 ecx, eax, 0
  00173	c6 81 01 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 255 ; 000000ffH
  0017a	b8 04 00 00 00	 mov	 eax, 4
  0017f	6b c8 00	 imul	 ecx, eax, 0
  00182	c6 81 00 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 255 ; 000000ffH
  00189	b8 04 00 00 00	 mov	 eax, 4
  0018e	6b c8 00	 imul	 ecx, eax, 0
  00191	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 6600 : 		set_rgb_colour (MFD_COLOUR2,            200, 200, 200, 255);

  00198	b8 04 00 00 00	 mov	 eax, 4
  0019d	c1 e0 00	 shl	 eax, 0
  001a0	c6 80 02 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 200 ; 000000c8H
  001a7	b8 04 00 00 00	 mov	 eax, 4
  001ac	c1 e0 00	 shl	 eax, 0
  001af	c6 80 01 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 200 ; 000000c8H
  001b6	b8 04 00 00 00	 mov	 eax, 4
  001bb	c1 e0 00	 shl	 eax, 0
  001be	c6 80 00 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 200 ; 000000c8H
  001c5	b8 04 00 00 00	 mov	 eax, 4
  001ca	c1 e0 00	 shl	 eax, 0
  001cd	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 6601 : 		set_rgb_colour (MFD_COLOUR3,            176, 176, 176, 255);

  001d4	b8 04 00 00 00	 mov	 eax, 4
  001d9	d1 e0		 shl	 eax, 1
  001db	c6 80 02 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 176 ; 000000b0H
  001e2	b8 04 00 00 00	 mov	 eax, 4
  001e7	d1 e0		 shl	 eax, 1
  001e9	c6 80 01 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 176 ; 000000b0H
  001f0	b8 04 00 00 00	 mov	 eax, 4
  001f5	d1 e0		 shl	 eax, 1
  001f7	c6 80 00 00 00
	00 b0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 176 ; 000000b0H
  001fe	b8 04 00 00 00	 mov	 eax, 4
  00203	d1 e0		 shl	 eax, 1
  00205	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 6602 : 		set_rgb_colour (MFD_COLOUR4,            151, 151, 151, 255);

  0020c	b8 04 00 00 00	 mov	 eax, 4
  00211	6b c8 03	 imul	 ecx, eax, 3
  00214	c6 81 02 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 151 ; 00000097H
  0021b	b8 04 00 00 00	 mov	 eax, 4
  00220	6b c8 03	 imul	 ecx, eax, 3
  00223	c6 81 01 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 151 ; 00000097H
  0022a	b8 04 00 00 00	 mov	 eax, 4
  0022f	6b c8 03	 imul	 ecx, eax, 3
  00232	c6 81 00 00 00
	00 97		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 151 ; 00000097H
  00239	b8 04 00 00 00	 mov	 eax, 4
  0023e	6b c8 03	 imul	 ecx, eax, 3
  00241	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 6603 : 		set_rgb_colour (MFD_COLOUR5,            128, 128, 128, 255);

  00248	b8 04 00 00 00	 mov	 eax, 4
  0024d	c1 e0 02	 shl	 eax, 2
  00250	c6 80 02 00 00
	00 80		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 128 ; 00000080H
  00257	b8 04 00 00 00	 mov	 eax, 4
  0025c	c1 e0 02	 shl	 eax, 2
  0025f	c6 80 01 00 00
	00 80		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 128 ; 00000080H
  00266	b8 04 00 00 00	 mov	 eax, 4
  0026b	c1 e0 02	 shl	 eax, 2
  0026e	c6 80 00 00 00
	00 80		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 128 ; 00000080H
  00275	b8 04 00 00 00	 mov	 eax, 4
  0027a	c1 e0 02	 shl	 eax, 2
  0027d	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 6604 : 		set_rgb_colour (MFD_COLOUR6,             40,  40,  40, 255);

  00284	b8 04 00 00 00	 mov	 eax, 4
  00289	6b c8 05	 imul	 ecx, eax, 5
  0028c	c6 81 02 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 40 ; 00000028H
  00293	b8 04 00 00 00	 mov	 eax, 4
  00298	6b c8 05	 imul	 ecx, eax, 5
  0029b	c6 81 01 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 40 ; 00000028H
  002a2	b8 04 00 00 00	 mov	 eax, 4
  002a7	6b c8 05	 imul	 ecx, eax, 5
  002aa	c6 81 00 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 40 ; 00000028H
  002b1	b8 04 00 00 00	 mov	 eax, 4
  002b6	6b c8 05	 imul	 ecx, eax, 5
  002b9	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 6605 : 
; 6606 : 		set_rgb_colour (MFD_COLOUR_GREEN,        40, 220,  40, 255);

  002c0	b8 04 00 00 00	 mov	 eax, 4
  002c5	6b c8 0d	 imul	 ecx, eax, 13
  002c8	c6 81 02 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 40 ; 00000028H
  002cf	b8 04 00 00 00	 mov	 eax, 4
  002d4	6b c8 0d	 imul	 ecx, eax, 13
  002d7	c6 81 01 00 00
	00 dc		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 220 ; 000000dcH
  002de	b8 04 00 00 00	 mov	 eax, 4
  002e3	6b c8 0d	 imul	 ecx, eax, 13
  002e6	c6 81 00 00 00
	00 28		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 40 ; 00000028H
  002ed	b8 04 00 00 00	 mov	 eax, 4
  002f2	6b c8 0d	 imul	 ecx, eax, 13
  002f5	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 6607 : 		set_rgb_colour (MFD_COLOUR_DARK_GREEN,    0, 120,   0, 255);

  002fc	b8 04 00 00 00	 mov	 eax, 4
  00301	6b c8 0e	 imul	 ecx, eax, 14
  00304	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  0030b	b8 04 00 00 00	 mov	 eax, 4
  00310	6b c8 0e	 imul	 ecx, eax, 14
  00313	c6 81 01 00 00
	00 78		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 120 ; 00000078H
  0031a	b8 04 00 00 00	 mov	 eax, 4
  0031f	6b c8 0e	 imul	 ecx, eax, 14
  00322	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00329	b8 04 00 00 00	 mov	 eax, 4
  0032e	6b c8 0e	 imul	 ecx, eax, 14
  00331	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 6608 : 		set_rgb_colour (MFD_COLOUR_YELLOW,      220, 220,  20, 255);

  00338	b8 04 00 00 00	 mov	 eax, 4
  0033d	6b c8 0f	 imul	 ecx, eax, 15
  00340	c6 81 02 00 00
	00 dc		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 220 ; 000000dcH
  00347	b8 04 00 00 00	 mov	 eax, 4
  0034c	6b c8 0f	 imul	 ecx, eax, 15
  0034f	c6 81 01 00 00
	00 dc		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 220 ; 000000dcH
  00356	b8 04 00 00 00	 mov	 eax, 4
  0035b	6b c8 0f	 imul	 ecx, eax, 15
  0035e	c6 81 00 00 00
	00 14		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 20 ; 00000014H
  00365	b8 04 00 00 00	 mov	 eax, 4
  0036a	6b c8 0f	 imul	 ecx, eax, 15
  0036d	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 6609 : 		set_rgb_colour (MFD_COLOUR_LIGHT_BLUE,  192, 192, 255, 255);

  00374	b8 04 00 00 00	 mov	 eax, 4
  00379	c1 e0 04	 shl	 eax, 4
  0037c	c6 80 02 00 00
	00 c0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 192 ; 000000c0H
  00383	b8 04 00 00 00	 mov	 eax, 4
  00388	c1 e0 04	 shl	 eax, 4
  0038b	c6 80 01 00 00
	00 c0		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 192 ; 000000c0H
  00392	b8 04 00 00 00	 mov	 eax, 4
  00397	c1 e0 04	 shl	 eax, 4
  0039a	c6 80 00 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 255 ; 000000ffH
  003a1	b8 04 00 00 00	 mov	 eax, 4
  003a6	c1 e0 04	 shl	 eax, 4
  003a9	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 6610 : 		set_rgb_colour (MFD_COLOUR_BLUE,         20,  20, 180, 255);

  003b0	b8 04 00 00 00	 mov	 eax, 4
  003b5	6b c8 11	 imul	 ecx, eax, 17
  003b8	c6 81 02 00 00
	00 14		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 20 ; 00000014H
  003bf	b8 04 00 00 00	 mov	 eax, 4
  003c4	6b c8 11	 imul	 ecx, eax, 17
  003c7	c6 81 01 00 00
	00 14		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 20 ; 00000014H
  003ce	b8 04 00 00 00	 mov	 eax, 4
  003d3	6b c8 11	 imul	 ecx, eax, 17
  003d6	c6 81 00 00 00
	00 b4		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 180 ; 000000b4H
  003dd	b8 04 00 00 00	 mov	 eax, 4
  003e2	6b c8 11	 imul	 ecx, eax, 17
  003e5	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 6611 : 		set_rgb_colour (MFD_COLOUR_RED,         200,  50,  50, 255);

  003ec	b8 04 00 00 00	 mov	 eax, 4
  003f1	6b c8 12	 imul	 ecx, eax, 18
  003f4	c6 81 02 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 200 ; 000000c8H
  003fb	b8 04 00 00 00	 mov	 eax, 4
  00400	6b c8 12	 imul	 ecx, eax, 18
  00403	c6 81 01 00 00
	00 32		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 50 ; 00000032H
  0040a	b8 04 00 00 00	 mov	 eax, 4
  0040f	6b c8 12	 imul	 ecx, eax, 18
  00412	c6 81 00 00 00
	00 32		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 50 ; 00000032H
  00419	b8 04 00 00 00	 mov	 eax, 4
  0041e	6b c8 12	 imul	 ecx, eax, 18
  00421	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 6612 : 	}
; 6613 : 	else

  00428	e9 cc 02 00 00	 jmp	 $LN8@initialise
$LN7@initialise:

; 6614 : 	{
; 6615 : 		set_rgb_colour (MFD_COLOUR1,            255, 135,   0, 255);

  0042d	b8 04 00 00 00	 mov	 eax, 4
  00432	6b c8 00	 imul	 ecx, eax, 0
  00435	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  0043c	b8 04 00 00 00	 mov	 eax, 4
  00441	6b c8 00	 imul	 ecx, eax, 0
  00444	c6 81 01 00 00
	00 87		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 135 ; 00000087H
  0044b	b8 04 00 00 00	 mov	 eax, 4
  00450	6b c8 00	 imul	 ecx, eax, 0
  00453	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  0045a	b8 04 00 00 00	 mov	 eax, 4
  0045f	6b c8 00	 imul	 ecx, eax, 0
  00462	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 6616 : 		set_rgb_colour (MFD_COLOUR2,            255,  90,   0, 255);

  00469	b8 04 00 00 00	 mov	 eax, 4
  0046e	c1 e0 00	 shl	 eax, 0
  00471	c6 80 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 255 ; 000000ffH
  00478	b8 04 00 00 00	 mov	 eax, 4
  0047d	c1 e0 00	 shl	 eax, 0
  00480	c6 80 01 00 00
	00 5a		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 90 ; 0000005aH
  00487	b8 04 00 00 00	 mov	 eax, 4
  0048c	c1 e0 00	 shl	 eax, 0
  0048f	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00496	b8 04 00 00 00	 mov	 eax, 4
  0049b	c1 e0 00	 shl	 eax, 0
  0049e	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 6617 : 		set_rgb_colour (MFD_COLOUR3,            200,  65,   0, 255);

  004a5	b8 04 00 00 00	 mov	 eax, 4
  004aa	d1 e0		 shl	 eax, 1
  004ac	c6 80 02 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 200 ; 000000c8H
  004b3	b8 04 00 00 00	 mov	 eax, 4
  004b8	d1 e0		 shl	 eax, 1
  004ba	c6 80 01 00 00
	00 41		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 65 ; 00000041H
  004c1	b8 04 00 00 00	 mov	 eax, 4
  004c6	d1 e0		 shl	 eax, 1
  004c8	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  004cf	b8 04 00 00 00	 mov	 eax, 4
  004d4	d1 e0		 shl	 eax, 1
  004d6	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 6618 : 		set_rgb_colour (MFD_COLOUR4,            130,  50,   0, 255);

  004dd	b8 04 00 00 00	 mov	 eax, 4
  004e2	6b c8 03	 imul	 ecx, eax, 3
  004e5	c6 81 02 00 00
	00 82		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 130 ; 00000082H
  004ec	b8 04 00 00 00	 mov	 eax, 4
  004f1	6b c8 03	 imul	 ecx, eax, 3
  004f4	c6 81 01 00 00
	00 32		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 50 ; 00000032H
  004fb	b8 04 00 00 00	 mov	 eax, 4
  00500	6b c8 03	 imul	 ecx, eax, 3
  00503	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  0050a	b8 04 00 00 00	 mov	 eax, 4
  0050f	6b c8 03	 imul	 ecx, eax, 3
  00512	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 6619 : 		set_rgb_colour (MFD_COLOUR5,            100,  50,   0, 255);

  00519	b8 04 00 00 00	 mov	 eax, 4
  0051e	c1 e0 02	 shl	 eax, 2
  00521	c6 80 02 00 00
	00 64		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 100 ; 00000064H
  00528	b8 04 00 00 00	 mov	 eax, 4
  0052d	c1 e0 02	 shl	 eax, 2
  00530	c6 80 01 00 00
	00 32		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 50 ; 00000032H
  00537	b8 04 00 00 00	 mov	 eax, 4
  0053c	c1 e0 02	 shl	 eax, 2
  0053f	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00546	b8 04 00 00 00	 mov	 eax, 4
  0054b	c1 e0 02	 shl	 eax, 2
  0054e	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 6620 : 		set_rgb_colour (MFD_COLOUR6,             50,  25,   0, 255);

  00555	b8 04 00 00 00	 mov	 eax, 4
  0055a	6b c8 05	 imul	 ecx, eax, 5
  0055d	c6 81 02 00 00
	00 32		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 50 ; 00000032H
  00564	b8 04 00 00 00	 mov	 eax, 4
  00569	6b c8 05	 imul	 ecx, eax, 5
  0056c	c6 81 01 00 00
	00 19		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 25 ; 00000019H
  00573	b8 04 00 00 00	 mov	 eax, 4
  00578	6b c8 05	 imul	 ecx, eax, 5
  0057b	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00582	b8 04 00 00 00	 mov	 eax, 4
  00587	6b c8 05	 imul	 ecx, eax, 5
  0058a	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 6621 : 
; 6622 : 		set_rgb_colour (MFD_COLOUR_GREEN,       200,  65,   0, 255);

  00591	b8 04 00 00 00	 mov	 eax, 4
  00596	6b c8 0d	 imul	 ecx, eax, 13
  00599	c6 81 02 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 200 ; 000000c8H
  005a0	b8 04 00 00 00	 mov	 eax, 4
  005a5	6b c8 0d	 imul	 ecx, eax, 13
  005a8	c6 81 01 00 00
	00 41		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 65 ; 00000041H
  005af	b8 04 00 00 00	 mov	 eax, 4
  005b4	6b c8 0d	 imul	 ecx, eax, 13
  005b7	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  005be	b8 04 00 00 00	 mov	 eax, 4
  005c3	6b c8 0d	 imul	 ecx, eax, 13
  005c6	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 6623 : 		set_rgb_colour (MFD_COLOUR_DARK_GREEN,  100,  50,   0, 255);

  005cd	b8 04 00 00 00	 mov	 eax, 4
  005d2	6b c8 0e	 imul	 ecx, eax, 14
  005d5	c6 81 02 00 00
	00 64		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 100 ; 00000064H
  005dc	b8 04 00 00 00	 mov	 eax, 4
  005e1	6b c8 0e	 imul	 ecx, eax, 14
  005e4	c6 81 01 00 00
	00 32		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 50 ; 00000032H
  005eb	b8 04 00 00 00	 mov	 eax, 4
  005f0	6b c8 0e	 imul	 ecx, eax, 14
  005f3	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  005fa	b8 04 00 00 00	 mov	 eax, 4
  005ff	6b c8 0e	 imul	 ecx, eax, 14
  00602	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 6624 : 		set_rgb_colour (MFD_COLOUR_YELLOW,      255, 135,   0, 255);

  00609	b8 04 00 00 00	 mov	 eax, 4
  0060e	6b c8 0f	 imul	 ecx, eax, 15
  00611	c6 81 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 255 ; 000000ffH
  00618	b8 04 00 00 00	 mov	 eax, 4
  0061d	6b c8 0f	 imul	 ecx, eax, 15
  00620	c6 81 01 00 00
	00 87		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 135 ; 00000087H
  00627	b8 04 00 00 00	 mov	 eax, 4
  0062c	6b c8 0f	 imul	 ecx, eax, 15
  0062f	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00636	b8 04 00 00 00	 mov	 eax, 4
  0063b	6b c8 0f	 imul	 ecx, eax, 15
  0063e	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 6625 : 		set_rgb_colour (MFD_COLOUR_LIGHT_BLUE,  255, 135,   0, 255);

  00645	b8 04 00 00 00	 mov	 eax, 4
  0064a	c1 e0 04	 shl	 eax, 4
  0064d	c6 80 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 255 ; 000000ffH
  00654	b8 04 00 00 00	 mov	 eax, 4
  00659	c1 e0 04	 shl	 eax, 4
  0065c	c6 80 01 00 00
	00 87		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 135 ; 00000087H
  00663	b8 04 00 00 00	 mov	 eax, 4
  00668	c1 e0 04	 shl	 eax, 4
  0066b	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  00672	b8 04 00 00 00	 mov	 eax, 4
  00677	c1 e0 04	 shl	 eax, 4
  0067a	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 6626 : 		set_rgb_colour (MFD_COLOUR_BLUE,        200,  65,   0, 255);

  00681	b8 04 00 00 00	 mov	 eax, 4
  00686	6b c8 11	 imul	 ecx, eax, 17
  00689	c6 81 02 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 200 ; 000000c8H
  00690	b8 04 00 00 00	 mov	 eax, 4
  00695	6b c8 11	 imul	 ecx, eax, 17
  00698	c6 81 01 00 00
	00 41		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 65 ; 00000041H
  0069f	b8 04 00 00 00	 mov	 eax, 4
  006a4	6b c8 11	 imul	 ecx, eax, 17
  006a7	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  006ae	b8 04 00 00 00	 mov	 eax, 4
  006b3	6b c8 11	 imul	 ecx, eax, 17
  006b6	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 6627 : 		set_rgb_colour (MFD_COLOUR_RED,         200,  65,   0, 255);

  006bd	b8 04 00 00 00	 mov	 eax, 4
  006c2	6b c8 12	 imul	 ecx, eax, 18
  006c5	c6 81 02 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 200 ; 000000c8H
  006cc	b8 04 00 00 00	 mov	 eax, 4
  006d1	6b c8 12	 imul	 ecx, eax, 18
  006d4	c6 81 01 00 00
	00 41		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 65 ; 00000041H
  006db	b8 04 00 00 00	 mov	 eax, 4
  006e0	6b c8 12	 imul	 ecx, eax, 18
  006e3	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  006ea	b8 04 00 00 00	 mov	 eax, 4
  006ef	6b c8 12	 imul	 ecx, eax, 18
  006f2	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH
$LN8@initialise:

; 6628 : 	}
; 6629 : 
; 6630 : 	set_rgb_colour (MFD_CONTOUR_COLOUR,     200,  35,   0, 255);

  006f9	b8 04 00 00 00	 mov	 eax, 4
  006fe	6b c8 06	 imul	 ecx, eax, 6
  00701	c6 81 02 00 00
	00 c8		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 200 ; 000000c8H
  00708	b8 04 00 00 00	 mov	 eax, 4
  0070d	6b c8 06	 imul	 ecx, eax, 6
  00710	c6 81 01 00 00
	00 23		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 35 ; 00000023H
  00717	b8 04 00 00 00	 mov	 eax, 4
  0071c	6b c8 06	 imul	 ecx, eax, 6
  0071f	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00726	b8 04 00 00 00	 mov	 eax, 4
  0072b	6b c8 06	 imul	 ecx, eax, 6
  0072e	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 6631 : 	set_rgb_colour (MFD_RIVER_COLOUR,        50,  75, 225, 255);

  00735	b8 04 00 00 00	 mov	 eax, 4
  0073a	6b c8 07	 imul	 ecx, eax, 7
  0073d	c6 81 02 00 00
	00 32		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 50 ; 00000032H
  00744	b8 04 00 00 00	 mov	 eax, 4
  00749	6b c8 07	 imul	 ecx, eax, 7
  0074c	c6 81 01 00 00
	00 4b		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 75 ; 0000004bH
  00753	b8 04 00 00 00	 mov	 eax, 4
  00758	6b c8 07	 imul	 ecx, eax, 7
  0075b	c6 81 00 00 00
	00 e1		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 225 ; 000000e1H
  00762	b8 04 00 00 00	 mov	 eax, 4
  00767	6b c8 07	 imul	 ecx, eax, 7
  0076a	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 6632 : 	set_rgb_colour (MFD_ROAD_COLOUR,        255, 225,   0, 255);

  00771	b8 04 00 00 00	 mov	 eax, 4
  00776	c1 e0 03	 shl	 eax, 3
  00779	c6 80 02 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+2], 255 ; 000000ffH
  00780	b8 04 00 00 00	 mov	 eax, 4
  00785	c1 e0 03	 shl	 eax, 3
  00788	c6 80 01 00 00
	00 e1		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+1], 225 ; 000000e1H
  0078f	b8 04 00 00 00	 mov	 eax, 4
  00794	c1 e0 03	 shl	 eax, 3
  00797	c6 80 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax], 0
  0079e	b8 04 00 00 00	 mov	 eax, 4
  007a3	c1 e0 03	 shl	 eax, 3
  007a6	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 6633 : 	set_rgb_colour (MFD_BACKGROUND_COLOUR,   20,  20,  30, 255);

  007ad	b8 04 00 00 00	 mov	 eax, 4
  007b2	6b c8 09	 imul	 ecx, eax, 9
  007b5	c6 81 02 00 00
	00 14		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 20 ; 00000014H
  007bc	b8 04 00 00 00	 mov	 eax, 4
  007c1	6b c8 09	 imul	 ecx, eax, 9
  007c4	c6 81 01 00 00
	00 14		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 20 ; 00000014H
  007cb	b8 04 00 00 00	 mov	 eax, 4
  007d0	6b c8 09	 imul	 ecx, eax, 9
  007d3	c6 81 00 00 00
	00 1e		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 30 ; 0000001eH
  007da	b8 04 00 00 00	 mov	 eax, 4
  007df	6b c8 09	 imul	 ecx, eax, 9
  007e2	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 6634 : 	set_rgb_colour (MFD_CLEAR_COLOUR,         0,   0,   0, 255);

  007e9	b8 04 00 00 00	 mov	 eax, 4
  007ee	6b c8 0a	 imul	 ecx, eax, 10
  007f1	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  007f8	b8 04 00 00 00	 mov	 eax, 4
  007fd	6b c8 0a	 imul	 ecx, eax, 10
  00800	c6 81 01 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+1], 0
  00807	b8 04 00 00 00	 mov	 eax, 4
  0080c	6b c8 0a	 imul	 ecx, eax, 10
  0080f	c6 81 00 00 00
	00 00		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx], 0
  00816	b8 04 00 00 00	 mov	 eax, 4
  0081b	6b c8 0a	 imul	 ecx, eax, 10
  0081e	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?mfd_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 6635 : 
; 6636 : 	set_rgb_colour (TEXT_COLOUR1,             0, 243,  97, 255);

  00825	b8 04 00 00 00	 mov	 eax, 4
  0082a	6b c8 00	 imul	 ecx, eax, 0
  0082d	c6 81 02 00 00
	00 00		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx+2], 0
  00834	b8 04 00 00 00	 mov	 eax, 4
  00839	6b c8 00	 imul	 ecx, eax, 0
  0083c	c6 81 01 00 00
	00 f3		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx+1], 243 ; 000000f3H
  00843	b8 04 00 00 00	 mov	 eax, 4
  00848	6b c8 00	 imul	 ecx, eax, 0
  0084b	c6 81 00 00 00
	00 61		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx], 97 ; 00000061H
  00852	b8 04 00 00 00	 mov	 eax, 4
  00857	6b c8 00	 imul	 ecx, eax, 0
  0085a	c6 81 03 00 00
	00 ff		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[ecx+3], 255 ; 000000ffH

; 6637 : 	set_rgb_colour (TEXT_BACKGROUND_COLOUR,   0,  60,  34, 255);

  00861	b8 04 00 00 00	 mov	 eax, 4
  00866	c1 e0 00	 shl	 eax, 0
  00869	c6 80 02 00 00
	00 00		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax+2], 0
  00870	b8 04 00 00 00	 mov	 eax, 4
  00875	c1 e0 00	 shl	 eax, 0
  00878	c6 80 01 00 00
	00 3c		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax+1], 60 ; 0000003cH
  0087f	b8 04 00 00 00	 mov	 eax, 4
  00884	c1 e0 00	 shl	 eax, 0
  00887	c6 80 00 00 00
	00 22		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax], 34 ; 00000022H
  0088e	b8 04 00 00 00	 mov	 eax, 4
  00893	c1 e0 00	 shl	 eax, 0
  00896	c6 80 03 00 00
	00 ff		 mov	 BYTE PTR ?text_display_colours@@3PAUREAL_COLOUR@@A[eax+3], 255 ; 000000ffH

; 6638 : 
; 6639 :     set_rgb_colour (clear_mfd_colour, 255, 255, 255, 0);

  0089d	c6 05 02 00 00
	00 ff		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A+2, 255 ; 000000ffH
  008a4	c6 05 01 00 00
	00 ff		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A+1, 255 ; 000000ffH
  008ab	c6 05 00 00 00
	00 ff		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A, 255 ; 000000ffH
  008b2	c6 05 03 00 00
	00 00		 mov	 BYTE PTR ?clear_mfd_colour@@3UREAL_COLOUR@@A+3, 0

; 6640 : 
; 6641 : 	////////////////////////////////////////
; 6642 : 	//
; 6643 : 	// weapon display lines
; 6644 : 	//
; 6645 : 	////////////////////////////////////////
; 6646 : 
; 6647 : 	num_weapon_line_points = get_object_3d_number_of_poly_lines (OBJECT_3D_HOKUM_COCKPIT_WEAPONS_DISPLAY);

  008b9	68 e6 09 00 00	 push	 2534			; 000009e6H
  008be	e8 00 00 00 00	 call	 ?get_object_3d_number_of_poly_lines@@YGHH@Z ; get_object_3d_number_of_poly_lines
  008c3	a3 00 00 00 00	 mov	 DWORD PTR ?num_weapon_line_points@@3HA, eax

; 6648 : 
; 6649 : 	ASSERT (num_weapon_line_points > 0);

  008c8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?num_weapon_line_points@@3HA, 0
  008cf	7f 18		 jg	 SHORT $LN9@initialise
  008d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_ka50_mfd@@YGXXZ@4JA
  008d6	83 c0 5d	 add	 eax, 93			; 0000005dH
  008d9	50		 push	 eax
  008da	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  008df	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@ICCLDILN@num_weapon_line_points?5?$DO?50@
  008e4	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN9@initialise:

; 6650 : 
; 6651 : 	ASSERT ((num_weapon_line_points & 1) == 0);

  008e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?num_weapon_line_points@@3HA
  008ee	83 e0 01	 and	 eax, 1
  008f1	74 18		 je	 SHORT $LN10@initialise
  008f3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??initialise_ka50_mfd@@YGXXZ@4JA
  008f8	83 c0 5f	 add	 eax, 95			; 0000005fH
  008fb	50		 push	 eax
  008fc	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@OHNJGAC@c?3?2users?2nhv90?2projects?2eech?2ap@
  00901	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@DECEGKIO@?$CInum_weapon_line_points?5?$CG?51?$CJ?5?$DN?$DN@
  00906	e8 00 00 00 00	 call	 ?process_assert@@YGXPBD0H@Z ; process_assert
$LN10@initialise:

; 6652 : 
; 6653 : 	weapon_line_points = (vec3d *) safe_malloc (sizeof (vec3d) * num_weapon_line_points);

  0090b	6b 05 00 00 00
	00 0c		 imul	 eax, DWORD PTR ?num_weapon_line_points@@3HA, 12
  00912	50		 push	 eax
  00913	e8 00 00 00 00	 call	 ?safe_malloc_memory@@YGPAXI@Z ; safe_malloc_memory
  00918	a3 00 00 00 00	 mov	 DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A, eax

; 6654 : 
; 6655 : 	get_object_3d_poly_line_data (OBJECT_3D_HOKUM_COCKPIT_WEAPONS_DISPLAY, weapon_line_points);

  0091d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A
  00922	50		 push	 eax
  00923	68 e6 09 00 00	 push	 2534			; 000009e6H
  00928	e8 00 00 00 00	 call	 ?get_object_3d_poly_line_data@@YGXHPAUVEC3D@@@Z ; get_object_3d_poly_line_data

; 6656 : 
; 6657 : 	{
; 6658 : 		int
; 6659 : 			i;
; 6660 : 
; 6661 : 		for (i = 0; i < num_weapon_line_points; i++)

  0092d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00934	eb 09		 jmp	 SHORT $LN4@initialise
$LN2@initialise:
  00936	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  00939	83 c0 01	 add	 eax, 1
  0093c	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@initialise:
  0093f	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  00942	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?num_weapon_line_points@@3HA
  00948	0f 8d 9d 00 00
	00		 jge	 $LN3@initialise

; 6662 : 		{
; 6663 : 			weapon_line_points[i].x *= WEAPON_LINE_POINT_SCALE;

  0094e	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$1[ebp], 12
  00952	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A
  00958	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0095d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  00965	6b 55 fc 0c	 imul	 edx, DWORD PTR _i$1[ebp], 12
  00969	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A
  0096e	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 6664 : 			weapon_line_points[i].y *= WEAPON_LINE_POINT_SCALE;

  00973	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$1[ebp], 12
  00977	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A
  0097d	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [ecx+eax+4]
  00983	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  0098b	6b 55 fc 0c	 imul	 edx, DWORD PTR _i$1[ebp], 12
  0098f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A
  00994	f3 0f 11 44 10
	04		 movss	 DWORD PTR [eax+edx+4], xmm0

; 6665 : 
; 6666 : 			weapon_line_points[i].x += WEAPON_LINE_POINT_X_TRANSLATE;

  0099a	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$1[ebp], 12
  0099e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A
  009a4	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  009a9	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@00000000
  009b1	6b 55 fc 0c	 imul	 edx, DWORD PTR _i$1[ebp], 12
  009b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A
  009ba	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 6667 : 			weapon_line_points[i].y += WEAPON_LINE_POINT_Y_TRANSLATE;

  009bf	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$1[ebp], 12
  009c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A
  009c9	f3 0f 10 44 01
	04		 movss	 xmm0, DWORD PTR [ecx+eax+4]
  009cf	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f133333
  009d7	6b 55 fc 0c	 imul	 edx, DWORD PTR _i$1[ebp], 12
  009db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?weapon_line_points@@3PAUVEC3D@@A
  009e0	f3 0f 11 44 10
	04		 movss	 DWORD PTR [eax+edx+4], xmm0

; 6668 : 		}

  009e6	e9 4b ff ff ff	 jmp	 $LN2@initialise
$LN3@initialise:

; 6669 : 	}
; 6670 : 
; 6671 : 	initalize_horizon_mask(LARGE_MFD_VIEWPORT_SIZE * 0.6, &main_horizon_mask);

  009eb	68 00 00 00 00	 push	 OFFSET ?main_horizon_mask@@3PADA
  009f0	68 99 00 00 00	 push	 153			; 00000099H
  009f5	e8 00 00 00 00	 call	 ?initalize_horizon_mask@@YGXHPAPAD@Z ; initalize_horizon_mask

; 6672 : 
; 6673 : //VJ 030423 TSd render mod
; 6674 : 
; 6675 :    Initialise_TSD_render_terrain();

  009fa	e8 00 00 00 00	 call	 ?Initialise_TSD_render_terrain@@YGXXZ ; Initialise_TSD_render_terrain

; 6676 : 
; 6677 : }

  009ff	5f		 pop	 edi
  00a00	5e		 pop	 esi
  00a01	5b		 pop	 ebx
  00a02	8b e5		 mov	 esp, ebp
  00a04	5d		 pop	 ebp
  00a05	c3		 ret	 0
?initialise_ka50_mfd@@YGXXZ ENDP			; initialise_ka50_mfd
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?tan@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?tan@@YGMM@Z PROC					; tan, COMDAT

; 299  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 300  : 	return (_CSTD tanf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _tanf
  00019	83 c4 04	 add	 esp, 4

; 301  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?tan@@YGMM@Z ENDP					; tan
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sqrt@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sqrt@@YGMM@Z PROC					; sqrt, COMDAT

; 294  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 295  : 	return (_CSTD sqrtf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sqrtf
  00019	83 c4 04	 add	 esp, 4

; 296  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sqrt@@YGMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?sin@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sin@@YGMM@Z PROC					; sin, COMDAT

; 284  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 285  : 	return (_CSTD sinf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _sinf
  00019	83 c4 04	 add	 esp, 4

; 286  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?sin@@YGMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fmod@@YGMMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
__Yx$ = 12						; size = 4
?fmod@@YGMMM@Z PROC					; fmod, COMDAT

; 143  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 144  : 	return (_CSTD fmodf(_Xx, _Yx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _fmodf
  00024	83 c4 08	 add	 esp, 8

; 145  : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?fmod@@YGMMM@Z ENDP					; fmod
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?fabs@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?fabs@@YGMM@Z PROC					; fabs, COMDAT

; 112  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 113  : 	return (_CSTD fabsf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _fabsf
  00019	83 c4 04	 add	 esp, 4

; 114  : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?fabs@@YGMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?cos@@YGMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?cos@@YGMM@Z PROC					; cos, COMDAT

; 77   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 78   : 	return (_CSTD cosf(_Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	e8 00 00 00 00	 call	 _cosf
  00019	83 c4 04	 add	 esp, 4

; 79   : 	}

  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
  0001e	5b		 pop	 ebx
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?cos@@YGMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\cmath
;	COMDAT ?atan2@@YGMMM@Z
_TEXT	SEGMENT
__Yx$ = 8						; size = 4
__Xx$ = 12						; size = 4
?atan2@@YGMMM@Z PROC					; atan2, COMDAT

; 56   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 57   : 	return (_CSTD atan2f(_Yx, _Xx));

  00009	51		 push	 ecx
  0000a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __Xx$[ebp]
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	51		 push	 ecx
  00015	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Yx$[ebp]
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	e8 00 00 00 00	 call	 _atan2f
  00024	83 c4 08	 add	 esp, 8

; 58   : 	}

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?atan2@@YGMMM@Z ENDP					; atan2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _tanf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_tanf	PROC						; COMDAT

; 764  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 765  :             return (float)tan(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _tan
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 766  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_tanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 760  :             return (float)sqrt(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sqrt
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 761  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 749  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 750  :             return (float)sin(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _sin
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 751  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fmodf
_TEXT	SEGMENT
tv74 = -68						; size = 4
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
_fmodf	PROC						; COMDAT

; 690  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 691  :             return (float)fmod(_X, _Y);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _fmod
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 692  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_fmodf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 671  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 672  :             return (float)fabs(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _fabs
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 673  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -68						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 648  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 649  :             return (float)cos(_X);

  00009	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 _cos
  0001b	83 c4 08	 add	 esp, 8
  0001e	d9 5d bc	 fstp	 DWORD PTR tv71[ebp]
  00021	d9 45 bc	 fld	 DWORD PTR tv71[ebp]

; 650  :         }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv74 = -68						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 633  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 634  :             return (float)atan2(_Y, _X);

  00009	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00016	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0001b	83 ec 08	 sub	 esp, 8
  0001e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00023	e8 00 00 00 00	 call	 _atan2
  00028	83 c4 10	 add	 esp, 16			; 00000010H
  0002b	d9 5d bc	 fstp	 DWORD PTR tv74[ebp]
  0002e	d9 45 bc	 fld	 DWORD PTR tv74[ebp]

; 635  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00009	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0000c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00012	50		 push	 eax
  00013	6a 00		 push	 0
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 __vsprintf_l
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00009	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	6a ff		 push	 -1
  00017	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __vsnprintf_l
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -72						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00009	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00014	52		 push	 edx
  00015	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	83 ca 01	 or	 edx, 1
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00032	83 c4 1c	 add	 esp, 28			; 0000001cH
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00038	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0003c	7d 09		 jge	 SHORT $LN3@vsnprintf_
  0003e	c7 45 b8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00045	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0004a	89 45 b8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0004d	8b 45 b8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0000e	5f		 pop	 edi
  0000f	5e		 pop	 esi
  00010	5b		 pop	 ebx
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
